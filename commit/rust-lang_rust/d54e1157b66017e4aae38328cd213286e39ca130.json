{"sha": "d54e1157b66017e4aae38328cd213286e39ca130", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NGUxMTU3YjY2MDE3ZTRhYWUzODMyOGNkMjEzMjg2ZTM5Y2ExMzA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-07T08:24:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-07T08:24:02Z"}, "message": "Merge #7889\n\n7889: Make group imports configurable r=lnicola a=asv1\n\n\n\nCo-authored-by: asv <asv7c2@gmail.com>", "tree": {"sha": "f7cd48d085b2bad9b8cdc528b677cdd8cfa2d0ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7cd48d085b2bad9b8cdc528b677cdd8cfa2d0ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d54e1157b66017e4aae38328cd213286e39ca130", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgRI2iCRBK7hj4Ov3rIwAAdHIIAEbf2XhOO6gj7Swatl1n7VTw\niUygShf+aYXn2Zjvm0iOiOccMQULAdvCm/M74EUcMriFft0rbcSIdebGGahDs9l/\nRyhWm/Z20PSCdJp3OaX9KlMLLxcGmMMjThs2htpxl/05IteoBoQhrRtJ7fc+yuxT\nG66ZW4ngX6cx1VDnY3mdY+IBXlO8dBXWkTAOrvSyTpL2t0UOlmskN9QdvNFn4Wly\neUt1mSbFP5OVf6DnRZHbJsyEBkJyDY1lM763KbILltnXY00gcr+soWBpjigvdMFG\nrSHCAi9et1vIAxuiZgq6C19hX5grusaNCuCgJuTMYzclDhES9DkVqus+njQiL+c=\n=IJXE\n-----END PGP SIGNATURE-----\n", "payload": "tree f7cd48d085b2bad9b8cdc528b677cdd8cfa2d0ef\nparent 708ec9821f9bcfeafbc82f8260c264fb32b8b750\nparent 96fc01a30b88d95619b26fd96c58627dd54cb339\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615105442 +0000\ncommitter GitHub <noreply@github.com> 1615105442 +0000\n\nMerge #7889\n\n7889: Make group imports configurable r=lnicola a=asv1\n\n\n\nCo-authored-by: asv <asv7c2@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d54e1157b66017e4aae38328cd213286e39ca130", "html_url": "https://github.com/rust-lang/rust/commit/d54e1157b66017e4aae38328cd213286e39ca130", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d54e1157b66017e4aae38328cd213286e39ca130/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "708ec9821f9bcfeafbc82f8260c264fb32b8b750", "url": "https://api.github.com/repos/rust-lang/rust/commits/708ec9821f9bcfeafbc82f8260c264fb32b8b750", "html_url": "https://github.com/rust-lang/rust/commit/708ec9821f9bcfeafbc82f8260c264fb32b8b750"}, {"sha": "96fc01a30b88d95619b26fd96c58627dd54cb339", "url": "https://api.github.com/repos/rust-lang/rust/commits/96fc01a30b88d95619b26fd96c58627dd54cb339", "html_url": "https://github.com/rust-lang/rust/commit/96fc01a30b88d95619b26fd96c58627dd54cb339"}], "stats": {"total": 102, "additions": 79, "deletions": 23}, "files": [{"sha": "1422224ac0fc8bf9dd0ccfd7c65513cb1567418d", "filename": "crates/ide_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d54e1157b66017e4aae38328cd213286e39ca130/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54e1157b66017e4aae38328cd213286e39ca130/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=d54e1157b66017e4aae38328cd213286e39ca130", "patch": "@@ -99,8 +99,7 @@ pub(crate) fn auto_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n             format!(\"Import `{}`\", &import),\n             range,\n             |builder| {\n-                let rewriter =\n-                    insert_use(&scope, mod_path_to_ast(&import), ctx.config.insert_use.merge);\n+                let rewriter = insert_use(&scope, mod_path_to_ast(&import), ctx.config.insert_use);\n                 builder.rewrite(rewriter);\n             },\n         );"}, {"sha": "4f0422e960dc834dd6c9c94e01cc2877399f1ef0", "filename": "crates/ide_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d54e1157b66017e4aae38328cd213286e39ca130/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54e1157b66017e4aae38328cd213286e39ca130/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=d54e1157b66017e4aae38328cd213286e39ca130", "patch": "@@ -154,7 +154,7 @@ fn insert_import(\n         mod_path.pop_segment();\n         mod_path.push_segment(variant_hir_name.clone());\n         let scope = ImportScope::find_insert_use_container(scope_node, &ctx.sema)?;\n-        *rewriter += insert_use(&scope, mod_path_to_ast(&mod_path), ctx.config.insert_use.merge);\n+        *rewriter += insert_use(&scope, mod_path_to_ast(&mod_path), ctx.config.insert_use);\n     }\n     Some(())\n }"}, {"sha": "55481af347dfa6121341a8347dba66a4da71584d", "filename": "crates/ide_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d54e1157b66017e4aae38328cd213286e39ca130/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54e1157b66017e4aae38328cd213286e39ca130/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=d54e1157b66017e4aae38328cd213286e39ca130", "patch": "@@ -44,7 +44,7 @@ pub(crate) fn replace_qualified_name_with_use(\n             let mut rewriter = SyntaxRewriter::default();\n             shorten_paths(&mut rewriter, syntax.clone(), &path);\n             if let Some(ref import_scope) = ImportScope::from(syntax.clone()) {\n-                rewriter += insert_use(import_scope, path, ctx.config.insert_use.merge);\n+                rewriter += insert_use(import_scope, path, ctx.config.insert_use);\n                 builder.rewrite(rewriter);\n             }\n         },"}, {"sha": "a7a923beb416f2c5ff22e9c2551805f9ba31aaff", "filename": "crates/ide_assists/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d54e1157b66017e4aae38328cd213286e39ca130/crates%2Fide_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54e1157b66017e4aae38328cd213286e39ca130/crates%2Fide_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests.rs?ref=d54e1157b66017e4aae38328cd213286e39ca130", "patch": "@@ -23,6 +23,7 @@ pub(crate) const TEST_CONFIG: AssistConfig = AssistConfig {\n     insert_use: InsertUseConfig {\n         merge: Some(MergeBehavior::Full),\n         prefix_kind: hir::PrefixKind::Plain,\n+        group: true,\n     },\n };\n "}, {"sha": "9b2435c4b6c414018355a6693f3640ef370b9cb3", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d54e1157b66017e4aae38328cd213286e39ca130/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54e1157b66017e4aae38328cd213286e39ca130/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=d54e1157b66017e4aae38328cd213286e39ca130", "patch": "@@ -5,7 +5,7 @@ use std::fmt;\n use hir::{Documentation, ModPath, Mutability};\n use ide_db::{\n     helpers::{\n-        insert_use::{self, ImportScope, MergeBehavior},\n+        insert_use::{self, ImportScope, InsertUseConfig},\n         mod_path_to_ast, SnippetCap,\n     },\n     SymbolKind,\n@@ -280,14 +280,11 @@ pub struct ImportEdit {\n impl ImportEdit {\n     /// Attempts to insert the import to the given scope, producing a text edit.\n     /// May return no edit in edge cases, such as scope already containing the import.\n-    pub fn to_text_edit(&self, merge_behavior: Option<MergeBehavior>) -> Option<TextEdit> {\n+    pub fn to_text_edit(&self, cfg: InsertUseConfig) -> Option<TextEdit> {\n         let _p = profile::span(\"ImportEdit::to_text_edit\");\n \n-        let rewriter = insert_use::insert_use(\n-            &self.import_scope,\n-            mod_path_to_ast(&self.import_path),\n-            merge_behavior,\n-        );\n+        let rewriter =\n+            insert_use::insert_use(&self.import_scope, mod_path_to_ast(&self.import_path), cfg);\n         let old_ast = rewriter.rewrite_root()?;\n         let mut import_insert = TextEdit::builder();\n         algo::diff(&old_ast, &rewriter.rewrite(&old_ast)).into_text_edit(&mut import_insert);"}, {"sha": "b0b809791e3579e5fcc4d2ddad1456806483e94e", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d54e1157b66017e4aae38328cd213286e39ca130/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54e1157b66017e4aae38328cd213286e39ca130/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=d54e1157b66017e4aae38328cd213286e39ca130", "patch": "@@ -156,7 +156,7 @@ pub fn resolve_completion_edits(\n         .find(|mod_path| mod_path.to_string() == full_import_path)?;\n \n     ImportEdit { import_path, import_scope, import_for_trait_assoc_item }\n-        .to_text_edit(config.insert_use.merge)\n+        .to_text_edit(config.insert_use)\n         .map(|edit| vec![edit])\n }\n "}, {"sha": "9da84403106c0353ccd899e18605e7add8d9a69d", "filename": "crates/ide_completion/src/test_utils.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d54e1157b66017e4aae38328cd213286e39ca130/crates%2Fide_completion%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54e1157b66017e4aae38328cd213286e39ca130/crates%2Fide_completion%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftest_utils.rs?ref=d54e1157b66017e4aae38328cd213286e39ca130", "patch": "@@ -25,6 +25,7 @@ pub(crate) const TEST_CONFIG: CompletionConfig = CompletionConfig {\n     insert_use: InsertUseConfig {\n         merge: Some(MergeBehavior::Full),\n         prefix_kind: PrefixKind::Plain,\n+        group: true,\n     },\n };\n \n@@ -119,7 +120,7 @@ pub(crate) fn check_edit_with_config(\n \n     let mut combined_edit = completion.text_edit().to_owned();\n     if let Some(import_text_edit) =\n-        completion.import_to_add().and_then(|edit| edit.to_text_edit(config.insert_use.merge))\n+        completion.import_to_add().and_then(|edit| edit.to_text_edit(config.insert_use))\n     {\n         combined_edit.union(import_text_edit).expect(\n             \"Failed to apply completion resolve changes: change ranges overlap, but should not\","}, {"sha": "f52aee34455e271837bf737844733b0a4e67f701", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d54e1157b66017e4aae38328cd213286e39ca130/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54e1157b66017e4aae38328cd213286e39ca130/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=d54e1157b66017e4aae38328cd213286e39ca130", "patch": "@@ -19,6 +19,7 @@ use test_utils::mark;\n pub struct InsertUseConfig {\n     pub merge: Option<MergeBehavior>,\n     pub prefix_kind: hir::PrefixKind,\n+    pub group: bool,\n }\n \n #[derive(Debug, Clone)]\n@@ -99,13 +100,13 @@ fn is_inner_comment(token: SyntaxToken) -> bool {\n pub fn insert_use<'a>(\n     scope: &ImportScope,\n     path: ast::Path,\n-    merge: Option<MergeBehavior>,\n+    cfg: InsertUseConfig,\n ) -> SyntaxRewriter<'a> {\n     let _p = profile::span(\"insert_use\");\n     let mut rewriter = SyntaxRewriter::default();\n     let use_item = make::use_(None, make::use_tree(path.clone(), None, None, false));\n     // merge into existing imports if possible\n-    if let Some(mb) = merge {\n+    if let Some(mb) = cfg.merge {\n         for existing_use in scope.as_syntax_node().children().filter_map(ast::Use::cast) {\n             if let Some(merged) = try_merge_imports(&existing_use, &use_item, mb) {\n                 rewriter.replace(existing_use.syntax(), merged.syntax());\n@@ -116,7 +117,7 @@ pub fn insert_use<'a>(\n \n     // either we weren't allowed to merge or there is no import that fits the merge conditions\n     // so look for the place we have to insert to\n-    let (insert_position, add_blank) = find_insert_position(scope, path);\n+    let (insert_position, add_blank) = find_insert_position(scope, path, cfg.group);\n \n     let indent = if let ident_level @ 1..=usize::MAX = scope.indent_level().0 as usize {\n         Some(make::tokens::whitespace(&\" \".repeat(4 * ident_level)).into())\n@@ -538,6 +539,7 @@ impl AddBlankLine {\n fn find_insert_position(\n     scope: &ImportScope,\n     insert_path: ast::Path,\n+    group_imports: bool,\n ) -> (InsertPosition<SyntaxElement>, AddBlankLine) {\n     let group = ImportGroup::new(&insert_path);\n     let path_node_iter = scope\n@@ -550,6 +552,14 @@ fn find_insert_position(\n             let has_tl = tree.use_tree_list().is_some();\n             Some((path, has_tl, node))\n         });\n+\n+    if !group_imports {\n+        if let Some((_, _, node)) = path_node_iter.last() {\n+            return (InsertPosition::After(node.into()), AddBlankLine::Before);\n+        }\n+        return (InsertPosition::First, AddBlankLine::AfterTwice);\n+    }\n+\n     // Iterator that discards anything thats not in the required grouping\n     // This implementation allows the user to rearrange their import groups as this only takes the first group that fits\n     let group_iter = path_node_iter\n@@ -565,6 +575,7 @@ fn find_insert_position(\n             use_tree_path_cmp(&insert_path, false, path, has_tl) != Ordering::Greater\n         },\n     );\n+\n     match post_insert {\n         // insert our import before that element\n         Some((.., node)) => (InsertPosition::Before(node.into()), AddBlankLine::After),"}, {"sha": "67d0d6fb6df829a29a62a2e773bccf4eb0da721f", "filename": "crates/ide_db/src/helpers/insert_use/tests.rs", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d54e1157b66017e4aae38328cd213286e39ca130/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54e1157b66017e4aae38328cd213286e39ca130/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs?ref=d54e1157b66017e4aae38328cd213286e39ca130", "patch": "@@ -1,7 +1,31 @@\n use super::*;\n \n+use hir::PrefixKind;\n use test_utils::assert_eq_text;\n \n+#[test]\n+fn insert_not_group() {\n+    check(\n+        \"use external_crate2::bar::A\",\n+        r\"\n+use std::bar::B;\n+use external_crate::bar::A;\n+use crate::bar::A;\n+use self::bar::A;\n+use super::bar::A;\",\n+        r\"\n+use std::bar::B;\n+use external_crate::bar::A;\n+use crate::bar::A;\n+use self::bar::A;\n+use super::bar::A;\n+use external_crate2::bar::A;\",\n+        None,\n+        false,\n+        false,\n+    );\n+}\n+\n #[test]\n fn insert_existing() {\n     check_full(\"std::fs\", \"use std::fs;\", \"use std::fs;\")\n@@ -240,6 +264,7 @@ fn insert_empty_module() {\n }\",\n         None,\n         true,\n+        true,\n     )\n }\n \n@@ -584,6 +609,7 @@ fn check(\n     ra_fixture_after: &str,\n     mb: Option<MergeBehavior>,\n     module: bool,\n+    group: bool,\n ) {\n     let mut syntax = ast::SourceFile::parse(ra_fixture_before).tree().syntax().clone();\n     if module {\n@@ -597,21 +623,25 @@ fn check(\n         .find_map(ast::Path::cast)\n         .unwrap();\n \n-    let rewriter = insert_use(&file, path, mb);\n+    let rewriter = insert_use(\n+        &file,\n+        path,\n+        InsertUseConfig { merge: mb, prefix_kind: PrefixKind::Plain, group },\n+    );\n     let result = rewriter.rewrite(file.as_syntax_node()).to_string();\n     assert_eq_text!(ra_fixture_after, &result);\n }\n \n fn check_full(path: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n-    check(path, ra_fixture_before, ra_fixture_after, Some(MergeBehavior::Full), false)\n+    check(path, ra_fixture_before, ra_fixture_after, Some(MergeBehavior::Full), false, true)\n }\n \n fn check_last(path: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n-    check(path, ra_fixture_before, ra_fixture_after, Some(MergeBehavior::Last), false)\n+    check(path, ra_fixture_before, ra_fixture_after, Some(MergeBehavior::Last), false, true)\n }\n \n fn check_none(path: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n-    check(path, ra_fixture_before, ra_fixture_after, None, false)\n+    check(path, ra_fixture_before, ra_fixture_after, None, false, true)\n }\n \n fn check_merge_only_fail(ra_fixture0: &str, ra_fixture1: &str, mb: MergeBehavior) {"}, {"sha": "49994824f5369d83076cc3950009f3eb56158d60", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d54e1157b66017e4aae38328cd213286e39ca130/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54e1157b66017e4aae38328cd213286e39ca130/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=d54e1157b66017e4aae38328cd213286e39ca130", "patch": "@@ -108,7 +108,11 @@ impl BenchCmd {\n                         add_call_parenthesis: true,\n                         add_call_argument_snippets: true,\n                         snippet_cap: SnippetCap::new(true),\n-                        insert_use: InsertUseConfig { merge: None, prefix_kind: PrefixKind::Plain },\n+                        insert_use: InsertUseConfig {\n+                            merge: None,\n+                            prefix_kind: PrefixKind::Plain,\n+                            group: true,\n+                        },\n                     };\n                     let res = do_work(&mut host, file_id, |analysis| {\n                         analysis.completions(&options, file_position)"}, {"sha": "cac48e9117099074a33638e3137cdc66b32e3d2e", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d54e1157b66017e4aae38328cd213286e39ca130/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54e1157b66017e4aae38328cd213286e39ca130/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=d54e1157b66017e4aae38328cd213286e39ca130", "patch": "@@ -35,7 +35,8 @@ config_data! {\n         assist_importMergeBehaviour: MergeBehaviorDef  = \"\\\"full\\\"\",\n         /// The path structure for newly inserted paths to use.\n         assist_importPrefix: ImportPrefixDef           = \"\\\"plain\\\"\",\n-\n+        /// Group inserted imports by the [following order](https://rust-analyzer.github.io/manual.html#auto-import). Groups are separated by newlines.\n+        assist_importGroup: bool                       = \"true\",\n         /// Show function name and docs in parameter hints.\n         callInfo_full: bool = \"true\",\n \n@@ -574,6 +575,7 @@ impl Config {\n                 ImportPrefixDef::ByCrate => PrefixKind::ByCrate,\n                 ImportPrefixDef::BySelf => PrefixKind::BySelf,\n             },\n+            group: self.data.assist_importGroup,\n         }\n     }\n     pub fn completion(&self) -> CompletionConfig {"}, {"sha": "4235eb6ddf694d9f0c0185738e188c152d98f01f", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d54e1157b66017e4aae38328cd213286e39ca130/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54e1157b66017e4aae38328cd213286e39ca130/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=d54e1157b66017e4aae38328cd213286e39ca130", "patch": "@@ -1087,7 +1087,11 @@ mod tests {\n                     add_call_parenthesis: true,\n                     add_call_argument_snippets: true,\n                     snippet_cap: SnippetCap::new(true),\n-                    insert_use: InsertUseConfig { merge: None, prefix_kind: PrefixKind::Plain },\n+                    insert_use: InsertUseConfig {\n+                        merge: None,\n+                        prefix_kind: PrefixKind::Plain,\n+                        group: true,\n+                    },\n                 },\n                 ide_db::base_db::FilePosition { file_id, offset },\n             )"}, {"sha": "e564c142793756154e144a400b5b9415e2c1f777", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d54e1157b66017e4aae38328cd213286e39ca130/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/d54e1157b66017e4aae38328cd213286e39ca130/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=d54e1157b66017e4aae38328cd213286e39ca130", "patch": "@@ -2,6 +2,8 @@\n  The strategy to use when inserting new imports or merging imports.\n [[rust-analyzer.assist.importPrefix]]rust-analyzer.assist.importPrefix (default: `\"plain\"`)::\n  The path structure for newly inserted paths to use.\n+[[rust-analyzer.assist.importGroup]]rust-analyzer.assist.importGroup (default: `true`)::\n+ Group inserted imports by the [following order](https://rust-analyzer.github.io/manual.html#auto-import). Groups are separated by newlines.\n [[rust-analyzer.callInfo.full]]rust-analyzer.callInfo.full (default: `true`)::\n  Show function name and docs in parameter hints.\n [[rust-analyzer.cargo.autoreload]]rust-analyzer.cargo.autoreload (default: `true`)::"}, {"sha": "5f41f7803abddf68aac42f6dc677cbb6ca6552e4", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d54e1157b66017e4aae38328cd213286e39ca130/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/d54e1157b66017e4aae38328cd213286e39ca130/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=d54e1157b66017e4aae38328cd213286e39ca130", "patch": "@@ -385,6 +385,11 @@\n                         \"Force import paths to be absolute by always starting them with `crate` or the crate name they refer to.\"\n                     ]\n                 },\n+                \"rust-analyzer.assist.importGroup\": {\n+                    \"markdownDescription\": \"Group inserted imports by the [following order](https://rust-analyzer.github.io/manual.html#auto-import). Groups are separated by newlines.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.callInfo.full\": {\n                     \"markdownDescription\": \"Show function name and docs in parameter hints.\",\n                     \"default\": true,"}]}