{"sha": "b631ca0c2fbc69ce7718b50ff34a7c238f28c05f", "node_id": "C_kwDOAAsO6NoAKGI2MzFjYTBjMmZiYzY5Y2U3NzE4YjUwZmYzNGE3YzIzOGYyOGMwNWY", "commit": {"author": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-08-18T06:34:25Z"}, "committer": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-08-18T06:39:14Z"}, "message": "Windows: Load synch functions together\n\nAttempt to load all the required sync functions and fail if any one of them fails.\n\nThis reintroduces a macro for optional loading of functions but keeps it separate from the fallback macro rather than having that do two different jobs.", "tree": {"sha": "ac0d320bbbc74aef8bf8e0d6c8e18af3c9da7901", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac0d320bbbc74aef8bf8e0d6c8e18af3c9da7901"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b631ca0c2fbc69ce7718b50ff34a7c238f28c05f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+p/jD6jrzmnSIWJLcTRy8vRWJ94FAmL93pMACgkQcTRy8vRW\nJ968mA//UiPrbA6q7Q+lR390baosXaUJ1+K3jJygJZee4PTeOzA/Poy2xRbb0NCn\n8UjNLirnjNtSusAna+OgkasEVN7dZ+U7pJoGqfOu15aDjjFn71vXto5gqmBo4r2S\n33Co+ZSUOwwf+/TuzJ2BfOOW/5HxSOYZofTt37mPvHlJprQ5NwGIw1uf7ff5tUe+\nENvsOjQVwb6jh0ucvlIEM53FAGlot1GpAqHyxLzeiiUsh56j1vgqnNIt+NK3sRWI\nPaRFPkmTIVP/fd8kUt0dgGnWSOcUCHA+GDewvRXKph6mGyIaTDE+IhCPn+OoL/gE\nyzRjILJgvygLyWPbDAmZTTJqWvScUhGbhYtL+JKhNkzeAXnllbfRSrlXnIfp0PT0\nyhixa/XGBHMynC8eleppVyI/LhzGMqz+sOKYgO90ueLBAmjZq//XctrtJk3dRJGj\nuJSQrOOXYYyuR6fHkQLDxmL0Xx4mwYTXHjxur2zBSMhM5EwD7sEAjTEHYJXnHJ94\nK5zKin+giOCr4bDp84Db53au0crY/QfsPAL7ZWAw8P0Dhd3hXjb2R77aPKk7gnr9\nuBAtTEi/iZo+Gkked9UkdTxnax2Yr/uFdgQErICApwS7yHAoYPMhbKWT2IcIus35\n4j90WufNd8ur5bm430syGwE4hDWuo6/HTGaTwQRZhugqS/T+SU8=\n=QDfs\n-----END PGP SIGNATURE-----", "payload": "tree ac0d320bbbc74aef8bf8e0d6c8e18af3c9da7901\nparent 9c20b2a8cc7588decb6de25ac6a7912dcef24d65\nauthor Chris Denton <christophersdenton@gmail.com> 1660804465 +0100\ncommitter Chris Denton <christophersdenton@gmail.com> 1660804754 +0100\n\nWindows: Load synch functions together\n\nAttempt to load all the required sync functions and fail if any one of them fails.\n\nThis reintroduces a macro for optional loading of functions but keeps it separate from the fallback macro rather than having that do two different jobs.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b631ca0c2fbc69ce7718b50ff34a7c238f28c05f", "html_url": "https://github.com/rust-lang/rust/commit/b631ca0c2fbc69ce7718b50ff34a7c238f28c05f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b631ca0c2fbc69ce7718b50ff34a7c238f28c05f/comments", "author": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "html_url": "https://github.com/rust-lang/rust/commit/9c20b2a8cc7588decb6de25ac6a7912dcef24d65"}], "stats": {"total": 173, "additions": 94, "deletions": 79}, "files": [{"sha": "ef3f6a9ba175545c9b10c1a72df432989feb6121", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b631ca0c2fbc69ce7718b50ff34a7c238f28c05f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b631ca0c2fbc69ce7718b50ff34a7c238f28c05f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=b631ca0c2fbc69ce7718b50ff34a7c238f28c05f", "patch": "@@ -228,6 +228,8 @@ pub const IPV6_ADD_MEMBERSHIP: c_int = 12;\n pub const IPV6_DROP_MEMBERSHIP: c_int = 13;\n pub const MSG_PEEK: c_int = 0x2;\n \n+pub const LOAD_LIBRARY_SEARCH_SYSTEM32: u32 = 0x800;\n+\n #[repr(C)]\n #[derive(Copy, Clone)]\n pub struct linger {\n@@ -1030,6 +1032,7 @@ extern \"system\" {\n     pub fn GetProcAddress(handle: HMODULE, name: LPCSTR) -> *mut c_void;\n     pub fn GetModuleHandleA(lpModuleName: LPCSTR) -> HMODULE;\n     pub fn GetModuleHandleW(lpModuleName: LPCWSTR) -> HMODULE;\n+    pub fn LoadLibraryExA(lplibfilename: *const i8, hfile: HANDLE, dwflags: u32) -> HINSTANCE;\n \n     pub fn GetSystemTimeAsFileTime(lpSystemTimeAsFileTime: LPFILETIME);\n     pub fn GetSystemInfo(lpSystemInfo: LPSYSTEM_INFO);\n@@ -1250,21 +1253,16 @@ compat_fn_with_fallback! {\n     }\n }\n \n-compat_fn_with_fallback! {\n-    pub static SYNCH_API: &CStr = ansi_str!(\"api-ms-win-core-synch-l1-2-0\");\n-    #[allow(unused)]\n-    fn WakeByAddressSingle(Address: LPVOID) -> () {\n-        // This fallback is currently tightly coupled to its use in Parker::unpark.\n-        //\n-        // FIXME: If `WakeByAddressSingle` needs to be used anywhere other than\n-        // Parker::unpark then this fallback will be wrong and will need to be decoupled.\n-        crate::sys::windows::thread_parker::unpark_keyed_event(Address)\n-    }\n+compat_fn_optional! {\n+    crate::sys::compat::load_synch_functions();\n+    pub fn WaitOnAddress(\n+        Address: LPVOID,\n+        CompareAddress: LPVOID,\n+        AddressSize: SIZE_T,\n+        dwMilliseconds: DWORD\n+    );\n+    pub fn WakeByAddressSingle(Address: LPVOID);\n }\n-pub use crate::sys::compat::WaitOnAddress;\n-// Change exported name of `WakeByAddressSingle` to make the strange fallback\n-// behaviour clear.\n-pub use WakeByAddressSingle::call as wake_by_address_single_or_unpark_keyed_event;\n \n compat_fn_with_fallback! {\n     pub static NTDLL: &CStr = ansi_str!(\"ntdll\");"}, {"sha": "60cc705cef2f933b16c83053ef01dbf83c46c10b", "filename": "library/std/src/sys/windows/compat.rs", "status": "modified", "additions": 70, "deletions": 50, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/b631ca0c2fbc69ce7718b50ff34a7c238f28c05f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b631ca0c2fbc69ce7718b50ff34a7c238f28c05f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs?ref=b631ca0c2fbc69ce7718b50ff34a7c238f28c05f", "patch": "@@ -21,6 +21,7 @@\n \n use crate::ffi::{c_void, CStr};\n use crate::ptr::NonNull;\n+use crate::sync::atomic::{AtomicBool, Ordering};\n use crate::sys::c;\n \n /// Helper macro for creating CStrs from literals and symbol names.\n@@ -74,6 +75,20 @@ impl Module {\n         NonNull::new(module).map(Self)\n     }\n \n+    /// Load the library (if not already loaded)\n+    ///\n+    /// # Safety\n+    ///\n+    /// The module must not be unloaded.\n+    pub unsafe fn load_system_library(name: &CStr) -> Option<Self> {\n+        let module = c::LoadLibraryExA(\n+            name.as_ptr(),\n+            crate::ptr::null_mut(),\n+            c::LOAD_LIBRARY_SEARCH_SYSTEM32,\n+        );\n+        NonNull::new(module).map(Self)\n+    }\n+\n     // Try to get the address of a function.\n     pub fn proc_address(self, name: &CStr) -> Option<NonNull<c_void>> {\n         // SAFETY:\n@@ -144,61 +159,66 @@ macro_rules! compat_fn_with_fallback {\n     )*)\n }\n \n-/// Optionally load `WaitOnAddress`.\n-/// Unlike the dynamic loading described above, this does not have a fallback.\n+/// Optionally loaded functions.\n ///\n-/// This is rexported from sys::c. You should prefer to import\n-/// from there in case this changes again in the future.\n-pub mod WaitOnAddress {\n-    use super::*;\n-    use crate::mem;\n-    use crate::ptr;\n-    use crate::sync::atomic::{AtomicBool, AtomicPtr, Ordering};\n-    use crate::sys::c;\n-\n-    static MODULE_NAME: &CStr = ansi_str!(\"api-ms-win-core-synch-l1-2-0\");\n-    static SYMBOL_NAME: &CStr = ansi_str!(\"WaitOnAddress\");\n-\n-    // WaitOnAddress function signature.\n-    type F = unsafe extern \"system\" fn(\n-        Address: c::LPVOID,\n-        CompareAddress: c::LPVOID,\n-        AddressSize: c::SIZE_T,\n-        dwMilliseconds: c::DWORD,\n-    );\n-\n-    // A place to store the loaded function atomically.\n-    static WAIT_ON_ADDRESS: AtomicPtr<c_void> = AtomicPtr::new(ptr::null_mut());\n-\n-    // We can skip trying to load again if we already tried.\n-    static LOAD_MODULE: AtomicBool = AtomicBool::new(true);\n+/// Actual loading of the function defers to $load_functions.\n+macro_rules! compat_fn_optional {\n+    ($load_functions:expr;\n+    $(\n+        $(#[$meta:meta])*\n+        $vis:vis fn $symbol:ident($($argname:ident: $argtype:ty),*) $(-> $rettype:ty)?;\n+    )+) => (\n+        $(\n+            pub mod $symbol {\n+                use super::*;\n+                use crate::ffi::c_void;\n+                use crate::mem;\n+                use crate::ptr::{self, NonNull};\n+                use crate::sync::atomic::{AtomicPtr, Ordering};\n+\n+                pub(in crate::sys) static PTR: AtomicPtr<c_void> = AtomicPtr::new(ptr::null_mut());\n+\n+                type F = unsafe extern \"system\" fn($($argtype),*) $(-> $rettype)?;\n+\n+                #[inline(always)]\n+                pub fn option() -> Option<F> {\n+                    let f = PTR.load(Ordering::Acquire);\n+                    if !f.is_null() { Some(unsafe { mem::transmute(f) }) } else { try_load() }\n+                }\n \n-    #[inline(always)]\n-    pub fn option() -> Option<F> {\n-        let f = WAIT_ON_ADDRESS.load(Ordering::Acquire);\n-        if !f.is_null() { Some(unsafe { mem::transmute(f) }) } else { try_load() }\n+                #[cold]\n+                fn try_load() -> Option<F> {\n+                    $load_functions;\n+                    NonNull::new(PTR.load(Ordering::Acquire)).map(|f| unsafe { mem::transmute(f) })\n+                }\n+            }\n+        )+\n+    )\n+}\n+\n+/// Load all needed functions from \"api-ms-win-core-synch-l1-2-0\".\n+pub(super) fn load_synch_functions() {\n+    fn try_load() -> Option<()> {\n+        static MODULE_NAME: &CStr = ansi_str!(\"api-ms-win-core-synch-l1-2-0\");\n+        static WAIT_ON_ADDRESS: &CStr = ansi_str!(\"WaitOnAddress\");\n+        static WAKE_BY_ADDRESS_SINGLE: &CStr = ansi_str!(\"WakeByAddressSingle\");\n+\n+        // Try loading the library and all the required functions.\n+        // If any step fails, then they all fail.\n+        let library = unsafe { Module::load_system_library(MODULE_NAME) }?;\n+        let wait_on_address = library.proc_address(WAIT_ON_ADDRESS)?;\n+        let wake_by_address_single = library.proc_address(WAKE_BY_ADDRESS_SINGLE)?;\n+\n+        c::WaitOnAddress::PTR.store(wait_on_address.as_ptr(), Ordering::Release);\n+        c::WakeByAddressSingle::PTR.store(wake_by_address_single.as_ptr(), Ordering::Release);\n+        Some(())\n     }\n \n-    #[cold]\n-    fn try_load() -> Option<F> {\n-        if LOAD_MODULE.load(Ordering::Acquire) {\n-            // load the module\n-            let mut wait_on_address = None;\n-            if let Some(func) = try_load_inner() {\n-                WAIT_ON_ADDRESS.store(func.as_ptr(), Ordering::Release);\n-                wait_on_address = Some(unsafe { mem::transmute(func) });\n-            }\n-            // Don't try to load the module again even if loading failed.\n+    // Shortcut if we've already tried (and failed) to load the library.\n+    static LOAD_MODULE: AtomicBool = AtomicBool::new(true);\n+    if LOAD_MODULE.load(Ordering::Acquire) {\n+        if try_load().is_none() {\n             LOAD_MODULE.store(false, Ordering::Release);\n-            wait_on_address\n-        } else {\n-            None\n         }\n     }\n-\n-    // In the future this could be a `try` block but until then I think it's a\n-    // little bit cleaner as a separate function.\n-    fn try_load_inner() -> Option<NonNull<c_void>> {\n-        unsafe { Module::new(MODULE_NAME)?.proc_address(SYMBOL_NAME) }\n-    }\n }"}, {"sha": "2f7ae863b6a453b48e389671e24d932646b1668f", "filename": "library/std/src/sys/windows/thread_parker.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b631ca0c2fbc69ce7718b50ff34a7c238f28c05f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b631ca0c2fbc69ce7718b50ff34a7c238f28c05f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs?ref=b631ca0c2fbc69ce7718b50ff34a7c238f28c05f", "patch": "@@ -198,8 +198,18 @@ impl Parker {\n         // with park().\n         if self.state.swap(NOTIFIED, Release) == PARKED {\n             unsafe {\n-                // This calls either WakeByAddressSingle or unpark_keyed_event (see below).\n-                c::wake_by_address_single_or_unpark_keyed_event(self.ptr());\n+                if let Some(wake_by_address_single) = c::WakeByAddressSingle::option() {\n+                    wake_by_address_single(self.ptr());\n+                } else {\n+                    // If we run NtReleaseKeyedEvent before the waiting thread runs\n+                    // NtWaitForKeyedEvent, this (shortly) blocks until we can wake it up.\n+                    // If the waiting thread wakes up before we run NtReleaseKeyedEvent\n+                    // (e.g. due to a timeout), this blocks until we do wake up a thread.\n+                    // To prevent this thread from blocking indefinitely in that case,\n+                    // park_impl() will, after seeing the state set to NOTIFIED after\n+                    // waking up, call NtWaitForKeyedEvent again to unblock us.\n+                    c::NtReleaseKeyedEvent(keyed_event_handle(), self.ptr(), 0, ptr::null_mut());\n+                }\n             }\n         }\n     }\n@@ -209,19 +219,6 @@ impl Parker {\n     }\n }\n \n-// This function signature makes it compatible with c::WakeByAddressSingle\n-// so that it can be used as a fallback for that function.\n-pub unsafe extern \"C\" fn unpark_keyed_event(address: c::LPVOID) {\n-    // If we run NtReleaseKeyedEvent before the waiting thread runs\n-    // NtWaitForKeyedEvent, this (shortly) blocks until we can wake it up.\n-    // If the waiting thread wakes up before we run NtReleaseKeyedEvent\n-    // (e.g. due to a timeout), this blocks until we do wake up a thread.\n-    // To prevent this thread from blocking indefinitely in that case,\n-    // park_impl() will, after seeing the state set to NOTIFIED after\n-    // waking up, call NtWaitForKeyedEvent again to unblock us.\n-    c::NtReleaseKeyedEvent(keyed_event_handle(), address, 0, ptr::null_mut());\n-}\n-\n fn keyed_event_handle() -> c::HANDLE {\n     const INVALID: c::HANDLE = ptr::invalid_mut(!0);\n     static HANDLE: AtomicPtr<libc::c_void> = AtomicPtr::new(INVALID);"}]}