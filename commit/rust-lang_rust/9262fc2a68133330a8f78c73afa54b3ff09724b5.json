{"sha": "9262fc2a68133330a8f78c73afa54b3ff09724b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNjJmYzJhNjgxMzMzMzBhOGY3OGM3M2FmYTU0YjNmZjA5NzI0YjU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-18T22:20:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-18T22:20:41Z"}, "message": "Rollup merge of #72628 - MikailBag:array-default-tests, r=shepmaster\n\nAdd tests for 'impl Default for [T; N]'\n\nRelated: #71690.\nThis pull request adds two tests:\n- Even it T::default() panics, no leaks occur.\n- [T; 0] is Default even if T is not.\n\nI believe at some moment `Default` impl for arrays will be rewritten to use const generics instead of macros, and these tests will help to prevent behavior changes.", "tree": {"sha": "e4c9f00006b7883d276aace4c0a92dbed7f0b67c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4c9f00006b7883d276aace4c0a92dbed7f0b67c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9262fc2a68133330a8f78c73afa54b3ff09724b5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe6+i5CRBK7hj4Ov3rIwAAdHIIAFJuil9zEcG/DtfNR36v+GsX\nboDAHdD5FkglzoJ2GAWhBYdybaWasJOb18MZbiZO4yKHMUaHW4HWqfS3u7TiLxsi\nm2/lEVcuPOh+Hpty6ZwgjXPm8pipZ5BrG9AOIafooc6IJ8ehvmTh/Tjkrt87jy/R\nAlHQf2/m4k6LM6cWd4ysu7djM3Db7AvTYJouWQyDCfwqSGIi4mVB1b1TqNHLMvZj\na67QfGNmB2j9NJri3ujx8KN/DEZeLXqznTLYujIp5mSXrA+UaIgEMtMP59eF33x1\nWnbPPZFiMLoavg+cqryGNstBVvNdTAP7CdV+mVTyp+oubgz8TYXND+8XDsVRsng=\n=hwiy\n-----END PGP SIGNATURE-----\n", "payload": "tree e4c9f00006b7883d276aace4c0a92dbed7f0b67c\nparent 49ab0cab618d9d1cb49220d7c253556a56148283\nparent 3313bf62ac45fab2c39e49c788423153754087a9\nauthor Manish Goregaokar <manishsmail@gmail.com> 1592518841 -0700\ncommitter GitHub <noreply@github.com> 1592518841 -0700\n\nRollup merge of #72628 - MikailBag:array-default-tests, r=shepmaster\n\nAdd tests for 'impl Default for [T; N]'\n\nRelated: #71690.\nThis pull request adds two tests:\n- Even it T::default() panics, no leaks occur.\n- [T; 0] is Default even if T is not.\n\nI believe at some moment `Default` impl for arrays will be rewritten to use const generics instead of macros, and these tests will help to prevent behavior changes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9262fc2a68133330a8f78c73afa54b3ff09724b5", "html_url": "https://github.com/rust-lang/rust/commit/9262fc2a68133330a8f78c73afa54b3ff09724b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9262fc2a68133330a8f78c73afa54b3ff09724b5/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49ab0cab618d9d1cb49220d7c253556a56148283", "url": "https://api.github.com/repos/rust-lang/rust/commits/49ab0cab618d9d1cb49220d7c253556a56148283", "html_url": "https://github.com/rust-lang/rust/commit/49ab0cab618d9d1cb49220d7c253556a56148283"}, {"sha": "3313bf62ac45fab2c39e49c788423153754087a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3313bf62ac45fab2c39e49c788423153754087a9", "html_url": "https://github.com/rust-lang/rust/commit/3313bf62ac45fab2c39e49c788423153754087a9"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "4bc44e98fc802a7efee5106bac8409c3b0cfa9e7", "filename": "src/libcore/tests/array.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/9262fc2a68133330a8f78c73afa54b3ff09724b5/src%2Flibcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9262fc2a68133330a8f78c73afa54b3ff09724b5/src%2Flibcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Farray.rs?ref=9262fc2a68133330a8f78c73afa54b3ff09724b5", "patch": "@@ -241,3 +241,52 @@ fn iterator_drops() {\n     }\n     assert_eq!(i.get(), 5);\n }\n+\n+// This test does not work on targets without panic=unwind support.\n+// To work around this problem, test is marked is should_panic, so it will\n+// be automagically skipped on unsuitable targets, such as\n+// wasm32-unknown-unkown.\n+//\n+// It means that we use panic for indicating success.\n+#[test]\n+#[should_panic(expected = \"test succeeded\")]\n+fn array_default_impl_avoids_leaks_on_panic() {\n+    use core::sync::atomic::{AtomicUsize, Ordering::Relaxed};\n+    static COUNTER: AtomicUsize = AtomicUsize::new(0);\n+    #[derive(Debug)]\n+    struct Bomb(usize);\n+\n+    impl Default for Bomb {\n+        fn default() -> Bomb {\n+            if COUNTER.load(Relaxed) == 3 {\n+                panic!(\"bomb limit exceeded\");\n+            }\n+\n+            COUNTER.fetch_add(1, Relaxed);\n+            Bomb(COUNTER.load(Relaxed))\n+        }\n+    }\n+\n+    impl Drop for Bomb {\n+        fn drop(&mut self) {\n+            COUNTER.fetch_sub(1, Relaxed);\n+        }\n+    }\n+\n+    let res = std::panic::catch_unwind(|| <[Bomb; 5]>::default());\n+    let panic_msg = match res {\n+        Ok(_) => unreachable!(),\n+        Err(p) => p.downcast::<&'static str>().unwrap(),\n+    };\n+    assert_eq!(*panic_msg, \"bomb limit exceeded\");\n+    // check that all bombs are successfully dropped\n+    assert_eq!(COUNTER.load(Relaxed), 0);\n+    panic!(\"test succeeded\")\n+}\n+\n+#[test]\n+fn empty_array_is_always_default() {\n+    struct DoesNotImplDefault;\n+\n+    let _arr = <[DoesNotImplDefault; 0]>::default();\n+}"}]}