{"sha": "0c54913afef6b5ca2e6c037bbbfb25e67f9a560a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNTQ5MTNhZmVmNmI1Y2EyZTZjMDM3YmJiZmIyNWU2N2Y5YTU2MGE=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-01-02T06:27:47Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-01-02T06:49:28Z"}, "message": "Extract IteratorFalsePositives into option_helpers.rs\n\nThis was previously duplicated in #3605", "tree": {"sha": "80f7aae4af85ab9a0edae07b6c451b893e81697a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80f7aae4af85ab9a0edae07b6c451b893e81697a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c54913afef6b5ca2e6c037bbbfb25e67f9a560a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlwsXvkACgkQtvoGpuDi\nZlubtQ/+Of6rvghbf7/qnRzmRzumQM6oT7Us7RJtrcEzIun4jwfPawREOOY0hFvV\nSXia7lx4St2XXcsHn1NXtd9B9OFp8OH7psOWgRMkCGwSvez4jFPoCCwsLFDByq7v\nQBcx+FxVqYzolifTCfEioElWF4b/HkMa+nSLVQfwg2GUAhfCaDQ1jlvAi01l5odg\n2w3dKb6yz65cJAF0EpE6+JVvggiXcD7r/qSDVKf04JjcQfyQKDrnc05N5HQ0Q5PO\nPc2qtYVpYxBRobBgOZF7lhVWUrLunXBnk89RU5ZEvUDAZY/x2PCvDp5MyBJAjFJg\nvBPt9iAf5RNY6ze6ZaXxSASwev5bOe4rxFb4iAHy0CHC6Md80koApIAuP+vHLE/Z\ngA7h9mt6tJEWFFJXyEJ6ZAKSdmSz+hH+fS+/PDjjffPKyNEI20N59yYU29GhI4gs\nueVzp+uSPk+HGWAG8YL5vWouBX5nGIpaOHOCL/MGq0eV7oeeIAkbj8kPLRCtDD3b\n9/IDlO+1cboKMLYdUkPm92/xYZzPVRdtf7bzbtl9tBzxcI2JkPsN+88LvxcmLt2l\no8xQSMBFXptnkQsVilqL+lK+YxN5ZJ3cLHDMSuvYLACwPM0+y5v7o55Dn6k+ANNr\nVcvqWFwH6Ibn1VoBzzsotyyvgvqUu9+b/5765QT5a99tdrCEQdc=\n=xHjR\n-----END PGP SIGNATURE-----", "payload": "tree 80f7aae4af85ab9a0edae07b6c451b893e81697a\nparent eaaee238472f36d664be0e0769590a8be374cd4d\nauthor Philipp Hansch <dev@phansch.net> 1546410467 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1546411768 +0100\n\nExtract IteratorFalsePositives into option_helpers.rs\n\nThis was previously duplicated in #3605\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c54913afef6b5ca2e6c037bbbfb25e67f9a560a", "html_url": "https://github.com/rust-lang/rust/commit/0c54913afef6b5ca2e6c037bbbfb25e67f9a560a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c54913afef6b5ca2e6c037bbbfb25e67f9a560a/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eaaee238472f36d664be0e0769590a8be374cd4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaaee238472f36d664be0e0769590a8be374cd4d", "html_url": "https://github.com/rust-lang/rust/commit/eaaee238472f36d664be0e0769590a8be374cd4d"}], "stats": {"total": 172, "additions": 69, "deletions": 103}, "files": [{"sha": "1734acfb3a2d6defce9374090a21c224a52a99c0", "filename": "tests/auxiliary/option_helpers.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0c54913afef6b5ca2e6c037bbbfb25e67f9a560a/tests%2Fauxiliary%2Foption_helpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c54913afef6b5ca2e6c037bbbfb25e67f9a560a/tests%2Fauxiliary%2Foption_helpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fauxiliary%2Foption_helpers.rs?ref=0c54913afef6b5ca2e6c037bbbfb25e67f9a560a", "patch": "@@ -4,3 +4,39 @@\n macro_rules! opt_map {\n     ($opt:expr, $map:expr) => {($opt).map($map)};\n }\n+\n+/// Struct to generate false positive for Iterator-based lints\n+#[derive(Copy, Clone)]\n+struct IteratorFalsePositives {\n+    foo: u32,\n+}\n+\n+impl IteratorFalsePositives {\n+    fn filter(self) -> IteratorFalsePositives {\n+        self\n+    }\n+\n+    fn next(self) -> IteratorFalsePositives {\n+        self\n+    }\n+\n+    fn find(self) -> Option<u32> {\n+        Some(self.foo)\n+    }\n+\n+    fn position(self) -> Option<u32> {\n+        Some(self.foo)\n+    }\n+\n+    fn rposition(self) -> Option<u32> {\n+        Some(self.foo)\n+    }\n+\n+    fn nth(self, n: usize) -> Option<u32> {\n+        Some(self.foo)\n+    }\n+\n+    fn skip(self, _: usize) -> IteratorFalsePositives {\n+        self\n+    }\n+}"}, {"sha": "a2ce67ce35d18c64c8ada05dc4609076f40b52fa", "filename": "tests/ui/iter_skip_next.rs", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0c54913afef6b5ca2e6c037bbbfb25e67f9a560a/tests%2Fui%2Fiter_skip_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c54913afef6b5ca2e6c037bbbfb25e67f9a560a/tests%2Fui%2Fiter_skip_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_skip_next.rs?ref=0c54913afef6b5ca2e6c037bbbfb25e67f9a560a", "patch": "@@ -10,41 +10,7 @@\n #![warn(clippy::iter_skip_next)]\n #![allow(clippy::blacklisted_name)]\n \n-/// Struct to generate false positive for Iterator-based lints\n-#[derive(Copy, Clone)]\n-struct IteratorFalsePositives {\n-    foo: u32,\n-}\n-\n-impl IteratorFalsePositives {\n-    fn filter(self) -> IteratorFalsePositives {\n-        self\n-    }\n-\n-    fn next(self) -> IteratorFalsePositives {\n-        self\n-    }\n-\n-    fn find(self) -> Option<u32> {\n-        Some(self.foo)\n-    }\n-\n-    fn position(self) -> Option<u32> {\n-        Some(self.foo)\n-    }\n-\n-    fn rposition(self) -> Option<u32> {\n-        Some(self.foo)\n-    }\n-\n-    fn nth(self, n: usize) -> Option<u32> {\n-        Some(self.foo)\n-    }\n-\n-    fn skip(self, _: usize) -> IteratorFalsePositives {\n-        self\n-    }\n-}\n+include!(\"../auxiliary/option_helpers.rs\");\n \n /// Checks implementation of `ITER_SKIP_NEXT` lint\n fn iter_skip_next() {"}, {"sha": "9daa97e77587f80063c5936e5c40017e9d3bd057", "filename": "tests/ui/iter_skip_next.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c54913afef6b5ca2e6c037bbbfb25e67f9a560a/tests%2Fui%2Fiter_skip_next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c54913afef6b5ca2e6c037bbbfb25e67f9a560a/tests%2Fui%2Fiter_skip_next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_skip_next.stderr?ref=0c54913afef6b5ca2e6c037bbbfb25e67f9a560a", "patch": "@@ -1,25 +1,25 @@\n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-  --> $DIR/iter_skip_next.rs:52:13\n+  --> $DIR/iter_skip_next.rs:18:13\n    |\n LL |     let _ = some_vec.iter().skip(42).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::iter-skip-next` implied by `-D warnings`\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-  --> $DIR/iter_skip_next.rs:53:13\n+  --> $DIR/iter_skip_next.rs:19:13\n    |\n LL |     let _ = some_vec.iter().cycle().skip(42).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-  --> $DIR/iter_skip_next.rs:54:13\n+  --> $DIR/iter_skip_next.rs:20:13\n    |\n LL |     let _ = (1..10).skip(10).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-  --> $DIR/iter_skip_next.rs:55:14\n+  --> $DIR/iter_skip_next.rs:21:14\n    |\n LL |     let _ = &some_vec[..].iter().skip(3).next();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "d5859b8f840b8a04c9cd53efe3c89e3ccff39ee7", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0c54913afef6b5ca2e6c037bbbfb25e67f9a560a/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c54913afef6b5ca2e6c037bbbfb25e67f9a560a/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=0c54913afef6b5ca2e6c037bbbfb25e67f9a560a", "patch": "@@ -178,42 +178,6 @@ impl HasIter {\n     }\n }\n \n-/// Struct to generate false positive for Iterator-based lints\n-#[derive(Copy, Clone)]\n-struct IteratorFalsePositives {\n-    foo: u32,\n-}\n-\n-impl IteratorFalsePositives {\n-    fn filter(self) -> IteratorFalsePositives {\n-        self\n-    }\n-\n-    fn next(self) -> IteratorFalsePositives {\n-        self\n-    }\n-\n-    fn find(self) -> Option<u32> {\n-        Some(self.foo)\n-    }\n-\n-    fn position(self) -> Option<u32> {\n-        Some(self.foo)\n-    }\n-\n-    fn rposition(self) -> Option<u32> {\n-        Some(self.foo)\n-    }\n-\n-    fn nth(self, n: usize) -> Option<u32> {\n-        Some(self.foo)\n-    }\n-\n-    fn skip(self, _: usize) -> IteratorFalsePositives {\n-        self\n-    }\n-}\n-\n /// Checks implementation of `FILTER_NEXT` lint\n fn filter_next() {\n     let v = vec![3, 2, 1, 0, -1, -2, -3];"}, {"sha": "361a763efd376fcdd4c2cd14e0cf718deb38c905", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/0c54913afef6b5ca2e6c037bbbfb25e67f9a560a/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c54913afef6b5ca2e6c037bbbfb25e67f9a560a/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=0c54913afef6b5ca2e6c037bbbfb25e67f9a560a", "patch": "@@ -144,7 +144,7 @@ LL |                        });\n    |\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:222:13\n+  --> $DIR/methods.rs:186:13\n    |\n LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -153,7 +153,7 @@ LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:225:13\n+  --> $DIR/methods.rs:189:13\n    |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^\n@@ -163,7 +163,7 @@ LL | |                    ).next();\n    | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:240:13\n+  --> $DIR/methods.rs:204:13\n    |\n LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -172,7 +172,7 @@ LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    = note: replace `find(|&x| *x < 0).is_some()` with `any(|&x| *x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:243:13\n+  --> $DIR/methods.rs:207:13\n    |\n LL |       let _ = v.iter().find(|&x| {\n    |  _____________^\n@@ -182,15 +182,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:249:13\n+  --> $DIR/methods.rs:213:13\n    |\n LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:252:13\n+  --> $DIR/methods.rs:216:13\n    |\n LL |       let _ = v.iter().position(|&x| {\n    |  _____________^\n@@ -200,15 +200,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:258:13\n+  --> $DIR/methods.rs:222:13\n    |\n LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:261:13\n+  --> $DIR/methods.rs:225:13\n    |\n LL |       let _ = v.iter().rposition(|&x| {\n    |  _____________^\n@@ -218,125 +218,125 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:296:22\n+  --> $DIR/methods.rs:260:22\n    |\n LL |     with_constructor.unwrap_or(make());\n    |                      ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(make)`\n    |\n    = note: `-D clippy::or-fun-call` implied by `-D warnings`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/methods.rs:299:5\n+  --> $DIR/methods.rs:263:5\n    |\n LL |     with_new.unwrap_or(Vec::new());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:302:21\n+  --> $DIR/methods.rs:266:21\n    |\n LL |     with_const_args.unwrap_or(Vec::with_capacity(12));\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:305:14\n+  --> $DIR/methods.rs:269:14\n    |\n LL |     with_err.unwrap_or(make());\n    |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| make())`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:308:19\n+  --> $DIR/methods.rs:272:19\n    |\n LL |     with_err_args.unwrap_or(Vec::with_capacity(12));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/methods.rs:311:5\n+  --> $DIR/methods.rs:275:5\n    |\n LL |     with_default_trait.unwrap_or(Default::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/methods.rs:314:5\n+  --> $DIR/methods.rs:278:5\n    |\n LL |     with_default_type.unwrap_or(u64::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:317:14\n+  --> $DIR/methods.rs:281:14\n    |\n LL |     with_vec.unwrap_or(vec![]);\n    |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| vec![])`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:322:21\n+  --> $DIR/methods.rs:286:21\n    |\n LL |     without_default.unwrap_or(Foo::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/methods.rs:325:19\n+  --> $DIR/methods.rs:289:19\n    |\n LL |     map.entry(42).or_insert(String::new());\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/methods.rs:328:21\n+  --> $DIR/methods.rs:292:21\n    |\n LL |     btree.entry(42).or_insert(String::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:331:21\n+  --> $DIR/methods.rs:295:21\n    |\n LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:342:23\n+  --> $DIR/methods.rs:306:23\n    |\n LL |         let bad_vec = some_vec.iter().nth(3);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::iter-nth` implied by `-D warnings`\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:343:26\n+  --> $DIR/methods.rs:307:26\n    |\n LL |         let bad_slice = &some_vec[..].iter().nth(3);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:344:31\n+  --> $DIR/methods.rs:308:31\n    |\n LL |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:345:29\n+  --> $DIR/methods.rs:309:29\n    |\n LL |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:350:23\n+  --> $DIR/methods.rs:314:23\n    |\n LL |         let bad_vec = some_vec.iter_mut().nth(3);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:353:26\n+  --> $DIR/methods.rs:317:26\n    |\n LL |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:356:29\n+  --> $DIR/methods.rs:320:29\n    |\n LL |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-  --> $DIR/methods.rs:368:13\n+  --> $DIR/methods.rs:332:13\n    |\n LL |     let _ = opt.unwrap();\n    |             ^^^^^^^^^^^^"}]}