{"sha": "2223b64f8631898358934197263c692a0d308729", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMjNiNjRmODYzMTg5ODM1ODkzNDE5NzI2M2M2OTJhMGQzMDg3Mjk=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-05-01T22:30:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-01T22:30:11Z"}, "message": "Merge pull request #1486 from topecongiro/refactoring\n\nRefactor source codes", "tree": {"sha": "13814741120996f4d5ce146298fc197c80d43ca7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13814741120996f4d5ce146298fc197c80d43ca7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2223b64f8631898358934197263c692a0d308729", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2223b64f8631898358934197263c692a0d308729", "html_url": "https://github.com/rust-lang/rust/commit/2223b64f8631898358934197263c692a0d308729", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2223b64f8631898358934197263c692a0d308729/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6f1dd4fb5f3d503cb456cda8d3d476efaaa1dcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6f1dd4fb5f3d503cb456cda8d3d476efaaa1dcf", "html_url": "https://github.com/rust-lang/rust/commit/c6f1dd4fb5f3d503cb456cda8d3d476efaaa1dcf"}, {"sha": "9befcded8c601bfb63bb5697da1bc7e9e878bf74", "url": "https://api.github.com/repos/rust-lang/rust/commits/9befcded8c601bfb63bb5697da1bc7e9e878bf74", "html_url": "https://github.com/rust-lang/rust/commit/9befcded8c601bfb63bb5697da1bc7e9e878bf74"}], "stats": {"total": 277, "additions": 152, "deletions": 125}, "files": [{"sha": "8c405c1f6ef225e10bd9628a72be1fe51dcac07b", "filename": "src/chains.rs", "status": "modified", "additions": 21, "deletions": 32, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/2223b64f8631898358934197263c692a0d308729/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2223b64f8631898358934197263c692a0d308729/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=2223b64f8631898358934197263c692a0d308729", "patch": "@@ -104,11 +104,16 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n         parent_shape = chain_indent(context, shape);\n     }\n     let parent_rewrite = try_opt!(parent.rewrite(context, parent_shape));\n+    let parent_rewrite_contains_newline = parent_rewrite.contains('\\n');\n \n     // Decide how to layout the rest of the chain. `extend` is true if we can\n     // put the first non-parent item on the same line as the parent.\n-    let (nested_shape, extend) = if !parent_rewrite.contains('\\n') && is_continuable(&parent) {\n-        let nested_shape = if let ast::ExprKind::Try(..) = subexpr_list.last().unwrap().node {\n+    let first_subexpr_is_try = match subexpr_list.last().unwrap().node {\n+        ast::ExprKind::Try(..) => true,\n+        _ => false,\n+    };\n+    let (nested_shape, extend) = if !parent_rewrite_contains_newline && is_continuable(&parent) {\n+        let nested_shape = if first_subexpr_is_try {\n             parent_shape.block_indent(context.config.tab_spaces)\n         } else {\n             chain_indent(context, shape.add_offset(parent_rewrite.len()))\n@@ -120,7 +125,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n         // The parent is a block, so align the rest of the chain with the closing\n         // brace.\n         (parent_shape, false)\n-    } else if parent_rewrite.contains('\\n') {\n+    } else if parent_rewrite_contains_newline {\n         (chain_indent(context,\n                       parent_shape.block_indent(context.config.tab_spaces)),\n          false)\n@@ -137,9 +142,9 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n         ..nested_shape\n     };\n     let first_child_shape = if extend {\n-        let mut shape = try_opt!(parent_shape.shrink_left(last_line_width(&parent_rewrite)));\n+        let mut shape = try_opt!(parent_shape.offset_left(last_line_width(&parent_rewrite)));\n         match context.config.chain_indent {\n-            IndentStyle::Visual => other_child_shape,\n+            IndentStyle::Visual => shape,\n             IndentStyle::Block => {\n                 shape.offset = shape\n                     .offset\n@@ -207,17 +212,15 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n         }\n     }\n \n-    let connector = if fits_single_line && !parent_rewrite.contains('\\n') {\n+    let connector = if fits_single_line && !parent_rewrite_contains_newline {\n         // Yay, we can put everything on one line.\n         String::new()\n     } else {\n         // Use new lines.\n         format!(\"\\n{}\", nested_shape.indent.to_string(context.config))\n     };\n \n-    let first_connector = if extend || subexpr_list.is_empty() {\n-        \"\"\n-    } else if let ast::ExprKind::Try(_) = subexpr_list.last().unwrap().node {\n+    let first_connector = if extend || subexpr_list.is_empty() || first_subexpr_is_try {\n         \"\"\n     } else {\n         &*connector\n@@ -375,33 +378,19 @@ fn rewrite_chain_subexpr(expr: &ast::Expr,\n                          context: &RewriteContext,\n                          shape: Shape)\n                          -> Option<String> {\n+    let rewrite_element = |expr_str: String| if expr_str.len() <= shape.width {\n+        Some(expr_str)\n+    } else {\n+        None\n+    };\n+\n     match expr.node {\n         ast::ExprKind::MethodCall(ref method_name, ref types, ref expressions) => {\n             rewrite_method_call(method_name.node, types, expressions, span, context, shape)\n         }\n-        ast::ExprKind::Field(_, ref field) => {\n-            let s = format!(\".{}\", field.node);\n-            if s.len() <= shape.width {\n-                Some(s)\n-            } else {\n-                None\n-            }\n-        }\n-        ast::ExprKind::TupField(_, ref field) => {\n-            let s = format!(\".{}\", field.node);\n-            if s.len() <= shape.width {\n-                Some(s)\n-            } else {\n-                None\n-            }\n-        }\n-        ast::ExprKind::Try(_) => {\n-            if shape.width >= 1 {\n-                Some(\"?\".into())\n-            } else {\n-                None\n-            }\n-        }\n+        ast::ExprKind::Field(_, ref field) => rewrite_element(format!(\".{}\", field.node)),\n+        ast::ExprKind::TupField(_, ref field) => rewrite_element(format!(\".{}\", field.node)),\n+        ast::ExprKind::Try(_) => rewrite_element(String::from(\"?\")),\n         _ => unreachable!(),\n     }\n }"}, {"sha": "7021f0c2ae594e9d2a09f9d897c254a7ec95a7f9", "filename": "src/items.rs", "status": "modified", "additions": 47, "deletions": 72, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/2223b64f8631898358934197263c692a0d308729/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2223b64f8631898358934197263c692a0d308729/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=2223b64f8631898358934197263c692a0d308729", "patch": "@@ -38,7 +38,8 @@ impl Rewrite for ast::Local {\n                shape.indent);\n         let mut result = \"let \".to_owned();\n \n-        let pat_shape = try_opt!(shape.offset_left(result.len()));\n+        // 4 = \"let \".len()\n+        let pat_shape = try_opt!(shape.offset_left(4));\n         // 1 = ;\n         let pat_shape = try_opt!(pat_shape.sub_width(1));\n         let pat_str = try_opt!(self.pat.rewrite(&context, pat_shape));\n@@ -70,7 +71,6 @@ impl Rewrite for ast::Local {\n \n         if let Some(ref ex) = self.init {\n             // 1 = trailing semicolon;\n-            //let budget = try_opt!(shape.width.checked_sub(shape.indent.block_only().width() + 1));\n             let nested_shape = try_opt!(shape.sub_width(1));\n \n             result = try_opt!(rewrite_assign_rhs(&context, result, ex, nested_shape));\n@@ -380,7 +380,6 @@ impl<'a> FmtVisitor<'a> {\n                                            self.config.item_brace_style,\n                                            enum_def.variants.is_empty(),\n                                            self.block_indent,\n-                                           self.block_indent.block_indent(self.config),\n                                            mk_sp(span.lo, body_start))\n                 .unwrap();\n         self.buffer.push_str(&generics_str);\n@@ -644,12 +643,9 @@ fn format_impl_ref_and_type(context: &RewriteContext,\n             Some(ref tr) => tr.path.span.lo,\n             None => self_ty.span.lo,\n         };\n-        let generics_str = try_opt!(rewrite_generics(context,\n-                                                     generics,\n-                                                     Shape::legacy(context.config.max_width,\n-                                                                   offset),\n-                                                     offset + result.len(),\n-                                                     mk_sp(lo, hi)));\n+        let generics_indent = offset + last_line_width(&result);\n+        let shape = try_opt!(generics_shape(context.config, generics_indent));\n+        let generics_str = try_opt!(rewrite_generics(context, generics, shape, mk_sp(lo, hi)));\n         result.push_str(&generics_str);\n \n         if polarity == ast::ImplPolarity::Negative {\n@@ -759,12 +755,10 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n \n         let body_lo = context.codemap.span_after(item.span, \"{\");\n \n-        let generics_str = try_opt!(rewrite_generics(context,\n-                                                     generics,\n-                                                     Shape::legacy(context.config.max_width,\n-                                                                   offset),\n-                                                     offset + result.len(),\n-                                                     mk_sp(item.span.lo, body_lo)));\n+        let generics_indent = offset + last_line_width(&result);\n+        let shape = try_opt!(generics_shape(context.config, generics_indent));\n+        let generics_str =\n+            try_opt!(rewrite_generics(context, generics, shape, mk_sp(item.span.lo, body_lo)));\n         result.push_str(&generics_str);\n \n         let trait_bound_str =\n@@ -902,7 +896,6 @@ fn format_struct_struct(context: &RewriteContext,\n                                      context.config.item_brace_style,\n                                      fields.is_empty(),\n                                      offset,\n-                                     offset + header_str.len(),\n                                      mk_sp(span.lo, body_lo)))\n         }\n         None => {\n@@ -1011,12 +1004,10 @@ fn format_tuple_struct(context: &RewriteContext,\n \n     let where_clause_str = match generics {\n         Some(generics) => {\n-            let generics_str = try_opt!(rewrite_generics(context,\n-                                                         generics,\n-                                                         Shape::legacy(context.config.max_width,\n-                                                                       offset),\n-                                                         offset + header_str.len(),\n-                                                         mk_sp(span.lo, body_lo)));\n+            let generics_indent = offset + last_line_width(&header_str);\n+            let shape = try_opt!(generics_shape(context.config, generics_indent));\n+            let generics_str =\n+                try_opt!(rewrite_generics(context, generics, shape, mk_sp(span.lo, body_lo)));\n             result.push_str(&generics_str);\n \n             let where_budget = try_opt!(context\n@@ -1050,33 +1041,24 @@ fn format_tuple_struct(context: &RewriteContext,\n                                    .config\n                                    .max_width\n                                    .checked_sub(item_indent.width() + 3));\n+    let shape = Shape::legacy(item_budget, item_indent);\n \n-    let items =\n-        itemize_list(context.codemap,\n-                     fields.iter(),\n-                     \")\",\n-                     |field| {\n-                         // Include attributes and doc comments, if present\n-                         if !field.attrs.is_empty() {\n-                             field.attrs[0].span.lo\n-                         } else {\n-                             field.span.lo\n-                         }\n-                     },\n-                     |field| field.ty.span.hi,\n-                     |field| field.rewrite(context, Shape::legacy(item_budget, item_indent)),\n-                     context.codemap.span_after(span, \"(\"),\n-                     span.hi);\n-    let body_budget = try_opt!(context\n-                                   .config\n-                                   .max_width\n-                                   .checked_sub(offset.block_only().width() + result.len() +\n-                                                3));\n-    let body = try_opt!(list_helper(items,\n-                                    // TODO budget is wrong in block case\n-                                    Shape::legacy(body_budget, item_indent),\n-                                    context.config,\n-                                    tactic));\n+    let items = itemize_list(context.codemap,\n+                             fields.iter(),\n+                             \")\",\n+                             |field| {\n+                                 // Include attributes and doc comments, if present\n+                                 if !field.attrs.is_empty() {\n+                                     field.attrs[0].span.lo\n+                                 } else {\n+                                     field.span.lo\n+                                 }\n+                             },\n+                             |field| field.ty.span.hi,\n+                             |field| field.rewrite(context, shape),\n+                             context.codemap.span_after(span, \"(\"),\n+                             span.hi);\n+    let body = try_opt!(list_helper(items, shape, context.config, tactic));\n \n     if context.config.fn_args_layout == IndentStyle::Visual || !body.contains('\\n') {\n         result.push('(');\n@@ -1130,12 +1112,9 @@ pub fn rewrite_type_alias(context: &RewriteContext,\n \n     let generics_indent = indent + result.len();\n     let generics_span = mk_sp(context.codemap.span_after(span, \"type\"), ty.span.lo);\n-    let generics_width = context.config.max_width - \" =\".len();\n-    let generics_str = try_opt!(rewrite_generics(context,\n-                                                 generics,\n-                                                 Shape::legacy(generics_width, indent),\n-                                                 generics_indent,\n-                                                 generics_span));\n+    let shape = try_opt!(try_opt!(generics_shape(context.config, generics_indent))\n+                             .sub_width(\" =\".len()));\n+    let generics_str = try_opt!(rewrite_generics(context, generics, shape, generics_span));\n \n     result.push_str(&generics_str);\n \n@@ -1551,13 +1530,10 @@ fn rewrite_fn_base(context: &RewriteContext,\n     result.push_str(&ident.to_string());\n \n     // Generics.\n-    let generics_indent = indent + result.len();\n+    let generics_indent = indent + last_line_width(&result);\n     let generics_span = mk_sp(span.lo, span_for_return(&fd.output).lo);\n-    let generics_str = try_opt!(rewrite_generics(context,\n-                                                 generics,\n-                                                 Shape::legacy(context.config.max_width, indent),\n-                                                 generics_indent,\n-                                                 generics_span));\n+    let shape = try_opt!(generics_shape(context.config, generics_indent));\n+    let generics_str = try_opt!(rewrite_generics(context, generics, shape, generics_span));\n     result.push_str(&generics_str);\n \n     let snuggle_angle_bracket = last_line_width(&generics_str) == 1;\n@@ -1964,8 +1940,6 @@ fn newline_for_brace(config: &Config, where_clause: &ast::WhereClause) -> bool {\n fn rewrite_generics(context: &RewriteContext,\n                     generics: &ast::Generics,\n                     shape: Shape,\n-                    // TODO shouldn't need this\n-                    generics_offset: Indent,\n                     span: Span)\n                     -> Option<String> {\n     // FIXME: convert bounds to where clauses where they get too big or if\n@@ -1977,12 +1951,12 @@ fn rewrite_generics(context: &RewriteContext,\n     }\n \n     let offset = match context.config.generics_indent {\n-        IndentStyle::Block => shape.indent.block_indent(context.config),\n+        IndentStyle::Block => shape.indent.block_only().block_indent(context.config),\n         // 1 = <\n-        IndentStyle::Visual => generics_offset + 1,\n+        IndentStyle::Visual => shape.indent + 1,\n     };\n \n-    let h_budget = try_opt!(shape.width.checked_sub(generics_offset.width() + 2));\n+    let h_budget = try_opt!(shape.width.checked_sub(2));\n     // FIXME: might need to insert a newline if the generics are really long.\n \n     // Strings for the generics.\n@@ -2022,7 +1996,7 @@ fn rewrite_generics(context: &RewriteContext,\n         format!(\"<\\n{}{}\\n{}>\",\n                 offset.to_string(context.config),\n                 list_str,\n-                shape.indent.to_string(context.config))\n+                shape.indent.block_only().to_string(context.config))\n     } else if context.config.spaces_within_angle_brackets {\n         format!(\"< {} >\", list_str)\n     } else {\n@@ -2224,14 +2198,10 @@ fn format_generics(context: &RewriteContext,\n                    brace_style: BraceStyle,\n                    force_same_line_brace: bool,\n                    offset: Indent,\n-                   generics_offset: Indent,\n                    span: Span)\n                    -> Option<String> {\n-    let mut result = try_opt!(rewrite_generics(context,\n-                                               generics,\n-                                               Shape::legacy(context.config.max_width, offset),\n-                                               generics_offset,\n-                                               span));\n+    let shape = try_opt!(generics_shape(context.config, offset));\n+    let mut result = try_opt!(rewrite_generics(context, generics, shape, span));\n \n     if !generics.where_clause.predicates.is_empty() || result.contains('\\n') {\n         let budget = try_opt!(context\n@@ -2273,3 +2243,8 @@ fn format_generics(context: &RewriteContext,\n \n     Some(result)\n }\n+\n+fn generics_shape(config: &Config, indent: Indent) -> Option<Shape> {\n+    Some(Shape::legacy(try_opt!(config.max_width.checked_sub(indent.width())),\n+                       indent))\n+}"}, {"sha": "f7383fbc41e3b789d17870e0a05803950e89129f", "filename": "src/lib.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2223b64f8631898358934197263c692a0d308729/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2223b64f8631898358934197263c692a0d308729/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2223b64f8631898358934197263c692a0d308729", "patch": "@@ -158,7 +158,7 @@ impl Indent {\n         let (num_tabs, num_spaces) = if config.hard_tabs {\n             (self.block_indent / config.tab_spaces, self.alignment)\n         } else {\n-            (0, self.block_indent + self.alignment)\n+            (0, self.width())\n         };\n         let num_chars = num_tabs + num_spaces;\n         let mut indent = String::with_capacity(num_chars);\n@@ -262,10 +262,7 @@ impl Shape {\n         let alignment = self.offset + extra_width;\n         Shape {\n             width: self.width,\n-            indent: Indent {\n-                block_indent: self.indent.block_indent,\n-                alignment: alignment,\n-            },\n+            indent: Indent::new(self.indent.block_indent, alignment),\n             offset: alignment,\n         }\n     }\n@@ -274,19 +271,13 @@ impl Shape {\n         if self.indent.alignment == 0 {\n             Shape {\n                 width: self.width,\n-                indent: Indent {\n-                    block_indent: self.indent.block_indent + extra_width,\n-                    alignment: 0,\n-                },\n+                indent: Indent::new(self.indent.block_indent + extra_width, 0),\n                 offset: 0,\n             }\n         } else {\n             Shape {\n                 width: self.width,\n-                indent: Indent {\n-                    block_indent: self.indent.block_indent,\n-                    alignment: self.indent.alignment + extra_width,\n-                },\n+                indent: self.indent + extra_width,\n                 offset: self.indent.alignment + extra_width,\n             }\n         }\n@@ -295,21 +286,15 @@ impl Shape {\n     pub fn add_offset(&self, extra_width: usize) -> Shape {\n         Shape {\n             width: self.width,\n-            indent: Indent {\n-                block_indent: self.indent.block_indent,\n-                alignment: self.indent.alignment,\n-            },\n+            indent: self.indent,\n             offset: self.offset + extra_width,\n         }\n     }\n \n     pub fn block(&self) -> Shape {\n         Shape {\n             width: self.width,\n-            indent: Indent {\n-                block_indent: self.indent.block_indent,\n-                alignment: 0,\n-            },\n+            indent: self.indent.block_only(),\n             offset: self.offset,\n         }\n     }"}, {"sha": "8f935c1aa4dc54626488366865b638c21b914c5e", "filename": "tests/source/struct_tuple_visual.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2223b64f8631898358934197263c692a0d308729/tests%2Fsource%2Fstruct_tuple_visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2223b64f8631898358934197263c692a0d308729/tests%2Fsource%2Fstruct_tuple_visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstruct_tuple_visual.rs?ref=2223b64f8631898358934197263c692a0d308729", "patch": "@@ -0,0 +1,39 @@\n+// rustfmt-normalize_comments: true\n+// rustfmt-wrap_comments: true\n+// rustfmt-error_on_line_overflow: false\n+// rustfmt-struct_lit_style: Visual\n+fn foo() {\n+\n+    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(f(), b());\n+\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(// Comment\n+                                                                                      foo(), /* Comment */\n+                                                                                      // Comment\n+                                                                                      bar() /* Comment */);\n+\n+    Foo(Bar, f());\n+\n+    Quux(if cond {\n+             bar();\n+         },\n+         baz());\n+\n+    Baz(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,\n+        zzzzz /* test */);\n+\n+    A(// Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit\n+      // amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante\n+      // hendrerit. Donec et mollis dolor.\n+      item(),\n+      // Praesent et diam eget libero egestas mattis sit amet vitae augue.\n+      // Nam tincidunt congue enim, ut porta lorem lacinia consectetur.\n+      Item);\n+\n+    Diagram(//                 o        This graph demonstrates how\n+            //                / \\       significant whitespace is\n+            //               o   o      preserved.\n+            //              /|\\   \\\n+            //             o o o   o\n+            G)\n+\n+}"}, {"sha": "8f935c1aa4dc54626488366865b638c21b914c5e", "filename": "tests/target/struct_tuple_visual.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2223b64f8631898358934197263c692a0d308729/tests%2Ftarget%2Fstruct_tuple_visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2223b64f8631898358934197263c692a0d308729/tests%2Ftarget%2Fstruct_tuple_visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_tuple_visual.rs?ref=2223b64f8631898358934197263c692a0d308729", "patch": "@@ -0,0 +1,39 @@\n+// rustfmt-normalize_comments: true\n+// rustfmt-wrap_comments: true\n+// rustfmt-error_on_line_overflow: false\n+// rustfmt-struct_lit_style: Visual\n+fn foo() {\n+\n+    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(f(), b());\n+\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(// Comment\n+                                                                                      foo(), /* Comment */\n+                                                                                      // Comment\n+                                                                                      bar() /* Comment */);\n+\n+    Foo(Bar, f());\n+\n+    Quux(if cond {\n+             bar();\n+         },\n+         baz());\n+\n+    Baz(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,\n+        zzzzz /* test */);\n+\n+    A(// Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit\n+      // amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante\n+      // hendrerit. Donec et mollis dolor.\n+      item(),\n+      // Praesent et diam eget libero egestas mattis sit amet vitae augue.\n+      // Nam tincidunt congue enim, ut porta lorem lacinia consectetur.\n+      Item);\n+\n+    Diagram(//                 o        This graph demonstrates how\n+            //                / \\       significant whitespace is\n+            //               o   o      preserved.\n+            //              /|\\   \\\n+            //             o o o   o\n+            G)\n+\n+}"}]}