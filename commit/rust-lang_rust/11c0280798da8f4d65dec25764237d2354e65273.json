{"sha": "11c0280798da8f4d65dec25764237d2354e65273", "node_id": "C_kwDOAAsO6NoAKDExYzAyODA3OThkYThmNGQ2NWRlYzI1NzY0MjM3ZDIzNTRlNjUyNzM", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-07-27T18:47:42Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-07-28T12:24:44Z"}, "message": "bless mir opt tests", "tree": {"sha": "61bebb017af06a253d2268f7c1d811d0965d33dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61bebb017af06a253d2268f7c1d811d0965d33dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11c0280798da8f4d65dec25764237d2354e65273", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11c0280798da8f4d65dec25764237d2354e65273", "html_url": "https://github.com/rust-lang/rust/commit/11c0280798da8f4d65dec25764237d2354e65273", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11c0280798da8f4d65dec25764237d2354e65273/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cf7ead0bc840b097b770773b7a58d99bf3f5bdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cf7ead0bc840b097b770773b7a58d99bf3f5bdf", "html_url": "https://github.com/rust-lang/rust/commit/7cf7ead0bc840b097b770773b7a58d99bf3f5bdf"}], "stats": {"total": 19824, "additions": 9912, "deletions": 9912}, "files": [{"sha": "57e298625f9a086c1e19dac1904153824bafc34f", "filename": "src/test/mir-opt/76803_regression.encode.SimplifyBranchSame.diff", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2F76803_regression.encode.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2F76803_regression.encode.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2F76803_regression.encode.SimplifyBranchSame.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,28 +2,28 @@\n + // MIR for `encode` after SimplifyBranchSame\n   \n   fn encode(_1: Type) -> Type {\n-      debug v => _1;                       // in scope 0 at $DIR/76803_regression.rs:10:15: 10:16\n-      let mut _0: Type;                    // return place in scope 0 at $DIR/76803_regression.rs:10:27: 10:31\n-      let mut _2: isize;                   // in scope 0 at $DIR/76803_regression.rs:12:9: 12:16\n+      debug v => _1;                       // in scope 0 at $DIR/76803_regression.rs:+0:15: +0:16\n+      let mut _0: Type;                    // return place in scope 0 at $DIR/76803_regression.rs:+0:27: +0:31\n+      let mut _2: isize;                   // in scope 0 at $DIR/76803_regression.rs:+2:9: +2:16\n   \n       bb0: {\n-          _2 = discriminant(_1);           // scope 0 at $DIR/76803_regression.rs:11:11: 11:12\n-          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/76803_regression.rs:11:5: 11:12\n+          _2 = discriminant(_1);           // scope 0 at $DIR/76803_regression.rs:+1:11: +1:12\n+          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/76803_regression.rs:+1:5: +1:12\n       }\n   \n       bb1: {\n-          _0 = move _1;                    // scope 0 at $DIR/76803_regression.rs:13:14: 13:15\n-          goto -> bb3;                     // scope 0 at $DIR/76803_regression.rs:13:14: 13:15\n+          _0 = move _1;                    // scope 0 at $DIR/76803_regression.rs:+3:14: +3:15\n+          goto -> bb3;                     // scope 0 at $DIR/76803_regression.rs:+3:14: +3:15\n       }\n   \n       bb2: {\n-          Deinit(_0);                      // scope 0 at $DIR/76803_regression.rs:12:20: 12:27\n-          discriminant(_0) = 1;            // scope 0 at $DIR/76803_regression.rs:12:20: 12:27\n-          goto -> bb3;                     // scope 0 at $DIR/76803_regression.rs:12:20: 12:27\n+          Deinit(_0);                      // scope 0 at $DIR/76803_regression.rs:+2:20: +2:27\n+          discriminant(_0) = 1;            // scope 0 at $DIR/76803_regression.rs:+2:20: +2:27\n+          goto -> bb3;                     // scope 0 at $DIR/76803_regression.rs:+2:20: +2:27\n       }\n   \n       bb3: {\n-          return;                          // scope 0 at $DIR/76803_regression.rs:15:2: 15:2\n+          return;                          // scope 0 at $DIR/76803_regression.rs:+5:2: +5:2\n       }\n   }\n   "}, {"sha": "d41a66871cc438bdf0e6e11d2140f9eb247cac2a", "filename": "src/test/mir-opt/address_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 241, "deletions": 241, "changes": 482, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -33,83 +33,83 @@\n | 29: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*mut [i32]) }, span: $DIR/address-of.rs:36:12: 36:22, inferred_ty: *mut [i32]\n |\n fn address_of_reborrow() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/address-of.rs:3:26: 3:26\n-    let _1: &[i32; 10];                  // in scope 0 at $DIR/address-of.rs:4:9: 4:10\n-    let _2: [i32; 10];                   // in scope 0 at $DIR/address-of.rs:4:14: 4:21\n-    let mut _4: [i32; 10];               // in scope 0 at $DIR/address-of.rs:5:22: 5:29\n-    let _5: *const [i32; 10];            // in scope 0 at $DIR/address-of.rs:7:5: 7:18\n-    let mut _6: *const [i32; 10];        // in scope 0 at $DIR/address-of.rs:7:5: 7:18\n-    let _7: *const [i32; 10];            // in scope 0 at $DIR/address-of.rs:8:5: 8:26\n-    let _8: *const dyn std::marker::Send; // in scope 0 at $DIR/address-of.rs:9:5: 9:25\n-    let mut _9: *const dyn std::marker::Send; // in scope 0 at $DIR/address-of.rs:9:5: 9:25\n-    let mut _10: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:9:5: 9:6\n-    let _11: *const [i32];               // in scope 0 at $DIR/address-of.rs:10:5: 10:22\n-    let mut _12: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:10:5: 10:6\n-    let _13: *const i32;                 // in scope 0 at $DIR/address-of.rs:11:5: 11:20\n-    let mut _14: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:11:5: 11:6\n-    let mut _18: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:15:30: 15:31\n-    let mut _20: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:16:27: 16:28\n-    let _21: *const [i32; 10];           // in scope 0 at $DIR/address-of.rs:18:5: 18:18\n-    let mut _22: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:18:5: 18:18\n-    let _23: *const [i32; 10];           // in scope 0 at $DIR/address-of.rs:19:5: 19:26\n-    let _24: *const dyn std::marker::Send; // in scope 0 at $DIR/address-of.rs:20:5: 20:25\n-    let mut _25: *const dyn std::marker::Send; // in scope 0 at $DIR/address-of.rs:20:5: 20:25\n-    let mut _26: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:20:5: 20:6\n-    let _27: *const [i32];               // in scope 0 at $DIR/address-of.rs:21:5: 21:22\n-    let mut _28: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:21:5: 21:6\n-    let mut _32: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:25:30: 25:31\n-    let mut _34: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:26:27: 26:28\n-    let _35: *mut [i32; 10];             // in scope 0 at $DIR/address-of.rs:28:5: 28:16\n-    let mut _36: *mut [i32; 10];         // in scope 0 at $DIR/address-of.rs:28:5: 28:16\n-    let _37: *mut [i32; 10];             // in scope 0 at $DIR/address-of.rs:29:5: 29:24\n-    let _38: *mut dyn std::marker::Send; // in scope 0 at $DIR/address-of.rs:30:5: 30:23\n-    let mut _39: *mut dyn std::marker::Send; // in scope 0 at $DIR/address-of.rs:30:5: 30:23\n-    let mut _40: *mut [i32; 10];         // in scope 0 at $DIR/address-of.rs:30:5: 30:6\n-    let _41: *mut [i32];                 // in scope 0 at $DIR/address-of.rs:31:5: 31:20\n-    let mut _42: *mut [i32; 10];         // in scope 0 at $DIR/address-of.rs:31:5: 31:6\n-    let mut _46: *mut [i32; 10];         // in scope 0 at $DIR/address-of.rs:35:28: 35:29\n-    let mut _48: *mut [i32; 10];         // in scope 0 at $DIR/address-of.rs:36:25: 36:26\n+    let mut _0: ();                      // return place in scope 0 at $DIR/address-of.rs:+0:26: +0:26\n+    let _1: &[i32; 10];                  // in scope 0 at $DIR/address-of.rs:+1:9: +1:10\n+    let _2: [i32; 10];                   // in scope 0 at $DIR/address-of.rs:+1:14: +1:21\n+    let mut _4: [i32; 10];               // in scope 0 at $DIR/address-of.rs:+2:22: +2:29\n+    let _5: *const [i32; 10];            // in scope 0 at $DIR/address-of.rs:+4:5: +4:18\n+    let mut _6: *const [i32; 10];        // in scope 0 at $DIR/address-of.rs:+4:5: +4:18\n+    let _7: *const [i32; 10];            // in scope 0 at $DIR/address-of.rs:+5:5: +5:26\n+    let _8: *const dyn std::marker::Send; // in scope 0 at $DIR/address-of.rs:+6:5: +6:25\n+    let mut _9: *const dyn std::marker::Send; // in scope 0 at $DIR/address-of.rs:+6:5: +6:25\n+    let mut _10: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:+6:5: +6:6\n+    let _11: *const [i32];               // in scope 0 at $DIR/address-of.rs:+7:5: +7:22\n+    let mut _12: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:+7:5: +7:6\n+    let _13: *const i32;                 // in scope 0 at $DIR/address-of.rs:+8:5: +8:20\n+    let mut _14: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:+8:5: +8:6\n+    let mut _18: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:+12:30: +12:31\n+    let mut _20: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:+13:27: +13:28\n+    let _21: *const [i32; 10];           // in scope 0 at $DIR/address-of.rs:+15:5: +15:18\n+    let mut _22: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:+15:5: +15:18\n+    let _23: *const [i32; 10];           // in scope 0 at $DIR/address-of.rs:+16:5: +16:26\n+    let _24: *const dyn std::marker::Send; // in scope 0 at $DIR/address-of.rs:+17:5: +17:25\n+    let mut _25: *const dyn std::marker::Send; // in scope 0 at $DIR/address-of.rs:+17:5: +17:25\n+    let mut _26: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:+17:5: +17:6\n+    let _27: *const [i32];               // in scope 0 at $DIR/address-of.rs:+18:5: +18:22\n+    let mut _28: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:+18:5: +18:6\n+    let mut _32: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:+22:30: +22:31\n+    let mut _34: *const [i32; 10];       // in scope 0 at $DIR/address-of.rs:+23:27: +23:28\n+    let _35: *mut [i32; 10];             // in scope 0 at $DIR/address-of.rs:+25:5: +25:16\n+    let mut _36: *mut [i32; 10];         // in scope 0 at $DIR/address-of.rs:+25:5: +25:16\n+    let _37: *mut [i32; 10];             // in scope 0 at $DIR/address-of.rs:+26:5: +26:24\n+    let _38: *mut dyn std::marker::Send; // in scope 0 at $DIR/address-of.rs:+27:5: +27:23\n+    let mut _39: *mut dyn std::marker::Send; // in scope 0 at $DIR/address-of.rs:+27:5: +27:23\n+    let mut _40: *mut [i32; 10];         // in scope 0 at $DIR/address-of.rs:+27:5: +27:6\n+    let _41: *mut [i32];                 // in scope 0 at $DIR/address-of.rs:+28:5: +28:20\n+    let mut _42: *mut [i32; 10];         // in scope 0 at $DIR/address-of.rs:+28:5: +28:6\n+    let mut _46: *mut [i32; 10];         // in scope 0 at $DIR/address-of.rs:+32:28: +32:29\n+    let mut _48: *mut [i32; 10];         // in scope 0 at $DIR/address-of.rs:+33:25: +33:26\n     scope 1 {\n-        debug y => _1;                   // in scope 1 at $DIR/address-of.rs:4:9: 4:10\n-        let mut _3: &mut [i32; 10];      // in scope 1 at $DIR/address-of.rs:5:9: 5:14\n+        debug y => _1;                   // in scope 1 at $DIR/address-of.rs:+1:9: +1:10\n+        let mut _3: &mut [i32; 10];      // in scope 1 at $DIR/address-of.rs:+2:9: +2:14\n         scope 2 {\n-            debug z => _3;               // in scope 2 at $DIR/address-of.rs:5:9: 5:14\n-            let _15: *const [i32; 10] as UserTypeProjection { base: UserType(2), projs: [] }; // in scope 2 at $DIR/address-of.rs:13:9: 13:10\n+            debug z => _3;               // in scope 2 at $DIR/address-of.rs:+2:9: +2:14\n+            let _15: *const [i32; 10] as UserTypeProjection { base: UserType(2), projs: [] }; // in scope 2 at $DIR/address-of.rs:+10:9: +10:10\n             scope 3 {\n-                debug p => _15;          // in scope 3 at $DIR/address-of.rs:13:9: 13:10\n-                let _16: *const [i32; 10] as UserTypeProjection { base: UserType(4), projs: [] }; // in scope 3 at $DIR/address-of.rs:14:9: 14:10\n+                debug p => _15;          // in scope 3 at $DIR/address-of.rs:+10:9: +10:10\n+                let _16: *const [i32; 10] as UserTypeProjection { base: UserType(4), projs: [] }; // in scope 3 at $DIR/address-of.rs:+11:9: +11:10\n                 scope 4 {\n-                    debug p => _16;      // in scope 4 at $DIR/address-of.rs:14:9: 14:10\n-                    let _17: *const dyn std::marker::Send as UserTypeProjection { base: UserType(6), projs: [] }; // in scope 4 at $DIR/address-of.rs:15:9: 15:10\n+                    debug p => _16;      // in scope 4 at $DIR/address-of.rs:+11:9: +11:10\n+                    let _17: *const dyn std::marker::Send as UserTypeProjection { base: UserType(6), projs: [] }; // in scope 4 at $DIR/address-of.rs:+12:9: +12:10\n                     scope 5 {\n-                        debug p => _17;  // in scope 5 at $DIR/address-of.rs:15:9: 15:10\n-                        let _19: *const [i32] as UserTypeProjection { base: UserType(8), projs: [] }; // in scope 5 at $DIR/address-of.rs:16:9: 16:10\n+                        debug p => _17;  // in scope 5 at $DIR/address-of.rs:+12:9: +12:10\n+                        let _19: *const [i32] as UserTypeProjection { base: UserType(8), projs: [] }; // in scope 5 at $DIR/address-of.rs:+13:9: +13:10\n                         scope 6 {\n-                            debug p => _19; // in scope 6 at $DIR/address-of.rs:16:9: 16:10\n-                            let _29: *const [i32; 10] as UserTypeProjection { base: UserType(12), projs: [] }; // in scope 6 at $DIR/address-of.rs:23:9: 23:10\n+                            debug p => _19; // in scope 6 at $DIR/address-of.rs:+13:9: +13:10\n+                            let _29: *const [i32; 10] as UserTypeProjection { base: UserType(12), projs: [] }; // in scope 6 at $DIR/address-of.rs:+20:9: +20:10\n                             scope 7 {\n-                                debug p => _29; // in scope 7 at $DIR/address-of.rs:23:9: 23:10\n-                                let _30: *const [i32; 10] as UserTypeProjection { base: UserType(14), projs: [] }; // in scope 7 at $DIR/address-of.rs:24:9: 24:10\n+                                debug p => _29; // in scope 7 at $DIR/address-of.rs:+20:9: +20:10\n+                                let _30: *const [i32; 10] as UserTypeProjection { base: UserType(14), projs: [] }; // in scope 7 at $DIR/address-of.rs:+21:9: +21:10\n                                 scope 8 {\n-                                    debug p => _30; // in scope 8 at $DIR/address-of.rs:24:9: 24:10\n-                                    let _31: *const dyn std::marker::Send as UserTypeProjection { base: UserType(16), projs: [] }; // in scope 8 at $DIR/address-of.rs:25:9: 25:10\n+                                    debug p => _30; // in scope 8 at $DIR/address-of.rs:+21:9: +21:10\n+                                    let _31: *const dyn std::marker::Send as UserTypeProjection { base: UserType(16), projs: [] }; // in scope 8 at $DIR/address-of.rs:+22:9: +22:10\n                                     scope 9 {\n-                                        debug p => _31; // in scope 9 at $DIR/address-of.rs:25:9: 25:10\n-                                        let _33: *const [i32] as UserTypeProjection { base: UserType(18), projs: [] }; // in scope 9 at $DIR/address-of.rs:26:9: 26:10\n+                                        debug p => _31; // in scope 9 at $DIR/address-of.rs:+22:9: +22:10\n+                                        let _33: *const [i32] as UserTypeProjection { base: UserType(18), projs: [] }; // in scope 9 at $DIR/address-of.rs:+23:9: +23:10\n                                         scope 10 {\n-                                            debug p => _33; // in scope 10 at $DIR/address-of.rs:26:9: 26:10\n-                                            let _43: *mut [i32; 10] as UserTypeProjection { base: UserType(22), projs: [] }; // in scope 10 at $DIR/address-of.rs:33:9: 33:10\n+                                            debug p => _33; // in scope 10 at $DIR/address-of.rs:+23:9: +23:10\n+                                            let _43: *mut [i32; 10] as UserTypeProjection { base: UserType(22), projs: [] }; // in scope 10 at $DIR/address-of.rs:+30:9: +30:10\n                                             scope 11 {\n-                                                debug p => _43; // in scope 11 at $DIR/address-of.rs:33:9: 33:10\n-                                                let _44: *mut [i32; 10] as UserTypeProjection { base: UserType(24), projs: [] }; // in scope 11 at $DIR/address-of.rs:34:9: 34:10\n+                                                debug p => _43; // in scope 11 at $DIR/address-of.rs:+30:9: +30:10\n+                                                let _44: *mut [i32; 10] as UserTypeProjection { base: UserType(24), projs: [] }; // in scope 11 at $DIR/address-of.rs:+31:9: +31:10\n                                                 scope 12 {\n-                                                    debug p => _44; // in scope 12 at $DIR/address-of.rs:34:9: 34:10\n-                                                    let _45: *mut dyn std::marker::Send as UserTypeProjection { base: UserType(26), projs: [] }; // in scope 12 at $DIR/address-of.rs:35:9: 35:10\n+                                                    debug p => _44; // in scope 12 at $DIR/address-of.rs:+31:9: +31:10\n+                                                    let _45: *mut dyn std::marker::Send as UserTypeProjection { base: UserType(26), projs: [] }; // in scope 12 at $DIR/address-of.rs:+32:9: +32:10\n                                                     scope 13 {\n-                                                        debug p => _45; // in scope 13 at $DIR/address-of.rs:35:9: 35:10\n-                                                        let _47: *mut [i32] as UserTypeProjection { base: UserType(28), projs: [] }; // in scope 13 at $DIR/address-of.rs:36:9: 36:10\n+                                                        debug p => _45; // in scope 13 at $DIR/address-of.rs:+32:9: +32:10\n+                                                        let _47: *mut [i32] as UserTypeProjection { base: UserType(28), projs: [] }; // in scope 13 at $DIR/address-of.rs:+33:9: +33:10\n                                                         scope 14 {\n-                                                            debug p => _47; // in scope 14 at $DIR/address-of.rs:36:9: 36:10\n+                                                            debug p => _47; // in scope 14 at $DIR/address-of.rs:+33:9: +33:10\n                                                         }\n                                                     }\n                                                 }\n@@ -126,183 +126,183 @@ fn address_of_reborrow() -> () {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/address-of.rs:4:9: 4:10\n-        StorageLive(_2);                 // scope 0 at $DIR/address-of.rs:4:14: 4:21\n-        _2 = [const 0_i32; 10];          // scope 0 at $DIR/address-of.rs:4:14: 4:21\n-        _1 = &_2;                        // scope 0 at $DIR/address-of.rs:4:13: 4:21\n-        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/address-of.rs:4:9: 4:10\n-        StorageLive(_3);                 // scope 1 at $DIR/address-of.rs:5:9: 5:14\n-        StorageLive(_4);                 // scope 1 at $DIR/address-of.rs:5:22: 5:29\n-        _4 = [const 0_i32; 10];          // scope 1 at $DIR/address-of.rs:5:22: 5:29\n-        _3 = &mut _4;                    // scope 1 at $DIR/address-of.rs:5:17: 5:29\n-        FakeRead(ForLet(None), _3);      // scope 1 at $DIR/address-of.rs:5:9: 5:14\n-        StorageLive(_5);                 // scope 2 at $DIR/address-of.rs:7:5: 7:18\n-        StorageLive(_6);                 // scope 2 at $DIR/address-of.rs:7:5: 7:18\n-        _6 = &raw const (*_1);           // scope 2 at $DIR/address-of.rs:7:5: 7:6\n-        AscribeUserType(_6, o, UserTypeProjection { base: UserType(0), projs: [] }); // scope 2 at $DIR/address-of.rs:7:5: 7:18\n-        _5 = _6;                         // scope 2 at $DIR/address-of.rs:7:5: 7:18\n-        StorageDead(_6);                 // scope 2 at $DIR/address-of.rs:7:18: 7:19\n-        StorageDead(_5);                 // scope 2 at $DIR/address-of.rs:7:18: 7:19\n-        StorageLive(_7);                 // scope 2 at $DIR/address-of.rs:8:5: 8:26\n-        _7 = &raw const (*_1);           // scope 2 at $DIR/address-of.rs:8:5: 8:6\n-        StorageDead(_7);                 // scope 2 at $DIR/address-of.rs:8:26: 8:27\n-        StorageLive(_8);                 // scope 2 at $DIR/address-of.rs:9:5: 9:25\n-        StorageLive(_9);                 // scope 2 at $DIR/address-of.rs:9:5: 9:25\n-        StorageLive(_10);                // scope 2 at $DIR/address-of.rs:9:5: 9:6\n-        _10 = &raw const (*_1);          // scope 2 at $DIR/address-of.rs:9:5: 9:6\n-        _9 = move _10 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 2 at $DIR/address-of.rs:9:5: 9:6\n-        StorageDead(_10);                // scope 2 at $DIR/address-of.rs:9:5: 9:6\n-        AscribeUserType(_9, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 2 at $DIR/address-of.rs:9:5: 9:25\n-        _8 = _9;                         // scope 2 at $DIR/address-of.rs:9:5: 9:25\n-        StorageDead(_9);                 // scope 2 at $DIR/address-of.rs:9:25: 9:26\n-        StorageDead(_8);                 // scope 2 at $DIR/address-of.rs:9:25: 9:26\n-        StorageLive(_11);                // scope 2 at $DIR/address-of.rs:10:5: 10:22\n-        StorageLive(_12);                // scope 2 at $DIR/address-of.rs:10:5: 10:6\n-        _12 = &raw const (*_1);          // scope 2 at $DIR/address-of.rs:10:5: 10:6\n-        _11 = move _12 as *const [i32] (Pointer(Unsize)); // scope 2 at $DIR/address-of.rs:10:5: 10:6\n-        StorageDead(_12);                // scope 2 at $DIR/address-of.rs:10:5: 10:6\n-        StorageDead(_11);                // scope 2 at $DIR/address-of.rs:10:22: 10:23\n-        StorageLive(_13);                // scope 2 at $DIR/address-of.rs:11:5: 11:20\n-        StorageLive(_14);                // scope 2 at $DIR/address-of.rs:11:5: 11:6\n-        _14 = &raw const (*_1);          // scope 2 at $DIR/address-of.rs:11:5: 11:6\n-        _13 = move _14 as *const i32 (Pointer(ArrayToPointer)); // scope 2 at $DIR/address-of.rs:11:5: 11:20\n-        StorageDead(_14);                // scope 2 at $DIR/address-of.rs:11:19: 11:20\n-        StorageDead(_13);                // scope 2 at $DIR/address-of.rs:11:20: 11:21\n-        StorageLive(_15);                // scope 2 at $DIR/address-of.rs:13:9: 13:10\n-        _15 = &raw const (*_1);          // scope 2 at $DIR/address-of.rs:13:23: 13:24\n-        FakeRead(ForLet(None), _15);     // scope 2 at $DIR/address-of.rs:13:9: 13:10\n-        AscribeUserType(_15, o, UserTypeProjection { base: UserType(3), projs: [] }); // scope 2 at $DIR/address-of.rs:13:12: 13:20\n-        StorageLive(_16);                // scope 3 at $DIR/address-of.rs:14:9: 14:10\n-        _16 = &raw const (*_1);          // scope 3 at $DIR/address-of.rs:14:31: 14:32\n-        FakeRead(ForLet(None), _16);     // scope 3 at $DIR/address-of.rs:14:9: 14:10\n-        AscribeUserType(_16, o, UserTypeProjection { base: UserType(5), projs: [] }); // scope 3 at $DIR/address-of.rs:14:12: 14:28\n-        StorageLive(_17);                // scope 4 at $DIR/address-of.rs:15:9: 15:10\n-        StorageLive(_18);                // scope 4 at $DIR/address-of.rs:15:30: 15:31\n-        _18 = &raw const (*_1);          // scope 4 at $DIR/address-of.rs:15:30: 15:31\n-        _17 = move _18 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 4 at $DIR/address-of.rs:15:30: 15:31\n-        StorageDead(_18);                // scope 4 at $DIR/address-of.rs:15:30: 15:31\n-        FakeRead(ForLet(None), _17);     // scope 4 at $DIR/address-of.rs:15:9: 15:10\n-        AscribeUserType(_17, o, UserTypeProjection { base: UserType(7), projs: [] }); // scope 4 at $DIR/address-of.rs:15:12: 15:27\n-        StorageLive(_19);                // scope 5 at $DIR/address-of.rs:16:9: 16:10\n-        StorageLive(_20);                // scope 5 at $DIR/address-of.rs:16:27: 16:28\n-        _20 = &raw const (*_1);          // scope 5 at $DIR/address-of.rs:16:27: 16:28\n-        _19 = move _20 as *const [i32] (Pointer(Unsize)); // scope 5 at $DIR/address-of.rs:16:27: 16:28\n-        StorageDead(_20);                // scope 5 at $DIR/address-of.rs:16:27: 16:28\n-        FakeRead(ForLet(None), _19);     // scope 5 at $DIR/address-of.rs:16:9: 16:10\n-        AscribeUserType(_19, o, UserTypeProjection { base: UserType(9), projs: [] }); // scope 5 at $DIR/address-of.rs:16:12: 16:24\n-        StorageLive(_21);                // scope 6 at $DIR/address-of.rs:18:5: 18:18\n-        StorageLive(_22);                // scope 6 at $DIR/address-of.rs:18:5: 18:18\n-        _22 = &raw const (*_3);          // scope 6 at $DIR/address-of.rs:18:5: 18:6\n-        AscribeUserType(_22, o, UserTypeProjection { base: UserType(10), projs: [] }); // scope 6 at $DIR/address-of.rs:18:5: 18:18\n-        _21 = _22;                       // scope 6 at $DIR/address-of.rs:18:5: 18:18\n-        StorageDead(_22);                // scope 6 at $DIR/address-of.rs:18:18: 18:19\n-        StorageDead(_21);                // scope 6 at $DIR/address-of.rs:18:18: 18:19\n-        StorageLive(_23);                // scope 6 at $DIR/address-of.rs:19:5: 19:26\n-        _23 = &raw const (*_3);          // scope 6 at $DIR/address-of.rs:19:5: 19:6\n-        StorageDead(_23);                // scope 6 at $DIR/address-of.rs:19:26: 19:27\n-        StorageLive(_24);                // scope 6 at $DIR/address-of.rs:20:5: 20:25\n-        StorageLive(_25);                // scope 6 at $DIR/address-of.rs:20:5: 20:25\n-        StorageLive(_26);                // scope 6 at $DIR/address-of.rs:20:5: 20:6\n-        _26 = &raw const (*_3);          // scope 6 at $DIR/address-of.rs:20:5: 20:6\n-        _25 = move _26 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 6 at $DIR/address-of.rs:20:5: 20:6\n-        StorageDead(_26);                // scope 6 at $DIR/address-of.rs:20:5: 20:6\n-        AscribeUserType(_25, o, UserTypeProjection { base: UserType(11), projs: [] }); // scope 6 at $DIR/address-of.rs:20:5: 20:25\n-        _24 = _25;                       // scope 6 at $DIR/address-of.rs:20:5: 20:25\n-        StorageDead(_25);                // scope 6 at $DIR/address-of.rs:20:25: 20:26\n-        StorageDead(_24);                // scope 6 at $DIR/address-of.rs:20:25: 20:26\n-        StorageLive(_27);                // scope 6 at $DIR/address-of.rs:21:5: 21:22\n-        StorageLive(_28);                // scope 6 at $DIR/address-of.rs:21:5: 21:6\n-        _28 = &raw const (*_3);          // scope 6 at $DIR/address-of.rs:21:5: 21:6\n-        _27 = move _28 as *const [i32] (Pointer(Unsize)); // scope 6 at $DIR/address-of.rs:21:5: 21:6\n-        StorageDead(_28);                // scope 6 at $DIR/address-of.rs:21:5: 21:6\n-        StorageDead(_27);                // scope 6 at $DIR/address-of.rs:21:22: 21:23\n-        StorageLive(_29);                // scope 6 at $DIR/address-of.rs:23:9: 23:10\n-        _29 = &raw const (*_3);          // scope 6 at $DIR/address-of.rs:23:23: 23:24\n-        FakeRead(ForLet(None), _29);     // scope 6 at $DIR/address-of.rs:23:9: 23:10\n-        AscribeUserType(_29, o, UserTypeProjection { base: UserType(13), projs: [] }); // scope 6 at $DIR/address-of.rs:23:12: 23:20\n-        StorageLive(_30);                // scope 7 at $DIR/address-of.rs:24:9: 24:10\n-        _30 = &raw const (*_3);          // scope 7 at $DIR/address-of.rs:24:31: 24:32\n-        FakeRead(ForLet(None), _30);     // scope 7 at $DIR/address-of.rs:24:9: 24:10\n-        AscribeUserType(_30, o, UserTypeProjection { base: UserType(15), projs: [] }); // scope 7 at $DIR/address-of.rs:24:12: 24:28\n-        StorageLive(_31);                // scope 8 at $DIR/address-of.rs:25:9: 25:10\n-        StorageLive(_32);                // scope 8 at $DIR/address-of.rs:25:30: 25:31\n-        _32 = &raw const (*_3);          // scope 8 at $DIR/address-of.rs:25:30: 25:31\n-        _31 = move _32 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 8 at $DIR/address-of.rs:25:30: 25:31\n-        StorageDead(_32);                // scope 8 at $DIR/address-of.rs:25:30: 25:31\n-        FakeRead(ForLet(None), _31);     // scope 8 at $DIR/address-of.rs:25:9: 25:10\n-        AscribeUserType(_31, o, UserTypeProjection { base: UserType(17), projs: [] }); // scope 8 at $DIR/address-of.rs:25:12: 25:27\n-        StorageLive(_33);                // scope 9 at $DIR/address-of.rs:26:9: 26:10\n-        StorageLive(_34);                // scope 9 at $DIR/address-of.rs:26:27: 26:28\n-        _34 = &raw const (*_3);          // scope 9 at $DIR/address-of.rs:26:27: 26:28\n-        _33 = move _34 as *const [i32] (Pointer(Unsize)); // scope 9 at $DIR/address-of.rs:26:27: 26:28\n-        StorageDead(_34);                // scope 9 at $DIR/address-of.rs:26:27: 26:28\n-        FakeRead(ForLet(None), _33);     // scope 9 at $DIR/address-of.rs:26:9: 26:10\n-        AscribeUserType(_33, o, UserTypeProjection { base: UserType(19), projs: [] }); // scope 9 at $DIR/address-of.rs:26:12: 26:24\n-        StorageLive(_35);                // scope 10 at $DIR/address-of.rs:28:5: 28:16\n-        StorageLive(_36);                // scope 10 at $DIR/address-of.rs:28:5: 28:16\n-        _36 = &raw mut (*_3);            // scope 10 at $DIR/address-of.rs:28:5: 28:6\n-        AscribeUserType(_36, o, UserTypeProjection { base: UserType(20), projs: [] }); // scope 10 at $DIR/address-of.rs:28:5: 28:16\n-        _35 = _36;                       // scope 10 at $DIR/address-of.rs:28:5: 28:16\n-        StorageDead(_36);                // scope 10 at $DIR/address-of.rs:28:16: 28:17\n-        StorageDead(_35);                // scope 10 at $DIR/address-of.rs:28:16: 28:17\n-        StorageLive(_37);                // scope 10 at $DIR/address-of.rs:29:5: 29:24\n-        _37 = &raw mut (*_3);            // scope 10 at $DIR/address-of.rs:29:5: 29:6\n-        StorageDead(_37);                // scope 10 at $DIR/address-of.rs:29:24: 29:25\n-        StorageLive(_38);                // scope 10 at $DIR/address-of.rs:30:5: 30:23\n-        StorageLive(_39);                // scope 10 at $DIR/address-of.rs:30:5: 30:23\n-        StorageLive(_40);                // scope 10 at $DIR/address-of.rs:30:5: 30:6\n-        _40 = &raw mut (*_3);            // scope 10 at $DIR/address-of.rs:30:5: 30:6\n-        _39 = move _40 as *mut dyn std::marker::Send (Pointer(Unsize)); // scope 10 at $DIR/address-of.rs:30:5: 30:6\n-        StorageDead(_40);                // scope 10 at $DIR/address-of.rs:30:5: 30:6\n-        AscribeUserType(_39, o, UserTypeProjection { base: UserType(21), projs: [] }); // scope 10 at $DIR/address-of.rs:30:5: 30:23\n-        _38 = _39;                       // scope 10 at $DIR/address-of.rs:30:5: 30:23\n-        StorageDead(_39);                // scope 10 at $DIR/address-of.rs:30:23: 30:24\n-        StorageDead(_38);                // scope 10 at $DIR/address-of.rs:30:23: 30:24\n-        StorageLive(_41);                // scope 10 at $DIR/address-of.rs:31:5: 31:20\n-        StorageLive(_42);                // scope 10 at $DIR/address-of.rs:31:5: 31:6\n-        _42 = &raw mut (*_3);            // scope 10 at $DIR/address-of.rs:31:5: 31:6\n-        _41 = move _42 as *mut [i32] (Pointer(Unsize)); // scope 10 at $DIR/address-of.rs:31:5: 31:6\n-        StorageDead(_42);                // scope 10 at $DIR/address-of.rs:31:5: 31:6\n-        StorageDead(_41);                // scope 10 at $DIR/address-of.rs:31:20: 31:21\n-        StorageLive(_43);                // scope 10 at $DIR/address-of.rs:33:9: 33:10\n-        _43 = &raw mut (*_3);            // scope 10 at $DIR/address-of.rs:33:21: 33:22\n-        FakeRead(ForLet(None), _43);     // scope 10 at $DIR/address-of.rs:33:9: 33:10\n-        AscribeUserType(_43, o, UserTypeProjection { base: UserType(23), projs: [] }); // scope 10 at $DIR/address-of.rs:33:12: 33:18\n-        StorageLive(_44);                // scope 11 at $DIR/address-of.rs:34:9: 34:10\n-        _44 = &raw mut (*_3);            // scope 11 at $DIR/address-of.rs:34:29: 34:30\n-        FakeRead(ForLet(None), _44);     // scope 11 at $DIR/address-of.rs:34:9: 34:10\n-        AscribeUserType(_44, o, UserTypeProjection { base: UserType(25), projs: [] }); // scope 11 at $DIR/address-of.rs:34:12: 34:26\n-        StorageLive(_45);                // scope 12 at $DIR/address-of.rs:35:9: 35:10\n-        StorageLive(_46);                // scope 12 at $DIR/address-of.rs:35:28: 35:29\n-        _46 = &raw mut (*_3);            // scope 12 at $DIR/address-of.rs:35:28: 35:29\n-        _45 = move _46 as *mut dyn std::marker::Send (Pointer(Unsize)); // scope 12 at $DIR/address-of.rs:35:28: 35:29\n-        StorageDead(_46);                // scope 12 at $DIR/address-of.rs:35:28: 35:29\n-        FakeRead(ForLet(None), _45);     // scope 12 at $DIR/address-of.rs:35:9: 35:10\n-        AscribeUserType(_45, o, UserTypeProjection { base: UserType(27), projs: [] }); // scope 12 at $DIR/address-of.rs:35:12: 35:25\n-        StorageLive(_47);                // scope 13 at $DIR/address-of.rs:36:9: 36:10\n-        StorageLive(_48);                // scope 13 at $DIR/address-of.rs:36:25: 36:26\n-        _48 = &raw mut (*_3);            // scope 13 at $DIR/address-of.rs:36:25: 36:26\n-        _47 = move _48 as *mut [i32] (Pointer(Unsize)); // scope 13 at $DIR/address-of.rs:36:25: 36:26\n-        StorageDead(_48);                // scope 13 at $DIR/address-of.rs:36:25: 36:26\n-        FakeRead(ForLet(None), _47);     // scope 13 at $DIR/address-of.rs:36:9: 36:10\n-        AscribeUserType(_47, o, UserTypeProjection { base: UserType(29), projs: [] }); // scope 13 at $DIR/address-of.rs:36:12: 36:22\n-        _0 = const ();                   // scope 0 at $DIR/address-of.rs:3:26: 37:2\n-        StorageDead(_47);                // scope 13 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_45);                // scope 12 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_44);                // scope 11 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_43);                // scope 10 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_33);                // scope 9 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_31);                // scope 8 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_30);                // scope 7 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_29);                // scope 6 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_19);                // scope 5 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_17);                // scope 4 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_16);                // scope 3 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_15);                // scope 2 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_4);                 // scope 1 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_3);                 // scope 1 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_2);                 // scope 0 at $DIR/address-of.rs:37:1: 37:2\n-        StorageDead(_1);                 // scope 0 at $DIR/address-of.rs:37:1: 37:2\n-        return;                          // scope 0 at $DIR/address-of.rs:37:2: 37:2\n+        StorageLive(_1);                 // scope 0 at $DIR/address-of.rs:+1:9: +1:10\n+        StorageLive(_2);                 // scope 0 at $DIR/address-of.rs:+1:14: +1:21\n+        _2 = [const 0_i32; 10];          // scope 0 at $DIR/address-of.rs:+1:14: +1:21\n+        _1 = &_2;                        // scope 0 at $DIR/address-of.rs:+1:13: +1:21\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/address-of.rs:+1:9: +1:10\n+        StorageLive(_3);                 // scope 1 at $DIR/address-of.rs:+2:9: +2:14\n+        StorageLive(_4);                 // scope 1 at $DIR/address-of.rs:+2:22: +2:29\n+        _4 = [const 0_i32; 10];          // scope 1 at $DIR/address-of.rs:+2:22: +2:29\n+        _3 = &mut _4;                    // scope 1 at $DIR/address-of.rs:+2:17: +2:29\n+        FakeRead(ForLet(None), _3);      // scope 1 at $DIR/address-of.rs:+2:9: +2:14\n+        StorageLive(_5);                 // scope 2 at $DIR/address-of.rs:+4:5: +4:18\n+        StorageLive(_6);                 // scope 2 at $DIR/address-of.rs:+4:5: +4:18\n+        _6 = &raw const (*_1);           // scope 2 at $DIR/address-of.rs:+4:5: +4:6\n+        AscribeUserType(_6, o, UserTypeProjection { base: UserType(0), projs: [] }); // scope 2 at $DIR/address-of.rs:+4:5: +4:18\n+        _5 = _6;                         // scope 2 at $DIR/address-of.rs:+4:5: +4:18\n+        StorageDead(_6);                 // scope 2 at $DIR/address-of.rs:+4:18: +4:19\n+        StorageDead(_5);                 // scope 2 at $DIR/address-of.rs:+4:18: +4:19\n+        StorageLive(_7);                 // scope 2 at $DIR/address-of.rs:+5:5: +5:26\n+        _7 = &raw const (*_1);           // scope 2 at $DIR/address-of.rs:+5:5: +5:6\n+        StorageDead(_7);                 // scope 2 at $DIR/address-of.rs:+5:26: +5:27\n+        StorageLive(_8);                 // scope 2 at $DIR/address-of.rs:+6:5: +6:25\n+        StorageLive(_9);                 // scope 2 at $DIR/address-of.rs:+6:5: +6:25\n+        StorageLive(_10);                // scope 2 at $DIR/address-of.rs:+6:5: +6:6\n+        _10 = &raw const (*_1);          // scope 2 at $DIR/address-of.rs:+6:5: +6:6\n+        _9 = move _10 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 2 at $DIR/address-of.rs:+6:5: +6:6\n+        StorageDead(_10);                // scope 2 at $DIR/address-of.rs:+6:5: +6:6\n+        AscribeUserType(_9, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 2 at $DIR/address-of.rs:+6:5: +6:25\n+        _8 = _9;                         // scope 2 at $DIR/address-of.rs:+6:5: +6:25\n+        StorageDead(_9);                 // scope 2 at $DIR/address-of.rs:+6:25: +6:26\n+        StorageDead(_8);                 // scope 2 at $DIR/address-of.rs:+6:25: +6:26\n+        StorageLive(_11);                // scope 2 at $DIR/address-of.rs:+7:5: +7:22\n+        StorageLive(_12);                // scope 2 at $DIR/address-of.rs:+7:5: +7:6\n+        _12 = &raw const (*_1);          // scope 2 at $DIR/address-of.rs:+7:5: +7:6\n+        _11 = move _12 as *const [i32] (Pointer(Unsize)); // scope 2 at $DIR/address-of.rs:+7:5: +7:6\n+        StorageDead(_12);                // scope 2 at $DIR/address-of.rs:+7:5: +7:6\n+        StorageDead(_11);                // scope 2 at $DIR/address-of.rs:+7:22: +7:23\n+        StorageLive(_13);                // scope 2 at $DIR/address-of.rs:+8:5: +8:20\n+        StorageLive(_14);                // scope 2 at $DIR/address-of.rs:+8:5: +8:6\n+        _14 = &raw const (*_1);          // scope 2 at $DIR/address-of.rs:+8:5: +8:6\n+        _13 = move _14 as *const i32 (Pointer(ArrayToPointer)); // scope 2 at $DIR/address-of.rs:+8:5: +8:20\n+        StorageDead(_14);                // scope 2 at $DIR/address-of.rs:+8:19: +8:20\n+        StorageDead(_13);                // scope 2 at $DIR/address-of.rs:+8:20: +8:21\n+        StorageLive(_15);                // scope 2 at $DIR/address-of.rs:+10:9: +10:10\n+        _15 = &raw const (*_1);          // scope 2 at $DIR/address-of.rs:+10:23: +10:24\n+        FakeRead(ForLet(None), _15);     // scope 2 at $DIR/address-of.rs:+10:9: +10:10\n+        AscribeUserType(_15, o, UserTypeProjection { base: UserType(3), projs: [] }); // scope 2 at $DIR/address-of.rs:+10:12: +10:20\n+        StorageLive(_16);                // scope 3 at $DIR/address-of.rs:+11:9: +11:10\n+        _16 = &raw const (*_1);          // scope 3 at $DIR/address-of.rs:+11:31: +11:32\n+        FakeRead(ForLet(None), _16);     // scope 3 at $DIR/address-of.rs:+11:9: +11:10\n+        AscribeUserType(_16, o, UserTypeProjection { base: UserType(5), projs: [] }); // scope 3 at $DIR/address-of.rs:+11:12: +11:28\n+        StorageLive(_17);                // scope 4 at $DIR/address-of.rs:+12:9: +12:10\n+        StorageLive(_18);                // scope 4 at $DIR/address-of.rs:+12:30: +12:31\n+        _18 = &raw const (*_1);          // scope 4 at $DIR/address-of.rs:+12:30: +12:31\n+        _17 = move _18 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 4 at $DIR/address-of.rs:+12:30: +12:31\n+        StorageDead(_18);                // scope 4 at $DIR/address-of.rs:+12:30: +12:31\n+        FakeRead(ForLet(None), _17);     // scope 4 at $DIR/address-of.rs:+12:9: +12:10\n+        AscribeUserType(_17, o, UserTypeProjection { base: UserType(7), projs: [] }); // scope 4 at $DIR/address-of.rs:+12:12: +12:27\n+        StorageLive(_19);                // scope 5 at $DIR/address-of.rs:+13:9: +13:10\n+        StorageLive(_20);                // scope 5 at $DIR/address-of.rs:+13:27: +13:28\n+        _20 = &raw const (*_1);          // scope 5 at $DIR/address-of.rs:+13:27: +13:28\n+        _19 = move _20 as *const [i32] (Pointer(Unsize)); // scope 5 at $DIR/address-of.rs:+13:27: +13:28\n+        StorageDead(_20);                // scope 5 at $DIR/address-of.rs:+13:27: +13:28\n+        FakeRead(ForLet(None), _19);     // scope 5 at $DIR/address-of.rs:+13:9: +13:10\n+        AscribeUserType(_19, o, UserTypeProjection { base: UserType(9), projs: [] }); // scope 5 at $DIR/address-of.rs:+13:12: +13:24\n+        StorageLive(_21);                // scope 6 at $DIR/address-of.rs:+15:5: +15:18\n+        StorageLive(_22);                // scope 6 at $DIR/address-of.rs:+15:5: +15:18\n+        _22 = &raw const (*_3);          // scope 6 at $DIR/address-of.rs:+15:5: +15:6\n+        AscribeUserType(_22, o, UserTypeProjection { base: UserType(10), projs: [] }); // scope 6 at $DIR/address-of.rs:+15:5: +15:18\n+        _21 = _22;                       // scope 6 at $DIR/address-of.rs:+15:5: +15:18\n+        StorageDead(_22);                // scope 6 at $DIR/address-of.rs:+15:18: +15:19\n+        StorageDead(_21);                // scope 6 at $DIR/address-of.rs:+15:18: +15:19\n+        StorageLive(_23);                // scope 6 at $DIR/address-of.rs:+16:5: +16:26\n+        _23 = &raw const (*_3);          // scope 6 at $DIR/address-of.rs:+16:5: +16:6\n+        StorageDead(_23);                // scope 6 at $DIR/address-of.rs:+16:26: +16:27\n+        StorageLive(_24);                // scope 6 at $DIR/address-of.rs:+17:5: +17:25\n+        StorageLive(_25);                // scope 6 at $DIR/address-of.rs:+17:5: +17:25\n+        StorageLive(_26);                // scope 6 at $DIR/address-of.rs:+17:5: +17:6\n+        _26 = &raw const (*_3);          // scope 6 at $DIR/address-of.rs:+17:5: +17:6\n+        _25 = move _26 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 6 at $DIR/address-of.rs:+17:5: +17:6\n+        StorageDead(_26);                // scope 6 at $DIR/address-of.rs:+17:5: +17:6\n+        AscribeUserType(_25, o, UserTypeProjection { base: UserType(11), projs: [] }); // scope 6 at $DIR/address-of.rs:+17:5: +17:25\n+        _24 = _25;                       // scope 6 at $DIR/address-of.rs:+17:5: +17:25\n+        StorageDead(_25);                // scope 6 at $DIR/address-of.rs:+17:25: +17:26\n+        StorageDead(_24);                // scope 6 at $DIR/address-of.rs:+17:25: +17:26\n+        StorageLive(_27);                // scope 6 at $DIR/address-of.rs:+18:5: +18:22\n+        StorageLive(_28);                // scope 6 at $DIR/address-of.rs:+18:5: +18:6\n+        _28 = &raw const (*_3);          // scope 6 at $DIR/address-of.rs:+18:5: +18:6\n+        _27 = move _28 as *const [i32] (Pointer(Unsize)); // scope 6 at $DIR/address-of.rs:+18:5: +18:6\n+        StorageDead(_28);                // scope 6 at $DIR/address-of.rs:+18:5: +18:6\n+        StorageDead(_27);                // scope 6 at $DIR/address-of.rs:+18:22: +18:23\n+        StorageLive(_29);                // scope 6 at $DIR/address-of.rs:+20:9: +20:10\n+        _29 = &raw const (*_3);          // scope 6 at $DIR/address-of.rs:+20:23: +20:24\n+        FakeRead(ForLet(None), _29);     // scope 6 at $DIR/address-of.rs:+20:9: +20:10\n+        AscribeUserType(_29, o, UserTypeProjection { base: UserType(13), projs: [] }); // scope 6 at $DIR/address-of.rs:+20:12: +20:20\n+        StorageLive(_30);                // scope 7 at $DIR/address-of.rs:+21:9: +21:10\n+        _30 = &raw const (*_3);          // scope 7 at $DIR/address-of.rs:+21:31: +21:32\n+        FakeRead(ForLet(None), _30);     // scope 7 at $DIR/address-of.rs:+21:9: +21:10\n+        AscribeUserType(_30, o, UserTypeProjection { base: UserType(15), projs: [] }); // scope 7 at $DIR/address-of.rs:+21:12: +21:28\n+        StorageLive(_31);                // scope 8 at $DIR/address-of.rs:+22:9: +22:10\n+        StorageLive(_32);                // scope 8 at $DIR/address-of.rs:+22:30: +22:31\n+        _32 = &raw const (*_3);          // scope 8 at $DIR/address-of.rs:+22:30: +22:31\n+        _31 = move _32 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 8 at $DIR/address-of.rs:+22:30: +22:31\n+        StorageDead(_32);                // scope 8 at $DIR/address-of.rs:+22:30: +22:31\n+        FakeRead(ForLet(None), _31);     // scope 8 at $DIR/address-of.rs:+22:9: +22:10\n+        AscribeUserType(_31, o, UserTypeProjection { base: UserType(17), projs: [] }); // scope 8 at $DIR/address-of.rs:+22:12: +22:27\n+        StorageLive(_33);                // scope 9 at $DIR/address-of.rs:+23:9: +23:10\n+        StorageLive(_34);                // scope 9 at $DIR/address-of.rs:+23:27: +23:28\n+        _34 = &raw const (*_3);          // scope 9 at $DIR/address-of.rs:+23:27: +23:28\n+        _33 = move _34 as *const [i32] (Pointer(Unsize)); // scope 9 at $DIR/address-of.rs:+23:27: +23:28\n+        StorageDead(_34);                // scope 9 at $DIR/address-of.rs:+23:27: +23:28\n+        FakeRead(ForLet(None), _33);     // scope 9 at $DIR/address-of.rs:+23:9: +23:10\n+        AscribeUserType(_33, o, UserTypeProjection { base: UserType(19), projs: [] }); // scope 9 at $DIR/address-of.rs:+23:12: +23:24\n+        StorageLive(_35);                // scope 10 at $DIR/address-of.rs:+25:5: +25:16\n+        StorageLive(_36);                // scope 10 at $DIR/address-of.rs:+25:5: +25:16\n+        _36 = &raw mut (*_3);            // scope 10 at $DIR/address-of.rs:+25:5: +25:6\n+        AscribeUserType(_36, o, UserTypeProjection { base: UserType(20), projs: [] }); // scope 10 at $DIR/address-of.rs:+25:5: +25:16\n+        _35 = _36;                       // scope 10 at $DIR/address-of.rs:+25:5: +25:16\n+        StorageDead(_36);                // scope 10 at $DIR/address-of.rs:+25:16: +25:17\n+        StorageDead(_35);                // scope 10 at $DIR/address-of.rs:+25:16: +25:17\n+        StorageLive(_37);                // scope 10 at $DIR/address-of.rs:+26:5: +26:24\n+        _37 = &raw mut (*_3);            // scope 10 at $DIR/address-of.rs:+26:5: +26:6\n+        StorageDead(_37);                // scope 10 at $DIR/address-of.rs:+26:24: +26:25\n+        StorageLive(_38);                // scope 10 at $DIR/address-of.rs:+27:5: +27:23\n+        StorageLive(_39);                // scope 10 at $DIR/address-of.rs:+27:5: +27:23\n+        StorageLive(_40);                // scope 10 at $DIR/address-of.rs:+27:5: +27:6\n+        _40 = &raw mut (*_3);            // scope 10 at $DIR/address-of.rs:+27:5: +27:6\n+        _39 = move _40 as *mut dyn std::marker::Send (Pointer(Unsize)); // scope 10 at $DIR/address-of.rs:+27:5: +27:6\n+        StorageDead(_40);                // scope 10 at $DIR/address-of.rs:+27:5: +27:6\n+        AscribeUserType(_39, o, UserTypeProjection { base: UserType(21), projs: [] }); // scope 10 at $DIR/address-of.rs:+27:5: +27:23\n+        _38 = _39;                       // scope 10 at $DIR/address-of.rs:+27:5: +27:23\n+        StorageDead(_39);                // scope 10 at $DIR/address-of.rs:+27:23: +27:24\n+        StorageDead(_38);                // scope 10 at $DIR/address-of.rs:+27:23: +27:24\n+        StorageLive(_41);                // scope 10 at $DIR/address-of.rs:+28:5: +28:20\n+        StorageLive(_42);                // scope 10 at $DIR/address-of.rs:+28:5: +28:6\n+        _42 = &raw mut (*_3);            // scope 10 at $DIR/address-of.rs:+28:5: +28:6\n+        _41 = move _42 as *mut [i32] (Pointer(Unsize)); // scope 10 at $DIR/address-of.rs:+28:5: +28:6\n+        StorageDead(_42);                // scope 10 at $DIR/address-of.rs:+28:5: +28:6\n+        StorageDead(_41);                // scope 10 at $DIR/address-of.rs:+28:20: +28:21\n+        StorageLive(_43);                // scope 10 at $DIR/address-of.rs:+30:9: +30:10\n+        _43 = &raw mut (*_3);            // scope 10 at $DIR/address-of.rs:+30:21: +30:22\n+        FakeRead(ForLet(None), _43);     // scope 10 at $DIR/address-of.rs:+30:9: +30:10\n+        AscribeUserType(_43, o, UserTypeProjection { base: UserType(23), projs: [] }); // scope 10 at $DIR/address-of.rs:+30:12: +30:18\n+        StorageLive(_44);                // scope 11 at $DIR/address-of.rs:+31:9: +31:10\n+        _44 = &raw mut (*_3);            // scope 11 at $DIR/address-of.rs:+31:29: +31:30\n+        FakeRead(ForLet(None), _44);     // scope 11 at $DIR/address-of.rs:+31:9: +31:10\n+        AscribeUserType(_44, o, UserTypeProjection { base: UserType(25), projs: [] }); // scope 11 at $DIR/address-of.rs:+31:12: +31:26\n+        StorageLive(_45);                // scope 12 at $DIR/address-of.rs:+32:9: +32:10\n+        StorageLive(_46);                // scope 12 at $DIR/address-of.rs:+32:28: +32:29\n+        _46 = &raw mut (*_3);            // scope 12 at $DIR/address-of.rs:+32:28: +32:29\n+        _45 = move _46 as *mut dyn std::marker::Send (Pointer(Unsize)); // scope 12 at $DIR/address-of.rs:+32:28: +32:29\n+        StorageDead(_46);                // scope 12 at $DIR/address-of.rs:+32:28: +32:29\n+        FakeRead(ForLet(None), _45);     // scope 12 at $DIR/address-of.rs:+32:9: +32:10\n+        AscribeUserType(_45, o, UserTypeProjection { base: UserType(27), projs: [] }); // scope 12 at $DIR/address-of.rs:+32:12: +32:25\n+        StorageLive(_47);                // scope 13 at $DIR/address-of.rs:+33:9: +33:10\n+        StorageLive(_48);                // scope 13 at $DIR/address-of.rs:+33:25: +33:26\n+        _48 = &raw mut (*_3);            // scope 13 at $DIR/address-of.rs:+33:25: +33:26\n+        _47 = move _48 as *mut [i32] (Pointer(Unsize)); // scope 13 at $DIR/address-of.rs:+33:25: +33:26\n+        StorageDead(_48);                // scope 13 at $DIR/address-of.rs:+33:25: +33:26\n+        FakeRead(ForLet(None), _47);     // scope 13 at $DIR/address-of.rs:+33:9: +33:10\n+        AscribeUserType(_47, o, UserTypeProjection { base: UserType(29), projs: [] }); // scope 13 at $DIR/address-of.rs:+33:12: +33:22\n+        _0 = const ();                   // scope 0 at $DIR/address-of.rs:+0:26: +34:2\n+        StorageDead(_47);                // scope 13 at $DIR/address-of.rs:+34:1: +34:2\n+        StorageDead(_45);                // scope 12 at $DIR/address-of.rs:+34:1: +34:2\n+        StorageDead(_44);                // scope 11 at $DIR/address-of.rs:+34:1: +34:2\n+        StorageDead(_43);                // scope 10 at $DIR/address-of.rs:+34:1: +34:2\n+        StorageDead(_33);                // scope 9 at $DIR/address-of.rs:+34:1: +34:2\n+        StorageDead(_31);                // scope 8 at $DIR/address-of.rs:+34:1: +34:2\n+        StorageDead(_30);                // scope 7 at $DIR/address-of.rs:+34:1: +34:2\n+        StorageDead(_29);                // scope 6 at $DIR/address-of.rs:+34:1: +34:2\n+        StorageDead(_19);                // scope 5 at $DIR/address-of.rs:+34:1: +34:2\n+        StorageDead(_17);                // scope 4 at $DIR/address-of.rs:+34:1: +34:2\n+        StorageDead(_16);                // scope 3 at $DIR/address-of.rs:+34:1: +34:2\n+        StorageDead(_15);                // scope 2 at $DIR/address-of.rs:+34:1: +34:2\n+        StorageDead(_4);                 // scope 1 at $DIR/address-of.rs:+34:1: +34:2\n+        StorageDead(_3);                 // scope 1 at $DIR/address-of.rs:+34:1: +34:2\n+        StorageDead(_2);                 // scope 0 at $DIR/address-of.rs:+34:1: +34:2\n+        StorageDead(_1);                 // scope 0 at $DIR/address-of.rs:+34:1: +34:2\n+        return;                          // scope 0 at $DIR/address-of.rs:+34:2: +34:2\n     }\n }"}, {"sha": "060077b8adb9eb8bd1fcd17a51fab4d688518df2", "filename": "src/test/mir-opt/address_of.borrow_and_cast.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Faddress_of.borrow_and_cast.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Faddress_of.borrow_and_cast.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Faddress_of.borrow_and_cast.SimplifyCfg-initial.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,47 +1,47 @@\n // MIR for `borrow_and_cast` after SimplifyCfg-initial\n \n fn borrow_and_cast(_1: i32) -> () {\n-    debug x => _1;                       // in scope 0 at $DIR/address-of.rs:41:20: 41:25\n-    let mut _0: ();                      // return place in scope 0 at $DIR/address-of.rs:41:32: 41:32\n-    let _2: *const i32;                  // in scope 0 at $DIR/address-of.rs:42:9: 42:10\n-    let _3: &i32;                        // in scope 0 at $DIR/address-of.rs:42:13: 42:15\n-    let _5: &mut i32;                    // in scope 0 at $DIR/address-of.rs:43:13: 43:19\n-    let mut _7: &mut i32;                // in scope 0 at $DIR/address-of.rs:44:13: 44:19\n+    debug x => _1;                       // in scope 0 at $DIR/address-of.rs:+0:20: +0:25\n+    let mut _0: ();                      // return place in scope 0 at $DIR/address-of.rs:+0:32: +0:32\n+    let _2: *const i32;                  // in scope 0 at $DIR/address-of.rs:+1:9: +1:10\n+    let _3: &i32;                        // in scope 0 at $DIR/address-of.rs:+1:13: +1:15\n+    let _5: &mut i32;                    // in scope 0 at $DIR/address-of.rs:+2:13: +2:19\n+    let mut _7: &mut i32;                // in scope 0 at $DIR/address-of.rs:+3:13: +3:19\n     scope 1 {\n-        debug p => _2;                   // in scope 1 at $DIR/address-of.rs:42:9: 42:10\n-        let _4: *const i32;              // in scope 1 at $DIR/address-of.rs:43:9: 43:10\n+        debug p => _2;                   // in scope 1 at $DIR/address-of.rs:+1:9: +1:10\n+        let _4: *const i32;              // in scope 1 at $DIR/address-of.rs:+2:9: +2:10\n         scope 2 {\n-            debug q => _4;               // in scope 2 at $DIR/address-of.rs:43:9: 43:10\n-            let _6: *mut i32;            // in scope 2 at $DIR/address-of.rs:44:9: 44:10\n+            debug q => _4;               // in scope 2 at $DIR/address-of.rs:+2:9: +2:10\n+            let _6: *mut i32;            // in scope 2 at $DIR/address-of.rs:+3:9: +3:10\n             scope 3 {\n-                debug r => _6;           // in scope 3 at $DIR/address-of.rs:44:9: 44:10\n+                debug r => _6;           // in scope 3 at $DIR/address-of.rs:+3:9: +3:10\n             }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/address-of.rs:42:9: 42:10\n-        StorageLive(_3);                 // scope 0 at $DIR/address-of.rs:42:13: 42:15\n-        _3 = &_1;                        // scope 0 at $DIR/address-of.rs:42:13: 42:15\n-        _2 = &raw const (*_3);           // scope 0 at $DIR/address-of.rs:42:13: 42:15\n-        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/address-of.rs:42:9: 42:10\n-        StorageDead(_3);                 // scope 0 at $DIR/address-of.rs:42:29: 42:30\n-        StorageLive(_4);                 // scope 1 at $DIR/address-of.rs:43:9: 43:10\n-        StorageLive(_5);                 // scope 1 at $DIR/address-of.rs:43:13: 43:19\n-        _5 = &mut _1;                    // scope 1 at $DIR/address-of.rs:43:13: 43:19\n-        _4 = &raw const (*_5);           // scope 1 at $DIR/address-of.rs:43:13: 43:19\n-        FakeRead(ForLet(None), _4);      // scope 1 at $DIR/address-of.rs:43:9: 43:10\n-        StorageDead(_5);                 // scope 1 at $DIR/address-of.rs:43:33: 43:34\n-        StorageLive(_6);                 // scope 2 at $DIR/address-of.rs:44:9: 44:10\n-        StorageLive(_7);                 // scope 2 at $DIR/address-of.rs:44:13: 44:19\n-        _7 = &mut _1;                    // scope 2 at $DIR/address-of.rs:44:13: 44:19\n-        _6 = &raw mut (*_7);             // scope 2 at $DIR/address-of.rs:44:13: 44:19\n-        FakeRead(ForLet(None), _6);      // scope 2 at $DIR/address-of.rs:44:9: 44:10\n-        StorageDead(_7);                 // scope 2 at $DIR/address-of.rs:44:31: 44:32\n-        _0 = const ();                   // scope 0 at $DIR/address-of.rs:41:32: 45:2\n-        StorageDead(_6);                 // scope 2 at $DIR/address-of.rs:45:1: 45:2\n-        StorageDead(_4);                 // scope 1 at $DIR/address-of.rs:45:1: 45:2\n-        StorageDead(_2);                 // scope 0 at $DIR/address-of.rs:45:1: 45:2\n-        return;                          // scope 0 at $DIR/address-of.rs:45:2: 45:2\n+        StorageLive(_2);                 // scope 0 at $DIR/address-of.rs:+1:9: +1:10\n+        StorageLive(_3);                 // scope 0 at $DIR/address-of.rs:+1:13: +1:15\n+        _3 = &_1;                        // scope 0 at $DIR/address-of.rs:+1:13: +1:15\n+        _2 = &raw const (*_3);           // scope 0 at $DIR/address-of.rs:+1:13: +1:15\n+        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/address-of.rs:+1:9: +1:10\n+        StorageDead(_3);                 // scope 0 at $DIR/address-of.rs:+1:29: +1:30\n+        StorageLive(_4);                 // scope 1 at $DIR/address-of.rs:+2:9: +2:10\n+        StorageLive(_5);                 // scope 1 at $DIR/address-of.rs:+2:13: +2:19\n+        _5 = &mut _1;                    // scope 1 at $DIR/address-of.rs:+2:13: +2:19\n+        _4 = &raw const (*_5);           // scope 1 at $DIR/address-of.rs:+2:13: +2:19\n+        FakeRead(ForLet(None), _4);      // scope 1 at $DIR/address-of.rs:+2:9: +2:10\n+        StorageDead(_5);                 // scope 1 at $DIR/address-of.rs:+2:33: +2:34\n+        StorageLive(_6);                 // scope 2 at $DIR/address-of.rs:+3:9: +3:10\n+        StorageLive(_7);                 // scope 2 at $DIR/address-of.rs:+3:13: +3:19\n+        _7 = &mut _1;                    // scope 2 at $DIR/address-of.rs:+3:13: +3:19\n+        _6 = &raw mut (*_7);             // scope 2 at $DIR/address-of.rs:+3:13: +3:19\n+        FakeRead(ForLet(None), _6);      // scope 2 at $DIR/address-of.rs:+3:9: +3:10\n+        StorageDead(_7);                 // scope 2 at $DIR/address-of.rs:+3:31: +3:32\n+        _0 = const ();                   // scope 0 at $DIR/address-of.rs:+0:32: +4:2\n+        StorageDead(_6);                 // scope 2 at $DIR/address-of.rs:+4:1: +4:2\n+        StorageDead(_4);                 // scope 1 at $DIR/address-of.rs:+4:1: +4:2\n+        StorageDead(_2);                 // scope 0 at $DIR/address-of.rs:+4:1: +4:2\n+        return;                          // scope 0 at $DIR/address-of.rs:+4:2: +4:2\n     }\n }"}, {"sha": "27f883ed321ae658cd865ccae2c94111cfe9aab1", "filename": "src/test/mir-opt/array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.32bit.mir", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.32bit.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,64 +1,64 @@\n // MIR for `main` after SimplifyCfg-elaborate-drops\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/array-index-is-temporary.rs:12:11: 12:11\n-    let mut _1: [u32; 3];                // in scope 0 at $DIR/array-index-is-temporary.rs:13:9: 13:14\n-    let mut _4: &mut usize;              // in scope 0 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n-    let mut _5: u32;                     // in scope 0 at $DIR/array-index-is-temporary.rs:16:12: 16:29\n-    let mut _6: *mut usize;              // in scope 0 at $DIR/array-index-is-temporary.rs:16:25: 16:26\n-    let _7: usize;                       // in scope 0 at $DIR/array-index-is-temporary.rs:16:7: 16:8\n-    let mut _8: usize;                   // in scope 0 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n-    let mut _9: bool;                    // in scope 0 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n+    let mut _0: ();                      // return place in scope 0 at $DIR/array-index-is-temporary.rs:+0:11: +0:11\n+    let mut _1: [u32; 3];                // in scope 0 at $DIR/array-index-is-temporary.rs:+1:9: +1:14\n+    let mut _4: &mut usize;              // in scope 0 at $DIR/array-index-is-temporary.rs:+3:25: +3:31\n+    let mut _5: u32;                     // in scope 0 at $DIR/array-index-is-temporary.rs:+4:12: +4:29\n+    let mut _6: *mut usize;              // in scope 0 at $DIR/array-index-is-temporary.rs:+4:25: +4:26\n+    let _7: usize;                       // in scope 0 at $DIR/array-index-is-temporary.rs:+4:7: +4:8\n+    let mut _8: usize;                   // in scope 0 at $DIR/array-index-is-temporary.rs:+4:5: +4:9\n+    let mut _9: bool;                    // in scope 0 at $DIR/array-index-is-temporary.rs:+4:5: +4:9\n     scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/array-index-is-temporary.rs:13:9: 13:14\n-        let mut _2: usize;               // in scope 1 at $DIR/array-index-is-temporary.rs:14:9: 14:14\n+        debug x => _1;                   // in scope 1 at $DIR/array-index-is-temporary.rs:+1:9: +1:14\n+        let mut _2: usize;               // in scope 1 at $DIR/array-index-is-temporary.rs:+2:9: +2:14\n         scope 2 {\n-            debug y => _2;               // in scope 2 at $DIR/array-index-is-temporary.rs:14:9: 14:14\n-            let _3: *mut usize;          // in scope 2 at $DIR/array-index-is-temporary.rs:15:9: 15:10\n+            debug y => _2;               // in scope 2 at $DIR/array-index-is-temporary.rs:+2:9: +2:14\n+            let _3: *mut usize;          // in scope 2 at $DIR/array-index-is-temporary.rs:+3:9: +3:10\n             scope 3 {\n-                debug z => _3;           // in scope 3 at $DIR/array-index-is-temporary.rs:15:9: 15:10\n+                debug z => _3;           // in scope 3 at $DIR/array-index-is-temporary.rs:+3:9: +3:10\n                 scope 4 {\n                 }\n             }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/array-index-is-temporary.rs:13:9: 13:14\n-        _1 = [const 42_u32, const 43_u32, const 44_u32]; // scope 0 at $DIR/array-index-is-temporary.rs:13:17: 13:29\n-        StorageLive(_2);                 // scope 1 at $DIR/array-index-is-temporary.rs:14:9: 14:14\n-        _2 = const 1_usize;              // scope 1 at $DIR/array-index-is-temporary.rs:14:17: 14:18\n-        StorageLive(_3);                 // scope 2 at $DIR/array-index-is-temporary.rs:15:9: 15:10\n-        StorageLive(_4);                 // scope 2 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n-        _4 = &mut _2;                    // scope 2 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n-        _3 = &raw mut (*_4);             // scope 2 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n-        StorageDead(_4);                 // scope 2 at $DIR/array-index-is-temporary.rs:15:31: 15:32\n-        StorageLive(_5);                 // scope 3 at $DIR/array-index-is-temporary.rs:16:12: 16:29\n-        StorageLive(_6);                 // scope 4 at $DIR/array-index-is-temporary.rs:16:25: 16:26\n-        _6 = _3;                         // scope 4 at $DIR/array-index-is-temporary.rs:16:25: 16:26\n-        _5 = foo(move _6) -> bb1;        // scope 4 at $DIR/array-index-is-temporary.rs:16:21: 16:27\n+        StorageLive(_1);                 // scope 0 at $DIR/array-index-is-temporary.rs:+1:9: +1:14\n+        _1 = [const 42_u32, const 43_u32, const 44_u32]; // scope 0 at $DIR/array-index-is-temporary.rs:+1:17: +1:29\n+        StorageLive(_2);                 // scope 1 at $DIR/array-index-is-temporary.rs:+2:9: +2:14\n+        _2 = const 1_usize;              // scope 1 at $DIR/array-index-is-temporary.rs:+2:17: +2:18\n+        StorageLive(_3);                 // scope 2 at $DIR/array-index-is-temporary.rs:+3:9: +3:10\n+        StorageLive(_4);                 // scope 2 at $DIR/array-index-is-temporary.rs:+3:25: +3:31\n+        _4 = &mut _2;                    // scope 2 at $DIR/array-index-is-temporary.rs:+3:25: +3:31\n+        _3 = &raw mut (*_4);             // scope 2 at $DIR/array-index-is-temporary.rs:+3:25: +3:31\n+        StorageDead(_4);                 // scope 2 at $DIR/array-index-is-temporary.rs:+3:31: +3:32\n+        StorageLive(_5);                 // scope 3 at $DIR/array-index-is-temporary.rs:+4:12: +4:29\n+        StorageLive(_6);                 // scope 4 at $DIR/array-index-is-temporary.rs:+4:25: +4:26\n+        _6 = _3;                         // scope 4 at $DIR/array-index-is-temporary.rs:+4:25: +4:26\n+        _5 = foo(move _6) -> bb1;        // scope 4 at $DIR/array-index-is-temporary.rs:+4:21: +4:27\n                                          // mir::Constant\n                                          // + span: $DIR/array-index-is-temporary.rs:16:21: 16:24\n                                          // + literal: Const { ty: unsafe fn(*mut usize) -> u32 {foo}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageDead(_6);                 // scope 4 at $DIR/array-index-is-temporary.rs:16:26: 16:27\n-        StorageLive(_7);                 // scope 3 at $DIR/array-index-is-temporary.rs:16:7: 16:8\n-        _7 = _2;                         // scope 3 at $DIR/array-index-is-temporary.rs:16:7: 16:8\n-        _8 = Len(_1);                    // scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n-        _9 = Lt(_7, _8);                 // scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n-        assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb2; // scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n+        StorageDead(_6);                 // scope 4 at $DIR/array-index-is-temporary.rs:+4:26: +4:27\n+        StorageLive(_7);                 // scope 3 at $DIR/array-index-is-temporary.rs:+4:7: +4:8\n+        _7 = _2;                         // scope 3 at $DIR/array-index-is-temporary.rs:+4:7: +4:8\n+        _8 = Len(_1);                    // scope 3 at $DIR/array-index-is-temporary.rs:+4:5: +4:9\n+        _9 = Lt(_7, _8);                 // scope 3 at $DIR/array-index-is-temporary.rs:+4:5: +4:9\n+        assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb2; // scope 3 at $DIR/array-index-is-temporary.rs:+4:5: +4:9\n     }\n \n     bb2: {\n-        _1[_7] = move _5;                // scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:29\n-        StorageDead(_5);                 // scope 3 at $DIR/array-index-is-temporary.rs:16:28: 16:29\n-        StorageDead(_7);                 // scope 3 at $DIR/array-index-is-temporary.rs:16:29: 16:30\n-        _0 = const ();                   // scope 0 at $DIR/array-index-is-temporary.rs:12:11: 17:2\n-        StorageDead(_3);                 // scope 2 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n-        StorageDead(_2);                 // scope 1 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n-        StorageDead(_1);                 // scope 0 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n-        return;                          // scope 0 at $DIR/array-index-is-temporary.rs:17:2: 17:2\n+        _1[_7] = move _5;                // scope 3 at $DIR/array-index-is-temporary.rs:+4:5: +4:29\n+        StorageDead(_5);                 // scope 3 at $DIR/array-index-is-temporary.rs:+4:28: +4:29\n+        StorageDead(_7);                 // scope 3 at $DIR/array-index-is-temporary.rs:+4:29: +4:30\n+        _0 = const ();                   // scope 0 at $DIR/array-index-is-temporary.rs:+0:11: +5:2\n+        StorageDead(_3);                 // scope 2 at $DIR/array-index-is-temporary.rs:+5:1: +5:2\n+        StorageDead(_2);                 // scope 1 at $DIR/array-index-is-temporary.rs:+5:1: +5:2\n+        StorageDead(_1);                 // scope 0 at $DIR/array-index-is-temporary.rs:+5:1: +5:2\n+        return;                          // scope 0 at $DIR/array-index-is-temporary.rs:+5:2: +5:2\n     }\n }"}, {"sha": "27f883ed321ae658cd865ccae2c94111cfe9aab1", "filename": "src/test/mir-opt/array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.64bit.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,64 +1,64 @@\n // MIR for `main` after SimplifyCfg-elaborate-drops\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/array-index-is-temporary.rs:12:11: 12:11\n-    let mut _1: [u32; 3];                // in scope 0 at $DIR/array-index-is-temporary.rs:13:9: 13:14\n-    let mut _4: &mut usize;              // in scope 0 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n-    let mut _5: u32;                     // in scope 0 at $DIR/array-index-is-temporary.rs:16:12: 16:29\n-    let mut _6: *mut usize;              // in scope 0 at $DIR/array-index-is-temporary.rs:16:25: 16:26\n-    let _7: usize;                       // in scope 0 at $DIR/array-index-is-temporary.rs:16:7: 16:8\n-    let mut _8: usize;                   // in scope 0 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n-    let mut _9: bool;                    // in scope 0 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n+    let mut _0: ();                      // return place in scope 0 at $DIR/array-index-is-temporary.rs:+0:11: +0:11\n+    let mut _1: [u32; 3];                // in scope 0 at $DIR/array-index-is-temporary.rs:+1:9: +1:14\n+    let mut _4: &mut usize;              // in scope 0 at $DIR/array-index-is-temporary.rs:+3:25: +3:31\n+    let mut _5: u32;                     // in scope 0 at $DIR/array-index-is-temporary.rs:+4:12: +4:29\n+    let mut _6: *mut usize;              // in scope 0 at $DIR/array-index-is-temporary.rs:+4:25: +4:26\n+    let _7: usize;                       // in scope 0 at $DIR/array-index-is-temporary.rs:+4:7: +4:8\n+    let mut _8: usize;                   // in scope 0 at $DIR/array-index-is-temporary.rs:+4:5: +4:9\n+    let mut _9: bool;                    // in scope 0 at $DIR/array-index-is-temporary.rs:+4:5: +4:9\n     scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/array-index-is-temporary.rs:13:9: 13:14\n-        let mut _2: usize;               // in scope 1 at $DIR/array-index-is-temporary.rs:14:9: 14:14\n+        debug x => _1;                   // in scope 1 at $DIR/array-index-is-temporary.rs:+1:9: +1:14\n+        let mut _2: usize;               // in scope 1 at $DIR/array-index-is-temporary.rs:+2:9: +2:14\n         scope 2 {\n-            debug y => _2;               // in scope 2 at $DIR/array-index-is-temporary.rs:14:9: 14:14\n-            let _3: *mut usize;          // in scope 2 at $DIR/array-index-is-temporary.rs:15:9: 15:10\n+            debug y => _2;               // in scope 2 at $DIR/array-index-is-temporary.rs:+2:9: +2:14\n+            let _3: *mut usize;          // in scope 2 at $DIR/array-index-is-temporary.rs:+3:9: +3:10\n             scope 3 {\n-                debug z => _3;           // in scope 3 at $DIR/array-index-is-temporary.rs:15:9: 15:10\n+                debug z => _3;           // in scope 3 at $DIR/array-index-is-temporary.rs:+3:9: +3:10\n                 scope 4 {\n                 }\n             }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/array-index-is-temporary.rs:13:9: 13:14\n-        _1 = [const 42_u32, const 43_u32, const 44_u32]; // scope 0 at $DIR/array-index-is-temporary.rs:13:17: 13:29\n-        StorageLive(_2);                 // scope 1 at $DIR/array-index-is-temporary.rs:14:9: 14:14\n-        _2 = const 1_usize;              // scope 1 at $DIR/array-index-is-temporary.rs:14:17: 14:18\n-        StorageLive(_3);                 // scope 2 at $DIR/array-index-is-temporary.rs:15:9: 15:10\n-        StorageLive(_4);                 // scope 2 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n-        _4 = &mut _2;                    // scope 2 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n-        _3 = &raw mut (*_4);             // scope 2 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n-        StorageDead(_4);                 // scope 2 at $DIR/array-index-is-temporary.rs:15:31: 15:32\n-        StorageLive(_5);                 // scope 3 at $DIR/array-index-is-temporary.rs:16:12: 16:29\n-        StorageLive(_6);                 // scope 4 at $DIR/array-index-is-temporary.rs:16:25: 16:26\n-        _6 = _3;                         // scope 4 at $DIR/array-index-is-temporary.rs:16:25: 16:26\n-        _5 = foo(move _6) -> bb1;        // scope 4 at $DIR/array-index-is-temporary.rs:16:21: 16:27\n+        StorageLive(_1);                 // scope 0 at $DIR/array-index-is-temporary.rs:+1:9: +1:14\n+        _1 = [const 42_u32, const 43_u32, const 44_u32]; // scope 0 at $DIR/array-index-is-temporary.rs:+1:17: +1:29\n+        StorageLive(_2);                 // scope 1 at $DIR/array-index-is-temporary.rs:+2:9: +2:14\n+        _2 = const 1_usize;              // scope 1 at $DIR/array-index-is-temporary.rs:+2:17: +2:18\n+        StorageLive(_3);                 // scope 2 at $DIR/array-index-is-temporary.rs:+3:9: +3:10\n+        StorageLive(_4);                 // scope 2 at $DIR/array-index-is-temporary.rs:+3:25: +3:31\n+        _4 = &mut _2;                    // scope 2 at $DIR/array-index-is-temporary.rs:+3:25: +3:31\n+        _3 = &raw mut (*_4);             // scope 2 at $DIR/array-index-is-temporary.rs:+3:25: +3:31\n+        StorageDead(_4);                 // scope 2 at $DIR/array-index-is-temporary.rs:+3:31: +3:32\n+        StorageLive(_5);                 // scope 3 at $DIR/array-index-is-temporary.rs:+4:12: +4:29\n+        StorageLive(_6);                 // scope 4 at $DIR/array-index-is-temporary.rs:+4:25: +4:26\n+        _6 = _3;                         // scope 4 at $DIR/array-index-is-temporary.rs:+4:25: +4:26\n+        _5 = foo(move _6) -> bb1;        // scope 4 at $DIR/array-index-is-temporary.rs:+4:21: +4:27\n                                          // mir::Constant\n                                          // + span: $DIR/array-index-is-temporary.rs:16:21: 16:24\n                                          // + literal: Const { ty: unsafe fn(*mut usize) -> u32 {foo}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageDead(_6);                 // scope 4 at $DIR/array-index-is-temporary.rs:16:26: 16:27\n-        StorageLive(_7);                 // scope 3 at $DIR/array-index-is-temporary.rs:16:7: 16:8\n-        _7 = _2;                         // scope 3 at $DIR/array-index-is-temporary.rs:16:7: 16:8\n-        _8 = Len(_1);                    // scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n-        _9 = Lt(_7, _8);                 // scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n-        assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb2; // scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n+        StorageDead(_6);                 // scope 4 at $DIR/array-index-is-temporary.rs:+4:26: +4:27\n+        StorageLive(_7);                 // scope 3 at $DIR/array-index-is-temporary.rs:+4:7: +4:8\n+        _7 = _2;                         // scope 3 at $DIR/array-index-is-temporary.rs:+4:7: +4:8\n+        _8 = Len(_1);                    // scope 3 at $DIR/array-index-is-temporary.rs:+4:5: +4:9\n+        _9 = Lt(_7, _8);                 // scope 3 at $DIR/array-index-is-temporary.rs:+4:5: +4:9\n+        assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb2; // scope 3 at $DIR/array-index-is-temporary.rs:+4:5: +4:9\n     }\n \n     bb2: {\n-        _1[_7] = move _5;                // scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:29\n-        StorageDead(_5);                 // scope 3 at $DIR/array-index-is-temporary.rs:16:28: 16:29\n-        StorageDead(_7);                 // scope 3 at $DIR/array-index-is-temporary.rs:16:29: 16:30\n-        _0 = const ();                   // scope 0 at $DIR/array-index-is-temporary.rs:12:11: 17:2\n-        StorageDead(_3);                 // scope 2 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n-        StorageDead(_2);                 // scope 1 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n-        StorageDead(_1);                 // scope 0 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n-        return;                          // scope 0 at $DIR/array-index-is-temporary.rs:17:2: 17:2\n+        _1[_7] = move _5;                // scope 3 at $DIR/array-index-is-temporary.rs:+4:5: +4:29\n+        StorageDead(_5);                 // scope 3 at $DIR/array-index-is-temporary.rs:+4:28: +4:29\n+        StorageDead(_7);                 // scope 3 at $DIR/array-index-is-temporary.rs:+4:29: +4:30\n+        _0 = const ();                   // scope 0 at $DIR/array-index-is-temporary.rs:+0:11: +5:2\n+        StorageDead(_3);                 // scope 2 at $DIR/array-index-is-temporary.rs:+5:1: +5:2\n+        StorageDead(_2);                 // scope 1 at $DIR/array-index-is-temporary.rs:+5:1: +5:2\n+        StorageDead(_1);                 // scope 0 at $DIR/array-index-is-temporary.rs:+5:1: +5:2\n+        return;                          // scope 0 at $DIR/array-index-is-temporary.rs:+5:2: +5:2\n     }\n }"}, {"sha": "2487ef5c2150e51d834884f658dc24be751c582b", "filename": "src/test/mir-opt/asm_unwind_panic_abort.main.AbortUnwindingCalls.after.mir", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fasm_unwind_panic_abort.main.AbortUnwindingCalls.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fasm_unwind_panic_abort.main.AbortUnwindingCalls.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fasm_unwind_panic_abort.main.AbortUnwindingCalls.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,24 +1,24 @@\n // MIR for `main` after AbortUnwindingCalls\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/asm_unwind_panic_abort.rs:12:11: 12:11\n-    let _1: ();                          // in scope 0 at $DIR/asm_unwind_panic_abort.rs:14:9: 14:49\n+    let mut _0: ();                      // return place in scope 0 at $DIR/asm_unwind_panic_abort.rs:+0:11: +0:11\n+    let _1: ();                          // in scope 0 at $DIR/asm_unwind_panic_abort.rs:+2:9: +2:49\n     scope 1 {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 1 at $DIR/asm_unwind_panic_abort.rs:14:9: 14:49\n-        _1 = const ();                   // scope 1 at $DIR/asm_unwind_panic_abort.rs:14:9: 14:49\n-        asm!(\"\", options(MAY_UNWIND)) -> [return: bb1, unwind: bb2]; // scope 1 at $DIR/asm_unwind_panic_abort.rs:14:9: 14:49\n+        StorageLive(_1);                 // scope 1 at $DIR/asm_unwind_panic_abort.rs:+2:9: +2:49\n+        _1 = const ();                   // scope 1 at $DIR/asm_unwind_panic_abort.rs:+2:9: +2:49\n+        asm!(\"\", options(MAY_UNWIND)) -> [return: bb1, unwind: bb2]; // scope 1 at $DIR/asm_unwind_panic_abort.rs:+2:9: +2:49\n     }\n \n     bb1: {\n-        StorageDead(_1);                 // scope 1 at $DIR/asm_unwind_panic_abort.rs:14:48: 14:49\n-        _0 = const ();                   // scope 1 at $DIR/asm_unwind_panic_abort.rs:13:5: 15:6\n-        return;                          // scope 0 at $DIR/asm_unwind_panic_abort.rs:16:2: 16:2\n+        StorageDead(_1);                 // scope 1 at $DIR/asm_unwind_panic_abort.rs:+2:48: +2:49\n+        _0 = const ();                   // scope 1 at $DIR/asm_unwind_panic_abort.rs:+1:5: +3:6\n+        return;                          // scope 0 at $DIR/asm_unwind_panic_abort.rs:+4:2: +4:2\n     }\n \n     bb2 (cleanup): {\n-        abort;                           // scope 0 at $DIR/asm_unwind_panic_abort.rs:12:1: 16:2\n+        abort;                           // scope 0 at $DIR/asm_unwind_panic_abort.rs:+0:1: +4:2\n     }\n }"}, {"sha": "1f099cd5e83707d8ef48f48f2991ae8617fe6814", "filename": "src/test/mir-opt/basic_assignment.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -5,80 +5,80 @@\n | 1: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(std::option::Option<std::boxed::Box<u32>>) }, span: $DIR/basic_assignment.rs:18:17: 18:33, inferred_ty: std::option::Option<std::boxed::Box<u32>>\n |\n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/basic_assignment.rs:10:11: 10:11\n-    let _1: bool;                        // in scope 0 at $DIR/basic_assignment.rs:11:9: 11:17\n-    let mut _3: bool;                    // in scope 0 at $DIR/basic_assignment.rs:16:16: 16:24\n-    let mut _6: std::option::Option<std::boxed::Box<u32>>; // in scope 0 at $DIR/basic_assignment.rs:23:14: 23:20\n+    let mut _0: ();                      // return place in scope 0 at $DIR/basic_assignment.rs:+0:11: +0:11\n+    let _1: bool;                        // in scope 0 at $DIR/basic_assignment.rs:+1:9: +1:17\n+    let mut _3: bool;                    // in scope 0 at $DIR/basic_assignment.rs:+6:16: +6:24\n+    let mut _6: std::option::Option<std::boxed::Box<u32>>; // in scope 0 at $DIR/basic_assignment.rs:+13:14: +13:20\n     scope 1 {\n-        debug nodrop_x => _1;            // in scope 1 at $DIR/basic_assignment.rs:11:9: 11:17\n-        let _2: bool;                    // in scope 1 at $DIR/basic_assignment.rs:12:9: 12:17\n+        debug nodrop_x => _1;            // in scope 1 at $DIR/basic_assignment.rs:+1:9: +1:17\n+        let _2: bool;                    // in scope 1 at $DIR/basic_assignment.rs:+2:9: +2:17\n         scope 2 {\n-            debug nodrop_y => _2;        // in scope 2 at $DIR/basic_assignment.rs:12:9: 12:17\n-            let _4: std::option::Option<std::boxed::Box<u32>> as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 2 at $DIR/basic_assignment.rs:18:9: 18:15\n+            debug nodrop_y => _2;        // in scope 2 at $DIR/basic_assignment.rs:+2:9: +2:17\n+            let _4: std::option::Option<std::boxed::Box<u32>> as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 2 at $DIR/basic_assignment.rs:+8:9: +8:15\n             scope 3 {\n-                debug drop_x => _4;      // in scope 3 at $DIR/basic_assignment.rs:18:9: 18:15\n-                let _5: std::option::Option<std::boxed::Box<u32>>; // in scope 3 at $DIR/basic_assignment.rs:19:9: 19:15\n+                debug drop_x => _4;      // in scope 3 at $DIR/basic_assignment.rs:+8:9: +8:15\n+                let _5: std::option::Option<std::boxed::Box<u32>>; // in scope 3 at $DIR/basic_assignment.rs:+9:9: +9:15\n                 scope 4 {\n-                    debug drop_y => _5;  // in scope 4 at $DIR/basic_assignment.rs:19:9: 19:15\n+                    debug drop_y => _5;  // in scope 4 at $DIR/basic_assignment.rs:+9:9: +9:15\n                 }\n             }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/basic_assignment.rs:11:9: 11:17\n-        _1 = const false;                // scope 0 at $DIR/basic_assignment.rs:11:20: 11:25\n-        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/basic_assignment.rs:11:9: 11:17\n-        StorageLive(_2);                 // scope 1 at $DIR/basic_assignment.rs:12:9: 12:17\n-        StorageLive(_3);                 // scope 2 at $DIR/basic_assignment.rs:16:16: 16:24\n-        _3 = _1;                         // scope 2 at $DIR/basic_assignment.rs:16:16: 16:24\n-        _2 = move _3;                    // scope 2 at $DIR/basic_assignment.rs:16:5: 16:24\n-        StorageDead(_3);                 // scope 2 at $DIR/basic_assignment.rs:16:23: 16:24\n-        StorageLive(_4);                 // scope 2 at $DIR/basic_assignment.rs:18:9: 18:15\n-        _4 = Option::<Box<u32>>::None;   // scope 2 at $DIR/basic_assignment.rs:18:36: 18:40\n-        FakeRead(ForLet(None), _4);      // scope 2 at $DIR/basic_assignment.rs:18:9: 18:15\n-        AscribeUserType(_4, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 2 at $DIR/basic_assignment.rs:18:17: 18:33\n-        StorageLive(_5);                 // scope 3 at $DIR/basic_assignment.rs:19:9: 19:15\n-        StorageLive(_6);                 // scope 4 at $DIR/basic_assignment.rs:23:14: 23:20\n-        _6 = move _4;                    // scope 4 at $DIR/basic_assignment.rs:23:14: 23:20\n-        replace(_5 <- move _6) -> [return: bb1, unwind: bb5]; // scope 4 at $DIR/basic_assignment.rs:23:5: 23:11\n+        StorageLive(_1);                 // scope 0 at $DIR/basic_assignment.rs:+1:9: +1:17\n+        _1 = const false;                // scope 0 at $DIR/basic_assignment.rs:+1:20: +1:25\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/basic_assignment.rs:+1:9: +1:17\n+        StorageLive(_2);                 // scope 1 at $DIR/basic_assignment.rs:+2:9: +2:17\n+        StorageLive(_3);                 // scope 2 at $DIR/basic_assignment.rs:+6:16: +6:24\n+        _3 = _1;                         // scope 2 at $DIR/basic_assignment.rs:+6:16: +6:24\n+        _2 = move _3;                    // scope 2 at $DIR/basic_assignment.rs:+6:5: +6:24\n+        StorageDead(_3);                 // scope 2 at $DIR/basic_assignment.rs:+6:23: +6:24\n+        StorageLive(_4);                 // scope 2 at $DIR/basic_assignment.rs:+8:9: +8:15\n+        _4 = Option::<Box<u32>>::None;   // scope 2 at $DIR/basic_assignment.rs:+8:36: +8:40\n+        FakeRead(ForLet(None), _4);      // scope 2 at $DIR/basic_assignment.rs:+8:9: +8:15\n+        AscribeUserType(_4, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 2 at $DIR/basic_assignment.rs:+8:17: +8:33\n+        StorageLive(_5);                 // scope 3 at $DIR/basic_assignment.rs:+9:9: +9:15\n+        StorageLive(_6);                 // scope 4 at $DIR/basic_assignment.rs:+13:14: +13:20\n+        _6 = move _4;                    // scope 4 at $DIR/basic_assignment.rs:+13:14: +13:20\n+        replace(_5 <- move _6) -> [return: bb1, unwind: bb5]; // scope 4 at $DIR/basic_assignment.rs:+13:5: +13:11\n     }\n \n     bb1: {\n-        drop(_6) -> [return: bb2, unwind: bb6]; // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n+        drop(_6) -> [return: bb2, unwind: bb6]; // scope 4 at $DIR/basic_assignment.rs:+13:19: +13:20\n     }\n \n     bb2: {\n-        StorageDead(_6);                 // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n-        _0 = const ();                   // scope 0 at $DIR/basic_assignment.rs:10:11: 24:2\n-        drop(_5) -> [return: bb3, unwind: bb7]; // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n+        StorageDead(_6);                 // scope 4 at $DIR/basic_assignment.rs:+13:19: +13:20\n+        _0 = const ();                   // scope 0 at $DIR/basic_assignment.rs:+0:11: +14:2\n+        drop(_5) -> [return: bb3, unwind: bb7]; // scope 3 at $DIR/basic_assignment.rs:+14:1: +14:2\n     }\n \n     bb3: {\n-        StorageDead(_5);                 // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n-        drop(_4) -> [return: bb4, unwind: bb8]; // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n+        StorageDead(_5);                 // scope 3 at $DIR/basic_assignment.rs:+14:1: +14:2\n+        drop(_4) -> [return: bb4, unwind: bb8]; // scope 2 at $DIR/basic_assignment.rs:+14:1: +14:2\n     }\n \n     bb4: {\n-        StorageDead(_4);                 // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n-        StorageDead(_2);                 // scope 1 at $DIR/basic_assignment.rs:24:1: 24:2\n-        StorageDead(_1);                 // scope 0 at $DIR/basic_assignment.rs:24:1: 24:2\n-        return;                          // scope 0 at $DIR/basic_assignment.rs:24:2: 24:2\n+        StorageDead(_4);                 // scope 2 at $DIR/basic_assignment.rs:+14:1: +14:2\n+        StorageDead(_2);                 // scope 1 at $DIR/basic_assignment.rs:+14:1: +14:2\n+        StorageDead(_1);                 // scope 0 at $DIR/basic_assignment.rs:+14:1: +14:2\n+        return;                          // scope 0 at $DIR/basic_assignment.rs:+14:2: +14:2\n     }\n \n     bb5 (cleanup): {\n-        drop(_6) -> bb6;                 // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n+        drop(_6) -> bb6;                 // scope 4 at $DIR/basic_assignment.rs:+13:19: +13:20\n     }\n \n     bb6 (cleanup): {\n-        drop(_5) -> bb7;                 // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n+        drop(_5) -> bb7;                 // scope 3 at $DIR/basic_assignment.rs:+14:1: +14:2\n     }\n \n     bb7 (cleanup): {\n-        drop(_4) -> bb8;                 // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n+        drop(_4) -> bb8;                 // scope 2 at $DIR/basic_assignment.rs:+14:1: +14:2\n     }\n \n     bb8 (cleanup): {\n-        resume;                          // scope 0 at $DIR/basic_assignment.rs:10:1: 24:2\n+        resume;                          // scope 0 at $DIR/basic_assignment.rs:+0:1: +14:2\n     }\n }"}, {"sha": "9c5a9fa9abb0e617036579f0fb741ee04a890e93", "filename": "src/test/mir-opt/bool_compare.opt1.InstCombine.diff", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fbool_compare.opt1.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fbool_compare.opt1.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbool_compare.opt1.InstCombine.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,34 +2,34 @@\n + // MIR for `opt1` after InstCombine\n   \n   fn opt1(_1: bool) -> u32 {\n-      debug x => _1;                       // in scope 0 at $DIR/bool_compare.rs:2:9: 2:10\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/bool_compare.rs:2:21: 2:24\n-      let mut _2: bool;                    // in scope 0 at $DIR/bool_compare.rs:3:8: 3:17\n-      let mut _3: bool;                    // in scope 0 at $DIR/bool_compare.rs:3:8: 3:9\n+      debug x => _1;                       // in scope 0 at $DIR/bool_compare.rs:+0:9: +0:10\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/bool_compare.rs:+0:21: +0:24\n+      let mut _2: bool;                    // in scope 0 at $DIR/bool_compare.rs:+1:8: +1:17\n+      let mut _3: bool;                    // in scope 0 at $DIR/bool_compare.rs:+1:8: +1:9\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/bool_compare.rs:3:8: 3:17\n-          StorageLive(_3);                 // scope 0 at $DIR/bool_compare.rs:3:8: 3:9\n-          _3 = _1;                         // scope 0 at $DIR/bool_compare.rs:3:8: 3:9\n--         _2 = Ne(move _3, const true);    // scope 0 at $DIR/bool_compare.rs:3:8: 3:17\n-+         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:3:8: 3:17\n-          StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:3:16: 3:17\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:3:8: 3:17\n+          StorageLive(_2);                 // scope 0 at $DIR/bool_compare.rs:+1:8: +1:17\n+          StorageLive(_3);                 // scope 0 at $DIR/bool_compare.rs:+1:8: +1:9\n+          _3 = _1;                         // scope 0 at $DIR/bool_compare.rs:+1:8: +1:9\n+-         _2 = Ne(move _3, const true);    // scope 0 at $DIR/bool_compare.rs:+1:8: +1:17\n++         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:+1:8: +1:17\n+          StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:+1:16: +1:17\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:+1:8: +1:17\n       }\n   \n       bb1: {\n-          _0 = const 0_u32;                // scope 0 at $DIR/bool_compare.rs:3:20: 3:21\n-          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:3:5: 3:34\n+          _0 = const 0_u32;                // scope 0 at $DIR/bool_compare.rs:+1:20: +1:21\n+          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:+1:5: +1:34\n       }\n   \n       bb2: {\n-          _0 = const 1_u32;                // scope 0 at $DIR/bool_compare.rs:3:31: 3:32\n-          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:3:5: 3:34\n+          _0 = const 1_u32;                // scope 0 at $DIR/bool_compare.rs:+1:31: +1:32\n+          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:+1:5: +1:34\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/bool_compare.rs:3:33: 3:34\n-          return;                          // scope 0 at $DIR/bool_compare.rs:4:2: 4:2\n+          StorageDead(_2);                 // scope 0 at $DIR/bool_compare.rs:+1:33: +1:34\n+          return;                          // scope 0 at $DIR/bool_compare.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "58c52c4b7d7ff36bfc528cf4d28031226194a406", "filename": "src/test/mir-opt/bool_compare.opt2.InstCombine.diff", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fbool_compare.opt2.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fbool_compare.opt2.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbool_compare.opt2.InstCombine.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,34 +2,34 @@\n + // MIR for `opt2` after InstCombine\n   \n   fn opt2(_1: bool) -> u32 {\n-      debug x => _1;                       // in scope 0 at $DIR/bool_compare.rs:7:9: 7:10\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/bool_compare.rs:7:21: 7:24\n-      let mut _2: bool;                    // in scope 0 at $DIR/bool_compare.rs:8:8: 8:17\n-      let mut _3: bool;                    // in scope 0 at $DIR/bool_compare.rs:8:16: 8:17\n+      debug x => _1;                       // in scope 0 at $DIR/bool_compare.rs:+0:9: +0:10\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/bool_compare.rs:+0:21: +0:24\n+      let mut _2: bool;                    // in scope 0 at $DIR/bool_compare.rs:+1:8: +1:17\n+      let mut _3: bool;                    // in scope 0 at $DIR/bool_compare.rs:+1:16: +1:17\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/bool_compare.rs:8:8: 8:17\n-          StorageLive(_3);                 // scope 0 at $DIR/bool_compare.rs:8:16: 8:17\n-          _3 = _1;                         // scope 0 at $DIR/bool_compare.rs:8:16: 8:17\n--         _2 = Ne(const true, move _3);    // scope 0 at $DIR/bool_compare.rs:8:8: 8:17\n-+         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:8:8: 8:17\n-          StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:8:16: 8:17\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:8:8: 8:17\n+          StorageLive(_2);                 // scope 0 at $DIR/bool_compare.rs:+1:8: +1:17\n+          StorageLive(_3);                 // scope 0 at $DIR/bool_compare.rs:+1:16: +1:17\n+          _3 = _1;                         // scope 0 at $DIR/bool_compare.rs:+1:16: +1:17\n+-         _2 = Ne(const true, move _3);    // scope 0 at $DIR/bool_compare.rs:+1:8: +1:17\n++         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:+1:8: +1:17\n+          StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:+1:16: +1:17\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:+1:8: +1:17\n       }\n   \n       bb1: {\n-          _0 = const 0_u32;                // scope 0 at $DIR/bool_compare.rs:8:20: 8:21\n-          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:8:5: 8:34\n+          _0 = const 0_u32;                // scope 0 at $DIR/bool_compare.rs:+1:20: +1:21\n+          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:+1:5: +1:34\n       }\n   \n       bb2: {\n-          _0 = const 1_u32;                // scope 0 at $DIR/bool_compare.rs:8:31: 8:32\n-          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:8:5: 8:34\n+          _0 = const 1_u32;                // scope 0 at $DIR/bool_compare.rs:+1:31: +1:32\n+          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:+1:5: +1:34\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/bool_compare.rs:8:33: 8:34\n-          return;                          // scope 0 at $DIR/bool_compare.rs:9:2: 9:2\n+          StorageDead(_2);                 // scope 0 at $DIR/bool_compare.rs:+1:33: +1:34\n+          return;                          // scope 0 at $DIR/bool_compare.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "676428c95c1bf01d89e674f8017c66358bcbcec0", "filename": "src/test/mir-opt/bool_compare.opt3.InstCombine.diff", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fbool_compare.opt3.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fbool_compare.opt3.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbool_compare.opt3.InstCombine.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,34 +2,34 @@\n + // MIR for `opt3` after InstCombine\n   \n   fn opt3(_1: bool) -> u32 {\n-      debug x => _1;                       // in scope 0 at $DIR/bool_compare.rs:12:9: 12:10\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/bool_compare.rs:12:21: 12:24\n-      let mut _2: bool;                    // in scope 0 at $DIR/bool_compare.rs:13:8: 13:18\n-      let mut _3: bool;                    // in scope 0 at $DIR/bool_compare.rs:13:8: 13:9\n+      debug x => _1;                       // in scope 0 at $DIR/bool_compare.rs:+0:9: +0:10\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/bool_compare.rs:+0:21: +0:24\n+      let mut _2: bool;                    // in scope 0 at $DIR/bool_compare.rs:+1:8: +1:18\n+      let mut _3: bool;                    // in scope 0 at $DIR/bool_compare.rs:+1:8: +1:9\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/bool_compare.rs:13:8: 13:18\n-          StorageLive(_3);                 // scope 0 at $DIR/bool_compare.rs:13:8: 13:9\n-          _3 = _1;                         // scope 0 at $DIR/bool_compare.rs:13:8: 13:9\n--         _2 = Eq(move _3, const false);   // scope 0 at $DIR/bool_compare.rs:13:8: 13:18\n-+         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:13:8: 13:18\n-          StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:13:17: 13:18\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:13:8: 13:18\n+          StorageLive(_2);                 // scope 0 at $DIR/bool_compare.rs:+1:8: +1:18\n+          StorageLive(_3);                 // scope 0 at $DIR/bool_compare.rs:+1:8: +1:9\n+          _3 = _1;                         // scope 0 at $DIR/bool_compare.rs:+1:8: +1:9\n+-         _2 = Eq(move _3, const false);   // scope 0 at $DIR/bool_compare.rs:+1:8: +1:18\n++         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:+1:8: +1:18\n+          StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:+1:17: +1:18\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:+1:8: +1:18\n       }\n   \n       bb1: {\n-          _0 = const 0_u32;                // scope 0 at $DIR/bool_compare.rs:13:21: 13:22\n-          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:13:5: 13:35\n+          _0 = const 0_u32;                // scope 0 at $DIR/bool_compare.rs:+1:21: +1:22\n+          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:+1:5: +1:35\n       }\n   \n       bb2: {\n-          _0 = const 1_u32;                // scope 0 at $DIR/bool_compare.rs:13:32: 13:33\n-          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:13:5: 13:35\n+          _0 = const 1_u32;                // scope 0 at $DIR/bool_compare.rs:+1:32: +1:33\n+          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:+1:5: +1:35\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/bool_compare.rs:13:34: 13:35\n-          return;                          // scope 0 at $DIR/bool_compare.rs:14:2: 14:2\n+          StorageDead(_2);                 // scope 0 at $DIR/bool_compare.rs:+1:34: +1:35\n+          return;                          // scope 0 at $DIR/bool_compare.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "addfcd769a5468327578048b5c8838661877957c", "filename": "src/test/mir-opt/bool_compare.opt4.InstCombine.diff", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fbool_compare.opt4.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fbool_compare.opt4.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbool_compare.opt4.InstCombine.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,34 +2,34 @@\n + // MIR for `opt4` after InstCombine\n   \n   fn opt4(_1: bool) -> u32 {\n-      debug x => _1;                       // in scope 0 at $DIR/bool_compare.rs:17:9: 17:10\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/bool_compare.rs:17:21: 17:24\n-      let mut _2: bool;                    // in scope 0 at $DIR/bool_compare.rs:18:8: 18:18\n-      let mut _3: bool;                    // in scope 0 at $DIR/bool_compare.rs:18:17: 18:18\n+      debug x => _1;                       // in scope 0 at $DIR/bool_compare.rs:+0:9: +0:10\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/bool_compare.rs:+0:21: +0:24\n+      let mut _2: bool;                    // in scope 0 at $DIR/bool_compare.rs:+1:8: +1:18\n+      let mut _3: bool;                    // in scope 0 at $DIR/bool_compare.rs:+1:17: +1:18\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/bool_compare.rs:18:8: 18:18\n-          StorageLive(_3);                 // scope 0 at $DIR/bool_compare.rs:18:17: 18:18\n-          _3 = _1;                         // scope 0 at $DIR/bool_compare.rs:18:17: 18:18\n--         _2 = Eq(const false, move _3);   // scope 0 at $DIR/bool_compare.rs:18:8: 18:18\n-+         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:18:8: 18:18\n-          StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:18:17: 18:18\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:18:8: 18:18\n+          StorageLive(_2);                 // scope 0 at $DIR/bool_compare.rs:+1:8: +1:18\n+          StorageLive(_3);                 // scope 0 at $DIR/bool_compare.rs:+1:17: +1:18\n+          _3 = _1;                         // scope 0 at $DIR/bool_compare.rs:+1:17: +1:18\n+-         _2 = Eq(const false, move _3);   // scope 0 at $DIR/bool_compare.rs:+1:8: +1:18\n++         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:+1:8: +1:18\n+          StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:+1:17: +1:18\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:+1:8: +1:18\n       }\n   \n       bb1: {\n-          _0 = const 0_u32;                // scope 0 at $DIR/bool_compare.rs:18:21: 18:22\n-          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:18:5: 18:35\n+          _0 = const 0_u32;                // scope 0 at $DIR/bool_compare.rs:+1:21: +1:22\n+          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:+1:5: +1:35\n       }\n   \n       bb2: {\n-          _0 = const 1_u32;                // scope 0 at $DIR/bool_compare.rs:18:32: 18:33\n-          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:18:5: 18:35\n+          _0 = const 1_u32;                // scope 0 at $DIR/bool_compare.rs:+1:32: +1:33\n+          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:+1:5: +1:35\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/bool_compare.rs:18:34: 18:35\n-          return;                          // scope 0 at $DIR/bool_compare.rs:19:2: 19:2\n+          StorageDead(_2);                 // scope 0 at $DIR/bool_compare.rs:+1:34: +1:35\n+          return;                          // scope 0 at $DIR/bool_compare.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "49133138d45e39fd962b1b37063f21010a3fa36f", "filename": "src/test/mir-opt/box_expr.main.ElaborateDrops.before.mir", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,80 +1,80 @@\n // MIR for `main` before ElaborateDrops\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/box_expr.rs:6:11: 6:11\n-    let _1: std::boxed::Box<S>;          // in scope 0 at $DIR/box_expr.rs:7:9: 7:10\n-    let mut _2: usize;                   // in scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-    let mut _3: usize;                   // in scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-    let mut _4: *mut u8;                 // in scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-    let mut _5: std::boxed::Box<S>;      // in scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-    let _6: ();                          // in scope 0 at $DIR/box_expr.rs:8:5: 8:12\n-    let mut _7: std::boxed::Box<S>;      // in scope 0 at $DIR/box_expr.rs:8:10: 8:11\n+    let mut _0: ();                      // return place in scope 0 at $DIR/box_expr.rs:+0:11: +0:11\n+    let _1: std::boxed::Box<S>;          // in scope 0 at $DIR/box_expr.rs:+1:9: +1:10\n+    let mut _2: usize;                   // in scope 0 at $DIR/box_expr.rs:+1:13: +1:25\n+    let mut _3: usize;                   // in scope 0 at $DIR/box_expr.rs:+1:13: +1:25\n+    let mut _4: *mut u8;                 // in scope 0 at $DIR/box_expr.rs:+1:13: +1:25\n+    let mut _5: std::boxed::Box<S>;      // in scope 0 at $DIR/box_expr.rs:+1:13: +1:25\n+    let _6: ();                          // in scope 0 at $DIR/box_expr.rs:+2:5: +2:12\n+    let mut _7: std::boxed::Box<S>;      // in scope 0 at $DIR/box_expr.rs:+2:10: +2:11\n     scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/box_expr.rs:7:9: 7:10\n+        debug x => _1;                   // in scope 1 at $DIR/box_expr.rs:+1:9: +1:10\n     }\n     scope 2 {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/box_expr.rs:7:9: 7:10\n-        _2 = SizeOf(S);                  // scope 2 at $DIR/box_expr.rs:7:13: 7:25\n-        _3 = AlignOf(S);                 // scope 2 at $DIR/box_expr.rs:7:13: 7:25\n-        _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 2 at $DIR/box_expr.rs:7:13: 7:25\n+        StorageLive(_1);                 // scope 0 at $DIR/box_expr.rs:+1:9: +1:10\n+        _2 = SizeOf(S);                  // scope 2 at $DIR/box_expr.rs:+1:13: +1:25\n+        _3 = AlignOf(S);                 // scope 2 at $DIR/box_expr.rs:+1:13: +1:25\n+        _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 2 at $DIR/box_expr.rs:+1:13: +1:25\n                                          // mir::Constant\n                                          // + span: $DIR/box_expr.rs:7:13: 7:25\n                                          // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageLive(_5);                 // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-        _5 = ShallowInitBox(move _4, S); // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-        (*_5) = S::new() -> [return: bb2, unwind: bb8]; // scope 0 at $DIR/box_expr.rs:7:17: 7:25\n+        StorageLive(_5);                 // scope 0 at $DIR/box_expr.rs:+1:13: +1:25\n+        _5 = ShallowInitBox(move _4, S); // scope 0 at $DIR/box_expr.rs:+1:13: +1:25\n+        (*_5) = S::new() -> [return: bb2, unwind: bb8]; // scope 0 at $DIR/box_expr.rs:+1:17: +1:25\n                                          // mir::Constant\n                                          // + span: $DIR/box_expr.rs:7:17: 7:23\n                                          // + literal: Const { ty: fn() -> S {S::new}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        _1 = move _5;                    // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-        drop(_5) -> bb3;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+        _1 = move _5;                    // scope 0 at $DIR/box_expr.rs:+1:13: +1:25\n+        drop(_5) -> bb3;                 // scope 0 at $DIR/box_expr.rs:+1:24: +1:25\n     }\n \n     bb3: {\n-        StorageDead(_5);                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n-        StorageLive(_6);                 // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n-        StorageLive(_7);                 // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n-        _7 = move _1;                    // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n-        _6 = std::mem::drop::<Box<S>>(move _7) -> [return: bb4, unwind: bb6]; // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n+        StorageDead(_5);                 // scope 0 at $DIR/box_expr.rs:+1:24: +1:25\n+        StorageLive(_6);                 // scope 1 at $DIR/box_expr.rs:+2:5: +2:12\n+        StorageLive(_7);                 // scope 1 at $DIR/box_expr.rs:+2:10: +2:11\n+        _7 = move _1;                    // scope 1 at $DIR/box_expr.rs:+2:10: +2:11\n+        _6 = std::mem::drop::<Box<S>>(move _7) -> [return: bb4, unwind: bb6]; // scope 1 at $DIR/box_expr.rs:+2:5: +2:12\n                                          // mir::Constant\n                                          // + span: $DIR/box_expr.rs:8:5: 8:9\n                                          // + literal: Const { ty: fn(Box<S>) {std::mem::drop::<Box<S>>}, val: Value(<ZST>) }\n     }\n \n     bb4: {\n-        StorageDead(_7);                 // scope 1 at $DIR/box_expr.rs:8:11: 8:12\n-        StorageDead(_6);                 // scope 1 at $DIR/box_expr.rs:8:12: 8:13\n-        _0 = const ();                   // scope 0 at $DIR/box_expr.rs:6:11: 9:2\n-        drop(_1) -> bb5;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n+        StorageDead(_7);                 // scope 1 at $DIR/box_expr.rs:+2:11: +2:12\n+        StorageDead(_6);                 // scope 1 at $DIR/box_expr.rs:+2:12: +2:13\n+        _0 = const ();                   // scope 0 at $DIR/box_expr.rs:+0:11: +3:2\n+        drop(_1) -> bb5;                 // scope 0 at $DIR/box_expr.rs:+3:1: +3:2\n     }\n \n     bb5: {\n-        StorageDead(_1);                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n-        return;                          // scope 0 at $DIR/box_expr.rs:9:2: 9:2\n+        StorageDead(_1);                 // scope 0 at $DIR/box_expr.rs:+3:1: +3:2\n+        return;                          // scope 0 at $DIR/box_expr.rs:+3:2: +3:2\n     }\n \n     bb6 (cleanup): {\n-        drop(_7) -> bb7;                 // scope 1 at $DIR/box_expr.rs:8:11: 8:12\n+        drop(_7) -> bb7;                 // scope 1 at $DIR/box_expr.rs:+2:11: +2:12\n     }\n \n     bb7 (cleanup): {\n-        drop(_1) -> bb9;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n+        drop(_1) -> bb9;                 // scope 0 at $DIR/box_expr.rs:+3:1: +3:2\n     }\n \n     bb8 (cleanup): {\n-        drop(_5) -> bb9;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+        drop(_5) -> bb9;                 // scope 0 at $DIR/box_expr.rs:+1:24: +1:25\n     }\n \n     bb9 (cleanup): {\n-        resume;                          // scope 0 at $DIR/box_expr.rs:6:1: 9:2\n+        resume;                          // scope 0 at $DIR/box_expr.rs:+0:1: +3:2\n     }\n }"}, {"sha": "73f5655a1e502b87b47ab391d8036e9f20f51b76", "filename": "src/test/mir-opt/byte_slice.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fbyte_slice.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fbyte_slice.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbyte_slice.main.SimplifyCfg-elaborate-drops.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,28 +1,28 @@\n // MIR for `main` after SimplifyCfg-elaborate-drops\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/byte_slice.rs:4:11: 4:11\n-    let _1: &[u8; 3];                    // in scope 0 at $DIR/byte_slice.rs:5:9: 5:10\n+    let mut _0: ();                      // return place in scope 0 at $DIR/byte_slice.rs:+0:11: +0:11\n+    let _1: &[u8; 3];                    // in scope 0 at $DIR/byte_slice.rs:+1:9: +1:10\n     scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/byte_slice.rs:5:9: 5:10\n-        let _2: [u8; 2];                 // in scope 1 at $DIR/byte_slice.rs:6:9: 6:10\n+        debug x => _1;                   // in scope 1 at $DIR/byte_slice.rs:+1:9: +1:10\n+        let _2: [u8; 2];                 // in scope 1 at $DIR/byte_slice.rs:+2:9: +2:10\n         scope 2 {\n-            debug y => _2;               // in scope 2 at $DIR/byte_slice.rs:6:9: 6:10\n+            debug y => _2;               // in scope 2 at $DIR/byte_slice.rs:+2:9: +2:10\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/byte_slice.rs:5:9: 5:10\n-        _1 = const b\"foo\";               // scope 0 at $DIR/byte_slice.rs:5:13: 5:19\n+        StorageLive(_1);                 // scope 0 at $DIR/byte_slice.rs:+1:9: +1:10\n+        _1 = const b\"foo\";               // scope 0 at $DIR/byte_slice.rs:+1:13: +1:19\n                                          // mir::Constant\n                                          // + span: $DIR/byte_slice.rs:5:13: 5:19\n                                          // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc1)) }\n-        StorageLive(_2);                 // scope 1 at $DIR/byte_slice.rs:6:9: 6:10\n-        _2 = [const 5_u8, const 120_u8]; // scope 1 at $DIR/byte_slice.rs:6:13: 6:24\n-        _0 = const ();                   // scope 0 at $DIR/byte_slice.rs:4:11: 7:2\n-        StorageDead(_2);                 // scope 1 at $DIR/byte_slice.rs:7:1: 7:2\n-        StorageDead(_1);                 // scope 0 at $DIR/byte_slice.rs:7:1: 7:2\n-        return;                          // scope 0 at $DIR/byte_slice.rs:7:2: 7:2\n+        StorageLive(_2);                 // scope 1 at $DIR/byte_slice.rs:+2:9: +2:10\n+        _2 = [const 5_u8, const 120_u8]; // scope 1 at $DIR/byte_slice.rs:+2:13: +2:24\n+        _0 = const ();                   // scope 0 at $DIR/byte_slice.rs:+0:11: +3:2\n+        StorageDead(_2);                 // scope 1 at $DIR/byte_slice.rs:+3:1: +3:2\n+        StorageDead(_1);                 // scope 0 at $DIR/byte_slice.rs:+3:1: +3:2\n+        return;                          // scope 0 at $DIR/byte_slice.rs:+3:2: +3:2\n     }\n }\n "}, {"sha": "c73150f947dfef7764c1b5c62fcfa9b9583a9f10", "filename": "src/test/mir-opt/combine_array_len.norm2.InstCombine.32bit.diff", "status": "modified", "additions": 58, "deletions": 58, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.32bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,76 +2,76 @@\n + // MIR for `norm2` after InstCombine\n   \n   fn norm2(_1: [f32; 2]) -> f32 {\n-      debug x => _1;                       // in scope 0 at $DIR/combine_array_len.rs:4:10: 4:11\n-      let mut _0: f32;                     // return place in scope 0 at $DIR/combine_array_len.rs:4:26: 4:29\n-      let _2: f32;                         // in scope 0 at $DIR/combine_array_len.rs:5:9: 5:10\n-      let _3: usize;                       // in scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n-      let mut _4: usize;                   // in scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-      let mut _5: bool;                    // in scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-      let _7: usize;                       // in scope 0 at $DIR/combine_array_len.rs:6:15: 6:16\n-      let mut _8: usize;                   // in scope 0 at $DIR/combine_array_len.rs:6:13: 6:17\n-      let mut _9: bool;                    // in scope 0 at $DIR/combine_array_len.rs:6:13: 6:17\n-      let mut _10: f32;                    // in scope 0 at $DIR/combine_array_len.rs:7:5: 7:8\n-      let mut _11: f32;                    // in scope 0 at $DIR/combine_array_len.rs:7:5: 7:6\n-      let mut _12: f32;                    // in scope 0 at $DIR/combine_array_len.rs:7:7: 7:8\n-      let mut _13: f32;                    // in scope 0 at $DIR/combine_array_len.rs:7:11: 7:14\n-      let mut _14: f32;                    // in scope 0 at $DIR/combine_array_len.rs:7:11: 7:12\n-      let mut _15: f32;                    // in scope 0 at $DIR/combine_array_len.rs:7:13: 7:14\n+      debug x => _1;                       // in scope 0 at $DIR/combine_array_len.rs:+0:10: +0:11\n+      let mut _0: f32;                     // return place in scope 0 at $DIR/combine_array_len.rs:+0:26: +0:29\n+      let _2: f32;                         // in scope 0 at $DIR/combine_array_len.rs:+1:9: +1:10\n+      let _3: usize;                       // in scope 0 at $DIR/combine_array_len.rs:+1:15: +1:16\n+      let mut _4: usize;                   // in scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n+      let mut _5: bool;                    // in scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n+      let _7: usize;                       // in scope 0 at $DIR/combine_array_len.rs:+2:15: +2:16\n+      let mut _8: usize;                   // in scope 0 at $DIR/combine_array_len.rs:+2:13: +2:17\n+      let mut _9: bool;                    // in scope 0 at $DIR/combine_array_len.rs:+2:13: +2:17\n+      let mut _10: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:5: +3:8\n+      let mut _11: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:5: +3:6\n+      let mut _12: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:7: +3:8\n+      let mut _13: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:11: +3:14\n+      let mut _14: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:11: +3:12\n+      let mut _15: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:13: +3:14\n       scope 1 {\n-          debug a => _2;                   // in scope 1 at $DIR/combine_array_len.rs:5:9: 5:10\n-          let _6: f32;                     // in scope 1 at $DIR/combine_array_len.rs:6:9: 6:10\n+          debug a => _2;                   // in scope 1 at $DIR/combine_array_len.rs:+1:9: +1:10\n+          let _6: f32;                     // in scope 1 at $DIR/combine_array_len.rs:+2:9: +2:10\n           scope 2 {\n-              debug b => _6;               // in scope 2 at $DIR/combine_array_len.rs:6:9: 6:10\n+              debug b => _6;               // in scope 2 at $DIR/combine_array_len.rs:+2:9: +2:10\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/combine_array_len.rs:5:9: 5:10\n-          StorageLive(_3);                 // scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n-          _3 = const 0_usize;              // scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n--         _4 = Len(_1);                    // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-+         _4 = const 2_usize;              // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-          _5 = Lt(_3, _4);                 // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-          assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n+          StorageLive(_2);                 // scope 0 at $DIR/combine_array_len.rs:+1:9: +1:10\n+          StorageLive(_3);                 // scope 0 at $DIR/combine_array_len.rs:+1:15: +1:16\n+          _3 = const 0_usize;              // scope 0 at $DIR/combine_array_len.rs:+1:15: +1:16\n+-         _4 = Len(_1);                    // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n++         _4 = const 2_usize;              // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n+          _5 = Lt(_3, _4);                 // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n+          assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n       }\n   \n       bb1: {\n-          _2 = _1[_3];                     // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-          StorageDead(_3);                 // scope 0 at $DIR/combine_array_len.rs:5:17: 5:18\n-          StorageLive(_6);                 // scope 1 at $DIR/combine_array_len.rs:6:9: 6:10\n-          StorageLive(_7);                 // scope 1 at $DIR/combine_array_len.rs:6:15: 6:16\n-          _7 = const 1_usize;              // scope 1 at $DIR/combine_array_len.rs:6:15: 6:16\n--         _8 = Len(_1);                    // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n-+         _8 = const 2_usize;              // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n-          _9 = Lt(_7, _8);                 // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n-          assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb2; // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n+          _2 = _1[_3];                     // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n+          StorageDead(_3);                 // scope 0 at $DIR/combine_array_len.rs:+1:17: +1:18\n+          StorageLive(_6);                 // scope 1 at $DIR/combine_array_len.rs:+2:9: +2:10\n+          StorageLive(_7);                 // scope 1 at $DIR/combine_array_len.rs:+2:15: +2:16\n+          _7 = const 1_usize;              // scope 1 at $DIR/combine_array_len.rs:+2:15: +2:16\n+-         _8 = Len(_1);                    // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n++         _8 = const 2_usize;              // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n+          _9 = Lt(_7, _8);                 // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n+          assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb2; // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n       }\n   \n       bb2: {\n-          _6 = _1[_7];                     // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n-          StorageDead(_7);                 // scope 1 at $DIR/combine_array_len.rs:6:17: 6:18\n-          StorageLive(_10);                // scope 2 at $DIR/combine_array_len.rs:7:5: 7:8\n-          StorageLive(_11);                // scope 2 at $DIR/combine_array_len.rs:7:5: 7:6\n-          _11 = _2;                        // scope 2 at $DIR/combine_array_len.rs:7:5: 7:6\n-          StorageLive(_12);                // scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n-          _12 = _2;                        // scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n-          _10 = Mul(move _11, move _12);   // scope 2 at $DIR/combine_array_len.rs:7:5: 7:8\n-          StorageDead(_12);                // scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n-          StorageDead(_11);                // scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n-          StorageLive(_13);                // scope 2 at $DIR/combine_array_len.rs:7:11: 7:14\n-          StorageLive(_14);                // scope 2 at $DIR/combine_array_len.rs:7:11: 7:12\n-          _14 = _6;                        // scope 2 at $DIR/combine_array_len.rs:7:11: 7:12\n-          StorageLive(_15);                // scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n-          _15 = _6;                        // scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n-          _13 = Mul(move _14, move _15);   // scope 2 at $DIR/combine_array_len.rs:7:11: 7:14\n-          StorageDead(_15);                // scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n-          StorageDead(_14);                // scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n-          _0 = Add(move _10, move _13);    // scope 2 at $DIR/combine_array_len.rs:7:5: 7:14\n-          StorageDead(_13);                // scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n-          StorageDead(_10);                // scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n-          StorageDead(_6);                 // scope 1 at $DIR/combine_array_len.rs:8:1: 8:2\n-          StorageDead(_2);                 // scope 0 at $DIR/combine_array_len.rs:8:1: 8:2\n-          return;                          // scope 0 at $DIR/combine_array_len.rs:8:2: 8:2\n+          _6 = _1[_7];                     // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n+          StorageDead(_7);                 // scope 1 at $DIR/combine_array_len.rs:+2:17: +2:18\n+          StorageLive(_10);                // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:8\n+          StorageLive(_11);                // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:6\n+          _11 = _2;                        // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:6\n+          StorageLive(_12);                // scope 2 at $DIR/combine_array_len.rs:+3:7: +3:8\n+          _12 = _2;                        // scope 2 at $DIR/combine_array_len.rs:+3:7: +3:8\n+          _10 = Mul(move _11, move _12);   // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:8\n+          StorageDead(_12);                // scope 2 at $DIR/combine_array_len.rs:+3:7: +3:8\n+          StorageDead(_11);                // scope 2 at $DIR/combine_array_len.rs:+3:7: +3:8\n+          StorageLive(_13);                // scope 2 at $DIR/combine_array_len.rs:+3:11: +3:14\n+          StorageLive(_14);                // scope 2 at $DIR/combine_array_len.rs:+3:11: +3:12\n+          _14 = _6;                        // scope 2 at $DIR/combine_array_len.rs:+3:11: +3:12\n+          StorageLive(_15);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n+          _15 = _6;                        // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n+          _13 = Mul(move _14, move _15);   // scope 2 at $DIR/combine_array_len.rs:+3:11: +3:14\n+          StorageDead(_15);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n+          StorageDead(_14);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n+          _0 = Add(move _10, move _13);    // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:14\n+          StorageDead(_13);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n+          StorageDead(_10);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n+          StorageDead(_6);                 // scope 1 at $DIR/combine_array_len.rs:+4:1: +4:2\n+          StorageDead(_2);                 // scope 0 at $DIR/combine_array_len.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/combine_array_len.rs:+4:2: +4:2\n       }\n   }\n   "}, {"sha": "c73150f947dfef7764c1b5c62fcfa9b9583a9f10", "filename": "src/test/mir-opt/combine_array_len.norm2.InstCombine.64bit.diff", "status": "modified", "additions": 58, "deletions": 58, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.64bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,76 +2,76 @@\n + // MIR for `norm2` after InstCombine\n   \n   fn norm2(_1: [f32; 2]) -> f32 {\n-      debug x => _1;                       // in scope 0 at $DIR/combine_array_len.rs:4:10: 4:11\n-      let mut _0: f32;                     // return place in scope 0 at $DIR/combine_array_len.rs:4:26: 4:29\n-      let _2: f32;                         // in scope 0 at $DIR/combine_array_len.rs:5:9: 5:10\n-      let _3: usize;                       // in scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n-      let mut _4: usize;                   // in scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-      let mut _5: bool;                    // in scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-      let _7: usize;                       // in scope 0 at $DIR/combine_array_len.rs:6:15: 6:16\n-      let mut _8: usize;                   // in scope 0 at $DIR/combine_array_len.rs:6:13: 6:17\n-      let mut _9: bool;                    // in scope 0 at $DIR/combine_array_len.rs:6:13: 6:17\n-      let mut _10: f32;                    // in scope 0 at $DIR/combine_array_len.rs:7:5: 7:8\n-      let mut _11: f32;                    // in scope 0 at $DIR/combine_array_len.rs:7:5: 7:6\n-      let mut _12: f32;                    // in scope 0 at $DIR/combine_array_len.rs:7:7: 7:8\n-      let mut _13: f32;                    // in scope 0 at $DIR/combine_array_len.rs:7:11: 7:14\n-      let mut _14: f32;                    // in scope 0 at $DIR/combine_array_len.rs:7:11: 7:12\n-      let mut _15: f32;                    // in scope 0 at $DIR/combine_array_len.rs:7:13: 7:14\n+      debug x => _1;                       // in scope 0 at $DIR/combine_array_len.rs:+0:10: +0:11\n+      let mut _0: f32;                     // return place in scope 0 at $DIR/combine_array_len.rs:+0:26: +0:29\n+      let _2: f32;                         // in scope 0 at $DIR/combine_array_len.rs:+1:9: +1:10\n+      let _3: usize;                       // in scope 0 at $DIR/combine_array_len.rs:+1:15: +1:16\n+      let mut _4: usize;                   // in scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n+      let mut _5: bool;                    // in scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n+      let _7: usize;                       // in scope 0 at $DIR/combine_array_len.rs:+2:15: +2:16\n+      let mut _8: usize;                   // in scope 0 at $DIR/combine_array_len.rs:+2:13: +2:17\n+      let mut _9: bool;                    // in scope 0 at $DIR/combine_array_len.rs:+2:13: +2:17\n+      let mut _10: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:5: +3:8\n+      let mut _11: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:5: +3:6\n+      let mut _12: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:7: +3:8\n+      let mut _13: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:11: +3:14\n+      let mut _14: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:11: +3:12\n+      let mut _15: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:13: +3:14\n       scope 1 {\n-          debug a => _2;                   // in scope 1 at $DIR/combine_array_len.rs:5:9: 5:10\n-          let _6: f32;                     // in scope 1 at $DIR/combine_array_len.rs:6:9: 6:10\n+          debug a => _2;                   // in scope 1 at $DIR/combine_array_len.rs:+1:9: +1:10\n+          let _6: f32;                     // in scope 1 at $DIR/combine_array_len.rs:+2:9: +2:10\n           scope 2 {\n-              debug b => _6;               // in scope 2 at $DIR/combine_array_len.rs:6:9: 6:10\n+              debug b => _6;               // in scope 2 at $DIR/combine_array_len.rs:+2:9: +2:10\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/combine_array_len.rs:5:9: 5:10\n-          StorageLive(_3);                 // scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n-          _3 = const 0_usize;              // scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n--         _4 = Len(_1);                    // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-+         _4 = const 2_usize;              // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-          _5 = Lt(_3, _4);                 // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-          assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n+          StorageLive(_2);                 // scope 0 at $DIR/combine_array_len.rs:+1:9: +1:10\n+          StorageLive(_3);                 // scope 0 at $DIR/combine_array_len.rs:+1:15: +1:16\n+          _3 = const 0_usize;              // scope 0 at $DIR/combine_array_len.rs:+1:15: +1:16\n+-         _4 = Len(_1);                    // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n++         _4 = const 2_usize;              // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n+          _5 = Lt(_3, _4);                 // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n+          assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n       }\n   \n       bb1: {\n-          _2 = _1[_3];                     // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-          StorageDead(_3);                 // scope 0 at $DIR/combine_array_len.rs:5:17: 5:18\n-          StorageLive(_6);                 // scope 1 at $DIR/combine_array_len.rs:6:9: 6:10\n-          StorageLive(_7);                 // scope 1 at $DIR/combine_array_len.rs:6:15: 6:16\n-          _7 = const 1_usize;              // scope 1 at $DIR/combine_array_len.rs:6:15: 6:16\n--         _8 = Len(_1);                    // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n-+         _8 = const 2_usize;              // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n-          _9 = Lt(_7, _8);                 // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n-          assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb2; // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n+          _2 = _1[_3];                     // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n+          StorageDead(_3);                 // scope 0 at $DIR/combine_array_len.rs:+1:17: +1:18\n+          StorageLive(_6);                 // scope 1 at $DIR/combine_array_len.rs:+2:9: +2:10\n+          StorageLive(_7);                 // scope 1 at $DIR/combine_array_len.rs:+2:15: +2:16\n+          _7 = const 1_usize;              // scope 1 at $DIR/combine_array_len.rs:+2:15: +2:16\n+-         _8 = Len(_1);                    // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n++         _8 = const 2_usize;              // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n+          _9 = Lt(_7, _8);                 // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n+          assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb2; // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n       }\n   \n       bb2: {\n-          _6 = _1[_7];                     // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n-          StorageDead(_7);                 // scope 1 at $DIR/combine_array_len.rs:6:17: 6:18\n-          StorageLive(_10);                // scope 2 at $DIR/combine_array_len.rs:7:5: 7:8\n-          StorageLive(_11);                // scope 2 at $DIR/combine_array_len.rs:7:5: 7:6\n-          _11 = _2;                        // scope 2 at $DIR/combine_array_len.rs:7:5: 7:6\n-          StorageLive(_12);                // scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n-          _12 = _2;                        // scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n-          _10 = Mul(move _11, move _12);   // scope 2 at $DIR/combine_array_len.rs:7:5: 7:8\n-          StorageDead(_12);                // scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n-          StorageDead(_11);                // scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n-          StorageLive(_13);                // scope 2 at $DIR/combine_array_len.rs:7:11: 7:14\n-          StorageLive(_14);                // scope 2 at $DIR/combine_array_len.rs:7:11: 7:12\n-          _14 = _6;                        // scope 2 at $DIR/combine_array_len.rs:7:11: 7:12\n-          StorageLive(_15);                // scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n-          _15 = _6;                        // scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n-          _13 = Mul(move _14, move _15);   // scope 2 at $DIR/combine_array_len.rs:7:11: 7:14\n-          StorageDead(_15);                // scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n-          StorageDead(_14);                // scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n-          _0 = Add(move _10, move _13);    // scope 2 at $DIR/combine_array_len.rs:7:5: 7:14\n-          StorageDead(_13);                // scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n-          StorageDead(_10);                // scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n-          StorageDead(_6);                 // scope 1 at $DIR/combine_array_len.rs:8:1: 8:2\n-          StorageDead(_2);                 // scope 0 at $DIR/combine_array_len.rs:8:1: 8:2\n-          return;                          // scope 0 at $DIR/combine_array_len.rs:8:2: 8:2\n+          _6 = _1[_7];                     // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n+          StorageDead(_7);                 // scope 1 at $DIR/combine_array_len.rs:+2:17: +2:18\n+          StorageLive(_10);                // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:8\n+          StorageLive(_11);                // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:6\n+          _11 = _2;                        // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:6\n+          StorageLive(_12);                // scope 2 at $DIR/combine_array_len.rs:+3:7: +3:8\n+          _12 = _2;                        // scope 2 at $DIR/combine_array_len.rs:+3:7: +3:8\n+          _10 = Mul(move _11, move _12);   // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:8\n+          StorageDead(_12);                // scope 2 at $DIR/combine_array_len.rs:+3:7: +3:8\n+          StorageDead(_11);                // scope 2 at $DIR/combine_array_len.rs:+3:7: +3:8\n+          StorageLive(_13);                // scope 2 at $DIR/combine_array_len.rs:+3:11: +3:14\n+          StorageLive(_14);                // scope 2 at $DIR/combine_array_len.rs:+3:11: +3:12\n+          _14 = _6;                        // scope 2 at $DIR/combine_array_len.rs:+3:11: +3:12\n+          StorageLive(_15);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n+          _15 = _6;                        // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n+          _13 = Mul(move _14, move _15);   // scope 2 at $DIR/combine_array_len.rs:+3:11: +3:14\n+          StorageDead(_15);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n+          StorageDead(_14);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n+          _0 = Add(move _10, move _13);    // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:14\n+          StorageDead(_13);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n+          StorageDead(_10);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n+          StorageDead(_6);                 // scope 1 at $DIR/combine_array_len.rs:+4:1: +4:2\n+          StorageDead(_2);                 // scope 0 at $DIR/combine_array_len.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/combine_array_len.rs:+4:2: +4:2\n       }\n   }\n   "}, {"sha": "833d620cc6c931582e38b5ad7d9f26b5deef7278", "filename": "src/test/mir-opt/combine_clone_of_primitives.{impl#0}-clone.InstCombine.diff", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,84 +2,84 @@\n + // MIR for `<impl at $DIR/combine_clone_of_primitives.rs:6:10: 6:15>::clone` after InstCombine\n   \n   fn <impl at $DIR/combine_clone_of_primitives.rs:6:10: 6:15>::clone(_1: &MyThing<T>) -> MyThing<T> {\n-      debug self => _1;                    // in scope 0 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n-      let mut _0: MyThing<T>;              // return place in scope 0 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n-      let mut _2: T;                       // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-      let mut _3: &T;                      // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-      let _4: &T;                          // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-      let mut _5: u64;                     // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n-      let mut _6: &u64;                    // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n-      let _7: &u64;                        // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n-      let mut _8: [f32; 3];                // in scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n-      let mut _9: &[f32; 3];               // in scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n-      let _10: &[f32; 3];                  // in scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+      debug self => _1;                    // in scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15\n+      let mut _0: MyThing<T>;              // return place in scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15\n+      let mut _2: T;                       // in scope 0 at $DIR/combine_clone_of_primitives.rs:+2:5: +2:9\n+      let mut _3: &T;                      // in scope 0 at $DIR/combine_clone_of_primitives.rs:+2:5: +2:9\n+      let _4: &T;                          // in scope 0 at $DIR/combine_clone_of_primitives.rs:+2:5: +2:9\n+      let mut _5: u64;                     // in scope 0 at $DIR/combine_clone_of_primitives.rs:+3:5: +3:11\n+      let mut _6: &u64;                    // in scope 0 at $DIR/combine_clone_of_primitives.rs:+3:5: +3:11\n+      let _7: &u64;                        // in scope 0 at $DIR/combine_clone_of_primitives.rs:+3:5: +3:11\n+      let mut _8: [f32; 3];                // in scope 0 at $DIR/combine_clone_of_primitives.rs:+4:5: +4:16\n+      let mut _9: &[f32; 3];               // in scope 0 at $DIR/combine_clone_of_primitives.rs:+4:5: +4:16\n+      let _10: &[f32; 3];                  // in scope 0 at $DIR/combine_clone_of_primitives.rs:+4:5: +4:16\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-          StorageLive(_3);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-          StorageLive(_4);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-          _4 = &((*_1).0: T);              // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n--         _3 = &(*_4);                     // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-+         _3 = _4;                         // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-          _2 = <T as Clone>::clone(move _3) -> bb1; // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+          StorageLive(_2);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+2:5: +2:9\n+          StorageLive(_3);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+2:5: +2:9\n+          StorageLive(_4);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+2:5: +2:9\n+          _4 = &((*_1).0: T);              // scope 0 at $DIR/combine_clone_of_primitives.rs:+2:5: +2:9\n+-         _3 = &(*_4);                     // scope 0 at $DIR/combine_clone_of_primitives.rs:+2:5: +2:9\n++         _3 = _4;                         // scope 0 at $DIR/combine_clone_of_primitives.rs:+2:5: +2:9\n+          _2 = <T as Clone>::clone(move _3) -> bb1; // scope 0 at $DIR/combine_clone_of_primitives.rs:+2:5: +2:9\n                                            // mir::Constant\n                                            // + span: $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n                                            // + literal: Const { ty: for<'r> fn(&'r T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:8:8: 8:9\n-          StorageLive(_5);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n-          StorageLive(_6);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n-          StorageLive(_7);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n-          _7 = &((*_1).1: u64);            // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n--         _6 = &(*_7);                     // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n--         _5 = <u64 as Clone>::clone(move _6) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+          StorageDead(_3);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+2:8: +2:9\n+          StorageLive(_5);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+3:5: +3:11\n+          StorageLive(_6);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+3:5: +3:11\n+          StorageLive(_7);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+3:5: +3:11\n+          _7 = &((*_1).1: u64);            // scope 0 at $DIR/combine_clone_of_primitives.rs:+3:5: +3:11\n+-         _6 = &(*_7);                     // scope 0 at $DIR/combine_clone_of_primitives.rs:+3:5: +3:11\n+-         _5 = <u64 as Clone>::clone(move _6) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/combine_clone_of_primitives.rs:+3:5: +3:11\n -                                          // mir::Constant\n -                                          // + span: $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n -                                          // + literal: Const { ty: for<'r> fn(&'r u64) -> u64 {<u64 as Clone>::clone}, val: Value(<ZST>) }\n-+         _6 = _7;                         // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n-+         _5 = (*_6);                      // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n-+         goto -> bb2;                     // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n++         _6 = _7;                         // scope 0 at $DIR/combine_clone_of_primitives.rs:+3:5: +3:11\n++         _5 = (*_6);                      // scope 0 at $DIR/combine_clone_of_primitives.rs:+3:5: +3:11\n++         goto -> bb2;                     // scope 0 at $DIR/combine_clone_of_primitives.rs:+3:5: +3:11\n       }\n   \n       bb2: {\n-          StorageDead(_6);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:9:10: 9:11\n-          StorageLive(_8);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n-          StorageLive(_9);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n-          StorageLive(_10);                // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n-          _10 = &((*_1).2: [f32; 3]);      // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n--         _9 = &(*_10);                    // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n--         _8 = <[f32; 3] as Clone>::clone(move _9) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+          StorageDead(_6);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+3:10: +3:11\n+          StorageLive(_8);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+4:5: +4:16\n+          StorageLive(_9);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+4:5: +4:16\n+          StorageLive(_10);                // scope 0 at $DIR/combine_clone_of_primitives.rs:+4:5: +4:16\n+          _10 = &((*_1).2: [f32; 3]);      // scope 0 at $DIR/combine_clone_of_primitives.rs:+4:5: +4:16\n+-         _9 = &(*_10);                    // scope 0 at $DIR/combine_clone_of_primitives.rs:+4:5: +4:16\n+-         _8 = <[f32; 3] as Clone>::clone(move _9) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/combine_clone_of_primitives.rs:+4:5: +4:16\n -                                          // mir::Constant\n -                                          // + span: $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n -                                          // + literal: Const { ty: for<'r> fn(&'r [f32; 3]) -> [f32; 3] {<[f32; 3] as Clone>::clone}, val: Value(<ZST>) }\n-+         _9 = _10;                        // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n-+         _8 = (*_9);                      // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n-+         goto -> bb3;                     // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n++         _9 = _10;                        // scope 0 at $DIR/combine_clone_of_primitives.rs:+4:5: +4:16\n++         _8 = (*_9);                      // scope 0 at $DIR/combine_clone_of_primitives.rs:+4:5: +4:16\n++         goto -> bb3;                     // scope 0 at $DIR/combine_clone_of_primitives.rs:+4:5: +4:16\n       }\n   \n       bb3: {\n-          StorageDead(_9);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:10:15: 10:16\n-          Deinit(_0);                      // scope 0 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n-          (_0.0: T) = move _2;             // scope 0 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n-          (_0.1: u64) = move _5;           // scope 0 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n-          (_0.2: [f32; 3]) = move _8;      // scope 0 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n-          StorageDead(_8);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:6:14: 6:15\n-          StorageDead(_5);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:6:14: 6:15\n-          StorageDead(_2);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:6:14: 6:15\n-          StorageDead(_10);                // scope 0 at $DIR/combine_clone_of_primitives.rs:6:14: 6:15\n-          StorageDead(_7);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:6:14: 6:15\n-          StorageDead(_4);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:6:14: 6:15\n-          return;                          // scope 0 at $DIR/combine_clone_of_primitives.rs:6:15: 6:15\n+          StorageDead(_9);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+4:15: +4:16\n+          Deinit(_0);                      // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15\n+          (_0.0: T) = move _2;             // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15\n+          (_0.1: u64) = move _5;           // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15\n+          (_0.2: [f32; 3]) = move _8;      // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15\n+          StorageDead(_8);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n+          StorageDead(_5);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n+          StorageDead(_2);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n+          StorageDead(_10);                // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n+          StorageDead(_7);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n+          StorageDead(_4);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n+          return;                          // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:15: +0:15\n       }\n   \n       bb4 (cleanup): {\n-          drop(_2) -> bb5;                 // scope 0 at $DIR/combine_clone_of_primitives.rs:6:14: 6:15\n+          drop(_2) -> bb5;                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n       }\n   \n       bb5 (cleanup): {\n-          resume;                          // scope 0 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n+          resume;                          // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15\n       }\n   }\n   "}, {"sha": "da5a64cac651315e589ae6f541b0c829975dc532", "filename": "src/test/mir-opt/const_allocation.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.32bit.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,22 +1,22 @@\n // MIR for `main` after ConstProp\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/const_allocation.rs:7:11: 7:11\n-    let _1: &[(std::option::Option<i32>, &[&str])]; // in scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n-    let mut _2: &&[(std::option::Option<i32>, &[&str])]; // in scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n+    let mut _0: ();                      // return place in scope 0 at $DIR/const_allocation.rs:+0:11: +0:11\n+    let _1: &[(std::option::Option<i32>, &[&str])]; // in scope 0 at $DIR/const_allocation.rs:+1:5: +1:8\n+    let mut _2: &&[(std::option::Option<i32>, &[&str])]; // in scope 0 at $DIR/const_allocation.rs:+1:5: +1:8\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n-        StorageLive(_2);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n-        _2 = const {alloc1: &&[(Option<i32>, &[&str])]}; // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n+        StorageLive(_1);                 // scope 0 at $DIR/const_allocation.rs:+1:5: +1:8\n+        StorageLive(_2);                 // scope 0 at $DIR/const_allocation.rs:+1:5: +1:8\n+        _2 = const {alloc1: &&[(Option<i32>, &[&str])]}; // scope 0 at $DIR/const_allocation.rs:+1:5: +1:8\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation.rs:8:5: 8:8\n                                          // + literal: Const { ty: &&[(Option<i32>, &[&str])], val: Value(Scalar(alloc1)) }\n-        _1 = (*_2);                      // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n-        StorageDead(_2);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n-        StorageDead(_1);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n-        nop;                             // scope 0 at $DIR/const_allocation.rs:7:11: 9:2\n-        return;                          // scope 0 at $DIR/const_allocation.rs:9:2: 9:2\n+        _1 = (*_2);                      // scope 0 at $DIR/const_allocation.rs:+1:5: +1:8\n+        StorageDead(_2);                 // scope 0 at $DIR/const_allocation.rs:+1:8: +1:9\n+        StorageDead(_1);                 // scope 0 at $DIR/const_allocation.rs:+1:8: +1:9\n+        nop;                             // scope 0 at $DIR/const_allocation.rs:+0:11: +2:2\n+        return;                          // scope 0 at $DIR/const_allocation.rs:+2:2: +2:2\n     }\n }\n "}, {"sha": "febd990681e5679ce4247c55c4c87f2acbfbf184", "filename": "src/test/mir-opt/const_allocation.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,22 +1,22 @@\n // MIR for `main` after ConstProp\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/const_allocation.rs:7:11: 7:11\n-    let _1: &[(std::option::Option<i32>, &[&str])]; // in scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n-    let mut _2: &&[(std::option::Option<i32>, &[&str])]; // in scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n+    let mut _0: ();                      // return place in scope 0 at $DIR/const_allocation.rs:+0:11: +0:11\n+    let _1: &[(std::option::Option<i32>, &[&str])]; // in scope 0 at $DIR/const_allocation.rs:+1:5: +1:8\n+    let mut _2: &&[(std::option::Option<i32>, &[&str])]; // in scope 0 at $DIR/const_allocation.rs:+1:5: +1:8\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n-        StorageLive(_2);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n-        _2 = const {alloc1: &&[(Option<i32>, &[&str])]}; // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n+        StorageLive(_1);                 // scope 0 at $DIR/const_allocation.rs:+1:5: +1:8\n+        StorageLive(_2);                 // scope 0 at $DIR/const_allocation.rs:+1:5: +1:8\n+        _2 = const {alloc1: &&[(Option<i32>, &[&str])]}; // scope 0 at $DIR/const_allocation.rs:+1:5: +1:8\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation.rs:8:5: 8:8\n                                          // + literal: Const { ty: &&[(Option<i32>, &[&str])], val: Value(Scalar(alloc1)) }\n-        _1 = (*_2);                      // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n-        StorageDead(_2);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n-        StorageDead(_1);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n-        nop;                             // scope 0 at $DIR/const_allocation.rs:7:11: 9:2\n-        return;                          // scope 0 at $DIR/const_allocation.rs:9:2: 9:2\n+        _1 = (*_2);                      // scope 0 at $DIR/const_allocation.rs:+1:5: +1:8\n+        StorageDead(_2);                 // scope 0 at $DIR/const_allocation.rs:+1:8: +1:9\n+        StorageDead(_1);                 // scope 0 at $DIR/const_allocation.rs:+1:8: +1:9\n+        nop;                             // scope 0 at $DIR/const_allocation.rs:+0:11: +2:2\n+        return;                          // scope 0 at $DIR/const_allocation.rs:+2:2: +2:2\n     }\n }\n "}, {"sha": "389641f20f422f90abcc128d7963514fb16858a4", "filename": "src/test/mir-opt/const_allocation2.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,22 +1,22 @@\n // MIR for `main` after ConstProp\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/const_allocation2.rs:4:11: 4:11\n-    let _1: &[(std::option::Option<i32>, &[&u8])]; // in scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n-    let mut _2: &&[(std::option::Option<i32>, &[&u8])]; // in scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n+    let mut _0: ();                      // return place in scope 0 at $DIR/const_allocation2.rs:+0:11: +0:11\n+    let _1: &[(std::option::Option<i32>, &[&u8])]; // in scope 0 at $DIR/const_allocation2.rs:+1:5: +1:8\n+    let mut _2: &&[(std::option::Option<i32>, &[&u8])]; // in scope 0 at $DIR/const_allocation2.rs:+1:5: +1:8\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n-        StorageLive(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n-        _2 = const {alloc1: &&[(Option<i32>, &[&u8])]}; // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n+        StorageLive(_1);                 // scope 0 at $DIR/const_allocation2.rs:+1:5: +1:8\n+        StorageLive(_2);                 // scope 0 at $DIR/const_allocation2.rs:+1:5: +1:8\n+        _2 = const {alloc1: &&[(Option<i32>, &[&u8])]}; // scope 0 at $DIR/const_allocation2.rs:+1:5: +1:8\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation2.rs:5:5: 5:8\n                                          // + literal: Const { ty: &&[(Option<i32>, &[&u8])], val: Value(Scalar(alloc1)) }\n-        _1 = (*_2);                      // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n-        StorageDead(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n-        StorageDead(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n-        nop;                             // scope 0 at $DIR/const_allocation2.rs:4:11: 6:2\n-        return;                          // scope 0 at $DIR/const_allocation2.rs:6:2: 6:2\n+        _1 = (*_2);                      // scope 0 at $DIR/const_allocation2.rs:+1:5: +1:8\n+        StorageDead(_2);                 // scope 0 at $DIR/const_allocation2.rs:+1:8: +1:9\n+        StorageDead(_1);                 // scope 0 at $DIR/const_allocation2.rs:+1:8: +1:9\n+        nop;                             // scope 0 at $DIR/const_allocation2.rs:+0:11: +2:2\n+        return;                          // scope 0 at $DIR/const_allocation2.rs:+2:2: +2:2\n     }\n }\n "}, {"sha": "ce3848e9216c7d67691bef78bd9885acd0b82961", "filename": "src/test/mir-opt/const_allocation2.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,22 +1,22 @@\n // MIR for `main` after ConstProp\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/const_allocation2.rs:4:11: 4:11\n-    let _1: &[(std::option::Option<i32>, &[&u8])]; // in scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n-    let mut _2: &&[(std::option::Option<i32>, &[&u8])]; // in scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n+    let mut _0: ();                      // return place in scope 0 at $DIR/const_allocation2.rs:+0:11: +0:11\n+    let _1: &[(std::option::Option<i32>, &[&u8])]; // in scope 0 at $DIR/const_allocation2.rs:+1:5: +1:8\n+    let mut _2: &&[(std::option::Option<i32>, &[&u8])]; // in scope 0 at $DIR/const_allocation2.rs:+1:5: +1:8\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n-        StorageLive(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n-        _2 = const {alloc1: &&[(Option<i32>, &[&u8])]}; // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n+        StorageLive(_1);                 // scope 0 at $DIR/const_allocation2.rs:+1:5: +1:8\n+        StorageLive(_2);                 // scope 0 at $DIR/const_allocation2.rs:+1:5: +1:8\n+        _2 = const {alloc1: &&[(Option<i32>, &[&u8])]}; // scope 0 at $DIR/const_allocation2.rs:+1:5: +1:8\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation2.rs:5:5: 5:8\n                                          // + literal: Const { ty: &&[(Option<i32>, &[&u8])], val: Value(Scalar(alloc1)) }\n-        _1 = (*_2);                      // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n-        StorageDead(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n-        StorageDead(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n-        nop;                             // scope 0 at $DIR/const_allocation2.rs:4:11: 6:2\n-        return;                          // scope 0 at $DIR/const_allocation2.rs:6:2: 6:2\n+        _1 = (*_2);                      // scope 0 at $DIR/const_allocation2.rs:+1:5: +1:8\n+        StorageDead(_2);                 // scope 0 at $DIR/const_allocation2.rs:+1:8: +1:9\n+        StorageDead(_1);                 // scope 0 at $DIR/const_allocation2.rs:+1:8: +1:9\n+        nop;                             // scope 0 at $DIR/const_allocation2.rs:+0:11: +2:2\n+        return;                          // scope 0 at $DIR/const_allocation2.rs:+2:2: +2:2\n     }\n }\n "}, {"sha": "b72519159d758bb37bb4417a9df25a2b65227305", "filename": "src/test/mir-opt/const_allocation3.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,22 +1,22 @@\n // MIR for `main` after ConstProp\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/const_allocation3.rs:4:11: 4:11\n-    let _1: &Packed;                     // in scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n-    let mut _2: &&Packed;                // in scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n+    let mut _0: ();                      // return place in scope 0 at $DIR/const_allocation3.rs:+0:11: +0:11\n+    let _1: &Packed;                     // in scope 0 at $DIR/const_allocation3.rs:+1:5: +1:8\n+    let mut _2: &&Packed;                // in scope 0 at $DIR/const_allocation3.rs:+1:5: +1:8\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n-        StorageLive(_2);                 // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n-        _2 = const {alloc1: &&Packed};   // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n+        StorageLive(_1);                 // scope 0 at $DIR/const_allocation3.rs:+1:5: +1:8\n+        StorageLive(_2);                 // scope 0 at $DIR/const_allocation3.rs:+1:5: +1:8\n+        _2 = const {alloc1: &&Packed};   // scope 0 at $DIR/const_allocation3.rs:+1:5: +1:8\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation3.rs:5:5: 5:8\n                                          // + literal: Const { ty: &&Packed, val: Value(Scalar(alloc1)) }\n-        _1 = (*_2);                      // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n-        StorageDead(_2);                 // scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n-        StorageDead(_1);                 // scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n-        nop;                             // scope 0 at $DIR/const_allocation3.rs:4:11: 6:2\n-        return;                          // scope 0 at $DIR/const_allocation3.rs:6:2: 6:2\n+        _1 = (*_2);                      // scope 0 at $DIR/const_allocation3.rs:+1:5: +1:8\n+        StorageDead(_2);                 // scope 0 at $DIR/const_allocation3.rs:+1:8: +1:9\n+        StorageDead(_1);                 // scope 0 at $DIR/const_allocation3.rs:+1:8: +1:9\n+        nop;                             // scope 0 at $DIR/const_allocation3.rs:+0:11: +2:2\n+        return;                          // scope 0 at $DIR/const_allocation3.rs:+2:2: +2:2\n     }\n }\n "}, {"sha": "6bd047c7d9fb27803cf2333d352aa7377276aae3", "filename": "src/test/mir-opt/const_allocation3.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,22 +1,22 @@\n // MIR for `main` after ConstProp\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/const_allocation3.rs:4:11: 4:11\n-    let _1: &Packed;                     // in scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n-    let mut _2: &&Packed;                // in scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n+    let mut _0: ();                      // return place in scope 0 at $DIR/const_allocation3.rs:+0:11: +0:11\n+    let _1: &Packed;                     // in scope 0 at $DIR/const_allocation3.rs:+1:5: +1:8\n+    let mut _2: &&Packed;                // in scope 0 at $DIR/const_allocation3.rs:+1:5: +1:8\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n-        StorageLive(_2);                 // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n-        _2 = const {alloc1: &&Packed};   // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n+        StorageLive(_1);                 // scope 0 at $DIR/const_allocation3.rs:+1:5: +1:8\n+        StorageLive(_2);                 // scope 0 at $DIR/const_allocation3.rs:+1:5: +1:8\n+        _2 = const {alloc1: &&Packed};   // scope 0 at $DIR/const_allocation3.rs:+1:5: +1:8\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation3.rs:5:5: 5:8\n                                          // + literal: Const { ty: &&Packed, val: Value(Scalar(alloc1)) }\n-        _1 = (*_2);                      // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n-        StorageDead(_2);                 // scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n-        StorageDead(_1);                 // scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n-        nop;                             // scope 0 at $DIR/const_allocation3.rs:4:11: 6:2\n-        return;                          // scope 0 at $DIR/const_allocation3.rs:6:2: 6:2\n+        _1 = (*_2);                      // scope 0 at $DIR/const_allocation3.rs:+1:5: +1:8\n+        StorageDead(_2);                 // scope 0 at $DIR/const_allocation3.rs:+1:8: +1:9\n+        StorageDead(_1);                 // scope 0 at $DIR/const_allocation3.rs:+1:8: +1:9\n+        nop;                             // scope 0 at $DIR/const_allocation3.rs:+0:11: +2:2\n+        return;                          // scope 0 at $DIR/const_allocation3.rs:+2:2: +2:2\n     }\n }\n "}, {"sha": "a092f375291549986bf753bc4bd7860c082b28f6", "filename": "src/test/mir-opt/const_debuginfo.main.ConstDebugInfo.diff", "status": "modified", "additions": 85, "deletions": 85, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,46 +2,46 @@\n + // MIR for `main` after ConstDebugInfo\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/const_debuginfo.rs:8:11: 8:11\n-      let _1: u8;                          // in scope 0 at $DIR/const_debuginfo.rs:9:9: 9:10\n-      let mut _5: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:12:15: 12:20\n-      let mut _6: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:12:15: 12:16\n-      let mut _7: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:12:19: 12:20\n-      let mut _8: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:12:23: 12:24\n-      let mut _14: u32;                    // in scope 0 at $DIR/const_debuginfo.rs:21:13: 21:16\n-      let mut _15: u32;                    // in scope 0 at $DIR/const_debuginfo.rs:21:19: 21:22\n+      let mut _0: ();                      // return place in scope 0 at $DIR/const_debuginfo.rs:+0:11: +0:11\n+      let _1: u8;                          // in scope 0 at $DIR/const_debuginfo.rs:+1:9: +1:10\n+      let mut _5: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:+4:15: +4:20\n+      let mut _6: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:+4:15: +4:16\n+      let mut _7: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:+4:19: +4:20\n+      let mut _8: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:+4:23: +4:24\n+      let mut _14: u32;                    // in scope 0 at $DIR/const_debuginfo.rs:+13:13: +13:16\n+      let mut _15: u32;                    // in scope 0 at $DIR/const_debuginfo.rs:+13:19: +13:22\n       scope 1 {\n--         debug x => _1;                   // in scope 1 at $DIR/const_debuginfo.rs:9:9: 9:10\n-+         debug x => const 1_u8;           // in scope 1 at $DIR/const_debuginfo.rs:9:9: 9:10\n-          let _2: u8;                      // in scope 1 at $DIR/const_debuginfo.rs:10:9: 10:10\n+-         debug x => _1;                   // in scope 1 at $DIR/const_debuginfo.rs:+1:9: +1:10\n++         debug x => const 1_u8;           // in scope 1 at $DIR/const_debuginfo.rs:+1:9: +1:10\n+          let _2: u8;                      // in scope 1 at $DIR/const_debuginfo.rs:+2:9: +2:10\n           scope 2 {\n--             debug y => _2;               // in scope 2 at $DIR/const_debuginfo.rs:10:9: 10:10\n-+             debug y => const 2_u8;       // in scope 2 at $DIR/const_debuginfo.rs:10:9: 10:10\n-              let _3: u8;                  // in scope 2 at $DIR/const_debuginfo.rs:11:9: 11:10\n+-             debug y => _2;               // in scope 2 at $DIR/const_debuginfo.rs:+2:9: +2:10\n++             debug y => const 2_u8;       // in scope 2 at $DIR/const_debuginfo.rs:+2:9: +2:10\n+              let _3: u8;                  // in scope 2 at $DIR/const_debuginfo.rs:+3:9: +3:10\n               scope 3 {\n--                 debug z => _3;           // in scope 3 at $DIR/const_debuginfo.rs:11:9: 11:10\n-+                 debug z => const 3_u8;   // in scope 3 at $DIR/const_debuginfo.rs:11:9: 11:10\n-                  let _4: u8;              // in scope 3 at $DIR/const_debuginfo.rs:12:9: 12:12\n+-                 debug z => _3;           // in scope 3 at $DIR/const_debuginfo.rs:+3:9: +3:10\n++                 debug z => const 3_u8;   // in scope 3 at $DIR/const_debuginfo.rs:+3:9: +3:10\n+                  let _4: u8;              // in scope 3 at $DIR/const_debuginfo.rs:+4:9: +4:12\n                   scope 4 {\n--                     debug sum => _4;     // in scope 4 at $DIR/const_debuginfo.rs:12:9: 12:12\n-+                     debug sum => const 6_u8; // in scope 4 at $DIR/const_debuginfo.rs:12:9: 12:12\n-                      let _9: &str;        // in scope 4 at $DIR/const_debuginfo.rs:14:9: 14:10\n+-                     debug sum => _4;     // in scope 4 at $DIR/const_debuginfo.rs:+4:9: +4:12\n++                     debug sum => const 6_u8; // in scope 4 at $DIR/const_debuginfo.rs:+4:9: +4:12\n+                      let _9: &str;        // in scope 4 at $DIR/const_debuginfo.rs:+6:9: +6:10\n                       scope 5 {\n--                         debug s => _9;   // in scope 5 at $DIR/const_debuginfo.rs:14:9: 14:10\n-+                         debug s => const \"hello, world!\"; // in scope 5 at $DIR/const_debuginfo.rs:14:9: 14:10\n-                          let _10: (bool, bool, u32); // in scope 5 at $DIR/const_debuginfo.rs:16:9: 16:10\n+-                         debug s => _9;   // in scope 5 at $DIR/const_debuginfo.rs:+6:9: +6:10\n++                         debug s => const \"hello, world!\"; // in scope 5 at $DIR/const_debuginfo.rs:+6:9: +6:10\n+                          let _10: (bool, bool, u32); // in scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n                           scope 6 {\n-                              debug f => _10; // in scope 6 at $DIR/const_debuginfo.rs:16:9: 16:10\n-                              let _11: std::option::Option<u16>; // in scope 6 at $DIR/const_debuginfo.rs:18:9: 18:10\n+                              debug f => _10; // in scope 6 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+                              let _11: std::option::Option<u16>; // in scope 6 at $DIR/const_debuginfo.rs:+10:9: +10:10\n                               scope 7 {\n-                                  debug o => _11; // in scope 7 at $DIR/const_debuginfo.rs:18:9: 18:10\n-                                  let _12: Point; // in scope 7 at $DIR/const_debuginfo.rs:20:9: 20:10\n+                                  debug o => _11; // in scope 7 at $DIR/const_debuginfo.rs:+10:9: +10:10\n+                                  let _12: Point; // in scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n                                   scope 8 {\n-                                      debug p => _12; // in scope 8 at $DIR/const_debuginfo.rs:20:9: 20:10\n-                                      let _13: u32; // in scope 8 at $DIR/const_debuginfo.rs:21:9: 21:10\n+                                      debug p => _12; // in scope 8 at $DIR/const_debuginfo.rs:+12:9: +12:10\n+                                      let _13: u32; // in scope 8 at $DIR/const_debuginfo.rs:+13:9: +13:10\n                                       scope 9 {\n--                                         debug a => _13; // in scope 9 at $DIR/const_debuginfo.rs:21:9: 21:10\n-+                                         debug a => const 64_u32; // in scope 9 at $DIR/const_debuginfo.rs:21:9: 21:10\n+-                                         debug a => _13; // in scope 9 at $DIR/const_debuginfo.rs:+13:9: +13:10\n++                                         debug a => const 64_u32; // in scope 9 at $DIR/const_debuginfo.rs:+13:9: +13:10\n                                       }\n                                   }\n                               }\n@@ -53,63 +53,63 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/const_debuginfo.rs:9:9: 9:10\n-          _1 = const 1_u8;                 // scope 0 at $DIR/const_debuginfo.rs:9:13: 9:16\n-          StorageLive(_2);                 // scope 1 at $DIR/const_debuginfo.rs:10:9: 10:10\n-          _2 = const 2_u8;                 // scope 1 at $DIR/const_debuginfo.rs:10:13: 10:16\n-          StorageLive(_3);                 // scope 2 at $DIR/const_debuginfo.rs:11:9: 11:10\n-          _3 = const 3_u8;                 // scope 2 at $DIR/const_debuginfo.rs:11:13: 11:16\n-          StorageLive(_4);                 // scope 3 at $DIR/const_debuginfo.rs:12:9: 12:12\n-          StorageLive(_5);                 // scope 3 at $DIR/const_debuginfo.rs:12:15: 12:20\n-          StorageLive(_6);                 // scope 3 at $DIR/const_debuginfo.rs:12:15: 12:16\n-          _6 = const 1_u8;                 // scope 3 at $DIR/const_debuginfo.rs:12:15: 12:16\n-          StorageLive(_7);                 // scope 3 at $DIR/const_debuginfo.rs:12:19: 12:20\n-          _7 = const 2_u8;                 // scope 3 at $DIR/const_debuginfo.rs:12:19: 12:20\n-          _5 = const 3_u8;                 // scope 3 at $DIR/const_debuginfo.rs:12:15: 12:20\n-          StorageDead(_7);                 // scope 3 at $DIR/const_debuginfo.rs:12:19: 12:20\n-          StorageDead(_6);                 // scope 3 at $DIR/const_debuginfo.rs:12:19: 12:20\n-          StorageLive(_8);                 // scope 3 at $DIR/const_debuginfo.rs:12:23: 12:24\n-          _8 = const 3_u8;                 // scope 3 at $DIR/const_debuginfo.rs:12:23: 12:24\n-          _4 = const 6_u8;                 // scope 3 at $DIR/const_debuginfo.rs:12:15: 12:24\n-          StorageDead(_8);                 // scope 3 at $DIR/const_debuginfo.rs:12:23: 12:24\n-          StorageDead(_5);                 // scope 3 at $DIR/const_debuginfo.rs:12:23: 12:24\n-          StorageLive(_9);                 // scope 4 at $DIR/const_debuginfo.rs:14:9: 14:10\n-          _9 = const \"hello, world!\";      // scope 4 at $DIR/const_debuginfo.rs:14:13: 14:28\n+          StorageLive(_1);                 // scope 0 at $DIR/const_debuginfo.rs:+1:9: +1:10\n+          _1 = const 1_u8;                 // scope 0 at $DIR/const_debuginfo.rs:+1:13: +1:16\n+          StorageLive(_2);                 // scope 1 at $DIR/const_debuginfo.rs:+2:9: +2:10\n+          _2 = const 2_u8;                 // scope 1 at $DIR/const_debuginfo.rs:+2:13: +2:16\n+          StorageLive(_3);                 // scope 2 at $DIR/const_debuginfo.rs:+3:9: +3:10\n+          _3 = const 3_u8;                 // scope 2 at $DIR/const_debuginfo.rs:+3:13: +3:16\n+          StorageLive(_4);                 // scope 3 at $DIR/const_debuginfo.rs:+4:9: +4:12\n+          StorageLive(_5);                 // scope 3 at $DIR/const_debuginfo.rs:+4:15: +4:20\n+          StorageLive(_6);                 // scope 3 at $DIR/const_debuginfo.rs:+4:15: +4:16\n+          _6 = const 1_u8;                 // scope 3 at $DIR/const_debuginfo.rs:+4:15: +4:16\n+          StorageLive(_7);                 // scope 3 at $DIR/const_debuginfo.rs:+4:19: +4:20\n+          _7 = const 2_u8;                 // scope 3 at $DIR/const_debuginfo.rs:+4:19: +4:20\n+          _5 = const 3_u8;                 // scope 3 at $DIR/const_debuginfo.rs:+4:15: +4:20\n+          StorageDead(_7);                 // scope 3 at $DIR/const_debuginfo.rs:+4:19: +4:20\n+          StorageDead(_6);                 // scope 3 at $DIR/const_debuginfo.rs:+4:19: +4:20\n+          StorageLive(_8);                 // scope 3 at $DIR/const_debuginfo.rs:+4:23: +4:24\n+          _8 = const 3_u8;                 // scope 3 at $DIR/const_debuginfo.rs:+4:23: +4:24\n+          _4 = const 6_u8;                 // scope 3 at $DIR/const_debuginfo.rs:+4:15: +4:24\n+          StorageDead(_8);                 // scope 3 at $DIR/const_debuginfo.rs:+4:23: +4:24\n+          StorageDead(_5);                 // scope 3 at $DIR/const_debuginfo.rs:+4:23: +4:24\n+          StorageLive(_9);                 // scope 4 at $DIR/const_debuginfo.rs:+6:9: +6:10\n+          _9 = const \"hello, world!\";      // scope 4 at $DIR/const_debuginfo.rs:+6:13: +6:28\n                                            // mir::Constant\n                                            // + span: $DIR/const_debuginfo.rs:14:13: 14:28\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n-          StorageLive(_10);                // scope 5 at $DIR/const_debuginfo.rs:16:9: 16:10\n-          Deinit(_10);                     // scope 5 at $DIR/const_debuginfo.rs:16:13: 16:34\n-          (_10.0: bool) = const true;      // scope 5 at $DIR/const_debuginfo.rs:16:13: 16:34\n-          (_10.1: bool) = const false;     // scope 5 at $DIR/const_debuginfo.rs:16:13: 16:34\n-          (_10.2: u32) = const 123_u32;    // scope 5 at $DIR/const_debuginfo.rs:16:13: 16:34\n-          StorageLive(_11);                // scope 6 at $DIR/const_debuginfo.rs:18:9: 18:10\n-          Deinit(_11);                     // scope 6 at $DIR/const_debuginfo.rs:18:13: 18:24\n-          ((_11 as Some).0: u16) = const 99_u16; // scope 6 at $DIR/const_debuginfo.rs:18:13: 18:24\n-          discriminant(_11) = 1;           // scope 6 at $DIR/const_debuginfo.rs:18:13: 18:24\n-          StorageLive(_12);                // scope 7 at $DIR/const_debuginfo.rs:20:9: 20:10\n-          Deinit(_12);                     // scope 7 at $DIR/const_debuginfo.rs:20:13: 20:35\n-          (_12.0: u32) = const 32_u32;     // scope 7 at $DIR/const_debuginfo.rs:20:13: 20:35\n-          (_12.1: u32) = const 32_u32;     // scope 7 at $DIR/const_debuginfo.rs:20:13: 20:35\n-          StorageLive(_13);                // scope 8 at $DIR/const_debuginfo.rs:21:9: 21:10\n-          StorageLive(_14);                // scope 8 at $DIR/const_debuginfo.rs:21:13: 21:16\n-          _14 = const 32_u32;              // scope 8 at $DIR/const_debuginfo.rs:21:13: 21:16\n-          StorageLive(_15);                // scope 8 at $DIR/const_debuginfo.rs:21:19: 21:22\n-          _15 = const 32_u32;              // scope 8 at $DIR/const_debuginfo.rs:21:19: 21:22\n-          _13 = const 64_u32;              // scope 8 at $DIR/const_debuginfo.rs:21:13: 21:22\n-          StorageDead(_15);                // scope 8 at $DIR/const_debuginfo.rs:21:21: 21:22\n-          StorageDead(_14);                // scope 8 at $DIR/const_debuginfo.rs:21:21: 21:22\n-          nop;                             // scope 0 at $DIR/const_debuginfo.rs:8:11: 22:2\n-          StorageDead(_13);                // scope 8 at $DIR/const_debuginfo.rs:22:1: 22:2\n-          StorageDead(_12);                // scope 7 at $DIR/const_debuginfo.rs:22:1: 22:2\n-          StorageDead(_11);                // scope 6 at $DIR/const_debuginfo.rs:22:1: 22:2\n-          StorageDead(_10);                // scope 5 at $DIR/const_debuginfo.rs:22:1: 22:2\n-          StorageDead(_9);                 // scope 4 at $DIR/const_debuginfo.rs:22:1: 22:2\n-          StorageDead(_4);                 // scope 3 at $DIR/const_debuginfo.rs:22:1: 22:2\n-          StorageDead(_3);                 // scope 2 at $DIR/const_debuginfo.rs:22:1: 22:2\n-          StorageDead(_2);                 // scope 1 at $DIR/const_debuginfo.rs:22:1: 22:2\n-          StorageDead(_1);                 // scope 0 at $DIR/const_debuginfo.rs:22:1: 22:2\n-          return;                          // scope 0 at $DIR/const_debuginfo.rs:22:2: 22:2\n+          StorageLive(_10);                // scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+          Deinit(_10);                     // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n+          (_10.0: bool) = const true;      // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n+          (_10.1: bool) = const false;     // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n+          (_10.2: u32) = const 123_u32;    // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n+          StorageLive(_11);                // scope 6 at $DIR/const_debuginfo.rs:+10:9: +10:10\n+          Deinit(_11);                     // scope 6 at $DIR/const_debuginfo.rs:+10:13: +10:24\n+          ((_11 as Some).0: u16) = const 99_u16; // scope 6 at $DIR/const_debuginfo.rs:+10:13: +10:24\n+          discriminant(_11) = 1;           // scope 6 at $DIR/const_debuginfo.rs:+10:13: +10:24\n+          StorageLive(_12);                // scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n+          Deinit(_12);                     // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n+          (_12.0: u32) = const 32_u32;     // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n+          (_12.1: u32) = const 32_u32;     // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n+          StorageLive(_13);                // scope 8 at $DIR/const_debuginfo.rs:+13:9: +13:10\n+          StorageLive(_14);                // scope 8 at $DIR/const_debuginfo.rs:+13:13: +13:16\n+          _14 = const 32_u32;              // scope 8 at $DIR/const_debuginfo.rs:+13:13: +13:16\n+          StorageLive(_15);                // scope 8 at $DIR/const_debuginfo.rs:+13:19: +13:22\n+          _15 = const 32_u32;              // scope 8 at $DIR/const_debuginfo.rs:+13:19: +13:22\n+          _13 = const 64_u32;              // scope 8 at $DIR/const_debuginfo.rs:+13:13: +13:22\n+          StorageDead(_15);                // scope 8 at $DIR/const_debuginfo.rs:+13:21: +13:22\n+          StorageDead(_14);                // scope 8 at $DIR/const_debuginfo.rs:+13:21: +13:22\n+          nop;                             // scope 0 at $DIR/const_debuginfo.rs:+0:11: +14:2\n+          StorageDead(_13);                // scope 8 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_12);                // scope 7 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_11);                // scope 6 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_10);                // scope 5 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_9);                 // scope 4 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_4);                 // scope 3 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_3);                 // scope 2 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_2);                 // scope 1 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_1);                 // scope 0 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          return;                          // scope 0 at $DIR/const_debuginfo.rs:+14:2: +14:2\n       }\n   }\n   "}, {"sha": "fade2d0bc6edf7890e10417738eac10e5a344278", "filename": "src/test/mir-opt/const_goto.issue_77355_opt.ConstGoto.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_goto.issue_77355_opt.ConstGoto.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_goto.issue_77355_opt.ConstGoto.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_goto.issue_77355_opt.ConstGoto.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,25 +2,25 @@\n + // MIR for `issue_77355_opt` after ConstGoto\n   \n   fn issue_77355_opt(_1: Foo) -> u64 {\n-      debug num => _1;                     // in scope 0 at $DIR/const_goto.rs:11:20: 11:23\n-      let mut _0: u64;                     // return place in scope 0 at $DIR/const_goto.rs:11:33: 11:36\n+      debug num => _1;                     // in scope 0 at $DIR/const_goto.rs:+0:20: +0:23\n+      let mut _0: u64;                     // return place in scope 0 at $DIR/const_goto.rs:+0:33: +0:36\n -     let mut _2: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n--     let mut _3: isize;                   // in scope 0 at $DIR/const_goto.rs:12:22: 12:28\n-+     let mut _2: isize;                   // in scope 0 at $DIR/const_goto.rs:12:22: 12:28\n+-     let mut _3: isize;                   // in scope 0 at $DIR/const_goto.rs:+1:22: +1:28\n++     let mut _2: isize;                   // in scope 0 at $DIR/const_goto.rs:+1:22: +1:28\n   \n       bb0: {\n -         StorageLive(_2);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n--         _3 = discriminant(_1);           // scope 0 at $DIR/const_goto.rs:12:17: 12:20\n+-         _3 = discriminant(_1);           // scope 0 at $DIR/const_goto.rs:+1:17: +1:20\n -         switchInt(move _3) -> [1_isize: bb2, 2_isize: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-+         _2 = discriminant(_1);           // scope 0 at $DIR/const_goto.rs:12:17: 12:20\n++         _2 = discriminant(_1);           // scope 0 at $DIR/const_goto.rs:+1:17: +1:20\n +         switchInt(move _2) -> [1_isize: bb2, 2_isize: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n       bb1: {\n -         _2 = const false;                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n -         goto -> bb3;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-+         _0 = const 42_u64;               // scope 0 at $DIR/const_goto.rs:12:53: 12:55\n-+         goto -> bb3;                     // scope 0 at $DIR/const_goto.rs:12:5: 12:57\n++         _0 = const 42_u64;               // scope 0 at $DIR/const_goto.rs:+1:53: +1:55\n++         goto -> bb3;                     // scope 0 at $DIR/const_goto.rs:+1:5: +1:57\n       }\n   \n       bb2: {\n@@ -33,20 +33,20 @@\n -     }\n - \n -     bb4: {\n-          _0 = const 23_u64;               // scope 0 at $DIR/const_goto.rs:12:41: 12:43\n--         goto -> bb6;                     // scope 0 at $DIR/const_goto.rs:12:5: 12:57\n-+         goto -> bb3;                     // scope 0 at $DIR/const_goto.rs:12:5: 12:57\n+          _0 = const 23_u64;               // scope 0 at $DIR/const_goto.rs:+1:41: +1:43\n+-         goto -> bb6;                     // scope 0 at $DIR/const_goto.rs:+1:5: +1:57\n++         goto -> bb3;                     // scope 0 at $DIR/const_goto.rs:+1:5: +1:57\n       }\n   \n -     bb5: {\n--         _0 = const 42_u64;               // scope 0 at $DIR/const_goto.rs:12:53: 12:55\n--         goto -> bb6;                     // scope 0 at $DIR/const_goto.rs:12:5: 12:57\n+-         _0 = const 42_u64;               // scope 0 at $DIR/const_goto.rs:+1:53: +1:55\n+-         goto -> bb6;                     // scope 0 at $DIR/const_goto.rs:+1:5: +1:57\n -     }\n - \n -     bb6: {\n--         StorageDead(_2);                 // scope 0 at $DIR/const_goto.rs:12:56: 12:57\n+-         StorageDead(_2);                 // scope 0 at $DIR/const_goto.rs:+1:56: +1:57\n +     bb3: {\n-          return;                          // scope 0 at $DIR/const_goto.rs:13:2: 13:2\n+          return;                          // scope 0 at $DIR/const_goto.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "623297aeba5062e240963802333e99c46c135f13", "filename": "src/test/mir-opt/const_goto_const_eval_fail.f.ConstGoto.diff", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_goto_const_eval_fail.f.ConstGoto.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_goto_const_eval_fail.f.ConstGoto.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_goto_const_eval_fail.f.ConstGoto.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,50 +2,50 @@\n + // MIR for `f` after ConstGoto\n   \n   fn f() -> u64 {\n-      let mut _0: u64;                     // return place in scope 0 at $DIR/const_goto_const_eval_fail.rs:6:44: 6:47\n-      let mut _1: bool;                    // in scope 0 at $DIR/const_goto_const_eval_fail.rs:7:11: 12:6\n-      let mut _2: i32;                     // in scope 0 at $DIR/const_goto_const_eval_fail.rs:8:15: 8:16\n+      let mut _0: u64;                     // return place in scope 0 at $DIR/const_goto_const_eval_fail.rs:+0:44: +0:47\n+      let mut _1: bool;                    // in scope 0 at $DIR/const_goto_const_eval_fail.rs:+1:11: +6:6\n+      let mut _2: i32;                     // in scope 0 at $DIR/const_goto_const_eval_fail.rs:+2:15: +2:16\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/const_goto_const_eval_fail.rs:7:11: 12:6\n-          StorageLive(_2);                 // scope 0 at $DIR/const_goto_const_eval_fail.rs:8:15: 8:16\n-          _2 = const A;                    // scope 0 at $DIR/const_goto_const_eval_fail.rs:8:15: 8:16\n-          switchInt(_2) -> [1_i32: bb2, 2_i32: bb2, 3_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/const_goto_const_eval_fail.rs:8:9: 8:16\n+          StorageLive(_1);                 // scope 0 at $DIR/const_goto_const_eval_fail.rs:+1:11: +6:6\n+          StorageLive(_2);                 // scope 0 at $DIR/const_goto_const_eval_fail.rs:+2:15: +2:16\n+          _2 = const A;                    // scope 0 at $DIR/const_goto_const_eval_fail.rs:+2:15: +2:16\n+          switchInt(_2) -> [1_i32: bb2, 2_i32: bb2, 3_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/const_goto_const_eval_fail.rs:+2:9: +2:16\n       }\n   \n       bb1: {\n-          _1 = const true;                 // scope 0 at $DIR/const_goto_const_eval_fail.rs:10:18: 10:22\n-          goto -> bb3;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:10:18: 10:22\n+          _1 = const true;                 // scope 0 at $DIR/const_goto_const_eval_fail.rs:+4:18: +4:22\n+          goto -> bb3;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:+4:18: +4:22\n       }\n   \n       bb2: {\n-          _1 = const B;                    // scope 0 at $DIR/const_goto_const_eval_fail.rs:9:26: 9:27\n--         goto -> bb3;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:9:26: 9:27\n-+         switchInt(_1) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/const_goto_const_eval_fail.rs:7:5: 12:6\n+          _1 = const B;                    // scope 0 at $DIR/const_goto_const_eval_fail.rs:+3:26: +3:27\n+-         goto -> bb3;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:+3:26: +3:27\n++         switchInt(_1) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/const_goto_const_eval_fail.rs:+1:5: +6:6\n       }\n   \n       bb3: {\n--         switchInt(_1) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/const_goto_const_eval_fail.rs:7:5: 12:6\n+-         switchInt(_1) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/const_goto_const_eval_fail.rs:+1:5: +6:6\n -     }\n - \n -     bb4: {\n-          _0 = const 2_u64;                // scope 0 at $DIR/const_goto_const_eval_fail.rs:14:17: 14:18\n--         goto -> bb6;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:14:17: 14:18\n-+         goto -> bb5;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:14:17: 14:18\n+          _0 = const 2_u64;                // scope 0 at $DIR/const_goto_const_eval_fail.rs:+8:17: +8:18\n+-         goto -> bb6;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:+8:17: +8:18\n++         goto -> bb5;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:+8:17: +8:18\n       }\n   \n -     bb5: {\n +     bb4: {\n-          _0 = const 1_u64;                // scope 0 at $DIR/const_goto_const_eval_fail.rs:13:18: 13:19\n--         goto -> bb6;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:13:18: 13:19\n-+         goto -> bb5;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:13:18: 13:19\n+          _0 = const 1_u64;                // scope 0 at $DIR/const_goto_const_eval_fail.rs:+7:18: +7:19\n+-         goto -> bb6;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:+7:18: +7:19\n++         goto -> bb5;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:+7:18: +7:19\n       }\n   \n -     bb6: {\n +     bb5: {\n-          StorageDead(_2);                 // scope 0 at $DIR/const_goto_const_eval_fail.rs:16:1: 16:2\n-          StorageDead(_1);                 // scope 0 at $DIR/const_goto_const_eval_fail.rs:16:1: 16:2\n-          return;                          // scope 0 at $DIR/const_goto_const_eval_fail.rs:16:2: 16:2\n+          StorageDead(_2);                 // scope 0 at $DIR/const_goto_const_eval_fail.rs:+10:1: +10:2\n+          StorageDead(_1);                 // scope 0 at $DIR/const_goto_const_eval_fail.rs:+10:1: +10:2\n+          return;                          // scope 0 at $DIR/const_goto_const_eval_fail.rs:+10:2: +10:2\n       }\n   }\n   "}, {"sha": "2b09ef7866126fde742be0d7b0cb334c1129baf6", "filename": "src/test/mir-opt/const_goto_storage.match_nested_if.ConstGoto.diff", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_goto_storage.match_nested_if.ConstGoto.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_goto_storage.match_nested_if.ConstGoto.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_goto_storage.match_nested_if.ConstGoto.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,102 +2,102 @@\n + // MIR for `match_nested_if` after ConstGoto\n   \n   fn match_nested_if() -> bool {\n-      let mut _0: bool;                    // return place in scope 0 at $DIR/const_goto_storage.rs:2:25: 2:29\n-      let _1: bool;                        // in scope 0 at $DIR/const_goto_storage.rs:3:9: 3:12\n--     let mut _2: ();                      // in scope 0 at $DIR/const_goto_storage.rs:3:21: 3:23\n--     let mut _3: bool;                    // in scope 0 at $DIR/const_goto_storage.rs:4:15: 8:10\n--     let mut _4: bool;                    // in scope 0 at $DIR/const_goto_storage.rs:4:18: 4:76\n--     let mut _5: bool;                    // in scope 0 at $DIR/const_goto_storage.rs:4:21: 4:52\n--     let mut _6: bool;                    // in scope 0 at $DIR/const_goto_storage.rs:4:24: 4:28\n-+     let mut _2: bool;                    // in scope 0 at $DIR/const_goto_storage.rs:4:24: 4:28\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/const_goto_storage.rs:+0:25: +0:29\n+      let _1: bool;                        // in scope 0 at $DIR/const_goto_storage.rs:+1:9: +1:12\n+-     let mut _2: ();                      // in scope 0 at $DIR/const_goto_storage.rs:+1:21: +1:23\n+-     let mut _3: bool;                    // in scope 0 at $DIR/const_goto_storage.rs:+2:15: +6:10\n+-     let mut _4: bool;                    // in scope 0 at $DIR/const_goto_storage.rs:+2:18: +2:76\n+-     let mut _5: bool;                    // in scope 0 at $DIR/const_goto_storage.rs:+2:21: +2:52\n+-     let mut _6: bool;                    // in scope 0 at $DIR/const_goto_storage.rs:+2:24: +2:28\n++     let mut _2: bool;                    // in scope 0 at $DIR/const_goto_storage.rs:+2:24: +2:28\n       scope 1 {\n-          debug val => _1;                 // in scope 1 at $DIR/const_goto_storage.rs:3:9: 3:12\n+          debug val => _1;                 // in scope 1 at $DIR/const_goto_storage.rs:+1:9: +1:12\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/const_goto_storage.rs:3:9: 3:12\n--         StorageLive(_2);                 // scope 0 at $DIR/const_goto_storage.rs:3:21: 3:23\n--         nop;                             // scope 0 at $DIR/const_goto_storage.rs:3:21: 3:23\n--         StorageLive(_3);                 // scope 0 at $DIR/const_goto_storage.rs:4:15: 8:10\n--         StorageLive(_4);                 // scope 0 at $DIR/const_goto_storage.rs:4:18: 4:76\n--         StorageLive(_5);                 // scope 0 at $DIR/const_goto_storage.rs:4:21: 4:52\n--         StorageLive(_6);                 // scope 0 at $DIR/const_goto_storage.rs:4:24: 4:28\n--         _6 = const true;                 // scope 0 at $DIR/const_goto_storage.rs:4:24: 4:28\n--         switchInt(move _6) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/const_goto_storage.rs:4:24: 4:28\n-+         StorageLive(_2);                 // scope 0 at $DIR/const_goto_storage.rs:4:24: 4:28\n-+         _2 = const true;                 // scope 0 at $DIR/const_goto_storage.rs:4:24: 4:28\n-+         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/const_goto_storage.rs:4:24: 4:28\n+          StorageLive(_1);                 // scope 0 at $DIR/const_goto_storage.rs:+1:9: +1:12\n+-         StorageLive(_2);                 // scope 0 at $DIR/const_goto_storage.rs:+1:21: +1:23\n+-         nop;                             // scope 0 at $DIR/const_goto_storage.rs:+1:21: +1:23\n+-         StorageLive(_3);                 // scope 0 at $DIR/const_goto_storage.rs:+2:15: +6:10\n+-         StorageLive(_4);                 // scope 0 at $DIR/const_goto_storage.rs:+2:18: +2:76\n+-         StorageLive(_5);                 // scope 0 at $DIR/const_goto_storage.rs:+2:21: +2:52\n+-         StorageLive(_6);                 // scope 0 at $DIR/const_goto_storage.rs:+2:24: +2:28\n+-         _6 = const true;                 // scope 0 at $DIR/const_goto_storage.rs:+2:24: +2:28\n+-         switchInt(move _6) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/const_goto_storage.rs:+2:24: +2:28\n++         StorageLive(_2);                 // scope 0 at $DIR/const_goto_storage.rs:+2:24: +2:28\n++         _2 = const true;                 // scope 0 at $DIR/const_goto_storage.rs:+2:24: +2:28\n++         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/const_goto_storage.rs:+2:24: +2:28\n       }\n   \n       bb1: {\n--         _5 = const true;                 // scope 0 at $DIR/const_goto_storage.rs:4:31: 4:35\n--         goto -> bb3;                     // scope 0 at $DIR/const_goto_storage.rs:4:21: 4:52\n+-         _5 = const true;                 // scope 0 at $DIR/const_goto_storage.rs:+2:31: +2:35\n+-         goto -> bb3;                     // scope 0 at $DIR/const_goto_storage.rs:+2:21: +2:52\n -     }\n - \n -     bb2: {\n--         _5 = const false;                // scope 0 at $DIR/const_goto_storage.rs:4:45: 4:50\n--         goto -> bb3;                     // scope 0 at $DIR/const_goto_storage.rs:4:21: 4:52\n+-         _5 = const false;                // scope 0 at $DIR/const_goto_storage.rs:+2:45: +2:50\n+-         goto -> bb3;                     // scope 0 at $DIR/const_goto_storage.rs:+2:21: +2:52\n -     }\n - \n -     bb3: {\n--         StorageDead(_6);                 // scope 0 at $DIR/const_goto_storage.rs:4:51: 4:52\n--         switchInt(move _5) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/const_goto_storage.rs:4:21: 4:52\n+-         StorageDead(_6);                 // scope 0 at $DIR/const_goto_storage.rs:+2:51: +2:52\n+-         switchInt(move _5) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/const_goto_storage.rs:+2:21: +2:52\n -     }\n - \n -     bb4: {\n--         _4 = const true;                 // scope 0 at $DIR/const_goto_storage.rs:4:55: 4:59\n--         goto -> bb6;                     // scope 0 at $DIR/const_goto_storage.rs:4:18: 4:76\n+-         _4 = const true;                 // scope 0 at $DIR/const_goto_storage.rs:+2:55: +2:59\n+-         goto -> bb6;                     // scope 0 at $DIR/const_goto_storage.rs:+2:18: +2:76\n -     }\n - \n -     bb5: {\n--         _4 = const false;                // scope 0 at $DIR/const_goto_storage.rs:4:69: 4:74\n--         goto -> bb6;                     // scope 0 at $DIR/const_goto_storage.rs:4:18: 4:76\n+-         _4 = const false;                // scope 0 at $DIR/const_goto_storage.rs:+2:69: +2:74\n+-         goto -> bb6;                     // scope 0 at $DIR/const_goto_storage.rs:+2:18: +2:76\n -     }\n - \n -     bb6: {\n--         StorageDead(_5);                 // scope 0 at $DIR/const_goto_storage.rs:4:75: 4:76\n--         switchInt(move _4) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/const_goto_storage.rs:4:18: 4:76\n+-         StorageDead(_5);                 // scope 0 at $DIR/const_goto_storage.rs:+2:75: +2:76\n+-         switchInt(move _4) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/const_goto_storage.rs:+2:18: +2:76\n -     }\n - \n -     bb7: {\n--         _3 = const true;                 // scope 0 at $DIR/const_goto_storage.rs:5:13: 5:17\n--         goto -> bb9;                     // scope 0 at $DIR/const_goto_storage.rs:4:15: 8:10\n+-         _3 = const true;                 // scope 0 at $DIR/const_goto_storage.rs:+3:13: +3:17\n+-         goto -> bb9;                     // scope 0 at $DIR/const_goto_storage.rs:+2:15: +6:10\n -     }\n - \n -     bb8: {\n--         _3 = const false;                // scope 0 at $DIR/const_goto_storage.rs:7:13: 7:18\n--         goto -> bb9;                     // scope 0 at $DIR/const_goto_storage.rs:4:15: 8:10\n+-         _3 = const false;                // scope 0 at $DIR/const_goto_storage.rs:+5:13: +5:18\n+-         goto -> bb9;                     // scope 0 at $DIR/const_goto_storage.rs:+2:15: +6:10\n -     }\n - \n -     bb9: {\n--         switchInt(move _3) -> [false: bb11, otherwise: bb10]; // scope 0 at $DIR/const_goto_storage.rs:4:15: 8:10\n+-         switchInt(move _3) -> [false: bb11, otherwise: bb10]; // scope 0 at $DIR/const_goto_storage.rs:+2:15: +6:10\n -     }\n - \n -     bb10: {\n--         StorageDead(_4);                 // scope 0 at $DIR/const_goto_storage.rs:8:9: 8:10\n--         StorageDead(_3);                 // scope 0 at $DIR/const_goto_storage.rs:8:9: 8:10\n-+         StorageDead(_2);                 // scope 0 at $DIR/const_goto_storage.rs:4:51: 4:52\n-          _1 = const true;                 // scope 0 at $DIR/const_goto_storage.rs:10:17: 10:21\n--         goto -> bb12;                    // scope 0 at $DIR/const_goto_storage.rs:10:17: 10:21\n-+         goto -> bb3;                     // scope 0 at $DIR/const_goto_storage.rs:10:17: 10:21\n+-         StorageDead(_4);                 // scope 0 at $DIR/const_goto_storage.rs:+6:9: +6:10\n+-         StorageDead(_3);                 // scope 0 at $DIR/const_goto_storage.rs:+6:9: +6:10\n++         StorageDead(_2);                 // scope 0 at $DIR/const_goto_storage.rs:+2:51: +2:52\n+          _1 = const true;                 // scope 0 at $DIR/const_goto_storage.rs:+8:17: +8:21\n+-         goto -> bb12;                    // scope 0 at $DIR/const_goto_storage.rs:+8:17: +8:21\n++         goto -> bb3;                     // scope 0 at $DIR/const_goto_storage.rs:+8:17: +8:21\n       }\n   \n -     bb11: {\n--         StorageDead(_4);                 // scope 0 at $DIR/const_goto_storage.rs:8:9: 8:10\n--         StorageDead(_3);                 // scope 0 at $DIR/const_goto_storage.rs:8:9: 8:10\n+-         StorageDead(_4);                 // scope 0 at $DIR/const_goto_storage.rs:+6:9: +6:10\n+-         StorageDead(_3);                 // scope 0 at $DIR/const_goto_storage.rs:+6:9: +6:10\n +     bb2: {\n-+         StorageDead(_2);                 // scope 0 at $DIR/const_goto_storage.rs:4:51: 4:52\n-          _1 = const false;                // scope 0 at $DIR/const_goto_storage.rs:12:14: 12:19\n--         goto -> bb12;                    // scope 0 at $DIR/const_goto_storage.rs:12:14: 12:19\n-+         goto -> bb3;                     // scope 0 at $DIR/const_goto_storage.rs:12:14: 12:19\n++         StorageDead(_2);                 // scope 0 at $DIR/const_goto_storage.rs:+2:51: +2:52\n+          _1 = const false;                // scope 0 at $DIR/const_goto_storage.rs:+10:14: +10:19\n+-         goto -> bb12;                    // scope 0 at $DIR/const_goto_storage.rs:+10:14: +10:19\n++         goto -> bb3;                     // scope 0 at $DIR/const_goto_storage.rs:+10:14: +10:19\n       }\n   \n -     bb12: {\n--         StorageDead(_2);                 // scope 0 at $DIR/const_goto_storage.rs:13:6: 13:7\n+-         StorageDead(_2);                 // scope 0 at $DIR/const_goto_storage.rs:+11:6: +11:7\n +     bb3: {\n-          _0 = _1;                         // scope 1 at $DIR/const_goto_storage.rs:14:5: 14:8\n-          StorageDead(_1);                 // scope 0 at $DIR/const_goto_storage.rs:15:1: 15:2\n-          return;                          // scope 0 at $DIR/const_goto_storage.rs:15:2: 15:2\n+          _0 = _1;                         // scope 1 at $DIR/const_goto_storage.rs:+12:5: +12:8\n+          StorageDead(_1);                 // scope 0 at $DIR/const_goto_storage.rs:+13:1: +13:2\n+          return;                          // scope 0 at $DIR/const_goto_storage.rs:+13:2: +13:2\n       }\n   }\n   "}, {"sha": "7650769de3b593bc7ae8b79986253d683931b59d", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR-promoted[0].SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,20 +1,20 @@\n // MIR for `BAR::promoted[0]` after SimplifyCfg-elaborate-drops\n \n promoted[0] in BAR: &[&i32; 1] = {\n-    let mut _0: &[&i32; 1];              // return place in scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n-    let mut _1: [&i32; 1];               // in scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n-    let mut _2: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n-    let mut _3: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n+    let mut _0: &[&i32; 1];              // return place in scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n+    let mut _1: [&i32; 1];               // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:35\n+    let mut _2: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:32: +0:34\n+    let mut _3: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:33: +0:34\n \n     bb0: {\n-        _3 = const {alloc1: &i32};       // scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n+        _3 = const {alloc1: &i32};       // scope 0 at $DIR/const-promotion-extern-static.rs:+0:33: +0:34\n                                          // mir::Constant\n                                          // + span: $DIR/const-promotion-extern-static.rs:9:33: 9:34\n                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc1)) }\n-        _2 = &(*_3);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n-        _1 = [move _2];                  // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n-        _0 = &_1;                        // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n-        return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n+        _2 = &(*_3);                     // scope 0 at $DIR/const-promotion-extern-static.rs:+0:32: +0:34\n+        _1 = [move _2];                  // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:35\n+        _0 = &_1;                        // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n+        return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n     }\n }\n "}, {"sha": "f58ba56b943f4f9ba309123ac6516f1008499805", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR.PromoteTemps.diff", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,49 +2,49 @@\n + // MIR for `BAR` after PromoteTemps\n   \n   static mut BAR: *const &i32 = {\n-      let mut _0: *const &i32;             // return place in scope 0 at $DIR/const-promotion-extern-static.rs:9:17: 9:28\n-      let mut _1: &[&i32];                 // in scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n-      let mut _2: &[&i32; 1];              // in scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n-      let _3: [&i32; 1];                   // in scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n-      let mut _4: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n-      let _5: &i32;                        // in scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n-+     let mut _6: &[&i32; 1];              // in scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n+      let mut _0: *const &i32;             // return place in scope 0 at $DIR/const-promotion-extern-static.rs:+0:17: +0:28\n+      let mut _1: &[&i32];                 // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n+      let mut _2: &[&i32; 1];              // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n+      let _3: [&i32; 1];                   // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:35\n+      let mut _4: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:32: +0:34\n+      let _5: &i32;                        // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:33: +0:34\n++     let mut _6: &[&i32; 1];              // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n-          StorageLive(_2);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n--         StorageLive(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n--         StorageLive(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n--         StorageLive(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n--         _5 = const {alloc1: &i32};       // scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n-+         _6 = const BAR::promoted[0];     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n+          StorageLive(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n+          StorageLive(_2);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n+-         StorageLive(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:35\n+-         StorageLive(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:32: +0:34\n+-         StorageLive(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:33: +0:34\n+-         _5 = const {alloc1: &i32};       // scope 0 at $DIR/const-promotion-extern-static.rs:+0:33: +0:34\n++         _6 = const BAR::promoted[0];     // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n                                            // mir::Constant\n -                                          // + span: $DIR/const-promotion-extern-static.rs:9:33: 9:34\n -                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc1)) }\n--         _4 = &(*_5);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n--         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n--         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n+-         _4 = &(*_5);                     // scope 0 at $DIR/const-promotion-extern-static.rs:+0:32: +0:34\n+-         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:35\n+-         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n +                                          // + span: $DIR/const-promotion-extern-static.rs:9:31: 9:44\n +                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(BAR, [], Some(promoted[0])) }\n-+         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n-          _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n--         StorageDead(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:34: 9:35\n-          StorageDead(_2);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:34: 9:35\n-          _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n++         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n+          _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n+-         StorageDead(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:34: +0:35\n+          StorageDead(_2);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:34: +0:35\n+          _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n                                            // mir::Constant\n                                            // + span: $DIR/const-promotion-extern-static.rs:9:36: 9:42\n                                            // + literal: Const { ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n--         StorageDead(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:43: 9:44\n--         StorageDead(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:43: 9:44\n-          StorageDead(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:43: 9:44\n-          return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:9:1: 9:28\n+-         StorageDead(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:43: +0:44\n+-         StorageDead(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:43: +0:44\n+          StorageDead(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:43: +0:44\n+          return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:28\n       }\n   \n       bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:9:1: 9:28\n+          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:28\n       }\n - }\n - "}, {"sha": "deb467977d7bfe654ae50ff67d452292a91ed4a8", "filename": "src/test/mir-opt/const_promotion_extern_static.BOP.mir_map.0.mir", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BOP.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BOP.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BOP.mir_map.0.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,17 +1,17 @@\n // MIR for `BOP` 0 mir_map\n \n static BOP: &i32 = {\n-    let mut _0: &i32;                    // return place in scope 0 at $DIR/const-promotion-extern-static.rs:16:13: 16:17\n-    let _1: &i32;                        // in scope 0 at $DIR/const-promotion-extern-static.rs:16:20: 16:23\n-    let _2: i32;                         // in scope 0 at $DIR/const-promotion-extern-static.rs:16:21: 16:23\n+    let mut _0: &i32;                    // return place in scope 0 at $DIR/const-promotion-extern-static.rs:+0:13: +0:17\n+    let _1: &i32;                        // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:20: +0:23\n+    let _2: i32;                         // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:21: +0:23\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:16:20: 16:23\n-        StorageLive(_2);                 // scope 0 at $DIR/const-promotion-extern-static.rs:16:21: 16:23\n-        _2 = const 13_i32;               // scope 0 at $DIR/const-promotion-extern-static.rs:16:21: 16:23\n-        _1 = &_2;                        // scope 0 at $DIR/const-promotion-extern-static.rs:16:20: 16:23\n-        _0 = &(*_1);                     // scope 0 at $DIR/const-promotion-extern-static.rs:16:20: 16:23\n-        StorageDead(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:16:22: 16:23\n-        return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:16:1: 16:17\n+        StorageLive(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:20: +0:23\n+        StorageLive(_2);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:21: +0:23\n+        _2 = const 13_i32;               // scope 0 at $DIR/const-promotion-extern-static.rs:+0:21: +0:23\n+        _1 = &_2;                        // scope 0 at $DIR/const-promotion-extern-static.rs:+0:20: +0:23\n+        _0 = &(*_1);                     // scope 0 at $DIR/const-promotion-extern-static.rs:+0:20: +0:23\n+        StorageDead(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:22: +0:23\n+        return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:17\n     }\n }"}, {"sha": "71827eab1c28b953435c365a119e0a10281b8951", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO-promoted[0].SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,20 +1,20 @@\n // MIR for `FOO::promoted[0]` after SimplifyCfg-elaborate-drops\n \n promoted[0] in FOO: &[&i32; 1] = {\n-    let mut _0: &[&i32; 1];              // return place in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n-    let mut _1: [&i32; 1];               // in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n-    let mut _2: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:13:32: 13:45\n-    let mut _3: *const i32;              // in scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n+    let mut _0: &[&i32; 1];              // return place in scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n+    let mut _1: [&i32; 1];               // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:46\n+    let mut _2: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:32: +0:45\n+    let mut _3: *const i32;              // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:42: +0:43\n \n     bb0: {\n-        _3 = const {alloc3: *const i32}; // scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n+        _3 = const {alloc3: *const i32}; // scope 0 at $DIR/const-promotion-extern-static.rs:+0:42: +0:43\n                                          // mir::Constant\n                                          // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43\n                                          // + literal: Const { ty: *const i32, val: Value(Scalar(alloc3)) }\n-        _2 = &(*_3);                     // scope 0 at $DIR/const-promotion-extern-static.rs:13:41: 13:43\n-        _1 = [move _2];                  // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n-        _0 = &_1;                        // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n-        return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n+        _2 = &(*_3);                     // scope 0 at $DIR/const-promotion-extern-static.rs:+0:41: +0:43\n+        _1 = [move _2];                  // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:46\n+        _0 = &_1;                        // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n+        return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n     }\n }\n "}, {"sha": "5300f555fdfb862ca6e5dec1d83b55c53f88a6cb", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,51 +2,51 @@\n + // MIR for `FOO` after PromoteTemps\n   \n   static mut FOO: *const &i32 = {\n-      let mut _0: *const &i32;             // return place in scope 0 at $DIR/const-promotion-extern-static.rs:13:17: 13:28\n-      let mut _1: &[&i32];                 // in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n-      let mut _2: &[&i32; 1];              // in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n-      let _3: [&i32; 1];                   // in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n-      let mut _4: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:13:32: 13:45\n-      let _5: *const i32;                  // in scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n-+     let mut _6: &[&i32; 1];              // in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n+      let mut _0: *const &i32;             // return place in scope 0 at $DIR/const-promotion-extern-static.rs:+0:17: +0:28\n+      let mut _1: &[&i32];                 // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n+      let mut _2: &[&i32; 1];              // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n+      let _3: [&i32; 1];                   // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:46\n+      let mut _4: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:32: +0:45\n+      let _5: *const i32;                  // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:42: +0:43\n++     let mut _6: &[&i32; 1];              // in scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n       scope 1 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n-          StorageLive(_2);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n--         StorageLive(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n--         StorageLive(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:32: 13:45\n--         StorageLive(_5);                 // scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n--         _5 = const {alloc3: *const i32}; // scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n-+         _6 = const FOO::promoted[0];     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n+          StorageLive(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n+          StorageLive(_2);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n+-         StorageLive(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:46\n+-         StorageLive(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:32: +0:45\n+-         StorageLive(_5);                 // scope 1 at $DIR/const-promotion-extern-static.rs:+0:42: +0:43\n+-         _5 = const {alloc3: *const i32}; // scope 1 at $DIR/const-promotion-extern-static.rs:+0:42: +0:43\n++         _6 = const FOO::promoted[0];     // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n                                            // mir::Constant\n -                                          // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43\n -                                          // + literal: Const { ty: *const i32, val: Value(Scalar(alloc3)) }\n--         _4 = &(*_5);                     // scope 1 at $DIR/const-promotion-extern-static.rs:13:41: 13:43\n--         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n--         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n+-         _4 = &(*_5);                     // scope 1 at $DIR/const-promotion-extern-static.rs:+0:41: +0:43\n+-         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:46\n+-         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n +                                          // + span: $DIR/const-promotion-extern-static.rs:13:31: 13:55\n +                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(FOO, [], Some(promoted[0])) }\n-+         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n-          _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n--         StorageDead(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:45: 13:46\n-          StorageDead(_2);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:45: 13:46\n-          _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n++         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n+          _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n+-         StorageDead(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:45: +0:46\n+          StorageDead(_2);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:45: +0:46\n+          _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n                                            // mir::Constant\n                                            // + span: $DIR/const-promotion-extern-static.rs:13:47: 13:53\n                                            // + literal: Const { ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n--         StorageDead(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:54: 13:55\n--         StorageDead(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:54: 13:55\n-          StorageDead(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:54: 13:55\n-          return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:1: 13:28\n+-         StorageDead(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:54: +0:55\n+-         StorageDead(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:54: +0:55\n+          StorageDead(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:54: +0:55\n+          return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:28\n       }\n   \n       bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:1: 13:28\n+          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:28\n       }\n   }\n - "}, {"sha": "836443bf4d2933995b8f9a67754208709519a705", "filename": "src/test/mir-opt/const_prop/aggregate.main.ConstProp.diff", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,31 +2,31 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/aggregate.rs:4:11: 4:11\n-      let _1: i32;                         // in scope 0 at $DIR/aggregate.rs:5:9: 5:10\n-      let mut _2: i32;                     // in scope 0 at $DIR/aggregate.rs:5:13: 5:24\n-      let mut _3: (i32, i32, i32);         // in scope 0 at $DIR/aggregate.rs:5:13: 5:22\n+      let mut _0: ();                      // return place in scope 0 at $DIR/aggregate.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n+      let mut _2: i32;                     // in scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n+      let mut _3: (i32, i32, i32);         // in scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/aggregate.rs:5:9: 5:10\n+          debug x => _1;                   // in scope 1 at $DIR/aggregate.rs:+1:9: +1:10\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/aggregate.rs:5:9: 5:10\n-          StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:5:13: 5:24\n-          StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:5:13: 5:22\n-          Deinit(_3);                      // scope 0 at $DIR/aggregate.rs:5:13: 5:22\n-          (_3.0: i32) = const 0_i32;       // scope 0 at $DIR/aggregate.rs:5:13: 5:22\n-          (_3.1: i32) = const 1_i32;       // scope 0 at $DIR/aggregate.rs:5:13: 5:22\n-          (_3.2: i32) = const 2_i32;       // scope 0 at $DIR/aggregate.rs:5:13: 5:22\n--         _2 = (_3.1: i32);                // scope 0 at $DIR/aggregate.rs:5:13: 5:24\n--         _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/aggregate.rs:5:13: 5:28\n-+         _2 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:5:13: 5:24\n-+         _1 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:5:13: 5:28\n-          StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:5:27: 5:28\n-          StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:5:28: 5:29\n-          nop;                             // scope 0 at $DIR/aggregate.rs:4:11: 6:2\n-          StorageDead(_1);                 // scope 0 at $DIR/aggregate.rs:6:1: 6:2\n-          return;                          // scope 0 at $DIR/aggregate.rs:6:2: 6:2\n+          StorageLive(_1);                 // scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n+          StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+          Deinit(_3);                      // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+          (_3.0: i32) = const 0_i32;       // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+          (_3.1: i32) = const 1_i32;       // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+          (_3.2: i32) = const 2_i32;       // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+-         _2 = (_3.1: i32);                // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n+-         _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/aggregate.rs:+1:13: +1:28\n++         _2 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n++         _1 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+1:13: +1:28\n+          StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:+1:27: +1:28\n+          StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:+1:28: +1:29\n+          nop;                             // scope 0 at $DIR/aggregate.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/aggregate.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/aggregate.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "bb9abdd10200dddc3e2796c021603162c1ce8ddf", "filename": "src/test/mir-opt/const_prop/array_index.main.ConstProp.32bit.diff", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.32bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,37 +2,37 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/array_index.rs:4:11: 4:11\n-      let _1: u32;                         // in scope 0 at $DIR/array_index.rs:5:9: 5:10\n-      let mut _2: [u32; 4];                // in scope 0 at $DIR/array_index.rs:5:18: 5:30\n-      let _3: usize;                       // in scope 0 at $DIR/array_index.rs:5:31: 5:32\n-      let mut _4: usize;                   // in scope 0 at $DIR/array_index.rs:5:18: 5:33\n-      let mut _5: bool;                    // in scope 0 at $DIR/array_index.rs:5:18: 5:33\n+      let mut _0: ();                      // return place in scope 0 at $DIR/array_index.rs:+0:11: +0:11\n+      let _1: u32;                         // in scope 0 at $DIR/array_index.rs:+1:9: +1:10\n+      let mut _2: [u32; 4];                // in scope 0 at $DIR/array_index.rs:+1:18: +1:30\n+      let _3: usize;                       // in scope 0 at $DIR/array_index.rs:+1:31: +1:32\n+      let mut _4: usize;                   // in scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+      let mut _5: bool;                    // in scope 0 at $DIR/array_index.rs:+1:18: +1:33\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/array_index.rs:5:9: 5:10\n+          debug x => _1;                   // in scope 1 at $DIR/array_index.rs:+1:9: +1:10\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/array_index.rs:5:9: 5:10\n-          StorageLive(_2);                 // scope 0 at $DIR/array_index.rs:5:18: 5:30\n-          _2 = [const 0_u32, const 1_u32, const 2_u32, const 3_u32]; // scope 0 at $DIR/array_index.rs:5:18: 5:30\n-          StorageLive(_3);                 // scope 0 at $DIR/array_index.rs:5:31: 5:32\n-          _3 = const 2_usize;              // scope 0 at $DIR/array_index.rs:5:31: 5:32\n-          _4 = const 4_usize;              // scope 0 at $DIR/array_index.rs:5:18: 5:33\n--         _5 = Lt(_3, _4);                 // scope 0 at $DIR/array_index.rs:5:18: 5:33\n--         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:5:18: 5:33\n-+         _5 = const true;                 // scope 0 at $DIR/array_index.rs:5:18: 5:33\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 4_usize, const 2_usize) -> bb1; // scope 0 at $DIR/array_index.rs:5:18: 5:33\n+          StorageLive(_1);                 // scope 0 at $DIR/array_index.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/array_index.rs:+1:18: +1:30\n+          _2 = [const 0_u32, const 1_u32, const 2_u32, const 3_u32]; // scope 0 at $DIR/array_index.rs:+1:18: +1:30\n+          StorageLive(_3);                 // scope 0 at $DIR/array_index.rs:+1:31: +1:32\n+          _3 = const 2_usize;              // scope 0 at $DIR/array_index.rs:+1:31: +1:32\n+          _4 = const 4_usize;              // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+-         _5 = Lt(_3, _4);                 // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+-         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n++         _5 = const true;                 // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 4_usize, const 2_usize) -> bb1; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n       }\n   \n       bb1: {\n--         _1 = _2[_3];                     // scope 0 at $DIR/array_index.rs:5:18: 5:33\n-+         _1 = const 2_u32;                // scope 0 at $DIR/array_index.rs:5:18: 5:33\n-          StorageDead(_3);                 // scope 0 at $DIR/array_index.rs:5:33: 5:34\n-          StorageDead(_2);                 // scope 0 at $DIR/array_index.rs:5:33: 5:34\n-          nop;                             // scope 0 at $DIR/array_index.rs:4:11: 6:2\n-          StorageDead(_1);                 // scope 0 at $DIR/array_index.rs:6:1: 6:2\n-          return;                          // scope 0 at $DIR/array_index.rs:6:2: 6:2\n+-         _1 = _2[_3];                     // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n++         _1 = const 2_u32;                // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+          StorageDead(_3);                 // scope 0 at $DIR/array_index.rs:+1:33: +1:34\n+          StorageDead(_2);                 // scope 0 at $DIR/array_index.rs:+1:33: +1:34\n+          nop;                             // scope 0 at $DIR/array_index.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/array_index.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/array_index.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "bb9abdd10200dddc3e2796c021603162c1ce8ddf", "filename": "src/test/mir-opt/const_prop/array_index.main.ConstProp.64bit.diff", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.64bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,37 +2,37 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/array_index.rs:4:11: 4:11\n-      let _1: u32;                         // in scope 0 at $DIR/array_index.rs:5:9: 5:10\n-      let mut _2: [u32; 4];                // in scope 0 at $DIR/array_index.rs:5:18: 5:30\n-      let _3: usize;                       // in scope 0 at $DIR/array_index.rs:5:31: 5:32\n-      let mut _4: usize;                   // in scope 0 at $DIR/array_index.rs:5:18: 5:33\n-      let mut _5: bool;                    // in scope 0 at $DIR/array_index.rs:5:18: 5:33\n+      let mut _0: ();                      // return place in scope 0 at $DIR/array_index.rs:+0:11: +0:11\n+      let _1: u32;                         // in scope 0 at $DIR/array_index.rs:+1:9: +1:10\n+      let mut _2: [u32; 4];                // in scope 0 at $DIR/array_index.rs:+1:18: +1:30\n+      let _3: usize;                       // in scope 0 at $DIR/array_index.rs:+1:31: +1:32\n+      let mut _4: usize;                   // in scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+      let mut _5: bool;                    // in scope 0 at $DIR/array_index.rs:+1:18: +1:33\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/array_index.rs:5:9: 5:10\n+          debug x => _1;                   // in scope 1 at $DIR/array_index.rs:+1:9: +1:10\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/array_index.rs:5:9: 5:10\n-          StorageLive(_2);                 // scope 0 at $DIR/array_index.rs:5:18: 5:30\n-          _2 = [const 0_u32, const 1_u32, const 2_u32, const 3_u32]; // scope 0 at $DIR/array_index.rs:5:18: 5:30\n-          StorageLive(_3);                 // scope 0 at $DIR/array_index.rs:5:31: 5:32\n-          _3 = const 2_usize;              // scope 0 at $DIR/array_index.rs:5:31: 5:32\n-          _4 = const 4_usize;              // scope 0 at $DIR/array_index.rs:5:18: 5:33\n--         _5 = Lt(_3, _4);                 // scope 0 at $DIR/array_index.rs:5:18: 5:33\n--         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:5:18: 5:33\n-+         _5 = const true;                 // scope 0 at $DIR/array_index.rs:5:18: 5:33\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 4_usize, const 2_usize) -> bb1; // scope 0 at $DIR/array_index.rs:5:18: 5:33\n+          StorageLive(_1);                 // scope 0 at $DIR/array_index.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/array_index.rs:+1:18: +1:30\n+          _2 = [const 0_u32, const 1_u32, const 2_u32, const 3_u32]; // scope 0 at $DIR/array_index.rs:+1:18: +1:30\n+          StorageLive(_3);                 // scope 0 at $DIR/array_index.rs:+1:31: +1:32\n+          _3 = const 2_usize;              // scope 0 at $DIR/array_index.rs:+1:31: +1:32\n+          _4 = const 4_usize;              // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+-         _5 = Lt(_3, _4);                 // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+-         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n++         _5 = const true;                 // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 4_usize, const 2_usize) -> bb1; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n       }\n   \n       bb1: {\n--         _1 = _2[_3];                     // scope 0 at $DIR/array_index.rs:5:18: 5:33\n-+         _1 = const 2_u32;                // scope 0 at $DIR/array_index.rs:5:18: 5:33\n-          StorageDead(_3);                 // scope 0 at $DIR/array_index.rs:5:33: 5:34\n-          StorageDead(_2);                 // scope 0 at $DIR/array_index.rs:5:33: 5:34\n-          nop;                             // scope 0 at $DIR/array_index.rs:4:11: 6:2\n-          StorageDead(_1);                 // scope 0 at $DIR/array_index.rs:6:1: 6:2\n-          return;                          // scope 0 at $DIR/array_index.rs:6:2: 6:2\n+-         _1 = _2[_3];                     // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n++         _1 = const 2_u32;                // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+          StorageDead(_3);                 // scope 0 at $DIR/array_index.rs:+1:33: +1:34\n+          StorageDead(_2);                 // scope 0 at $DIR/array_index.rs:+1:33: +1:34\n+          nop;                             // scope 0 at $DIR/array_index.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/array_index.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/array_index.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "45134a3fdff3cfe6785fb76189c2eaa91eb8380c", "filename": "src/test/mir-opt/const_prop/bad_op_div_by_zero.main.ConstProp.diff", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.main.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,53 +2,53 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_div_by_zero.rs:3:11: 3:11\n-      let _1: i32;                         // in scope 0 at $DIR/bad_op_div_by_zero.rs:4:9: 4:10\n-      let mut _3: i32;                     // in scope 0 at $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n-      let mut _4: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-      let mut _5: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-      let mut _6: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-      let mut _7: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n+      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_div_by_zero.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/bad_op_div_by_zero.rs:+1:9: +1:10\n+      let mut _3: i32;                     // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n+      let mut _4: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+      let mut _5: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+      let mut _6: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+      let mut _7: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n       scope 1 {\n-          debug y => _1;                   // in scope 1 at $DIR/bad_op_div_by_zero.rs:4:9: 4:10\n-          let _2: i32;                     // in scope 1 at $DIR/bad_op_div_by_zero.rs:5:9: 5:11\n+          debug y => _1;                   // in scope 1 at $DIR/bad_op_div_by_zero.rs:+1:9: +1:10\n+          let _2: i32;                     // in scope 1 at $DIR/bad_op_div_by_zero.rs:+2:9: +2:11\n           scope 2 {\n-              debug _z => _2;              // in scope 2 at $DIR/bad_op_div_by_zero.rs:5:9: 5:11\n+              debug _z => _2;              // in scope 2 at $DIR/bad_op_div_by_zero.rs:+2:9: +2:11\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/bad_op_div_by_zero.rs:4:9: 4:10\n-          _1 = const 0_i32;                // scope 0 at $DIR/bad_op_div_by_zero.rs:4:13: 4:14\n-          StorageLive(_2);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:5:9: 5:11\n-          StorageLive(_3);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n--         _3 = _1;                         // scope 1 at $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n--         _4 = Eq(_3, const 0_i32);        // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n--         assert(!move _4, \"attempt to divide `{}` by zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-+         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n-+         _4 = const true;                 // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-+         assert(!const true, \"attempt to divide `{}` by zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n+          StorageLive(_1);                 // scope 0 at $DIR/bad_op_div_by_zero.rs:+1:9: +1:10\n+          _1 = const 0_i32;                // scope 0 at $DIR/bad_op_div_by_zero.rs:+1:13: +1:14\n+          StorageLive(_2);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:9: +2:11\n+          StorageLive(_3);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n+-         _3 = _1;                         // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n+-         _4 = Eq(_3, const 0_i32);        // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+-         assert(!move _4, \"attempt to divide `{}` by zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n++         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n++         _4 = const true;                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n++         assert(!const true, \"attempt to divide `{}` by zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n       }\n   \n       bb1: {\n--         _5 = Eq(_3, const -1_i32);       // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n--         _6 = Eq(const 1_i32, const i32::MIN); // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n--         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n--         assert(!move _7, \"attempt to compute `{} / {}`, which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-+         _5 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-+         _6 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-+         _7 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-+         assert(!const false, \"attempt to compute `{} / {}`, which would overflow\", const 1_i32, const 0_i32) -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n+-         _5 = Eq(_3, const -1_i32);       // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+-         _6 = Eq(const 1_i32, const i32::MIN); // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+-         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+-         assert(!move _7, \"attempt to compute `{} / {}`, which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n++         _5 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n++         _6 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n++         _7 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n++         assert(!const false, \"attempt to compute `{} / {}`, which would overflow\", const 1_i32, const 0_i32) -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n       }\n   \n       bb2: {\n--         _2 = Div(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-+         _2 = Div(const 1_i32, const 0_i32); // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-          StorageDead(_3);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n-          nop;                             // scope 0 at $DIR/bad_op_div_by_zero.rs:3:11: 6:2\n-          StorageDead(_2);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:6:1: 6:2\n-          StorageDead(_1);                 // scope 0 at $DIR/bad_op_div_by_zero.rs:6:1: 6:2\n-          return;                          // scope 0 at $DIR/bad_op_div_by_zero.rs:6:2: 6:2\n+-         _2 = Div(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n++         _2 = Div(const 1_i32, const 0_i32); // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+          StorageDead(_3);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n+          nop;                             // scope 0 at $DIR/bad_op_div_by_zero.rs:+0:11: +3:2\n+          StorageDead(_2);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+3:1: +3:2\n+          StorageDead(_1);                 // scope 0 at $DIR/bad_op_div_by_zero.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/bad_op_div_by_zero.rs:+3:2: +3:2\n       }\n   }\n   "}, {"sha": "22151304259bc674321c53a529201648cb5abc3b", "filename": "src/test/mir-opt/const_prop/bad_op_mod_by_zero.main.ConstProp.diff", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,53 +2,53 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_mod_by_zero.rs:3:11: 3:11\n-      let _1: i32;                         // in scope 0 at $DIR/bad_op_mod_by_zero.rs:4:9: 4:10\n-      let mut _3: i32;                     // in scope 0 at $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n-      let mut _4: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-      let mut _5: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-      let mut _6: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-      let mut _7: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n+      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_mod_by_zero.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:9: +1:10\n+      let mut _3: i32;                     // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n+      let mut _4: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+      let mut _5: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+      let mut _6: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+      let mut _7: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n       scope 1 {\n-          debug y => _1;                   // in scope 1 at $DIR/bad_op_mod_by_zero.rs:4:9: 4:10\n-          let _2: i32;                     // in scope 1 at $DIR/bad_op_mod_by_zero.rs:5:9: 5:11\n+          debug y => _1;                   // in scope 1 at $DIR/bad_op_mod_by_zero.rs:+1:9: +1:10\n+          let _2: i32;                     // in scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:9: +2:11\n           scope 2 {\n-              debug _z => _2;              // in scope 2 at $DIR/bad_op_mod_by_zero.rs:5:9: 5:11\n+              debug _z => _2;              // in scope 2 at $DIR/bad_op_mod_by_zero.rs:+2:9: +2:11\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:4:9: 4:10\n-          _1 = const 0_i32;                // scope 0 at $DIR/bad_op_mod_by_zero.rs:4:13: 4:14\n-          StorageLive(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:9: 5:11\n-          StorageLive(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n--         _3 = _1;                         // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n--         _4 = Eq(_3, const 0_i32);        // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n--         assert(!move _4, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-+         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n-+         _4 = const true;                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-+         assert(!const true, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n+          StorageLive(_1);                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:9: +1:10\n+          _1 = const 0_i32;                // scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:13: +1:14\n+          StorageLive(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:9: +2:11\n+          StorageLive(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n+-         _3 = _1;                         // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n+-         _4 = Eq(_3, const 0_i32);        // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         assert(!move _4, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n++         _4 = const true;                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         assert(!const true, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n       }\n   \n       bb1: {\n--         _5 = Eq(_3, const -1_i32);       // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n--         _6 = Eq(const 1_i32, const i32::MIN); // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n--         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n--         assert(!move _7, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-+         _5 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-+         _6 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-+         _7 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-+         assert(!const false, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, const 0_i32) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n+-         _5 = Eq(_3, const -1_i32);       // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         _6 = Eq(const 1_i32, const i32::MIN); // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         assert(!move _7, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         _5 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         _6 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         _7 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         assert(!const false, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, const 0_i32) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n       }\n   \n       bb2: {\n--         _2 = Rem(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-+         _2 = Rem(const 1_i32, const 0_i32); // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-          StorageDead(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n-          nop;                             // scope 0 at $DIR/bad_op_mod_by_zero.rs:3:11: 6:2\n-          StorageDead(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:6:1: 6:2\n-          StorageDead(_1);                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:6:1: 6:2\n-          return;                          // scope 0 at $DIR/bad_op_mod_by_zero.rs:6:2: 6:2\n+-         _2 = Rem(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         _2 = Rem(const 1_i32, const 0_i32); // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+          StorageDead(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n+          nop;                             // scope 0 at $DIR/bad_op_mod_by_zero.rs:+0:11: +3:2\n+          StorageDead(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+3:1: +3:2\n+          StorageDead(_1);                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/bad_op_mod_by_zero.rs:+3:2: +3:2\n       }\n   }\n   "}, {"sha": "55348883810f3344c04a6fc0b680d60d4f0ceed7", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,55 +2,55 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:4:11: 4:11\n-      let _1: *const [i32];                // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:9: 5:10\n-      let mut _2: *const [i32; 3];         // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-      let _3: &[i32; 3];                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-      let _4: [i32; 3];                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:26: 5:35\n-      let _6: usize;                       // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n-      let mut _7: usize;                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-      let mut _8: bool;                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-      let mut _9: &[i32; 3];               // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+0:11: +0:11\n+      let _1: *const [i32];                // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n+      let mut _2: *const [i32; 3];         // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+      let _3: &[i32; 3];                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+      let _4: [i32; 3];                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:26: +1:35\n+      let _6: usize;                       // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+      let mut _7: usize;                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+      let mut _8: bool;                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+      let mut _9: &[i32; 3];               // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:9: 5:10\n+          debug a => _1;                   // in scope 1 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n           scope 2 {\n-              let _5: i32;                 // in scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:13: 7:15\n+              let _5: i32;                 // in scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n               scope 3 {\n-                  debug _b => _5;          // in scope 3 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:13: 7:15\n+                  debug _b => _5;          // in scope 3 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:9: 5:10\n-          StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-          StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-          _9 = const main::promoted[0];    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+          StorageLive(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _9 = const main::promoted[0];    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n                                            // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-          _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-          _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-          StorageDead(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:34: 5:35\n-          StorageDead(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:35: 5:36\n-          StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:13: 7:15\n-          StorageLive(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n-          _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n-          _7 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n--         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n--         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-+         _8 = Lt(const 3_usize, _7);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-+         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n+          _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          StorageDead(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:34: +1:35\n+          StorageDead(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:35: +1:36\n+          StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+          StorageLive(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+          _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+          _7 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+-         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         _8 = Lt(const 3_usize, _7);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n       }\n   \n       bb1: {\n-          _5 = (*_1)[_6];                  // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-          StorageDead(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:25: 7:26\n-          nop;                             // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:6:5: 8:6\n-          StorageDead(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:8:5: 8:6\n-          StorageDead(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:9:1: 9:2\n-          return;                          // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:9:2: 9:2\n+          _5 = (*_1)[_6];                  // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+          StorageDead(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:25: +3:26\n+          nop;                             // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+2:5: +4:6\n+          StorageDead(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+4:5: +4:6\n+          StorageDead(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:2: +5:2\n       }\n   }\n   "}, {"sha": "55348883810f3344c04a6fc0b680d60d4f0ceed7", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,55 +2,55 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:4:11: 4:11\n-      let _1: *const [i32];                // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:9: 5:10\n-      let mut _2: *const [i32; 3];         // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-      let _3: &[i32; 3];                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-      let _4: [i32; 3];                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:26: 5:35\n-      let _6: usize;                       // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n-      let mut _7: usize;                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-      let mut _8: bool;                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-      let mut _9: &[i32; 3];               // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+0:11: +0:11\n+      let _1: *const [i32];                // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n+      let mut _2: *const [i32; 3];         // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+      let _3: &[i32; 3];                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+      let _4: [i32; 3];                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:26: +1:35\n+      let _6: usize;                       // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+      let mut _7: usize;                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+      let mut _8: bool;                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+      let mut _9: &[i32; 3];               // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:9: 5:10\n+          debug a => _1;                   // in scope 1 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n           scope 2 {\n-              let _5: i32;                 // in scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:13: 7:15\n+              let _5: i32;                 // in scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n               scope 3 {\n-                  debug _b => _5;          // in scope 3 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:13: 7:15\n+                  debug _b => _5;          // in scope 3 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:9: 5:10\n-          StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-          StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-          _9 = const main::promoted[0];    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n+          StorageLive(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _9 = const main::promoted[0];    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n                                            // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-          _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-          _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-          StorageDead(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:34: 5:35\n-          StorageDead(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:35: 5:36\n-          StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:13: 7:15\n-          StorageLive(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n-          _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n-          _7 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n--         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n--         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-+         _8 = Lt(const 3_usize, _7);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-+         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n+          _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          StorageDead(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:34: +1:35\n+          StorageDead(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:35: +1:36\n+          StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+          StorageLive(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+          _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+          _7 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+-         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         _8 = Lt(const 3_usize, _7);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n       }\n   \n       bb1: {\n-          _5 = (*_1)[_6];                  // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-          StorageDead(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:25: 7:26\n-          nop;                             // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:6:5: 8:6\n-          StorageDead(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:8:5: 8:6\n-          StorageDead(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:9:1: 9:2\n-          return;                          // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:9:2: 9:2\n+          _5 = (*_1)[_6];                  // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+          StorageDead(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:25: +3:26\n+          nop;                             // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+2:5: +4:6\n+          StorageDead(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+4:5: +4:6\n+          StorageDead(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:2: +5:2\n       }\n   }\n   "}, {"sha": "0de800917534a4492ffc9c886036880d1dd99659", "filename": "src/test/mir-opt/const_prop/boolean_identities.test.ConstProp.diff", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboolean_identities.test.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboolean_identities.test.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboolean_identities.test.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,32 +2,32 @@\n + // MIR for `test` after ConstProp\n   \n   fn test(_1: bool, _2: bool) -> bool {\n-      debug x => _1;                       // in scope 0 at $DIR/boolean_identities.rs:4:13: 4:14\n-      debug y => _2;                       // in scope 0 at $DIR/boolean_identities.rs:4:22: 4:23\n-      let mut _0: bool;                    // return place in scope 0 at $DIR/boolean_identities.rs:4:34: 4:38\n-      let mut _3: bool;                    // in scope 0 at $DIR/boolean_identities.rs:5:5: 5:15\n-      let mut _4: bool;                    // in scope 0 at $DIR/boolean_identities.rs:5:6: 5:7\n-      let mut _5: bool;                    // in scope 0 at $DIR/boolean_identities.rs:5:18: 5:29\n-      let mut _6: bool;                    // in scope 0 at $DIR/boolean_identities.rs:5:19: 5:20\n+      debug x => _1;                       // in scope 0 at $DIR/boolean_identities.rs:+0:13: +0:14\n+      debug y => _2;                       // in scope 0 at $DIR/boolean_identities.rs:+0:22: +0:23\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/boolean_identities.rs:+0:34: +0:38\n+      let mut _3: bool;                    // in scope 0 at $DIR/boolean_identities.rs:+1:5: +1:15\n+      let mut _4: bool;                    // in scope 0 at $DIR/boolean_identities.rs:+1:6: +1:7\n+      let mut _5: bool;                    // in scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n+      let mut _6: bool;                    // in scope 0 at $DIR/boolean_identities.rs:+1:19: +1:20\n   \n       bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/boolean_identities.rs:5:5: 5:15\n-          StorageLive(_4);                 // scope 0 at $DIR/boolean_identities.rs:5:6: 5:7\n-          _4 = _2;                         // scope 0 at $DIR/boolean_identities.rs:5:6: 5:7\n--         _3 = BitOr(move _4, const true); // scope 0 at $DIR/boolean_identities.rs:5:5: 5:15\n-+         _3 = const true;                 // scope 0 at $DIR/boolean_identities.rs:5:5: 5:15\n-          StorageDead(_4);                 // scope 0 at $DIR/boolean_identities.rs:5:14: 5:15\n-          StorageLive(_5);                 // scope 0 at $DIR/boolean_identities.rs:5:18: 5:29\n-          StorageLive(_6);                 // scope 0 at $DIR/boolean_identities.rs:5:19: 5:20\n-          _6 = _1;                         // scope 0 at $DIR/boolean_identities.rs:5:19: 5:20\n--         _5 = BitAnd(move _6, const false); // scope 0 at $DIR/boolean_identities.rs:5:18: 5:29\n-+         _5 = const false;                // scope 0 at $DIR/boolean_identities.rs:5:18: 5:29\n-          StorageDead(_6);                 // scope 0 at $DIR/boolean_identities.rs:5:28: 5:29\n--         _0 = BitAnd(move _3, move _5);   // scope 0 at $DIR/boolean_identities.rs:5:5: 5:29\n-+         _0 = const false;                // scope 0 at $DIR/boolean_identities.rs:5:5: 5:29\n-          StorageDead(_5);                 // scope 0 at $DIR/boolean_identities.rs:5:28: 5:29\n-          StorageDead(_3);                 // scope 0 at $DIR/boolean_identities.rs:5:28: 5:29\n-          return;                          // scope 0 at $DIR/boolean_identities.rs:6:2: 6:2\n+          StorageLive(_3);                 // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:15\n+          StorageLive(_4);                 // scope 0 at $DIR/boolean_identities.rs:+1:6: +1:7\n+          _4 = _2;                         // scope 0 at $DIR/boolean_identities.rs:+1:6: +1:7\n+-         _3 = BitOr(move _4, const true); // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:15\n++         _3 = const true;                 // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:15\n+          StorageDead(_4);                 // scope 0 at $DIR/boolean_identities.rs:+1:14: +1:15\n+          StorageLive(_5);                 // scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n+          StorageLive(_6);                 // scope 0 at $DIR/boolean_identities.rs:+1:19: +1:20\n+          _6 = _1;                         // scope 0 at $DIR/boolean_identities.rs:+1:19: +1:20\n+-         _5 = BitAnd(move _6, const false); // scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n++         _5 = const false;                // scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n+          StorageDead(_6);                 // scope 0 at $DIR/boolean_identities.rs:+1:28: +1:29\n+-         _0 = BitAnd(move _3, move _5);   // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:29\n++         _0 = const false;                // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:29\n+          StorageDead(_5);                 // scope 0 at $DIR/boolean_identities.rs:+1:28: +1:29\n+          StorageDead(_3);                 // scope 0 at $DIR/boolean_identities.rs:+1:28: +1:29\n+          return;                          // scope 0 at $DIR/boolean_identities.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "f2d4bee1bf94dabedba57ff9908e9d0feda87579", "filename": "src/test/mir-opt/const_prop/boxes.main.ConstProp.diff", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,66 +2,66 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/boxes.rs:11:11: 11:11\n-      let _1: i32;                         // in scope 0 at $DIR/boxes.rs:12:9: 12:10\n-      let mut _2: i32;                     // in scope 0 at $DIR/boxes.rs:12:13: 12:22\n-      let mut _3: std::boxed::Box<i32>;    // in scope 0 at $DIR/boxes.rs:12:14: 12:22\n-      let mut _4: usize;                   // in scope 0 at $DIR/boxes.rs:12:14: 12:22\n-      let mut _5: usize;                   // in scope 0 at $DIR/boxes.rs:12:14: 12:22\n-      let mut _6: *mut u8;                 // in scope 0 at $DIR/boxes.rs:12:14: 12:22\n-      let mut _7: std::boxed::Box<i32>;    // in scope 0 at $DIR/boxes.rs:12:14: 12:22\n-      let mut _8: *const i32;              // in scope 0 at $DIR/boxes.rs:12:14: 12:22\n-      let mut _9: *const i32;              // in scope 0 at $DIR/boxes.rs:12:14: 12:22\n-      let mut _10: *const i32;             // in scope 0 at $DIR/boxes.rs:12:14: 12:22\n-      let mut _11: *const i32;             // in scope 0 at $DIR/boxes.rs:12:14: 12:22\n+      let mut _0: ();                      // return place in scope 0 at $DIR/boxes.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/boxes.rs:+1:9: +1:10\n+      let mut _2: i32;                     // in scope 0 at $DIR/boxes.rs:+1:13: +1:22\n+      let mut _3: std::boxed::Box<i32>;    // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n+      let mut _4: usize;                   // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n+      let mut _5: usize;                   // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n+      let mut _6: *mut u8;                 // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n+      let mut _7: std::boxed::Box<i32>;    // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n+      let mut _8: *const i32;              // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n+      let mut _9: *const i32;              // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n+      let mut _10: *const i32;             // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n+      let mut _11: *const i32;             // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/boxes.rs:12:9: 12:10\n+          debug x => _1;                   // in scope 1 at $DIR/boxes.rs:+1:9: +1:10\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/boxes.rs:12:9: 12:10\n-          StorageLive(_2);                 // scope 0 at $DIR/boxes.rs:12:13: 12:22\n-          StorageLive(_3);                 // scope 0 at $DIR/boxes.rs:12:14: 12:22\n--         _4 = SizeOf(i32);                // scope 2 at $DIR/boxes.rs:12:14: 12:22\n--         _5 = AlignOf(i32);               // scope 2 at $DIR/boxes.rs:12:14: 12:22\n--         _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at $DIR/boxes.rs:12:14: 12:22\n-+         _4 = const 4_usize;              // scope 2 at $DIR/boxes.rs:12:14: 12:22\n-+         _5 = const 4_usize;              // scope 2 at $DIR/boxes.rs:12:14: 12:22\n-+         _6 = alloc::alloc::exchange_malloc(const 4_usize, const 4_usize) -> bb1; // scope 2 at $DIR/boxes.rs:12:14: 12:22\n+          StorageLive(_1);                 // scope 0 at $DIR/boxes.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/boxes.rs:+1:13: +1:22\n+          StorageLive(_3);                 // scope 0 at $DIR/boxes.rs:+1:14: +1:22\n+-         _4 = SizeOf(i32);                // scope 2 at $DIR/boxes.rs:+1:14: +1:22\n+-         _5 = AlignOf(i32);               // scope 2 at $DIR/boxes.rs:+1:14: +1:22\n+-         _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at $DIR/boxes.rs:+1:14: +1:22\n++         _4 = const 4_usize;              // scope 2 at $DIR/boxes.rs:+1:14: +1:22\n++         _5 = const 4_usize;              // scope 2 at $DIR/boxes.rs:+1:14: +1:22\n++         _6 = alloc::alloc::exchange_malloc(const 4_usize, const 4_usize) -> bb1; // scope 2 at $DIR/boxes.rs:+1:14: +1:22\n                                            // mir::Constant\n                                            // + span: $DIR/boxes.rs:12:14: 12:22\n                                            // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageLive(_7);                 // scope 0 at $DIR/boxes.rs:12:14: 12:22\n-          _7 = ShallowInitBox(move _6, i32); // scope 0 at $DIR/boxes.rs:12:14: 12:22\n-          StorageLive(_8);                 // scope 0 at $DIR/boxes.rs:12:19: 12:21\n-          _8 = (((_7.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at $DIR/boxes.rs:12:19: 12:21\n-          (*_8) = const 42_i32;            // scope 0 at $DIR/boxes.rs:12:19: 12:21\n-          StorageDead(_8);                 // scope 0 at $DIR/boxes.rs:12:14: 12:22\n-          _3 = move _7;                    // scope 0 at $DIR/boxes.rs:12:14: 12:22\n-          StorageDead(_7);                 // scope 0 at $DIR/boxes.rs:12:21: 12:22\n-          StorageLive(_9);                 // scope 0 at $DIR/boxes.rs:12:13: 12:22\n-          _9 = (((_3.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at $DIR/boxes.rs:12:13: 12:22\n-          _2 = (*_9);                      // scope 0 at $DIR/boxes.rs:12:13: 12:22\n-          StorageDead(_9);                 // scope 0 at $DIR/boxes.rs:12:13: 12:26\n-          _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/boxes.rs:12:13: 12:26\n-          StorageDead(_2);                 // scope 0 at $DIR/boxes.rs:12:25: 12:26\n-          drop(_3) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/boxes.rs:12:26: 12:27\n+          StorageLive(_7);                 // scope 0 at $DIR/boxes.rs:+1:14: +1:22\n+          _7 = ShallowInitBox(move _6, i32); // scope 0 at $DIR/boxes.rs:+1:14: +1:22\n+          StorageLive(_8);                 // scope 0 at $DIR/boxes.rs:+1:19: +1:21\n+          _8 = (((_7.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at $DIR/boxes.rs:+1:19: +1:21\n+          (*_8) = const 42_i32;            // scope 0 at $DIR/boxes.rs:+1:19: +1:21\n+          StorageDead(_8);                 // scope 0 at $DIR/boxes.rs:+1:14: +1:22\n+          _3 = move _7;                    // scope 0 at $DIR/boxes.rs:+1:14: +1:22\n+          StorageDead(_7);                 // scope 0 at $DIR/boxes.rs:+1:21: +1:22\n+          StorageLive(_9);                 // scope 0 at $DIR/boxes.rs:+1:13: +1:22\n+          _9 = (((_3.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at $DIR/boxes.rs:+1:13: +1:22\n+          _2 = (*_9);                      // scope 0 at $DIR/boxes.rs:+1:13: +1:22\n+          StorageDead(_9);                 // scope 0 at $DIR/boxes.rs:+1:13: +1:26\n+          _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/boxes.rs:+1:13: +1:26\n+          StorageDead(_2);                 // scope 0 at $DIR/boxes.rs:+1:25: +1:26\n+          drop(_3) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/boxes.rs:+1:26: +1:27\n       }\n   \n       bb2: {\n-          StorageDead(_3);                 // scope 0 at $DIR/boxes.rs:12:26: 12:27\n-          nop;                             // scope 0 at $DIR/boxes.rs:11:11: 13:2\n-          StorageDead(_1);                 // scope 0 at $DIR/boxes.rs:13:1: 13:2\n-          return;                          // scope 0 at $DIR/boxes.rs:13:2: 13:2\n+          StorageDead(_3);                 // scope 0 at $DIR/boxes.rs:+1:26: +1:27\n+          nop;                             // scope 0 at $DIR/boxes.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/boxes.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/boxes.rs:+2:2: +2:2\n       }\n   \n       bb3 (cleanup): {\n-          resume;                          // scope 0 at $DIR/boxes.rs:11:1: 13:2\n+          resume;                          // scope 0 at $DIR/boxes.rs:+0:1: +2:2\n       }\n   }\n   "}, {"sha": "5698a612fe2d2e78e139d485c0db56f63ca7c9ca", "filename": "src/test/mir-opt/const_prop/cast.main.ConstProp.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcast.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcast.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcast.main.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,27 +2,27 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/cast.rs:3:11: 3:11\n-      let _1: u32;                         // in scope 0 at $DIR/cast.rs:4:9: 4:10\n+      let mut _0: ();                      // return place in scope 0 at $DIR/cast.rs:+0:11: +0:11\n+      let _1: u32;                         // in scope 0 at $DIR/cast.rs:+1:9: +1:10\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/cast.rs:4:9: 4:10\n-          let _2: u8;                      // in scope 1 at $DIR/cast.rs:6:9: 6:10\n+          debug x => _1;                   // in scope 1 at $DIR/cast.rs:+1:9: +1:10\n+          let _2: u8;                      // in scope 1 at $DIR/cast.rs:+3:9: +3:10\n           scope 2 {\n-              debug y => _2;               // in scope 2 at $DIR/cast.rs:6:9: 6:10\n+              debug y => _2;               // in scope 2 at $DIR/cast.rs:+3:9: +3:10\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/cast.rs:4:9: 4:10\n--         _1 = const 42_u8 as u32 (Misc);  // scope 0 at $DIR/cast.rs:4:13: 4:24\n-+         _1 = const 42_u32;               // scope 0 at $DIR/cast.rs:4:13: 4:24\n-          StorageLive(_2);                 // scope 1 at $DIR/cast.rs:6:9: 6:10\n--         _2 = const 42_u32 as u8 (Misc);  // scope 1 at $DIR/cast.rs:6:13: 6:24\n-+         _2 = const 42_u8;                // scope 1 at $DIR/cast.rs:6:13: 6:24\n-          nop;                             // scope 0 at $DIR/cast.rs:3:11: 7:2\n-          StorageDead(_2);                 // scope 1 at $DIR/cast.rs:7:1: 7:2\n-          StorageDead(_1);                 // scope 0 at $DIR/cast.rs:7:1: 7:2\n-          return;                          // scope 0 at $DIR/cast.rs:7:2: 7:2\n+          StorageLive(_1);                 // scope 0 at $DIR/cast.rs:+1:9: +1:10\n+-         _1 = const 42_u8 as u32 (Misc);  // scope 0 at $DIR/cast.rs:+1:13: +1:24\n++         _1 = const 42_u32;               // scope 0 at $DIR/cast.rs:+1:13: +1:24\n+          StorageLive(_2);                 // scope 1 at $DIR/cast.rs:+3:9: +3:10\n+-         _2 = const 42_u32 as u8 (Misc);  // scope 1 at $DIR/cast.rs:+3:13: +3:24\n++         _2 = const 42_u8;                // scope 1 at $DIR/cast.rs:+3:13: +3:24\n+          nop;                             // scope 0 at $DIR/cast.rs:+0:11: +4:2\n+          StorageDead(_2);                 // scope 1 at $DIR/cast.rs:+4:1: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/cast.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/cast.rs:+4:2: +4:2\n       }\n   }\n   "}, {"sha": "5e33d054207b0036fbb9c2f33f508af276337da8", "filename": "src/test/mir-opt/const_prop/checked_add.main.ConstProp.diff", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,27 +2,27 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/checked_add.rs:4:11: 4:11\n-      let _1: u32;                         // in scope 0 at $DIR/checked_add.rs:5:9: 5:10\n-      let mut _2: (u32, bool);             // in scope 0 at $DIR/checked_add.rs:5:18: 5:23\n+      let mut _0: ();                      // return place in scope 0 at $DIR/checked_add.rs:+0:11: +0:11\n+      let _1: u32;                         // in scope 0 at $DIR/checked_add.rs:+1:9: +1:10\n+      let mut _2: (u32, bool);             // in scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/checked_add.rs:5:9: 5:10\n+          debug x => _1;                   // in scope 1 at $DIR/checked_add.rs:+1:9: +1:10\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/checked_add.rs:5:9: 5:10\n--         _2 = CheckedAdd(const 1_u32, const 1_u32); // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n--         assert(!move (_2.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 1_u32, const 1_u32) -> bb1; // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n-+         _2 = const (2_u32, false);       // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n-+         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 1_u32, const 1_u32) -> bb1; // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n+          StorageLive(_1);                 // scope 0 at $DIR/checked_add.rs:+1:9: +1:10\n+-         _2 = CheckedAdd(const 1_u32, const 1_u32); // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n+-         assert(!move (_2.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 1_u32, const 1_u32) -> bb1; // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n++         _2 = const (2_u32, false);       // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 1_u32, const 1_u32) -> bb1; // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n       }\n   \n       bb1: {\n--         _1 = move (_2.0: u32);           // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n-+         _1 = const 2_u32;                // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n-          nop;                             // scope 0 at $DIR/checked_add.rs:4:11: 6:2\n-          StorageDead(_1);                 // scope 0 at $DIR/checked_add.rs:6:1: 6:2\n-          return;                          // scope 0 at $DIR/checked_add.rs:6:2: 6:2\n+-         _1 = move (_2.0: u32);           // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n++         _1 = const 2_u32;                // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n+          nop;                             // scope 0 at $DIR/checked_add.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/checked_add.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/checked_add.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "c21b24591d88e8b388949e3942461b843b508897", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully.main.ConstProp.diff", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,43 +2,43 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/const_prop_fails_gracefully.rs:5:11: 5:11\n-      let _1: usize;                       // in scope 0 at $DIR/const_prop_fails_gracefully.rs:7:9: 7:10\n-      let mut _2: *const i32;              // in scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:30\n-      let _3: &i32;                        // in scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n-      let _4: ();                          // in scope 0 at $DIR/const_prop_fails_gracefully.rs:8:5: 8:12\n-      let mut _5: usize;                   // in scope 0 at $DIR/const_prop_fails_gracefully.rs:8:10: 8:11\n+      let mut _0: ();                      // return place in scope 0 at $DIR/const_prop_fails_gracefully.rs:+0:11: +0:11\n+      let _1: usize;                       // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:9: +2:10\n+      let mut _2: *const i32;              // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:30\n+      let _3: &i32;                        // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n+      let _4: ();                          // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+3:5: +3:12\n+      let mut _5: usize;                   // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+3:10: +3:11\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/const_prop_fails_gracefully.rs:7:9: 7:10\n+          debug x => _1;                   // in scope 1 at $DIR/const_prop_fails_gracefully.rs:+2:9: +2:10\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:9: 7:10\n-          StorageLive(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:30\n-          StorageLive(_3);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n-          _3 = const FOO;                  // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n+          StorageLive(_1);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:9: +2:10\n+          StorageLive(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:30\n+          StorageLive(_3);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n+          _3 = const FOO;                  // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n                                            // mir::Constant\n                                            // + span: $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n                                            // + literal: Const { ty: &i32, val: Unevaluated(FOO, [], None) }\n-          _2 = &raw const (*_3);           // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n-          _1 = move _2 as usize (PointerExposeAddress); // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:39\n-          StorageDead(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:38: 7:39\n-          StorageDead(_3);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:39: 7:40\n-          StorageLive(_4);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:8:5: 8:12\n-          StorageLive(_5);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:8:10: 8:11\n-          _5 = _1;                         // scope 1 at $DIR/const_prop_fails_gracefully.rs:8:10: 8:11\n-          _4 = read(move _5) -> bb1;       // scope 1 at $DIR/const_prop_fails_gracefully.rs:8:5: 8:12\n+          _2 = &raw const (*_3);           // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n+          _1 = move _2 as usize (PointerExposeAddress); // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:39\n+          StorageDead(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:38: +2:39\n+          StorageDead(_3);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:39: +2:40\n+          StorageLive(_4);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:5: +3:12\n+          StorageLive(_5);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:10: +3:11\n+          _5 = _1;                         // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:10: +3:11\n+          _4 = read(move _5) -> bb1;       // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:5: +3:12\n                                            // mir::Constant\n                                            // + span: $DIR/const_prop_fails_gracefully.rs:8:5: 8:9\n                                            // + literal: Const { ty: fn(usize) {read}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_5);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:8:11: 8:12\n-          StorageDead(_4);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:8:12: 8:13\n-          nop;                             // scope 0 at $DIR/const_prop_fails_gracefully.rs:5:11: 9:2\n-          StorageDead(_1);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:9:1: 9:2\n-          return;                          // scope 0 at $DIR/const_prop_fails_gracefully.rs:9:2: 9:2\n+          StorageDead(_5);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:11: +3:12\n+          StorageDead(_4);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:12: +3:13\n+          nop;                             // scope 0 at $DIR/const_prop_fails_gracefully.rs:+0:11: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/const_prop_fails_gracefully.rs:+4:2: +4:2\n       }\n   }\n   "}, {"sha": "5f4df0d883bca125fcf4f997a10b34b74f77bb08", "filename": "src/test/mir-opt/const_prop/control_flow_simplification.hello.ConstProp.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,16 +2,16 @@\n + // MIR for `hello` after ConstProp\n   \n   fn hello() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/control-flow-simplification.rs:11:14: 11:14\n-      let mut _1: bool;                    // in scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n+      let mut _0: ();                      // return place in scope 0 at $DIR/control-flow-simplification.rs:+0:14: +0:14\n+      let mut _1: bool;                    // in scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n       let mut _2: !;                       // in scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n--         _1 = const <bool as NeedsDrop>::NEEDS; // scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n--         switchInt(move _1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n-+         _1 = const false;                // scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n-+         switchInt(const false) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n+          StorageLive(_1);                 // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n+-         _1 = const <bool as NeedsDrop>::NEEDS; // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n+-         switchInt(move _1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n++         _1 = const false;                // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n++         switchInt(const false) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n       }\n   \n       bb1: {\n@@ -26,9 +26,9 @@\n       }\n   \n       bb2: {\n-          nop;                             // scope 0 at $DIR/control-flow-simplification.rs:14:6: 14:6\n-          StorageDead(_1);                 // scope 0 at $DIR/control-flow-simplification.rs:14:5: 14:6\n-          return;                          // scope 0 at $DIR/control-flow-simplification.rs:15:2: 15:2\n+          nop;                             // scope 0 at $DIR/control-flow-simplification.rs:+3:6: +3:6\n+          StorageDead(_1);                 // scope 0 at $DIR/control-flow-simplification.rs:+3:5: +3:6\n+          return;                          // scope 0 at $DIR/control-flow-simplification.rs:+4:2: +4:2\n       }\n   }\n   "}, {"sha": "70f9797751131f61cfac51ee1529e1a26ddb308f", "filename": "src/test/mir-opt/const_prop/control_flow_simplification.hello.PreCodegen.before.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.PreCodegen.before.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,9 +1,9 @@\n // MIR for `hello` before PreCodegen\n \n fn hello() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/control-flow-simplification.rs:11:14: 11:14\n+    let mut _0: ();                      // return place in scope 0 at $DIR/control-flow-simplification.rs:+0:14: +0:14\n \n     bb0: {\n-        return;                          // scope 0 at $DIR/control-flow-simplification.rs:15:2: 15:2\n+        return;                          // scope 0 at $DIR/control-flow-simplification.rs:+4:2: +4:2\n     }\n }"}, {"sha": "5b4ecaa80f1f10f5e89cb70402ba249b91b16e02", "filename": "src/test/mir-opt/const_prop/discriminant.main.ConstProp.32bit.diff", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,51 +2,51 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/discriminant.rs:10:11: 10:11\n-      let _1: i32;                         // in scope 0 at $DIR/discriminant.rs:11:9: 11:10\n-      let mut _2: i32;                     // in scope 0 at $DIR/discriminant.rs:11:13: 11:64\n-      let mut _3: std::option::Option<bool>; // in scope 0 at $DIR/discriminant.rs:11:34: 11:44\n-      let mut _4: isize;                   // in scope 0 at $DIR/discriminant.rs:11:21: 11:31\n+      let mut _0: ();                      // return place in scope 0 at $DIR/discriminant.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/discriminant.rs:+1:9: +1:10\n+      let mut _2: i32;                     // in scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n+      let mut _3: std::option::Option<bool>; // in scope 0 at $DIR/discriminant.rs:+1:34: +1:44\n+      let mut _4: isize;                   // in scope 0 at $DIR/discriminant.rs:+1:21: +1:31\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/discriminant.rs:11:9: 11:10\n+          debug x => _1;                   // in scope 1 at $DIR/discriminant.rs:+1:9: +1:10\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:11:9: 11:10\n-          StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n-          StorageLive(_3);                 // scope 2 at $DIR/discriminant.rs:11:34: 11:44\n-          Deinit(_3);                      // scope 2 at $DIR/discriminant.rs:11:34: 11:44\n-          ((_3 as Some).0: bool) = const true; // scope 2 at $DIR/discriminant.rs:11:34: 11:44\n-          discriminant(_3) = 1;            // scope 2 at $DIR/discriminant.rs:11:34: 11:44\n--         _4 = discriminant(_3);           // scope 2 at $DIR/discriminant.rs:11:21: 11:31\n--         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:11:21: 11:31\n-+         _4 = const 1_isize;              // scope 2 at $DIR/discriminant.rs:11:21: 11:31\n-+         switchInt(const 1_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:11:21: 11:31\n+          StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n+          StorageLive(_3);                 // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n+          Deinit(_3);                      // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n+          ((_3 as Some).0: bool) = const true; // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n+          discriminant(_3) = 1;            // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n+-         _4 = discriminant(_3);           // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n+-         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n++         _4 = const 1_isize;              // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n++         switchInt(const 1_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n       }\n   \n       bb1: {\n-          switchInt(((_3 as Some).0: bool)) -> [false: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:11:21: 11:31\n+          switchInt(((_3 as Some).0: bool)) -> [false: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n       }\n   \n       bb2: {\n-          _2 = const 42_i32;               // scope 2 at $DIR/discriminant.rs:11:47: 11:49\n-          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n+          _2 = const 42_i32;               // scope 2 at $DIR/discriminant.rs:+1:47: +1:49\n+          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n       }\n   \n       bb3: {\n-          _2 = const 10_i32;               // scope 0 at $DIR/discriminant.rs:11:59: 11:61\n-          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n+          _2 = const 10_i32;               // scope 0 at $DIR/discriminant.rs:+1:59: +1:61\n+          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n       }\n   \n       bb4: {\n-          _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/discriminant.rs:11:13: 11:68\n-          StorageDead(_2);                 // scope 0 at $DIR/discriminant.rs:11:67: 11:68\n-          StorageDead(_3);                 // scope 0 at $DIR/discriminant.rs:11:68: 11:69\n-          nop;                             // scope 0 at $DIR/discriminant.rs:10:11: 12:2\n-          StorageDead(_1);                 // scope 0 at $DIR/discriminant.rs:12:1: 12:2\n-          return;                          // scope 0 at $DIR/discriminant.rs:12:2: 12:2\n+          _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/discriminant.rs:+1:13: +1:68\n+          StorageDead(_2);                 // scope 0 at $DIR/discriminant.rs:+1:67: +1:68\n+          StorageDead(_3);                 // scope 0 at $DIR/discriminant.rs:+1:68: +1:69\n+          nop;                             // scope 0 at $DIR/discriminant.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/discriminant.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/discriminant.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "5b4ecaa80f1f10f5e89cb70402ba249b91b16e02", "filename": "src/test/mir-opt/const_prop/discriminant.main.ConstProp.64bit.diff", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,51 +2,51 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/discriminant.rs:10:11: 10:11\n-      let _1: i32;                         // in scope 0 at $DIR/discriminant.rs:11:9: 11:10\n-      let mut _2: i32;                     // in scope 0 at $DIR/discriminant.rs:11:13: 11:64\n-      let mut _3: std::option::Option<bool>; // in scope 0 at $DIR/discriminant.rs:11:34: 11:44\n-      let mut _4: isize;                   // in scope 0 at $DIR/discriminant.rs:11:21: 11:31\n+      let mut _0: ();                      // return place in scope 0 at $DIR/discriminant.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/discriminant.rs:+1:9: +1:10\n+      let mut _2: i32;                     // in scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n+      let mut _3: std::option::Option<bool>; // in scope 0 at $DIR/discriminant.rs:+1:34: +1:44\n+      let mut _4: isize;                   // in scope 0 at $DIR/discriminant.rs:+1:21: +1:31\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/discriminant.rs:11:9: 11:10\n+          debug x => _1;                   // in scope 1 at $DIR/discriminant.rs:+1:9: +1:10\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:11:9: 11:10\n-          StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n-          StorageLive(_3);                 // scope 2 at $DIR/discriminant.rs:11:34: 11:44\n-          Deinit(_3);                      // scope 2 at $DIR/discriminant.rs:11:34: 11:44\n-          ((_3 as Some).0: bool) = const true; // scope 2 at $DIR/discriminant.rs:11:34: 11:44\n-          discriminant(_3) = 1;            // scope 2 at $DIR/discriminant.rs:11:34: 11:44\n--         _4 = discriminant(_3);           // scope 2 at $DIR/discriminant.rs:11:21: 11:31\n--         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:11:21: 11:31\n-+         _4 = const 1_isize;              // scope 2 at $DIR/discriminant.rs:11:21: 11:31\n-+         switchInt(const 1_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:11:21: 11:31\n+          StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n+          StorageLive(_3);                 // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n+          Deinit(_3);                      // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n+          ((_3 as Some).0: bool) = const true; // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n+          discriminant(_3) = 1;            // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n+-         _4 = discriminant(_3);           // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n+-         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n++         _4 = const 1_isize;              // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n++         switchInt(const 1_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n       }\n   \n       bb1: {\n-          switchInt(((_3 as Some).0: bool)) -> [false: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:11:21: 11:31\n+          switchInt(((_3 as Some).0: bool)) -> [false: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n       }\n   \n       bb2: {\n-          _2 = const 42_i32;               // scope 2 at $DIR/discriminant.rs:11:47: 11:49\n-          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n+          _2 = const 42_i32;               // scope 2 at $DIR/discriminant.rs:+1:47: +1:49\n+          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n       }\n   \n       bb3: {\n-          _2 = const 10_i32;               // scope 0 at $DIR/discriminant.rs:11:59: 11:61\n-          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n+          _2 = const 10_i32;               // scope 0 at $DIR/discriminant.rs:+1:59: +1:61\n+          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n       }\n   \n       bb4: {\n-          _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/discriminant.rs:11:13: 11:68\n-          StorageDead(_2);                 // scope 0 at $DIR/discriminant.rs:11:67: 11:68\n-          StorageDead(_3);                 // scope 0 at $DIR/discriminant.rs:11:68: 11:69\n-          nop;                             // scope 0 at $DIR/discriminant.rs:10:11: 12:2\n-          StorageDead(_1);                 // scope 0 at $DIR/discriminant.rs:12:1: 12:2\n-          return;                          // scope 0 at $DIR/discriminant.rs:12:2: 12:2\n+          _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/discriminant.rs:+1:13: +1:68\n+          StorageDead(_2);                 // scope 0 at $DIR/discriminant.rs:+1:67: +1:68\n+          StorageDead(_3);                 // scope 0 at $DIR/discriminant.rs:+1:68: +1:69\n+          nop;                             // scope 0 at $DIR/discriminant.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/discriminant.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/discriminant.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "2e1e32545a28629aa300b7a407348551b4021688", "filename": "src/test/mir-opt/const_prop/indirect.main.ConstProp.diff", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,32 +2,32 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/indirect.rs:4:11: 4:11\n-      let _1: u8;                          // in scope 0 at $DIR/indirect.rs:5:9: 5:10\n-      let mut _2: u8;                      // in scope 0 at $DIR/indirect.rs:5:13: 5:25\n-      let mut _3: (u8, bool);              // in scope 0 at $DIR/indirect.rs:5:13: 5:29\n+      let mut _0: ();                      // return place in scope 0 at $DIR/indirect.rs:+0:11: +0:11\n+      let _1: u8;                          // in scope 0 at $DIR/indirect.rs:+1:9: +1:10\n+      let mut _2: u8;                      // in scope 0 at $DIR/indirect.rs:+1:13: +1:25\n+      let mut _3: (u8, bool);              // in scope 0 at $DIR/indirect.rs:+1:13: +1:29\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/indirect.rs:5:9: 5:10\n+          debug x => _1;                   // in scope 1 at $DIR/indirect.rs:+1:9: +1:10\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/indirect.rs:5:9: 5:10\n-          StorageLive(_2);                 // scope 0 at $DIR/indirect.rs:5:13: 5:25\n--         _2 = const 2_u32 as u8 (Misc);   // scope 0 at $DIR/indirect.rs:5:13: 5:25\n--         _3 = CheckedAdd(_2, const 1_u8); // scope 0 at $DIR/indirect.rs:5:13: 5:29\n--         assert(!move (_3.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _2, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:5:13: 5:29\n-+         _2 = const 2_u8;                 // scope 0 at $DIR/indirect.rs:5:13: 5:25\n-+         _3 = const (3_u8, false);        // scope 0 at $DIR/indirect.rs:5:13: 5:29\n-+         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u8, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:5:13: 5:29\n+          StorageLive(_1);                 // scope 0 at $DIR/indirect.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/indirect.rs:+1:13: +1:25\n+-         _2 = const 2_u32 as u8 (Misc);   // scope 0 at $DIR/indirect.rs:+1:13: +1:25\n+-         _3 = CheckedAdd(_2, const 1_u8); // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n+-         assert(!move (_3.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _2, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n++         _2 = const 2_u8;                 // scope 0 at $DIR/indirect.rs:+1:13: +1:25\n++         _3 = const (3_u8, false);        // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u8, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n       }\n   \n       bb1: {\n--         _1 = move (_3.0: u8);            // scope 0 at $DIR/indirect.rs:5:13: 5:29\n-+         _1 = const 3_u8;                 // scope 0 at $DIR/indirect.rs:5:13: 5:29\n-          StorageDead(_2);                 // scope 0 at $DIR/indirect.rs:5:28: 5:29\n-          nop;                             // scope 0 at $DIR/indirect.rs:4:11: 6:2\n-          StorageDead(_1);                 // scope 0 at $DIR/indirect.rs:6:1: 6:2\n-          return;                          // scope 0 at $DIR/indirect.rs:6:2: 6:2\n+-         _1 = move (_3.0: u8);            // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n++         _1 = const 3_u8;                 // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n+          StorageDead(_2);                 // scope 0 at $DIR/indirect.rs:+1:28: +1:29\n+          nop;                             // scope 0 at $DIR/indirect.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/indirect.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/indirect.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "67a4dc3c092698f1c97f95197d0eaac454000d98", "filename": "src/test/mir-opt/const_prop/invalid_constant.main.ConstProp.diff", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,24 +2,24 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/invalid_constant.rs:15:11: 15:11\n-      let _1: char;                        // in scope 0 at $DIR/invalid_constant.rs:21:9: 21:22\n-      let mut _2: main::InvalidChar;       // in scope 0 at $DIR/invalid_constant.rs:21:34: 21:63\n-      let mut _4: E;                       // in scope 0 at $DIR/invalid_constant.rs:28:25: 28:59\n-      let mut _5: main::InvalidTag;        // in scope 0 at $DIR/invalid_constant.rs:28:34: 28:55\n-      let mut _7: Empty;                   // in scope 0 at $DIR/invalid_constant.rs:35:35: 35:73\n-      let mut _8: main::NoVariants;        // in scope 0 at $DIR/invalid_constant.rs:35:44: 35:65\n+      let mut _0: ();                      // return place in scope 0 at $DIR/invalid_constant.rs:+0:11: +0:11\n+      let _1: char;                        // in scope 0 at $DIR/invalid_constant.rs:+6:9: +6:22\n+      let mut _2: main::InvalidChar;       // in scope 0 at $DIR/invalid_constant.rs:+6:34: +6:63\n+      let mut _4: E;                       // in scope 0 at $DIR/invalid_constant.rs:+13:25: +13:59\n+      let mut _5: main::InvalidTag;        // in scope 0 at $DIR/invalid_constant.rs:+13:34: +13:55\n+      let mut _7: Empty;                   // in scope 0 at $DIR/invalid_constant.rs:+20:35: +20:73\n+      let mut _8: main::NoVariants;        // in scope 0 at $DIR/invalid_constant.rs:+20:44: +20:65\n       scope 1 {\n-          debug _invalid_char => _1;       // in scope 1 at $DIR/invalid_constant.rs:21:9: 21:22\n-          let _3: [E; 1];                  // in scope 1 at $DIR/invalid_constant.rs:28:9: 28:21\n+          debug _invalid_char => _1;       // in scope 1 at $DIR/invalid_constant.rs:+6:9: +6:22\n+          let _3: [E; 1];                  // in scope 1 at $DIR/invalid_constant.rs:+13:9: +13:21\n           scope 3 {\n-              debug _invalid_tag => _3;    // in scope 3 at $DIR/invalid_constant.rs:28:9: 28:21\n-              let _6: [Empty; 1];          // in scope 3 at $DIR/invalid_constant.rs:35:9: 35:31\n+              debug _invalid_tag => _3;    // in scope 3 at $DIR/invalid_constant.rs:+13:9: +13:21\n+              let _6: [Empty; 1];          // in scope 3 at $DIR/invalid_constant.rs:+20:9: +20:31\n               scope 5 {\n-                  debug _enum_without_variants => _6; // in scope 5 at $DIR/invalid_constant.rs:35:9: 35:31\n-                  let _9: main::Str<\"\ufffd\ufffd\ufffd\">; // in scope 5 at $DIR/invalid_constant.rs:39:9: 39:22\n+                  debug _enum_without_variants => _6; // in scope 5 at $DIR/invalid_constant.rs:+20:9: +20:31\n+                  let _9: main::Str<\"\ufffd\ufffd\ufffd\">; // in scope 5 at $DIR/invalid_constant.rs:+24:9: +24:22\n                   scope 7 {\n-                      debug _non_utf8_str => _9; // in scope 7 at $DIR/invalid_constant.rs:39:9: 39:22\n+                      debug _non_utf8_str => _9; // in scope 7 at $DIR/invalid_constant.rs:+24:9: +24:22\n                   }\n               }\n               scope 6 {\n@@ -32,46 +32,46 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/invalid_constant.rs:21:9: 21:22\n-          StorageLive(_2);                 // scope 2 at $DIR/invalid_constant.rs:21:34: 21:63\n-          Deinit(_2);                      // scope 2 at $DIR/invalid_constant.rs:21:34: 21:63\n-          (_2.0: u32) = const 1114113_u32; // scope 2 at $DIR/invalid_constant.rs:21:34: 21:63\n--         _1 = (_2.1: char);               // scope 2 at $DIR/invalid_constant.rs:21:34: 21:67\n-+         _1 = const {transmute(0x00110001): char}; // scope 2 at $DIR/invalid_constant.rs:21:34: 21:67\n-          StorageDead(_2);                 // scope 0 at $DIR/invalid_constant.rs:21:69: 21:70\n-          StorageLive(_3);                 // scope 1 at $DIR/invalid_constant.rs:28:9: 28:21\n-          StorageLive(_4);                 // scope 1 at $DIR/invalid_constant.rs:28:25: 28:59\n-          StorageLive(_5);                 // scope 4 at $DIR/invalid_constant.rs:28:34: 28:55\n-          Deinit(_5);                      // scope 4 at $DIR/invalid_constant.rs:28:34: 28:55\n-          (_5.0: u32) = const 4_u32;       // scope 4 at $DIR/invalid_constant.rs:28:34: 28:55\n--         _4 = (_5.1: E);                  // scope 4 at $DIR/invalid_constant.rs:28:34: 28:57\n--         _3 = [move _4];                  // scope 1 at $DIR/invalid_constant.rs:28:24: 28:60\n-+         _4 = const Scalar(0x00000004): E; // scope 4 at $DIR/invalid_constant.rs:28:34: 28:57\n+          StorageLive(_1);                 // scope 0 at $DIR/invalid_constant.rs:+6:9: +6:22\n+          StorageLive(_2);                 // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:63\n+          Deinit(_2);                      // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:63\n+          (_2.0: u32) = const 1114113_u32; // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:63\n+-         _1 = (_2.1: char);               // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:67\n++         _1 = const {transmute(0x00110001): char}; // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:67\n+          StorageDead(_2);                 // scope 0 at $DIR/invalid_constant.rs:+6:69: +6:70\n+          StorageLive(_3);                 // scope 1 at $DIR/invalid_constant.rs:+13:9: +13:21\n+          StorageLive(_4);                 // scope 1 at $DIR/invalid_constant.rs:+13:25: +13:59\n+          StorageLive(_5);                 // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:55\n+          Deinit(_5);                      // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:55\n+          (_5.0: u32) = const 4_u32;       // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:55\n+-         _4 = (_5.1: E);                  // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:57\n+-         _3 = [move _4];                  // scope 1 at $DIR/invalid_constant.rs:+13:24: +13:60\n++         _4 = const Scalar(0x00000004): E; // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:57\n +                                          // mir::Constant\n +                                          // + span: $DIR/invalid_constant.rs:28:34: 28:57\n +                                          // + literal: Const { ty: E, val: Value(Scalar(0x00000004)) }\n-+         _3 = [const Scalar(0x00000004): E]; // scope 1 at $DIR/invalid_constant.rs:28:24: 28:60\n++         _3 = [const Scalar(0x00000004): E]; // scope 1 at $DIR/invalid_constant.rs:+13:24: +13:60\n +                                          // mir::Constant\n +                                          // + span: $DIR/invalid_constant.rs:28:24: 28:60\n +                                          // + literal: Const { ty: E, val: Value(Scalar(0x00000004)) }\n-          StorageDead(_4);                 // scope 1 at $DIR/invalid_constant.rs:28:59: 28:60\n-          StorageDead(_5);                 // scope 1 at $DIR/invalid_constant.rs:28:60: 28:61\n-          StorageLive(_6);                 // scope 3 at $DIR/invalid_constant.rs:35:9: 35:31\n-          StorageLive(_7);                 // scope 3 at $DIR/invalid_constant.rs:35:35: 35:73\n-          StorageLive(_8);                 // scope 6 at $DIR/invalid_constant.rs:35:44: 35:65\n-          Deinit(_8);                      // scope 6 at $DIR/invalid_constant.rs:35:44: 35:65\n-          (_8.0: u32) = const 0_u32;       // scope 6 at $DIR/invalid_constant.rs:35:44: 35:65\n-          nop;                             // scope 6 at $DIR/invalid_constant.rs:35:44: 35:71\n-          nop;                             // scope 3 at $DIR/invalid_constant.rs:35:34: 35:74\n-          StorageDead(_7);                 // scope 3 at $DIR/invalid_constant.rs:35:73: 35:74\n-          StorageDead(_8);                 // scope 3 at $DIR/invalid_constant.rs:35:74: 35:75\n-          StorageLive(_9);                 // scope 5 at $DIR/invalid_constant.rs:39:9: 39:22\n-          nop;                             // scope 0 at $DIR/invalid_constant.rs:15:11: 42:2\n-          StorageDead(_9);                 // scope 5 at $DIR/invalid_constant.rs:42:1: 42:2\n-          StorageDead(_6);                 // scope 3 at $DIR/invalid_constant.rs:42:1: 42:2\n-          StorageDead(_3);                 // scope 1 at $DIR/invalid_constant.rs:42:1: 42:2\n-          StorageDead(_1);                 // scope 0 at $DIR/invalid_constant.rs:42:1: 42:2\n-          return;                          // scope 0 at $DIR/invalid_constant.rs:42:2: 42:2\n+          StorageDead(_4);                 // scope 1 at $DIR/invalid_constant.rs:+13:59: +13:60\n+          StorageDead(_5);                 // scope 1 at $DIR/invalid_constant.rs:+13:60: +13:61\n+          StorageLive(_6);                 // scope 3 at $DIR/invalid_constant.rs:+20:9: +20:31\n+          StorageLive(_7);                 // scope 3 at $DIR/invalid_constant.rs:+20:35: +20:73\n+          StorageLive(_8);                 // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:65\n+          Deinit(_8);                      // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:65\n+          (_8.0: u32) = const 0_u32;       // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:65\n+          nop;                             // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:71\n+          nop;                             // scope 3 at $DIR/invalid_constant.rs:+20:34: +20:74\n+          StorageDead(_7);                 // scope 3 at $DIR/invalid_constant.rs:+20:73: +20:74\n+          StorageDead(_8);                 // scope 3 at $DIR/invalid_constant.rs:+20:74: +20:75\n+          StorageLive(_9);                 // scope 5 at $DIR/invalid_constant.rs:+24:9: +24:22\n+          nop;                             // scope 0 at $DIR/invalid_constant.rs:+0:11: +27:2\n+          StorageDead(_9);                 // scope 5 at $DIR/invalid_constant.rs:+27:1: +27:2\n+          StorageDead(_6);                 // scope 3 at $DIR/invalid_constant.rs:+27:1: +27:2\n+          StorageDead(_3);                 // scope 1 at $DIR/invalid_constant.rs:+27:1: +27:2\n+          StorageDead(_1);                 // scope 0 at $DIR/invalid_constant.rs:+27:1: +27:2\n+          return;                          // scope 0 at $DIR/invalid_constant.rs:+27:2: +27:2\n       }\n   }\n   "}, {"sha": "b3d5980aa73367006d4ef9ac0c24f49fe272c0cd", "filename": "src/test/mir-opt/const_prop/issue_66971.main.ConstProp.diff", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,32 +2,32 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/issue-66971.rs:15:11: 15:11\n-      let _1: ();                          // in scope 0 at $DIR/issue-66971.rs:16:5: 16:23\n-      let mut _2: ((), u8, u8);            // in scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n-      let mut _3: ();                      // in scope 0 at $DIR/issue-66971.rs:16:13: 16:15\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue-66971.rs:+0:11: +0:11\n+      let _1: ();                          // in scope 0 at $DIR/issue-66971.rs:+1:5: +1:23\n+      let mut _2: ((), u8, u8);            // in scope 0 at $DIR/issue-66971.rs:+1:12: +1:22\n+      let mut _3: ();                      // in scope 0 at $DIR/issue-66971.rs:+1:13: +1:15\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/issue-66971.rs:16:5: 16:23\n-          StorageLive(_2);                 // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n-          StorageLive(_3);                 // scope 0 at $DIR/issue-66971.rs:16:13: 16:15\n-          nop;                             // scope 0 at $DIR/issue-66971.rs:16:13: 16:15\n-          Deinit(_2);                      // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n-          nop;                             // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n-          (_2.1: u8) = const 0_u8;         // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n-          (_2.2: u8) = const 0_u8;         // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n-          StorageDead(_3);                 // scope 0 at $DIR/issue-66971.rs:16:21: 16:22\n-          _1 = encode(move _2) -> bb1;     // scope 0 at $DIR/issue-66971.rs:16:5: 16:23\n+          StorageLive(_1);                 // scope 0 at $DIR/issue-66971.rs:+1:5: +1:23\n+          StorageLive(_2);                 // scope 0 at $DIR/issue-66971.rs:+1:12: +1:22\n+          StorageLive(_3);                 // scope 0 at $DIR/issue-66971.rs:+1:13: +1:15\n+          nop;                             // scope 0 at $DIR/issue-66971.rs:+1:13: +1:15\n+          Deinit(_2);                      // scope 0 at $DIR/issue-66971.rs:+1:12: +1:22\n+          nop;                             // scope 0 at $DIR/issue-66971.rs:+1:12: +1:22\n+          (_2.1: u8) = const 0_u8;         // scope 0 at $DIR/issue-66971.rs:+1:12: +1:22\n+          (_2.2: u8) = const 0_u8;         // scope 0 at $DIR/issue-66971.rs:+1:12: +1:22\n+          StorageDead(_3);                 // scope 0 at $DIR/issue-66971.rs:+1:21: +1:22\n+          _1 = encode(move _2) -> bb1;     // scope 0 at $DIR/issue-66971.rs:+1:5: +1:23\n                                            // mir::Constant\n                                            // + span: $DIR/issue-66971.rs:16:5: 16:11\n                                            // + literal: Const { ty: fn(((), u8, u8)) {encode}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_2);                 // scope 0 at $DIR/issue-66971.rs:16:22: 16:23\n-          StorageDead(_1);                 // scope 0 at $DIR/issue-66971.rs:16:23: 16:24\n-          nop;                             // scope 0 at $DIR/issue-66971.rs:15:11: 17:2\n-          return;                          // scope 0 at $DIR/issue-66971.rs:17:2: 17:2\n+          StorageDead(_2);                 // scope 0 at $DIR/issue-66971.rs:+1:22: +1:23\n+          StorageDead(_1);                 // scope 0 at $DIR/issue-66971.rs:+1:23: +1:24\n+          nop;                             // scope 0 at $DIR/issue-66971.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/issue-66971.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "8330b50529f73f1916c81f75806d7c7a1bda1fe2", "filename": "src/test/mir-opt/const_prop/issue_67019.main.ConstProp.diff", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,33 +2,33 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/issue-67019.rs:10:11: 10:11\n-      let _1: ();                          // in scope 0 at $DIR/issue-67019.rs:11:5: 11:20\n-      let mut _2: ((u8, u8),);             // in scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n-      let mut _3: (u8, u8);                // in scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue-67019.rs:+0:11: +0:11\n+      let _1: ();                          // in scope 0 at $DIR/issue-67019.rs:+1:5: +1:20\n+      let mut _2: ((u8, u8),);             // in scope 0 at $DIR/issue-67019.rs:+1:10: +1:19\n+      let mut _3: (u8, u8);                // in scope 0 at $DIR/issue-67019.rs:+1:11: +1:17\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/issue-67019.rs:11:5: 11:20\n-          StorageLive(_2);                 // scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n-          StorageLive(_3);                 // scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n-          Deinit(_3);                      // scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n-          (_3.0: u8) = const 1_u8;         // scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n-          (_3.1: u8) = const 2_u8;         // scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n-          Deinit(_2);                      // scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n--         (_2.0: (u8, u8)) = move _3;      // scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n-+         (_2.0: (u8, u8)) = const (1_u8, 2_u8); // scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n-          StorageDead(_3);                 // scope 0 at $DIR/issue-67019.rs:11:18: 11:19\n-          _1 = test(move _2) -> bb1;       // scope 0 at $DIR/issue-67019.rs:11:5: 11:20\n+          StorageLive(_1);                 // scope 0 at $DIR/issue-67019.rs:+1:5: +1:20\n+          StorageLive(_2);                 // scope 0 at $DIR/issue-67019.rs:+1:10: +1:19\n+          StorageLive(_3);                 // scope 0 at $DIR/issue-67019.rs:+1:11: +1:17\n+          Deinit(_3);                      // scope 0 at $DIR/issue-67019.rs:+1:11: +1:17\n+          (_3.0: u8) = const 1_u8;         // scope 0 at $DIR/issue-67019.rs:+1:11: +1:17\n+          (_3.1: u8) = const 2_u8;         // scope 0 at $DIR/issue-67019.rs:+1:11: +1:17\n+          Deinit(_2);                      // scope 0 at $DIR/issue-67019.rs:+1:10: +1:19\n+-         (_2.0: (u8, u8)) = move _3;      // scope 0 at $DIR/issue-67019.rs:+1:10: +1:19\n++         (_2.0: (u8, u8)) = const (1_u8, 2_u8); // scope 0 at $DIR/issue-67019.rs:+1:10: +1:19\n+          StorageDead(_3);                 // scope 0 at $DIR/issue-67019.rs:+1:18: +1:19\n+          _1 = test(move _2) -> bb1;       // scope 0 at $DIR/issue-67019.rs:+1:5: +1:20\n                                            // mir::Constant\n                                            // + span: $DIR/issue-67019.rs:11:5: 11:9\n                                            // + literal: Const { ty: fn(((u8, u8),)) {test}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_2);                 // scope 0 at $DIR/issue-67019.rs:11:19: 11:20\n-          StorageDead(_1);                 // scope 0 at $DIR/issue-67019.rs:11:20: 11:21\n-          nop;                             // scope 0 at $DIR/issue-67019.rs:10:11: 12:2\n-          return;                          // scope 0 at $DIR/issue-67019.rs:12:2: 12:2\n+          StorageDead(_2);                 // scope 0 at $DIR/issue-67019.rs:+1:19: +1:20\n+          StorageDead(_1);                 // scope 0 at $DIR/issue-67019.rs:+1:20: +1:21\n+          nop;                             // scope 0 at $DIR/issue-67019.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/issue-67019.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "96de39258e4ddcb6fe86e154133474c90848971f", "filename": "src/test/mir-opt/const_prop/large_array_index.main.ConstProp.32bit.diff", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.32bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,36 +2,36 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/large_array_index.rs:4:11: 4:11\n-      let _1: u8;                          // in scope 0 at $DIR/large_array_index.rs:6:9: 6:10\n-      let mut _2: [u8; 5000];              // in scope 0 at $DIR/large_array_index.rs:6:17: 6:29\n-      let _3: usize;                       // in scope 0 at $DIR/large_array_index.rs:6:30: 6:31\n-      let mut _4: usize;                   // in scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n-      let mut _5: bool;                    // in scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n+      let mut _0: ();                      // return place in scope 0 at $DIR/large_array_index.rs:+0:11: +0:11\n+      let _1: u8;                          // in scope 0 at $DIR/large_array_index.rs:+2:9: +2:10\n+      let mut _2: [u8; 5000];              // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n+      let _3: usize;                       // in scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n+      let mut _4: usize;                   // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+      let mut _5: bool;                    // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/large_array_index.rs:6:9: 6:10\n+          debug x => _1;                   // in scope 1 at $DIR/large_array_index.rs:+2:9: +2:10\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/large_array_index.rs:6:9: 6:10\n-          StorageLive(_2);                 // scope 0 at $DIR/large_array_index.rs:6:17: 6:29\n-          _2 = [const 0_u8; 5000];         // scope 0 at $DIR/large_array_index.rs:6:17: 6:29\n-          StorageLive(_3);                 // scope 0 at $DIR/large_array_index.rs:6:30: 6:31\n-          _3 = const 2_usize;              // scope 0 at $DIR/large_array_index.rs:6:30: 6:31\n-          _4 = const 5000_usize;           // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n--         _5 = Lt(_3, _4);                 // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n--         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n-+         _5 = const true;                 // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 5000_usize, const 2_usize) -> bb1; // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n+          StorageLive(_1);                 // scope 0 at $DIR/large_array_index.rs:+2:9: +2:10\n+          StorageLive(_2);                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n+          _2 = [const 0_u8; 5000];         // scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n+          StorageLive(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n+          _3 = const 2_usize;              // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n+          _4 = const 5000_usize;           // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+-         _5 = Lt(_3, _4);                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+-         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n++         _5 = const true;                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 5000_usize, const 2_usize) -> bb1; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n       }\n   \n       bb1: {\n-          _1 = _2[_3];                     // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n-          StorageDead(_3);                 // scope 0 at $DIR/large_array_index.rs:6:32: 6:33\n-          StorageDead(_2);                 // scope 0 at $DIR/large_array_index.rs:6:32: 6:33\n-          nop;                             // scope 0 at $DIR/large_array_index.rs:4:11: 7:2\n-          StorageDead(_1);                 // scope 0 at $DIR/large_array_index.rs:7:1: 7:2\n-          return;                          // scope 0 at $DIR/large_array_index.rs:7:2: 7:2\n+          _1 = _2[_3];                     // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+          StorageDead(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:32: +2:33\n+          StorageDead(_2);                 // scope 0 at $DIR/large_array_index.rs:+2:32: +2:33\n+          nop;                             // scope 0 at $DIR/large_array_index.rs:+0:11: +3:2\n+          StorageDead(_1);                 // scope 0 at $DIR/large_array_index.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/large_array_index.rs:+3:2: +3:2\n       }\n   }\n   "}, {"sha": "96de39258e4ddcb6fe86e154133474c90848971f", "filename": "src/test/mir-opt/const_prop/large_array_index.main.ConstProp.64bit.diff", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.64bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,36 +2,36 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/large_array_index.rs:4:11: 4:11\n-      let _1: u8;                          // in scope 0 at $DIR/large_array_index.rs:6:9: 6:10\n-      let mut _2: [u8; 5000];              // in scope 0 at $DIR/large_array_index.rs:6:17: 6:29\n-      let _3: usize;                       // in scope 0 at $DIR/large_array_index.rs:6:30: 6:31\n-      let mut _4: usize;                   // in scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n-      let mut _5: bool;                    // in scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n+      let mut _0: ();                      // return place in scope 0 at $DIR/large_array_index.rs:+0:11: +0:11\n+      let _1: u8;                          // in scope 0 at $DIR/large_array_index.rs:+2:9: +2:10\n+      let mut _2: [u8; 5000];              // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n+      let _3: usize;                       // in scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n+      let mut _4: usize;                   // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+      let mut _5: bool;                    // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/large_array_index.rs:6:9: 6:10\n+          debug x => _1;                   // in scope 1 at $DIR/large_array_index.rs:+2:9: +2:10\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/large_array_index.rs:6:9: 6:10\n-          StorageLive(_2);                 // scope 0 at $DIR/large_array_index.rs:6:17: 6:29\n-          _2 = [const 0_u8; 5000];         // scope 0 at $DIR/large_array_index.rs:6:17: 6:29\n-          StorageLive(_3);                 // scope 0 at $DIR/large_array_index.rs:6:30: 6:31\n-          _3 = const 2_usize;              // scope 0 at $DIR/large_array_index.rs:6:30: 6:31\n-          _4 = const 5000_usize;           // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n--         _5 = Lt(_3, _4);                 // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n--         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n-+         _5 = const true;                 // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 5000_usize, const 2_usize) -> bb1; // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n+          StorageLive(_1);                 // scope 0 at $DIR/large_array_index.rs:+2:9: +2:10\n+          StorageLive(_2);                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n+          _2 = [const 0_u8; 5000];         // scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n+          StorageLive(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n+          _3 = const 2_usize;              // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n+          _4 = const 5000_usize;           // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+-         _5 = Lt(_3, _4);                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+-         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n++         _5 = const true;                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 5000_usize, const 2_usize) -> bb1; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n       }\n   \n       bb1: {\n-          _1 = _2[_3];                     // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n-          StorageDead(_3);                 // scope 0 at $DIR/large_array_index.rs:6:32: 6:33\n-          StorageDead(_2);                 // scope 0 at $DIR/large_array_index.rs:6:32: 6:33\n-          nop;                             // scope 0 at $DIR/large_array_index.rs:4:11: 7:2\n-          StorageDead(_1);                 // scope 0 at $DIR/large_array_index.rs:7:1: 7:2\n-          return;                          // scope 0 at $DIR/large_array_index.rs:7:2: 7:2\n+          _1 = _2[_3];                     // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+          StorageDead(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:32: +2:33\n+          StorageDead(_2);                 // scope 0 at $DIR/large_array_index.rs:+2:32: +2:33\n+          nop;                             // scope 0 at $DIR/large_array_index.rs:+0:11: +3:2\n+          StorageDead(_1);                 // scope 0 at $DIR/large_array_index.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/large_array_index.rs:+3:2: +3:2\n       }\n   }\n   "}, {"sha": "629c8e60148fdbd8fdf465cedaa593b51e1643b3", "filename": "src/test/mir-opt/const_prop/mult_by_zero.test.ConstProp.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmult_by_zero.test.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmult_by_zero.test.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmult_by_zero.test.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,17 +2,17 @@\n + // MIR for `test` after ConstProp\n   \n   fn test(_1: i32) -> i32 {\n-      debug x => _1;                       // in scope 0 at $DIR/mult_by_zero.rs:4:9: 4:10\n-      let mut _0: i32;                     // return place in scope 0 at $DIR/mult_by_zero.rs:4:21: 4:24\n-      let mut _2: i32;                     // in scope 0 at $DIR/mult_by_zero.rs:5:3: 5:4\n+      debug x => _1;                       // in scope 0 at $DIR/mult_by_zero.rs:+0:9: +0:10\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/mult_by_zero.rs:+0:21: +0:24\n+      let mut _2: i32;                     // in scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:4\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/mult_by_zero.rs:5:3: 5:4\n-          _2 = _1;                         // scope 0 at $DIR/mult_by_zero.rs:5:3: 5:4\n--         _0 = Mul(move _2, const 0_i32);  // scope 0 at $DIR/mult_by_zero.rs:5:3: 5:8\n-+         _0 = const 0_i32;                // scope 0 at $DIR/mult_by_zero.rs:5:3: 5:8\n-          StorageDead(_2);                 // scope 0 at $DIR/mult_by_zero.rs:5:7: 5:8\n-          return;                          // scope 0 at $DIR/mult_by_zero.rs:6:2: 6:2\n+          StorageLive(_2);                 // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:4\n+          _2 = _1;                         // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:4\n+-         _0 = Mul(move _2, const 0_i32);  // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:8\n++         _0 = const 0_i32;                // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:8\n+          StorageDead(_2);                 // scope 0 at $DIR/mult_by_zero.rs:+1:7: +1:8\n+          return;                          // scope 0 at $DIR/mult_by_zero.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "3bbd6a87f97144bf6f3edfe57bebc2fdaa82856e", "filename": "src/test/mir-opt/const_prop/mutable_variable.main.ConstProp.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable.main.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,27 +2,27 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable.rs:4:11: 4:11\n-      let mut _1: i32;                     // in scope 0 at $DIR/mutable_variable.rs:5:9: 5:14\n+      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable.rs:+0:11: +0:11\n+      let mut _1: i32;                     // in scope 0 at $DIR/mutable_variable.rs:+1:9: +1:14\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/mutable_variable.rs:5:9: 5:14\n-          let _2: i32;                     // in scope 1 at $DIR/mutable_variable.rs:7:9: 7:10\n+          debug x => _1;                   // in scope 1 at $DIR/mutable_variable.rs:+1:9: +1:14\n+          let _2: i32;                     // in scope 1 at $DIR/mutable_variable.rs:+3:9: +3:10\n           scope 2 {\n-              debug y => _2;               // in scope 2 at $DIR/mutable_variable.rs:7:9: 7:10\n+              debug y => _2;               // in scope 2 at $DIR/mutable_variable.rs:+3:9: +3:10\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable.rs:5:9: 5:14\n-          _1 = const 42_i32;               // scope 0 at $DIR/mutable_variable.rs:5:17: 5:19\n-          _1 = const 99_i32;               // scope 1 at $DIR/mutable_variable.rs:6:5: 6:11\n-          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable.rs:7:9: 7:10\n--         _2 = _1;                         // scope 1 at $DIR/mutable_variable.rs:7:13: 7:14\n-+         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable.rs:7:13: 7:14\n-          nop;                             // scope 0 at $DIR/mutable_variable.rs:4:11: 8:2\n-          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable.rs:8:1: 8:2\n-          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable.rs:8:1: 8:2\n-          return;                          // scope 0 at $DIR/mutable_variable.rs:8:2: 8:2\n+          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable.rs:+1:9: +1:14\n+          _1 = const 42_i32;               // scope 0 at $DIR/mutable_variable.rs:+1:17: +1:19\n+          _1 = const 99_i32;               // scope 1 at $DIR/mutable_variable.rs:+2:5: +2:11\n+          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable.rs:+3:9: +3:10\n+-         _2 = _1;                         // scope 1 at $DIR/mutable_variable.rs:+3:13: +3:14\n++         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable.rs:+3:13: +3:14\n+          nop;                             // scope 0 at $DIR/mutable_variable.rs:+0:11: +4:2\n+          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable.rs:+4:1: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/mutable_variable.rs:+4:2: +4:2\n       }\n   }\n   "}, {"sha": "fed6a98b9f3644ef11aa7f7d7ec36e5a2c9fbcb8", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate.main.ConstProp.diff", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,29 +2,29 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_aggregate.rs:4:11: 4:11\n-      let mut _1: (i32, i32);              // in scope 0 at $DIR/mutable_variable_aggregate.rs:5:9: 5:14\n+      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_aggregate.rs:+0:11: +0:11\n+      let mut _1: (i32, i32);              // in scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_aggregate.rs:5:9: 5:14\n-          let _2: (i32, i32);              // in scope 1 at $DIR/mutable_variable_aggregate.rs:7:9: 7:10\n+          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n+          let _2: (i32, i32);              // in scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n           scope 2 {\n-              debug y => _2;               // in scope 2 at $DIR/mutable_variable_aggregate.rs:7:9: 7:10\n+              debug y => _2;               // in scope 2 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:5:9: 5:14\n-          Deinit(_1);                      // scope 0 at $DIR/mutable_variable_aggregate.rs:5:17: 5:25\n-          (_1.0: i32) = const 42_i32;      // scope 0 at $DIR/mutable_variable_aggregate.rs:5:17: 5:25\n-          (_1.1: i32) = const 43_i32;      // scope 0 at $DIR/mutable_variable_aggregate.rs:5:17: 5:25\n-          (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate.rs:6:5: 6:13\n-          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:7:9: 7:10\n--         _2 = _1;                         // scope 1 at $DIR/mutable_variable_aggregate.rs:7:13: 7:14\n-+         _2 = const (42_i32, 99_i32);     // scope 1 at $DIR/mutable_variable_aggregate.rs:7:13: 7:14\n-          nop;                             // scope 0 at $DIR/mutable_variable_aggregate.rs:4:11: 8:2\n-          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:8:1: 8:2\n-          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:8:1: 8:2\n-          return;                          // scope 0 at $DIR/mutable_variable_aggregate.rs:8:2: 8:2\n+          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n+          Deinit(_1);                      // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n+          (_1.0: i32) = const 42_i32;      // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n+          (_1.1: i32) = const 43_i32;      // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n+          (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate.rs:+2:5: +2:13\n+          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n+-         _2 = _1;                         // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n++         _2 = const (42_i32, 99_i32);     // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n+          nop;                             // scope 0 at $DIR/mutable_variable_aggregate.rs:+0:11: +4:2\n+          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:+4:1: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/mutable_variable_aggregate.rs:+4:2: +4:2\n       }\n   }\n   "}, {"sha": "90eebd8feac60e2fe6b98cb34aba6ce9a43303fa", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate_mut_ref.main.ConstProp.diff", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,35 +2,35 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:4:11: 4:11\n-      let mut _1: (i32, i32);              // in scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:5:9: 5:14\n+      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+0:11: +0:11\n+      let mut _1: (i32, i32);              // in scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+1:9: +1:14\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:5:9: 5:14\n-          let _2: &mut (i32, i32);         // in scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:6:9: 6:10\n+          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+1:9: +1:14\n+          let _2: &mut (i32, i32);         // in scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:9: +2:10\n           scope 2 {\n-              debug z => _2;               // in scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:6:9: 6:10\n-              let _3: (i32, i32);          // in scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:8:9: 8:10\n+              debug z => _2;               // in scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:9: +2:10\n+              let _3: (i32, i32);          // in scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n               scope 3 {\n-                  debug y => _3;           // in scope 3 at $DIR/mutable_variable_aggregate_mut_ref.rs:8:9: 8:10\n+                  debug y => _3;           // in scope 3 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:5:9: 5:14\n-          Deinit(_1);                      // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:5:17: 5:25\n-          (_1.0: i32) = const 42_i32;      // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:5:17: 5:25\n-          (_1.1: i32) = const 43_i32;      // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:5:17: 5:25\n-          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:6:9: 6:10\n-          _2 = &mut _1;                    // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:6:13: 6:19\n-          ((*_2).1: i32) = const 99_i32;   // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:7:5: 7:13\n-          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:8:9: 8:10\n-          _3 = _1;                         // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:8:13: 8:14\n-          nop;                             // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:4:11: 9:2\n-          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:9:1: 9:2\n-          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:9:1: 9:2\n-          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:9:1: 9:2\n-          return;                          // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:9:2: 9:2\n+          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+1:9: +1:14\n+          Deinit(_1);                      // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+1:17: +1:25\n+          (_1.0: i32) = const 42_i32;      // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+1:17: +1:25\n+          (_1.1: i32) = const 43_i32;      // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+1:17: +1:25\n+          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:9: +2:10\n+          _2 = &mut _1;                    // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:13: +2:19\n+          ((*_2).1: i32) = const 99_i32;   // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+3:5: +3:13\n+          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n+          _3 = _1;                         // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:13: +4:14\n+          nop;                             // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+0:11: +5:2\n+          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n+          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n+          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:2: +5:2\n       }\n   }\n   "}, {"sha": "c678f7b0327633d6ffad6e1f68c61e2dc26ea294", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate_partial_read.main.ConstProp.diff", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,34 +2,34 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:4:11: 4:11\n-      let mut _1: (i32, i32);              // in scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:5:9: 5:14\n+      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+0:11: +0:11\n+      let mut _1: (i32, i32);              // in scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:9: +1:14\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:5:9: 5:14\n-          let _2: i32;                     // in scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:8:9: 8:10\n+          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:9: +1:14\n+          let _2: i32;                     // in scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:9: +4:10\n           scope 2 {\n-              debug y => _2;               // in scope 2 at $DIR/mutable_variable_aggregate_partial_read.rs:8:9: 8:10\n+              debug y => _2;               // in scope 2 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:9: +4:10\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:5:9: 5:14\n-          _1 = foo() -> bb1;               // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:5:29: 5:34\n+          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:9: +1:14\n+          _1 = foo() -> bb1;               // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:29: +1:34\n                                            // mir::Constant\n                                            // + span: $DIR/mutable_variable_aggregate_partial_read.rs:5:29: 5:32\n                                            // + literal: Const { ty: fn() -> (i32, i32) {foo}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:6:5: 6:13\n-          (_1.0: i32) = const 42_i32;      // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:7:5: 7:13\n-          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:8:9: 8:10\n--         _2 = (_1.1: i32);                // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:8:13: 8:16\n-+         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:8:13: 8:16\n-          nop;                             // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:4:11: 9:2\n-          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:9:1: 9:2\n-          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:9:1: 9:2\n-          return;                          // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:9:2: 9:2\n+          (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+2:5: +2:13\n+          (_1.0: i32) = const 42_i32;      // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+3:5: +3:13\n+          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:9: +4:10\n+-         _2 = (_1.1: i32);                // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:13: +4:16\n++         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:13: +4:16\n+          nop;                             // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+0:11: +5:2\n+          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:1: +5:2\n+          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:2: +5:2\n       }\n   }\n   "}, {"sha": "4c2ba9a099815fe038663afeb4736c8f8d7f2d61", "filename": "src/test/mir-opt/const_prop/mutable_variable_no_prop.main.ConstProp.diff", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,43 +2,43 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_no_prop.rs:6:11: 6:11\n-      let mut _1: u32;                     // in scope 0 at $DIR/mutable_variable_no_prop.rs:7:9: 7:14\n-      let _2: ();                          // in scope 0 at $DIR/mutable_variable_no_prop.rs:8:5: 10:6\n-      let mut _3: u32;                     // in scope 0 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n-      let mut _4: *mut u32;                // in scope 0 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n+      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_no_prop.rs:+0:11: +0:11\n+      let mut _1: u32;                     // in scope 0 at $DIR/mutable_variable_no_prop.rs:+1:9: +1:14\n+      let _2: ();                          // in scope 0 at $DIR/mutable_variable_no_prop.rs:+2:5: +4:6\n+      let mut _3: u32;                     // in scope 0 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n+      let mut _4: *mut u32;                // in scope 0 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_no_prop.rs:7:9: 7:14\n-          let _5: u32;                     // in scope 1 at $DIR/mutable_variable_no_prop.rs:11:9: 11:10\n+          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_no_prop.rs:+1:9: +1:14\n+          let _5: u32;                     // in scope 1 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n           scope 2 {\n           }\n           scope 3 {\n-              debug y => _5;               // in scope 3 at $DIR/mutable_variable_no_prop.rs:11:9: 11:10\n+              debug y => _5;               // in scope 3 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_no_prop.rs:7:9: 7:14\n-          _1 = const 42_u32;               // scope 0 at $DIR/mutable_variable_no_prop.rs:7:17: 7:19\n-          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:8:5: 10:6\n-          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n-          StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n-          _4 = const {alloc1: *mut u32};   // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n+          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_no_prop.rs:+1:9: +1:14\n+          _1 = const 42_u32;               // scope 0 at $DIR/mutable_variable_no_prop.rs:+1:17: +1:19\n+          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+2:5: +4:6\n+          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n+          StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n+          _4 = const {alloc1: *mut u32};   // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n                                            // mir::Constant\n                                            // + span: $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n                                            // + literal: Const { ty: *mut u32, val: Value(Scalar(alloc1)) }\n-          _3 = (*_4);                      // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n-          _1 = move _3;                    // scope 2 at $DIR/mutable_variable_no_prop.rs:9:9: 9:19\n-          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:9:18: 9:19\n-          StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:9:19: 9:20\n-          nop;                             // scope 2 at $DIR/mutable_variable_no_prop.rs:8:5: 10:6\n-          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:10:5: 10:6\n-          StorageLive(_5);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:11:9: 11:10\n-          _5 = _1;                         // scope 1 at $DIR/mutable_variable_no_prop.rs:11:13: 11:14\n-          nop;                             // scope 0 at $DIR/mutable_variable_no_prop.rs:6:11: 12:2\n-          StorageDead(_5);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:12:1: 12:2\n-          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_no_prop.rs:12:1: 12:2\n-          return;                          // scope 0 at $DIR/mutable_variable_no_prop.rs:12:2: 12:2\n+          _3 = (*_4);                      // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n+          _1 = move _3;                    // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:9: +3:19\n+          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:18: +3:19\n+          StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:19: +3:20\n+          nop;                             // scope 2 at $DIR/mutable_variable_no_prop.rs:+2:5: +4:6\n+          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+4:5: +4:6\n+          StorageLive(_5);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n+          _5 = _1;                         // scope 1 at $DIR/mutable_variable_no_prop.rs:+5:13: +5:14\n+          nop;                             // scope 0 at $DIR/mutable_variable_no_prop.rs:+0:11: +6:2\n+          StorageDead(_5);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+6:1: +6:2\n+          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_no_prop.rs:+6:1: +6:2\n+          return;                          // scope 0 at $DIR/mutable_variable_no_prop.rs:+6:2: +6:2\n       }\n   }\n   "}, {"sha": "5328792b323888dda92979c9fe6eb0c38442489e", "filename": "src/test/mir-opt/const_prop/mutable_variable_unprop_assign.main.ConstProp.diff", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,52 +2,52 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_unprop_assign.rs:4:11: 4:11\n-      let _1: i32;                         // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:5:9: 5:10\n-      let mut _3: i32;                     // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:7:11: 7:12\n+      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n+      let mut _3: i32;                     // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:5:9: 5:10\n-          let mut _2: (i32, i32);          // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:6:9: 6:14\n+          debug a => _1;                   // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n+          let mut _2: (i32, i32);          // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n           scope 2 {\n-              debug x => _2;               // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:6:9: 6:14\n-              let _4: i32;                 // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:8:9: 8:10\n+              debug x => _2;               // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+              let _4: i32;                 // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n               scope 3 {\n-                  debug y => _4;           // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:8:9: 8:10\n-                  let _5: i32;             // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:9:9: 9:10\n+                  debug y => _4;           // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n+                  let _5: i32;             // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n                   scope 4 {\n-                      debug z => _5;       // in scope 4 at $DIR/mutable_variable_unprop_assign.rs:9:9: 9:10\n+                      debug z => _5;       // in scope 4 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n                   }\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:5:9: 5:10\n-          _1 = foo() -> bb1;               // scope 0 at $DIR/mutable_variable_unprop_assign.rs:5:13: 5:18\n+          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n+          _1 = foo() -> bb1;               // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:13: +1:18\n                                            // mir::Constant\n                                            // + span: $DIR/mutable_variable_unprop_assign.rs:5:13: 5:16\n                                            // + literal: Const { ty: fn() -> i32 {foo}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:6:9: 6:14\n-          Deinit(_2);                      // scope 1 at $DIR/mutable_variable_unprop_assign.rs:6:29: 6:35\n-          (_2.0: i32) = const 1_i32;       // scope 1 at $DIR/mutable_variable_unprop_assign.rs:6:29: 6:35\n-          (_2.1: i32) = const 2_i32;       // scope 1 at $DIR/mutable_variable_unprop_assign.rs:6:29: 6:35\n-          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:7:11: 7:12\n-          _3 = _1;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:7:11: 7:12\n-          (_2.1: i32) = move _3;           // scope 2 at $DIR/mutable_variable_unprop_assign.rs:7:5: 7:12\n-          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:7:11: 7:12\n-          StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:8:9: 8:10\n-          _4 = (_2.1: i32);                // scope 2 at $DIR/mutable_variable_unprop_assign.rs:8:13: 8:16\n-          StorageLive(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:9:9: 9:10\n-          _5 = (_2.0: i32);                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:9:13: 9:16\n-          nop;                             // scope 0 at $DIR/mutable_variable_unprop_assign.rs:4:11: 10:2\n-          StorageDead(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:10:1: 10:2\n-          StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:10:1: 10:2\n-          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:10:1: 10:2\n-          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:10:1: 10:2\n-          return;                          // scope 0 at $DIR/mutable_variable_unprop_assign.rs:10:2: 10:2\n+          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+          Deinit(_2);                      // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n+          (_2.0: i32) = const 1_i32;       // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n+          (_2.1: i32) = const 2_i32;       // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n+          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+          _3 = _1;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+          (_2.1: i32) = move _3;           // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:5: +3:12\n+          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+          StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n+          _4 = (_2.1: i32);                // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:13: +4:16\n+          StorageLive(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n+          _5 = (_2.0: i32);                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n+          nop;                             // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+0:11: +6:2\n+          StorageDead(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          return;                          // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+6:2: +6:2\n       }\n   }\n   "}, {"sha": "94aadfaf8d57bc57334208a88d47a3a54c898da3", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.32bit.diff", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,67 +2,67 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:11:11: 11:11\n-      let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n-      let mut _2: (i32, bool);             // in scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-      let mut _4: [i32; 6];                // in scope 0 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n-      let _5: usize;                       // in scope 0 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n-      let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-      let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-      let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n+      let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+      let mut _2: (i32, bool);             // in scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n+      let mut _4: [i32; 6];                // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:31\n+      let _5: usize;                       // in scope 0 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n+      let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+      let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+      let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n-          let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n+          debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+          let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n           scope 2 {\n-              debug y => _3;               // in scope 2 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n-              let _8: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+              debug y => _3;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+              let _8: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n               scope 3 {\n-                  debug z => _8;           // in scope 3 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+                  debug z => _8;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n--         _2 = CheckedAdd(const 2_i32, const 2_i32); // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n--         assert(!move (_2.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+         _2 = const (4_i32, false);       // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n+          StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+-         _2 = CheckedAdd(const 2_i32, const 2_i32); // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n+-         assert(!move (_2.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n++         _2 = const (4_i32, false);       // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n       }\n   \n       bb1: {\n--         _1 = move (_2.0: i32);           // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+         _1 = const 4_i32;                // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-          StorageLive(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n-          StorageLive(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n-          _4 = [const 0_i32, const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32]; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n-          StorageLive(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n-          _5 = const 3_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n-          _6 = const 6_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n--         _7 = Lt(_5, _6);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n--         assert(move _7, \"index out of bounds: the length is {} but the index is {}\", move _6, _5) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+         _7 = const true;                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 6_usize, const 3_usize) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+-         _1 = move (_2.0: i32);           // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n++         _1 = const 4_i32;                // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n+          StorageLive(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+          StorageLive(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:31\n+          _4 = [const 0_i32, const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32]; // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:31\n+          StorageLive(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n+          _5 = const 3_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n+          _6 = const 6_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+-         _7 = Lt(_5, _6);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+-         assert(move _7, \"index out of bounds: the length is {} but the index is {}\", move _6, _5) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n++         _7 = const true;                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 6_usize, const 3_usize) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       }\n   \n       bb2: {\n--         _3 = _4[_5];                     // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+         _3 = const 3_i32;                // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-          StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n-          StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n-          StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n-          StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n-          Deinit(_9);                      // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n-          (_9.0: u32) = const 12_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n-          (_9.1: u32) = const 42_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n--         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n-+         _8 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n-          StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:38: 14:39\n-          nop;                             // scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n-          StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-          StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-          StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-          return;                          // scope 0 at $DIR/optimizes_into_variable.rs:15:2: 15:2\n+-         _3 = _4[_5];                     // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n++         _3 = const 3_i32;                // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+          StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n+          StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n+          StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+          StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          Deinit(_9);                      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          (_9.0: u32) = const 12_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          (_9.1: u32) = const 42_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+-         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n++         _8 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n+          StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n+          nop;                             // scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +4:2\n+          StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+          StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2\n       }\n   }\n   "}, {"sha": "94aadfaf8d57bc57334208a88d47a3a54c898da3", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.64bit.diff", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,67 +2,67 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:11:11: 11:11\n-      let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n-      let mut _2: (i32, bool);             // in scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-      let mut _4: [i32; 6];                // in scope 0 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n-      let _5: usize;                       // in scope 0 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n-      let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-      let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-      let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n+      let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+      let mut _2: (i32, bool);             // in scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n+      let mut _4: [i32; 6];                // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:31\n+      let _5: usize;                       // in scope 0 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n+      let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+      let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+      let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n-          let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n+          debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+          let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n           scope 2 {\n-              debug y => _3;               // in scope 2 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n-              let _8: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+              debug y => _3;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+              let _8: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n               scope 3 {\n-                  debug z => _8;           // in scope 3 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+                  debug z => _8;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n--         _2 = CheckedAdd(const 2_i32, const 2_i32); // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n--         assert(!move (_2.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+         _2 = const (4_i32, false);       // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n+          StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+-         _2 = CheckedAdd(const 2_i32, const 2_i32); // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n+-         assert(!move (_2.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n++         _2 = const (4_i32, false);       // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n       }\n   \n       bb1: {\n--         _1 = move (_2.0: i32);           // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+         _1 = const 4_i32;                // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-          StorageLive(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n-          StorageLive(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n-          _4 = [const 0_i32, const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32]; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n-          StorageLive(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n-          _5 = const 3_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n-          _6 = const 6_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n--         _7 = Lt(_5, _6);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n--         assert(move _7, \"index out of bounds: the length is {} but the index is {}\", move _6, _5) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+         _7 = const true;                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 6_usize, const 3_usize) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+-         _1 = move (_2.0: i32);           // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n++         _1 = const 4_i32;                // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n+          StorageLive(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+          StorageLive(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:31\n+          _4 = [const 0_i32, const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32]; // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:31\n+          StorageLive(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n+          _5 = const 3_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n+          _6 = const 6_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+-         _7 = Lt(_5, _6);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+-         assert(move _7, \"index out of bounds: the length is {} but the index is {}\", move _6, _5) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n++         _7 = const true;                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 6_usize, const 3_usize) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       }\n   \n       bb2: {\n--         _3 = _4[_5];                     // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+         _3 = const 3_i32;                // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-          StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n-          StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n-          StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n-          StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n-          Deinit(_9);                      // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n-          (_9.0: u32) = const 12_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n-          (_9.1: u32) = const 42_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n--         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n-+         _8 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n-          StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:38: 14:39\n-          nop;                             // scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n-          StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-          StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-          StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-          return;                          // scope 0 at $DIR/optimizes_into_variable.rs:15:2: 15:2\n+-         _3 = _4[_5];                     // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n++         _3 = const 3_i32;                // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+          StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n+          StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n+          StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+          StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          Deinit(_9);                      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          (_9.0: u32) = const 12_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          (_9.1: u32) = const 42_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+-         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n++         _8 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n+          StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n+          nop;                             // scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +4:2\n+          StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+          StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2\n       }\n   }\n   "}, {"sha": "75cea8ad2cebf53475877761cdf1043e4ed2d643", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.SimplifyLocals.after.32bit.mir", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.32bit.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,27 +1,27 @@\n // MIR for `main` after SimplifyLocals\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:11:11: 11:11\n-    let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n+    let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +0:11\n+    let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n     scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n-        let _2: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n+        debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+        let _2: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n         scope 2 {\n-            debug y => _2;               // in scope 2 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n-            let _3: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+            debug y => _2;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+            let _3: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n             scope 3 {\n-                debug z => _3;           // in scope 3 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+                debug z => _3;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n             }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n-        StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n-        StorageLive(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n-        StorageDead(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        StorageDead(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        return;                          // scope 0 at $DIR/optimizes_into_variable.rs:15:2: 15:2\n+        StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+        StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+        StorageLive(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+        StorageDead(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+        StorageDead(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+        StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+        return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2\n     }\n }"}, {"sha": "75cea8ad2cebf53475877761cdf1043e4ed2d643", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.SimplifyLocals.after.64bit.mir", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.64bit.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,27 +1,27 @@\n // MIR for `main` after SimplifyLocals\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:11:11: 11:11\n-    let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n+    let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +0:11\n+    let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n     scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n-        let _2: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n+        debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+        let _2: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n         scope 2 {\n-            debug y => _2;               // in scope 2 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n-            let _3: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+            debug y => _2;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+            let _3: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n             scope 3 {\n-                debug z => _3;           // in scope 3 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+                debug z => _3;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n             }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n-        StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n-        StorageLive(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n-        StorageDead(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        StorageDead(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        return;                          // scope 0 at $DIR/optimizes_into_variable.rs:15:2: 15:2\n+        StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+        StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+        StorageLive(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+        StorageDead(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+        StorageDead(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+        StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+        return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2\n     }\n }"}, {"sha": "89f43d751381565cd5137dbf572285b872f041c0", "filename": "src/test/mir-opt/const_prop/read_immutable_static.main.ConstProp.diff", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,43 +2,43 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/read_immutable_static.rs:6:11: 6:11\n-      let _1: u8;                          // in scope 0 at $DIR/read_immutable_static.rs:7:9: 7:10\n-      let mut _2: u8;                      // in scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n-      let mut _3: &u8;                     // in scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n-      let mut _4: u8;                      // in scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n-      let mut _5: &u8;                     // in scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n+      let mut _0: ();                      // return place in scope 0 at $DIR/read_immutable_static.rs:+0:11: +0:11\n+      let _1: u8;                          // in scope 0 at $DIR/read_immutable_static.rs:+1:9: +1:10\n+      let mut _2: u8;                      // in scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n+      let mut _3: &u8;                     // in scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n+      let mut _4: u8;                      // in scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n+      let mut _5: &u8;                     // in scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/read_immutable_static.rs:7:9: 7:10\n+          debug x => _1;                   // in scope 1 at $DIR/read_immutable_static.rs:+1:9: +1:10\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/read_immutable_static.rs:7:9: 7:10\n-          StorageLive(_2);                 // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n-          StorageLive(_3);                 // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n-          _3 = const {alloc1: &u8};        // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n+          StorageLive(_1);                 // scope 0 at $DIR/read_immutable_static.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n+          StorageLive(_3);                 // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n+          _3 = const {alloc1: &u8};        // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n                                            // mir::Constant\n                                            // + span: $DIR/read_immutable_static.rs:7:13: 7:16\n                                            // + literal: Const { ty: &u8, val: Value(Scalar(alloc1)) }\n--         _2 = (*_3);                      // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n-+         _2 = const 2_u8;                 // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n-          StorageLive(_4);                 // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n-          StorageLive(_5);                 // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n-          _5 = const {alloc1: &u8};        // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n+-         _2 = (*_3);                      // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n++         _2 = const 2_u8;                 // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n+          StorageLive(_4);                 // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n+          StorageLive(_5);                 // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n+          _5 = const {alloc1: &u8};        // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n                                            // mir::Constant\n                                            // + span: $DIR/read_immutable_static.rs:7:19: 7:22\n                                            // + literal: Const { ty: &u8, val: Value(Scalar(alloc1)) }\n--         _4 = (*_5);                      // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n--         _1 = Add(move _2, move _4);      // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:22\n-+         _4 = const 2_u8;                 // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n-+         _1 = const 4_u8;                 // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:22\n-          StorageDead(_4);                 // scope 0 at $DIR/read_immutable_static.rs:7:21: 7:22\n-          StorageDead(_2);                 // scope 0 at $DIR/read_immutable_static.rs:7:21: 7:22\n-          StorageDead(_5);                 // scope 0 at $DIR/read_immutable_static.rs:7:22: 7:23\n-          StorageDead(_3);                 // scope 0 at $DIR/read_immutable_static.rs:7:22: 7:23\n-          nop;                             // scope 0 at $DIR/read_immutable_static.rs:6:11: 8:2\n-          StorageDead(_1);                 // scope 0 at $DIR/read_immutable_static.rs:8:1: 8:2\n-          return;                          // scope 0 at $DIR/read_immutable_static.rs:8:2: 8:2\n+-         _4 = (*_5);                      // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n+-         _1 = Add(move _2, move _4);      // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:22\n++         _4 = const 2_u8;                 // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n++         _1 = const 4_u8;                 // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:22\n+          StorageDead(_4);                 // scope 0 at $DIR/read_immutable_static.rs:+1:21: +1:22\n+          StorageDead(_2);                 // scope 0 at $DIR/read_immutable_static.rs:+1:21: +1:22\n+          StorageDead(_5);                 // scope 0 at $DIR/read_immutable_static.rs:+1:22: +1:23\n+          StorageDead(_3);                 // scope 0 at $DIR/read_immutable_static.rs:+1:22: +1:23\n+          nop;                             // scope 0 at $DIR/read_immutable_static.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/read_immutable_static.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/read_immutable_static.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "c8b09220f1e446b91b2cc6cd562ac295285941e7", "filename": "src/test/mir-opt/const_prop/ref_deref.main.ConstProp.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,26 +2,26 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/ref_deref.rs:4:11: 4:11\n-      let _1: i32;                         // in scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n-      let mut _2: &i32;                    // in scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n-      let _3: i32;                         // in scope 0 at $DIR/ref_deref.rs:5:8: 5:9\n-      let mut _4: &i32;                    // in scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n+      let mut _0: ();                      // return place in scope 0 at $DIR/ref_deref.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n+      let mut _2: &i32;                    // in scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n+      let _3: i32;                         // in scope 0 at $DIR/ref_deref.rs:+1:8: +1:9\n+      let mut _4: &i32;                    // in scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n-          StorageLive(_2);                 // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n-          _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n+          StorageLive(_1);                 // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n+          _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref.rs:5:6: 5:10\n                                            // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n-          _2 = _4;                         // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n--         _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n-+         _1 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n-          StorageDead(_2);                 // scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n-          StorageDead(_1);                 // scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n-          nop;                             // scope 0 at $DIR/ref_deref.rs:4:11: 6:2\n-          return;                          // scope 0 at $DIR/ref_deref.rs:6:2: 6:2\n+          _2 = _4;                         // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n+-         _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n++         _1 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n+          StorageDead(_2);                 // scope 0 at $DIR/ref_deref.rs:+1:10: +1:11\n+          StorageDead(_1);                 // scope 0 at $DIR/ref_deref.rs:+1:10: +1:11\n+          nop;                             // scope 0 at $DIR/ref_deref.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/ref_deref.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "d141d2cf87bb7812ac4541e0f3776610f9b9dbdd", "filename": "src/test/mir-opt/const_prop/ref_deref.main.PromoteTemps.diff", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,29 +2,29 @@\n + // MIR for `main` after PromoteTemps\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/ref_deref.rs:4:11: 4:11\n-      let _1: i32;                         // in scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n-      let mut _2: &i32;                    // in scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n-      let _3: i32;                         // in scope 0 at $DIR/ref_deref.rs:5:8: 5:9\n-+     let mut _4: &i32;                    // in scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n+      let mut _0: ();                      // return place in scope 0 at $DIR/ref_deref.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n+      let mut _2: &i32;                    // in scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n+      let _3: i32;                         // in scope 0 at $DIR/ref_deref.rs:+1:8: +1:9\n++     let mut _4: &i32;                    // in scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n-          StorageLive(_2);                 // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n--         StorageLive(_3);                 // scope 0 at $DIR/ref_deref.rs:5:8: 5:9\n--         _3 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:5:8: 5:9\n--         _2 = &_3;                        // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n-+         _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n+          StorageLive(_1);                 // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n+-         StorageLive(_3);                 // scope 0 at $DIR/ref_deref.rs:+1:8: +1:9\n+-         _3 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:+1:8: +1:9\n+-         _2 = &_3;                        // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n++         _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n +                                          // mir::Constant\n +                                          // + span: $DIR/ref_deref.rs:5:6: 5:10\n +                                          // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n-+         _2 = &(*_4);                     // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n-          _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n--         StorageDead(_3);                 // scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n-          StorageDead(_2);                 // scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n-          StorageDead(_1);                 // scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n-          _0 = const ();                   // scope 0 at $DIR/ref_deref.rs:4:11: 6:2\n-          return;                          // scope 0 at $DIR/ref_deref.rs:6:2: 6:2\n++         _2 = &(*_4);                     // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n+          _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n+-         StorageDead(_3);                 // scope 0 at $DIR/ref_deref.rs:+1:10: +1:11\n+          StorageDead(_2);                 // scope 0 at $DIR/ref_deref.rs:+1:10: +1:11\n+          StorageDead(_1);                 // scope 0 at $DIR/ref_deref.rs:+1:10: +1:11\n+          _0 = const ();                   // scope 0 at $DIR/ref_deref.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/ref_deref.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "f0c89caeac6454aea872587c7593aa88e59d0efa", "filename": "src/test/mir-opt/const_prop/ref_deref_project.main.ConstProp.diff", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,25 +2,25 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/ref_deref_project.rs:4:11: 4:11\n-      let _1: i32;                         // in scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n-      let mut _2: &i32;                    // in scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n-      let _3: (i32, i32);                  // in scope 0 at $DIR/ref_deref_project.rs:5:8: 5:14\n-      let mut _4: &(i32, i32);             // in scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n+      let mut _0: ();                      // return place in scope 0 at $DIR/ref_deref_project.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/ref_deref_project.rs:+1:5: +1:17\n+      let mut _2: &i32;                    // in scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n+      let _3: (i32, i32);                  // in scope 0 at $DIR/ref_deref_project.rs:+1:8: +1:14\n+      let mut _4: &(i32, i32);             // in scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n-          StorageLive(_2);                 // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n-          _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n+          StorageLive(_1);                 // scope 0 at $DIR/ref_deref_project.rs:+1:5: +1:17\n+          StorageLive(_2);                 // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n+          _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n                                            // + literal: Const { ty: &(i32, i32), val: Unevaluated(main, [], Some(promoted[0])) }\n-          _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n-          _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n-          StorageDead(_2);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n-          StorageDead(_1);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n-          nop;                             // scope 0 at $DIR/ref_deref_project.rs:4:11: 6:2\n-          return;                          // scope 0 at $DIR/ref_deref_project.rs:6:2: 6:2\n+          _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n+          _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:+1:5: +1:17\n+          StorageDead(_2);                 // scope 0 at $DIR/ref_deref_project.rs:+1:17: +1:18\n+          StorageDead(_1);                 // scope 0 at $DIR/ref_deref_project.rs:+1:17: +1:18\n+          nop;                             // scope 0 at $DIR/ref_deref_project.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/ref_deref_project.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "d2554028792c133b793e6e24bcf97b9373b4b828", "filename": "src/test/mir-opt/const_prop/ref_deref_project.main.PromoteTemps.diff", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,29 +2,29 @@\n + // MIR for `main` after PromoteTemps\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/ref_deref_project.rs:4:11: 4:11\n-      let _1: i32;                         // in scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n-      let mut _2: &i32;                    // in scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n-      let _3: (i32, i32);                  // in scope 0 at $DIR/ref_deref_project.rs:5:8: 5:14\n-+     let mut _4: &(i32, i32);             // in scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n+      let mut _0: ();                      // return place in scope 0 at $DIR/ref_deref_project.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/ref_deref_project.rs:+1:5: +1:17\n+      let mut _2: &i32;                    // in scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n+      let _3: (i32, i32);                  // in scope 0 at $DIR/ref_deref_project.rs:+1:8: +1:14\n++     let mut _4: &(i32, i32);             // in scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n-          StorageLive(_2);                 // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n--         StorageLive(_3);                 // scope 0 at $DIR/ref_deref_project.rs:5:8: 5:14\n--         _3 = (const 4_i32, const 5_i32); // scope 0 at $DIR/ref_deref_project.rs:5:8: 5:14\n--         _2 = &(_3.1: i32);               // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n-+         _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n+          StorageLive(_1);                 // scope 0 at $DIR/ref_deref_project.rs:+1:5: +1:17\n+          StorageLive(_2);                 // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n+-         StorageLive(_3);                 // scope 0 at $DIR/ref_deref_project.rs:+1:8: +1:14\n+-         _3 = (const 4_i32, const 5_i32); // scope 0 at $DIR/ref_deref_project.rs:+1:8: +1:14\n+-         _2 = &(_3.1: i32);               // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n++         _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n +                                          // mir::Constant\n +                                          // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n +                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(main, [], Some(promoted[0])) }\n-+         _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n-          _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n--         StorageDead(_3);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n-          StorageDead(_2);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n-          StorageDead(_1);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n-          _0 = const ();                   // scope 0 at $DIR/ref_deref_project.rs:4:11: 6:2\n-          return;                          // scope 0 at $DIR/ref_deref_project.rs:6:2: 6:2\n++         _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n+          _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:+1:5: +1:17\n+-         StorageDead(_3);                 // scope 0 at $DIR/ref_deref_project.rs:+1:17: +1:18\n+          StorageDead(_2);                 // scope 0 at $DIR/ref_deref_project.rs:+1:17: +1:18\n+          StorageDead(_1);                 // scope 0 at $DIR/ref_deref_project.rs:+1:17: +1:18\n+          _0 = const ();                   // scope 0 at $DIR/ref_deref_project.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/ref_deref_project.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "237a6f94aa7fde594d691b5b5b3f5822808dc275", "filename": "src/test/mir-opt/const_prop/reify_fn_ptr.main.ConstProp.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,28 +2,28 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/reify_fn_ptr.rs:3:11: 3:11\n-      let mut _1: *const fn();             // in scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:41\n-      let mut _2: usize;                   // in scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:26\n-      let mut _3: fn();                    // in scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:17\n+      let mut _0: ();                      // return place in scope 0 at $DIR/reify_fn_ptr.rs:+0:11: +0:11\n+      let mut _1: *const fn();             // in scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:41\n+      let mut _2: usize;                   // in scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:26\n+      let mut _3: fn();                    // in scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:17\n       scope 1 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:41\n-          StorageLive(_2);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:26\n-          StorageLive(_3);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:17\n-          _3 = main as fn() (Pointer(ReifyFnPointer)); // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:17\n+          StorageLive(_1);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:41\n+          StorageLive(_2);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:26\n+          StorageLive(_3);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:17\n+          _3 = main as fn() (Pointer(ReifyFnPointer)); // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:17\n                                            // mir::Constant\n                                            // + span: $DIR/reify_fn_ptr.rs:4:13: 4:17\n                                            // + literal: Const { ty: fn() {main}, val: Value(<ZST>) }\n-          _2 = move _3 as usize (PointerExposeAddress); // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:26\n-          StorageDead(_3);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:25: 4:26\n-          _1 = move _2 as *const fn() (PointerFromExposedAddress); // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:41\n-          StorageDead(_2);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:40: 4:41\n-          StorageDead(_1);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:41: 4:42\n-          nop;                             // scope 0 at $DIR/reify_fn_ptr.rs:3:11: 5:2\n-          return;                          // scope 0 at $DIR/reify_fn_ptr.rs:5:2: 5:2\n+          _2 = move _3 as usize (PointerExposeAddress); // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:26\n+          StorageDead(_3);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:25: +1:26\n+          _1 = move _2 as *const fn() (PointerFromExposedAddress); // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:41\n+          StorageDead(_2);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:40: +1:41\n+          StorageDead(_1);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:41: +1:42\n+          nop;                             // scope 0 at $DIR/reify_fn_ptr.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/reify_fn_ptr.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "7c4977996917eb46f2f9f1f554cc60aabc232f51", "filename": "src/test/mir-opt/const_prop/repeat.main.ConstProp.32bit.diff", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.32bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,42 +2,42 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/repeat.rs:5:11: 5:11\n-      let _1: u32;                         // in scope 0 at $DIR/repeat.rs:6:9: 6:10\n-      let mut _2: u32;                     // in scope 0 at $DIR/repeat.rs:6:18: 6:28\n-      let mut _3: [u32; 8];                // in scope 0 at $DIR/repeat.rs:6:18: 6:25\n-      let _4: usize;                       // in scope 0 at $DIR/repeat.rs:6:26: 6:27\n-      let mut _5: usize;                   // in scope 0 at $DIR/repeat.rs:6:18: 6:28\n-      let mut _6: bool;                    // in scope 0 at $DIR/repeat.rs:6:18: 6:28\n+      let mut _0: ();                      // return place in scope 0 at $DIR/repeat.rs:+0:11: +0:11\n+      let _1: u32;                         // in scope 0 at $DIR/repeat.rs:+1:9: +1:10\n+      let mut _2: u32;                     // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+      let mut _3: [u32; 8];                // in scope 0 at $DIR/repeat.rs:+1:18: +1:25\n+      let _4: usize;                       // in scope 0 at $DIR/repeat.rs:+1:26: +1:27\n+      let mut _5: usize;                   // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+      let mut _6: bool;                    // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/repeat.rs:6:9: 6:10\n+          debug x => _1;                   // in scope 1 at $DIR/repeat.rs:+1:9: +1:10\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/repeat.rs:6:9: 6:10\n-          StorageLive(_2);                 // scope 0 at $DIR/repeat.rs:6:18: 6:28\n-          StorageLive(_3);                 // scope 0 at $DIR/repeat.rs:6:18: 6:25\n-          _3 = [const 42_u32; 8];          // scope 0 at $DIR/repeat.rs:6:18: 6:25\n-          StorageLive(_4);                 // scope 0 at $DIR/repeat.rs:6:26: 6:27\n-          _4 = const 2_usize;              // scope 0 at $DIR/repeat.rs:6:26: 6:27\n-          _5 = const 8_usize;              // scope 0 at $DIR/repeat.rs:6:18: 6:28\n--         _6 = Lt(_4, _5);                 // scope 0 at $DIR/repeat.rs:6:18: 6:28\n--         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:6:18: 6:28\n-+         _6 = const true;                 // scope 0 at $DIR/repeat.rs:6:18: 6:28\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 8_usize, const 2_usize) -> bb1; // scope 0 at $DIR/repeat.rs:6:18: 6:28\n+          StorageLive(_1);                 // scope 0 at $DIR/repeat.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+          StorageLive(_3);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:25\n+          _3 = [const 42_u32; 8];          // scope 0 at $DIR/repeat.rs:+1:18: +1:25\n+          StorageLive(_4);                 // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n+          _4 = const 2_usize;              // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n+          _5 = const 8_usize;              // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+-         _6 = Lt(_4, _5);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+-         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n++         _6 = const true;                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 8_usize, const 2_usize) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n       }\n   \n       bb1: {\n--         _2 = _3[_4];                     // scope 0 at $DIR/repeat.rs:6:18: 6:28\n--         _1 = Add(move _2, const 0_u32);  // scope 0 at $DIR/repeat.rs:6:18: 6:32\n-+         _2 = const 42_u32;               // scope 0 at $DIR/repeat.rs:6:18: 6:28\n-+         _1 = const 42_u32;               // scope 0 at $DIR/repeat.rs:6:18: 6:32\n-          StorageDead(_2);                 // scope 0 at $DIR/repeat.rs:6:31: 6:32\n-          StorageDead(_4);                 // scope 0 at $DIR/repeat.rs:6:32: 6:33\n-          StorageDead(_3);                 // scope 0 at $DIR/repeat.rs:6:32: 6:33\n-          nop;                             // scope 0 at $DIR/repeat.rs:5:11: 7:2\n-          StorageDead(_1);                 // scope 0 at $DIR/repeat.rs:7:1: 7:2\n-          return;                          // scope 0 at $DIR/repeat.rs:7:2: 7:2\n+-         _2 = _3[_4];                     // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+-         _1 = Add(move _2, const 0_u32);  // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n++         _2 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n++         _1 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n+          StorageDead(_2);                 // scope 0 at $DIR/repeat.rs:+1:31: +1:32\n+          StorageDead(_4);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n+          StorageDead(_3);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n+          nop;                             // scope 0 at $DIR/repeat.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/repeat.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/repeat.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "7c4977996917eb46f2f9f1f554cc60aabc232f51", "filename": "src/test/mir-opt/const_prop/repeat.main.ConstProp.64bit.diff", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.64bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,42 +2,42 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/repeat.rs:5:11: 5:11\n-      let _1: u32;                         // in scope 0 at $DIR/repeat.rs:6:9: 6:10\n-      let mut _2: u32;                     // in scope 0 at $DIR/repeat.rs:6:18: 6:28\n-      let mut _3: [u32; 8];                // in scope 0 at $DIR/repeat.rs:6:18: 6:25\n-      let _4: usize;                       // in scope 0 at $DIR/repeat.rs:6:26: 6:27\n-      let mut _5: usize;                   // in scope 0 at $DIR/repeat.rs:6:18: 6:28\n-      let mut _6: bool;                    // in scope 0 at $DIR/repeat.rs:6:18: 6:28\n+      let mut _0: ();                      // return place in scope 0 at $DIR/repeat.rs:+0:11: +0:11\n+      let _1: u32;                         // in scope 0 at $DIR/repeat.rs:+1:9: +1:10\n+      let mut _2: u32;                     // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+      let mut _3: [u32; 8];                // in scope 0 at $DIR/repeat.rs:+1:18: +1:25\n+      let _4: usize;                       // in scope 0 at $DIR/repeat.rs:+1:26: +1:27\n+      let mut _5: usize;                   // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+      let mut _6: bool;                    // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/repeat.rs:6:9: 6:10\n+          debug x => _1;                   // in scope 1 at $DIR/repeat.rs:+1:9: +1:10\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/repeat.rs:6:9: 6:10\n-          StorageLive(_2);                 // scope 0 at $DIR/repeat.rs:6:18: 6:28\n-          StorageLive(_3);                 // scope 0 at $DIR/repeat.rs:6:18: 6:25\n-          _3 = [const 42_u32; 8];          // scope 0 at $DIR/repeat.rs:6:18: 6:25\n-          StorageLive(_4);                 // scope 0 at $DIR/repeat.rs:6:26: 6:27\n-          _4 = const 2_usize;              // scope 0 at $DIR/repeat.rs:6:26: 6:27\n-          _5 = const 8_usize;              // scope 0 at $DIR/repeat.rs:6:18: 6:28\n--         _6 = Lt(_4, _5);                 // scope 0 at $DIR/repeat.rs:6:18: 6:28\n--         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:6:18: 6:28\n-+         _6 = const true;                 // scope 0 at $DIR/repeat.rs:6:18: 6:28\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 8_usize, const 2_usize) -> bb1; // scope 0 at $DIR/repeat.rs:6:18: 6:28\n+          StorageLive(_1);                 // scope 0 at $DIR/repeat.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+          StorageLive(_3);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:25\n+          _3 = [const 42_u32; 8];          // scope 0 at $DIR/repeat.rs:+1:18: +1:25\n+          StorageLive(_4);                 // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n+          _4 = const 2_usize;              // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n+          _5 = const 8_usize;              // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+-         _6 = Lt(_4, _5);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+-         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n++         _6 = const true;                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 8_usize, const 2_usize) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n       }\n   \n       bb1: {\n--         _2 = _3[_4];                     // scope 0 at $DIR/repeat.rs:6:18: 6:28\n--         _1 = Add(move _2, const 0_u32);  // scope 0 at $DIR/repeat.rs:6:18: 6:32\n-+         _2 = const 42_u32;               // scope 0 at $DIR/repeat.rs:6:18: 6:28\n-+         _1 = const 42_u32;               // scope 0 at $DIR/repeat.rs:6:18: 6:32\n-          StorageDead(_2);                 // scope 0 at $DIR/repeat.rs:6:31: 6:32\n-          StorageDead(_4);                 // scope 0 at $DIR/repeat.rs:6:32: 6:33\n-          StorageDead(_3);                 // scope 0 at $DIR/repeat.rs:6:32: 6:33\n-          nop;                             // scope 0 at $DIR/repeat.rs:5:11: 7:2\n-          StorageDead(_1);                 // scope 0 at $DIR/repeat.rs:7:1: 7:2\n-          return;                          // scope 0 at $DIR/repeat.rs:7:2: 7:2\n+-         _2 = _3[_4];                     // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+-         _1 = Add(move _2, const 0_u32);  // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n++         _2 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n++         _1 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n+          StorageDead(_2);                 // scope 0 at $DIR/repeat.rs:+1:31: +1:32\n+          StorageDead(_4);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n+          StorageDead(_3);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n+          nop;                             // scope 0 at $DIR/repeat.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/repeat.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/repeat.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "5ebd8a52079d7e4e7377e7024c218636d6e38c88", "filename": "src/test/mir-opt/const_prop/return_place.add.ConstProp.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,20 +2,20 @@\n + // MIR for `add` after ConstProp\n   \n   fn add() -> u32 {\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/return_place.rs:5:13: 5:16\n-      let mut _1: (u32, bool);             // in scope 0 at $DIR/return_place.rs:6:5: 6:10\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/return_place.rs:+0:13: +0:16\n+      let mut _1: (u32, bool);             // in scope 0 at $DIR/return_place.rs:+1:5: +1:10\n   \n       bb0: {\n--         _1 = CheckedAdd(const 2_u32, const 2_u32); // scope 0 at $DIR/return_place.rs:6:5: 6:10\n--         assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:6:5: 6:10\n-+         _1 = const (4_u32, false);       // scope 0 at $DIR/return_place.rs:6:5: 6:10\n-+         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:6:5: 6:10\n+-         _1 = CheckedAdd(const 2_u32, const 2_u32); // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+-         assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n++         _1 = const (4_u32, false);       // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n       }\n   \n       bb1: {\n--         _0 = move (_1.0: u32);           // scope 0 at $DIR/return_place.rs:6:5: 6:10\n-+         _0 = const 4_u32;                // scope 0 at $DIR/return_place.rs:6:5: 6:10\n-          return;                          // scope 0 at $DIR/return_place.rs:7:2: 7:2\n+-         _0 = move (_1.0: u32);           // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n++         _0 = const 4_u32;                // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+          return;                          // scope 0 at $DIR/return_place.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "ececd9942838d9a607c1cee14bc812e1ba830453", "filename": "src/test/mir-opt/const_prop/return_place.add.PreCodegen.before.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.add.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.add.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.add.PreCodegen.before.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,10 +1,10 @@\n // MIR for `add` before PreCodegen\n \n fn add() -> u32 {\n-    let mut _0: u32;                     // return place in scope 0 at $DIR/return_place.rs:5:13: 5:16\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/return_place.rs:+0:13: +0:16\n \n     bb0: {\n-        _0 = const 4_u32;                // scope 0 at $DIR/return_place.rs:6:5: 6:10\n-        return;                          // scope 0 at $DIR/return_place.rs:7:2: 7:2\n+        _0 = const 4_u32;                // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+        return;                          // scope 0 at $DIR/return_place.rs:+2:2: +2:2\n     }\n }"}, {"sha": "5920937e0fd4f100070e0cc94716a5d48b1803c7", "filename": "src/test/mir-opt/const_prop/scalar_literal_propagation.main.ConstProp.diff", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,34 +2,34 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/scalar_literal_propagation.rs:2:11: 2:11\n-      let _1: u32;                         // in scope 0 at $DIR/scalar_literal_propagation.rs:3:9: 3:10\n-      let _2: ();                          // in scope 0 at $DIR/scalar_literal_propagation.rs:4:5: 4:15\n-      let mut _3: u32;                     // in scope 0 at $DIR/scalar_literal_propagation.rs:4:13: 4:14\n+      let mut _0: ();                      // return place in scope 0 at $DIR/scalar_literal_propagation.rs:+0:11: +0:11\n+      let _1: u32;                         // in scope 0 at $DIR/scalar_literal_propagation.rs:+1:9: +1:10\n+      let _2: ();                          // in scope 0 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n+      let mut _3: u32;                     // in scope 0 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/scalar_literal_propagation.rs:3:9: 3:10\n+          debug x => _1;                   // in scope 1 at $DIR/scalar_literal_propagation.rs:+1:9: +1:10\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/scalar_literal_propagation.rs:3:9: 3:10\n-          _1 = const 1_u32;                // scope 0 at $DIR/scalar_literal_propagation.rs:3:13: 3:14\n-          StorageLive(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:4:5: 4:15\n-          StorageLive(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:4:13: 4:14\n--         _3 = _1;                         // scope 1 at $DIR/scalar_literal_propagation.rs:4:13: 4:14\n--         _2 = consume(move _3) -> bb1;    // scope 1 at $DIR/scalar_literal_propagation.rs:4:5: 4:15\n-+         _3 = const 1_u32;                // scope 1 at $DIR/scalar_literal_propagation.rs:4:13: 4:14\n-+         _2 = consume(const 1_u32) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:4:5: 4:15\n+          StorageLive(_1);                 // scope 0 at $DIR/scalar_literal_propagation.rs:+1:9: +1:10\n+          _1 = const 1_u32;                // scope 0 at $DIR/scalar_literal_propagation.rs:+1:13: +1:14\n+          StorageLive(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n+          StorageLive(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n+-         _3 = _1;                         // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n+-         _2 = consume(move _3) -> bb1;    // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n++         _3 = const 1_u32;                // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n++         _2 = consume(const 1_u32) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n                                            // mir::Constant\n                                            // + span: $DIR/scalar_literal_propagation.rs:4:5: 4:12\n                                            // + literal: Const { ty: fn(u32) {consume}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:4:14: 4:15\n-          StorageDead(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:4:15: 4:16\n-          nop;                             // scope 0 at $DIR/scalar_literal_propagation.rs:2:11: 5:2\n-          StorageDead(_1);                 // scope 0 at $DIR/scalar_literal_propagation.rs:5:1: 5:2\n-          return;                          // scope 0 at $DIR/scalar_literal_propagation.rs:5:2: 5:2\n+          StorageDead(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:14: +2:15\n+          StorageDead(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:15: +2:16\n+          nop;                             // scope 0 at $DIR/scalar_literal_propagation.rs:+0:11: +3:2\n+          StorageDead(_1);                 // scope 0 at $DIR/scalar_literal_propagation.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/scalar_literal_propagation.rs:+3:2: +3:2\n       }\n   }\n   "}, {"sha": "0ebfbca21391f4d7ca9419a2a2b28971e0cd98a1", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.32bit.diff", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,52 +2,52 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/slice_len.rs:4:11: 4:11\n-      let _1: u32;                         // in scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-      let mut _2: &[u32];                  // in scope 0 at $DIR/slice_len.rs:5:5: 5:30\n-      let mut _3: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-      let _4: &[u32; 3];                   // in scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-      let _5: [u32; 3];                    // in scope 0 at $DIR/slice_len.rs:5:7: 5:19\n-      let _6: usize;                       // in scope 0 at $DIR/slice_len.rs:5:31: 5:32\n-      let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-      let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-      let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-      let mut _10: &[u32; 3];              // in scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+      let mut _0: ();                      // return place in scope 0 at $DIR/slice_len.rs:+0:11: +0:11\n+      let _1: u32;                         // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+      let mut _2: &[u32];                  // in scope 0 at $DIR/slice_len.rs:+1:5: +1:30\n+      let mut _3: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+      let _4: &[u32; 3];                   // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+      let _5: [u32; 3];                    // in scope 0 at $DIR/slice_len.rs:+1:7: +1:19\n+      let _6: usize;                       // in scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n+      let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+      let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+      let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+      let mut _10: &[u32; 3];              // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-          StorageLive(_2);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:30\n-          StorageLive(_3);                 // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-          StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-          _9 = const main::promoted[0];    // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          StorageLive(_1);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          StorageLive(_2);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:30\n+          StorageLive(_3);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _9 = const main::promoted[0];    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:5:6: 5:19\n                                            // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _4 = _9;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-          _3 = _4;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-          StorageLive(_10);                // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-          _10 = _3;                        // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-          _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-          StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:5:18: 5:19\n-          StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n-          _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n-          _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-          StorageDead(_10);                // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n--         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n--         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+          _4 = _9;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _3 = _4;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          StorageLive(_10);                // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _10 = _3;                        // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:+1:18: +1:19\n+          StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n+          _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n+          _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          StorageDead(_10);                // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+-         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n       }\n   \n       bb1: {\n--         _1 = (*_2)[_6];                  // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+         _1 = const 2_u32;                // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-          StorageDead(_6);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34\n-          StorageDead(_4);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34\n-          StorageDead(_2);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34\n-          StorageDead(_1);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34\n-          nop;                             // scope 0 at $DIR/slice_len.rs:4:11: 6:2\n-          return;                          // scope 0 at $DIR/slice_len.rs:6:2: 6:2\n+-         _1 = (*_2)[_6];                  // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         _1 = const 2_u32;                // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          StorageDead(_6);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n+          StorageDead(_4);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n+          StorageDead(_2);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n+          StorageDead(_1);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n+          nop;                             // scope 0 at $DIR/slice_len.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/slice_len.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "0ebfbca21391f4d7ca9419a2a2b28971e0cd98a1", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.64bit.diff", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,52 +2,52 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/slice_len.rs:4:11: 4:11\n-      let _1: u32;                         // in scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-      let mut _2: &[u32];                  // in scope 0 at $DIR/slice_len.rs:5:5: 5:30\n-      let mut _3: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-      let _4: &[u32; 3];                   // in scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-      let _5: [u32; 3];                    // in scope 0 at $DIR/slice_len.rs:5:7: 5:19\n-      let _6: usize;                       // in scope 0 at $DIR/slice_len.rs:5:31: 5:32\n-      let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-      let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-      let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-      let mut _10: &[u32; 3];              // in scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+      let mut _0: ();                      // return place in scope 0 at $DIR/slice_len.rs:+0:11: +0:11\n+      let _1: u32;                         // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+      let mut _2: &[u32];                  // in scope 0 at $DIR/slice_len.rs:+1:5: +1:30\n+      let mut _3: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+      let _4: &[u32; 3];                   // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+      let _5: [u32; 3];                    // in scope 0 at $DIR/slice_len.rs:+1:7: +1:19\n+      let _6: usize;                       // in scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n+      let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+      let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+      let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+      let mut _10: &[u32; 3];              // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-          StorageLive(_2);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:30\n-          StorageLive(_3);                 // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-          StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-          _9 = const main::promoted[0];    // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          StorageLive(_1);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          StorageLive(_2);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:30\n+          StorageLive(_3);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _9 = const main::promoted[0];    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:5:6: 5:19\n                                            // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _4 = _9;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-          _3 = _4;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-          StorageLive(_10);                // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-          _10 = _3;                        // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-          _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-          StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:5:18: 5:19\n-          StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n-          _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n-          _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-          StorageDead(_10);                // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n--         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n--         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+          _4 = _9;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _3 = _4;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          StorageLive(_10);                // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _10 = _3;                        // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:+1:18: +1:19\n+          StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n+          _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n+          _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          StorageDead(_10);                // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+-         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n       }\n   \n       bb1: {\n--         _1 = (*_2)[_6];                  // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+         _1 = const 2_u32;                // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-          StorageDead(_6);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34\n-          StorageDead(_4);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34\n-          StorageDead(_2);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34\n-          StorageDead(_1);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34\n-          nop;                             // scope 0 at $DIR/slice_len.rs:4:11: 6:2\n-          return;                          // scope 0 at $DIR/slice_len.rs:6:2: 6:2\n+-         _1 = (*_2)[_6];                  // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         _1 = const 2_u32;                // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          StorageDead(_6);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n+          StorageDead(_4);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n+          StorageDead(_2);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n+          StorageDead(_1);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n+          nop;                             // scope 0 at $DIR/slice_len.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/slice_len.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "9d7c2784d8b2cab9060446aac746879752e33243", "filename": "src/test/mir-opt/const_prop/switch_int.main.ConstProp.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,33 +2,33 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/switch_int.rs:6:11: 6:11\n-      let mut _1: i32;                     // in scope 0 at $DIR/switch_int.rs:7:11: 7:12\n+      let mut _0: ();                      // return place in scope 0 at $DIR/switch_int.rs:+0:11: +0:11\n+      let mut _1: i32;                     // in scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/switch_int.rs:7:11: 7:12\n-          _1 = const 1_i32;                // scope 0 at $DIR/switch_int.rs:7:11: 7:12\n--         switchInt(_1) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:7:5: 7:12\n-+         switchInt(const 1_i32) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:7:5: 7:12\n+          StorageLive(_1);                 // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n+          _1 = const 1_i32;                // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n+-         switchInt(_1) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n++         switchInt(const 1_i32) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n       }\n   \n       bb1: {\n-          _0 = foo(const -1_i32) -> bb3;   // scope 0 at $DIR/switch_int.rs:9:14: 9:21\n+          _0 = foo(const -1_i32) -> bb3;   // scope 0 at $DIR/switch_int.rs:+3:14: +3:21\n                                            // mir::Constant\n                                            // + span: $DIR/switch_int.rs:9:14: 9:17\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n-          _0 = foo(const 0_i32) -> bb3;    // scope 0 at $DIR/switch_int.rs:8:14: 8:20\n+          _0 = foo(const 0_i32) -> bb3;    // scope 0 at $DIR/switch_int.rs:+2:14: +2:20\n                                            // mir::Constant\n                                            // + span: $DIR/switch_int.rs:8:14: 8:17\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n       }\n   \n       bb3: {\n-          StorageDead(_1);                 // scope 0 at $DIR/switch_int.rs:11:1: 11:2\n-          return;                          // scope 0 at $DIR/switch_int.rs:11:2: 11:2\n+          StorageDead(_1);                 // scope 0 at $DIR/switch_int.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/switch_int.rs:+5:2: +5:2\n       }\n   }\n   "}, {"sha": "74f9eafe42061cd0724e94a550eef3aa487dea20", "filename": "src/test/mir-opt/const_prop/switch_int.main.SimplifyConstCondition-after-const-prop.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,33 +2,33 @@\n + // MIR for `main` after SimplifyConstCondition-after-const-prop\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/switch_int.rs:6:11: 6:11\n-      let mut _1: i32;                     // in scope 0 at $DIR/switch_int.rs:7:11: 7:12\n+      let mut _0: ();                      // return place in scope 0 at $DIR/switch_int.rs:+0:11: +0:11\n+      let mut _1: i32;                     // in scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/switch_int.rs:7:11: 7:12\n-          _1 = const 1_i32;                // scope 0 at $DIR/switch_int.rs:7:11: 7:12\n--         switchInt(const 1_i32) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:7:5: 7:12\n-+         goto -> bb2;                     // scope 0 at $DIR/switch_int.rs:7:5: 7:12\n+          StorageLive(_1);                 // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n+          _1 = const 1_i32;                // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n+-         switchInt(const 1_i32) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n++         goto -> bb2;                     // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n       }\n   \n       bb1: {\n-          _0 = foo(const -1_i32) -> bb3;   // scope 0 at $DIR/switch_int.rs:9:14: 9:21\n+          _0 = foo(const -1_i32) -> bb3;   // scope 0 at $DIR/switch_int.rs:+3:14: +3:21\n                                            // mir::Constant\n                                            // + span: $DIR/switch_int.rs:9:14: 9:17\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n-          _0 = foo(const 0_i32) -> bb3;    // scope 0 at $DIR/switch_int.rs:8:14: 8:20\n+          _0 = foo(const 0_i32) -> bb3;    // scope 0 at $DIR/switch_int.rs:+2:14: +2:20\n                                            // mir::Constant\n                                            // + span: $DIR/switch_int.rs:8:14: 8:17\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n       }\n   \n       bb3: {\n-          StorageDead(_1);                 // scope 0 at $DIR/switch_int.rs:11:1: 11:2\n-          return;                          // scope 0 at $DIR/switch_int.rs:11:2: 11:2\n+          StorageDead(_1);                 // scope 0 at $DIR/switch_int.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/switch_int.rs:+5:2: +5:2\n       }\n   }\n   "}, {"sha": "a0603c60dc79c534fc25e55e8d20d3375ccfbae1", "filename": "src/test/mir-opt/const_prop/tuple_literal_propagation.main.ConstProp.diff", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,35 +2,35 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/tuple_literal_propagation.rs:2:11: 2:11\n-      let _1: (u32, u32);                  // in scope 0 at $DIR/tuple_literal_propagation.rs:3:9: 3:10\n-      let _2: ();                          // in scope 0 at $DIR/tuple_literal_propagation.rs:5:5: 5:15\n-      let mut _3: (u32, u32);              // in scope 0 at $DIR/tuple_literal_propagation.rs:5:13: 5:14\n+      let mut _0: ();                      // return place in scope 0 at $DIR/tuple_literal_propagation.rs:+0:11: +0:11\n+      let _1: (u32, u32);                  // in scope 0 at $DIR/tuple_literal_propagation.rs:+1:9: +1:10\n+      let _2: ();                          // in scope 0 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n+      let mut _3: (u32, u32);              // in scope 0 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/tuple_literal_propagation.rs:3:9: 3:10\n+          debug x => _1;                   // in scope 1 at $DIR/tuple_literal_propagation.rs:+1:9: +1:10\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/tuple_literal_propagation.rs:3:9: 3:10\n-          Deinit(_1);                      // scope 0 at $DIR/tuple_literal_propagation.rs:3:13: 3:19\n-          (_1.0: u32) = const 1_u32;       // scope 0 at $DIR/tuple_literal_propagation.rs:3:13: 3:19\n-          (_1.1: u32) = const 2_u32;       // scope 0 at $DIR/tuple_literal_propagation.rs:3:13: 3:19\n-          StorageLive(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:5:5: 5:15\n-          StorageLive(_3);                 // scope 1 at $DIR/tuple_literal_propagation.rs:5:13: 5:14\n--         _3 = _1;                         // scope 1 at $DIR/tuple_literal_propagation.rs:5:13: 5:14\n-+         _3 = const (1_u32, 2_u32);       // scope 1 at $DIR/tuple_literal_propagation.rs:5:13: 5:14\n-          _2 = consume(move _3) -> bb1;    // scope 1 at $DIR/tuple_literal_propagation.rs:5:5: 5:15\n+          StorageLive(_1);                 // scope 0 at $DIR/tuple_literal_propagation.rs:+1:9: +1:10\n+          Deinit(_1);                      // scope 0 at $DIR/tuple_literal_propagation.rs:+1:13: +1:19\n+          (_1.0: u32) = const 1_u32;       // scope 0 at $DIR/tuple_literal_propagation.rs:+1:13: +1:19\n+          (_1.1: u32) = const 2_u32;       // scope 0 at $DIR/tuple_literal_propagation.rs:+1:13: +1:19\n+          StorageLive(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n+          StorageLive(_3);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n+-         _3 = _1;                         // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n++         _3 = const (1_u32, 2_u32);       // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n+          _2 = consume(move _3) -> bb1;    // scope 1 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n                                            // mir::Constant\n                                            // + span: $DIR/tuple_literal_propagation.rs:5:5: 5:12\n                                            // + literal: Const { ty: fn((u32, u32)) {consume}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 1 at $DIR/tuple_literal_propagation.rs:5:14: 5:15\n-          StorageDead(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:5:15: 5:16\n-          nop;                             // scope 0 at $DIR/tuple_literal_propagation.rs:2:11: 6:2\n-          StorageDead(_1);                 // scope 0 at $DIR/tuple_literal_propagation.rs:6:1: 6:2\n-          return;                          // scope 0 at $DIR/tuple_literal_propagation.rs:6:2: 6:2\n+          StorageDead(_3);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:14: +3:15\n+          StorageDead(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:15: +3:16\n+          nop;                             // scope 0 at $DIR/tuple_literal_propagation.rs:+0:11: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/tuple_literal_propagation.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/tuple_literal_propagation.rs:+4:2: +4:2\n       }\n   }\n   "}, {"sha": "459da2e335851a4082d7cafee84417cdcd151494", "filename": "src/test/mir-opt/const_prop_miscompile.bar.ConstProp.diff", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,41 +2,41 @@\n + // MIR for `bar` after ConstProp\n   \n   fn bar() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/const_prop_miscompile.rs:11:10: 11:10\n-      let mut _1: (i32,);                  // in scope 0 at $DIR/const_prop_miscompile.rs:12:9: 12:14\n-      let _2: ();                          // in scope 0 at $DIR/const_prop_miscompile.rs:13:5: 15:6\n-      let mut _3: *mut i32;                // in scope 0 at $DIR/const_prop_miscompile.rs:14:10: 14:22\n-      let mut _5: i32;                     // in scope 0 at $DIR/const_prop_miscompile.rs:16:13: 16:20\n+      let mut _0: ();                      // return place in scope 0 at $DIR/const_prop_miscompile.rs:+0:10: +0:10\n+      let mut _1: (i32,);                  // in scope 0 at $DIR/const_prop_miscompile.rs:+1:9: +1:14\n+      let _2: ();                          // in scope 0 at $DIR/const_prop_miscompile.rs:+2:5: +4:6\n+      let mut _3: *mut i32;                // in scope 0 at $DIR/const_prop_miscompile.rs:+3:10: +3:22\n+      let mut _5: i32;                     // in scope 0 at $DIR/const_prop_miscompile.rs:+5:13: +5:20\n       scope 1 {\n-          debug v => _1;                   // in scope 1 at $DIR/const_prop_miscompile.rs:12:9: 12:14\n-          let _4: bool;                    // in scope 1 at $DIR/const_prop_miscompile.rs:16:9: 16:10\n+          debug v => _1;                   // in scope 1 at $DIR/const_prop_miscompile.rs:+1:9: +1:14\n+          let _4: bool;                    // in scope 1 at $DIR/const_prop_miscompile.rs:+5:9: +5:10\n           scope 2 {\n           }\n           scope 3 {\n-              debug y => _4;               // in scope 3 at $DIR/const_prop_miscompile.rs:16:9: 16:10\n+              debug y => _4;               // in scope 3 at $DIR/const_prop_miscompile.rs:+5:9: +5:10\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:12:9: 12:14\n-          Deinit(_1);                      // scope 0 at $DIR/const_prop_miscompile.rs:12:17: 12:21\n-          (_1.0: i32) = const 1_i32;       // scope 0 at $DIR/const_prop_miscompile.rs:12:17: 12:21\n-          StorageLive(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:13:5: 15:6\n-          StorageLive(_3);                 // scope 2 at $DIR/const_prop_miscompile.rs:14:10: 14:22\n-          _3 = &raw mut (_1.0: i32);       // scope 2 at $DIR/const_prop_miscompile.rs:14:10: 14:22\n-          (*_3) = const 5_i32;             // scope 2 at $DIR/const_prop_miscompile.rs:14:9: 14:26\n-          StorageDead(_3);                 // scope 2 at $DIR/const_prop_miscompile.rs:14:26: 14:27\n-          nop;                             // scope 2 at $DIR/const_prop_miscompile.rs:13:5: 15:6\n-          StorageDead(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:15:5: 15:6\n-          StorageLive(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:16:9: 16:10\n-          StorageLive(_5);                 // scope 1 at $DIR/const_prop_miscompile.rs:16:13: 16:20\n-          _5 = (_1.0: i32);                // scope 1 at $DIR/const_prop_miscompile.rs:16:15: 16:18\n-          _4 = Eq(move _5, const 5_i32);   // scope 1 at $DIR/const_prop_miscompile.rs:16:13: 16:25\n-          StorageDead(_5);                 // scope 1 at $DIR/const_prop_miscompile.rs:16:24: 16:25\n-          nop;                             // scope 0 at $DIR/const_prop_miscompile.rs:11:10: 17:2\n-          StorageDead(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:17:1: 17:2\n-          StorageDead(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:17:1: 17:2\n-          return;                          // scope 0 at $DIR/const_prop_miscompile.rs:17:2: 17:2\n+          StorageLive(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:+1:9: +1:14\n+          Deinit(_1);                      // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n+          (_1.0: i32) = const 1_i32;       // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n+          StorageLive(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:+2:5: +4:6\n+          StorageLive(_3);                 // scope 2 at $DIR/const_prop_miscompile.rs:+3:10: +3:22\n+          _3 = &raw mut (_1.0: i32);       // scope 2 at $DIR/const_prop_miscompile.rs:+3:10: +3:22\n+          (*_3) = const 5_i32;             // scope 2 at $DIR/const_prop_miscompile.rs:+3:9: +3:26\n+          StorageDead(_3);                 // scope 2 at $DIR/const_prop_miscompile.rs:+3:26: +3:27\n+          nop;                             // scope 2 at $DIR/const_prop_miscompile.rs:+2:5: +4:6\n+          StorageDead(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:+4:5: +4:6\n+          StorageLive(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:+5:9: +5:10\n+          StorageLive(_5);                 // scope 1 at $DIR/const_prop_miscompile.rs:+5:13: +5:20\n+          _5 = (_1.0: i32);                // scope 1 at $DIR/const_prop_miscompile.rs:+5:15: +5:18\n+          _4 = Eq(move _5, const 5_i32);   // scope 1 at $DIR/const_prop_miscompile.rs:+5:13: +5:25\n+          StorageDead(_5);                 // scope 1 at $DIR/const_prop_miscompile.rs:+5:24: +5:25\n+          nop;                             // scope 0 at $DIR/const_prop_miscompile.rs:+0:10: +6:2\n+          StorageDead(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:+6:1: +6:2\n+          StorageDead(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:+6:1: +6:2\n+          return;                          // scope 0 at $DIR/const_prop_miscompile.rs:+6:2: +6:2\n       }\n   }\n   "}, {"sha": "e8bd98cf8cba103da7cc0aa8f6f55d92c69f468f", "filename": "src/test/mir-opt/const_prop_miscompile.foo.ConstProp.diff", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,35 +2,35 @@\n + // MIR for `foo` after ConstProp\n   \n   fn foo() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/const_prop_miscompile.rs:4:10: 4:10\n-      let mut _1: (i32,);                  // in scope 0 at $DIR/const_prop_miscompile.rs:5:9: 5:14\n-      let mut _2: &mut i32;                // in scope 0 at $DIR/const_prop_miscompile.rs:6:6: 6:14\n-      let mut _4: i32;                     // in scope 0 at $DIR/const_prop_miscompile.rs:7:13: 7:20\n+      let mut _0: ();                      // return place in scope 0 at $DIR/const_prop_miscompile.rs:+0:10: +0:10\n+      let mut _1: (i32,);                  // in scope 0 at $DIR/const_prop_miscompile.rs:+1:9: +1:14\n+      let mut _2: &mut i32;                // in scope 0 at $DIR/const_prop_miscompile.rs:+2:6: +2:14\n+      let mut _4: i32;                     // in scope 0 at $DIR/const_prop_miscompile.rs:+3:13: +3:20\n       scope 1 {\n-          debug u => _1;                   // in scope 1 at $DIR/const_prop_miscompile.rs:5:9: 5:14\n-          let _3: bool;                    // in scope 1 at $DIR/const_prop_miscompile.rs:7:9: 7:10\n+          debug u => _1;                   // in scope 1 at $DIR/const_prop_miscompile.rs:+1:9: +1:14\n+          let _3: bool;                    // in scope 1 at $DIR/const_prop_miscompile.rs:+3:9: +3:10\n           scope 2 {\n-              debug y => _3;               // in scope 2 at $DIR/const_prop_miscompile.rs:7:9: 7:10\n+              debug y => _3;               // in scope 2 at $DIR/const_prop_miscompile.rs:+3:9: +3:10\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:5:9: 5:14\n-          Deinit(_1);                      // scope 0 at $DIR/const_prop_miscompile.rs:5:17: 5:21\n-          (_1.0: i32) = const 1_i32;       // scope 0 at $DIR/const_prop_miscompile.rs:5:17: 5:21\n-          StorageLive(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:6:6: 6:14\n-          _2 = &mut (_1.0: i32);           // scope 1 at $DIR/const_prop_miscompile.rs:6:6: 6:14\n-          (*_2) = const 5_i32;             // scope 1 at $DIR/const_prop_miscompile.rs:6:5: 6:18\n-          StorageDead(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:6:18: 6:19\n-          StorageLive(_3);                 // scope 1 at $DIR/const_prop_miscompile.rs:7:9: 7:10\n-          StorageLive(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:7:13: 7:20\n-          _4 = (_1.0: i32);                // scope 1 at $DIR/const_prop_miscompile.rs:7:15: 7:18\n-          _3 = Eq(move _4, const 5_i32);   // scope 1 at $DIR/const_prop_miscompile.rs:7:13: 7:25\n-          StorageDead(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:7:24: 7:25\n-          nop;                             // scope 0 at $DIR/const_prop_miscompile.rs:4:10: 8:2\n-          StorageDead(_3);                 // scope 1 at $DIR/const_prop_miscompile.rs:8:1: 8:2\n-          StorageDead(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:8:1: 8:2\n-          return;                          // scope 0 at $DIR/const_prop_miscompile.rs:8:2: 8:2\n+          StorageLive(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:+1:9: +1:14\n+          Deinit(_1);                      // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n+          (_1.0: i32) = const 1_i32;       // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n+          StorageLive(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:+2:6: +2:14\n+          _2 = &mut (_1.0: i32);           // scope 1 at $DIR/const_prop_miscompile.rs:+2:6: +2:14\n+          (*_2) = const 5_i32;             // scope 1 at $DIR/const_prop_miscompile.rs:+2:5: +2:18\n+          StorageDead(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:+2:18: +2:19\n+          StorageLive(_3);                 // scope 1 at $DIR/const_prop_miscompile.rs:+3:9: +3:10\n+          StorageLive(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:+3:13: +3:20\n+          _4 = (_1.0: i32);                // scope 1 at $DIR/const_prop_miscompile.rs:+3:15: +3:18\n+          _3 = Eq(move _4, const 5_i32);   // scope 1 at $DIR/const_prop_miscompile.rs:+3:13: +3:25\n+          StorageDead(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:+3:24: +3:25\n+          nop;                             // scope 0 at $DIR/const_prop_miscompile.rs:+0:10: +4:2\n+          StorageDead(_3);                 // scope 1 at $DIR/const_prop_miscompile.rs:+4:1: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/const_prop_miscompile.rs:+4:2: +4:2\n       }\n   }\n   "}, {"sha": "58dd788b6afcaf152b31b161a8956f8801ab82b6", "filename": "src/test/mir-opt/dead-store-elimination/cycle.cycle.DeadStoreElimination.diff", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,74 +2,74 @@\n + // MIR for `cycle` after DeadStoreElimination\n   \n   fn cycle(_1: i32, _2: i32, _3: i32) -> () {\n-      debug x => _1;                       // in scope 0 at $DIR/cycle.rs:9:10: 9:15\n-      debug y => _2;                       // in scope 0 at $DIR/cycle.rs:9:22: 9:27\n-      debug z => _3;                       // in scope 0 at $DIR/cycle.rs:9:34: 9:39\n-      let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:9:46: 9:46\n-      let mut _4: ();                      // in scope 0 at $DIR/cycle.rs:9:1: 18:2\n-      let mut _5: bool;                    // in scope 0 at $DIR/cycle.rs:12:11: 12:17\n-      let _6: i32;                         // in scope 0 at $DIR/cycle.rs:13:13: 13:17\n-      let mut _7: i32;                     // in scope 0 at $DIR/cycle.rs:14:13: 14:14\n-      let mut _8: i32;                     // in scope 0 at $DIR/cycle.rs:15:13: 15:14\n-      let mut _9: i32;                     // in scope 0 at $DIR/cycle.rs:16:13: 16:17\n-      let mut _10: !;                      // in scope 0 at $DIR/cycle.rs:12:5: 17:6\n-      let _11: ();                         // in scope 0 at $DIR/cycle.rs:12:5: 17:6\n-      let mut _12: !;                      // in scope 0 at $DIR/cycle.rs:12:5: 17:6\n+      debug x => _1;                       // in scope 0 at $DIR/cycle.rs:+0:10: +0:15\n+      debug y => _2;                       // in scope 0 at $DIR/cycle.rs:+0:22: +0:27\n+      debug z => _3;                       // in scope 0 at $DIR/cycle.rs:+0:34: +0:39\n+      let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:+0:46: +0:46\n+      let mut _4: ();                      // in scope 0 at $DIR/cycle.rs:+0:1: +9:2\n+      let mut _5: bool;                    // in scope 0 at $DIR/cycle.rs:+3:11: +3:17\n+      let _6: i32;                         // in scope 0 at $DIR/cycle.rs:+4:13: +4:17\n+      let mut _7: i32;                     // in scope 0 at $DIR/cycle.rs:+5:13: +5:14\n+      let mut _8: i32;                     // in scope 0 at $DIR/cycle.rs:+6:13: +6:14\n+      let mut _9: i32;                     // in scope 0 at $DIR/cycle.rs:+7:13: +7:17\n+      let mut _10: !;                      // in scope 0 at $DIR/cycle.rs:+3:5: +8:6\n+      let _11: ();                         // in scope 0 at $DIR/cycle.rs:+3:5: +8:6\n+      let mut _12: !;                      // in scope 0 at $DIR/cycle.rs:+3:5: +8:6\n       scope 1 {\n-          debug temp => _6;                // in scope 1 at $DIR/cycle.rs:13:13: 13:17\n+          debug temp => _6;                // in scope 1 at $DIR/cycle.rs:+4:13: +4:17\n       }\n   \n       bb0: {\n-          goto -> bb1;                     // scope 0 at $DIR/cycle.rs:12:5: 17:6\n+          goto -> bb1;                     // scope 0 at $DIR/cycle.rs:+3:5: +8:6\n       }\n   \n       bb1: {\n-          StorageLive(_5);                 // scope 0 at $DIR/cycle.rs:12:11: 12:17\n-          _5 = cond() -> bb2;              // scope 0 at $DIR/cycle.rs:12:11: 12:17\n+          StorageLive(_5);                 // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n+          _5 = cond() -> bb2;              // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n                                            // mir::Constant\n                                            // + span: $DIR/cycle.rs:12:11: 12:15\n                                            // + literal: Const { ty: fn() -> bool {cond}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n-          switchInt(move _5) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/cycle.rs:12:11: 12:17\n+          switchInt(move _5) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n       }\n   \n       bb3: {\n-          StorageLive(_6);                 // scope 0 at $DIR/cycle.rs:13:13: 13:17\n--         _6 = _3;                         // scope 0 at $DIR/cycle.rs:13:20: 13:21\n-+         nop;                             // scope 0 at $DIR/cycle.rs:13:20: 13:21\n-          StorageLive(_7);                 // scope 1 at $DIR/cycle.rs:14:13: 14:14\n--         _7 = _2;                         // scope 1 at $DIR/cycle.rs:14:13: 14:14\n--         _3 = move _7;                    // scope 1 at $DIR/cycle.rs:14:9: 14:14\n-+         nop;                             // scope 1 at $DIR/cycle.rs:14:13: 14:14\n-+         nop;                             // scope 1 at $DIR/cycle.rs:14:9: 14:14\n-          StorageDead(_7);                 // scope 1 at $DIR/cycle.rs:14:13: 14:14\n-          StorageLive(_8);                 // scope 1 at $DIR/cycle.rs:15:13: 15:14\n--         _8 = _1;                         // scope 1 at $DIR/cycle.rs:15:13: 15:14\n--         _2 = move _8;                    // scope 1 at $DIR/cycle.rs:15:9: 15:14\n-+         nop;                             // scope 1 at $DIR/cycle.rs:15:13: 15:14\n-+         nop;                             // scope 1 at $DIR/cycle.rs:15:9: 15:14\n-          StorageDead(_8);                 // scope 1 at $DIR/cycle.rs:15:13: 15:14\n-          StorageLive(_9);                 // scope 1 at $DIR/cycle.rs:16:13: 16:17\n--         _9 = _6;                         // scope 1 at $DIR/cycle.rs:16:13: 16:17\n--         _1 = move _9;                    // scope 1 at $DIR/cycle.rs:16:9: 16:17\n-+         nop;                             // scope 1 at $DIR/cycle.rs:16:13: 16:17\n-+         nop;                             // scope 1 at $DIR/cycle.rs:16:9: 16:17\n-          StorageDead(_9);                 // scope 1 at $DIR/cycle.rs:16:16: 16:17\n--         _4 = const ();                   // scope 0 at $DIR/cycle.rs:12:18: 17:6\n-+         nop;                             // scope 0 at $DIR/cycle.rs:12:18: 17:6\n-          StorageDead(_6);                 // scope 0 at $DIR/cycle.rs:17:5: 17:6\n-          StorageDead(_5);                 // scope 0 at $DIR/cycle.rs:17:5: 17:6\n-          goto -> bb1;                     // scope 0 at $DIR/cycle.rs:12:5: 17:6\n+          StorageLive(_6);                 // scope 0 at $DIR/cycle.rs:+4:13: +4:17\n+-         _6 = _3;                         // scope 0 at $DIR/cycle.rs:+4:20: +4:21\n++         nop;                             // scope 0 at $DIR/cycle.rs:+4:20: +4:21\n+          StorageLive(_7);                 // scope 1 at $DIR/cycle.rs:+5:13: +5:14\n+-         _7 = _2;                         // scope 1 at $DIR/cycle.rs:+5:13: +5:14\n+-         _3 = move _7;                    // scope 1 at $DIR/cycle.rs:+5:9: +5:14\n++         nop;                             // scope 1 at $DIR/cycle.rs:+5:13: +5:14\n++         nop;                             // scope 1 at $DIR/cycle.rs:+5:9: +5:14\n+          StorageDead(_7);                 // scope 1 at $DIR/cycle.rs:+5:13: +5:14\n+          StorageLive(_8);                 // scope 1 at $DIR/cycle.rs:+6:13: +6:14\n+-         _8 = _1;                         // scope 1 at $DIR/cycle.rs:+6:13: +6:14\n+-         _2 = move _8;                    // scope 1 at $DIR/cycle.rs:+6:9: +6:14\n++         nop;                             // scope 1 at $DIR/cycle.rs:+6:13: +6:14\n++         nop;                             // scope 1 at $DIR/cycle.rs:+6:9: +6:14\n+          StorageDead(_8);                 // scope 1 at $DIR/cycle.rs:+6:13: +6:14\n+          StorageLive(_9);                 // scope 1 at $DIR/cycle.rs:+7:13: +7:17\n+-         _9 = _6;                         // scope 1 at $DIR/cycle.rs:+7:13: +7:17\n+-         _1 = move _9;                    // scope 1 at $DIR/cycle.rs:+7:9: +7:17\n++         nop;                             // scope 1 at $DIR/cycle.rs:+7:13: +7:17\n++         nop;                             // scope 1 at $DIR/cycle.rs:+7:9: +7:17\n+          StorageDead(_9);                 // scope 1 at $DIR/cycle.rs:+7:16: +7:17\n+-         _4 = const ();                   // scope 0 at $DIR/cycle.rs:+3:18: +8:6\n++         nop;                             // scope 0 at $DIR/cycle.rs:+3:18: +8:6\n+          StorageDead(_6);                 // scope 0 at $DIR/cycle.rs:+8:5: +8:6\n+          StorageDead(_5);                 // scope 0 at $DIR/cycle.rs:+8:5: +8:6\n+          goto -> bb1;                     // scope 0 at $DIR/cycle.rs:+3:5: +8:6\n       }\n   \n       bb4: {\n-          StorageLive(_11);                // scope 0 at $DIR/cycle.rs:12:5: 17:6\n-          _0 = const ();                   // scope 0 at $DIR/cycle.rs:12:5: 17:6\n-          StorageDead(_11);                // scope 0 at $DIR/cycle.rs:17:5: 17:6\n-          StorageDead(_5);                 // scope 0 at $DIR/cycle.rs:17:5: 17:6\n-          return;                          // scope 0 at $DIR/cycle.rs:18:2: 18:2\n+          StorageLive(_11);                // scope 0 at $DIR/cycle.rs:+3:5: +8:6\n+          _0 = const ();                   // scope 0 at $DIR/cycle.rs:+3:5: +8:6\n+          StorageDead(_11);                // scope 0 at $DIR/cycle.rs:+8:5: +8:6\n+          StorageDead(_5);                 // scope 0 at $DIR/cycle.rs:+8:5: +8:6\n+          return;                          // scope 0 at $DIR/cycle.rs:+9:2: +9:2\n       }\n   }\n   "}, {"sha": "89f1846b45de80caa4d58308b2caf901c6a960a3", "filename": "src/test/mir-opt/dead-store-elimination/provenance_soundness.pointer_to_int.DeadStoreElimination.diff", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fprovenance_soundness.pointer_to_int.DeadStoreElimination.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fprovenance_soundness.pointer_to_int.DeadStoreElimination.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fprovenance_soundness.pointer_to_int.DeadStoreElimination.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,34 +2,34 @@\n + // MIR for `pointer_to_int` after DeadStoreElimination\n   \n   fn pointer_to_int(_1: *mut i32) -> () {\n-      debug p => _1;                       // in scope 0 at $DIR/provenance_soundness.rs:7:19: 7:20\n-      let mut _0: ();                      // return place in scope 0 at $DIR/provenance_soundness.rs:7:32: 7:32\n-      let _2: usize;                       // in scope 0 at $DIR/provenance_soundness.rs:8:9: 8:11\n-      let mut _3: *mut i32;                // in scope 0 at $DIR/provenance_soundness.rs:8:14: 8:15\n-      let mut _5: *mut i32;                // in scope 0 at $DIR/provenance_soundness.rs:9:14: 9:15\n+      debug p => _1;                       // in scope 0 at $DIR/provenance_soundness.rs:+0:19: +0:20\n+      let mut _0: ();                      // return place in scope 0 at $DIR/provenance_soundness.rs:+0:32: +0:32\n+      let _2: usize;                       // in scope 0 at $DIR/provenance_soundness.rs:+1:9: +1:11\n+      let mut _3: *mut i32;                // in scope 0 at $DIR/provenance_soundness.rs:+1:14: +1:15\n+      let mut _5: *mut i32;                // in scope 0 at $DIR/provenance_soundness.rs:+2:14: +2:15\n       scope 1 {\n-          debug _x => _2;                  // in scope 1 at $DIR/provenance_soundness.rs:8:9: 8:11\n-          let _4: isize;                   // in scope 1 at $DIR/provenance_soundness.rs:9:9: 9:11\n+          debug _x => _2;                  // in scope 1 at $DIR/provenance_soundness.rs:+1:9: +1:11\n+          let _4: isize;                   // in scope 1 at $DIR/provenance_soundness.rs:+2:9: +2:11\n           scope 2 {\n-              debug _y => _4;              // in scope 2 at $DIR/provenance_soundness.rs:9:9: 9:11\n+              debug _y => _4;              // in scope 2 at $DIR/provenance_soundness.rs:+2:9: +2:11\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/provenance_soundness.rs:8:9: 8:11\n-          StorageLive(_3);                 // scope 0 at $DIR/provenance_soundness.rs:8:14: 8:15\n-          _3 = _1;                         // scope 0 at $DIR/provenance_soundness.rs:8:14: 8:15\n-          _2 = move _3 as usize (PointerExposeAddress); // scope 0 at $DIR/provenance_soundness.rs:8:14: 8:24\n-          StorageDead(_3);                 // scope 0 at $DIR/provenance_soundness.rs:8:23: 8:24\n-          StorageLive(_4);                 // scope 1 at $DIR/provenance_soundness.rs:9:9: 9:11\n-          StorageLive(_5);                 // scope 1 at $DIR/provenance_soundness.rs:9:14: 9:15\n-          _5 = _1;                         // scope 1 at $DIR/provenance_soundness.rs:9:14: 9:15\n-          _4 = move _5 as isize (PointerExposeAddress); // scope 1 at $DIR/provenance_soundness.rs:9:14: 9:24\n-          StorageDead(_5);                 // scope 1 at $DIR/provenance_soundness.rs:9:23: 9:24\n-          _0 = const ();                   // scope 0 at $DIR/provenance_soundness.rs:7:32: 10:2\n-          StorageDead(_4);                 // scope 1 at $DIR/provenance_soundness.rs:10:1: 10:2\n-          StorageDead(_2);                 // scope 0 at $DIR/provenance_soundness.rs:10:1: 10:2\n-          return;                          // scope 0 at $DIR/provenance_soundness.rs:10:2: 10:2\n+          StorageLive(_2);                 // scope 0 at $DIR/provenance_soundness.rs:+1:9: +1:11\n+          StorageLive(_3);                 // scope 0 at $DIR/provenance_soundness.rs:+1:14: +1:15\n+          _3 = _1;                         // scope 0 at $DIR/provenance_soundness.rs:+1:14: +1:15\n+          _2 = move _3 as usize (PointerExposeAddress); // scope 0 at $DIR/provenance_soundness.rs:+1:14: +1:24\n+          StorageDead(_3);                 // scope 0 at $DIR/provenance_soundness.rs:+1:23: +1:24\n+          StorageLive(_4);                 // scope 1 at $DIR/provenance_soundness.rs:+2:9: +2:11\n+          StorageLive(_5);                 // scope 1 at $DIR/provenance_soundness.rs:+2:14: +2:15\n+          _5 = _1;                         // scope 1 at $DIR/provenance_soundness.rs:+2:14: +2:15\n+          _4 = move _5 as isize (PointerExposeAddress); // scope 1 at $DIR/provenance_soundness.rs:+2:14: +2:24\n+          StorageDead(_5);                 // scope 1 at $DIR/provenance_soundness.rs:+2:23: +2:24\n+          _0 = const ();                   // scope 0 at $DIR/provenance_soundness.rs:+0:32: +3:2\n+          StorageDead(_4);                 // scope 1 at $DIR/provenance_soundness.rs:+3:1: +3:2\n+          StorageDead(_2);                 // scope 0 at $DIR/provenance_soundness.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/provenance_soundness.rs:+3:2: +3:2\n       }\n   }\n   "}, {"sha": "300f0d5dcaa98045e73724bf24ba2a21bd52fb00", "filename": "src/test/mir-opt/dead-store-elimination/provenance_soundness.retags.DeadStoreElimination.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fprovenance_soundness.retags.DeadStoreElimination.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fprovenance_soundness.retags.DeadStoreElimination.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fprovenance_soundness.retags.DeadStoreElimination.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,13 +2,13 @@\n + // MIR for `retags` after DeadStoreElimination\n   \n   fn retags(_1: &mut i32) -> () {\n-      debug _r => _1;                      // in scope 0 at $DIR/provenance_soundness.rs:13:11: 13:13\n-      let mut _0: ();                      // return place in scope 0 at $DIR/provenance_soundness.rs:13:25: 13:25\n+      debug _r => _1;                      // in scope 0 at $DIR/provenance_soundness.rs:+0:11: +0:13\n+      let mut _0: ();                      // return place in scope 0 at $DIR/provenance_soundness.rs:+0:25: +0:25\n   \n       bb0: {\n-          Retag([fn entry] _1);            // scope 0 at $DIR/provenance_soundness.rs:13:1: 13:27\n-          _0 = const ();                   // scope 0 at $DIR/provenance_soundness.rs:13:25: 13:27\n-          return;                          // scope 0 at $DIR/provenance_soundness.rs:13:27: 13:27\n+          Retag([fn entry] _1);            // scope 0 at $DIR/provenance_soundness.rs:+0:1: +0:27\n+          _0 = const ();                   // scope 0 at $DIR/provenance_soundness.rs:+0:25: +0:27\n+          return;                          // scope 0 at $DIR/provenance_soundness.rs:+0:27: +0:27\n       }\n   }\n   "}, {"sha": "db136485a21152e886ed324af07dbd29e414c95c", "filename": "src/test/mir-opt/deaggregator_test.bar.Deaggregator.diff", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.bar.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.bar.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.bar.Deaggregator.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,20 +2,20 @@\n + // MIR for `bar` after Deaggregator\n   \n   fn bar(_1: usize) -> Baz {\n-      debug a => _1;                       // in scope 0 at $DIR/deaggregator_test.rs:8:8: 8:9\n-      let mut _0: Baz;                     // return place in scope 0 at $DIR/deaggregator_test.rs:8:21: 8:24\n-      let mut _2: usize;                   // in scope 0 at $DIR/deaggregator_test.rs:9:14: 9:15\n+      debug a => _1;                       // in scope 0 at $DIR/deaggregator_test.rs:+0:8: +0:9\n+      let mut _0: Baz;                     // return place in scope 0 at $DIR/deaggregator_test.rs:+0:21: +0:24\n+      let mut _2: usize;                   // in scope 0 at $DIR/deaggregator_test.rs:+1:14: +1:15\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/deaggregator_test.rs:9:14: 9:15\n-          _2 = _1;                         // scope 0 at $DIR/deaggregator_test.rs:9:14: 9:15\n--         _0 = Baz { x: move _2, y: const 0f32, z: const false }; // scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n-+         Deinit(_0);                      // scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n-+         (_0.0: usize) = move _2;         // scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n-+         (_0.1: f32) = const 0f32;        // scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n-+         (_0.2: bool) = const false;      // scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n-          StorageDead(_2);                 // scope 0 at $DIR/deaggregator_test.rs:9:34: 9:35\n-          return;                          // scope 0 at $DIR/deaggregator_test.rs:10:2: 10:2\n+          StorageLive(_2);                 // scope 0 at $DIR/deaggregator_test.rs:+1:14: +1:15\n+          _2 = _1;                         // scope 0 at $DIR/deaggregator_test.rs:+1:14: +1:15\n+-         _0 = Baz { x: move _2, y: const 0f32, z: const false }; // scope 0 at $DIR/deaggregator_test.rs:+1:5: +1:35\n++         Deinit(_0);                      // scope 0 at $DIR/deaggregator_test.rs:+1:5: +1:35\n++         (_0.0: usize) = move _2;         // scope 0 at $DIR/deaggregator_test.rs:+1:5: +1:35\n++         (_0.1: f32) = const 0f32;        // scope 0 at $DIR/deaggregator_test.rs:+1:5: +1:35\n++         (_0.2: bool) = const false;      // scope 0 at $DIR/deaggregator_test.rs:+1:5: +1:35\n+          StorageDead(_2);                 // scope 0 at $DIR/deaggregator_test.rs:+1:34: +1:35\n+          return;                          // scope 0 at $DIR/deaggregator_test.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "f28c2b482af2dd6dc03d729651af0454a8466713", "filename": "src/test/mir-opt/deaggregator_test_enum.bar.Deaggregator.diff", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum.bar.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum.bar.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum.bar.Deaggregator.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,19 +2,19 @@\n + // MIR for `bar` after Deaggregator\n   \n   fn bar(_1: usize) -> Baz {\n-      debug a => _1;                       // in scope 0 at $DIR/deaggregator_test_enum.rs:7:8: 7:9\n-      let mut _0: Baz;                     // return place in scope 0 at $DIR/deaggregator_test_enum.rs:7:21: 7:24\n-      let mut _2: usize;                   // in scope 0 at $DIR/deaggregator_test_enum.rs:8:19: 8:20\n+      debug a => _1;                       // in scope 0 at $DIR/deaggregator_test_enum.rs:+0:8: +0:9\n+      let mut _0: Baz;                     // return place in scope 0 at $DIR/deaggregator_test_enum.rs:+0:21: +0:24\n+      let mut _2: usize;                   // in scope 0 at $DIR/deaggregator_test_enum.rs:+1:19: +1:20\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/deaggregator_test_enum.rs:8:19: 8:20\n-          _2 = _1;                         // scope 0 at $DIR/deaggregator_test_enum.rs:8:19: 8:20\n--         _0 = Baz::Foo { x: move _2 };    // scope 0 at $DIR/deaggregator_test_enum.rs:8:5: 8:22\n-+         Deinit(_0);                      // scope 0 at $DIR/deaggregator_test_enum.rs:8:5: 8:22\n-+         ((_0 as Foo).0: usize) = move _2; // scope 0 at $DIR/deaggregator_test_enum.rs:8:5: 8:22\n-+         discriminant(_0) = 1;            // scope 0 at $DIR/deaggregator_test_enum.rs:8:5: 8:22\n-          StorageDead(_2);                 // scope 0 at $DIR/deaggregator_test_enum.rs:8:21: 8:22\n-          return;                          // scope 0 at $DIR/deaggregator_test_enum.rs:9:2: 9:2\n+          StorageLive(_2);                 // scope 0 at $DIR/deaggregator_test_enum.rs:+1:19: +1:20\n+          _2 = _1;                         // scope 0 at $DIR/deaggregator_test_enum.rs:+1:19: +1:20\n+-         _0 = Baz::Foo { x: move _2 };    // scope 0 at $DIR/deaggregator_test_enum.rs:+1:5: +1:22\n++         Deinit(_0);                      // scope 0 at $DIR/deaggregator_test_enum.rs:+1:5: +1:22\n++         ((_0 as Foo).0: usize) = move _2; // scope 0 at $DIR/deaggregator_test_enum.rs:+1:5: +1:22\n++         discriminant(_0) = 1;            // scope 0 at $DIR/deaggregator_test_enum.rs:+1:5: +1:22\n+          StorageDead(_2);                 // scope 0 at $DIR/deaggregator_test_enum.rs:+1:21: +1:22\n+          return;                          // scope 0 at $DIR/deaggregator_test_enum.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "fb18089e040f08a47e7a86c5457469059c050df4", "filename": "src/test/mir-opt/deaggregator_test_enum_2.test1.Deaggregator.diff", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.test1.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.test1.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.test1.Deaggregator.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,44 +2,44 @@\n + // MIR for `test1` after Deaggregator\n   \n   fn test1(_1: bool, _2: i32) -> Foo {\n-      debug x => _1;                       // in scope 0 at $DIR/deaggregator_test_enum_2.rs:9:10: 9:11\n-      debug y => _2;                       // in scope 0 at $DIR/deaggregator_test_enum_2.rs:9:19: 9:20\n-      let mut _0: Foo;                     // return place in scope 0 at $DIR/deaggregator_test_enum_2.rs:9:30: 9:33\n-      let mut _3: bool;                    // in scope 0 at $DIR/deaggregator_test_enum_2.rs:10:8: 10:9\n-      let mut _4: i32;                     // in scope 0 at $DIR/deaggregator_test_enum_2.rs:11:16: 11:17\n-      let mut _5: i32;                     // in scope 0 at $DIR/deaggregator_test_enum_2.rs:13:16: 13:17\n+      debug x => _1;                       // in scope 0 at $DIR/deaggregator_test_enum_2.rs:+0:10: +0:11\n+      debug y => _2;                       // in scope 0 at $DIR/deaggregator_test_enum_2.rs:+0:19: +0:20\n+      let mut _0: Foo;                     // return place in scope 0 at $DIR/deaggregator_test_enum_2.rs:+0:30: +0:33\n+      let mut _3: bool;                    // in scope 0 at $DIR/deaggregator_test_enum_2.rs:+1:8: +1:9\n+      let mut _4: i32;                     // in scope 0 at $DIR/deaggregator_test_enum_2.rs:+2:16: +2:17\n+      let mut _5: i32;                     // in scope 0 at $DIR/deaggregator_test_enum_2.rs:+4:16: +4:17\n   \n       bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:10:8: 10:9\n-          _3 = _1;                         // scope 0 at $DIR/deaggregator_test_enum_2.rs:10:8: 10:9\n-          switchInt(move _3) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/deaggregator_test_enum_2.rs:10:8: 10:9\n+          StorageLive(_3);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:+1:8: +1:9\n+          _3 = _1;                         // scope 0 at $DIR/deaggregator_test_enum_2.rs:+1:8: +1:9\n+          switchInt(move _3) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/deaggregator_test_enum_2.rs:+1:8: +1:9\n       }\n   \n       bb1: {\n-          StorageLive(_4);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:16: 11:17\n-          _4 = _2;                         // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:16: 11:17\n--         _0 = Foo::A(move _4);            // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n-+         Deinit(_0);                      // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n-+         ((_0 as A).0: i32) = move _4;    // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n-+         discriminant(_0) = 0;            // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n-          StorageDead(_4);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:17: 11:18\n-          goto -> bb3;                     // scope 0 at $DIR/deaggregator_test_enum_2.rs:10:5: 14:6\n+          StorageLive(_4);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:+2:16: +2:17\n+          _4 = _2;                         // scope 0 at $DIR/deaggregator_test_enum_2.rs:+2:16: +2:17\n+-         _0 = Foo::A(move _4);            // scope 0 at $DIR/deaggregator_test_enum_2.rs:+2:9: +2:18\n++         Deinit(_0);                      // scope 0 at $DIR/deaggregator_test_enum_2.rs:+2:9: +2:18\n++         ((_0 as A).0: i32) = move _4;    // scope 0 at $DIR/deaggregator_test_enum_2.rs:+2:9: +2:18\n++         discriminant(_0) = 0;            // scope 0 at $DIR/deaggregator_test_enum_2.rs:+2:9: +2:18\n+          StorageDead(_4);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:+2:17: +2:18\n+          goto -> bb3;                     // scope 0 at $DIR/deaggregator_test_enum_2.rs:+1:5: +5:6\n       }\n   \n       bb2: {\n-          StorageLive(_5);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:16: 13:17\n-          _5 = _2;                         // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:16: 13:17\n--         _0 = Foo::B(move _5);            // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n-+         Deinit(_0);                      // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n-+         ((_0 as B).0: i32) = move _5;    // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n-+         discriminant(_0) = 1;            // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:9: 13:18\n-          StorageDead(_5);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:13:17: 13:18\n-          goto -> bb3;                     // scope 0 at $DIR/deaggregator_test_enum_2.rs:10:5: 14:6\n+          StorageLive(_5);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:+4:16: +4:17\n+          _5 = _2;                         // scope 0 at $DIR/deaggregator_test_enum_2.rs:+4:16: +4:17\n+-         _0 = Foo::B(move _5);            // scope 0 at $DIR/deaggregator_test_enum_2.rs:+4:9: +4:18\n++         Deinit(_0);                      // scope 0 at $DIR/deaggregator_test_enum_2.rs:+4:9: +4:18\n++         ((_0 as B).0: i32) = move _5;    // scope 0 at $DIR/deaggregator_test_enum_2.rs:+4:9: +4:18\n++         discriminant(_0) = 1;            // scope 0 at $DIR/deaggregator_test_enum_2.rs:+4:9: +4:18\n+          StorageDead(_5);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:+4:17: +4:18\n+          goto -> bb3;                     // scope 0 at $DIR/deaggregator_test_enum_2.rs:+1:5: +5:6\n       }\n   \n       bb3: {\n-          StorageDead(_3);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:14:5: 14:6\n-          return;                          // scope 0 at $DIR/deaggregator_test_enum_2.rs:15:2: 15:2\n+          StorageDead(_3);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:+5:5: +5:6\n+          return;                          // scope 0 at $DIR/deaggregator_test_enum_2.rs:+6:2: +6:2\n       }\n   }\n   "}, {"sha": "cf5da273c2894ffa4112404a37b28a536703702e", "filename": "src/test/mir-opt/deaggregator_test_multiple.test.Deaggregator.diff", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.test.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.test.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.test.Deaggregator.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,34 +2,34 @@\n + // MIR for `test` after Deaggregator\n   \n   fn test(_1: i32) -> [Foo; 2] {\n-      debug x => _1;                       // in scope 0 at $DIR/deaggregator_test_multiple.rs:9:9: 9:10\n-      let mut _0: [Foo; 2];                // return place in scope 0 at $DIR/deaggregator_test_multiple.rs:9:20: 9:28\n-      let mut _2: Foo;                     // in scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n-      let mut _3: i32;                     // in scope 0 at $DIR/deaggregator_test_multiple.rs:10:13: 10:14\n-      let mut _4: Foo;                     // in scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n-      let mut _5: i32;                     // in scope 0 at $DIR/deaggregator_test_multiple.rs:10:24: 10:25\n+      debug x => _1;                       // in scope 0 at $DIR/deaggregator_test_multiple.rs:+0:9: +0:10\n+      let mut _0: [Foo; 2];                // return place in scope 0 at $DIR/deaggregator_test_multiple.rs:+0:20: +0:28\n+      let mut _2: Foo;                     // in scope 0 at $DIR/deaggregator_test_multiple.rs:+1:6: +1:15\n+      let mut _3: i32;                     // in scope 0 at $DIR/deaggregator_test_multiple.rs:+1:13: +1:14\n+      let mut _4: Foo;                     // in scope 0 at $DIR/deaggregator_test_multiple.rs:+1:17: +1:26\n+      let mut _5: i32;                     // in scope 0 at $DIR/deaggregator_test_multiple.rs:+1:24: +1:25\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n-          StorageLive(_3);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:10:13: 10:14\n-          _3 = _1;                         // scope 0 at $DIR/deaggregator_test_multiple.rs:10:13: 10:14\n--         _2 = Foo::A(move _3);            // scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n-+         Deinit(_2);                      // scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n-+         ((_2 as A).0: i32) = move _3;    // scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n-+         discriminant(_2) = 0;            // scope 0 at $DIR/deaggregator_test_multiple.rs:10:6: 10:15\n-          StorageDead(_3);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:10:14: 10:15\n-          StorageLive(_4);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n-          StorageLive(_5);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:10:24: 10:25\n-          _5 = _1;                         // scope 0 at $DIR/deaggregator_test_multiple.rs:10:24: 10:25\n--         _4 = Foo::A(move _5);            // scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n-+         Deinit(_4);                      // scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n-+         ((_4 as A).0: i32) = move _5;    // scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n-+         discriminant(_4) = 0;            // scope 0 at $DIR/deaggregator_test_multiple.rs:10:17: 10:26\n-          StorageDead(_5);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:10:25: 10:26\n-          _0 = [move _2, move _4];         // scope 0 at $DIR/deaggregator_test_multiple.rs:10:5: 10:27\n-          StorageDead(_4);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:10:26: 10:27\n-          StorageDead(_2);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:10:26: 10:27\n-          return;                          // scope 0 at $DIR/deaggregator_test_multiple.rs:11:2: 11:2\n+          StorageLive(_2);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:6: +1:15\n+          StorageLive(_3);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:13: +1:14\n+          _3 = _1;                         // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:13: +1:14\n+-         _2 = Foo::A(move _3);            // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:6: +1:15\n++         Deinit(_2);                      // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:6: +1:15\n++         ((_2 as A).0: i32) = move _3;    // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:6: +1:15\n++         discriminant(_2) = 0;            // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:6: +1:15\n+          StorageDead(_3);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:14: +1:15\n+          StorageLive(_4);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:17: +1:26\n+          StorageLive(_5);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:24: +1:25\n+          _5 = _1;                         // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:24: +1:25\n+-         _4 = Foo::A(move _5);            // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:17: +1:26\n++         Deinit(_4);                      // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:17: +1:26\n++         ((_4 as A).0: i32) = move _5;    // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:17: +1:26\n++         discriminant(_4) = 0;            // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:17: +1:26\n+          StorageDead(_5);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:25: +1:26\n+          _0 = [move _2, move _4];         // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:5: +1:27\n+          StorageDead(_4);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:26: +1:27\n+          StorageDead(_2);                 // scope 0 at $DIR/deaggregator_test_multiple.rs:+1:26: +1:27\n+          return;                          // scope 0 at $DIR/deaggregator_test_multiple.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "01864ba24ac087908da8e34837322f83cdfa6964", "filename": "src/test/mir-opt/deduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,14 +2,14 @@\n + // MIR for `is_line_doc_comment_2` after DeduplicateBlocks\n   \n   fn is_line_doc_comment_2(_1: &str) -> bool {\n-      debug s => _1;                       // in scope 0 at $DIR/deduplicate_blocks.rs:2:36: 2:37\n-      let mut _0: bool;                    // return place in scope 0 at $DIR/deduplicate_blocks.rs:2:48: 2:52\n-      let mut _2: &[u8];                   // in scope 0 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n-      let mut _3: &str;                    // in scope 0 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n-      let mut _4: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:5:9: 5:31\n-      let mut _5: bool;                    // in scope 0 at $DIR/deduplicate_blocks.rs:5:9: 5:31\n-      let mut _6: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:4:9: 4:37\n-      let mut _7: bool;                    // in scope 0 at $DIR/deduplicate_blocks.rs:4:9: 4:37\n+      debug s => _1;                       // in scope 0 at $DIR/deduplicate_blocks.rs:+0:36: +0:37\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/deduplicate_blocks.rs:+0:48: +0:52\n+      let mut _2: &[u8];                   // in scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n+      let mut _3: &str;                    // in scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n+      let mut _4: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n+      let mut _5: bool;                    // in scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n+      let mut _6: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n+      let mut _7: bool;                    // in scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n       scope 1 (inlined core::str::<impl str>::as_bytes) { // at $DIR/deduplicate_blocks.rs:3:11: 3:23\n           debug self => _3;                // in scope 1 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n           let mut _8: &str;                // in scope 1 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n@@ -18,9 +18,9 @@\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n-          StorageLive(_3);                 // scope 0 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n-          _3 = _1;                         // scope 0 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n+          StorageLive(_2);                 // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n+          StorageLive(_3);                 // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n+          _3 = _1;                         // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n           StorageLive(_8);                 // scope 2 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n           _8 = _3;                         // scope 2 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n -         _2 = transmute::<&str, &[u8]>(move _8) -> bb14; // scope 2 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n@@ -31,77 +31,77 @@\n       }\n   \n       bb1: {\n-          switchInt((*_2)[0 of 4]) -> [47_u8: bb2, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 3:23\n+          switchInt((*_2)[0 of 4]) -> [47_u8: bb2, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n       }\n   \n       bb2: {\n-          switchInt((*_2)[1 of 4]) -> [47_u8: bb3, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 3:23\n+          switchInt((*_2)[1 of 4]) -> [47_u8: bb3, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n       }\n   \n       bb3: {\n-          switchInt((*_2)[2 of 4]) -> [47_u8: bb4, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 3:23\n+          switchInt((*_2)[2 of 4]) -> [47_u8: bb4, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n       }\n   \n       bb4: {\n--         switchInt((*_2)[3 of 4]) -> [47_u8: bb10, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 3:23\n-+         switchInt((*_2)[3 of 4]) -> [47_u8: bb9, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 3:23\n+-         switchInt((*_2)[3 of 4]) -> [47_u8: bb10, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n++         switchInt((*_2)[3 of 4]) -> [47_u8: bb9, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n       }\n   \n       bb5: {\n-          _4 = Len((*_2));                 // scope 0 at $DIR/deduplicate_blocks.rs:5:9: 5:31\n-          _5 = Ge(move _4, const 3_usize); // scope 0 at $DIR/deduplicate_blocks.rs:5:9: 5:31\n-          switchInt(move _5) -> [false: bb9, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:5:9: 5:31\n+          _4 = Len((*_2));                 // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n+          _5 = Ge(move _4, const 3_usize); // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n+          switchInt(move _5) -> [false: bb9, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n       }\n   \n       bb6: {\n-          switchInt((*_2)[0 of 3]) -> [47_u8: bb7, otherwise: bb9]; // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 3:23\n+          switchInt((*_2)[0 of 3]) -> [47_u8: bb7, otherwise: bb9]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n       }\n   \n       bb7: {\n-          switchInt((*_2)[1 of 3]) -> [47_u8: bb8, otherwise: bb9]; // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 3:23\n+          switchInt((*_2)[1 of 3]) -> [47_u8: bb8, otherwise: bb9]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n       }\n   \n       bb8: {\n--         switchInt((*_2)[2 of 3]) -> [47_u8: bb11, 33_u8: bb12, otherwise: bb9]; // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 3:23\n-+         switchInt((*_2)[2 of 3]) -> [47_u8: bb10, 33_u8: bb10, otherwise: bb9]; // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 3:23\n+-         switchInt((*_2)[2 of 3]) -> [47_u8: bb11, 33_u8: bb12, otherwise: bb9]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n++         switchInt((*_2)[2 of 3]) -> [47_u8: bb10, 33_u8: bb10, otherwise: bb9]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n       }\n   \n       bb9: {\n--         _0 = const false;                // scope 0 at $DIR/deduplicate_blocks.rs:7:14: 7:19\n--         goto -> bb13;                    // scope 0 at $DIR/deduplicate_blocks.rs:7:14: 7:19\n+-         _0 = const false;                // scope 0 at $DIR/deduplicate_blocks.rs:+5:14: +5:19\n+-         goto -> bb13;                    // scope 0 at $DIR/deduplicate_blocks.rs:+5:14: +5:19\n -     }\n - \n -     bb10: {\n-          _0 = const false;                // scope 0 at $DIR/deduplicate_blocks.rs:4:41: 4:46\n--         goto -> bb13;                    // scope 0 at $DIR/deduplicate_blocks.rs:4:41: 4:46\n-+         goto -> bb11;                    // scope 0 at $DIR/deduplicate_blocks.rs:4:41: 4:46\n+          _0 = const false;                // scope 0 at $DIR/deduplicate_blocks.rs:+2:41: +2:46\n+-         goto -> bb13;                    // scope 0 at $DIR/deduplicate_blocks.rs:+2:41: +2:46\n++         goto -> bb11;                    // scope 0 at $DIR/deduplicate_blocks.rs:+2:41: +2:46\n       }\n   \n -     bb11: {\n--         _0 = const true;                 // scope 0 at $DIR/deduplicate_blocks.rs:5:35: 5:39\n--         goto -> bb13;                    // scope 0 at $DIR/deduplicate_blocks.rs:5:35: 5:39\n+-         _0 = const true;                 // scope 0 at $DIR/deduplicate_blocks.rs:+3:35: +3:39\n+-         goto -> bb13;                    // scope 0 at $DIR/deduplicate_blocks.rs:+3:35: +3:39\n -     }\n - \n -     bb12: {\n +     bb10: {\n-          _0 = const true;                 // scope 0 at $DIR/deduplicate_blocks.rs:6:35: 6:39\n--         goto -> bb13;                    // scope 0 at $DIR/deduplicate_blocks.rs:6:35: 6:39\n-+         goto -> bb11;                    // scope 0 at $DIR/deduplicate_blocks.rs:6:35: 6:39\n+          _0 = const true;                 // scope 0 at $DIR/deduplicate_blocks.rs:+4:35: +4:39\n+-         goto -> bb13;                    // scope 0 at $DIR/deduplicate_blocks.rs:+4:35: +4:39\n++         goto -> bb11;                    // scope 0 at $DIR/deduplicate_blocks.rs:+4:35: +4:39\n       }\n   \n -     bb13: {\n +     bb11: {\n-          StorageDead(_2);                 // scope 0 at $DIR/deduplicate_blocks.rs:9:1: 9:2\n-          return;                          // scope 0 at $DIR/deduplicate_blocks.rs:9:2: 9:2\n+          StorageDead(_2);                 // scope 0 at $DIR/deduplicate_blocks.rs:+7:1: +7:2\n+          return;                          // scope 0 at $DIR/deduplicate_blocks.rs:+7:2: +7:2\n       }\n   \n -     bb14: {\n +     bb12: {\n           StorageDead(_8);                 // scope 2 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n-          StorageDead(_3);                 // scope 0 at $DIR/deduplicate_blocks.rs:3:22: 3:23\n-          _6 = Len((*_2));                 // scope 0 at $DIR/deduplicate_blocks.rs:4:9: 4:37\n-          _7 = Ge(move _6, const 4_usize); // scope 0 at $DIR/deduplicate_blocks.rs:4:9: 4:37\n-          switchInt(move _7) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/deduplicate_blocks.rs:4:9: 4:37\n+          StorageDead(_3);                 // scope 0 at $DIR/deduplicate_blocks.rs:+1:22: +1:23\n+          _6 = Len((*_2));                 // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n+          _7 = Ge(move _6, const 4_usize); // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n+          switchInt(move _7) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n       }\n   }\n   "}, {"sha": "548b94d17f566411e82d1099ef11f5cbd91ec593", "filename": "src/test/mir-opt/derefer_complex_case.main.Derefer.diff", "status": "modified", "additions": 62, "deletions": 62, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,110 +2,110 @@\n + // MIR for `main` after Derefer\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/derefer_complex_case.rs:4:11: 4:11\n-      let mut _1: std::slice::Iter<i32>;   // in scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n-      let mut _2: &[i32; 2];               // in scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n-      let _3: [i32; 2];                    // in scope 0 at $DIR/derefer_complex_case.rs:5:18: 5:26\n-      let mut _4: std::slice::Iter<i32>;   // in scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n-      let mut _5: ();                      // in scope 0 at $DIR/derefer_complex_case.rs:4:1: 6:2\n-      let _6: ();                          // in scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n-      let mut _7: std::option::Option<&i32>; // in scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n-      let mut _8: &mut std::slice::Iter<i32>; // in scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n-      let mut _9: &mut std::slice::Iter<i32>; // in scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n-      let mut _10: isize;                  // in scope 0 at $DIR/derefer_complex_case.rs:5:5: 5:40\n-      let mut _11: !;                      // in scope 0 at $DIR/derefer_complex_case.rs:5:5: 5:40\n-      let mut _13: i32;                    // in scope 0 at $DIR/derefer_complex_case.rs:5:34: 5:37\n-      let mut _14: &[i32; 2];              // in scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n-+     let mut _15: &i32;                   // in scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n+      let mut _0: ();                      // return place in scope 0 at $DIR/derefer_complex_case.rs:+0:11: +0:11\n+      let mut _1: std::slice::Iter<i32>;   // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+      let mut _2: &[i32; 2];               // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+      let _3: [i32; 2];                    // in scope 0 at $DIR/derefer_complex_case.rs:+1:18: +1:26\n+      let mut _4: std::slice::Iter<i32>;   // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+      let mut _5: ();                      // in scope 0 at $DIR/derefer_complex_case.rs:+0:1: +2:2\n+      let _6: ();                          // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+      let mut _7: std::option::Option<&i32>; // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+      let mut _8: &mut std::slice::Iter<i32>; // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+      let mut _9: &mut std::slice::Iter<i32>; // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+      let mut _10: isize;                  // in scope 0 at $DIR/derefer_complex_case.rs:+1:5: +1:40\n+      let mut _11: !;                      // in scope 0 at $DIR/derefer_complex_case.rs:+1:5: +1:40\n+      let mut _13: i32;                    // in scope 0 at $DIR/derefer_complex_case.rs:+1:34: +1:37\n+      let mut _14: &[i32; 2];              // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n++     let mut _15: &i32;                   // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n       scope 1 {\n-          debug iter => _4;                // in scope 1 at $DIR/derefer_complex_case.rs:5:17: 5:26\n-          let _12: i32;                    // in scope 1 at $DIR/derefer_complex_case.rs:5:10: 5:13\n+          debug iter => _4;                // in scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          let _12: i32;                    // in scope 1 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n           scope 2 {\n-              debug foo => _12;            // in scope 2 at $DIR/derefer_complex_case.rs:5:10: 5:13\n+              debug foo => _12;            // in scope 2 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n-          StorageLive(_2);                 // scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n-          _14 = const main::promoted[0];   // scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n+          StorageLive(_1);                 // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          StorageLive(_2);                 // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          _14 = const main::promoted[0];   // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n                                            // mir::Constant\n                                            // + span: $DIR/derefer_complex_case.rs:5:17: 5:26\n                                            // + literal: Const { ty: &[i32; 2], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _2 = &(*_14);                    // scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n-          _1 = <&[i32; 2] as IntoIterator>::into_iter(move _2) -> bb1; // scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n+          _2 = &(*_14);                    // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          _1 = <&[i32; 2] as IntoIterator>::into_iter(move _2) -> bb1; // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n                                            // mir::Constant\n                                            // + span: $DIR/derefer_complex_case.rs:5:17: 5:26\n                                            // + literal: Const { ty: fn(&[i32; 2]) -> <&[i32; 2] as IntoIterator>::IntoIter {<&[i32; 2] as IntoIterator>::into_iter}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_2);                 // scope 0 at $DIR/derefer_complex_case.rs:5:25: 5:26\n-          StorageLive(_4);                 // scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n-          _4 = move _1;                    // scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n-          goto -> bb2;                     // scope 1 at $DIR/derefer_complex_case.rs:5:5: 5:40\n+          StorageDead(_2);                 // scope 0 at $DIR/derefer_complex_case.rs:+1:25: +1:26\n+          StorageLive(_4);                 // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          _4 = move _1;                    // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          goto -> bb2;                     // scope 1 at $DIR/derefer_complex_case.rs:+1:5: +1:40\n       }\n   \n       bb2: {\n-          StorageLive(_6);                 // scope 1 at $DIR/derefer_complex_case.rs:5:17: 5:26\n-          StorageLive(_7);                 // scope 1 at $DIR/derefer_complex_case.rs:5:17: 5:26\n-          StorageLive(_8);                 // scope 1 at $DIR/derefer_complex_case.rs:5:17: 5:26\n-          StorageLive(_9);                 // scope 1 at $DIR/derefer_complex_case.rs:5:17: 5:26\n-          _9 = &mut _4;                    // scope 1 at $DIR/derefer_complex_case.rs:5:17: 5:26\n-          _8 = &mut (*_9);                 // scope 1 at $DIR/derefer_complex_case.rs:5:17: 5:26\n-          _7 = <std::slice::Iter<i32> as Iterator>::next(move _8) -> bb3; // scope 1 at $DIR/derefer_complex_case.rs:5:17: 5:26\n+          StorageLive(_6);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          StorageLive(_7);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          StorageLive(_8);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          StorageLive(_9);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          _9 = &mut _4;                    // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          _8 = &mut (*_9);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          _7 = <std::slice::Iter<i32> as Iterator>::next(move _8) -> bb3; // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n                                            // mir::Constant\n                                            // + span: $DIR/derefer_complex_case.rs:5:17: 5:26\n                                            // + literal: Const { ty: for<'r> fn(&'r mut std::slice::Iter<i32>) -> Option<<std::slice::Iter<i32> as Iterator>::Item> {<std::slice::Iter<i32> as Iterator>::next}, val: Value(<ZST>) }\n       }\n   \n       bb3: {\n-          StorageDead(_8);                 // scope 1 at $DIR/derefer_complex_case.rs:5:25: 5:26\n-          _10 = discriminant(_7);          // scope 1 at $DIR/derefer_complex_case.rs:5:17: 5:26\n-          switchInt(move _10) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 1 at $DIR/derefer_complex_case.rs:5:17: 5:26\n+          StorageDead(_8);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:25: +1:26\n+          _10 = discriminant(_7);          // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          switchInt(move _10) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n       }\n   \n       bb4: {\n-          StorageLive(_12);                // scope 1 at $DIR/derefer_complex_case.rs:5:10: 5:13\n--         _12 = (*((_7 as Some).0: &i32)); // scope 1 at $DIR/derefer_complex_case.rs:5:10: 5:13\n-+         StorageLive(_15);                // scope 1 at $DIR/derefer_complex_case.rs:5:10: 5:13\n-+         _15 = deref_copy ((_7 as Some).0: &i32); // scope 1 at $DIR/derefer_complex_case.rs:5:10: 5:13\n-+         _12 = (*_15);                    // scope 1 at $DIR/derefer_complex_case.rs:5:10: 5:13\n-+         StorageDead(_15);                // scope 2 at $DIR/derefer_complex_case.rs:5:34: 5:37\n-          StorageLive(_13);                // scope 2 at $DIR/derefer_complex_case.rs:5:34: 5:37\n-          _13 = _12;                       // scope 2 at $DIR/derefer_complex_case.rs:5:34: 5:37\n-          _6 = std::mem::drop::<i32>(move _13) -> bb7; // scope 2 at $DIR/derefer_complex_case.rs:5:29: 5:38\n+          StorageLive(_12);                // scope 1 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n+-         _12 = (*((_7 as Some).0: &i32)); // scope 1 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n++         StorageLive(_15);                // scope 1 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n++         _15 = deref_copy ((_7 as Some).0: &i32); // scope 1 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n++         _12 = (*_15);                    // scope 1 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n++         StorageDead(_15);                // scope 2 at $DIR/derefer_complex_case.rs:+1:34: +1:37\n+          StorageLive(_13);                // scope 2 at $DIR/derefer_complex_case.rs:+1:34: +1:37\n+          _13 = _12;                       // scope 2 at $DIR/derefer_complex_case.rs:+1:34: +1:37\n+          _6 = std::mem::drop::<i32>(move _13) -> bb7; // scope 2 at $DIR/derefer_complex_case.rs:+1:29: +1:38\n                                            // mir::Constant\n                                            // + span: $DIR/derefer_complex_case.rs:5:29: 5:33\n                                            // + literal: Const { ty: fn(i32) {std::mem::drop::<i32>}, val: Value(<ZST>) }\n       }\n   \n       bb5: {\n-          unreachable;                     // scope 1 at $DIR/derefer_complex_case.rs:5:17: 5:26\n+          unreachable;                     // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n       }\n   \n       bb6: {\n-          _0 = const ();                   // scope 1 at $DIR/derefer_complex_case.rs:5:5: 5:40\n-          StorageDead(_9);                 // scope 1 at $DIR/derefer_complex_case.rs:5:39: 5:40\n-          StorageDead(_7);                 // scope 1 at $DIR/derefer_complex_case.rs:5:39: 5:40\n-          StorageDead(_6);                 // scope 1 at $DIR/derefer_complex_case.rs:5:39: 5:40\n-          StorageDead(_4);                 // scope 0 at $DIR/derefer_complex_case.rs:5:39: 5:40\n-          StorageDead(_1);                 // scope 0 at $DIR/derefer_complex_case.rs:5:39: 5:40\n-          return;                          // scope 0 at $DIR/derefer_complex_case.rs:6:2: 6:2\n+          _0 = const ();                   // scope 1 at $DIR/derefer_complex_case.rs:+1:5: +1:40\n+          StorageDead(_9);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n+          StorageDead(_7);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n+          StorageDead(_6);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n+          StorageDead(_4);                 // scope 0 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n+          StorageDead(_1);                 // scope 0 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n+          return;                          // scope 0 at $DIR/derefer_complex_case.rs:+2:2: +2:2\n       }\n   \n       bb7: {\n-          StorageDead(_13);                // scope 2 at $DIR/derefer_complex_case.rs:5:37: 5:38\n-          StorageDead(_12);                // scope 1 at $DIR/derefer_complex_case.rs:5:39: 5:40\n-          StorageDead(_9);                 // scope 1 at $DIR/derefer_complex_case.rs:5:39: 5:40\n-          StorageDead(_7);                 // scope 1 at $DIR/derefer_complex_case.rs:5:39: 5:40\n-          StorageDead(_6);                 // scope 1 at $DIR/derefer_complex_case.rs:5:39: 5:40\n-          _5 = const ();                   // scope 1 at $DIR/derefer_complex_case.rs:5:5: 5:40\n-          goto -> bb2;                     // scope 1 at $DIR/derefer_complex_case.rs:5:5: 5:40\n+          StorageDead(_13);                // scope 2 at $DIR/derefer_complex_case.rs:+1:37: +1:38\n+          StorageDead(_12);                // scope 1 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n+          StorageDead(_9);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n+          StorageDead(_7);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n+          StorageDead(_6);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n+          _5 = const ();                   // scope 1 at $DIR/derefer_complex_case.rs:+1:5: +1:40\n+          goto -> bb2;                     // scope 1 at $DIR/derefer_complex_case.rs:+1:5: +1:40\n +     }\n + \n +     bb8 (cleanup): {\n-+         resume;                          // scope 0 at $DIR/derefer_complex_case.rs:4:1: 6:2\n++         resume;                          // scope 0 at $DIR/derefer_complex_case.rs:+0:1: +2:2\n       }\n   }\n   "}, {"sha": "ce6ffaa56413cadb216147f368ba6d7d0bfedac2", "filename": "src/test/mir-opt/derefer_inline_test.main.Derefer.diff", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fderefer_inline_test.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fderefer_inline_test.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_inline_test.main.Derefer.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,60 +2,60 @@\n + // MIR for `main` after Derefer\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/derefer_inline_test.rs:9:11: 9:11\n-      let _1: std::boxed::Box<std::boxed::Box<u32>>; // in scope 0 at $DIR/derefer_inline_test.rs:10:5: 10:12\n-      let mut _2: usize;                   // in scope 0 at $DIR/derefer_inline_test.rs:10:5: 10:12\n-      let mut _3: usize;                   // in scope 0 at $DIR/derefer_inline_test.rs:10:5: 10:12\n-      let mut _4: *mut u8;                 // in scope 0 at $DIR/derefer_inline_test.rs:10:5: 10:12\n-      let mut _5: std::boxed::Box<std::boxed::Box<u32>>; // in scope 0 at $DIR/derefer_inline_test.rs:10:5: 10:12\n+      let mut _0: ();                      // return place in scope 0 at $DIR/derefer_inline_test.rs:+0:11: +0:11\n+      let _1: std::boxed::Box<std::boxed::Box<u32>>; // in scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n+      let mut _2: usize;                   // in scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n+      let mut _3: usize;                   // in scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n+      let mut _4: *mut u8;                 // in scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n+      let mut _5: std::boxed::Box<std::boxed::Box<u32>>; // in scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n       scope 1 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/derefer_inline_test.rs:10:5: 10:12\n-          _2 = SizeOf(std::boxed::Box<u32>); // scope 1 at $DIR/derefer_inline_test.rs:10:5: 10:12\n-          _3 = AlignOf(std::boxed::Box<u32>); // scope 1 at $DIR/derefer_inline_test.rs:10:5: 10:12\n-          _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 1 at $DIR/derefer_inline_test.rs:10:5: 10:12\n+          StorageLive(_1);                 // scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n+          _2 = SizeOf(std::boxed::Box<u32>); // scope 1 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n+          _3 = AlignOf(std::boxed::Box<u32>); // scope 1 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n+          _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 1 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n                                            // mir::Constant\n                                            // + span: $DIR/derefer_inline_test.rs:10:5: 10:12\n                                            // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageLive(_5);                 // scope 0 at $DIR/derefer_inline_test.rs:10:5: 10:12\n-          _5 = ShallowInitBox(move _4, std::boxed::Box<u32>); // scope 0 at $DIR/derefer_inline_test.rs:10:5: 10:12\n-          (*_5) = f() -> [return: bb2, unwind: bb6]; // scope 0 at $DIR/derefer_inline_test.rs:10:9: 10:12\n+          StorageLive(_5);                 // scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n+          _5 = ShallowInitBox(move _4, std::boxed::Box<u32>); // scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n+          (*_5) = f() -> [return: bb2, unwind: bb6]; // scope 0 at $DIR/derefer_inline_test.rs:+1:9: +1:12\n                                            // mir::Constant\n                                            // + span: $DIR/derefer_inline_test.rs:10:9: 10:10\n                                            // + literal: Const { ty: fn() -> Box<u32> {f}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n-          _1 = move _5;                    // scope 0 at $DIR/derefer_inline_test.rs:10:5: 10:12\n-          drop(_5) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/derefer_inline_test.rs:10:11: 10:12\n+          _1 = move _5;                    // scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n+          drop(_5) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/derefer_inline_test.rs:+1:11: +1:12\n       }\n   \n       bb3: {\n-          StorageDead(_5);                 // scope 0 at $DIR/derefer_inline_test.rs:10:11: 10:12\n-          drop(_1) -> bb4;                 // scope 0 at $DIR/derefer_inline_test.rs:10:12: 10:13\n+          StorageDead(_5);                 // scope 0 at $DIR/derefer_inline_test.rs:+1:11: +1:12\n+          drop(_1) -> bb4;                 // scope 0 at $DIR/derefer_inline_test.rs:+1:12: +1:13\n       }\n   \n       bb4: {\n-          StorageDead(_1);                 // scope 0 at $DIR/derefer_inline_test.rs:10:12: 10:13\n-          _0 = const ();                   // scope 0 at $DIR/derefer_inline_test.rs:9:11: 11:2\n-          return;                          // scope 0 at $DIR/derefer_inline_test.rs:11:2: 11:2\n+          StorageDead(_1);                 // scope 0 at $DIR/derefer_inline_test.rs:+1:12: +1:13\n+          _0 = const ();                   // scope 0 at $DIR/derefer_inline_test.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/derefer_inline_test.rs:+2:2: +2:2\n       }\n   \n       bb5 (cleanup): {\n-          drop(_1) -> bb7;                 // scope 0 at $DIR/derefer_inline_test.rs:10:12: 10:13\n+          drop(_1) -> bb7;                 // scope 0 at $DIR/derefer_inline_test.rs:+1:12: +1:13\n       }\n   \n       bb6 (cleanup): {\n-          drop(_5) -> bb7;                 // scope 0 at $DIR/derefer_inline_test.rs:10:11: 10:12\n+          drop(_5) -> bb7;                 // scope 0 at $DIR/derefer_inline_test.rs:+1:11: +1:12\n       }\n   \n       bb7 (cleanup): {\n-          resume;                          // scope 0 at $DIR/derefer_inline_test.rs:9:1: 11:2\n+          resume;                          // scope 0 at $DIR/derefer_inline_test.rs:+0:1: +2:2\n       }\n   }\n   "}, {"sha": "51df13bdfd01d42453044eb2c79ca2df5be6b0b8", "filename": "src/test/mir-opt/derefer_terminator_test.main.Derefer.diff", "status": "modified", "additions": 62, "deletions": 62, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,102 +2,102 @@\n + // MIR for `main` after Derefer\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/derefer_terminator_test.rs:4:11: 4:11\n-      let _1: bool;                        // in scope 0 at $DIR/derefer_terminator_test.rs:5:9: 5:10\n-      let _3: ();                          // in scope 0 at $DIR/derefer_terminator_test.rs:7:5: 10:6\n-      let mut _4: &&&&bool;                // in scope 0 at $DIR/derefer_terminator_test.rs:7:15: 7:22\n-      let _5: &&&bool;                     // in scope 0 at $DIR/derefer_terminator_test.rs:7:17: 7:21\n-      let _6: &&bool;                      // in scope 0 at $DIR/derefer_terminator_test.rs:7:18: 7:21\n-      let _7: &bool;                       // in scope 0 at $DIR/derefer_terminator_test.rs:7:19: 7:21\n-+     let mut _10: &&&bool;                // in scope 0 at $DIR/derefer_terminator_test.rs:7:15: 7:22\n-+     let mut _11: &&bool;                 // in scope 0 at $DIR/derefer_terminator_test.rs:7:15: 7:22\n-+     let mut _12: &bool;                  // in scope 0 at $DIR/derefer_terminator_test.rs:7:15: 7:22\n+      let mut _0: ();                      // return place in scope 0 at $DIR/derefer_terminator_test.rs:+0:11: +0:11\n+      let _1: bool;                        // in scope 0 at $DIR/derefer_terminator_test.rs:+1:9: +1:10\n+      let _3: ();                          // in scope 0 at $DIR/derefer_terminator_test.rs:+3:5: +6:6\n+      let mut _4: &&&&bool;                // in scope 0 at $DIR/derefer_terminator_test.rs:+3:15: +3:22\n+      let _5: &&&bool;                     // in scope 0 at $DIR/derefer_terminator_test.rs:+3:17: +3:21\n+      let _6: &&bool;                      // in scope 0 at $DIR/derefer_terminator_test.rs:+3:18: +3:21\n+      let _7: &bool;                       // in scope 0 at $DIR/derefer_terminator_test.rs:+3:19: +3:21\n++     let mut _10: &&&bool;                // in scope 0 at $DIR/derefer_terminator_test.rs:+3:15: +3:22\n++     let mut _11: &&bool;                 // in scope 0 at $DIR/derefer_terminator_test.rs:+3:15: +3:22\n++     let mut _12: &bool;                  // in scope 0 at $DIR/derefer_terminator_test.rs:+3:15: +3:22\n       scope 1 {\n-          debug b => _1;                   // in scope 1 at $DIR/derefer_terminator_test.rs:5:9: 5:10\n-          let _2: bool;                    // in scope 1 at $DIR/derefer_terminator_test.rs:6:9: 6:10\n+          debug b => _1;                   // in scope 1 at $DIR/derefer_terminator_test.rs:+1:9: +1:10\n+          let _2: bool;                    // in scope 1 at $DIR/derefer_terminator_test.rs:+2:9: +2:10\n           scope 2 {\n-              debug d => _2;               // in scope 2 at $DIR/derefer_terminator_test.rs:6:9: 6:10\n-              let _8: i32;                 // in scope 2 at $DIR/derefer_terminator_test.rs:8:22: 8:23\n-              let _9: i32;                 // in scope 2 at $DIR/derefer_terminator_test.rs:11:9: 11:10\n+              debug d => _2;               // in scope 2 at $DIR/derefer_terminator_test.rs:+2:9: +2:10\n+              let _8: i32;                 // in scope 2 at $DIR/derefer_terminator_test.rs:+4:22: +4:23\n+              let _9: i32;                 // in scope 2 at $DIR/derefer_terminator_test.rs:+7:9: +7:10\n               scope 3 {\n-                  debug x => _8;           // in scope 3 at $DIR/derefer_terminator_test.rs:8:22: 8:23\n+                  debug x => _8;           // in scope 3 at $DIR/derefer_terminator_test.rs:+4:22: +4:23\n               }\n               scope 4 {\n-                  debug y => _9;           // in scope 4 at $DIR/derefer_terminator_test.rs:11:9: 11:10\n+                  debug y => _9;           // in scope 4 at $DIR/derefer_terminator_test.rs:+7:9: +7:10\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/derefer_terminator_test.rs:5:9: 5:10\n-          _1 = foo() -> bb1;               // scope 0 at $DIR/derefer_terminator_test.rs:5:13: 5:18\n+          StorageLive(_1);                 // scope 0 at $DIR/derefer_terminator_test.rs:+1:9: +1:10\n+          _1 = foo() -> bb1;               // scope 0 at $DIR/derefer_terminator_test.rs:+1:13: +1:18\n                                            // mir::Constant\n                                            // + span: $DIR/derefer_terminator_test.rs:5:13: 5:16\n                                            // + literal: Const { ty: fn() -> bool {foo}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageLive(_2);                 // scope 1 at $DIR/derefer_terminator_test.rs:6:9: 6:10\n-          _2 = foo() -> bb2;               // scope 1 at $DIR/derefer_terminator_test.rs:6:13: 6:18\n+          StorageLive(_2);                 // scope 1 at $DIR/derefer_terminator_test.rs:+2:9: +2:10\n+          _2 = foo() -> bb2;               // scope 1 at $DIR/derefer_terminator_test.rs:+2:13: +2:18\n                                            // mir::Constant\n                                            // + span: $DIR/derefer_terminator_test.rs:6:13: 6:16\n                                            // + literal: Const { ty: fn() -> bool {foo}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n-          StorageLive(_3);                 // scope 2 at $DIR/derefer_terminator_test.rs:7:5: 10:6\n-          StorageLive(_4);                 // scope 2 at $DIR/derefer_terminator_test.rs:7:15: 7:22\n-          StorageLive(_5);                 // scope 2 at $DIR/derefer_terminator_test.rs:7:17: 7:21\n-          StorageLive(_6);                 // scope 2 at $DIR/derefer_terminator_test.rs:7:18: 7:21\n-          StorageLive(_7);                 // scope 2 at $DIR/derefer_terminator_test.rs:7:19: 7:21\n-          _7 = &_1;                        // scope 2 at $DIR/derefer_terminator_test.rs:7:19: 7:21\n-          _6 = &_7;                        // scope 2 at $DIR/derefer_terminator_test.rs:7:18: 7:21\n-          _5 = &_6;                        // scope 2 at $DIR/derefer_terminator_test.rs:7:17: 7:21\n-          _4 = &_5;                        // scope 2 at $DIR/derefer_terminator_test.rs:7:15: 7:22\n--         switchInt((*(*(*(*_4))))) -> [false: bb3, otherwise: bb4]; // scope 2 at $DIR/derefer_terminator_test.rs:7:5: 7:22\n-+         StorageLive(_10);                // scope 2 at $DIR/derefer_terminator_test.rs:7:5: 7:22\n-+         _10 = deref_copy (*_4);          // scope 2 at $DIR/derefer_terminator_test.rs:7:5: 7:22\n-+         StorageLive(_11);                // scope 2 at $DIR/derefer_terminator_test.rs:7:5: 7:22\n-+         _11 = deref_copy (*_10);         // scope 2 at $DIR/derefer_terminator_test.rs:7:5: 7:22\n-+         StorageDead(_10);                // scope 2 at $DIR/derefer_terminator_test.rs:7:5: 7:22\n-+         StorageLive(_12);                // scope 2 at $DIR/derefer_terminator_test.rs:7:5: 7:22\n-+         _12 = deref_copy (*_11);         // scope 2 at $DIR/derefer_terminator_test.rs:7:5: 7:22\n-+         StorageDead(_11);                // scope 2 at $DIR/derefer_terminator_test.rs:7:5: 7:22\n-+         switchInt((*_12)) -> [false: bb3, otherwise: bb4]; // scope 2 at $DIR/derefer_terminator_test.rs:7:5: 7:22\n+          StorageLive(_3);                 // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +6:6\n+          StorageLive(_4);                 // scope 2 at $DIR/derefer_terminator_test.rs:+3:15: +3:22\n+          StorageLive(_5);                 // scope 2 at $DIR/derefer_terminator_test.rs:+3:17: +3:21\n+          StorageLive(_6);                 // scope 2 at $DIR/derefer_terminator_test.rs:+3:18: +3:21\n+          StorageLive(_7);                 // scope 2 at $DIR/derefer_terminator_test.rs:+3:19: +3:21\n+          _7 = &_1;                        // scope 2 at $DIR/derefer_terminator_test.rs:+3:19: +3:21\n+          _6 = &_7;                        // scope 2 at $DIR/derefer_terminator_test.rs:+3:18: +3:21\n+          _5 = &_6;                        // scope 2 at $DIR/derefer_terminator_test.rs:+3:17: +3:21\n+          _4 = &_5;                        // scope 2 at $DIR/derefer_terminator_test.rs:+3:15: +3:22\n+-         switchInt((*(*(*(*_4))))) -> [false: bb3, otherwise: bb4]; // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n++         StorageLive(_10);                // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n++         _10 = deref_copy (*_4);          // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n++         StorageLive(_11);                // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n++         _11 = deref_copy (*_10);         // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n++         StorageDead(_10);                // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n++         StorageLive(_12);                // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n++         _12 = deref_copy (*_11);         // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n++         StorageDead(_11);                // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n++         switchInt((*_12)) -> [false: bb3, otherwise: bb4]; // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n       }\n   \n       bb3: {\n-+         StorageDead(_12);                // scope 2 at $DIR/derefer_terminator_test.rs:7:5: 7:22\n-          _3 = const ();                   // scope 2 at $DIR/derefer_terminator_test.rs:9:18: 9:20\n-          goto -> bb5;                     // scope 2 at $DIR/derefer_terminator_test.rs:9:18: 9:20\n++         StorageDead(_12);                // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n+          _3 = const ();                   // scope 2 at $DIR/derefer_terminator_test.rs:+5:18: +5:20\n+          goto -> bb5;                     // scope 2 at $DIR/derefer_terminator_test.rs:+5:18: +5:20\n       }\n   \n       bb4: {\n-+         StorageDead(_12);                // scope 2 at $DIR/derefer_terminator_test.rs:7:5: 7:22\n-          StorageLive(_8);                 // scope 2 at $DIR/derefer_terminator_test.rs:8:22: 8:23\n-          _8 = const 5_i32;                // scope 2 at $DIR/derefer_terminator_test.rs:8:26: 8:27\n-          _3 = const ();                   // scope 2 at $DIR/derefer_terminator_test.rs:8:17: 8:29\n-          StorageDead(_8);                 // scope 2 at $DIR/derefer_terminator_test.rs:8:28: 8:29\n-          goto -> bb5;                     // scope 2 at $DIR/derefer_terminator_test.rs:8:28: 8:29\n++         StorageDead(_12);                // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n+          StorageLive(_8);                 // scope 2 at $DIR/derefer_terminator_test.rs:+4:22: +4:23\n+          _8 = const 5_i32;                // scope 2 at $DIR/derefer_terminator_test.rs:+4:26: +4:27\n+          _3 = const ();                   // scope 2 at $DIR/derefer_terminator_test.rs:+4:17: +4:29\n+          StorageDead(_8);                 // scope 2 at $DIR/derefer_terminator_test.rs:+4:28: +4:29\n+          goto -> bb5;                     // scope 2 at $DIR/derefer_terminator_test.rs:+4:28: +4:29\n       }\n   \n       bb5: {\n-          StorageDead(_7);                 // scope 2 at $DIR/derefer_terminator_test.rs:10:5: 10:6\n-          StorageDead(_6);                 // scope 2 at $DIR/derefer_terminator_test.rs:10:5: 10:6\n-          StorageDead(_5);                 // scope 2 at $DIR/derefer_terminator_test.rs:10:5: 10:6\n-          StorageDead(_4);                 // scope 2 at $DIR/derefer_terminator_test.rs:10:5: 10:6\n-          StorageDead(_3);                 // scope 2 at $DIR/derefer_terminator_test.rs:10:5: 10:6\n-          StorageLive(_9);                 // scope 2 at $DIR/derefer_terminator_test.rs:11:9: 11:10\n-          _9 = const 42_i32;               // scope 2 at $DIR/derefer_terminator_test.rs:11:13: 11:15\n-          _0 = const ();                   // scope 0 at $DIR/derefer_terminator_test.rs:4:11: 12:2\n-          StorageDead(_9);                 // scope 2 at $DIR/derefer_terminator_test.rs:12:1: 12:2\n-          StorageDead(_2);                 // scope 1 at $DIR/derefer_terminator_test.rs:12:1: 12:2\n-          StorageDead(_1);                 // scope 0 at $DIR/derefer_terminator_test.rs:12:1: 12:2\n-          return;                          // scope 0 at $DIR/derefer_terminator_test.rs:12:2: 12:2\n+          StorageDead(_7);                 // scope 2 at $DIR/derefer_terminator_test.rs:+6:5: +6:6\n+          StorageDead(_6);                 // scope 2 at $DIR/derefer_terminator_test.rs:+6:5: +6:6\n+          StorageDead(_5);                 // scope 2 at $DIR/derefer_terminator_test.rs:+6:5: +6:6\n+          StorageDead(_4);                 // scope 2 at $DIR/derefer_terminator_test.rs:+6:5: +6:6\n+          StorageDead(_3);                 // scope 2 at $DIR/derefer_terminator_test.rs:+6:5: +6:6\n+          StorageLive(_9);                 // scope 2 at $DIR/derefer_terminator_test.rs:+7:9: +7:10\n+          _9 = const 42_i32;               // scope 2 at $DIR/derefer_terminator_test.rs:+7:13: +7:15\n+          _0 = const ();                   // scope 0 at $DIR/derefer_terminator_test.rs:+0:11: +8:2\n+          StorageDead(_9);                 // scope 2 at $DIR/derefer_terminator_test.rs:+8:1: +8:2\n+          StorageDead(_2);                 // scope 1 at $DIR/derefer_terminator_test.rs:+8:1: +8:2\n+          StorageDead(_1);                 // scope 0 at $DIR/derefer_terminator_test.rs:+8:1: +8:2\n+          return;                          // scope 0 at $DIR/derefer_terminator_test.rs:+8:2: +8:2\n +     }\n + \n +     bb6 (cleanup): {\n-+         resume;                          // scope 0 at $DIR/derefer_terminator_test.rs:4:1: 12:2\n++         resume;                          // scope 0 at $DIR/derefer_terminator_test.rs:+0:1: +8:2\n       }\n   }\n   "}, {"sha": "cf8211c1ed0894b1556da734977c46efaf89a7a3", "filename": "src/test/mir-opt/derefer_test.main.Derefer.diff", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fderefer_test.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fderefer_test.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_test.main.Derefer.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,57 +2,57 @@\n + // MIR for `main` after Derefer\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/derefer_test.rs:2:11: 2:11\n-      let mut _1: (i32, i32);              // in scope 0 at $DIR/derefer_test.rs:3:9: 3:14\n-      let mut _3: &mut (i32, i32);         // in scope 0 at $DIR/derefer_test.rs:4:22: 4:28\n-+     let mut _6: &mut (i32, i32);         // in scope 0 at $DIR/derefer_test.rs:4:9: 4:14\n-+     let mut _7: &mut (i32, i32);         // in scope 0 at $DIR/derefer_test.rs:4:9: 4:14\n+      let mut _0: ();                      // return place in scope 0 at $DIR/derefer_test.rs:+0:11: +0:11\n+      let mut _1: (i32, i32);              // in scope 0 at $DIR/derefer_test.rs:+1:9: +1:14\n+      let mut _3: &mut (i32, i32);         // in scope 0 at $DIR/derefer_test.rs:+2:22: +2:28\n++     let mut _6: &mut (i32, i32);         // in scope 0 at $DIR/derefer_test.rs:+2:9: +2:14\n++     let mut _7: &mut (i32, i32);         // in scope 0 at $DIR/derefer_test.rs:+2:9: +2:14\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/derefer_test.rs:3:9: 3:14\n-          let mut _2: (i32, &mut (i32, i32)); // in scope 1 at $DIR/derefer_test.rs:4:9: 4:14\n+          debug a => _1;                   // in scope 1 at $DIR/derefer_test.rs:+1:9: +1:14\n+          let mut _2: (i32, &mut (i32, i32)); // in scope 1 at $DIR/derefer_test.rs:+2:9: +2:14\n           scope 2 {\n-              debug b => _2;               // in scope 2 at $DIR/derefer_test.rs:4:9: 4:14\n-              let _4: &mut i32;            // in scope 2 at $DIR/derefer_test.rs:5:9: 5:10\n+              debug b => _2;               // in scope 2 at $DIR/derefer_test.rs:+2:9: +2:14\n+              let _4: &mut i32;            // in scope 2 at $DIR/derefer_test.rs:+3:9: +3:10\n               scope 3 {\n-                  debug x => _4;           // in scope 3 at $DIR/derefer_test.rs:5:9: 5:10\n-                  let _5: &mut i32;        // in scope 3 at $DIR/derefer_test.rs:6:9: 6:10\n+                  debug x => _4;           // in scope 3 at $DIR/derefer_test.rs:+3:9: +3:10\n+                  let _5: &mut i32;        // in scope 3 at $DIR/derefer_test.rs:+4:9: +4:10\n                   scope 4 {\n-                      debug y => _5;       // in scope 4 at $DIR/derefer_test.rs:6:9: 6:10\n+                      debug y => _5;       // in scope 4 at $DIR/derefer_test.rs:+4:9: +4:10\n                   }\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/derefer_test.rs:3:9: 3:14\n-          _1 = (const 42_i32, const 43_i32); // scope 0 at $DIR/derefer_test.rs:3:17: 3:24\n-          StorageLive(_2);                 // scope 1 at $DIR/derefer_test.rs:4:9: 4:14\n-          StorageLive(_3);                 // scope 1 at $DIR/derefer_test.rs:4:22: 4:28\n-          _3 = &mut _1;                    // scope 1 at $DIR/derefer_test.rs:4:22: 4:28\n-          _2 = (const 99_i32, move _3);    // scope 1 at $DIR/derefer_test.rs:4:17: 4:29\n-          StorageDead(_3);                 // scope 1 at $DIR/derefer_test.rs:4:28: 4:29\n-          StorageLive(_4);                 // scope 2 at $DIR/derefer_test.rs:5:9: 5:10\n--         _4 = &mut ((*(_2.1: &mut (i32, i32))).0: i32); // scope 2 at $DIR/derefer_test.rs:5:13: 5:26\n-+         StorageLive(_6);                 // scope 2 at $DIR/derefer_test.rs:5:13: 5:26\n-+         _6 = deref_copy (_2.1: &mut (i32, i32)); // scope 2 at $DIR/derefer_test.rs:5:13: 5:26\n-+         _4 = &mut ((*_6).0: i32);        // scope 2 at $DIR/derefer_test.rs:5:13: 5:26\n-+         StorageDead(_6);                 // scope 3 at $DIR/derefer_test.rs:6:9: 6:10\n-          StorageLive(_5);                 // scope 3 at $DIR/derefer_test.rs:6:9: 6:10\n--         _5 = &mut ((*(_2.1: &mut (i32, i32))).1: i32); // scope 3 at $DIR/derefer_test.rs:6:13: 6:26\n-+         StorageLive(_7);                 // scope 3 at $DIR/derefer_test.rs:6:13: 6:26\n-+         _7 = deref_copy (_2.1: &mut (i32, i32)); // scope 3 at $DIR/derefer_test.rs:6:13: 6:26\n-+         _5 = &mut ((*_7).1: i32);        // scope 3 at $DIR/derefer_test.rs:6:13: 6:26\n-+         StorageDead(_7);                 // scope 0 at $DIR/derefer_test.rs:2:11: 7:2\n-          _0 = const ();                   // scope 0 at $DIR/derefer_test.rs:2:11: 7:2\n-          StorageDead(_5);                 // scope 3 at $DIR/derefer_test.rs:7:1: 7:2\n-          StorageDead(_4);                 // scope 2 at $DIR/derefer_test.rs:7:1: 7:2\n-          StorageDead(_2);                 // scope 1 at $DIR/derefer_test.rs:7:1: 7:2\n-          StorageDead(_1);                 // scope 0 at $DIR/derefer_test.rs:7:1: 7:2\n-          return;                          // scope 0 at $DIR/derefer_test.rs:7:2: 7:2\n+          StorageLive(_1);                 // scope 0 at $DIR/derefer_test.rs:+1:9: +1:14\n+          _1 = (const 42_i32, const 43_i32); // scope 0 at $DIR/derefer_test.rs:+1:17: +1:24\n+          StorageLive(_2);                 // scope 1 at $DIR/derefer_test.rs:+2:9: +2:14\n+          StorageLive(_3);                 // scope 1 at $DIR/derefer_test.rs:+2:22: +2:28\n+          _3 = &mut _1;                    // scope 1 at $DIR/derefer_test.rs:+2:22: +2:28\n+          _2 = (const 99_i32, move _3);    // scope 1 at $DIR/derefer_test.rs:+2:17: +2:29\n+          StorageDead(_3);                 // scope 1 at $DIR/derefer_test.rs:+2:28: +2:29\n+          StorageLive(_4);                 // scope 2 at $DIR/derefer_test.rs:+3:9: +3:10\n+-         _4 = &mut ((*(_2.1: &mut (i32, i32))).0: i32); // scope 2 at $DIR/derefer_test.rs:+3:13: +3:26\n++         StorageLive(_6);                 // scope 2 at $DIR/derefer_test.rs:+3:13: +3:26\n++         _6 = deref_copy (_2.1: &mut (i32, i32)); // scope 2 at $DIR/derefer_test.rs:+3:13: +3:26\n++         _4 = &mut ((*_6).0: i32);        // scope 2 at $DIR/derefer_test.rs:+3:13: +3:26\n++         StorageDead(_6);                 // scope 3 at $DIR/derefer_test.rs:+4:9: +4:10\n+          StorageLive(_5);                 // scope 3 at $DIR/derefer_test.rs:+4:9: +4:10\n+-         _5 = &mut ((*(_2.1: &mut (i32, i32))).1: i32); // scope 3 at $DIR/derefer_test.rs:+4:13: +4:26\n++         StorageLive(_7);                 // scope 3 at $DIR/derefer_test.rs:+4:13: +4:26\n++         _7 = deref_copy (_2.1: &mut (i32, i32)); // scope 3 at $DIR/derefer_test.rs:+4:13: +4:26\n++         _5 = &mut ((*_7).1: i32);        // scope 3 at $DIR/derefer_test.rs:+4:13: +4:26\n++         StorageDead(_7);                 // scope 0 at $DIR/derefer_test.rs:+0:11: +5:2\n+          _0 = const ();                   // scope 0 at $DIR/derefer_test.rs:+0:11: +5:2\n+          StorageDead(_5);                 // scope 3 at $DIR/derefer_test.rs:+5:1: +5:2\n+          StorageDead(_4);                 // scope 2 at $DIR/derefer_test.rs:+5:1: +5:2\n+          StorageDead(_2);                 // scope 1 at $DIR/derefer_test.rs:+5:1: +5:2\n+          StorageDead(_1);                 // scope 0 at $DIR/derefer_test.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/derefer_test.rs:+5:2: +5:2\n +     }\n + \n +     bb1 (cleanup): {\n-+         resume;                          // scope 0 at $DIR/derefer_test.rs:2:1: 7:2\n++         resume;                          // scope 0 at $DIR/derefer_test.rs:+0:1: +5:2\n       }\n   }\n   "}, {"sha": "91c9d5512243c87e6c0cd00d7497e95b0fa27a82", "filename": "src/test/mir-opt/derefer_test_multiple.main.Derefer.diff", "status": "modified", "additions": 72, "deletions": 72, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fderefer_test_multiple.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fderefer_test_multiple.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_test_multiple.main.Derefer.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,34 +2,34 @@\n + // MIR for `main` after Derefer\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/derefer_test_multiple.rs:2:12: 2:12\n-      let mut _1: (i32, i32);              // in scope 0 at $DIR/derefer_test_multiple.rs:3:9: 3:14\n-      let mut _3: &mut (i32, i32);         // in scope 0 at $DIR/derefer_test_multiple.rs:4:22: 4:28\n-      let mut _5: &mut (i32, &mut (i32, i32)); // in scope 0 at $DIR/derefer_test_multiple.rs:5:22: 5:28\n-      let mut _7: &mut (i32, &mut (i32, &mut (i32, i32))); // in scope 0 at $DIR/derefer_test_multiple.rs:6:22: 6:28\n-+     let mut _10: &mut (i32, &mut (i32, &mut (i32, i32))); // in scope 0 at $DIR/derefer_test_multiple.rs:6:9: 6:14\n-+     let mut _11: &mut (i32, &mut (i32, i32)); // in scope 0 at $DIR/derefer_test_multiple.rs:6:9: 6:14\n-+     let mut _12: &mut (i32, i32);        // in scope 0 at $DIR/derefer_test_multiple.rs:6:9: 6:14\n-+     let mut _13: &mut (i32, &mut (i32, &mut (i32, i32))); // in scope 0 at $DIR/derefer_test_multiple.rs:6:9: 6:14\n-+     let mut _14: &mut (i32, &mut (i32, i32)); // in scope 0 at $DIR/derefer_test_multiple.rs:6:9: 6:14\n-+     let mut _15: &mut (i32, i32);        // in scope 0 at $DIR/derefer_test_multiple.rs:6:9: 6:14\n+      let mut _0: ();                      // return place in scope 0 at $DIR/derefer_test_multiple.rs:+0:12: +0:12\n+      let mut _1: (i32, i32);              // in scope 0 at $DIR/derefer_test_multiple.rs:+1:9: +1:14\n+      let mut _3: &mut (i32, i32);         // in scope 0 at $DIR/derefer_test_multiple.rs:+2:22: +2:28\n+      let mut _5: &mut (i32, &mut (i32, i32)); // in scope 0 at $DIR/derefer_test_multiple.rs:+3:22: +3:28\n+      let mut _7: &mut (i32, &mut (i32, &mut (i32, i32))); // in scope 0 at $DIR/derefer_test_multiple.rs:+4:22: +4:28\n++     let mut _10: &mut (i32, &mut (i32, &mut (i32, i32))); // in scope 0 at $DIR/derefer_test_multiple.rs:+4:9: +4:14\n++     let mut _11: &mut (i32, &mut (i32, i32)); // in scope 0 at $DIR/derefer_test_multiple.rs:+4:9: +4:14\n++     let mut _12: &mut (i32, i32);        // in scope 0 at $DIR/derefer_test_multiple.rs:+4:9: +4:14\n++     let mut _13: &mut (i32, &mut (i32, &mut (i32, i32))); // in scope 0 at $DIR/derefer_test_multiple.rs:+4:9: +4:14\n++     let mut _14: &mut (i32, &mut (i32, i32)); // in scope 0 at $DIR/derefer_test_multiple.rs:+4:9: +4:14\n++     let mut _15: &mut (i32, i32);        // in scope 0 at $DIR/derefer_test_multiple.rs:+4:9: +4:14\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/derefer_test_multiple.rs:3:9: 3:14\n-          let mut _2: (i32, &mut (i32, i32)); // in scope 1 at $DIR/derefer_test_multiple.rs:4:9: 4:14\n+          debug a => _1;                   // in scope 1 at $DIR/derefer_test_multiple.rs:+1:9: +1:14\n+          let mut _2: (i32, &mut (i32, i32)); // in scope 1 at $DIR/derefer_test_multiple.rs:+2:9: +2:14\n           scope 2 {\n-              debug b => _2;               // in scope 2 at $DIR/derefer_test_multiple.rs:4:9: 4:14\n-              let mut _4: (i32, &mut (i32, &mut (i32, i32))); // in scope 2 at $DIR/derefer_test_multiple.rs:5:9: 5:14\n+              debug b => _2;               // in scope 2 at $DIR/derefer_test_multiple.rs:+2:9: +2:14\n+              let mut _4: (i32, &mut (i32, &mut (i32, i32))); // in scope 2 at $DIR/derefer_test_multiple.rs:+3:9: +3:14\n               scope 3 {\n-                  debug c => _4;           // in scope 3 at $DIR/derefer_test_multiple.rs:5:9: 5:14\n-                  let mut _6: (i32, &mut (i32, &mut (i32, &mut (i32, i32)))); // in scope 3 at $DIR/derefer_test_multiple.rs:6:9: 6:14\n+                  debug c => _4;           // in scope 3 at $DIR/derefer_test_multiple.rs:+3:9: +3:14\n+                  let mut _6: (i32, &mut (i32, &mut (i32, &mut (i32, i32)))); // in scope 3 at $DIR/derefer_test_multiple.rs:+4:9: +4:14\n                   scope 4 {\n-                      debug d => _6;       // in scope 4 at $DIR/derefer_test_multiple.rs:6:9: 6:14\n-                      let _8: &mut i32;    // in scope 4 at $DIR/derefer_test_multiple.rs:7:9: 7:10\n+                      debug d => _6;       // in scope 4 at $DIR/derefer_test_multiple.rs:+4:9: +4:14\n+                      let _8: &mut i32;    // in scope 4 at $DIR/derefer_test_multiple.rs:+5:9: +5:10\n                       scope 5 {\n-                          debug x => _8;   // in scope 5 at $DIR/derefer_test_multiple.rs:7:9: 7:10\n-                          let _9: &mut i32; // in scope 5 at $DIR/derefer_test_multiple.rs:8:9: 8:10\n+                          debug x => _8;   // in scope 5 at $DIR/derefer_test_multiple.rs:+5:9: +5:10\n+                          let _9: &mut i32; // in scope 5 at $DIR/derefer_test_multiple.rs:+6:9: +6:10\n                           scope 6 {\n-                              debug y => _9; // in scope 6 at $DIR/derefer_test_multiple.rs:8:9: 8:10\n+                              debug y => _9; // in scope 6 at $DIR/derefer_test_multiple.rs:+6:9: +6:10\n                           }\n                       }\n                   }\n@@ -38,59 +38,59 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/derefer_test_multiple.rs:3:9: 3:14\n-          _1 = (const 42_i32, const 43_i32); // scope 0 at $DIR/derefer_test_multiple.rs:3:17: 3:25\n-          StorageLive(_2);                 // scope 1 at $DIR/derefer_test_multiple.rs:4:9: 4:14\n-          StorageLive(_3);                 // scope 1 at $DIR/derefer_test_multiple.rs:4:22: 4:28\n-          _3 = &mut _1;                    // scope 1 at $DIR/derefer_test_multiple.rs:4:22: 4:28\n-          _2 = (const 99_i32, move _3);    // scope 1 at $DIR/derefer_test_multiple.rs:4:17: 4:29\n-          StorageDead(_3);                 // scope 1 at $DIR/derefer_test_multiple.rs:4:28: 4:29\n-          StorageLive(_4);                 // scope 2 at $DIR/derefer_test_multiple.rs:5:9: 5:14\n-          StorageLive(_5);                 // scope 2 at $DIR/derefer_test_multiple.rs:5:22: 5:28\n-          _5 = &mut _2;                    // scope 2 at $DIR/derefer_test_multiple.rs:5:22: 5:28\n-          _4 = (const 11_i32, move _5);    // scope 2 at $DIR/derefer_test_multiple.rs:5:17: 5:29\n-          StorageDead(_5);                 // scope 2 at $DIR/derefer_test_multiple.rs:5:28: 5:29\n-          StorageLive(_6);                 // scope 3 at $DIR/derefer_test_multiple.rs:6:9: 6:14\n-          StorageLive(_7);                 // scope 3 at $DIR/derefer_test_multiple.rs:6:22: 6:28\n-          _7 = &mut _4;                    // scope 3 at $DIR/derefer_test_multiple.rs:6:22: 6:28\n-          _6 = (const 13_i32, move _7);    // scope 3 at $DIR/derefer_test_multiple.rs:6:17: 6:29\n-          StorageDead(_7);                 // scope 3 at $DIR/derefer_test_multiple.rs:6:28: 6:29\n-          StorageLive(_8);                 // scope 4 at $DIR/derefer_test_multiple.rs:7:9: 7:10\n--         _8 = &mut ((*((*((*(_6.1: &mut (i32, &mut (i32, &mut (i32, i32))))).1: &mut (i32, &mut (i32, i32)))).1: &mut (i32, i32))).1: i32); // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n-+         StorageLive(_10);                // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n-+         _10 = deref_copy (_6.1: &mut (i32, &mut (i32, &mut (i32, i32)))); // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n-+         StorageLive(_11);                // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n-+         _11 = deref_copy ((*_10).1: &mut (i32, &mut (i32, i32))); // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n-+         StorageDead(_10);                // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n-+         StorageLive(_12);                // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n-+         _12 = deref_copy ((*_11).1: &mut (i32, i32)); // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n-+         StorageDead(_11);                // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n-+         _8 = &mut ((*_12).1: i32);       // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n-+         StorageDead(_12);                // scope 5 at $DIR/derefer_test_multiple.rs:8:9: 8:10\n-          StorageLive(_9);                 // scope 5 at $DIR/derefer_test_multiple.rs:8:9: 8:10\n--         _9 = &mut ((*((*((*(_6.1: &mut (i32, &mut (i32, &mut (i32, i32))))).1: &mut (i32, &mut (i32, i32)))).1: &mut (i32, i32))).1: i32); // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n-+         StorageLive(_13);                // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n-+         _13 = deref_copy (_6.1: &mut (i32, &mut (i32, &mut (i32, i32)))); // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n-+         StorageLive(_14);                // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n-+         _14 = deref_copy ((*_13).1: &mut (i32, &mut (i32, i32))); // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n-+         StorageDead(_13);                // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n-+         StorageLive(_15);                // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n-+         _15 = deref_copy ((*_14).1: &mut (i32, i32)); // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n-+         StorageDead(_14);                // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n-+         _9 = &mut ((*_15).1: i32);       // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n-+         StorageDead(_15);                // scope 0 at $DIR/derefer_test_multiple.rs:2:12: 9:2\n-          _0 = const ();                   // scope 0 at $DIR/derefer_test_multiple.rs:2:12: 9:2\n-          StorageDead(_9);                 // scope 5 at $DIR/derefer_test_multiple.rs:9:1: 9:2\n-          StorageDead(_8);                 // scope 4 at $DIR/derefer_test_multiple.rs:9:1: 9:2\n-          StorageDead(_6);                 // scope 3 at $DIR/derefer_test_multiple.rs:9:1: 9:2\n-          StorageDead(_4);                 // scope 2 at $DIR/derefer_test_multiple.rs:9:1: 9:2\n-          StorageDead(_2);                 // scope 1 at $DIR/derefer_test_multiple.rs:9:1: 9:2\n-          StorageDead(_1);                 // scope 0 at $DIR/derefer_test_multiple.rs:9:1: 9:2\n-          return;                          // scope 0 at $DIR/derefer_test_multiple.rs:9:2: 9:2\n+          StorageLive(_1);                 // scope 0 at $DIR/derefer_test_multiple.rs:+1:9: +1:14\n+          _1 = (const 42_i32, const 43_i32); // scope 0 at $DIR/derefer_test_multiple.rs:+1:17: +1:25\n+          StorageLive(_2);                 // scope 1 at $DIR/derefer_test_multiple.rs:+2:9: +2:14\n+          StorageLive(_3);                 // scope 1 at $DIR/derefer_test_multiple.rs:+2:22: +2:28\n+          _3 = &mut _1;                    // scope 1 at $DIR/derefer_test_multiple.rs:+2:22: +2:28\n+          _2 = (const 99_i32, move _3);    // scope 1 at $DIR/derefer_test_multiple.rs:+2:17: +2:29\n+          StorageDead(_3);                 // scope 1 at $DIR/derefer_test_multiple.rs:+2:28: +2:29\n+          StorageLive(_4);                 // scope 2 at $DIR/derefer_test_multiple.rs:+3:9: +3:14\n+          StorageLive(_5);                 // scope 2 at $DIR/derefer_test_multiple.rs:+3:22: +3:28\n+          _5 = &mut _2;                    // scope 2 at $DIR/derefer_test_multiple.rs:+3:22: +3:28\n+          _4 = (const 11_i32, move _5);    // scope 2 at $DIR/derefer_test_multiple.rs:+3:17: +3:29\n+          StorageDead(_5);                 // scope 2 at $DIR/derefer_test_multiple.rs:+3:28: +3:29\n+          StorageLive(_6);                 // scope 3 at $DIR/derefer_test_multiple.rs:+4:9: +4:14\n+          StorageLive(_7);                 // scope 3 at $DIR/derefer_test_multiple.rs:+4:22: +4:28\n+          _7 = &mut _4;                    // scope 3 at $DIR/derefer_test_multiple.rs:+4:22: +4:28\n+          _6 = (const 13_i32, move _7);    // scope 3 at $DIR/derefer_test_multiple.rs:+4:17: +4:29\n+          StorageDead(_7);                 // scope 3 at $DIR/derefer_test_multiple.rs:+4:28: +4:29\n+          StorageLive(_8);                 // scope 4 at $DIR/derefer_test_multiple.rs:+5:9: +5:10\n+-         _8 = &mut ((*((*((*(_6.1: &mut (i32, &mut (i32, &mut (i32, i32))))).1: &mut (i32, &mut (i32, i32)))).1: &mut (i32, i32))).1: i32); // scope 4 at $DIR/derefer_test_multiple.rs:+5:13: +5:30\n++         StorageLive(_10);                // scope 4 at $DIR/derefer_test_multiple.rs:+5:13: +5:30\n++         _10 = deref_copy (_6.1: &mut (i32, &mut (i32, &mut (i32, i32)))); // scope 4 at $DIR/derefer_test_multiple.rs:+5:13: +5:30\n++         StorageLive(_11);                // scope 4 at $DIR/derefer_test_multiple.rs:+5:13: +5:30\n++         _11 = deref_copy ((*_10).1: &mut (i32, &mut (i32, i32))); // scope 4 at $DIR/derefer_test_multiple.rs:+5:13: +5:30\n++         StorageDead(_10);                // scope 4 at $DIR/derefer_test_multiple.rs:+5:13: +5:30\n++         StorageLive(_12);                // scope 4 at $DIR/derefer_test_multiple.rs:+5:13: +5:30\n++         _12 = deref_copy ((*_11).1: &mut (i32, i32)); // scope 4 at $DIR/derefer_test_multiple.rs:+5:13: +5:30\n++         StorageDead(_11);                // scope 4 at $DIR/derefer_test_multiple.rs:+5:13: +5:30\n++         _8 = &mut ((*_12).1: i32);       // scope 4 at $DIR/derefer_test_multiple.rs:+5:13: +5:30\n++         StorageDead(_12);                // scope 5 at $DIR/derefer_test_multiple.rs:+6:9: +6:10\n+          StorageLive(_9);                 // scope 5 at $DIR/derefer_test_multiple.rs:+6:9: +6:10\n+-         _9 = &mut ((*((*((*(_6.1: &mut (i32, &mut (i32, &mut (i32, i32))))).1: &mut (i32, &mut (i32, i32)))).1: &mut (i32, i32))).1: i32); // scope 5 at $DIR/derefer_test_multiple.rs:+6:13: +6:30\n++         StorageLive(_13);                // scope 5 at $DIR/derefer_test_multiple.rs:+6:13: +6:30\n++         _13 = deref_copy (_6.1: &mut (i32, &mut (i32, &mut (i32, i32)))); // scope 5 at $DIR/derefer_test_multiple.rs:+6:13: +6:30\n++         StorageLive(_14);                // scope 5 at $DIR/derefer_test_multiple.rs:+6:13: +6:30\n++         _14 = deref_copy ((*_13).1: &mut (i32, &mut (i32, i32))); // scope 5 at $DIR/derefer_test_multiple.rs:+6:13: +6:30\n++         StorageDead(_13);                // scope 5 at $DIR/derefer_test_multiple.rs:+6:13: +6:30\n++         StorageLive(_15);                // scope 5 at $DIR/derefer_test_multiple.rs:+6:13: +6:30\n++         _15 = deref_copy ((*_14).1: &mut (i32, i32)); // scope 5 at $DIR/derefer_test_multiple.rs:+6:13: +6:30\n++         StorageDead(_14);                // scope 5 at $DIR/derefer_test_multiple.rs:+6:13: +6:30\n++         _9 = &mut ((*_15).1: i32);       // scope 5 at $DIR/derefer_test_multiple.rs:+6:13: +6:30\n++         StorageDead(_15);                // scope 0 at $DIR/derefer_test_multiple.rs:+0:12: +7:2\n+          _0 = const ();                   // scope 0 at $DIR/derefer_test_multiple.rs:+0:12: +7:2\n+          StorageDead(_9);                 // scope 5 at $DIR/derefer_test_multiple.rs:+7:1: +7:2\n+          StorageDead(_8);                 // scope 4 at $DIR/derefer_test_multiple.rs:+7:1: +7:2\n+          StorageDead(_6);                 // scope 3 at $DIR/derefer_test_multiple.rs:+7:1: +7:2\n+          StorageDead(_4);                 // scope 2 at $DIR/derefer_test_multiple.rs:+7:1: +7:2\n+          StorageDead(_2);                 // scope 1 at $DIR/derefer_test_multiple.rs:+7:1: +7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/derefer_test_multiple.rs:+7:1: +7:2\n+          return;                          // scope 0 at $DIR/derefer_test_multiple.rs:+7:2: +7:2\n +     }\n + \n +     bb1 (cleanup): {\n-+         resume;                          // scope 0 at $DIR/derefer_test_multiple.rs:2:1: 9:2\n++         resume;                          // scope 0 at $DIR/derefer_test_multiple.rs:+0:1: +7:2\n       }\n   }\n   "}, {"sha": "8929f2cc779a741920528a9ce8aca03d37990fe4", "filename": "src/test/mir-opt/dest-prop/branch.main.DestinationPropagation.diff", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.main.DestinationPropagation.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,64 +2,64 @@\n + // MIR for `main` after DestinationPropagation\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/branch.rs:12:11: 12:11\n-      let _1: i32;                         // in scope 0 at $DIR/branch.rs:13:9: 13:10\n-      let mut _3: bool;                    // in scope 0 at $DIR/branch.rs:15:16: 15:22\n-      let _4: i32;                         // in scope 0 at $DIR/branch.rs:18:9: 18:14\n+      let mut _0: ();                      // return place in scope 0 at $DIR/branch.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/branch.rs:+1:9: +1:10\n+      let mut _3: bool;                    // in scope 0 at $DIR/branch.rs:+3:16: +3:22\n+      let _4: i32;                         // in scope 0 at $DIR/branch.rs:+6:9: +6:14\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/branch.rs:13:9: 13:10\n-          let _2: i32;                     // in scope 1 at $DIR/branch.rs:15:9: 15:10\n+          debug x => _1;                   // in scope 1 at $DIR/branch.rs:+1:9: +1:10\n+          let _2: i32;                     // in scope 1 at $DIR/branch.rs:+3:9: +3:10\n           scope 2 {\n-              debug y => _2;               // in scope 2 at $DIR/branch.rs:15:9: 15:10\n+              debug y => _2;               // in scope 2 at $DIR/branch.rs:+3:9: +3:10\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/branch.rs:13:9: 13:10\n-          _1 = val() -> bb1;               // scope 0 at $DIR/branch.rs:13:13: 13:18\n+          StorageLive(_1);                 // scope 0 at $DIR/branch.rs:+1:9: +1:10\n+          _1 = val() -> bb1;               // scope 0 at $DIR/branch.rs:+1:13: +1:18\n                                            // mir::Constant\n                                            // + span: $DIR/branch.rs:13:13: 13:16\n                                            // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageLive(_2);                 // scope 1 at $DIR/branch.rs:15:9: 15:10\n-          StorageLive(_3);                 // scope 1 at $DIR/branch.rs:15:16: 15:22\n-          _3 = cond() -> bb2;              // scope 1 at $DIR/branch.rs:15:16: 15:22\n+          StorageLive(_2);                 // scope 1 at $DIR/branch.rs:+3:9: +3:10\n+          StorageLive(_3);                 // scope 1 at $DIR/branch.rs:+3:16: +3:22\n+          _3 = cond() -> bb2;              // scope 1 at $DIR/branch.rs:+3:16: +3:22\n                                            // mir::Constant\n                                            // + span: $DIR/branch.rs:15:16: 15:20\n                                            // + literal: Const { ty: fn() -> bool {cond}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n-          switchInt(move _3) -> [false: bb4, otherwise: bb3]; // scope 1 at $DIR/branch.rs:15:16: 15:22\n+          switchInt(move _3) -> [false: bb4, otherwise: bb3]; // scope 1 at $DIR/branch.rs:+3:16: +3:22\n       }\n   \n       bb3: {\n-          nop;                             // scope 1 at $DIR/branch.rs:16:9: 16:10\n-          goto -> bb6;                     // scope 1 at $DIR/branch.rs:15:13: 20:6\n+          nop;                             // scope 1 at $DIR/branch.rs:+4:9: +4:10\n+          goto -> bb6;                     // scope 1 at $DIR/branch.rs:+3:13: +8:6\n       }\n   \n       bb4: {\n-          StorageLive(_4);                 // scope 1 at $DIR/branch.rs:18:9: 18:14\n-          _4 = val() -> bb5;               // scope 1 at $DIR/branch.rs:18:9: 18:14\n+          StorageLive(_4);                 // scope 1 at $DIR/branch.rs:+6:9: +6:14\n+          _4 = val() -> bb5;               // scope 1 at $DIR/branch.rs:+6:9: +6:14\n                                            // mir::Constant\n                                            // + span: $DIR/branch.rs:18:9: 18:12\n                                            // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n       }\n   \n       bb5: {\n-          StorageDead(_4);                 // scope 1 at $DIR/branch.rs:18:14: 18:15\n-          nop;                             // scope 1 at $DIR/branch.rs:19:9: 19:10\n-          goto -> bb6;                     // scope 1 at $DIR/branch.rs:15:13: 20:6\n+          StorageDead(_4);                 // scope 1 at $DIR/branch.rs:+6:14: +6:15\n+          nop;                             // scope 1 at $DIR/branch.rs:+7:9: +7:10\n+          goto -> bb6;                     // scope 1 at $DIR/branch.rs:+3:13: +8:6\n       }\n   \n       bb6: {\n-          StorageDead(_3);                 // scope 1 at $DIR/branch.rs:20:5: 20:6\n-          nop;                             // scope 0 at $DIR/branch.rs:12:11: 21:2\n-          StorageDead(_2);                 // scope 1 at $DIR/branch.rs:21:1: 21:2\n-          StorageDead(_1);                 // scope 0 at $DIR/branch.rs:21:1: 21:2\n-          return;                          // scope 0 at $DIR/branch.rs:21:2: 21:2\n+          StorageDead(_3);                 // scope 1 at $DIR/branch.rs:+8:5: +8:6\n+          nop;                             // scope 0 at $DIR/branch.rs:+0:11: +9:2\n+          StorageDead(_2);                 // scope 1 at $DIR/branch.rs:+9:1: +9:2\n+          StorageDead(_1);                 // scope 0 at $DIR/branch.rs:+9:1: +9:2\n+          return;                          // scope 0 at $DIR/branch.rs:+9:2: +9:2\n       }\n   }\n   "}, {"sha": "f28bc72df58cb252924531a641978869065760e7", "filename": "src/test/mir-opt/dest-prop/copy_propagation_arg.arg_src.DestinationPropagation.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.arg_src.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.arg_src.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.arg_src.DestinationPropagation.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,25 +2,25 @@\n + // MIR for `arg_src` after DestinationPropagation\n   \n   fn arg_src(_1: i32) -> i32 {\n-      debug x => const 123_i32;            // in scope 0 at $DIR/copy_propagation_arg.rs:27:12: 27:17\n-      let mut _0: i32;                     // return place in scope 0 at $DIR/copy_propagation_arg.rs:27:27: 27:30\n-      let _2: i32;                         // in scope 0 at $DIR/copy_propagation_arg.rs:28:9: 28:10\n+      debug x => const 123_i32;            // in scope 0 at $DIR/copy_propagation_arg.rs:+0:12: +0:17\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:27: +0:30\n+      let _2: i32;                         // in scope 0 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n       scope 1 {\n--         debug y => _2;                   // in scope 1 at $DIR/copy_propagation_arg.rs:28:9: 28:10\n-+         debug y => _0;                   // in scope 1 at $DIR/copy_propagation_arg.rs:28:9: 28:10\n+-         debug y => _2;                   // in scope 1 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n++         debug y => _0;                   // in scope 1 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n       }\n   \n       bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:28:9: 28:10\n--         _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:28:13: 28:14\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:28:9: 28:10\n-+         _0 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:28:13: 28:14\n-          nop;                             // scope 1 at $DIR/copy_propagation_arg.rs:29:5: 29:12\n--         _0 = _2;                         // scope 1 at $DIR/copy_propagation_arg.rs:30:5: 30:6\n--         StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:31:1: 31:2\n-+         nop;                             // scope 1 at $DIR/copy_propagation_arg.rs:30:5: 30:6\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:31:1: 31:2\n-          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:31:2: 31:2\n+-         StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n+-         _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:13: +1:14\n++         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n++         _0 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:13: +1:14\n+          nop;                             // scope 1 at $DIR/copy_propagation_arg.rs:+2:5: +2:12\n+-         _0 = _2;                         // scope 1 at $DIR/copy_propagation_arg.rs:+3:5: +3:6\n+-         StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+4:1: +4:2\n++         nop;                             // scope 1 at $DIR/copy_propagation_arg.rs:+3:5: +3:6\n++         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+4:2: +4:2\n       }\n   }\n   "}, {"sha": "a8a7e9ab6d44da99db03e7625c209d041454fe93", "filename": "src/test/mir-opt/dest-prop/copy_propagation_arg.bar.DestinationPropagation.diff", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,27 +2,27 @@\n + // MIR for `bar` after DestinationPropagation\n   \n   fn bar(_1: u8) -> () {\n-      debug x => const 5_u8;               // in scope 0 at $DIR/copy_propagation_arg.rs:15:8: 15:13\n-      let mut _0: ();                      // return place in scope 0 at $DIR/copy_propagation_arg.rs:15:19: 15:19\n-      let _2: u8;                          // in scope 0 at $DIR/copy_propagation_arg.rs:16:5: 16:13\n-      let mut _3: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:16:11: 16:12\n+      debug x => const 5_u8;               // in scope 0 at $DIR/copy_propagation_arg.rs:+0:8: +0:13\n+      let mut _0: ();                      // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +0:19\n+      let _2: u8;                          // in scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n+      let mut _3: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:16:5: 16:13\n-          StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:16:11: 16:12\n-          _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:16:11: 16:12\n-          _2 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:16:5: 16:13\n+          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n+          StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n+          _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n+          _2 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n                                            // mir::Constant\n                                            // + span: $DIR/copy_propagation_arg.rs:16:5: 16:10\n                                            // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:16:12: 16:13\n-          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:16:13: 16:14\n-          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:17:5: 17:10\n-          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:15:19: 18:2\n-          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:18:2: 18:2\n+          StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:12: +1:13\n+          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:13: +1:14\n+          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+2:5: +2:10\n+          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +3:2\n+          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+3:2: +3:2\n       }\n   }\n   "}, {"sha": "ce9be4c27183dd230cb846fe60dce9a67d3ad4db", "filename": "src/test/mir-opt/dest-prop/copy_propagation_arg.baz.DestinationPropagation.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.baz.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.baz.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.baz.DestinationPropagation.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,17 +2,17 @@\n + // MIR for `baz` after DestinationPropagation\n   \n   fn baz(_1: i32) -> () {\n-      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:21:8: 21:13\n-      let mut _0: ();                      // return place in scope 0 at $DIR/copy_propagation_arg.rs:21:20: 21:20\n-      let mut _2: i32;                     // in scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n+      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:8: +0:13\n+      let mut _0: ();                      // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:20: +0:20\n+      let mut _2: i32;                     // in scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n-          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n-          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:23:5: 23:10\n-          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n-          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:21:20: 24:2\n-          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:24:2: 24:2\n+          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n+          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n+          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+2:5: +2:10\n+          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n+          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+0:20: +3:2\n+          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+3:2: +3:2\n       }\n   }\n   "}, {"sha": "d7a0b950fc22727039df0acebe969bd7bbf34faa", "filename": "src/test/mir-opt/dest-prop/copy_propagation_arg.foo.DestinationPropagation.diff", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,27 +2,27 @@\n + // MIR for `foo` after DestinationPropagation\n   \n   fn foo(_1: u8) -> () {\n-      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:9:8: 9:13\n-      let mut _0: ();                      // return place in scope 0 at $DIR/copy_propagation_arg.rs:9:19: 9:19\n-      let mut _2: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n-      let mut _3: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:11:15: 11:16\n+      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:8: +0:13\n+      let mut _0: ();                      // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +0:19\n+      let mut _2: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n+      let mut _3: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:+2:15: +2:16\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n-          StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:11:15: 11:16\n-          _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:11:15: 11:16\n-          _2 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n+          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n+          StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:15: +2:16\n+          _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+2:15: +2:16\n+          _2 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n                                            // mir::Constant\n                                            // + span: $DIR/copy_propagation_arg.rs:11:9: 11:14\n                                            // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:11:16: 11:17\n-          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:11:5: 11:17\n-          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:11:16: 11:17\n-          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:9:19: 12:2\n-          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:12:2: 12:2\n+          StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:16: +2:17\n+          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+2:5: +2:17\n+          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:16: +2:17\n+          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +3:2\n+          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+3:2: +3:2\n       }\n   }\n   "}, {"sha": "8eeb0d354c6986261bdcbc60f6245bee7b3691e4", "filename": "src/test/mir-opt/dest-prop/cycle.main.DestinationPropagation.diff", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,19 +2,19 @@\n + // MIR for `main` after DestinationPropagation\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:8:11: 8:11\n-      let mut _1: i32;                     // in scope 0 at $DIR/cycle.rs:9:9: 9:14\n-      let mut _4: i32;                     // in scope 0 at $DIR/cycle.rs:12:9: 12:10\n-      let _5: ();                          // in scope 0 at $DIR/cycle.rs:14:5: 14:12\n-      let mut _6: i32;                     // in scope 0 at $DIR/cycle.rs:14:10: 14:11\n+      let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:+0:11: +0:11\n+      let mut _1: i32;                     // in scope 0 at $DIR/cycle.rs:+1:9: +1:14\n+      let mut _4: i32;                     // in scope 0 at $DIR/cycle.rs:+4:9: +4:10\n+      let _5: ();                          // in scope 0 at $DIR/cycle.rs:+6:5: +6:12\n+      let mut _6: i32;                     // in scope 0 at $DIR/cycle.rs:+6:10: +6:11\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/cycle.rs:9:9: 9:14\n-          let _2: i32;                     // in scope 1 at $DIR/cycle.rs:10:9: 10:10\n+          debug x => _1;                   // in scope 1 at $DIR/cycle.rs:+1:9: +1:14\n+          let _2: i32;                     // in scope 1 at $DIR/cycle.rs:+2:9: +2:10\n           scope 2 {\n-              debug y => _2;               // in scope 2 at $DIR/cycle.rs:10:9: 10:10\n-              let _3: i32;                 // in scope 2 at $DIR/cycle.rs:11:9: 11:10\n+              debug y => _2;               // in scope 2 at $DIR/cycle.rs:+2:9: +2:10\n+              let _3: i32;                 // in scope 2 at $DIR/cycle.rs:+3:9: +3:10\n               scope 3 {\n-                  debug z => _3;           // in scope 3 at $DIR/cycle.rs:11:9: 11:10\n+                  debug z => _3;           // in scope 3 at $DIR/cycle.rs:+3:9: +3:10\n                   scope 4 (inlined std::mem::drop::<i32>) { // at $DIR/cycle.rs:14:5: 14:12\n                       debug _x => _6;      // in scope 4 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n                   }\n@@ -23,31 +23,31 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/cycle.rs:9:9: 9:14\n-          _1 = val() -> bb1;               // scope 0 at $DIR/cycle.rs:9:17: 9:22\n+          StorageLive(_1);                 // scope 0 at $DIR/cycle.rs:+1:9: +1:14\n+          _1 = val() -> bb1;               // scope 0 at $DIR/cycle.rs:+1:17: +1:22\n                                            // mir::Constant\n                                            // + span: $DIR/cycle.rs:9:17: 9:20\n                                            // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageLive(_2);                 // scope 1 at $DIR/cycle.rs:10:9: 10:10\n-          nop;                             // scope 1 at $DIR/cycle.rs:10:13: 10:14\n-          StorageLive(_3);                 // scope 2 at $DIR/cycle.rs:11:9: 11:10\n-          nop;                             // scope 2 at $DIR/cycle.rs:11:13: 11:14\n-          StorageLive(_4);                 // scope 3 at $DIR/cycle.rs:12:9: 12:10\n-          nop;                             // scope 3 at $DIR/cycle.rs:12:9: 12:10\n-          nop;                             // scope 3 at $DIR/cycle.rs:12:5: 12:10\n-          StorageDead(_4);                 // scope 3 at $DIR/cycle.rs:12:9: 12:10\n-          StorageLive(_5);                 // scope 3 at $DIR/cycle.rs:14:5: 14:12\n-          StorageLive(_6);                 // scope 3 at $DIR/cycle.rs:14:10: 14:11\n-          nop;                             // scope 3 at $DIR/cycle.rs:14:10: 14:11\n-          StorageDead(_6);                 // scope 3 at $DIR/cycle.rs:14:11: 14:12\n-          StorageDead(_5);                 // scope 3 at $DIR/cycle.rs:14:12: 14:13\n-          StorageDead(_3);                 // scope 2 at $DIR/cycle.rs:15:1: 15:2\n-          StorageDead(_2);                 // scope 1 at $DIR/cycle.rs:15:1: 15:2\n-          StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:15:1: 15:2\n-          return;                          // scope 0 at $DIR/cycle.rs:15:2: 15:2\n+          StorageLive(_2);                 // scope 1 at $DIR/cycle.rs:+2:9: +2:10\n+          nop;                             // scope 1 at $DIR/cycle.rs:+2:13: +2:14\n+          StorageLive(_3);                 // scope 2 at $DIR/cycle.rs:+3:9: +3:10\n+          nop;                             // scope 2 at $DIR/cycle.rs:+3:13: +3:14\n+          StorageLive(_4);                 // scope 3 at $DIR/cycle.rs:+4:9: +4:10\n+          nop;                             // scope 3 at $DIR/cycle.rs:+4:9: +4:10\n+          nop;                             // scope 3 at $DIR/cycle.rs:+4:5: +4:10\n+          StorageDead(_4);                 // scope 3 at $DIR/cycle.rs:+4:9: +4:10\n+          StorageLive(_5);                 // scope 3 at $DIR/cycle.rs:+6:5: +6:12\n+          StorageLive(_6);                 // scope 3 at $DIR/cycle.rs:+6:10: +6:11\n+          nop;                             // scope 3 at $DIR/cycle.rs:+6:10: +6:11\n+          StorageDead(_6);                 // scope 3 at $DIR/cycle.rs:+6:11: +6:12\n+          StorageDead(_5);                 // scope 3 at $DIR/cycle.rs:+6:12: +6:13\n+          StorageDead(_3);                 // scope 2 at $DIR/cycle.rs:+7:1: +7:2\n+          StorageDead(_2);                 // scope 1 at $DIR/cycle.rs:+7:1: +7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:+7:1: +7:2\n+          return;                          // scope 0 at $DIR/cycle.rs:+7:2: +7:2\n       }\n   }\n   "}, {"sha": "a20a172af1bbc737db614ebe21024debdf6bd745", "filename": "src/test/mir-opt/dest-prop/simple.nrvo.DestinationPropagation.diff", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fsimple.nrvo.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fsimple.nrvo.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fsimple.nrvo.DestinationPropagation.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,38 +2,38 @@\n + // MIR for `nrvo` after DestinationPropagation\n   \n   fn nrvo(_1: for<'r> fn(&'r mut [u8; 1024])) -> [u8; 1024] {\n-      debug init => _1;                    // in scope 0 at $DIR/simple.rs:4:9: 4:13\n-      let mut _0: [u8; 1024];              // return place in scope 0 at $DIR/simple.rs:4:39: 4:49\n-      let mut _2: [u8; 1024];              // in scope 0 at $DIR/simple.rs:5:9: 5:16\n-      let _3: ();                          // in scope 0 at $DIR/simple.rs:6:5: 6:19\n-      let mut _4: for<'r> fn(&'r mut [u8; 1024]); // in scope 0 at $DIR/simple.rs:6:5: 6:9\n-      let mut _5: &mut [u8; 1024];         // in scope 0 at $DIR/simple.rs:6:10: 6:18\n-      let mut _6: &mut [u8; 1024];         // in scope 0 at $DIR/simple.rs:6:10: 6:18\n+      debug init => _1;                    // in scope 0 at $DIR/simple.rs:+0:9: +0:13\n+      let mut _0: [u8; 1024];              // return place in scope 0 at $DIR/simple.rs:+0:39: +0:49\n+      let mut _2: [u8; 1024];              // in scope 0 at $DIR/simple.rs:+1:9: +1:16\n+      let _3: ();                          // in scope 0 at $DIR/simple.rs:+2:5: +2:19\n+      let mut _4: for<'r> fn(&'r mut [u8; 1024]); // in scope 0 at $DIR/simple.rs:+2:5: +2:9\n+      let mut _5: &mut [u8; 1024];         // in scope 0 at $DIR/simple.rs:+2:10: +2:18\n+      let mut _6: &mut [u8; 1024];         // in scope 0 at $DIR/simple.rs:+2:10: +2:18\n       scope 1 {\n-          debug buf => _2;                 // in scope 1 at $DIR/simple.rs:5:9: 5:16\n+          debug buf => _2;                 // in scope 1 at $DIR/simple.rs:+1:9: +1:16\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/simple.rs:5:9: 5:16\n-          _2 = [const 0_u8; 1024];         // scope 0 at $DIR/simple.rs:5:19: 5:28\n-          StorageLive(_3);                 // scope 1 at $DIR/simple.rs:6:5: 6:19\n-          StorageLive(_4);                 // scope 1 at $DIR/simple.rs:6:5: 6:9\n-          _4 = _1;                         // scope 1 at $DIR/simple.rs:6:5: 6:9\n-          StorageLive(_5);                 // scope 1 at $DIR/simple.rs:6:10: 6:18\n-          StorageLive(_6);                 // scope 1 at $DIR/simple.rs:6:10: 6:18\n-          _6 = &mut _2;                    // scope 1 at $DIR/simple.rs:6:10: 6:18\n-          _5 = &mut (*_6);                 // scope 1 at $DIR/simple.rs:6:10: 6:18\n-          _3 = move _4(move _5) -> bb1;    // scope 1 at $DIR/simple.rs:6:5: 6:19\n+          StorageLive(_2);                 // scope 0 at $DIR/simple.rs:+1:9: +1:16\n+          _2 = [const 0_u8; 1024];         // scope 0 at $DIR/simple.rs:+1:19: +1:28\n+          StorageLive(_3);                 // scope 1 at $DIR/simple.rs:+2:5: +2:19\n+          StorageLive(_4);                 // scope 1 at $DIR/simple.rs:+2:5: +2:9\n+          _4 = _1;                         // scope 1 at $DIR/simple.rs:+2:5: +2:9\n+          StorageLive(_5);                 // scope 1 at $DIR/simple.rs:+2:10: +2:18\n+          StorageLive(_6);                 // scope 1 at $DIR/simple.rs:+2:10: +2:18\n+          _6 = &mut _2;                    // scope 1 at $DIR/simple.rs:+2:10: +2:18\n+          _5 = &mut (*_6);                 // scope 1 at $DIR/simple.rs:+2:10: +2:18\n+          _3 = move _4(move _5) -> bb1;    // scope 1 at $DIR/simple.rs:+2:5: +2:19\n       }\n   \n       bb1: {\n-          StorageDead(_5);                 // scope 1 at $DIR/simple.rs:6:18: 6:19\n-          StorageDead(_4);                 // scope 1 at $DIR/simple.rs:6:18: 6:19\n-          StorageDead(_6);                 // scope 1 at $DIR/simple.rs:6:19: 6:20\n-          StorageDead(_3);                 // scope 1 at $DIR/simple.rs:6:19: 6:20\n-          _0 = _2;                         // scope 1 at $DIR/simple.rs:7:5: 7:8\n-          StorageDead(_2);                 // scope 0 at $DIR/simple.rs:8:1: 8:2\n-          return;                          // scope 0 at $DIR/simple.rs:8:2: 8:2\n+          StorageDead(_5);                 // scope 1 at $DIR/simple.rs:+2:18: +2:19\n+          StorageDead(_4);                 // scope 1 at $DIR/simple.rs:+2:18: +2:19\n+          StorageDead(_6);                 // scope 1 at $DIR/simple.rs:+2:19: +2:20\n+          StorageDead(_3);                 // scope 1 at $DIR/simple.rs:+2:19: +2:20\n+          _0 = _2;                         // scope 1 at $DIR/simple.rs:+3:5: +3:8\n+          StorageDead(_2);                 // scope 0 at $DIR/simple.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/simple.rs:+4:2: +4:2\n       }\n   }\n   "}, {"sha": "accdb00852ede652ae873330e9949037b4108c68", "filename": "src/test/mir-opt/dest-prop/union.main.DestinationPropagation.diff", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,13 +2,13 @@\n + // MIR for `main` after DestinationPropagation\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/union.rs:8:11: 8:11\n-      let _1: main::Un;                    // in scope 0 at $DIR/union.rs:13:9: 13:11\n-      let mut _2: u32;                     // in scope 0 at $DIR/union.rs:13:23: 13:28\n-      let _3: ();                          // in scope 0 at $DIR/union.rs:15:5: 15:27\n-      let mut _4: u32;                     // in scope 0 at $DIR/union.rs:15:10: 15:26\n+      let mut _0: ();                      // return place in scope 0 at $DIR/union.rs:+0:11: +0:11\n+      let _1: main::Un;                    // in scope 0 at $DIR/union.rs:+5:9: +5:11\n+      let mut _2: u32;                     // in scope 0 at $DIR/union.rs:+5:23: +5:28\n+      let _3: ();                          // in scope 0 at $DIR/union.rs:+7:5: +7:27\n+      let mut _4: u32;                     // in scope 0 at $DIR/union.rs:+7:10: +7:26\n       scope 1 {\n-          debug un => _1;                  // in scope 1 at $DIR/union.rs:13:9: 13:11\n+          debug un => _1;                  // in scope 1 at $DIR/union.rs:+5:9: +5:11\n           scope 2 {\n           }\n           scope 3 (inlined std::mem::drop::<u32>) { // at $DIR/union.rs:15:5: 15:27\n@@ -17,25 +17,25 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/union.rs:13:9: 13:11\n-          StorageLive(_2);                 // scope 0 at $DIR/union.rs:13:23: 13:28\n-          _2 = val() -> bb1;               // scope 0 at $DIR/union.rs:13:23: 13:28\n+          StorageLive(_1);                 // scope 0 at $DIR/union.rs:+5:9: +5:11\n+          StorageLive(_2);                 // scope 0 at $DIR/union.rs:+5:23: +5:28\n+          _2 = val() -> bb1;               // scope 0 at $DIR/union.rs:+5:23: +5:28\n                                            // mir::Constant\n                                            // + span: $DIR/union.rs:13:23: 13:26\n                                            // + literal: Const { ty: fn() -> u32 {val}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          nop;                             // scope 0 at $DIR/union.rs:13:14: 13:30\n-          nop;                             // scope 0 at $DIR/union.rs:13:14: 13:30\n-          StorageDead(_2);                 // scope 0 at $DIR/union.rs:13:29: 13:30\n-          StorageLive(_3);                 // scope 1 at $DIR/union.rs:15:5: 15:27\n-          StorageLive(_4);                 // scope 1 at $DIR/union.rs:15:10: 15:26\n-          nop;                             // scope 2 at $DIR/union.rs:15:19: 15:24\n-          StorageDead(_4);                 // scope 1 at $DIR/union.rs:15:26: 15:27\n-          StorageDead(_3);                 // scope 1 at $DIR/union.rs:15:27: 15:28\n-          StorageDead(_1);                 // scope 0 at $DIR/union.rs:16:1: 16:2\n-          return;                          // scope 0 at $DIR/union.rs:16:2: 16:2\n+          nop;                             // scope 0 at $DIR/union.rs:+5:14: +5:30\n+          nop;                             // scope 0 at $DIR/union.rs:+5:14: +5:30\n+          StorageDead(_2);                 // scope 0 at $DIR/union.rs:+5:29: +5:30\n+          StorageLive(_3);                 // scope 1 at $DIR/union.rs:+7:5: +7:27\n+          StorageLive(_4);                 // scope 1 at $DIR/union.rs:+7:10: +7:26\n+          nop;                             // scope 2 at $DIR/union.rs:+7:19: +7:24\n+          StorageDead(_4);                 // scope 1 at $DIR/union.rs:+7:26: +7:27\n+          StorageDead(_3);                 // scope 1 at $DIR/union.rs:+7:27: +7:28\n+          StorageDead(_1);                 // scope 0 at $DIR/union.rs:+8:1: +8:2\n+          return;                          // scope 0 at $DIR/union.rs:+8:2: +8:2\n       }\n   }\n   "}, {"sha": "89d8106ae3ce7394079b1f33df0ca5e804fcebff", "filename": "src/test/mir-opt/early_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,77 +2,77 @@\n + // MIR for `opt1` after EarlyOtherwiseBranch\n   \n   fn opt1(_1: Option<u32>, _2: Option<u32>) -> u32 {\n-      debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch.rs:3:9: 3:10\n-      debug y => _2;                       // in scope 0 at $DIR/early_otherwise_branch.rs:3:25: 3:26\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/early_otherwise_branch.rs:3:44: 3:47\n-      let mut _3: (std::option::Option<u32>, std::option::Option<u32>); // in scope 0 at $DIR/early_otherwise_branch.rs:4:11: 4:17\n-      let mut _4: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch.rs:4:12: 4:13\n-      let mut _5: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch.rs:4:15: 4:16\n-      let mut _6: isize;                   // in scope 0 at $DIR/early_otherwise_branch.rs:5:19: 5:26\n-      let mut _7: isize;                   // in scope 0 at $DIR/early_otherwise_branch.rs:5:10: 5:17\n-      let _8: u32;                         // in scope 0 at $DIR/early_otherwise_branch.rs:5:15: 5:16\n-      let _9: u32;                         // in scope 0 at $DIR/early_otherwise_branch.rs:5:24: 5:25\n-+     let mut _10: isize;                  // in scope 0 at $DIR/early_otherwise_branch.rs:4:5: 4:17\n-+     let mut _11: bool;                   // in scope 0 at $DIR/early_otherwise_branch.rs:4:5: 4:17\n+      debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch.rs:+0:9: +0:10\n+      debug y => _2;                       // in scope 0 at $DIR/early_otherwise_branch.rs:+0:25: +0:26\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/early_otherwise_branch.rs:+0:44: +0:47\n+      let mut _3: (std::option::Option<u32>, std::option::Option<u32>); // in scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n+      let mut _4: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch.rs:+1:12: +1:13\n+      let mut _5: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch.rs:+1:15: +1:16\n+      let mut _6: isize;                   // in scope 0 at $DIR/early_otherwise_branch.rs:+2:19: +2:26\n+      let mut _7: isize;                   // in scope 0 at $DIR/early_otherwise_branch.rs:+2:10: +2:17\n+      let _8: u32;                         // in scope 0 at $DIR/early_otherwise_branch.rs:+2:15: +2:16\n+      let _9: u32;                         // in scope 0 at $DIR/early_otherwise_branch.rs:+2:24: +2:25\n++     let mut _10: isize;                  // in scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++     let mut _11: bool;                   // in scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n       scope 1 {\n-          debug a => _8;                   // in scope 1 at $DIR/early_otherwise_branch.rs:5:15: 5:16\n-          debug b => _9;                   // in scope 1 at $DIR/early_otherwise_branch.rs:5:24: 5:25\n+          debug a => _8;                   // in scope 1 at $DIR/early_otherwise_branch.rs:+2:15: +2:16\n+          debug b => _9;                   // in scope 1 at $DIR/early_otherwise_branch.rs:+2:24: +2:25\n       }\n   \n       bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/early_otherwise_branch.rs:4:11: 4:17\n-          StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch.rs:4:12: 4:13\n-          _4 = _1;                         // scope 0 at $DIR/early_otherwise_branch.rs:4:12: 4:13\n-          StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:4:15: 4:16\n-          _5 = _2;                         // scope 0 at $DIR/early_otherwise_branch.rs:4:15: 4:16\n-          Deinit(_3);                      // scope 0 at $DIR/early_otherwise_branch.rs:4:11: 4:17\n-          (_3.0: std::option::Option<u32>) = move _4; // scope 0 at $DIR/early_otherwise_branch.rs:4:11: 4:17\n-          (_3.1: std::option::Option<u32>) = move _5; // scope 0 at $DIR/early_otherwise_branch.rs:4:11: 4:17\n-          StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:4:16: 4:17\n-          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch.rs:4:16: 4:17\n-          _7 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:4:11: 4:17\n--         switchInt(move _7) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 4:17\n-+         StorageLive(_10);                // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 4:17\n-+         _10 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 4:17\n-+         StorageLive(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 4:17\n-+         _11 = Ne(_7, move _10);          // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 4:17\n-+         StorageDead(_10);                // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 4:17\n-+         switchInt(move _11) -> [false: bb4, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 4:17\n+          StorageLive(_3);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n+          StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:12: +1:13\n+          _4 = _1;                         // scope 0 at $DIR/early_otherwise_branch.rs:+1:12: +1:13\n+          StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:15: +1:16\n+          _5 = _2;                         // scope 0 at $DIR/early_otherwise_branch.rs:+1:15: +1:16\n+          Deinit(_3);                      // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n+          (_3.0: std::option::Option<u32>) = move _4; // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n+          (_3.1: std::option::Option<u32>) = move _5; // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n+          StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:16: +1:17\n+          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:16: +1:17\n+          _7 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n+-         switchInt(move _7) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++         StorageLive(_10);                // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++         _10 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++         StorageLive(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++         _11 = Ne(_7, move _10);          // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++         StorageDead(_10);                // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++         switchInt(move _11) -> [false: bb4, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n       }\n   \n       bb1: {\n-+         StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:6:14: 6:15\n-          _0 = const 1_u32;                // scope 0 at $DIR/early_otherwise_branch.rs:6:14: 6:15\n--         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:6:14: 6:15\n-+         goto -> bb3;                     // scope 0 at $DIR/early_otherwise_branch.rs:6:14: 6:15\n++         StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:+3:14: +3:15\n+          _0 = const 1_u32;                // scope 0 at $DIR/early_otherwise_branch.rs:+3:14: +3:15\n+-         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:+3:14: +3:15\n++         goto -> bb3;                     // scope 0 at $DIR/early_otherwise_branch.rs:+3:14: +3:15\n       }\n   \n       bb2: {\n--         _6 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:4:11: 4:17\n--         switchInt(move _6) -> [1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 4:17\n+-         _6 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n+-         switchInt(move _6) -> [1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n -     }\n - \n -     bb3: {\n-          StorageLive(_8);                 // scope 0 at $DIR/early_otherwise_branch.rs:5:15: 5:16\n-          _8 = (((_3.0: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch.rs:5:15: 5:16\n-          StorageLive(_9);                 // scope 0 at $DIR/early_otherwise_branch.rs:5:24: 5:25\n-          _9 = (((_3.1: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch.rs:5:24: 5:25\n-          _0 = const 0_u32;                // scope 1 at $DIR/early_otherwise_branch.rs:5:31: 5:32\n-          StorageDead(_9);                 // scope 0 at $DIR/early_otherwise_branch.rs:5:31: 5:32\n-          StorageDead(_8);                 // scope 0 at $DIR/early_otherwise_branch.rs:5:31: 5:32\n--         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:5:31: 5:32\n-+         goto -> bb3;                     // scope 0 at $DIR/early_otherwise_branch.rs:5:31: 5:32\n+          StorageLive(_8);                 // scope 0 at $DIR/early_otherwise_branch.rs:+2:15: +2:16\n+          _8 = (((_3.0: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch.rs:+2:15: +2:16\n+          StorageLive(_9);                 // scope 0 at $DIR/early_otherwise_branch.rs:+2:24: +2:25\n+          _9 = (((_3.1: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch.rs:+2:24: +2:25\n+          _0 = const 0_u32;                // scope 1 at $DIR/early_otherwise_branch.rs:+2:31: +2:32\n+          StorageDead(_9);                 // scope 0 at $DIR/early_otherwise_branch.rs:+2:31: +2:32\n+          StorageDead(_8);                 // scope 0 at $DIR/early_otherwise_branch.rs:+2:31: +2:32\n+-         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:+2:31: +2:32\n++         goto -> bb3;                     // scope 0 at $DIR/early_otherwise_branch.rs:+2:31: +2:32\n       }\n   \n -     bb4: {\n +     bb3: {\n-          StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch.rs:8:1: 8:2\n-          return;                          // scope 0 at $DIR/early_otherwise_branch.rs:8:2: 8:2\n+          StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/early_otherwise_branch.rs:+5:2: +5:2\n +     }\n + \n +     bb4: {\n-+         StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 4:17\n-+         switchInt(_7) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 4:17\n++         StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++         switchInt(_7) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n       }\n   }\n   "}, {"sha": "1a9efa930036c40e0583477d27e55f5a2b3c1067", "filename": "src/test/mir-opt/early_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 57, "deletions": 57, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,91 +2,91 @@\n + // MIR for `opt2` after EarlyOtherwiseBranch\n   \n   fn opt2(_1: Option<u32>, _2: Option<u32>) -> u32 {\n-      debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch.rs:11:9: 11:10\n-      debug y => _2;                       // in scope 0 at $DIR/early_otherwise_branch.rs:11:25: 11:26\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/early_otherwise_branch.rs:11:44: 11:47\n-      let mut _3: (std::option::Option<u32>, std::option::Option<u32>); // in scope 0 at $DIR/early_otherwise_branch.rs:12:11: 12:17\n-      let mut _4: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch.rs:12:12: 12:13\n-      let mut _5: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch.rs:12:15: 12:16\n-      let mut _6: isize;                   // in scope 0 at $DIR/early_otherwise_branch.rs:14:16: 14:20\n-      let mut _7: isize;                   // in scope 0 at $DIR/early_otherwise_branch.rs:13:19: 13:26\n-      let mut _8: isize;                   // in scope 0 at $DIR/early_otherwise_branch.rs:13:10: 13:17\n-      let _9: u32;                         // in scope 0 at $DIR/early_otherwise_branch.rs:13:15: 13:16\n-      let _10: u32;                        // in scope 0 at $DIR/early_otherwise_branch.rs:13:24: 13:25\n-+     let mut _11: isize;                  // in scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n-+     let mut _12: bool;                   // in scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n+      debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch.rs:+0:9: +0:10\n+      debug y => _2;                       // in scope 0 at $DIR/early_otherwise_branch.rs:+0:25: +0:26\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/early_otherwise_branch.rs:+0:44: +0:47\n+      let mut _3: (std::option::Option<u32>, std::option::Option<u32>); // in scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n+      let mut _4: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch.rs:+1:12: +1:13\n+      let mut _5: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch.rs:+1:15: +1:16\n+      let mut _6: isize;                   // in scope 0 at $DIR/early_otherwise_branch.rs:+3:16: +3:20\n+      let mut _7: isize;                   // in scope 0 at $DIR/early_otherwise_branch.rs:+2:19: +2:26\n+      let mut _8: isize;                   // in scope 0 at $DIR/early_otherwise_branch.rs:+2:10: +2:17\n+      let _9: u32;                         // in scope 0 at $DIR/early_otherwise_branch.rs:+2:15: +2:16\n+      let _10: u32;                        // in scope 0 at $DIR/early_otherwise_branch.rs:+2:24: +2:25\n++     let mut _11: isize;                  // in scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++     let mut _12: bool;                   // in scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n       scope 1 {\n-          debug a => _9;                   // in scope 1 at $DIR/early_otherwise_branch.rs:13:15: 13:16\n-          debug b => _10;                  // in scope 1 at $DIR/early_otherwise_branch.rs:13:24: 13:25\n+          debug a => _9;                   // in scope 1 at $DIR/early_otherwise_branch.rs:+2:15: +2:16\n+          debug b => _10;                  // in scope 1 at $DIR/early_otherwise_branch.rs:+2:24: +2:25\n       }\n   \n       bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/early_otherwise_branch.rs:12:11: 12:17\n-          StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch.rs:12:12: 12:13\n-          _4 = _1;                         // scope 0 at $DIR/early_otherwise_branch.rs:12:12: 12:13\n-          StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:12:15: 12:16\n-          _5 = _2;                         // scope 0 at $DIR/early_otherwise_branch.rs:12:15: 12:16\n-          Deinit(_3);                      // scope 0 at $DIR/early_otherwise_branch.rs:12:11: 12:17\n-          (_3.0: std::option::Option<u32>) = move _4; // scope 0 at $DIR/early_otherwise_branch.rs:12:11: 12:17\n-          (_3.1: std::option::Option<u32>) = move _5; // scope 0 at $DIR/early_otherwise_branch.rs:12:11: 12:17\n-          StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:12:16: 12:17\n-          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch.rs:12:16: 12:17\n-          _8 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:12:11: 12:17\n--         switchInt(move _8) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n-+         StorageLive(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n-+         _11 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n-+         StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n-+         _12 = Ne(_8, move _11);          // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n-+         StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n-+         switchInt(move _12) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n+          StorageLive(_3);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n+          StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:12: +1:13\n+          _4 = _1;                         // scope 0 at $DIR/early_otherwise_branch.rs:+1:12: +1:13\n+          StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:15: +1:16\n+          _5 = _2;                         // scope 0 at $DIR/early_otherwise_branch.rs:+1:15: +1:16\n+          Deinit(_3);                      // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n+          (_3.0: std::option::Option<u32>) = move _4; // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n+          (_3.1: std::option::Option<u32>) = move _5; // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n+          StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:16: +1:17\n+          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:16: +1:17\n+          _8 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n+-         switchInt(move _8) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++         StorageLive(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++         _11 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++         StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++         _12 = Ne(_8, move _11);          // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++         StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++         switchInt(move _12) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n       }\n   \n       bb1: {\n--         _6 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:12:11: 12:17\n--         switchInt(move _6) -> [0_isize: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n+-         _6 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n+-         switchInt(move _6) -> [0_isize: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n -     }\n - \n -     bb2: {\n-+         StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch.rs:15:14: 15:15\n-          _0 = const 1_u32;                // scope 0 at $DIR/early_otherwise_branch.rs:15:14: 15:15\n--         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch.rs:15:14: 15:15\n-+         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:15:14: 15:15\n++         StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch.rs:+4:14: +4:15\n+          _0 = const 1_u32;                // scope 0 at $DIR/early_otherwise_branch.rs:+4:14: +4:15\n+-         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch.rs:+4:14: +4:15\n++         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:+4:14: +4:15\n       }\n   \n -     bb3: {\n--         _7 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:12:11: 12:17\n--         switchInt(move _7) -> [1_isize: bb4, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n+-         _7 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n+-         switchInt(move _7) -> [1_isize: bb4, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n -     }\n - \n -     bb4: {\n +     bb2: {\n-          StorageLive(_9);                 // scope 0 at $DIR/early_otherwise_branch.rs:13:15: 13:16\n-          _9 = (((_3.0: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch.rs:13:15: 13:16\n-          StorageLive(_10);                // scope 0 at $DIR/early_otherwise_branch.rs:13:24: 13:25\n-          _10 = (((_3.1: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch.rs:13:24: 13:25\n-          _0 = const 0_u32;                // scope 1 at $DIR/early_otherwise_branch.rs:13:31: 13:32\n-          StorageDead(_10);                // scope 0 at $DIR/early_otherwise_branch.rs:13:31: 13:32\n-          StorageDead(_9);                 // scope 0 at $DIR/early_otherwise_branch.rs:13:31: 13:32\n--         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch.rs:13:31: 13:32\n-+         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:13:31: 13:32\n+          StorageLive(_9);                 // scope 0 at $DIR/early_otherwise_branch.rs:+2:15: +2:16\n+          _9 = (((_3.0: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch.rs:+2:15: +2:16\n+          StorageLive(_10);                // scope 0 at $DIR/early_otherwise_branch.rs:+2:24: +2:25\n+          _10 = (((_3.1: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch.rs:+2:24: +2:25\n+          _0 = const 0_u32;                // scope 1 at $DIR/early_otherwise_branch.rs:+2:31: +2:32\n+          StorageDead(_10);                // scope 0 at $DIR/early_otherwise_branch.rs:+2:31: +2:32\n+          StorageDead(_9);                 // scope 0 at $DIR/early_otherwise_branch.rs:+2:31: +2:32\n+-         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch.rs:+2:31: +2:32\n++         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:+2:31: +2:32\n       }\n   \n -     bb5: {\n +     bb3: {\n-          _0 = const 0_u32;                // scope 0 at $DIR/early_otherwise_branch.rs:14:25: 14:26\n--         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch.rs:14:25: 14:26\n-+         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:14:25: 14:26\n+          _0 = const 0_u32;                // scope 0 at $DIR/early_otherwise_branch.rs:+3:25: +3:26\n+-         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch.rs:+3:25: +3:26\n++         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:+3:25: +3:26\n       }\n   \n -     bb6: {\n +     bb4: {\n-          StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch.rs:17:1: 17:2\n-          return;                          // scope 0 at $DIR/early_otherwise_branch.rs:17:2: 17:2\n+          StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch.rs:+6:1: +6:2\n+          return;                          // scope 0 at $DIR/early_otherwise_branch.rs:+6:2: +6:2\n +     }\n + \n +     bb5: {\n-+         StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n-+         switchInt(_8) -> [0_isize: bb3, 1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n++         StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++         switchInt(_8) -> [0_isize: bb3, 1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n       }\n   }\n   "}, {"sha": "309a72ae58b68d19fd25dad179090f67508f318e", "filename": "src/test/mir-opt/early_otherwise_branch.opt3.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt3.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt3.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt3.EarlyOtherwiseBranch.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,77 +2,77 @@\n + // MIR for `opt3` after EarlyOtherwiseBranch\n   \n   fn opt3(_1: Option<u32>, _2: Option<bool>) -> u32 {\n-      debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch.rs:21:9: 21:10\n-      debug y => _2;                       // in scope 0 at $DIR/early_otherwise_branch.rs:21:25: 21:26\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/early_otherwise_branch.rs:21:45: 21:48\n-      let mut _3: (std::option::Option<u32>, std::option::Option<bool>); // in scope 0 at $DIR/early_otherwise_branch.rs:22:11: 22:17\n-      let mut _4: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch.rs:22:12: 22:13\n-      let mut _5: std::option::Option<bool>; // in scope 0 at $DIR/early_otherwise_branch.rs:22:15: 22:16\n-      let mut _6: isize;                   // in scope 0 at $DIR/early_otherwise_branch.rs:23:19: 23:26\n-      let mut _7: isize;                   // in scope 0 at $DIR/early_otherwise_branch.rs:23:10: 23:17\n-      let _8: u32;                         // in scope 0 at $DIR/early_otherwise_branch.rs:23:15: 23:16\n-      let _9: bool;                        // in scope 0 at $DIR/early_otherwise_branch.rs:23:24: 23:25\n-+     let mut _10: isize;                  // in scope 0 at $DIR/early_otherwise_branch.rs:22:5: 22:17\n-+     let mut _11: bool;                   // in scope 0 at $DIR/early_otherwise_branch.rs:22:5: 22:17\n+      debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch.rs:+0:9: +0:10\n+      debug y => _2;                       // in scope 0 at $DIR/early_otherwise_branch.rs:+0:25: +0:26\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/early_otherwise_branch.rs:+0:45: +0:48\n+      let mut _3: (std::option::Option<u32>, std::option::Option<bool>); // in scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n+      let mut _4: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch.rs:+1:12: +1:13\n+      let mut _5: std::option::Option<bool>; // in scope 0 at $DIR/early_otherwise_branch.rs:+1:15: +1:16\n+      let mut _6: isize;                   // in scope 0 at $DIR/early_otherwise_branch.rs:+2:19: +2:26\n+      let mut _7: isize;                   // in scope 0 at $DIR/early_otherwise_branch.rs:+2:10: +2:17\n+      let _8: u32;                         // in scope 0 at $DIR/early_otherwise_branch.rs:+2:15: +2:16\n+      let _9: bool;                        // in scope 0 at $DIR/early_otherwise_branch.rs:+2:24: +2:25\n++     let mut _10: isize;                  // in scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++     let mut _11: bool;                   // in scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n       scope 1 {\n-          debug a => _8;                   // in scope 1 at $DIR/early_otherwise_branch.rs:23:15: 23:16\n-          debug b => _9;                   // in scope 1 at $DIR/early_otherwise_branch.rs:23:24: 23:25\n+          debug a => _8;                   // in scope 1 at $DIR/early_otherwise_branch.rs:+2:15: +2:16\n+          debug b => _9;                   // in scope 1 at $DIR/early_otherwise_branch.rs:+2:24: +2:25\n       }\n   \n       bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/early_otherwise_branch.rs:22:11: 22:17\n-          StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch.rs:22:12: 22:13\n-          _4 = _1;                         // scope 0 at $DIR/early_otherwise_branch.rs:22:12: 22:13\n-          StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:22:15: 22:16\n-          _5 = _2;                         // scope 0 at $DIR/early_otherwise_branch.rs:22:15: 22:16\n-          Deinit(_3);                      // scope 0 at $DIR/early_otherwise_branch.rs:22:11: 22:17\n-          (_3.0: std::option::Option<u32>) = move _4; // scope 0 at $DIR/early_otherwise_branch.rs:22:11: 22:17\n-          (_3.1: std::option::Option<bool>) = move _5; // scope 0 at $DIR/early_otherwise_branch.rs:22:11: 22:17\n-          StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:22:16: 22:17\n-          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch.rs:22:16: 22:17\n-          _7 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:22:11: 22:17\n--         switchInt(move _7) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:22:5: 22:17\n-+         StorageLive(_10);                // scope 0 at $DIR/early_otherwise_branch.rs:22:5: 22:17\n-+         _10 = discriminant((_3.1: std::option::Option<bool>)); // scope 0 at $DIR/early_otherwise_branch.rs:22:5: 22:17\n-+         StorageLive(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:22:5: 22:17\n-+         _11 = Ne(_7, move _10);          // scope 0 at $DIR/early_otherwise_branch.rs:22:5: 22:17\n-+         StorageDead(_10);                // scope 0 at $DIR/early_otherwise_branch.rs:22:5: 22:17\n-+         switchInt(move _11) -> [false: bb4, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:22:5: 22:17\n+          StorageLive(_3);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n+          StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:12: +1:13\n+          _4 = _1;                         // scope 0 at $DIR/early_otherwise_branch.rs:+1:12: +1:13\n+          StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:15: +1:16\n+          _5 = _2;                         // scope 0 at $DIR/early_otherwise_branch.rs:+1:15: +1:16\n+          Deinit(_3);                      // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n+          (_3.0: std::option::Option<u32>) = move _4; // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n+          (_3.1: std::option::Option<bool>) = move _5; // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n+          StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:16: +1:17\n+          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch.rs:+1:16: +1:17\n+          _7 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n+-         switchInt(move _7) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++         StorageLive(_10);                // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++         _10 = discriminant((_3.1: std::option::Option<bool>)); // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++         StorageLive(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++         _11 = Ne(_7, move _10);          // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++         StorageDead(_10);                // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++         switchInt(move _11) -> [false: bb4, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n       }\n   \n       bb1: {\n-+         StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:24:14: 24:15\n-          _0 = const 1_u32;                // scope 0 at $DIR/early_otherwise_branch.rs:24:14: 24:15\n--         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:24:14: 24:15\n-+         goto -> bb3;                     // scope 0 at $DIR/early_otherwise_branch.rs:24:14: 24:15\n++         StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:+3:14: +3:15\n+          _0 = const 1_u32;                // scope 0 at $DIR/early_otherwise_branch.rs:+3:14: +3:15\n+-         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:+3:14: +3:15\n++         goto -> bb3;                     // scope 0 at $DIR/early_otherwise_branch.rs:+3:14: +3:15\n       }\n   \n       bb2: {\n--         _6 = discriminant((_3.1: std::option::Option<bool>)); // scope 0 at $DIR/early_otherwise_branch.rs:22:11: 22:17\n--         switchInt(move _6) -> [1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:22:5: 22:17\n+-         _6 = discriminant((_3.1: std::option::Option<bool>)); // scope 0 at $DIR/early_otherwise_branch.rs:+1:11: +1:17\n+-         switchInt(move _6) -> [1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n -     }\n - \n -     bb3: {\n-          StorageLive(_8);                 // scope 0 at $DIR/early_otherwise_branch.rs:23:15: 23:16\n-          _8 = (((_3.0: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch.rs:23:15: 23:16\n-          StorageLive(_9);                 // scope 0 at $DIR/early_otherwise_branch.rs:23:24: 23:25\n-          _9 = (((_3.1: std::option::Option<bool>) as Some).0: bool); // scope 0 at $DIR/early_otherwise_branch.rs:23:24: 23:25\n-          _0 = const 0_u32;                // scope 1 at $DIR/early_otherwise_branch.rs:23:31: 23:32\n-          StorageDead(_9);                 // scope 0 at $DIR/early_otherwise_branch.rs:23:31: 23:32\n-          StorageDead(_8);                 // scope 0 at $DIR/early_otherwise_branch.rs:23:31: 23:32\n--         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:23:31: 23:32\n-+         goto -> bb3;                     // scope 0 at $DIR/early_otherwise_branch.rs:23:31: 23:32\n+          StorageLive(_8);                 // scope 0 at $DIR/early_otherwise_branch.rs:+2:15: +2:16\n+          _8 = (((_3.0: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch.rs:+2:15: +2:16\n+          StorageLive(_9);                 // scope 0 at $DIR/early_otherwise_branch.rs:+2:24: +2:25\n+          _9 = (((_3.1: std::option::Option<bool>) as Some).0: bool); // scope 0 at $DIR/early_otherwise_branch.rs:+2:24: +2:25\n+          _0 = const 0_u32;                // scope 1 at $DIR/early_otherwise_branch.rs:+2:31: +2:32\n+          StorageDead(_9);                 // scope 0 at $DIR/early_otherwise_branch.rs:+2:31: +2:32\n+          StorageDead(_8);                 // scope 0 at $DIR/early_otherwise_branch.rs:+2:31: +2:32\n+-         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:+2:31: +2:32\n++         goto -> bb3;                     // scope 0 at $DIR/early_otherwise_branch.rs:+2:31: +2:32\n       }\n   \n -     bb4: {\n +     bb3: {\n-          StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch.rs:26:1: 26:2\n-          return;                          // scope 0 at $DIR/early_otherwise_branch.rs:26:2: 26:2\n+          StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/early_otherwise_branch.rs:+5:2: +5:2\n +     }\n + \n +     bb4: {\n-+         StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:22:5: 22:17\n-+         switchInt(_7) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:22:5: 22:17\n++         StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n++         switchInt(_7) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:+1:5: +1:17\n       }\n   }\n   "}, {"sha": "9574f32f7f06bd2c28b7d683a936add26f1f5ef7", "filename": "src/test/mir-opt/early_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 69, "deletions": 69, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,99 +2,99 @@\n + // MIR for `opt1` after EarlyOtherwiseBranch\n   \n   fn opt1(_1: Option<u32>, _2: Option<u32>, _3: Option<u32>) -> u32 {\n-      debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:4:9: 4:10\n-      debug y => _2;                       // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:4:25: 4:26\n-      debug z => _3;                       // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:4:41: 4:42\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:4:60: 4:63\n-      let mut _4: (std::option::Option<u32>, std::option::Option<u32>, std::option::Option<u32>); // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:11: 5:20\n-      let mut _5: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:12: 5:13\n-      let mut _6: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:15: 5:16\n-      let mut _7: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:18: 5:19\n-      let mut _8: isize;                   // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:28: 6:35\n-      let mut _9: isize;                   // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:19: 6:26\n-      let mut _10: isize;                  // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:10: 6:17\n-      let _11: u32;                        // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:15: 6:16\n-      let _12: u32;                        // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:24: 6:25\n-      let _13: u32;                        // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:33: 6:34\n-+     let mut _14: isize;                  // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20\n-+     let mut _15: bool;                   // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20\n-+     let mut _16: isize;                  // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20\n-+     let mut _17: bool;                   // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20\n+      debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+0:9: +0:10\n+      debug y => _2;                       // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+0:25: +0:26\n+      debug z => _3;                       // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+0:41: +0:42\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+0:60: +0:63\n+      let mut _4: (std::option::Option<u32>, std::option::Option<u32>, std::option::Option<u32>); // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:11: +1:20\n+      let mut _5: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:12: +1:13\n+      let mut _6: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:15: +1:16\n+      let mut _7: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:18: +1:19\n+      let mut _8: isize;                   // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+2:28: +2:35\n+      let mut _9: isize;                   // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+2:19: +2:26\n+      let mut _10: isize;                  // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+2:10: +2:17\n+      let _11: u32;                        // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+2:15: +2:16\n+      let _12: u32;                        // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+2:24: +2:25\n+      let _13: u32;                        // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+2:33: +2:34\n++     let mut _14: isize;                  // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n++     let mut _15: bool;                   // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n++     let mut _16: isize;                  // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n++     let mut _17: bool;                   // in scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n       scope 1 {\n-          debug a => _11;                  // in scope 1 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:15: 6:16\n-          debug b => _12;                  // in scope 1 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:24: 6:25\n-          debug c => _13;                  // in scope 1 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:33: 6:34\n+          debug a => _11;                  // in scope 1 at $DIR/early_otherwise_branch_3_element_tuple.rs:+2:15: +2:16\n+          debug b => _12;                  // in scope 1 at $DIR/early_otherwise_branch_3_element_tuple.rs:+2:24: +2:25\n+          debug c => _13;                  // in scope 1 at $DIR/early_otherwise_branch_3_element_tuple.rs:+2:33: +2:34\n       }\n   \n       bb0: {\n-          StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:11: 5:20\n-          StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:12: 5:13\n-          _5 = _1;                         // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:12: 5:13\n-          StorageLive(_6);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:15: 5:16\n-          _6 = _2;                         // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:15: 5:16\n-          StorageLive(_7);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:18: 5:19\n-          _7 = _3;                         // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:18: 5:19\n-          Deinit(_4);                      // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:11: 5:20\n-          (_4.0: std::option::Option<u32>) = move _5; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:11: 5:20\n-          (_4.1: std::option::Option<u32>) = move _6; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:11: 5:20\n-          (_4.2: std::option::Option<u32>) = move _7; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:11: 5:20\n-          StorageDead(_7);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:19: 5:20\n-          StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:19: 5:20\n-          StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:19: 5:20\n-          _10 = discriminant((_4.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:11: 5:20\n--         switchInt(move _10) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20\n-+         StorageLive(_14);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20\n-+         _14 = discriminant((_4.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20\n-+         StorageLive(_15);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20\n-+         _15 = Ne(_10, move _14);         // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20\n-+         StorageDead(_14);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20\n-+         switchInt(move _15) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20\n+          StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:11: +1:20\n+          StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:12: +1:13\n+          _5 = _1;                         // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:12: +1:13\n+          StorageLive(_6);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:15: +1:16\n+          _6 = _2;                         // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:15: +1:16\n+          StorageLive(_7);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:18: +1:19\n+          _7 = _3;                         // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:18: +1:19\n+          Deinit(_4);                      // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:11: +1:20\n+          (_4.0: std::option::Option<u32>) = move _5; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:11: +1:20\n+          (_4.1: std::option::Option<u32>) = move _6; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:11: +1:20\n+          (_4.2: std::option::Option<u32>) = move _7; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:11: +1:20\n+          StorageDead(_7);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:19: +1:20\n+          StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:19: +1:20\n+          StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:19: +1:20\n+          _10 = discriminant((_4.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:11: +1:20\n+-         switchInt(move _10) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n++         StorageLive(_14);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n++         _14 = discriminant((_4.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n++         StorageLive(_15);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n++         _15 = Ne(_10, move _14);         // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n++         StorageDead(_14);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n++         switchInt(move _15) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n       }\n   \n       bb1: {\n-+         StorageDead(_17);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:7:14: 7:15\n-+         StorageDead(_15);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:7:14: 7:15\n-          _0 = const 1_u32;                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:7:14: 7:15\n--         goto -> bb5;                     // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:7:14: 7:15\n-+         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:7:14: 7:15\n++         StorageDead(_17);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+3:14: +3:15\n++         StorageDead(_15);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+3:14: +3:15\n+          _0 = const 1_u32;                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+3:14: +3:15\n+-         goto -> bb5;                     // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+3:14: +3:15\n++         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+3:14: +3:15\n       }\n   \n       bb2: {\n--         _9 = discriminant((_4.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:11: 5:20\n--         switchInt(move _9) -> [1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20\n+-         _9 = discriminant((_4.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:11: +1:20\n+-         switchInt(move _9) -> [1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n -     }\n - \n -     bb3: {\n-          _8 = discriminant((_4.2: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:11: 5:20\n--         switchInt(move _8) -> [1_isize: bb4, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20\n-+         switchInt(move _8) -> [1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20\n+          _8 = discriminant((_4.2: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:11: +1:20\n+-         switchInt(move _8) -> [1_isize: bb4, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n++         switchInt(move _8) -> [1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n       }\n   \n -     bb4: {\n +     bb3: {\n-          StorageLive(_11);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:15: 6:16\n-          _11 = (((_4.0: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:15: 6:16\n-          StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:24: 6:25\n-          _12 = (((_4.1: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:24: 6:25\n-          StorageLive(_13);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:33: 6:34\n-          _13 = (((_4.2: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:33: 6:34\n-          _0 = const 0_u32;                // scope 1 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:40: 6:41\n-          StorageDead(_13);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:40: 6:41\n-          StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:40: 6:41\n-          StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:40: 6:41\n--         goto -> bb5;                     // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:40: 6:41\n-+         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:40: 6:41\n+          StorageLive(_11);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+2:15: +2:16\n+          _11 = (((_4.0: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+2:15: +2:16\n+          StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+2:24: +2:25\n+          _12 = (((_4.1: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+2:24: +2:25\n+          StorageLive(_13);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+2:33: +2:34\n+          _13 = (((_4.2: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+2:33: +2:34\n+          _0 = const 0_u32;                // scope 1 at $DIR/early_otherwise_branch_3_element_tuple.rs:+2:40: +2:41\n+          StorageDead(_13);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+2:40: +2:41\n+          StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+2:40: +2:41\n+          StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+2:40: +2:41\n+-         goto -> bb5;                     // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+2:40: +2:41\n++         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+2:40: +2:41\n       }\n   \n -     bb5: {\n +     bb4: {\n-          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:9:1: 9:2\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:9:2: 9:2\n+          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+5:2: +5:2\n +     }\n + \n +     bb5: {\n-+         StorageDead(_15);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20\n-+         switchInt(_10) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20\n++         StorageDead(_15);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n++         switchInt(_10) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:+1:5: +1:20\n       }\n   }\n   "}, {"sha": "4e6852ad7b6a57c0a3ddb5b8488488fea52a9b40", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff", "status": "modified", "additions": 297, "deletions": 297, "changes": 594, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,343 +2,343 @@\n + // MIR for `try_sum` after SimplifyConstCondition-final\n   \n   fn try_sum(_1: &ViewportPercentageLength, _2: &ViewportPercentageLength) -> Result<ViewportPercentageLength, ()> {\n-      debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch_68867.rs:17:5: 17:6\n-      debug other => _2;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:18:5: 18:10\n-      let mut _0: std::result::Result<ViewportPercentageLength, ()>; // return place in scope 0 at $DIR/early_otherwise_branch_68867.rs:19:6: 19:42\n-      let mut _3: ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n-      let mut _4: (&ViewportPercentageLength, &ViewportPercentageLength); // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-      let mut _5: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n-      let mut _6: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:18: 21:23\n-      let mut _7: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:21: 22:30\n-      let mut _8: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n-      let mut _9: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:23: 24:34\n-      let mut _10: isize;                  // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:23: 25:34\n-      let mut _11: isize;                  // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n-      let _12: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n-      let _13: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n-      let mut _14: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:49\n-      let mut _15: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:41\n-      let mut _16: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:44: 22:49\n-      let _17: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n-      let _18: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n-      let mut _19: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n-      let mut _20: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n-      let mut _21: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n-      let _22: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n-      let _23: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n-      let mut _24: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:55\n-      let mut _25: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:47\n-      let mut _26: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:50: 24:55\n-      let _27: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n-      let _28: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n-      let mut _29: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n-      let mut _30: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n-      let mut _31: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n-      let mut _32: !;                      // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:14: 26:28\n-      let mut _33: ();                     // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:25: 26:27\n-      let mut _34: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-      let mut _35: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-      let mut _36: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-      let mut _37: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-      let mut _38: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-      let mut _39: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-      let mut _40: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-      let mut _41: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-      let mut _42: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-      let mut _43: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-      let mut _44: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-      let mut _45: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-      let mut _46: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+      debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+1:5: +1:6\n+      debug other => _2;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+2:5: +2:10\n+      let mut _0: std::result::Result<ViewportPercentageLength, ()>; // return place in scope 0 at $DIR/early_otherwise_branch_68867.rs:+3:6: +3:42\n+      let mut _3: ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +11:6\n+      let mut _4: (&ViewportPercentageLength, &ViewportPercentageLength); // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+      let mut _5: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:15: +5:16\n+      let mut _6: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:18: +5:23\n+      let mut _7: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:21: +6:30\n+      let mut _8: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:21: +7:30\n+      let mut _9: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:23: +8:34\n+      let mut _10: isize;                  // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:23: +9:34\n+      let mut _11: isize;                  // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:11: +6:18\n+      let _12: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n+      let _13: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n+      let mut _14: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:49\n+      let mut _15: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:41\n+      let mut _16: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:44: +6:49\n+      let _17: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n+      let _18: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n+      let mut _19: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:49\n+      let mut _20: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:41\n+      let mut _21: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:44: +7:49\n+      let _22: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n+      let _23: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n+      let mut _24: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:55\n+      let mut _25: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:47\n+      let mut _26: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:50: +8:55\n+      let _27: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n+      let _28: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n+      let mut _29: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:55\n+      let mut _30: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:47\n+      let mut _31: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:50: +9:55\n+      let mut _32: !;                      // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:14: +10:28\n+      let mut _33: ();                     // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:25: +10:27\n+      let mut _34: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+      let mut _35: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+      let mut _36: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+      let mut _37: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+      let mut _38: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+      let mut _39: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+      let mut _40: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+      let mut _41: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+      let mut _42: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+      let mut _43: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+      let mut _44: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+      let mut _45: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+      let mut _46: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n       scope 1 {\n--         debug one => _12;                // in scope 1 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n--         debug other => _13;              // in scope 1 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n-+         debug one => _15;                // in scope 1 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n-+         debug other => _16;              // in scope 1 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n+-         debug one => _12;                // in scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n+-         debug other => _13;              // in scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n++         debug one => _15;                // in scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n++         debug other => _16;              // in scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n       }\n       scope 2 {\n--         debug one => _17;                // in scope 2 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n--         debug other => _18;              // in scope 2 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n-+         debug one => _20;                // in scope 2 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n-+         debug other => _21;              // in scope 2 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n+-         debug one => _17;                // in scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n+-         debug other => _18;              // in scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n++         debug one => _20;                // in scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n++         debug other => _21;              // in scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n       }\n       scope 3 {\n--         debug one => _22;                // in scope 3 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n--         debug other => _23;              // in scope 3 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n-+         debug one => _25;                // in scope 3 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n-+         debug other => _26;              // in scope 3 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n+-         debug one => _22;                // in scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n+-         debug other => _23;              // in scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n++         debug one => _25;                // in scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n++         debug other => _26;              // in scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n       }\n       scope 4 {\n--         debug one => _27;                // in scope 4 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n--         debug other => _28;              // in scope 4 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n-+         debug one => _30;                // in scope 4 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n-+         debug other => _31;              // in scope 4 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n+-         debug one => _27;                // in scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n+-         debug other => _28;              // in scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n++         debug one => _30;                // in scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n++         debug other => _31;              // in scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n       }\n   \n       bb0: {\n--         StorageLive(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n--         StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n--         StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n--         _5 = _1;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n-+         (_4.0: &ViewportPercentageLength) = _1; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n-          StorageLive(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:18: 21:23\n-          _6 = _2;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:18: 21:23\n-          Deinit(_4);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n--         (_4.0: &ViewportPercentageLength) = move _5; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          (_4.1: &ViewportPercentageLength) = move _6; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n--         StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n-          StorageLive(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _34 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _11 = discriminant((*_34));      // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          StorageDead(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n-          switchInt(move _11) -> [0_isize: bb1, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n+-         StorageLive(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +11:6\n+-         StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+-         StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:15: +5:16\n+-         _5 = _1;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:15: +5:16\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +11:6\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:15: +5:16\n++         (_4.0: &ViewportPercentageLength) = _1; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:15: +5:16\n+          StorageLive(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:18: +5:23\n+          _6 = _2;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:18: +5:23\n+          Deinit(_4);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+-         (_4.0: &ViewportPercentageLength) = move _5; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          (_4.1: &ViewportPercentageLength) = move _6; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:23: +5:24\n+-         StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:23: +5:24\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:23: +5:24\n+          StorageLive(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          _34 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          _11 = discriminant((*_34));      // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          StorageDead(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n+          switchInt(move _11) -> [0_isize: bb1, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n       }\n   \n       bb1: {\n-          StorageLive(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _35 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _7 = discriminant((*_35));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          StorageDead(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n-          switchInt(move _7) -> [0_isize: bb6, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n+          StorageLive(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          _35 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          _7 = discriminant((*_35));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          StorageDead(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n+          switchInt(move _7) -> [0_isize: bb6, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n       }\n   \n       bb2: {\n-          StorageLive(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:25: 26:27\n-          nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:25: 26:27\n-          Deinit(_0);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:21: 26:28\n-          nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:21: 26:28\n-          discriminant(_0) = 1;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:21: 26:28\n-          StorageDead(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:27: 26:28\n--         StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:6: 27:7\n--         StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:1: 28:2\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:6: 27:7\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:1: 28:2\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:2: 28:2\n+          StorageLive(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:25: +10:27\n+          nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:25: +10:27\n+          Deinit(_0);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:21: +10:28\n+          nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:21: +10:28\n+          discriminant(_0) = 1;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:21: +10:28\n+          StorageDead(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:27: +10:28\n+-         StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+11:6: +11:7\n+-         StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:1: +12:2\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+11:6: +11:7\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:1: +12:2\n+          return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:2: +12:2\n       }\n   \n       bb3: {\n-          StorageLive(_36);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _36 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _8 = discriminant((*_36));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          StorageDead(_36);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n-          switchInt(move _8) -> [1_isize: bb7, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n+          StorageLive(_36);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          _36 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          _8 = discriminant((*_36));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          StorageDead(_36);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n+          switchInt(move _8) -> [1_isize: bb7, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n       }\n   \n       bb4: {\n-          StorageLive(_37);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _37 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _9 = discriminant((*_37));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          StorageDead(_37);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n-          switchInt(move _9) -> [2_isize: bb8, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n+          StorageLive(_37);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          _37 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          _9 = discriminant((*_37));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          StorageDead(_37);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n+          switchInt(move _9) -> [2_isize: bb8, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n       }\n   \n       bb5: {\n-          StorageLive(_38);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _38 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _10 = discriminant((*_38));      // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          StorageDead(_38);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n-          switchInt(move _10) -> [3_isize: bb9, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n+          StorageLive(_38);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          _38 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          _10 = discriminant((*_38));      // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          StorageDead(_38);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n+          switchInt(move _10) -> [3_isize: bb9, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n       }\n   \n       bb6: {\n--         StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n-          StorageLive(_39);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n-          _39 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n--         _12 = (((*_39) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n-+         _15 = (((*_39) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n-          StorageDead(_39);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n--         StorageLive(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n-          StorageLive(_40);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n-          _40 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n--         _13 = (((*_40) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n-+         _16 = (((*_40) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n-          StorageDead(_40);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:49\n--         StorageLive(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:49\n--         StorageLive(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:41\n--         _15 = _12;                       // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:41\n--         StorageLive(_16);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:44: 22:49\n--         _16 = _13;                       // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:44: 22:49\n--         _14 = Add(move _15, move _16);   // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:49\n--         StorageDead(_16);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:48: 22:49\n--         StorageDead(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:48: 22:49\n--         Deinit(_3);                      // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n--         ((_3 as Vw).0: f32) = move _14;  // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n--         discriminant(_3) = 0;            // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n--         StorageDead(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n--         StorageDead(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n--         StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n-+         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:49\n-+         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:41\n-+         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:41\n-+         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:44: 22:49\n-+         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:44: 22:49\n-+         ((((_0 as Ok).0: ViewportPercentageLength) as Vw).0: f32) = Add(move _15, move _16); // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:49\n-+         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:48: 22:49\n-+         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:48: 22:49\n-+         Deinit(((_0 as Ok).0: ViewportPercentageLength)); // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n-+         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n-+         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 0; // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n-+         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n-          goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n+-         StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n+          StorageLive(_39);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n+          _39 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n+-         _12 = (((*_39) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n++         _15 = (((*_39) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n+          StorageDead(_39);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n+-         StorageLive(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n+          StorageLive(_40);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n+          _40 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n+-         _13 = (((*_40) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n++         _16 = (((*_40) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n+          StorageDead(_40);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:49\n+-         StorageLive(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:49\n+-         StorageLive(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:41\n+-         _15 = _12;                       // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:41\n+-         StorageLive(_16);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:44: +6:49\n+-         _16 = _13;                       // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:44: +6:49\n+-         _14 = Add(move _15, move _16);   // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:49\n+-         StorageDead(_16);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:48: +6:49\n+-         StorageDead(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:48: +6:49\n+-         Deinit(_3);                      // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:35: +6:50\n+-         ((_3 as Vw).0: f32) = move _14;  // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:35: +6:50\n+-         discriminant(_3) = 0;            // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:35: +6:50\n+-         StorageDead(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:49: +6:50\n+-         StorageDead(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:49: +6:50\n+-         StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:49: +6:50\n++         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:49\n++         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:41\n++         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:41\n++         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:44: +6:49\n++         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:44: +6:49\n++         ((((_0 as Ok).0: ViewportPercentageLength) as Vw).0: f32) = Add(move _15, move _16); // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:49\n++         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:48: +6:49\n++         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:48: +6:49\n++         Deinit(((_0 as Ok).0: ViewportPercentageLength)); // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:35: +6:50\n++         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:35: +6:50\n++         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 0; // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:35: +6:50\n++         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:49: +6:50\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:49: +6:50\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:49: +6:50\n+          goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:49: +6:50\n       }\n   \n       bb7: {\n--         StorageLive(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n-          StorageLive(_41);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n-          _41 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n--         _17 = (((*_41) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n-+         _20 = (((*_41) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n-          StorageDead(_41);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n--         StorageLive(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n-          StorageLive(_42);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n-          _42 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n--         _18 = (((*_42) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n-+         _21 = (((*_42) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n-          StorageDead(_42);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n--         StorageLive(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n--         StorageLive(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n--         _20 = _17;                       // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n--         StorageLive(_21);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n--         _21 = _18;                       // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n--         _19 = Add(move _20, move _21);   // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n--         StorageDead(_21);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n--         StorageDead(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n--         Deinit(_3);                      // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n--         ((_3 as Vh).0: f32) = move _19;  // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n--         discriminant(_3) = 1;            // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n--         StorageDead(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n--         StorageDead(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n--         StorageDead(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n-+         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n-+         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n-+         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n-+         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n-+         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n-+         ((((_0 as Ok).0: ViewportPercentageLength) as Vh).0: f32) = Add(move _20, move _21); // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n-+         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n-+         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n-+         Deinit(((_0 as Ok).0: ViewportPercentageLength)); // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n-+         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n-+         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 1; // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n-+         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n-          goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n+-         StorageLive(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n+          StorageLive(_41);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n+          _41 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n+-         _17 = (((*_41) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n++         _20 = (((*_41) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n+          StorageDead(_41);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n+-         StorageLive(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n+          StorageLive(_42);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n+          _42 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n+-         _18 = (((*_42) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n++         _21 = (((*_42) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n+          StorageDead(_42);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:49\n+-         StorageLive(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:49\n+-         StorageLive(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:41\n+-         _20 = _17;                       // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:41\n+-         StorageLive(_21);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:44: +7:49\n+-         _21 = _18;                       // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:44: +7:49\n+-         _19 = Add(move _20, move _21);   // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:49\n+-         StorageDead(_21);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:48: +7:49\n+-         StorageDead(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:48: +7:49\n+-         Deinit(_3);                      // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:35: +7:50\n+-         ((_3 as Vh).0: f32) = move _19;  // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:35: +7:50\n+-         discriminant(_3) = 1;            // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:35: +7:50\n+-         StorageDead(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:49: +7:50\n+-         StorageDead(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:49: +7:50\n+-         StorageDead(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:49: +7:50\n++         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:49\n++         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:41\n++         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:41\n++         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:44: +7:49\n++         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:44: +7:49\n++         ((((_0 as Ok).0: ViewportPercentageLength) as Vh).0: f32) = Add(move _20, move _21); // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:49\n++         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:48: +7:49\n++         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:48: +7:49\n++         Deinit(((_0 as Ok).0: ViewportPercentageLength)); // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:35: +7:50\n++         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:35: +7:50\n++         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 1; // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:35: +7:50\n++         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:49: +7:50\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:49: +7:50\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:49: +7:50\n+          goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:49: +7:50\n       }\n   \n       bb8: {\n--         StorageLive(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n-          StorageLive(_43);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n-          _43 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n--         _22 = (((*_43) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n-+         _25 = (((*_43) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n-          StorageDead(_43);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n--         StorageLive(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n-          StorageLive(_44);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n-          _44 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n--         _23 = (((*_44) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n-+         _26 = (((*_44) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n-          StorageDead(_44);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:55\n--         StorageLive(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:55\n--         StorageLive(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:47\n--         _25 = _22;                       // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:47\n--         StorageLive(_26);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:50: 24:55\n--         _26 = _23;                       // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:50: 24:55\n--         _24 = Add(move _25, move _26);   // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:55\n--         StorageDead(_26);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:54: 24:55\n--         StorageDead(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:54: 24:55\n--         Deinit(_3);                      // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n--         ((_3 as Vmin).0: f32) = move _24; // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n--         discriminant(_3) = 2;            // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n--         StorageDead(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n--         StorageDead(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n--         StorageDead(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n-+         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:55\n-+         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:47\n-+         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:47\n-+         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:50: 24:55\n-+         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:50: 24:55\n-+         ((((_0 as Ok).0: ViewportPercentageLength) as Vmin).0: f32) = Add(move _25, move _26); // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:55\n-+         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:54: 24:55\n-+         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:54: 24:55\n-+         Deinit(((_0 as Ok).0: ViewportPercentageLength)); // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n-+         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n-+         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 2; // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n-+         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n-          goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n+-         StorageLive(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n+          StorageLive(_43);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n+          _43 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n+-         _22 = (((*_43) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n++         _25 = (((*_43) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n+          StorageDead(_43);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n+-         StorageLive(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n+          StorageLive(_44);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n+          _44 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n+-         _23 = (((*_44) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n++         _26 = (((*_44) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n+          StorageDead(_44);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:55\n+-         StorageLive(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:55\n+-         StorageLive(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:47\n+-         _25 = _22;                       // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:47\n+-         StorageLive(_26);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:50: +8:55\n+-         _26 = _23;                       // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:50: +8:55\n+-         _24 = Add(move _25, move _26);   // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:55\n+-         StorageDead(_26);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:54: +8:55\n+-         StorageDead(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:54: +8:55\n+-         Deinit(_3);                      // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:39: +8:56\n+-         ((_3 as Vmin).0: f32) = move _24; // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:39: +8:56\n+-         discriminant(_3) = 2;            // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:39: +8:56\n+-         StorageDead(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:55: +8:56\n+-         StorageDead(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:55: +8:56\n+-         StorageDead(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:55: +8:56\n++         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:55\n++         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:47\n++         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:47\n++         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:50: +8:55\n++         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:50: +8:55\n++         ((((_0 as Ok).0: ViewportPercentageLength) as Vmin).0: f32) = Add(move _25, move _26); // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:55\n++         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:54: +8:55\n++         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:54: +8:55\n++         Deinit(((_0 as Ok).0: ViewportPercentageLength)); // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:39: +8:56\n++         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:39: +8:56\n++         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 2; // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:39: +8:56\n++         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:55: +8:56\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:55: +8:56\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:55: +8:56\n+          goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:55: +8:56\n       }\n   \n       bb9: {\n--         StorageLive(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n-          StorageLive(_45);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n-          _45 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n--         _27 = (((*_45) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n-+         _30 = (((*_45) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n-          StorageDead(_45);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n--         StorageLive(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n-          StorageLive(_46);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n-          _46 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n--         _28 = (((*_46) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n-+         _31 = (((*_46) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n-          StorageDead(_46);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n--         StorageLive(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n--         StorageLive(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n--         _30 = _27;                       // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n--         StorageLive(_31);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n--         _31 = _28;                       // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n--         _29 = Add(move _30, move _31);   // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n--         StorageDead(_31);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n--         StorageDead(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n--         Deinit(_3);                      // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n--         ((_3 as Vmax).0: f32) = move _29; // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n--         discriminant(_3) = 3;            // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n--         StorageDead(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n--         StorageDead(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n--         StorageDead(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n-+         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n-+         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n-+         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n-+         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n-+         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n-+         ((((_0 as Ok).0: ViewportPercentageLength) as Vmax).0: f32) = Add(move _30, move _31); // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n-+         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n-+         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n-+         Deinit(((_0 as Ok).0: ViewportPercentageLength)); // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n-+         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n-+         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 3; // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n-+         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n-          goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n+-         StorageLive(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n+          StorageLive(_45);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n+          _45 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n+-         _27 = (((*_45) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n++         _30 = (((*_45) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n+          StorageDead(_45);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n+-         StorageLive(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n+          StorageLive(_46);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n+          _46 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n+-         _28 = (((*_46) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n++         _31 = (((*_46) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n+          StorageDead(_46);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:55\n+-         StorageLive(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:55\n+-         StorageLive(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:47\n+-         _30 = _27;                       // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:47\n+-         StorageLive(_31);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:50: +9:55\n+-         _31 = _28;                       // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:50: +9:55\n+-         _29 = Add(move _30, move _31);   // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:55\n+-         StorageDead(_31);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:54: +9:55\n+-         StorageDead(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:54: +9:55\n+-         Deinit(_3);                      // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:39: +9:56\n+-         ((_3 as Vmax).0: f32) = move _29; // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:39: +9:56\n+-         discriminant(_3) = 3;            // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:39: +9:56\n+-         StorageDead(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n+-         StorageDead(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n+-         StorageDead(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n++         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:55\n++         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:47\n++         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:47\n++         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:50: +9:55\n++         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:50: +9:55\n++         ((((_0 as Ok).0: ViewportPercentageLength) as Vmax).0: f32) = Add(move _30, move _31); // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:55\n++         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:54: +9:55\n++         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:54: +9:55\n++         Deinit(((_0 as Ok).0: ViewportPercentageLength)); // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:39: +9:56\n++         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:39: +9:56\n++         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 3; // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:39: +9:56\n++         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n+          goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n       }\n   \n       bb10: {\n-          Deinit(_0);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n--         ((_0 as Ok).0: ViewportPercentageLength) = move _3; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n-          discriminant(_0) = 0;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n--         StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:6: 27:7\n--         StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:1: 28:2\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:6: 27:7\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:1: 28:2\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:2: 28:2\n+          Deinit(_0);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:5: +11:7\n+-         ((_0 as Ok).0: ViewportPercentageLength) = move _3; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:5: +11:7\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:5: +11:7\n+          discriminant(_0) = 0;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:5: +11:7\n+-         StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+11:6: +11:7\n+-         StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:1: +12:2\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+11:6: +11:7\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:1: +12:2\n+          return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:2: +12:2\n       }\n   }\n   "}, {"sha": "2519f79f8254ed29b5c561608a2b043e6f6371c5", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 206, "deletions": 206, "changes": 412, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,252 +2,252 @@\n + // MIR for `try_sum` after EarlyOtherwiseBranch\n   \n   fn try_sum(_1: &ViewportPercentageLength, _2: &ViewportPercentageLength) -> Result<ViewportPercentageLength, ()> {\n-      debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch_68867.rs:17:5: 17:6\n-      debug other => _2;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:18:5: 18:10\n-      let mut _0: std::result::Result<ViewportPercentageLength, ()>; // return place in scope 0 at $DIR/early_otherwise_branch_68867.rs:19:6: 19:42\n-      let mut _3: ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n-      let mut _4: (&ViewportPercentageLength, &ViewportPercentageLength); // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-      let mut _5: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n-      let mut _6: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:18: 21:23\n-      let mut _7: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:21: 22:30\n-      let mut _8: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n-      let mut _9: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:23: 24:34\n-      let mut _10: isize;                  // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:23: 25:34\n-      let mut _11: isize;                  // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n-      let _12: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n-      let _13: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n-      let mut _14: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:49\n-      let mut _15: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:41\n-      let mut _16: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:22:44: 22:49\n-      let _17: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n-      let _18: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n-      let mut _19: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n-      let mut _20: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n-      let mut _21: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n-      let _22: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n-      let _23: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n-      let mut _24: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:55\n-      let mut _25: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:47\n-      let mut _26: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:24:50: 24:55\n-      let _27: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n-      let _28: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n-      let mut _29: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n-      let mut _30: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n-      let mut _31: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n-      let mut _32: !;                      // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:14: 26:28\n-      let mut _33: ();                     // in scope 0 at $DIR/early_otherwise_branch_68867.rs:26:25: 26:27\n-      let mut _34: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-      let mut _35: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-      let mut _36: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-      let mut _37: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-      let mut _38: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-      let mut _39: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-      let mut _40: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-      let mut _41: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-      let mut _42: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-      let mut _43: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-      let mut _44: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-      let mut _45: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-      let mut _46: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+      debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+1:5: +1:6\n+      debug other => _2;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+2:5: +2:10\n+      let mut _0: std::result::Result<ViewportPercentageLength, ()>; // return place in scope 0 at $DIR/early_otherwise_branch_68867.rs:+3:6: +3:42\n+      let mut _3: ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +11:6\n+      let mut _4: (&ViewportPercentageLength, &ViewportPercentageLength); // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+      let mut _5: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:15: +5:16\n+      let mut _6: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:18: +5:23\n+      let mut _7: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:21: +6:30\n+      let mut _8: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:21: +7:30\n+      let mut _9: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:23: +8:34\n+      let mut _10: isize;                  // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:23: +9:34\n+      let mut _11: isize;                  // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:11: +6:18\n+      let _12: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n+      let _13: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n+      let mut _14: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:49\n+      let mut _15: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:41\n+      let mut _16: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:44: +6:49\n+      let _17: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n+      let _18: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n+      let mut _19: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:49\n+      let mut _20: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:41\n+      let mut _21: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:44: +7:49\n+      let _22: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n+      let _23: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n+      let mut _24: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:55\n+      let mut _25: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:47\n+      let mut _26: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:50: +8:55\n+      let _27: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n+      let _28: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n+      let mut _29: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:55\n+      let mut _30: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:47\n+      let mut _31: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:50: +9:55\n+      let mut _32: !;                      // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:14: +10:28\n+      let mut _33: ();                     // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:25: +10:27\n+      let mut _34: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+      let mut _35: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+      let mut _36: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+      let mut _37: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+      let mut _38: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+      let mut _39: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+      let mut _40: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+      let mut _41: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+      let mut _42: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+      let mut _43: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+      let mut _44: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+      let mut _45: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+      let mut _46: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n       scope 1 {\n-          debug one => _12;                // in scope 1 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n-          debug other => _13;              // in scope 1 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n+          debug one => _12;                // in scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n+          debug other => _13;              // in scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n       }\n       scope 2 {\n-          debug one => _17;                // in scope 2 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n-          debug other => _18;              // in scope 2 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n+          debug one => _17;                // in scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n+          debug other => _18;              // in scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n       }\n       scope 3 {\n-          debug one => _22;                // in scope 3 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n-          debug other => _23;              // in scope 3 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n+          debug one => _22;                // in scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n+          debug other => _23;              // in scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n       }\n       scope 4 {\n-          debug one => _27;                // in scope 4 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n-          debug other => _28;              // in scope 4 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n+          debug one => _27;                // in scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n+          debug other => _28;              // in scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n       }\n   \n       bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n-          StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n-          _5 = _1;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n-          StorageLive(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:18: 21:23\n-          _6 = _2;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:18: 21:23\n-          Deinit(_4);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          (_4.0: &ViewportPercentageLength) = move _5; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          (_4.1: &ViewportPercentageLength) = move _6; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n-          StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n-          StorageLive(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _34 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _11 = discriminant((*_34));      // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          StorageDead(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n-          switchInt(move _11) -> [0_isize: bb1, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n+          StorageLive(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +11:6\n+          StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:15: +5:16\n+          _5 = _1;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:15: +5:16\n+          StorageLive(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:18: +5:23\n+          _6 = _2;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:18: +5:23\n+          Deinit(_4);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          (_4.0: &ViewportPercentageLength) = move _5; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          (_4.1: &ViewportPercentageLength) = move _6; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:23: +5:24\n+          StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:23: +5:24\n+          StorageLive(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          _34 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          _11 = discriminant((*_34));      // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          StorageDead(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n+          switchInt(move _11) -> [0_isize: bb1, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n       }\n   \n       bb1: {\n-          StorageLive(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _35 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _7 = discriminant((*_35));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          StorageDead(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n-          switchInt(move _7) -> [0_isize: bb6, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n+          StorageLive(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          _35 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          _7 = discriminant((*_35));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          StorageDead(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n+          switchInt(move _7) -> [0_isize: bb6, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n       }\n   \n       bb2: {\n-          StorageLive(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:25: 26:27\n-          nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:25: 26:27\n-          Deinit(_0);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:21: 26:28\n-          nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:21: 26:28\n-          discriminant(_0) = 1;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:21: 26:28\n-          StorageDead(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:27: 26:28\n-          StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:6: 27:7\n-          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:1: 28:2\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:2: 28:2\n+          StorageLive(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:25: +10:27\n+          nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:25: +10:27\n+          Deinit(_0);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:21: +10:28\n+          nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:21: +10:28\n+          discriminant(_0) = 1;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:21: +10:28\n+          StorageDead(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:27: +10:28\n+          StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+11:6: +11:7\n+          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:1: +12:2\n+          return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:2: +12:2\n       }\n   \n       bb3: {\n-          StorageLive(_36);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _36 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _8 = discriminant((*_36));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          StorageDead(_36);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n-          switchInt(move _8) -> [1_isize: bb7, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n+          StorageLive(_36);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          _36 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          _8 = discriminant((*_36));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          StorageDead(_36);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n+          switchInt(move _8) -> [1_isize: bb7, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n       }\n   \n       bb4: {\n-          StorageLive(_37);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _37 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _9 = discriminant((*_37));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          StorageDead(_37);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n-          switchInt(move _9) -> [2_isize: bb8, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n+          StorageLive(_37);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          _37 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          _9 = discriminant((*_37));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          StorageDead(_37);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n+          switchInt(move _9) -> [2_isize: bb8, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n       }\n   \n       bb5: {\n-          StorageLive(_38);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _38 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _10 = discriminant((*_38));      // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          StorageDead(_38);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n-          switchInt(move _10) -> [3_isize: bb9, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n+          StorageLive(_38);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          _38 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          _10 = discriminant((*_38));      // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n+          StorageDead(_38);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n+          switchInt(move _10) -> [3_isize: bb9, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n       }\n   \n       bb6: {\n-          StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n-          StorageLive(_39);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n-          _39 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n-          _12 = (((*_39) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n-          StorageDead(_39);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n-          StorageLive(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n-          StorageLive(_40);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n-          _40 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n-          _13 = (((*_40) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n-          StorageDead(_40);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:49\n-          StorageLive(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:49\n-          StorageLive(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:41\n-          _15 = _12;                       // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:41\n-          StorageLive(_16);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:44: 22:49\n-          _16 = _13;                       // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:44: 22:49\n-          _14 = Add(move _15, move _16);   // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:49\n-          StorageDead(_16);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:48: 22:49\n-          StorageDead(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:48: 22:49\n-          Deinit(_3);                      // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n-          ((_3 as Vw).0: f32) = move _14;  // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n-          discriminant(_3) = 0;            // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:35: 22:50\n-          StorageDead(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n-          StorageDead(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n-          StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n-          goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n+          StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n+          StorageLive(_39);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n+          _39 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n+          _12 = (((*_39) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n+          StorageDead(_39);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n+          StorageLive(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n+          StorageLive(_40);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n+          _40 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n+          _13 = (((*_40) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n+          StorageDead(_40);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:49\n+          StorageLive(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:49\n+          StorageLive(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:41\n+          _15 = _12;                       // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:41\n+          StorageLive(_16);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:44: +6:49\n+          _16 = _13;                       // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:44: +6:49\n+          _14 = Add(move _15, move _16);   // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:49\n+          StorageDead(_16);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:48: +6:49\n+          StorageDead(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:48: +6:49\n+          Deinit(_3);                      // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:35: +6:50\n+          ((_3 as Vw).0: f32) = move _14;  // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:35: +6:50\n+          discriminant(_3) = 0;            // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:35: +6:50\n+          StorageDead(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:49: +6:50\n+          StorageDead(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:49: +6:50\n+          StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:49: +6:50\n+          goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:49: +6:50\n       }\n   \n       bb7: {\n-          StorageLive(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n-          StorageLive(_41);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n-          _41 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n-          _17 = (((*_41) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n-          StorageDead(_41);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n-          StorageLive(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n-          StorageLive(_42);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n-          _42 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n-          _18 = (((*_42) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n-          StorageDead(_42);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n-          StorageLive(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n-          StorageLive(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n-          _20 = _17;                       // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n-          StorageLive(_21);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n-          _21 = _18;                       // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:44: 23:49\n-          _19 = Add(move _20, move _21);   // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n-          StorageDead(_21);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n-          StorageDead(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:48: 23:49\n-          Deinit(_3);                      // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n-          ((_3 as Vh).0: f32) = move _19;  // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n-          discriminant(_3) = 1;            // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n-          StorageDead(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n-          StorageDead(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n-          StorageDead(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n-          goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n+          StorageLive(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n+          StorageLive(_41);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n+          _41 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n+          _17 = (((*_41) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n+          StorageDead(_41);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n+          StorageLive(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n+          StorageLive(_42);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n+          _42 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n+          _18 = (((*_42) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n+          StorageDead(_42);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:49\n+          StorageLive(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:49\n+          StorageLive(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:41\n+          _20 = _17;                       // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:41\n+          StorageLive(_21);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:44: +7:49\n+          _21 = _18;                       // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:44: +7:49\n+          _19 = Add(move _20, move _21);   // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:49\n+          StorageDead(_21);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:48: +7:49\n+          StorageDead(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:48: +7:49\n+          Deinit(_3);                      // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:35: +7:50\n+          ((_3 as Vh).0: f32) = move _19;  // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:35: +7:50\n+          discriminant(_3) = 1;            // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:35: +7:50\n+          StorageDead(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:49: +7:50\n+          StorageDead(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:49: +7:50\n+          StorageDead(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:49: +7:50\n+          goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:49: +7:50\n       }\n   \n       bb8: {\n-          StorageLive(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n-          StorageLive(_43);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n-          _43 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n-          _22 = (((*_43) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n-          StorageDead(_43);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n-          StorageLive(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n-          StorageLive(_44);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n-          _44 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n-          _23 = (((*_44) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n-          StorageDead(_44);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:55\n-          StorageLive(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:55\n-          StorageLive(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:47\n-          _25 = _22;                       // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:47\n-          StorageLive(_26);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:50: 24:55\n-          _26 = _23;                       // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:50: 24:55\n-          _24 = Add(move _25, move _26);   // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:55\n-          StorageDead(_26);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:54: 24:55\n-          StorageDead(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:54: 24:55\n-          Deinit(_3);                      // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n-          ((_3 as Vmin).0: f32) = move _24; // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n-          discriminant(_3) = 2;            // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:39: 24:56\n-          StorageDead(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n-          StorageDead(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n-          StorageDead(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n-          goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n+          StorageLive(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n+          StorageLive(_43);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n+          _43 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n+          _22 = (((*_43) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n+          StorageDead(_43);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n+          StorageLive(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n+          StorageLive(_44);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n+          _44 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n+          _23 = (((*_44) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n+          StorageDead(_44);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:55\n+          StorageLive(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:55\n+          StorageLive(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:47\n+          _25 = _22;                       // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:47\n+          StorageLive(_26);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:50: +8:55\n+          _26 = _23;                       // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:50: +8:55\n+          _24 = Add(move _25, move _26);   // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:55\n+          StorageDead(_26);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:54: +8:55\n+          StorageDead(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:54: +8:55\n+          Deinit(_3);                      // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:39: +8:56\n+          ((_3 as Vmin).0: f32) = move _24; // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:39: +8:56\n+          discriminant(_3) = 2;            // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:39: +8:56\n+          StorageDead(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:55: +8:56\n+          StorageDead(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:55: +8:56\n+          StorageDead(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:55: +8:56\n+          goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:55: +8:56\n       }\n   \n       bb9: {\n-          StorageLive(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n-          StorageLive(_45);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n-          _45 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n-          _27 = (((*_45) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n-          StorageDead(_45);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n-          StorageLive(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n-          StorageLive(_46);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n-          _46 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n-          _28 = (((*_46) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n-          StorageDead(_46);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n-          StorageLive(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n-          StorageLive(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n-          _30 = _27;                       // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n-          StorageLive(_31);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n-          _31 = _28;                       // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:50: 25:55\n-          _29 = Add(move _30, move _31);   // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n-          StorageDead(_31);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n-          StorageDead(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:54: 25:55\n-          Deinit(_3);                      // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n-          ((_3 as Vmax).0: f32) = move _29; // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n-          discriminant(_3) = 3;            // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n-          StorageDead(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n-          StorageDead(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n-          StorageDead(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n-          goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n+          StorageLive(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n+          StorageLive(_45);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n+          _45 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n+          _27 = (((*_45) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n+          StorageDead(_45);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n+          StorageLive(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n+          StorageLive(_46);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n+          _46 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n+          _28 = (((*_46) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n+          StorageDead(_46);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:55\n+          StorageLive(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:55\n+          StorageLive(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:47\n+          _30 = _27;                       // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:47\n+          StorageLive(_31);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:50: +9:55\n+          _31 = _28;                       // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:50: +9:55\n+          _29 = Add(move _30, move _31);   // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:55\n+          StorageDead(_31);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:54: +9:55\n+          StorageDead(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:54: +9:55\n+          Deinit(_3);                      // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:39: +9:56\n+          ((_3 as Vmax).0: f32) = move _29; // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:39: +9:56\n+          discriminant(_3) = 3;            // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:39: +9:56\n+          StorageDead(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n+          StorageDead(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n+          StorageDead(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n+          goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n       }\n   \n       bb10: {\n-          Deinit(_0);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n-          ((_0 as Ok).0: ViewportPercentageLength) = move _3; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n-          discriminant(_0) = 0;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n-          StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:6: 27:7\n-          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:1: 28:2\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:2: 28:2\n+          Deinit(_0);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:5: +11:7\n+          ((_0 as Ok).0: ViewportPercentageLength) = move _3; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:5: +11:7\n+          discriminant(_0) = 0;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:5: +11:7\n+          StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+11:6: +11:7\n+          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:1: +12:2\n+          return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:2: +12:2\n       }\n   }\n   "}, {"sha": "321f57951b465309ffebc42d4c86b0d7dab64451", "filename": "src/test/mir-opt/early_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,94 +2,94 @@\n + // MIR for `noopt1` after EarlyOtherwiseBranch\n   \n   fn noopt1(_1: Option<u32>, _2: Option<u32>) -> u32 {\n-      debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:7:11: 7:12\n-      debug y => _2;                       // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:7:27: 7:28\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/early_otherwise_branch_noopt.rs:7:46: 7:49\n-      let mut _3: (std::option::Option<u32>, std::option::Option<u32>); // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n-      let mut _4: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:12: 8:13\n-      let mut _5: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:15: 8:16\n-      let mut _6: isize;                   // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:16: 11:23\n-      let mut _7: isize;                   // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:19: 9:26\n-      let mut _8: isize;                   // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:10: 9:17\n-      let _9: u32;                         // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:15: 9:16\n-      let _10: u32;                        // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:24: 9:25\n-      let _11: u32;                        // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:10:15: 10:16\n-      let _12: u32;                        // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:21: 11:22\n+      debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:+0:11: +0:12\n+      debug y => _2;                       // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:+0:27: +0:28\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/early_otherwise_branch_noopt.rs:+0:46: +0:49\n+      let mut _3: (std::option::Option<u32>, std::option::Option<u32>); // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:11: +1:17\n+      let mut _4: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:12: +1:13\n+      let mut _5: std::option::Option<u32>; // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:15: +1:16\n+      let mut _6: isize;                   // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:+4:16: +4:23\n+      let mut _7: isize;                   // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:+2:19: +2:26\n+      let mut _8: isize;                   // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:+2:10: +2:17\n+      let _9: u32;                         // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:+2:15: +2:16\n+      let _10: u32;                        // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:+2:24: +2:25\n+      let _11: u32;                        // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:+3:15: +3:16\n+      let _12: u32;                        // in scope 0 at $DIR/early_otherwise_branch_noopt.rs:+4:21: +4:22\n       scope 1 {\n-          debug a => _9;                   // in scope 1 at $DIR/early_otherwise_branch_noopt.rs:9:15: 9:16\n-          debug b => _10;                  // in scope 1 at $DIR/early_otherwise_branch_noopt.rs:9:24: 9:25\n+          debug a => _9;                   // in scope 1 at $DIR/early_otherwise_branch_noopt.rs:+2:15: +2:16\n+          debug b => _10;                  // in scope 1 at $DIR/early_otherwise_branch_noopt.rs:+2:24: +2:25\n       }\n       scope 2 {\n-          debug a => _11;                  // in scope 2 at $DIR/early_otherwise_branch_noopt.rs:10:15: 10:16\n+          debug a => _11;                  // in scope 2 at $DIR/early_otherwise_branch_noopt.rs:+3:15: +3:16\n       }\n       scope 3 {\n-          debug b => _12;                  // in scope 3 at $DIR/early_otherwise_branch_noopt.rs:11:21: 11:22\n+          debug b => _12;                  // in scope 3 at $DIR/early_otherwise_branch_noopt.rs:+4:21: +4:22\n       }\n   \n       bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n-          StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:12: 8:13\n-          _4 = _1;                         // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:12: 8:13\n-          StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:15: 8:16\n-          _5 = _2;                         // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:15: 8:16\n-          Deinit(_3);                      // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n-          (_3.0: std::option::Option<u32>) = move _4; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n-          (_3.1: std::option::Option<u32>) = move _5; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n-          StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:16: 8:17\n-          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:16: 8:17\n-          _8 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n-          switchInt(move _8) -> [0_isize: bb1, 1_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:5: 8:17\n+          StorageLive(_3);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:11: +1:17\n+          StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:12: +1:13\n+          _4 = _1;                         // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:12: +1:13\n+          StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:15: +1:16\n+          _5 = _2;                         // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:15: +1:16\n+          Deinit(_3);                      // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:11: +1:17\n+          (_3.0: std::option::Option<u32>) = move _4; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:11: +1:17\n+          (_3.1: std::option::Option<u32>) = move _5; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:11: +1:17\n+          StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:16: +1:17\n+          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:16: +1:17\n+          _8 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:11: +1:17\n+          switchInt(move _8) -> [0_isize: bb1, 1_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:5: +1:17\n       }\n   \n       bb1: {\n-          _6 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n-          switchInt(move _6) -> [0_isize: bb2, 1_isize: bb7, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:5: 8:17\n+          _6 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:11: +1:17\n+          switchInt(move _6) -> [0_isize: bb2, 1_isize: bb7, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:5: +1:17\n       }\n   \n       bb2: {\n-          _0 = const 3_u32;                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:12:25: 12:26\n-          goto -> bb8;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:12:25: 12:26\n+          _0 = const 3_u32;                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+5:25: +5:26\n+          goto -> bb8;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+5:25: +5:26\n       }\n   \n       bb3: {\n-          unreachable;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n+          unreachable;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:11: +1:17\n       }\n   \n       bb4: {\n-          _7 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n-          switchInt(move _7) -> [0_isize: bb6, 1_isize: bb5, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:5: 8:17\n+          _7 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:11: +1:17\n+          switchInt(move _7) -> [0_isize: bb6, 1_isize: bb5, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+1:5: +1:17\n       }\n   \n       bb5: {\n-          StorageLive(_9);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:15: 9:16\n-          _9 = (((_3.0: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:15: 9:16\n-          StorageLive(_10);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:24: 9:25\n-          _10 = (((_3.1: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:24: 9:25\n-          _0 = const 0_u32;                // scope 1 at $DIR/early_otherwise_branch_noopt.rs:9:31: 9:32\n-          StorageDead(_10);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:31: 9:32\n-          StorageDead(_9);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:31: 9:32\n-          goto -> bb8;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:31: 9:32\n+          StorageLive(_9);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+2:15: +2:16\n+          _9 = (((_3.0: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+2:15: +2:16\n+          StorageLive(_10);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+2:24: +2:25\n+          _10 = (((_3.1: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+2:24: +2:25\n+          _0 = const 0_u32;                // scope 1 at $DIR/early_otherwise_branch_noopt.rs:+2:31: +2:32\n+          StorageDead(_10);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+2:31: +2:32\n+          StorageDead(_9);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+2:31: +2:32\n+          goto -> bb8;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+2:31: +2:32\n       }\n   \n       bb6: {\n-          StorageLive(_11);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:10:15: 10:16\n-          _11 = (((_3.0: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:10:15: 10:16\n-          _0 = const 1_u32;                // scope 2 at $DIR/early_otherwise_branch_noopt.rs:10:28: 10:29\n-          StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:10:28: 10:29\n-          goto -> bb8;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:10:28: 10:29\n+          StorageLive(_11);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+3:15: +3:16\n+          _11 = (((_3.0: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+3:15: +3:16\n+          _0 = const 1_u32;                // scope 2 at $DIR/early_otherwise_branch_noopt.rs:+3:28: +3:29\n+          StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+3:28: +3:29\n+          goto -> bb8;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+3:28: +3:29\n       }\n   \n       bb7: {\n-          StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:21: 11:22\n-          _12 = (((_3.1: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:21: 11:22\n-          _0 = const 2_u32;                // scope 3 at $DIR/early_otherwise_branch_noopt.rs:11:28: 11:29\n-          StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:28: 11:29\n-          goto -> bb8;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:28: 11:29\n+          StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+4:21: +4:22\n+          _12 = (((_3.1: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+4:21: +4:22\n+          _0 = const 2_u32;                // scope 3 at $DIR/early_otherwise_branch_noopt.rs:+4:28: +4:29\n+          StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+4:28: +4:29\n+          goto -> bb8;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+4:28: +4:29\n       }\n   \n       bb8: {\n-          StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:14:1: 14:2\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_noopt.rs:14:2: 14:2\n+          StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+7:1: +7:2\n+          return;                          // scope 0 at $DIR/early_otherwise_branch_noopt.rs:+7:2: +7:2\n       }\n   }\n   "}, {"sha": "8b556acb2c4520a2382270a677f56e4218062923", "filename": "src/test/mir-opt/early_otherwise_branch_soundness.no_deref_ptr.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_deref_ptr.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_deref_ptr.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_deref_ptr.EarlyOtherwiseBranch.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,46 +2,46 @@\n + // MIR for `no_deref_ptr` after EarlyOtherwiseBranch\n   \n   fn no_deref_ptr(_1: Option<i32>, _2: *const Option<i32>) -> i32 {\n-      debug a => _1;                       // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:18:24: 18:25\n-      debug b => _2;                       // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:18:40: 18:41\n-      let mut _0: i32;                     // return place in scope 0 at $DIR/early_otherwise_branch_soundness.rs:18:66: 18:69\n-      let mut _3: isize;                   // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:21:9: 21:16\n-      let mut _4: isize;                   // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:22:13: 22:20\n-      let _5: i32;                         // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:22:18: 22:19\n+      debug a => _1;                       // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:+0:24: +0:25\n+      debug b => _2;                       // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:+0:40: +0:41\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/early_otherwise_branch_soundness.rs:+0:66: +0:69\n+      let mut _3: isize;                   // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:+3:9: +3:16\n+      let mut _4: isize;                   // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:+4:13: +4:20\n+      let _5: i32;                         // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:+4:18: +4:19\n       scope 1 {\n-          debug v => _5;                   // in scope 1 at $DIR/early_otherwise_branch_soundness.rs:22:18: 22:19\n+          debug v => _5;                   // in scope 1 at $DIR/early_otherwise_branch_soundness.rs:+4:18: +4:19\n       }\n   \n       bb0: {\n-          _3 = discriminant(_1);           // scope 0 at $DIR/early_otherwise_branch_soundness.rs:19:11: 19:12\n-          switchInt(move _3) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_soundness.rs:19:5: 19:12\n+          _3 = discriminant(_1);           // scope 0 at $DIR/early_otherwise_branch_soundness.rs:+1:11: +1:12\n+          switchInt(move _3) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_soundness.rs:+1:5: +1:12\n       }\n   \n       bb1: {\n-          _0 = const 0_i32;                // scope 0 at $DIR/early_otherwise_branch_soundness.rs:25:14: 25:15\n-          goto -> bb5;                     // scope 0 at $DIR/early_otherwise_branch_soundness.rs:25:14: 25:15\n+          _0 = const 0_i32;                // scope 0 at $DIR/early_otherwise_branch_soundness.rs:+7:14: +7:15\n+          goto -> bb5;                     // scope 0 at $DIR/early_otherwise_branch_soundness.rs:+7:14: +7:15\n       }\n   \n       bb2: {\n-          _4 = discriminant((*_2));        // scope 0 at $DIR/early_otherwise_branch_soundness.rs:21:26: 21:28\n-          switchInt(move _4) -> [1_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_soundness.rs:21:20: 21:28\n+          _4 = discriminant((*_2));        // scope 0 at $DIR/early_otherwise_branch_soundness.rs:+3:26: +3:28\n+          switchInt(move _4) -> [1_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_soundness.rs:+3:20: +3:28\n       }\n   \n       bb3: {\n-          _0 = const 0_i32;                // scope 0 at $DIR/early_otherwise_branch_soundness.rs:23:18: 23:19\n-          goto -> bb5;                     // scope 0 at $DIR/early_otherwise_branch_soundness.rs:23:18: 23:19\n+          _0 = const 0_i32;                // scope 0 at $DIR/early_otherwise_branch_soundness.rs:+5:18: +5:19\n+          goto -> bb5;                     // scope 0 at $DIR/early_otherwise_branch_soundness.rs:+5:18: +5:19\n       }\n   \n       bb4: {\n-          StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_soundness.rs:22:18: 22:19\n-          _5 = (((*_2) as Some).0: i32);   // scope 0 at $DIR/early_otherwise_branch_soundness.rs:22:18: 22:19\n-          _0 = _5;                         // scope 1 at $DIR/early_otherwise_branch_soundness.rs:22:24: 22:25\n-          StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_soundness.rs:22:24: 22:25\n-          goto -> bb5;                     // scope 0 at $DIR/early_otherwise_branch_soundness.rs:22:24: 22:25\n+          StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_soundness.rs:+4:18: +4:19\n+          _5 = (((*_2) as Some).0: i32);   // scope 0 at $DIR/early_otherwise_branch_soundness.rs:+4:18: +4:19\n+          _0 = _5;                         // scope 1 at $DIR/early_otherwise_branch_soundness.rs:+4:24: +4:25\n+          StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_soundness.rs:+4:24: +4:25\n+          goto -> bb5;                     // scope 0 at $DIR/early_otherwise_branch_soundness.rs:+4:24: +4:25\n       }\n   \n       bb5: {\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_soundness.rs:27:2: 27:2\n+          return;                          // scope 0 at $DIR/early_otherwise_branch_soundness.rs:+9:2: +9:2\n       }\n   }\n   "}, {"sha": "3d7b3f75a8bf068cc4a9f6bc319e5e62292638bc", "filename": "src/test/mir-opt/early_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,39 +2,39 @@\n + // MIR for `no_downcast` after EarlyOtherwiseBranch\n   \n   fn no_downcast(_1: &E) -> u32 {\n-      debug e => _1;                       // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:12:16: 12:17\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/early_otherwise_branch_soundness.rs:12:26: 12:29\n-      let mut _2: isize;                   // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:20: 13:30\n-      let mut _3: isize;                   // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n-      let mut _4: &E;                      // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:12:16: 12:17\n+      debug e => _1;                       // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:+0:16: +0:17\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/early_otherwise_branch_soundness.rs:+0:26: +0:29\n+      let mut _2: isize;                   // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:+1:20: +1:30\n+      let mut _3: isize;                   // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:+1:12: +1:31\n+      let mut _4: &E;                      // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:+0:16: +0:17\n       scope 1 {\n       }\n   \n       bb0: {\n-          _3 = discriminant((*_1));        // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n-          switchInt(move _3) -> [1_isize: bb1, otherwise: bb3]; // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n+          _3 = discriminant((*_1));        // scope 1 at $DIR/early_otherwise_branch_soundness.rs:+1:12: +1:31\n+          switchInt(move _3) -> [1_isize: bb1, otherwise: bb3]; // scope 1 at $DIR/early_otherwise_branch_soundness.rs:+1:12: +1:31\n       }\n   \n       bb1: {\n-          StorageLive(_4);                 // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n-          _4 = deref_copy (((*_1) as Some).0: &E); // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n-          _2 = discriminant((*_4));        // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n-          StorageDead(_4);                 // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n-          switchInt(move _2) -> [1_isize: bb2, otherwise: bb3]; // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n+          StorageLive(_4);                 // scope 1 at $DIR/early_otherwise_branch_soundness.rs:+1:12: +1:31\n+          _4 = deref_copy (((*_1) as Some).0: &E); // scope 1 at $DIR/early_otherwise_branch_soundness.rs:+1:12: +1:31\n+          _2 = discriminant((*_4));        // scope 1 at $DIR/early_otherwise_branch_soundness.rs:+1:12: +1:31\n+          StorageDead(_4);                 // scope 1 at $DIR/early_otherwise_branch_soundness.rs:+1:12: +1:31\n+          switchInt(move _2) -> [1_isize: bb2, otherwise: bb3]; // scope 1 at $DIR/early_otherwise_branch_soundness.rs:+1:12: +1:31\n       }\n   \n       bb2: {\n-          _0 = const 1_u32;                // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:38: 13:39\n-          goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:5: 13:52\n+          _0 = const 1_u32;                // scope 1 at $DIR/early_otherwise_branch_soundness.rs:+1:38: +1:39\n+          goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch_soundness.rs:+1:5: +1:52\n       }\n   \n       bb3: {\n-          _0 = const 2_u32;                // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:49: 13:50\n-          goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:5: 13:52\n+          _0 = const 2_u32;                // scope 0 at $DIR/early_otherwise_branch_soundness.rs:+1:49: +1:50\n+          goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch_soundness.rs:+1:5: +1:52\n       }\n   \n       bb4: {\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_soundness.rs:14:2: 14:2\n+          return;                          // scope 0 at $DIR/early_otherwise_branch_soundness.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "afca2fd296075b28389dc46442a4ebf28e8c619f", "filename": "src/test/mir-opt/enum_cast.bar.mir_map.0.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fenum_cast.bar.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fenum_cast.bar.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fenum_cast.bar.mir_map.0.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,13 +1,13 @@\n // MIR for `bar` 0 mir_map\n \n fn bar(_1: Bar) -> usize {\n-    debug bar => _1;                     // in scope 0 at $DIR/enum_cast.rs:22:8: 22:11\n-    let mut _0: usize;                   // return place in scope 0 at $DIR/enum_cast.rs:22:21: 22:26\n-    let mut _2: isize;                   // in scope 0 at $DIR/enum_cast.rs:23:5: 23:8\n+    debug bar => _1;                     // in scope 0 at $DIR/enum_cast.rs:+0:8: +0:11\n+    let mut _0: usize;                   // return place in scope 0 at $DIR/enum_cast.rs:+0:21: +0:26\n+    let mut _2: isize;                   // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n \n     bb0: {\n-        _2 = discriminant(_1);           // scope 0 at $DIR/enum_cast.rs:23:5: 23:17\n-        _0 = move _2 as usize (Misc);    // scope 0 at $DIR/enum_cast.rs:23:5: 23:17\n-        return;                          // scope 0 at $DIR/enum_cast.rs:24:2: 24:2\n+        _2 = discriminant(_1);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        _0 = move _2 as usize (Misc);    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        return;                          // scope 0 at $DIR/enum_cast.rs:+2:2: +2:2\n     }\n }"}, {"sha": "c79596d78995394986bd042a76eb06c13370eb88", "filename": "src/test/mir-opt/enum_cast.boo.mir_map.0.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fenum_cast.boo.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fenum_cast.boo.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fenum_cast.boo.mir_map.0.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,13 +1,13 @@\n // MIR for `boo` 0 mir_map\n \n fn boo(_1: Boo) -> usize {\n-    debug boo => _1;                     // in scope 0 at $DIR/enum_cast.rs:26:8: 26:11\n-    let mut _0: usize;                   // return place in scope 0 at $DIR/enum_cast.rs:26:21: 26:26\n-    let mut _2: u8;                      // in scope 0 at $DIR/enum_cast.rs:27:5: 27:8\n+    debug boo => _1;                     // in scope 0 at $DIR/enum_cast.rs:+0:8: +0:11\n+    let mut _0: usize;                   // return place in scope 0 at $DIR/enum_cast.rs:+0:21: +0:26\n+    let mut _2: u8;                      // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n \n     bb0: {\n-        _2 = discriminant(_1);           // scope 0 at $DIR/enum_cast.rs:27:5: 27:17\n-        _0 = move _2 as usize (Misc);    // scope 0 at $DIR/enum_cast.rs:27:5: 27:17\n-        return;                          // scope 0 at $DIR/enum_cast.rs:28:2: 28:2\n+        _2 = discriminant(_1);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        _0 = move _2 as usize (Misc);    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        return;                          // scope 0 at $DIR/enum_cast.rs:+2:2: +2:2\n     }\n }"}, {"sha": "8ced136db842ae8f72b2b648190dd2ceeb462c7e", "filename": "src/test/mir-opt/enum_cast.droppy.mir_map.0.mir", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fenum_cast.droppy.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fenum_cast.droppy.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fenum_cast.droppy.mir_map.0.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,54 +1,54 @@\n // MIR for `droppy` 0 mir_map\n \n fn droppy() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/enum_cast.rs:39:13: 39:13\n-    let _1: ();                          // in scope 0 at $DIR/enum_cast.rs:40:5: 45:6\n-    let _2: Droppy;                      // in scope 0 at $DIR/enum_cast.rs:41:13: 41:14\n-    let mut _4: isize;                   // in scope 0 at $DIR/enum_cast.rs:44:17: 44:18\n-    let _5: Droppy;                      // in scope 0 at $DIR/enum_cast.rs:46:9: 46:10\n+    let mut _0: ();                      // return place in scope 0 at $DIR/enum_cast.rs:+0:13: +0:13\n+    let _1: ();                          // in scope 0 at $DIR/enum_cast.rs:+1:5: +6:6\n+    let _2: Droppy;                      // in scope 0 at $DIR/enum_cast.rs:+2:13: +2:14\n+    let mut _4: isize;                   // in scope 0 at $DIR/enum_cast.rs:+5:17: +5:18\n+    let _5: Droppy;                      // in scope 0 at $DIR/enum_cast.rs:+7:9: +7:10\n     scope 1 {\n-        debug x => _2;                   // in scope 1 at $DIR/enum_cast.rs:41:13: 41:14\n+        debug x => _2;                   // in scope 1 at $DIR/enum_cast.rs:+2:13: +2:14\n         scope 2 {\n-            debug y => _3;               // in scope 2 at $DIR/enum_cast.rs:44:13: 44:14\n+            debug y => _3;               // in scope 2 at $DIR/enum_cast.rs:+5:13: +5:14\n         }\n         scope 3 {\n-            let _3: usize;               // in scope 3 at $DIR/enum_cast.rs:44:13: 44:14\n+            let _3: usize;               // in scope 3 at $DIR/enum_cast.rs:+5:13: +5:14\n         }\n     }\n     scope 4 {\n-        debug z => _5;                   // in scope 4 at $DIR/enum_cast.rs:46:9: 46:10\n+        debug z => _5;                   // in scope 4 at $DIR/enum_cast.rs:+7:9: +7:10\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/enum_cast.rs:40:5: 45:6\n-        StorageLive(_2);                 // scope 0 at $DIR/enum_cast.rs:41:13: 41:14\n-        _2 = Droppy::C;                  // scope 0 at $DIR/enum_cast.rs:41:17: 41:26\n-        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/enum_cast.rs:41:13: 41:14\n-        StorageLive(_3);                 // scope 3 at $DIR/enum_cast.rs:44:13: 44:14\n-        _4 = discriminant(_2);           // scope 3 at $DIR/enum_cast.rs:44:17: 44:27\n-        _3 = move _4 as usize (Misc);    // scope 3 at $DIR/enum_cast.rs:44:17: 44:27\n-        FakeRead(ForLet(None), _3);      // scope 3 at $DIR/enum_cast.rs:44:13: 44:14\n-        _1 = const ();                   // scope 0 at $DIR/enum_cast.rs:40:5: 45:6\n-        StorageDead(_3);                 // scope 1 at $DIR/enum_cast.rs:45:5: 45:6\n-        drop(_2) -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/enum_cast.rs:45:5: 45:6\n+        StorageLive(_1);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +6:6\n+        StorageLive(_2);                 // scope 0 at $DIR/enum_cast.rs:+2:13: +2:14\n+        _2 = Droppy::C;                  // scope 0 at $DIR/enum_cast.rs:+2:17: +2:26\n+        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/enum_cast.rs:+2:13: +2:14\n+        StorageLive(_3);                 // scope 3 at $DIR/enum_cast.rs:+5:13: +5:14\n+        _4 = discriminant(_2);           // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n+        _3 = move _4 as usize (Misc);    // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n+        FakeRead(ForLet(None), _3);      // scope 3 at $DIR/enum_cast.rs:+5:13: +5:14\n+        _1 = const ();                   // scope 0 at $DIR/enum_cast.rs:+1:5: +6:6\n+        StorageDead(_3);                 // scope 1 at $DIR/enum_cast.rs:+6:5: +6:6\n+        drop(_2) -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/enum_cast.rs:+6:5: +6:6\n     }\n \n     bb1: {\n-        StorageDead(_2);                 // scope 0 at $DIR/enum_cast.rs:45:5: 45:6\n-        StorageDead(_1);                 // scope 0 at $DIR/enum_cast.rs:45:5: 45:6\n-        StorageLive(_5);                 // scope 0 at $DIR/enum_cast.rs:46:9: 46:10\n-        _5 = Droppy::B;                  // scope 0 at $DIR/enum_cast.rs:46:13: 46:22\n-        FakeRead(ForLet(None), _5);      // scope 0 at $DIR/enum_cast.rs:46:9: 46:10\n-        _0 = const ();                   // scope 0 at $DIR/enum_cast.rs:39:13: 47:2\n-        drop(_5) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/enum_cast.rs:47:1: 47:2\n+        StorageDead(_2);                 // scope 0 at $DIR/enum_cast.rs:+6:5: +6:6\n+        StorageDead(_1);                 // scope 0 at $DIR/enum_cast.rs:+6:5: +6:6\n+        StorageLive(_5);                 // scope 0 at $DIR/enum_cast.rs:+7:9: +7:10\n+        _5 = Droppy::B;                  // scope 0 at $DIR/enum_cast.rs:+7:13: +7:22\n+        FakeRead(ForLet(None), _5);      // scope 0 at $DIR/enum_cast.rs:+7:9: +7:10\n+        _0 = const ();                   // scope 0 at $DIR/enum_cast.rs:+0:13: +8:2\n+        drop(_5) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/enum_cast.rs:+8:1: +8:2\n     }\n \n     bb2: {\n-        StorageDead(_5);                 // scope 0 at $DIR/enum_cast.rs:47:1: 47:2\n-        return;                          // scope 0 at $DIR/enum_cast.rs:47:2: 47:2\n+        StorageDead(_5);                 // scope 0 at $DIR/enum_cast.rs:+8:1: +8:2\n+        return;                          // scope 0 at $DIR/enum_cast.rs:+8:2: +8:2\n     }\n \n     bb3 (cleanup): {\n-        resume;                          // scope 0 at $DIR/enum_cast.rs:39:1: 47:2\n+        resume;                          // scope 0 at $DIR/enum_cast.rs:+0:1: +8:2\n     }\n }"}, {"sha": "39d6adeba33e9bf09671171acf98b0404673ffd7", "filename": "src/test/mir-opt/enum_cast.foo.mir_map.0.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fenum_cast.foo.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fenum_cast.foo.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fenum_cast.foo.mir_map.0.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,13 +1,13 @@\n // MIR for `foo` 0 mir_map\n \n fn foo(_1: Foo) -> usize {\n-    debug foo => _1;                     // in scope 0 at $DIR/enum_cast.rs:18:8: 18:11\n-    let mut _0: usize;                   // return place in scope 0 at $DIR/enum_cast.rs:18:21: 18:26\n-    let mut _2: isize;                   // in scope 0 at $DIR/enum_cast.rs:19:5: 19:8\n+    debug foo => _1;                     // in scope 0 at $DIR/enum_cast.rs:+0:8: +0:11\n+    let mut _0: usize;                   // return place in scope 0 at $DIR/enum_cast.rs:+0:21: +0:26\n+    let mut _2: isize;                   // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n \n     bb0: {\n-        _2 = discriminant(_1);           // scope 0 at $DIR/enum_cast.rs:19:5: 19:17\n-        _0 = move _2 as usize (Misc);    // scope 0 at $DIR/enum_cast.rs:19:5: 19:17\n-        return;                          // scope 0 at $DIR/enum_cast.rs:20:2: 20:2\n+        _2 = discriminant(_1);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        _0 = move _2 as usize (Misc);    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        return;                          // scope 0 at $DIR/enum_cast.rs:+2:2: +2:2\n     }\n }"}, {"sha": "89982308e71619408943b34bf1e16f0fab8943ad", "filename": "src/test/mir-opt/equal_true.opt.InstCombine.diff", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fequal_true.opt.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fequal_true.opt.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fequal_true.opt.InstCombine.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,34 +2,34 @@\n + // MIR for `opt` after InstCombine\n   \n   fn opt(_1: bool) -> i32 {\n-      debug x => _1;                       // in scope 0 at $DIR/equal_true.rs:3:8: 3:9\n-      let mut _0: i32;                     // return place in scope 0 at $DIR/equal_true.rs:3:20: 3:23\n-      let mut _2: bool;                    // in scope 0 at $DIR/equal_true.rs:4:8: 4:17\n-      let mut _3: bool;                    // in scope 0 at $DIR/equal_true.rs:4:8: 4:9\n+      debug x => _1;                       // in scope 0 at $DIR/equal_true.rs:+0:8: +0:9\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/equal_true.rs:+0:20: +0:23\n+      let mut _2: bool;                    // in scope 0 at $DIR/equal_true.rs:+1:8: +1:17\n+      let mut _3: bool;                    // in scope 0 at $DIR/equal_true.rs:+1:8: +1:9\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/equal_true.rs:4:8: 4:17\n-          StorageLive(_3);                 // scope 0 at $DIR/equal_true.rs:4:8: 4:9\n-          _3 = _1;                         // scope 0 at $DIR/equal_true.rs:4:8: 4:9\n--         _2 = Eq(move _3, const true);    // scope 0 at $DIR/equal_true.rs:4:8: 4:17\n-+         _2 = move _3;                    // scope 0 at $DIR/equal_true.rs:4:8: 4:17\n-          StorageDead(_3);                 // scope 0 at $DIR/equal_true.rs:4:16: 4:17\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/equal_true.rs:4:8: 4:17\n+          StorageLive(_2);                 // scope 0 at $DIR/equal_true.rs:+1:8: +1:17\n+          StorageLive(_3);                 // scope 0 at $DIR/equal_true.rs:+1:8: +1:9\n+          _3 = _1;                         // scope 0 at $DIR/equal_true.rs:+1:8: +1:9\n+-         _2 = Eq(move _3, const true);    // scope 0 at $DIR/equal_true.rs:+1:8: +1:17\n++         _2 = move _3;                    // scope 0 at $DIR/equal_true.rs:+1:8: +1:17\n+          StorageDead(_3);                 // scope 0 at $DIR/equal_true.rs:+1:16: +1:17\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/equal_true.rs:+1:8: +1:17\n       }\n   \n       bb1: {\n-          _0 = const 0_i32;                // scope 0 at $DIR/equal_true.rs:4:20: 4:21\n-          goto -> bb3;                     // scope 0 at $DIR/equal_true.rs:4:5: 4:34\n+          _0 = const 0_i32;                // scope 0 at $DIR/equal_true.rs:+1:20: +1:21\n+          goto -> bb3;                     // scope 0 at $DIR/equal_true.rs:+1:5: +1:34\n       }\n   \n       bb2: {\n-          _0 = const 1_i32;                // scope 0 at $DIR/equal_true.rs:4:31: 4:32\n-          goto -> bb3;                     // scope 0 at $DIR/equal_true.rs:4:5: 4:34\n+          _0 = const 1_i32;                // scope 0 at $DIR/equal_true.rs:+1:31: +1:32\n+          goto -> bb3;                     // scope 0 at $DIR/equal_true.rs:+1:5: +1:34\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/equal_true.rs:4:33: 4:34\n-          return;                          // scope 0 at $DIR/equal_true.rs:5:2: 5:2\n+          StorageDead(_2);                 // scope 0 at $DIR/equal_true.rs:+1:33: +1:34\n+          return;                          // scope 0 at $DIR/equal_true.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "d39145973624fb3dd51963f85626b18dab7a55f7", "filename": "src/test/mir-opt/exponential_or.match_tuple.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,83 +1,83 @@\n // MIR for `match_tuple` after SimplifyCfg-initial\n \n fn match_tuple(_1: (u32, bool, Option<i32>, u32)) -> u32 {\n-    debug x => _1;                       // in scope 0 at $DIR/exponential-or.rs:4:16: 4:17\n-    let mut _0: u32;                     // return place in scope 0 at $DIR/exponential-or.rs:4:53: 4:56\n-    let mut _2: isize;                   // in scope 0 at $DIR/exponential-or.rs:6:37: 6:48\n-    let mut _3: bool;                    // in scope 0 at $DIR/exponential-or.rs:6:70: 6:77\n-    let mut _4: bool;                    // in scope 0 at $DIR/exponential-or.rs:6:70: 6:77\n-    let mut _5: bool;                    // in scope 0 at $DIR/exponential-or.rs:6:62: 6:67\n-    let mut _6: bool;                    // in scope 0 at $DIR/exponential-or.rs:6:62: 6:67\n-    let _7: u32;                         // in scope 0 at $DIR/exponential-or.rs:6:10: 6:21\n-    let _8: u32;                         // in scope 0 at $DIR/exponential-or.rs:6:57: 6:78\n-    let mut _9: u32;                     // in scope 0 at $DIR/exponential-or.rs:6:83: 6:84\n-    let mut _10: u32;                    // in scope 0 at $DIR/exponential-or.rs:6:87: 6:88\n+    debug x => _1;                       // in scope 0 at $DIR/exponential-or.rs:+0:16: +0:17\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/exponential-or.rs:+0:53: +0:56\n+    let mut _2: isize;                   // in scope 0 at $DIR/exponential-or.rs:+2:37: +2:48\n+    let mut _3: bool;                    // in scope 0 at $DIR/exponential-or.rs:+2:70: +2:77\n+    let mut _4: bool;                    // in scope 0 at $DIR/exponential-or.rs:+2:70: +2:77\n+    let mut _5: bool;                    // in scope 0 at $DIR/exponential-or.rs:+2:62: +2:67\n+    let mut _6: bool;                    // in scope 0 at $DIR/exponential-or.rs:+2:62: +2:67\n+    let _7: u32;                         // in scope 0 at $DIR/exponential-or.rs:+2:10: +2:21\n+    let _8: u32;                         // in scope 0 at $DIR/exponential-or.rs:+2:57: +2:78\n+    let mut _9: u32;                     // in scope 0 at $DIR/exponential-or.rs:+2:83: +2:84\n+    let mut _10: u32;                    // in scope 0 at $DIR/exponential-or.rs:+2:87: +2:88\n     scope 1 {\n-        debug y => _7;                   // in scope 1 at $DIR/exponential-or.rs:6:10: 6:21\n-        debug z => _8;                   // in scope 1 at $DIR/exponential-or.rs:6:57: 6:78\n+        debug y => _7;                   // in scope 1 at $DIR/exponential-or.rs:+2:10: +2:21\n+        debug z => _8;                   // in scope 1 at $DIR/exponential-or.rs:+2:57: +2:78\n     }\n \n     bb0: {\n-        FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/exponential-or.rs:5:11: 5:12\n-        switchInt((_1.0: u32)) -> [1_u32: bb2, 4_u32: bb2, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:6:15: 6:20\n+        FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/exponential-or.rs:+1:11: +1:12\n+        switchInt((_1.0: u32)) -> [1_u32: bb2, 4_u32: bb2, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:+2:15: +2:20\n     }\n \n     bb1: {\n-        _0 = const 0_u32;                // scope 0 at $DIR/exponential-or.rs:7:14: 7:15\n-        goto -> bb10;                    // scope 0 at $DIR/exponential-or.rs:7:14: 7:15\n+        _0 = const 0_u32;                // scope 0 at $DIR/exponential-or.rs:+3:14: +3:15\n+        goto -> bb10;                    // scope 0 at $DIR/exponential-or.rs:+3:14: +3:15\n     }\n \n     bb2: {\n-        _2 = discriminant((_1.2: std::option::Option<i32>)); // scope 0 at $DIR/exponential-or.rs:6:37: 6:55\n-        switchInt(move _2) -> [0_isize: bb4, 1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:6:37: 6:55\n+        _2 = discriminant((_1.2: std::option::Option<i32>)); // scope 0 at $DIR/exponential-or.rs:+2:37: +2:55\n+        switchInt(move _2) -> [0_isize: bb4, 1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:+2:37: +2:55\n     }\n \n     bb3: {\n-        switchInt((((_1.2: std::option::Option<i32>) as Some).0: i32)) -> [1_i32: bb4, 8_i32: bb4, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:6:37: 6:55\n+        switchInt((((_1.2: std::option::Option<i32>) as Some).0: i32)) -> [1_i32: bb4, 8_i32: bb4, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:+2:37: +2:55\n     }\n \n     bb4: {\n-        _5 = Le(const 6_u32, (_1.3: u32)); // scope 0 at $DIR/exponential-or.rs:6:62: 6:67\n-        switchInt(move _5) -> [false: bb6, otherwise: bb5]; // scope 0 at $DIR/exponential-or.rs:6:62: 6:67\n+        _5 = Le(const 6_u32, (_1.3: u32)); // scope 0 at $DIR/exponential-or.rs:+2:62: +2:67\n+        switchInt(move _5) -> [false: bb6, otherwise: bb5]; // scope 0 at $DIR/exponential-or.rs:+2:62: +2:67\n     }\n \n     bb5: {\n-        _6 = Le((_1.3: u32), const 9_u32); // scope 0 at $DIR/exponential-or.rs:6:62: 6:67\n-        switchInt(move _6) -> [false: bb6, otherwise: bb8]; // scope 0 at $DIR/exponential-or.rs:6:62: 6:67\n+        _6 = Le((_1.3: u32), const 9_u32); // scope 0 at $DIR/exponential-or.rs:+2:62: +2:67\n+        switchInt(move _6) -> [false: bb6, otherwise: bb8]; // scope 0 at $DIR/exponential-or.rs:+2:62: +2:67\n     }\n \n     bb6: {\n-        _3 = Le(const 13_u32, (_1.3: u32)); // scope 0 at $DIR/exponential-or.rs:6:70: 6:77\n-        switchInt(move _3) -> [false: bb1, otherwise: bb7]; // scope 0 at $DIR/exponential-or.rs:6:70: 6:77\n+        _3 = Le(const 13_u32, (_1.3: u32)); // scope 0 at $DIR/exponential-or.rs:+2:70: +2:77\n+        switchInt(move _3) -> [false: bb1, otherwise: bb7]; // scope 0 at $DIR/exponential-or.rs:+2:70: +2:77\n     }\n \n     bb7: {\n-        _4 = Le((_1.3: u32), const 16_u32); // scope 0 at $DIR/exponential-or.rs:6:70: 6:77\n-        switchInt(move _4) -> [false: bb1, otherwise: bb8]; // scope 0 at $DIR/exponential-or.rs:6:70: 6:77\n+        _4 = Le((_1.3: u32), const 16_u32); // scope 0 at $DIR/exponential-or.rs:+2:70: +2:77\n+        switchInt(move _4) -> [false: bb1, otherwise: bb8]; // scope 0 at $DIR/exponential-or.rs:+2:70: +2:77\n     }\n \n     bb8: {\n-        falseEdge -> [real: bb9, imaginary: bb1]; // scope 0 at $DIR/exponential-or.rs:6:9: 6:79\n+        falseEdge -> [real: bb9, imaginary: bb1]; // scope 0 at $DIR/exponential-or.rs:+2:9: +2:79\n     }\n \n     bb9: {\n-        StorageLive(_7);                 // scope 0 at $DIR/exponential-or.rs:6:10: 6:21\n-        _7 = (_1.0: u32);                // scope 0 at $DIR/exponential-or.rs:6:10: 6:21\n-        StorageLive(_8);                 // scope 0 at $DIR/exponential-or.rs:6:57: 6:78\n-        _8 = (_1.3: u32);                // scope 0 at $DIR/exponential-or.rs:6:57: 6:78\n-        StorageLive(_9);                 // scope 1 at $DIR/exponential-or.rs:6:83: 6:84\n-        _9 = _7;                         // scope 1 at $DIR/exponential-or.rs:6:83: 6:84\n-        StorageLive(_10);                // scope 1 at $DIR/exponential-or.rs:6:87: 6:88\n-        _10 = _8;                        // scope 1 at $DIR/exponential-or.rs:6:87: 6:88\n-        _0 = BitXor(move _9, move _10);  // scope 1 at $DIR/exponential-or.rs:6:83: 6:88\n-        StorageDead(_10);                // scope 1 at $DIR/exponential-or.rs:6:87: 6:88\n-        StorageDead(_9);                 // scope 1 at $DIR/exponential-or.rs:6:87: 6:88\n-        StorageDead(_8);                 // scope 0 at $DIR/exponential-or.rs:6:87: 6:88\n-        StorageDead(_7);                 // scope 0 at $DIR/exponential-or.rs:6:87: 6:88\n-        goto -> bb10;                    // scope 0 at $DIR/exponential-or.rs:6:87: 6:88\n+        StorageLive(_7);                 // scope 0 at $DIR/exponential-or.rs:+2:10: +2:21\n+        _7 = (_1.0: u32);                // scope 0 at $DIR/exponential-or.rs:+2:10: +2:21\n+        StorageLive(_8);                 // scope 0 at $DIR/exponential-or.rs:+2:57: +2:78\n+        _8 = (_1.3: u32);                // scope 0 at $DIR/exponential-or.rs:+2:57: +2:78\n+        StorageLive(_9);                 // scope 1 at $DIR/exponential-or.rs:+2:83: +2:84\n+        _9 = _7;                         // scope 1 at $DIR/exponential-or.rs:+2:83: +2:84\n+        StorageLive(_10);                // scope 1 at $DIR/exponential-or.rs:+2:87: +2:88\n+        _10 = _8;                        // scope 1 at $DIR/exponential-or.rs:+2:87: +2:88\n+        _0 = BitXor(move _9, move _10);  // scope 1 at $DIR/exponential-or.rs:+2:83: +2:88\n+        StorageDead(_10);                // scope 1 at $DIR/exponential-or.rs:+2:87: +2:88\n+        StorageDead(_9);                 // scope 1 at $DIR/exponential-or.rs:+2:87: +2:88\n+        StorageDead(_8);                 // scope 0 at $DIR/exponential-or.rs:+2:87: +2:88\n+        StorageDead(_7);                 // scope 0 at $DIR/exponential-or.rs:+2:87: +2:88\n+        goto -> bb10;                    // scope 0 at $DIR/exponential-or.rs:+2:87: +2:88\n     }\n \n     bb10: {\n-        return;                          // scope 0 at $DIR/exponential-or.rs:9:2: 9:2\n+        return;                          // scope 0 at $DIR/exponential-or.rs:+5:2: +5:2\n     }\n }"}, {"sha": "c63433d36203da7d28e64d3c4b1ff3da198318a4", "filename": "src/test/mir-opt/fn_ptr_shim.core.ops-function-Fn-call.AddMovesForPackedDrops.before.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Ffn_ptr_shim.core.ops-function-Fn-call.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Ffn_ptr_shim.core.ops-function-Fn-call.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffn_ptr_shim.core.ops-function-Fn-call.AddMovesForPackedDrops.before.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,13 +1,13 @@\n // MIR for `std::ops::Fn::call` before AddMovesForPackedDrops\n \n fn std::ops::Fn::call(_1: *const fn(), _2: ()) -> <fn() as FnOnce<()>>::Output {\n-    let mut _0: <fn() as std::ops::FnOnce<()>>::Output; // return place in scope 0 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n+    let mut _0: <fn() as std::ops::FnOnce<()>>::Output; // return place in scope 0 at $SRC_DIR/core/src/ops/function.rs:+0:5: +0:67\n \n     bb0: {\n-        _0 = move (*_1)() -> bb1;        // scope 0 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n+        _0 = move (*_1)() -> bb1;        // scope 0 at $SRC_DIR/core/src/ops/function.rs:+0:5: +0:67\n     }\n \n     bb1: {\n-        return;                          // scope 0 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n+        return;                          // scope 0 at $SRC_DIR/core/src/ops/function.rs:+0:5: +0:67\n     }\n }"}, {"sha": "dca36b1a76d0ff4854eb09bb8efcf0bf9a10c2e5", "filename": "src/test/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 89, "deletions": 89, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,145 +2,145 @@\n + // MIR for `float_to_exponential_common` after ConstProp\n   \n   fn float_to_exponential_common(_1: &mut Formatter, _2: &T, _3: bool) -> Result<(), std::fmt::Error> {\n-      debug fmt => _1;                     // in scope 0 at $DIR/funky_arms.rs:11:35: 11:38\n-      debug num => _2;                     // in scope 0 at $DIR/funky_arms.rs:11:60: 11:63\n-      debug upper => _3;                   // in scope 0 at $DIR/funky_arms.rs:11:69: 11:74\n-      let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at $DIR/funky_arms.rs:11:85: 11:91\n-      let _4: bool;                        // in scope 0 at $DIR/funky_arms.rs:15:9: 15:19\n-      let mut _5: &std::fmt::Formatter;    // in scope 0 at $DIR/funky_arms.rs:15:22: 15:37\n-      let mut _7: std::option::Option<usize>; // in scope 0 at $DIR/funky_arms.rs:24:30: 24:45\n-      let mut _8: &std::fmt::Formatter;    // in scope 0 at $DIR/funky_arms.rs:24:30: 24:45\n-      let mut _9: isize;                   // in scope 0 at $DIR/funky_arms.rs:24:12: 24:27\n-      let mut _11: &mut std::fmt::Formatter; // in scope 0 at $DIR/funky_arms.rs:26:43: 26:46\n-      let mut _12: &T;                     // in scope 0 at $DIR/funky_arms.rs:26:48: 26:51\n-      let mut _13: core::num::flt2dec::Sign; // in scope 0 at $DIR/funky_arms.rs:26:53: 26:57\n-      let mut _14: u32;                    // in scope 0 at $DIR/funky_arms.rs:26:59: 26:79\n-      let mut _15: u32;                    // in scope 0 at $DIR/funky_arms.rs:26:59: 26:75\n-      let mut _16: usize;                  // in scope 0 at $DIR/funky_arms.rs:26:59: 26:68\n-      let mut _17: bool;                   // in scope 0 at $DIR/funky_arms.rs:26:81: 26:86\n-      let mut _18: &mut std::fmt::Formatter; // in scope 0 at $DIR/funky_arms.rs:28:46: 28:49\n-      let mut _19: &T;                     // in scope 0 at $DIR/funky_arms.rs:28:51: 28:54\n-      let mut _20: core::num::flt2dec::Sign; // in scope 0 at $DIR/funky_arms.rs:28:56: 28:60\n-      let mut _21: bool;                   // in scope 0 at $DIR/funky_arms.rs:28:62: 28:67\n+      debug fmt => _1;                     // in scope 0 at $DIR/funky_arms.rs:+0:35: +0:38\n+      debug num => _2;                     // in scope 0 at $DIR/funky_arms.rs:+0:60: +0:63\n+      debug upper => _3;                   // in scope 0 at $DIR/funky_arms.rs:+0:69: +0:74\n+      let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at $DIR/funky_arms.rs:+0:85: +0:91\n+      let _4: bool;                        // in scope 0 at $DIR/funky_arms.rs:+4:9: +4:19\n+      let mut _5: &std::fmt::Formatter;    // in scope 0 at $DIR/funky_arms.rs:+4:22: +4:37\n+      let mut _7: std::option::Option<usize>; // in scope 0 at $DIR/funky_arms.rs:+13:30: +13:45\n+      let mut _8: &std::fmt::Formatter;    // in scope 0 at $DIR/funky_arms.rs:+13:30: +13:45\n+      let mut _9: isize;                   // in scope 0 at $DIR/funky_arms.rs:+13:12: +13:27\n+      let mut _11: &mut std::fmt::Formatter; // in scope 0 at $DIR/funky_arms.rs:+15:43: +15:46\n+      let mut _12: &T;                     // in scope 0 at $DIR/funky_arms.rs:+15:48: +15:51\n+      let mut _13: core::num::flt2dec::Sign; // in scope 0 at $DIR/funky_arms.rs:+15:53: +15:57\n+      let mut _14: u32;                    // in scope 0 at $DIR/funky_arms.rs:+15:59: +15:79\n+      let mut _15: u32;                    // in scope 0 at $DIR/funky_arms.rs:+15:59: +15:75\n+      let mut _16: usize;                  // in scope 0 at $DIR/funky_arms.rs:+15:59: +15:68\n+      let mut _17: bool;                   // in scope 0 at $DIR/funky_arms.rs:+15:81: +15:86\n+      let mut _18: &mut std::fmt::Formatter; // in scope 0 at $DIR/funky_arms.rs:+17:46: +17:49\n+      let mut _19: &T;                     // in scope 0 at $DIR/funky_arms.rs:+17:51: +17:54\n+      let mut _20: core::num::flt2dec::Sign; // in scope 0 at $DIR/funky_arms.rs:+17:56: +17:60\n+      let mut _21: bool;                   // in scope 0 at $DIR/funky_arms.rs:+17:62: +17:67\n       scope 1 {\n-          debug force_sign => _4;          // in scope 1 at $DIR/funky_arms.rs:15:9: 15:19\n-          let _6: core::num::flt2dec::Sign; // in scope 1 at $DIR/funky_arms.rs:19:9: 19:13\n+          debug force_sign => _4;          // in scope 1 at $DIR/funky_arms.rs:+4:9: +4:19\n+          let _6: core::num::flt2dec::Sign; // in scope 1 at $DIR/funky_arms.rs:+8:9: +8:13\n           scope 2 {\n-              debug sign => _6;            // in scope 2 at $DIR/funky_arms.rs:19:9: 19:13\n+              debug sign => _6;            // in scope 2 at $DIR/funky_arms.rs:+8:9: +8:13\n               scope 3 {\n-                  debug precision => _10;  // in scope 3 at $DIR/funky_arms.rs:24:17: 24:26\n-                  let _10: usize;          // in scope 3 at $DIR/funky_arms.rs:24:17: 24:26\n+                  debug precision => _10;  // in scope 3 at $DIR/funky_arms.rs:+13:17: +13:26\n+                  let _10: usize;          // in scope 3 at $DIR/funky_arms.rs:+13:17: +13:26\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_4);                 // scope 0 at $DIR/funky_arms.rs:15:9: 15:19\n-          StorageLive(_5);                 // scope 0 at $DIR/funky_arms.rs:15:22: 15:37\n-          _5 = &(*_1);                     // scope 0 at $DIR/funky_arms.rs:15:22: 15:37\n-          _4 = Formatter::sign_plus(move _5) -> bb1; // scope 0 at $DIR/funky_arms.rs:15:22: 15:37\n+          StorageLive(_4);                 // scope 0 at $DIR/funky_arms.rs:+4:9: +4:19\n+          StorageLive(_5);                 // scope 0 at $DIR/funky_arms.rs:+4:22: +4:37\n+          _5 = &(*_1);                     // scope 0 at $DIR/funky_arms.rs:+4:22: +4:37\n+          _4 = Formatter::sign_plus(move _5) -> bb1; // scope 0 at $DIR/funky_arms.rs:+4:22: +4:37\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:15:26: 15:35\n                                            // + literal: Const { ty: for<'r> fn(&'r Formatter) -> bool {Formatter::sign_plus}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_5);                 // scope 0 at $DIR/funky_arms.rs:15:36: 15:37\n-          StorageLive(_6);                 // scope 1 at $DIR/funky_arms.rs:19:9: 19:13\n-          switchInt(_4) -> [false: bb3, otherwise: bb2]; // scope 1 at $DIR/funky_arms.rs:19:16: 19:32\n+          StorageDead(_5);                 // scope 0 at $DIR/funky_arms.rs:+4:36: +4:37\n+          StorageLive(_6);                 // scope 1 at $DIR/funky_arms.rs:+8:9: +8:13\n+          switchInt(_4) -> [false: bb3, otherwise: bb2]; // scope 1 at $DIR/funky_arms.rs:+8:16: +8:32\n       }\n   \n       bb2: {\n-          Deinit(_6);                      // scope 1 at $DIR/funky_arms.rs:21:17: 21:41\n-          discriminant(_6) = 1;            // scope 1 at $DIR/funky_arms.rs:21:17: 21:41\n-          goto -> bb4;                     // scope 1 at $DIR/funky_arms.rs:21:17: 21:41\n+          Deinit(_6);                      // scope 1 at $DIR/funky_arms.rs:+10:17: +10:41\n+          discriminant(_6) = 1;            // scope 1 at $DIR/funky_arms.rs:+10:17: +10:41\n+          goto -> bb4;                     // scope 1 at $DIR/funky_arms.rs:+10:17: +10:41\n       }\n   \n       bb3: {\n-          Deinit(_6);                      // scope 1 at $DIR/funky_arms.rs:20:18: 20:38\n-          discriminant(_6) = 0;            // scope 1 at $DIR/funky_arms.rs:20:18: 20:38\n-          goto -> bb4;                     // scope 1 at $DIR/funky_arms.rs:20:18: 20:38\n+          Deinit(_6);                      // scope 1 at $DIR/funky_arms.rs:+9:18: +9:38\n+          discriminant(_6) = 0;            // scope 1 at $DIR/funky_arms.rs:+9:18: +9:38\n+          goto -> bb4;                     // scope 1 at $DIR/funky_arms.rs:+9:18: +9:38\n       }\n   \n       bb4: {\n-          StorageLive(_7);                 // scope 3 at $DIR/funky_arms.rs:24:30: 24:45\n-          StorageLive(_8);                 // scope 3 at $DIR/funky_arms.rs:24:30: 24:45\n-          _8 = &(*_1);                     // scope 3 at $DIR/funky_arms.rs:24:30: 24:45\n-          _7 = Formatter::precision(move _8) -> bb5; // scope 3 at $DIR/funky_arms.rs:24:30: 24:45\n+          StorageLive(_7);                 // scope 3 at $DIR/funky_arms.rs:+13:30: +13:45\n+          StorageLive(_8);                 // scope 3 at $DIR/funky_arms.rs:+13:30: +13:45\n+          _8 = &(*_1);                     // scope 3 at $DIR/funky_arms.rs:+13:30: +13:45\n+          _7 = Formatter::precision(move _8) -> bb5; // scope 3 at $DIR/funky_arms.rs:+13:30: +13:45\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:24:34: 24:43\n                                            // + literal: Const { ty: for<'r> fn(&'r Formatter) -> Option<usize> {Formatter::precision}, val: Value(<ZST>) }\n       }\n   \n       bb5: {\n-          StorageDead(_8);                 // scope 3 at $DIR/funky_arms.rs:24:44: 24:45\n-          _9 = discriminant(_7);           // scope 3 at $DIR/funky_arms.rs:24:12: 24:27\n-          switchInt(move _9) -> [1_isize: bb6, otherwise: bb8]; // scope 3 at $DIR/funky_arms.rs:24:12: 24:27\n+          StorageDead(_8);                 // scope 3 at $DIR/funky_arms.rs:+13:44: +13:45\n+          _9 = discriminant(_7);           // scope 3 at $DIR/funky_arms.rs:+13:12: +13:27\n+          switchInt(move _9) -> [1_isize: bb6, otherwise: bb8]; // scope 3 at $DIR/funky_arms.rs:+13:12: +13:27\n       }\n   \n       bb6: {\n-          StorageLive(_10);                // scope 3 at $DIR/funky_arms.rs:24:17: 24:26\n-          _10 = ((_7 as Some).0: usize);   // scope 3 at $DIR/funky_arms.rs:24:17: 24:26\n-          StorageLive(_11);                // scope 3 at $DIR/funky_arms.rs:26:43: 26:46\n-          _11 = &mut (*_1);                // scope 3 at $DIR/funky_arms.rs:26:43: 26:46\n-          StorageLive(_12);                // scope 3 at $DIR/funky_arms.rs:26:48: 26:51\n-          _12 = _2;                        // scope 3 at $DIR/funky_arms.rs:26:48: 26:51\n-          StorageLive(_13);                // scope 3 at $DIR/funky_arms.rs:26:53: 26:57\n-          _13 = _6;                        // scope 3 at $DIR/funky_arms.rs:26:53: 26:57\n-          StorageLive(_14);                // scope 3 at $DIR/funky_arms.rs:26:59: 26:79\n-          StorageLive(_15);                // scope 3 at $DIR/funky_arms.rs:26:59: 26:75\n-          StorageLive(_16);                // scope 3 at $DIR/funky_arms.rs:26:59: 26:68\n-          _16 = _10;                       // scope 3 at $DIR/funky_arms.rs:26:59: 26:68\n-          _15 = move _16 as u32 (Misc);    // scope 3 at $DIR/funky_arms.rs:26:59: 26:75\n-          StorageDead(_16);                // scope 3 at $DIR/funky_arms.rs:26:74: 26:75\n-          _14 = Add(move _15, const 1_u32); // scope 3 at $DIR/funky_arms.rs:26:59: 26:79\n-          StorageDead(_15);                // scope 3 at $DIR/funky_arms.rs:26:78: 26:79\n-          StorageLive(_17);                // scope 3 at $DIR/funky_arms.rs:26:81: 26:86\n-          _17 = _3;                        // scope 3 at $DIR/funky_arms.rs:26:81: 26:86\n-          _0 = float_to_exponential_common_exact::<T>(move _11, move _12, move _13, move _14, move _17) -> bb7; // scope 3 at $DIR/funky_arms.rs:26:9: 26:87\n+          StorageLive(_10);                // scope 3 at $DIR/funky_arms.rs:+13:17: +13:26\n+          _10 = ((_7 as Some).0: usize);   // scope 3 at $DIR/funky_arms.rs:+13:17: +13:26\n+          StorageLive(_11);                // scope 3 at $DIR/funky_arms.rs:+15:43: +15:46\n+          _11 = &mut (*_1);                // scope 3 at $DIR/funky_arms.rs:+15:43: +15:46\n+          StorageLive(_12);                // scope 3 at $DIR/funky_arms.rs:+15:48: +15:51\n+          _12 = _2;                        // scope 3 at $DIR/funky_arms.rs:+15:48: +15:51\n+          StorageLive(_13);                // scope 3 at $DIR/funky_arms.rs:+15:53: +15:57\n+          _13 = _6;                        // scope 3 at $DIR/funky_arms.rs:+15:53: +15:57\n+          StorageLive(_14);                // scope 3 at $DIR/funky_arms.rs:+15:59: +15:79\n+          StorageLive(_15);                // scope 3 at $DIR/funky_arms.rs:+15:59: +15:75\n+          StorageLive(_16);                // scope 3 at $DIR/funky_arms.rs:+15:59: +15:68\n+          _16 = _10;                       // scope 3 at $DIR/funky_arms.rs:+15:59: +15:68\n+          _15 = move _16 as u32 (Misc);    // scope 3 at $DIR/funky_arms.rs:+15:59: +15:75\n+          StorageDead(_16);                // scope 3 at $DIR/funky_arms.rs:+15:74: +15:75\n+          _14 = Add(move _15, const 1_u32); // scope 3 at $DIR/funky_arms.rs:+15:59: +15:79\n+          StorageDead(_15);                // scope 3 at $DIR/funky_arms.rs:+15:78: +15:79\n+          StorageLive(_17);                // scope 3 at $DIR/funky_arms.rs:+15:81: +15:86\n+          _17 = _3;                        // scope 3 at $DIR/funky_arms.rs:+15:81: +15:86\n+          _0 = float_to_exponential_common_exact::<T>(move _11, move _12, move _13, move _14, move _17) -> bb7; // scope 3 at $DIR/funky_arms.rs:+15:9: +15:87\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:26:9: 26:42\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut Formatter<'s>, &'t0 T, Sign, u32, bool) -> Result<(), std::fmt::Error> {float_to_exponential_common_exact::<T>}, val: Value(<ZST>) }\n       }\n   \n       bb7: {\n-          StorageDead(_17);                // scope 3 at $DIR/funky_arms.rs:26:86: 26:87\n-          StorageDead(_14);                // scope 3 at $DIR/funky_arms.rs:26:86: 26:87\n-          StorageDead(_13);                // scope 3 at $DIR/funky_arms.rs:26:86: 26:87\n-          StorageDead(_12);                // scope 3 at $DIR/funky_arms.rs:26:86: 26:87\n-          StorageDead(_11);                // scope 3 at $DIR/funky_arms.rs:26:86: 26:87\n-          StorageDead(_10);                // scope 2 at $DIR/funky_arms.rs:27:5: 27:6\n-          goto -> bb10;                    // scope 2 at $DIR/funky_arms.rs:24:5: 29:6\n+          StorageDead(_17);                // scope 3 at $DIR/funky_arms.rs:+15:86: +15:87\n+          StorageDead(_14);                // scope 3 at $DIR/funky_arms.rs:+15:86: +15:87\n+          StorageDead(_13);                // scope 3 at $DIR/funky_arms.rs:+15:86: +15:87\n+          StorageDead(_12);                // scope 3 at $DIR/funky_arms.rs:+15:86: +15:87\n+          StorageDead(_11);                // scope 3 at $DIR/funky_arms.rs:+15:86: +15:87\n+          StorageDead(_10);                // scope 2 at $DIR/funky_arms.rs:+16:5: +16:6\n+          goto -> bb10;                    // scope 2 at $DIR/funky_arms.rs:+13:5: +18:6\n       }\n   \n       bb8: {\n-          StorageLive(_18);                // scope 2 at $DIR/funky_arms.rs:28:46: 28:49\n-          _18 = &mut (*_1);                // scope 2 at $DIR/funky_arms.rs:28:46: 28:49\n-          StorageLive(_19);                // scope 2 at $DIR/funky_arms.rs:28:51: 28:54\n-          _19 = _2;                        // scope 2 at $DIR/funky_arms.rs:28:51: 28:54\n-          StorageLive(_20);                // scope 2 at $DIR/funky_arms.rs:28:56: 28:60\n-          _20 = _6;                        // scope 2 at $DIR/funky_arms.rs:28:56: 28:60\n-          StorageLive(_21);                // scope 2 at $DIR/funky_arms.rs:28:62: 28:67\n-          _21 = _3;                        // scope 2 at $DIR/funky_arms.rs:28:62: 28:67\n-          _0 = float_to_exponential_common_shortest::<T>(move _18, move _19, move _20, move _21) -> bb9; // scope 2 at $DIR/funky_arms.rs:28:9: 28:68\n+          StorageLive(_18);                // scope 2 at $DIR/funky_arms.rs:+17:46: +17:49\n+          _18 = &mut (*_1);                // scope 2 at $DIR/funky_arms.rs:+17:46: +17:49\n+          StorageLive(_19);                // scope 2 at $DIR/funky_arms.rs:+17:51: +17:54\n+          _19 = _2;                        // scope 2 at $DIR/funky_arms.rs:+17:51: +17:54\n+          StorageLive(_20);                // scope 2 at $DIR/funky_arms.rs:+17:56: +17:60\n+          _20 = _6;                        // scope 2 at $DIR/funky_arms.rs:+17:56: +17:60\n+          StorageLive(_21);                // scope 2 at $DIR/funky_arms.rs:+17:62: +17:67\n+          _21 = _3;                        // scope 2 at $DIR/funky_arms.rs:+17:62: +17:67\n+          _0 = float_to_exponential_common_shortest::<T>(move _18, move _19, move _20, move _21) -> bb9; // scope 2 at $DIR/funky_arms.rs:+17:9: +17:68\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:28:9: 28:45\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut Formatter<'s>, &'t0 T, Sign, bool) -> Result<(), std::fmt::Error> {float_to_exponential_common_shortest::<T>}, val: Value(<ZST>) }\n       }\n   \n       bb9: {\n-          StorageDead(_21);                // scope 2 at $DIR/funky_arms.rs:28:67: 28:68\n-          StorageDead(_20);                // scope 2 at $DIR/funky_arms.rs:28:67: 28:68\n-          StorageDead(_19);                // scope 2 at $DIR/funky_arms.rs:28:67: 28:68\n-          StorageDead(_18);                // scope 2 at $DIR/funky_arms.rs:28:67: 28:68\n-          goto -> bb10;                    // scope 2 at $DIR/funky_arms.rs:24:5: 29:6\n+          StorageDead(_21);                // scope 2 at $DIR/funky_arms.rs:+17:67: +17:68\n+          StorageDead(_20);                // scope 2 at $DIR/funky_arms.rs:+17:67: +17:68\n+          StorageDead(_19);                // scope 2 at $DIR/funky_arms.rs:+17:67: +17:68\n+          StorageDead(_18);                // scope 2 at $DIR/funky_arms.rs:+17:67: +17:68\n+          goto -> bb10;                    // scope 2 at $DIR/funky_arms.rs:+13:5: +18:6\n       }\n   \n       bb10: {\n-          StorageDead(_6);                 // scope 1 at $DIR/funky_arms.rs:30:1: 30:2\n-          StorageDead(_4);                 // scope 0 at $DIR/funky_arms.rs:30:1: 30:2\n-          StorageDead(_7);                 // scope 0 at $DIR/funky_arms.rs:30:1: 30:2\n-          return;                          // scope 0 at $DIR/funky_arms.rs:30:2: 30:2\n+          StorageDead(_6);                 // scope 1 at $DIR/funky_arms.rs:+19:1: +19:2\n+          StorageDead(_4);                 // scope 0 at $DIR/funky_arms.rs:+19:1: +19:2\n+          StorageDead(_7);                 // scope 0 at $DIR/funky_arms.rs:+19:1: +19:2\n+          return;                          // scope 0 at $DIR/funky_arms.rs:+19:2: +19:2\n       }\n   }\n   "}, {"sha": "09765c7b9974b3a6b73e154a866be2e9cb08a8c7", "filename": "src/test/mir-opt/generator_drop_cleanup.main-{closure#0}.generator_drop.0.mir", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -15,70 +15,70 @@\n } */\n \n fn main::{closure#0}(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15: 10:17]) -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n-    let mut _2: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n-    let _3: std::string::String;         // in scope 0 at $DIR/generator-drop-cleanup.rs:11:13: 11:15\n-    let _4: ();                          // in scope 0 at $DIR/generator-drop-cleanup.rs:12:9: 12:14\n-    let mut _5: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:12:9: 12:14\n-    let mut _6: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:10:18: 10:18\n-    let mut _7: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n-    let mut _8: u32;                     // in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n+    let mut _0: ();                      // return place in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n+    let mut _2: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n+    let _3: std::string::String;         // in scope 0 at $DIR/generator-drop-cleanup.rs:+1:13: +1:15\n+    let _4: ();                          // in scope 0 at $DIR/generator-drop-cleanup.rs:+2:9: +2:14\n+    let mut _5: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:+2:9: +2:14\n+    let mut _6: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:+0:18: +0:18\n+    let mut _7: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n+    let mut _8: u32;                     // in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n     scope 1 {\n-        debug _s => (((*_1) as variant#3).0: std::string::String); // in scope 1 at $DIR/generator-drop-cleanup.rs:11:13: 11:15\n+        debug _s => (((*_1) as variant#3).0: std::string::String); // in scope 1 at $DIR/generator-drop-cleanup.rs:+1:13: +1:15\n     }\n \n     bb0: {\n-        _8 = discriminant((*_1));        // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n-        switchInt(move _8) -> [0_u32: bb7, 3_u32: bb10, otherwise: bb11]; // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n+        _8 = discriminant((*_1));        // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n+        switchInt(move _8) -> [0_u32: bb7, 3_u32: bb10, otherwise: bb11]; // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n     }\n \n     bb1: {\n-        StorageDead(_5);                 // scope 1 at $DIR/generator-drop-cleanup.rs:12:13: 12:14\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-drop-cleanup.rs:12:14: 12:15\n-        drop((((*_1) as variant#3).0: std::string::String)) -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        StorageDead(_5);                 // scope 1 at $DIR/generator-drop-cleanup.rs:+2:13: +2:14\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-drop-cleanup.rs:+2:14: +2:15\n+        drop((((*_1) as variant#3).0: std::string::String)) -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n     }\n \n     bb2: {\n-        nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n-        goto -> bb8;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n+        goto -> bb8;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n     }\n \n     bb3: {\n-        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n+        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n     }\n \n     bb4 (cleanup): {\n-        resume;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n+        resume;                          // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n     }\n \n     bb5 (cleanup): {\n-        nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n-        goto -> bb4;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n+        goto -> bb4;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n     }\n \n     bb6: {\n-        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n+        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n     }\n \n     bb7: {\n-        goto -> bb9;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n+        goto -> bb9;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n     }\n \n     bb8: {\n-        goto -> bb3;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        goto -> bb3;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n     }\n \n     bb9: {\n-        goto -> bb6;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n+        goto -> bb6;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n     }\n \n     bb10: {\n-        StorageLive(_4);                 // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n-        StorageLive(_5);                 // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n-        goto -> bb1;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n+        StorageLive(_4);                 // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n+        StorageLive(_5);                 // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n+        goto -> bb1;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n     }\n \n     bb11: {\n-        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 10:17\n+        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n     }\n }"}, {"sha": "cb6ed33212ec44a85ef02b41a1885a48c41f0f69", "filename": "src/test/mir-opt/generator_storage_dead_unwind.main-{closure#0}.StateTransform.before.mir", "status": "modified", "additions": 57, "deletions": 57, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -3,112 +3,112 @@\n fn main::{closure#0}(_1: [generator@$DIR/generator-storage-dead-unwind.rs:22:16: 22:18], _2: ()) -> ()\n yields ()\n  {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/generator-storage-dead-unwind.rs:22:19: 22:19\n-    let _3: Foo;                         // in scope 0 at $DIR/generator-storage-dead-unwind.rs:23:13: 23:14\n-    let _5: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n-    let mut _6: ();                      // in scope 0 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n-    let _7: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n-    let mut _8: Foo;                     // in scope 0 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n-    let _9: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n-    let mut _10: Bar;                    // in scope 0 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n+    let mut _0: ();                      // return place in scope 0 at $DIR/generator-storage-dead-unwind.rs:+0:19: +0:19\n+    let _3: Foo;                         // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+1:13: +1:14\n+    let _5: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n+    let mut _6: ();                      // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n+    let _7: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+4:9: +4:16\n+    let mut _8: Foo;                     // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+4:14: +4:15\n+    let _9: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+5:9: +5:16\n+    let mut _10: Bar;                    // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+5:14: +5:15\n     scope 1 {\n-        debug a => _3;                   // in scope 1 at $DIR/generator-storage-dead-unwind.rs:23:13: 23:14\n-        let _4: Bar;                     // in scope 1 at $DIR/generator-storage-dead-unwind.rs:24:13: 24:14\n+        debug a => _3;                   // in scope 1 at $DIR/generator-storage-dead-unwind.rs:+1:13: +1:14\n+        let _4: Bar;                     // in scope 1 at $DIR/generator-storage-dead-unwind.rs:+2:13: +2:14\n         scope 2 {\n-            debug b => _4;               // in scope 2 at $DIR/generator-storage-dead-unwind.rs:24:13: 24:14\n+            debug b => _4;               // in scope 2 at $DIR/generator-storage-dead-unwind.rs:+2:13: +2:14\n         }\n     }\n \n     bb0: {\n-        StorageLive(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:23:13: 23:14\n-        Deinit(_3);                      // scope 0 at $DIR/generator-storage-dead-unwind.rs:23:17: 23:23\n-        (_3.0: i32) = const 5_i32;       // scope 0 at $DIR/generator-storage-dead-unwind.rs:23:17: 23:23\n-        StorageLive(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:24:13: 24:14\n-        Deinit(_4);                      // scope 1 at $DIR/generator-storage-dead-unwind.rs:24:17: 24:23\n-        (_4.0: i32) = const 6_i32;       // scope 1 at $DIR/generator-storage-dead-unwind.rs:24:17: 24:23\n-        StorageLive(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n-        StorageLive(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n-        Deinit(_6);                      // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n-        _5 = yield(move _6) -> [resume: bb1, drop: bb5]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n+        StorageLive(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:+1:13: +1:14\n+        Deinit(_3);                      // scope 0 at $DIR/generator-storage-dead-unwind.rs:+1:17: +1:23\n+        (_3.0: i32) = const 5_i32;       // scope 0 at $DIR/generator-storage-dead-unwind.rs:+1:17: +1:23\n+        StorageLive(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:+2:13: +2:14\n+        Deinit(_4);                      // scope 1 at $DIR/generator-storage-dead-unwind.rs:+2:17: +2:23\n+        (_4.0: i32) = const 6_i32;       // scope 1 at $DIR/generator-storage-dead-unwind.rs:+2:17: +2:23\n+        StorageLive(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n+        StorageLive(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n+        Deinit(_6);                      // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n+        _5 = yield(move _6) -> [resume: bb1, drop: bb5]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n     }\n \n     bb1: {\n-        StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:13: 25:14\n-        StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:14: 25:15\n-        StorageLive(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n-        StorageLive(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n-        _8 = move _3;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n-        _7 = take::<Foo>(move _8) -> [return: bb2, unwind: bb9]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n+        StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:13: +3:14\n+        StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:14: +3:15\n+        StorageLive(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:9: +4:16\n+        StorageLive(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:14: +4:15\n+        _8 = move _3;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:14: +4:15\n+        _7 = take::<Foo>(move _8) -> [return: bb2, unwind: bb9]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:9: +4:16\n                                          // mir::Constant\n                                          // + span: $DIR/generator-storage-dead-unwind.rs:26:9: 26:13\n                                          // + literal: Const { ty: fn(Foo) {take::<Foo>}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n-        StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:16: 26:17\n-        StorageLive(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n-        StorageLive(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n-        _10 = move _4;                   // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n-        _9 = take::<Bar>(move _10) -> [return: bb3, unwind: bb8]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n+        StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:15: +4:16\n+        StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:16: +4:17\n+        StorageLive(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:9: +5:16\n+        StorageLive(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:14: +5:15\n+        _10 = move _4;                   // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:14: +5:15\n+        _9 = take::<Bar>(move _10) -> [return: bb3, unwind: bb8]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:9: +5:16\n                                          // mir::Constant\n                                          // + span: $DIR/generator-storage-dead-unwind.rs:27:9: 27:13\n                                          // + literal: Const { ty: fn(Bar) {take::<Bar>}, val: Value(<ZST>) }\n     }\n \n     bb3: {\n-        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n-        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n-        _0 = const ();                   // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:19: 28:6\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> [return: bb4, unwind: bb11]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:15: +5:16\n+        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:16: +5:17\n+        _0 = const ();                   // scope 0 at $DIR/generator-storage-dead-unwind.rs:+0:19: +6:6\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        drop(_1) -> [return: bb4, unwind: bb11]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n     }\n \n     bb4: {\n-        return;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:18: 22:18\n+        return;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:+0:18: +0:18\n     }\n \n     bb5: {\n-        StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:13: 25:14\n-        StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:14: 25:15\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_3) -> [return: bb6, unwind: bb12]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:13: +3:14\n+        StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:14: +3:15\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        drop(_3) -> [return: bb6, unwind: bb12]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n     }\n \n     bb6: {\n-        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> [return: bb7, unwind: bb11]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        drop(_1) -> [return: bb7, unwind: bb11]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n     }\n \n     bb7: {\n-        generator_drop;                  // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:16: 22:18\n+        generator_drop;                  // scope 0 at $DIR/generator-storage-dead-unwind.rs:+0:16: +0:18\n     }\n \n     bb8 (cleanup): {\n-        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n-        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n+        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:15: +5:16\n+        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:16: +5:17\n         goto -> bb10;                    // scope 2 at no-location\n     }\n \n     bb9 (cleanup): {\n-        StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n-        StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:16: 26:17\n+        StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:15: +4:16\n+        StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:16: +4:17\n         goto -> bb10;                    // scope 2 at no-location\n     }\n \n     bb10 (cleanup): {\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> bb11;                // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        drop(_1) -> bb11;                // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n     }\n \n     bb11 (cleanup): {\n-        resume;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:16: 22:18\n+        resume;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:+0:16: +0:18\n     }\n \n     bb12 (cleanup): {\n-        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> bb11;                // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        drop(_1) -> bb11;                // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n     }\n }"}, {"sha": "62e7d7b2da7e831749ee3bc7994d41b7de8d1b72", "filename": "src/test/mir-opt/generator_tiny.main-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -15,70 +15,70 @@\n } */\n \n fn main::{closure#0}(_1: Pin<&mut [generator@$DIR/generator-tiny.rs:19:16: 19:24]>, _2: u8) -> GeneratorState<(), ()> {\n-    debug _x => _10;                     // in scope 0 at $DIR/generator-tiny.rs:19:17: 19:19\n-    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at $DIR/generator-tiny.rs:19:16: 19:24\n-    let _3: HasDrop;                     // in scope 0 at $DIR/generator-tiny.rs:20:13: 20:15\n-    let mut _4: !;                       // in scope 0 at $DIR/generator-tiny.rs:21:9: 24:10\n-    let mut _5: ();                      // in scope 0 at $DIR/generator-tiny.rs:19:16: 19:24\n-    let _6: u8;                          // in scope 0 at $DIR/generator-tiny.rs:22:13: 22:18\n-    let mut _7: ();                      // in scope 0 at $DIR/generator-tiny.rs:22:13: 22:18\n-    let _8: ();                          // in scope 0 at $DIR/generator-tiny.rs:23:13: 23:21\n-    let mut _9: ();                      // in scope 0 at $DIR/generator-tiny.rs:19:25: 19:25\n-    let _10: u8;                         // in scope 0 at $DIR/generator-tiny.rs:19:17: 19:19\n-    let mut _11: u32;                    // in scope 0 at $DIR/generator-tiny.rs:19:16: 19:24\n+    debug _x => _10;                     // in scope 0 at $DIR/generator-tiny.rs:+0:17: +0:19\n+    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n+    let _3: HasDrop;                     // in scope 0 at $DIR/generator-tiny.rs:+1:13: +1:15\n+    let mut _4: !;                       // in scope 0 at $DIR/generator-tiny.rs:+2:9: +5:10\n+    let mut _5: ();                      // in scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n+    let _6: u8;                          // in scope 0 at $DIR/generator-tiny.rs:+3:13: +3:18\n+    let mut _7: ();                      // in scope 0 at $DIR/generator-tiny.rs:+3:13: +3:18\n+    let _8: ();                          // in scope 0 at $DIR/generator-tiny.rs:+4:13: +4:21\n+    let mut _9: ();                      // in scope 0 at $DIR/generator-tiny.rs:+0:25: +0:25\n+    let _10: u8;                         // in scope 0 at $DIR/generator-tiny.rs:+0:17: +0:19\n+    let mut _11: u32;                    // in scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n     scope 1 {\n-        debug _d => (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24])) as variant#3).0: HasDrop); // in scope 1 at $DIR/generator-tiny.rs:20:13: 20:15\n+        debug _d => (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24])) as variant#3).0: HasDrop); // in scope 1 at $DIR/generator-tiny.rs:+1:13: +1:15\n     }\n \n     bb0: {\n-        _11 = discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24]))); // scope 0 at $DIR/generator-tiny.rs:19:16: 19:24\n-        switchInt(move _11) -> [0_u32: bb1, 3_u32: bb5, otherwise: bb6]; // scope 0 at $DIR/generator-tiny.rs:19:16: 19:24\n+        _11 = discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24]))); // scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n+        switchInt(move _11) -> [0_u32: bb1, 3_u32: bb5, otherwise: bb6]; // scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n     }\n \n     bb1: {\n-        _10 = move _2;                   // scope 0 at $DIR/generator-tiny.rs:19:16: 19:24\n-        nop;                             // scope 0 at $DIR/generator-tiny.rs:20:13: 20:15\n-        Deinit((((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24])) as variant#3).0: HasDrop)); // scope 0 at $DIR/generator-tiny.rs:20:18: 20:25\n-        StorageLive(_4);                 // scope 1 at $DIR/generator-tiny.rs:21:9: 24:10\n-        goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:21:9: 24:10\n+        _10 = move _2;                   // scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n+        nop;                             // scope 0 at $DIR/generator-tiny.rs:+1:13: +1:15\n+        Deinit((((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24])) as variant#3).0: HasDrop)); // scope 0 at $DIR/generator-tiny.rs:+1:18: +1:25\n+        StorageLive(_4);                 // scope 1 at $DIR/generator-tiny.rs:+2:9: +5:10\n+        goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:+2:9: +5:10\n     }\n \n     bb2: {\n-        StorageLive(_6);                 // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n-        StorageLive(_7);                 // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n-        Deinit(_7);                      // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n-        Deinit(_0);                      // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n-        ((_0 as Yielded).0: ()) = move _7; // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n-        discriminant(_0) = 0;            // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n-        discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24]))) = 3; // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n-        return;                          // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n+        StorageLive(_6);                 // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n+        StorageLive(_7);                 // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n+        Deinit(_7);                      // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n+        Deinit(_0);                      // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n+        ((_0 as Yielded).0: ()) = move _7; // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n+        discriminant(_0) = 0;            // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n+        discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24]))) = 3; // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n+        return;                          // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n     }\n \n     bb3: {\n-        StorageDead(_7);                 // scope 1 at $DIR/generator-tiny.rs:22:17: 22:18\n-        StorageDead(_6);                 // scope 1 at $DIR/generator-tiny.rs:22:18: 22:19\n-        StorageLive(_8);                 // scope 1 at $DIR/generator-tiny.rs:23:13: 23:21\n-        _8 = callee() -> bb4;            // scope 1 at $DIR/generator-tiny.rs:23:13: 23:21\n+        StorageDead(_7);                 // scope 1 at $DIR/generator-tiny.rs:+3:17: +3:18\n+        StorageDead(_6);                 // scope 1 at $DIR/generator-tiny.rs:+3:18: +3:19\n+        StorageLive(_8);                 // scope 1 at $DIR/generator-tiny.rs:+4:13: +4:21\n+        _8 = callee() -> bb4;            // scope 1 at $DIR/generator-tiny.rs:+4:13: +4:21\n                                          // mir::Constant\n                                          // + span: $DIR/generator-tiny.rs:23:13: 23:19\n                                          // + literal: Const { ty: fn() {callee}, val: Value(<ZST>) }\n     }\n \n     bb4: {\n-        StorageDead(_8);                 // scope 1 at $DIR/generator-tiny.rs:23:21: 23:22\n-        _5 = const ();                   // scope 1 at $DIR/generator-tiny.rs:21:14: 24:10\n-        goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:21:9: 24:10\n+        StorageDead(_8);                 // scope 1 at $DIR/generator-tiny.rs:+4:21: +4:22\n+        _5 = const ();                   // scope 1 at $DIR/generator-tiny.rs:+2:14: +5:10\n+        goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:+2:9: +5:10\n     }\n \n     bb5: {\n-        StorageLive(_4);                 // scope 0 at $DIR/generator-tiny.rs:19:16: 19:24\n-        StorageLive(_6);                 // scope 0 at $DIR/generator-tiny.rs:19:16: 19:24\n-        StorageLive(_7);                 // scope 0 at $DIR/generator-tiny.rs:19:16: 19:24\n-        _6 = move _2;                    // scope 0 at $DIR/generator-tiny.rs:19:16: 19:24\n-        goto -> bb3;                     // scope 0 at $DIR/generator-tiny.rs:19:16: 19:24\n+        StorageLive(_4);                 // scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n+        StorageLive(_6);                 // scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n+        StorageLive(_7);                 // scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n+        _6 = move _2;                    // scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n+        goto -> bb3;                     // scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n     }\n \n     bb6: {\n-        unreachable;                     // scope 0 at $DIR/generator-tiny.rs:19:16: 19:24\n+        unreachable;                     // scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n     }\n }"}, {"sha": "19b5ab44156f493626cd238fefdba71731fff844", "filename": "src/test/mir-opt/if_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,29 +2,29 @@\n + // MIR for `dont_opt_bool` after SimplifyComparisonIntegral\n   \n   fn dont_opt_bool(_1: bool) -> u32 {\n-      debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:16:18: 16:19\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:16:30: 16:33\n-      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:17:8: 17:9\n+      debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:+0:18: +0:19\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:+0:30: +0:33\n+      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:17:8: 17:9\n-          _2 = _1;                         // scope 0 at $DIR/if-condition-int.rs:17:8: 17:9\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:17:8: 17:9\n+          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n+          _2 = _1;                         // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n       }\n   \n       bb1: {\n-          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:17:12: 17:13\n-          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:17:5: 17:26\n+          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:+1:12: +1:13\n+          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:+1:5: +1:26\n       }\n   \n       bb2: {\n-          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:17:23: 17:24\n-          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:17:5: 17:26\n+          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:+1:23: +1:24\n+          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:+1:5: +1:26\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:17:25: 17:26\n-          return;                          // scope 0 at $DIR/if-condition-int.rs:18:2: 18:2\n+          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:+1:25: +1:26\n+          return;                          // scope 0 at $DIR/if-condition-int.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "256af7b94be2c6ca0e7b57e3867c1cdfe43412e7", "filename": "src/test/mir-opt/if_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,33 +2,33 @@\n + // MIR for `dont_opt_floats` after SimplifyComparisonIntegral\n   \n   fn dont_opt_floats(_1: f32) -> i32 {\n-      debug a => _1;                       // in scope 0 at $DIR/if-condition-int.rs:52:20: 52:21\n-      let mut _0: i32;                     // return place in scope 0 at $DIR/if-condition-int.rs:52:31: 52:34\n-      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:53:8: 53:18\n-      let mut _3: f32;                     // in scope 0 at $DIR/if-condition-int.rs:53:8: 53:9\n+      debug a => _1;                       // in scope 0 at $DIR/if-condition-int.rs:+0:20: +0:21\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/if-condition-int.rs:+0:31: +0:34\n+      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:+1:8: +1:18\n+      let mut _3: f32;                     // in scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:53:8: 53:18\n-          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:53:8: 53:9\n-          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:53:8: 53:9\n-          _2 = Eq(move _3, const -42f32);  // scope 0 at $DIR/if-condition-int.rs:53:8: 53:18\n-          StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:53:17: 53:18\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:53:8: 53:18\n+          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:18\n+          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n+          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n+          _2 = Eq(move _3, const -42f32);  // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:18\n+          StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:17: +1:18\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:18\n       }\n   \n       bb1: {\n-          _0 = const 0_i32;                // scope 0 at $DIR/if-condition-int.rs:53:21: 53:22\n-          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:53:5: 53:35\n+          _0 = const 0_i32;                // scope 0 at $DIR/if-condition-int.rs:+1:21: +1:22\n+          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:+1:5: +1:35\n       }\n   \n       bb2: {\n-          _0 = const 1_i32;                // scope 0 at $DIR/if-condition-int.rs:53:32: 53:33\n-          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:53:5: 53:35\n+          _0 = const 1_i32;                // scope 0 at $DIR/if-condition-int.rs:+1:32: +1:33\n+          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:+1:5: +1:35\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:53:34: 53:35\n-          return;                          // scope 0 at $DIR/if-condition-int.rs:54:2: 54:2\n+          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:+1:34: +1:35\n+          return;                          // scope 0 at $DIR/if-condition-int.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "3f612e03f58e2e3f97ca3f68c18b27b1d7ab3fa1", "filename": "src/test/mir-opt/if_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,57 +2,57 @@\n + // MIR for `dont_remove_comparison` after SimplifyComparisonIntegral\n   \n   fn dont_remove_comparison(_1: i8) -> i32 {\n-      debug a => _1;                       // in scope 0 at $DIR/if-condition-int.rs:43:27: 43:28\n-      let mut _0: i32;                     // return place in scope 0 at $DIR/if-condition-int.rs:43:37: 43:40\n-      let _2: bool;                        // in scope 0 at $DIR/if-condition-int.rs:44:9: 44:10\n-      let mut _3: i8;                      // in scope 0 at $DIR/if-condition-int.rs:44:13: 44:14\n-      let mut _4: i32;                     // in scope 0 at $DIR/if-condition-int.rs:46:23: 46:31\n-      let mut _5: bool;                    // in scope 0 at $DIR/if-condition-int.rs:46:23: 46:24\n-      let mut _6: i32;                     // in scope 0 at $DIR/if-condition-int.rs:47:23: 47:31\n-      let mut _7: bool;                    // in scope 0 at $DIR/if-condition-int.rs:47:23: 47:24\n+      debug a => _1;                       // in scope 0 at $DIR/if-condition-int.rs:+0:27: +0:28\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/if-condition-int.rs:+0:37: +0:40\n+      let _2: bool;                        // in scope 0 at $DIR/if-condition-int.rs:+1:9: +1:10\n+      let mut _3: i8;                      // in scope 0 at $DIR/if-condition-int.rs:+1:13: +1:14\n+      let mut _4: i32;                     // in scope 0 at $DIR/if-condition-int.rs:+3:23: +3:31\n+      let mut _5: bool;                    // in scope 0 at $DIR/if-condition-int.rs:+3:23: +3:24\n+      let mut _6: i32;                     // in scope 0 at $DIR/if-condition-int.rs:+4:23: +4:31\n+      let mut _7: bool;                    // in scope 0 at $DIR/if-condition-int.rs:+4:23: +4:24\n       scope 1 {\n-          debug b => _2;                   // in scope 1 at $DIR/if-condition-int.rs:44:9: 44:10\n+          debug b => _2;                   // in scope 1 at $DIR/if-condition-int.rs:+1:9: +1:10\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:44:9: 44:10\n-          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:44:13: 44:14\n-          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:44:13: 44:14\n--         _2 = Eq(move _3, const 17_i8);   // scope 0 at $DIR/if-condition-int.rs:44:13: 44:20\n--         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:44:19: 44:20\n--         switchInt(_2) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/if-condition-int.rs:45:5: 45:12\n-+         _2 = Eq(_3, const 17_i8);        // scope 0 at $DIR/if-condition-int.rs:44:13: 44:20\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:44:19: 44:20\n-+         switchInt(move _3) -> [17_i8: bb1, otherwise: bb2]; // scope 1 at $DIR/if-condition-int.rs:45:5: 45:12\n+          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:+1:9: +1:10\n+          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:13: +1:14\n+          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:+1:13: +1:14\n+-         _2 = Eq(move _3, const 17_i8);   // scope 0 at $DIR/if-condition-int.rs:+1:13: +1:20\n+-         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:19: +1:20\n+-         switchInt(_2) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/if-condition-int.rs:+2:5: +2:12\n++         _2 = Eq(_3, const 17_i8);        // scope 0 at $DIR/if-condition-int.rs:+1:13: +1:20\n++         nop;                             // scope 0 at $DIR/if-condition-int.rs:+1:19: +1:20\n++         switchInt(move _3) -> [17_i8: bb1, otherwise: bb2]; // scope 1 at $DIR/if-condition-int.rs:+2:5: +2:12\n       }\n   \n       bb1: {\n-+         StorageDead(_3);                 // scope 1 at $DIR/if-condition-int.rs:45:5: 45:12\n-          StorageLive(_6);                 // scope 1 at $DIR/if-condition-int.rs:47:23: 47:31\n-          StorageLive(_7);                 // scope 1 at $DIR/if-condition-int.rs:47:23: 47:24\n-          _7 = _2;                         // scope 1 at $DIR/if-condition-int.rs:47:23: 47:24\n-          _6 = move _7 as i32 (Misc);      // scope 1 at $DIR/if-condition-int.rs:47:23: 47:31\n-          StorageDead(_7);                 // scope 1 at $DIR/if-condition-int.rs:47:30: 47:31\n-          _0 = Add(const 100_i32, move _6); // scope 1 at $DIR/if-condition-int.rs:47:17: 47:31\n-          StorageDead(_6);                 // scope 1 at $DIR/if-condition-int.rs:47:30: 47:31\n-          goto -> bb3;                     // scope 1 at $DIR/if-condition-int.rs:47:30: 47:31\n++         StorageDead(_3);                 // scope 1 at $DIR/if-condition-int.rs:+2:5: +2:12\n+          StorageLive(_6);                 // scope 1 at $DIR/if-condition-int.rs:+4:23: +4:31\n+          StorageLive(_7);                 // scope 1 at $DIR/if-condition-int.rs:+4:23: +4:24\n+          _7 = _2;                         // scope 1 at $DIR/if-condition-int.rs:+4:23: +4:24\n+          _6 = move _7 as i32 (Misc);      // scope 1 at $DIR/if-condition-int.rs:+4:23: +4:31\n+          StorageDead(_7);                 // scope 1 at $DIR/if-condition-int.rs:+4:30: +4:31\n+          _0 = Add(const 100_i32, move _6); // scope 1 at $DIR/if-condition-int.rs:+4:17: +4:31\n+          StorageDead(_6);                 // scope 1 at $DIR/if-condition-int.rs:+4:30: +4:31\n+          goto -> bb3;                     // scope 1 at $DIR/if-condition-int.rs:+4:30: +4:31\n       }\n   \n       bb2: {\n-+         StorageDead(_3);                 // scope 1 at $DIR/if-condition-int.rs:45:5: 45:12\n-          StorageLive(_4);                 // scope 1 at $DIR/if-condition-int.rs:46:23: 46:31\n-          StorageLive(_5);                 // scope 1 at $DIR/if-condition-int.rs:46:23: 46:24\n-          _5 = _2;                         // scope 1 at $DIR/if-condition-int.rs:46:23: 46:24\n-          _4 = move _5 as i32 (Misc);      // scope 1 at $DIR/if-condition-int.rs:46:23: 46:31\n-          StorageDead(_5);                 // scope 1 at $DIR/if-condition-int.rs:46:30: 46:31\n-          _0 = Add(const 10_i32, move _4); // scope 1 at $DIR/if-condition-int.rs:46:18: 46:31\n-          StorageDead(_4);                 // scope 1 at $DIR/if-condition-int.rs:46:30: 46:31\n-          goto -> bb3;                     // scope 1 at $DIR/if-condition-int.rs:46:30: 46:31\n++         StorageDead(_3);                 // scope 1 at $DIR/if-condition-int.rs:+2:5: +2:12\n+          StorageLive(_4);                 // scope 1 at $DIR/if-condition-int.rs:+3:23: +3:31\n+          StorageLive(_5);                 // scope 1 at $DIR/if-condition-int.rs:+3:23: +3:24\n+          _5 = _2;                         // scope 1 at $DIR/if-condition-int.rs:+3:23: +3:24\n+          _4 = move _5 as i32 (Misc);      // scope 1 at $DIR/if-condition-int.rs:+3:23: +3:31\n+          StorageDead(_5);                 // scope 1 at $DIR/if-condition-int.rs:+3:30: +3:31\n+          _0 = Add(const 10_i32, move _4); // scope 1 at $DIR/if-condition-int.rs:+3:18: +3:31\n+          StorageDead(_4);                 // scope 1 at $DIR/if-condition-int.rs:+3:30: +3:31\n+          goto -> bb3;                     // scope 1 at $DIR/if-condition-int.rs:+3:30: +3:31\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:49:1: 49:2\n-          return;                          // scope 0 at $DIR/if-condition-int.rs:49:2: 49:2\n+          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:+6:1: +6:2\n+          return;                          // scope 0 at $DIR/if-condition-int.rs:+6:2: +6:2\n       }\n   }\n   "}, {"sha": "9b64c379fee77b415555a4e521814c89805f5f59", "filename": "src/test/mir-opt/if_condition_int.opt_char.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_char.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_char.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_char.SimplifyComparisonIntegral.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,38 +2,38 @@\n + // MIR for `opt_char` after SimplifyComparisonIntegral\n   \n   fn opt_char(_1: char) -> u32 {\n-      debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:20:13: 20:14\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:20:25: 20:28\n-      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n-      let mut _3: char;                    // in scope 0 at $DIR/if-condition-int.rs:21:8: 21:9\n+      debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:+0:13: +0:14\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:+0:25: +0:28\n+      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n+      let mut _3: char;                    // in scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n-          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:21:8: 21:9\n-          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:21:8: 21:9\n--         _2 = Eq(move _3, const 'x');     // scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n--         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:21:15: 21:16\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:21:15: 21:16\n-+         switchInt(move _3) -> ['x': bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n+          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n+          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n+          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n+-         _2 = Eq(move _3, const 'x');     // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n+-         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:15: +1:16\n+-         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n++         nop;                             // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n++         nop;                             // scope 0 at $DIR/if-condition-int.rs:+1:15: +1:16\n++         switchInt(move _3) -> ['x': bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n       }\n   \n       bb1: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n-          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:21:19: 21:20\n-          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n+          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:+1:19: +1:20\n+          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:+1:5: +1:33\n       }\n   \n       bb2: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n-          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:21:30: 21:31\n-          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n+          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:+1:30: +1:31\n+          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:+1:5: +1:33\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:21:32: 21:33\n-          return;                          // scope 0 at $DIR/if-condition-int.rs:22:2: 22:2\n+          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:+1:32: +1:33\n+          return;                          // scope 0 at $DIR/if-condition-int.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "8042d63bb34ddc14400232391b958a55b1a75ce8", "filename": "src/test/mir-opt/if_condition_int.opt_i8.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_i8.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_i8.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_i8.SimplifyComparisonIntegral.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,38 +2,38 @@\n + // MIR for `opt_i8` after SimplifyComparisonIntegral\n   \n   fn opt_i8(_1: i8) -> u32 {\n-      debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:24:11: 24:12\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:24:21: 24:24\n-      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n-      let mut _3: i8;                      // in scope 0 at $DIR/if-condition-int.rs:25:8: 25:9\n+      debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:+0:11: +0:12\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:+0:21: +0:24\n+      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n+      let mut _3: i8;                      // in scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n-          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:25:8: 25:9\n-          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:25:8: 25:9\n--         _2 = Eq(move _3, const 42_i8);   // scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n--         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:25:14: 25:15\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:25:14: 25:15\n-+         switchInt(move _3) -> [42_i8: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n+          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n+          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n+          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n+-         _2 = Eq(move _3, const 42_i8);   // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n+-         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:14: +1:15\n+-         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n++         nop;                             // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n++         nop;                             // scope 0 at $DIR/if-condition-int.rs:+1:14: +1:15\n++         switchInt(move _3) -> [42_i8: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n       }\n   \n       bb1: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n-          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:25:18: 25:19\n-          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:25:5: 25:32\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n+          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:+1:18: +1:19\n+          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:+1:5: +1:32\n       }\n   \n       bb2: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n-          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:25:29: 25:30\n-          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:25:5: 25:32\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n+          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:+1:29: +1:30\n+          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:+1:5: +1:32\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:25:31: 25:32\n-          return;                          // scope 0 at $DIR/if-condition-int.rs:26:2: 26:2\n+          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:+1:31: +1:32\n+          return;                          // scope 0 at $DIR/if-condition-int.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "a408de1ef3e97a6a0dfef7b1ae4c1e48c9dd5194", "filename": "src/test/mir-opt/if_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,64 +2,64 @@\n + // MIR for `opt_multiple_ifs` after SimplifyComparisonIntegral\n   \n   fn opt_multiple_ifs(_1: u32) -> u32 {\n-      debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:32:21: 32:22\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:32:32: 32:35\n-      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:33:8: 33:15\n-      let mut _3: u32;                     // in scope 0 at $DIR/if-condition-int.rs:33:8: 33:9\n-      let mut _4: bool;                    // in scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n-      let mut _5: u32;                     // in scope 0 at $DIR/if-condition-int.rs:35:15: 35:16\n+      debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:+0:21: +0:22\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:+0:32: +0:35\n+      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n+      let mut _3: u32;                     // in scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n+      let mut _4: bool;                    // in scope 0 at $DIR/if-condition-int.rs:+3:15: +3:22\n+      let mut _5: u32;                     // in scope 0 at $DIR/if-condition-int.rs:+3:15: +3:16\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:33:8: 33:15\n-          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:33:8: 33:9\n-          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:33:8: 33:9\n--         _2 = Eq(move _3, const 42_u32);  // scope 0 at $DIR/if-condition-int.rs:33:8: 33:15\n--         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:33:14: 33:15\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:33:8: 33:15\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:33:8: 33:15\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:33:14: 33:15\n-+         switchInt(move _3) -> [42_u32: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:33:8: 33:15\n+          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n+          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n+          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n+-         _2 = Eq(move _3, const 42_u32);  // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n+-         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:14: +1:15\n+-         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n++         nop;                             // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n++         nop;                             // scope 0 at $DIR/if-condition-int.rs:+1:14: +1:15\n++         switchInt(move _3) -> [42_u32: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n       }\n   \n       bb1: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:33:8: 33:15\n-          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:34:9: 34:10\n-          goto -> bb6;                     // scope 0 at $DIR/if-condition-int.rs:33:5: 39:6\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n+          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:+2:9: +2:10\n+          goto -> bb6;                     // scope 0 at $DIR/if-condition-int.rs:+1:5: +7:6\n       }\n   \n       bb2: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:33:8: 33:15\n-          StorageLive(_4);                 // scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n-          StorageLive(_5);                 // scope 0 at $DIR/if-condition-int.rs:35:15: 35:16\n-          _5 = _1;                         // scope 0 at $DIR/if-condition-int.rs:35:15: 35:16\n--         _4 = Ne(move _5, const 21_u32);  // scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n--         StorageDead(_5);                 // scope 0 at $DIR/if-condition-int.rs:35:21: 35:22\n--         switchInt(move _4) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:35:21: 35:22\n-+         switchInt(move _5) -> [21_u32: bb4, otherwise: bb3]; // scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n+          StorageLive(_4);                 // scope 0 at $DIR/if-condition-int.rs:+3:15: +3:22\n+          StorageLive(_5);                 // scope 0 at $DIR/if-condition-int.rs:+3:15: +3:16\n+          _5 = _1;                         // scope 0 at $DIR/if-condition-int.rs:+3:15: +3:16\n+-         _4 = Ne(move _5, const 21_u32);  // scope 0 at $DIR/if-condition-int.rs:+3:15: +3:22\n+-         StorageDead(_5);                 // scope 0 at $DIR/if-condition-int.rs:+3:21: +3:22\n+-         switchInt(move _4) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/if-condition-int.rs:+3:15: +3:22\n++         nop;                             // scope 0 at $DIR/if-condition-int.rs:+3:15: +3:22\n++         nop;                             // scope 0 at $DIR/if-condition-int.rs:+3:21: +3:22\n++         switchInt(move _5) -> [21_u32: bb4, otherwise: bb3]; // scope 0 at $DIR/if-condition-int.rs:+3:15: +3:22\n       }\n   \n       bb3: {\n-+         StorageDead(_5);                 // scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n-          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:36:9: 36:10\n-          goto -> bb5;                     // scope 0 at $DIR/if-condition-int.rs:35:12: 39:6\n++         StorageDead(_5);                 // scope 0 at $DIR/if-condition-int.rs:+3:15: +3:22\n+          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:+4:9: +4:10\n+          goto -> bb5;                     // scope 0 at $DIR/if-condition-int.rs:+3:12: +7:6\n       }\n   \n       bb4: {\n-+         StorageDead(_5);                 // scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n-          _0 = const 2_u32;                // scope 0 at $DIR/if-condition-int.rs:38:9: 38:10\n-          goto -> bb5;                     // scope 0 at $DIR/if-condition-int.rs:35:12: 39:6\n++         StorageDead(_5);                 // scope 0 at $DIR/if-condition-int.rs:+3:15: +3:22\n+          _0 = const 2_u32;                // scope 0 at $DIR/if-condition-int.rs:+6:9: +6:10\n+          goto -> bb5;                     // scope 0 at $DIR/if-condition-int.rs:+3:12: +7:6\n       }\n   \n       bb5: {\n-          StorageDead(_4);                 // scope 0 at $DIR/if-condition-int.rs:39:5: 39:6\n-          goto -> bb6;                     // scope 0 at $DIR/if-condition-int.rs:33:5: 39:6\n+          StorageDead(_4);                 // scope 0 at $DIR/if-condition-int.rs:+7:5: +7:6\n+          goto -> bb6;                     // scope 0 at $DIR/if-condition-int.rs:+1:5: +7:6\n       }\n   \n       bb6: {\n-          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:39:5: 39:6\n-          return;                          // scope 0 at $DIR/if-condition-int.rs:40:2: 40:2\n+          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:+7:5: +7:6\n+          return;                          // scope 0 at $DIR/if-condition-int.rs:+8:2: +8:2\n       }\n   }\n   "}, {"sha": "6802f89d9278bafd58b5cc81f26fb607fa67f0c2", "filename": "src/test/mir-opt/if_condition_int.opt_negative.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_negative.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_negative.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_negative.SimplifyComparisonIntegral.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,38 +2,38 @@\n + // MIR for `opt_negative` after SimplifyComparisonIntegral\n   \n   fn opt_negative(_1: i32) -> u32 {\n-      debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:28:17: 28:18\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:28:28: 28:31\n-      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n-      let mut _3: i32;                     // in scope 0 at $DIR/if-condition-int.rs:29:8: 29:9\n+      debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:+0:17: +0:18\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:+0:28: +0:31\n+      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n+      let mut _3: i32;                     // in scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n-          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:29:8: 29:9\n-          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:29:8: 29:9\n--         _2 = Eq(move _3, const -42_i32); // scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n--         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:29:15: 29:16\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:29:15: 29:16\n-+         switchInt(move _3) -> [-42_i32: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n+          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n+          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n+          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n+-         _2 = Eq(move _3, const -42_i32); // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n+-         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:15: +1:16\n+-         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n++         nop;                             // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n++         nop;                             // scope 0 at $DIR/if-condition-int.rs:+1:15: +1:16\n++         switchInt(move _3) -> [-42_i32: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n       }\n   \n       bb1: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n-          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:29:19: 29:20\n-          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n+          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:+1:19: +1:20\n+          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:+1:5: +1:33\n       }\n   \n       bb2: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n-          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:29:30: 29:31\n-          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:16\n+          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:+1:30: +1:31\n+          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:+1:5: +1:33\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:29:32: 29:33\n-          return;                          // scope 0 at $DIR/if-condition-int.rs:30:2: 30:2\n+          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:+1:32: +1:33\n+          return;                          // scope 0 at $DIR/if-condition-int.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "96387771d06f11b853a6080de031904ff13e65bb", "filename": "src/test/mir-opt/if_condition_int.opt_u32.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_u32.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_u32.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_u32.SimplifyComparisonIntegral.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,38 +2,38 @@\n + // MIR for `opt_u32` after SimplifyComparisonIntegral\n   \n   fn opt_u32(_1: u32) -> u32 {\n-      debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:11:12: 11:13\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:11:23: 11:26\n-      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n-      let mut _3: u32;                     // in scope 0 at $DIR/if-condition-int.rs:12:8: 12:9\n+      debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:+0:12: +0:13\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:+0:23: +0:26\n+      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n+      let mut _3: u32;                     // in scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n-          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:12:8: 12:9\n-          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:12:8: 12:9\n--         _2 = Eq(move _3, const 42_u32);  // scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n--         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:12:14: 12:15\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:12:14: 12:15\n-+         switchInt(move _3) -> [42_u32: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n+          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n+          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n+          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:9\n+-         _2 = Eq(move _3, const 42_u32);  // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n+-         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:14: +1:15\n+-         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n++         nop;                             // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n++         nop;                             // scope 0 at $DIR/if-condition-int.rs:+1:14: +1:15\n++         switchInt(move _3) -> [42_u32: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n       }\n   \n       bb1: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n-          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:12:18: 12:19\n-          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n+          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:+1:18: +1:19\n+          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:+1:5: +1:32\n       }\n   \n       bb2: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n-          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:12:29: 12:30\n-          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32\n++         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:+1:8: +1:15\n+          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:+1:29: +1:30\n+          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:+1:5: +1:32\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:12:31: 12:32\n-          return;                          // scope 0 at $DIR/if-condition-int.rs:13:2: 13:2\n+          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:+1:31: +1:32\n+          return;                          // scope 0 at $DIR/if-condition-int.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "d7deb9c66cfa0be2bec144087c77e9853aeb03f0", "filename": "src/test/mir-opt/inline/caller_with_trivial_bound.foo.Inline.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Fcaller_with_trivial_bound.foo.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Fcaller_with_trivial_bound.foo.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcaller_with_trivial_bound.foo.Inline.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,32 +2,32 @@\n + // MIR for `foo` after Inline\n   \n   fn foo() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/caller-with-trivial-bound.rs:17:1: 17:1\n-      let mut _1: <IntFactory as Factory<T>>::Item; // in scope 0 at $DIR/caller-with-trivial-bound.rs:20:9: 20:14\n+      let mut _0: ();                      // return place in scope 0 at $DIR/caller-with-trivial-bound.rs:+1:1: +1:1\n+      let mut _1: <IntFactory as Factory<T>>::Item; // in scope 0 at $DIR/caller-with-trivial-bound.rs:+4:9: +4:14\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/caller-with-trivial-bound.rs:20:9: 20:14\n+          debug x => _1;                   // in scope 1 at $DIR/caller-with-trivial-bound.rs:+4:9: +4:14\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/caller-with-trivial-bound.rs:20:9: 20:14\n-          _1 = bar::<T>() -> bb1;          // scope 0 at $DIR/caller-with-trivial-bound.rs:20:51: 20:61\n+          StorageLive(_1);                 // scope 0 at $DIR/caller-with-trivial-bound.rs:+4:9: +4:14\n+          _1 = bar::<T>() -> bb1;          // scope 0 at $DIR/caller-with-trivial-bound.rs:+4:51: +4:61\n                                            // mir::Constant\n                                            // + span: $DIR/caller-with-trivial-bound.rs:20:51: 20:59\n                                            // + literal: Const { ty: fn() -> <IntFactory as Factory<T>>::Item {bar::<T>}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          _0 = const ();                   // scope 0 at $DIR/caller-with-trivial-bound.rs:19:1: 21:2\n-          drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/caller-with-trivial-bound.rs:21:1: 21:2\n+          _0 = const ();                   // scope 0 at $DIR/caller-with-trivial-bound.rs:+3:1: +5:2\n+          drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/caller-with-trivial-bound.rs:+5:1: +5:2\n       }\n   \n       bb2: {\n-          StorageDead(_1);                 // scope 0 at $DIR/caller-with-trivial-bound.rs:21:1: 21:2\n-          return;                          // scope 0 at $DIR/caller-with-trivial-bound.rs:21:2: 21:2\n+          StorageDead(_1);                 // scope 0 at $DIR/caller-with-trivial-bound.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/caller-with-trivial-bound.rs:+5:2: +5:2\n       }\n   \n       bb3 (cleanup): {\n-          resume;                          // scope 0 at $DIR/caller-with-trivial-bound.rs:16:1: 21:2\n+          resume;                          // scope 0 at $DIR/caller-with-trivial-bound.rs:+0:1: +5:2\n       }\n   }\n   "}, {"sha": "40fdd1cdb19c962e7bb9ad532b84d80e5f90ac65", "filename": "src/test/mir-opt/inline/cycle.f.Inline.diff", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.f.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.f.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.f.Inline.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,42 +2,42 @@\n + // MIR for `f` after Inline\n   \n   fn f(_1: impl Fn()) -> () {\n-      debug g => _1;                       // in scope 0 at $DIR/cycle.rs:5:6: 5:7\n-      let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:5:20: 5:20\n-      let _2: ();                          // in scope 0 at $DIR/cycle.rs:6:5: 6:8\n-      let mut _3: &impl Fn();              // in scope 0 at $DIR/cycle.rs:6:5: 6:6\n-      let mut _4: ();                      // in scope 0 at $DIR/cycle.rs:6:5: 6:8\n+      debug g => _1;                       // in scope 0 at $DIR/cycle.rs:+0:6: +0:7\n+      let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:+0:20: +0:20\n+      let _2: ();                          // in scope 0 at $DIR/cycle.rs:+1:5: +1:8\n+      let mut _3: &impl Fn();              // in scope 0 at $DIR/cycle.rs:+1:5: +1:6\n+      let mut _4: ();                      // in scope 0 at $DIR/cycle.rs:+1:5: +1:8\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/cycle.rs:6:5: 6:8\n-          StorageLive(_3);                 // scope 0 at $DIR/cycle.rs:6:5: 6:6\n-          _3 = &_1;                        // scope 0 at $DIR/cycle.rs:6:5: 6:6\n-          StorageLive(_4);                 // scope 0 at $DIR/cycle.rs:6:5: 6:8\n-          Deinit(_4);                      // scope 0 at $DIR/cycle.rs:6:5: 6:8\n-          _2 = <impl Fn() as Fn<()>>::call(move _3, move _4) -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/cycle.rs:6:5: 6:8\n+          StorageLive(_2);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:8\n+          StorageLive(_3);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:6\n+          _3 = &_1;                        // scope 0 at $DIR/cycle.rs:+1:5: +1:6\n+          StorageLive(_4);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:8\n+          Deinit(_4);                      // scope 0 at $DIR/cycle.rs:+1:5: +1:8\n+          _2 = <impl Fn() as Fn<()>>::call(move _3, move _4) -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/cycle.rs:+1:5: +1:8\n                                            // mir::Constant\n                                            // + span: $DIR/cycle.rs:6:5: 6:6\n                                            // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl Fn(), ()) -> <impl Fn() as FnOnce<()>>::Output {<impl Fn() as Fn<()>>::call}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_4);                 // scope 0 at $DIR/cycle.rs:6:7: 6:8\n-          StorageDead(_3);                 // scope 0 at $DIR/cycle.rs:6:7: 6:8\n-          StorageDead(_2);                 // scope 0 at $DIR/cycle.rs:6:8: 6:9\n-          _0 = const ();                   // scope 0 at $DIR/cycle.rs:5:20: 7:2\n-          drop(_1) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/cycle.rs:7:1: 7:2\n+          StorageDead(_4);                 // scope 0 at $DIR/cycle.rs:+1:7: +1:8\n+          StorageDead(_3);                 // scope 0 at $DIR/cycle.rs:+1:7: +1:8\n+          StorageDead(_2);                 // scope 0 at $DIR/cycle.rs:+1:8: +1:9\n+          _0 = const ();                   // scope 0 at $DIR/cycle.rs:+0:20: +2:2\n+          drop(_1) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/cycle.rs:+2:1: +2:2\n       }\n   \n       bb2: {\n-          return;                          // scope 0 at $DIR/cycle.rs:7:2: 7:2\n+          return;                          // scope 0 at $DIR/cycle.rs:+2:2: +2:2\n       }\n   \n       bb3 (cleanup): {\n-          drop(_1) -> bb4;                 // scope 0 at $DIR/cycle.rs:7:1: 7:2\n+          drop(_1) -> bb4;                 // scope 0 at $DIR/cycle.rs:+2:1: +2:2\n       }\n   \n       bb4 (cleanup): {\n-          resume;                          // scope 0 at $DIR/cycle.rs:5:1: 7:2\n+          resume;                          // scope 0 at $DIR/cycle.rs:+0:1: +2:2\n       }\n   }\n   "}, {"sha": "59f34d379ec20ab0c4f9d6be262d5491b28a55f5", "filename": "src/test/mir-opt/inline/cycle.g.Inline.diff", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,56 +2,56 @@\n + // MIR for `g` after Inline\n   \n   fn g() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:11:8: 11:8\n-      let _1: ();                          // in scope 0 at $DIR/cycle.rs:12:5: 12:12\n-+     let mut _2: fn() {main};             // in scope 0 at $DIR/cycle.rs:12:5: 12:12\n+      let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:+0:8: +0:8\n+      let _1: ();                          // in scope 0 at $DIR/cycle.rs:+1:5: +1:12\n++     let mut _2: fn() {main};             // in scope 0 at $DIR/cycle.rs:+1:5: +1:12\n +     scope 1 (inlined f::<fn() {main}>) { // at $DIR/cycle.rs:12:5: 12:12\n-+         debug g => _2;                   // in scope 1 at $DIR/cycle.rs:5:6: 5:7\n-+         let _3: ();                      // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n-+         let mut _4: &fn() {main};        // in scope 1 at $DIR/cycle.rs:6:5: 6:6\n-+         let mut _5: ();                  // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         debug g => _2;                   // in scope 1 at $DIR/cycle.rs:+0:6: +0:7\n++         let _3: ();                      // in scope 1 at $DIR/cycle.rs:+0:5: +0:8\n++         let mut _4: &fn() {main};        // in scope 1 at $DIR/cycle.rs:+0:5: +0:6\n++         let mut _5: ();                  // in scope 1 at $DIR/cycle.rs:+0:5: +0:8\n +         scope 2 (inlined <fn() {main} as Fn<()>>::call - shim(fn() {main})) { // at $DIR/cycle.rs:6:5: 6:8\n +         }\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/cycle.rs:12:5: 12:12\n--         _1 = f::<fn() {main}>(main) -> bb1; // scope 0 at $DIR/cycle.rs:12:5: 12:12\n-+         StorageLive(_2);                 // scope 0 at $DIR/cycle.rs:12:5: 12:12\n-+         _2 = main;                       // scope 0 at $DIR/cycle.rs:12:5: 12:12\n+          StorageLive(_1);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:12\n+-         _1 = f::<fn() {main}>(main) -> bb1; // scope 0 at $DIR/cycle.rs:+1:5: +1:12\n++         StorageLive(_2);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:12\n++         _2 = main;                       // scope 0 at $DIR/cycle.rs:+1:5: +1:12\n                                            // mir::Constant\n -                                          // + span: $DIR/cycle.rs:12:5: 12:6\n -                                          // + literal: Const { ty: fn(fn() {main}) {f::<fn() {main}>}, val: Value(<ZST>) }\n -                                          // mir::Constant\n                                            // + span: $DIR/cycle.rs:12:7: 12:11\n                                            // + literal: Const { ty: fn() {main}, val: Value(<ZST>) }\n-+         StorageLive(_3);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n-+         StorageLive(_4);                 // scope 1 at $DIR/cycle.rs:6:5: 6:6\n-+         _4 = &_2;                        // scope 1 at $DIR/cycle.rs:6:5: 6:6\n-+         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         StorageLive(_3);                 // scope 1 at $DIR/cycle.rs:+0:5: +0:8\n++         StorageLive(_4);                 // scope 1 at $DIR/cycle.rs:+0:5: +0:6\n++         _4 = &_2;                        // scope 1 at $DIR/cycle.rs:+0:5: +0:6\n++         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:+0:5: +0:8\n +         _3 = move (*_4)() -> [return: bb4, unwind: bb2]; // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   \n       bb1: {\n-+         StorageDead(_2);                 // scope 0 at $DIR/cycle.rs:12:5: 12:12\n-          StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:12:12: 12:13\n-          _0 = const ();                   // scope 0 at $DIR/cycle.rs:11:8: 13:2\n-          return;                          // scope 0 at $DIR/cycle.rs:13:2: 13:2\n++         StorageDead(_2);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:12\n+          StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:+1:12: +1:13\n+          _0 = const ();                   // scope 0 at $DIR/cycle.rs:+0:8: +2:2\n+          return;                          // scope 0 at $DIR/cycle.rs:+2:2: +2:2\n +     }\n + \n +     bb2 (cleanup): {\n-+         drop(_2) -> bb3;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n++         drop(_2) -> bb3;                 // scope 1 at $DIR/cycle.rs:+0:1: +0:2\n +     }\n + \n +     bb3 (cleanup): {\n-+         resume;                          // scope 1 at $DIR/cycle.rs:5:1: 7:2\n++         resume;                          // scope 1 at $DIR/cycle.rs:+0:1: +0:2\n +     }\n + \n +     bb4: {\n-+         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n-+         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n-+         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:8: 6:9\n-+         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n++         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:+0:7: +0:8\n++         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:+0:7: +0:8\n++         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:+0:8: +0:9\n++         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:+0:1: +0:2\n       }\n   }\n   "}, {"sha": "6def7c3ee3e00250ec48631e1053d0bc83072a2b", "filename": "src/test/mir-opt/inline/cycle.main.Inline.diff", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,21 +2,21 @@\n + // MIR for `main` after Inline\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:16:11: 16:11\n-      let _1: ();                          // in scope 0 at $DIR/cycle.rs:17:5: 17:9\n-+     let mut _2: fn() {g};                // in scope 0 at $DIR/cycle.rs:17:5: 17:9\n+      let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:+0:11: +0:11\n+      let _1: ();                          // in scope 0 at $DIR/cycle.rs:+1:5: +1:9\n++     let mut _2: fn() {g};                // in scope 0 at $DIR/cycle.rs:+1:5: +1:9\n +     scope 1 (inlined f::<fn() {g}>) {    // at $DIR/cycle.rs:17:5: 17:9\n-+         debug g => _2;                   // in scope 1 at $DIR/cycle.rs:5:6: 5:7\n-+         let _3: ();                      // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n-+         let mut _4: &fn() {g};           // in scope 1 at $DIR/cycle.rs:6:5: 6:6\n-+         let mut _5: ();                  // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         debug g => _2;                   // in scope 1 at $DIR/cycle.rs:+0:6: +0:7\n++         let _3: ();                      // in scope 1 at $DIR/cycle.rs:+0:5: +0:8\n++         let mut _4: &fn() {g};           // in scope 1 at $DIR/cycle.rs:+0:5: +0:6\n++         let mut _5: ();                  // in scope 1 at $DIR/cycle.rs:+0:5: +0:8\n +         scope 2 (inlined <fn() {g} as Fn<()>>::call - shim(fn() {g})) { // at $DIR/cycle.rs:6:5: 6:8\n +             scope 3 (inlined g) {        // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n-+                 let mut _6: fn() {main}; // in scope 3 at $DIR/cycle.rs:12:5: 12:12\n++                 let mut _6: fn() {main}; // in scope 3 at $DIR/cycle.rs:+0:5: +0:12\n +                 scope 4 (inlined f::<fn() {main}>) { // at $DIR/cycle.rs:12:5: 12:12\n-+                     debug g => _6;       // in scope 4 at $DIR/cycle.rs:5:6: 5:7\n-+                     let _7: ();          // in scope 4 at $DIR/cycle.rs:6:5: 6:8\n-+                     let mut _8: &fn() {main}; // in scope 4 at $DIR/cycle.rs:6:5: 6:6\n++                     debug g => _6;       // in scope 4 at $DIR/cycle.rs:+0:6: +0:7\n++                     let _7: ();          // in scope 4 at $DIR/cycle.rs:+0:5: +0:8\n++                     let mut _8: &fn() {main}; // in scope 4 at $DIR/cycle.rs:+0:5: +0:6\n +                     scope 5 (inlined <fn() {main} as Fn<()>>::call - shim(fn() {main})) { // at $DIR/cycle.rs:6:5: 6:8\n +                     }\n +                 }\n@@ -25,50 +25,50 @@\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/cycle.rs:17:5: 17:9\n--         _1 = f::<fn() {g}>(g) -> bb1;    // scope 0 at $DIR/cycle.rs:17:5: 17:9\n-+         StorageLive(_2);                 // scope 0 at $DIR/cycle.rs:17:5: 17:9\n-+         _2 = g;                          // scope 0 at $DIR/cycle.rs:17:5: 17:9\n+          StorageLive(_1);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:9\n+-         _1 = f::<fn() {g}>(g) -> bb1;    // scope 0 at $DIR/cycle.rs:+1:5: +1:9\n++         StorageLive(_2);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:9\n++         _2 = g;                          // scope 0 at $DIR/cycle.rs:+1:5: +1:9\n                                            // mir::Constant\n -                                          // + span: $DIR/cycle.rs:17:5: 17:6\n -                                          // + literal: Const { ty: fn(fn() {g}) {f::<fn() {g}>}, val: Value(<ZST>) }\n -                                          // mir::Constant\n                                            // + span: $DIR/cycle.rs:17:7: 17:8\n                                            // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }\n-+         StorageLive(_3);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n-+         StorageLive(_4);                 // scope 1 at $DIR/cycle.rs:6:5: 6:6\n-+         _4 = &_2;                        // scope 1 at $DIR/cycle.rs:6:5: 6:6\n-+         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n-+         StorageLive(_6);                 // scope 3 at $DIR/cycle.rs:12:5: 12:12\n-+         StorageLive(_7);                 // scope 4 at $DIR/cycle.rs:6:5: 6:8\n-+         StorageLive(_8);                 // scope 4 at $DIR/cycle.rs:6:5: 6:6\n-+         _8 = &_6;                        // scope 4 at $DIR/cycle.rs:6:5: 6:6\n++         StorageLive(_3);                 // scope 1 at $DIR/cycle.rs:+0:5: +0:8\n++         StorageLive(_4);                 // scope 1 at $DIR/cycle.rs:+0:5: +0:6\n++         _4 = &_2;                        // scope 1 at $DIR/cycle.rs:+0:5: +0:6\n++         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:+0:5: +0:8\n++         StorageLive(_6);                 // scope 3 at $DIR/cycle.rs:+0:5: +0:12\n++         StorageLive(_7);                 // scope 4 at $DIR/cycle.rs:+0:5: +0:8\n++         StorageLive(_8);                 // scope 4 at $DIR/cycle.rs:+0:5: +0:6\n++         _8 = &_6;                        // scope 4 at $DIR/cycle.rs:+0:5: +0:6\n +         _7 = move (*_8)() -> [return: bb4, unwind: bb2]; // scope 5 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   \n       bb1: {\n-+         StorageDead(_2);                 // scope 0 at $DIR/cycle.rs:17:5: 17:9\n-          StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:17:9: 17:10\n-          _0 = const ();                   // scope 0 at $DIR/cycle.rs:16:11: 18:2\n-          return;                          // scope 0 at $DIR/cycle.rs:18:2: 18:2\n++         StorageDead(_2);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:9\n+          StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:+1:9: +1:10\n+          _0 = const ();                   // scope 0 at $DIR/cycle.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/cycle.rs:+2:2: +2:2\n +     }\n + \n +     bb2 (cleanup): {\n-+         drop(_2) -> bb3;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n++         drop(_2) -> bb3;                 // scope 1 at $DIR/cycle.rs:+0:1: +0:2\n +     }\n + \n +     bb3 (cleanup): {\n-+         resume;                          // scope 1 at $DIR/cycle.rs:5:1: 7:2\n++         resume;                          // scope 1 at $DIR/cycle.rs:+0:1: +0:2\n +     }\n + \n +     bb4: {\n-+         StorageDead(_8);                 // scope 4 at $DIR/cycle.rs:6:7: 6:8\n-+         StorageDead(_7);                 // scope 4 at $DIR/cycle.rs:6:8: 6:9\n-+         StorageDead(_6);                 // scope 3 at $DIR/cycle.rs:12:5: 12:12\n-+         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n-+         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n-+         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:8: 6:9\n-+         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n++         StorageDead(_8);                 // scope 4 at $DIR/cycle.rs:+0:7: +0:8\n++         StorageDead(_7);                 // scope 4 at $DIR/cycle.rs:+0:8: +0:9\n++         StorageDead(_6);                 // scope 3 at $DIR/cycle.rs:+0:5: +0:12\n++         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:+0:7: +0:8\n++         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:+0:7: +0:8\n++         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:+0:8: +0:9\n++         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:+0:1: +0:2\n       }\n   }\n   "}, {"sha": "49c91e956e72d31bbff12f51b17f78ae7eeeb74c", "filename": "src/test/mir-opt/inline/dyn_trait.get_query.Inline.diff", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,48 +2,48 @@\n + // MIR for `get_query` after Inline\n   \n   fn get_query(_1: &T) -> () {\n-      debug t => _1;                       // in scope 0 at $DIR/dyn-trait.rs:32:31: 32:32\n-      let mut _0: ();                      // return place in scope 0 at $DIR/dyn-trait.rs:32:38: 32:38\n-      let _2: &<Q as Query>::C;            // in scope 0 at $DIR/dyn-trait.rs:33:9: 33:10\n-      let mut _3: &T;                      // in scope 0 at $DIR/dyn-trait.rs:33:22: 33:23\n-      let mut _4: &<Q as Query>::C;        // in scope 0 at $DIR/dyn-trait.rs:34:23: 34:24\n+      debug t => _1;                       // in scope 0 at $DIR/dyn-trait.rs:+0:31: +0:32\n+      let mut _0: ();                      // return place in scope 0 at $DIR/dyn-trait.rs:+0:38: +0:38\n+      let _2: &<Q as Query>::C;            // in scope 0 at $DIR/dyn-trait.rs:+1:9: +1:10\n+      let mut _3: &T;                      // in scope 0 at $DIR/dyn-trait.rs:+1:22: +1:23\n+      let mut _4: &<Q as Query>::C;        // in scope 0 at $DIR/dyn-trait.rs:+2:23: +2:24\n       scope 1 {\n-          debug c => _2;                   // in scope 1 at $DIR/dyn-trait.rs:33:9: 33:10\n+          debug c => _2;                   // in scope 1 at $DIR/dyn-trait.rs:+1:9: +1:10\n +         scope 2 (inlined try_execute_query::<<Q as Query>::C>) { // at $DIR/dyn-trait.rs:34:5: 34:25\n-+             debug c => _4;               // in scope 2 at $DIR/dyn-trait.rs:26:36: 26:37\n-+             let mut _5: &dyn Cache<V = <Q as Query>::V>; // in scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n-+             let mut _6: &<Q as Query>::C; // in scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n++             debug c => _4;               // in scope 2 at $DIR/dyn-trait.rs:+0:36: +0:37\n++             let mut _5: &dyn Cache<V = <Q as Query>::V>; // in scope 2 at $DIR/dyn-trait.rs:+0:14: +0:15\n++             let mut _6: &<Q as Query>::C; // in scope 2 at $DIR/dyn-trait.rs:+0:14: +0:15\n +             scope 3 (inlined mk_cycle::<<Q as Query>::V>) { // at $DIR/dyn-trait.rs:27:5: 27:16\n-+                 debug c => _5;           // in scope 3 at $DIR/dyn-trait.rs:20:27: 20:28\n-+                 let mut _7: &dyn Cache<V = <Q as Query>::V>; // in scope 3 at $DIR/dyn-trait.rs:21:5: 21:22\n++                 debug c => _5;           // in scope 3 at $DIR/dyn-trait.rs:+0:27: +0:28\n++                 let mut _7: &dyn Cache<V = <Q as Query>::V>; // in scope 3 at $DIR/dyn-trait.rs:+0:5: +0:22\n +             }\n +         }\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/dyn-trait.rs:33:9: 33:10\n-          StorageLive(_3);                 // scope 0 at $DIR/dyn-trait.rs:33:22: 33:23\n-          _3 = &(*_1);                     // scope 0 at $DIR/dyn-trait.rs:33:22: 33:23\n-          _2 = <Q as Query>::cache::<T>(move _3) -> bb1; // scope 0 at $DIR/dyn-trait.rs:33:13: 33:24\n+          StorageLive(_2);                 // scope 0 at $DIR/dyn-trait.rs:+1:9: +1:10\n+          StorageLive(_3);                 // scope 0 at $DIR/dyn-trait.rs:+1:22: +1:23\n+          _3 = &(*_1);                     // scope 0 at $DIR/dyn-trait.rs:+1:22: +1:23\n+          _2 = <Q as Query>::cache::<T>(move _3) -> bb1; // scope 0 at $DIR/dyn-trait.rs:+1:13: +1:24\n                                            // mir::Constant\n                                            // + span: $DIR/dyn-trait.rs:33:13: 33:21\n                                            // + user_ty: UserType(0)\n                                            // + literal: Const { ty: for<'r> fn(&'r T) -> &'r <Q as Query>::C {<Q as Query>::cache::<T>}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 0 at $DIR/dyn-trait.rs:33:23: 33:24\n-          StorageLive(_4);                 // scope 1 at $DIR/dyn-trait.rs:34:23: 34:24\n-          _4 = &(*_2);                     // scope 1 at $DIR/dyn-trait.rs:34:23: 34:24\n--         _0 = try_execute_query::<<Q as Query>::C>(move _4) -> bb2; // scope 1 at $DIR/dyn-trait.rs:34:5: 34:25\n-+         StorageLive(_5);                 // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n-+         StorageLive(_6);                 // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n-+         _6 = _4;                         // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n-+         _5 = move _6 as &dyn Cache<V = <Q as Query>::V> (Pointer(Unsize)); // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n-+         StorageDead(_6);                 // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n-+         StorageLive(_7);                 // scope 3 at $DIR/dyn-trait.rs:21:5: 21:22\n-+         _7 = _5;                         // scope 3 at $DIR/dyn-trait.rs:21:5: 21:22\n-+         _0 = <dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache(move _7) -> bb2; // scope 3 at $DIR/dyn-trait.rs:21:5: 21:22\n+          StorageDead(_3);                 // scope 0 at $DIR/dyn-trait.rs:+1:23: +1:24\n+          StorageLive(_4);                 // scope 1 at $DIR/dyn-trait.rs:+2:23: +2:24\n+          _4 = &(*_2);                     // scope 1 at $DIR/dyn-trait.rs:+2:23: +2:24\n+-         _0 = try_execute_query::<<Q as Query>::C>(move _4) -> bb2; // scope 1 at $DIR/dyn-trait.rs:+2:5: +2:25\n++         StorageLive(_5);                 // scope 2 at $DIR/dyn-trait.rs:+0:14: +0:15\n++         StorageLive(_6);                 // scope 2 at $DIR/dyn-trait.rs:+0:14: +0:15\n++         _6 = _4;                         // scope 2 at $DIR/dyn-trait.rs:+0:14: +0:15\n++         _5 = move _6 as &dyn Cache<V = <Q as Query>::V> (Pointer(Unsize)); // scope 2 at $DIR/dyn-trait.rs:+0:14: +0:15\n++         StorageDead(_6);                 // scope 2 at $DIR/dyn-trait.rs:+0:14: +0:15\n++         StorageLive(_7);                 // scope 3 at $DIR/dyn-trait.rs:+0:5: +0:22\n++         _7 = _5;                         // scope 3 at $DIR/dyn-trait.rs:+0:5: +0:22\n++         _0 = <dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache(move _7) -> bb2; // scope 3 at $DIR/dyn-trait.rs:+0:5: +0:22\n                                            // mir::Constant\n -                                          // + span: $DIR/dyn-trait.rs:34:5: 34:22\n -                                          // + literal: Const { ty: for<'r> fn(&'r <Q as Query>::C) {try_execute_query::<<Q as Query>::C>}, val: Value(<ZST>) }\n@@ -52,15 +52,15 @@\n       }\n   \n       bb2: {\n-+         StorageDead(_7);                 // scope 3 at $DIR/dyn-trait.rs:21:21: 21:22\n-+         StorageDead(_5);                 // scope 2 at $DIR/dyn-trait.rs:27:15: 27:16\n-          StorageDead(_4);                 // scope 1 at $DIR/dyn-trait.rs:34:24: 34:25\n-          StorageDead(_2);                 // scope 0 at $DIR/dyn-trait.rs:35:1: 35:2\n-          return;                          // scope 0 at $DIR/dyn-trait.rs:35:2: 35:2\n++         StorageDead(_7);                 // scope 3 at $DIR/dyn-trait.rs:+0:21: +0:22\n++         StorageDead(_5);                 // scope 2 at $DIR/dyn-trait.rs:+0:15: +0:16\n+          StorageDead(_4);                 // scope 1 at $DIR/dyn-trait.rs:+2:24: +2:25\n+          StorageDead(_2);                 // scope 0 at $DIR/dyn-trait.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/dyn-trait.rs:+3:2: +3:2\n +     }\n + \n +     bb3 (cleanup): {\n-+         resume;                          // scope 0 at $DIR/dyn-trait.rs:32:1: 35:2\n++         resume;                          // scope 0 at $DIR/dyn-trait.rs:+0:1: +3:2\n       }\n   }\n   "}, {"sha": "994930ef4cf6f07e492b69e2d59529d669054a9d", "filename": "src/test/mir-opt/inline/dyn_trait.mk_cycle.Inline.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,22 +2,22 @@\n + // MIR for `mk_cycle` after Inline\n   \n   fn mk_cycle(_1: &dyn Cache<V = V>) -> () {\n-      debug c => _1;                       // in scope 0 at $DIR/dyn-trait.rs:20:27: 20:28\n-      let mut _0: ();                      // return place in scope 0 at $DIR/dyn-trait.rs:20:49: 20:49\n-      let mut _2: &dyn Cache<V = V>;       // in scope 0 at $DIR/dyn-trait.rs:21:5: 21:22\n+      debug c => _1;                       // in scope 0 at $DIR/dyn-trait.rs:+0:27: +0:28\n+      let mut _0: ();                      // return place in scope 0 at $DIR/dyn-trait.rs:+0:49: +0:49\n+      let mut _2: &dyn Cache<V = V>;       // in scope 0 at $DIR/dyn-trait.rs:+1:5: +1:22\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/dyn-trait.rs:21:5: 21:22\n-          _2 = &(*_1);                     // scope 0 at $DIR/dyn-trait.rs:21:5: 21:22\n-          _0 = <dyn Cache<V = V> as Cache>::store_nocache(move _2) -> bb1; // scope 0 at $DIR/dyn-trait.rs:21:5: 21:22\n+          StorageLive(_2);                 // scope 0 at $DIR/dyn-trait.rs:+1:5: +1:22\n+          _2 = &(*_1);                     // scope 0 at $DIR/dyn-trait.rs:+1:5: +1:22\n+          _0 = <dyn Cache<V = V> as Cache>::store_nocache(move _2) -> bb1; // scope 0 at $DIR/dyn-trait.rs:+1:5: +1:22\n                                            // mir::Constant\n                                            // + span: $DIR/dyn-trait.rs:21:7: 21:20\n                                            // + literal: Const { ty: for<'r> fn(&'r dyn Cache<V = V>) {<dyn Cache<V = V> as Cache>::store_nocache}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_2);                 // scope 0 at $DIR/dyn-trait.rs:21:21: 21:22\n-          return;                          // scope 0 at $DIR/dyn-trait.rs:22:2: 22:2\n+          StorageDead(_2);                 // scope 0 at $DIR/dyn-trait.rs:+1:21: +1:22\n+          return;                          // scope 0 at $DIR/dyn-trait.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "805354d2804a63eaa8d3ffc83a894014f46a2c2b", "filename": "src/test/mir-opt/inline/dyn_trait.try_execute_query.Inline.diff", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,25 +2,25 @@\n + // MIR for `try_execute_query` after Inline\n   \n   fn try_execute_query(_1: &C) -> () {\n-      debug c => _1;                       // in scope 0 at $DIR/dyn-trait.rs:26:36: 26:37\n-      let mut _0: ();                      // return place in scope 0 at $DIR/dyn-trait.rs:26:43: 26:43\n-      let mut _2: &dyn Cache<V = <C as Cache>::V>; // in scope 0 at $DIR/dyn-trait.rs:27:14: 27:15\n-      let mut _3: &C;                      // in scope 0 at $DIR/dyn-trait.rs:27:14: 27:15\n+      debug c => _1;                       // in scope 0 at $DIR/dyn-trait.rs:+0:36: +0:37\n+      let mut _0: ();                      // return place in scope 0 at $DIR/dyn-trait.rs:+0:43: +0:43\n+      let mut _2: &dyn Cache<V = <C as Cache>::V>; // in scope 0 at $DIR/dyn-trait.rs:+1:14: +1:15\n+      let mut _3: &C;                      // in scope 0 at $DIR/dyn-trait.rs:+1:14: +1:15\n +     scope 1 (inlined mk_cycle::<<C as Cache>::V>) { // at $DIR/dyn-trait.rs:27:5: 27:16\n-+         debug c => _2;                   // in scope 1 at $DIR/dyn-trait.rs:20:27: 20:28\n-+         let mut _4: &dyn Cache<V = <C as Cache>::V>; // in scope 1 at $DIR/dyn-trait.rs:21:5: 21:22\n++         debug c => _2;                   // in scope 1 at $DIR/dyn-trait.rs:+0:27: +0:28\n++         let mut _4: &dyn Cache<V = <C as Cache>::V>; // in scope 1 at $DIR/dyn-trait.rs:+0:5: +0:22\n +     }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/dyn-trait.rs:27:14: 27:15\n-          StorageLive(_3);                 // scope 0 at $DIR/dyn-trait.rs:27:14: 27:15\n-          _3 = &(*_1);                     // scope 0 at $DIR/dyn-trait.rs:27:14: 27:15\n-          _2 = move _3 as &dyn Cache<V = <C as Cache>::V> (Pointer(Unsize)); // scope 0 at $DIR/dyn-trait.rs:27:14: 27:15\n-          StorageDead(_3);                 // scope 0 at $DIR/dyn-trait.rs:27:14: 27:15\n--         _0 = mk_cycle::<<C as Cache>::V>(move _2) -> bb1; // scope 0 at $DIR/dyn-trait.rs:27:5: 27:16\n-+         StorageLive(_4);                 // scope 1 at $DIR/dyn-trait.rs:21:5: 21:22\n-+         _4 = _2;                         // scope 1 at $DIR/dyn-trait.rs:21:5: 21:22\n-+         _0 = <dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache(move _4) -> bb1; // scope 1 at $DIR/dyn-trait.rs:21:5: 21:22\n+          StorageLive(_2);                 // scope 0 at $DIR/dyn-trait.rs:+1:14: +1:15\n+          StorageLive(_3);                 // scope 0 at $DIR/dyn-trait.rs:+1:14: +1:15\n+          _3 = &(*_1);                     // scope 0 at $DIR/dyn-trait.rs:+1:14: +1:15\n+          _2 = move _3 as &dyn Cache<V = <C as Cache>::V> (Pointer(Unsize)); // scope 0 at $DIR/dyn-trait.rs:+1:14: +1:15\n+          StorageDead(_3);                 // scope 0 at $DIR/dyn-trait.rs:+1:14: +1:15\n+-         _0 = mk_cycle::<<C as Cache>::V>(move _2) -> bb1; // scope 0 at $DIR/dyn-trait.rs:+1:5: +1:16\n++         StorageLive(_4);                 // scope 1 at $DIR/dyn-trait.rs:+0:5: +0:22\n++         _4 = _2;                         // scope 1 at $DIR/dyn-trait.rs:+0:5: +0:22\n++         _0 = <dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache(move _4) -> bb1; // scope 1 at $DIR/dyn-trait.rs:+0:5: +0:22\n                                            // mir::Constant\n -                                          // + span: $DIR/dyn-trait.rs:27:5: 27:13\n -                                          // + literal: Const { ty: for<'r> fn(&'r (dyn Cache<V = <C as Cache>::V> + 'r)) {mk_cycle::<<C as Cache>::V>}, val: Value(<ZST>) }\n@@ -29,13 +29,13 @@\n       }\n   \n       bb1: {\n-+         StorageDead(_4);                 // scope 1 at $DIR/dyn-trait.rs:21:21: 21:22\n-          StorageDead(_2);                 // scope 0 at $DIR/dyn-trait.rs:27:15: 27:16\n-          return;                          // scope 0 at $DIR/dyn-trait.rs:28:2: 28:2\n++         StorageDead(_4);                 // scope 1 at $DIR/dyn-trait.rs:+0:21: +0:22\n+          StorageDead(_2);                 // scope 0 at $DIR/dyn-trait.rs:+1:15: +1:16\n+          return;                          // scope 0 at $DIR/dyn-trait.rs:+2:2: +2:2\n +     }\n + \n +     bb2 (cleanup): {\n-+         resume;                          // scope 0 at $DIR/dyn-trait.rs:26:1: 28:2\n++         resume;                          // scope 0 at $DIR/dyn-trait.rs:+0:1: +2:2\n       }\n   }\n   "}, {"sha": "77b5df943a35366c27686a537e159601a45ff852", "filename": "src/test/mir-opt/inline/inline_any_operand.bar.Inline.after.mir", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,48 +1,48 @@\n // MIR for `bar` after Inline\n \n fn bar() -> bool {\n-    let mut _0: bool;                    // return place in scope 0 at $DIR/inline-any-operand.rs:10:13: 10:17\n-    let _1: fn(i32, i32) -> bool {foo};  // in scope 0 at $DIR/inline-any-operand.rs:11:9: 11:10\n-    let mut _2: fn(i32, i32) -> bool {foo}; // in scope 0 at $DIR/inline-any-operand.rs:12:5: 12:6\n-    let mut _3: i32;                     // in scope 0 at $DIR/inline-any-operand.rs:12:5: 12:13\n-    let mut _4: i32;                     // in scope 0 at $DIR/inline-any-operand.rs:12:5: 12:13\n+    let mut _0: bool;                    // return place in scope 0 at $DIR/inline-any-operand.rs:+0:13: +0:17\n+    let _1: fn(i32, i32) -> bool {foo};  // in scope 0 at $DIR/inline-any-operand.rs:+1:9: +1:10\n+    let mut _2: fn(i32, i32) -> bool {foo}; // in scope 0 at $DIR/inline-any-operand.rs:+2:5: +2:6\n+    let mut _3: i32;                     // in scope 0 at $DIR/inline-any-operand.rs:+2:5: +2:13\n+    let mut _4: i32;                     // in scope 0 at $DIR/inline-any-operand.rs:+2:5: +2:13\n     scope 1 {\n-        debug f => _1;                   // in scope 1 at $DIR/inline-any-operand.rs:11:9: 11:10\n+        debug f => _1;                   // in scope 1 at $DIR/inline-any-operand.rs:+1:9: +1:10\n         scope 2 (inlined foo) {          // at $DIR/inline-any-operand.rs:12:5: 12:13\n-            debug x => _3;               // in scope 2 at $DIR/inline-any-operand.rs:16:8: 16:9\n-            debug y => _4;               // in scope 2 at $DIR/inline-any-operand.rs:16:16: 16:17\n-            let mut _5: i32;             // in scope 2 at $DIR/inline-any-operand.rs:17:5: 17:6\n-            let mut _6: i32;             // in scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n+            debug x => _3;               // in scope 2 at $DIR/inline-any-operand.rs:+6:8: +6:9\n+            debug y => _4;               // in scope 2 at $DIR/inline-any-operand.rs:+6:16: +6:17\n+            let mut _5: i32;             // in scope 2 at $DIR/inline-any-operand.rs:+7:5: +7:6\n+            let mut _6: i32;             // in scope 2 at $DIR/inline-any-operand.rs:+7:10: +7:11\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/inline-any-operand.rs:11:9: 11:10\n-        _1 = foo;                        // scope 0 at $DIR/inline-any-operand.rs:11:13: 11:16\n+        StorageLive(_1);                 // scope 0 at $DIR/inline-any-operand.rs:+1:9: +1:10\n+        _1 = foo;                        // scope 0 at $DIR/inline-any-operand.rs:+1:13: +1:16\n                                          // mir::Constant\n                                          // + span: $DIR/inline-any-operand.rs:11:13: 11:16\n                                          // + literal: Const { ty: fn(i32, i32) -> bool {foo}, val: Value(<ZST>) }\n-        StorageLive(_2);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:6\n-        _2 = _1;                         // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:6\n-        StorageLive(_3);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n-        _3 = const 1_i32;                // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n-        StorageLive(_4);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n-        _4 = const -1_i32;               // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n-        StorageLive(_5);                 // scope 2 at $DIR/inline-any-operand.rs:17:5: 17:6\n-        _5 = _3;                         // scope 2 at $DIR/inline-any-operand.rs:17:5: 17:6\n-        StorageLive(_6);                 // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n-        _6 = _4;                         // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n-        _0 = Eq(move _5, move _6);       // scope 2 at $DIR/inline-any-operand.rs:17:5: 17:11\n-        StorageDead(_6);                 // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n-        StorageDead(_5);                 // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n-        StorageDead(_4);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n-        StorageDead(_3);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n-        StorageDead(_2);                 // scope 1 at $DIR/inline-any-operand.rs:12:12: 12:13\n-        StorageDead(_1);                 // scope 0 at $DIR/inline-any-operand.rs:13:1: 13:2\n-        return;                          // scope 0 at $DIR/inline-any-operand.rs:13:2: 13:2\n+        StorageLive(_2);                 // scope 1 at $DIR/inline-any-operand.rs:+2:5: +2:6\n+        _2 = _1;                         // scope 1 at $DIR/inline-any-operand.rs:+2:5: +2:6\n+        StorageLive(_3);                 // scope 1 at $DIR/inline-any-operand.rs:+2:5: +2:13\n+        _3 = const 1_i32;                // scope 1 at $DIR/inline-any-operand.rs:+2:5: +2:13\n+        StorageLive(_4);                 // scope 1 at $DIR/inline-any-operand.rs:+2:5: +2:13\n+        _4 = const -1_i32;               // scope 1 at $DIR/inline-any-operand.rs:+2:5: +2:13\n+        StorageLive(_5);                 // scope 2 at $DIR/inline-any-operand.rs:+7:5: +7:6\n+        _5 = _3;                         // scope 2 at $DIR/inline-any-operand.rs:+7:5: +7:6\n+        StorageLive(_6);                 // scope 2 at $DIR/inline-any-operand.rs:+7:10: +7:11\n+        _6 = _4;                         // scope 2 at $DIR/inline-any-operand.rs:+7:10: +7:11\n+        _0 = Eq(move _5, move _6);       // scope 2 at $DIR/inline-any-operand.rs:+7:5: +7:11\n+        StorageDead(_6);                 // scope 2 at $DIR/inline-any-operand.rs:+7:10: +7:11\n+        StorageDead(_5);                 // scope 2 at $DIR/inline-any-operand.rs:+7:10: +7:11\n+        StorageDead(_4);                 // scope 1 at $DIR/inline-any-operand.rs:+2:5: +2:13\n+        StorageDead(_3);                 // scope 1 at $DIR/inline-any-operand.rs:+2:5: +2:13\n+        StorageDead(_2);                 // scope 1 at $DIR/inline-any-operand.rs:+2:12: +2:13\n+        StorageDead(_1);                 // scope 0 at $DIR/inline-any-operand.rs:+3:1: +3:2\n+        return;                          // scope 0 at $DIR/inline-any-operand.rs:+3:2: +3:2\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/inline-any-operand.rs:10:1: 13:2\n+        resume;                          // scope 0 at $DIR/inline-any-operand.rs:+0:1: +3:2\n     }\n }"}, {"sha": "d746e1a093a9272d0b7f65bf622888060ff8d7b9", "filename": "src/test/mir-opt/inline/inline_closure.foo.Inline.after.mir", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,53 +1,53 @@\n // MIR for `foo` after Inline\n \n fn foo(_1: T, _2: i32) -> i32 {\n-    debug _t => _1;                      // in scope 0 at $DIR/inline-closure.rs:10:17: 10:19\n-    debug q => _2;                       // in scope 0 at $DIR/inline-closure.rs:10:24: 10:25\n-    let mut _0: i32;                     // return place in scope 0 at $DIR/inline-closure.rs:10:35: 10:38\n-    let _3: [closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline-closure.rs:11:9: 11:10\n-    let mut _4: &[closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline-closure.rs:12:5: 12:6\n-    let mut _5: (i32, i32);              // in scope 0 at $DIR/inline-closure.rs:12:5: 12:12\n-    let mut _6: i32;                     // in scope 0 at $DIR/inline-closure.rs:12:7: 12:8\n-    let mut _7: i32;                     // in scope 0 at $DIR/inline-closure.rs:12:10: 12:11\n-    let mut _8: i32;                     // in scope 0 at $DIR/inline-closure.rs:12:5: 12:12\n-    let mut _9: i32;                     // in scope 0 at $DIR/inline-closure.rs:12:5: 12:12\n+    debug _t => _1;                      // in scope 0 at $DIR/inline-closure.rs:+0:17: +0:19\n+    debug q => _2;                       // in scope 0 at $DIR/inline-closure.rs:+0:24: +0:25\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/inline-closure.rs:+0:35: +0:38\n+    let _3: [closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline-closure.rs:+1:9: +1:10\n+    let mut _4: &[closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline-closure.rs:+2:5: +2:6\n+    let mut _5: (i32, i32);              // in scope 0 at $DIR/inline-closure.rs:+2:5: +2:12\n+    let mut _6: i32;                     // in scope 0 at $DIR/inline-closure.rs:+2:7: +2:8\n+    let mut _7: i32;                     // in scope 0 at $DIR/inline-closure.rs:+2:10: +2:11\n+    let mut _8: i32;                     // in scope 0 at $DIR/inline-closure.rs:+2:5: +2:12\n+    let mut _9: i32;                     // in scope 0 at $DIR/inline-closure.rs:+2:5: +2:12\n     scope 1 {\n-        debug x => _3;                   // in scope 1 at $DIR/inline-closure.rs:11:9: 11:10\n+        debug x => _3;                   // in scope 1 at $DIR/inline-closure.rs:+1:9: +1:10\n         scope 2 (inlined foo::<T>::{closure#0}) { // at $DIR/inline-closure.rs:12:5: 12:12\n-            debug _t => _8;              // in scope 2 at $DIR/inline-closure.rs:11:14: 11:16\n-            debug _q => _9;              // in scope 2 at $DIR/inline-closure.rs:11:18: 11:20\n+            debug _t => _8;              // in scope 2 at $DIR/inline-closure.rs:+1:14: +1:16\n+            debug _q => _9;              // in scope 2 at $DIR/inline-closure.rs:+1:18: +1:20\n         }\n     }\n \n     bb0: {\n-        StorageLive(_3);                 // scope 0 at $DIR/inline-closure.rs:11:9: 11:10\n-        Deinit(_3);                      // scope 0 at $DIR/inline-closure.rs:11:13: 11:24\n-        StorageLive(_4);                 // scope 1 at $DIR/inline-closure.rs:12:5: 12:6\n-        _4 = &_3;                        // scope 1 at $DIR/inline-closure.rs:12:5: 12:6\n-        StorageLive(_5);                 // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n-        StorageLive(_6);                 // scope 1 at $DIR/inline-closure.rs:12:7: 12:8\n-        _6 = _2;                         // scope 1 at $DIR/inline-closure.rs:12:7: 12:8\n-        StorageLive(_7);                 // scope 1 at $DIR/inline-closure.rs:12:10: 12:11\n-        _7 = _2;                         // scope 1 at $DIR/inline-closure.rs:12:10: 12:11\n-        Deinit(_5);                      // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n-        (_5.0: i32) = move _6;           // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n-        (_5.1: i32) = move _7;           // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n-        StorageLive(_8);                 // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n-        _8 = move (_5.0: i32);           // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n-        StorageLive(_9);                 // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n-        _9 = move (_5.1: i32);           // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n-        _0 = _8;                         // scope 2 at $DIR/inline-closure.rs:11:22: 11:24\n-        StorageDead(_9);                 // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n-        StorageDead(_8);                 // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n-        StorageDead(_7);                 // scope 1 at $DIR/inline-closure.rs:12:11: 12:12\n-        StorageDead(_6);                 // scope 1 at $DIR/inline-closure.rs:12:11: 12:12\n-        StorageDead(_5);                 // scope 1 at $DIR/inline-closure.rs:12:11: 12:12\n-        StorageDead(_4);                 // scope 1 at $DIR/inline-closure.rs:12:11: 12:12\n-        StorageDead(_3);                 // scope 0 at $DIR/inline-closure.rs:13:1: 13:2\n-        return;                          // scope 0 at $DIR/inline-closure.rs:13:2: 13:2\n+        StorageLive(_3);                 // scope 0 at $DIR/inline-closure.rs:+1:9: +1:10\n+        Deinit(_3);                      // scope 0 at $DIR/inline-closure.rs:+1:13: +1:24\n+        StorageLive(_4);                 // scope 1 at $DIR/inline-closure.rs:+2:5: +2:6\n+        _4 = &_3;                        // scope 1 at $DIR/inline-closure.rs:+2:5: +2:6\n+        StorageLive(_5);                 // scope 1 at $DIR/inline-closure.rs:+2:5: +2:12\n+        StorageLive(_6);                 // scope 1 at $DIR/inline-closure.rs:+2:7: +2:8\n+        _6 = _2;                         // scope 1 at $DIR/inline-closure.rs:+2:7: +2:8\n+        StorageLive(_7);                 // scope 1 at $DIR/inline-closure.rs:+2:10: +2:11\n+        _7 = _2;                         // scope 1 at $DIR/inline-closure.rs:+2:10: +2:11\n+        Deinit(_5);                      // scope 1 at $DIR/inline-closure.rs:+2:5: +2:12\n+        (_5.0: i32) = move _6;           // scope 1 at $DIR/inline-closure.rs:+2:5: +2:12\n+        (_5.1: i32) = move _7;           // scope 1 at $DIR/inline-closure.rs:+2:5: +2:12\n+        StorageLive(_8);                 // scope 1 at $DIR/inline-closure.rs:+2:5: +2:12\n+        _8 = move (_5.0: i32);           // scope 1 at $DIR/inline-closure.rs:+2:5: +2:12\n+        StorageLive(_9);                 // scope 1 at $DIR/inline-closure.rs:+2:5: +2:12\n+        _9 = move (_5.1: i32);           // scope 1 at $DIR/inline-closure.rs:+2:5: +2:12\n+        _0 = _8;                         // scope 2 at $DIR/inline-closure.rs:+1:22: +1:24\n+        StorageDead(_9);                 // scope 1 at $DIR/inline-closure.rs:+2:5: +2:12\n+        StorageDead(_8);                 // scope 1 at $DIR/inline-closure.rs:+2:5: +2:12\n+        StorageDead(_7);                 // scope 1 at $DIR/inline-closure.rs:+2:11: +2:12\n+        StorageDead(_6);                 // scope 1 at $DIR/inline-closure.rs:+2:11: +2:12\n+        StorageDead(_5);                 // scope 1 at $DIR/inline-closure.rs:+2:11: +2:12\n+        StorageDead(_4);                 // scope 1 at $DIR/inline-closure.rs:+2:11: +2:12\n+        StorageDead(_3);                 // scope 0 at $DIR/inline-closure.rs:+3:1: +3:2\n+        return;                          // scope 0 at $DIR/inline-closure.rs:+3:2: +3:2\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/inline-closure.rs:10:1: 13:2\n+        resume;                          // scope 0 at $DIR/inline-closure.rs:+0:1: +3:2\n     }\n }"}, {"sha": "84b3fb92cd535cd001caf7aa76a999f3a6e06d3a", "filename": "src/test/mir-opt/inline/inline_closure_borrows_arg.foo.Inline.after.mir", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,60 +1,60 @@\n // MIR for `foo` after Inline\n \n fn foo(_1: T, _2: &i32) -> i32 {\n-    debug _t => _1;                      // in scope 0 at $DIR/inline-closure-borrows-arg.rs:11:17: 11:19\n-    debug q => _2;                       // in scope 0 at $DIR/inline-closure-borrows-arg.rs:11:24: 11:25\n-    let mut _0: i32;                     // return place in scope 0 at $DIR/inline-closure-borrows-arg.rs:11:36: 11:39\n-    let _3: [closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline-closure-borrows-arg.rs:12:9: 12:10\n-    let mut _4: &[closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:6\n-    let mut _5: (&i32, &i32);            // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-    let mut _6: &i32;                    // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:7: 16:8\n-    let mut _7: &i32;                    // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:10: 16:11\n-    let mut _8: &i32;                    // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-    let mut _9: &i32;                    // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+    debug _t => _1;                      // in scope 0 at $DIR/inline-closure-borrows-arg.rs:+0:17: +0:19\n+    debug q => _2;                       // in scope 0 at $DIR/inline-closure-borrows-arg.rs:+0:24: +0:25\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/inline-closure-borrows-arg.rs:+0:36: +0:39\n+    let _3: [closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline-closure-borrows-arg.rs:+1:9: +1:10\n+    let mut _4: &[closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:6\n+    let mut _5: (&i32, &i32);            // in scope 0 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:12\n+    let mut _6: &i32;                    // in scope 0 at $DIR/inline-closure-borrows-arg.rs:+5:7: +5:8\n+    let mut _7: &i32;                    // in scope 0 at $DIR/inline-closure-borrows-arg.rs:+5:10: +5:11\n+    let mut _8: &i32;                    // in scope 0 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:12\n+    let mut _9: &i32;                    // in scope 0 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:12\n     scope 1 {\n-        debug x => _3;                   // in scope 1 at $DIR/inline-closure-borrows-arg.rs:12:9: 12:10\n+        debug x => _3;                   // in scope 1 at $DIR/inline-closure-borrows-arg.rs:+1:9: +1:10\n         scope 2 (inlined foo::<T>::{closure#0}) { // at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-            debug r => _8;               // in scope 2 at $DIR/inline-closure-borrows-arg.rs:12:14: 12:15\n-            debug _s => _9;              // in scope 2 at $DIR/inline-closure-borrows-arg.rs:12:23: 12:25\n-            let _10: &i32;               // in scope 2 at $DIR/inline-closure-borrows-arg.rs:13:13: 13:21\n+            debug r => _8;               // in scope 2 at $DIR/inline-closure-borrows-arg.rs:+1:14: +1:15\n+            debug _s => _9;              // in scope 2 at $DIR/inline-closure-borrows-arg.rs:+1:23: +1:25\n+            let _10: &i32;               // in scope 2 at $DIR/inline-closure-borrows-arg.rs:+2:13: +2:21\n             scope 3 {\n-                debug variable => _10;   // in scope 3 at $DIR/inline-closure-borrows-arg.rs:13:13: 13:21\n+                debug variable => _10;   // in scope 3 at $DIR/inline-closure-borrows-arg.rs:+2:13: +2:21\n             }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_3);                 // scope 0 at $DIR/inline-closure-borrows-arg.rs:12:9: 12:10\n-        Deinit(_3);                      // scope 0 at $DIR/inline-closure-borrows-arg.rs:12:13: 15:6\n-        StorageLive(_4);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:6\n-        _4 = &_3;                        // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:6\n-        StorageLive(_5);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-        StorageLive(_6);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:7: 16:8\n-        _6 = &(*_2);                     // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:7: 16:8\n-        StorageLive(_7);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:10: 16:11\n-        _7 = &(*_2);                     // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:10: 16:11\n-        Deinit(_5);                      // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-        (_5.0: &i32) = move _6;          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-        (_5.1: &i32) = move _7;          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-        StorageLive(_8);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-        _8 = move (_5.0: &i32);          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-        StorageLive(_9);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-        _9 = move (_5.1: &i32);          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-        StorageLive(_10);                // scope 2 at $DIR/inline-closure-borrows-arg.rs:13:13: 13:21\n-        _10 = _8;                        // scope 2 at $DIR/inline-closure-borrows-arg.rs:13:24: 13:27\n-        _0 = (*_10);                     // scope 3 at $DIR/inline-closure-borrows-arg.rs:14:9: 14:18\n-        StorageDead(_10);                // scope 2 at $DIR/inline-closure-borrows-arg.rs:15:5: 15:6\n-        StorageDead(_9);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-        StorageDead(_8);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-        StorageDead(_7);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:11: 16:12\n-        StorageDead(_6);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:11: 16:12\n-        StorageDead(_5);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:11: 16:12\n-        StorageDead(_4);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:11: 16:12\n-        StorageDead(_3);                 // scope 0 at $DIR/inline-closure-borrows-arg.rs:17:1: 17:2\n-        return;                          // scope 0 at $DIR/inline-closure-borrows-arg.rs:17:2: 17:2\n+        StorageLive(_3);                 // scope 0 at $DIR/inline-closure-borrows-arg.rs:+1:9: +1:10\n+        Deinit(_3);                      // scope 0 at $DIR/inline-closure-borrows-arg.rs:+1:13: +4:6\n+        StorageLive(_4);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:6\n+        _4 = &_3;                        // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:6\n+        StorageLive(_5);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:12\n+        StorageLive(_6);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:7: +5:8\n+        _6 = &(*_2);                     // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:7: +5:8\n+        StorageLive(_7);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:10: +5:11\n+        _7 = &(*_2);                     // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:10: +5:11\n+        Deinit(_5);                      // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:12\n+        (_5.0: &i32) = move _6;          // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:12\n+        (_5.1: &i32) = move _7;          // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:12\n+        StorageLive(_8);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:12\n+        _8 = move (_5.0: &i32);          // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:12\n+        StorageLive(_9);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:12\n+        _9 = move (_5.1: &i32);          // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:12\n+        StorageLive(_10);                // scope 2 at $DIR/inline-closure-borrows-arg.rs:+2:13: +2:21\n+        _10 = _8;                        // scope 2 at $DIR/inline-closure-borrows-arg.rs:+2:24: +2:27\n+        _0 = (*_10);                     // scope 3 at $DIR/inline-closure-borrows-arg.rs:+3:9: +3:18\n+        StorageDead(_10);                // scope 2 at $DIR/inline-closure-borrows-arg.rs:+4:5: +4:6\n+        StorageDead(_9);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:12\n+        StorageDead(_8);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:5: +5:12\n+        StorageDead(_7);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:11: +5:12\n+        StorageDead(_6);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:11: +5:12\n+        StorageDead(_5);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:11: +5:12\n+        StorageDead(_4);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:+5:11: +5:12\n+        StorageDead(_3);                 // scope 0 at $DIR/inline-closure-borrows-arg.rs:+6:1: +6:2\n+        return;                          // scope 0 at $DIR/inline-closure-borrows-arg.rs:+6:2: +6:2\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/inline-closure-borrows-arg.rs:11:1: 17:2\n+        resume;                          // scope 0 at $DIR/inline-closure-borrows-arg.rs:+0:1: +6:2\n     }\n }"}, {"sha": "75693dc384b13581a9cf0cb68827453476e1bc65", "filename": "src/test/mir-opt/inline/inline_closure_captures.foo.Inline.after.mir", "status": "modified", "additions": 59, "deletions": 59, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -1,73 +1,73 @@\n // MIR for `foo` after Inline\n \n fn foo(_1: T, _2: i32) -> (i32, T) {\n-    debug t => _1;                       // in scope 0 at $DIR/inline-closure-captures.rs:10:17: 10:18\n-    debug q => _2;                       // in scope 0 at $DIR/inline-closure-captures.rs:10:23: 10:24\n-    let mut _0: (i32, T);                // return place in scope 0 at $DIR/inline-closure-captures.rs:10:34: 10:42\n-    let _3: [closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline-closure-captures.rs:11:9: 11:10\n-    let mut _4: &i32;                    // in scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n-    let mut _5: &T;                      // in scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n-    let mut _6: &[closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline-closure-captures.rs:12:5: 12:6\n-    let mut _7: (i32,);                  // in scope 0 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-    let mut _8: i32;                     // in scope 0 at $DIR/inline-closure-captures.rs:12:7: 12:8\n-    let mut _9: i32;                     // in scope 0 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+    debug t => _1;                       // in scope 0 at $DIR/inline-closure-captures.rs:+0:17: +0:18\n+    debug q => _2;                       // in scope 0 at $DIR/inline-closure-captures.rs:+0:23: +0:24\n+    let mut _0: (i32, T);                // return place in scope 0 at $DIR/inline-closure-captures.rs:+0:34: +0:42\n+    let _3: [closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline-closure-captures.rs:+1:9: +1:10\n+    let mut _4: &i32;                    // in scope 0 at $DIR/inline-closure-captures.rs:+1:13: +1:24\n+    let mut _5: &T;                      // in scope 0 at $DIR/inline-closure-captures.rs:+1:13: +1:24\n+    let mut _6: &[closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline-closure-captures.rs:+2:5: +2:6\n+    let mut _7: (i32,);                  // in scope 0 at $DIR/inline-closure-captures.rs:+2:5: +2:9\n+    let mut _8: i32;                     // in scope 0 at $DIR/inline-closure-captures.rs:+2:7: +2:8\n+    let mut _9: i32;                     // in scope 0 at $DIR/inline-closure-captures.rs:+2:5: +2:9\n     scope 1 {\n-        debug x => _3;                   // in scope 1 at $DIR/inline-closure-captures.rs:11:9: 11:10\n+        debug x => _3;                   // in scope 1 at $DIR/inline-closure-captures.rs:+1:9: +1:10\n         scope 2 (inlined foo::<T>::{closure#0}) { // at $DIR/inline-closure-captures.rs:12:5: 12:9\n-            debug _q => _9;              // in scope 2 at $DIR/inline-closure-captures.rs:11:14: 11:16\n-            debug q => (*((*_6).0: &i32)); // in scope 2 at $DIR/inline-closure-captures.rs:10:23: 10:24\n-            debug t => (*((*_6).1: &T)); // in scope 2 at $DIR/inline-closure-captures.rs:10:17: 10:18\n-            let mut _10: i32;            // in scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n-            let mut _11: T;              // in scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n-            let mut _12: &i32;           // in scope 2 at $DIR/inline-closure-captures.rs:11:13: 11:17\n-            let mut _13: &T;             // in scope 2 at $DIR/inline-closure-captures.rs:11:13: 11:17\n+            debug _q => _9;              // in scope 2 at $DIR/inline-closure-captures.rs:+1:14: +1:16\n+            debug q => (*((*_6).0: &i32)); // in scope 2 at $DIR/inline-closure-captures.rs:+0:23: +0:24\n+            debug t => (*((*_6).1: &T)); // in scope 2 at $DIR/inline-closure-captures.rs:+0:17: +0:18\n+            let mut _10: i32;            // in scope 2 at $DIR/inline-closure-captures.rs:+1:19: +1:20\n+            let mut _11: T;              // in scope 2 at $DIR/inline-closure-captures.rs:+1:22: +1:23\n+            let mut _12: &i32;           // in scope 2 at $DIR/inline-closure-captures.rs:+1:13: +1:17\n+            let mut _13: &T;             // in scope 2 at $DIR/inline-closure-captures.rs:+1:13: +1:17\n         }\n     }\n \n     bb0: {\n-        StorageLive(_3);                 // scope 0 at $DIR/inline-closure-captures.rs:11:9: 11:10\n-        StorageLive(_4);                 // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n-        _4 = &_2;                        // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n-        StorageLive(_5);                 // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n-        _5 = &_1;                        // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n-        Deinit(_3);                      // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n-        (_3.0: &i32) = move _4;          // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n-        (_3.1: &T) = move _5;            // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n-        StorageDead(_5);                 // scope 0 at $DIR/inline-closure-captures.rs:11:16: 11:17\n-        StorageDead(_4);                 // scope 0 at $DIR/inline-closure-captures.rs:11:16: 11:17\n-        StorageLive(_6);                 // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:6\n-        _6 = &_3;                        // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:6\n-        StorageLive(_7);                 // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-        StorageLive(_8);                 // scope 1 at $DIR/inline-closure-captures.rs:12:7: 12:8\n-        _8 = _2;                         // scope 1 at $DIR/inline-closure-captures.rs:12:7: 12:8\n-        Deinit(_7);                      // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-        (_7.0: i32) = move _8;           // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-        StorageLive(_9);                 // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-        _9 = move (_7.0: i32);           // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-        StorageLive(_10);                // scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n-        StorageLive(_12);                // scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n-        _12 = deref_copy ((*_6).0: &i32); // scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n-        _10 = (*_12);                    // scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n-        StorageDead(_12);                // scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n-        StorageLive(_11);                // scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n-        StorageLive(_13);                // scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n-        _13 = deref_copy ((*_6).1: &T);  // scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n-        _11 = (*_13);                    // scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n-        StorageDead(_13);                // scope 2 at $DIR/inline-closure-captures.rs:11:18: 11:24\n-        Deinit(_0);                      // scope 2 at $DIR/inline-closure-captures.rs:11:18: 11:24\n-        (_0.0: i32) = move _10;          // scope 2 at $DIR/inline-closure-captures.rs:11:18: 11:24\n-        (_0.1: T) = move _11;            // scope 2 at $DIR/inline-closure-captures.rs:11:18: 11:24\n-        StorageDead(_11);                // scope 2 at $DIR/inline-closure-captures.rs:11:23: 11:24\n-        StorageDead(_10);                // scope 2 at $DIR/inline-closure-captures.rs:11:23: 11:24\n-        StorageDead(_9);                 // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-        StorageDead(_8);                 // scope 1 at $DIR/inline-closure-captures.rs:12:8: 12:9\n-        StorageDead(_7);                 // scope 1 at $DIR/inline-closure-captures.rs:12:8: 12:9\n-        StorageDead(_6);                 // scope 1 at $DIR/inline-closure-captures.rs:12:8: 12:9\n-        StorageDead(_3);                 // scope 0 at $DIR/inline-closure-captures.rs:13:1: 13:2\n-        return;                          // scope 0 at $DIR/inline-closure-captures.rs:13:2: 13:2\n+        StorageLive(_3);                 // scope 0 at $DIR/inline-closure-captures.rs:+1:9: +1:10\n+        StorageLive(_4);                 // scope 0 at $DIR/inline-closure-captures.rs:+1:13: +1:24\n+        _4 = &_2;                        // scope 0 at $DIR/inline-closure-captures.rs:+1:13: +1:24\n+        StorageLive(_5);                 // scope 0 at $DIR/inline-closure-captures.rs:+1:13: +1:24\n+        _5 = &_1;                        // scope 0 at $DIR/inline-closure-captures.rs:+1:13: +1:24\n+        Deinit(_3);                      // scope 0 at $DIR/inline-closure-captures.rs:+1:13: +1:24\n+        (_3.0: &i32) = move _4;          // scope 0 at $DIR/inline-closure-captures.rs:+1:13: +1:24\n+        (_3.1: &T) = move _5;            // scope 0 at $DIR/inline-closure-captures.rs:+1:13: +1:24\n+        StorageDead(_5);                 // scope 0 at $DIR/inline-closure-captures.rs:+1:16: +1:17\n+        StorageDead(_4);                 // scope 0 at $DIR/inline-closure-captures.rs:+1:16: +1:17\n+        StorageLive(_6);                 // scope 1 at $DIR/inline-closure-captures.rs:+2:5: +2:6\n+        _6 = &_3;                        // scope 1 at $DIR/inline-closure-captures.rs:+2:5: +2:6\n+        StorageLive(_7);                 // scope 1 at $DIR/inline-closure-captures.rs:+2:5: +2:9\n+        StorageLive(_8);                 // scope 1 at $DIR/inline-closure-captures.rs:+2:7: +2:8\n+        _8 = _2;                         // scope 1 at $DIR/inline-closure-captures.rs:+2:7: +2:8\n+        Deinit(_7);                      // scope 1 at $DIR/inline-closure-captures.rs:+2:5: +2:9\n+        (_7.0: i32) = move _8;           // scope 1 at $DIR/inline-closure-captures.rs:+2:5: +2:9\n+        StorageLive(_9);                 // scope 1 at $DIR/inline-closure-captures.rs:+2:5: +2:9\n+        _9 = move (_7.0: i32);           // scope 1 at $DIR/inline-closure-captures.rs:+2:5: +2:9\n+        StorageLive(_10);                // scope 2 at $DIR/inline-closure-captures.rs:+1:19: +1:20\n+        StorageLive(_12);                // scope 2 at $DIR/inline-closure-captures.rs:+1:19: +1:20\n+        _12 = deref_copy ((*_6).0: &i32); // scope 2 at $DIR/inline-closure-captures.rs:+1:19: +1:20\n+        _10 = (*_12);                    // scope 2 at $DIR/inline-closure-captures.rs:+1:19: +1:20\n+        StorageDead(_12);                // scope 2 at $DIR/inline-closure-captures.rs:+1:22: +1:23\n+        StorageLive(_11);                // scope 2 at $DIR/inline-closure-captures.rs:+1:22: +1:23\n+        StorageLive(_13);                // scope 2 at $DIR/inline-closure-captures.rs:+1:22: +1:23\n+        _13 = deref_copy ((*_6).1: &T);  // scope 2 at $DIR/inline-closure-captures.rs:+1:22: +1:23\n+        _11 = (*_13);                    // scope 2 at $DIR/inline-closure-captures.rs:+1:22: +1:23\n+        StorageDead(_13);                // scope 2 at $DIR/inline-closure-captures.rs:+1:18: +1:24\n+        Deinit(_0);                      // scope 2 at $DIR/inline-closure-captures.rs:+1:18: +1:24\n+        (_0.0: i32) = move _10;          // scope 2 at $DIR/inline-closure-captures.rs:+1:18: +1:24\n+        (_0.1: T) = move _11;            // scope 2 at $DIR/inline-closure-captures.rs:+1:18: +1:24\n+        StorageDead(_11);                // scope 2 at $DIR/inline-closure-captures.rs:+1:23: +1:24\n+        StorageDead(_10);                // scope 2 at $DIR/inline-closure-captures.rs:+1:23: +1:24\n+        StorageDead(_9);                 // scope 1 at $DIR/inline-closure-captures.rs:+2:5: +2:9\n+        StorageDead(_8);                 // scope 1 at $DIR/inline-closure-captures.rs:+2:8: +2:9\n+        StorageDead(_7);                 // scope 1 at $DIR/inline-closure-captures.rs:+2:8: +2:9\n+        StorageDead(_6);                 // scope 1 at $DIR/inline-closure-captures.rs:+2:8: +2:9\n+        StorageDead(_3);                 // scope 0 at $DIR/inline-closure-captures.rs:+3:1: +3:2\n+        return;                          // scope 0 at $DIR/inline-closure-captures.rs:+3:2: +3:2\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/inline-closure-captures.rs:10:1: 13:2\n+        resume;                          // scope 0 at $DIR/inline-closure-captures.rs:+0:1: +3:2\n     }\n }"}, {"sha": "556d587a47276197375048d17545fa8334a4b076", "filename": "src/test/mir-opt/inline/inline_compatibility.inlined_no_sanitize.Inline.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,27 +2,27 @@\n + // MIR for `inlined_no_sanitize` after Inline\n   \n   fn inlined_no_sanitize() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:23:37: 23:37\n-      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:24:5: 24:18\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:+0:37: +0:37\n+      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:18\n +     scope 1 (inlined no_sanitize) {      // at $DIR/inline-compatibility.rs:24:5: 24:18\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:24:5: 24:18\n--         _1 = no_sanitize() -> bb1;       // scope 0 at $DIR/inline-compatibility.rs:24:5: 24:18\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:18\n+-         _1 = no_sanitize() -> bb1;       // scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:18\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-compatibility.rs:24:5: 24:16\n -                                          // + literal: Const { ty: unsafe fn() {no_sanitize}, val: Value(<ZST>) }\n -     }\n - \n -     bb1: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:24:18: 24:19\n-          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:23:37: 25:2\n-          return;                          // scope 0 at $DIR/inline-compatibility.rs:25:2: 25:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:+1:18: +1:19\n+          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:+0:37: +2:2\n+          return;                          // scope 0 at $DIR/inline-compatibility.rs:+2:2: +2:2\n +     }\n + \n +     bb1 (cleanup): {\n-+         resume;                          // scope 0 at $DIR/inline-compatibility.rs:23:1: 25:2\n++         resume;                          // scope 0 at $DIR/inline-compatibility.rs:+0:1: +2:2\n       }\n   }\n   "}, {"sha": "b1ee4307358c4f9596c2faedbe135a2eb64b696c", "filename": "src/test/mir-opt/inline/inline_compatibility.inlined_target_feature.Inline.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,27 +2,27 @@\n + // MIR for `inlined_target_feature` after Inline\n   \n   fn inlined_target_feature() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:12:40: 12:40\n-      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:13:5: 13:21\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:+0:40: +0:40\n+      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:21\n +     scope 1 (inlined target_feature) {   // at $DIR/inline-compatibility.rs:13:5: 13:21\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:13:5: 13:21\n--         _1 = target_feature() -> bb1;    // scope 0 at $DIR/inline-compatibility.rs:13:5: 13:21\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:21\n+-         _1 = target_feature() -> bb1;    // scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:21\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-compatibility.rs:13:5: 13:19\n -                                          // + literal: Const { ty: unsafe fn() {target_feature}, val: Value(<ZST>) }\n -     }\n - \n -     bb1: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:13:21: 13:22\n-          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:12:40: 14:2\n-          return;                          // scope 0 at $DIR/inline-compatibility.rs:14:2: 14:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:+1:21: +1:22\n+          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:+0:40: +2:2\n+          return;                          // scope 0 at $DIR/inline-compatibility.rs:+2:2: +2:2\n +     }\n + \n +     bb1 (cleanup): {\n-+         resume;                          // scope 0 at $DIR/inline-compatibility.rs:12:1: 14:2\n++         resume;                          // scope 0 at $DIR/inline-compatibility.rs:+0:1: +2:2\n       }\n   }\n   "}, {"sha": "49aea431e46ddd638d3cb1fde65bb4bbfe03b27d", "filename": "src/test/mir-opt/inline/inline_compatibility.not_inlined_c_variadic.Inline.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_c_variadic.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_c_variadic.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_c_variadic.Inline.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,24 +2,24 @@\n + // MIR for `not_inlined_c_variadic` after Inline\n   \n   fn not_inlined_c_variadic() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:41:40: 41:40\n-      let _1: u32;                         // in scope 0 at $DIR/inline-compatibility.rs:42:9: 42:10\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:+0:40: +0:40\n+      let _1: u32;                         // in scope 0 at $DIR/inline-compatibility.rs:+1:9: +1:10\n       scope 1 {\n-          debug s => _1;                   // in scope 1 at $DIR/inline-compatibility.rs:42:9: 42:10\n+          debug s => _1;                   // in scope 1 at $DIR/inline-compatibility.rs:+1:9: +1:10\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:42:9: 42:10\n-          _1 = sum(const 4_u32, const 4_u32, const 30_u32, const 200_u32, const 1000_u32) -> bb1; // scope 0 at $DIR/inline-compatibility.rs:42:13: 42:52\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:+1:9: +1:10\n+          _1 = sum(const 4_u32, const 4_u32, const 30_u32, const 200_u32, const 1000_u32) -> bb1; // scope 0 at $DIR/inline-compatibility.rs:+1:13: +1:52\n                                            // mir::Constant\n                                            // + span: $DIR/inline-compatibility.rs:42:13: 42:16\n                                            // + literal: Const { ty: unsafe extern \"C\" fn(u32, ...) -> u32 {sum}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:41:40: 43:2\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:43:1: 43:2\n-          return;                          // scope 0 at $DIR/inline-compatibility.rs:43:2: 43:2\n+          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:+0:40: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/inline-compatibility.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "94ce574a94dc2253853e2af8458de49f43242666", "filename": "src/test/mir-opt/inline/inline_compatibility.not_inlined_no_sanitize.Inline.diff", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_no_sanitize.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_no_sanitize.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_no_sanitize.Inline.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,21 +2,21 @@\n + // MIR for `not_inlined_no_sanitize` after Inline\n   \n   fn not_inlined_no_sanitize() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:28:41: 28:41\n-      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:29:5: 29:18\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:+0:41: +0:41\n+      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:18\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:29:5: 29:18\n-          _1 = no_sanitize() -> bb1;       // scope 0 at $DIR/inline-compatibility.rs:29:5: 29:18\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:18\n+          _1 = no_sanitize() -> bb1;       // scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:18\n                                            // mir::Constant\n                                            // + span: $DIR/inline-compatibility.rs:29:5: 29:16\n                                            // + literal: Const { ty: unsafe fn() {no_sanitize}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:29:18: 29:19\n-          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:28:41: 30:2\n-          return;                          // scope 0 at $DIR/inline-compatibility.rs:30:2: 30:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:+1:18: +1:19\n+          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:+0:41: +2:2\n+          return;                          // scope 0 at $DIR/inline-compatibility.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "8506e257b3fe930ab2f5f26d42aab7aff84e52a0", "filename": "src/test/mir-opt/inline/inline_compatibility.not_inlined_target_feature.Inline.diff", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_target_feature.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_target_feature.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_target_feature.Inline.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,21 +2,21 @@\n + // MIR for `not_inlined_target_feature` after Inline\n   \n   fn not_inlined_target_feature() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:17:44: 17:44\n-      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:18:5: 18:21\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:+0:44: +0:44\n+      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:21\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:18:5: 18:21\n-          _1 = target_feature() -> bb1;    // scope 0 at $DIR/inline-compatibility.rs:18:5: 18:21\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:21\n+          _1 = target_feature() -> bb1;    // scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:21\n                                            // mir::Constant\n                                            // + span: $DIR/inline-compatibility.rs:18:5: 18:19\n                                            // + literal: Const { ty: unsafe fn() {target_feature}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:18:21: 18:22\n-          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:17:44: 19:2\n-          return;                          // scope 0 at $DIR/inline-compatibility.rs:19:2: 19:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:+1:21: +1:22\n+          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:+0:44: +2:2\n+          return;                          // scope 0 at $DIR/inline-compatibility.rs:+2:2: +2:2\n       }\n   }\n   "}, {"sha": "a6d65928da70831694f0248fd4502c948726621a", "filename": "src/test/mir-opt/inline/inline_cycle.one.Inline.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,8 +2,8 @@\n + // MIR for `one` after Inline\n   \n   fn one() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-cycle.rs:13:10: 13:10\n-      let _1: ();                          // in scope 0 at $DIR/inline-cycle.rs:14:5: 14:24\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-cycle.rs:+0:10: +0:10\n+      let _1: ();                          // in scope 0 at $DIR/inline-cycle.rs:+1:5: +1:24\n +     scope 1 (inlined <C as Call>::call) { // at $DIR/inline-cycle.rs:14:5: 14:24\n +         scope 2 (inlined <A<C> as Call>::call) { // at $DIR/inline-cycle.rs:43:9: 43:23\n +             scope 3 (inlined <B<C> as Call>::call) { // at $DIR/inline-cycle.rs:28:9: 28:31\n@@ -12,23 +12,23 @@\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-cycle.rs:14:5: 14:24\n--         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline-cycle.rs:14:5: 14:24\n-+         _1 = <C as Call>::call() -> bb1; // scope 3 at $DIR/inline-cycle.rs:36:9: 36:28\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-cycle.rs:+1:5: +1:24\n+-         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline-cycle.rs:+1:5: +1:24\n++         _1 = <C as Call>::call() -> bb1; // scope 3 at $DIR/inline-cycle.rs:+23:9: +23:28\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-cycle.rs:14:5: 14:22\n +                                          // + span: $DIR/inline-cycle.rs:36:9: 36:26\n                                            // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-cycle.rs:14:24: 14:25\n-          _0 = const ();                   // scope 0 at $DIR/inline-cycle.rs:13:10: 15:2\n-          return;                          // scope 0 at $DIR/inline-cycle.rs:15:2: 15:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-cycle.rs:+1:24: +1:25\n+          _0 = const ();                   // scope 0 at $DIR/inline-cycle.rs:+0:10: +2:2\n+          return;                          // scope 0 at $DIR/inline-cycle.rs:+2:2: +2:2\n +     }\n + \n +     bb2 (cleanup): {\n-+         resume;                          // scope 0 at $DIR/inline-cycle.rs:13:1: 15:2\n++         resume;                          // scope 0 at $DIR/inline-cycle.rs:+0:1: +2:2\n       }\n   }\n   "}, {"sha": "0fea4121f8daeb95e787ab0eab45f152dfdba940", "filename": "src/test/mir-opt/inline/inline_cycle.two.Inline.diff", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,36 +2,36 @@\n + // MIR for `two` after Inline\n   \n   fn two() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-cycle.rs:48:10: 48:10\n-      let _1: ();                          // in scope 0 at $DIR/inline-cycle.rs:49:5: 49:12\n-+     let mut _2: fn() {f};                // in scope 0 at $DIR/inline-cycle.rs:49:5: 49:12\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-cycle.rs:+0:10: +0:10\n+      let _1: ();                          // in scope 0 at $DIR/inline-cycle.rs:+1:5: +1:12\n++     let mut _2: fn() {f};                // in scope 0 at $DIR/inline-cycle.rs:+1:5: +1:12\n +     scope 1 (inlined call::<fn() {f}>) { // at $DIR/inline-cycle.rs:49:5: 49:12\n-+         debug f => _2;                   // in scope 1 at $DIR/inline-cycle.rs:53:22: 53:23\n-+         let _3: ();                      // in scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n-+         let mut _4: fn() {f};            // in scope 1 at $DIR/inline-cycle.rs:54:5: 54:6\n-+         let mut _5: ();                  // in scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n++         debug f => _2;                   // in scope 1 at $DIR/inline-cycle.rs:+5:22: +5:23\n++         let _3: ();                      // in scope 1 at $DIR/inline-cycle.rs:+6:5: +6:8\n++         let mut _4: fn() {f};            // in scope 1 at $DIR/inline-cycle.rs:+6:5: +6:6\n++         let mut _5: ();                  // in scope 1 at $DIR/inline-cycle.rs:+6:5: +6:8\n +         scope 2 (inlined <fn() {f} as FnOnce<()>>::call_once - shim(fn() {f})) { // at $DIR/inline-cycle.rs:54:5: 54:8\n +             scope 3 (inlined f) {        // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n-+                 let _6: ();              // in scope 3 at $DIR/inline-cycle.rs:59:5: 59:12\n++                 let _6: ();              // in scope 3 at $DIR/inline-cycle.rs:+11:5: +11:12\n +             }\n +         }\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-cycle.rs:49:5: 49:12\n--         _1 = call::<fn() {f}>(f) -> bb1; // scope 0 at $DIR/inline-cycle.rs:49:5: 49:12\n-+         StorageLive(_2);                 // scope 0 at $DIR/inline-cycle.rs:49:5: 49:12\n-+         _2 = f;                          // scope 0 at $DIR/inline-cycle.rs:49:5: 49:12\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-cycle.rs:+1:5: +1:12\n+-         _1 = call::<fn() {f}>(f) -> bb1; // scope 0 at $DIR/inline-cycle.rs:+1:5: +1:12\n++         StorageLive(_2);                 // scope 0 at $DIR/inline-cycle.rs:+1:5: +1:12\n++         _2 = f;                          // scope 0 at $DIR/inline-cycle.rs:+1:5: +1:12\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-cycle.rs:49:5: 49:9\n +                                          // + span: $DIR/inline-cycle.rs:49:10: 49:11\n +                                          // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }\n-+         StorageLive(_3);                 // scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n-+         StorageLive(_4);                 // scope 1 at $DIR/inline-cycle.rs:54:5: 54:6\n-+         _4 = move _2;                    // scope 1 at $DIR/inline-cycle.rs:54:5: 54:6\n-+         StorageLive(_5);                 // scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n-+         StorageLive(_6);                 // scope 3 at $DIR/inline-cycle.rs:59:5: 59:12\n-+         _6 = call::<fn() {f}>(f) -> bb1; // scope 3 at $DIR/inline-cycle.rs:59:5: 59:12\n++         StorageLive(_3);                 // scope 1 at $DIR/inline-cycle.rs:+6:5: +6:8\n++         StorageLive(_4);                 // scope 1 at $DIR/inline-cycle.rs:+6:5: +6:6\n++         _4 = move _2;                    // scope 1 at $DIR/inline-cycle.rs:+6:5: +6:6\n++         StorageLive(_5);                 // scope 1 at $DIR/inline-cycle.rs:+6:5: +6:8\n++         StorageLive(_6);                 // scope 3 at $DIR/inline-cycle.rs:+11:5: +11:12\n++         _6 = call::<fn() {f}>(f) -> bb1; // scope 3 at $DIR/inline-cycle.rs:+11:5: +11:12\n +                                          // mir::Constant\n +                                          // + span: $DIR/inline-cycle.rs:59:5: 59:9\n                                            // + literal: Const { ty: fn(fn() {f}) {call::<fn() {f}>}, val: Value(<ZST>) }\n@@ -42,18 +42,18 @@\n       }\n   \n       bb1: {\n-+         StorageDead(_6);                 // scope 3 at $DIR/inline-cycle.rs:59:12: 59:13\n-+         StorageDead(_5);                 // scope 1 at $DIR/inline-cycle.rs:54:7: 54:8\n-+         StorageDead(_4);                 // scope 1 at $DIR/inline-cycle.rs:54:7: 54:8\n-+         StorageDead(_3);                 // scope 1 at $DIR/inline-cycle.rs:54:8: 54:9\n-+         StorageDead(_2);                 // scope 0 at $DIR/inline-cycle.rs:49:5: 49:12\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-cycle.rs:49:12: 49:13\n-          _0 = const ();                   // scope 0 at $DIR/inline-cycle.rs:48:10: 50:2\n-          return;                          // scope 0 at $DIR/inline-cycle.rs:50:2: 50:2\n++         StorageDead(_6);                 // scope 3 at $DIR/inline-cycle.rs:+11:12: +11:13\n++         StorageDead(_5);                 // scope 1 at $DIR/inline-cycle.rs:+6:7: +6:8\n++         StorageDead(_4);                 // scope 1 at $DIR/inline-cycle.rs:+6:7: +6:8\n++         StorageDead(_3);                 // scope 1 at $DIR/inline-cycle.rs:+6:8: +6:9\n++         StorageDead(_2);                 // scope 0 at $DIR/inline-cycle.rs:+1:5: +1:12\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-cycle.rs:+1:12: +1:13\n+          _0 = const ();                   // scope 0 at $DIR/inline-cycle.rs:+0:10: +2:2\n+          return;                          // scope 0 at $DIR/inline-cycle.rs:+2:2: +2:2\n +     }\n + \n +     bb2 (cleanup): {\n-+         resume;                          // scope 0 at $DIR/inline-cycle.rs:48:1: 50:2\n++         resume;                          // scope 0 at $DIR/inline-cycle.rs:+0:1: +2:2\n       }\n   }\n   "}, {"sha": "d5709f1b47a40465ecd0ecec789003967ab19a7c", "filename": "src/test/mir-opt/inline/inline_cycle_generic.main.Inline.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,8 +2,8 @@\n + // MIR for `main` after Inline\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-cycle-generic.rs:8:11: 8:11\n-      let _1: ();                          // in scope 0 at $DIR/inline-cycle-generic.rs:9:5: 9:24\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-cycle-generic.rs:+0:11: +0:11\n+      let _1: ();                          // in scope 0 at $DIR/inline-cycle-generic.rs:+1:5: +1:24\n +     scope 1 (inlined <C as Call>::call) { // at $DIR/inline-cycle-generic.rs:9:5: 9:24\n +         scope 2 (inlined <B<A> as Call>::call) { // at $DIR/inline-cycle-generic.rs:38:9: 38:31\n +             scope 3 (inlined <A as Call>::call) { // at $DIR/inline-cycle-generic.rs:31:9: 31:28\n@@ -14,23 +14,23 @@\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-cycle-generic.rs:9:5: 9:24\n--         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline-cycle-generic.rs:9:5: 9:24\n-+         _1 = <C as Call>::call() -> bb1; // scope 4 at $DIR/inline-cycle-generic.rs:31:9: 31:28\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-cycle-generic.rs:+1:5: +1:24\n+-         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline-cycle-generic.rs:+1:5: +1:24\n++         _1 = <C as Call>::call() -> bb1; // scope 4 at $DIR/inline-cycle-generic.rs:+23:9: +23:28\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-cycle-generic.rs:9:5: 9:22\n +                                          // + span: $DIR/inline-cycle-generic.rs:31:9: 31:26\n                                            // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-cycle-generic.rs:9:24: 9:25\n-          _0 = const ();                   // scope 0 at $DIR/inline-cycle-generic.rs:8:11: 10:2\n-          return;                          // scope 0 at $DIR/inline-cycle-generic.rs:10:2: 10:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-cycle-generic.rs:+1:24: +1:25\n+          _0 = const ();                   // scope 0 at $DIR/inline-cycle-generic.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/inline-cycle-generic.rs:+2:2: +2:2\n +     }\n + \n +     bb2 (cleanup): {\n-+         resume;                          // scope 0 at $DIR/inline-cycle-generic.rs:8:1: 10:2\n++         resume;                          // scope 0 at $DIR/inline-cycle-generic.rs:+0:1: +2:2\n       }\n   }\n   "}, {"sha": "7ebc2ff5c453154efdc68b70ffb21163ff87e84a", "filename": "src/test/mir-opt/inline/inline_diverging.f.Inline.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.f.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.f.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.f.Inline.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,27 +2,27 @@\n + // MIR for `f` after Inline\n   \n   fn f() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-diverging.rs:7:12: 7:12\n-      let mut _1: !;                       // in scope 0 at $DIR/inline-diverging.rs:7:12: 9:2\n-      let _2: !;                           // in scope 0 at $DIR/inline-diverging.rs:8:5: 8:12\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-diverging.rs:+0:12: +0:12\n+      let mut _1: !;                       // in scope 0 at $DIR/inline-diverging.rs:+0:12: +2:2\n+      let _2: !;                           // in scope 0 at $DIR/inline-diverging.rs:+1:5: +1:12\n +     scope 1 (inlined sleep) {            // at $DIR/inline-diverging.rs:8:5: 8:12\n +     }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/inline-diverging.rs:8:5: 8:12\n--         _2 = sleep();                    // scope 0 at $DIR/inline-diverging.rs:8:5: 8:12\n+          StorageLive(_2);                 // scope 0 at $DIR/inline-diverging.rs:+1:5: +1:12\n+-         _2 = sleep();                    // scope 0 at $DIR/inline-diverging.rs:+1:5: +1:12\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-diverging.rs:8:5: 8:10\n -                                          // + literal: Const { ty: fn() -> ! {sleep}, val: Value(<ZST>) }\n-+         goto -> bb1;                     // scope 0 at $DIR/inline-diverging.rs:8:5: 8:12\n++         goto -> bb1;                     // scope 0 at $DIR/inline-diverging.rs:+1:5: +1:12\n +     }\n + \n +     bb1: {\n-+         goto -> bb1;                     // scope 1 at $DIR/inline-diverging.rs:39:5: 39:12\n++         goto -> bb1;                     // scope 1 at $DIR/inline-diverging.rs:+32:5: +32:12\n +     }\n + \n +     bb2 (cleanup): {\n-+         resume;                          // scope 0 at $DIR/inline-diverging.rs:7:1: 9:2\n++         resume;                          // scope 0 at $DIR/inline-diverging.rs:+0:1: +2:2\n       }\n   }\n   "}, {"sha": "acdd0f87901d5a19fd67154b98fe600b8a7864f3", "filename": "src/test/mir-opt/inline/inline_diverging.g.Inline.diff", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,38 +2,38 @@\n + // MIR for `g` after Inline\n   \n   fn g(_1: i32) -> u32 {\n-      debug i => _1;                       // in scope 0 at $DIR/inline-diverging.rs:12:10: 12:11\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/inline-diverging.rs:12:21: 12:24\n-      let mut _2: bool;                    // in scope 0 at $DIR/inline-diverging.rs:13:8: 13:13\n-      let mut _3: i32;                     // in scope 0 at $DIR/inline-diverging.rs:13:8: 13:9\n-      let mut _4: i32;                     // in scope 0 at $DIR/inline-diverging.rs:14:9: 14:10\n-      let mut _5: !;                       // in scope 0 at $DIR/inline-diverging.rs:15:12: 17:6\n-      let _6: !;                           // in scope 0 at $DIR/inline-diverging.rs:16:9: 16:16\n+      debug i => _1;                       // in scope 0 at $DIR/inline-diverging.rs:+0:10: +0:11\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/inline-diverging.rs:+0:21: +0:24\n+      let mut _2: bool;                    // in scope 0 at $DIR/inline-diverging.rs:+1:8: +1:13\n+      let mut _3: i32;                     // in scope 0 at $DIR/inline-diverging.rs:+1:8: +1:9\n+      let mut _4: i32;                     // in scope 0 at $DIR/inline-diverging.rs:+2:9: +2:10\n+      let mut _5: !;                       // in scope 0 at $DIR/inline-diverging.rs:+3:12: +5:6\n+      let _6: !;                           // in scope 0 at $DIR/inline-diverging.rs:+4:9: +4:16\n +     scope 1 (inlined panic) {            // at $DIR/inline-diverging.rs:16:9: 16:16\n +         let mut _7: !;                   // in scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL\n +     }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/inline-diverging.rs:13:8: 13:13\n-          StorageLive(_3);                 // scope 0 at $DIR/inline-diverging.rs:13:8: 13:9\n-          _3 = _1;                         // scope 0 at $DIR/inline-diverging.rs:13:8: 13:9\n-          _2 = Gt(move _3, const 0_i32);   // scope 0 at $DIR/inline-diverging.rs:13:8: 13:13\n-          StorageDead(_3);                 // scope 0 at $DIR/inline-diverging.rs:13:12: 13:13\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/inline-diverging.rs:13:8: 13:13\n+          StorageLive(_2);                 // scope 0 at $DIR/inline-diverging.rs:+1:8: +1:13\n+          StorageLive(_3);                 // scope 0 at $DIR/inline-diverging.rs:+1:8: +1:9\n+          _3 = _1;                         // scope 0 at $DIR/inline-diverging.rs:+1:8: +1:9\n+          _2 = Gt(move _3, const 0_i32);   // scope 0 at $DIR/inline-diverging.rs:+1:8: +1:13\n+          StorageDead(_3);                 // scope 0 at $DIR/inline-diverging.rs:+1:12: +1:13\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/inline-diverging.rs:+1:8: +1:13\n       }\n   \n       bb1: {\n-          StorageLive(_4);                 // scope 0 at $DIR/inline-diverging.rs:14:9: 14:10\n-          _4 = _1;                         // scope 0 at $DIR/inline-diverging.rs:14:9: 14:10\n-          _0 = move _4 as u32 (Misc);      // scope 0 at $DIR/inline-diverging.rs:14:9: 14:17\n-          StorageDead(_4);                 // scope 0 at $DIR/inline-diverging.rs:14:16: 14:17\n-          StorageDead(_2);                 // scope 0 at $DIR/inline-diverging.rs:17:5: 17:6\n-          return;                          // scope 0 at $DIR/inline-diverging.rs:18:2: 18:2\n+          StorageLive(_4);                 // scope 0 at $DIR/inline-diverging.rs:+2:9: +2:10\n+          _4 = _1;                         // scope 0 at $DIR/inline-diverging.rs:+2:9: +2:10\n+          _0 = move _4 as u32 (Misc);      // scope 0 at $DIR/inline-diverging.rs:+2:9: +2:17\n+          StorageDead(_4);                 // scope 0 at $DIR/inline-diverging.rs:+2:16: +2:17\n+          StorageDead(_2);                 // scope 0 at $DIR/inline-diverging.rs:+5:5: +5:6\n+          return;                          // scope 0 at $DIR/inline-diverging.rs:+6:2: +6:2\n       }\n   \n       bb2: {\n-          StorageLive(_6);                 // scope 0 at $DIR/inline-diverging.rs:16:9: 16:16\n--         _6 = panic();                    // scope 0 at $DIR/inline-diverging.rs:16:9: 16:16\n+          StorageLive(_6);                 // scope 0 at $DIR/inline-diverging.rs:+4:9: +4:16\n+-         _6 = panic();                    // scope 0 at $DIR/inline-diverging.rs:+4:9: +4:16\n +         StorageLive(_7);                 // scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL\n +         _7 = begin_panic::<&str>(const \"explicit panic\"); // scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL\n                                            // mir::Constant\n@@ -47,7 +47,7 @@\n +     }\n + \n +     bb3 (cleanup): {\n-+         resume;                          // scope 0 at $DIR/inline-diverging.rs:12:1: 18:2\n++         resume;                          // scope 0 at $DIR/inline-diverging.rs:+0:1: +6:2\n       }\n   }\n   "}, {"sha": "8fda8673c9535f298fa6b401fa3c56277cbf0ef3", "filename": "src/test/mir-opt/inline/inline_diverging.h.Inline.diff", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,23 +2,23 @@\n + // MIR for `h` after Inline\n   \n   fn h() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-diverging.rs:21:12: 21:12\n-      let _1: (!, !);                      // in scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n-+     let mut _2: fn() -> ! {sleep};       // in scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-diverging.rs:+0:12: +0:12\n+      let _1: (!, !);                      // in scope 0 at $DIR/inline-diverging.rs:+1:5: +1:22\n++     let mut _2: fn() -> ! {sleep};       // in scope 0 at $DIR/inline-diverging.rs:+1:5: +1:22\n +     scope 1 (inlined call_twice::<!, fn() -> ! {sleep}>) { // at $DIR/inline-diverging.rs:22:5: 22:22\n-+         debug f => _2;                   // in scope 1 at $DIR/inline-diverging.rs:26:36: 26:37\n-+         let _3: !;                       // in scope 1 at $DIR/inline-diverging.rs:27:9: 27:10\n-+         let mut _4: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:27:13: 27:14\n-+         let mut _5: ();                  // in scope 1 at $DIR/inline-diverging.rs:27:13: 27:16\n-+         let mut _7: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:28:13: 28:14\n-+         let mut _8: ();                  // in scope 1 at $DIR/inline-diverging.rs:28:13: 28:16\n-+         let mut _9: !;                   // in scope 1 at $DIR/inline-diverging.rs:29:6: 29:7\n-+         let mut _10: !;                  // in scope 1 at $DIR/inline-diverging.rs:29:9: 29:10\n++         debug f => _2;                   // in scope 1 at $DIR/inline-diverging.rs:+5:36: +5:37\n++         let _3: !;                       // in scope 1 at $DIR/inline-diverging.rs:+6:9: +6:10\n++         let mut _4: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:+6:13: +6:14\n++         let mut _5: ();                  // in scope 1 at $DIR/inline-diverging.rs:+6:13: +6:16\n++         let mut _7: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:+7:13: +7:14\n++         let mut _8: ();                  // in scope 1 at $DIR/inline-diverging.rs:+7:13: +7:16\n++         let mut _9: !;                   // in scope 1 at $DIR/inline-diverging.rs:+8:6: +8:7\n++         let mut _10: !;                  // in scope 1 at $DIR/inline-diverging.rs:+8:9: +8:10\n +         scope 2 {\n-+             debug a => _3;               // in scope 2 at $DIR/inline-diverging.rs:27:9: 27:10\n-+             let _6: !;                   // in scope 2 at $DIR/inline-diverging.rs:28:9: 28:10\n++             debug a => _3;               // in scope 2 at $DIR/inline-diverging.rs:+6:9: +6:10\n++             let _6: !;                   // in scope 2 at $DIR/inline-diverging.rs:+7:9: +7:10\n +             scope 3 {\n-+                 debug b => _6;           // in scope 3 at $DIR/inline-diverging.rs:28:9: 28:10\n++                 debug b => _6;           // in scope 3 at $DIR/inline-diverging.rs:+7:9: +7:10\n +             }\n +             scope 6 (inlined <fn() -> ! {sleep} as Fn<()>>::call - shim(fn() -> ! {sleep})) { // at $DIR/inline-diverging.rs:28:13: 28:16\n +                 scope 7 (inlined sleep) { // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n@@ -32,29 +32,29 @@\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n--         _1 = call_twice::<!, fn() -> ! {sleep}>(sleep); // scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n-+         StorageLive(_2);                 // scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n-+         _2 = sleep;                      // scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-diverging.rs:+1:5: +1:22\n+-         _1 = call_twice::<!, fn() -> ! {sleep}>(sleep); // scope 0 at $DIR/inline-diverging.rs:+1:5: +1:22\n++         StorageLive(_2);                 // scope 0 at $DIR/inline-diverging.rs:+1:5: +1:22\n++         _2 = sleep;                      // scope 0 at $DIR/inline-diverging.rs:+1:5: +1:22\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-diverging.rs:22:5: 22:15\n -                                          // + literal: Const { ty: fn(fn() -> ! {sleep}) -> (!, !) {call_twice::<!, fn() -> ! {sleep}>}, val: Value(<ZST>) }\n -                                          // mir::Constant\n                                            // + span: $DIR/inline-diverging.rs:22:16: 22:21\n                                            // + literal: Const { ty: fn() -> ! {sleep}, val: Value(<ZST>) }\n-+         StorageLive(_3);                 // scope 1 at $DIR/inline-diverging.rs:27:9: 27:10\n-+         StorageLive(_4);                 // scope 1 at $DIR/inline-diverging.rs:27:13: 27:14\n-+         _4 = &_2;                        // scope 1 at $DIR/inline-diverging.rs:27:13: 27:14\n-+         StorageLive(_5);                 // scope 1 at $DIR/inline-diverging.rs:27:13: 27:16\n-+         goto -> bb1;                     // scope 5 at $DIR/inline-diverging.rs:39:5: 39:12\n++         StorageLive(_3);                 // scope 1 at $DIR/inline-diverging.rs:+6:9: +6:10\n++         StorageLive(_4);                 // scope 1 at $DIR/inline-diverging.rs:+6:13: +6:14\n++         _4 = &_2;                        // scope 1 at $DIR/inline-diverging.rs:+6:13: +6:14\n++         StorageLive(_5);                 // scope 1 at $DIR/inline-diverging.rs:+6:13: +6:16\n++         goto -> bb1;                     // scope 5 at $DIR/inline-diverging.rs:+18:5: +18:12\n +     }\n + \n +     bb1: {\n-+         goto -> bb1;                     // scope 5 at $DIR/inline-diverging.rs:39:5: 39:12\n++         goto -> bb1;                     // scope 5 at $DIR/inline-diverging.rs:+18:5: +18:12\n +     }\n + \n +     bb2 (cleanup): {\n-+         resume;                          // scope 0 at $DIR/inline-diverging.rs:21:1: 23:2\n++         resume;                          // scope 0 at $DIR/inline-diverging.rs:+0:1: +2:2\n       }\n   }\n   "}, {"sha": "c7c2759cc6579686db99383a20e0efe414be1a2e", "filename": "src/test/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 78, "deletions": 78, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,14 +2,14 @@\n + // MIR for `main` after Inline\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-generator.rs:8:11: 8:11\n-      let _1: std::ops::GeneratorState<i32, bool>; // in scope 0 at $DIR/inline-generator.rs:9:9: 9:11\n-      let mut _2: std::pin::Pin<&mut [generator@$DIR/inline-generator.rs:15:5: 15:8]>; // in scope 0 at $DIR/inline-generator.rs:9:14: 9:32\n-      let mut _3: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 0 at $DIR/inline-generator.rs:9:23: 9:31\n-      let mut _4: [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 0 at $DIR/inline-generator.rs:9:28: 9:31\n-+     let mut _7: bool;                    // in scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-generator.rs:+0:11: +0:11\n+      let _1: std::ops::GeneratorState<i32, bool>; // in scope 0 at $DIR/inline-generator.rs:+1:9: +1:11\n+      let mut _2: std::pin::Pin<&mut [generator@$DIR/inline-generator.rs:15:5: 15:8]>; // in scope 0 at $DIR/inline-generator.rs:+1:14: +1:32\n+      let mut _3: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 0 at $DIR/inline-generator.rs:+1:23: +1:31\n+      let mut _4: [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 0 at $DIR/inline-generator.rs:+1:28: +1:31\n++     let mut _7: bool;                    // in scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n       scope 1 {\n-          debug _r => _1;                  // in scope 1 at $DIR/inline-generator.rs:9:9: 9:11\n+          debug _r => _1;                  // in scope 1 at $DIR/inline-generator.rs:+1:9: +1:11\n       }\n +     scope 2 (inlined g) {                // at $DIR/inline-generator.rs:9:28: 9:31\n +     }\n@@ -24,33 +24,33 @@\n +         }\n +     }\n +     scope 6 (inlined g::{closure#0}) {   // at $DIR/inline-generator.rs:9:14: 9:46\n-+         debug a => _11;                  // in scope 6 at $DIR/inline-generator.rs:15:6: 15:7\n-+         let mut _8: i32;                 // in scope 6 at $DIR/inline-generator.rs:15:17: 15:39\n-+         let mut _9: bool;                // in scope 6 at $DIR/inline-generator.rs:15:20: 15:21\n-+         let mut _10: bool;               // in scope 6 at $DIR/inline-generator.rs:15:9: 15:9\n-+         let _11: bool;                   // in scope 6 at $DIR/inline-generator.rs:15:6: 15:7\n-+         let mut _12: u32;                // in scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n-+         let mut _13: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n-+         let mut _14: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n-+         let mut _15: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         debug a => _11;                  // in scope 6 at $DIR/inline-generator.rs:+7:6: +7:7\n++         let mut _8: i32;                 // in scope 6 at $DIR/inline-generator.rs:+7:17: +7:39\n++         let mut _9: bool;                // in scope 6 at $DIR/inline-generator.rs:+7:20: +7:21\n++         let mut _10: bool;               // in scope 6 at $DIR/inline-generator.rs:+7:9: +7:9\n++         let _11: bool;                   // in scope 6 at $DIR/inline-generator.rs:+7:6: +7:7\n++         let mut _12: u32;                // in scope 6 at $DIR/inline-generator.rs:+7:5: +7:8\n++         let mut _13: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:+7:5: +7:8\n++         let mut _14: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:+7:5: +7:8\n++         let mut _15: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:+7:5: +7:8\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-generator.rs:9:9: 9:11\n-          StorageLive(_2);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:32\n-          StorageLive(_3);                 // scope 0 at $DIR/inline-generator.rs:9:23: 9:31\n-          StorageLive(_4);                 // scope 0 at $DIR/inline-generator.rs:9:28: 9:31\n--         _4 = g() -> bb1;                 // scope 0 at $DIR/inline-generator.rs:9:28: 9:31\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-generator.rs:+1:9: +1:11\n+          StorageLive(_2);                 // scope 0 at $DIR/inline-generator.rs:+1:14: +1:32\n+          StorageLive(_3);                 // scope 0 at $DIR/inline-generator.rs:+1:23: +1:31\n+          StorageLive(_4);                 // scope 0 at $DIR/inline-generator.rs:+1:28: +1:31\n+-         _4 = g() -> bb1;                 // scope 0 at $DIR/inline-generator.rs:+1:28: +1:31\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-generator.rs:9:28: 9:29\n -                                          // + literal: Const { ty: fn() -> impl Generator<bool> {g}, val: Value(<ZST>) }\n -     }\n - \n -     bb1: {\n-+         Deinit(_4);                      // scope 2 at $DIR/inline-generator.rs:15:5: 15:41\n-+         discriminant(_4) = 0;            // scope 2 at $DIR/inline-generator.rs:15:5: 15:41\n-          _3 = &mut _4;                    // scope 0 at $DIR/inline-generator.rs:9:23: 9:31\n--         _2 = Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:8]>::new(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:9:14: 9:32\n++         Deinit(_4);                      // scope 2 at $DIR/inline-generator.rs:+7:5: +7:41\n++         discriminant(_4) = 0;            // scope 2 at $DIR/inline-generator.rs:+7:5: +7:41\n+          _3 = &mut _4;                    // scope 0 at $DIR/inline-generator.rs:+1:23: +1:31\n+-         _2 = Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:8]>::new(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:+1:14: +1:32\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-generator.rs:9:14: 9:22\n -                                          // + user_ty: UserType(0)\n@@ -66,91 +66,91 @@\n +         (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]) = move _6; // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         StorageDead(_6);                 // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         StorageDead(_5);                 // scope 4 at $SRC_DIR/core/src/pin.rs:LL:COL\n-          StorageDead(_3);                 // scope 0 at $DIR/inline-generator.rs:9:31: 9:32\n--         _1 = <[generator@$DIR/inline-generator.rs:15:5: 15:8] as Generator<bool>>::resume(move _2, const false) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n+          StorageDead(_3);                 // scope 0 at $DIR/inline-generator.rs:+1:31: +1:32\n+-         _1 = <[generator@$DIR/inline-generator.rs:15:5: 15:8] as Generator<bool>>::resume(move _2, const false) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-generator.rs:9:33: 9:39\n -                                          // + literal: Const { ty: for<'r> fn(Pin<&'r mut [generator@$DIR/inline-generator.rs:15:5: 15:8]>, bool) -> GeneratorState<<[generator@$DIR/inline-generator.rs:15:5: 15:8] as Generator<bool>>::Yield, <[generator@$DIR/inline-generator.rs:15:5: 15:8] as Generator<bool>>::Return> {<[generator@$DIR/inline-generator.rs:15:5: 15:8] as Generator<bool>>::resume}, val: Value(<ZST>) }\n-+         StorageLive(_7);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n-+         _7 = const false;                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n-+         StorageLive(_10);                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n-+         StorageLive(_11);                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n-+         StorageLive(_12);                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n-+         StorageLive(_13);                // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n-+         _13 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n-+         _12 = discriminant((*_13));      // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n-+         StorageDead(_13);                // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n-+         switchInt(move _12) -> [0_u32: bb3, 1_u32: bb8, 3_u32: bb7, otherwise: bb9]; // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         StorageLive(_7);                 // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n++         _7 = const false;                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n++         StorageLive(_10);                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n++         StorageLive(_11);                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n++         StorageLive(_12);                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n++         StorageLive(_13);                // scope 6 at $DIR/inline-generator.rs:+7:5: +7:8\n++         _13 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:+7:5: +7:8\n++         _12 = discriminant((*_13));      // scope 6 at $DIR/inline-generator.rs:+7:5: +7:8\n++         StorageDead(_13);                // scope 6 at $DIR/inline-generator.rs:+7:5: +7:8\n++         switchInt(move _12) -> [0_u32: bb3, 1_u32: bb8, 3_u32: bb7, otherwise: bb9]; // scope 6 at $DIR/inline-generator.rs:+7:5: +7:8\n       }\n   \n -     bb3: {\n +     bb1: {\n-+         StorageDead(_12);                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n-+         StorageDead(_11);                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n-+         StorageDead(_10);                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n-+         StorageDead(_7);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n-          StorageDead(_2);                 // scope 0 at $DIR/inline-generator.rs:9:45: 9:46\n-          StorageDead(_4);                 // scope 0 at $DIR/inline-generator.rs:9:46: 9:47\n-          _0 = const ();                   // scope 0 at $DIR/inline-generator.rs:8:11: 10:2\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-generator.rs:10:1: 10:2\n-          return;                          // scope 0 at $DIR/inline-generator.rs:10:2: 10:2\n++         StorageDead(_12);                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n++         StorageDead(_11);                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n++         StorageDead(_10);                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n++         StorageDead(_7);                 // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n+          StorageDead(_2);                 // scope 0 at $DIR/inline-generator.rs:+1:45: +1:46\n+          StorageDead(_4);                 // scope 0 at $DIR/inline-generator.rs:+1:46: +1:47\n+          _0 = const ();                   // scope 0 at $DIR/inline-generator.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-generator.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/inline-generator.rs:+2:2: +2:2\n       }\n   \n -     bb4 (cleanup): {\n +     bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/inline-generator.rs:8:1: 10:2\n+          resume;                          // scope 0 at $DIR/inline-generator.rs:+0:1: +2:2\n +     }\n + \n +     bb3: {\n-+         _11 = move _7;                   // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n-+         StorageLive(_8);                 // scope 6 at $DIR/inline-generator.rs:15:17: 15:39\n-+         StorageLive(_9);                 // scope 6 at $DIR/inline-generator.rs:15:20: 15:21\n-+         _9 = _11;                        // scope 6 at $DIR/inline-generator.rs:15:20: 15:21\n-+         switchInt(move _9) -> [false: bb5, otherwise: bb4]; // scope 6 at $DIR/inline-generator.rs:15:20: 15:21\n++         _11 = move _7;                   // scope 6 at $DIR/inline-generator.rs:+7:5: +7:8\n++         StorageLive(_8);                 // scope 6 at $DIR/inline-generator.rs:+7:17: +7:39\n++         StorageLive(_9);                 // scope 6 at $DIR/inline-generator.rs:+7:20: +7:21\n++         _9 = _11;                        // scope 6 at $DIR/inline-generator.rs:+7:20: +7:21\n++         switchInt(move _9) -> [false: bb5, otherwise: bb4]; // scope 6 at $DIR/inline-generator.rs:+7:20: +7:21\n +     }\n + \n +     bb4: {\n-+         _8 = const 7_i32;                // scope 6 at $DIR/inline-generator.rs:15:24: 15:25\n-+         goto -> bb6;                     // scope 6 at $DIR/inline-generator.rs:15:17: 15:39\n++         _8 = const 7_i32;                // scope 6 at $DIR/inline-generator.rs:+7:24: +7:25\n++         goto -> bb6;                     // scope 6 at $DIR/inline-generator.rs:+7:17: +7:39\n +     }\n + \n +     bb5: {\n-+         _8 = const 13_i32;               // scope 6 at $DIR/inline-generator.rs:15:35: 15:37\n-+         goto -> bb6;                     // scope 6 at $DIR/inline-generator.rs:15:17: 15:39\n++         _8 = const 13_i32;               // scope 6 at $DIR/inline-generator.rs:+7:35: +7:37\n++         goto -> bb6;                     // scope 6 at $DIR/inline-generator.rs:+7:17: +7:39\n +     }\n + \n +     bb6: {\n-+         StorageDead(_9);                 // scope 6 at $DIR/inline-generator.rs:15:38: 15:39\n-+         Deinit(_1);                      // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n-+         ((_1 as Yielded).0: i32) = move _8; // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n-+         discriminant(_1) = 0;            // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n-+         StorageLive(_14);                // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n-+         _14 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n-+         discriminant((*_14)) = 3;        // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n-+         StorageDead(_14);                // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n-+         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:15:11: 15:39\n++         StorageDead(_9);                 // scope 6 at $DIR/inline-generator.rs:+7:38: +7:39\n++         Deinit(_1);                      // scope 6 at $DIR/inline-generator.rs:+7:11: +7:39\n++         ((_1 as Yielded).0: i32) = move _8; // scope 6 at $DIR/inline-generator.rs:+7:11: +7:39\n++         discriminant(_1) = 0;            // scope 6 at $DIR/inline-generator.rs:+7:11: +7:39\n++         StorageLive(_14);                // scope 6 at $DIR/inline-generator.rs:+7:11: +7:39\n++         _14 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:+7:11: +7:39\n++         discriminant((*_14)) = 3;        // scope 6 at $DIR/inline-generator.rs:+7:11: +7:39\n++         StorageDead(_14);                // scope 6 at $DIR/inline-generator.rs:+7:11: +7:39\n++         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:+7:11: +7:39\n +     }\n + \n +     bb7: {\n-+         StorageLive(_8);                 // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n-+         _10 = move _7;                   // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n-+         StorageDead(_8);                 // scope 6 at $DIR/inline-generator.rs:15:38: 15:39\n-+         Deinit(_1);                      // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n-+         ((_1 as Complete).0: bool) = move _10; // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n-+         discriminant(_1) = 1;            // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n-+         StorageLive(_15);                // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n-+         _15 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n-+         discriminant((*_15)) = 1;        // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n-+         StorageDead(_15);                // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n-+         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:15:8: 15:8\n++         StorageLive(_8);                 // scope 6 at $DIR/inline-generator.rs:+7:5: +7:8\n++         _10 = move _7;                   // scope 6 at $DIR/inline-generator.rs:+7:5: +7:8\n++         StorageDead(_8);                 // scope 6 at $DIR/inline-generator.rs:+7:38: +7:39\n++         Deinit(_1);                      // scope 6 at $DIR/inline-generator.rs:+7:8: +7:8\n++         ((_1 as Complete).0: bool) = move _10; // scope 6 at $DIR/inline-generator.rs:+7:8: +7:8\n++         discriminant(_1) = 1;            // scope 6 at $DIR/inline-generator.rs:+7:8: +7:8\n++         StorageLive(_15);                // scope 6 at $DIR/inline-generator.rs:+7:8: +7:8\n++         _15 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:+7:8: +7:8\n++         discriminant((*_15)) = 1;        // scope 6 at $DIR/inline-generator.rs:+7:8: +7:8\n++         StorageDead(_15);                // scope 6 at $DIR/inline-generator.rs:+7:8: +7:8\n++         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:+7:8: +7:8\n +     }\n + \n +     bb8: {\n-+         assert(const false, \"generator resumed after completion\") -> [success: bb8, unwind: bb2]; // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         assert(const false, \"generator resumed after completion\") -> [success: bb8, unwind: bb2]; // scope 6 at $DIR/inline-generator.rs:+7:5: +7:8\n +     }\n + \n +     bb9: {\n-+         unreachable;                     // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         unreachable;                     // scope 6 at $DIR/inline-generator.rs:+7:5: +7:8\n       }\n   }\n   "}, {"sha": "e3375e9e15cb3dbec059f98aa19b2b4056bc9e5f", "filename": "src/test/mir-opt/inline/inline_instruction_set.default.Inline.diff", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.default.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.default.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.default.Inline.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,47 +2,47 @@\n + // MIR for `default` after Inline\n   \n   fn default() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-instruction-set.rs:50:18: 50:18\n-      let _1: ();                          // in scope 0 at $DIR/inline-instruction-set.rs:51:5: 51:26\n-      let _2: ();                          // in scope 0 at $DIR/inline-instruction-set.rs:52:5: 52:26\n-      let _3: ();                          // in scope 0 at $DIR/inline-instruction-set.rs:53:5: 53:30\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-instruction-set.rs:+0:18: +0:18\n+      let _1: ();                          // in scope 0 at $DIR/inline-instruction-set.rs:+1:5: +1:26\n+      let _2: ();                          // in scope 0 at $DIR/inline-instruction-set.rs:+2:5: +2:26\n+      let _3: ();                          // in scope 0 at $DIR/inline-instruction-set.rs:+3:5: +3:30\n +     scope 1 (inlined instruction_set_default) { // at $DIR/inline-instruction-set.rs:53:5: 53:30\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-instruction-set.rs:51:5: 51:26\n-          _1 = instruction_set_a32() -> bb1; // scope 0 at $DIR/inline-instruction-set.rs:51:5: 51:26\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-instruction-set.rs:+1:5: +1:26\n+          _1 = instruction_set_a32() -> bb1; // scope 0 at $DIR/inline-instruction-set.rs:+1:5: +1:26\n                                            // mir::Constant\n                                            // + span: $DIR/inline-instruction-set.rs:51:5: 51:24\n                                            // + literal: Const { ty: fn() {instruction_set_a32}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-instruction-set.rs:51:26: 51:27\n-          StorageLive(_2);                 // scope 0 at $DIR/inline-instruction-set.rs:52:5: 52:26\n-          _2 = instruction_set_t32() -> bb2; // scope 0 at $DIR/inline-instruction-set.rs:52:5: 52:26\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-instruction-set.rs:+1:26: +1:27\n+          StorageLive(_2);                 // scope 0 at $DIR/inline-instruction-set.rs:+2:5: +2:26\n+          _2 = instruction_set_t32() -> bb2; // scope 0 at $DIR/inline-instruction-set.rs:+2:5: +2:26\n                                            // mir::Constant\n                                            // + span: $DIR/inline-instruction-set.rs:52:5: 52:24\n                                            // + literal: Const { ty: fn() {instruction_set_t32}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n-          StorageDead(_2);                 // scope 0 at $DIR/inline-instruction-set.rs:52:26: 52:27\n-          StorageLive(_3);                 // scope 0 at $DIR/inline-instruction-set.rs:53:5: 53:30\n--         _3 = instruction_set_default() -> bb3; // scope 0 at $DIR/inline-instruction-set.rs:53:5: 53:30\n+          StorageDead(_2);                 // scope 0 at $DIR/inline-instruction-set.rs:+2:26: +2:27\n+          StorageLive(_3);                 // scope 0 at $DIR/inline-instruction-set.rs:+3:5: +3:30\n+-         _3 = instruction_set_default() -> bb3; // scope 0 at $DIR/inline-instruction-set.rs:+3:5: +3:30\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-instruction-set.rs:53:5: 53:28\n -                                          // + literal: Const { ty: fn() {instruction_set_default}, val: Value(<ZST>) }\n -     }\n - \n -     bb3: {\n-          StorageDead(_3);                 // scope 0 at $DIR/inline-instruction-set.rs:53:30: 53:31\n-          _0 = const ();                   // scope 0 at $DIR/inline-instruction-set.rs:50:18: 54:2\n-          return;                          // scope 0 at $DIR/inline-instruction-set.rs:54:2: 54:2\n+          StorageDead(_3);                 // scope 0 at $DIR/inline-instruction-set.rs:+3:30: +3:31\n+          _0 = const ();                   // scope 0 at $DIR/inline-instruction-set.rs:+0:18: +4:2\n+          return;                          // scope 0 at $DIR/inline-instruction-set.rs:+4:2: +4:2\n +     }\n + \n +     bb3 (cleanup): {\n-+         resume;                          // scope 0 at $DIR/inline-instruction-set.rs:50:1: 54:2\n++         resume;                          // scope 0 at $DIR/inline-instruction-set.rs:+0:1: +4:2\n       }\n   }\n   "}, {"sha": "ce294db02fdd5e46acf2c6b26d7a8450f126e294", "filename": "src/test/mir-opt/inline/inline_instruction_set.t32.Inline.diff", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.t32.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.t32.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_instruction_set.t32.Inline.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,49 +2,49 @@\n + // MIR for `t32` after Inline\n   \n   fn t32() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-instruction-set.rs:41:14: 41:14\n-      let _1: ();                          // in scope 0 at $DIR/inline-instruction-set.rs:42:5: 42:26\n-      let _2: ();                          // in scope 0 at $DIR/inline-instruction-set.rs:43:5: 43:26\n-      let _3: ();                          // in scope 0 at $DIR/inline-instruction-set.rs:46:5: 46:30\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-instruction-set.rs:+0:14: +0:14\n+      let _1: ();                          // in scope 0 at $DIR/inline-instruction-set.rs:+1:5: +1:26\n+      let _2: ();                          // in scope 0 at $DIR/inline-instruction-set.rs:+2:5: +2:26\n+      let _3: ();                          // in scope 0 at $DIR/inline-instruction-set.rs:+5:5: +5:30\n +     scope 1 (inlined instruction_set_t32) { // at $DIR/inline-instruction-set.rs:43:5: 43:26\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-instruction-set.rs:42:5: 42:26\n-          _1 = instruction_set_a32() -> bb1; // scope 0 at $DIR/inline-instruction-set.rs:42:5: 42:26\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-instruction-set.rs:+1:5: +1:26\n+          _1 = instruction_set_a32() -> bb1; // scope 0 at $DIR/inline-instruction-set.rs:+1:5: +1:26\n                                            // mir::Constant\n                                            // + span: $DIR/inline-instruction-set.rs:42:5: 42:24\n                                            // + literal: Const { ty: fn() {instruction_set_a32}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-instruction-set.rs:42:26: 42:27\n-          StorageLive(_2);                 // scope 0 at $DIR/inline-instruction-set.rs:43:5: 43:26\n--         _2 = instruction_set_t32() -> bb2; // scope 0 at $DIR/inline-instruction-set.rs:43:5: 43:26\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-instruction-set.rs:+1:26: +1:27\n+          StorageLive(_2);                 // scope 0 at $DIR/inline-instruction-set.rs:+2:5: +2:26\n+-         _2 = instruction_set_t32() -> bb2; // scope 0 at $DIR/inline-instruction-set.rs:+2:5: +2:26\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-instruction-set.rs:43:5: 43:24\n -                                          // + literal: Const { ty: fn() {instruction_set_t32}, val: Value(<ZST>) }\n -     }\n - \n -     bb2: {\n-          StorageDead(_2);                 // scope 0 at $DIR/inline-instruction-set.rs:43:26: 43:27\n-          StorageLive(_3);                 // scope 0 at $DIR/inline-instruction-set.rs:46:5: 46:30\n--         _3 = instruction_set_default() -> bb3; // scope 0 at $DIR/inline-instruction-set.rs:46:5: 46:30\n-+         _3 = instruction_set_default() -> bb2; // scope 0 at $DIR/inline-instruction-set.rs:46:5: 46:30\n+          StorageDead(_2);                 // scope 0 at $DIR/inline-instruction-set.rs:+2:26: +2:27\n+          StorageLive(_3);                 // scope 0 at $DIR/inline-instruction-set.rs:+5:5: +5:30\n+-         _3 = instruction_set_default() -> bb3; // scope 0 at $DIR/inline-instruction-set.rs:+5:5: +5:30\n++         _3 = instruction_set_default() -> bb2; // scope 0 at $DIR/inline-instruction-set.rs:+5:5: +5:30\n                                            // mir::Constant\n                                            // + span: $DIR/inline-instruction-set.rs:46:5: 46:28\n                                            // + literal: Const { ty: fn() {instruction_set_default}, val: Value(<ZST>) }\n       }\n   \n -     bb3: {\n +     bb2: {\n-          StorageDead(_3);                 // scope 0 at $DIR/inline-instruction-set.rs:46:30: 46:31\n-          _0 = const ();                   // scope 0 at $DIR/inline-instruction-set.rs:41:14: 47:2\n-          return;                          // scope 0 at $DIR/inline-instruction-set.rs:47:2: 47:2\n+          StorageDead(_3);                 // scope 0 at $DIR/inline-instruction-set.rs:+5:30: +5:31\n+          _0 = const ();                   // scope 0 at $DIR/inline-instruction-set.rs:+0:14: +6:2\n+          return;                          // scope 0 at $DIR/inline-instruction-set.rs:+6:2: +6:2\n +     }\n + \n +     bb3 (cleanup): {\n-+         resume;                          // scope 0 at $DIR/inline-instruction-set.rs:41:1: 47:2\n++         resume;                          // scope 0 at $DIR/inline-instruction-set.rs:+0:1: +6:2\n       }\n   }\n   "}, {"sha": "deaba70e082edfa8ec5de83861623b0338349b3d", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.32bit.diff", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,18 +2,18 @@\n + // MIR for `main` after Inline\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-into-box-place.rs:7:11: 7:11\n-      let _1: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n-      let mut _2: usize;                   // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-      let mut _3: usize;                   // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-      let mut _4: *mut u8;                 // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-      let mut _5: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-      let mut _6: ();                      // in scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n-      let mut _7: *const std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-      let mut _8: *const std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-+     let mut _9: &mut std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-into-box-place.rs:+0:11: +0:11\n+      let _1: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:9: +1:11\n+      let mut _2: usize;                   // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n+      let mut _3: usize;                   // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n+      let mut _4: *mut u8;                 // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n+      let mut _5: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n+      let mut _6: ();                      // in scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43\n+      let mut _7: *const std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n+      let mut _8: *const std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n++     let mut _9: &mut std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n       scope 1 {\n-          debug _x => _1;                  // in scope 1 at $DIR/inline-into-box-place.rs:8:9: 8:11\n+          debug _x => _1;                  // in scope 1 at $DIR/inline-into-box-place.rs:+1:9: +1:11\n       }\n       scope 2 {\n       }\n@@ -22,23 +22,23 @@\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n-          _2 = SizeOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-          _3 = AlignOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-          _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 2 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:9: +1:11\n+          _2 = SizeOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n+          _3 = AlignOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n+          _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 2 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n                                            // mir::Constant\n                                            // + span: $DIR/inline-into-box-place.rs:8:29: 8:43\n                                            // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageLive(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-          _5 = ShallowInitBox(move _4, std::vec::Vec<u32>); // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-          StorageLive(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-          _7 = (((_5.0: std::ptr::Unique<std::vec::Vec<u32>>).0: std::ptr::NonNull<std::vec::Vec<u32>>).0: *const std::vec::Vec<u32>); // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n--         (*_7) = Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         StorageLive(_9);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         _9 = &mut (*_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+          StorageLive(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n+          _5 = ShallowInitBox(move _4, std::vec::Vec<u32>); // scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n+          StorageLive(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n+          _7 = (((_5.0: std::ptr::Unique<std::vec::Vec<u32>>).0: std::ptr::NonNull<std::vec::Vec<u32>>).0: *const std::vec::Vec<u32>); // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n+-         (*_7) = Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n++         StorageLive(_9);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n++         _9 = &mut (*_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n +         StorageLive(_10);                // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         _10 = const alloc::raw_vec::RawVec::<u32>::NEW; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n                                            // mir::Constant\n@@ -55,32 +55,32 @@\n +         ((*_9).0: alloc::raw_vec::RawVec<u32>) = move _10; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         ((*_9).1: usize) = const 0_usize; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         StorageDead(_10);                // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         StorageDead(_9);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-          StorageDead(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-          _1 = move _5;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-          StorageDead(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n-          _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n--         drop(_1) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n-+         drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n++         StorageDead(_9);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n+          StorageDead(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n+          _1 = move _5;                    // scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n+          StorageDead(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43\n+          _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:+0:11: +2:2\n+-         drop(_1) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/inline-into-box-place.rs:+2:1: +2:2\n++         drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/inline-into-box-place.rs:+2:1: +2:2\n       }\n   \n -     bb3: {\n +     bb2: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n-          return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/inline-into-box-place.rs:+2:2: +2:2\n       }\n   \n -     bb4 (cleanup): {\n--         StorageDead(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n--         _6 = alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>(move (_5.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_5.1: std::alloc::Global)) -> bb5; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-         StorageDead(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n+-         _6 = alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>(move (_5.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_5.1: std::alloc::Global)) -> bb5; // scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // + literal: Const { ty: unsafe fn(Unique<Vec<u32>>, std::alloc::Global) {alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>}, val: Value(<ZST>) }\n -     }\n - \n -     bb5 (cleanup): {\n +     bb3 (cleanup): {\n-          resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n+          resume;                          // scope 0 at $DIR/inline-into-box-place.rs:+0:1: +2:2\n       }\n   }\n   "}, {"sha": "deaba70e082edfa8ec5de83861623b0338349b3d", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.64bit.diff", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273", "patch": "@@ -2,18 +2,18 @@\n + // MIR for `main` after Inline\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-into-box-place.rs:7:11: 7:11\n-      let _1: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n-      let mut _2: usize;                   // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-      let mut _3: usize;                   // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-      let mut _4: *mut u8;                 // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-      let mut _5: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-      let mut _6: ();                      // in scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n-      let mut _7: *const std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-      let mut _8: *const std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-+     let mut _9: &mut std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-into-box-place.rs:+0:11: +0:11\n+      let _1: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:9: +1:11\n+      let mut _2: usize;                   // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n+      let mut _3: usize;                   // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n+      let mut _4: *mut u8;                 // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n+      let mut _5: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n+      let mut _6: ();                      // in scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43\n+      let mut _7: *const std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n+      let mut _8: *const std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n++     let mut _9: &mut std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n       scope 1 {\n-          debug _x => _1;                  // in scope 1 at $DIR/inline-into-box-place.rs:8:9: 8:11\n+          debug _x => _1;                  // in scope 1 at $DIR/inline-into-box-place.rs:+1:9: +1:11\n       }\n       scope 2 {\n       }\n@@ -22,23 +22,23 @@\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n-          _2 = SizeOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-          _3 = AlignOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-          _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 2 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:9: +1:11\n+          _2 = SizeOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n+          _3 = AlignOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n+          _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 2 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n                                            // mir::Constant\n                                            // + span: $DIR/inline-into-box-place.rs:8:29: 8:43\n                                            // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageLive(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-          _5 = ShallowInitBox(move _4, std::vec::Vec<u32>); // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-          StorageLive(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-          _7 = (((_5.0: std::ptr::Unique<std::vec::Vec<u32>>).0: std::ptr::NonNull<std::vec::Vec<u32>>).0: *const std::vec::Vec<u32>); // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n--         (*_7) = Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         StorageLive(_9);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         _9 = &mut (*_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+          StorageLive(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n+          _5 = ShallowInitBox(move _4, std::vec::Vec<u32>); // scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n+          StorageLive(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n+          _7 = (((_5.0: std::ptr::Unique<std::vec::Vec<u32>>).0: std::ptr::NonNull<std::vec::Vec<u32>>).0: *const std::vec::Vec<u32>); // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n+-         (*_7) = Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n++         StorageLive(_9);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n++         _9 = &mut (*_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n +         StorageLive(_10);                // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         _10 = const alloc::raw_vec::RawVec::<u32>::NEW; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n                                            // mir::Constant\n@@ -55,32 +55,32 @@\n +         ((*_9).0: alloc::raw_vec::RawVec<u32>) = move _10; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         ((*_9).1: usize) = const 0_usize; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         StorageDead(_10);                // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         StorageDead(_9);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-          StorageDead(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-          _1 = move _5;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-          StorageDead(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n-          _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n--         drop(_1) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n-+         drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n++         StorageDead(_9);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n+          StorageDead(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n+          _1 = move _5;                    // scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n+          StorageDead(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43\n+          _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:+0:11: +2:2\n+-         drop(_1) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/inline-into-box-place.rs:+2:1: +2:2\n++         drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/inline-into-box-place.rs:+2:1: +2:2\n       }\n   \n -     bb3: {\n +     bb2: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n-          return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/inline-into-box-place.rs:+2:2: +2:2\n       }\n   \n -     bb4 (cleanup): {\n--         StorageDead(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n--         _6 = alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>(move (_5.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_5.1: std::alloc::Global)) -> bb5; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-         StorageDead(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n+-         _6 = alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>(move (_5.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_5.1: std::alloc::Global)) -> bb5; // scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // + literal: Const { ty: unsafe fn(Unique<Vec<u32>>, std::alloc::Global) {alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>}, val: Value(<ZST>) }\n -     }\n - \n -     bb5 (cleanup): {\n +     bb3 (cleanup): {\n-          resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n+          resume;                          // scope 0 at $DIR/inline-into-box-place.rs:+0:1: +2:2\n       }\n   }\n   "}, {"sha": "49c72b7196c412b9159b358ff5f251f5b81132cd", "filename": "src/test/mir-opt/inline/inline_options.main.Inline.after.mir", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "0ea8823156c1258aed050dab06294d2ede8c143a", "filename": "src/test/mir-opt/inline/inline_retag.bar.Inline.after.mir", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "e69af791622640b247f4b2b6a2afb4ec9703b77a", "filename": "src/test/mir-opt/inline/inline_shims.clone.Inline.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "8c1c383ee25dc551c3cd33920cbada010b3714c5", "filename": "src/test/mir-opt/inline/inline_shims.drop.Inline.diff", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "6c71311c7d434e79be1955845bc1917953b562b5", "filename": "src/test/mir-opt/inline/inline_specialization.main.Inline.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "ed95edd16ce791bcaa7584e2e9c42c1d25045953", "filename": "src/test/mir-opt/inline/inline_trait_method.test.Inline.after.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "36875d07ca42952d770a8d98e9e998a3ee7b0914", "filename": "src/test/mir-opt/inline/inline_trait_method_2.test2.Inline.after.mir", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "e715ff83598f3da6331935dee2b954cf436a65d7", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.a.Inline.after.mir", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.a.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.a.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.a.Inline.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "8bacced23bd6b8b1a775d526beea41b9b4b756c0", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "233a1788288fa7c784d60391c62284d5ef3fbde5", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.c.Inline.after.mir", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.c.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.c.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.c.Inline.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "5b4aeee9e2b5c5ec0e3dada6548f4a3b7a445001", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "769ff89fdb7add0e93dfb37d3b620b494d58a181", "filename": "src/test/mir-opt/inline/issue_76997_inline_scopes_parenting.main.Inline.after.mir", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "c16dfdf395eccb9c20af56eb6112c517b1caea17", "filename": "src/test/mir-opt/inline/issue_78442.bar.Inline.diff", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "0faa522cbaa9cb907ba747e1082e0992c6662a63", "filename": "src/test/mir-opt/inline/issue_78442.bar.RevealAll.diff", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "b78ef36eadd9808fefc8aa909ac9080a99444639", "filename": "src/test/mir-opt/instrument_coverage.bar.InstrumentCoverage.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finstrument_coverage.bar.InstrumentCoverage.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finstrument_coverage.bar.InstrumentCoverage.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage.bar.InstrumentCoverage.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "0490c0df2e6051930329f47630ebd36e451727ef", "filename": "src/test/mir-opt/instrument_coverage.main.InstrumentCoverage.diff", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "b13987f7360e6a07eaace1cf376aefd24270b739", "filename": "src/test/mir-opt/issue_38669.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "1d7cb91d6a7e8515a0058ea1aa805ea38563025c", "filename": "src/test/mir-opt/issue_41110.main.ElaborateDrops.after.mir", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "b0e3496b2c8ebd638b921d86cc710b4dc250173c", "filename": "src/test/mir-opt/issue_41110.test.ElaborateDrops.after.mir", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "047b24db46643fe1aaed39e2f6cac7d355fc70b6", "filename": "src/test/mir-opt/issue_41697.{impl#0}-{constant#0}.SimplifyCfg-promote-consts.after.32bit.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.32bit.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "047b24db46643fe1aaed39e2f6cac7d355fc70b6", "filename": "src/test/mir-opt/issue_41697.{impl#0}-{constant#0}.SimplifyCfg-promote-consts.after.64bit.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.64bit.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "f95a0a1c013bcfd4d5abad3ee736bcf29ba9c997", "filename": "src/test/mir-opt/issue_41888.main.ElaborateDrops.after.mir", "status": "modified", "additions": 72, "deletions": 72, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "821323b5e2426fbe4d8ab963f10b7efe893a6d7d", "filename": "src/test/mir-opt/issue_49232.main.mir_map.0.mir", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "72603dc5dbea270c93235c68f5d846ef15437bb8", "filename": "src/test/mir-opt/issue_62289.test.ElaborateDrops.before.mir", "status": "modified", "additions": 57, "deletions": 57, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "972ce1d5078543d60d5d2c4700885c6fb2d42575", "filename": "src/test/mir-opt/issue_72181.bar.mir_map.0.32bit.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.32bit.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "972ce1d5078543d60d5d2c4700885c6fb2d42575", "filename": "src/test/mir-opt/issue_72181.bar.mir_map.0.64bit.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.64bit.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "534f131ea936b44f719c4fc8da5067aacd02fc24", "filename": "src/test/mir-opt/issue_72181.foo.mir_map.0.32bit.mir", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.32bit.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "534f131ea936b44f719c4fc8da5067aacd02fc24", "filename": "src/test/mir-opt/issue_72181.foo.mir_map.0.64bit.mir", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.64bit.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "425906f84fcd6a42b784d21b7afd8b8629b22407", "filename": "src/test/mir-opt/issue_72181.main.mir_map.0.32bit.mir", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.32bit.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "425906f84fcd6a42b784d21b7afd8b8629b22407", "filename": "src/test/mir-opt/issue_72181.main.mir_map.0.64bit.mir", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "e1a35d88bf1d9c0ba4652d8fd30e4fff117394c5", "filename": "src/test/mir-opt/issue_72181_1.f.mir_map.0.mir", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_72181_1.f.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_72181_1.f.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181_1.f.mir_map.0.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "336693337fb5766f09e4a40ab878397df5f7bb94", "filename": "src/test/mir-opt/issue_72181_1.main.mir_map.0.mir", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "be8e86a832cb6af8dff995304fd13afdb17e3146", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.32bit.diff", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "be8e86a832cb6af8dff995304fd13afdb17e3146", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "50948180fc46ef2e44ee1a517a9fd21e3f6b4fb3", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "50948180fc46ef2e44ee1a517a9fd21e3f6b4fb3", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "2368c021eda574375eb7f87e7212576871e48cef", "filename": "src/test/mir-opt/issue_76432.test.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 87, "deletions": 87, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "8ec94d65fda5260775092cf55c61d3a56aae9a3b", "filename": "src/test/mir-opt/issue_78192.f.InstCombine.diff", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_78192.f.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_78192.f.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_78192.f.InstCombine.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "5bca9f0ea989394de4768609e5e30cfd1bc36d0f", "filename": "src/test/mir-opt/issue_99325.main.mir_map.0.mir", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_99325.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissue_99325.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_99325.main.mir_map.0.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "86b38d4b70adc630f61873159099fd99604a3eba", "filename": "src/test/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "2ee4332ad3827117f1528f2356e76284268a8b4a", "filename": "src/test/mir-opt/issues/issue_75439.foo.MatchBranchSimplification.diff", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "5981ab885f90c9beea07295c5c0ef9e38a95a110", "filename": "src/test/mir-opt/loop_test.main.SimplifyCfg-promote-consts.after.mir", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "2589c9f282f33676bf9e36803bb1320454c3bdec", "filename": "src/test/mir-opt/lower_array_len.array_bound.InstCombine.diff", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.InstCombine.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "049bbeac867f90a036751cca8a500e072a8e45d9", "filename": "src/test/mir-opt/lower_array_len.array_bound.NormalizeArrayLen.diff", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.NormalizeArrayLen.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "8312db6b37b350f78e22f1dc7eeca5b5b47141ad", "filename": "src/test/mir-opt/lower_array_len.array_bound.SimplifyLocals.diff", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.SimplifyLocals.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "401d4bac61e008f7bf3050eb67bc974736e8cc52", "filename": "src/test/mir-opt/lower_array_len.array_bound_mut.InstCombine.diff", "status": "modified", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.InstCombine.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "40ec01eeb41a61167fce7775f2ac7287e1fa08b9", "filename": "src/test/mir-opt/lower_array_len.array_bound_mut.NormalizeArrayLen.diff", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.NormalizeArrayLen.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "4f241d7c9064b34f3f538a73659c667c33ddbc8c", "filename": "src/test/mir-opt/lower_array_len.array_bound_mut.SimplifyLocals.diff", "status": "modified", "additions": 69, "deletions": 69, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.SimplifyLocals.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "26f45be17be6f85b8950b30af0168330aa86b8d4", "filename": "src/test/mir-opt/lower_array_len.array_len.InstCombine.diff", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.InstCombine.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "3ed68f5f7256872070e47f02585ce5771aa492cf", "filename": "src/test/mir-opt/lower_array_len.array_len.NormalizeArrayLen.diff", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.NormalizeArrayLen.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "09d571d20a369771fb35fea15735584a789b51b0", "filename": "src/test/mir-opt/lower_array_len.array_len.SimplifyLocals.diff", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.SimplifyLocals.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "843da758deb1c3cea8b244c8cb116e41d8e737df", "filename": "src/test/mir-opt/lower_array_len.array_len_by_value.InstCombine.diff", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.InstCombine.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "f0e0cdcfdc0e4e2f85e6f28d31b8d2c681bf628b", "filename": "src/test/mir-opt/lower_array_len.array_len_by_value.NormalizeArrayLen.diff", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.NormalizeArrayLen.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "dc1c00b69c138403b43069cf0227879ba77a8c69", "filename": "src/test/mir-opt/lower_array_len.array_len_by_value.SimplifyLocals.diff", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.SimplifyLocals.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "6866bcf9b8a7f17da6c0bc65e80803e15bd7677b", "filename": "src/test/mir-opt/lower_intrinsics.align_of.LowerIntrinsics.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_intrinsics.align_of.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_intrinsics.align_of.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.align_of.LowerIntrinsics.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "032a6a01b7fe2f9b93d966b05800e018452019bf", "filename": "src/test/mir-opt/lower_intrinsics.discriminant.LowerIntrinsics.diff", "status": "modified", "additions": 71, "deletions": 71, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "9e4de2ac068e585d4224b3913dc25162b3adc682", "filename": "src/test/mir-opt/lower_intrinsics.f_u64.PreCodegen.before.mir", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_u64.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_u64.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_u64.PreCodegen.before.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "9a6c0457f92c90a3e939ec475837760aef44f514", "filename": "src/test/mir-opt/lower_intrinsics.f_unit.PreCodegen.before.mir", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_unit.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_unit.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_unit.PreCodegen.before.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "50c86e61949dd52725b7ff638b078d7718afd514", "filename": "src/test/mir-opt/lower_intrinsics.forget.LowerIntrinsics.diff", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "01591e17624d785e091031f8536c737e072781fd", "filename": "src/test/mir-opt/lower_intrinsics.non_const.LowerIntrinsics.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "7bc24fe7d673fbec3e46a66970ffd744413646d6", "filename": "src/test/mir-opt/lower_intrinsics.size_of.LowerIntrinsics.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "581926ab163e8276aff7a13674b2f6dc88c5cff3", "filename": "src/test/mir-opt/lower_intrinsics.unreachable.LowerIntrinsics.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "b0fa55bdd4c6db17de58bb24d8b531d1028447ac", "filename": "src/test/mir-opt/lower_intrinsics.wrapping.LowerIntrinsics.diff", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_intrinsics.wrapping.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_intrinsics.wrapping.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.wrapping.LowerIntrinsics.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "46fccba56f7c88ccbd8eb30b1d13058be793e401", "filename": "src/test/mir-opt/lower_slice_len.bound.LowerSliceLenCalls.diff", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "25ab0c9f7f4c0410db47dd3605d355813128facd", "filename": "src/test/mir-opt/match_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "status": "modified", "additions": 145, "deletions": 145, "changes": 290, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "c05ed00f7539bb2ab112e37ef39bf9219692cae2", "filename": "src/test/mir-opt/match_false_edges.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 61, "deletions": 61, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "145ed878fc9e44b36db0674bb2fb23b1eb659383", "filename": "src/test/mir-opt/match_false_edges.full_tested_match2.PromoteTemps.before.mir", "status": "modified", "additions": 59, "deletions": 59, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "8f40e8a887f2df72eca934e4d700e4a00485cee7", "filename": "src/test/mir-opt/match_false_edges.main.PromoteTemps.before.mir", "status": "modified", "additions": 85, "deletions": 85, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "b184ffc404e6bb05d6eadcde84a7b86deda955f8", "filename": "src/test/mir-opt/match_test.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatch_test.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatch_test.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_test.main.SimplifyCfg-initial.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "2005c10efa93bf6700cae844553ddd21159e9fef", "filename": "src/test/mir-opt/matches_reduce_branches.bar.MatchBranchSimplification.32bit.diff", "status": "modified", "additions": 62, "deletions": 62, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.32bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "2005c10efa93bf6700cae844553ddd21159e9fef", "filename": "src/test/mir-opt/matches_reduce_branches.bar.MatchBranchSimplification.64bit.diff", "status": "modified", "additions": 62, "deletions": 62, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.64bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "b7862e5678f23598d3ba2afb8b144d73309b0cdb", "filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.32bit.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.32bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "b7862e5678f23598d3ba2afb8b144d73309b0cdb", "filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.64bit.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.64bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "a36ec8de4a391886bdfa5a4c1b51b03403637623", "filename": "src/test/mir-opt/matches_reduce_branches.foo.PreCodegen.before.32bit.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.PreCodegen.before.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.PreCodegen.before.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.PreCodegen.before.32bit.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "a36ec8de4a391886bdfa5a4c1b51b03403637623", "filename": "src/test/mir-opt/matches_reduce_branches.foo.PreCodegen.before.64bit.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.PreCodegen.before.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.PreCodegen.before.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.PreCodegen.before.64bit.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "672c6b34e94b612b6c2c5d9f1d933aa56855df17", "filename": "src/test/mir-opt/matches_reduce_branches.match_nested_if.MatchBranchSimplification.32bit.diff", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.32bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "672c6b34e94b612b6c2c5d9f1d933aa56855df17", "filename": "src/test/mir-opt/matches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "c42657b3855775f2135957276b5a95eb361ae3b5", "filename": "src/test/mir-opt/matches_u8.exhaustive_match.MatchBranchSimplification.32bit.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.32bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "c42657b3855775f2135957276b5a95eb361ae3b5", "filename": "src/test/mir-opt/matches_u8.exhaustive_match.MatchBranchSimplification.64bit.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.64bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "a4ff2e437db24080a41b2809c3b49bdb92015527", "filename": "src/test/mir-opt/matches_u8.exhaustive_match_i8.MatchBranchSimplification.32bit.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.32bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "a4ff2e437db24080a41b2809c3b49bdb92015527", "filename": "src/test/mir-opt/matches_u8.exhaustive_match_i8.MatchBranchSimplification.64bit.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.64bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "48a11c950639a945fa4bc706e8985c33cf07a843", "filename": "src/test/mir-opt/multiple_return_terminators.test.MultipleReturnTerminators.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmultiple_return_terminators.test.MultipleReturnTerminators.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fmultiple_return_terminators.test.MultipleReturnTerminators.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmultiple_return_terminators.test.MultipleReturnTerminators.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "cbfdf8c5d5639534007a373dd7ee25f7ce936b4a", "filename": "src/test/mir-opt/nll/named_lifetimes_basic.use_x.nll.0.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "55e7faf9ee47bde7e825b35863979454b15584d5", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.32bit.mir", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "2647c94335f871f26fe2a85f8ad9f4491d2a8c39", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.64bit.mir", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "50fd98ff13a620e3396f36fb8f4cf97ed0c00dfb", "filename": "src/test/mir-opt/no_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "25c6e3060069d33963239fee13bfb274d28e2e54", "filename": "src/test/mir-opt/no_spurious_drop_after_call.main.ElaborateDrops.before.mir", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "5009d090668f0630c78791906544ea3dbfed39ee", "filename": "src/test/mir-opt/not_equal_false.opt.InstCombine.diff", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fnot_equal_false.opt.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fnot_equal_false.opt.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnot_equal_false.opt.InstCombine.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "9e89bd9fb96319b3ea567ca7a6419bfa062da9d3", "filename": "src/test/mir-opt/nrvo_simple.nrvo.RenameReturnPlace.diff", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fnrvo_simple.nrvo.RenameReturnPlace.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fnrvo_simple.nrvo.RenameReturnPlace.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnrvo_simple.nrvo.RenameReturnPlace.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "c3874d3b39d38c2d459f4a82460c1c74bb5b0181", "filename": "src/test/mir-opt/packed_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.32bit.mir", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.32bit.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "c3874d3b39d38c2d459f4a82460c1c74bb5b0181", "filename": "src/test/mir-opt/packed_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.64bit.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "45797ec0607c891598f792a3b2512fe7c6cc38cd", "filename": "src/test/mir-opt/receiver_ptr_mutability.main.mir_map.0.mir", "status": "modified", "additions": 58, "deletions": 58, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Freceiver_ptr_mutability.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Freceiver_ptr_mutability.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Freceiver_ptr_mutability.main.mir_map.0.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "243a54b6a8454d68ca0a50e4a570535b80be20d9", "filename": "src/test/mir-opt/remove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "76bdd23be168485bb1d222641686edc2af715a77", "filename": "src/test/mir-opt/remove_never_const.no_codegen.PreCodegen.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fremove_never_const.no_codegen.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fremove_never_const.no_codegen.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_never_const.no_codegen.PreCodegen.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "a17a0776437d479339354a4e00813213efdba731", "filename": "src/test/mir-opt/remove_storage_markers.main.RemoveStorageMarkers.diff", "status": "modified", "additions": 59, "deletions": 59, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "07e4dd418132447694b25844c9bba7f74e1e2584", "filename": "src/test/mir-opt/remove_unneeded_drops.cannot_opt_generic.RemoveUnneededDrops.diff", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.cannot_opt_generic.RemoveUnneededDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.cannot_opt_generic.RemoveUnneededDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.cannot_opt_generic.RemoveUnneededDrops.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "e809ca4e9006681feee2a11152ba7edab76bfde9", "filename": "src/test/mir-opt/remove_unneeded_drops.dont_opt.RemoveUnneededDrops.diff", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.dont_opt.RemoveUnneededDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.dont_opt.RemoveUnneededDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.dont_opt.RemoveUnneededDrops.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "b29b08f836d33ecd413d6edd52b0319ee943d824", "filename": "src/test/mir-opt/remove_unneeded_drops.opt.RemoveUnneededDrops.diff", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.opt.RemoveUnneededDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.opt.RemoveUnneededDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.opt.RemoveUnneededDrops.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "9058ddbd7ec7975f81c21293562dcedecec82e1d", "filename": "src/test/mir-opt/remove_unneeded_drops.opt_generic_copy.RemoveUnneededDrops.diff", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.opt_generic_copy.RemoveUnneededDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.opt_generic_copy.RemoveUnneededDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.opt_generic_copy.RemoveUnneededDrops.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "7d9e6046202ca312023fefc4b4c35e5bd94f7dae", "filename": "src/test/mir-opt/remove_zsts_dont_touch_unions.get_union.RemoveZsts.after.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fremove_zsts_dont_touch_unions.get_union.RemoveZsts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fremove_zsts_dont_touch_unions.get_union.RemoveZsts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_zsts_dont_touch_unions.get_union.RemoveZsts.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "451d0fe4c02dcdb51a9f844f5e6a6f1ccfb54608", "filename": "src/test/mir-opt/retag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 67, "deletions": 67, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "84f674db2d154abb985b35be70ec4d1b24d841d1", "filename": "src/test/mir-opt/retag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "60c0f336e74c6e9141d80fa85a32cb9330fb3f30", "filename": "src/test/mir-opt/retag.main-{closure#0}.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fretag.main-%7Bclosure%230%7D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fretag.main-%7Bclosure%230%7D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main-%7Bclosure%230%7D.SimplifyCfg-elaborate-drops.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "ae6b5cfe21ebb32a3e74d7eb16437576838f27e1", "filename": "src/test/mir-opt/retag.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 141, "deletions": 141, "changes": 282, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "e395fdb274f371428523f04d78077e32b5b87510", "filename": "src/test/mir-opt/retag.{impl#0}-foo.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo.SimplifyCfg-elaborate-drops.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "e609166dec892a87b6e71107e76aa74c5ce8ab6d", "filename": "src/test/mir-opt/retag.{impl#0}-foo_shr.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo_shr.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo_shr.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo_shr.SimplifyCfg-elaborate-drops.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "3a11e45cacde5e9d324bc977af9900414ef986bc", "filename": "src/test/mir-opt/separate_const_switch.identity.ConstProp.diff", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "952ef22d41001c16ec6044b66cba54f788c27992", "filename": "src/test/mir-opt/separate_const_switch.identity.PreCodegen.after.mir", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.PreCodegen.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "8453d534150b385a16f80338e2f5368e5109e627", "filename": "src/test/mir-opt/separate_const_switch.identity.SeparateConstSwitch.diff", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "de9f45c3d469019a623156b2065243c6644dc5df", "filename": "src/test/mir-opt/separate_const_switch.too_complex.ConstProp.diff", "status": "modified", "additions": 63, "deletions": 63, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "1009225b733f9697b339d3f14ab5a967f64c79fa", "filename": "src/test/mir-opt/separate_const_switch.too_complex.PreCodegen.after.mir", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.PreCodegen.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "3ab1c572aa1a37b2f6b54f175b027b9f94e9431a", "filename": "src/test/mir-opt/separate_const_switch.too_complex.SeparateConstSwitch.diff", "status": "modified", "additions": 64, "deletions": 64, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "3bef6aa0579a77a32611f3130eb95f8b46dc15a3", "filename": "src/test/mir-opt/simple_match.match_bool.mir_map.0.32bit.mir", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.32bit.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "3bef6aa0579a77a32611f3130eb95f8b46dc15a3", "filename": "src/test/mir-opt/simple_match.match_bool.mir_map.0.64bit.mir", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.64bit.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "9c3ad4b4df912cbd82bb8cb22c7f54af4e79288d", "filename": "src/test/mir-opt/simplify_arm.id.SimplifyArmIdentity.diff", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyArmIdentity.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "7b3a6993657735a15e7b874cccff820a5bbecd99", "filename": "src/test/mir-opt/simplify_arm.id.SimplifyBranchSame.diff", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyBranchSame.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "31d8453cec0157e89aca8b0cc8e6a363e6f6b549", "filename": "src/test/mir-opt/simplify_arm.id_result.SimplifyArmIdentity.diff", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyArmIdentity.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "3692ebf747bd2de948bbb484b8dd2a7c4b30e968", "filename": "src/test/mir-opt/simplify_arm.id_result.SimplifyBranchSame.diff", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyBranchSame.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "229046b51fcd50312d4eac6a9bcd68a9bffd1d0d", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyArmIdentity.diff", "status": "modified", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "22a2f85c09ae5e0c9c14893946e545ec869fa469", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyBranchSame.diff", "status": "modified", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "118f5dd0abb430ad1b6cb11b83b1030d36d7e308", "filename": "src/test/mir-opt/simplify_arm_identity.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.32bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "118f5dd0abb430ad1b6cb11b83b1030d36d7e308", "filename": "src/test/mir-opt/simplify_arm_identity.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.64bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "e068b81bc3bc2f8d5b1c906fbc036c42efe3435c", "filename": "src/test/mir-opt/simplify_cfg.main.SimplifyCfg-early-opt.diff", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "f693798eb942d3dc177dd10c0f6637f9e42e91d8", "filename": "src/test/mir-opt/simplify_cfg.main.SimplifyCfg-initial.diff", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "9b1bea2704b7771d78e66262746755337499d1ee", "filename": "src/test/mir-opt/simplify_if.main.SimplifyConstCondition-after-const-prop.diff", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyConstCondition-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyConstCondition-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyConstCondition-after-const-prop.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "5d7517e4eb43c492fd2ccdff77a8bd2588517863", "filename": "src/test/mir-opt/simplify_locals.c.SimplifyLocals.diff", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_locals.c.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_locals.c.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.c.SimplifyLocals.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "a9ea8869a9698cefd6f1962c276f198b3d454c73", "filename": "src/test/mir-opt/simplify_locals.d1.SimplifyLocals.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "6a89e45843b9bb7f422bc7dbeb43ddb81d7e8a33", "filename": "src/test/mir-opt/simplify_locals.d2.SimplifyLocals.diff", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "204a1bffc81ab275dd715a7b5b60ec4947527b43", "filename": "src/test/mir-opt/simplify_locals.expose_addr.SimplifyLocals.diff", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_locals.expose_addr.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_locals.expose_addr.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.expose_addr.SimplifyLocals.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "329e2a65a0d0ff4c818c1d34f2c2b7d42df87107", "filename": "src/test/mir-opt/simplify_locals.r.SimplifyLocals.diff", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_locals.r.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_locals.r.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.r.SimplifyLocals.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "b31156ad6977ecb064d6308fa8a51fa6da11e31f", "filename": "src/test/mir-opt/simplify_locals.t1.SimplifyLocals.diff", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t1.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t1.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t1.SimplifyLocals.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "66b6d8d6486470a676a13e170b6b87407162a480", "filename": "src/test/mir-opt/simplify_locals.t2.SimplifyLocals.diff", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t2.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t2.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t2.SimplifyLocals.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "f6b6b78cdfbeb73ff32c2561a9c887b1e30b2f2b", "filename": "src/test/mir-opt/simplify_locals.t3.SimplifyLocals.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t3.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t3.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t3.SimplifyLocals.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "1c1da29aa678f286fd0a2bd7027c72f4a4214116", "filename": "src/test/mir-opt/simplify_locals.t4.SimplifyLocals.diff", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t4.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t4.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t4.SimplifyLocals.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "ac7a47ba58f7be73763f3411f88c600b19d29f05", "filename": "src/test/mir-opt/simplify_locals_fixedpoint.foo.SimplifyLocals.diff", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "da2f6fc440aa26464051cc9a82c6b509050d7269", "filename": "src/test/mir-opt/simplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "c6895fa41bf65270facddfef44c9dc7af350756b", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "c6895fa41bf65270facddfef44c9dc7af350756b", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "e4f9a4c12d9cb43a0a2f3bd0b0aeb54138ce31d2", "filename": "src/test/mir-opt/simplify_match.main.ConstProp.diff", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "d81d23c1c4c1e53dba1b7b139b61fba8b4c7e82e", "filename": "src/test/mir-opt/simplify_try.try_identity.DestinationPropagation.diff", "status": "modified", "additions": 73, "deletions": 73, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "853b95cc669aac1e34f04d8f949459dafc59a02c", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyArmIdentity.diff", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff?ref=11c0280798da8f4d65dec25764237d2354e65273"}, {"sha": "10799cd92ddb96b9e51401a7f90d271a555e2381", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyBranchSame.after.mir", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11c0280798da8f4d65dec25764237d2354e65273/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir?ref=11c0280798da8f4d65dec25764237d2354e65273"}]}