{"sha": "664255b1687ed165d0f8b6b3025ab988e0a29e48", "node_id": "C_kwDOAAsO6NoAKDY2NDI1NWIxNjg3ZWQxNjVkMGY4YjZiMzAyNWFiOTg4ZTBhMjllNDg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-11T06:48:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-11T06:48:02Z"}, "message": "Rollup merge of #92242 - compiler-errors:layout-modulo-regions, r=matthewjasper\n\nErase regions before calculating layout for packed field capture\n\nSelf-explanatory. We just erase region inferencing because we don't need that for layout computation... Q: layouts are always equal modulo regions, right?\n\nFixes #92240", "tree": {"sha": "d201dde5ecf9cd71917e463b0662eeb313ff4e11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d201dde5ecf9cd71917e463b0662eeb313ff4e11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/664255b1687ed165d0f8b6b3025ab988e0a29e48", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiBgaiCRBK7hj4Ov3rIwAAghcIACnh8/338VQVE0hGWPv622rF\nad+34bKdYqDO351KrSAvQi125iNlocEtSW7vvb/G4cLSsKl7UsnbGZTSCUPuJprI\nWzM3z36moT5eKEoroP1THQ86NFb4NWQXyWVPQhErpE3K6FgNOqiXxVDI0LFnpmgI\nAXvG0SQ6TkwUKIQ84AdGasJhhsRiMs/mgTcwdgFNswXaeJe/5JH9mXxHthsCRHKL\nf2aPFtpwYySx7MxebCxmBEr2XkEh2yPN2knpJyWyGXq+4sH5RFTLpxdjjTVYmmMl\naf5jIPSe7WHUd1hnqLWz1EPsPg0otuLXZ/NM4EVgR0zBUuGkgA/Gn/C5rufUq6U=\n=28D/\n-----END PGP SIGNATURE-----\n", "payload": "tree d201dde5ecf9cd71917e463b0662eeb313ff4e11\nparent e646f3d2a9541952310778288854943678738ea9\nparent 1458687e05f4ae4cffd6d81b65ed27e2da60fe0b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1644562082 +0100\ncommitter GitHub <noreply@github.com> 1644562082 +0100\n\nRollup merge of #92242 - compiler-errors:layout-modulo-regions, r=matthewjasper\n\nErase regions before calculating layout for packed field capture\n\nSelf-explanatory. We just erase region inferencing because we don't need that for layout computation... Q: layouts are always equal modulo regions, right?\n\nFixes #92240\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/664255b1687ed165d0f8b6b3025ab988e0a29e48", "html_url": "https://github.com/rust-lang/rust/commit/664255b1687ed165d0f8b6b3025ab988e0a29e48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/664255b1687ed165d0f8b6b3025ab988e0a29e48/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e646f3d2a9541952310778288854943678738ea9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e646f3d2a9541952310778288854943678738ea9", "html_url": "https://github.com/rust-lang/rust/commit/e646f3d2a9541952310778288854943678738ea9"}, {"sha": "1458687e05f4ae4cffd6d81b65ed27e2da60fe0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1458687e05f4ae4cffd6d81b65ed27e2da60fe0b", "html_url": "https://github.com/rust-lang/rust/commit/1458687e05f4ae4cffd6d81b65ed27e2da60fe0b"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "428a866c1fe0732ba835584e26d0c55db4ca0ee4", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/664255b1687ed165d0f8b6b3025ab988e0a29e48/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664255b1687ed165d0f8b6b3025ab988e0a29e48/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=664255b1687ed165d0f8b6b3025ab988e0a29e48", "patch": "@@ -1648,7 +1648,8 @@ fn restrict_repr_packed_field_ref_capture<'tcx>(\n         match p.kind {\n             ProjectionKind::Field(..) => match ty.kind() {\n                 ty::Adt(def, _) if def.repr.packed() => {\n-                    match tcx.layout_of(param_env.and(p.ty)) {\n+                    // We erase regions here because they cannot be hashed\n+                    match tcx.layout_of(param_env.and(tcx.erase_regions(p.ty))) {\n                         Ok(layout) if layout.align.abi.bytes() == 1 => {\n                             // if the alignment is 1, the type can't be further\n                             // disaligned."}]}