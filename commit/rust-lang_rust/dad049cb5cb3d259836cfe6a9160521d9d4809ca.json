{"sha": "dad049cb5cb3d259836cfe6a9160521d9d4809ca", "node_id": "C_kwDOAAsO6NoAKGRhZDA0OWNiNWNiM2QyNTk4MzZjZmU2YTkxNjA1MjFkOWQ0ODA5Y2E", "commit": {"author": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2022-09-10T10:29:25Z"}, "committer": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2022-09-10T11:13:54Z"}, "message": "Update test", "tree": {"sha": "ac957a369ab9b6a3f25b01c550cbf5433235a25b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac957a369ab9b6a3f25b01c550cbf5433235a25b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dad049cb5cb3d259836cfe6a9160521d9d4809ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dad049cb5cb3d259836cfe6a9160521d9d4809ca", "html_url": "https://github.com/rust-lang/rust/commit/dad049cb5cb3d259836cfe6a9160521d9d4809ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dad049cb5cb3d259836cfe6a9160521d9d4809ca/comments", "author": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f52082f54321e56fa4dbd9194c1cfd61089e2729", "url": "https://api.github.com/repos/rust-lang/rust/commits/f52082f54321e56fa4dbd9194c1cfd61089e2729", "html_url": "https://github.com/rust-lang/rust/commit/f52082f54321e56fa4dbd9194c1cfd61089e2729"}], "stats": {"total": 67, "additions": 34, "deletions": 33}, "files": [{"sha": "990ce38e22edd3c9bbef99e6e0ef5a155e5ec6ec", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 34, "deletions": 33, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/dad049cb5cb3d259836cfe6a9160521d9d4809ca/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad049cb5cb3d259836cfe6a9160521d9d4809ca/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=dad049cb5cb3d259836cfe6a9160521d9d4809ca", "patch": "@@ -1111,51 +1111,52 @@ fn test_from_iter_specialization_panic_during_iteration_drops() {\n \n #[test]\n fn test_from_iter_specialization_panic_during_drop_doesnt_leak() {\n-    static mut DROP_COUNTER_SHOULD_BE_DROPPED: usize = 0;\n-    static mut DROP_COUNTER_DROPPED_TWICE: usize = 0;\n+    static mut DROP_COUNTER_OLD: [usize; 5] = [0; 5];\n+    static mut DROP_COUNTER_NEW: [usize; 2] = [0; 2];\n \n     #[derive(Debug)]\n-    enum Droppable {\n-        ShouldBeDropped,\n-        DroppedTwice(Box<i32>),\n-        PanicOnDrop,\n+    struct Old(usize);\n+\n+    impl Drop for Old {\n+        fn drop(&mut self) {\n+            unsafe {\n+                DROP_COUNTER_OLD[self.0] += 1;\n+            }\n+\n+            if self.0 == 3 {\n+                panic!();\n+            }\n+\n+            println!(\"Dropped Old: {}\", self.0);\n+        }\n     }\n \n-    impl Drop for Droppable {\n+    #[derive(Debug)]\n+    struct New(usize);\n+\n+    impl Drop for New {\n         fn drop(&mut self) {\n-            match self {\n-                Droppable::ShouldBeDropped => {\n-                    unsafe {\n-                        DROP_COUNTER_SHOULD_BE_DROPPED += 1;\n-                    }\n-                    println!(\"Dropping ShouldBeDropped!\")\n-                }\n-                Droppable::DroppedTwice(_) => {\n-                    unsafe {\n-                        DROP_COUNTER_DROPPED_TWICE += 1;\n-                    }\n-                    println!(\"Dropping DroppedTwice!\")\n-                }\n-                Droppable::PanicOnDrop => {\n-                    if !std::thread::panicking() {\n-                        panic!();\n-                    }\n-                }\n+            unsafe {\n+                DROP_COUNTER_NEW[self.0] += 1;\n             }\n+\n+            println!(\"Dropped New: {}\", self.0);\n         }\n     }\n \n     let _ = std::panic::catch_unwind(AssertUnwindSafe(|| {\n-        let v = vec![\n-            Droppable::ShouldBeDropped,\n-            Droppable::DroppedTwice(Box::new(123)),\n-            Droppable::PanicOnDrop,\n-        ];\n-        let _ = v.into_iter().take(1).collect::<Vec<_>>();\n+        let v = vec![Old(0), Old(1), Old(2), Old(3), Old(4)];\n+        let _ = v.into_iter().map(|x| New(x.0)).take(2).collect::<Vec<_>>();\n     }));\n \n-    assert_eq!(unsafe { DROP_COUNTER_SHOULD_BE_DROPPED }, 1);\n-    assert_eq!(unsafe { DROP_COUNTER_DROPPED_TWICE }, 1);\n+    assert_eq!(unsafe { DROP_COUNTER_OLD[0] }, 1);\n+    assert_eq!(unsafe { DROP_COUNTER_OLD[1] }, 1);\n+    assert_eq!(unsafe { DROP_COUNTER_OLD[2] }, 1);\n+    assert_eq!(unsafe { DROP_COUNTER_OLD[3] }, 1);\n+    assert_eq!(unsafe { DROP_COUNTER_OLD[4] }, 1);\n+\n+    assert_eq!(unsafe { DROP_COUNTER_NEW[0] }, 1);\n+    assert_eq!(unsafe { DROP_COUNTER_NEW[1] }, 1);\n }\n \n // regression test for issue #85322. Peekable previously implemented InPlaceIterable,"}]}