{"sha": "ba377982a3fde98a3cac02493c16dc623b02a421", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMzc3OTgyYTNmZGU5OGEzY2FjMDI0OTNjMTZkYzYyM2IwMmE0MjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-14T16:28:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-14T16:28:14Z"}, "message": "Auto merge of #41153 - petrochenkov:umove, r=pnkfelix\n\nFix move checking for nested union fields\n\nFixes https://github.com/rust-lang/rust/issues/41126\nr? @arielb1", "tree": {"sha": "4ec1531021869ff497c0ef77158b3acac6b645a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ec1531021869ff497c0ef77158b3acac6b645a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba377982a3fde98a3cac02493c16dc623b02a421", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba377982a3fde98a3cac02493c16dc623b02a421", "html_url": "https://github.com/rust-lang/rust/commit/ba377982a3fde98a3cac02493c16dc623b02a421", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba377982a3fde98a3cac02493c16dc623b02a421/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5637ed756632ded9e458b82a23cc1dddbb57c51f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5637ed756632ded9e458b82a23cc1dddbb57c51f", "html_url": "https://github.com/rust-lang/rust/commit/5637ed756632ded9e458b82a23cc1dddbb57c51f"}, {"sha": "ad58d37c56c4121182b37fb9062c681d3d314c22", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad58d37c56c4121182b37fb9062c681d3d314c22", "html_url": "https://github.com/rust-lang/rust/commit/ad58d37c56c4121182b37fb9062c681d3d314c22"}], "stats": {"total": 87, "additions": 72, "deletions": 15}, "files": [{"sha": "5012969eef9058c4fe298e2ee0dc579bbadd0c47", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ba377982a3fde98a3cac02493c16dc623b02a421/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba377982a3fde98a3cac02493c16dc623b02a421/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=ba377982a3fde98a3cac02493c16dc623b02a421", "patch": "@@ -362,31 +362,31 @@ impl<'a, 'tcx> MoveData<'tcx> {\n \n     /// Adds a new move entry for a move of `lp` that occurs at location `id` with kind `kind`.\n     pub fn add_move(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                    lp: Rc<LoanPath<'tcx>>,\n+                    orig_lp: Rc<LoanPath<'tcx>>,\n                     id: ast::NodeId,\n                     kind: MoveKind) {\n-        // Moving one union field automatically moves all its fields.\n-        if let LpExtend(ref base_lp, mutbl, LpInterior(opt_variant_id, interior)) = lp.kind {\n-            if let ty::TyAdt(adt_def, _) = base_lp.ty.sty {\n+        // Moving one union field automatically moves all its fields. Also move siblings of\n+        // all parent union fields, moves do not propagate upwards automatically.\n+        let mut lp = orig_lp.clone();\n+        while let LpExtend(ref base_lp, mutbl, lp_elem) = lp.clone().kind {\n+            if let (&ty::TyAdt(adt_def, _), LpInterior(opt_variant_id, interior))\n+                    = (&base_lp.ty.sty, lp_elem) {\n                 if adt_def.is_union() {\n                     for field in &adt_def.struct_variant().fields {\n                         let field = InteriorKind::InteriorField(mc::NamedField(field.name));\n-                        let field_ty = if field == interior {\n-                            lp.ty\n-                        } else {\n-                            tcx.types.err // Doesn't matter\n-                        };\n-                        let sibling_lp_kind = LpExtend(base_lp.clone(), mutbl,\n-                                                    LpInterior(opt_variant_id, field));\n-                        let sibling_lp = Rc::new(LoanPath::new(sibling_lp_kind, field_ty));\n-                        self.add_move_helper(tcx, sibling_lp, id, kind);\n+                        if field != interior {\n+                            let sibling_lp_kind =\n+                                LpExtend(base_lp.clone(), mutbl, LpInterior(opt_variant_id, field));\n+                            let sibling_lp = Rc::new(LoanPath::new(sibling_lp_kind, tcx.types.err));\n+                            self.add_move_helper(tcx, sibling_lp, id, kind);\n+                        }\n                     }\n-                    return;\n                 }\n             }\n+            lp = base_lp.clone();\n         }\n \n-        self.add_move_helper(tcx, lp.clone(), id, kind);\n+        self.add_move_helper(tcx, orig_lp.clone(), id, kind);\n     }\n \n     fn add_move_helper(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "5f504feabb266bab2a7eadf0cfb3746dc9d06d78", "filename": "src/test/compile-fail/union/union-borrow-move-parent-sibling.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/ba377982a3fde98a3cac02493c16dc623b02a421/src%2Ftest%2Fcompile-fail%2Funion%2Funion-borrow-move-parent-sibling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba377982a3fde98a3cac02493c16dc623b02a421/src%2Ftest%2Fcompile-fail%2Funion%2Funion-borrow-move-parent-sibling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-borrow-move-parent-sibling.rs?ref=ba377982a3fde98a3cac02493c16dc623b02a421", "patch": "@@ -0,0 +1,57 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(untagged_unions)]\n+#![allow(unused)]\n+\n+#[allow(unions_with_drop_fields)]\n+union U {\n+    x: ((Vec<u8>, Vec<u8>), Vec<u8>),\n+    y: Box<Vec<u8>>,\n+}\n+\n+unsafe fn parent_sibling_borrow() {\n+    let mut u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n+    let a = &mut u.x.0;\n+    let a = &u.y; //~ ERROR cannot borrow `u.y`\n+}\n+\n+unsafe fn parent_sibling_move() {\n+    let u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n+    let a = u.x.0;\n+    let a = u.y; //~ ERROR use of moved value: `u.y`\n+}\n+\n+unsafe fn grandparent_sibling_borrow() {\n+    let mut u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n+    let a = &mut (u.x.0).0;\n+    let a = &u.y; //~ ERROR cannot borrow `u.y`\n+}\n+\n+unsafe fn grandparent_sibling_move() {\n+    let u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n+    let a = (u.x.0).0;\n+    let a = u.y; //~ ERROR use of moved value: `u.y`\n+}\n+\n+unsafe fn deref_sibling_borrow() {\n+    let mut u = U { y: Box::default() };\n+    let a = &mut *u.y;\n+    let a = &u.x; //~ ERROR cannot borrow `u` (via `u.x`)\n+}\n+\n+unsafe fn deref_sibling_move() {\n+    let u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n+    let a = *u.y;\n+    let a = u.x; //~ ERROR use of moved value: `u.x`\n+}\n+\n+\n+fn main() {}"}]}