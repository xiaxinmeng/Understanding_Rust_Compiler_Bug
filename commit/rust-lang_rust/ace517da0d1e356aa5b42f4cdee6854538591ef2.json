{"sha": "ace517da0d1e356aa5b42f4cdee6854538591ef2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjZTUxN2RhMGQxZTM1NmFhNWI0MmY0Y2RlZTY4NTQ1Mzg1OTFlZjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-28T04:31:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-28T04:31:27Z"}, "message": "Auto merge of #41598 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 4 pull requests\n\n- Successful merges: #41534, #41546, #41571, #41583\n- Failed merges:", "tree": {"sha": "9ed83d9cf54dcc965f0f62e288c7f9b3322bbec4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ed83d9cf54dcc965f0f62e288c7f9b3322bbec4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ace517da0d1e356aa5b42f4cdee6854538591ef2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ace517da0d1e356aa5b42f4cdee6854538591ef2", "html_url": "https://github.com/rust-lang/rust/commit/ace517da0d1e356aa5b42f4cdee6854538591ef2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ace517da0d1e356aa5b42f4cdee6854538591ef2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70baf4f13ec70cb17942704849b0f3c047ad347b", "url": "https://api.github.com/repos/rust-lang/rust/commits/70baf4f13ec70cb17942704849b0f3c047ad347b", "html_url": "https://github.com/rust-lang/rust/commit/70baf4f13ec70cb17942704849b0f3c047ad347b"}, {"sha": "d21c9b921d9a26d8d697f3e4fbe7ff99ed3b1ed3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d21c9b921d9a26d8d697f3e4fbe7ff99ed3b1ed3", "html_url": "https://github.com/rust-lang/rust/commit/d21c9b921d9a26d8d697f3e4fbe7ff99ed3b1ed3"}], "stats": {"total": 90, "additions": 69, "deletions": 21}, "files": [{"sha": "4699fefbb20e3b1ba63eee977ec575b341fc920a", "filename": "src/etc/make-win-dist.py", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ace517da0d1e356aa5b42f4cdee6854538591ef2/src%2Fetc%2Fmake-win-dist.py", "raw_url": "https://github.com/rust-lang/rust/raw/ace517da0d1e356aa5b42f4cdee6854538591ef2/src%2Fetc%2Fmake-win-dist.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmake-win-dist.py?ref=ace517da0d1e356aa5b42f4cdee6854538591ef2", "patch": "@@ -49,7 +49,8 @@ def make_win_dist(rust_root, plat_root, target_triple):\n         elif key == \"libraries\":\n             lib_path.extend(val.lstrip(' =').split(';'))\n \n-    target_tools = [\"gcc.exe\", \"ld.exe\", \"ar.exe\", \"dlltool.exe\"]\n+    target_tools = [\"gcc.exe\", \"ld.exe\", \"ar.exe\", \"dlltool.exe\",\n+                    \"libwinpthread-1.dll\"]\n \n     rustc_dlls = [\"libstdc++-6.dll\", \"libwinpthread-1.dll\"]\n     if target_triple.startswith(\"i686-\"):"}, {"sha": "0358319256760702a9224cee1c2a8fcd4953c0c4", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ace517da0d1e356aa5b42f4cdee6854538591ef2/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace517da0d1e356aa5b42f4cdee6854538591ef2/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=ace517da0d1e356aa5b42f4cdee6854538591ef2", "patch": "@@ -22,7 +22,7 @@\n // are *mostly* used as a part of that interface, but these should\n // probably get a better home if someone can find one.\n \n-use hir::def::{self, Def};\n+use hir::def;\n use hir::def_id::{CrateNum, DefId, DefIndex};\n use hir::map as hir_map;\n use hir::map::definitions::{Definitions, DefKey, DisambiguatedDefPathData};\n@@ -181,7 +181,6 @@ pub trait CrateStore {\n     fn crate_data_as_rc_any(&self, krate: CrateNum) -> Rc<Any>;\n \n     // item info\n-    fn describe_def(&self, def: DefId) -> Option<Def>;\n     fn def_span(&self, sess: &Session, def: DefId) -> Span;\n     fn stability(&self, def: DefId) -> Option<attr::Stability>;\n     fn deprecation(&self, def: DefId) -> Option<attr::Deprecation>;\n@@ -313,7 +312,6 @@ impl CrateStore for DummyCrateStore {\n     fn crate_data_as_rc_any(&self, krate: CrateNum) -> Rc<Any>\n         { bug!(\"crate_data_as_rc_any\") }\n     // item info\n-    fn describe_def(&self, def: DefId) -> Option<Def> { bug!(\"describe_def\") }\n     fn def_span(&self, sess: &Session, def: DefId) -> Span { bug!(\"def_span\") }\n     fn stability(&self, def: DefId) -> Option<attr::Stability> { bug!(\"stability\") }\n     fn deprecation(&self, def: DefId) -> Option<attr::Deprecation> { bug!(\"deprecation\") }"}, {"sha": "1ac7f4fcc95c272e7c88a562cb4f2ac0e5dff866", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ace517da0d1e356aa5b42f4cdee6854538591ef2/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace517da0d1e356aa5b42f4cdee6854538591ef2/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=ace517da0d1e356aa5b42f4cdee6854538591ef2", "patch": "@@ -432,7 +432,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     // (See issue #38412)\n     fn skip_stability_check_due_to_privacy(self, mut def_id: DefId) -> bool {\n         // Check if `def_id` is a trait method.\n-        match self.sess.cstore.describe_def(def_id) {\n+        match self.describe_def(def_id) {\n             Some(Def::Method(_)) |\n             Some(Def::AssociatedTy(_)) |\n             Some(Def::AssociatedConst(_)) => {"}, {"sha": "096d69aa3760a0ae44154f6092137d97714452be", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ace517da0d1e356aa5b42f4cdee6854538591ef2/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace517da0d1e356aa5b42f4cdee6854538591ef2/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=ace517da0d1e356aa5b42f4cdee6854538591ef2", "patch": "@@ -10,6 +10,7 @@\n \n use dep_graph::{DepGraph, DepNode, DepTrackingMap, DepTrackingMapConfig};\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use hir::def::Def;\n use hir;\n use middle::const_val;\n use middle::privacy::AccessLevels;\n@@ -264,6 +265,12 @@ impl<'tcx> QueryDescription for queries::symbol_name<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::describe_def<'tcx> {\n+    fn describe(_: TyCtxt, _: DefId) -> String {\n+        bug!(\"describe_def\")\n+    }\n+}\n+\n macro_rules! define_maps {\n     (<$tcx:tt>\n      $($(#[$attr:meta])*\n@@ -538,7 +545,9 @@ define_maps! { <'tcx>\n     pub mir_shims: mir_shim_dep_node(ty::InstanceDef<'tcx>) -> &'tcx RefCell<mir::Mir<'tcx>>,\n \n     pub def_symbol_name: SymbolName(DefId) -> ty::SymbolName,\n-    pub symbol_name: symbol_name_dep_node(ty::Instance<'tcx>) -> ty::SymbolName\n+    pub symbol_name: symbol_name_dep_node(ty::Instance<'tcx>) -> ty::SymbolName,\n+\n+    pub describe_def: meta_data_node(DefId) -> Option<Def>\n }\n \n fn coherent_trait_dep_node((_, def_id): (CrateNum, DefId)) -> DepNode<DefId> {\n@@ -570,3 +579,7 @@ fn typeck_item_bodies_dep_node(_: CrateNum) -> DepNode<DefId> {\n fn const_eval_dep_node((def_id, _): (DefId, &Substs)) -> DepNode<DefId> {\n     DepNode::ConstEval(def_id)\n }\n+\n+fn meta_data_node(def_id: DefId) -> DepNode<DefId> {\n+    DepNode::MetaData(def_id)\n+}\n\\ No newline at end of file"}, {"sha": "238791fb6edb3eeb7ea11487d10a7c9a09b82da9", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ace517da0d1e356aa5b42f4cdee6854538591ef2/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace517da0d1e356aa5b42f4cdee6854538591ef2/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=ace517da0d1e356aa5b42f4cdee6854538591ef2", "patch": "@@ -2385,7 +2385,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// ID of the impl that the method belongs to. Otherwise, return `None`.\n     pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> {\n         let item = if def_id.krate != LOCAL_CRATE {\n-            if let Some(Def::Method(_)) = self.sess.cstore.describe_def(def_id) {\n+            if let Some(Def::Method(_)) = self.describe_def(def_id) {\n                 Some(self.associated_item(def_id))\n             } else {\n                 None"}, {"sha": "8b1aa0708807bc4284b8b7f8bad0c09840e7ec70", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ace517da0d1e356aa5b42f4cdee6854538591ef2/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace517da0d1e356aa5b42f4cdee6854538591ef2/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=ace517da0d1e356aa5b42f4cdee6854538591ef2", "patch": "@@ -68,7 +68,7 @@ pub fn lookup_const_by_id<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             _ => Some((def_id, substs))\n         }\n     } else {\n-        match tcx.sess.cstore.describe_def(def_id) {\n+        match tcx.describe_def(def_id) {\n             Some(Def::AssociatedConst(_)) => {\n                 // As mentioned in the comments above for in-crate\n                 // constants, we only try to find the expression for a"}, {"sha": "839caca2ee9144d44bfc959fdd4492c3657384a8", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ace517da0d1e356aa5b42f4cdee6854538591ef2/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace517da0d1e356aa5b42f4cdee6854538591ef2/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=ace517da0d1e356aa5b42f4cdee6854538591ef2", "patch": "@@ -17,7 +17,7 @@ use rustc::dep_graph::DepTrackingMapConfig;\n use rustc::middle::cstore::{CrateStore, CrateSource, LibSource, DepKind,\n                             ExternCrate, NativeLibrary, LinkMeta,\n                             LinkagePreference, LoadedMacro, EncodedMetadata};\n-use rustc::hir::def::{self, Def};\n+use rustc::hir::def;\n use rustc::middle::lang_items;\n use rustc::session::Session;\n use rustc::ty::{self, TyCtxt};\n@@ -113,18 +113,14 @@ provide! { <'tcx> tcx, def_id, cdata\n     closure_type => { cdata.closure_ty(def_id.index, tcx) }\n     inherent_impls => { Rc::new(cdata.get_inherent_implementations_for_type(def_id.index)) }\n     is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n+    describe_def => { cdata.get_def(def_id.index) }\n }\n \n impl CrateStore for cstore::CStore {\n     fn crate_data_as_rc_any(&self, krate: CrateNum) -> Rc<Any> {\n         self.get_crate_data(krate)\n     }\n \n-    fn describe_def(&self, def: DefId) -> Option<Def> {\n-        self.dep_graph.read(DepNode::MetaData(def));\n-        self.get_crate_data(def.krate).get_def(def.index)\n-    }\n-\n     fn def_span(&self, sess: &Session, def: DefId) -> Span {\n         self.dep_graph.read(DepNode::MetaData(def));\n         self.get_crate_data(def.krate).get_span(def.index, sess)"}, {"sha": "2e84aff49859d0d07c28f6760402d66cd8f9f8fd", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ace517da0d1e356aa5b42f4cdee6854538591ef2/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace517da0d1e356aa5b42f4cdee6854538591ef2/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=ace517da0d1e356aa5b42f4cdee6854538591ef2", "patch": "@@ -788,16 +788,18 @@ pub fn compare_const_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                              trait\",\n                                             trait_c.name);\n \n-            // Add a label to the Span containing just the type of the item\n-            let trait_c_node_id = tcx.hir.as_local_node_id(trait_c.def_id).unwrap();\n-            let trait_c_span = match tcx.hir.expect_trait_item(trait_c_node_id).node {\n-                TraitItemKind::Const(ref ty, _) => ty.span,\n-                _ => bug!(\"{:?} is not a trait const\", trait_c),\n-            };\n+            let trait_c_node_id = tcx.hir.as_local_node_id(trait_c.def_id);\n+            let trait_c_span = trait_c_node_id.map(|trait_c_node_id| {\n+                // Add a label to the Span containing just the type of the const\n+                match tcx.hir.expect_trait_item(trait_c_node_id).node {\n+                    TraitItemKind::Const(ref ty, _) => ty.span,\n+                    _ => bug!(\"{:?} is not a trait const\", trait_c),\n+                }\n+            });\n \n             infcx.note_type_err(&mut diag,\n                                 &cause,\n-                                Some((trait_c_span, format!(\"type in trait\"))),\n+                                trait_c_span.map(|span| (span, format!(\"type in trait\"))),\n                                 Some(infer::ValuePairs::Types(ExpectedFound {\n                                     expected: trait_ty,\n                                     found: impl_ty,"}, {"sha": "77b203997b42a35ace13224a1bc5554109dfe593", "filename": "src/test/compile-fail/auxiliary/issue_41549.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ace517da0d1e356aa5b42f4cdee6854538591ef2/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fissue_41549.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace517da0d1e356aa5b42f4cdee6854538591ef2/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fissue_41549.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fissue_41549.rs?ref=ace517da0d1e356aa5b42f4cdee6854538591ef2", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(associated_consts)]\n+\n+pub trait Trait {\n+    const CONST: u32;\n+}"}, {"sha": "c4aab4bcabf637f79c7cc0afb6603b33d6021e27", "filename": "src/test/compile-fail/issue-41549.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ace517da0d1e356aa5b42f4cdee6854538591ef2/src%2Ftest%2Fcompile-fail%2Fissue-41549.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace517da0d1e356aa5b42f4cdee6854538591ef2/src%2Ftest%2Fcompile-fail%2Fissue-41549.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-41549.rs?ref=ace517da0d1e356aa5b42f4cdee6854538591ef2", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue_41549.rs\n+\n+#![feature(associated_consts)]\n+\n+extern crate issue_41549;\n+\n+struct S;\n+\n+impl issue_41549::Trait for S {\n+    const CONST: () = (); //~ ERROR incompatible type for trait\n+}\n+\n+fn main() {}"}]}