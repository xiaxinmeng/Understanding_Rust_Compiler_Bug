{"sha": "bf7587f5510d146c1f8bce4cb1ec10379d5b7d78", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNzU4N2Y1NTEwZDE0NmMxZjhiY2U0Y2IxZWMxMDM3OWQ1YjdkNzg=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-15T04:27:52Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-15T04:32:15Z"}, "message": "iter: fix `range_inclusive` when `start > stop`", "tree": {"sha": "a06d979c95554946d051f37e76769e2227ac5564", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a06d979c95554946d051f37e76769e2227ac5564"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf7587f5510d146c1f8bce4cb1ec10379d5b7d78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf7587f5510d146c1f8bce4cb1ec10379d5b7d78", "html_url": "https://github.com/rust-lang/rust/commit/bf7587f5510d146c1f8bce4cb1ec10379d5b7d78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf7587f5510d146c1f8bce4cb1ec10379d5b7d78/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f961c74c4995b628ddb6c405295d78f9e79a849", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f961c74c4995b628ddb6c405295d78f9e79a849", "html_url": "https://github.com/rust-lang/rust/commit/1f961c74c4995b628ddb6c405295d78f9e79a849"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "ba109bfa125c5a2a5ffdb6b78ba416939846c937", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bf7587f5510d146c1f8bce4cb1ec10379d5b7d78/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf7587f5510d146c1f8bce4cb1ec10379d5b7d78/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=bf7587f5510d146c1f8bce4cb1ec10379d5b7d78", "patch": "@@ -1790,17 +1790,17 @@ pub fn range_inclusive<A: Add<A, A> + Ord + Clone + One>(start: A, stop: A) -> R\n     RangeInclusive{range: range(start, stop), done: false}\n }\n \n-impl<A: Add<A, A> + Ord + Clone> Iterator<A> for RangeInclusive<A> {\n+impl<A: Add<A, A> + Eq + Ord + Clone> Iterator<A> for RangeInclusive<A> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         match self.range.next() {\n             Some(x) => Some(x),\n             None => {\n-                if self.done {\n-                    None\n-                } else {\n+                if !self.done && self.range.state == self.range.stop {\n                     self.done = true;\n                     Some(self.range.stop.clone())\n+                } else {\n+                    None\n                 }\n             }\n         }\n@@ -2712,6 +2712,8 @@ mod tests {\n     fn test_range_inclusive() {\n         assert_eq!(range_inclusive(0i, 5).collect::<~[int]>(), ~[0i, 1, 2, 3, 4, 5]);\n         assert_eq!(range_inclusive(0i, 5).invert().collect::<~[int]>(), ~[5i, 4, 3, 2, 1, 0]);\n+        assert_eq!(range_inclusive(200, -5).collect::<~[int]>(), ~[]);\n+        assert_eq!(range_inclusive(200, 200).collect::<~[int]>(), ~[200]);\n     }\n \n     #[test]\n@@ -2720,6 +2722,8 @@ mod tests {\n         assert_eq!(range_step(20i, 0, -5).collect::<~[int]>(), ~[20, 15, 10, 5]);\n         assert_eq!(range_step(20i, 0, -6).collect::<~[int]>(), ~[20, 14, 8, 2]);\n         assert_eq!(range_step(200u8, 255, 50).collect::<~[u8]>(), ~[200u8, 250]);\n+        assert_eq!(range_step(200, -5, 1).collect::<~[int]>(), ~[]);\n+        assert_eq!(range_step(200, 200, 1).collect::<~[int]>(), ~[]);\n     }\n \n     #[test]\n@@ -2728,6 +2732,8 @@ mod tests {\n         assert_eq!(range_step_inclusive(20i, 0, -5).collect::<~[int]>(), ~[20, 15, 10, 5, 0]);\n         assert_eq!(range_step_inclusive(20i, 0, -6).collect::<~[int]>(), ~[20, 14, 8, 2]);\n         assert_eq!(range_step_inclusive(200u8, 255, 50).collect::<~[u8]>(), ~[200u8, 250]);\n+        assert_eq!(range_step_inclusive(200, -5, 1).collect::<~[int]>(), ~[]);\n+        assert_eq!(range_step_inclusive(200, 200, 1).collect::<~[int]>(), ~[200]);\n     }\n \n     #[test]"}]}