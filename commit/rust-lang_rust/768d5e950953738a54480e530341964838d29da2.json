{"sha": "768d5e950953738a54480e530341964838d29da2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2OGQ1ZTk1MDk1MzczOGE1NDQ4MGU1MzAzNDE5NjQ4MzhkMjlkYTI=", "commit": {"author": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2021-02-20T01:22:30Z"}, "committer": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2021-03-02T21:55:25Z"}, "message": "Load rustdoc's JS search index on-demand.\n\nInstead of being loaded on every page, the JS search index is now\nloaded when either (a) there is a `?search=` param, or (b) the search\ninput is focused.\n\nThis saves both CPU and bandwidth. As of Feb 2021,\nhttps://doc.rust-lang.org/search-index1.50.0.js is 273,838 bytes\ngzipped or 2,544,939 bytes uncompressed. Evaluating it takes 445 ms\nof CPU time in Chrome 88 on a i7-10710U CPU (out of a total ~2,100\nms page reload).\n\nGenerate separate JS file with crate names.\n\nThis is much smaller than the full search index, and is used in the \"hot\npath\" to draw the page. In particular it's used to crate the dropdown\nfor the search bar, and to append a list of crates to the sidebar (on\nsome pages).\n\nSkip early search that can bypass 500ms timeout.\n\nThis was occurring when someone had typed some text during the load of\nsearch-index.js. Their query was usually not ready to execute, and the\nsearch itself is fairly expensive, delaying the overall load, which\ndelayed the input / keyup events, which delayed eventually executing the\nquery.", "tree": {"sha": "6b44fb67eddcd9206ca637124f1c14c38efd6aa4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b44fb67eddcd9206ca637124f1c14c38efd6aa4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/768d5e950953738a54480e530341964838d29da2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/768d5e950953738a54480e530341964838d29da2", "html_url": "https://github.com/rust-lang/rust/commit/768d5e950953738a54480e530341964838d29da2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/768d5e950953738a54480e530341964838d29da2/comments", "author": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94736c434ee154b30e2ec22ec112b79e3f6c5884", "url": "https://api.github.com/repos/rust-lang/rust/commits/94736c434ee154b30e2ec22ec112b79e3f6c5884", "html_url": "https://github.com/rust-lang/rust/commit/94736c434ee154b30e2ec22ec112b79e3f6c5884"}], "stats": {"total": 120, "additions": 69, "deletions": 51}, "files": [{"sha": "855934ef4d430dcdeb77f8acaae4cf68171811bb", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/768d5e950953738a54480e530341964838d29da2/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768d5e950953738a54480e530341964838d29da2/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=768d5e950953738a54480e530341964838d29da2", "patch": "@@ -58,6 +58,7 @@ crate fn render<T: Print, S: Print>(\n     {style_files}\\\n     <script id=\\\"default-settings\\\"{default_settings}></script>\\\n     <script src=\\\"{static_root_path}storage{suffix}.js\\\"></script>\\\n+    <script src=\\\"{static_root_path}crates{suffix}.js\\\"></script>\\\n     <noscript><link rel=\\\"stylesheet\\\" href=\\\"{static_root_path}noscript{suffix}.css\\\"></noscript>\\\n     {css_extension}\\\n     {favicon}\\\n@@ -112,10 +113,10 @@ crate fn render<T: Print, S: Print>(\n     <section id=\\\"search\\\" class=\\\"content hidden\\\"></section>\\\n     <section class=\\\"footer\\\"></section>\\\n     {after_content}\\\n-    <div id=\\\"rustdoc-vars\\\" data-root-path=\\\"{root_path}\\\" data-current-crate=\\\"{krate}\\\"></div>\n+    <div id=\\\"rustdoc-vars\\\" data-root-path=\\\"{root_path}\\\" data-current-crate=\\\"{krate}\\\" \\\n+       data-search-js=\\\"{root_path}search-index{suffix}.js\\\"></div>\n     <script src=\\\"{static_root_path}main{suffix}.js\\\"></script>\\\n     {extra_scripts}\\\n-    <script defer src=\\\"{root_path}search-index{suffix}.js\\\"></script>\\\n </body>\\\n </html>\",\n         css_extension = if layout.css_file_extension.is_some() {"}, {"sha": "dd531f1510220edd5cececd0a13c85e068b0a022", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/768d5e950953738a54480e530341964838d29da2/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768d5e950953738a54480e530341964838d29da2/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=768d5e950953738a54480e530341964838d29da2", "patch": "@@ -1039,22 +1039,28 @@ themePicker.onblur = handleThemeButtonsBlur;\n         cx.shared.fs.write(&dst, v.as_bytes())?;\n     }\n \n-    // Update the search index\n+    // Update the search index and crate list.\n     let dst = cx.dst.join(&format!(\"search-index{}.js\", cx.shared.resource_suffix));\n     let (mut all_indexes, mut krates) = try_err!(collect_json(&dst, &krate.name.as_str()), &dst);\n     all_indexes.push(search_index);\n+    krates.push(krate.name.to_string());\n+    krates.sort();\n \n     // Sort the indexes by crate so the file will be generated identically even\n     // with rustdoc running in parallel.\n     all_indexes.sort();\n     {\n         let mut v = String::from(\"var searchIndex = JSON.parse('{\\\\\\n\");\n         v.push_str(&all_indexes.join(\",\\\\\\n\"));\n-        // \"addSearchOptions\" has to be called first so the crate filtering can be set before the\n-        // search might start (if it's set into the URL for example).\n-        v.push_str(\"\\\\\\n}');\\naddSearchOptions(searchIndex);initSearch(searchIndex);\");\n+        v.push_str(\"\\\\\\n}');\\ninitSearch(searchIndex);\");\n         cx.shared.fs.write(&dst, &v)?;\n     }\n+\n+    let crate_list_dst = cx.dst.join(&format!(\"crates{}.js\", cx.shared.resource_suffix));\n+    let crate_list =\n+        format!(\"window.ALL_CRATES = [{}];\", krates.iter().map(|k| format!(\"\\\"{}\\\"\", k)).join(\",\"));\n+    cx.shared.fs.write(&crate_list_dst, &crate_list)?;\n+\n     if options.enable_index_page {\n         if let Some(index_page) = options.index_page.clone() {\n             let mut md_opts = options.clone();\n@@ -1076,9 +1082,6 @@ themePicker.onblur = handleThemeButtonsBlur;\n                 extra_scripts: &[],\n                 static_extra_scripts: &[],\n             };\n-            krates.push(krate.name.to_string());\n-            krates.sort();\n-            krates.dedup();\n \n             let content = format!(\n                 \"<h1 class=\\\"fqn\\\">\\"}, {"sha": "89b1362b32b63bb159ad7b51262068f523589b0c", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 56, "deletions": 42, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/768d5e950953738a54480e530341964838d29da2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/768d5e950953738a54480e530341964838d29da2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=768d5e950953738a54480e530341964838d29da2", "patch": "@@ -42,6 +42,7 @@ if (!DOMTokenList.prototype.remove) {\n     if (rustdocVars) {\n         window.rootPath = rustdocVars.attributes[\"data-root-path\"].value;\n         window.currentCrate = rustdocVars.attributes[\"data-current-crate\"].value;\n+        window.searchJS = rustdocVars.attributes[\"data-search-js\"].value;\n     }\n     var sidebarVars = document.getElementById(\"sidebar-vars\");\n     if (sidebarVars) {\n@@ -1922,8 +1923,8 @@ function defocusSearchBar() {\n             return searchWords;\n         }\n \n-        function startSearch() {\n-            var callback = function() {\n+        function registerSearchEvents() {\n+            var searchAfter500ms = function() {\n                 clearInputTimeout();\n                 if (search_input.value.length === 0) {\n                     if (browserSupportsHistoryApi()) {\n@@ -1935,8 +1936,8 @@ function defocusSearchBar() {\n                     searchTimeout = setTimeout(search, 500);\n                 }\n             };\n-            search_input.onkeyup = callback;\n-            search_input.oninput = callback;\n+            search_input.onkeyup = searchAfter500ms;\n+            search_input.oninput = searchAfter500ms;\n             document.getElementsByClassName(\"search-form\")[0].onsubmit = function(e) {\n                 e.preventDefault();\n                 clearInputTimeout();\n@@ -1999,7 +2000,6 @@ function defocusSearchBar() {\n                     }\n                 });\n             }\n-            search();\n \n             // This is required in firefox to avoid this problem: Navigating to a search result\n             // with the keyboard, hitting enter, and then hitting back would take you back to\n@@ -2017,8 +2017,14 @@ function defocusSearchBar() {\n         }\n \n         index = buildIndex(rawSearchIndex);\n-        startSearch();\n+        registerSearchEvents();\n+        // If there's a search term in the URL, execute the search now.\n+        if (getQueryStringParams().search) {\n+            search();\n+        }\n+    };\n \n+    function addSidebarCrates(crates) {\n         // Draw a convenient sidebar of known crates if we have a listing\n         if (window.rootPath === \"../\" || window.rootPath === \"./\") {\n             var sidebar = document.getElementsByClassName(\"sidebar-elems\")[0];\n@@ -2029,24 +2035,13 @@ function defocusSearchBar() {\n                 var ul = document.createElement(\"ul\");\n                 div.appendChild(ul);\n \n-                var crates = [];\n-                for (var crate in rawSearchIndex) {\n-                    if (!hasOwnProperty(rawSearchIndex, crate)) {\n-                        continue;\n-                    }\n-                    crates.push(crate);\n-                }\n-                crates.sort();\n                 for (var i = 0; i < crates.length; ++i) {\n                     var klass = \"crate\";\n                     if (window.rootPath !== \"./\" && crates[i] === window.currentCrate) {\n                         klass += \" current\";\n                     }\n                     var link = document.createElement(\"a\");\n                     link.href = window.rootPath + crates[i] + \"/index.html\";\n-                    // The summary in the search index has HTML, so we need to\n-                    // dynamically render it as plaintext.\n-                    link.title = convertHTMLToPlaintext(rawSearchIndex[crates[i]].doc);\n                     link.className = klass;\n                     link.textContent = crates[i];\n \n@@ -2057,7 +2052,7 @@ function defocusSearchBar() {\n                 sidebar.appendChild(div);\n             }\n         }\n-    };\n+    }\n \n     /**\n      * Convert HTML to plaintext:\n@@ -2862,45 +2857,26 @@ function defocusSearchBar() {\n         }\n     }\n \n-    window.addSearchOptions = function(crates) {\n+    function addSearchOptions(crates) {\n         var elem = document.getElementById(\"crate-search\");\n \n         if (!elem) {\n             enableSearchInput();\n             return;\n         }\n-        var crates_text = [];\n-        if (Object.keys(crates).length > 1) {\n-            for (var crate in crates) {\n-                if (hasOwnProperty(crates, crate)) {\n-                    crates_text.push(crate);\n-                }\n-            }\n-        }\n-        crates_text.sort(function(a, b) {\n-            var lower_a = a.toLowerCase();\n-            var lower_b = b.toLowerCase();\n-\n-            if (lower_a < lower_b) {\n-                return -1;\n-            } else if (lower_a > lower_b) {\n-                return 1;\n-            }\n-            return 0;\n-        });\n         var savedCrate = getSettingValue(\"saved-filter-crate\");\n-        for (var i = 0, len = crates_text.length; i < len; ++i) {\n+        for (var i = 0, len = crates.length; i < len; ++i) {\n             var option = document.createElement(\"option\");\n-            option.value = crates_text[i];\n-            option.innerText = crates_text[i];\n+            option.value = crates[i];\n+            option.innerText = crates[i];\n             elem.appendChild(option);\n             // Set the crate filter from saved storage, if the current page has the saved crate\n             // filter.\n             //\n             // If not, ignore the crate filter -- we want to support filtering for crates on sites\n             // like doc.rust-lang.org where the crates may differ from page to page while on the\n             // same domain.\n-            if (crates_text[i] === savedCrate) {\n+            if (crates[i] === savedCrate) {\n                 elem.value = savedCrate;\n             }\n         }\n@@ -2969,6 +2945,44 @@ function defocusSearchBar() {\n         buildHelperPopup = function() {};\n     }\n \n+    function loadScript(url) {\n+        var script = document.createElement('script');\n+        script.src = url;\n+        document.head.append(script);\n+    }\n+\n+    function setupSearchLoader() {\n+        var searchLoaded = false;\n+        function loadSearch() {\n+            if (!searchLoaded) {\n+                searchLoaded = true;\n+                loadScript(window.searchJS);\n+            }\n+        }\n+\n+        // `crates{version}.js` should always be loaded before this script, so we can use it safely.\n+        addSearchOptions(window.ALL_CRATES);\n+        addSidebarCrates(window.ALL_CRATES);\n+\n+        search_input.addEventListener(\"focus\", function() {\n+            search_input.origPlaceholder = search_input.placeholder;\n+            search_input.placeholder = \"Type your search here.\";\n+            loadSearch();\n+        });\n+        search_input.addEventListener(\"blur\", function() {\n+            search_input.placeholder = search_input.origPlaceholder;\n+        });\n+        enableSearchInput();\n+\n+        var crateSearchDropDown = document.getElementById(\"crate-search\");\n+        crateSearchDropDown.addEventListener(\"focus\", loadSearch);\n+        var params = getQueryStringParams();\n+        if (params.search !== undefined) {\n+            loadSearch();\n+        }\n+    }\n+\n     onHashChange(null);\n     window.onhashchange = onHashChange;\n+    setupSearchLoader();\n }());"}]}