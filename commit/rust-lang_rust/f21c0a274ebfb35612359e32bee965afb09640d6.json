{"sha": "f21c0a274ebfb35612359e32bee965afb09640d6", "node_id": "C_kwDOAAsO6NoAKGYyMWMwYTI3NGViZmIzNTYxMjM1OWUzMmJlZTk2NWFmYjA5NjQwZDY", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-06-05T12:45:29Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-06-05T12:45:29Z"}, "message": "Suggest adding `{}` for `'label: non_block_expr`", "tree": {"sha": "df6f875894b8f7ce83b4a67b07521cccb8931a3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df6f875894b8f7ce83b4a67b07521cccb8931a3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f21c0a274ebfb35612359e32bee965afb09640d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f21c0a274ebfb35612359e32bee965afb09640d6", "html_url": "https://github.com/rust-lang/rust/commit/f21c0a274ebfb35612359e32bee965afb09640d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f21c0a274ebfb35612359e32bee965afb09640d6/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2da4af33c5e6a22fff0a223f99d53cba4a5aa52", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2da4af33c5e6a22fff0a223f99d53cba4a5aa52", "html_url": "https://github.com/rust-lang/rust/commit/a2da4af33c5e6a22fff0a223f99d53cba4a5aa52"}], "stats": {"total": 134, "additions": 122, "deletions": 12}, "files": [{"sha": "761d521a07ec6269196c7ad8945bf05041379b98", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f21c0a274ebfb35612359e32bee965afb09640d6/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21c0a274ebfb35612359e32bee965afb09640d6/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=f21c0a274ebfb35612359e32bee965afb09640d6", "patch": "@@ -13,10 +13,12 @@ use rustc_ast::tokenstream::Spacing;\n use rustc_ast::util::classify;\n use rustc_ast::util::literal::LitError;\n use rustc_ast::util::parser::{prec_let_scrutinee_needs_par, AssocOp, Fixity};\n+use rustc_ast::StmtKind;\n use rustc_ast::{self as ast, AttrStyle, AttrVec, CaptureBy, ExprField, Lit, UnOp, DUMMY_NODE_ID};\n use rustc_ast::{AnonConst, BinOp, BinOpKind, FnDecl, FnRetTy, MacCall, Param, Ty, TyKind};\n use rustc_ast::{Arm, Async, BlockCheckMode, Expr, ExprKind, Label, Movability, RangeLimits};\n use rustc_ast_pretty::pprust;\n+use rustc_data_structures::thin_vec::ThinVec;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, PResult};\n use rustc_session::lint::builtin::BREAK_WITH_LABEL_AND_LOOP;\n use rustc_session::lint::BuiltinLintDiagnostics;\n@@ -1548,9 +1550,33 @@ impl<'a> Parser<'a> {\n             Ok(self.mk_expr_err(lo))\n         } else {\n             let msg = \"expected `while`, `for`, `loop` or `{` after a label\";\n-            self.struct_span_err(self.token.span, msg).span_label(self.token.span, msg).emit();\n+\n+            let mut err = self.struct_span_err(self.token.span, msg);\n+            err.span_label(self.token.span, msg);\n+\n             // Continue as an expression in an effort to recover on `'label: non_block_expr`.\n-            self.parse_expr()\n+            let expr = self.parse_expr().map(|expr| {\n+                let span = expr.span;\n+                let sugg_msg = \"consider enclosing expression in a block\";\n+                let suggestions = vec![\n+                    (span.shrink_to_lo(), \"{\".to_owned()),\n+                    (span.shrink_to_hi(), \"}\".to_owned()),\n+                ];\n+\n+                err.multipart_suggestion_verbose(\n+                    sugg_msg,\n+                    suggestions,\n+                    Applicability::MachineApplicable,\n+                );\n+\n+                // Replace `'label: non_block_expr` with `'label: {non_block_expr}` in order to supress future errors about `break 'label`.\n+                let stmt = self.mk_stmt(span, StmtKind::Expr(expr));\n+                let blk = self.mk_block(vec![stmt], BlockCheckMode::Default, span);\n+                self.mk_expr(span, ExprKind::Block(blk, label), ThinVec::new())\n+            });\n+\n+            err.emit();\n+            expr\n         }?;\n \n         if !ate_colon && consume_colon {"}, {"sha": "4d0d9c4a00bf6fd057e4e24f762e81d2cf6832cd", "filename": "src/test/ui/parser/labeled-no-colon-expr.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f21c0a274ebfb35612359e32bee965afb09640d6/src%2Ftest%2Fui%2Fparser%2Flabeled-no-colon-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f21c0a274ebfb35612359e32bee965afb09640d6/src%2Ftest%2Fui%2Fparser%2Flabeled-no-colon-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flabeled-no-colon-expr.stderr?ref=f21c0a274ebfb35612359e32bee965afb09640d6", "patch": "@@ -47,6 +47,11 @@ error: expected `while`, `for`, `loop` or `{` after a label\n    |\n LL |     'l4 0;\n    |         ^ expected `while`, `for`, `loop` or `{` after a label\n+   |\n+help: consider enclosing expression in a block\n+   |\n+LL |     'l4 {0};\n+   |         + +\n \n error: labeled expression must be followed by `:`\n   --> $DIR/labeled-no-colon-expr.rs:8:9"}, {"sha": "dbe2f2e0bddec19cad395175ec6b6f90239663c2", "filename": "src/test/ui/parser/recover-labeled-non-block-expr.fixed", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f21c0a274ebfb35612359e32bee965afb09640d6/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f21c0a274ebfb35612359e32bee965afb09640d6/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.fixed?ref=f21c0a274ebfb35612359e32bee965afb09640d6", "patch": "@@ -0,0 +1,25 @@\n+// run-rustfix\n+#![feature(label_break_value)]\n+fn main() {\n+    #[allow(unused_labels)]\n+    'label: {1 + 1}; //~ ERROR expected `while`, `for`, `loop` or `{` after a label\n+\n+    'label: {match () { () => break 'label, }}; //~ ERROR expected `while`, `for`, `loop` or `{` after a label\n+\n+    let x = 1;\n+    let _i = 'label: {match x { //~ ERROR expected `while`, `for`, `loop` or `{` after a label\n+        0 => 42,\n+        1 if false => break 'label 17,\n+        1 => {\n+            if true {\n+                break 'label 13\n+            } else {\n+                break 'label 0;\n+            }\n+        }\n+        _ => 1,\n+    }};\n+\n+    let other = 3;\n+    let _val = 'label: {(1, if other == 3 { break 'label (2, 3) } else { other })}; //~ ERROR expected `while`, `for`, `loop` or `{` after a label\n+}"}, {"sha": "9c22c07371296f9505d709cf5dab4dd70490c9a1", "filename": "src/test/ui/parser/recover-labeled-non-block-expr.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f21c0a274ebfb35612359e32bee965afb09640d6/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21c0a274ebfb35612359e32bee965afb09640d6/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.rs?ref=f21c0a274ebfb35612359e32bee965afb09640d6", "patch": "@@ -1,5 +1,25 @@\n+// run-rustfix\n+#![feature(label_break_value)]\n fn main() {\n+    #[allow(unused_labels)]\n     'label: 1 + 1; //~ ERROR expected `while`, `for`, `loop` or `{` after a label\n \n-    let _recovery_witness: () = 0; //~ ERROR mismatched types\n+    'label: match () { () => break 'label, }; //~ ERROR expected `while`, `for`, `loop` or `{` after a label\n+\n+    let x = 1;\n+    let _i = 'label: match x { //~ ERROR expected `while`, `for`, `loop` or `{` after a label\n+        0 => 42,\n+        1 if false => break 'label 17,\n+        1 => {\n+            if true {\n+                break 'label 13\n+            } else {\n+                break 'label 0;\n+            }\n+        }\n+        _ => 1,\n+    };\n+\n+    let other = 3;\n+    let _val = 'label: (1, if other == 3 { break 'label (2, 3) } else { other }); //~ ERROR expected `while`, `for`, `loop` or `{` after a label\n }"}, {"sha": "2e4e45d6171389e00c9c3b2cb648c6622149d1f0", "filename": "src/test/ui/parser/recover-labeled-non-block-expr.stderr", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f21c0a274ebfb35612359e32bee965afb09640d6/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f21c0a274ebfb35612359e32bee965afb09640d6/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.stderr?ref=f21c0a274ebfb35612359e32bee965afb09640d6", "patch": "@@ -1,17 +1,51 @@\n error: expected `while`, `for`, `loop` or `{` after a label\n-  --> $DIR/recover-labeled-non-block-expr.rs:2:13\n+  --> $DIR/recover-labeled-non-block-expr.rs:5:13\n    |\n LL |     'label: 1 + 1;\n    |             ^ expected `while`, `for`, `loop` or `{` after a label\n+   |\n+help: consider enclosing expression in a block\n+   |\n+LL |     'label: {1 + 1};\n+   |             +     +\n+\n+error: expected `while`, `for`, `loop` or `{` after a label\n+  --> $DIR/recover-labeled-non-block-expr.rs:7:13\n+   |\n+LL |     'label: match () { () => break 'label, };\n+   |             ^^^^^ expected `while`, `for`, `loop` or `{` after a label\n+   |\n+help: consider enclosing expression in a block\n+   |\n+LL |     'label: {match () { () => break 'label, }};\n+   |             +                                +\n \n-error[E0308]: mismatched types\n-  --> $DIR/recover-labeled-non-block-expr.rs:4:33\n+error: expected `while`, `for`, `loop` or `{` after a label\n+  --> $DIR/recover-labeled-non-block-expr.rs:10:22\n+   |\n+LL |     let _i = 'label: match x {\n+   |                      ^^^^^ expected `while`, `for`, `loop` or `{` after a label\n+   |\n+help: consider enclosing expression in a block\n+   |\n+LL ~     let _i = 'label: {match x {\n+LL |         0 => 42,\n+LL |         1 if false => break 'label 17,\n+LL |         1 => {\n+LL |             if true {\n+LL |                 break 'label 13\n+ ...\n+\n+error: expected `while`, `for`, `loop` or `{` after a label\n+  --> $DIR/recover-labeled-non-block-expr.rs:24:24\n+   |\n+LL |     let _val = 'label: (1, if other == 3 { break 'label (2, 3) } else { other });\n+   |                        ^ expected `while`, `for`, `loop` or `{` after a label\n+   |\n+help: consider enclosing expression in a block\n    |\n-LL |     let _recovery_witness: () = 0;\n-   |                            --   ^ expected `()`, found integer\n-   |                            |\n-   |                            expected due to this\n+LL |     let _val = 'label: {(1, if other == 3 { break 'label (2, 3) } else { other })};\n+   |                        +                                                         +\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0308`."}]}