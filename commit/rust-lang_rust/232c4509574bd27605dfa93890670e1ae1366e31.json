{"sha": "232c4509574bd27605dfa93890670e1ae1366e31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMmM0NTA5NTc0YmQyNzYwNWRmYTkzODkwNjcwZTFhZTEzNjZlMzE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-14T23:50:48Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-14T23:50:59Z"}, "message": "Work on destructors, not entirely functional yet (no tydesc integration).", "tree": {"sha": "fddaed0c44cb9b15355c20c37e00cec21d1d3df1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fddaed0c44cb9b15355c20c37e00cec21d1d3df1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/232c4509574bd27605dfa93890670e1ae1366e31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/232c4509574bd27605dfa93890670e1ae1366e31", "html_url": "https://github.com/rust-lang/rust/commit/232c4509574bd27605dfa93890670e1ae1366e31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/232c4509574bd27605dfa93890670e1ae1366e31/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0387b5a060a1ca3484cfb130bc589f1470afa13a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0387b5a060a1ca3484cfb130bc589f1470afa13a", "html_url": "https://github.com/rust-lang/rust/commit/0387b5a060a1ca3484cfb130bc589f1470afa13a"}], "stats": {"total": 113, "additions": 100, "deletions": 13}, "files": [{"sha": "b0a1a0d6d5f107a7df5e819333624b652bfa31c1", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/232c4509574bd27605dfa93890670e1ae1366e31/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232c4509574bd27605dfa93890670e1ae1366e31/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=232c4509574bd27605dfa93890670e1ae1366e31", "patch": "@@ -362,7 +362,7 @@ type method = spanned[method_];\n type obj_field = rec(@ty ty, ident ident, def_id id, ann ann);\n type _obj = rec(vec[obj_field] fields,\n                 vec[@method] methods,\n-                option.t[block] dtor);\n+                option.t[@method] dtor);\n \n tag mod_index_entry {\n     mie_view_item(@view_item);"}, {"sha": "2e6e7c293582e2f5d723347e5114366aca020096", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/232c4509574bd27605dfa93890670e1ae1366e31/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232c4509574bd27605dfa93890670e1ae1366e31/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=232c4509574bd27605dfa93890670e1ae1366e31", "patch": "@@ -1823,6 +1823,25 @@ impure fn parse_method(parser p) -> @ast.method {\n     ret @spanned(lo, f.body.span.hi, meth);\n }\n \n+impure fn parse_dtor(parser p) -> @ast.method {\n+    auto lo = p.get_lo_pos();\n+    expect(p, token.DROP);\n+    let ast.block b = parse_block(p);\n+    let vec[ast.arg] inputs = vec();\n+    let @ast.ty output = @spanned(lo, lo, ast.ty_nil);\n+    let ast.fn_decl d = rec(effect=ast.eff_pure,\n+                            inputs=inputs,\n+                            output=output);\n+    let ast._fn f = rec(decl = d,\n+                        proto = ast.proto_fn,\n+                        body = b);\n+    let ast.method_ m = rec(ident=\"drop\",\n+                            meth=f,\n+                            id=p.next_def_id(),\n+                            ann=ast.ann_none);\n+    ret @spanned(lo, f.body.span.hi, m);\n+}\n+\n impure fn parse_item_obj(parser p, ast.layer lyr) -> @ast.item {\n     auto lo = p.get_lo_pos();\n     expect(p, token.OBJ);\n@@ -1837,14 +1856,13 @@ impure fn parse_item_obj(parser p, ast.layer lyr) -> @ast.item {\n          pf, p);\n \n     let vec[@ast.method] meths = vec();\n-    let option.t[ast.block] dtor = none[ast.block];\n+    let option.t[@ast.method] dtor = none[@ast.method];\n \n     expect(p, token.LBRACE);\n     while (p.peek() != token.RBRACE) {\n         alt (p.peek()) {\n             case (token.DROP) {\n-                p.bump();\n-                dtor = some[ast.block](parse_block(p));\n+                dtor = some[@ast.method](parse_dtor(p));\n             }\n             case (_) {\n                 _vec.push[@ast.method](meths,"}, {"sha": "3c1413122a7a90ffa72b7595708b97fddb3c258e", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/232c4509574bd27605dfa93890670e1ae1366e31/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232c4509574bd27605dfa93890670e1ae1366e31/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=232c4509574bd27605dfa93890670e1ae1366e31", "patch": "@@ -314,7 +314,7 @@ type ast_fold[ENV] =\n      (fn(&ENV e,\n          vec[ast.obj_field] fields,\n          vec[@ast.method] methods,\n-         option.t[block] dtor) -> ast._obj)       fold_obj,\n+         option.t[@ast.method] dtor) -> ast._obj) fold_obj,\n \n      // Env updates.\n      (fn(&ENV e, @ast.crate c) -> ENV) update_env_for_crate,\n@@ -927,11 +927,11 @@ fn fold_obj[ENV](&ENV env, ast_fold[ENV] fld, &ast._obj ob) -> ast._obj {\n     for (ast.obj_field f in ob.fields) {\n         fields += vec(fold_obj_field(env, fld, f));\n     }\n-    let option.t[block] dtor = none[block];\n+    let option.t[@ast.method] dtor = none[@ast.method];\n     alt (ob.dtor) {\n-        case (none[block]) { }\n-        case (some[block](?b)) {\n-            dtor = some[block](fold_block[ENV](env, fld, b));\n+        case (none[@ast.method]) { }\n+        case (some[@ast.method](?m)) {\n+            dtor = some[@ast.method](fold_method[ENV](env, fld, m));\n         }\n     }\n     let vec[ast.ty_param] tp = vec();\n@@ -1561,7 +1561,7 @@ fn identity_fold_crate[ENV](&ENV e, &span sp,\n fn identity_fold_obj[ENV](&ENV e,\n                           vec[ast.obj_field] fields,\n                           vec[@ast.method] methods,\n-                          option.t[block] dtor) -> ast._obj {\n+                          option.t[@ast.method] dtor) -> ast._obj {\n     ret rec(fields=fields, methods=methods, dtor=dtor);\n }\n "}, {"sha": "c5bb601b74e687caeb82d88c3ec9b63591822f14", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/232c4509574bd27605dfa93890670e1ae1366e31/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232c4509574bd27605dfa93890670e1ae1366e31/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=232c4509574bd27605dfa93890670e1ae1366e31", "patch": "@@ -5789,6 +5789,35 @@ fn trans_vtbl(@crate_ctxt cx,\n     ret gvar;\n }\n \n+fn trans_dtor(@crate_ctxt cx,\n+              TypeRef llself_ty,\n+              @ty.t self_ty,\n+              &vec[ast.ty_param] ty_params,\n+              &@ast.method dtor) -> ValueRef {\n+\n+    auto llfnty = T_nil();\n+    alt (node_ann_type(cx, dtor.node.ann).struct) {\n+        case (ty.ty_fn(?proto, ?inputs, ?output)) {\n+            llfnty = type_of_fn_full(cx, proto,\n+                                     some[TypeRef](llself_ty),\n+                                     inputs, output,\n+                                     _vec.len[ast.ty_param](ty_params));\n+        }\n+    }\n+\n+    let @crate_ctxt dcx = extend_path(cx, \"drop\");\n+    let str s = mangle_name_by_seq(dcx, \"drop\");\n+    let ValueRef llfn = decl_internal_fastcall_fn(cx.llmod, s, llfnty);\n+    cx.item_ids.insert(dtor.node.id, llfn);\n+    cx.item_symbols.insert(dtor.node.id, s);\n+\n+    trans_fn(dcx, dtor.node.meth, dtor.node.id,\n+             some[tup(TypeRef, @ty.t)](tup(llself_ty, self_ty)),\n+             ty_params, dtor.node.ann);\n+\n+    ret llfn;\n+}\n+\n fn trans_obj(@crate_ctxt cx, &ast._obj ob, ast.def_id oid,\n              &vec[ast.ty_param] ty_params, &ast.ann ann) {\n \n@@ -5871,6 +5900,14 @@ fn trans_obj(@crate_ctxt cx, &ast._obj ob, ast.def_id oid,\n                          vec(0, abi.obj_body_elt_tydesc));\n         bcx = body_tydesc.bcx;\n \n+        auto dtor = C_null(T_ptr(T_glue_fn(cx.tn)));\n+        alt (ob.dtor) {\n+            case (some[@ast.method](?d)) {\n+                dtor = trans_dtor(cx, llself_ty, self_ty, ty_params, d);\n+            }\n+            case (none[@ast.method]) {}\n+        }\n+\n         auto body_td = get_tydesc(bcx, body_ty);\n         bcx = body_td.bcx;\n         bcx.build.Store(body_td.val, body_tydesc.val);"}, {"sha": "60b9178aa7f53b28408be0cff3d5043da8d71f33", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/232c4509574bd27605dfa93890670e1ae1366e31/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232c4509574bd27605dfa93890670e1ae1366e31/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=232c4509574bd27605dfa93890670e1ae1366e31", "patch": "@@ -770,8 +770,22 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n             _vec.push[ast.obj_field](fields, f);\n         }\n \n+        auto dtor = none[@ast.method];\n+        alt (ob.dtor) {\n+            case (some[@ast.method](?d)) {\n+                let vec[arg] inputs = vec();\n+                let @ty.t output = @rec(struct=ty.ty_nil, cname=none[str]);\n+                auto dtor_tfn = plain_ty(ty.ty_fn(ast.proto_fn,\n+                                                  inputs, output));\n+                auto d_ = rec(ann=triv_ann(dtor_tfn) with d.node);\n+                dtor = some[@ast.method](@rec(node=d_ with *d));\n+            }\n+            case (none[@ast.method]) { }\n+        }\n+\n         auto ob_ = rec(methods = methods,\n-                       fields = fields\n+                       fields = fields,\n+                       dtor = dtor\n                        with ob);\n         auto item = ast.item_obj(i, ob_, ty_params, odid, triv_ann(t));\n         ret @fold.respan[ast.item_](sp, item);"}, {"sha": "e79e9eee3d96dd2e74a1b96589c196d6b2bc3006", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/232c4509574bd27605dfa93890670e1ae1366e31/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232c4509574bd27605dfa93890670e1ae1366e31/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=232c4509574bd27605dfa93890670e1ae1366e31", "patch": "@@ -320,10 +320,10 @@ impure fn print_item(ps s, @ast.item item) {\n                 line(s.s);\n             }\n             alt (_obj.dtor) {\n-                case (option.some[ast.block](?dtor)) {\n+                case (option.some[@ast.method](?dtor)) {\n                     hbox(s);\n                     wrd1(s, \"close\");\n-                    print_block(s, dtor);\n+                    print_block(s, dtor.node.meth.body);\n                     end(s.s);\n                     line(s.s);\n                 }"}, {"sha": "167b15fbaeec403c65107c87219d6668e4504e22", "filename": "src/test/run-pass/obj-dtor-2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/232c4509574bd27605dfa93890670e1ae1366e31/src%2Ftest%2Frun-pass%2Fobj-dtor-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232c4509574bd27605dfa93890670e1ae1366e31/src%2Ftest%2Frun-pass%2Fobj-dtor-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-dtor-2.rs?ref=232c4509574bd27605dfa93890670e1ae1366e31", "patch": "@@ -0,0 +1,18 @@\n+// xfail-stage00\n+\n+obj foo(@mutable int x) {\n+  drop {\n+    log \"running dtor\";\n+    *x = ((*x) + 1);\n+  }\n+}\n+\n+\n+\n+fn main() {\n+  auto mbox = @mutable 10;\n+  {\n+    auto x = foo(mbox);\n+  }\n+  check ((*mbox) == 11);\n+}\n\\ No newline at end of file"}]}