{"sha": "47ae8deb8a35030bdc4e502b03400800864cc264", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3YWU4ZGViOGEzNTAzMGJkYzRlNTAyYjAzNDAwODAwODY0Y2MyNjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-08T17:26:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-08T17:26:17Z"}, "message": "Auto merge of #88750 - jackh726:rollup-w57i9fp, r=jackh726\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #86263 (Rustdoc: Report Layout of enum variants)\n - #88541 (Add regression test for #74400)\n - #88553 (Improve diagnostics for unary plus operators (#88276))\n - #88594 (More symbolic doc aliases)\n - #88648 (Correct \u201ccopies\u201d to \u201cmoves\u201d in `<Option<T> as From<T>>::from` doc, and other copyediting)\n - #88691 (Add a regression test for #88649)\n - #88694 (Drop 1.56 stabilizations from 1.55 release notes)\n - #88712 (Fix docs for `uX::checked_next_multiple_of`)\n - #88726 (Fix typo in `const_generics` replaced with `adt_const_params` note)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d54ceba095ccad99db82466854201635442cea25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d54ceba095ccad99db82466854201635442cea25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47ae8deb8a35030bdc4e502b03400800864cc264", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47ae8deb8a35030bdc4e502b03400800864cc264", "html_url": "https://github.com/rust-lang/rust/commit/47ae8deb8a35030bdc4e502b03400800864cc264", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47ae8deb8a35030bdc4e502b03400800864cc264/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9db3e0fbc84d8409285698486375f080d361ef3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9db3e0fbc84d8409285698486375f080d361ef3", "html_url": "https://github.com/rust-lang/rust/commit/c9db3e0fbc84d8409285698486375f080d361ef3"}, {"sha": "4cb751e1f4ea6b9925e9be8984851f01d0003e30", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cb751e1f4ea6b9925e9be8984851f01d0003e30", "html_url": "https://github.com/rust-lang/rust/commit/4cb751e1f4ea6b9925e9be8984851f01d0003e30"}], "stats": {"total": 305, "additions": 260, "deletions": 45}, "files": [{"sha": "c0851a1506e130eb017b21334e7454ee23c89a04", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/47ae8deb8a35030bdc4e502b03400800864cc264/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/47ae8deb8a35030bdc4e502b03400800864cc264/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=47ae8deb8a35030bdc4e502b03400800864cc264", "patch": "@@ -10,8 +10,7 @@ Language\n \n Compiler\n --------\n-- [Added tier 3\\* support for `powerpc-unknown-freebsd`.][87370]\n-- [Added tier 3 support for `powerpc64le-unknown-freebsd`.][83572]\n+- [Added tier 3\\* support for `powerpc64le-unknown-freebsd`.][83572]\n \n \\* Refer to Rust's [platform support page][platform-support-doc] for more\n    information on Rust's tiered platform support.\n@@ -24,17 +23,6 @@ Libraries\n   no longer reject certain valid floating point values, and reduce\n   the produced code size for non-stripped artifacts.\n - [`string::Drain` now implements `AsRef<str>` and `AsRef<[u8]>`.][86858]\n-- [`collections::{BinaryHeap, BTreeSet, HashSet, LinkedList, VecDeque}` now\n-  implement `From<[T; N]>`.][84111]\n-- [`collections::{BTreeMap, HashMap}` now implement `From<[(K, V); N]>`.][84111]\n-  This allows you to write the following;\n-  ```rust\n-  let highscores = std::collections::HashMap::from([\n-      (\"Alice\", 9000u32),\n-      (\"Bob\", 7250),\n-      (\"Charlie\", 5500),\n-  ]);\n-  ```\n \n Stabilised APIs\n ---------------\n@@ -60,7 +48,6 @@ Stabilised APIs\n The following previously stable functions are now `const`.\n \n - [`str::from_utf8_unchecked`]\n-- [`mem::transmute`]\n \n \n Cargo\n@@ -131,7 +118,6 @@ Compatibility Notes\n [`MaybeUninit::assume_init_ref`]: https://doc.rust-lang.org/stable/std/mem/union.MaybeUninit.html#method.assume_init_ref\n [`MaybeUninit::write`]: https://doc.rust-lang.org/stable/std/mem/union.MaybeUninit.html#method.write\n [`Seek::rewind`]: https://doc.rust-lang.org/stable/std/io/trait.Seek.html#method.rewind\n-[`mem::transmute`]: https://doc.rust-lang.org/stable/std/mem/fn.transmute.html\n [`ops::ControlFlow`]: https://doc.rust-lang.org/stable/std/ops/enum.ControlFlow.html\n [`str::from_utf8_unchecked`]: https://doc.rust-lang.org/stable/std/str/fn.from_utf8_unchecked.html\n [`x86::_bittest`]: https://doc.rust-lang.org/stable/core/arch/x86/fn._bittest.html"}, {"sha": "3a65ffe41ae87cbf4c17622dc4b1556c2b231ccf", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/47ae8deb8a35030bdc4e502b03400800864cc264/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ae8deb8a35030bdc4e502b03400800864cc264/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=47ae8deb8a35030bdc4e502b03400800864cc264", "patch": "@@ -586,6 +586,13 @@ impl Token {\n         self.is_non_raw_ident_where(|id| id.name.is_bool_lit())\n     }\n \n+    pub fn is_numeric_lit(&self) -> bool {\n+        matches!(\n+            self.kind,\n+            Literal(Lit { kind: LitKind::Integer, .. }) | Literal(Lit { kind: LitKind::Float, .. })\n+        )\n+    }\n+\n     /// Returns `true` if the token is a non-raw identifier for which `pred` holds.\n     pub fn is_non_raw_ident_where(&self, pred: impl FnOnce(Ident) -> bool) -> bool {\n         match self.ident() {"}, {"sha": "efab0200ff502dbe26ea6c51fd9a563cc3eebe01", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47ae8deb8a35030bdc4e502b03400800864cc264/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ae8deb8a35030bdc4e502b03400800864cc264/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=47ae8deb8a35030bdc4e502b03400800864cc264", "patch": "@@ -104,7 +104,7 @@ declare_features! (\n     (removed, quote, \"1.33.0\", Some(29601), None, None),\n     /// Allows const generic types (e.g. `struct Foo<const N: usize>(...);`).\n     (removed, const_generics, \"1.34.0\", Some(44580), None,\n-     Some(\"removed in favor of `#![feature(adt_const_params]` and `#![feature(generic_const_exprs)]`\")),\n+     Some(\"removed in favor of `#![feature(adt_const_params)]` and `#![feature(generic_const_exprs)]`\")),\n     /// Allows `[x; N]` where `x` is a constant (RFC 2203).\n     (removed, const_in_array_repeat_expressions,  \"1.37.0\", Some(49147), None,\n      Some(\"removed due to causing promotable bugs\")),"}, {"sha": "05156745105a1c0a10b839720f00c8a957d153ef", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/47ae8deb8a35030bdc4e502b03400800864cc264/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ae8deb8a35030bdc4e502b03400800864cc264/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=47ae8deb8a35030bdc4e502b03400800864cc264", "patch": "@@ -516,6 +516,26 @@ impl<'a> Parser<'a> {\n             token::BinOp(token::And) | token::AndAnd => {\n                 make_it!(this, attrs, |this, _| this.parse_borrow_expr(lo))\n             }\n+            token::BinOp(token::Plus) if this.look_ahead(1, |tok| tok.is_numeric_lit()) => {\n+                let mut err = this.struct_span_err(lo, \"leading `+` is not supported\");\n+                err.span_label(lo, \"unexpected `+`\");\n+\n+                // a block on the LHS might have been intended to be an expression instead\n+                if let Some(sp) = this.sess.ambiguous_block_expr_parse.borrow().get(&lo) {\n+                    this.sess.expr_parentheses_needed(&mut err, *sp);\n+                } else {\n+                    err.span_suggestion_verbose(\n+                        lo,\n+                        \"try removing the `+`\",\n+                        \"\".to_string(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+                err.emit();\n+\n+                this.bump();\n+                this.parse_prefix_expr(None)\n+            } // `+expr`\n             token::Ident(..) if this.token.is_keyword(kw::Box) => {\n                 make_it!(this, attrs, |this, _| this.parse_box_expr(lo))\n             }"}, {"sha": "b6bb06f9d64bc886882dda54c10c37c8ce66763a", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/47ae8deb8a35030bdc4e502b03400800864cc264/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ae8deb8a35030bdc4e502b03400800864cc264/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=47ae8deb8a35030bdc4e502b03400800864cc264", "patch": "@@ -1924,7 +1924,8 @@ macro_rules! uint_impl {\n         }\n \n         /// Calculates the smallest value greater than or equal to `self` that\n-        /// is a multiple of `rhs`. If `rhs` is negative,\n+        /// is a multiple of `rhs`. Returns `None` is `rhs` is zero or the\n+        /// operation would result in overflow.\n         ///\n         /// # Examples\n         ///"}, {"sha": "92f45ac9e7ea9251c39e9cdd4d9cd1a6703cff16", "filename": "library/core/src/ops/bit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47ae8deb8a35030bdc4e502b03400800864cc264/library%2Fcore%2Fsrc%2Fops%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ae8deb8a35030bdc4e502b03400800864cc264/library%2Fcore%2Fsrc%2Fops%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fbit.rs?ref=47ae8deb8a35030bdc4e502b03400800864cc264", "patch": "@@ -30,6 +30,7 @@\n /// ```\n #[lang = \"not\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(alias = \"!\")]\n pub trait Not {\n     /// The resulting type after applying the `!` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "907726f0c345c8a3736cbae493697e861aba609c", "filename": "library/core/src/option.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/47ae8deb8a35030bdc4e502b03400800864cc264/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ae8deb8a35030bdc4e502b03400800864cc264/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=47ae8deb8a35030bdc4e502b03400800864cc264", "patch": "@@ -1173,7 +1173,7 @@ impl<T> Option<T> {\n     // Entry-like operations to insert a value and return a reference\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Inserts `value` into the option then returns a mutable reference to it.\n+    /// Inserts `value` into the option, then returns a mutable reference to it.\n     ///\n     /// If the option already contains a value, the old value is dropped.\n     ///\n@@ -1397,7 +1397,7 @@ impl<T> Option<T> {\n }\n \n impl<T, U> Option<(T, U)> {\n-    /// Unzips an option containing a tuple of two options\n+    /// Unzips an option containing a tuple of two options.\n     ///\n     /// If `self` is `Some((a, b))` this method returns `(Some(a), Some(b))`.\n     /// Otherwise, `(None, None)` is returned.\n@@ -1500,7 +1500,7 @@ impl<T: Clone> Option<&mut T> {\n }\n \n impl<T: Default> Option<T> {\n-    /// Returns the contained [`Some`] value or a default\n+    /// Returns the contained [`Some`] value or a default.\n     ///\n     /// Consumes the `self` argument then, if [`Some`], returns the contained\n     /// value, otherwise if [`None`], returns the [default value] for that\n@@ -1561,7 +1561,7 @@ impl<T: DerefMut> Option<T> {\n     /// Converts from `Option<T>` (or `&mut Option<T>`) to `Option<&mut T::Target>`.\n     ///\n     /// Leaves the original `Option` in-place, creating a new one containing a mutable reference to\n-    /// the inner type's `Deref::Target` type.\n+    /// the inner type's [`Deref::Target`] type.\n     ///\n     /// # Examples\n     ///\n@@ -1701,7 +1701,7 @@ impl<'a, T> IntoIterator for &'a mut Option<T> {\n \n #[stable(since = \"1.12.0\", feature = \"option_from\")]\n impl<T> From<T> for Option<T> {\n-    /// Copies `val` into a new `Some`.\n+    /// Moves `val` into a new [`Some`].\n     ///\n     /// # Examples\n     ///\n@@ -1942,8 +1942,8 @@ unsafe impl<A> TrustedLen for IntoIter<A> {}\n impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n     /// Takes each element in the [`Iterator`]: if it is [`None`][Option::None],\n     /// no further elements are taken, and the [`None`][Option::None] is\n-    /// returned. Should no [`None`][Option::None] occur, a container with the\n-    /// values of each [`Option`] is returned.\n+    /// returned. Should no [`None`][Option::None] occur, a container of type\n+    /// `V` containing the values of each [`Option`] is returned.\n     ///\n     /// # Examples\n     ///\n@@ -2039,7 +2039,7 @@ impl<T> ops::FromResidual for Option<T> {\n }\n \n impl<T> Option<Option<T>> {\n-    /// Converts from `Option<Option<T>>` to `Option<T>`\n+    /// Converts from `Option<Option<T>>` to `Option<T>`.\n     ///\n     /// # Examples\n     ///"}, {"sha": "3af941f59b68918d1417e444428112cdc662e17a", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47ae8deb8a35030bdc4e502b03400800864cc264/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ae8deb8a35030bdc4e502b03400800864cc264/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=47ae8deb8a35030bdc4e502b03400800864cc264", "patch": "@@ -119,7 +119,7 @@ mod break_keyword {}\n \n #[doc(keyword = \"const\")]\n //\n-/// Compile-time constants and compile-time evaluable functions.\n+/// Compile-time constants, compile-time evaluable functions, and raw pointers.\n ///\n /// ## Compile-time constants\n ///"}, {"sha": "1669c467b918c480e0c2c11d1230690311fe94b3", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/47ae8deb8a35030bdc4e502b03400800864cc264/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ae8deb8a35030bdc4e502b03400800864cc264/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=47ae8deb8a35030bdc4e502b03400800864cc264", "patch": "@@ -388,8 +388,11 @@ mod prim_char {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_unit {}\n \n-#[doc(alias = \"ptr\")]\n #[doc(primitive = \"pointer\")]\n+#[doc(alias = \"ptr\")]\n+#[doc(alias = \"*\")]\n+#[doc(alias = \"*const\")]\n+#[doc(alias = \"*mut\")]\n //\n /// Raw, unsafe pointers, `*const T`, and `*mut T`.\n ///\n@@ -502,10 +505,10 @@ mod prim_unit {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_pointer {}\n \n+#[doc(primitive = \"array\")]\n #[doc(alias = \"[]\")]\n #[doc(alias = \"[T;N]\")] // unfortunately, rustdoc doesn't have fuzzy search for aliases\n #[doc(alias = \"[T; N]\")]\n-#[doc(primitive = \"array\")]\n /// A fixed-size array, denoted `[T; N]`, for the element type, `T`, and the\n /// non-negative compile-time constant size, `N`.\n ///"}, {"sha": "470749ef7b3387759cc295e21533a43bab114636", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 46, "deletions": 11, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/47ae8deb8a35030bdc4e502b03400800864cc264/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ae8deb8a35030bdc4e502b03400800864cc264/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=47ae8deb8a35030bdc4e502b03400800864cc264", "patch": "@@ -8,10 +8,12 @@ use rustc_hir as hir;\n use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::DefId;\n use rustc_middle::middle::stability;\n+use rustc_middle::span_bug;\n use rustc_middle::ty::layout::LayoutError;\n-use rustc_middle::ty::TyCtxt;\n+use rustc_middle::ty::{Adt, TyCtxt};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_target::abi::{Layout, Primitive, TagEncoding, Variants};\n \n use super::{\n     collect_paths_for_type, document, ensure_trailing_slash, item_ty_to_strs, notable_traits_decl,\n@@ -1621,6 +1623,15 @@ fn document_non_exhaustive(w: &mut Buffer, item: &clean::Item) {\n }\n \n fn document_type_layout(w: &mut Buffer, cx: &Context<'_>, ty_def_id: DefId) {\n+    fn write_size_of_layout(w: &mut Buffer, layout: &Layout, tag_size: u64) {\n+        if layout.abi.is_unsized() {\n+            write!(w, \"(unsized)\");\n+        } else {\n+            let bytes = layout.size.bytes() - tag_size;\n+            write!(w, \"{size} byte{pl}\", size = bytes, pl = if bytes == 1 { \"\" } else { \"s\" },);\n+        }\n+    }\n+\n     if !cx.shared.show_type_layout {\n         return;\n     }\n@@ -1642,16 +1653,40 @@ fn document_type_layout(w: &mut Buffer, cx: &Context<'_>, ty_def_id: DefId) {\n                  <a href=\\\"https://doc.rust-lang.org/reference/type-layout.html\\\">\u201cType Layout\u201d</a> \\\n                  chapter for details on type layout guarantees.</p></div>\"\n             );\n-            if ty_layout.layout.abi.is_unsized() {\n-                writeln!(w, \"<p><strong>Size:</strong> (unsized)</p>\");\n-            } else {\n-                let bytes = ty_layout.layout.size.bytes();\n-                writeln!(\n-                    w,\n-                    \"<p><strong>Size:</strong> {size} byte{pl}</p>\",\n-                    size = bytes,\n-                    pl = if bytes == 1 { \"\" } else { \"s\" },\n-                );\n+            w.write_str(\"<p><strong>Size:</strong> \");\n+            write_size_of_layout(w, ty_layout.layout, 0);\n+            writeln!(w, \"</p>\");\n+            if let Variants::Multiple { variants, tag, tag_encoding, .. } =\n+                &ty_layout.layout.variants\n+            {\n+                if !variants.is_empty() {\n+                    w.write_str(\n+                        \"<p><strong>Size for each variant:</strong></p>\\\n+                            <ul>\",\n+                    );\n+\n+                    let adt = if let Adt(adt, _) = ty_layout.ty.kind() {\n+                        adt\n+                    } else {\n+                        span_bug!(tcx.def_span(ty_def_id), \"not an adt\")\n+                    };\n+\n+                    let tag_size = if let TagEncoding::Niche { .. } = tag_encoding {\n+                        0\n+                    } else if let Primitive::Int(i, _) = tag.value {\n+                        i.size().bytes()\n+                    } else {\n+                        span_bug!(tcx.def_span(ty_def_id), \"tag is neither niche nor int\")\n+                    };\n+\n+                    for (index, layout) in variants.iter_enumerated() {\n+                        let ident = adt.variants[index].ident;\n+                        write!(w, \"<li><code>{name}</code>: \", name = ident);\n+                        write_size_of_layout(w, layout, tag_size);\n+                        writeln!(w, \"</li>\");\n+                    }\n+                    w.write_str(\"</ul>\");\n+                }\n             }\n         }\n         // This kind of layout error can occur with valid code, e.g. if you try to"}, {"sha": "0868486fa59cd017a7d16c6a0c8c275bb345d0e7", "filename": "src/test/rustdoc/type-layout.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/47ae8deb8a35030bdc4e502b03400800864cc264/src%2Ftest%2Frustdoc%2Ftype-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ae8deb8a35030bdc4e502b03400800864cc264/src%2Ftest%2Frustdoc%2Ftype-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftype-layout.rs?ref=47ae8deb8a35030bdc4e502b03400800864cc264", "patch": "@@ -52,3 +52,21 @@ pub struct Unsized([u8]);\n \n // @!has type_layout/trait.MyTrait.html 'Size: '\n pub trait MyTrait {}\n+\n+// @has type_layout/enum.Variants.html 'Size: '\n+// @has - '2 bytes'\n+// @has - '<code>A</code>: 0 bytes'\n+// @has - '<code>B</code>: 1 byte'\n+pub enum Variants {\n+    A,\n+    B(u8),\n+}\n+\n+// @has type_layout/enum.WithNiche.html 'Size: '\n+// @has - //p '4 bytes'\n+// @has - '<code>None</code>: 0 bytes'\n+// @has - '<code>Some</code>: 4 bytes'\n+pub enum WithNiche {\n+    None,\n+    Some(std::num::NonZeroU32),\n+}"}, {"sha": "610798d880f0a795cd7458726cf3dbaf80253181", "filename": "src/test/ui/associated-types/issue-36499.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/47ae8deb8a35030bdc4e502b03400800864cc264/src%2Ftest%2Fui%2Fassociated-types%2Fissue-36499.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47ae8deb8a35030bdc4e502b03400800864cc264/src%2Ftest%2Fui%2Fassociated-types%2Fissue-36499.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-36499.stderr?ref=47ae8deb8a35030bdc4e502b03400800864cc264", "patch": "@@ -1,8 +1,14 @@\n-error: expected expression, found `+`\n+error: leading `+` is not supported\n   --> $DIR/issue-36499.rs:4:9\n    |\n LL |     2 + +2;\n-   |         ^ expected expression\n+   |         ^ unexpected `+`\n+   |\n+help: try removing the `+`\n+   |\n+LL -     2 + +2;\n+LL +     2 + 2;\n+   | \n \n error: aborting due to previous error\n "}, {"sha": "43e562b5a7da4b96c83b6793f1d2db9745fdf0d7", "filename": "src/test/ui/consts/issue-88649.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/47ae8deb8a35030bdc4e502b03400800864cc264/src%2Ftest%2Fui%2Fconsts%2Fissue-88649.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ae8deb8a35030bdc4e502b03400800864cc264/src%2Ftest%2Fui%2Fconsts%2Fissue-88649.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-88649.rs?ref=47ae8deb8a35030bdc4e502b03400800864cc264", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+#![crate_type = \"lib\"]\n+\n+enum Foo {\n+    Variant1(bool),\n+    Variant2(bool),\n+}\n+\n+const _: () = {\n+    let mut n = 0;\n+    while n < 2 {\n+        match Foo::Variant1(true) {\n+            Foo::Variant1(x) | Foo::Variant2(x) if x => {}\n+            _ => {}\n+        }\n+        n += 1;\n+    }\n+};"}, {"sha": "5a1294f948f1c3c13e7aa984982f7b7b1d6b7841", "filename": "src/test/ui/lifetimes/lifetime-errors/issue_74400.nll.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/47ae8deb8a35030bdc4e502b03400800864cc264/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47ae8deb8a35030bdc4e502b03400800864cc264/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.nll.stderr?ref=47ae8deb8a35030bdc4e502b03400800864cc264", "patch": "@@ -0,0 +1,30 @@\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/issue_74400.rs:12:5\n+   |\n+LL |     f(data, identity)\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'static`...\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue_74400.rs:12:5\n+   |\n+LL |     f(data, identity)\n+   |     ^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected type `for<'r> Fn<(&'r T,)>`\n+              found type `Fn<(&T,)>`\n+\n+error: implementation of `FnOnce` is not general enough\n+  --> $DIR/issue_74400.rs:12:5\n+   |\n+LL |     f(data, identity)\n+   |     ^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n+   |\n+   = note: `fn(&'2 T) -> &'2 T {identity::<&'2 T>}` must implement `FnOnce<(&'1 T,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 T,)>`, for some specific lifetime `'2`\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0308, E0310.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "f83384524f71822b4174c5bcf1a784b05a9d9de8", "filename": "src/test/ui/lifetimes/lifetime-errors/issue_74400.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/47ae8deb8a35030bdc4e502b03400800864cc264/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ae8deb8a35030bdc4e502b03400800864cc264/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.rs?ref=47ae8deb8a35030bdc4e502b03400800864cc264", "patch": "@@ -0,0 +1,13 @@\n+//! Regression test for #74400: Type mismatch in function arguments E0631, E0271 are falsely\n+//! recognized as E0308 mismatched types.\n+\n+use std::convert::identity;\n+\n+fn main() {}\n+\n+fn f<T, S>(data: &[T], key: impl Fn(&T) -> S) {\n+}\n+\n+fn g<T>(data: &[T]) {\n+    f(data, identity) //~ ERROR implementation of `FnOnce` is not general\n+}"}, {"sha": "d972861a2b5673685ddeba6e903a50ab97d91b46", "filename": "src/test/ui/lifetimes/lifetime-errors/issue_74400.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/47ae8deb8a35030bdc4e502b03400800864cc264/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47ae8deb8a35030bdc4e502b03400800864cc264/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.stderr?ref=47ae8deb8a35030bdc4e502b03400800864cc264", "patch": "@@ -0,0 +1,11 @@\n+error: implementation of `FnOnce` is not general enough\n+  --> $DIR/issue_74400.rs:12:5\n+   |\n+LL |     f(data, identity)\n+   |     ^ implementation of `FnOnce` is not general enough\n+   |\n+   = note: `fn(&'2 T) -> &'2 T {identity::<&'2 T>}` must implement `FnOnce<(&'1 T,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 T,)>`, for some specific lifetime `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "5f5e25991e0cc732dffa898cf5ede8fe6785476c", "filename": "src/test/ui/parser/expr-as-stmt.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47ae8deb8a35030bdc4e502b03400800864cc264/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/47ae8deb8a35030bdc4e502b03400800864cc264/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed?ref=47ae8deb8a35030bdc4e502b03400800864cc264", "patch": "@@ -10,7 +10,7 @@ fn foo() -> i32 {\n }\n \n fn bar() -> i32 {\n-    ({2}) + 2 //~ ERROR expected expression, found `+`\n+    ({2}) + 2 //~ ERROR leading `+` is not supported\n     //~^ ERROR mismatched types\n }\n "}, {"sha": "5428e1c32fed3edbe0a9bef2cf7c890b3ce6246e", "filename": "src/test/ui/parser/expr-as-stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47ae8deb8a35030bdc4e502b03400800864cc264/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ae8deb8a35030bdc4e502b03400800864cc264/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs?ref=47ae8deb8a35030bdc4e502b03400800864cc264", "patch": "@@ -10,7 +10,7 @@ fn foo() -> i32 {\n }\n \n fn bar() -> i32 {\n-    {2} + 2 //~ ERROR expected expression, found `+`\n+    {2} + 2 //~ ERROR leading `+` is not supported\n     //~^ ERROR mismatched types\n }\n "}, {"sha": "d99e9be0000c312ef65101aef774f070e78f8cd2", "filename": "src/test/ui/parser/expr-as-stmt.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47ae8deb8a35030bdc4e502b03400800864cc264/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47ae8deb8a35030bdc4e502b03400800864cc264/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr?ref=47ae8deb8a35030bdc4e502b03400800864cc264", "patch": "@@ -9,11 +9,11 @@ help: parentheses are required to parse this as an expression\n LL |     ({2}) + {2}\n    |     +   +\n \n-error: expected expression, found `+`\n+error: leading `+` is not supported\n   --> $DIR/expr-as-stmt.rs:13:9\n    |\n LL |     {2} + 2\n-   |         ^ expected expression\n+   |         ^ unexpected `+`\n    |\n help: parentheses are required to parse this as an expression\n    |"}, {"sha": "25b7c340f600d792c8360a4d39d986d32905383e", "filename": "src/test/ui/parser/issue-88276-unary-plus.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47ae8deb8a35030bdc4e502b03400800864cc264/src%2Ftest%2Fui%2Fparser%2Fissue-88276-unary-plus.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/47ae8deb8a35030bdc4e502b03400800864cc264/src%2Ftest%2Fui%2Fparser%2Fissue-88276-unary-plus.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-88276-unary-plus.fixed?ref=47ae8deb8a35030bdc4e502b03400800864cc264", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+#[allow(unused_parens)]\n+fn main() {\n+    let _ = 1; //~ ERROR leading `+` is not supported\n+    let _ = (1.0 + 2.0) * 3.0; //~ ERROR leading `+` is not supported\n+                           //~| ERROR leading `+` is not supported\n+    let _ = [3, 4+6]; //~ ERROR leading `+` is not supported\n+}"}, {"sha": "11b2e9d601653f9f02b1f5d5c2e5c330ae2e3eb3", "filename": "src/test/ui/parser/issue-88276-unary-plus.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47ae8deb8a35030bdc4e502b03400800864cc264/src%2Ftest%2Fui%2Fparser%2Fissue-88276-unary-plus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ae8deb8a35030bdc4e502b03400800864cc264/src%2Ftest%2Fui%2Fparser%2Fissue-88276-unary-plus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-88276-unary-plus.rs?ref=47ae8deb8a35030bdc4e502b03400800864cc264", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+#[allow(unused_parens)]\n+fn main() {\n+    let _ = +1; //~ ERROR leading `+` is not supported\n+    let _ = (1.0 + +2.0) * +3.0; //~ ERROR leading `+` is not supported\n+                           //~| ERROR leading `+` is not supported\n+    let _ = [+3, 4+6]; //~ ERROR leading `+` is not supported\n+}"}, {"sha": "b26761729a837dcec48dc22d0b27b3be069a88bd", "filename": "src/test/ui/parser/issue-88276-unary-plus.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/47ae8deb8a35030bdc4e502b03400800864cc264/src%2Ftest%2Fui%2Fparser%2Fissue-88276-unary-plus.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47ae8deb8a35030bdc4e502b03400800864cc264/src%2Ftest%2Fui%2Fparser%2Fissue-88276-unary-plus.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-88276-unary-plus.stderr?ref=47ae8deb8a35030bdc4e502b03400800864cc264", "patch": "@@ -0,0 +1,50 @@\n+error: leading `+` is not supported\n+  --> $DIR/issue-88276-unary-plus.rs:4:13\n+   |\n+LL |     let _ = +1;\n+   |             ^ unexpected `+`\n+   |\n+help: try removing the `+`\n+   |\n+LL -     let _ = +1;\n+LL +     let _ = 1;\n+   | \n+\n+error: leading `+` is not supported\n+  --> $DIR/issue-88276-unary-plus.rs:5:20\n+   |\n+LL |     let _ = (1.0 + +2.0) * +3.0;\n+   |                    ^ unexpected `+`\n+   |\n+help: try removing the `+`\n+   |\n+LL -     let _ = (1.0 + +2.0) * +3.0;\n+LL +     let _ = (1.0 + 2.0) * +3.0;\n+   | \n+\n+error: leading `+` is not supported\n+  --> $DIR/issue-88276-unary-plus.rs:5:28\n+   |\n+LL |     let _ = (1.0 + +2.0) * +3.0;\n+   |                            ^ unexpected `+`\n+   |\n+help: try removing the `+`\n+   |\n+LL -     let _ = (1.0 + +2.0) * +3.0;\n+LL +     let _ = (1.0 + +2.0) * 3.0;\n+   | \n+\n+error: leading `+` is not supported\n+  --> $DIR/issue-88276-unary-plus.rs:7:14\n+   |\n+LL |     let _ = [+3, 4+6];\n+   |              ^ unexpected `+`\n+   |\n+help: try removing the `+`\n+   |\n+LL -     let _ = [+3, 4+6];\n+LL +     let _ = [3, 4+6];\n+   | \n+\n+error: aborting due to 4 previous errors\n+"}]}