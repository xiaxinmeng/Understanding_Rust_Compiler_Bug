{"sha": "ec25f087488a1913982fc6b28b66574ee4791d14", "node_id": "C_kwDOAAsO6NoAKGVjMjVmMDg3NDg4YTE5MTM5ODJmYzZiMjhiNjY1NzRlZTQ3OTFkMTQ", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-03-22T08:11:25Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-03-22T08:37:11Z"}, "message": "Demonstration test for MIR building of checked shift operators", "tree": {"sha": "b5eb151ccda2fb497b2a2cb97e4e1e04ef124683", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5eb151ccda2fb497b2a2cb97e4e1e04ef124683"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec25f087488a1913982fc6b28b66574ee4791d14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec25f087488a1913982fc6b28b66574ee4791d14", "html_url": "https://github.com/rust-lang/rust/commit/ec25f087488a1913982fc6b28b66574ee4791d14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec25f087488a1913982fc6b28b66574ee4791d14/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fa73a75ce94faf1d1008ec96c043134ef0df427", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fa73a75ce94faf1d1008ec96c043134ef0df427", "html_url": "https://github.com/rust-lang/rust/commit/5fa73a75ce94faf1d1008ec96c043134ef0df427"}], "stats": {"total": 314, "additions": 314, "deletions": 0}, "files": [{"sha": "4b63a00a304dc80b7df45071d42a444c24a3d3de", "filename": "tests/mir-opt/building/shifts.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ec25f087488a1913982fc6b28b66574ee4791d14/tests%2Fmir-opt%2Fbuilding%2Fshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec25f087488a1913982fc6b28b66574ee4791d14/tests%2Fmir-opt%2Fbuilding%2Fshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fshifts.rs?ref=ec25f087488a1913982fc6b28b66574ee4791d14", "patch": "@@ -0,0 +1,20 @@\n+// compile-flags: -C debug-assertions=yes\n+\n+// EMIT_MIR shifts.shift_signed.built.after.mir\n+fn shift_signed(small: i8, big: u128, a: i8, b: i32, c: i128) -> ([i8; 3], [u128; 3]) {\n+    (\n+        [small >> a, small >> b, small >> c],\n+        [big << a, big << b, big << c],\n+    )\n+}\n+\n+// EMIT_MIR shifts.shift_unsigned.built.after.mir\n+fn shift_unsigned(small: u8, big: i128, a: u8, b: u32, c: u128) -> ([u8; 3], [i128; 3]) {\n+    (\n+        [small >> a, small >> b, small >> c],\n+        [big << a, big << b, big << c],\n+    )\n+}\n+\n+fn main() {\n+}"}, {"sha": "10fcff028374004d77439e083cc12d01fe9543ce", "filename": "tests/mir-opt/building/shifts.shift_signed.built.after.mir", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/ec25f087488a1913982fc6b28b66574ee4791d14/tests%2Fmir-opt%2Fbuilding%2Fshifts.shift_signed.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ec25f087488a1913982fc6b28b66574ee4791d14/tests%2Fmir-opt%2Fbuilding%2Fshifts.shift_signed.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fshifts.shift_signed.built.after.mir?ref=ec25f087488a1913982fc6b28b66574ee4791d14", "patch": "@@ -0,0 +1,147 @@\n+// MIR for `shift_signed` after built\n+\n+fn shift_signed(_1: i8, _2: u128, _3: i8, _4: i32, _5: i128) -> ([i8; 3], [u128; 3]) {\n+    debug small => _1;                   // in scope 0 at $DIR/shifts.rs:+0:17: +0:22\n+    debug big => _2;                     // in scope 0 at $DIR/shifts.rs:+0:28: +0:31\n+    debug a => _3;                       // in scope 0 at $DIR/shifts.rs:+0:39: +0:40\n+    debug b => _4;                       // in scope 0 at $DIR/shifts.rs:+0:46: +0:47\n+    debug c => _5;                       // in scope 0 at $DIR/shifts.rs:+0:54: +0:55\n+    let mut _0: ([i8; 3], [u128; 3]);    // return place in scope 0 at $DIR/shifts.rs:+0:66: +0:86\n+    let mut _6: [i8; 3];                 // in scope 0 at $DIR/shifts.rs:+2:9: +2:45\n+    let mut _7: i8;                      // in scope 0 at $DIR/shifts.rs:+2:10: +2:20\n+    let mut _8: i8;                      // in scope 0 at $DIR/shifts.rs:+2:10: +2:15\n+    let mut _9: i8;                      // in scope 0 at $DIR/shifts.rs:+2:19: +2:20\n+    let mut _10: i8;                     // in scope 0 at $DIR/shifts.rs:+2:10: +2:20\n+    let mut _11: bool;                   // in scope 0 at $DIR/shifts.rs:+2:10: +2:20\n+    let mut _12: i8;                     // in scope 0 at $DIR/shifts.rs:+2:22: +2:32\n+    let mut _13: i8;                     // in scope 0 at $DIR/shifts.rs:+2:22: +2:27\n+    let mut _14: i32;                    // in scope 0 at $DIR/shifts.rs:+2:31: +2:32\n+    let mut _15: i32;                    // in scope 0 at $DIR/shifts.rs:+2:22: +2:32\n+    let mut _16: bool;                   // in scope 0 at $DIR/shifts.rs:+2:22: +2:32\n+    let mut _17: i8;                     // in scope 0 at $DIR/shifts.rs:+2:34: +2:44\n+    let mut _18: i8;                     // in scope 0 at $DIR/shifts.rs:+2:34: +2:39\n+    let mut _19: i128;                   // in scope 0 at $DIR/shifts.rs:+2:43: +2:44\n+    let mut _20: i128;                   // in scope 0 at $DIR/shifts.rs:+2:34: +2:44\n+    let mut _21: bool;                   // in scope 0 at $DIR/shifts.rs:+2:34: +2:44\n+    let mut _22: [u128; 3];              // in scope 0 at $DIR/shifts.rs:+3:9: +3:39\n+    let mut _23: u128;                   // in scope 0 at $DIR/shifts.rs:+3:10: +3:18\n+    let mut _24: u128;                   // in scope 0 at $DIR/shifts.rs:+3:10: +3:13\n+    let mut _25: i8;                     // in scope 0 at $DIR/shifts.rs:+3:17: +3:18\n+    let mut _26: i8;                     // in scope 0 at $DIR/shifts.rs:+3:10: +3:18\n+    let mut _27: bool;                   // in scope 0 at $DIR/shifts.rs:+3:10: +3:18\n+    let mut _28: u128;                   // in scope 0 at $DIR/shifts.rs:+3:20: +3:28\n+    let mut _29: u128;                   // in scope 0 at $DIR/shifts.rs:+3:20: +3:23\n+    let mut _30: i32;                    // in scope 0 at $DIR/shifts.rs:+3:27: +3:28\n+    let mut _31: i32;                    // in scope 0 at $DIR/shifts.rs:+3:20: +3:28\n+    let mut _32: bool;                   // in scope 0 at $DIR/shifts.rs:+3:20: +3:28\n+    let mut _33: u128;                   // in scope 0 at $DIR/shifts.rs:+3:30: +3:38\n+    let mut _34: u128;                   // in scope 0 at $DIR/shifts.rs:+3:30: +3:33\n+    let mut _35: i128;                   // in scope 0 at $DIR/shifts.rs:+3:37: +3:38\n+    let mut _36: i128;                   // in scope 0 at $DIR/shifts.rs:+3:30: +3:38\n+    let mut _37: bool;                   // in scope 0 at $DIR/shifts.rs:+3:30: +3:38\n+\n+    bb0: {\n+        StorageLive(_6);                 // scope 0 at $DIR/shifts.rs:+2:9: +2:45\n+        StorageLive(_7);                 // scope 0 at $DIR/shifts.rs:+2:10: +2:20\n+        StorageLive(_8);                 // scope 0 at $DIR/shifts.rs:+2:10: +2:15\n+        _8 = _1;                         // scope 0 at $DIR/shifts.rs:+2:10: +2:15\n+        StorageLive(_9);                 // scope 0 at $DIR/shifts.rs:+2:19: +2:20\n+        _9 = _3;                         // scope 0 at $DIR/shifts.rs:+2:19: +2:20\n+        _10 = BitAnd(_9, const -8_i8);   // scope 0 at $DIR/shifts.rs:+2:10: +2:20\n+        _11 = Ne(move _10, const 0_i8);  // scope 0 at $DIR/shifts.rs:+2:10: +2:20\n+        assert(!move _11, \"attempt to shift right by `{}`, which would overflow\", _9) -> [success: bb1, unwind: bb7]; // scope 0 at $DIR/shifts.rs:+2:10: +2:20\n+    }\n+\n+    bb1: {\n+        _7 = Shr(move _8, move _9);      // scope 0 at $DIR/shifts.rs:+2:10: +2:20\n+        StorageDead(_9);                 // scope 0 at $DIR/shifts.rs:+2:19: +2:20\n+        StorageDead(_8);                 // scope 0 at $DIR/shifts.rs:+2:19: +2:20\n+        StorageLive(_12);                // scope 0 at $DIR/shifts.rs:+2:22: +2:32\n+        StorageLive(_13);                // scope 0 at $DIR/shifts.rs:+2:22: +2:27\n+        _13 = _1;                        // scope 0 at $DIR/shifts.rs:+2:22: +2:27\n+        StorageLive(_14);                // scope 0 at $DIR/shifts.rs:+2:31: +2:32\n+        _14 = _4;                        // scope 0 at $DIR/shifts.rs:+2:31: +2:32\n+        _15 = BitAnd(_14, const -8_i32); // scope 0 at $DIR/shifts.rs:+2:22: +2:32\n+        _16 = Ne(move _15, const 0_i32); // scope 0 at $DIR/shifts.rs:+2:22: +2:32\n+        assert(!move _16, \"attempt to shift right by `{}`, which would overflow\", _14) -> [success: bb2, unwind: bb7]; // scope 0 at $DIR/shifts.rs:+2:22: +2:32\n+    }\n+\n+    bb2: {\n+        _12 = Shr(move _13, move _14);   // scope 0 at $DIR/shifts.rs:+2:22: +2:32\n+        StorageDead(_14);                // scope 0 at $DIR/shifts.rs:+2:31: +2:32\n+        StorageDead(_13);                // scope 0 at $DIR/shifts.rs:+2:31: +2:32\n+        StorageLive(_17);                // scope 0 at $DIR/shifts.rs:+2:34: +2:44\n+        StorageLive(_18);                // scope 0 at $DIR/shifts.rs:+2:34: +2:39\n+        _18 = _1;                        // scope 0 at $DIR/shifts.rs:+2:34: +2:39\n+        StorageLive(_19);                // scope 0 at $DIR/shifts.rs:+2:43: +2:44\n+        _19 = _5;                        // scope 0 at $DIR/shifts.rs:+2:43: +2:44\n+        _20 = BitAnd(_19, const -8_i128); // scope 0 at $DIR/shifts.rs:+2:34: +2:44\n+        _21 = Ne(move _20, const 0_i128); // scope 0 at $DIR/shifts.rs:+2:34: +2:44\n+        assert(!move _21, \"attempt to shift right by `{}`, which would overflow\", _19) -> [success: bb3, unwind: bb7]; // scope 0 at $DIR/shifts.rs:+2:34: +2:44\n+    }\n+\n+    bb3: {\n+        _17 = Shr(move _18, move _19);   // scope 0 at $DIR/shifts.rs:+2:34: +2:44\n+        StorageDead(_19);                // scope 0 at $DIR/shifts.rs:+2:43: +2:44\n+        StorageDead(_18);                // scope 0 at $DIR/shifts.rs:+2:43: +2:44\n+        _6 = [move _7, move _12, move _17]; // scope 0 at $DIR/shifts.rs:+2:9: +2:45\n+        StorageDead(_17);                // scope 0 at $DIR/shifts.rs:+2:44: +2:45\n+        StorageDead(_12);                // scope 0 at $DIR/shifts.rs:+2:44: +2:45\n+        StorageDead(_7);                 // scope 0 at $DIR/shifts.rs:+2:44: +2:45\n+        StorageLive(_22);                // scope 0 at $DIR/shifts.rs:+3:9: +3:39\n+        StorageLive(_23);                // scope 0 at $DIR/shifts.rs:+3:10: +3:18\n+        StorageLive(_24);                // scope 0 at $DIR/shifts.rs:+3:10: +3:13\n+        _24 = _2;                        // scope 0 at $DIR/shifts.rs:+3:10: +3:13\n+        StorageLive(_25);                // scope 0 at $DIR/shifts.rs:+3:17: +3:18\n+        _25 = _3;                        // scope 0 at $DIR/shifts.rs:+3:17: +3:18\n+        _26 = BitAnd(_25, const i8::MIN); // scope 0 at $DIR/shifts.rs:+3:10: +3:18\n+        _27 = Ne(move _26, const 0_i8);  // scope 0 at $DIR/shifts.rs:+3:10: +3:18\n+        assert(!move _27, \"attempt to shift left by `{}`, which would overflow\", _25) -> [success: bb4, unwind: bb7]; // scope 0 at $DIR/shifts.rs:+3:10: +3:18\n+    }\n+\n+    bb4: {\n+        _23 = Shl(move _24, move _25);   // scope 0 at $DIR/shifts.rs:+3:10: +3:18\n+        StorageDead(_25);                // scope 0 at $DIR/shifts.rs:+3:17: +3:18\n+        StorageDead(_24);                // scope 0 at $DIR/shifts.rs:+3:17: +3:18\n+        StorageLive(_28);                // scope 0 at $DIR/shifts.rs:+3:20: +3:28\n+        StorageLive(_29);                // scope 0 at $DIR/shifts.rs:+3:20: +3:23\n+        _29 = _2;                        // scope 0 at $DIR/shifts.rs:+3:20: +3:23\n+        StorageLive(_30);                // scope 0 at $DIR/shifts.rs:+3:27: +3:28\n+        _30 = _4;                        // scope 0 at $DIR/shifts.rs:+3:27: +3:28\n+        _31 = BitAnd(_30, const -128_i32); // scope 0 at $DIR/shifts.rs:+3:20: +3:28\n+        _32 = Ne(move _31, const 0_i32); // scope 0 at $DIR/shifts.rs:+3:20: +3:28\n+        assert(!move _32, \"attempt to shift left by `{}`, which would overflow\", _30) -> [success: bb5, unwind: bb7]; // scope 0 at $DIR/shifts.rs:+3:20: +3:28\n+    }\n+\n+    bb5: {\n+        _28 = Shl(move _29, move _30);   // scope 0 at $DIR/shifts.rs:+3:20: +3:28\n+        StorageDead(_30);                // scope 0 at $DIR/shifts.rs:+3:27: +3:28\n+        StorageDead(_29);                // scope 0 at $DIR/shifts.rs:+3:27: +3:28\n+        StorageLive(_33);                // scope 0 at $DIR/shifts.rs:+3:30: +3:38\n+        StorageLive(_34);                // scope 0 at $DIR/shifts.rs:+3:30: +3:33\n+        _34 = _2;                        // scope 0 at $DIR/shifts.rs:+3:30: +3:33\n+        StorageLive(_35);                // scope 0 at $DIR/shifts.rs:+3:37: +3:38\n+        _35 = _5;                        // scope 0 at $DIR/shifts.rs:+3:37: +3:38\n+        _36 = BitAnd(_35, const -128_i128); // scope 0 at $DIR/shifts.rs:+3:30: +3:38\n+        _37 = Ne(move _36, const 0_i128); // scope 0 at $DIR/shifts.rs:+3:30: +3:38\n+        assert(!move _37, \"attempt to shift left by `{}`, which would overflow\", _35) -> [success: bb6, unwind: bb7]; // scope 0 at $DIR/shifts.rs:+3:30: +3:38\n+    }\n+\n+    bb6: {\n+        _33 = Shl(move _34, move _35);   // scope 0 at $DIR/shifts.rs:+3:30: +3:38\n+        StorageDead(_35);                // scope 0 at $DIR/shifts.rs:+3:37: +3:38\n+        StorageDead(_34);                // scope 0 at $DIR/shifts.rs:+3:37: +3:38\n+        _22 = [move _23, move _28, move _33]; // scope 0 at $DIR/shifts.rs:+3:9: +3:39\n+        StorageDead(_33);                // scope 0 at $DIR/shifts.rs:+3:38: +3:39\n+        StorageDead(_28);                // scope 0 at $DIR/shifts.rs:+3:38: +3:39\n+        StorageDead(_23);                // scope 0 at $DIR/shifts.rs:+3:38: +3:39\n+        _0 = (move _6, move _22);        // scope 0 at $DIR/shifts.rs:+1:5: +4:6\n+        StorageDead(_22);                // scope 0 at $DIR/shifts.rs:+4:5: +4:6\n+        StorageDead(_6);                 // scope 0 at $DIR/shifts.rs:+4:5: +4:6\n+        return;                          // scope 0 at $DIR/shifts.rs:+5:2: +5:2\n+    }\n+\n+    bb7 (cleanup): {\n+        resume;                          // scope 0 at $DIR/shifts.rs:+0:1: +5:2\n+    }\n+}"}, {"sha": "89b9cb24cfd1b82f40c1241ca13d511685d4b3fd", "filename": "tests/mir-opt/building/shifts.shift_unsigned.built.after.mir", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/ec25f087488a1913982fc6b28b66574ee4791d14/tests%2Fmir-opt%2Fbuilding%2Fshifts.shift_unsigned.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ec25f087488a1913982fc6b28b66574ee4791d14/tests%2Fmir-opt%2Fbuilding%2Fshifts.shift_unsigned.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fshifts.shift_unsigned.built.after.mir?ref=ec25f087488a1913982fc6b28b66574ee4791d14", "patch": "@@ -0,0 +1,147 @@\n+// MIR for `shift_unsigned` after built\n+\n+fn shift_unsigned(_1: u8, _2: i128, _3: u8, _4: u32, _5: u128) -> ([u8; 3], [i128; 3]) {\n+    debug small => _1;                   // in scope 0 at $DIR/shifts.rs:+0:19: +0:24\n+    debug big => _2;                     // in scope 0 at $DIR/shifts.rs:+0:30: +0:33\n+    debug a => _3;                       // in scope 0 at $DIR/shifts.rs:+0:41: +0:42\n+    debug b => _4;                       // in scope 0 at $DIR/shifts.rs:+0:48: +0:49\n+    debug c => _5;                       // in scope 0 at $DIR/shifts.rs:+0:56: +0:57\n+    let mut _0: ([u8; 3], [i128; 3]);    // return place in scope 0 at $DIR/shifts.rs:+0:68: +0:88\n+    let mut _6: [u8; 3];                 // in scope 0 at $DIR/shifts.rs:+2:9: +2:45\n+    let mut _7: u8;                      // in scope 0 at $DIR/shifts.rs:+2:10: +2:20\n+    let mut _8: u8;                      // in scope 0 at $DIR/shifts.rs:+2:10: +2:15\n+    let mut _9: u8;                      // in scope 0 at $DIR/shifts.rs:+2:19: +2:20\n+    let mut _10: u8;                     // in scope 0 at $DIR/shifts.rs:+2:10: +2:20\n+    let mut _11: bool;                   // in scope 0 at $DIR/shifts.rs:+2:10: +2:20\n+    let mut _12: u8;                     // in scope 0 at $DIR/shifts.rs:+2:22: +2:32\n+    let mut _13: u8;                     // in scope 0 at $DIR/shifts.rs:+2:22: +2:27\n+    let mut _14: u32;                    // in scope 0 at $DIR/shifts.rs:+2:31: +2:32\n+    let mut _15: u32;                    // in scope 0 at $DIR/shifts.rs:+2:22: +2:32\n+    let mut _16: bool;                   // in scope 0 at $DIR/shifts.rs:+2:22: +2:32\n+    let mut _17: u8;                     // in scope 0 at $DIR/shifts.rs:+2:34: +2:44\n+    let mut _18: u8;                     // in scope 0 at $DIR/shifts.rs:+2:34: +2:39\n+    let mut _19: u128;                   // in scope 0 at $DIR/shifts.rs:+2:43: +2:44\n+    let mut _20: u128;                   // in scope 0 at $DIR/shifts.rs:+2:34: +2:44\n+    let mut _21: bool;                   // in scope 0 at $DIR/shifts.rs:+2:34: +2:44\n+    let mut _22: [i128; 3];              // in scope 0 at $DIR/shifts.rs:+3:9: +3:39\n+    let mut _23: i128;                   // in scope 0 at $DIR/shifts.rs:+3:10: +3:18\n+    let mut _24: i128;                   // in scope 0 at $DIR/shifts.rs:+3:10: +3:13\n+    let mut _25: u8;                     // in scope 0 at $DIR/shifts.rs:+3:17: +3:18\n+    let mut _26: u8;                     // in scope 0 at $DIR/shifts.rs:+3:10: +3:18\n+    let mut _27: bool;                   // in scope 0 at $DIR/shifts.rs:+3:10: +3:18\n+    let mut _28: i128;                   // in scope 0 at $DIR/shifts.rs:+3:20: +3:28\n+    let mut _29: i128;                   // in scope 0 at $DIR/shifts.rs:+3:20: +3:23\n+    let mut _30: u32;                    // in scope 0 at $DIR/shifts.rs:+3:27: +3:28\n+    let mut _31: u32;                    // in scope 0 at $DIR/shifts.rs:+3:20: +3:28\n+    let mut _32: bool;                   // in scope 0 at $DIR/shifts.rs:+3:20: +3:28\n+    let mut _33: i128;                   // in scope 0 at $DIR/shifts.rs:+3:30: +3:38\n+    let mut _34: i128;                   // in scope 0 at $DIR/shifts.rs:+3:30: +3:33\n+    let mut _35: u128;                   // in scope 0 at $DIR/shifts.rs:+3:37: +3:38\n+    let mut _36: u128;                   // in scope 0 at $DIR/shifts.rs:+3:30: +3:38\n+    let mut _37: bool;                   // in scope 0 at $DIR/shifts.rs:+3:30: +3:38\n+\n+    bb0: {\n+        StorageLive(_6);                 // scope 0 at $DIR/shifts.rs:+2:9: +2:45\n+        StorageLive(_7);                 // scope 0 at $DIR/shifts.rs:+2:10: +2:20\n+        StorageLive(_8);                 // scope 0 at $DIR/shifts.rs:+2:10: +2:15\n+        _8 = _1;                         // scope 0 at $DIR/shifts.rs:+2:10: +2:15\n+        StorageLive(_9);                 // scope 0 at $DIR/shifts.rs:+2:19: +2:20\n+        _9 = _3;                         // scope 0 at $DIR/shifts.rs:+2:19: +2:20\n+        _10 = BitAnd(_9, const 248_u8);  // scope 0 at $DIR/shifts.rs:+2:10: +2:20\n+        _11 = Ne(move _10, const 0_u8);  // scope 0 at $DIR/shifts.rs:+2:10: +2:20\n+        assert(!move _11, \"attempt to shift right by `{}`, which would overflow\", _9) -> [success: bb1, unwind: bb7]; // scope 0 at $DIR/shifts.rs:+2:10: +2:20\n+    }\n+\n+    bb1: {\n+        _7 = Shr(move _8, move _9);      // scope 0 at $DIR/shifts.rs:+2:10: +2:20\n+        StorageDead(_9);                 // scope 0 at $DIR/shifts.rs:+2:19: +2:20\n+        StorageDead(_8);                 // scope 0 at $DIR/shifts.rs:+2:19: +2:20\n+        StorageLive(_12);                // scope 0 at $DIR/shifts.rs:+2:22: +2:32\n+        StorageLive(_13);                // scope 0 at $DIR/shifts.rs:+2:22: +2:27\n+        _13 = _1;                        // scope 0 at $DIR/shifts.rs:+2:22: +2:27\n+        StorageLive(_14);                // scope 0 at $DIR/shifts.rs:+2:31: +2:32\n+        _14 = _4;                        // scope 0 at $DIR/shifts.rs:+2:31: +2:32\n+        _15 = BitAnd(_14, const 4294967288_u32); // scope 0 at $DIR/shifts.rs:+2:22: +2:32\n+        _16 = Ne(move _15, const 0_u32); // scope 0 at $DIR/shifts.rs:+2:22: +2:32\n+        assert(!move _16, \"attempt to shift right by `{}`, which would overflow\", _14) -> [success: bb2, unwind: bb7]; // scope 0 at $DIR/shifts.rs:+2:22: +2:32\n+    }\n+\n+    bb2: {\n+        _12 = Shr(move _13, move _14);   // scope 0 at $DIR/shifts.rs:+2:22: +2:32\n+        StorageDead(_14);                // scope 0 at $DIR/shifts.rs:+2:31: +2:32\n+        StorageDead(_13);                // scope 0 at $DIR/shifts.rs:+2:31: +2:32\n+        StorageLive(_17);                // scope 0 at $DIR/shifts.rs:+2:34: +2:44\n+        StorageLive(_18);                // scope 0 at $DIR/shifts.rs:+2:34: +2:39\n+        _18 = _1;                        // scope 0 at $DIR/shifts.rs:+2:34: +2:39\n+        StorageLive(_19);                // scope 0 at $DIR/shifts.rs:+2:43: +2:44\n+        _19 = _5;                        // scope 0 at $DIR/shifts.rs:+2:43: +2:44\n+        _20 = BitAnd(_19, const 340282366920938463463374607431768211448_u128); // scope 0 at $DIR/shifts.rs:+2:34: +2:44\n+        _21 = Ne(move _20, const 0_u128); // scope 0 at $DIR/shifts.rs:+2:34: +2:44\n+        assert(!move _21, \"attempt to shift right by `{}`, which would overflow\", _19) -> [success: bb3, unwind: bb7]; // scope 0 at $DIR/shifts.rs:+2:34: +2:44\n+    }\n+\n+    bb3: {\n+        _17 = Shr(move _18, move _19);   // scope 0 at $DIR/shifts.rs:+2:34: +2:44\n+        StorageDead(_19);                // scope 0 at $DIR/shifts.rs:+2:43: +2:44\n+        StorageDead(_18);                // scope 0 at $DIR/shifts.rs:+2:43: +2:44\n+        _6 = [move _7, move _12, move _17]; // scope 0 at $DIR/shifts.rs:+2:9: +2:45\n+        StorageDead(_17);                // scope 0 at $DIR/shifts.rs:+2:44: +2:45\n+        StorageDead(_12);                // scope 0 at $DIR/shifts.rs:+2:44: +2:45\n+        StorageDead(_7);                 // scope 0 at $DIR/shifts.rs:+2:44: +2:45\n+        StorageLive(_22);                // scope 0 at $DIR/shifts.rs:+3:9: +3:39\n+        StorageLive(_23);                // scope 0 at $DIR/shifts.rs:+3:10: +3:18\n+        StorageLive(_24);                // scope 0 at $DIR/shifts.rs:+3:10: +3:13\n+        _24 = _2;                        // scope 0 at $DIR/shifts.rs:+3:10: +3:13\n+        StorageLive(_25);                // scope 0 at $DIR/shifts.rs:+3:17: +3:18\n+        _25 = _3;                        // scope 0 at $DIR/shifts.rs:+3:17: +3:18\n+        _26 = BitAnd(_25, const 128_u8); // scope 0 at $DIR/shifts.rs:+3:10: +3:18\n+        _27 = Ne(move _26, const 0_u8);  // scope 0 at $DIR/shifts.rs:+3:10: +3:18\n+        assert(!move _27, \"attempt to shift left by `{}`, which would overflow\", _25) -> [success: bb4, unwind: bb7]; // scope 0 at $DIR/shifts.rs:+3:10: +3:18\n+    }\n+\n+    bb4: {\n+        _23 = Shl(move _24, move _25);   // scope 0 at $DIR/shifts.rs:+3:10: +3:18\n+        StorageDead(_25);                // scope 0 at $DIR/shifts.rs:+3:17: +3:18\n+        StorageDead(_24);                // scope 0 at $DIR/shifts.rs:+3:17: +3:18\n+        StorageLive(_28);                // scope 0 at $DIR/shifts.rs:+3:20: +3:28\n+        StorageLive(_29);                // scope 0 at $DIR/shifts.rs:+3:20: +3:23\n+        _29 = _2;                        // scope 0 at $DIR/shifts.rs:+3:20: +3:23\n+        StorageLive(_30);                // scope 0 at $DIR/shifts.rs:+3:27: +3:28\n+        _30 = _4;                        // scope 0 at $DIR/shifts.rs:+3:27: +3:28\n+        _31 = BitAnd(_30, const 4294967168_u32); // scope 0 at $DIR/shifts.rs:+3:20: +3:28\n+        _32 = Ne(move _31, const 0_u32); // scope 0 at $DIR/shifts.rs:+3:20: +3:28\n+        assert(!move _32, \"attempt to shift left by `{}`, which would overflow\", _30) -> [success: bb5, unwind: bb7]; // scope 0 at $DIR/shifts.rs:+3:20: +3:28\n+    }\n+\n+    bb5: {\n+        _28 = Shl(move _29, move _30);   // scope 0 at $DIR/shifts.rs:+3:20: +3:28\n+        StorageDead(_30);                // scope 0 at $DIR/shifts.rs:+3:27: +3:28\n+        StorageDead(_29);                // scope 0 at $DIR/shifts.rs:+3:27: +3:28\n+        StorageLive(_33);                // scope 0 at $DIR/shifts.rs:+3:30: +3:38\n+        StorageLive(_34);                // scope 0 at $DIR/shifts.rs:+3:30: +3:33\n+        _34 = _2;                        // scope 0 at $DIR/shifts.rs:+3:30: +3:33\n+        StorageLive(_35);                // scope 0 at $DIR/shifts.rs:+3:37: +3:38\n+        _35 = _5;                        // scope 0 at $DIR/shifts.rs:+3:37: +3:38\n+        _36 = BitAnd(_35, const 340282366920938463463374607431768211328_u128); // scope 0 at $DIR/shifts.rs:+3:30: +3:38\n+        _37 = Ne(move _36, const 0_u128); // scope 0 at $DIR/shifts.rs:+3:30: +3:38\n+        assert(!move _37, \"attempt to shift left by `{}`, which would overflow\", _35) -> [success: bb6, unwind: bb7]; // scope 0 at $DIR/shifts.rs:+3:30: +3:38\n+    }\n+\n+    bb6: {\n+        _33 = Shl(move _34, move _35);   // scope 0 at $DIR/shifts.rs:+3:30: +3:38\n+        StorageDead(_35);                // scope 0 at $DIR/shifts.rs:+3:37: +3:38\n+        StorageDead(_34);                // scope 0 at $DIR/shifts.rs:+3:37: +3:38\n+        _22 = [move _23, move _28, move _33]; // scope 0 at $DIR/shifts.rs:+3:9: +3:39\n+        StorageDead(_33);                // scope 0 at $DIR/shifts.rs:+3:38: +3:39\n+        StorageDead(_28);                // scope 0 at $DIR/shifts.rs:+3:38: +3:39\n+        StorageDead(_23);                // scope 0 at $DIR/shifts.rs:+3:38: +3:39\n+        _0 = (move _6, move _22);        // scope 0 at $DIR/shifts.rs:+1:5: +4:6\n+        StorageDead(_22);                // scope 0 at $DIR/shifts.rs:+4:5: +4:6\n+        StorageDead(_6);                 // scope 0 at $DIR/shifts.rs:+4:5: +4:6\n+        return;                          // scope 0 at $DIR/shifts.rs:+5:2: +5:2\n+    }\n+\n+    bb7 (cleanup): {\n+        resume;                          // scope 0 at $DIR/shifts.rs:+0:1: +5:2\n+    }\n+}"}]}