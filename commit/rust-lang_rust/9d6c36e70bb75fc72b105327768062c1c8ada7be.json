{"sha": "9d6c36e70bb75fc72b105327768062c1c8ada7be", "node_id": "C_kwDOAAsO6NoAKDlkNmMzNmU3MGJiNzVmYzcyYjEwNTMyNzc2ODA2MmMxYzhhZGE3YmU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-29T04:02:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-29T04:02:43Z"}, "message": "Rollup merge of #109705 - lcnr:coherence-caching, r=compiler-errors\n\nnew solver: check for intercrate mode when accessing the cache\n\nr? ``@compiler-errors``", "tree": {"sha": "a3acc70e2a165ef41efcb7eb145f7e9229bba465", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3acc70e2a165ef41efcb7eb145f7e9229bba465"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d6c36e70bb75fc72b105327768062c1c8ada7be", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkI7hjCRBK7hj4Ov3rIwAAVNAIAHXnS2s4R1rFjpeF0bsuiZHr\nOjlp2BvflgO0Odu5uvMQIJjasz7bL6PxcyJPYwD75WzelN7enWaru8RAyC6XmbxH\nd6aUfhHH7fNqXHkFtKz+cp+a1YlKqBAKp9RqliVMN7wXCYMN6EEEAt9SUkwjYcyE\nBAj+ApV5zo5Vv56it8uXBLE5LSuPbC5fo0BVcdJocxz7TEJQvtEaSOHO9t4k9PYr\nS5GCdJOeFa/YlcLr+xmzqksAYpDJ8ie5J3DSiRy/uY7VOqqX0DQcnlhwi91Gz70b\nmCCHpqhNxYjlQ/9VcfRn/r1p1d0a7sGWOoVUG+17+BFZnLAOX8VQNUN2alQPEcA=\n=rteC\n-----END PGP SIGNATURE-----\n", "payload": "tree a3acc70e2a165ef41efcb7eb145f7e9229bba465\nparent 09c139846b5456cf5c09af9ddd3013ab7171334c\nparent 27a3b10ed25b5e10491b39aba626ecd8d7f828f2\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1680062563 +0200\ncommitter GitHub <noreply@github.com> 1680062563 +0200\n\nRollup merge of #109705 - lcnr:coherence-caching, r=compiler-errors\n\nnew solver: check for intercrate mode when accessing the cache\n\nr? ``@compiler-errors``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d6c36e70bb75fc72b105327768062c1c8ada7be", "html_url": "https://github.com/rust-lang/rust/commit/9d6c36e70bb75fc72b105327768062c1c8ada7be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d6c36e70bb75fc72b105327768062c1c8ada7be/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09c139846b5456cf5c09af9ddd3013ab7171334c", "url": "https://api.github.com/repos/rust-lang/rust/commits/09c139846b5456cf5c09af9ddd3013ab7171334c", "html_url": "https://github.com/rust-lang/rust/commit/09c139846b5456cf5c09af9ddd3013ab7171334c"}, {"sha": "27a3b10ed25b5e10491b39aba626ecd8d7f828f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/27a3b10ed25b5e10491b39aba626ecd8d7f828f2", "html_url": "https://github.com/rust-lang/rust/commit/27a3b10ed25b5e10491b39aba626ecd8d7f828f2"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "d7ad730b4a321ebca95165f96e47b99aa7531523", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/mod.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9d6c36e70bb75fc72b105327768062c1c8ada7be/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6c36e70bb75fc72b105327768062c1c8ada7be/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs?ref=9d6c36e70bb75fc72b105327768062c1c8ada7be", "patch": "@@ -47,6 +47,22 @@ impl<'tcx> SearchGraph<'tcx> {\n         self.mode\n     }\n \n+    /// We do not use the global cache during coherence.\n+    ///\n+    /// The trait solver behavior is different for coherence\n+    /// so we would have to add the solver mode to the cache key.\n+    /// This is probably not worth it as trait solving during\n+    /// coherence tends to already be incredibly fast.\n+    ///\n+    /// We could add another global cache for coherence instead,\n+    /// but that's effort so let's only do it if necessary.\n+    pub(super) fn should_use_global_cache(&self) -> bool {\n+        match self.mode {\n+            SolverMode::Normal => true,\n+            SolverMode::Coherence => false,\n+        }\n+    }\n+\n     pub(super) fn is_empty(&self) -> bool {\n         self.stack.is_empty() && self.provisional_cache.is_empty()\n     }\n@@ -191,8 +207,10 @@ impl<'tcx> SearchGraph<'tcx> {\n         canonical_goal: CanonicalGoal<'tcx>,\n         mut loop_body: impl FnMut(&mut Self) -> QueryResult<'tcx>,\n     ) -> QueryResult<'tcx> {\n-        if let Some(result) = tcx.new_solver_evaluation_cache.get(&canonical_goal, tcx) {\n-            return result;\n+        if self.should_use_global_cache() {\n+            if let Some(result) = tcx.new_solver_evaluation_cache.get(&canonical_goal, tcx) {\n+                return result;\n+            }\n         }\n \n         match self.try_push_stack(tcx, canonical_goal) {\n@@ -252,9 +270,8 @@ impl<'tcx> SearchGraph<'tcx> {\n             // dependencies, our non-root goal may no longer appear as child of the root goal.\n             //\n             // See https://github.com/rust-lang/rust/pull/108071 for some additional context.\n-            let should_cache_globally = matches!(self.solver_mode(), SolverMode::Normal)\n-                && (!self.overflow_data.did_overflow() || self.stack.is_empty());\n-            if should_cache_globally {\n+            let can_cache = !self.overflow_data.did_overflow() || self.stack.is_empty();\n+            if self.should_use_global_cache() && can_cache {\n                 tcx.new_solver_evaluation_cache.insert(\n                     current_goal.goal,\n                     dep_node,"}]}