{"sha": "03e1b2782616cbc8f06ba4e484b1540ae23e32be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzZTFiMjc4MjYxNmNiYzhmMDZiYTRlNDg0YjE1NDBhZTIzZTMyYmU=", "commit": {"author": {"name": "Pavel Sountsov", "email": "siege@google.com", "date": "2015-09-19T04:50:44Z"}, "committer": {"name": "SiegeLord", "email": "slabode@aim.com", "date": "2015-09-19T17:36:45Z"}, "message": "Add Indent::none(), remove make_indent.", "tree": {"sha": "7d62f4cb04b59eb355fc69278f13e5dcb267bae5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d62f4cb04b59eb355fc69278f13e5dcb267bae5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03e1b2782616cbc8f06ba4e484b1540ae23e32be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03e1b2782616cbc8f06ba4e484b1540ae23e32be", "html_url": "https://github.com/rust-lang/rust/commit/03e1b2782616cbc8f06ba4e484b1540ae23e32be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03e1b2782616cbc8f06ba4e484b1540ae23e32be/comments", "author": {"login": "SiegeLordEx", "id": 43966695, "node_id": "MDQ6VXNlcjQzOTY2Njk1", "avatar_url": "https://avatars.githubusercontent.com/u/43966695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SiegeLordEx", "html_url": "https://github.com/SiegeLordEx", "followers_url": "https://api.github.com/users/SiegeLordEx/followers", "following_url": "https://api.github.com/users/SiegeLordEx/following{/other_user}", "gists_url": "https://api.github.com/users/SiegeLordEx/gists{/gist_id}", "starred_url": "https://api.github.com/users/SiegeLordEx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SiegeLordEx/subscriptions", "organizations_url": "https://api.github.com/users/SiegeLordEx/orgs", "repos_url": "https://api.github.com/users/SiegeLordEx/repos", "events_url": "https://api.github.com/users/SiegeLordEx/events{/privacy}", "received_events_url": "https://api.github.com/users/SiegeLordEx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SiegeLord", "id": 480550, "node_id": "MDQ6VXNlcjQ4MDU1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/480550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SiegeLord", "html_url": "https://github.com/SiegeLord", "followers_url": "https://api.github.com/users/SiegeLord/followers", "following_url": "https://api.github.com/users/SiegeLord/following{/other_user}", "gists_url": "https://api.github.com/users/SiegeLord/gists{/gist_id}", "starred_url": "https://api.github.com/users/SiegeLord/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SiegeLord/subscriptions", "organizations_url": "https://api.github.com/users/SiegeLord/orgs", "repos_url": "https://api.github.com/users/SiegeLord/repos", "events_url": "https://api.github.com/users/SiegeLord/events{/privacy}", "received_events_url": "https://api.github.com/users/SiegeLord/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4108a3029cecf7855514f568f8b3b88edcbfdb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4108a3029cecf7855514f568f8b3b88edcbfdb7", "html_url": "https://github.com/rust-lang/rust/commit/d4108a3029cecf7855514f568f8b3b88edcbfdb7"}], "stats": {"total": 174, "additions": 82, "deletions": 92}, "files": [{"sha": "c59638d9e50e4b1815b6704ffb26a18929eba597", "filename": "src/chains.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03e1b2782616cbc8f06ba4e484b1540ae23e32be/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03e1b2782616cbc8f06ba4e484b1540ae23e32be/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=03e1b2782616cbc8f06ba4e484b1540ae23e32be", "patch": "@@ -21,7 +21,7 @@\n \n use Indent;\n use rewrite::{Rewrite, RewriteContext};\n-use utils::{first_line_width, make_indent};\n+use utils::first_line_width;\n use expr::rewrite_call;\n \n use syntax::{ast, ptr};\n@@ -117,7 +117,7 @@ pub fn rewrite_chain(mut expr: &ast::Expr,\n     let connector = if fits_single_line {\n         String::new()\n     } else {\n-        format!(\"\\n{}\", make_indent(indent, context.config))\n+        format!(\"\\n{}\", indent.to_string(context.config))\n     };\n \n     let first_connector = if extend {"}, {"sha": "765d61cfa119baa2f6fe93bbf9ba5fa0fdc463d2", "filename": "src/comment.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/03e1b2782616cbc8f06ba4e484b1540ae23e32be/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03e1b2782616cbc8f06ba4e484b1540ae23e32be/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=03e1b2782616cbc8f06ba4e484b1540ae23e32be", "patch": "@@ -15,7 +15,6 @@ use std::iter;\n use Indent;\n use config::Config;\n use string::{StringFormat, rewrite_string};\n-use utils::make_indent;\n \n pub fn rewrite_comment(orig: &str,\n                        block_style: bool,\n@@ -45,7 +44,7 @@ pub fn rewrite_comment(orig: &str,\n         config: config,\n     };\n \n-    let indent_str = make_indent(offset, config);\n+    let indent_str = offset.to_string(config);\n     let line_breaks = s.chars().filter(|&c| c == '\\n').count();\n \n     let (_, mut s) = s.lines()\n@@ -304,7 +303,7 @@ mod test {\n         assert_eq!(\"/* test */\", rewrite_comment(\" //test\", true, 100, Indent::new(0, 100),\n                                                  &config));\n         assert_eq!(\"// comment\\n// on a\", rewrite_comment(\"// comment on a\", false, 10,\n-                                                          Indent::new(0, 0), &config));\n+                                                          Indent::empty(), &config));\n \n         assert_eq!(\"//  A multi line comment\\n            // between args.\",\n                    rewrite_comment(\"//  A multi line comment\\n             // between args.\","}, {"sha": "74d5522cc596be517c2622cb6b1d57bed522ad27", "filename": "src/expr.rs", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/03e1b2782616cbc8f06ba4e484b1540ae23e32be/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03e1b2782616cbc8f06ba4e484b1540ae23e32be/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=03e1b2782616cbc8f06ba4e484b1540ae23e32be", "patch": "@@ -15,8 +15,7 @@ use Indent;\n use rewrite::{Rewrite, RewriteContext};\n use lists::{write_list, itemize_list, ListFormatting, SeparatorTactic, ListTactic};\n use string::{StringFormat, rewrite_string};\n-use utils::{span_after, make_indent, extra_offset, first_line_width, last_line_width, wrap_str,\n-            binary_search};\n+use utils::{span_after, extra_offset, first_line_width, last_line_width, wrap_str, binary_search};\n use visitor::FmtVisitor;\n use config::{StructLitStyle, MultilineStyle};\n use comment::{FindUncommented, rewrite_comment, contains_comment};\n@@ -268,7 +267,7 @@ fn rewrite_closure(capture: ast::CaptureClause,\n     if !ret_str.is_empty() {\n         if prefix.contains('\\n') {\n             prefix.push('\\n');\n-            prefix.push_str(&make_indent(argument_offset, context.config));\n+            prefix.push_str(&argument_offset.to_string(context.config));\n         } else {\n             prefix.push(' ');\n         }\n@@ -311,12 +310,12 @@ fn rewrite_closure(capture: ast::CaptureClause,\n                            .as_ref()\n                            .and_then(|body_expr| {\n                                if let ast::Expr_::ExprBlock(ref inner) = body_expr.node {\n-                                   Some(inner.rewrite(&context, 2, Indent::new(0, 0)))\n+                                   Some(inner.rewrite(&context, 2, Indent::empty()))\n                                } else {\n                                    None\n                                }\n                            })\n-                           .unwrap_or_else(|| body.rewrite(&context, 2, Indent::new(0, 0)));\n+                           .unwrap_or_else(|| body.rewrite(&context, 2, Indent::empty()));\n \n     Some(format!(\"{} {}\", prefix, try_opt!(body_rewrite)))\n }\n@@ -592,11 +591,11 @@ fn single_line_if_else(context: &RewriteContext,\n \n         let new_width = try_opt!(width.checked_sub(pat_expr_str.len() + fixed_cost));\n         let if_expr = if_node.expr.as_ref().unwrap();\n-        let if_str = try_opt!(if_expr.rewrite(context, new_width, Indent::new(0, 0)));\n+        let if_str = try_opt!(if_expr.rewrite(context, new_width, Indent::empty()));\n \n         let new_width = try_opt!(new_width.checked_sub(if_str.len()));\n         let else_expr = else_node.expr.as_ref().unwrap();\n-        let else_str = try_opt!(else_expr.rewrite(context, new_width, Indent::new(0, 0)));\n+        let else_str = try_opt!(else_expr.rewrite(context, new_width, Indent::empty()));\n \n         // FIXME: this check shouldn't be necessary. Rewrites should either fail\n         // or wrap to a newline when the object does not fit the width.\n@@ -638,7 +637,7 @@ fn rewrite_match(context: &RewriteContext,\n \n     let nested_context = context.nested_context();\n     let arm_indent = nested_context.block_indent + context.overflow_indent;\n-    let arm_indent_str = make_indent(arm_indent, context.config);\n+    let arm_indent_str = arm_indent.to_string(context.config);\n \n     let open_brace_pos = span_after(mk_sp(cond.span.hi, arm_start_pos(&arms[0])),\n                                     \"{\",\n@@ -688,7 +687,7 @@ fn rewrite_match(context: &RewriteContext,\n     // match expression, but meh.\n \n     result.push('\\n');\n-    result.push_str(&make_indent(context.block_indent + context.overflow_indent, context.config));\n+    result.push_str(&(context.block_indent + context.overflow_indent).to_string(context.config));\n     result.push('}');\n     Some(result)\n }\n@@ -710,7 +709,7 @@ fn arm_end_pos(arm: &ast::Arm) -> BytePos {\n impl Rewrite for ast::Arm {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n         let &ast::Arm { ref attrs, ref pats, ref guard, ref body } = self;\n-        let indent_str = make_indent(offset, context.config);\n+        let indent_str = offset.to_string(context.config);\n \n         // FIXME this is all a bit grotty, would be nice to abstract out the\n         // treatment of attributes.\n@@ -738,7 +737,7 @@ impl Rewrite for ast::Arm {\n                                     .map(|p| {\n                                         p.rewrite(context,\n                                                   pat_budget,\n-                                                  offset.block_indent(context.config.tab_spaces))\n+                                                  offset.block_indent(context.config))\n                                     })\n                                     .collect::<Option<Vec<_>>>());\n \n@@ -784,7 +783,7 @@ impl Rewrite for ast::Arm {\n \n         let mut line_indent = offset + pats_width;\n         if vertical {\n-            line_indent = line_indent.block_indent(context.config.tab_spaces);\n+            line_indent = line_indent.block_indent(context.config);\n         }\n \n         let comma = if let ast::ExprBlock(_) = body.node {\n@@ -819,7 +818,7 @@ impl Rewrite for ast::Arm {\n         Some(format!(\"{}{} =>\\n{}{},\",\n                      attr_str.trim_left(),\n                      pats_str,\n-                     make_indent(offset.block_indent(context.config.tab_spaces), context.config),\n+                     offset.block_indent(context.config).to_string(context.config),\n                      body_str))\n     }\n }\n@@ -849,11 +848,10 @@ fn rewrite_guard(context: &RewriteContext,\n         if overhead < width {\n             let cond_str = guard.rewrite(context,\n                                          width - overhead,\n-                                         offset.block_indent(context.config.tab_spaces));\n+                                         offset.block_indent(context.config));\n             if let Some(cond_str) = cond_str {\n                 return Some(format!(\"\\n{}if {}\",\n-                                    make_indent(offset.block_indent(context.config.tab_spaces),\n-                                                context.config),\n+                                    offset.block_indent(context.config).to_string(context.config),\n                                     cond_str));\n             }\n         }\n@@ -908,7 +906,7 @@ fn rewrite_pat_expr(context: &RewriteContext,\n \n     // The expression won't fit on the current line, jump to next.\n     result.push('\\n');\n-    result.push_str(&make_indent(pat_offset, context.config));\n+    result.push_str(&pat_offset.to_string(context.config));\n \n     let expr_rewrite = expr.rewrite(context,\n                                     context.config.max_width - pat_offset.width(),\n@@ -1067,7 +1065,7 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n         StructLitStyle::Block => {\n             // If we are all on one line, then we'll ignore the indent, and we\n             // have a smaller budget.\n-            let indent = context.block_indent.block_indent(context.config.tab_spaces);\n+            let indent = context.block_indent.block_indent(context.config);\n             let v_budget = context.config.max_width.checked_sub(indent.width()).unwrap_or(0);\n             (indent, v_budget)\n         }\n@@ -1139,10 +1137,10 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n     let fields_str = try_opt!(write_list(&items.collect::<Vec<_>>(), &fmt));\n \n     let format_on_newline = || {\n-        let inner_indent = make_indent(context.block_indent\n-                                              .block_indent(context.config.tab_spaces),\n-                                       context.config);\n-        let outer_indent = make_indent(context.block_indent, context.config);\n+        let inner_indent = context.block_indent\n+                                  .block_indent(context.config)\n+                                  .to_string(context.config);\n+        let outer_indent = context.block_indent.to_string(context.config);\n         Some(format!(\"{} {{\\n{}{}\\n{}}}\", path_str, inner_indent, fields_str, outer_indent))\n     };\n \n@@ -1255,7 +1253,7 @@ fn rewrite_binary_op(context: &RewriteContext,\n     Some(format!(\"{} {}\\n{}{}\",\n                  try_opt!(lhs.rewrite(context, budget, offset)),\n                  operator_str,\n-                 make_indent(offset, context.config),\n+                 offset.to_string(context.config),\n                  rhs_result))\n }\n \n@@ -1319,8 +1317,8 @@ pub fn rewrite_assign_rhs<S: Into<String>>(context: &RewriteContext,\n         None => {\n             // Expression did not fit on the same line as the identifier. Retry\n             // on the next line.\n-            let new_offset = offset.block_indent(context.config.tab_spaces);\n-            result.push_str(&format!(\"\\n{}\", make_indent(new_offset, context.config)));\n+            let new_offset = offset.block_indent(context.config);\n+            result.push_str(&format!(\"\\n{}\", new_offset.to_string(context.config)));\n \n             // FIXME: we probably should related max_width to width instead of config.max_width\n             // where is the 1 coming from anyway?"}, {"sha": "e72251815cfdb5c55ab4348fdaf913830c602cd3", "filename": "src/items.rs", "status": "modified", "additions": 25, "deletions": 29, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/03e1b2782616cbc8f06ba4e484b1540ae23e32be/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03e1b2782616cbc8f06ba4e484b1540ae23e32be/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=03e1b2782616cbc8f06ba4e484b1540ae23e32be", "patch": "@@ -11,8 +11,7 @@\n // Formatting top-level items - functions, structs, enums, traits, impls.\n \n use Indent;\n-use utils::{format_mutability, format_visibility, make_indent, contains_skip, span_after,\n-            end_typaram, wrap_str};\n+use utils::{format_mutability, format_visibility, contains_skip, span_after, end_typaram, wrap_str};\n use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic, ListTactic};\n use expr::rewrite_assign_rhs;\n use comment::FindUncommented;\n@@ -35,7 +34,7 @@ impl<'a> FmtVisitor<'a> {\n \n             if let Some(ref ty) = local.ty {\n                 infix.push_str(\": \");\n-                infix.push_str(&ty.rewrite(&self.get_context(), 1000, Indent::new(0, 0)).unwrap());\n+                infix.push_str(&ty.rewrite(&self.get_context(), 1000, Indent::empty()).unwrap());\n             }\n \n             if local.init.is_some() {\n@@ -126,7 +125,7 @@ impl<'a> FmtVisitor<'a> {\n         // this.\n         if newline_brace {\n             result.push('\\n');\n-            result.push_str(&make_indent(indent, self.config));\n+            result.push_str(&indent.to_string(self.config));\n         } else {\n             result.push(' ');\n         }\n@@ -226,17 +225,17 @@ impl<'a> FmtVisitor<'a> {\n         if one_line_budget <= 0 {\n             if self.config.fn_args_paren_newline {\n                 result.push('\\n');\n-                result.push_str(&make_indent(arg_indent, self.config));\n+                result.push_str(&arg_indent.to_string(self.config));\n                 arg_indent = arg_indent + 1; // extra space for `(`\n                 result.push('(');\n             } else {\n                 result.push_str(\"(\\n\");\n-                result.push_str(&make_indent(arg_indent, self.config));\n+                result.push_str(&arg_indent.to_string(self.config));\n             }\n         } else if self.config.fn_args_layout == StructLitStyle::Block {\n-            arg_indent = indent.block_indent(self.config.tab_spaces);\n+            arg_indent = indent.block_indent(self.config);\n             result.push_str(\"(\\n\");\n-            result.push_str(&make_indent(arg_indent, self.config));\n+            result.push_str(&arg_indent.to_string(self.config));\n         } else {\n             result.push('(');\n         }\n@@ -281,7 +280,7 @@ impl<'a> FmtVisitor<'a> {\n                 };\n \n                 result.push('\\n');\n-                result.push_str(&make_indent(indent, self.config));\n+                result.push_str(&indent.to_string(self.config));\n             } else {\n                 result.push(' ');\n             }\n@@ -390,7 +389,7 @@ impl<'a> FmtVisitor<'a> {\n \n         let indent = match self.config.fn_arg_indent {\n             BlockIndentStyle::Inherit => indent,\n-            BlockIndentStyle::Tabbed => indent.block_indent(self.config.tab_spaces),\n+            BlockIndentStyle::Tabbed => indent.block_indent(self.config),\n             BlockIndentStyle::Visual => arg_indent,\n         };\n \n@@ -444,7 +443,7 @@ impl<'a> FmtVisitor<'a> {\n \n         // Didn't work. we must force vertical layout and put args on a newline.\n         if let None = budgets {\n-            let new_indent = indent.block_indent(self.config.tab_spaces);\n+            let new_indent = indent.block_indent(self.config);\n             let used_space = new_indent.width() + 2; // account for `(` and `)`\n             let max_space = self.config.ideal_width + self.config.leeway;\n             if used_space > max_space {\n@@ -480,14 +479,13 @@ impl<'a> FmtVisitor<'a> {\n         let generics_str = self.format_generics(generics,\n                                                 \" {\",\n                                                 self.block_indent,\n-                                                self.block_indent\n-                                                    .block_indent(self.config.tab_spaces),\n+                                                self.block_indent.block_indent(self.config),\n                                                 codemap::mk_sp(span.lo, body_start))\n                                .unwrap();\n         self.buffer.push_str(&generics_str);\n \n         self.last_pos = body_start;\n-        self.block_indent = self.block_indent.block_indent(self.config.tab_spaces);\n+        self.block_indent = self.block_indent.block_indent(self.config);\n         for (i, f) in enum_def.variants.iter().enumerate() {\n             let next_span_start: BytePos = if i == enum_def.variants.len() - 1 {\n                 span.hi\n@@ -497,7 +495,7 @@ impl<'a> FmtVisitor<'a> {\n \n             self.visit_variant(f, i == enum_def.variants.len() - 1, next_span_start);\n         }\n-        self.block_indent = self.block_indent.block_unindent(self.config.tab_spaces);\n+        self.block_indent = self.block_indent.block_unindent(self.config);\n \n         self.format_missing_with_indent(span.lo + BytePos(enum_snippet.rfind('}').unwrap() as u32),\n                                         self.config);\n@@ -530,7 +528,7 @@ impl<'a> FmtVisitor<'a> {\n                                                  arg.ty\n                                                     .rewrite(&self.get_context(),\n                                                              1000,\n-                                                             Indent::new(0, 0))\n+                                                             Indent::empty())\n                                                     .unwrap()\n                                              },\n                                              span_after(field.span, \"(\", self.codemap),\n@@ -672,7 +670,7 @@ impl<'a> FmtVisitor<'a> {\n                          single_line_cost as usize + used_budget > self.config.max_width;\n \n         let tactic = if break_line {\n-            let indentation = make_indent(offset.block_indent(self.config.tab_spaces), self.config);\n+            let indentation = offset.block_indent(self.config).to_string(self.config);\n             result.push('\\n');\n             result.push_str(&indentation);\n \n@@ -687,7 +685,7 @@ impl<'a> FmtVisitor<'a> {\n             tactic: tactic,\n             separator: \",\",\n             trailing_separator: self.config.struct_trailing_comma,\n-            indent: offset.block_indent(self.config.tab_spaces),\n+            indent: offset.block_indent(self.config),\n             h_width: self.config.max_width,\n             v_width: budget,\n             ends_with_newline: true,\n@@ -699,7 +697,7 @@ impl<'a> FmtVisitor<'a> {\n \n         if break_line {\n             result.push('\\n');\n-            result.push_str(&make_indent(offset, self.config));\n+            result.push_str(&offset.to_string(self.config));\n         }\n \n         result.push_str(terminator);\n@@ -751,7 +749,7 @@ impl<'a> FmtVisitor<'a> {\n                                                                       Density::Tall,\n                                                                       span.hi));\n             result.push_str(&where_clause_str);\n-            result.push_str(&make_indent(self.block_indent, self.config));\n+            result.push_str(&self.block_indent.to_string(self.config));\n             result.push('\\n');\n             result.push_str(opener.trim());\n         } else {\n@@ -776,9 +774,9 @@ impl<'a> FmtVisitor<'a> {\n             ast::StructFieldKind::UnnamedField(vis) => format_visibility(vis),\n         };\n         // FIXME silly width, indent\n-        let typ = field.node.ty.rewrite(&self.get_context(), 1000, Indent::new(0, 0)).unwrap();\n+        let typ = field.node.ty.rewrite(&self.get_context(), 1000, Indent::empty()).unwrap();\n \n-        let indent = self.block_indent + self.config.tab_spaces;\n+        let indent = self.block_indent.block_indent(self.config);\n         let mut attr_str = field.node\n                                 .attrs\n                                 .rewrite(&self.get_context(),\n@@ -787,7 +785,7 @@ impl<'a> FmtVisitor<'a> {\n                                 .unwrap();\n         if !attr_str.is_empty() {\n             attr_str.push('\\n');\n-            attr_str.push_str(&make_indent(indent, self.config));\n+            attr_str.push_str(&indent.to_string(self.config));\n         }\n \n         match name {\n@@ -812,7 +810,7 @@ impl<'a> FmtVisitor<'a> {\n \n         let offset = match self.config.generics_indent {\n             BlockIndentStyle::Inherit => offset,\n-            BlockIndentStyle::Tabbed => offset.block_indent(self.config.tab_spaces),\n+            BlockIndentStyle::Tabbed => offset.block_indent(self.config),\n             // 1 = <\n             BlockIndentStyle::Visual => generics_offset + 1,\n         };\n@@ -870,7 +868,7 @@ impl<'a> FmtVisitor<'a> {\n         }\n \n         let extra_indent = match self.config.where_indent {\n-            BlockIndentStyle::Inherit => Indent::new(0, 0),\n+            BlockIndentStyle::Inherit => Indent::empty(),\n             BlockIndentStyle::Tabbed | BlockIndentStyle::Visual => Indent::new(config.tab_spaces,\n                                                                                0),\n         };\n@@ -879,7 +877,7 @@ impl<'a> FmtVisitor<'a> {\n \n         let offset = match self.config.where_pred_indent {\n             BlockIndentStyle::Inherit => indent + extra_indent,\n-            BlockIndentStyle::Tabbed => indent + extra_indent.block_indent(config.tab_spaces),\n+            BlockIndentStyle::Tabbed => indent + extra_indent.block_indent(config),\n             // 6 = \"where \".len()\n             BlockIndentStyle::Visual => indent + extra_indent + 6,\n         };\n@@ -915,9 +913,7 @@ impl<'a> FmtVisitor<'a> {\n         // 9 = \" where \".len() + \" {\".len()\n         if density == Density::Tall || preds_str.contains('\\n') ||\n            indent.width() + 9 + preds_str.len() > self.config.max_width {\n-            Some(format!(\"\\n{}where {}\",\n-                         make_indent(indent + extra_indent, self.config),\n-                         preds_str))\n+            Some(format!(\"\\n{}where {}\", (indent + extra_indent).to_string(self.config), preds_str))\n         } else {\n             Some(format!(\" where {}\", preds_str))\n         }"}, {"sha": "3015053730950fbfb9af77936b7e52467ab8ced1", "filename": "src/lib.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/03e1b2782616cbc8f06ba4e484b1540ae23e32be/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03e1b2782616cbc8f06ba4e484b1540ae23e32be/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=03e1b2782616cbc8f06ba4e484b1540ae23e32be", "patch": "@@ -83,7 +83,10 @@ const SKIP_ANNOTATION: &'static str = \"rustfmt_skip\";\n \n #[derive(Copy, Clone, Debug)]\n pub struct Indent {\n+    // Width of the block indent, in characters. Must be a multiple of\n+    // Config::tab_spaces.\n     block_indent: usize,\n+    // Alignment in characters.\n     alignment: usize,\n }\n \n@@ -92,13 +95,17 @@ impl Indent {\n         Indent { block_indent: block_indent, alignment: alignment }\n     }\n \n-    pub fn block_indent(mut self, block_indent: usize) -> Indent {\n-        self.block_indent += block_indent;\n+    pub fn empty() -> Indent {\n+        Indent::new(0, 0)\n+    }\n+\n+    pub fn block_indent(mut self, config: &Config) -> Indent {\n+        self.block_indent += config.tab_spaces;\n         self\n     }\n \n-    pub fn block_unindent(mut self, block_indent: usize) -> Indent {\n-        self.block_indent -= block_indent;\n+    pub fn block_unindent(mut self, config: &Config) -> Indent {\n+        self.block_indent -= config.tab_spaces;\n         self\n     }\n \n@@ -139,18 +146,15 @@ impl Sub for Indent {\n     type Output = Indent;\n \n     fn sub(self, rhs: Indent) -> Indent {\n-        Indent {\n-            block_indent: self.block_indent - rhs.block_indent,\n-            alignment: self.alignment - rhs.alignment,\n-        }\n+        Indent::new(self.block_indent - rhs.block_indent, self.alignment - rhs.alignment)\n     }\n }\n \n impl Add<usize> for Indent {\n     type Output = Indent;\n \n     fn add(self, rhs: usize) -> Indent {\n-        Indent { block_indent: self.block_indent, alignment: self.alignment + rhs }\n+        Indent::new(self.block_indent, self.alignment + rhs)\n     }\n }\n "}, {"sha": "e00e8b0ee375451a48648db6ef84809dcde4419d", "filename": "src/lists.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03e1b2782616cbc8f06ba4e484b1540ae23e32be/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03e1b2782616cbc8f06ba4e484b1540ae23e32be/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=03e1b2782616cbc8f06ba4e484b1540ae23e32be", "patch": "@@ -14,7 +14,7 @@ use std::iter::Peekable;\n use syntax::codemap::{self, CodeMap, BytePos};\n \n use Indent;\n-use utils::{round_up_to_power_of_two, make_indent, wrap_str};\n+use utils::{round_up_to_power_of_two, wrap_str};\n use comment::{FindUncommented, rewrite_comment, find_comment_end};\n use config::Config;\n \n@@ -155,7 +155,7 @@ pub fn write_list<'b>(items: &[ListItem], formatting: &ListFormatting<'b>) -> Op\n     let mut result = String::with_capacity(round_up_to_power_of_two(alloc_width));\n \n     let mut line_len = 0;\n-    let indent_str = &make_indent(formatting.indent, formatting.config);\n+    let indent_str = &formatting.indent.to_string(formatting.config);\n     for (i, item) in items.iter().enumerate() {\n         let first = i == 0;\n         let last = i == items.len() - 1;\n@@ -221,7 +221,7 @@ pub fn write_list<'b>(items: &[ListItem], formatting: &ListFormatting<'b>) -> Op\n             let formatted_comment = rewrite_comment(comment,\n                                                     true,\n                                                     formatting.v_width,\n-                                                    Indent::new(0, 0),\n+                                                    Indent::empty(),\n                                                     formatting.config);\n \n             result.push(' ');"}, {"sha": "f39480f5450f876a1b2b34b85a8ef13ad8153337", "filename": "src/missed_spans.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/03e1b2782616cbc8f06ba4e484b1540ae23e32be/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03e1b2782616cbc8f06ba4e484b1540ae23e32be/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=03e1b2782616cbc8f06ba4e484b1540ae23e32be", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use config::Config;\n-use utils::make_indent;\n use visitor::FmtVisitor;\n \n use syntax::codemap::{self, BytePos};\n@@ -29,7 +28,7 @@ impl<'a> FmtVisitor<'a> {\n                                           // No new lines in the snippet.\n                                           this.buffer.push_str(\"\\n\");\n                                       }\n-                                      let indent = make_indent(this.block_indent, config);\n+                                      let indent = this.block_indent.to_string(config);\n                                       this.buffer.push_str(&indent);\n                                   })\n     }"}, {"sha": "6517bbdf37b41cb38e65e076f530f07d2be24e2e", "filename": "src/rewrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03e1b2782616cbc8f06ba4e484b1540ae23e32be/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03e1b2782616cbc8f06ba4e484b1540ae23e32be/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=03e1b2782616cbc8f06ba4e484b1540ae23e32be", "patch": "@@ -44,7 +44,7 @@ impl<'a> RewriteContext<'a> {\n         RewriteContext {\n             codemap: self.codemap,\n             config: self.config,\n-            block_indent: self.block_indent.block_indent(self.config.tab_spaces),\n+            block_indent: self.block_indent.block_indent(self.config),\n             overflow_indent: self.overflow_indent,\n         }\n     }"}, {"sha": "4e40b8e9ede536569cf412a55bcfb57546283a92", "filename": "src/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03e1b2782616cbc8f06ba4e484b1540ae23e32be/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03e1b2782616cbc8f06ba4e484b1540ae23e32be/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=03e1b2782616cbc8f06ba4e484b1540ae23e32be", "patch": "@@ -15,7 +15,7 @@ use regex::Regex;\n \n use Indent;\n use config::Config;\n-use utils::{make_indent, round_up_to_power_of_two};\n+use utils::round_up_to_power_of_two;\n \n use MIN_STRING;\n \n@@ -39,7 +39,7 @@ pub fn rewrite_string<'a>(s: &str, fmt: &StringFormat<'a>) -> String {\n \n     let graphemes = UnicodeSegmentation::graphemes(&*stripped_str, false).collect::<Vec<&str>>();\n \n-    let indent = make_indent(fmt.offset, fmt.config);\n+    let indent = fmt.offset.to_string(fmt.config);\n     let indent = &indent;\n \n     let mut cur_start = 0;"}, {"sha": "171572ccfbf6dd27043a85e0e498a6c0245e8020", "filename": "src/utils.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03e1b2782616cbc8f06ba4e484b1540ae23e32be/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03e1b2782616cbc8f06ba4e484b1540ae23e32be/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=03e1b2782616cbc8f06ba4e484b1540ae23e32be", "patch": "@@ -15,7 +15,6 @@ use syntax::codemap::{CodeMap, Span, BytePos};\n \n use Indent;\n use comment::FindUncommented;\n-use config::Config;\n use rewrite::{Rewrite, RewriteContext};\n \n use SKIP_ANNOTATION;\n@@ -37,11 +36,6 @@ pub fn span_after(original: Span, needle: &str, codemap: &CodeMap) -> BytePos {\n     original.lo + BytePos(snippet.find_uncommented(needle).unwrap() as u32 + 1)\n }\n \n-#[inline]\n-pub fn make_indent(indent: Indent, config: &Config) -> String {\n-    indent.to_string(config)\n-}\n-\n #[inline]\n pub fn format_visibility(vis: Visibility) -> &'static str {\n     match vis {"}, {"sha": "5426d9bae90046dc56562e9c249b1218834b4a3c", "filename": "src/visitor.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/03e1b2782616cbc8f06ba4e484b1540ae23e32be/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03e1b2782616cbc8f06ba4e484b1540ae23e32be/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=03e1b2782616cbc8f06ba4e484b1540ae23e32be", "patch": "@@ -102,7 +102,7 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n         };\n \n         self.last_pos = self.last_pos + brace_compensation;\n-        self.block_indent = self.block_indent.block_indent(self.config.tab_spaces);\n+        self.block_indent = self.block_indent.block_indent(self.config);\n         self.buffer.push_str(\"{\");\n \n         for stmt in &b.stmts {\n@@ -117,7 +117,7 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n             None => {}\n         }\n \n-        self.block_indent = self.block_indent.block_unindent(self.config.tab_spaces);\n+        self.block_indent = self.block_indent.block_unindent(self.config);\n         // TODO: we should compress any newlines here to just one\n         self.format_missing_with_indent(b.span.hi - brace_compensation, self.config);\n         self.buffer.push_str(\"}\");\n@@ -198,9 +198,9 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n             }\n             ast::Item_::ItemImpl(..) |\n             ast::Item_::ItemTrait(..) => {\n-                self.block_indent = self.block_indent.block_indent(self.config.tab_spaces);\n+                self.block_indent = self.block_indent.block_indent(self.config);\n                 visit::walk_item(self, item);\n-                self.block_indent = self.block_indent.block_unindent(self.config.tab_spaces);\n+                self.block_indent = self.block_indent.block_unindent(self.config);\n             }\n             ast::Item_::ItemExternCrate(_) => {\n                 self.format_missing_with_indent(item.span.lo, self.config);\n@@ -330,17 +330,17 @@ impl<'a> FmtVisitor<'a> {\n \n         if is_internal {\n             debug!(\"FmtVisitor::format_mod: internal mod\");\n-            self.block_indent = self.block_indent.block_indent(self.config.tab_spaces);\n+            self.block_indent = self.block_indent.block_indent(self.config);\n             visit::walk_mod(self, m);\n             debug!(\"... last_pos after: {:?}\", self.last_pos);\n-            self.block_indent = self.block_indent.block_unindent(self.config.tab_spaces);\n+            self.block_indent = self.block_indent.block_unindent(self.config);\n         }\n     }\n \n     pub fn format_separate_mod(&mut self, m: &ast::Mod, filename: &str) {\n         let filemap = self.codemap.get_filemap(filename);\n         self.last_pos = filemap.start_pos;\n-        self.block_indent = Indent::new(0, 0);\n+        self.block_indent = Indent::empty();\n         visit::walk_mod(self, m);\n         self.format_missing(filemap.end_pos);\n     }\n@@ -353,7 +353,7 @@ impl<'a> FmtVisitor<'a> {\n             codemap: self.codemap,\n             config: self.config,\n             block_indent: self.block_indent,\n-            overflow_indent: Indent::new(0, 0),\n+            overflow_indent: Indent::empty(),\n         };\n         // 1 = \";\"\n         match vp.rewrite(&context, self.config.max_width - offset.width() - 1, offset) {\n@@ -385,7 +385,7 @@ impl<'a> FmtVisitor<'a> {\n             codemap: self.codemap,\n             config: self.config,\n             block_indent: self.block_indent,\n-            overflow_indent: Indent::new(0, 0),\n+            overflow_indent: Indent::empty(),\n         }\n     }\n }\n@@ -396,7 +396,7 @@ impl<'a> Rewrite for [ast::Attribute] {\n         if self.is_empty() {\n             return Some(result);\n         }\n-        let indent = utils::make_indent(offset, context.config);\n+        let indent = offset.to_string(context.config);\n \n         for (i, a) in self.iter().enumerate() {\n             let a_str = context.snippet(a.span);"}]}