{"sha": "c25581524022e101d7093737fde4dc94a28e6ccc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNTU4MTUyNDAyMmUxMDFkNzA5MzczN2ZkZTRkYzk0YTI4ZTZjY2M=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-12-09T22:33:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-09T22:33:15Z"}, "message": "Rollup merge of #67169 - lzutao:inline_osstr, r=nagisa\n\ninline some common methods on OsStr\n\nCloses #67150", "tree": {"sha": "cad07668401a304a5a655e5a8760dec452d68c72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cad07668401a304a5a655e5a8760dec452d68c72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c25581524022e101d7093737fde4dc94a28e6ccc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd7surCRBK7hj4Ov3rIwAAdHIIAF1kWDUg7itrXd3EhXfsE9+/\nKmRp+k2mIwwpft5kq7qNhCFnm+hFbjm7uZUGK8+6AXMA8VmsEoyA3aq7CGFVMZtC\nLUG2e4Qre5LX7yp7DIZw6cWNBivkMk+ohq2wbPy/7UqKr11Gmg/Q1Sq0Y552DGQA\nSoWaJ84vFm0H320m196J9Tth8ZshZFTnoAhCyoxdnwco9bOPytSlOr7t3OXd1uaJ\n5U9XB5Lqx6tYSHYo2LPk8Dg/CISmlSVpBL/ECDlNtmUDNJQlzoVeDaqEuVn57uwn\n80FkmUegMm+iOCDnunEwgtClPIXXCxVqePXiQ7n7MQQl0jAg8TWOETOAP0FzAxY=\n=Hd2B\n-----END PGP SIGNATURE-----\n", "payload": "tree cad07668401a304a5a655e5a8760dec452d68c72\nparent 196ca9dc94cbdca32ec1ec31b899aa27da47bd4c\nparent bf1f1c242c084e6d74677e228db9d5d6595af7af\nauthor Tyler Mandry <tmandry@gmail.com> 1575930795 -0800\ncommitter GitHub <noreply@github.com> 1575930795 -0800\n\nRollup merge of #67169 - lzutao:inline_osstr, r=nagisa\n\ninline some common methods on OsStr\n\nCloses #67150\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c25581524022e101d7093737fde4dc94a28e6ccc", "html_url": "https://github.com/rust-lang/rust/commit/c25581524022e101d7093737fde4dc94a28e6ccc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c25581524022e101d7093737fde4dc94a28e6ccc/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "196ca9dc94cbdca32ec1ec31b899aa27da47bd4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/196ca9dc94cbdca32ec1ec31b899aa27da47bd4c", "html_url": "https://github.com/rust-lang/rust/commit/196ca9dc94cbdca32ec1ec31b899aa27da47bd4c"}, {"sha": "bf1f1c242c084e6d74677e228db9d5d6595af7af", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf1f1c242c084e6d74677e228db9d5d6595af7af", "html_url": "https://github.com/rust-lang/rust/commit/bf1f1c242c084e6d74677e228db9d5d6595af7af"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "b9cede7aa53baf005198eb4102a894fdc61ecde2", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c25581524022e101d7093737fde4dc94a28e6ccc/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c25581524022e101d7093737fde4dc94a28e6ccc/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=c25581524022e101d7093737fde4dc94a28e6ccc", "patch": "@@ -495,11 +495,13 @@ impl OsStr {\n     ///\n     /// let os_str = OsStr::new(\"foo\");\n     /// ```\n+    #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new<S: AsRef<OsStr> + ?Sized>(s: &S) -> &OsStr {\n         s.as_ref()\n     }\n \n+    #[inline]\n     fn from_inner(inner: &Slice) -> &OsStr {\n         unsafe { &*(inner as *const Slice as *const OsStr) }\n     }\n@@ -658,6 +660,7 @@ impl OsStr {\n     ///\n     /// Note: it is *crucial* that this API is private, to avoid\n     /// revealing the internal, platform-specific encodings.\n+    #[inline]\n     fn bytes(&self) -> &[u8] {\n         unsafe { &*(&self.inner as *const _ as *const [u8]) }\n     }\n@@ -797,20 +800,23 @@ impl Default for &OsStr {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialEq for OsStr {\n+    #[inline]\n     fn eq(&self, other: &OsStr) -> bool {\n         self.bytes().eq(other.bytes())\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialEq<str> for OsStr {\n+    #[inline]\n     fn eq(&self, other: &str) -> bool {\n         *self == *OsStr::new(other)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialEq<OsStr> for str {\n+    #[inline]\n     fn eq(&self, other: &OsStr) -> bool {\n         *other == *OsStr::new(self)\n     }\n@@ -944,13 +950,15 @@ impl AsRef<OsStr> for OsString {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRef<OsStr> for str {\n+    #[inline]\n     fn as_ref(&self) -> &OsStr {\n         OsStr::from_inner(Slice::from_str(self))\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRef<OsStr> for String {\n+    #[inline]\n     fn as_ref(&self) -> &OsStr {\n         (&**self).as_ref()\n     }"}, {"sha": "ef260f9c5d21f57a15b46e58ed3ab613df4acc69", "filename": "src/libstd/sys/windows/os_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c25581524022e101d7093737fde4dc94a28e6ccc/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c25581524022e101d7093737fde4dc94a28e6ccc/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs?ref=c25581524022e101d7093737fde4dc94a28e6ccc", "patch": "@@ -128,6 +128,7 @@ impl Buf {\n }\n \n impl Slice {\n+    #[inline]\n     pub fn from_str(s: &str) -> &Slice {\n         unsafe { mem::transmute(Wtf8::from_str(s)) }\n     }"}, {"sha": "eb8a881ec8881f522e75e852f785b0b2f982b291", "filename": "src/libstd/sys_common/os_str_bytes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c25581524022e101d7093737fde4dc94a28e6ccc/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c25581524022e101d7093737fde4dc94a28e6ccc/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs?ref=c25581524022e101d7093737fde4dc94a28e6ccc", "patch": "@@ -139,10 +139,12 @@ impl Buf {\n }\n \n impl Slice {\n+    #[inline]\n     fn from_u8_slice(s: &[u8]) -> &Slice {\n         unsafe { mem::transmute(s) }\n     }\n \n+    #[inline]\n     pub fn from_str(s: &str) -> &Slice {\n         Slice::from_u8_slice(s.as_bytes())\n     }"}]}