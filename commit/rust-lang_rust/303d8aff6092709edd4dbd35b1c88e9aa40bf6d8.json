{"sha": "303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwM2Q4YWZmNjA5MjcwOWVkZDRkYmQzNWIxYzg4ZTlhYTQwYmY2ZDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-11T09:37:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-11T09:37:19Z"}, "message": "Auto merge of #69914 - Centril:rollup-wtmdinz, r=Centril\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #66059 (mem::zeroed/uninit: panic on types that do not permit zero-initialization)\n - #69373 (Stabilize const for integer {to,from}_{be,le,ne}_bytes methods)\n - #69591 (Use TypeRelating for instantiating query responses)\n - #69625 (Implement nth, last, and count for iter::Copied)\n - #69645 (const forget tests)\n - #69766 (Make Point `Copy` in arithmetic documentation)\n - #69825 (make `mem::discriminant` const)\n - #69859 (fix #62456)\n - #69891 (Exhaustiveness checking, `Matrix::push`: recursively expand or-patterns)\n - #69896 (parse: Tweak the function parameter edition check)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "d1c781bd7041e9f7d374d93281f64d6803cbd9cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1c781bd7041e9f7d374d93281f64d6803cbd9cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "html_url": "https://github.com/rust-lang/rust/commit/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15812785344d913d779d9738fe3cca8de56f71d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/15812785344d913d779d9738fe3cca8de56f71d5", "html_url": "https://github.com/rust-lang/rust/commit/15812785344d913d779d9738fe3cca8de56f71d5"}, {"sha": "6a8683fcd0f51eb3e17c464f9c68967c71a62de5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a8683fcd0f51eb3e17c464f9c68967c71a62de5", "html_url": "https://github.com/rust-lang/rust/commit/6a8683fcd0f51eb3e17c464f9c68967c71a62de5"}], "stats": {"total": 945, "additions": 733, "deletions": 212}, "files": [{"sha": "3c060cc6e840beea77fe2aedcf7ab43365f47c64", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -1007,6 +1007,16 @@ extern \"rust-intrinsic\" {\n     /// This will statically either panic, or do nothing.\n     pub fn panic_if_uninhabited<T>();\n \n+    /// A guard for unsafe functions that cannot ever be executed if `T` does not permit\n+    /// zero-initialization: This will statically either panic, or do nothing.\n+    #[cfg(not(bootstrap))]\n+    pub fn panic_if_zero_invalid<T>();\n+\n+    /// A guard for unsafe functions that cannot ever be executed if `T` has invalid\n+    /// bit patterns: This will statically either panic, or do nothing.\n+    #[cfg(not(bootstrap))]\n+    pub fn panic_if_any_invalid<T>();\n+\n     /// Gets a reference to a static `Location` indicating where it was called.\n     #[rustc_const_unstable(feature = \"const_caller_location\", issue = \"47809\")]\n     pub fn caller_location() -> &'static crate::panic::Location<'static>;\n@@ -1852,6 +1862,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::mem::discriminant`](../../std/mem/fn.discriminant.html)\n+    #[rustc_const_unstable(feature = \"const_discriminant\", issue = \"69821\")]\n     pub fn discriminant_value<T>(v: &T) -> u64;\n \n     /// Rust's \"try catch\" construct which invokes the function pointer `f` with"}, {"sha": "26132e36c9750a79ce65a81b70b6d113ba620c50", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -200,6 +200,18 @@ where\n     {\n         self.it.fold(init, copy_fold(f))\n     }\n+\n+    fn nth(&mut self, n: usize) -> Option<T> {\n+        self.it.nth(n).copied()\n+    }\n+\n+    fn last(self) -> Option<T> {\n+        self.it.last().copied()\n+    }\n+\n+    fn count(self) -> usize {\n+        self.it.count()\n+    }\n }\n \n #[stable(feature = \"iter_copied\", since = \"1.36.0\")]"}, {"sha": "a1dde1d51ef8096251c29a7b52c5e29559c9f938", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -72,6 +72,7 @@\n #![feature(concat_idents)]\n #![feature(const_ascii_ctype_on_intrinsics)]\n #![feature(const_alloc_layout)]\n+#![feature(const_discriminant)]\n #![feature(const_if_match)]\n #![feature(const_loop)]\n #![feature(const_checked_int_methods)]\n@@ -130,7 +131,6 @@\n #![feature(rtm_target_feature)]\n #![feature(f16c_target_feature)]\n #![feature(hexagon_target_feature)]\n-#![feature(const_int_conversion)]\n #![feature(const_transmute)]\n #![feature(structural_match)]\n #![feature(abi_unadjusted)]"}, {"sha": "7d9a8bcd05b1c5fec67d6fe5fc9b5f347e53e844", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -496,6 +496,9 @@ pub const fn needs_drop<T>() -> bool {\n #[allow(deprecated)]\n #[rustc_diagnostic_item = \"mem_zeroed\"]\n pub unsafe fn zeroed<T>() -> T {\n+    #[cfg(not(bootstrap))]\n+    intrinsics::panic_if_zero_invalid::<T>();\n+    #[cfg(bootstrap)]\n     intrinsics::panic_if_uninhabited::<T>();\n     intrinsics::init()\n }\n@@ -529,6 +532,9 @@ pub unsafe fn zeroed<T>() -> T {\n #[allow(deprecated)]\n #[rustc_diagnostic_item = \"mem_uninitialized\"]\n pub unsafe fn uninitialized<T>() -> T {\n+    #[cfg(not(bootstrap))]\n+    intrinsics::panic_if_any_invalid::<T>();\n+    #[cfg(bootstrap)]\n     intrinsics::panic_if_uninhabited::<T>();\n     intrinsics::uninit()\n }\n@@ -864,6 +870,7 @@ impl<T> fmt::Debug for Discriminant<T> {\n /// assert_ne!(mem::discriminant(&Foo::B(3)), mem::discriminant(&Foo::C(3)));\n /// ```\n #[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\n-pub fn discriminant<T>(v: &T) -> Discriminant<T> {\n+#[rustc_const_unstable(feature = \"const_discriminant\", issue = \"69821\")]\n+pub const fn discriminant<T>(v: &T) -> Discriminant<T> {\n     Discriminant(intrinsics::discriminant_value(v), PhantomData)\n }"}, {"sha": "caffa6c509aaa5071dcfd1ce9c9249a42c73c64f", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 48, "deletions": 16, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -2154,7 +2154,7 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_be_bytes();\n assert_eq!(bytes, \", $be_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n             #[inline]\n             pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_be().to_ne_bytes()\n@@ -2174,7 +2174,7 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_le_bytes();\n assert_eq!(bytes, \", $le_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n             #[inline]\n             pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_le().to_ne_bytes()\n@@ -2209,12 +2209,20 @@ assert_eq!(\n );\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            // SAFETY: const sound because integers are plain old datatypes so we can always\n+            // transmute them to arrays of bytes\n+            #[allow_internal_unstable(const_fn_union)]\n             #[inline]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n+                #[repr(C)]\n+                union Bytes {\n+                    val: $SelfT,\n+                    bytes: [u8; mem::size_of::<$SelfT>()],\n+                }\n                 // SAFETY: integers are plain old datatypes so we can always transmute them to\n                 // arrays of bytes\n-                unsafe { mem::transmute(self) }\n+                unsafe { Bytes { val: self }.bytes }\n             }\n         }\n \n@@ -2243,7 +2251,7 @@ fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n             #[inline]\n             pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_be(Self::from_ne_bytes(bytes))\n@@ -2276,7 +2284,7 @@ fn read_le_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n             #[inline]\n             pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_le(Self::from_ne_bytes(bytes))\n@@ -2319,11 +2327,19 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            // SAFETY: const sound because integers are plain old datatypes so we can always\n+            // transmute to them\n+            #[allow_internal_unstable(const_fn_union)]\n             #[inline]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+                #[repr(C)]\n+                union Bytes {\n+                    val: $SelfT,\n+                    bytes: [u8; mem::size_of::<$SelfT>()],\n+                }\n                 // SAFETY: integers are plain old datatypes so we can always transmute to them\n-                unsafe { mem::transmute(bytes) }\n+                unsafe { Bytes { bytes }.val }\n             }\n         }\n \n@@ -4099,7 +4115,7 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_be_bytes();\n assert_eq!(bytes, \", $be_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n             #[inline]\n             pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_be().to_ne_bytes()\n@@ -4119,7 +4135,7 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_le_bytes();\n assert_eq!(bytes, \", $le_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n             #[inline]\n             pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_le().to_ne_bytes()\n@@ -4154,12 +4170,20 @@ assert_eq!(\n );\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            // SAFETY: const sound because integers are plain old datatypes so we can always\n+            // transmute them to arrays of bytes\n+            #[allow_internal_unstable(const_fn_union)]\n             #[inline]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n+                #[repr(C)]\n+                union Bytes {\n+                    val: $SelfT,\n+                    bytes: [u8; mem::size_of::<$SelfT>()],\n+                }\n                 // SAFETY: integers are plain old datatypes so we can always transmute them to\n                 // arrays of bytes\n-                unsafe { mem::transmute(self) }\n+                unsafe { Bytes { val: self }.bytes }\n             }\n         }\n \n@@ -4188,7 +4212,7 @@ fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n             #[inline]\n             pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_be(Self::from_ne_bytes(bytes))\n@@ -4221,7 +4245,7 @@ fn read_le_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n             #[inline]\n             pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_le(Self::from_ne_bytes(bytes))\n@@ -4264,11 +4288,19 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            // SAFETY: const sound because integers are plain old datatypes so we can always\n+            // transmute to them\n+            #[allow_internal_unstable(const_fn_union)]\n             #[inline]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+                #[repr(C)]\n+                union Bytes {\n+                    val: $SelfT,\n+                    bytes: [u8; mem::size_of::<$SelfT>()],\n+                }\n                 // SAFETY: integers are plain old datatypes so we can always transmute to them\n-                unsafe { mem::transmute(bytes) }\n+                unsafe { Bytes { bytes }.val }\n             }\n         }\n "}, {"sha": "e9ec81394e32d8c528cc41c1864f992014f9bd11", "filename": "src/libcore/ops/arith.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibcore%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibcore%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Farith.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -13,7 +13,7 @@\n /// ```\n /// use std::ops::Add;\n ///\n-/// #[derive(Debug, PartialEq)]\n+/// #[derive(Debug, Copy, Clone, PartialEq)]\n /// struct Point {\n ///     x: i32,\n ///     y: i32,\n@@ -42,7 +42,7 @@\n /// ```\n /// use std::ops::Add;\n ///\n-/// #[derive(Debug, PartialEq)]\n+/// #[derive(Debug, Copy, Clone, PartialEq)]\n /// struct Point<T> {\n ///     x: T,\n ///     y: T,\n@@ -115,7 +115,7 @@ add_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n /// use std::ops::Sub;\n ///\n-/// #[derive(Debug, PartialEq)]\n+/// #[derive(Debug, Copy, Clone, PartialEq)]\n /// struct Point {\n ///     x: i32,\n ///     y: i32,\n@@ -657,7 +657,7 @@ neg_impl_numeric! { isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n /// use std::ops::AddAssign;\n ///\n-/// #[derive(Debug, PartialEq)]\n+/// #[derive(Debug, Copy, Clone, PartialEq)]\n /// struct Point {\n ///     x: i32,\n ///     y: i32,\n@@ -715,7 +715,7 @@ add_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n /// use std::ops::SubAssign;\n ///\n-/// #[derive(Debug, PartialEq)]\n+/// #[derive(Debug, Copy, Clone, PartialEq)]\n /// struct Point {\n ///     x: i32,\n ///     y: i32,"}, {"sha": "e3e5934b44be1f0732913ce89568a556dc3d4e19", "filename": "src/libcore/ops/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibcore%2Fops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibcore%2Fops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fmod.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -42,7 +42,7 @@\n //! ```rust\n //! use std::ops::{Add, Sub};\n //!\n-//! #[derive(Debug, PartialEq)]\n+//! #[derive(Debug, Copy, Clone, PartialEq)]\n //! struct Point {\n //!     x: i32,\n //!     y: i32,"}, {"sha": "05f958cbe81fe09e4e2d707ec6395c88ef2ab542", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -41,6 +41,7 @@\n #![feature(never_type)]\n #![feature(unwrap_infallible)]\n #![feature(leading_trailing_ones)]\n+#![feature(const_forget)]\n \n extern crate test;\n "}, {"sha": "8337ab103419f82d6406359fbd0a542760b45818", "filename": "src/libcore/tests/mem.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fmem.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -129,3 +129,21 @@ fn test_discriminant_send_sync() {\n     is_send_sync::<Discriminant<Regular>>();\n     is_send_sync::<Discriminant<NotSendSync>>();\n }\n+\n+#[test]\n+fn test_const_forget() {\n+    const _: () = forget(0i32);\n+    const _: () = forget(Vec::<Vec<Box<i32>>>::new());\n+\n+    // Writing this function signature without const-forget\n+    // triggers compiler errors:\n+    // 1) That we use a non-const fn inside a const fn\n+    // 2) without the forget, it complains about the destructor of Box\n+    const fn const_forget_box<T>(x: Box<T>) {\n+        forget(x);\n+    }\n+\n+    // Call the forget_box at runtime,\n+    // as we can't const-construct a box yet.\n+    const_forget_box(Box::new(0i32));\n+}"}, {"sha": "dedb3035cedb35d1f6cf30fc30a3e33b728bf74c", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -1904,36 +1904,6 @@ impl<'tcx, T: HasTyCtxt<'tcx>> HasTyCtxt<'tcx> for LayoutCx<'tcx, T> {\n     }\n }\n \n-pub trait MaybeResult<T> {\n-    type Error;\n-\n-    fn from(x: Result<T, Self::Error>) -> Self;\n-    fn to_result(self) -> Result<T, Self::Error>;\n-}\n-\n-impl<T> MaybeResult<T> for T {\n-    type Error = !;\n-\n-    fn from(x: Result<T, Self::Error>) -> Self {\n-        let Ok(x) = x;\n-        x\n-    }\n-    fn to_result(self) -> Result<T, Self::Error> {\n-        Ok(self)\n-    }\n-}\n-\n-impl<T, E> MaybeResult<T> for Result<T, E> {\n-    type Error = E;\n-\n-    fn from(x: Result<T, Self::Error>) -> Self {\n-        x\n-    }\n-    fn to_result(self) -> Result<T, Self::Error> {\n-        self\n-    }\n-}\n-\n pub type TyLayout<'tcx> = ::rustc_target::abi::TyLayout<'tcx, Ty<'tcx>>;\n \n impl<'tcx> LayoutOf for LayoutCx<'tcx, TyCtxt<'tcx>> {"}, {"sha": "c8d352cd2dd988361543f0aa80bd393a4f8cdfae", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 92, "deletions": 35, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -434,6 +434,89 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         helper.do_call(self, &mut bx, fn_abi, llfn, &args, None, cleanup);\n     }\n \n+    /// Returns `true` if this is indeed a panic intrinsic and codegen is done.\n+    fn codegen_panic_intrinsic(\n+        &mut self,\n+        helper: &TerminatorCodegenHelper<'tcx>,\n+        bx: &mut Bx,\n+        intrinsic: Option<&str>,\n+        instance: Option<Instance<'tcx>>,\n+        span: Span,\n+        destination: &Option<(mir::Place<'tcx>, mir::BasicBlock)>,\n+        cleanup: Option<mir::BasicBlock>,\n+    ) -> bool {\n+        // Emit a panic or a no-op for `panic_if_uninhabited`.\n+        // These are intrinsics that compile to panics so that we can get a message\n+        // which mentions the offending type, even from a const context.\n+        #[derive(Debug, PartialEq)]\n+        enum PanicIntrinsic {\n+            IfUninhabited,\n+            IfZeroInvalid,\n+            IfAnyInvalid,\n+        };\n+        let panic_intrinsic = intrinsic.and_then(|i| match i {\n+            // FIXME: Move to symbols instead of strings.\n+            \"panic_if_uninhabited\" => Some(PanicIntrinsic::IfUninhabited),\n+            \"panic_if_zero_invalid\" => Some(PanicIntrinsic::IfZeroInvalid),\n+            \"panic_if_any_invalid\" => Some(PanicIntrinsic::IfAnyInvalid),\n+            _ => None,\n+        });\n+        if let Some(intrinsic) = panic_intrinsic {\n+            use PanicIntrinsic::*;\n+            let ty = instance.unwrap().substs.type_at(0);\n+            let layout = bx.layout_of(ty);\n+            let do_panic = match intrinsic {\n+                IfUninhabited => layout.abi.is_uninhabited(),\n+                // We unwrap as the error type is `!`.\n+                IfZeroInvalid => !layout.might_permit_raw_init(bx, /*zero:*/ true).unwrap(),\n+                // We unwrap as the error type is `!`.\n+                IfAnyInvalid => !layout.might_permit_raw_init(bx, /*zero:*/ false).unwrap(),\n+            };\n+            if do_panic {\n+                let msg_str = if layout.abi.is_uninhabited() {\n+                    // Use this error even for the other intrinsics as it is more precise.\n+                    format!(\"attempted to instantiate uninhabited type `{}`\", ty)\n+                } else if intrinsic == IfZeroInvalid {\n+                    format!(\"attempted to zero-initialize type `{}`, which is invalid\", ty)\n+                } else {\n+                    format!(\"attempted to leave type `{}` uninitialized, which is invalid\", ty)\n+                };\n+                let msg = bx.const_str(Symbol::intern(&msg_str));\n+                let location = self.get_caller_location(bx, span).immediate();\n+\n+                // Obtain the panic entry point.\n+                // FIXME: dedup this with `codegen_assert_terminator` above.\n+                let def_id =\n+                    common::langcall(bx.tcx(), Some(span), \"\", lang_items::PanicFnLangItem);\n+                let instance = ty::Instance::mono(bx.tcx(), def_id);\n+                let fn_abi = FnAbi::of_instance(bx, instance, &[]);\n+                let llfn = bx.get_fn_addr(instance);\n+\n+                if let Some((_, target)) = destination.as_ref() {\n+                    helper.maybe_sideeffect(self.mir, bx, &[*target]);\n+                }\n+                // Codegen the actual panic invoke/call.\n+                helper.do_call(\n+                    self,\n+                    bx,\n+                    fn_abi,\n+                    llfn,\n+                    &[msg.0, msg.1, location],\n+                    destination.as_ref().map(|(_, bb)| (ReturnDest::Nothing, *bb)),\n+                    cleanup,\n+                );\n+            } else {\n+                // a NOP\n+                let target = destination.as_ref().unwrap().1;\n+                helper.maybe_sideeffect(self.mir, bx, &[target]);\n+                helper.funclet_br(self, bx, target)\n+            }\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+\n     fn codegen_call_terminator(\n         &mut self,\n         helper: TerminatorCodegenHelper<'tcx>,\n@@ -520,41 +603,15 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             bug!(\"`miri_start_panic` should never end up in compiled code\");\n         }\n \n-        // Emit a panic or a no-op for `panic_if_uninhabited`.\n-        if intrinsic == Some(\"panic_if_uninhabited\") {\n-            let ty = instance.unwrap().substs.type_at(0);\n-            let layout = bx.layout_of(ty);\n-            if layout.abi.is_uninhabited() {\n-                let msg_str = format!(\"Attempted to instantiate uninhabited type {}\", ty);\n-                let msg = bx.const_str(Symbol::intern(&msg_str));\n-                let location = self.get_caller_location(&mut bx, span).immediate();\n-\n-                // Obtain the panic entry point.\n-                let def_id =\n-                    common::langcall(bx.tcx(), Some(span), \"\", lang_items::PanicFnLangItem);\n-                let instance = ty::Instance::mono(bx.tcx(), def_id);\n-                let fn_abi = FnAbi::of_instance(&bx, instance, &[]);\n-                let llfn = bx.get_fn_addr(instance);\n-\n-                if let Some((_, target)) = destination.as_ref() {\n-                    helper.maybe_sideeffect(self.mir, &mut bx, &[*target]);\n-                }\n-                // Codegen the actual panic invoke/call.\n-                helper.do_call(\n-                    self,\n-                    &mut bx,\n-                    fn_abi,\n-                    llfn,\n-                    &[msg.0, msg.1, location],\n-                    destination.as_ref().map(|(_, bb)| (ReturnDest::Nothing, *bb)),\n-                    cleanup,\n-                );\n-            } else {\n-                // a NOP\n-                let target = destination.as_ref().unwrap().1;\n-                helper.maybe_sideeffect(self.mir, &mut bx, &[target]);\n-                helper.funclet_br(self, &mut bx, target)\n-            }\n+        if self.codegen_panic_intrinsic(\n+            &helper,\n+            &mut bx,\n+            intrinsic,\n+            instance,\n+            span,\n+            destination,\n+            cleanup,\n+        ) {\n             return;\n         }\n "}, {"sha": "7020939fa20b234e8318fb9ecf9ac4241be88f3f", "filename": "src/librustc_index/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibrustc_index%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibrustc_index%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Fvec.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -196,7 +196,7 @@ macro_rules! newtype_index {\n \n             #[inline]\n             fn index(self) -> usize {\n-                usize::from(self)\n+                self.as_usize()\n             }\n         }\n "}, {"sha": "966bd99787729f19112511dc9f11118508835c2c", "filename": "src/librustc_infer/infer/canonical/query_response.rs", "status": "modified", "additions": 78, "deletions": 7, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -12,14 +12,15 @@ use crate::infer::canonical::{\n     Canonical, CanonicalVarValues, CanonicalizedQueryResponse, Certainty, OriginalQueryValues,\n     QueryOutlivesConstraint, QueryRegionConstraints, QueryResponse,\n };\n+use crate::infer::nll_relate::{NormalizationStrategy, TypeRelating, TypeRelatingDelegate};\n use crate::infer::region_constraints::{Constraint, RegionConstraintData};\n-use crate::infer::InferCtxtBuilder;\n-use crate::infer::{InferCtxt, InferOk, InferResult};\n+use crate::infer::{InferCtxt, InferCtxtBuilder, InferOk, InferResult, NLLRegionVariableOrigin};\n use crate::traits::query::{Fallible, NoSolution};\n-use crate::traits::TraitEngine;\n+use crate::traits::{DomainGoal, TraitEngine};\n use crate::traits::{Obligation, ObligationCause, PredicateObligation};\n use rustc::arena::ArenaAllocatable;\n use rustc::ty::fold::TypeFoldable;\n+use rustc::ty::relate::TypeRelation;\n use rustc::ty::subst::{GenericArg, GenericArgKind};\n use rustc::ty::{self, BoundVar, Ty, TyCtxt};\n use rustc_data_structures::captures::Captures;\n@@ -304,13 +305,31 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                 }\n \n                 (GenericArgKind::Type(v1), GenericArgKind::Type(v2)) => {\n-                    let ok = self.at(cause, param_env).eq(v1, v2)?;\n-                    obligations.extend(ok.into_obligations());\n+                    TypeRelating::new(\n+                        self,\n+                        QueryTypeRelatingDelegate {\n+                            infcx: self,\n+                            param_env,\n+                            cause,\n+                            obligations: &mut obligations,\n+                        },\n+                        ty::Variance::Invariant,\n+                    )\n+                    .relate(&v1, &v2)?;\n                 }\n \n                 (GenericArgKind::Const(v1), GenericArgKind::Const(v2)) => {\n-                    let ok = self.at(cause, param_env).eq(v1, v2)?;\n-                    obligations.extend(ok.into_obligations());\n+                    TypeRelating::new(\n+                        self,\n+                        QueryTypeRelatingDelegate {\n+                            infcx: self,\n+                            param_env,\n+                            cause,\n+                            obligations: &mut obligations,\n+                        },\n+                        ty::Variance::Invariant,\n+                    )\n+                    .relate(&v1, &v2)?;\n                 }\n \n                 _ => {\n@@ -656,3 +675,55 @@ pub fn make_query_region_constraints<'tcx>(\n \n     QueryRegionConstraints { outlives, member_constraints: member_constraints.clone() }\n }\n+\n+struct QueryTypeRelatingDelegate<'a, 'tcx> {\n+    infcx: &'a InferCtxt<'a, 'tcx>,\n+    obligations: &'a mut Vec<PredicateObligation<'tcx>>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    cause: &'a ObligationCause<'tcx>,\n+}\n+\n+impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n+    fn create_next_universe(&mut self) -> ty::UniverseIndex {\n+        self.infcx.create_next_universe()\n+    }\n+\n+    fn next_existential_region_var(&mut self, from_forall: bool) -> ty::Region<'tcx> {\n+        let origin = NLLRegionVariableOrigin::Existential { from_forall };\n+        self.infcx.next_nll_region_var(origin)\n+    }\n+\n+    fn next_placeholder_region(&mut self, placeholder: ty::PlaceholderRegion) -> ty::Region<'tcx> {\n+        self.infcx.tcx.mk_region(ty::RePlaceholder(placeholder))\n+    }\n+\n+    fn generalize_existential(&mut self, universe: ty::UniverseIndex) -> ty::Region<'tcx> {\n+        self.infcx.next_nll_region_var_in_universe(\n+            NLLRegionVariableOrigin::Existential { from_forall: false },\n+            universe,\n+        )\n+    }\n+\n+    fn push_outlives(&mut self, sup: ty::Region<'tcx>, sub: ty::Region<'tcx>) {\n+        self.obligations.push(Obligation {\n+            cause: self.cause.clone(),\n+            param_env: self.param_env,\n+            predicate: ty::Predicate::RegionOutlives(ty::Binder::dummy(ty::OutlivesPredicate(\n+                sup, sub,\n+            ))),\n+            recursion_depth: 0,\n+        });\n+    }\n+\n+    fn push_domain_goal(&mut self, _: DomainGoal<'tcx>) {\n+        bug!(\"should never be invoked with eager normalization\")\n+    }\n+\n+    fn normalization() -> NormalizationStrategy {\n+        NormalizationStrategy::Eager\n+    }\n+\n+    fn forbid_inference_vars() -> bool {\n+        true\n+    }\n+}"}, {"sha": "1e5ed76c467b40af7ad08ae9e4a0b263dae96539", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -216,6 +216,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 };\n                 self.write_scalar(val, dest)?;\n             }\n+            sym::discriminant_value => {\n+                let place = self.deref_operand(args[0])?;\n+                let discr_val = self.read_discriminant(place.into())?.0;\n+                self.write_scalar(Scalar::from_uint(discr_val, dest.layout.size), dest)?;\n+            }\n             sym::unchecked_shl\n             | sym::unchecked_shr\n             | sym::unchecked_add"}, {"sha": "37ad5f5ea4e382a3ff804baf36812670ab4652ef", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -480,7 +480,11 @@ impl<'p, 'tcx> Matrix<'p, 'tcx> {\n     /// Pushes a new row to the matrix. If the row starts with an or-pattern, this expands it.\n     crate fn push(&mut self, row: PatStack<'p, 'tcx>) {\n         if let Some(rows) = row.expand_or_pat() {\n-            self.0.extend(rows);\n+            for row in rows {\n+                // We recursively expand the or-patterns of the new rows.\n+                // This is necessary as we might have `0 | (1 | 2)` or e.g., `x @ 0 | x @ (1 | 2)`.\n+                self.push(row)\n+            }\n         } else {\n             self.0.push(row);\n         }"}, {"sha": "a9c4de04c0a2e33f074199d8e563b71f83b1a14a", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -1544,9 +1544,7 @@ impl<'a> Parser<'a> {\n \n         let is_name_required = match self.token.kind {\n             token::DotDotDot => false,\n-            // FIXME: Consider using interpolated token for this edition check,\n-            // it should match the intent of edition hygiene better.\n-            _ => req_name(self.token.uninterpolate().span.edition()),\n+            _ => req_name(self.token.span.edition()),\n         };\n         let (pat, ty) = if is_name_required || self.is_named_param() {\n             debug!(\"parse_param_general parse_pat (is_name_required:{})\", is_name_required);"}, {"sha": "d8ce9bbdfb30bd4ccd44ed1c4e49ac49c4b9eaec", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -265,6 +265,7 @@ symbols! {\n         derive,\n         diagnostic,\n         direct,\n+        discriminant_value,\n         doc,\n         doc_alias,\n         doc_cfg,"}, {"sha": "2f8bbd66c322b2606b4f5fbb53fa25841f893b5e", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -937,6 +937,7 @@ impl<'a, Ty> Deref for TyLayout<'a, Ty> {\n     }\n }\n \n+/// Trait for context types that can compute layouts of things.\n pub trait LayoutOf {\n     type Ty;\n     type TyLayout;\n@@ -947,6 +948,38 @@ pub trait LayoutOf {\n     }\n }\n \n+/// The `TyLayout` above will always be a `MaybeResult<TyLayout<'_, Self>>`.\n+/// We can't add the bound due to the lifetime, but this trait is still useful when\n+/// writing code that's generic over the `LayoutOf` impl.\n+pub trait MaybeResult<T> {\n+    type Error;\n+\n+    fn from(x: Result<T, Self::Error>) -> Self;\n+    fn to_result(self) -> Result<T, Self::Error>;\n+}\n+\n+impl<T> MaybeResult<T> for T {\n+    type Error = !;\n+\n+    fn from(Ok(x): Result<T, Self::Error>) -> Self {\n+        x\n+    }\n+    fn to_result(self) -> Result<T, Self::Error> {\n+        Ok(self)\n+    }\n+}\n+\n+impl<T, E> MaybeResult<T> for Result<T, E> {\n+    type Error = E;\n+\n+    fn from(x: Result<T, Self::Error>) -> Self {\n+        x\n+    }\n+    fn to_result(self) -> Result<T, Self::Error> {\n+        self\n+    }\n+}\n+\n #[derive(Copy, Clone, PartialEq, Eq)]\n pub enum PointerKind {\n     /// Most general case, we know no restrictions to tell LLVM.\n@@ -987,13 +1020,17 @@ impl<'a, Ty> TyLayout<'a, Ty> {\n     {\n         Ty::for_variant(self, cx, variant_index)\n     }\n+\n+    /// Callers might want to use `C: LayoutOf<Ty=Ty, TyLayout: MaybeResult<Self>>`\n+    /// to allow recursion (see `might_permit_zero_init` below for an example).\n     pub fn field<C>(self, cx: &C, i: usize) -> C::TyLayout\n     where\n         Ty: TyLayoutMethods<'a, C>,\n         C: LayoutOf<Ty = Ty>,\n     {\n         Ty::field(self, cx, i)\n     }\n+\n     pub fn pointee_info_at<C>(self, cx: &C, offset: Size) -> Option<PointeeInfo>\n     where\n         Ty: TyLayoutMethods<'a, C>,\n@@ -1017,4 +1054,52 @@ impl<'a, Ty> TyLayout<'a, Ty> {\n             Abi::Aggregate { sized } => sized && self.size.bytes() == 0,\n         }\n     }\n+\n+    /// Determines if this type permits \"raw\" initialization by just transmuting some\n+    /// memory into an instance of `T`.\n+    /// `zero` indicates if the memory is zero-initialized, or alternatively\n+    /// left entirely uninitialized.\n+    /// This is conservative: in doubt, it will answer `true`.\n+    ///\n+    /// FIXME: Once we removed all the conservatism, we could alternatively\n+    /// create an all-0/all-undef constant and run the const value validator to see if\n+    /// this is a valid value for the given type.\n+    pub fn might_permit_raw_init<C, E>(self, cx: &C, zero: bool) -> Result<bool, E>\n+    where\n+        Self: Copy,\n+        Ty: TyLayoutMethods<'a, C>,\n+        C: LayoutOf<Ty = Ty, TyLayout: MaybeResult<Self, Error = E>> + HasDataLayout,\n+    {\n+        let scalar_allows_raw_init = move |s: &Scalar| -> bool {\n+            if zero {\n+                let range = &s.valid_range;\n+                // The range must contain 0.\n+                range.contains(&0) || (*range.start() > *range.end()) // wrap-around allows 0\n+            } else {\n+                // The range must include all values. `valid_range_exclusive` handles\n+                // the wrap-around using target arithmetic; with wrap-around then the full\n+                // range is one where `start == end`.\n+                let range = s.valid_range_exclusive(cx);\n+                range.start == range.end\n+            }\n+        };\n+\n+        // Check the ABI.\n+        let valid = match &self.abi {\n+            Abi::Uninhabited => false, // definitely UB\n+            Abi::Scalar(s) => scalar_allows_raw_init(s),\n+            Abi::ScalarPair(s1, s2) => scalar_allows_raw_init(s1) && scalar_allows_raw_init(s2),\n+            Abi::Vector { element: s, count } => *count == 0 || scalar_allows_raw_init(s),\n+            Abi::Aggregate { .. } => true, // Cannot be excluded *right now*.\n+        };\n+        if !valid {\n+            // This is definitely not okay.\n+            trace!(\"might_permit_raw_init({:?}, zero={}): not valid\", self.details, zero);\n+            return Ok(false);\n+        }\n+\n+        // If we have not found an error yet, we need to recursively descend.\n+        // FIXME(#66151): For now, we are conservative and do not do this.\n+        Ok(true)\n+    }\n }"}, {"sha": "3c397eb444d1d206ba680970326e3cfbf2556997", "filename": "src/librustc_target/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -10,6 +10,9 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(bool_to_option)]\n #![feature(nll)]\n+#![feature(never_type)]\n+#![feature(associated_type_bounds)]\n+#![feature(exhaustive_patterns)]\n \n #[macro_use]\n extern crate log;"}, {"sha": "859a219c95a21d151f46ee7a9a70a72c69dee168", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -18,6 +18,7 @@ use crate::type_error_struct;\n use crate::util::common::ErrorReported;\n \n use rustc::middle::lang_items;\n+use rustc::mir::interpret::ErrorHandled;\n use rustc::ty;\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::Ty;\n@@ -1039,11 +1040,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n \n         if element_ty.references_error() {\n-            tcx.types.err\n-        } else if let Ok(count) = count {\n-            tcx.mk_ty(ty::Array(t, count))\n-        } else {\n-            tcx.types.err\n+            return tcx.types.err;\n+        }\n+        match count {\n+            Ok(count) => tcx.mk_ty(ty::Array(t, count)),\n+            Err(ErrorHandled::TooGeneric) => {\n+                self.tcx.sess.span_err(\n+                    tcx.def_span(count_def_id),\n+                    \"array lengths can't depend on generic parameters\",\n+                );\n+                tcx.types.err\n+            }\n+            Err(ErrorHandled::Reported) => tcx.types.err,\n         }\n     }\n "}, {"sha": "d2a358c3e09b868d1c6f1789424f930f8f249a61", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -147,7 +147,9 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             ),\n             \"rustc_peek\" => (1, vec![param(0)], param(0)),\n             \"caller_location\" => (0, vec![], tcx.caller_location_ty()),\n-            \"panic_if_uninhabited\" => (1, Vec::new(), tcx.mk_unit()),\n+            \"panic_if_uninhabited\" | \"panic_if_zero_invalid\" | \"panic_if_any_invalid\" => {\n+                (1, Vec::new(), tcx.mk_unit())\n+            }\n             \"init\" => (1, Vec::new(), param(0)),\n             \"uninit\" => (1, Vec::new(), param(0)),\n             \"forget\" => (1, vec![param(0)], tcx.mk_unit()),"}, {"sha": "5721f5d235783d61102784888bdea8a261bc0cd2", "filename": "src/test/ui/anon-params/anon-params-denied-2018.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "previous_filename": "src/test/ui/anon-params-denied-2018.rs"}, {"sha": "e7a806a846820cd4e33ecbd7d5e32a4613778289", "filename": "src/test/ui/anon-params/anon-params-denied-2018.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.stderr?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "previous_filename": "src/test/ui/anon-params-denied-2018.stderr"}, {"sha": "fe42113eb2ee9df6af0041c1183f4846bb8e096c", "filename": "src/test/ui/anon-params/anon-params-deprecated.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.fixed?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "previous_filename": "src/test/ui/anon-params-deprecated.fixed"}, {"sha": "dc0357721ec73bf6ba559da92b3b0c7c9cea5ca8", "filename": "src/test/ui/anon-params/anon-params-deprecated.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "previous_filename": "src/test/ui/anon-params-deprecated.rs"}, {"sha": "4520559845f476b9272a9162c4de4cd2f7ad4fa8", "filename": "src/test/ui/anon-params/anon-params-deprecated.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.stderr?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "previous_filename": "src/test/ui/anon-params-deprecated.stderr"}, {"sha": "14e11c5696f4a39977f632dc9487a0005e66adb7", "filename": "src/test/ui/anon-params/anon-params-edition-hygiene.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-edition-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-edition-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-edition-hygiene.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+// edition:2018\n+// aux-build:anon-params-edition-hygiene.rs\n+\n+#[macro_use]\n+extern crate anon_params_edition_hygiene;\n+\n+generate_trait_2015!(u8);\n+\n+fn main() {}"}, {"sha": "aa4221becc24f245f127037bcf789c29db4ea441", "filename": "src/test/ui/anon-params/auxiliary/anon-params-edition-hygiene.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fanon-params%2Fauxiliary%2Fanon-params-edition-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fanon-params%2Fauxiliary%2Fanon-params-edition-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fauxiliary%2Fanon-params-edition-hygiene.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -0,0 +1,12 @@\n+// edition:2015\n+\n+#[macro_export]\n+macro_rules! generate_trait_2015 {\n+    ($Type: ident) => {\n+        trait Trait {\n+            fn method($Type) {}\n+        }\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "c5e6fe9104bc979ab5342426b2110f1a2884ed59", "filename": "src/test/ui/const-generics/issues/issue-62456.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -0,0 +1,9 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+fn foo<const N: usize>() {\n+    let _ = [0u64; N + 1];\n+    //~^ ERROR array lengths can't depend on generic parameters\n+}\n+\n+fn main() {}"}, {"sha": "9cdccf8407c9bf6fae0bb6ffc53ac1d4cc3e6f14", "filename": "src/test/ui/const-generics/issues/issue-62456.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.stderr?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -0,0 +1,16 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-62456.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: array lengths can't depend on generic parameters\n+  --> $DIR/issue-62456.rs:5:20\n+   |\n+LL |     let _ = [0u64; N + 1];\n+   |                    ^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "6484169dd9ae12e4e6ef7013741105c595770d53", "filename": "src/test/ui/consts/const-int-conversion-rpass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion-rpass.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(const_int_conversion)]\n-\n const REVERSE: u32 = 0x12345678_u32.reverse_bits();\n const FROM_BE_BYTES: i32 = i32::from_be_bytes([0x12, 0x34, 0x56, 0x78]);\n const FROM_LE_BYTES: i32 = i32::from_le_bytes([0x12, 0x34, 0x56, 0x78]);"}, {"sha": "1ad5134e71c522d2e801a7fd5aead1905ab607cb", "filename": "src/test/ui/consts/const_discriminant.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fconsts%2Fconst_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fconsts%2Fconst_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_discriminant.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -0,0 +1,40 @@\n+// run-pass\n+#![feature(const_discriminant)]\n+#![allow(dead_code)]\n+\n+use std::mem::{discriminant, Discriminant};\n+\n+// `discriminant(const_expr)` may get const-propagated.\n+// As we want to check that const-eval is equal to ordinary exection,\n+// we wrap `const_expr` with a function which is not const to prevent this.\n+#[inline(never)]\n+fn identity<T>(x: T) -> T { x }\n+\n+enum Test {\n+    A(u8),\n+    B,\n+    C { a: u8, b: u8 },\n+}\n+\n+const TEST_A: Discriminant<Test> = discriminant(&Test::A(5));\n+const TEST_A_OTHER: Discriminant<Test> = discriminant(&Test::A(17));\n+const TEST_B: Discriminant<Test> = discriminant(&Test::B);\n+\n+enum Void {}\n+\n+enum SingleVariant {\n+    V,\n+    Never(Void),\n+}\n+\n+const TEST_V: Discriminant<SingleVariant> = discriminant(&SingleVariant::V);\n+\n+fn main() {\n+    assert_eq!(TEST_A, TEST_A_OTHER);\n+    assert_eq!(TEST_A, discriminant(identity(&Test::A(17))));\n+    assert_eq!(TEST_B, discriminant(identity(&Test::B)));\n+    assert_ne!(TEST_A, TEST_B);\n+    assert_ne!(TEST_B, discriminant(identity(&Test::C { a: 42, b: 7 })));\n+\n+    assert_eq!(TEST_V, discriminant(identity(&SingleVariant::V)));\n+}"}, {"sha": "02f8ecaa4eec536ab33ba29b12bc86d914fe55f8", "filename": "src/test/ui/intrinsics/panic-uninitialized-zeroed.rs", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -0,0 +1,170 @@\n+// run-pass\n+// ignore-wasm32-bare compiled with panic=abort by default\n+\n+// This test checks panic emitted from `mem::{uninitialized,zeroed}`.\n+\n+#![feature(never_type)]\n+#![allow(deprecated, invalid_value)]\n+\n+use std::{\n+    mem::{self, MaybeUninit, ManuallyDrop},\n+    panic,\n+    ptr::NonNull,\n+    num,\n+};\n+\n+#[allow(dead_code)]\n+struct Foo {\n+    x: u8,\n+    y: !,\n+}\n+\n+enum Bar {}\n+\n+#[allow(dead_code)]\n+enum OneVariant { Variant(i32) }\n+\n+// An enum with ScalarPair layout\n+#[allow(dead_code)]\n+enum LR {\n+    Left(i64),\n+    Right(i64),\n+}\n+#[allow(dead_code, non_camel_case_types)]\n+enum LR_NonZero {\n+    Left(num::NonZeroI64),\n+    Right(num::NonZeroI64),\n+}\n+\n+fn test_panic_msg<T>(op: impl (FnOnce() -> T) + panic::UnwindSafe, msg: &str) {\n+    let err = panic::catch_unwind(op).err();\n+    assert_eq!(\n+        err.as_ref().and_then(|a| a.downcast_ref::<String>()).map(|s| &**s),\n+        Some(msg)\n+    );\n+}\n+\n+fn main() {\n+    unsafe {\n+        // Uninhabited types\n+        test_panic_msg(\n+            || mem::uninitialized::<!>(),\n+            \"attempted to instantiate uninhabited type `!`\"\n+        );\n+        test_panic_msg(\n+            || mem::zeroed::<!>(),\n+            \"attempted to instantiate uninhabited type `!`\"\n+        );\n+        test_panic_msg(\n+            || MaybeUninit::<!>::uninit().assume_init(),\n+            \"attempted to instantiate uninhabited type `!`\"\n+        );\n+\n+        test_panic_msg(\n+            || mem::uninitialized::<Foo>(),\n+            \"attempted to instantiate uninhabited type `Foo`\"\n+        );\n+        test_panic_msg(\n+            || mem::zeroed::<Foo>(),\n+            \"attempted to instantiate uninhabited type `Foo`\"\n+        );\n+        test_panic_msg(\n+            || MaybeUninit::<Foo>::uninit().assume_init(),\n+            \"attempted to instantiate uninhabited type `Foo`\"\n+        );\n+\n+        test_panic_msg(\n+            || mem::uninitialized::<Bar>(),\n+            \"attempted to instantiate uninhabited type `Bar`\"\n+        );\n+        test_panic_msg(\n+            || mem::zeroed::<Bar>(),\n+            \"attempted to instantiate uninhabited type `Bar`\"\n+        );\n+        test_panic_msg(\n+            || MaybeUninit::<Bar>::uninit().assume_init(),\n+            \"attempted to instantiate uninhabited type `Bar`\"\n+        );\n+\n+        // Types that do not like zero-initialziation\n+        test_panic_msg(\n+            || mem::uninitialized::<fn()>(),\n+            \"attempted to leave type `fn()` uninitialized, which is invalid\"\n+        );\n+        test_panic_msg(\n+            || mem::zeroed::<fn()>(),\n+            \"attempted to zero-initialize type `fn()`, which is invalid\"\n+        );\n+\n+        test_panic_msg(\n+            || mem::uninitialized::<*const dyn Send>(),\n+            \"attempted to leave type `*const dyn std::marker::Send` uninitialized, which is invalid\"\n+        );\n+        test_panic_msg(\n+            || mem::zeroed::<*const dyn Send>(),\n+            \"attempted to zero-initialize type `*const dyn std::marker::Send`, which is invalid\"\n+        );\n+\n+        /* FIXME(#66151) we conservatively do not error here yet.\n+        test_panic_msg(\n+            || mem::uninitialized::<LR_NonZero>(),\n+            \"attempted to leave type `LR_NonZero` uninitialized, which is invalid\"\n+        );\n+        test_panic_msg(\n+            || mem::zeroed::<LR_NonZero>(),\n+            \"attempted to zero-initialize type `LR_NonZero`, which is invalid\"\n+        );\n+\n+        test_panic_msg(\n+            || mem::uninitialized::<ManuallyDrop<LR_NonZero>>(),\n+            \"attempted to leave type `std::mem::ManuallyDrop<LR_NonZero>` uninitialized, \\\n+             which is invalid\"\n+        );\n+        test_panic_msg(\n+            || mem::zeroed::<ManuallyDrop<LR_NonZero>>(),\n+            \"attempted to zero-initialize type `std::mem::ManuallyDrop<LR_NonZero>`, \\\n+             which is invalid\"\n+        );\n+\n+        test_panic_msg(\n+            || mem::uninitialized::<(NonNull<u32>, u32, u32)>(),\n+            \"attempted to leave type `(std::ptr::NonNull<u32>, u32, u32)` uninitialized, \\\n+                which is invalid\"\n+        );\n+        test_panic_msg(\n+            || mem::zeroed::<(NonNull<u32>, u32, u32)>(),\n+            \"attempted to zero-initialize type `(std::ptr::NonNull<u32>, u32, u32)`, \\\n+                which is invalid\"\n+        );\n+        */\n+\n+        // Types that can be zero, but not uninit.\n+        test_panic_msg(\n+            || mem::uninitialized::<bool>(),\n+            \"attempted to leave type `bool` uninitialized, which is invalid\"\n+        );\n+        test_panic_msg(\n+            || mem::uninitialized::<LR>(),\n+            \"attempted to leave type `LR` uninitialized, which is invalid\"\n+        );\n+        test_panic_msg(\n+            || mem::uninitialized::<ManuallyDrop<LR>>(),\n+            \"attempted to leave type `std::mem::ManuallyDrop<LR>` uninitialized, which is invalid\"\n+        );\n+\n+        // Some things that should work.\n+        let _val = mem::zeroed::<bool>();\n+        let _val = mem::zeroed::<LR>();\n+        let _val = mem::zeroed::<ManuallyDrop<LR>>();\n+        let _val = mem::zeroed::<OneVariant>();\n+        let _val = mem::zeroed::<Option<&'static i32>>();\n+        let _val = mem::zeroed::<MaybeUninit<NonNull<u32>>>();\n+        let _val = mem::uninitialized::<MaybeUninit<bool>>();\n+\n+        // These are UB because they have not been officially blessed, but we await the resolution\n+        // of <https://github.com/rust-lang/unsafe-code-guidelines/issues/71> before doing\n+        // anything about that.\n+        let _val = mem::uninitialized::<i32>();\n+        let _val = mem::uninitialized::<*const ()>();\n+    }\n+}"}, {"sha": "d060f26fb2a08aaa971ad3005ba767878a2b6871", "filename": "src/test/ui/issues/issue-69602-type-err-during-codegen-ice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -19,4 +19,5 @@ impl TraitB for B { //~ ERROR not all trait items implemented, missing: `MyA`\n \n fn main() {\n     let _ = [0; B::VALUE];\n+    //~^ ERROR array lengths can't depend on generic parameters\n }"}, {"sha": "c6b2b4d27a208f72d3c8fc33d1fbfa18ead7386c", "filename": "src/test/ui/issues/issue-69602-type-err-during-codegen-ice.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.stderr?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -13,7 +13,13 @@ LL |     type MyA: TraitA;\n LL | impl TraitB for B {\n    | ^^^^^^^^^^^^^^^^^ missing `MyA` in implementation\n \n-error: aborting due to 2 previous errors\n+error: array lengths can't depend on generic parameters\n+  --> $DIR/issue-69602-type-err-during-codegen-ice.rs:21:17\n+   |\n+LL |     let _ = [0; B::VALUE];\n+   |                 ^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0046, E0437.\n For more information about an error, try `rustc --explain E0046`."}, {"sha": "e0c30160b9e94be9ff2ceb286ad6d04151e26029", "filename": "src/test/ui/never_type/panic-uninitialized-zeroed.rs", "status": "removed", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Fnever_type%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Fnever_type%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fpanic-uninitialized-zeroed.rs?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -1,102 +0,0 @@\n-// run-pass\n-// ignore-wasm32-bare compiled with panic=abort by default\n-// This test checks that instantiating an uninhabited type via `mem::{uninitialized,zeroed}` results\n-// in a runtime panic.\n-\n-#![feature(never_type)]\n-#![allow(deprecated, invalid_value)]\n-\n-use std::{mem, panic};\n-\n-#[allow(dead_code)]\n-struct Foo {\n-    x: u8,\n-    y: !,\n-}\n-\n-enum Bar {}\n-\n-fn main() {\n-    unsafe {\n-        assert_eq!(\n-            panic::catch_unwind(|| {\n-                mem::uninitialized::<!>()\n-            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type !\"\n-            })),\n-            Some(true)\n-        );\n-\n-        assert_eq!(\n-            panic::catch_unwind(|| {\n-                mem::zeroed::<!>()\n-            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type !\"\n-            })),\n-            Some(true)\n-        );\n-\n-        assert_eq!(\n-            panic::catch_unwind(|| {\n-                mem::MaybeUninit::<!>::uninit().assume_init()\n-            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type !\"\n-            })),\n-            Some(true)\n-        );\n-\n-        assert_eq!(\n-            panic::catch_unwind(|| {\n-                mem::uninitialized::<Foo>()\n-            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type Foo\"\n-            })),\n-            Some(true)\n-        );\n-\n-        assert_eq!(\n-            panic::catch_unwind(|| {\n-                mem::zeroed::<Foo>()\n-            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type Foo\"\n-            })),\n-            Some(true)\n-        );\n-\n-        assert_eq!(\n-            panic::catch_unwind(|| {\n-                mem::MaybeUninit::<Foo>::uninit().assume_init()\n-            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type Foo\"\n-            })),\n-            Some(true)\n-        );\n-\n-        assert_eq!(\n-            panic::catch_unwind(|| {\n-                mem::uninitialized::<Bar>()\n-            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type Bar\"\n-            })),\n-            Some(true)\n-        );\n-\n-        assert_eq!(\n-            panic::catch_unwind(|| {\n-                mem::zeroed::<Bar>()\n-            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type Bar\"\n-            })),\n-            Some(true)\n-        );\n-\n-        assert_eq!(\n-            panic::catch_unwind(|| {\n-                mem::MaybeUninit::<Bar>::uninit().assume_init()\n-            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type Bar\"\n-            })),\n-            Some(true)\n-        );\n-    }\n-}"}, {"sha": "1f7c060386bd0a27a1373b03d44ddd4ef24c2fdb", "filename": "src/test/ui/nll/user-annotations/type-annotation-with-hrtb.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ftype-annotation-with-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ftype-annotation-with-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ftype-annotation-with-hrtb.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -0,0 +1,33 @@\n+// Regression test for issue #69490\n+\n+// check-pass\n+\n+pub trait Trait<T> {\n+    const S: &'static str;\n+}\n+\n+impl<T> Trait<()> for T\n+where\n+    T: for<'a> Trait<&'a ()>,\n+{\n+    // Use of `T::S` here caused an ICE\n+    const S: &'static str = T::S;\n+}\n+\n+// Some similar cases that didn't ICE:\n+\n+impl<'a, T> Trait<()> for (T,)\n+where\n+    T: Trait<&'a ()>,\n+{\n+    const S: &'static str = T::S;\n+}\n+\n+impl<T> Trait<()> for [T; 1]\n+where\n+    T: Trait<for<'a> fn(&'a ())>,\n+{\n+    const S: &'static str = T::S;\n+}\n+\n+fn main() {}"}, {"sha": "59533cefea64c8caf97c259725fd31478432b3ae", "filename": "src/test/ui/or-patterns/issue-69875-should-have-been-expanded-earlier-non-exhaustive.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -0,0 +1,9 @@\n+#![feature(or_patterns)]\n+\n+fn main() {\n+    let 0 | (1 | 2) = 0; //~ ERROR refutable pattern in local binding\n+    match 0 {\n+        //~^ ERROR non-exhaustive patterns\n+        0 | (1 | 2) => {}\n+    }\n+}"}, {"sha": "58286e87869a421e8dc720781effa0aae5a644b7", "filename": "src/test/ui/or-patterns/issue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -0,0 +1,25 @@\n+error[E0005]: refutable pattern in local binding: `std::i32::MIN..=-1i32` and `3i32..=std::i32::MAX` not covered\n+  --> $DIR/issue-69875-should-have-been-expanded-earlier-non-exhaustive.rs:4:9\n+   |\n+LL |     let 0 | (1 | 2) = 0;\n+   |         ^^^^^^^^^^^ patterns `std::i32::MIN..=-1i32` and `3i32..=std::i32::MAX` not covered\n+   |\n+   = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+help: you might want to use `if let` to ignore the variant that isn't matched\n+   |\n+LL |     if let 0 | (1 | 2) = 0 { /* */ }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0004]: non-exhaustive patterns: `std::i32::MIN..=-1i32` and `3i32..=std::i32::MAX` not covered\n+  --> $DIR/issue-69875-should-have-been-expanded-earlier-non-exhaustive.rs:5:11\n+   |\n+LL |     match 0 {\n+   |           ^ patterns `std::i32::MIN..=-1i32` and `3i32..=std::i32::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0004, E0005.\n+For more information about an error, try `rustc --explain E0004`."}, {"sha": "1de563dedbf18b6c6822d72cf4b7383b9623aa60", "filename": "src/test/ui/or-patterns/issue-69875-should-have-been-expanded-earlier.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier.rs?ref=303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+#![feature(or_patterns)]\n+\n+fn main() {\n+    let 0 | (1 | _) = 0;\n+    if let 0 | (1 | 2) = 0 {}\n+    if let x @ 0 | x @ (1 | 2) = 0 {}\n+}"}]}