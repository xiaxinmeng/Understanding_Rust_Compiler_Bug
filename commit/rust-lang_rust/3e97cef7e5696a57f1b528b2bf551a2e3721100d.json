{"sha": "3e97cef7e5696a57f1b528b2bf551a2e3721100d", "node_id": "C_kwDOAAsO6NoAKDNlOTdjZWY3ZTU2OTZhNTdmMWI1MjhiMmJmNTUxYTJlMzcyMTEwMGQ", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-06-07T08:37:41Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2023-02-07T09:37:55Z"}, "message": "Set mir-opt-level = 0 on some codegen tests\n\nSince we're changing a bunch of stuff, necessary to remove some codegen tests\nwhich look for specific things. Also attempting to restart a test which timed out, maybe due to\nfastly failing?", "tree": {"sha": "4535db0d7a209a8ecb1a645a601160f38ca05624", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4535db0d7a209a8ecb1a645a601160f38ca05624"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e97cef7e5696a57f1b528b2bf551a2e3721100d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e97cef7e5696a57f1b528b2bf551a2e3721100d", "html_url": "https://github.com/rust-lang/rust/commit/3e97cef7e5696a57f1b528b2bf551a2e3721100d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e97cef7e5696a57f1b528b2bf551a2e3721100d/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7cbf2eb410915149e983b5a934567d0512e10e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7cbf2eb410915149e983b5a934567d0512e10e5", "html_url": "https://github.com/rust-lang/rust/commit/f7cbf2eb410915149e983b5a934567d0512e10e5"}], "stats": {"total": 66, "additions": 36, "deletions": 30}, "files": [{"sha": "51bf880313a63b9375da3204882b8282aeff12bc", "filename": "compiler/rustc_mir/src/transform/large_enums.rs", "status": "modified", "additions": 34, "deletions": 28, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/3e97cef7e5696a57f1b528b2bf551a2e3721100d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flarge_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e97cef7e5696a57f1b528b2bf551a2e3721100d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flarge_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flarge_enums.rs?ref=3e97cef7e5696a57f1b528b2bf551a2e3721100d", "patch": "@@ -4,7 +4,8 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, Const, Ty, TyCtxt};\n use rustc_span::def_id::DefId;\n-use rustc_target::abi::{Size, TagEncoding, Variants};\n+use rustc_target::abi::{HasDataLayout, Size, TagEncoding, Variants};\n+use std::array::IntoIter;\n \n /// A pass that seeks to optimize unnecessary moves of large enum types, if there is a large\n /// enough discrepanc between them\n@@ -21,11 +22,10 @@ impl<const D: u64> EnumSizeOpt<D> {\n         tcx: TyCtxt<'tcx>,\n         ty: Ty<'tcx>,\n         body_did: DefId,\n-    ) -> Option<(Size, u64, Vec<Size>)> {\n+    ) -> Option<(u64, Vec<Size>)> {\n         match ty.kind() {\n             ty::Adt(adt_def, _substs) if adt_def.is_enum() => {\n                 let p_e = tcx.param_env(body_did);\n-                // FIXME(jknodt) handle error better below\n                 let layout =\n                     if let Ok(layout) = tcx.layout_of(p_e.and(ty)) { layout } else { return None };\n                 let variants = &layout.variants;\n@@ -50,7 +50,7 @@ impl<const D: u64> EnumSizeOpt<D> {\n                             assert_eq!(discr_sizes[disc_idx], Size::ZERO);\n                             discr_sizes[disc_idx] = layout.size;\n                         }\n-                        Some((layout.size, variants.len() as u64, discr_sizes))\n+                        Some((variants.len() as u64, discr_sizes))\n                     }\n                 }\n             }\n@@ -73,28 +73,44 @@ impl<const D: u64> EnumSizeOpt<D> {\n                         let source_info = st.source_info;\n                         let span = source_info.span;\n \n-                        let (total_size, num_variants, sizes) =\n+                        let (num_variants, sizes) =\n                             if let Some(cand) = Self::candidate(tcx, ty, body_did) {\n                                 cand\n                             } else {\n                                 return None;\n                             };\n                         let adt_def = ty.ty_adt_def().unwrap();\n-\n                         let alloc = if let Some(alloc) = alloc_cache.get(ty) {\n                             alloc\n                         } else {\n-                            let mut data =\n-                                vec![0; std::mem::size_of::<usize>() * num_variants as usize];\n-\n+                            let data_layout = tcx.data_layout();\n+                            let ptr_sized_int = data_layout.ptr_sized_integer();\n+                            let target_bytes = ptr_sized_int.size().bytes() as usize;\n+                            let mut data = vec![0; target_bytes * num_variants as usize];\n                             let mut curr = 0;\n-                            for byte in sizes\n-                                .iter()\n-                                .flat_map(|sz| sz.bytes().to_ne_bytes())\n-                                .take(data.len())\n-                            {\n-                                data[curr] = byte;\n-                                curr += 1;\n+                            macro_rules! encode_store {\n+                                ($endian: expr, $bytes: expr) => {\n+                                    let bytes = match $endian {\n+                                        rustc_target::abi::Endian::Little => $bytes.to_le_bytes(),\n+                                        rustc_target::abi::Endian::Big => $bytes.to_be_bytes(),\n+                                    };\n+                                    for b in bytes {\n+                                        data[curr] = b;\n+                                        curr += 1;\n+                                    }\n+                                };\n+                            }\n+\n+                            for sz in sizes {\n+                                match ptr_sized_int {\n+                                    rustc_target::abi::Integer::I32 => {\n+                                        encode_store!(data_layout.endian, sz.bytes() as u32);\n+                                    }\n+                                    rustc_target::abi::Integer::I64 => {\n+                                        encode_store!(data_layout.endian, sz.bytes());\n+                                    }\n+                                    _ => unreachable!(),\n+                                };\n                             }\n                             let alloc = interpret::Allocation::from_bytes(\n                                 data,\n@@ -162,7 +178,6 @@ impl<const D: u64> EnumSizeOpt<D> {\n                             )),\n                         };\n \n-                        // FIXME(jknodt) do I need to add a storage live here for this place?\n                         let size_place =\n                             Place::from(local_decls.push(LocalDecl::new(tcx.types.usize, span)));\n \n@@ -230,24 +245,15 @@ impl<const D: u64> EnumSizeOpt<D> {\n                             kind: StatementKind::CopyNonOverlapping(box CopyNonOverlapping {\n                                 src: Operand::Copy(src_cast_place),\n                                 dst: Operand::Copy(dst_cast_place),\n-                                count: Operand::Constant(\n-                                    box (Constant {\n-                                        span,\n-                                        user_ty: None,\n-                                        literal: ConstantKind::Val(\n-                                            interpret::ConstValue::from_u64(total_size.bytes()),\n-                                            tcx.types.usize,\n-                                        ),\n-                                    }),\n-                                ),\n+                                count: Operand::Copy(size_place),\n                             }),\n                         };\n \n                         let store_dead = Statement {\n                             source_info,\n                             kind: StatementKind::StorageDead(size_array_local),\n                         };\n-                        let iter = std::array::IntoIter::new([\n+                        let iter = IntoIter::new([\n                             store_live,\n                             const_assign,\n                             store_discr,"}, {"sha": "9d75356b03dc961b6cca3e0853f455785a3e4a68", "filename": "tests/codegen/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e97cef7e5696a57f1b528b2bf551a2e3721100d/tests%2Fcodegen%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e97cef7e5696a57f1b528b2bf551a2e3721100d/tests%2Fcodegen%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fconsts.rs?ref=3e97cef7e5696a57f1b528b2bf551a2e3721100d", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Zmir-opt-level=0\n // min-llvm-version: 14.0\n \n #![crate_type = \"lib\"]"}, {"sha": "020d9234e57cc4f033b73e6bdfa387601899e628", "filename": "tests/codegen/function-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e97cef7e5696a57f1b528b2bf551a2e3721100d/tests%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e97cef7e5696a57f1b528b2bf551a2e3721100d/tests%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Ffunction-arguments.rs?ref=3e97cef7e5696a57f1b528b2bf551a2e3721100d", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -O -C no-prepopulate-passes\n+// compile-flags: -O -C no-prepopulate-passes -Zmir-opt-level=0\n \n #![crate_type = \"lib\"]\n "}]}