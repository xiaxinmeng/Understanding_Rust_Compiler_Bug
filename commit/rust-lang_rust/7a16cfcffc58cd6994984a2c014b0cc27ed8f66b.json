{"sha": "7a16cfcffc58cd6994984a2c014b0cc27ed8f66b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMTZjZmNmZmM1OGNkNjk5NDk4NGEyYzAxNGIwY2MyN2VkOGY2NmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-11T19:34:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-11T19:34:04Z"}, "message": "Auto merge of #87068 - JohnTitor:rollup-2xuisfx, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #73936 (Rustdoc: Change all 'optflag' arguments to 'optflagmulti')\n - #86926 (Update regex crates)\n - #86951 ([docs] Clarify behaviour of f64 and f32::sqrt when argument is negative zero)\n - #87031 (Update reference.md)\n - #87037 (cleanup(rustdoc): remove unused function getObjectNameById)\n - #87045 (Fix tracking issue for `bool_to_option`)\n - #87049 (Account for `submodules = false` in config.toml when updating LLVM submodule)\n - #87061 (Do not suggest adding a semicolon after `?`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "acff12d179cd4cfae3724599e623b07beed99310", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acff12d179cd4cfae3724599e623b07beed99310"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a16cfcffc58cd6994984a2c014b0cc27ed8f66b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a16cfcffc58cd6994984a2c014b0cc27ed8f66b", "html_url": "https://github.com/rust-lang/rust/commit/7a16cfcffc58cd6994984a2c014b0cc27ed8f66b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a16cfcffc58cd6994984a2c014b0cc27ed8f66b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72568552fdc34673b5ab3546843fe3bdbadb7926", "url": "https://api.github.com/repos/rust-lang/rust/commits/72568552fdc34673b5ab3546843fe3bdbadb7926", "html_url": "https://github.com/rust-lang/rust/commit/72568552fdc34673b5ab3546843fe3bdbadb7926"}, {"sha": "5fcefb1d61bd6380020a68db2b26e94192db881d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fcefb1d61bd6380020a68db2b26e94192db881d", "html_url": "https://github.com/rust-lang/rust/commit/5fcefb1d61bd6380020a68db2b26e94192db881d"}], "stats": {"total": 167, "additions": 118, "deletions": 49}, "files": [{"sha": "b432f9ae2272a8fdaa5b3a6d51518be575606b15", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a16cfcffc58cd6994984a2c014b0cc27ed8f66b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7a16cfcffc58cd6994984a2c014b0cc27ed8f66b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7a16cfcffc58cd6994984a2c014b0cc27ed8f66b", "patch": "@@ -3044,31 +3044,29 @@ dependencies = [\n \n [[package]]\n name = \"regex\"\n-version = \"1.4.3\"\n+version = \"1.4.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d9251239e129e16308e70d853559389de218ac275b515068abc96829d05b948a\"\n+checksum = \"2a26af418b574bd56588335b3a3659a65725d4e636eb1016c2f9e3b38c7cc759\"\n dependencies = [\n  \"aho-corasick\",\n  \"memchr\",\n  \"regex-syntax\",\n- \"thread_local\",\n ]\n \n [[package]]\n name = \"regex-automata\"\n-version = \"0.1.9\"\n+version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ae1ded71d66a4a97f5e961fd0cb25a5f366a42a41570d16a763a69c092c26ae4\"\n+checksum = \"6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132\"\n dependencies = [\n- \"byteorder\",\n  \"regex-syntax\",\n ]\n \n [[package]]\n name = \"regex-syntax\"\n-version = \"0.6.22\"\n+version = \"0.6.25\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b5eb417147ba9860a96cfe72a0b93bf88fee1744b5636ec99ab20c1aa9376581\"\n+checksum = \"f497285884f3fcff424ffc933e56d7cbca511def0c9831a7f9b5f6153e3cc89b\"\n \n [[package]]\n name = \"remote-test-client\""}, {"sha": "9e89804b74713bd8fdda10a1af3d4e3d2741ae95", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a16cfcffc58cd6994984a2c014b0cc27ed8f66b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a16cfcffc58cd6994984a2c014b0cc27ed8f66b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=7a16cfcffc58cd6994984a2c014b0cc27ed8f66b", "patch": "@@ -1456,11 +1456,15 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                 expected.is_unit(),\n                 pointing_at_return_type,\n             ) {\n-                // If the block is from an external macro, then do not suggest\n-                // adding a semicolon, because there's nowhere to put it.\n-                // See issue #81943.\n+                // If the block is from an external macro or try (`?`) desugaring, then\n+                // do not suggest adding a semicolon, because there's nowhere to put it.\n+                // See issues #81943 and #87051.\n                 if cond_expr.span.desugaring_kind().is_none()\n                     && !in_external_macro(fcx.tcx.sess, cond_expr.span)\n+                    && !matches!(\n+                        cond_expr.kind,\n+                        hir::ExprKind::Match(.., hir::MatchSource::TryDesugar)\n+                    )\n                 {\n                     err.span_label(cond_expr.span, \"expected this to be `()`\");\n                     if expr.can_have_side_effects() {"}, {"sha": "dcafaae2f5b493a4a858462f589cc52ade71e76b", "filename": "library/core/src/bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a16cfcffc58cd6994984a2c014b0cc27ed8f66b/library%2Fcore%2Fsrc%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a16cfcffc58cd6994984a2c014b0cc27ed8f66b/library%2Fcore%2Fsrc%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fbool.rs?ref=7a16cfcffc58cd6994984a2c014b0cc27ed8f66b", "patch": "@@ -12,7 +12,7 @@ impl bool {\n     /// assert_eq!(false.then_some(0), None);\n     /// assert_eq!(true.then_some(0), Some(0));\n     /// ```\n-    #[unstable(feature = \"bool_to_option\", issue = \"64260\")]\n+    #[unstable(feature = \"bool_to_option\", issue = \"80967\")]\n     #[inline]\n     pub fn then_some<T>(self, t: T) -> Option<T> {\n         if self { Some(t) } else { None }"}, {"sha": "e0cc6ad1d4231731b75470337b2c02260944d980", "filename": "library/std/src/f32.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a16cfcffc58cd6994984a2c014b0cc27ed8f66b/library%2Fstd%2Fsrc%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a16cfcffc58cd6994984a2c014b0cc27ed8f66b/library%2Fstd%2Fsrc%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32.rs?ref=7a16cfcffc58cd6994984a2c014b0cc27ed8f66b", "patch": "@@ -324,18 +324,20 @@ impl f32 {\n \n     /// Returns the square root of a number.\n     ///\n-    /// Returns NaN if `self` is a negative number.\n+    /// Returns NaN if `self` is a negative number other than `-0.0`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// let positive = 4.0_f32;\n     /// let negative = -4.0_f32;\n+    /// let negative_zero = -0.0_f32;\n     ///\n     /// let abs_difference = (positive.sqrt() - 2.0).abs();\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// assert!(negative.sqrt().is_nan());\n+    /// assert!(negative_zero.sqrt() == negative_zero);\n     /// ```\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "7ed65b7dafec5ccb2c8d7214bf27c37e6c87c916", "filename": "library/std/src/f64.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a16cfcffc58cd6994984a2c014b0cc27ed8f66b/library%2Fstd%2Fsrc%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a16cfcffc58cd6994984a2c014b0cc27ed8f66b/library%2Fstd%2Fsrc%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64.rs?ref=7a16cfcffc58cd6994984a2c014b0cc27ed8f66b", "patch": "@@ -324,18 +324,20 @@ impl f64 {\n \n     /// Returns the square root of a number.\n     ///\n-    /// Returns NaN if `self` is a negative number.\n+    /// Returns NaN if `self` is a negative number other than `-0.0`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// let positive = 4.0_f64;\n     /// let negative = -4.0_f64;\n+    /// let negative_zero = -0.0_f64;\n     ///\n     /// let abs_difference = (positive.sqrt() - 2.0).abs();\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// assert!(negative.sqrt().is_nan());\n+    /// assert!(negative_zero.sqrt() == negative_zero);\n     /// ```\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "0be42d9b2348623abf72d4c256df3a4966d8a4fb", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a16cfcffc58cd6994984a2c014b0cc27ed8f66b/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a16cfcffc58cd6994984a2c014b0cc27ed8f66b/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=7a16cfcffc58cd6994984a2c014b0cc27ed8f66b", "patch": "@@ -99,6 +99,10 @@ pub(crate) fn update_llvm_submodule(build: &Build) {\n         t!(std::fs::read_dir(dir)).next().is_none()\n     }\n \n+    if !build.config.submodules {\n+        return;\n+    }\n+\n     // NOTE: The check for the empty directory is here because when running x.py\n     // the first time, the llvm submodule won't be checked out. Check it out\n     // now so we can build it."}, {"sha": "5e09cdc5cf5cd1e7c4efbf283aeedaf3bcd3f108", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a16cfcffc58cd6994984a2c014b0cc27ed8f66b/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/7a16cfcffc58cd6994984a2c014b0cc27ed8f66b/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=7a16cfcffc58cd6994984a2c014b0cc27ed8f66b", "patch": "@@ -1,4 +1,4 @@\n % The Rust Reference has moved\n \n We've split up the reference into chapters. Please find it at its new\n-home [here](reference/index.html).\n+home [here](https://doc.rust-lang.org/stable/reference/introduction.html)."}, {"sha": "76e7295bce329df295ae279b0748a9f4780d9768", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7a16cfcffc58cd6994984a2c014b0cc27ed8f66b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/7a16cfcffc58cd6994984a2c014b0cc27ed8f66b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=7a16cfcffc58cd6994984a2c014b0cc27ed8f66b", "patch": "@@ -289,13 +289,6 @@ window.initSearch = function(rawSearchIndex) {\n             };\n         }\n \n-        function getObjectNameFromId(id) {\n-            if (typeof id === \"number\") {\n-                return searchIndex[id].name;\n-            }\n-            return id;\n-        }\n-\n         function checkGenerics(obj, val) {\n             // The names match, but we need to be sure that all generics kinda\n             // match as well.\n@@ -306,10 +299,10 @@ window.initSearch = function(rawSearchIndex) {\n                     var elems = Object.create(null);\n                     var elength = obj[GENERICS_DATA].length;\n                     for (var x = 0; x < elength; ++x) {\n-                        if (!elems[getObjectNameFromId(obj[GENERICS_DATA][x])]) {\n-                            elems[getObjectNameFromId(obj[GENERICS_DATA][x])] = 0;\n+                        if (!elems[obj[GENERICS_DATA][x]]) {\n+                            elems[obj[GENERICS_DATA][x]] = 0;\n                         }\n-                        elems[getObjectNameFromId(obj[GENERICS_DATA][x])] += 1;\n+                        elems[obj[GENERICS_DATA][x]] += 1;\n                     }\n                     var total = 0;\n                     var done = 0;\n@@ -318,7 +311,7 @@ window.initSearch = function(rawSearchIndex) {\n                     var vlength = val.generics.length;\n                     for (x = 0; x < vlength; ++x) {\n                         var lev = MAX_LEV_DISTANCE + 1;\n-                        var firstGeneric = getObjectNameFromId(val.generics[x]);\n+                        var firstGeneric = val.generics[x];\n                         var match = null;\n                         if (elems[firstGeneric]) {\n                             match = firstGeneric;\n@@ -361,16 +354,16 @@ window.initSearch = function(rawSearchIndex) {\n                             var elems = Object.create(null);\n                             len = obj[GENERICS_DATA].length;\n                             for (x = 0; x < len; ++x) {\n-                                if (!elems[getObjectNameFromId(obj[GENERICS_DATA][x])]) {\n-                                    elems[getObjectNameFromId(obj[GENERICS_DATA][x])] = 0;\n+                                if (!elems[obj[GENERICS_DATA][x]]) {\n+                                    elems[obj[GENERICS_DATA][x]] = 0;\n                                 }\n-                                elems[getObjectNameFromId(obj[GENERICS_DATA][x])] += 1;\n+                                elems[obj[GENERICS_DATA][x]] += 1;\n                             }\n \n                             var allFound = true;\n                             len = val.generics.length;\n                             for (x = 0; x < len; ++x) {\n-                                firstGeneric = getObjectNameFromId(val.generics[x]);\n+                                firstGeneric = val.generics[x];\n                                 if (elems[firstGeneric]) {\n                                     elems[firstGeneric] -= 1;\n                                 } else {"}, {"sha": "bc635190f4281047557df305da92ee074088509f", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7a16cfcffc58cd6994984a2c014b0cc27ed8f66b/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a16cfcffc58cd6994984a2c014b0cc27ed8f66b/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=7a16cfcffc58cd6994984a2c014b0cc27ed8f66b", "patch": "@@ -269,9 +269,9 @@ fn opts() -> Vec<RustcOptGroup> {\n     let stable: fn(_, fn(&mut getopts::Options) -> &mut _) -> _ = RustcOptGroup::stable;\n     let unstable: fn(_, fn(&mut getopts::Options) -> &mut _) -> _ = RustcOptGroup::unstable;\n     vec![\n-        stable(\"h\", |o| o.optflag(\"h\", \"help\", \"show this help message\")),\n-        stable(\"V\", |o| o.optflag(\"V\", \"version\", \"print rustdoc's version\")),\n-        stable(\"v\", |o| o.optflag(\"v\", \"verbose\", \"use verbose output\")),\n+        stable(\"h\", |o| o.optflagmulti(\"h\", \"help\", \"show this help message\")),\n+        stable(\"V\", |o| o.optflagmulti(\"V\", \"version\", \"print rustdoc's version\")),\n+        stable(\"v\", |o| o.optflagmulti(\"v\", \"verbose\", \"use verbose output\")),\n         stable(\"r\", |o| {\n             o.optopt(\"r\", \"input-format\", \"the input type of the specified file\", \"[rust]\")\n         }),\n@@ -309,14 +309,14 @@ fn opts() -> Vec<RustcOptGroup> {\n             )\n         }),\n         stable(\"plugins\", |o| o.optmulti(\"\", \"plugins\", \"removed\", \"PLUGINS\")),\n-        stable(\"no-default\", |o| o.optflag(\"\", \"no-defaults\", \"don't run the default passes\")),\n+        stable(\"no-default\", |o| o.optflagmulti(\"\", \"no-defaults\", \"don't run the default passes\")),\n         stable(\"document-private-items\", |o| {\n-            o.optflag(\"\", \"document-private-items\", \"document private items\")\n+            o.optflagmulti(\"\", \"document-private-items\", \"document private items\")\n         }),\n         unstable(\"document-hidden-items\", |o| {\n-            o.optflag(\"\", \"document-hidden-items\", \"document items that have doc(hidden)\")\n+            o.optflagmulti(\"\", \"document-hidden-items\", \"document items that have doc(hidden)\")\n         }),\n-        stable(\"test\", |o| o.optflag(\"\", \"test\", \"run code examples as tests\")),\n+        stable(\"test\", |o| o.optflagmulti(\"\", \"test\", \"run code examples as tests\")),\n         stable(\"test-args\", |o| {\n             o.optmulti(\"\", \"test-args\", \"arguments to pass to the test runner\", \"ARGS\")\n         }),\n@@ -386,7 +386,7 @@ fn opts() -> Vec<RustcOptGroup> {\n             o.optopt(\"\", \"markdown-playground-url\", \"URL to send code snippets to\", \"URL\")\n         }),\n         stable(\"markdown-no-toc\", |o| {\n-            o.optflag(\"\", \"markdown-no-toc\", \"don't include table of contents\")\n+            o.optflagmulti(\"\", \"markdown-no-toc\", \"don't include table of contents\")\n         }),\n         stable(\"e\", |o| {\n             o.optopt(\n@@ -412,13 +412,13 @@ fn opts() -> Vec<RustcOptGroup> {\n             )\n         }),\n         unstable(\"display-warnings\", |o| {\n-            o.optflag(\"\", \"display-warnings\", \"to print code warnings when testing doc\")\n+            o.optflagmulti(\"\", \"display-warnings\", \"to print code warnings when testing doc\")\n         }),\n         stable(\"crate-version\", |o| {\n             o.optopt(\"\", \"crate-version\", \"crate version to print into documentation\", \"VERSION\")\n         }),\n         unstable(\"sort-modules-by-appearance\", |o| {\n-            o.optflag(\n+            o.optflagmulti(\n                 \"\",\n                 \"sort-modules-by-appearance\",\n                 \"sort modules by where they appear in the program, rather than alphabetically\",\n@@ -495,7 +495,7 @@ fn opts() -> Vec<RustcOptGroup> {\n             o.optopt(\"\", \"json\", \"Configure the structure of JSON diagnostics\", \"CONFIG\")\n         }),\n         unstable(\"disable-minification\", |o| {\n-            o.optflag(\"\", \"disable-minification\", \"Disable minification applied on JS files\")\n+            o.optflagmulti(\"\", \"disable-minification\", \"Disable minification applied on JS files\")\n         }),\n         stable(\"warn\", |o| o.optmulti(\"W\", \"warn\", \"Set lint warnings\", \"OPT\")),\n         stable(\"allow\", |o| o.optmulti(\"A\", \"allow\", \"Set lint allowed\", \"OPT\")),\n@@ -523,7 +523,7 @@ fn opts() -> Vec<RustcOptGroup> {\n             o.optopt(\"\", \"index-page\", \"Markdown file to be used as index page\", \"PATH\")\n         }),\n         unstable(\"enable-index-page\", |o| {\n-            o.optflag(\"\", \"enable-index-page\", \"To enable generation of the index page\")\n+            o.optflagmulti(\"\", \"enable-index-page\", \"To enable generation of the index page\")\n         }),\n         unstable(\"static-root-path\", |o| {\n             o.optopt(\n@@ -535,7 +535,7 @@ fn opts() -> Vec<RustcOptGroup> {\n             )\n         }),\n         unstable(\"disable-per-crate-search\", |o| {\n-            o.optflag(\n+            o.optflagmulti(\n                 \"\",\n                 \"disable-per-crate-search\",\n                 \"disables generating the crate selector on the search box\",\n@@ -550,14 +550,14 @@ fn opts() -> Vec<RustcOptGroup> {\n             )\n         }),\n         unstable(\"show-coverage\", |o| {\n-            o.optflag(\n+            o.optflagmulti(\n                 \"\",\n                 \"show-coverage\",\n                 \"calculate percentage of public items with documentation\",\n             )\n         }),\n         unstable(\"enable-per-target-ignores\", |o| {\n-            o.optflag(\n+            o.optflagmulti(\n                 \"\",\n                 \"enable-per-target-ignores\",\n                 \"parse ignore-foo for ignoring doctests on a per-target basis\",\n@@ -582,9 +582,9 @@ fn opts() -> Vec<RustcOptGroup> {\n         unstable(\"test-builder\", |o| {\n             o.optopt(\"\", \"test-builder\", \"The rustc-like binary to use as the test builder\", \"PATH\")\n         }),\n-        unstable(\"check\", |o| o.optflag(\"\", \"check\", \"Run rustdoc checks\")),\n+        unstable(\"check\", |o| o.optflagmulti(\"\", \"check\", \"Run rustdoc checks\")),\n         unstable(\"generate-redirect-map\", |o| {\n-            o.optflag(\n+            o.optflagmulti(\n                 \"\",\n                 \"generate-redirect-map\",\n                 \"Generate JSON file at the top level instead of generating HTML redirection files\",\n@@ -598,9 +598,11 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"[unversioned-shared-resources,toolchain-shared-resources,invocation-specific]\",\n             )\n         }),\n-        unstable(\"no-run\", |o| o.optflag(\"\", \"no-run\", \"Compile doctests without running them\")),\n+        unstable(\"no-run\", |o| {\n+            o.optflagmulti(\"\", \"no-run\", \"Compile doctests without running them\")\n+        }),\n         unstable(\"show-type-layout\", |o| {\n-            o.optflag(\"\", \"show-type-layout\", \"Include the memory layout of types in the docs\")\n+            o.optflagmulti(\"\", \"show-type-layout\", \"Include the memory layout of types in the docs\")\n         }),\n     ]\n }"}, {"sha": "dde36df2cf50eb7fe5ff19dc460eee08f3e72581", "filename": "src/test/rustdoc/duplicate-flags.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a16cfcffc58cd6994984a2c014b0cc27ed8f66b/src%2Ftest%2Frustdoc%2Fduplicate-flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a16cfcffc58cd6994984a2c014b0cc27ed8f66b/src%2Ftest%2Frustdoc%2Fduplicate-flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fduplicate-flags.rs?ref=7a16cfcffc58cd6994984a2c014b0cc27ed8f66b", "patch": "@@ -0,0 +1,4 @@\n+// compile-flags: --document-private-items --document-private-items\n+\n+// @has duplicate_flags/struct.Private.html\n+struct Private;"}, {"sha": "f882a159f98340f2c6e9159a77d299d36ba7132d", "filename": "src/test/ui/suggestions/try-operator-dont-suggest-semicolon.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7a16cfcffc58cd6994984a2c014b0cc27ed8f66b/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-dont-suggest-semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a16cfcffc58cd6994984a2c014b0cc27ed8f66b/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-dont-suggest-semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-dont-suggest-semicolon.rs?ref=7a16cfcffc58cd6994984a2c014b0cc27ed8f66b", "patch": "@@ -0,0 +1,27 @@\n+// Regression test for #87051, where a double semicolon was erroneously\n+// suggested after a `?` operator.\n+\n+fn main() -> Result<(), ()> {\n+    a(|| {\n+        b()\n+        //~^ ERROR: mismatched types [E0308]\n+        //~| NOTE: expected `()`, found `i32`\n+        //~| HELP: consider using a semicolon here\n+    })?;\n+\n+    // Here, we do want to suggest a semicolon:\n+    let x = Ok(42);\n+    if true {\n+    //~^ NOTE: expected this to be `()`\n+        x?\n+        //~^ ERROR: mismatched types [E0308]\n+        //~| NOTE: expected `()`, found integer\n+        //~| HELP: consider using a semicolon here\n+    }\n+    //~^ HELP: consider using a semicolon here\n+\n+    Ok(())\n+}\n+\n+fn a<F>(f: F) -> Result<(), ()> where F: FnMut() { Ok(()) }\n+fn b() -> i32 { 42 }"}, {"sha": "4f7e18742e22e84ea67a1202c88066536bc51ea8", "filename": "src/test/ui/suggestions/try-operator-dont-suggest-semicolon.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7a16cfcffc58cd6994984a2c014b0cc27ed8f66b/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-dont-suggest-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a16cfcffc58cd6994984a2c014b0cc27ed8f66b/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-dont-suggest-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-dont-suggest-semicolon.stderr?ref=7a16cfcffc58cd6994984a2c014b0cc27ed8f66b", "patch": "@@ -0,0 +1,33 @@\n+error[E0308]: mismatched types\n+  --> $DIR/try-operator-dont-suggest-semicolon.rs:6:9\n+   |\n+LL |         b()\n+   |         ^^^- help: consider using a semicolon here: `;`\n+   |         |\n+   |         expected `()`, found `i32`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/try-operator-dont-suggest-semicolon.rs:16:9\n+   |\n+LL | /     if true {\n+LL | |\n+LL | |         x?\n+   | |         ^^ expected `()`, found integer\n+LL | |\n+LL | |\n+LL | |\n+LL | |     }\n+   | |_____- expected this to be `()`\n+   |\n+help: consider using a semicolon here\n+   |\n+LL |         x?;\n+   |           ^\n+help: consider using a semicolon here\n+   |\n+LL |     };\n+   |      ^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}