{"sha": "17a2832ba0b2596db7b23d55f68b581eb7e80254", "node_id": "C_kwDOAAsO6NoAKDE3YTI4MzJiYTBiMjU5NmRiN2IyM2Q1NWY2OGI1ODFlYjdlODAyNTQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-20T10:47:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-20T10:47:23Z"}, "message": "Rollup merge of #99486 - TaKO8Ki:remove-type-string-comparison-in-check-str-addition, r=compiler-errors\n\nRefactor: remove a string comparison between types in `check_str_addition`\n\nThis patch removes remove a string of types comparison.", "tree": {"sha": "d048ac8eac17d0e0df23a51f08f7052fa26ded1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d048ac8eac17d0e0df23a51f08f7052fa26ded1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17a2832ba0b2596db7b23d55f68b581eb7e80254", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi1907CRBK7hj4Ov3rIwAAj0oIAHeGFRLJ9rJWVNlkTWL55sHz\nCe6/fVDbP2Cawiudy/xdfw6KshOnR5a89LjKllFgqXPlRUR+xJbfOv7T9he2WjNH\nrDX7nVk2seisDcHW/pbOtTKWVM4jIDxme+55DfEbNLJ7djl3gh/xAENNoTCXCkVI\nNGFBcqpAsSGpg9NMUrgXC5DZZt6rX7vVrcOzsSdb2wB9UNPPZoM9kgWTzPfnl26e\nVhRA6iAThiqrSj+/sMM7+WrsxCl58HsiNPLQhn4NRIDYqZdjLskkuWKHrOKqDiBt\nILiP5Y3gggkv4//zTdBkqAe7bXSAxcvHjv4et90NNxk27RnwhaiUFlWRRkpFEgM=\n=9izS\n-----END PGP SIGNATURE-----\n", "payload": "tree d048ac8eac17d0e0df23a51f08f7052fa26ded1e\nparent 3257c3401d68057e83089f3b8da27f7ecc21e228\nparent 35118568a6a9d81c0ce0ad1c9f579b7da1f6022d\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1658314043 +0530\ncommitter GitHub <noreply@github.com> 1658314043 +0530\n\nRollup merge of #99486 - TaKO8Ki:remove-type-string-comparison-in-check-str-addition, r=compiler-errors\n\nRefactor: remove a string comparison between types in `check_str_addition`\n\nThis patch removes remove a string of types comparison.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17a2832ba0b2596db7b23d55f68b581eb7e80254", "html_url": "https://github.com/rust-lang/rust/commit/17a2832ba0b2596db7b23d55f68b581eb7e80254", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17a2832ba0b2596db7b23d55f68b581eb7e80254/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3257c3401d68057e83089f3b8da27f7ecc21e228", "url": "https://api.github.com/repos/rust-lang/rust/commits/3257c3401d68057e83089f3b8da27f7ecc21e228", "html_url": "https://github.com/rust-lang/rust/commit/3257c3401d68057e83089f3b8da27f7ecc21e228"}, {"sha": "35118568a6a9d81c0ce0ad1c9f579b7da1f6022d", "url": "https://api.github.com/repos/rust-lang/rust/commits/35118568a6a9d81c0ce0ad1c9f579b7da1f6022d", "html_url": "https://github.com/rust-lang/rust/commit/35118568a6a9d81c0ce0ad1c9f579b7da1f6022d"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "9858cd8fa1970c5a5128c0981799a74e884c5448", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/17a2832ba0b2596db7b23d55f68b581eb7e80254/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a2832ba0b2596db7b23d55f68b581eb7e80254/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=17a2832ba0b2596db7b23d55f68b581eb7e80254", "patch": "@@ -630,18 +630,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let rm_borrow_msg = \"remove the borrow to obtain an owned `String`\";\n         let to_owned_msg = \"create an owned `String` from a string reference\";\n \n-        let string_type = self.tcx.get_diagnostic_item(sym::String);\n-        let is_std_string = |ty: Ty<'tcx>| match ty.ty_adt_def() {\n-            Some(ty_def) => Some(ty_def.did()) == string_type,\n-            None => false,\n+        let is_std_string = |ty: Ty<'tcx>| {\n+            ty.ty_adt_def()\n+                .map_or(false, |ty_def| self.tcx.is_diagnostic_item(sym::String, ty_def.did()))\n         };\n \n         match (lhs_ty.kind(), rhs_ty.kind()) {\n             (&Ref(_, l_ty, _), &Ref(_, r_ty, _)) // &str or &String + &str, &String or &&str\n-                if (*l_ty.kind() == Str || is_std_string(l_ty)) && (\n-                        *r_ty.kind() == Str || is_std_string(r_ty) ||\n-                        &format!(\"{:?}\", rhs_ty) == \"&&str\"\n-                    ) =>\n+                if (*l_ty.kind() == Str || is_std_string(l_ty))\n+                    && (*r_ty.kind() == Str\n+                        || is_std_string(r_ty)\n+                        || matches!(\n+                            r_ty.kind(), Ref(_, inner_ty, _) if *inner_ty.kind() == Str\n+                        )) =>\n             {\n                 if let IsAssign::No = is_assign { // Do not supply this message if `&str += &str`\n                     err.span_label(op.span, \"`+` cannot be used to concatenate two `&str` strings\");"}]}