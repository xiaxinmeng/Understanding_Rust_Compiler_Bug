{"sha": "684df4d24ec605a07f1a5789c1d0027d4887103c", "node_id": "C_kwDOAAsO6NoAKDY4NGRmNGQyNGVjNjA1YTA3ZjFhNTc4OWMxZDAwMjdkNDg4NzEwM2M", "commit": {"author": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "liehr.exchange@gmx.net", "date": "2022-10-17T10:04:16Z"}, "committer": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "liehr.exchange@gmx.net", "date": "2022-10-17T10:08:46Z"}, "message": "Make diagnostic for unsatisfied Termination bounds more precise", "tree": {"sha": "ff734bbb86f614c3d0ed3b6ec565a4014d5177b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff734bbb86f614c3d0ed3b6ec565a4014d5177b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/684df4d24ec605a07f1a5789c1d0027d4887103c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE/neO4LLiv/pSFQJbzXXjHOLP19kFAmNNKbAACgkQzXXjHOLP\n19nrcA/+NNoCbkjw09/MDjPEu1ltIdOGaNHUGaZnpNH03coZ1dFQN7oCABxspqMn\ncAuv8kEZzlOayPYAz6FsIPQZHp5Mt/W9Kp1RO7tvi51zKGqt9GyYZSAKz+4uZ3EF\nBNtYl505lxt+lWk4id58954EaRAo1+xxyJw+XJyCZc1xukMjIe8wEvKBrQbs/PSO\nLpA7jO4IpId0h9uu1tEwdEnFqmpwJInaePxWaalnStiVmHZ1sO5pVoiT6sZkQACd\ncv/ORW8AoaotfTGPczWNe2G6ODRsnHF/sWQOno/jTnK1+l2K8boeolYVxuCtQzLW\nRvwSHtX3eBTaglwymzwfApomZtPnQbsSA5H4vVbJb4n/i0dnOebsDlJL6QZfm3pL\nqokTWawUjnGFikCQNj2m6SPc1ZQ0Uvf1LEGiA7H96uFNo6FugFt8TSGUToHpeLWj\nln5BndOaEc1i2uxgU4PxdDghGBveg241B0wmZeFHfOcO3w5mQ1P71zntySjJrujb\n+GcVKbpf17ien9N6e8fz1EcEs4OzPsO4YC8SqnvCcJC81U5pitA+1KcQ/RKAVr4C\nU7/eQIFnavniORfDJ66Opnj6ptZtWfsTFbiF0uZoEi7rOp2tLiX4yEC6TogBxVXy\n9BsYapTxxG1RX2G3Gg+5Ty1Eq2NNPPXbobkSd2TB+J4da9GLsZY=\n=9CbZ\n-----END PGP SIGNATURE-----", "payload": "tree ff734bbb86f614c3d0ed3b6ec565a4014d5177b5\nparent bf286a82e236e065c67909657e3a35d1511d1864\nauthor Le\u00f3n Orell Valerian Liehr <liehr.exchange@gmx.net> 1666001056 +0200\ncommitter Le\u00f3n Orell Valerian Liehr <liehr.exchange@gmx.net> 1666001326 +0200\n\nMake diagnostic for unsatisfied Termination bounds more precise\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/684df4d24ec605a07f1a5789c1d0027d4887103c", "html_url": "https://github.com/rust-lang/rust/commit/684df4d24ec605a07f1a5789c1d0027d4887103c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/684df4d24ec605a07f1a5789c1d0027d4887103c/comments", "author": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf286a82e236e065c67909657e3a35d1511d1864", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf286a82e236e065c67909657e3a35d1511d1864", "html_url": "https://github.com/rust-lang/rust/commit/bf286a82e236e065c67909657e3a35d1511d1864"}], "stats": {"total": 83, "additions": 78, "deletions": 5}, "files": [{"sha": "3fe79370c374d378929d12cabec1a847c675af86", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/684df4d24ec605a07f1a5789c1d0027d4887103c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684df4d24ec605a07f1a5789c1d0027d4887103c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=684df4d24ec605a07f1a5789c1d0027d4887103c", "patch": "@@ -451,6 +451,7 @@ symbols! {\n         call_once,\n         caller_location,\n         capture_disjoint_fields,\n+        cause,\n         cdylib,\n         ceilf32,\n         ceilf64,"}, {"sha": "5eef54c6330db122111ce99744231c0057f3c883", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/684df4d24ec605a07f1a5789c1d0027d4887103c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684df4d24ec605a07f1a5789c1d0027d4887103c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=684df4d24ec605a07f1a5789c1d0027d4887103c", "patch": "@@ -164,6 +164,10 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             flags.push((sym::from_desugaring, Some(format!(\"{:?}\", k))));\n         }\n \n+        if let ObligationCauseCode::MainFunctionType = obligation.cause.code() {\n+            flags.push((sym::cause, Some(\"MainFunctionType\".to_string())));\n+        }\n+\n         // Add all types without trimmed paths.\n         ty::print::with_no_trimmed_paths!({\n             let generics = self.tcx.generics_of(def_id);"}, {"sha": "400d25beb26f3d521387b5933e8a30ab6d1507b2", "filename": "library/std/src/process.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/684df4d24ec605a07f1a5789c1d0027d4887103c/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684df4d24ec605a07f1a5789c1d0027d4887103c/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=684df4d24ec605a07f1a5789c1d0027d4887103c", "patch": "@@ -2154,8 +2154,16 @@ pub fn id() -> u32 {\n #[cfg_attr(not(test), lang = \"termination\")]\n #[stable(feature = \"termination_trait_lib\", since = \"1.61.0\")]\n #[rustc_on_unimplemented(\n-    message = \"`main` has invalid return type `{Self}`\",\n-    label = \"`main` can only return types that implement `{Termination}`\"\n+    on(\n+        all(not(bootstrap), cause = \"MainFunctionType\"),\n+        message = \"`main` has invalid return type `{Self}`\",\n+        label = \"`main` can only return types that implement `{Termination}`\"\n+    ),\n+    on(\n+        bootstrap,\n+        message = \"`main` has invalid return type `{Self}`\",\n+        label = \"`main` can only return types that implement `{Termination}`\"\n+    )\n )]\n pub trait Termination {\n     /// Is called to get the representation of the value as status code."}, {"sha": "a75c91cc90df7355ff06cd92cc0e46f1b6f0e558", "filename": "src/test/ui/rfc-1937-termination-trait/issue-103052-1.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/684df4d24ec605a07f1a5789c1d0027d4887103c/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684df4d24ec605a07f1a5789c1d0027d4887103c/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-1.rs?ref=684df4d24ec605a07f1a5789c1d0027d4887103c", "patch": "@@ -0,0 +1,11 @@\n+// Check that we don't blindly emit a diagnostic claiming that \"`main` has an invalid return type\"\n+// if we encounter a type that doesn't implement `std::process::Termination` and is not actually\n+// the return type of the program entry `main`.\n+\n+fn receive(_: impl std::process::Termination) {}\n+\n+struct Something;\n+\n+fn main() {\n+    receive(Something); //~ ERROR the trait bound `Something: Termination` is not satisfied\n+}"}, {"sha": "409dede1a90ac2ea77c2e54b9aa8501f61ab5279", "filename": "src/test/ui/rfc-1937-termination-trait/issue-103052-1.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/684df4d24ec605a07f1a5789c1d0027d4887103c/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/684df4d24ec605a07f1a5789c1d0027d4887103c/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-1.stderr?ref=684df4d24ec605a07f1a5789c1d0027d4887103c", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the trait bound `Something: Termination` is not satisfied\n+  --> $DIR/issue-103052-1.rs:10:13\n+   |\n+LL |     receive(Something);\n+   |     ------- ^^^^^^^^^ the trait `Termination` is not implemented for `Something`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `receive`\n+  --> $DIR/issue-103052-1.rs:5:20\n+   |\n+LL | fn receive(_: impl std::process::Termination) {}\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `receive`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "fa9182b6deeb770a5936e196d621fbe4e9f2aec6", "filename": "src/test/ui/rfc-1937-termination-trait/issue-103052-2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/684df4d24ec605a07f1a5789c1d0027d4887103c/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684df4d24ec605a07f1a5789c1d0027d4887103c/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-2.rs?ref=684df4d24ec605a07f1a5789c1d0027d4887103c", "patch": "@@ -0,0 +1,18 @@\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+mod child {\n+    trait Main {\n+        fn main() -> impl std::process::Termination;\n+    }\n+\n+    struct Something;\n+\n+    impl Main for () {\n+        fn main() -> Something { //~ ERROR the trait bound `Something: Termination` is not satisfied\n+            Something\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a700c72ea689f5133de30160fed3906670f0006b", "filename": "src/test/ui/rfc-1937-termination-trait/issue-103052-2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/684df4d24ec605a07f1a5789c1d0027d4887103c/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/684df4d24ec605a07f1a5789c1d0027d4887103c/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-2.stderr?ref=684df4d24ec605a07f1a5789c1d0027d4887103c", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the trait bound `Something: Termination` is not satisfied\n+  --> $DIR/issue-103052-2.rs:12:22\n+   |\n+LL |         fn main() -> Something {\n+   |                      ^^^^^^^^^ the trait `Termination` is not implemented for `Something`\n+   |\n+note: required by a bound in `Main::main::{opaque#0}`\n+  --> $DIR/issue-103052-2.rs:6:27\n+   |\n+LL |         fn main() -> impl std::process::Termination;\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Main::main::{opaque#0}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "6ee32314607ad899ec4415f770aa967e6897b504", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/684df4d24ec605a07f1a5789c1d0027d4887103c/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/684df4d24ec605a07f1a5789c1d0027d4887103c/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr?ref=684df4d24ec605a07f1a5789c1d0027d4887103c", "patch": "@@ -1,14 +1,13 @@\n-error[E0277]: `main` has invalid return type `f32`\n+error[E0277]: the trait bound `f32: Termination` is not satisfied\n   --> $DIR/termination-trait-test-wrong-type.rs:6:1\n    |\n LL |   #[test]\n    |   ------- in this procedural macro expansion\n LL | / fn can_parse_zero_as_f32() -> Result<f32, ParseFloatError> {\n LL | |     \"0\".parse()\n LL | | }\n-   | |_^ `main` can only return types that implement `Termination`\n+   | |_^ the trait `Termination` is not implemented for `f32`\n    |\n-   = help: the trait `Termination` is not implemented for `f32`\n    = note: required for `Result<f32, ParseFloatError>` to implement `Termination`\n note: required by a bound in `assert_test_result`\n   --> $SRC_DIR/test/src/lib.rs:LL:COL"}]}