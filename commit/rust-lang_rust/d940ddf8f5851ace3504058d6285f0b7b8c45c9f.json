{"sha": "d940ddf8f5851ace3504058d6285f0b7b8c45c9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NDBkZGY4ZjU4NTFhY2UzNTA0MDU4ZDYyODVmMGI3YjhjNDVjOWY=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-07-11T22:27:56Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-08-12T22:03:44Z"}, "message": "Reduce genericity in Copied and Cloned", "tree": {"sha": "7cb2d88f79334a7b04055e66349ef8feefb89831", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cb2d88f79334a7b04055e66349ef8feefb89831"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d940ddf8f5851ace3504058d6285f0b7b8c45c9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d940ddf8f5851ace3504058d6285f0b7b8c45c9f", "html_url": "https://github.com/rust-lang/rust/commit/d940ddf8f5851ace3504058d6285f0b7b8c45c9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d940ddf8f5851ace3504058d6285f0b7b8c45c9f/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27ddbf4d168875605295c8bdc145c5026188de27", "url": "https://api.github.com/repos/rust-lang/rust/commits/27ddbf4d168875605295c8bdc145c5026188de27", "html_url": "https://github.com/rust-lang/rust/commit/27ddbf4d168875605295c8bdc145c5026188de27"}], "stats": {"total": 50, "additions": 34, "deletions": 16}, "files": [{"sha": "4e54cb2bf31a5de0fee50c58b734e53a445a8956", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d940ddf8f5851ace3504058d6285f0b7b8c45c9f/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d940ddf8f5851ace3504058d6285f0b7b8c45c9f/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=d940ddf8f5851ace3504058d6285f0b7b8c45c9f", "patch": "@@ -143,6 +143,18 @@ impl<I> Copied<I> {\n     }\n }\n \n+fn copy_fold<T: Copy, Acc>(\n+    mut f: impl FnMut(Acc, T) -> Acc,\n+) -> impl FnMut(Acc, &T) -> Acc {\n+    move |acc, &elt| f(acc, elt)\n+}\n+\n+fn copy_try_fold<T: Copy, Acc, R>(\n+    mut f: impl FnMut(Acc, T) -> R,\n+) -> impl FnMut(Acc, &T) -> R {\n+    move |acc, &elt| f(acc, elt)\n+}\n+\n #[stable(feature = \"iter_copied\", since = \"1.36.0\")]\n impl<'a, I, T: 'a> Iterator for Copied<I>\n     where I: Iterator<Item=&'a T>, T: Copy\n@@ -157,16 +169,16 @@ impl<'a, I, T: 'a> Iterator for Copied<I>\n         self.it.size_hint()\n     }\n \n-    fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R where\n+    fn try_fold<B, F, R>(&mut self, init: B, f: F) -> R where\n         Self: Sized, F: FnMut(B, Self::Item) -> R, R: Try<Ok=B>\n     {\n-        self.it.try_fold(init, move |acc, &elt| f(acc, elt))\n+        self.it.try_fold(init, copy_try_fold(f))\n     }\n \n-    fn fold<Acc, F>(self, init: Acc, mut f: F) -> Acc\n+    fn fold<Acc, F>(self, init: Acc, f: F) -> Acc\n         where F: FnMut(Acc, Self::Item) -> Acc,\n     {\n-        self.it.fold(init, move |acc, &elt| f(acc, elt))\n+        self.it.fold(init, copy_fold(f))\n     }\n }\n \n@@ -178,16 +190,16 @@ impl<'a, I, T: 'a> DoubleEndedIterator for Copied<I>\n         self.it.next_back().copied()\n     }\n \n-    fn try_rfold<B, F, R>(&mut self, init: B, mut f: F) -> R where\n+    fn try_rfold<B, F, R>(&mut self, init: B, f: F) -> R where\n         Self: Sized, F: FnMut(B, Self::Item) -> R, R: Try<Ok=B>\n     {\n-        self.it.try_rfold(init, move |acc, &elt| f(acc, elt))\n+        self.it.try_rfold(init, copy_try_fold(f))\n     }\n \n-    fn rfold<Acc, F>(self, init: Acc, mut f: F) -> Acc\n+    fn rfold<Acc, F>(self, init: Acc, f: F) -> Acc\n         where F: FnMut(Acc, Self::Item) -> Acc,\n     {\n-        self.it.rfold(init, move |acc, &elt| f(acc, elt))\n+        self.it.rfold(init, copy_fold(f))\n     }\n }\n \n@@ -248,6 +260,12 @@ impl<I> Cloned<I> {\n     }\n }\n \n+fn clone_try_fold<T: Clone, Acc, R>(\n+    mut f: impl FnMut(Acc, T) -> R,\n+) -> impl FnMut(Acc, &T) -> R {\n+    move |acc, elt| f(acc, elt.clone())\n+}\n+\n #[stable(feature = \"iter_cloned\", since = \"1.1.0\")]\n impl<'a, I, T: 'a> Iterator for Cloned<I>\n     where I: Iterator<Item=&'a T>, T: Clone\n@@ -262,16 +280,16 @@ impl<'a, I, T: 'a> Iterator for Cloned<I>\n         self.it.size_hint()\n     }\n \n-    fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R where\n+    fn try_fold<B, F, R>(&mut self, init: B, f: F) -> R where\n         Self: Sized, F: FnMut(B, Self::Item) -> R, R: Try<Ok=B>\n     {\n-        self.it.try_fold(init, move |acc, elt| f(acc, elt.clone()))\n+        self.it.try_fold(init, clone_try_fold(f))\n     }\n \n-    fn fold<Acc, F>(self, init: Acc, mut f: F) -> Acc\n+    fn fold<Acc, F>(self, init: Acc, f: F) -> Acc\n         where F: FnMut(Acc, Self::Item) -> Acc,\n     {\n-        self.it.fold(init, move |acc, elt| f(acc, elt.clone()))\n+        self.it.map(T::clone).fold(init, f)\n     }\n }\n \n@@ -283,16 +301,16 @@ impl<'a, I, T: 'a> DoubleEndedIterator for Cloned<I>\n         self.it.next_back().cloned()\n     }\n \n-    fn try_rfold<B, F, R>(&mut self, init: B, mut f: F) -> R where\n+    fn try_rfold<B, F, R>(&mut self, init: B, f: F) -> R where\n         Self: Sized, F: FnMut(B, Self::Item) -> R, R: Try<Ok=B>\n     {\n-        self.it.try_rfold(init, move |acc, elt| f(acc, elt.clone()))\n+        self.it.try_rfold(init, clone_try_fold(f))\n     }\n \n-    fn rfold<Acc, F>(self, init: Acc, mut f: F) -> Acc\n+    fn rfold<Acc, F>(self, init: Acc, f: F) -> Acc\n         where F: FnMut(Acc, Self::Item) -> Acc,\n     {\n-        self.it.rfold(init, move |acc, elt| f(acc, elt.clone()))\n+        self.it.map(T::clone).rfold(init, f)\n     }\n }\n "}]}