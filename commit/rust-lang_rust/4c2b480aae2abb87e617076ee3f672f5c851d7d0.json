{"sha": "4c2b480aae2abb87e617076ee3f672f5c851d7d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMmI0ODBhYWUyYWJiODdlNjE3MDc2ZWUzZjY3MmY1Yzg1MWQ3ZDA=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-09-08T00:52:19Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-09-08T00:52:19Z"}, "message": "std: Rename Unfoldr to Unfold.\n\nThe `r` is not relevant, since there is only one direction of folding\n(unlike Haskell).", "tree": {"sha": "e56f60b1fa35b3f157b21a1879dbb03080d8f4e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e56f60b1fa35b3f157b21a1879dbb03080d8f4e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c2b480aae2abb87e617076ee3f672f5c851d7d0", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c2b480aae2abb87e617076ee3f672f5c851d7d0", "html_url": "https://github.com/rust-lang/rust/commit/4c2b480aae2abb87e617076ee3f672f5c851d7d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c2b480aae2abb87e617076ee3f672f5c851d7d0/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3d50fc2c015cc8a335855b82ab458a15a7413d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3d50fc2c015cc8a335855b82ab458a15a7413d9", "html_url": "https://github.com/rust-lang/rust/commit/b3d50fc2c015cc8a335855b82ab458a15a7413d9"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "77637b6998e4aa48c79222ab1c7e1ed9a6057833", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c2b480aae2abb87e617076ee3f672f5c851d7d0/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2b480aae2abb87e617076ee3f672f5c851d7d0/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=4c2b480aae2abb87e617076ee3f672f5c851d7d0", "patch": "@@ -1672,26 +1672,26 @@ for Inspect<'self, A, T> {\n }\n \n /// An iterator which just modifies the contained state throughout iteration.\n-pub struct Unfoldr<'self, A, St> {\n+pub struct Unfold<'self, A, St> {\n     priv f: &'self fn(&mut St) -> Option<A>,\n     /// Internal state that will be yielded on the next iteration\n     state: St\n }\n \n-impl<'self, A, St> Unfoldr<'self, A, St> {\n+impl<'self, A, St> Unfold<'self, A, St> {\n     /// Creates a new iterator with the specified closure as the \"iterator\n     /// function\" and an initial state to eventually pass to the iterator\n     #[inline]\n     pub fn new<'a>(initial_state: St, f: &'a fn(&mut St) -> Option<A>)\n-        -> Unfoldr<'a, A, St> {\n-        Unfoldr {\n+        -> Unfold<'a, A, St> {\n+        Unfold {\n             f: f,\n             state: initial_state\n         }\n     }\n }\n \n-impl<'self, A, St> Iterator<A> for Unfoldr<'self, A, St> {\n+impl<'self, A, St> Iterator<A> for Unfold<'self, A, St> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         (self.f)(&mut self.state)\n@@ -2213,7 +2213,7 @@ mod tests {\n             }\n         }\n \n-        let mut it = Unfoldr::new(0, count);\n+        let mut it = Unfold::new(0, count);\n         let mut i = 0;\n         for counted in it {\n             assert_eq!(counted, i);"}, {"sha": "64cf3077c539209f294c1dedf1c5550f423cfe4f", "filename": "src/test/run-pass/unfold-cross-crate.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2b480aae2abb87e617076ee3f672f5c851d7d0/src%2Ftest%2Frun-pass%2Funfold-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2b480aae2abb87e617076ee3f672f5c851d7d0/src%2Ftest%2Frun-pass%2Funfold-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funfold-cross-crate.rs?ref=4c2b480aae2abb87e617076ee3f672f5c851d7d0", "patch": "@@ -10,7 +10,7 @@\n \n use std::iterator::*;\n \n-// Unfoldr had a bug with 'self that mean it didn't work\n+// Unfold had a bug with 'self that mean it didn't work\n // cross-crate\n \n fn main() {\n@@ -24,7 +24,7 @@ fn main() {\n         }\n     }\n \n-    let mut it = Unfoldr::new(0, count);\n+    let mut it = Unfold::new(0, count);\n     let mut i = 0;\n     for counted in it {\n         assert_eq!(counted, i);", "previous_filename": "src/test/run-pass/unfoldr-cross-crate.rs"}]}