{"sha": "f21cd81949304a6ebc578e983d3725a834e652ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMWNkODE5NDkzMDRhNmViYzU3OGU5ODNkMzcyNWE4MzRlNjUyZWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-21T01:01:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-21T01:01:21Z"}, "message": "Auto merge of #4558 - Manishearth:suggestions, r=phansch\n\nMake more tests rustfixable\n\nchangelog: Fix various lint suggestions\n\nProgress towards https://github.com/rust-lang/rust-clippy/issues/3630\n\nr? @phansch", "tree": {"sha": "7d9236a096d8df01a43fb2fa4602545acb8617bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d9236a096d8df01a43fb2fa4602545acb8617bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f21cd81949304a6ebc578e983d3725a834e652ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f21cd81949304a6ebc578e983d3725a834e652ec", "html_url": "https://github.com/rust-lang/rust/commit/f21cd81949304a6ebc578e983d3725a834e652ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f21cd81949304a6ebc578e983d3725a834e652ec/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca9e4adf3d53bed22305f5960439342c5d5684a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca9e4adf3d53bed22305f5960439342c5d5684a0", "html_url": "https://github.com/rust-lang/rust/commit/ca9e4adf3d53bed22305f5960439342c5d5684a0"}, {"sha": "2fecf756f7c3b940db7ef5890f9b6d061e2fdff7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fecf756f7c3b940db7ef5890f9b6d061e2fdff7", "html_url": "https://github.com/rust-lang/rust/commit/2fecf756f7c3b940db7ef5890f9b6d061e2fdff7"}], "stats": {"total": 899, "additions": 675, "deletions": 224}, "files": [{"sha": "a56d751b22d2b4df0084eaa96d8f660c49ee0f6f", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f21cd81949304a6ebc578e983d3725a834e652ec/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21cd81949304a6ebc578e983d3725a834e652ec/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=f21cd81949304a6ebc578e983d3725a834e652ec", "patch": "@@ -216,13 +216,13 @@ fn lint_misrefactored_assign_op(\n                         long\n                     ),\n                     format!(\"{} {}= {}\", snip_a, op.node.as_str(), snip_r),\n-                    Applicability::MachineApplicable,\n+                    Applicability::MaybeIncorrect,\n                 );\n                 db.span_suggestion(\n                     expr.span,\n                     \"or\",\n                     long,\n-                    Applicability::MachineApplicable, // snippet\n+                    Applicability::MaybeIncorrect, // snippet\n                 );\n             }\n         },"}, {"sha": "0032cfd1985bc945f5c39e99853a0023f8212e3e", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f21cd81949304a6ebc578e983d3725a834e652ec/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21cd81949304a6ebc578e983d3725a834e652ec/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=f21cd81949304a6ebc578e983d3725a834e652ec", "patch": "@@ -1272,7 +1272,7 @@ fn check_for_loop_reverse_range<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arg: &'tcx\n                     let start_snippet = snippet(cx, start.span, \"_\");\n                     let end_snippet = snippet(cx, end.span, \"_\");\n                     let dots = if limits == ast::RangeLimits::Closed {\n-                        \"...\"\n+                        \"..=\"\n                     } else {\n                         \"..\"\n                     };"}, {"sha": "4531943299cd1206aa0388229522e40334d92ad9", "filename": "tests/ui/deref_addrof_double_trigger.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Fderef_addrof_double_trigger.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Fderef_addrof_double_trigger.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof_double_trigger.rs?ref=f21cd81949304a6ebc578e983d3725a834e652ec", "patch": "@@ -1,5 +1,7 @@\n+// This test can't work with run-rustfix because it needs two passes of test+fix\n+\n #[warn(clippy::deref_addrof)]\n-#[allow(unused_variables)]\n+#[allow(unused_variables, unused_mut)]\n fn main() {\n     let a = 10;\n "}, {"sha": "2c55a4ed6acdb269663a7d92b482a65d3c3e9370", "filename": "tests/ui/deref_addrof_double_trigger.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Fderef_addrof_double_trigger.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Fderef_addrof_double_trigger.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof_double_trigger.stderr?ref=f21cd81949304a6ebc578e983d3725a834e652ec", "patch": "@@ -1,19 +1,19 @@\n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof_double_trigger.rs:8:14\n+  --> $DIR/deref_addrof_double_trigger.rs:10:14\n    |\n LL |     let b = **&&a;\n    |              ^^^^ help: try this: `&a`\n    |\n    = note: `-D clippy::deref-addrof` implied by `-D warnings`\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof_double_trigger.rs:12:17\n+  --> $DIR/deref_addrof_double_trigger.rs:14:17\n    |\n LL |         let y = *&mut x;\n    |                 ^^^^^^^ help: try this: `x`\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof_double_trigger.rs:19:18\n+  --> $DIR/deref_addrof_double_trigger.rs:21:18\n    |\n LL |         let y = **&mut &mut x;\n    |                  ^^^^^^^^^^^^ help: try this: `&mut x`"}, {"sha": "c93f520bee24b8763ec4d2c43fdef4615993ce11", "filename": "tests/ui/eq_op.rs", "status": "modified", "additions": 2, "deletions": 37, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op.rs?ref=f21cd81949304a6ebc578e983d3725a834e652ec", "patch": "@@ -2,7 +2,8 @@\n #[warn(clippy::eq_op)]\n #[allow(clippy::identity_op, clippy::double_parens, clippy::many_single_char_names)]\n #[allow(clippy::no_effect, unused_variables, clippy::unnecessary_operation, clippy::short_circuit_statement)]\n-#[warn(clippy::nonminimal_bool)]\n+#[allow(clippy::nonminimal_bool)]\n+#[allow(unused)]\n fn main() {\n     // simple values and comparisons\n     1 == 1;\n@@ -50,42 +51,6 @@ fn main() {\n     2*a.len() == 2*a.len(); // ok, functions\n     a.pop() == a.pop(); // ok, functions\n \n-    use std::ops::BitAnd;\n-    struct X(i32);\n-    impl BitAnd for X {\n-        type Output = X;\n-        fn bitand(self, rhs: X) -> X {\n-            X(self.0 & rhs.0)\n-        }\n-    }\n-    impl<'a> BitAnd<&'a X> for X {\n-        type Output = X;\n-        fn bitand(self, rhs: &'a X) -> X {\n-            X(self.0 & rhs.0)\n-        }\n-    }\n-    let x = X(1);\n-    let y = X(2);\n-    let z = x & &y;\n-\n-    #[derive(Copy, Clone)]\n-    struct Y(i32);\n-    impl BitAnd for Y {\n-        type Output = Y;\n-        fn bitand(self, rhs: Y) -> Y {\n-            Y(self.0 & rhs.0)\n-        }\n-    }\n-    impl<'a> BitAnd<&'a Y> for Y {\n-        type Output = Y;\n-        fn bitand(self, rhs: &'a Y) -> Y {\n-            Y(self.0 & rhs.0)\n-        }\n-    }\n-    let x = Y(1);\n-    let y = Y(2);\n-    let z = x & &y;\n-\n     check_ignore_macro();\n \n     // named constants"}, {"sha": "e37c0c22907ed8af5c041a3c761a0c616c9e28e6", "filename": "tests/ui/eq_op.stderr", "status": "modified", "additions": 28, "deletions": 76, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Feq_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Feq_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op.stderr?ref=f21cd81949304a6ebc578e983d3725a834e652ec", "patch": "@@ -1,214 +1,166 @@\n-error: this boolean expression can be simplified\n-  --> $DIR/eq_op.rs:35:5\n-   |\n-LL |     true && true;\n-   |     ^^^^^^^^^^^^ help: try: `true`\n-   |\n-   = note: `-D clippy::nonminimal-bool` implied by `-D warnings`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/eq_op.rs:37:5\n-   |\n-LL |     true || true;\n-   |     ^^^^^^^^^^^^ help: try: `true`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/eq_op.rs:43:5\n-   |\n-LL |     a == b && b == a;\n-   |     ^^^^^^^^^^^^^^^^ help: try: `a == b`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/eq_op.rs:44:5\n-   |\n-LL |     a != b && b != a;\n-   |     ^^^^^^^^^^^^^^^^ help: try: `a != b`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/eq_op.rs:45:5\n-   |\n-LL |     a < b && b > a;\n-   |     ^^^^^^^^^^^^^^ help: try: `a < b`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/eq_op.rs:46:5\n-   |\n-LL |     a <= b && b >= a;\n-   |     ^^^^^^^^^^^^^^^^ help: try: `a <= b`\n-\n error: equal expressions as operands to `==`\n-  --> $DIR/eq_op.rs:8:5\n+  --> $DIR/eq_op.rs:9:5\n    |\n LL |     1 == 1;\n    |     ^^^^^^\n    |\n    = note: `-D clippy::eq-op` implied by `-D warnings`\n \n error: equal expressions as operands to `==`\n-  --> $DIR/eq_op.rs:9:5\n+  --> $DIR/eq_op.rs:10:5\n    |\n LL |     \"no\" == \"no\";\n    |     ^^^^^^^^^^^^\n \n error: equal expressions as operands to `!=`\n-  --> $DIR/eq_op.rs:11:5\n+  --> $DIR/eq_op.rs:12:5\n    |\n LL |     false != false;\n    |     ^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `<`\n-  --> $DIR/eq_op.rs:12:5\n+  --> $DIR/eq_op.rs:13:5\n    |\n LL |     1.5 < 1.5;\n    |     ^^^^^^^^^\n \n error: equal expressions as operands to `>=`\n-  --> $DIR/eq_op.rs:13:5\n+  --> $DIR/eq_op.rs:14:5\n    |\n LL |     1u64 >= 1u64;\n    |     ^^^^^^^^^^^^\n \n error: equal expressions as operands to `&`\n-  --> $DIR/eq_op.rs:16:5\n+  --> $DIR/eq_op.rs:17:5\n    |\n LL |     (1 as u64) & (1 as u64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `^`\n-  --> $DIR/eq_op.rs:17:5\n+  --> $DIR/eq_op.rs:18:5\n    |\n LL |     1 ^ ((((((1))))));\n    |     ^^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `<`\n-  --> $DIR/eq_op.rs:20:5\n+  --> $DIR/eq_op.rs:21:5\n    |\n LL |     (-(2) < -(2));\n    |     ^^^^^^^^^^^^^\n \n error: equal expressions as operands to `==`\n-  --> $DIR/eq_op.rs:21:5\n+  --> $DIR/eq_op.rs:22:5\n    |\n LL |     ((1 + 1) & (1 + 1) == (1 + 1) & (1 + 1));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `&`\n-  --> $DIR/eq_op.rs:21:6\n+  --> $DIR/eq_op.rs:22:6\n    |\n LL |     ((1 + 1) & (1 + 1) == (1 + 1) & (1 + 1));\n    |      ^^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `&`\n-  --> $DIR/eq_op.rs:21:27\n+  --> $DIR/eq_op.rs:22:27\n    |\n LL |     ((1 + 1) & (1 + 1) == (1 + 1) & (1 + 1));\n    |                           ^^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `==`\n-  --> $DIR/eq_op.rs:22:5\n+  --> $DIR/eq_op.rs:23:5\n    |\n LL |     (1 * 2) + (3 * 4) == 1 * 2 + 3 * 4;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `!=`\n-  --> $DIR/eq_op.rs:25:5\n+  --> $DIR/eq_op.rs:26:5\n    |\n LL |     ([1] != [1]);\n    |     ^^^^^^^^^^^^\n \n error: equal expressions as operands to `!=`\n-  --> $DIR/eq_op.rs:26:5\n+  --> $DIR/eq_op.rs:27:5\n    |\n LL |     ((1, 2) != (1, 2));\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `==`\n-  --> $DIR/eq_op.rs:30:5\n+  --> $DIR/eq_op.rs:31:5\n    |\n LL |     1 + 1 == 2;\n    |     ^^^^^^^^^^\n \n error: equal expressions as operands to `==`\n-  --> $DIR/eq_op.rs:31:5\n+  --> $DIR/eq_op.rs:32:5\n    |\n LL |     1 - 1 == 0;\n    |     ^^^^^^^^^^\n \n error: equal expressions as operands to `-`\n-  --> $DIR/eq_op.rs:31:5\n+  --> $DIR/eq_op.rs:32:5\n    |\n LL |     1 - 1 == 0;\n    |     ^^^^^\n \n error: equal expressions as operands to `-`\n-  --> $DIR/eq_op.rs:33:5\n+  --> $DIR/eq_op.rs:34:5\n    |\n LL |     1 - 1;\n    |     ^^^^^\n \n error: equal expressions as operands to `/`\n-  --> $DIR/eq_op.rs:34:5\n+  --> $DIR/eq_op.rs:35:5\n    |\n LL |     1 / 1;\n    |     ^^^^^\n \n error: equal expressions as operands to `&&`\n-  --> $DIR/eq_op.rs:35:5\n+  --> $DIR/eq_op.rs:36:5\n    |\n LL |     true && true;\n    |     ^^^^^^^^^^^^\n \n error: equal expressions as operands to `||`\n-  --> $DIR/eq_op.rs:37:5\n+  --> $DIR/eq_op.rs:38:5\n    |\n LL |     true || true;\n    |     ^^^^^^^^^^^^\n \n error: equal expressions as operands to `&&`\n-  --> $DIR/eq_op.rs:43:5\n+  --> $DIR/eq_op.rs:44:5\n    |\n LL |     a == b && b == a;\n    |     ^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `&&`\n-  --> $DIR/eq_op.rs:44:5\n+  --> $DIR/eq_op.rs:45:5\n    |\n LL |     a != b && b != a;\n    |     ^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `&&`\n-  --> $DIR/eq_op.rs:45:5\n+  --> $DIR/eq_op.rs:46:5\n    |\n LL |     a < b && b > a;\n    |     ^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `&&`\n-  --> $DIR/eq_op.rs:46:5\n+  --> $DIR/eq_op.rs:47:5\n    |\n LL |     a <= b && b >= a;\n    |     ^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `==`\n-  --> $DIR/eq_op.rs:49:5\n+  --> $DIR/eq_op.rs:50:5\n    |\n LL |     a == a;\n    |     ^^^^^^\n \n-error: taken reference of right operand\n-  --> $DIR/eq_op.rs:87:13\n-   |\n-LL |     let z = x & &y;\n-   |             ^^^^--\n-   |                 |\n-   |                 help: use the right value directly: `y`\n-   |\n-   = note: `-D clippy::op-ref` implied by `-D warnings`\n-\n error: equal expressions as operands to `/`\n-  --> $DIR/eq_op.rs:95:20\n+  --> $DIR/eq_op.rs:60:20\n    |\n LL |     const D: u32 = A / A;\n    |                    ^^^^^\n \n-error: aborting due to 34 previous errors\n+error: aborting due to 27 previous errors\n "}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/for_loop.stdout", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ca9e4adf3d53bed22305f5960439342c5d5684a0/tests%2Fui%2Ffor_loop.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ca9e4adf3d53bed22305f5960439342c5d5684a0/tests%2Fui%2Ffor_loop.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.stdout?ref=ca9e4adf3d53bed22305f5960439342c5d5684a0"}, {"sha": "3075638ef94bfa0e828be1a3568761721180f320", "filename": "tests/ui/for_loop_fixable.fixed", "status": "added", "additions": 304, "deletions": 0, "changes": 304, "blob_url": "https://github.com/rust-lang/rust/blob/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Ffor_loop_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Ffor_loop_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.fixed?ref=f21cd81949304a6ebc578e983d3725a834e652ec", "patch": "@@ -0,0 +1,304 @@\n+// run-rustfix\n+\n+#![allow(dead_code, unused)]\n+\n+use std::collections::*;\n+\n+#[warn(clippy::all)]\n+struct Unrelated(Vec<u8>);\n+impl Unrelated {\n+    fn next(&self) -> std::slice::Iter<u8> {\n+        self.0.iter()\n+    }\n+\n+    fn iter(&self) -> std::slice::Iter<u8> {\n+        self.0.iter()\n+    }\n+}\n+\n+#[warn(\n+    clippy::needless_range_loop,\n+    clippy::explicit_iter_loop,\n+    clippy::explicit_into_iter_loop,\n+    clippy::iter_next_loop,\n+    clippy::reverse_range_loop,\n+    clippy::for_kv_map\n+)]\n+#[allow(\n+    clippy::linkedlist,\n+    clippy::shadow_unrelated,\n+    clippy::unnecessary_mut_passed,\n+    clippy::cognitive_complexity,\n+    clippy::similar_names\n+)]\n+#[allow(clippy::many_single_char_names, unused_variables, clippy::into_iter_on_array)]\n+fn main() {\n+    const MAX_LEN: usize = 42;\n+    let mut vec = vec![1, 2, 3, 4];\n+\n+    for i in (0..10).rev() {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (0..=10).rev() {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (0..MAX_LEN).rev() {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in 5..=5 {\n+        // not an error, this is the range with only one element \u201c5\u201d\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in 0..10 {\n+        // not an error, the start index is less than the end index\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in -10..0 {\n+        // not an error\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (10..0).map(|x| x * 2) {\n+        // not an error, it can't be known what arbitrary methods do to a range\n+        println!(\"{}\", i);\n+    }\n+\n+    // testing that the empty range lint folds constants\n+    for i in (5 + 4..10).rev() {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in ((3 - 1)..(5 + 2)).rev() {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (2 * 2)..(2 * 3) {\n+        // no error, 4..6 is fine\n+        println!(\"{}\", i);\n+    }\n+\n+    let x = 42;\n+    for i in x..10 {\n+        // no error, not constant-foldable\n+        println!(\"{}\", i);\n+    }\n+\n+    // See #601\n+    for i in 0..10 {\n+        // no error, id_col does not exist outside the loop\n+        let mut id_col = vec![0f64; 10];\n+        id_col[i] = 1f64;\n+    }\n+\n+    for _v in &vec {}\n+\n+    for _v in &mut vec {}\n+\n+    let out_vec = vec![1, 2, 3];\n+    for _v in out_vec {}\n+\n+    let array = [1, 2, 3];\n+    for _v in &array {}\n+\n+    for _v in &vec {} // these are fine\n+    for _v in &mut vec {} // these are fine\n+\n+    for _v in &[1, 2, 3] {}\n+\n+    for _v in (&mut [1, 2, 3]).iter() {} // no error\n+\n+    for _v in &[0; 32] {}\n+\n+    for _v in [0; 33].iter() {} // no error\n+\n+    let ll: LinkedList<()> = LinkedList::new();\n+    for _v in &ll {}\n+\n+    let vd: VecDeque<()> = VecDeque::new();\n+    for _v in &vd {}\n+\n+    let bh: BinaryHeap<()> = BinaryHeap::new();\n+    for _v in &bh {}\n+\n+    let hm: HashMap<(), ()> = HashMap::new();\n+    for _v in &hm {}\n+\n+    let bt: BTreeMap<(), ()> = BTreeMap::new();\n+    for _v in &bt {}\n+\n+    let hs: HashSet<()> = HashSet::new();\n+    for _v in &hs {}\n+\n+    let bs: BTreeSet<()> = BTreeSet::new();\n+    for _v in &bs {}\n+\n+    let u = Unrelated(vec![]);\n+    for _v in u.next() {} // no error\n+    for _v in u.iter() {} // no error\n+\n+    let mut out = vec![];\n+    vec.iter().cloned().map(|x| out.push(x)).collect::<Vec<_>>();\n+    let _y = vec.iter().cloned().map(|x| out.push(x)).collect::<Vec<_>>(); // this is fine\n+\n+    // Loop with explicit counter variable\n+\n+    // Potential false positives\n+    let mut _index = 0;\n+    _index = 1;\n+    for _v in &vec {\n+        _index += 1\n+    }\n+\n+    let mut _index = 0;\n+    _index += 1;\n+    for _v in &vec {\n+        _index += 1\n+    }\n+\n+    let mut _index = 0;\n+    if true {\n+        _index = 1\n+    }\n+    for _v in &vec {\n+        _index += 1\n+    }\n+\n+    let mut _index = 0;\n+    let mut _index = 1;\n+    for _v in &vec {\n+        _index += 1\n+    }\n+\n+    let mut _index = 0;\n+    for _v in &vec {\n+        _index += 1;\n+        _index += 1\n+    }\n+\n+    let mut _index = 0;\n+    for _v in &vec {\n+        _index *= 2;\n+        _index += 1\n+    }\n+\n+    let mut _index = 0;\n+    for _v in &vec {\n+        _index = 1;\n+        _index += 1\n+    }\n+\n+    let mut _index = 0;\n+\n+    for _v in &vec {\n+        let mut _index = 0;\n+        _index += 1\n+    }\n+\n+    let mut _index = 0;\n+    for _v in &vec {\n+        _index += 1;\n+        _index = 0;\n+    }\n+\n+    let mut _index = 0;\n+    for _v in &vec {\n+        for _x in 0..1 {\n+            _index += 1;\n+        }\n+        _index += 1\n+    }\n+\n+    let mut _index = 0;\n+    for x in &vec {\n+        if *x == 1 {\n+            _index += 1\n+        }\n+    }\n+\n+    let mut _index = 0;\n+    if true {\n+        _index = 1\n+    };\n+    for _v in &vec {\n+        _index += 1\n+    }\n+\n+    let mut _index = 1;\n+    if false {\n+        _index = 0\n+    };\n+    for _v in &vec {\n+        _index += 1\n+    }\n+\n+    let mut index = 0;\n+    {\n+        let mut _x = &mut index;\n+    }\n+    for _v in &vec {\n+        _index += 1\n+    }\n+\n+    let mut index = 0;\n+    for _v in &vec {\n+        index += 1\n+    }\n+    println!(\"index: {}\", index);\n+\n+    fn f<T>(_: &T, _: &T) -> bool {\n+        unimplemented!()\n+    }\n+    fn g<T>(_: &mut [T], _: usize, _: usize) {\n+        unimplemented!()\n+    }\n+    for i in 1..vec.len() {\n+        if f(&vec[i - 1], &vec[i]) {\n+            g(&mut vec, i - 1, i);\n+        }\n+    }\n+\n+    for mid in 1..vec.len() {\n+        let (_, _) = vec.split_at(mid);\n+    }\n+}\n+\n+fn partition<T: PartialOrd + Send>(v: &mut [T]) -> usize {\n+    let pivot = v.len() - 1;\n+    let mut i = 0;\n+    for j in 0..pivot {\n+        if v[j] <= v[pivot] {\n+            v.swap(i, j);\n+            i += 1;\n+        }\n+    }\n+    v.swap(i, pivot);\n+    i\n+}\n+\n+#[warn(clippy::needless_range_loop)]\n+pub fn manual_copy_same_destination(dst: &mut [i32], d: usize, s: usize) {\n+    // Same source and destination - don't trigger lint\n+    for i in 0..dst.len() {\n+        dst[d + i] = dst[s + i];\n+    }\n+}\n+\n+mod issue_2496 {\n+    pub trait Handle {\n+        fn new_for_index(index: usize) -> Self;\n+        fn index(&self) -> usize;\n+    }\n+\n+    pub fn test<H: Handle>() -> H {\n+        for x in 0..5 {\n+            let next_handle = H::new_for_index(x);\n+            println!(\"{}\", next_handle.index());\n+        }\n+        unimplemented!()\n+    }\n+}"}, {"sha": "2201596fd6a674ed61644b2abeb1182da051ee9a", "filename": "tests/ui/for_loop_fixable.rs", "status": "renamed", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Ffor_loop_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Ffor_loop_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.rs?ref=f21cd81949304a6ebc578e983d3725a834e652ec", "patch": "@@ -1,8 +1,8 @@\n-use std::collections::*;\n-use std::rc::Rc;\n+// run-rustfix\n+\n+#![allow(dead_code, unused)]\n \n-static STATIC: [usize; 4] = [0, 1, 8, 16];\n-const CONST: [usize; 4] = [0, 1, 8, 16];\n+use std::collections::*;\n \n #[warn(clippy::all)]\n struct Unrelated(Vec<u8>);\n@@ -48,10 +48,6 @@ fn main() {\n         println!(\"{}\", i);\n     }\n \n-    for i in 5..5 {\n-        println!(\"{}\", i);\n-    }\n-\n     for i in 5..=5 {\n         // not an error, this is the range with only one element \u201c5\u201d\n         println!(\"{}\", i);\n@@ -81,10 +77,6 @@ fn main() {\n         println!(\"{}\", i);\n     }\n \n-    for i in (5 + 2)..(8 - 1) {\n-        println!(\"{}\", i);\n-    }\n-\n     for i in (2 * 2)..(2 * 3) {\n         // no error, 4..6 is fine\n         println!(\"{}\", i);\n@@ -145,8 +137,6 @@ fn main() {\n     let bs: BTreeSet<()> = BTreeSet::new();\n     for _v in bs.iter() {}\n \n-    for _v in vec.iter().next() {}\n-\n     let u = Unrelated(vec![]);\n     for _v in u.next() {} // no error\n     for _v in u.iter() {} // no error\n@@ -275,17 +265,8 @@ fn main() {\n     for mid in 1..vec.len() {\n         let (_, _) = vec.split_at(mid);\n     }\n-\n-    const ZERO: usize = 0;\n-\n-    for i in ZERO..vec.len() {\n-        if f(&vec[i], &vec[i]) {\n-            panic!(\"at the disco\");\n-        }\n-    }\n }\n \n-#[allow(dead_code)]\n fn partition<T: PartialOrd + Send>(v: &mut [T]) -> usize {\n     let pivot = v.len() - 1;\n     let mut i = 0;", "previous_filename": "tests/ui/for_loop.rs"}, {"sha": "6d6fa3ac7af956b553990de88639d47dcf828812", "filename": "tests/ui/for_loop_fixable.stderr", "status": "renamed", "additions": 20, "deletions": 52, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Ffor_loop_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Ffor_loop_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.stderr?ref=f21cd81949304a6ebc578e983d3725a834e652ec", "patch": "@@ -1,5 +1,5 @@\n error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop.rs:39:14\n+  --> $DIR/for_loop_fixable.rs:39:14\n    |\n LL |     for i in 10..0 {\n    |              ^^^^^\n@@ -11,17 +11,17 @@ LL |     for i in (0..10).rev() {\n    |              ^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop.rs:43:14\n+  --> $DIR/for_loop_fixable.rs:43:14\n    |\n LL |     for i in 10..=0 {\n    |              ^^^^^^\n help: consider using the following if you are attempting to iterate over this range in reverse\n    |\n-LL |     for i in (0...10).rev() {\n+LL |     for i in (0..=10).rev() {\n    |              ^^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop.rs:47:14\n+  --> $DIR/for_loop_fixable.rs:47:14\n    |\n LL |     for i in MAX_LEN..0 {\n    |              ^^^^^^^^^^\n@@ -31,13 +31,7 @@ LL |     for i in (0..MAX_LEN).rev() {\n    |              ^^^^^^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop.rs:51:14\n-   |\n-LL |     for i in 5..5 {\n-   |              ^^^^\n-\n-error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop.rs:76:14\n+  --> $DIR/for_loop_fixable.rs:72:14\n    |\n LL |     for i in 10..5 + 4 {\n    |              ^^^^^^^^^\n@@ -47,7 +41,7 @@ LL |     for i in (5 + 4..10).rev() {\n    |              ^^^^^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop.rs:80:14\n+  --> $DIR/for_loop_fixable.rs:76:14\n    |\n LL |     for i in (5 + 2)..(3 - 1) {\n    |              ^^^^^^^^^^^^^^^^\n@@ -56,113 +50,87 @@ help: consider using the following if you are attempting to iterate over this ra\n LL |     for i in ((3 - 1)..(5 + 2)).rev() {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop.rs:84:14\n-   |\n-LL |     for i in (5 + 2)..(8 - 1) {\n-   |              ^^^^^^^^^^^^^^^^\n-\n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:106:15\n+  --> $DIR/for_loop_fixable.rs:98:15\n    |\n LL |     for _v in vec.iter() {}\n    |               ^^^^^^^^^^ help: to write this more concisely, try: `&vec`\n    |\n    = note: `-D clippy::explicit-iter-loop` implied by `-D warnings`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:108:15\n+  --> $DIR/for_loop_fixable.rs:100:15\n    |\n LL |     for _v in vec.iter_mut() {}\n    |               ^^^^^^^^^^^^^^ help: to write this more concisely, try: `&mut vec`\n \n error: it is more concise to loop over containers instead of using explicit iteration methods`\n-  --> $DIR/for_loop.rs:111:15\n+  --> $DIR/for_loop_fixable.rs:103:15\n    |\n LL |     for _v in out_vec.into_iter() {}\n    |               ^^^^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `out_vec`\n    |\n    = note: `-D clippy::explicit-into-iter-loop` implied by `-D warnings`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:114:15\n+  --> $DIR/for_loop_fixable.rs:106:15\n    |\n LL |     for _v in array.into_iter() {}\n    |               ^^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `&array`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:119:15\n+  --> $DIR/for_loop_fixable.rs:111:15\n    |\n LL |     for _v in [1, 2, 3].iter() {}\n    |               ^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `&[1, 2, 3]`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:123:15\n+  --> $DIR/for_loop_fixable.rs:115:15\n    |\n LL |     for _v in [0; 32].iter() {}\n    |               ^^^^^^^^^^^^^^ help: to write this more concisely, try: `&[0; 32]`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:128:15\n+  --> $DIR/for_loop_fixable.rs:120:15\n    |\n LL |     for _v in ll.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&ll`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:131:15\n+  --> $DIR/for_loop_fixable.rs:123:15\n    |\n LL |     for _v in vd.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&vd`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:134:15\n+  --> $DIR/for_loop_fixable.rs:126:15\n    |\n LL |     for _v in bh.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bh`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:137:15\n+  --> $DIR/for_loop_fixable.rs:129:15\n    |\n LL |     for _v in hm.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&hm`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:140:15\n+  --> $DIR/for_loop_fixable.rs:132:15\n    |\n LL |     for _v in bt.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bt`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:143:15\n+  --> $DIR/for_loop_fixable.rs:135:15\n    |\n LL |     for _v in hs.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&hs`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:146:15\n+  --> $DIR/for_loop_fixable.rs:138:15\n    |\n LL |     for _v in bs.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bs`\n \n-error: you are iterating over `Iterator::next()` which is an Option; this will compile but is probably not what you want\n-  --> $DIR/for_loop.rs:148:15\n-   |\n-LL |     for _v in vec.iter().next() {}\n-   |               ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::iter-next-loop` implied by `-D warnings`\n-\n-error: the loop variable `i` is only used to index `vec`.\n-  --> $DIR/for_loop.rs:281:14\n-   |\n-LL |     for i in ZERO..vec.len() {\n-   |              ^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::needless-range-loop` implied by `-D warnings`\n-help: consider using an iterator\n-   |\n-LL |     for <item> in &vec {\n-   |         ^^^^^^    ^^^^\n-\n-error: aborting due to 22 previous errors\n+error: aborting due to 18 previous errors\n ", "previous_filename": "tests/ui/for_loop.stderr"}, {"sha": "5d94647e0dbfeb34808e3332356f517547c363e8", "filename": "tests/ui/for_loop_unfixable.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Ffor_loop_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Ffor_loop_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_unfixable.rs?ref=f21cd81949304a6ebc578e983d3725a834e652ec", "patch": "@@ -0,0 +1,41 @@\n+// Tests from for_loop.rs that don't have suggestions\n+\n+#[warn(\n+    clippy::needless_range_loop,\n+    clippy::explicit_iter_loop,\n+    clippy::explicit_into_iter_loop,\n+    clippy::iter_next_loop,\n+    clippy::reverse_range_loop,\n+    clippy::for_kv_map\n+)]\n+#[allow(\n+    clippy::linkedlist,\n+    clippy::shadow_unrelated,\n+    clippy::unnecessary_mut_passed,\n+    clippy::cognitive_complexity,\n+    clippy::similar_names,\n+    unused,\n+    dead_code\n+)]\n+#[allow(clippy::many_single_char_names, unused_variables, clippy::into_iter_on_array)]\n+fn main() {\n+    for i in 5..5 {\n+        println!(\"{}\", i);\n+    }\n+\n+    let vec = vec![1, 2, 3, 4];\n+\n+    for _v in vec.iter().next() {}\n+\n+    for i in (5 + 2)..(8 - 1) {\n+        println!(\"{}\", i);\n+    }\n+\n+    const ZERO: usize = 0;\n+\n+    for i in ZERO..vec.len() {\n+        if f(&vec[i], &vec[i]) {\n+            panic!(\"at the disco\");\n+        }\n+    }\n+}"}, {"sha": "e88bfffaae6e608dfd8991c413f6b0051f829a33", "filename": "tests/ui/for_loop_unfixable.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Ffor_loop_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Ffor_loop_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_unfixable.stderr?ref=f21cd81949304a6ebc578e983d3725a834e652ec", "patch": "@@ -0,0 +1,9 @@\n+error[E0425]: cannot find function `f` in this scope\n+  --> $DIR/for_loop_unfixable.rs:37:12\n+   |\n+LL |         if f(&vec[i], &vec[i]) {\n+   |            ^ help: a local variable with a similar name exists: `i`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "dd3fc56e98bcf2b668a2c8fe372cedc7ef8f36b2", "filename": "tests/ui/identity_conversion.fixed", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Fidentity_conversion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Fidentity_conversion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_conversion.fixed?ref=f21cd81949304a6ebc578e983d3725a834e652ec", "patch": "@@ -0,0 +1,58 @@\n+// run-rustfix\n+\n+#![deny(clippy::identity_conversion)]\n+\n+fn test_generic<T: Copy>(val: T) -> T {\n+    let _ = val;\n+    val\n+}\n+\n+fn test_generic2<T: Copy + Into<i32> + Into<U>, U: From<T>>(val: T) {\n+    // ok\n+    let _: i32 = val.into();\n+    let _: U = val.into();\n+    let _ = U::from(val);\n+}\n+\n+fn test_questionmark() -> Result<(), ()> {\n+    {\n+        let _: i32 = 0i32;\n+        Ok(Ok(()))\n+    }??;\n+    Ok(())\n+}\n+\n+fn test_issue_3913() -> Result<(), std::io::Error> {\n+    use std::fs;\n+    use std::path::Path;\n+\n+    let path = Path::new(\".\");\n+    for _ in fs::read_dir(path)? {}\n+\n+    Ok(())\n+}\n+\n+fn main() {\n+    test_generic(10i32);\n+    test_generic2::<i32, i32>(10i32);\n+    test_questionmark().unwrap();\n+    test_issue_3913().unwrap();\n+\n+    let _: String = \"foo\".into();\n+    let _: String = From::from(\"foo\");\n+    let _ = String::from(\"foo\");\n+    #[allow(clippy::identity_conversion)]\n+    {\n+        let _: String = \"foo\".into();\n+        let _ = String::from(\"foo\");\n+        let _ = \"\".lines().into_iter();\n+    }\n+\n+    let _: String = \"foo\".to_string();\n+    let _: String = \"foo\".to_string();\n+    let _ = \"foo\".to_string();\n+    let _ = format!(\"A: {:04}\", 123);\n+    let _ = \"\".lines();\n+    let _ = vec![1, 2, 3].into_iter();\n+    let _: String = format!(\"Hello {}\", \"world\");\n+}"}, {"sha": "875ed7db373b6000d0ca4c14af50fcbe480aa084", "filename": "tests/ui/identity_conversion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_conversion.rs?ref=f21cd81949304a6ebc578e983d3725a834e652ec", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n #![deny(clippy::identity_conversion)]\n \n fn test_generic<T: Copy>(val: T) -> T {"}, {"sha": "3cabe53bf2b787cbc11d061a09264d3bc639e018", "filename": "tests/ui/identity_conversion.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Fidentity_conversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Fidentity_conversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_conversion.stderr?ref=f21cd81949304a6ebc578e983d3725a834e652ec", "patch": "@@ -1,65 +1,65 @@\n error: identical conversion\n-  --> $DIR/identity_conversion.rs:4:13\n+  --> $DIR/identity_conversion.rs:6:13\n    |\n LL |     let _ = T::from(val);\n    |             ^^^^^^^^^^^^ help: consider removing `T::from()`: `val`\n    |\n note: lint level defined here\n-  --> $DIR/identity_conversion.rs:1:9\n+  --> $DIR/identity_conversion.rs:3:9\n    |\n LL | #![deny(clippy::identity_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: identical conversion\n-  --> $DIR/identity_conversion.rs:5:5\n+  --> $DIR/identity_conversion.rs:7:5\n    |\n LL |     val.into()\n    |     ^^^^^^^^^^ help: consider removing `.into()`: `val`\n \n error: identical conversion\n-  --> $DIR/identity_conversion.rs:17:22\n+  --> $DIR/identity_conversion.rs:19:22\n    |\n LL |         let _: i32 = 0i32.into();\n    |                      ^^^^^^^^^^^ help: consider removing `.into()`: `0i32`\n \n error: identical conversion\n-  --> $DIR/identity_conversion.rs:49:21\n+  --> $DIR/identity_conversion.rs:51:21\n    |\n LL |     let _: String = \"foo\".to_string().into();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `\"foo\".to_string()`\n \n error: identical conversion\n-  --> $DIR/identity_conversion.rs:50:21\n+  --> $DIR/identity_conversion.rs:52:21\n    |\n LL |     let _: String = From::from(\"foo\".to_string());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `From::from()`: `\"foo\".to_string()`\n \n error: identical conversion\n-  --> $DIR/identity_conversion.rs:51:13\n+  --> $DIR/identity_conversion.rs:53:13\n    |\n LL |     let _ = String::from(\"foo\".to_string());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `\"foo\".to_string()`\n \n error: identical conversion\n-  --> $DIR/identity_conversion.rs:52:13\n+  --> $DIR/identity_conversion.rs:54:13\n    |\n LL |     let _ = String::from(format!(\"A: {:04}\", 123));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `format!(\"A: {:04}\", 123)`\n \n error: identical conversion\n-  --> $DIR/identity_conversion.rs:53:13\n+  --> $DIR/identity_conversion.rs:55:13\n    |\n LL |     let _ = \"\".lines().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `\"\".lines()`\n \n error: identical conversion\n-  --> $DIR/identity_conversion.rs:54:13\n+  --> $DIR/identity_conversion.rs:56:13\n    |\n LL |     let _ = vec![1, 2, 3].into_iter().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `vec![1, 2, 3].into_iter()`\n \n error: identical conversion\n-  --> $DIR/identity_conversion.rs:55:21\n+  --> $DIR/identity_conversion.rs:57:21\n    |\n LL |     let _: String = format!(\"Hello {}\", \"world\").into();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `format!(\"Hello {}\", \"world\")`"}, {"sha": "dd42f06664e155f926e85ea49236286bc79a915e", "filename": "tests/ui/implicit_return.fixed", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Fimplicit_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Fimplicit_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.fixed?ref=f21cd81949304a6ebc578e983d3725a834e652ec", "patch": "@@ -0,0 +1,102 @@\n+// run-rustfix\n+\n+#![warn(clippy::implicit_return)]\n+#![allow(clippy::needless_return, unused)]\n+\n+fn test_end_of_fn() -> bool {\n+    if true {\n+        // no error!\n+        return true;\n+    }\n+\n+    return true\n+}\n+\n+#[allow(clippy::needless_bool)]\n+fn test_if_block() -> bool {\n+    if true {\n+        return true\n+    } else {\n+        return false\n+    }\n+}\n+\n+#[allow(clippy::match_bool)]\n+#[rustfmt::skip]\n+fn test_match(x: bool) -> bool {\n+    match x {\n+        true => return false,\n+        false => { return true },\n+    }\n+}\n+\n+#[allow(clippy::match_bool, clippy::needless_return)]\n+fn test_match_with_unreachable(x: bool) -> bool {\n+    match x {\n+        true => return false,\n+        false => unreachable!(),\n+    }\n+}\n+\n+#[allow(clippy::never_loop)]\n+fn test_loop() -> bool {\n+    loop {\n+        return true;\n+    }\n+}\n+\n+#[allow(clippy::never_loop)]\n+fn test_loop_with_block() -> bool {\n+    loop {\n+        {\n+            return true;\n+        }\n+    }\n+}\n+\n+#[allow(clippy::never_loop)]\n+fn test_loop_with_nests() -> bool {\n+    loop {\n+        if true {\n+            return true;\n+        } else {\n+            let _ = true;\n+        }\n+    }\n+}\n+\n+#[allow(clippy::redundant_pattern_matching)]\n+fn test_loop_with_if_let() -> bool {\n+    loop {\n+        if let Some(x) = Some(true) {\n+            return x;\n+        }\n+    }\n+}\n+\n+fn test_closure() {\n+    #[rustfmt::skip]\n+    let _ = || { return true };\n+    let _ = || return true;\n+}\n+\n+fn test_panic() -> bool {\n+    panic!()\n+}\n+\n+fn test_return_macro() -> String {\n+    return format!(\"test {}\", \"test\")\n+}\n+\n+fn main() {\n+    let _ = test_end_of_fn();\n+    let _ = test_if_block();\n+    let _ = test_match(true);\n+    let _ = test_match_with_unreachable(true);\n+    let _ = test_loop();\n+    let _ = test_loop_with_block();\n+    let _ = test_loop_with_nests();\n+    let _ = test_loop_with_if_let();\n+    test_closure();\n+    let _ = test_return_macro();\n+}"}, {"sha": "5abbf6a5583ea1f8352daae10d9b21910c7e80ef", "filename": "tests/ui/implicit_return.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.rs?ref=f21cd81949304a6ebc578e983d3725a834e652ec", "patch": "@@ -1,4 +1,7 @@\n+// run-rustfix\n+\n #![warn(clippy::implicit_return)]\n+#![allow(clippy::needless_return, unused)]\n \n fn test_end_of_fn() -> bool {\n     if true {"}, {"sha": "21822344437bcfb15553673a56e7b1fb78fe3632", "filename": "tests/ui/implicit_return.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Fimplicit_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Fimplicit_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.stderr?ref=f21cd81949304a6ebc578e983d3725a834e652ec", "patch": "@@ -1,67 +1,67 @@\n error: missing return statement\n-  --> $DIR/implicit_return.rs:9:5\n+  --> $DIR/implicit_return.rs:12:5\n    |\n LL |     true\n    |     ^^^^ help: add `return` as shown: `return true`\n    |\n    = note: `-D clippy::implicit-return` implied by `-D warnings`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:15:9\n+  --> $DIR/implicit_return.rs:18:9\n    |\n LL |         true\n    |         ^^^^ help: add `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:17:9\n+  --> $DIR/implicit_return.rs:20:9\n    |\n LL |         false\n    |         ^^^^^ help: add `return` as shown: `return false`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:25:17\n+  --> $DIR/implicit_return.rs:28:17\n    |\n LL |         true => false,\n    |                 ^^^^^ help: add `return` as shown: `return false`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:26:20\n+  --> $DIR/implicit_return.rs:29:20\n    |\n LL |         false => { true },\n    |                    ^^^^ help: add `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:41:9\n+  --> $DIR/implicit_return.rs:44:9\n    |\n LL |         break true;\n    |         ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:49:13\n+  --> $DIR/implicit_return.rs:52:13\n    |\n LL |             break true;\n    |             ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:58:13\n+  --> $DIR/implicit_return.rs:61:13\n    |\n LL |             break true;\n    |             ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:76:18\n+  --> $DIR/implicit_return.rs:79:18\n    |\n LL |     let _ = || { true };\n    |                  ^^^^ help: add `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:77:16\n+  --> $DIR/implicit_return.rs:80:16\n    |\n LL |     let _ = || true;\n    |                ^^^^ help: add `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:85:5\n+  --> $DIR/implicit_return.rs:88:5\n    |\n LL |     format!(\"test {}\", \"test\")\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add `return` as shown: `return format!(\"test {}\", \"test\")`"}, {"sha": "fe21a71a42c2648f650bf612b37210e3b7e8f59c", "filename": "tests/ui/inline_fn_without_body.fixed", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Finline_fn_without_body.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Finline_fn_without_body.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finline_fn_without_body.fixed?ref=f21cd81949304a6ebc578e983d3725a834e652ec", "patch": "@@ -0,0 +1,17 @@\n+// run-rustfix\n+\n+#![warn(clippy::inline_fn_without_body)]\n+#![allow(clippy::inline_always)]\n+\n+trait Foo {\n+    fn default_inline();\n+\n+    fn always_inline();\n+\n+    fn never_inline();\n+\n+    #[inline]\n+    fn has_body() {}\n+}\n+\n+fn main() {}"}, {"sha": "50746989466504118e3633aaf79c06fa3dd9ee4e", "filename": "tests/ui/inline_fn_without_body.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finline_fn_without_body.rs?ref=f21cd81949304a6ebc578e983d3725a834e652ec", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n #![warn(clippy::inline_fn_without_body)]\n #![allow(clippy::inline_always)]\n "}, {"sha": "32d35e209b01baf52ac56968a94ef8019d98bb4c", "filename": "tests/ui/inline_fn_without_body.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Finline_fn_without_body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Finline_fn_without_body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finline_fn_without_body.stderr?ref=f21cd81949304a6ebc578e983d3725a834e652ec", "patch": "@@ -1,5 +1,5 @@\n error: use of `#[inline]` on trait method `default_inline` which has no body\n-  --> $DIR/inline_fn_without_body.rs:5:5\n+  --> $DIR/inline_fn_without_body.rs:7:5\n    |\n LL |       #[inline]\n    |  _____-^^^^^^^^\n@@ -9,15 +9,15 @@ LL | |     fn default_inline();\n    = note: `-D clippy::inline-fn-without-body` implied by `-D warnings`\n \n error: use of `#[inline]` on trait method `always_inline` which has no body\n-  --> $DIR/inline_fn_without_body.rs:8:5\n+  --> $DIR/inline_fn_without_body.rs:10:5\n    |\n LL |       #[inline(always)]\n    |  _____-^^^^^^^^^^^^^^^^\n LL | |     fn always_inline();\n    | |____- help: remove\n \n error: use of `#[inline]` on trait method `never_inline` which has no body\n-  --> $DIR/inline_fn_without_body.rs:11:5\n+  --> $DIR/inline_fn_without_body.rs:13:5\n    |\n LL |       #[inline(never)]\n    |  _____-^^^^^^^^^^^^^^^"}, {"sha": "6605c967c8e7e6323d659f0a7c645e0cd59832c2", "filename": "tests/ui/op_ref.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Fop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Fop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fop_ref.rs?ref=f21cd81949304a6ebc578e983d3725a834e652ec", "patch": "@@ -1,6 +1,8 @@\n #![allow(unused_variables, clippy::blacklisted_name)]\n-\n+#![warn(clippy::op_ref)]\n+#![allow(clippy::many_single_char_names)]\n use std::collections::HashSet;\n+use std::ops::BitAnd;\n \n fn main() {\n     let tracked_fds: HashSet<i32> = HashSet::new();\n@@ -18,4 +20,39 @@ fn main() {\n     if b < &a {\n         println!(\"OK\");\n     }\n+\n+    struct X(i32);\n+    impl BitAnd for X {\n+        type Output = X;\n+        fn bitand(self, rhs: X) -> X {\n+            X(self.0 & rhs.0)\n+        }\n+    }\n+    impl<'a> BitAnd<&'a X> for X {\n+        type Output = X;\n+        fn bitand(self, rhs: &'a X) -> X {\n+            X(self.0 & rhs.0)\n+        }\n+    }\n+    let x = X(1);\n+    let y = X(2);\n+    let z = x & &y;\n+\n+    #[derive(Copy, Clone)]\n+    struct Y(i32);\n+    impl BitAnd for Y {\n+        type Output = Y;\n+        fn bitand(self, rhs: Y) -> Y {\n+            Y(self.0 & rhs.0)\n+        }\n+    }\n+    impl<'a> BitAnd<&'a Y> for Y {\n+        type Output = Y;\n+        fn bitand(self, rhs: &'a Y) -> Y {\n+            Y(self.0 & rhs.0)\n+        }\n+    }\n+    let x = Y(1);\n+    let y = Y(2);\n+    let z = x & &y;\n }"}, {"sha": "0f6a45f905c8e15ced40977c9403fb3dbfdc64d6", "filename": "tests/ui/op_ref.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Fop_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f21cd81949304a6ebc578e983d3725a834e652ec/tests%2Fui%2Fop_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fop_ref.stderr?ref=f21cd81949304a6ebc578e983d3725a834e652ec", "patch": "@@ -1,5 +1,5 @@\n error: needlessly taken reference of both operands\n-  --> $DIR/op_ref.rs:10:15\n+  --> $DIR/op_ref.rs:12:15\n    |\n LL |     let foo = &5 - &6;\n    |               ^^^^^^^\n@@ -11,12 +11,20 @@ LL |     let foo = 5 - 6;\n    |               ^   ^\n \n error: taken reference of right operand\n-  --> $DIR/op_ref.rs:18:8\n+  --> $DIR/op_ref.rs:20:8\n    |\n LL |     if b < &a {\n    |        ^^^^--\n    |            |\n    |            help: use the right value directly: `a`\n \n-error: aborting due to 2 previous errors\n+error: taken reference of right operand\n+  --> $DIR/op_ref.rs:57:13\n+   |\n+LL |     let z = x & &y;\n+   |             ^^^^--\n+   |                 |\n+   |                 help: use the right value directly: `y`\n+\n+error: aborting due to 3 previous errors\n "}]}