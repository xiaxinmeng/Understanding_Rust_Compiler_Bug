{"sha": "5adf6943a7c3fadf42688d63204e40dff7326095", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZGY2OTQzYTdjM2ZhZGY0MjY4OGQ2MzIwNGU0MGRmZjczMjYwOTU=", "commit": {"author": {"name": "Austin Hicks", "email": "camlorn@camlorn.net", "date": "2016-11-22T20:03:55Z"}, "committer": {"name": "Austin Hicks", "email": "camlorn@camlorn.net", "date": "2016-12-14T17:28:23Z"}, "message": "Make tidy", "tree": {"sha": "6b296f02a301938c6f3316c62a206d322e22bcd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b296f02a301938c6f3316c62a206d322e22bcd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5adf6943a7c3fadf42688d63204e40dff7326095", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5adf6943a7c3fadf42688d63204e40dff7326095", "html_url": "https://github.com/rust-lang/rust/commit/5adf6943a7c3fadf42688d63204e40dff7326095", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5adf6943a7c3fadf42688d63204e40dff7326095/comments", "author": {"login": "ahicks92", "id": 6968705, "node_id": "MDQ6VXNlcjY5Njg3MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6968705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahicks92", "html_url": "https://github.com/ahicks92", "followers_url": "https://api.github.com/users/ahicks92/followers", "following_url": "https://api.github.com/users/ahicks92/following{/other_user}", "gists_url": "https://api.github.com/users/ahicks92/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahicks92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahicks92/subscriptions", "organizations_url": "https://api.github.com/users/ahicks92/orgs", "repos_url": "https://api.github.com/users/ahicks92/repos", "events_url": "https://api.github.com/users/ahicks92/events{/privacy}", "received_events_url": "https://api.github.com/users/ahicks92/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahicks92", "id": 6968705, "node_id": "MDQ6VXNlcjY5Njg3MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6968705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahicks92", "html_url": "https://github.com/ahicks92", "followers_url": "https://api.github.com/users/ahicks92/followers", "following_url": "https://api.github.com/users/ahicks92/following{/other_user}", "gists_url": "https://api.github.com/users/ahicks92/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahicks92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahicks92/subscriptions", "organizations_url": "https://api.github.com/users/ahicks92/orgs", "repos_url": "https://api.github.com/users/ahicks92/repos", "events_url": "https://api.github.com/users/ahicks92/events{/privacy}", "received_events_url": "https://api.github.com/users/ahicks92/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "487ef589d33bef46dad8ecd5e2c1cd1ef22ceffd", "url": "https://api.github.com/repos/rust-lang/rust/commits/487ef589d33bef46dad8ecd5e2c1cd1ef22ceffd", "html_url": "https://github.com/rust-lang/rust/commit/487ef589d33bef46dad8ecd5e2c1cd1ef22ceffd"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "93a9e1e700a5d65b0863f6dd4d100f7e575e1518", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5adf6943a7c3fadf42688d63204e40dff7326095/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5adf6943a7c3fadf42688d63204e40dff7326095/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=5adf6943a7c3fadf42688d63204e40dff7326095", "patch": "@@ -550,7 +550,7 @@ impl<'a, 'gcx, 'tcx> Struct {\n         };\n \n         // 1-member and 2-member structs don't optimize.\n-        // In addition, large bodies of code in trans assume that 2-element structs can become pairs.\n+        // In addition, code in trans assume that 2-element structs can become pairs.\n         // It's easier to just short-circuit here.\n         let can_optimize_struct = fields.len() > 2;\n \n@@ -571,7 +571,11 @@ impl<'a, 'gcx, 'tcx> Struct {\n \n         if optimize {\n             let start = if let StructKind::EnumVariant = kind {1} else {0};\n-            let end = if let StructKind::MaybeUnsizedUnivariant = kind { fields.len()-1 } else { fields.len() };\n+            let end = if let StructKind::MaybeUnsizedUnivariant = kind {\n+                fields.len()-1\n+            } else {\n+                fields.len()\n+            };\n             if end > start {\n                 let optimizing  = &mut inverse_memory_index[start..end];\n                 if sort_ascending {\n@@ -633,7 +637,7 @@ impl<'a, 'gcx, 'tcx> Struct {\n         // If field 5 has offset 0, offsets[0] is 5, and memory_index[5] should be 0.\n         // Field 5 would be the first element, so memory_index is i:\n         // Note: if we didn't optimize, it's already right.\n-        \n+\n         if optimize {\n             ret.memory_index = vec![0; inverse_memory_index.len()];\n \n@@ -1071,7 +1075,8 @@ impl<'a, 'gcx, 'tcx> Layout {\n             // Odd unit types.\n             ty::TyFnDef(..) => {\n                 Univariant {\n-                    variant: Struct::new(dl, &vec![], attr::ReprAny, StructKind::AlwaysSizedUnivariant, ty)?,\n+                    variant: Struct::new(dl, &vec![],\n+                      attr::ReprAny, StructKind::AlwaysSizedUnivariant, ty)?,\n                     non_zero: false\n                 }\n             }\n@@ -1094,7 +1099,8 @@ impl<'a, 'gcx, 'tcx> Layout {\n             }\n \n             ty::TyTuple(tys) => {\n-                // FIXME(camlorn): if we ever allow unsized tuples, this needs to be checked in the same way it is for univariant.\n+                // FIXME(camlorn): if we ever allow unsized tuples, this needs to be checked.\n+                // See the univariant case below to learn how.\n                 let st = Struct::new(dl,\n                     &tys.iter().map(|ty| ty.layout(infcx))\n                       .collect::<Result<Vec<_>, _>>()?,\n@@ -1131,7 +1137,8 @@ impl<'a, 'gcx, 'tcx> Layout {\n                     assert_eq!(hint, attr::ReprAny);\n \n                     return success(Univariant {\n-                        variant: Struct::new(dl, &vec![], hint, StructKind::AlwaysSizedUnivariant, ty)?,\n+                        variant: Struct::new(dl, &vec![],\n+                          hint, StructKind::AlwaysSizedUnivariant, ty)?,\n                         non_zero: false\n                     });\n                 }\n@@ -1164,10 +1171,12 @@ impl<'a, 'gcx, 'tcx> Layout {\n                         StructKind::AlwaysSizedUnivariant\n                     } else {\n                         use middle::region::ROOT_CODE_EXTENT;\n-                        let param_env = tcx.construct_parameter_environment(DUMMY_SP, def.did, ROOT_CODE_EXTENT);\n+                        let param_env = tcx.construct_parameter_environment(DUMMY_SP,\n+                          def.did, ROOT_CODE_EXTENT);\n                         let fields = &def.variants[0].fields;\n                         let last_field = &fields[fields.len()-1];\n-                        let always_sized = last_field.ty(tcx, param_env.free_substs).is_sized(tcx, &param_env, DUMMY_SP);\n+                        let always_sized = last_field.ty(tcx, param_env.free_substs)\n+                          .is_sized(tcx, &param_env, DUMMY_SP);\n                         if !always_sized { StructKind::MaybeUnsizedUnivariant }\n                         else { StructKind::AlwaysSizedUnivariant }\n                     };"}]}