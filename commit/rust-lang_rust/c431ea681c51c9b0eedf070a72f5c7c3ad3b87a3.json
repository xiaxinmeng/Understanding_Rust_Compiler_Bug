{"sha": "c431ea681c51c9b0eedf070a72f5c7c3ad3b87a3", "node_id": "C_kwDOAAsO6NoAKGM0MzFlYTY4MWM1MWM5YjBlZWRmMDcwYTcyZjVjN2MzYWQzYjg3YTM", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-10-01T16:45:07Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-10-01T16:45:07Z"}, "message": "Remove several unused methods from MiscMethods", "tree": {"sha": "c1b81ce9c6d0b0b7db62e8b4e6fd686c76ae2d46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1b81ce9c6d0b0b7db62e8b4e6fd686c76ae2d46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c431ea681c51c9b0eedf070a72f5c7c3ad3b87a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c431ea681c51c9b0eedf070a72f5c7c3ad3b87a3", "html_url": "https://github.com/rust-lang/rust/commit/c431ea681c51c9b0eedf070a72f5c7c3ad3b87a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c431ea681c51c9b0eedf070a72f5c7c3ad3b87a3/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c91ec46525e5f2bc51d7d01af8bb8d24d7d71ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c91ec46525e5f2bc51d7d01af8bb8d24d7d71ae", "html_url": "https://github.com/rust-lang/rust/commit/7c91ec46525e5f2bc51d7d01af8bb8d24d7d71ae"}], "stats": {"total": 54, "additions": 10, "deletions": 44}, "files": [{"sha": "62a61eb8548da6b9d2a662ddb3be71b139297424", "filename": "compiler/rustc_codegen_gcc/src/context.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c431ea681c51c9b0eedf070a72f5c7c3ad3b87a3/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c431ea681c51c9b0eedf070a72f5c7c3ad3b87a3/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs?ref=c431ea681c51c9b0eedf070a72f5c7c3ad3b87a3", "patch": "@@ -416,10 +416,6 @@ impl<'gcc, 'tcx> MiscMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n         self.codegen_unit\n     }\n \n-    fn used_statics(&self) -> &RefCell<Vec<RValue<'gcc>>> {\n-        unimplemented!();\n-    }\n-\n     fn set_frame_pointer_type(&self, _llfn: RValue<'gcc>) {\n         // TODO(antoyo)\n     }\n@@ -428,10 +424,6 @@ impl<'gcc, 'tcx> MiscMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n         // TODO(antoyo)\n     }\n \n-    fn create_used_variable(&self) {\n-        unimplemented!();\n-    }\n-\n     fn declare_c_main(&self, fn_type: Self::Type) -> Option<Self::Function> {\n         if self.get_declared_value(\"main\").is_none() {\n             Some(self.declare_cfn(\"main\", fn_type))\n@@ -443,14 +435,6 @@ impl<'gcc, 'tcx> MiscMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n             None\n         }\n     }\n-\n-    fn compiler_used_statics(&self) -> &RefCell<Vec<RValue<'gcc>>> {\n-        unimplemented!()\n-    }\n-\n-    fn create_compiler_used_variable(&self) {\n-        unimplemented!()\n-    }\n }\n \n impl<'gcc, 'tcx> HasTyCtxt<'tcx> for CodegenCx<'gcc, 'tcx> {"}, {"sha": "5b2bbdb4bde1eb09605d6282c187692a4d54582e", "filename": "compiler/rustc_codegen_llvm/src/base.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c431ea681c51c9b0eedf070a72f5c7c3ad3b87a3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c431ea681c51c9b0eedf070a72f5c7c3ad3b87a3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs?ref=c431ea681c51c9b0eedf070a72f5c7c3ad3b87a3", "patch": "@@ -19,6 +19,8 @@ use crate::context::CodegenCx;\n use crate::llvm;\n use crate::value::Value;\n \n+use cstr::cstr;\n+\n use rustc_codegen_ssa::base::maybe_create_entry_wrapper;\n use rustc_codegen_ssa::mono_item::MonoItemExt;\n use rustc_codegen_ssa::traits::*;\n@@ -107,11 +109,14 @@ pub fn compile_codegen_unit(tcx: TyCtxt<'_>, cgu_name: Symbol) -> (ModuleCodegen\n             }\n \n             // Create the llvm.used and llvm.compiler.used variables.\n-            if !cx.used_statics().borrow().is_empty() {\n-                cx.create_used_variable()\n+            if !cx.used_statics.borrow().is_empty() {\n+                cx.create_used_variable_impl(cstr!(\"llvm.used\"), &*cx.used_statics.borrow());\n             }\n-            if !cx.compiler_used_statics().borrow().is_empty() {\n-                cx.create_compiler_used_variable()\n+            if !cx.compiler_used_statics.borrow().is_empty() {\n+                cx.create_used_variable_impl(\n+                    cstr!(\"llvm.compiler.used\"),\n+                    &*cx.compiler_used_statics.borrow(),\n+                );\n             }\n \n             // Run replace-all-uses-with for statics that need it. This must"}, {"sha": "79ddfd884dfac69f29fca10fed4063dda0c7c226", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c431ea681c51c9b0eedf070a72f5c7c3ad3b87a3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c431ea681c51c9b0eedf070a72f5c7c3ad3b87a3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=c431ea681c51c9b0eedf070a72f5c7c3ad3b87a3", "patch": "@@ -458,7 +458,7 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n         self.coverage_cx.as_ref()\n     }\n \n-    fn create_used_variable_impl(&self, name: &'static CStr, values: &[&'ll Value]) {\n+    pub(crate) fn create_used_variable_impl(&self, name: &'static CStr, values: &[&'ll Value]) {\n         let section = cstr!(\"llvm.metadata\");\n         let array = self.const_array(self.type_ptr_to(self.type_i8()), values);\n \n@@ -556,14 +556,6 @@ impl<'ll, 'tcx> MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         self.codegen_unit\n     }\n \n-    fn used_statics(&self) -> &RefCell<Vec<&'ll Value>> {\n-        &self.used_statics\n-    }\n-\n-    fn compiler_used_statics(&self) -> &RefCell<Vec<&'ll Value>> {\n-        &self.compiler_used_statics\n-    }\n-\n     fn set_frame_pointer_type(&self, llfn: &'ll Value) {\n         if let Some(attr) = attributes::frame_pointer_type_attr(self) {\n             attributes::apply_to_llfn(llfn, llvm::AttributePlace::Function, &[attr]);\n@@ -577,17 +569,6 @@ impl<'ll, 'tcx> MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         attributes::apply_to_llfn(llfn, llvm::AttributePlace::Function, &attrs);\n     }\n \n-    fn create_used_variable(&self) {\n-        self.create_used_variable_impl(cstr!(\"llvm.used\"), &*self.used_statics.borrow());\n-    }\n-\n-    fn create_compiler_used_variable(&self) {\n-        self.create_used_variable_impl(\n-            cstr!(\"llvm.compiler.used\"),\n-            &*self.compiler_used_statics.borrow(),\n-        );\n-    }\n-\n     fn declare_c_main(&self, fn_type: Self::Type) -> Option<Self::Function> {\n         if self.get_declared_value(\"main\").is_none() {\n             Some(self.declare_cfn(\"main\", llvm::UnnamedAddr::Global, fn_type))"}, {"sha": "04e2b8796c46a21d7b12a798919c27179cbeeecb", "filename": "compiler/rustc_codegen_ssa/src/traits/misc.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c431ea681c51c9b0eedf070a72f5c7c3ad3b87a3/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c431ea681c51c9b0eedf070a72f5c7c3ad3b87a3/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmisc.rs?ref=c431ea681c51c9b0eedf070a72f5c7c3ad3b87a3", "patch": "@@ -15,12 +15,8 @@ pub trait MiscMethods<'tcx>: BackendTypes {\n     fn eh_personality(&self) -> Self::Value;\n     fn sess(&self) -> &Session;\n     fn codegen_unit(&self) -> &'tcx CodegenUnit<'tcx>;\n-    fn used_statics(&self) -> &RefCell<Vec<Self::Value>>;\n-    fn compiler_used_statics(&self) -> &RefCell<Vec<Self::Value>>;\n     fn set_frame_pointer_type(&self, llfn: Self::Function);\n     fn apply_target_cpu_attr(&self, llfn: Self::Function);\n-    fn create_used_variable(&self);\n-    fn create_compiler_used_variable(&self);\n     /// Declares the extern \"C\" main function for the entry point. Returns None if the symbol already exists.\n     fn declare_c_main(&self, fn_type: Self::Type) -> Option<Self::Function>;\n }"}]}