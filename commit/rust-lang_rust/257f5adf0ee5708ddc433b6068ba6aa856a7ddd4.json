{"sha": "257f5adf0ee5708ddc433b6068ba6aa856a7ddd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1N2Y1YWRmMGVlNTcwOGRkYzQzM2I2MDY4YmE2YWE4NTZhN2RkZDQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-09-10T15:23:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-10T15:23:18Z"}, "message": "Rollup merge of #88578 - notriddle:notriddle/suggest-add-reference-to-for-loop-iter, r=nagisa\n\nfix(rustc): suggest `items` be borrowed in `for i in items[x..]`\n\nFixes #87994", "tree": {"sha": "ab8b2b03e150ce6996be2a99565fe84da8dc5b81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab8b2b03e150ce6996be2a99565fe84da8dc5b81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/257f5adf0ee5708ddc433b6068ba6aa856a7ddd4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhO3hmCRBK7hj4Ov3rIwAAkfAIAA0dtpjgFDwCHuBrdXmWKwpd\nnzS6uG9yAjpBE2vgn3f3vwc2hoN75F3YmUMQ5FJ6gdHpqtEjwe5oV8Ho3w9/urMm\nWT8HkO8pqWTltHOJ8hDaYLndPA6HW9vAVuTVl0eO5+pYdilFqYUZGoHBgluKrXkU\nttdTZdc7Xf0/YvxSyXeK60ixoNcW7KhUZ1HqQi0wNgIg58f/y2hNV8UxVC+11Wml\nyjmmyNANSSMApXHesQ8y96oXyVyEMNRlLy9QUncnnQvq0V/U9lgHiUcI7IR6cwr7\nt66C65kBQ6AWQ2LiHOPN9+s+CxUbZLXL7gQsNCPeWDBX6+t8X7QrLLzDnjU1hZA=\n=SMjX\n-----END PGP SIGNATURE-----\n", "payload": "tree ab8b2b03e150ce6996be2a99565fe84da8dc5b81\nparent dc003dd49e5599a0de22653d6bd4aaa8d460234e\nparent d6ff916c2fe6a47f52fc14e4f6d85e92d07e5e76\nauthor Manish Goregaokar <manishsmail@gmail.com> 1631287398 -0700\ncommitter GitHub <noreply@github.com> 1631287398 -0700\n\nRollup merge of #88578 - notriddle:notriddle/suggest-add-reference-to-for-loop-iter, r=nagisa\n\nfix(rustc): suggest `items` be borrowed in `for i in items[x..]`\n\nFixes #87994\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/257f5adf0ee5708ddc433b6068ba6aa856a7ddd4", "html_url": "https://github.com/rust-lang/rust/commit/257f5adf0ee5708ddc433b6068ba6aa856a7ddd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/257f5adf0ee5708ddc433b6068ba6aa856a7ddd4/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc003dd49e5599a0de22653d6bd4aaa8d460234e", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc003dd49e5599a0de22653d6bd4aaa8d460234e", "html_url": "https://github.com/rust-lang/rust/commit/dc003dd49e5599a0de22653d6bd4aaa8d460234e"}, {"sha": "d6ff916c2fe6a47f52fc14e4f6d85e92d07e5e76", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6ff916c2fe6a47f52fc14e4f6d85e92d07e5e76", "html_url": "https://github.com/rust-lang/rust/commit/d6ff916c2fe6a47f52fc14e4f6d85e92d07e5e76"}], "stats": {"total": 111, "additions": 105, "deletions": 6}, "files": [{"sha": "9371ff3405eb04aefe6c3eca22c305faffd2349e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/257f5adf0ee5708ddc433b6068ba6aa856a7ddd4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257f5adf0ee5708ddc433b6068ba6aa856a7ddd4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=257f5adf0ee5708ddc433b6068ba6aa856a7ddd4", "patch": "@@ -23,7 +23,7 @@ use rustc_middle::ty::{\n use rustc_middle::ty::{TypeAndMut, TypeckResults};\n use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::{BytePos, MultiSpan, Span, DUMMY_SP};\n+use rustc_span::{BytePos, DesugaringKind, ExpnKind, ForLoopLoc, MultiSpan, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n use std::fmt;\n \n@@ -680,7 +680,13 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         points_at_arg: bool,\n         has_custom_message: bool,\n     ) -> bool {\n-        if !points_at_arg {\n+        let span = obligation.cause.span;\n+        let points_at_for_iter = matches!(\n+            span.ctxt().outer_expn_data().kind,\n+            ExpnKind::Desugaring(DesugaringKind::ForLoop(ForLoopLoc::IntoIter))\n+        );\n+\n+        if !points_at_arg && !points_at_for_iter {\n             return false;\n         }\n \n@@ -695,7 +701,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         never_suggest_borrow.push(self.tcx.get_diagnostic_item(sym::send_trait).unwrap());\n \n-        let span = obligation.cause.span;\n         let param_env = obligation.param_env;\n         let trait_ref = trait_ref.skip_binder();\n \n@@ -754,7 +759,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     );\n \n                     // This if is to prevent a special edge-case\n-                    if !span.from_expansion() {\n+                    if matches!(\n+                        span.ctxt().outer_expn_data().kind,\n+                        ExpnKind::Root\n+                            | ExpnKind::Desugaring(DesugaringKind::ForLoop(ForLoopLoc::IntoIter))\n+                    ) {\n                         // We don't want a borrowing suggestion on the fields in structs,\n                         // ```\n                         // struct Foo {"}, {"sha": "ce3ab6b599864ded9ba9cf5b66316137b0af37da", "filename": "src/test/ui/issues/issue-20605.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/257f5adf0ee5708ddc433b6068ba6aa856a7ddd4/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/257f5adf0ee5708ddc433b6068ba6aa856a7ddd4/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr?ref=257f5adf0ee5708ddc433b6068ba6aa856a7ddd4", "patch": "@@ -2,9 +2,12 @@ error[E0277]: the size for values of type `dyn Iterator<Item = &'a mut u8>` cann\n   --> $DIR/issue-20605.rs:2:17\n    |\n LL |     for item in *things { *item = 0 }\n-   |                 ^^^^^^^ doesn't have a size known at compile-time\n+   |                 ^^^^^^^\n+   |                 |\n+   |                 expected an implementor of trait `IntoIterator`\n+   |                 help: consider mutably borrowing here: `&mut *things`\n    |\n-   = help: the trait `Sized` is not implemented for `dyn Iterator<Item = &'a mut u8>`\n+   = note: the trait bound `dyn Iterator<Item = &'a mut u8>: IntoIterator` is not satisfied\n    = note: required because of the requirements on the impl of `IntoIterator` for `dyn Iterator<Item = &'a mut u8>`\n note: required by `into_iter`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL"}, {"sha": "ecb7f54ea250a95a07fdf5f431b3dee063661fc9", "filename": "src/test/ui/suggestions/slice-issue-87994.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/257f5adf0ee5708ddc433b6068ba6aa856a7ddd4/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257f5adf0ee5708ddc433b6068ba6aa856a7ddd4/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.rs?ref=257f5adf0ee5708ddc433b6068ba6aa856a7ddd4", "patch": "@@ -0,0 +1,16 @@\n+fn main() {\n+  let v = vec![1i32, 2, 3];\n+  for _ in v[1..] {\n+    //~^ ERROR [i32]` is not an iterator [E0277]\n+    //~^^ ERROR known at compilation time\n+  }\n+  struct K {\n+    n: i32,\n+  }\n+  let mut v2 = vec![K { n: 1 }, K { n: 1 }, K { n: 1 }];\n+  for i2 in v2[1..] {\n+    //~^ ERROR [K]` is not an iterator [E0277]\n+    //~^^ ERROR known at compilation time\n+    i2.n = 2;\n+  }\n+}"}, {"sha": "018f62e783daf4bcc995691ee0071d0b77d407fd", "filename": "src/test/ui/suggestions/slice-issue-87994.stderr", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/257f5adf0ee5708ddc433b6068ba6aa856a7ddd4/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/257f5adf0ee5708ddc433b6068ba6aa856a7ddd4/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr?ref=257f5adf0ee5708ddc433b6068ba6aa856a7ddd4", "patch": "@@ -0,0 +1,71 @@\n+error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n+  --> $DIR/slice-issue-87994.rs:3:12\n+   |\n+LL |   for _ in v[1..] {\n+   |            ^^^^^^\n+   |            |\n+   |            expected an implementor of trait `IntoIterator`\n+   |            help: consider borrowing here: `&v[1..]`\n+   |\n+   = note: the trait bound `[i32]: IntoIterator` is not satisfied\n+   = note: required because of the requirements on the impl of `IntoIterator` for `[i32]`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `[i32]` is not an iterator\n+  --> $DIR/slice-issue-87994.rs:3:12\n+   |\n+LL |   for _ in v[1..] {\n+   |            ^^^^^^\n+   |            |\n+   |            expected an implementor of trait `IntoIterator`\n+   |            help: consider borrowing here: `&v[1..]`\n+   |\n+   = note: the trait bound `[i32]: IntoIterator` is not satisfied\n+   = note: required because of the requirements on the impl of `IntoIterator` for `[i32]`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: the size for values of type `[K]` cannot be known at compilation time\n+  --> $DIR/slice-issue-87994.rs:11:13\n+   |\n+LL |   for i2 in v2[1..] {\n+   |             ^^^^^^^\n+   |             |\n+   |             expected an implementor of trait `IntoIterator`\n+   |             help: consider borrowing here: `&v2[1..]`\n+   |\n+   = note: the trait bound `[K]: IntoIterator` is not satisfied\n+   = note: required because of the requirements on the impl of `IntoIterator` for `[K]`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `[K]` is not an iterator\n+  --> $DIR/slice-issue-87994.rs:11:13\n+   |\n+LL |   for i2 in v2[1..] {\n+   |             ^^^^^^^\n+   |             |\n+   |             expected an implementor of trait `IntoIterator`\n+   |             help: consider borrowing here: `&v2[1..]`\n+   |\n+   = note: the trait bound `[K]: IntoIterator` is not satisfied\n+   = note: required because of the requirements on the impl of `IntoIterator` for `[K]`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}