{"sha": "fe129a022a0ae1c458b065725a819faabcbdb2b6", "node_id": "C_kwDOAAsO6NoAKGZlMTI5YTAyMmEwYWUxYzQ1OGIwNjU3MjVhODE5ZmFhYmNiZGIyYjY", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-04-10T11:55:57Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-04-10T11:55:57Z"}, "message": "Merge from rustc", "tree": {"sha": "4170b5848a83ffda9911baa65f831ba8e634723b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4170b5848a83ffda9911baa65f831ba8e634723b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe129a022a0ae1c458b065725a819faabcbdb2b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe129a022a0ae1c458b065725a819faabcbdb2b6", "html_url": "https://github.com/rust-lang/rust/commit/fe129a022a0ae1c458b065725a819faabcbdb2b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe129a022a0ae1c458b065725a819faabcbdb2b6/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a937f49c178864c2b177eb94890702ccb2d25f35", "url": "https://api.github.com/repos/rust-lang/rust/commits/a937f49c178864c2b177eb94890702ccb2d25f35", "html_url": "https://github.com/rust-lang/rust/commit/a937f49c178864c2b177eb94890702ccb2d25f35"}, {"sha": "d048c1130f228a39856cb67d4045ba965a5d939f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d048c1130f228a39856cb67d4045ba965a5d939f", "html_url": "https://github.com/rust-lang/rust/commit/d048c1130f228a39856cb67d4045ba965a5d939f"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "0bb1775aae9cfb23c2c700c1cfb73109c927de67", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe129a022a0ae1c458b065725a819faabcbdb2b6/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe129a022a0ae1c458b065725a819faabcbdb2b6/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=fe129a022a0ae1c458b065725a819faabcbdb2b6", "patch": "@@ -122,7 +122,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n \n         let sized_trait = need!(cx.tcx.lang_items().sized_trait());\n \n-        let preds = traits::elaborate_predicates(cx.tcx, cx.param_env.caller_bounds().iter())\n+        let preds = traits::elaborate(cx.tcx, cx.param_env.caller_bounds().iter())\n             .filter(|p| !p.is_global())\n             .filter_map(|pred| {\n                 // Note that we do not want to deal with qualified predicates here."}, {"sha": "11b908e7e53d1c3a79c7f7c92ffa3cafb4767928", "filename": "clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe129a022a0ae1c458b065725a819faabcbdb2b6/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe129a022a0ae1c458b065725a819faabcbdb2b6/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=fe129a022a0ae1c458b065725a819faabcbdb2b6", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet;\n-use rustc_ast::ast::{Item, ItemKind, Ty, TyKind};\n+use rustc_ast::ast::{Item, ItemKind, Ty, TyKind, StaticItem, ConstItem};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -100,13 +100,13 @@ impl EarlyLintPass for RedundantStaticLifetimes {\n         }\n \n         if !item.span.from_expansion() {\n-            if let ItemKind::Const(_, ref var_type, _) = item.kind {\n+            if let ItemKind::Const(box ConstItem { ty: ref var_type, .. }) = item.kind {\n                 Self::visit_type(var_type, cx, \"constants have by default a `'static` lifetime\");\n                 // Don't check associated consts because `'static` cannot be elided on those (issue\n                 // #2438)\n             }\n \n-            if let ItemKind::Static(ref var_type, _, _) = item.kind {\n+            if let ItemKind::Static(box StaticItem { ty: ref var_type,.. }) = item.kind {\n                 Self::visit_type(var_type, cx, \"statics have by default a `'static` lifetime\");\n             }\n         }"}, {"sha": "c5b58b0c060c0b32d812d78308d1d841209a28a1", "filename": "clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe129a022a0ae1c458b065725a819faabcbdb2b6/clippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe129a022a0ae1c458b065725a819faabcbdb2b6/clippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fast_utils.rs?ref=fe129a022a0ae1c458b065725a819faabcbdb2b6", "patch": "@@ -286,8 +286,8 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n     match (l, r) {\n         (ExternCrate(l), ExternCrate(r)) => l == r,\n         (Use(l), Use(r)) => eq_use_tree(l, r),\n-        (Static(lt, lm, le), Static(rt, rm, re)) => lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re),\n-        (Const(ld, lt, le), Const(rd, rt, re)) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n+        (Static(box ast::StaticItem { ty: lt, mutability: lm, expr: le}), Static(box ast::StaticItem { ty: rt, mutability: rm, expr: re})) => lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re),\n+        (Const(box ast::ConstItem { defaultness: ld, ty: lt, expr: le}), Const(box ast::ConstItem { defaultness: rd, ty: rt, expr: re} )) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n         (\n             Fn(box ast::Fn {\n                 defaultness: ld,\n@@ -451,7 +451,7 @@ pub fn eq_foreign_item_kind(l: &ForeignItemKind, r: &ForeignItemKind) -> bool {\n pub fn eq_assoc_item_kind(l: &AssocItemKind, r: &AssocItemKind) -> bool {\n     use AssocItemKind::*;\n     match (l, r) {\n-        (Const(ld, lt, le), Const(rd, rt, re)) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n+        (Const(box ast::ConstItem { defaultness: ld, ty: lt, expr: le}), Const(box ast::ConstItem { defaultness: rd, ty: rt, expr: re})) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n         (\n             Fn(box ast::Fn {\n                 defaultness: ld,"}, {"sha": "9051cf51658df061b6b94bf213db999f6cb2334e", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe129a022a0ae1c458b065725a819faabcbdb2b6/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe129a022a0ae1c458b065725a819faabcbdb2b6/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=fe129a022a0ae1c458b065725a819faabcbdb2b6", "patch": "@@ -2104,7 +2104,7 @@ pub fn fn_has_unsatisfiable_preds(cx: &LateContext<'_>, did: DefId) -> bool {\n         .filter_map(|(p, _)| if p.is_global() { Some(*p) } else { None });\n     traits::impossible_predicates(\n         cx.tcx,\n-        traits::elaborate_predicates(cx.tcx, predicates)\n+        traits::elaborate(cx.tcx, predicates)\n             .collect::<Vec<_>>(),\n     )\n }"}, {"sha": "354b6d71aa4664088c2a2614a18110cfcae720cd", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe129a022a0ae1c458b065725a819faabcbdb2b6/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe129a022a0ae1c458b065725a819faabcbdb2b6/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=fe129a022a0ae1c458b065725a819faabcbdb2b6", "patch": "@@ -301,13 +301,13 @@ fn check_terminator<'tcx>(\n         | TerminatorKind::Goto { .. }\n         | TerminatorKind::Return\n         | TerminatorKind::Resume\n+        | TerminatorKind::Terminate\n         | TerminatorKind::Unreachable => Ok(()),\n \n         TerminatorKind::Drop { place, .. } => check_place(tcx, *place, span, body),\n \n         TerminatorKind::SwitchInt { discr, targets: _ } => check_operand(tcx, discr, span, body),\n \n-        TerminatorKind::Abort => Err((span, \"abort is not stable in const fn\".into())),\n         TerminatorKind::GeneratorDrop | TerminatorKind::Yield { .. } => {\n             Err((span, \"const fn generators are unstable\".into()))\n         },\n@@ -318,7 +318,7 @@ fn check_terminator<'tcx>(\n             from_hir_call: _,\n             destination: _,\n             target: _,\n-            cleanup: _,\n+            unwind: _,\n             fn_span: _,\n         } => {\n             let fn_ty = func.ty(body, tcx);\n@@ -361,7 +361,7 @@ fn check_terminator<'tcx>(\n             expected: _,\n             msg: _,\n             target: _,\n-            cleanup: _,\n+            unwind: _,\n         } => check_operand(tcx, cond, span, body),\n \n         TerminatorKind::InlineAsm { .. } => Err((span, \"cannot use inline assembly in const fn\".into())),"}]}