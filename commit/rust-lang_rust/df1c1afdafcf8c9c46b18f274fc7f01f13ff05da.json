{"sha": "df1c1afdafcf8c9c46b18f274fc7f01f13ff05da", "node_id": "C_kwDOAAsO6NoAKGRmMWMxYWZkYWZjZjhjOWM0NmIxOGYyNzRmYzdmMDFmMTNmZjA1ZGE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-31T17:45:45Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-31T17:45:45Z"}, "message": "Check that RPITs are compatible with the opaques inferred during HIR typeck too", "tree": {"sha": "5cc3eb5122eec9229e2ae39d5000854496ae7aa9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cc3eb5122eec9229e2ae39d5000854496ae7aa9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df1c1afdafcf8c9c46b18f274fc7f01f13ff05da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df1c1afdafcf8c9c46b18f274fc7f01f13ff05da", "html_url": "https://github.com/rust-lang/rust/commit/df1c1afdafcf8c9c46b18f274fc7f01f13ff05da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df1c1afdafcf8c9c46b18f274fc7f01f13ff05da/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d09b990d7e3d8539a3b9655894e7e05dcc9ebf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d09b990d7e3d8539a3b9655894e7e05dcc9ebf2", "html_url": "https://github.com/rust-lang/rust/commit/3d09b990d7e3d8539a3b9655894e7e05dcc9ebf2"}], "stats": {"total": 199, "additions": 45, "deletions": 154}, "files": [{"sha": "4d96a7ff4c3d7de99c774c6ce0c1ff6b25787d65", "filename": "compiler/rustc_hir_analysis/src/collect/type_of/opaque.rs", "status": "modified", "additions": 36, "deletions": 29, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/df1c1afdafcf8c9c46b18f274fc7f01f13ff05da/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df1c1afdafcf8c9c46b18f274fc7f01f13ff05da/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of%2Fopaque.rs?ref=df1c1afdafcf8c9c46b18f274fc7f01f13ff05da", "patch": "@@ -1,3 +1,4 @@\n+use rustc_errors::StashKey;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{self as hir, Expr, ImplItem, Item, Node, TraitItem};\n@@ -210,12 +211,40 @@ pub(super) fn find_opaque_ty_constraints_for_rpit<'tcx>(\n     def_id: LocalDefId,\n     owner_def_id: LocalDefId,\n ) -> Ty<'_> {\n-    let concrete = tcx.mir_borrowck(owner_def_id).concrete_opaque_types.get(&def_id).copied();\n+    let tables = tcx.typeck(owner_def_id);\n \n-    if let Some(concrete) = concrete {\n+    // Check that all of the opaques we inferred during HIR are compatible.\n+    // FIXME: We explicitly don't check that the types inferred during HIR\n+    // typeck are compatible with the one that we infer during borrowck,\n+    // because that one actually sometimes has consts evaluated eagerly so\n+    // using strict type equality will fail.\n+    let mut hir_opaque_ty: Option<ty::OpaqueHiddenType<'tcx>> = None;\n+    if tables.tainted_by_errors.is_none() {\n+        for (&opaque_type_key, &hidden_type) in &tables.concrete_opaque_types {\n+            if opaque_type_key.def_id != def_id {\n+                continue;\n+            }\n+            let concrete_type = tcx.erase_regions(\n+                hidden_type.remap_generic_params_to_declaration_params(opaque_type_key, tcx, true),\n+            );\n+            if let Some(prev) = &mut hir_opaque_ty {\n+                if concrete_type.ty != prev.ty && !(concrete_type, prev.ty).references_error() {\n+                    prev.report_mismatch(&concrete_type, def_id, tcx).stash(\n+                        tcx.def_span(opaque_type_key.def_id),\n+                        StashKey::OpaqueHiddenTypeMismatch,\n+                    );\n+                }\n+            } else {\n+                hir_opaque_ty = Some(concrete_type);\n+            }\n+        }\n+    }\n+\n+    let mir_opaque_ty = tcx.mir_borrowck(owner_def_id).concrete_opaque_types.get(&def_id).copied();\n+    if let Some(mir_opaque_ty) = mir_opaque_ty {\n         let scope = tcx.hir().local_def_id_to_hir_id(owner_def_id);\n         debug!(?scope);\n-        let mut locator = RpitConstraintChecker { def_id, tcx, found: concrete };\n+        let mut locator = RpitConstraintChecker { def_id, tcx, found: mir_opaque_ty };\n \n         match tcx.hir().get(scope) {\n             Node::Item(it) => intravisit::walk_item(&mut locator, it),\n@@ -224,38 +253,16 @@ pub(super) fn find_opaque_ty_constraints_for_rpit<'tcx>(\n             other => bug!(\"{:?} is not a valid scope for an opaque type item\", other),\n         }\n \n-        concrete.ty\n+        mir_opaque_ty.ty\n     } else {\n-        let tables = tcx.typeck(owner_def_id);\n         if let Some(guar) = tables.tainted_by_errors {\n-            // Some error in the\n-            // owner fn prevented us from populating\n+            // Some error in the owner fn prevented us from populating\n             // the `concrete_opaque_types` table.\n             tcx.ty_error(guar)\n         } else {\n             // Fall back to the RPIT we inferred during HIR typeck\n-            let mut opaque_ty: Option<ty::OpaqueHiddenType<'tcx>> = None;\n-            for (&opaque_type_key, &hidden_type) in &tables.concrete_opaque_types {\n-                if opaque_type_key.def_id != def_id {\n-                    continue;\n-                }\n-                let concrete_type =\n-                    tcx.erase_regions(hidden_type.remap_generic_params_to_declaration_params(\n-                        opaque_type_key,\n-                        tcx,\n-                        true,\n-                    ));\n-                if let Some(prev) = &mut opaque_ty {\n-                    if concrete_type.ty != prev.ty && !(concrete_type, prev.ty).references_error() {\n-                        prev.report_mismatch(&concrete_type, def_id, tcx).emit();\n-                    }\n-                } else {\n-                    opaque_ty = Some(concrete_type);\n-                }\n-            }\n-\n-            if let Some(opaque_ty) = opaque_ty {\n-                opaque_ty.ty\n+            if let Some(hir_opaque_ty) = hir_opaque_ty {\n+                hir_opaque_ty.ty\n             } else {\n                 // We failed to resolve the opaque type or it\n                 // resolves to itself. We interpret this as the"}, {"sha": "8cbffa14850fac3a5187fb83b6dbf1b6ef5674d5", "filename": "compiler/rustc_middle/src/ty/typeck_results.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df1c1afdafcf8c9c46b18f274fc7f01f13ff05da/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df1c1afdafcf8c9c46b18f274fc7f01f13ff05da/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs?ref=df1c1afdafcf8c9c46b18f274fc7f01f13ff05da", "patch": "@@ -155,10 +155,6 @@ pub struct TypeckResults<'tcx> {\n     /// We also store the type here, so that the compiler can use it as a hint\n     /// for figuring out hidden types, even if they are only set in dead code\n     /// (which doesn't show up in MIR).\n-    ///\n-    /// These types are mapped back to the opaque's identity substitutions\n-    /// (with erased regions), which is why we don't associated substs with any\n-    /// of these usages.\n     pub concrete_opaque_types: FxIndexMap<ty::OpaqueTypeKey<'tcx>, ty::OpaqueHiddenType<'tcx>>,\n \n     /// Tracks the minimum captures required for a closure;"}, {"sha": "e6d46b02706b1c523c13f4fb2b73e898c397498d", "filename": "tests/ui/chalkify/bugs/async.stderr", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/df1c1afdafcf8c9c46b18f274fc7f01f13ff05da/tests%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df1c1afdafcf8c9c46b18f274fc7f01f13ff05da/tests%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr?ref=df1c1afdafcf8c9c46b18f274fc7f01f13ff05da", "patch": "@@ -13,16 +13,9 @@ error: internal compiler error: projection clauses should be implied from elsewh\n LL | async fn foo(x: u32) -> u32 {\n    |                         ^^^query stack during panic:\n #0 [typeck] type-checking `foo`\n-#1 [thir_body] building THIR for `foo`\n-#2 [check_match] match-checking `foo`\n-#3 [mir_built] building MIR for `foo`\n-#4 [unsafety_check_result] unsafety-checking `foo`\n-#5 [mir_const] preparing `foo` for borrow checking\n-#6 [mir_promoted] promoting constants in MIR for `foo`\n-#7 [mir_borrowck] borrow-checking `foo`\n-#8 [type_of] computing type of `foo::{opaque#0}`\n-#9 [check_mod_item_types] checking item types in top-level module\n-#10 [analysis] running analysis passes on this crate\n+#1 [type_of] computing type of `foo::{opaque#0}`\n+#2 [check_mod_item_types] checking item types in top-level module\n+#3 [analysis] running analysis passes on this crate\n end of query stack\n error: aborting due to 2 previous errors\n "}, {"sha": "408abecc30d4426929f583034ecf1b58a6c246ca", "filename": "tests/ui/dyn-star/param-env-infer.next.stderr", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/df1c1afdafcf8c9c46b18f274fc7f01f13ff05da/tests%2Fui%2Fdyn-star%2Fparam-env-infer.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df1c1afdafcf8c9c46b18f274fc7f01f13ff05da/tests%2Fui%2Fdyn-star%2Fparam-env-infer.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fparam-env-infer.next.stderr?ref=df1c1afdafcf8c9c46b18f274fc7f01f13ff05da", "patch": "@@ -13,41 +13,6 @@ error[E0391]: cycle detected when computing type of `make_dyn_star::{opaque#0}`\n LL | fn make_dyn_star<'a, T: PointerLike + Debug + 'a>(t: T) -> impl PointerLike + Debug + 'a {\n    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires borrow-checking `make_dyn_star`...\n-  --> $DIR/param-env-infer.rs:11:1\n-   |\n-LL | fn make_dyn_star<'a, T: PointerLike + Debug + 'a>(t: T) -> impl PointerLike + Debug + 'a {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires promoting constants in MIR for `make_dyn_star`...\n-  --> $DIR/param-env-infer.rs:11:1\n-   |\n-LL | fn make_dyn_star<'a, T: PointerLike + Debug + 'a>(t: T) -> impl PointerLike + Debug + 'a {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires preparing `make_dyn_star` for borrow checking...\n-  --> $DIR/param-env-infer.rs:11:1\n-   |\n-LL | fn make_dyn_star<'a, T: PointerLike + Debug + 'a>(t: T) -> impl PointerLike + Debug + 'a {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires unsafety-checking `make_dyn_star`...\n-  --> $DIR/param-env-infer.rs:11:1\n-   |\n-LL | fn make_dyn_star<'a, T: PointerLike + Debug + 'a>(t: T) -> impl PointerLike + Debug + 'a {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires building MIR for `make_dyn_star`...\n-  --> $DIR/param-env-infer.rs:11:1\n-   |\n-LL | fn make_dyn_star<'a, T: PointerLike + Debug + 'a>(t: T) -> impl PointerLike + Debug + 'a {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires match-checking `make_dyn_star`...\n-  --> $DIR/param-env-infer.rs:11:1\n-   |\n-LL | fn make_dyn_star<'a, T: PointerLike + Debug + 'a>(t: T) -> impl PointerLike + Debug + 'a {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires building THIR for `make_dyn_star`...\n-  --> $DIR/param-env-infer.rs:11:1\n-   |\n-LL | fn make_dyn_star<'a, T: PointerLike + Debug + 'a>(t: T) -> impl PointerLike + Debug + 'a {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires type-checking `make_dyn_star`...\n   --> $DIR/param-env-infer.rs:11:1\n    |"}, {"sha": "c0c4cd5013e5fffaafe68a0f581fcd36b7d43cd5", "filename": "tests/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/df1c1afdafcf8c9c46b18f274fc7f01f13ff05da/tests%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df1c1afdafcf8c9c46b18f274fc7f01f13ff05da/tests%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=df1c1afdafcf8c9c46b18f274fc7f01f13ff05da", "patch": "@@ -4,41 +4,6 @@ error[E0391]: cycle detected when computing type of `cycle1::{opaque#0}`\n LL | fn cycle1() -> impl Clone {\n    |                ^^^^^^^^^^\n    |\n-note: ...which requires borrow-checking `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:12:1\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires promoting constants in MIR for `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:12:1\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires preparing `cycle1` for borrow checking...\n-  --> $DIR/auto-trait-leak.rs:12:1\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires unsafety-checking `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:12:1\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires building MIR for `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:12:1\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires match-checking `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:12:1\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires building THIR for `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:12:1\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires type-checking `cycle1`...\n   --> $DIR/auto-trait-leak.rs:14:5\n    |\n@@ -50,41 +15,6 @@ note: ...which requires computing type of `cycle2::{opaque#0}`...\n    |\n LL | fn cycle2() -> impl Clone {\n    |                ^^^^^^^^^^\n-note: ...which requires borrow-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:19:1\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires promoting constants in MIR for `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:19:1\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires preparing `cycle2` for borrow checking...\n-  --> $DIR/auto-trait-leak.rs:19:1\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires unsafety-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:19:1\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires building MIR for `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:19:1\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires match-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:19:1\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires building THIR for `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:19:1\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires type-checking `cycle2`...\n   --> $DIR/auto-trait-leak.rs:20:5\n    |"}, {"sha": "86661153a0d098a57e985b87256b0eb6e6d3e41a", "filename": "tests/ui/impl-trait/multiple-defining-usages-in-body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df1c1afdafcf8c9c46b18f274fc7f01f13ff05da/tests%2Fui%2Fimpl-trait%2Fmultiple-defining-usages-in-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df1c1afdafcf8c9c46b18f274fc7f01f13ff05da/tests%2Fui%2Fimpl-trait%2Fmultiple-defining-usages-in-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fmultiple-defining-usages-in-body.rs?ref=df1c1afdafcf8c9c46b18f274fc7f01f13ff05da", "patch": "@@ -4,9 +4,9 @@ impl Trait for () {}\n fn foo<T: Trait, U: Trait>() -> impl Trait {\n     //~^ WARN function cannot return without recursing [unconditional_recursion]\n     let a: T = foo::<T, U>();\n-    //~^ ERROR concrete type differs from previous defining opaque type use\n     loop {}\n     let _: T = foo::<U, T>();\n+    //~^ ERROR concrete type differs from previous defining opaque type use\n }\n \n fn main() {}"}, {"sha": "f3c090408b42e804f89fde74ab66b82fb7d35d2f", "filename": "tests/ui/impl-trait/multiple-defining-usages-in-body.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df1c1afdafcf8c9c46b18f274fc7f01f13ff05da/tests%2Fui%2Fimpl-trait%2Fmultiple-defining-usages-in-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df1c1afdafcf8c9c46b18f274fc7f01f13ff05da/tests%2Fui%2Fimpl-trait%2Fmultiple-defining-usages-in-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fmultiple-defining-usages-in-body.stderr?ref=df1c1afdafcf8c9c46b18f274fc7f01f13ff05da", "patch": "@@ -11,15 +11,15 @@ LL |     let a: T = foo::<T, U>();\n    = note: `#[warn(unconditional_recursion)]` on by default\n \n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/multiple-defining-usages-in-body.rs:6:16\n+  --> $DIR/multiple-defining-usages-in-body.rs:8:16\n    |\n-LL |     let a: T = foo::<T, U>();\n-   |                ^^^^^^^^^^^^^ expected `U`, got `T`\n+LL |     let _: T = foo::<U, T>();\n+   |                ^^^^^^^^^^^^^ expected `T`, got `U`\n    |\n note: previous use here\n-  --> $DIR/multiple-defining-usages-in-body.rs:9:16\n+  --> $DIR/multiple-defining-usages-in-body.rs:6:16\n    |\n-LL |     let _: T = foo::<U, T>();\n+LL |     let a: T = foo::<T, U>();\n    |                ^^^^^^^^^^^^^\n \n error: aborting due to previous error; 1 warning emitted"}]}