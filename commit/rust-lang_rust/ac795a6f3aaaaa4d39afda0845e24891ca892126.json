{"sha": "ac795a6f3aaaaa4d39afda0845e24891ca892126", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNzk1YTZmM2FhYWFhNGQzOWFmZGEwODQ1ZTI0ODkxY2E4OTIxMjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-09T13:51:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-09T13:51:00Z"}, "message": "Auto merge of #4960 - ThibsG:patterns_with_wildcard_#4640, r=flip1995\n\nNew lint: pats_with_wild_match_arm\n\nWildcard use with other pattern in same match arm.\n\nThe wildcard covers other(s) pattern(s) as it will match anyway.\n\nchangelog: add new lint when multiple patterns (including wildcard) are used in a match arm.\n\nFixes #4640.", "tree": {"sha": "09cb2047df08cd4a3da5784ee4201700b8e431cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09cb2047df08cd4a3da5784ee4201700b8e431cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac795a6f3aaaaa4d39afda0845e24891ca892126", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac795a6f3aaaaa4d39afda0845e24891ca892126", "html_url": "https://github.com/rust-lang/rust/commit/ac795a6f3aaaaa4d39afda0845e24891ca892126", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac795a6f3aaaaa4d39afda0845e24891ca892126/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50403de386a2cf63786a13d84393699e61ed91d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/50403de386a2cf63786a13d84393699e61ed91d7", "html_url": "https://github.com/rust-lang/rust/commit/50403de386a2cf63786a13d84393699e61ed91d7"}, {"sha": "0fa0df9efb9f34c8e0612bd0d0844417259873e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fa0df9efb9f34c8e0612bd0d0844417259873e9", "html_url": "https://github.com/rust-lang/rust/commit/0fa0df9efb9f34c8e0612bd0d0844417259873e9"}], "stats": {"total": 156, "additions": 145, "deletions": 11}, "files": [{"sha": "69694da152035f5be81209ce750e5cb5699fefcc", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac795a6f3aaaaa4d39afda0845e24891ca892126/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/ac795a6f3aaaaa4d39afda0845e24891ca892126/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=ac795a6f3aaaaa4d39afda0845e24891ca892126", "patch": "@@ -1361,6 +1361,7 @@ Released 2018-09-13\n [`while_let_on_iterator`]: https://rust-lang.github.io/rust-clippy/master/index.html#while_let_on_iterator\n [`wildcard_dependencies`]: https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_dependencies\n [`wildcard_enum_match_arm`]: https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_enum_match_arm\n+[`wildcard_in_or_patterns`]: https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_in_or_patterns\n [`write_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#write_literal\n [`write_with_newline`]: https://rust-lang.github.io/rust-clippy/master/index.html#write_with_newline\n [`writeln_empty_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#writeln_empty_string"}, {"sha": "4de256e9e72fddd4459108d6a7676636a27473ff", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac795a6f3aaaaa4d39afda0845e24891ca892126/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/ac795a6f3aaaaa4d39afda0845e24891ca892126/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=ac795a6f3aaaaa4d39afda0845e24891ca892126", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 345 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 346 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "1a112c0d37097c89312746c9910407a9c8fe3f18", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac795a6f3aaaaa4d39afda0845e24891ca892126/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac795a6f3aaaaa4d39afda0845e24891ca892126/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=ac795a6f3aaaaa4d39afda0845e24891ca892126", "patch": "@@ -600,6 +600,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         &matches::SINGLE_MATCH,\n         &matches::SINGLE_MATCH_ELSE,\n         &matches::WILDCARD_ENUM_MATCH_ARM,\n+        &matches::WILDCARD_IN_OR_PATTERNS,\n         &mem_discriminant::MEM_DISCRIMINANT_NON_ENUM,\n         &mem_forget::MEM_FORGET,\n         &mem_replace::MEM_REPLACE_OPTION_WITH_NONE,\n@@ -1188,6 +1189,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&matches::MATCH_REF_PATS),\n         LintId::of(&matches::MATCH_WILD_ERR_ARM),\n         LintId::of(&matches::SINGLE_MATCH),\n+        LintId::of(&matches::WILDCARD_IN_OR_PATTERNS),\n         LintId::of(&mem_discriminant::MEM_DISCRIMINANT_NON_ENUM),\n         LintId::of(&mem_replace::MEM_REPLACE_OPTION_WITH_NONE),\n         LintId::of(&mem_replace::MEM_REPLACE_WITH_DEFAULT),\n@@ -1462,6 +1464,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&map_unit_fn::OPTION_MAP_UNIT_FN),\n         LintId::of(&map_unit_fn::RESULT_MAP_UNIT_FN),\n         LintId::of(&matches::MATCH_AS_REF),\n+        LintId::of(&matches::WILDCARD_IN_OR_PATTERNS),\n         LintId::of(&methods::CHARS_NEXT_CMP),\n         LintId::of(&methods::CLONE_ON_COPY),\n         LintId::of(&methods::FILTER_NEXT),"}, {"sha": "6b5b4e4c4f0bb562d1dedaf8bbe890d5df5bd1c2", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ac795a6f3aaaaa4d39afda0845e24891ca892126/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac795a6f3aaaaa4d39afda0845e24891ca892126/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=ac795a6f3aaaaa4d39afda0845e24891ca892126", "patch": "@@ -3,7 +3,8 @@ use crate::utils::paths;\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n     expr_block, is_allowed, is_expn_of, match_qpath, match_type, multispan_sugg, remove_blocks, snippet,\n-    snippet_with_applicability, span_lint_and_sugg, span_lint_and_then, span_note_and_lint, walk_ptrs_ty,\n+    snippet_with_applicability, span_help_and_lint, span_lint_and_sugg, span_lint_and_then, span_note_and_lint,\n+    walk_ptrs_ty,\n };\n use if_chain::if_chain;\n use rustc::declare_lint_pass;\n@@ -223,6 +224,26 @@ declare_clippy_lint! {\n     \"a wildcard enum match arm using `_`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for wildcard pattern used with others patterns in same match arm.\n+    ///\n+    /// **Why is this bad?** Wildcard pattern already covers any other pattern as it will match anyway.\n+    /// It makes the code less readable, especially to spot wildcard pattern use in match arm.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// match \"foo\" {\n+    ///     \"a\" => {},\n+    ///     \"bar\" | _ => {},\n+    /// }\n+    /// ```\n+    pub WILDCARD_IN_OR_PATTERNS,\n+    complexity,\n+    \"a wildcard pattern used with others patterns in same match arm\"\n+}\n+\n declare_lint_pass!(Matches => [\n     SINGLE_MATCH,\n     MATCH_REF_PATS,\n@@ -231,7 +252,8 @@ declare_lint_pass!(Matches => [\n     MATCH_OVERLAPPING_ARM,\n     MATCH_WILD_ERR_ARM,\n     MATCH_AS_REF,\n-    WILDCARD_ENUM_MATCH_ARM\n+    WILDCARD_ENUM_MATCH_ARM,\n+    WILDCARD_IN_OR_PATTERNS\n ]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Matches {\n@@ -246,6 +268,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Matches {\n             check_wild_err_arm(cx, ex, arms);\n             check_wild_enum_match(cx, ex, arms);\n             check_match_as_ref(cx, ex, arms, expr);\n+            check_wild_in_or_pats(cx, arms);\n         }\n         if let ExprKind::Match(ref ex, ref arms, _) = expr.kind {\n             check_match_ref_pats(cx, ex, arms, expr);\n@@ -664,6 +687,23 @@ fn check_match_as_ref(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>],\n     }\n }\n \n+fn check_wild_in_or_pats(cx: &LateContext<'_, '_>, arms: &[Arm<'_>]) {\n+    for arm in arms {\n+        if let PatKind::Or(ref fields) = arm.pat.kind {\n+            // look for multiple fields in this arm that contains at least one Wild pattern\n+            if fields.len() > 1 && fields.iter().any(is_wild) {\n+                span_help_and_lint(\n+                    cx,\n+                    WILDCARD_IN_OR_PATTERNS,\n+                    arm.pat.span,\n+                    \"wildcard pattern covers any other pattern as it will match anyway.\",\n+                    \"Consider handling `_` separately.\",\n+                );\n+            }\n+        }\n+    }\n+}\n+\n /// Gets all arms that are unbounded `PatRange`s.\n fn all_ranges<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arms: &'tcx [Arm<'_>]) -> Vec<SpannedRange<Constant>> {\n     arms.iter()"}, {"sha": "f576bb152de979061bb90f45d119d8244a41813d", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ac795a6f3aaaaa4d39afda0845e24891ca892126/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac795a6f3aaaaa4d39afda0845e24891ca892126/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=ac795a6f3aaaaa4d39afda0845e24891ca892126", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 345] = [\n+pub const ALL_LINTS: [Lint; 346] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -2345,6 +2345,13 @@ pub const ALL_LINTS: [Lint; 345] = [\n         deprecation: None,\n         module: \"matches\",\n     },\n+    Lint {\n+        name: \"wildcard_in_or_patterns\",\n+        group: \"complexity\",\n+        desc: \"a wildcard pattern used with others patterns in same match arm\",\n+        deprecation: None,\n+        module: \"matches\",\n+    },\n     Lint {\n         name: \"write_literal\",\n         group: \"style\","}, {"sha": "ad600f125772f515964a78f96bafbe560c58997d", "filename": "tests/ui/wild_in_or_pats.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ac795a6f3aaaaa4d39afda0845e24891ca892126/tests%2Fui%2Fwild_in_or_pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac795a6f3aaaaa4d39afda0845e24891ca892126/tests%2Fui%2Fwild_in_or_pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwild_in_or_pats.rs?ref=ac795a6f3aaaaa4d39afda0845e24891ca892126", "patch": "@@ -0,0 +1,36 @@\n+#![warn(clippy::wildcard_in_or_patterns)]\n+\n+fn main() {\n+    match \"foo\" {\n+        \"a\" => {\n+            dbg!(\"matched a\");\n+        },\n+        \"bar\" | _ => {\n+            dbg!(\"matched (bar or) wild\");\n+        },\n+    };\n+    match \"foo\" {\n+        \"a\" => {\n+            dbg!(\"matched a\");\n+        },\n+        \"bar\" | \"bar2\" | _ => {\n+            dbg!(\"matched (bar or bar2 or) wild\");\n+        },\n+    };\n+    match \"foo\" {\n+        \"a\" => {\n+            dbg!(\"matched a\");\n+        },\n+        _ | \"bar\" | _ => {\n+            dbg!(\"matched (bar or) wild\");\n+        },\n+    };\n+    match \"foo\" {\n+        \"a\" => {\n+            dbg!(\"matched a\");\n+        },\n+        _ | \"bar\" => {\n+            dbg!(\"matched (bar or) wild\");\n+        },\n+    };\n+}"}, {"sha": "33c34cbbd4088bb23fb9b218fae9cb58b199d78c", "filename": "tests/ui/wild_in_or_pats.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ac795a6f3aaaaa4d39afda0845e24891ca892126/tests%2Fui%2Fwild_in_or_pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac795a6f3aaaaa4d39afda0845e24891ca892126/tests%2Fui%2Fwild_in_or_pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwild_in_or_pats.stderr?ref=ac795a6f3aaaaa4d39afda0845e24891ca892126", "patch": "@@ -0,0 +1,35 @@\n+error: wildcard pattern covers any other pattern as it will match anyway.\n+  --> $DIR/wild_in_or_pats.rs:8:9\n+   |\n+LL |         \"bar\" | _ => {\n+   |         ^^^^^^^^^\n+   |\n+   = note: `-D clippy::wildcard-in-or-patterns` implied by `-D warnings`\n+   = help: Consider handling `_` separately.\n+\n+error: wildcard pattern covers any other pattern as it will match anyway.\n+  --> $DIR/wild_in_or_pats.rs:16:9\n+   |\n+LL |         \"bar\" | \"bar2\" | _ => {\n+   |         ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Consider handling `_` separately.\n+\n+error: wildcard pattern covers any other pattern as it will match anyway.\n+  --> $DIR/wild_in_or_pats.rs:24:9\n+   |\n+LL |         _ | \"bar\" | _ => {\n+   |         ^^^^^^^^^^^^^\n+   |\n+   = help: Consider handling `_` separately.\n+\n+error: wildcard pattern covers any other pattern as it will match anyway.\n+  --> $DIR/wild_in_or_pats.rs:32:9\n+   |\n+LL |         _ | \"bar\" => {\n+   |         ^^^^^^^^^\n+   |\n+   = help: Consider handling `_` separately.\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "2aa24ea1156aaa5a0b70e1d1ef11c41992b12b0f", "filename": "tests/ui/wildcard_enum_match_arm.fixed", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac795a6f3aaaaa4d39afda0845e24891ca892126/tests%2Fui%2Fwildcard_enum_match_arm.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ac795a6f3aaaaa4d39afda0845e24891ca892126/tests%2Fui%2Fwildcard_enum_match_arm.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_enum_match_arm.fixed?ref=ac795a6f3aaaaa4d39afda0845e24891ca892126", "patch": "@@ -1,7 +1,13 @@\n // run-rustfix\n \n #![deny(clippy::wildcard_enum_match_arm)]\n-#![allow(unreachable_code, unused_variables, dead_code, clippy::single_match)]\n+#![allow(\n+    unreachable_code,\n+    unused_variables,\n+    dead_code,\n+    clippy::single_match,\n+    clippy::wildcard_in_or_patterns\n+)]\n \n use std::io::ErrorKind;\n "}, {"sha": "07c93feaf284e7cc3c33135912d0d4f42e9eedc3", "filename": "tests/ui/wildcard_enum_match_arm.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac795a6f3aaaaa4d39afda0845e24891ca892126/tests%2Fui%2Fwildcard_enum_match_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac795a6f3aaaaa4d39afda0845e24891ca892126/tests%2Fui%2Fwildcard_enum_match_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_enum_match_arm.rs?ref=ac795a6f3aaaaa4d39afda0845e24891ca892126", "patch": "@@ -1,7 +1,13 @@\n // run-rustfix\n \n #![deny(clippy::wildcard_enum_match_arm)]\n-#![allow(unreachable_code, unused_variables, dead_code, clippy::single_match)]\n+#![allow(\n+    unreachable_code,\n+    unused_variables,\n+    dead_code,\n+    clippy::single_match,\n+    clippy::wildcard_in_or_patterns\n+)]\n \n use std::io::ErrorKind;\n "}, {"sha": "e6f0411095cabaffc3c5449fdd7182d7549b92c2", "filename": "tests/ui/wildcard_enum_match_arm.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac795a6f3aaaaa4d39afda0845e24891ca892126/tests%2Fui%2Fwildcard_enum_match_arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac795a6f3aaaaa4d39afda0845e24891ca892126/tests%2Fui%2Fwildcard_enum_match_arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_enum_match_arm.stderr?ref=ac795a6f3aaaaa4d39afda0845e24891ca892126", "patch": "@@ -1,5 +1,5 @@\n error: wildcard match will miss any future added variants\n-  --> $DIR/wildcard_enum_match_arm.rs:31:9\n+  --> $DIR/wildcard_enum_match_arm.rs:37:9\n    |\n LL |         _ => eprintln!(\"Not red\"),\n    |         ^ help: try this: `Color::Green | Color::Blue | Color::Rgb(..) | Color::Cyan`\n@@ -11,25 +11,25 @@ LL | #![deny(clippy::wildcard_enum_match_arm)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: wildcard match will miss any future added variants\n-  --> $DIR/wildcard_enum_match_arm.rs:35:9\n+  --> $DIR/wildcard_enum_match_arm.rs:41:9\n    |\n LL |         _not_red => eprintln!(\"Not red\"),\n    |         ^^^^^^^^ help: try this: `_not_red @ Color::Green | _not_red @ Color::Blue | _not_red @ Color::Rgb(..) | _not_red @ Color::Cyan`\n \n error: wildcard match will miss any future added variants\n-  --> $DIR/wildcard_enum_match_arm.rs:39:9\n+  --> $DIR/wildcard_enum_match_arm.rs:45:9\n    |\n LL |         not_red => format!(\"{:?}\", not_red),\n    |         ^^^^^^^ help: try this: `not_red @ Color::Green | not_red @ Color::Blue | not_red @ Color::Rgb(..) | not_red @ Color::Cyan`\n \n error: wildcard match will miss any future added variants\n-  --> $DIR/wildcard_enum_match_arm.rs:55:9\n+  --> $DIR/wildcard_enum_match_arm.rs:61:9\n    |\n LL |         _ => \"No red\",\n    |         ^ help: try this: `Color::Red | Color::Green | Color::Blue | Color::Rgb(..) | Color::Cyan`\n \n error: match on non-exhaustive enum doesn't explicitly match all known variants\n-  --> $DIR/wildcard_enum_match_arm.rs:72:9\n+  --> $DIR/wildcard_enum_match_arm.rs:78:9\n    |\n LL |         _ => {},\n    |         ^ help: try this: `std::io::ErrorKind::PermissionDenied | std::io::ErrorKind::ConnectionRefused | std::io::ErrorKind::ConnectionReset | std::io::ErrorKind::ConnectionAborted | std::io::ErrorKind::NotConnected | std::io::ErrorKind::AddrInUse | std::io::ErrorKind::AddrNotAvailable | std::io::ErrorKind::BrokenPipe | std::io::ErrorKind::AlreadyExists | std::io::ErrorKind::WouldBlock | std::io::ErrorKind::InvalidInput | std::io::ErrorKind::InvalidData | std::io::ErrorKind::TimedOut | std::io::ErrorKind::WriteZero | std::io::ErrorKind::Interrupted | std::io::ErrorKind::Other | std::io::ErrorKind::UnexpectedEof | _`"}]}