{"sha": "6d548d944fade78edd474433b2436bae3237737e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNTQ4ZDk0NGZhZGU3OGVkZDQ3NDQzM2IyNDM2YmFlMzIzNzczN2U=", "commit": {"author": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-12-08T14:49:53Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-08T16:28:10Z"}, "message": "Fix typo in comment", "tree": {"sha": "458cb326455f9468c1dfb3bcf1f5ec3c8d4f6c1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/458cb326455f9468c1dfb3bcf1f5ec3c8d4f6c1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d548d944fade78edd474433b2436bae3237737e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d548d944fade78edd474433b2436bae3237737e", "html_url": "https://github.com/rust-lang/rust/commit/6d548d944fade78edd474433b2436bae3237737e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d548d944fade78edd474433b2436bae3237737e/comments", "author": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89cf7d874393dc22056fe8bdcbff4ec43e5f0bb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/89cf7d874393dc22056fe8bdcbff4ec43e5f0bb8", "html_url": "https://github.com/rust-lang/rust/commit/89cf7d874393dc22056fe8bdcbff4ec43e5f0bb8"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "e9af98474b255e10d42a0662955cb52efcf6f922", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6d548d944fade78edd474433b2436bae3237737e/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d548d944fade78edd474433b2436bae3237737e/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=6d548d944fade78edd474433b2436bae3237737e", "patch": "@@ -144,7 +144,7 @@ impl AnalysisImpl {\n         } else {\n             let files = &self.db.source_root(WORKSPACE).files;\n \n-            /// Need to wrap Snapshot to provide `Clon` impl for `map_with`\n+            /// Need to wrap Snapshot to provide `Clone` impl for `map_with`\n             struct Snap(salsa::Snapshot<db::RootDatabase>);\n             impl Clone for Snap {\n                 fn clone(&self) -> Snap {\n@@ -164,7 +164,7 @@ impl AnalysisImpl {\n             .sweep(salsa::SweepStrategy::default().discard_values());\n         Ok(query.search(&buf))\n     }\n-    /// This return `Vec`: a module may be included from several places. We\n+    /// This returns `Vec` because a module may be included from several places. We\n     /// don't handle this case yet though, so the Vec has length at most one.\n     pub fn parent_module(&self, position: FilePosition) -> Cancelable<Vec<(FileId, FileSymbol)>> {\n         let descr = match source_binder::module_from_position(&*self.db, position)? {\n@@ -206,7 +206,7 @@ impl AnalysisImpl {\n     pub fn approximately_resolve_symbol(\n         &self,\n         position: FilePosition,\n-    ) -> Cancelable<Vec<(FileId, FileSymbol)>> {\n+    ) -> Cancelable<Option<(TextRange, Vec<(FileId, FileSymbol)>)>> {\n         let file = self.db.source_file(position.file_id);\n         let syntax = file.syntax();\n         if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, position.offset) {\n@@ -218,20 +218,22 @@ impl AnalysisImpl {\n                 let scope = fn_descr.scope(&*self.db);\n                 // First try to resolve the symbol locally\n                 if let Some(entry) = scope.resolve_local_name(name_ref) {\n-                    let mut vec = vec![];\n-                    vec.push((\n+                    let vec = vec![(\n                         position.file_id,\n                         FileSymbol {\n                             name: entry.name().clone(),\n                             node_range: entry.ptr().range(),\n                             kind: NAME,\n                         },\n-                    ));\n-                    return Ok(vec);\n+                    )];\n+                    return Ok(Some((name_ref.syntax().range(), vec)));\n                 };\n             }\n             // If that fails try the index based approach.\n-            return self.index_resolve(name_ref);\n+            return Ok(Some((\n+                name_ref.syntax().range(),\n+                self.index_resolve(name_ref)?,\n+            )));\n         }\n         if let Some(name) = find_node_at_offset::<ast::Name>(syntax, position.offset) {\n             if let Some(module) = name.syntax().parent().and_then(ast::Module::cast) {\n@@ -248,15 +250,18 @@ impl AnalysisImpl {\n                                     node_range: TextRange::offset_len(0.into(), 0.into()),\n                                     kind: MODULE,\n                                 };\n-                                return Ok(vec![(file_id, symbol)]);\n+                                return Ok(Some((name.syntax().range(), vec![(file_id, symbol)])));\n                             }\n                         }\n                         _ => (),\n                     }\n                 }\n             }\n         }\n-        Ok(vec![])\n+        let range =\n+            ctry!(ra_syntax::algo::find_leaf_at_offset(syntax, position.offset).left_biased())\n+                .range();\n+        Ok(Some((range, vec![])))\n     }\n \n     pub fn find_all_refs(&self, position: FilePosition) -> Cancelable<Vec<(FileId, TextRange)>> {"}]}