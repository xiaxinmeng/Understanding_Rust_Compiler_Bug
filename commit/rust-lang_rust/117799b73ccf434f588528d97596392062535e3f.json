{"sha": "117799b73ccf434f588528d97596392062535e3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNzc5OWI3M2NjZjQzNGY1ODg1MjhkOTc1OTYzOTIwNjI1MzVlM2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-25T09:28:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-25T09:28:17Z"}, "message": "Auto merge of #86505 - JohnTitor:fix-86483, r=jackh726\n\nDo not panic in `return_type_impl_trait`\n\nFixes #86483", "tree": {"sha": "5374120e35aba484ed35b382d29cf1dcbc439a16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5374120e35aba484ed35b382d29cf1dcbc439a16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/117799b73ccf434f588528d97596392062535e3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/117799b73ccf434f588528d97596392062535e3f", "html_url": "https://github.com/rust-lang/rust/commit/117799b73ccf434f588528d97596392062535e3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/117799b73ccf434f588528d97596392062535e3f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50e0cc59ffcacda5b48f4edb95e5a5c353624fb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/50e0cc59ffcacda5b48f4edb95e5a5c353624fb0", "html_url": "https://github.com/rust-lang/rust/commit/50e0cc59ffcacda5b48f4edb95e5a5c353624fb0"}, {"sha": "9323a2824b188ddb741e702fd632a9061f5c4fc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9323a2824b188ddb741e702fd632a9061f5c4fc4", "html_url": "https://github.com/rust-lang/rust/commit/9323a2824b188ddb741e702fd632a9061f5c4fc4"}], "stats": {"total": 74, "additions": 61, "deletions": 13}, "files": [{"sha": "77f955e93b9dd7301b5f39e616370c66b6433488", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/117799b73ccf434f588528d97596392062535e3f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/117799b73ccf434f588528d97596392062535e3f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=117799b73ccf434f588528d97596392062535e3f", "patch": "@@ -43,7 +43,8 @@ use rustc_hir::definitions::Definitions;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{\n-    Constness, HirId, ItemKind, ItemLocalId, ItemLocalMap, ItemLocalSet, Node, TraitCandidate,\n+    Constness, ExprKind, HirId, ImplItemKind, ItemKind, ItemLocalId, ItemLocalMap, ItemLocalSet,\n+    Node, TraitCandidate, TraitItemKind,\n };\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n@@ -1498,18 +1499,14 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn return_type_impl_trait(self, scope_def_id: LocalDefId) -> Option<(Ty<'tcx>, Span)> {\n-        // HACK: `type_of_def_id()` will fail on these (#55796), so return `None`.\n+        // `type_of()` will fail on these (#55796, #86483), so only allow `fn`s or closures.\n         let hir_id = self.hir().local_def_id_to_hir_id(scope_def_id);\n         match self.hir().get(hir_id) {\n-            Node::Item(item) => {\n-                match item.kind {\n-                    ItemKind::Fn(..) => { /* `type_of_def_id()` will work */ }\n-                    _ => {\n-                        return None;\n-                    }\n-                }\n-            }\n-            _ => { /* `type_of_def_id()` will work or panic */ }\n+            Node::Item(&hir::Item { kind: ItemKind::Fn(..), .. }) => {}\n+            Node::TraitItem(&hir::TraitItem { kind: TraitItemKind::Fn(..), .. }) => {}\n+            Node::ImplItem(&hir::ImplItem { kind: ImplItemKind::Fn(..), .. }) => {}\n+            Node::Expr(&hir::Expr { kind: ExprKind::Closure(..), .. }) => {}\n+            _ => return None,\n         }\n \n         let ret_ty = self.type_of(scope_def_id);"}, {"sha": "ee84974cb73c227f811309f80250e01f1fee7746", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/117799b73ccf434f588528d97596392062535e3f/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/117799b73ccf434f588528d97596392062535e3f/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=117799b73ccf434f588528d97596392062535e3f", "patch": "@@ -492,7 +492,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n \n                 x => tcx.ty_error_with_message(\n                     DUMMY_SP,\n-                    &format!(\"unexpected const parent in type_of_def_id(): {:?}\", x),\n+                    &format!(\"unexpected const parent in type_of(): {:?}\", x),\n                 ),\n             }\n         }\n@@ -504,7 +504,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n         },\n \n         x => {\n-            bug!(\"unexpected sort of node in type_of_def_id(): {:?}\", x);\n+            bug!(\"unexpected sort of node in type_of(): {:?}\", x);\n         }\n     }\n }"}, {"sha": "9d03c9dab8d90499b437acec734ec92af69a9085", "filename": "src/test/ui/generic-associated-types/issue-86483.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/117799b73ccf434f588528d97596392062535e3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.rs", "raw_url": "https://github.com/rust-lang/rust/raw/117799b73ccf434f588528d97596392062535e3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.rs?ref=117799b73ccf434f588528d97596392062535e3f", "patch": "@@ -0,0 +1,15 @@\n+// Regression test of #86483.\n+\n+#![feature(generic_associated_types)]\n+#![allow(incomplete_features)]\n+\n+pub trait IceIce<T> //~ ERROR: the parameter type `T` may not live long enough\n+where\n+    for<'a> T: 'a,\n+{\n+    type Ice<'v>: IntoIterator<Item = &'v T>;\n+    //~^ ERROR: the parameter type `T` may not live long enough\n+    //~| ERROR: the parameter type `T` may not live long enough\n+}\n+\n+fn main() {}"}, {"sha": "c8efc2ed88264996baa7f317785604873a41a094", "filename": "src/test/ui/generic-associated-types/issue-86483.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/117799b73ccf434f588528d97596392062535e3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/117799b73ccf434f588528d97596392062535e3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr?ref=117799b73ccf434f588528d97596392062535e3f", "patch": "@@ -0,0 +1,36 @@\n+error[E0311]: the parameter type `T` may not live long enough\n+  --> $DIR/issue-86483.rs:6:1\n+   |\n+LL |   pub trait IceIce<T>\n+   |   ^                - help: consider adding an explicit lifetime bound...: `T: 'a`\n+   |  _|\n+   | |\n+LL | | where\n+LL | |     for<'a> T: 'a,\n+LL | | {\n+...  |\n+LL | |\n+LL | | }\n+   | |_^ ...so that the type `T` will meet its required lifetime bounds\n+\n+error[E0311]: the parameter type `T` may not live long enough\n+  --> $DIR/issue-86483.rs:10:5\n+   |\n+LL | pub trait IceIce<T>\n+   |                  - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n+LL |     type Ice<'v>: IntoIterator<Item = &'v T>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/issue-86483.rs:10:32\n+   |\n+LL | pub trait IceIce<T>\n+   |                  - help: consider adding an explicit lifetime bound...: `T: 'v`\n+...\n+LL |     type Ice<'v>: IntoIterator<Item = &'v T>;\n+   |                                ^^^^^^^^^^^^ ...so that the reference type `&'v T` does not outlive the data it points at\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0309`."}]}