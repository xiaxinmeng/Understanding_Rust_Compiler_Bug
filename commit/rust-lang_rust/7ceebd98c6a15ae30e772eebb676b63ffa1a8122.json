{"sha": "7ceebd98c6a15ae30e772eebb676b63ffa1a8122", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZWViZDk4YzZhMTVhZTMwZTc3MmVlYmI2NzZiNjNmZmExYTgxMjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-17T18:27:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-17T18:27:26Z"}, "message": "Auto merge of #69519 - 12101111:remove-proc-macro-check, r=nagisa\n\n Don't use static crt by default when build proc-macro\n\nDon't check value of `crt-static` when build proc-macro crates, since they are always built dynamically.\nFor more information, see https://github.com/rust-lang/cargo/issues/7563#issuecomment-591965320\nI hope this will fix issues about compiling `proc_macro` crates on musl host without bring more issues.\nFix https://github.com/rust-lang/cargo/issues/7563", "tree": {"sha": "4c762975c0da155553eb6e677b0b033fe37a8664", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c762975c0da155553eb6e677b0b033fe37a8664"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ceebd98c6a15ae30e772eebb676b63ffa1a8122", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ceebd98c6a15ae30e772eebb676b63ffa1a8122", "html_url": "https://github.com/rust-lang/rust/commit/7ceebd98c6a15ae30e772eebb676b63ffa1a8122", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ceebd98c6a15ae30e772eebb676b63ffa1a8122/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "660326e9791d5caf3186b14521498c2584a494ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/660326e9791d5caf3186b14521498c2584a494ab", "html_url": "https://github.com/rust-lang/rust/commit/660326e9791d5caf3186b14521498c2584a494ab"}, {"sha": "afd374ff3608570cdbc8889a52299d52ee52c7e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/afd374ff3608570cdbc8889a52299d52ee52c7e2", "html_url": "https://github.com/rust-lang/rust/commit/afd374ff3608570cdbc8889a52299d52ee52c7e2"}], "stats": {"total": 64, "additions": 47, "deletions": 17}, "files": [{"sha": "a71fe4430388d9e534fc5dac5c23f90cb61028b9", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ceebd98c6a15ae30e772eebb676b63ffa1a8122/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ceebd98c6a15ae30e772eebb676b63ffa1a8122/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=7ceebd98c6a15ae30e772eebb676b63ffa1a8122", "patch": "@@ -502,7 +502,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n         cmd.args(args);\n     }\n     if let Some(args) = sess.target.target.options.pre_link_args_crt.get(&flavor) {\n-        if sess.crt_static() {\n+        if sess.crt_static(Some(crate_type)) {\n             cmd.args(args);\n         }\n     }\n@@ -528,7 +528,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n         cmd.arg(get_file_path(sess, obj));\n     }\n \n-    if crate_type == config::CrateType::Executable && sess.crt_static() {\n+    if crate_type == config::CrateType::Executable && sess.crt_static(Some(crate_type)) {\n         for obj in &sess.target.target.options.pre_link_objects_exe_crt {\n             cmd.arg(get_file_path(sess, obj));\n         }\n@@ -572,7 +572,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n     for obj in &sess.target.target.options.post_link_objects {\n         cmd.arg(get_file_path(sess, obj));\n     }\n-    if sess.crt_static() {\n+    if sess.crt_static(Some(crate_type)) {\n         for obj in &sess.target.target.options.post_link_objects_crt {\n             cmd.arg(get_file_path(sess, obj));\n         }\n@@ -1302,7 +1302,8 @@ fn link_args<'a, B: ArchiveBuilder<'a>>(\n             let more_args = &sess.opts.cg.link_arg;\n             let mut args = args.iter().chain(more_args.iter()).chain(used_link_args.iter());\n \n-            if is_pic(sess) && !sess.crt_static() && !args.any(|x| *x == \"-static\") {\n+            if is_pic(sess) && !sess.crt_static(Some(crate_type)) && !args.any(|x| *x == \"-static\")\n+            {\n                 position_independent_executable = true;\n             }\n         }\n@@ -1387,7 +1388,7 @@ fn link_args<'a, B: ArchiveBuilder<'a>>(\n     if crate_type != config::CrateType::Executable {\n         cmd.build_dylib(out_filename);\n     }\n-    if crate_type == config::CrateType::Executable && sess.crt_static() {\n+    if crate_type == config::CrateType::Executable && sess.crt_static(Some(crate_type)) {\n         cmd.build_static_executable();\n     }\n "}, {"sha": "2850a29148ed00c68d264cb06a97445aba3b4e07", "filename": "src/librustc_codegen_utils/link.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ceebd98c6a15ae30e772eebb676b63ffa1a8122/src%2Flibrustc_codegen_utils%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ceebd98c6a15ae30e772eebb676b63ffa1a8122/src%2Flibrustc_codegen_utils%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flink.rs?ref=7ceebd98c6a15ae30e772eebb676b63ffa1a8122", "patch": "@@ -167,7 +167,9 @@ pub fn invalid_output_for_target(sess: &Session, crate_type: config::CrateType)\n             if !sess.target.target.options.dynamic_linking {\n                 return true;\n             }\n-            if sess.crt_static() && !sess.target.target.options.crt_static_allows_dylibs {\n+            if sess.crt_static(Some(crate_type))\n+                && !sess.target.target.options.crt_static_allows_dylibs\n+            {\n                 return true;\n             }\n         }"}, {"sha": "9521195a1b6c0a52d850effdd86de5d2846d330d", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ceebd98c6a15ae30e772eebb676b63ffa1a8122/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ceebd98c6a15ae30e772eebb676b63ffa1a8122/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=7ceebd98c6a15ae30e772eebb676b63ffa1a8122", "patch": "@@ -49,7 +49,7 @@ pub fn add_configuration(\n \n     cfg.extend(codegen_backend.target_features(sess).into_iter().map(|feat| (tf, Some(feat))));\n \n-    if sess.crt_static_feature() {\n+    if sess.crt_static_feature(None) {\n         cfg.insert((tf, Some(Symbol::intern(\"crt-static\"))));\n     }\n }"}, {"sha": "4a9a9ddc4bd0fb73032675a9d7c5923112b46973", "filename": "src/librustc_metadata/dependency_format.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ceebd98c6a15ae30e772eebb676b63ffa1a8122/src%2Flibrustc_metadata%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ceebd98c6a15ae30e772eebb676b63ffa1a8122/src%2Flibrustc_metadata%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdependency_format.rs?ref=7ceebd98c6a15ae30e772eebb676b63ffa1a8122", "patch": "@@ -97,7 +97,9 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: config::CrateType) -> DependencyList {\n \n         // If the global prefer_dynamic switch is turned off, or the final\n         // executable will be statically linked, prefer static crate linkage.\n-        config::CrateType::Executable if !sess.opts.cg.prefer_dynamic || sess.crt_static() => {\n+        config::CrateType::Executable\n+            if !sess.opts.cg.prefer_dynamic || sess.crt_static(Some(ty)) =>\n+        {\n             Linkage::Static\n         }\n         config::CrateType::Executable => Linkage::Dynamic,\n@@ -129,7 +131,7 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: config::CrateType) -> DependencyList {\n         // If any are not found, generate some nice pretty errors.\n         if ty == config::CrateType::Staticlib\n             || (ty == config::CrateType::Executable\n-                && sess.crt_static()\n+                && sess.crt_static(Some(ty))\n                 && !sess.target.target.options.crt_static_allows_dylibs)\n         {\n             for &cnum in tcx.crates().iter() {"}, {"sha": "81281857dbc2e092469a5df463c0158efcbeddfa", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7ceebd98c6a15ae30e772eebb676b63ffa1a8122/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ceebd98c6a15ae30e772eebb676b63ffa1a8122/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=7ceebd98c6a15ae30e772eebb676b63ffa1a8122", "patch": "@@ -555,25 +555,34 @@ impl Session {\n             .unwrap_or(self.opts.debug_assertions)\n     }\n \n-    pub fn crt_static(&self) -> bool {\n+    /// Check whether this compile session and crate type use static crt.\n+    pub fn crt_static(&self, crate_type: Option<config::CrateType>) -> bool {\n         // If the target does not opt in to crt-static support, use its default.\n         if self.target.target.options.crt_static_respected {\n-            self.crt_static_feature()\n+            self.crt_static_feature(crate_type)\n         } else {\n             self.target.target.options.crt_static_default\n         }\n     }\n \n-    pub fn crt_static_feature(&self) -> bool {\n+    /// Check whether this compile session and crate type use `crt-static` feature.\n+    pub fn crt_static_feature(&self, crate_type: Option<config::CrateType>) -> bool {\n         let requested_features = self.opts.cg.target_feature.split(',');\n         let found_negative = requested_features.clone().any(|r| r == \"-crt-static\");\n         let found_positive = requested_features.clone().any(|r| r == \"+crt-static\");\n \n-        // If the target we're compiling for requests a static crt by default,\n-        // then see if the `-crt-static` feature was passed to disable that.\n-        // Otherwise if we don't have a static crt by default then see if the\n-        // `+crt-static` feature was passed.\n-        if self.target.target.options.crt_static_default { !found_negative } else { found_positive }\n+        if found_positive || found_negative {\n+            found_positive\n+        } else if crate_type == Some(config::CrateType::ProcMacro)\n+            || crate_type == None && self.opts.crate_types.contains(&config::CrateType::ProcMacro)\n+        {\n+            // FIXME: When crate_type is not available,\n+            // we use compiler options to determine the crate_type.\n+            // We can't check `#![crate_type = \"proc-macro\"]` here.\n+            false\n+        } else {\n+            self.target.target.options.crt_static_default\n+        }\n     }\n \n     pub fn must_not_eliminate_frame_pointers(&self) -> bool {"}, {"sha": "90e3d422b3cbcb2d56b8a3eeb0e6db3f011abaf4", "filename": "src/test/ui/proc-macro/crt-static.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7ceebd98c6a15ae30e772eebb676b63ffa1a8122/src%2Ftest%2Fui%2Fproc-macro%2Fcrt-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ceebd98c6a15ae30e772eebb676b63ffa1a8122/src%2Ftest%2Fui%2Fproc-macro%2Fcrt-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fcrt-static.rs?ref=7ceebd98c6a15ae30e772eebb676b63ffa1a8122", "patch": "@@ -0,0 +1,16 @@\n+// Test proc-macro crate can be built without addtional RUSTFLAGS\n+// on musl target\n+// override -Ctarget-feature=-crt-static from compiletest\n+// compile-flags: -Ctarget-feature=\n+// ignore-wasm32\n+// build-pass\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_derive(Foo)]\n+pub fn derive_foo(input: TokenStream) -> TokenStream {\n+    input\n+}"}]}