{"sha": "1b8b2dc2ff9196ba4532c7d6f2775e2112bfc060", "node_id": "C_kwDOAAsO6NoAKDFiOGIyZGMyZmY5MTk2YmE0NTMyYzdkNmYyNzc1ZTIxMTJiZmMwNjA", "commit": {"author": {"name": "Thom Chiovoloni", "email": "thom@shift.click", "date": "2022-08-30T13:10:55Z"}, "committer": {"name": "Thom Chiovoloni", "email": "thom@shift.click", "date": "2022-08-30T13:10:55Z"}, "message": "Avoid `MaybeUninit::uninit_array()`", "tree": {"sha": "1e406ccb45789708afd7ed86ef753a719dfbbe04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e406ccb45789708afd7ed86ef753a719dfbbe04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b8b2dc2ff9196ba4532c7d6f2775e2112bfc060", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQQszICQ1r0Zqrp7OLPXcz0dendfCgUCYw4MXwAKCRDXcz0dendf\nCrdvAQDrjTBOHAj6GjNDQHNqgifos7C15/xb7J9trEtaPTZGegEAnFTmg3a9XPqM\nomfUDBE4p5x/cKWNLv1iPWFx51OGtgU=\n=ed6O\n-----END PGP SIGNATURE-----", "payload": "tree 1e406ccb45789708afd7ed86ef753a719dfbbe04\nparent 2f9bd1a2366f2048de4846e0933bb35485d5d91e\nauthor Thom Chiovoloni <thom@shift.click> 1661865055 -0700\ncommitter Thom Chiovoloni <thom@shift.click> 1661865055 -0700\n\nAvoid `MaybeUninit::uninit_array()`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b8b2dc2ff9196ba4532c7d6f2775e2112bfc060", "html_url": "https://github.com/rust-lang/rust/commit/1b8b2dc2ff9196ba4532c7d6f2775e2112bfc060", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b8b2dc2ff9196ba4532c7d6f2775e2112bfc060/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f9bd1a2366f2048de4846e0933bb35485d5d91e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f9bd1a2366f2048de4846e0933bb35485d5d91e", "html_url": "https://github.com/rust-lang/rust/commit/2f9bd1a2366f2048de4846e0933bb35485d5d91e"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "70c9b14a08fa7f41deea5d3c48580e0269f734b5", "filename": "library/std/src/sys/windows/stdio.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b8b2dc2ff9196ba4532c7d6f2775e2112bfc060/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8b2dc2ff9196ba4532c7d6f2775e2112bfc060/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs?ref=1b8b2dc2ff9196ba4532c7d6f2775e2112bfc060", "patch": "@@ -170,7 +170,7 @@ fn write(\n }\n \n fn write_valid_utf8_to_console(handle: c::HANDLE, utf8: &str) -> io::Result<usize> {\n-    let mut utf16: [MaybeUninit<u16>; MAX_BUFFER_SIZE / 2] = MaybeUninit::uninit_array();\n+    let mut utf16 = [MaybeUninit::<u16>::uninit(); MAX_BUFFER_SIZE / 2];\n     let mut len_utf16 = 0;\n     for (chr, dest) in utf8.encode_utf16().zip(utf16.iter_mut()) {\n         *dest = MaybeUninit::new(chr);\n@@ -252,7 +252,7 @@ impl io::Read for Stdin {\n             return Ok(bytes_copied);\n         } else if buf.len() - bytes_copied < 4 {\n             // Not enough space to get a UTF-8 byte. We will use the incomplete UTF8.\n-            let mut utf16_buf = [MaybeUninit::new(1); 1];\n+            let mut utf16_buf = [MaybeUninit::new(0); 1];\n             // Read one u16 character.\n             let read = read_u16s_fixup_surrogates(handle, &mut utf16_buf, 1, &mut self.surrogate)?;\n             // Read bytes, using the (now-empty) self.incomplete_utf8 as extra space.\n@@ -267,8 +267,8 @@ impl io::Read for Stdin {\n             bytes_copied += self.incomplete_utf8.read(&mut buf[bytes_copied..]);\n             Ok(bytes_copied)\n         } else {\n-            let mut utf16_buf: [MaybeUninit<u16>; MAX_BUFFER_SIZE / 2] =\n-                MaybeUninit::uninit_array();\n+            let mut utf16_buf = [MaybeUninit::<u16>::uninit(); MAX_BUFFER_SIZE / 2];\n+\n             // In the worst case, a UTF-8 string can take 3 bytes for every `u16` of a UTF-16. So\n             // we can read at most a third of `buf.len()` chars and uphold the guarantee no data gets\n             // lost."}]}