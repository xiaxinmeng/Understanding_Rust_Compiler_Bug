{"sha": "a6ca84a38340bdbf3c02ba4c7970c9289e5bc946", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2Y2E4NGEzODM0MGJkYmYzYzAyYmE0Yzc5NzBjOTI4OWU1YmM5NDY=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-10-17T18:37:18Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-10-17T18:37:18Z"}, "message": "look past the next drop for the drop panic target\n\nThe previous code would leak data on a drop panic if the immediate next\ndrop was a StorageDead that was followed by another drop.", "tree": {"sha": "0d4e873da04b3692422d9bdc72e8a1f36ce68f5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d4e873da04b3692422d9bdc72e8a1f36ce68f5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6ca84a38340bdbf3c02ba4c7970c9289e5bc946", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6ca84a38340bdbf3c02ba4c7970c9289e5bc946", "html_url": "https://github.com/rust-lang/rust/commit/a6ca84a38340bdbf3c02ba4c7970c9289e5bc946", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6ca84a38340bdbf3c02ba4c7970c9289e5bc946/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a151d37401b20d235eac1d862579dbbaa4ccea13", "url": "https://api.github.com/repos/rust-lang/rust/commits/a151d37401b20d235eac1d862579dbbaa4ccea13", "html_url": "https://github.com/rust-lang/rust/commit/a151d37401b20d235eac1d862579dbbaa4ccea13"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "772438d5252c489231589d37679312721e2df645", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a6ca84a38340bdbf3c02ba4c7970c9289e5bc946/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6ca84a38340bdbf3c02ba4c7970c9289e5bc946/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=a6ca84a38340bdbf3c02ba4c7970c9289e5bc946", "patch": "@@ -836,24 +836,22 @@ fn build_scope_drops<'tcx>(cfg: &mut CFG<'tcx>,\n                            generator_drop: bool)\n                            -> BlockAnd<()> {\n     debug!(\"build_scope_drops({:?} -> {:?})\", block, scope);\n-    let mut iter = scope.drops.iter().rev().peekable();\n+    let mut iter = scope.drops.iter().rev();\n     while let Some(drop_data) = iter.next() {\n         let source_info = scope.source_info(drop_data.span);\n         match drop_data.kind {\n             DropKind::Value { .. } => {\n                 // Try to find the next block with its cached block\n                 // for us to diverge into in case the drop panics.\n-                let on_diverge = iter.peek().iter().filter_map(|dd| {\n+                let on_diverge = iter.clone().filter_map(|dd| {\n                     match dd.kind {\n-                        DropKind::Value { cached_block } => {\n-                            let result = cached_block.get(generator_drop);\n-                            if result.is_none() {\n-                                span_bug!(drop_data.span, \"cached block not present?\")\n-                            }\n-                            result\n-                        },\n+                        DropKind::Value { cached_block } => Some(cached_block),\n                         DropKind::Storage => None\n                     }\n+                }).map(|cached_block| {\n+                    cached_block\n+                        .get(generator_drop)\n+                        .unwrap_or_else(|| span_bug!(drop_data.span, \"cached block not present?\"))\n                 }).next();\n                 // If there\u2019s no `cached_block`s within current scope,\n                 // we must look for one in the enclosing scope."}, {"sha": "483dbb356ce6aaabc3601ae238fd12d65efe1414", "filename": "src/test/run-pass/dynamic-drop.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a6ca84a38340bdbf3c02ba4c7970c9289e5bc946/src%2Ftest%2Frun-pass%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6ca84a38340bdbf3c02ba4c7970c9289e5bc946/src%2Ftest%2Frun-pass%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdynamic-drop.rs?ref=a6ca84a38340bdbf3c02ba4c7970c9289e5bc946", "patch": "@@ -177,6 +177,17 @@ fn generator(a: &Allocator, run_count: usize) {\n     }\n }\n \n+fn mixed_drop_and_nondrop(a: &Allocator) {\n+    // check that destructor panics handle drop\n+    // and non-drop blocks in the same scope correctly.\n+    //\n+    // Surprisingly enough, this used to not work.\n+    let (x, y, z);\n+    x = a.alloc();\n+    y = 5;\n+    z = a.alloc();\n+}\n+\n #[allow(unreachable_code)]\n fn vec_unreachable(a: &Allocator) {\n     let _x = vec![a.alloc(), a.alloc(), a.alloc(), return];\n@@ -244,11 +255,12 @@ fn main() {\n     run_test(|a| field_assignment(a, false));\n     run_test(|a| field_assignment(a, true));\n \n-    // FIXME: fix leaks on panics\n-    run_test_nopanic(|a| generator(a, 0));\n-    run_test_nopanic(|a| generator(a, 1));\n-    run_test_nopanic(|a| generator(a, 2));\n-    run_test_nopanic(|a| generator(a, 3));\n+    run_test(|a| generator(a, 0));\n+    run_test(|a| generator(a, 1));\n+    run_test(|a| generator(a, 2));\n+    run_test(|a| generator(a, 3));\n+\n+    run_test(|a| mixed_drop_and_nondrop(a));\n \n     run_test_nopanic(|a| union1(a));\n }"}]}