{"sha": "292ba6a1f81fee4170c3081f74499fe8c3ddedd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MmJhNmExZjgxZmVlNDE3MGMzMDgxZjc0NDk5ZmU4YzNkZGVkZDQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-30T20:41:14Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-30T20:41:14Z"}, "message": "Remove dead code, which elaborately pretends to be alive", "tree": {"sha": "b811687045b42a2b7af226c89f175a072e1ff6ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b811687045b42a2b7af226c89f175a072e1ff6ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/292ba6a1f81fee4170c3081f74499fe8c3ddedd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/292ba6a1f81fee4170c3081f74499fe8c3ddedd4", "html_url": "https://github.com/rust-lang/rust/commit/292ba6a1f81fee4170c3081f74499fe8c3ddedd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/292ba6a1f81fee4170c3081f74499fe8c3ddedd4/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15cfa9a808be820ceafc2e957ea8532e8ec68f00", "url": "https://api.github.com/repos/rust-lang/rust/commits/15cfa9a808be820ceafc2e957ea8532e8ec68f00", "html_url": "https://github.com/rust-lang/rust/commit/15cfa9a808be820ceafc2e957ea8532e8ec68f00"}], "stats": {"total": 63, "additions": 11, "deletions": 52}, "files": [{"sha": "f467ed3fe2fe550dd8dc2828d021253af4c0366f", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/292ba6a1f81fee4170c3081f74499fe8c3ddedd4/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292ba6a1f81fee4170c3081f74499fe8c3ddedd4/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=292ba6a1f81fee4170c3081f74499fe8c3ddedd4", "patch": "@@ -182,10 +182,6 @@ impl ExprCollector<'_> {\n \n                 self.alloc_expr(Expr::If { condition, then_branch, else_branch }, syntax_ptr)\n             }\n-            ast::Expr::TryBlockExpr(e) => {\n-                let body = self.collect_block_opt(e.body());\n-                self.alloc_expr(Expr::TryBlock { body }, syntax_ptr)\n-            }\n             ast::Expr::BlockExpr(e) => self.collect_block(e),\n             ast::Expr::LoopExpr(e) => {\n                 let body = self.collect_block_opt(e.loop_body());"}, {"sha": "76aa601cb56c4561e5416446d7e54aef0d79c688", "filename": "crates/ra_parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/292ba6a1f81fee4170c3081f74499fe8c3ddedd4/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292ba6a1f81fee4170c3081f74499fe8c3ddedd4/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=292ba6a1f81fee4170c3081f74499fe8c3ddedd4", "patch": "@@ -84,7 +84,7 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n         T![box] => box_expr(p, None),\n         T![for] => for_expr(p, None),\n         T![while] => while_expr(p, None),\n-        T![try] => try_block_expr(p, None),\n+        T![try] => try_expr(p, None),\n         LIFETIME if la == T![:] => {\n             let m = p.start();\n             label(p);\n@@ -134,7 +134,7 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n         }\n     };\n     let blocklike = match done.kind() {\n-        IF_EXPR | WHILE_EXPR | FOR_EXPR | LOOP_EXPR | MATCH_EXPR | BLOCK_EXPR | TRY_BLOCK_EXPR => {\n+        IF_EXPR | WHILE_EXPR | FOR_EXPR | LOOP_EXPR | MATCH_EXPR | BLOCK_EXPR | TRY_EXPR => {\n             BlockLike::Block\n         }\n         _ => BlockLike::NotBlock,\n@@ -532,7 +532,7 @@ fn break_expr(p: &mut Parser, r: Restrictions) -> CompletedMarker {\n // fn foo() {\n //     let _ = try {};\n // }\n-fn try_block_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n+fn try_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n     assert!(p.at(T![try]));\n     let m = m.unwrap_or_else(|| p.start());\n     // Special-case `try!` as macro."}, {"sha": "ab727ed7e18dcbeadf78ef7231fb9d843ef0c803", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/292ba6a1f81fee4170c3081f74499fe8c3ddedd4/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292ba6a1f81fee4170c3081f74499fe8c3ddedd4/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=292ba6a1f81fee4170c3081f74499fe8c3ddedd4", "patch": "@@ -191,7 +191,6 @@ pub enum SyntaxKind {\n     RECORD_LIT,\n     RECORD_FIELD_LIST,\n     RECORD_FIELD,\n-    TRY_BLOCK_EXPR,\n     BOX_EXPR,\n     CALL_EXPR,\n     INDEX_EXPR,"}, {"sha": "6aed7b4bb79356a0728a7581e9057ace2169274f", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/292ba6a1f81fee4170c3081f74499fe8c3ddedd4/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292ba6a1f81fee4170c3081f74499fe8c3ddedd4/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=292ba6a1f81fee4170c3081f74499fe8c3ddedd4", "patch": "@@ -16,7 +16,7 @@ impl ast::Expr {\n             | ast::Expr::WhileExpr(_)\n             | ast::Expr::BlockExpr(_)\n             | ast::Expr::MatchExpr(_)\n-            | ast::Expr::TryBlockExpr(_) => true,\n+            | ast::Expr::TryExpr(_) => true,\n             _ => false,\n         }\n     }\n@@ -371,12 +371,12 @@ impl ast::BlockExpr {\n         if self.unsafe_token().is_some() || self.async_token().is_some() {\n             return false;\n         }\n-        let kind = match self.syntax().parent() {\n+        let parent = match self.syntax().parent() {\n+            Some(it) => it,\n             None => return true,\n-            Some(it) => it.kind(),\n         };\n-        match kind {\n-            FN_DEF | IF_EXPR | WHILE_EXPR | LOOP_EXPR | TRY_BLOCK_EXPR => false,\n+        match parent.kind() {\n+            FN_DEF | IF_EXPR | WHILE_EXPR | LOOP_EXPR => false,\n             _ => true,\n         }\n     }"}, {"sha": "81260680f91b1f104d95f4dadc330b9442501776", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 2, "deletions": 35, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/292ba6a1f81fee4170c3081f74499fe8c3ddedd4/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292ba6a1f81fee4170c3081f74499fe8c3ddedd4/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=292ba6a1f81fee4170c3081f74499fe8c3ddedd4", "patch": "@@ -475,16 +475,6 @@ impl LoopExpr {\n     pub fn loop_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![loop]) }\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TryBlockExpr {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl ast::AttrsOwner for TryBlockExpr {}\n-impl TryBlockExpr {\n-    pub fn try_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![try]) }\n-    pub fn body(&self) -> Option<BlockExpr> { support::child(&self.syntax) }\n-}\n-\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ForExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -1475,7 +1465,6 @@ pub enum Expr {\n     FieldExpr(FieldExpr),\n     AwaitExpr(AwaitExpr),\n     TryExpr(TryExpr),\n-    TryBlockExpr(TryBlockExpr),\n     CastExpr(CastExpr),\n     RefExpr(RefExpr),\n     PrefixExpr(PrefixExpr),\n@@ -1958,17 +1947,6 @@ impl AstNode for LoopExpr {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for TryBlockExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == TRY_BLOCK_EXPR }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for ForExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == FOR_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3310,9 +3288,6 @@ impl From<AwaitExpr> for Expr {\n impl From<TryExpr> for Expr {\n     fn from(node: TryExpr) -> Expr { Expr::TryExpr(node) }\n }\n-impl From<TryBlockExpr> for Expr {\n-    fn from(node: TryBlockExpr) -> Expr { Expr::TryBlockExpr(node) }\n-}\n impl From<CastExpr> for Expr {\n     fn from(node: CastExpr) -> Expr { Expr::CastExpr(node) }\n }\n@@ -3343,9 +3318,8 @@ impl AstNode for Expr {\n             TUPLE_EXPR | ARRAY_EXPR | PAREN_EXPR | PATH_EXPR | LAMBDA_EXPR | IF_EXPR\n             | LOOP_EXPR | FOR_EXPR | WHILE_EXPR | CONTINUE_EXPR | BREAK_EXPR | LABEL\n             | BLOCK_EXPR | RETURN_EXPR | MATCH_EXPR | RECORD_LIT | CALL_EXPR | INDEX_EXPR\n-            | METHOD_CALL_EXPR | FIELD_EXPR | AWAIT_EXPR | TRY_EXPR | TRY_BLOCK_EXPR\n-            | CAST_EXPR | REF_EXPR | PREFIX_EXPR | RANGE_EXPR | BIN_EXPR | LITERAL | MACRO_CALL\n-            | BOX_EXPR => true,\n+            | METHOD_CALL_EXPR | FIELD_EXPR | AWAIT_EXPR | TRY_EXPR | CAST_EXPR | REF_EXPR\n+            | PREFIX_EXPR | RANGE_EXPR | BIN_EXPR | LITERAL | MACRO_CALL | BOX_EXPR => true,\n             _ => false,\n         }\n     }\n@@ -3373,7 +3347,6 @@ impl AstNode for Expr {\n             FIELD_EXPR => Expr::FieldExpr(FieldExpr { syntax }),\n             AWAIT_EXPR => Expr::AwaitExpr(AwaitExpr { syntax }),\n             TRY_EXPR => Expr::TryExpr(TryExpr { syntax }),\n-            TRY_BLOCK_EXPR => Expr::TryBlockExpr(TryBlockExpr { syntax }),\n             CAST_EXPR => Expr::CastExpr(CastExpr { syntax }),\n             REF_EXPR => Expr::RefExpr(RefExpr { syntax }),\n             PREFIX_EXPR => Expr::PrefixExpr(PrefixExpr { syntax }),\n@@ -3410,7 +3383,6 @@ impl AstNode for Expr {\n             Expr::FieldExpr(it) => &it.syntax,\n             Expr::AwaitExpr(it) => &it.syntax,\n             Expr::TryExpr(it) => &it.syntax,\n-            Expr::TryBlockExpr(it) => &it.syntax,\n             Expr::CastExpr(it) => &it.syntax,\n             Expr::RefExpr(it) => &it.syntax,\n             Expr::PrefixExpr(it) => &it.syntax,\n@@ -3891,11 +3863,6 @@ impl std::fmt::Display for LoopExpr {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for TryBlockExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for ForExpr {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "bdd42cb769f4077ff8a48d1bfcca6c63be6354ba", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/292ba6a1f81fee4170c3081f74499fe8c3ddedd4/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292ba6a1f81fee4170c3081f74499fe8c3ddedd4/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=292ba6a1f81fee4170c3081f74499fe8c3ddedd4", "patch": "@@ -162,7 +162,6 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"RECORD_LIT\",\n         \"RECORD_FIELD_LIST\",\n         \"RECORD_FIELD\",\n-        \"TRY_BLOCK_EXPR\",\n         \"BOX_EXPR\",\n         // postfix\n         \"CALL_EXPR\",\n@@ -440,7 +439,6 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         }\n         struct IfExpr: AttrsOwner { T![if], Condition }\n         struct LoopExpr: AttrsOwner, LoopBodyOwner { T![loop] }\n-        struct TryBlockExpr: AttrsOwner { T![try], body: BlockExpr }\n         struct ForExpr: AttrsOwner, LoopBodyOwner {\n             T![for],\n             Pat,\n@@ -451,7 +449,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         struct ContinueExpr: AttrsOwner { T![continue], T![lifetime] }\n         struct BreakExpr: AttrsOwner { T![break], T![lifetime], Expr }\n         struct Label { T![lifetime] }\n-        struct BlockExpr: AttrsOwner { Label, T![unsafe], T![async], Block  }\n+        struct BlockExpr: AttrsOwner { Label, T![unsafe], T![async], Block }\n         struct ReturnExpr: AttrsOwner { Expr }\n         struct CallExpr: ArgListOwner { Expr }\n         struct MethodCallExpr: AttrsOwner, ArgListOwner {\n@@ -722,7 +720,6 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             FieldExpr,\n             AwaitExpr,\n             TryExpr,\n-            TryBlockExpr,\n             CastExpr,\n             RefExpr,\n             PrefixExpr,"}]}