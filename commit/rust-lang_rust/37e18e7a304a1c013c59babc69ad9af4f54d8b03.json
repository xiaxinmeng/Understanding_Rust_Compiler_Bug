{"sha": "37e18e7a304a1c013c59babc69ad9af4f54d8b03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZTE4ZTdhMzA0YTFjMDEzYzU5YmFiYzY5YWQ5YWY0ZjU0ZDhiMDM=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-08-02T11:16:53Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-08-02T11:16:53Z"}, "message": "Second field of ScalarPair can be undef in some cases", "tree": {"sha": "21d43ce693c1724efd24a071507352af63a1a4bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21d43ce693c1724efd24a071507352af63a1a4bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37e18e7a304a1c013c59babc69ad9af4f54d8b03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37e18e7a304a1c013c59babc69ad9af4f54d8b03", "html_url": "https://github.com/rust-lang/rust/commit/37e18e7a304a1c013c59babc69ad9af4f54d8b03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37e18e7a304a1c013c59babc69ad9af4f54d8b03/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8e30c429503de90f7bad8a4c336af11ffaa48e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8e30c429503de90f7bad8a4c336af11ffaa48e6", "html_url": "https://github.com/rust-lang/rust/commit/c8e30c429503de90f7bad8a4c336af11ffaa48e6"}], "stats": {"total": 46, "additions": 28, "deletions": 18}, "files": [{"sha": "71e3ac48d5bc1dcc5d4e2b5b7515df2602676208", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/37e18e7a304a1c013c59babc69ad9af4f54d8b03/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e18e7a304a1c013c59babc69ad9af4f54d8b03/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=37e18e7a304a1c013c59babc69ad9af4f54d8b03", "patch": "@@ -18,7 +18,9 @@ pub enum ConstValue<'tcx> {\n     /// Used only for types with layout::abi::Scalar ABI and ZSTs\n     Scalar(Scalar),\n     /// Used only for types with layout::abi::ScalarPair\n-    ScalarPair(Scalar, Scalar),\n+    ///\n+    /// The second field may be undef in case of `Option<usize>::None`\n+    ScalarPair(Scalar, ScalarMaybeUndef),\n     /// Used only for the remaining cases. An allocation + offset into the allocation\n     ByRef(&'tcx Allocation, Size),\n }\n@@ -28,10 +30,7 @@ impl<'tcx> ConstValue<'tcx> {\n     pub fn from_byval_value(val: Value) -> EvalResult<'static, Self> {\n         Ok(match val {\n             Value::ByRef(..) => bug!(),\n-            Value::ScalarPair(a, b) => ConstValue::ScalarPair(\n-                a.unwrap_or_err()?,\n-                b.unwrap_or_err()?,\n-            ),\n+            Value::ScalarPair(a, b) => ConstValue::ScalarPair(a.unwrap_or_err()?, b),\n             Value::Scalar(val) => ConstValue::Scalar(val.unwrap_or_err()?),\n         })\n     }\n@@ -41,7 +40,7 @@ impl<'tcx> ConstValue<'tcx> {\n         match *self {\n             ConstValue::Unevaluated(..) |\n             ConstValue::ByRef(..) => None,\n-            ConstValue::ScalarPair(a, b) => Some(Value::ScalarPair(a.into(), b.into())),\n+            ConstValue::ScalarPair(a, b) => Some(Value::ScalarPair(a.into(), b)),\n             ConstValue::Scalar(val) => Some(Value::Scalar(val.into())),\n         }\n     }"}, {"sha": "f8166ee6491472afcb6275a28ca2882193b377f6", "filename": "src/librustc_codegen_llvm/mir/operand.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/37e18e7a304a1c013c59babc69ad9af4f54d8b03/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e18e7a304a1c013c59babc69ad9af4f54d8b03/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs?ref=37e18e7a304a1c013c59babc69ad9af4f54d8b03", "patch": "@@ -10,7 +10,7 @@\n \n use rustc::mir::interpret::ConstEvalErr;\n use rustc::mir;\n-use rustc::mir::interpret::ConstValue;\n+use rustc::mir::interpret::{ConstValue, ScalarMaybeUndef};\n use rustc::ty;\n use rustc::ty::layout::{self, Align, LayoutOf, TyLayout};\n use rustc_data_structures::indexed_vec::Idx;\n@@ -110,12 +110,16 @@ impl OperandRef<'ll, 'tcx> {\n                     a_scalar,\n                     layout.scalar_pair_element_llvm_type(bx.cx, 0, true),\n                 );\n-                let b_llval = scalar_to_llvm(\n-                    bx.cx,\n-                    b,\n-                    b_scalar,\n-                    layout.scalar_pair_element_llvm_type(bx.cx, 1, true),\n-                );\n+                let b_layout = layout.scalar_pair_element_llvm_type(bx.cx, 1, true);\n+                let b_llval = match b {\n+                    ScalarMaybeUndef::Scalar(b) => scalar_to_llvm(\n+                        bx.cx,\n+                        b,\n+                        b_scalar,\n+                        b_layout,\n+                    ),\n+                    ScalarMaybeUndef::Undef => C_undef(b_layout),\n+                };\n                 OperandValue::Pair(a_llval, b_llval)\n             },\n             ConstValue::ByRef(alloc, offset) => {"}, {"sha": "d614131c526837623dbcae21965fb572b157206b", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/37e18e7a304a1c013c59babc69ad9af4f54d8b03/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e18e7a304a1c013c59babc69ad9af4f54d8b03/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=37e18e7a304a1c013c59babc69ad9af4f54d8b03", "patch": "@@ -1102,6 +1102,13 @@ pub fn compare_const_vals<'a, 'tcx>(\n                         len_b,\n                     ),\n                 ) if ptr_a.offset.bytes() == 0 && ptr_b.offset.bytes() == 0 => {\n+                    let len_a = len_a.unwrap_or_err().ok();\n+                    let len_b = len_b.unwrap_or_err().ok();\n+                    if len_a.is_none() || len_b.is_none() {\n+                        tcx.sess.struct_err(\"str slice len is undef\").delay_as_bug();\n+                    }\n+                    let len_a = len_a?;\n+                    let len_b = len_b?;\n                     if let Ok(len_a) = len_a.to_bits(tcx.data_layout.pointer_size) {\n                         if let Ok(len_b) = len_b.to_bits(tcx.data_layout.pointer_size) {\n                             if len_a == len_b {"}, {"sha": "9d66a0b396b640fe7d3498aa75dc7b9caedb9bc2", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37e18e7a304a1c013c59babc69ad9af4f54d8b03/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e18e7a304a1c013c59babc69ad9af4f54d8b03/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=37e18e7a304a1c013c59babc69ad9af4f54d8b03", "patch": "@@ -87,7 +87,7 @@ pub fn value_to_const_value<'tcx>(\n     }\n     let val = match val {\n         Value::Scalar(val) => ConstValue::Scalar(val.unwrap_or_err()?),\n-        Value::ScalarPair(a, b) => ConstValue::ScalarPair(a.unwrap_or_err()?, b.unwrap_or_err()?),\n+        Value::ScalarPair(a, b) => ConstValue::ScalarPair(a.unwrap_or_err()?, b),\n         Value::ByRef(ptr, align) => {\n             let ptr = ptr.to_ptr().unwrap();\n             let alloc = ecx.memory.get(ptr.alloc_id)?;"}, {"sha": "bd90b308fabe80e2ac9fc5263e2bf86d2d7194ca", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37e18e7a304a1c013c59babc69ad9af4f54d8b03/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e18e7a304a1c013c59babc69ad9af4f54d8b03/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=37e18e7a304a1c013c59babc69ad9af4f54d8b03", "patch": "@@ -193,7 +193,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n \n use rustc::hir::map as hir_map;\n use rustc::hir::def_id::DefId;\n-use rustc::mir::interpret::{AllocId, ConstValue};\n+use rustc::mir::interpret::{AllocId, ConstValue, ScalarMaybeUndef};\n use rustc::middle::lang_items::{ExchangeMallocFnLangItem, StartFnLangItem};\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, TypeFoldable, Ty, TyCtxt, GenericParamDefKind};\n@@ -1264,11 +1264,11 @@ fn collect_const<'a, 'tcx>(\n     };\n     match val {\n         ConstValue::Unevaluated(..) => bug!(\"const eval yielded unevaluated const\"),\n-        ConstValue::ScalarPair(Scalar::Ptr(a), Scalar::Ptr(b)) => {\n+        ConstValue::ScalarPair(Scalar::Ptr(a), ScalarMaybeUndef::Scalar(Scalar::Ptr(b))) => {\n             collect_miri(tcx, a.alloc_id, output);\n             collect_miri(tcx, b.alloc_id, output);\n         }\n-        ConstValue::ScalarPair(_, Scalar::Ptr(ptr)) |\n+        ConstValue::ScalarPair(_, ScalarMaybeUndef::Scalar(Scalar::Ptr(ptr))) |\n         ConstValue::ScalarPair(Scalar::Ptr(ptr), _) |\n         ConstValue::Scalar(Scalar::Ptr(ptr)) =>\n             collect_miri(tcx, ptr.alloc_id, output),"}, {"sha": "10376d5780908d6ed1f16050b09d2823450f10f8", "filename": "src/test/compile-fail/const-err4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37e18e7a304a1c013c59babc69ad9af4f54d8b03/src%2Ftest%2Fcompile-fail%2Fconst-err4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e18e7a304a1c013c59babc69ad9af4f54d8b03/src%2Ftest%2Fcompile-fail%2Fconst-err4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err4.rs?ref=37e18e7a304a1c013c59babc69ad9af4f54d8b03", "patch": "@@ -16,7 +16,7 @@ union Foo {\n \n enum Bar {\n     Boo = [unsafe { Foo { b: () }.a }; 4][3],\n-    //~^ ERROR constant evaluation of enum discriminant resulted in non-integer\n+    //~^ ERROR could not evaluate enum discriminant\n }\n \n fn main() {"}]}