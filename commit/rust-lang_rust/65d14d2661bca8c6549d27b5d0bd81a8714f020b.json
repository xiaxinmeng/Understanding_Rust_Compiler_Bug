{"sha": "65d14d2661bca8c6549d27b5d0bd81a8714f020b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZDE0ZDI2NjFiY2E4YzY1NDlkMjdiNWQwYmQ4MWE4NzE0ZjAyMGI=", "commit": {"author": {"name": "Flavio Percoco Premoli", "email": "flaper87@gmail.com", "date": "2015-01-24T09:42:40Z"}, "committer": {"name": "Flavio Percoco Premoli", "email": "flaper87@gmail.com", "date": "2015-01-24T09:42:40Z"}, "message": "Rollup merge of #21498 - quantheory:master, r=alexcrichton\n\nWhile trying to experiment with changes for some other issues, I noticed that the test for #15149 was failing because I have `/tmp` mounted as `noexec` on my Linux box, and that test tries to run out of a temporary directory. This may not be the most common case, but it's not rare by any means, because executing from a world-writable directory is a security problem. (For this reason, some kernel options/mods such as grsecurity also can prevent this on Linux.) I instead copy the executable to a directory created in the build tree, following the example of the `process-spawn-with-unicode-params` test.\r\n\r\nAfter I made that change, I noticed that I'd made a mistake, but the test was still passing, because the \"parent\" process was not actually checking the status of the \"child\" process, meaning that the assertion in the child could never cause the overall test to fail. (I don't know if this has always been the case, or if it has something to do with either Windows or a change in the semantics of `spawn`.) So I fixed the test so that it would fail correctly, then fixed my original mistake so that it would pass again.\r\n\r\nThe one big problem with this is that I haven't set up any machines of my own so that I can build on Windows, which is the platform this test was targeted at in the first place! That might take a while to address on my end. So I need someone else to check this on Windows.", "tree": {"sha": "a29c0a06acd6064d7fd009c0e3124b16543d4fde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a29c0a06acd6064d7fd009c0e3124b16543d4fde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65d14d2661bca8c6549d27b5d0bd81a8714f020b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65d14d2661bca8c6549d27b5d0bd81a8714f020b", "html_url": "https://github.com/rust-lang/rust/commit/65d14d2661bca8c6549d27b5d0bd81a8714f020b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65d14d2661bca8c6549d27b5d0bd81a8714f020b/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a9ee09a991fcc909a66df4009658481f8a94071", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a9ee09a991fcc909a66df4009658481f8a94071", "html_url": "https://github.com/rust-lang/rust/commit/6a9ee09a991fcc909a66df4009658481f8a94071"}, {"sha": "7f45dc9e68ffe80d399560644af48383a25427fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f45dc9e68ffe80d399560644af48383a25427fd", "html_url": "https://github.com/rust-lang/rust/commit/7f45dc9e68ffe80d399560644af48383a25427fd"}], "stats": {"total": 45, "additions": 31, "deletions": 14}, "files": [{"sha": "5d3571e4d748b808cb5f026f49f728d395d6625e", "filename": "src/test/run-pass/issue-15149.rs", "status": "modified", "additions": 31, "deletions": 14, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/65d14d2661bca8c6549d27b5d0bd81a8714f020b/src%2Ftest%2Frun-pass%2Fissue-15149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d14d2661bca8c6549d27b5d0bd81a8714f020b/src%2Ftest%2Frun-pass%2Fissue-15149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15149.rs?ref=65d14d2661bca8c6549d27b5d0bd81a8714f020b", "patch": "@@ -8,33 +8,50 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io::{TempDir, Command, fs};\n+use std::io::{Command, fs, USER_RWX};\n use std::os;\n+use std::path::BytesContainer;\n+use std::rand::random;\n \n fn main() {\n     // If we're the child, make sure we were invoked correctly\n     let args = os::args();\n     if args.len() > 1 && args[1].as_slice() == \"child\" {\n-        return assert_eq!(args[0].as_slice(), \"mytest\");\n+        return assert_eq!(args[0],\n+                          format!(\"mytest{}\", os::consts::EXE_SUFFIX));\n     }\n \n     test();\n }\n \n fn test() {\n-    // If we're the parent, copy our own binary to a tempr directory, and then\n-    // make it executable.\n-    let dir = TempDir::new(\"mytest\").unwrap();\n-    let me = os::self_exe_name().unwrap();\n-    let dest = dir.path().join(format!(\"mytest{}\", os::consts::EXE_SUFFIX));\n-    fs::copy(&me, &dest).unwrap();\n-\n-    // Append the temp directory to our own PATH.\n+    // If we're the parent, copy our own binary to a new directory.\n+    let my_path = os::self_exe_name().unwrap();\n+    let my_dir  = my_path.dir_path();\n+\n+    let random_u32: u32 = random();\n+    let child_dir = Path::new(my_dir.join(format!(\"issue-15149-child-{}\",\n+                                                  random_u32)));\n+    fs::mkdir(&child_dir, USER_RWX).unwrap();\n+\n+    let child_path = child_dir.join(format!(\"mytest{}\",\n+                                            os::consts::EXE_SUFFIX));\n+    fs::copy(&my_path, &child_path).unwrap();\n+\n+    // Append the new directory to our own PATH.\n     let mut path = os::split_paths(os::getenv(\"PATH\").unwrap_or(String::new()));\n-    path.push(dir.path().clone());\n+    path.push(child_dir.clone());\n     let path = os::join_paths(path.as_slice()).unwrap();\n \n-    Command::new(\"mytest\").env(\"PATH\", path.as_slice())\n-                          .arg(\"child\")\n-                          .spawn().unwrap();\n+    let child_output = Command::new(\"mytest\").env(\"PATH\", path.as_slice())\n+                                             .arg(\"child\")\n+                                             .output().unwrap();\n+\n+    assert!(child_output.status.success(),\n+            format!(\"child assertion failed\\n child stdout:\\n {}\\n child stderr:\\n {}\",\n+                    child_output.output.container_as_str().unwrap(),\n+                    child_output.error.container_as_str().unwrap()));\n+\n+    fs::rmdir_recursive(&child_dir).unwrap();\n+\n }"}]}