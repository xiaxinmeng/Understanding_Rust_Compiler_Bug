{"sha": "15a8a296b724599a1eda807c3057338b11cb94bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YThhMjk2YjcyNDU5OWExZWRhODA3YzMwNTczMzhiMTFjYjk0YmY=", "commit": {"author": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-01-13T06:29:47Z"}, "committer": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-02-27T07:01:41Z"}, "message": "document inclusive range syntax", "tree": {"sha": "28d923900ce28666ebb6a8b88d4b70d70f7a7443", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28d923900ce28666ebb6a8b88d4b70d70f7a7443"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15a8a296b724599a1eda807c3057338b11cb94bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15a8a296b724599a1eda807c3057338b11cb94bf", "html_url": "https://github.com/rust-lang/rust/commit/15a8a296b724599a1eda807c3057338b11cb94bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15a8a296b724599a1eda807c3057338b11cb94bf/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e10614a77789f4b69ccc8cb777aaec035c99ae6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e10614a77789f4b69ccc8cb777aaec035c99ae6f", "html_url": "https://github.com/rust-lang/rust/commit/e10614a77789f4b69ccc8cb777aaec035c99ae6f"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "c174d2d6bacb6e4c1a916f02c0f86775d0413cde", "filename": "src/doc/book/iterators.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15a8a296b724599a1eda807c3057338b11cb94bf/src%2Fdoc%2Fbook%2Fiterators.md", "raw_url": "https://github.com/rust-lang/rust/raw/15a8a296b724599a1eda807c3057338b11cb94bf/src%2Fdoc%2Fbook%2Fiterators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fiterators.md?ref=15a8a296b724599a1eda807c3057338b11cb94bf", "patch": "@@ -14,6 +14,11 @@ Now that you know more Rust, we can talk in detail about how this works.\n Ranges (the `0..10`) are 'iterators'. An iterator is something that we can\n call the `.next()` method on repeatedly, and it gives us a sequence of things.\n \n+(By the way, a range with two dots like `0..10` is inclusive on the left (so it\n+starts at 0) and exclusive on the right (so it ends at 9). A mathematician\n+would write \"[0, 10)\". To get a range that goes all the way up to 10 you can\n+write `0...10`.)\n+\n Like this:\n \n ```rust"}, {"sha": "53f38cd77e4a433e6be43af2f3b7a05aad6b3b78", "filename": "src/doc/book/syntax-index.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15a8a296b724599a1eda807c3057338b11cb94bf/src%2Fdoc%2Fbook%2Fsyntax-index.md", "raw_url": "https://github.com/rust-lang/rust/raw/15a8a296b724599a1eda807c3057338b11cb94bf/src%2Fdoc%2Fbook%2Fsyntax-index.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsyntax-index.md?ref=15a8a296b724599a1eda807c3057338b11cb94bf", "patch": "@@ -66,7 +66,8 @@\n * `..` (`..`, `expr..`, `..expr`, `expr..expr`): right-exclusive range literal.\n * `..` (`..expr`): struct literal update syntax.  See [Structs (Update syntax)].\n * `..` (`variant(x, ..)`, `struct_type { x, .. }`): \"and the rest\" pattern binding.  See [Patterns (Ignoring bindings)].\n-* `...` (`expr ... expr`): inclusive range pattern.  See [Patterns (Ranges)].\n+* `...` (`...expr`, `expr...expr`) *in an expression*: inclusive range expression. See [Iterators].\n+* `...` (`expr...expr`) *in a pattern*: inclusive range pattern.  See [Patterns (Ranges)].\n * `/` (`expr / expr`): arithmetic division.  Overloadable (`Div`).\n * `/=` (`var /= expr`): arithmetic division & assignment.\n * `:` (`pat: type`, `ident: type`): constraints.  See [Variable Bindings], [Functions], [Structs], [Traits].\n@@ -205,6 +206,7 @@\n [Functions (Early Returns)]: functions.html#early-returns\n [Functions]: functions.html\n [Generics]: generics.html\n+[Iterators]: iterators.html\n [Lifetimes]: lifetimes.html\n [Loops (`for`)]: loops.html#for\n [Loops (`loop`)]: loops.html#loop"}, {"sha": "f88843b642ef197234ddeb659789c2cdb1d4d556", "filename": "src/doc/reference.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/15a8a296b724599a1eda807c3057338b11cb94bf/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/15a8a296b724599a1eda807c3057338b11cb94bf/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=15a8a296b724599a1eda807c3057338b11cb94bf", "patch": "@@ -2279,6 +2279,10 @@ The currently implemented features of the reference compiler are:\n                     `#[derive_Foo] #[derive_Bar]`, which can be user-defined syntax\n                     extensions.\n \n+* `inclusive_range_syntax` - Allows use of the `a...b` and `...b` syntax for inclusive ranges.\n+\n+* `inclusive_range` - Allows use of the types that represent desugared inclusive ranges.\n+\n * `intrinsics` - Allows use of the \"rust-intrinsics\" ABI. Compiler intrinsics\n                  are inherently unstable and no promise about them is made.\n \n@@ -2750,6 +2754,25 @@ let y = 0..10;\n assert_eq!(x, y);\n ```\n \n+Similarly, the `...` operator will construct an object of one of the\n+`std::ops::RangeInclusive` variants.\n+\n+```\n+# #![feature(inclusive_range_syntax)]\n+1...2;   // std::ops::RangeInclusive\n+...4;    // std::ops::RangeToInclusive\n+```\n+\n+The following expressions are equivalent.\n+\n+```\n+# #![feature(inclusive_range_syntax, inclusive_range)]\n+let x = std::ops::RangeInclusive::NonEmpty {start: 0, end: 10};\n+let y = 0...10;\n+\n+assert_eq!(x, y);\n+```\n+\n ### Unary operator expressions\n \n Rust defines the following unary operators. They are all written as prefix operators,"}]}