{"sha": "5085eb3c288c2611bb61f3ee46a187d3ca46ca64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwODVlYjNjMjg4YzI2MTFiYjYxZjNlZTQ2YTE4N2QzY2E0NmNhNjQ=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-24T19:37:36Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-25T00:24:31Z"}, "message": "Convert pipes::Buffer into a struct", "tree": {"sha": "3bdc383d0e275c0f6c928dc476a1676980439ff4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bdc383d0e275c0f6c928dc476a1676980439ff4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5085eb3c288c2611bb61f3ee46a187d3ca46ca64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5085eb3c288c2611bb61f3ee46a187d3ca46ca64", "html_url": "https://github.com/rust-lang/rust/commit/5085eb3c288c2611bb61f3ee46a187d3ca46ca64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5085eb3c288c2611bb61f3ee46a187d3ca46ca64/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "feab095d65d1e60a0d4d78f66c3f14ce1bc88f10", "url": "https://api.github.com/repos/rust-lang/rust/commits/feab095d65d1e60a0d4d78f66c3f14ce1bc88f10", "html_url": "https://github.com/rust-lang/rust/commit/feab095d65d1e60a0d4d78f66c3f14ce1bc88f10"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "7ccba553ee72cdd250912b9d7437c0fb1e3e2c17", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5085eb3c288c2611bb61f3ee46a187d3ca46ca64/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5085eb3c288c2611bb61f3ee46a187d3ca46ca64/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=5085eb3c288c2611bb61f3ee46a187d3ca46ca64", "patch": "@@ -140,10 +140,19 @@ pub fn BufferHeader() -> BufferHeader{\n \n // This is for protocols to associate extra data to thread around.\n #[doc(hidden)]\n+#[cfg(stage0)]\n type Buffer<T: Owned> = {\n     header: BufferHeader,\n     data: T,\n };\n+#[doc(hidden)]\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+#[cfg(stage3)]\n+pub struct Buffer<T: Owned> {\n+    header: BufferHeader,\n+    data: T,\n+}\n \n struct PacketHeader {\n     mut state: State,\n@@ -230,6 +239,7 @@ pub fn mk_packet<T: Owned>() -> Packet<T> {\n }\n \n #[doc(hidden)]\n+#[cfg(stage0)]\n fn unibuffer<T: Owned>() -> ~Buffer<Packet<T>> {\n     let b = ~{\n         header: BufferHeader(),\n@@ -245,6 +255,25 @@ fn unibuffer<T: Owned>() -> ~Buffer<Packet<T>> {\n     move b\n }\n \n+#[doc(hidden)]\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+#[cfg(stage3)]\n+fn unibuffer<T: Owned>() -> ~Buffer<Packet<T>> {\n+    let b = ~Buffer {\n+        header: BufferHeader(),\n+        data: Packet {\n+            header: PacketHeader(),\n+            payload: None,\n+        }\n+    };\n+\n+    unsafe {\n+        b.data.header.buffer = reinterpret_cast(&b);\n+    }\n+    move b\n+}\n+\n #[doc(hidden)]\n pub fn packet<T: Owned>() -> *Packet<T> {\n     let b = unibuffer();"}, {"sha": "e53057cb312e3240ad251a53328cad9122632701", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5085eb3c288c2611bb61f3ee46a187d3ca46ca64/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5085eb3c288c2611bb61f3ee46a187d3ca46ca64/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=5085eb3c288c2611bb61f3ee46a187d3ca46ca64", "patch": "@@ -357,10 +357,10 @@ impl protocol: gen_init {\n     fn gen_init_bounded(ext_cx: ext_ctxt) -> @ast::expr {\n         debug!(\"gen_init_bounded\");\n         let buffer_fields = self.gen_buffer_init(ext_cx);\n-        let buffer = quote_expr!(\n-            ~{header: ::pipes::BufferHeader(),\n-              data: $buffer_fields}\n-        );\n+        let buffer = quote_expr!(~::pipes::Buffer {\n+            header: ::pipes::BufferHeader(),\n+            data: $buffer_fields,\n+        });\n \n         let entangle_body = ext_cx.block_expr(\n             ext_cx.block("}, {"sha": "f44c54d38e4d9cfeef2964abbb3168ca35de113e", "filename": "src/test/run-pass/pipe-pingpong-bounded.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5085eb3c288c2611bb61f3ee46a187d3ca46ca64/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5085eb3c288c2611bb61f3ee46a187d3ca46ca64/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs?ref=5085eb3c288c2611bb61f3ee46a187d3ca46ca64", "patch": "@@ -27,7 +27,7 @@ mod pingpong {\n     };\n \n     pub fn init() -> (client::ping, server::ping) {\n-        let buffer = ~{\n+        let buffer = ~Buffer {\n             header: BufferHeader(),\n             data: {\n                 ping: mk_packet::<ping>(),"}]}