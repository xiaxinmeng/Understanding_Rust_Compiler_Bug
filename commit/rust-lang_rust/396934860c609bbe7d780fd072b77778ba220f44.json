{"sha": "396934860c609bbe7d780fd072b77778ba220f44", "node_id": "C_kwDOAAsO6NoAKDM5NjkzNDg2MGM2MDliYmU3ZDc4MGZkMDcyYjc3Nzc4YmEyMjBmNDQ", "commit": {"author": {"name": "Ddystopia", "email": "alexanderbabak@proton.me", "date": "2023-04-27T11:54:00Z"}, "committer": {"name": "Ddystopia", "email": "alexanderbabak@proton.me", "date": "2023-05-02T15:08:56Z"}, "message": "Getting cargo workspace from `file_id` and refactoring", "tree": {"sha": "d6b153676c97afe532466811f932a2c523eb1faa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6b153676c97afe532466811f932a2c523eb1faa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/396934860c609bbe7d780fd072b77778ba220f44", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE83x4qCmEA5TzaAMiEJh17BFTUhIFAmRRJ4gACgkQEJh17BFT\nUhJLQBAAjhOmvLVUYc0IIYAd3QUssTnPYbfDLgwWk/pkm9zriEW4tzrej/BfTFZj\nmZT96DZltWZz9QK1DzySYrezUhUAklxrBByqnIyu6sU9uKBcKWa7JHTUWUcsbN9n\n0QJjJb0n70dORgEBRlWKF8cczZ9dVr16S1tyB/PeTJkhGVKPLFXf3tfyMaMeN//4\n1PQz2cVpaW2tjsK/tS7bRNOljUURZmWNHxp4eZBg4fO0BaHS+rXHY0KzwPZ+9mzJ\nS6Bze/BwokiXAXP8IBiiAMvIsEZjyOjPmoz/THfzvdm3xevJnjcIdBOC4d3Videk\ne9552sTAXXbIl3ylzuzc2WaVgLrOitsjTMr07HtCvfFs91oGbylPWXXQFIlfQPm7\n3lJykA9DAyAoLXDR4Z8SqwS12JeNCGL1Iw91KqIgABxMJ5BVLPPyS30jOpv5Gnky\nAmc1WFqjads7J3UnolHDWksfqSY1N2Qv7j3nHWzeKk0AdDzZps+PmhIfpm1MZhdu\n/M27P0vAHsq529mb/Fag/cSoo21ZJhI+IOa/lwOH+yX7qAJxpUmDHZAAMcyokHyk\nhygJubjSxGwDIPjErdZ9H67WpcgItDeg0bX7eup+bDZ2kW7c1t0eNxgiw7yqMdne\nalQTApqAVOQCnI5tsxeTjmFGbCLypcYiO1rSx/sdgLHJ/JhCcZ0=\n=HtF+\n-----END PGP SIGNATURE-----", "payload": "tree d6b153676c97afe532466811f932a2c523eb1faa\nparent 0913809ac841cd4a9dfbea32934b84bcb54ce8d4\nauthor Ddystopia <alexanderbabak@proton.me> 1682596440 +0200\ncommitter Ddystopia <alexanderbabak@proton.me> 1683040136 +0200\n\nGetting cargo workspace from `file_id` and refactoring\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/396934860c609bbe7d780fd072b77778ba220f44", "html_url": "https://github.com/rust-lang/rust/commit/396934860c609bbe7d780fd072b77778ba220f44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/396934860c609bbe7d780fd072b77778ba220f44/comments", "author": {"login": "Ddystopia", "id": 63151578, "node_id": "MDQ6VXNlcjYzMTUxNTc4", "avatar_url": "https://avatars.githubusercontent.com/u/63151578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ddystopia", "html_url": "https://github.com/Ddystopia", "followers_url": "https://api.github.com/users/Ddystopia/followers", "following_url": "https://api.github.com/users/Ddystopia/following{/other_user}", "gists_url": "https://api.github.com/users/Ddystopia/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ddystopia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ddystopia/subscriptions", "organizations_url": "https://api.github.com/users/Ddystopia/orgs", "repos_url": "https://api.github.com/users/Ddystopia/repos", "events_url": "https://api.github.com/users/Ddystopia/events{/privacy}", "received_events_url": "https://api.github.com/users/Ddystopia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ddystopia", "id": 63151578, "node_id": "MDQ6VXNlcjYzMTUxNTc4", "avatar_url": "https://avatars.githubusercontent.com/u/63151578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ddystopia", "html_url": "https://github.com/Ddystopia", "followers_url": "https://api.github.com/users/Ddystopia/followers", "following_url": "https://api.github.com/users/Ddystopia/following{/other_user}", "gists_url": "https://api.github.com/users/Ddystopia/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ddystopia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ddystopia/subscriptions", "organizations_url": "https://api.github.com/users/Ddystopia/orgs", "repos_url": "https://api.github.com/users/Ddystopia/repos", "events_url": "https://api.github.com/users/Ddystopia/events{/privacy}", "received_events_url": "https://api.github.com/users/Ddystopia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0913809ac841cd4a9dfbea32934b84bcb54ce8d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0913809ac841cd4a9dfbea32934b84bcb54ce8d4", "html_url": "https://github.com/rust-lang/rust/commit/0913809ac841cd4a9dfbea32934b84bcb54ce8d4"}], "stats": {"total": 62, "additions": 29, "deletions": 33}, "files": [{"sha": "2e73dbca25e813b9ab5279e12ab763c6106311b5", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/396934860c609bbe7d780fd072b77778ba220f44/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/396934860c609bbe7d780fd072b77778ba220f44/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=396934860c609bbe7d780fd072b77778ba220f44", "patch": "@@ -133,38 +133,37 @@ pub(crate) fn external_docs(\n     db: &RootDatabase,\n     position: &FilePosition,\n     target_dir: Option<&OsStr>,\n-) -> DocumentationLinks {\n+) -> Option<DocumentationLinks> {\n     let sema = &Semantics::new(db);\n     let file = sema.parse(position.file_id).syntax().clone();\n     let token = pick_best_token(file.token_at_offset(position.offset), |kind| match kind {\n         IDENT | INT_NUMBER | T![self] => 3,\n         T!['('] | T![')'] => 2,\n         kind if kind.is_trivia() => 0,\n         _ => 1,\n-    });\n-    let Some(token) = token else { return Default::default() };\n+    })?;\n     let token = sema.descend_into_macros_single(token);\n \n-    let Some(node) = token.parent() else { return Default::default() };\n+    let node = token.parent()?;\n     let definition = match_ast! {\n         match node {\n             ast::NameRef(name_ref) => match NameRefClass::classify(sema, &name_ref) {\n                 Some(NameRefClass::Definition(def)) => def,\n                 Some(NameRefClass::FieldShorthand { local_ref: _, field_ref }) => {\n                     Definition::Field(field_ref)\n                 }\n-                None => return Default::default(),\n+                None => return None,\n             },\n             ast::Name(name) => match NameClass::classify(sema, &name) {\n                 Some(NameClass::Definition(it) | NameClass::ConstReference(it)) => it,\n                 Some(NameClass::PatFieldShorthand { local_def: _, field_ref }) => Definition::Field(field_ref),\n-                None => return Default::default(),\n+                None => return None,\n             },\n-            _ => return Default::default(),\n+            _ => return None\n         }\n     };\n \n-    get_doc_links(db, definition, target_dir)\n+    Some(get_doc_links(db, definition, target_dir))\n }\n \n /// Extracts all links from a given markdown text returning the definition text range, link-text\n@@ -327,6 +326,10 @@ fn get_doc_links(\n     def: Definition,\n     target_dir: Option<&OsStr>,\n ) -> DocumentationLinks {\n+    let join_url = |base_url: Option<Url>, path: &str| -> Option<Url> {\n+        base_url.and_then(|url| url.join(path).ok())\n+    };\n+\n     let Some((target, file, frag)) = filename_and_frag_for_def(db, def) else { return Default::default(); };\n \n     let (mut web_url, mut local_url) = get_doc_base_urls(db, target, target_dir);\n@@ -339,21 +342,13 @@ fn get_doc_links(\n     web_url = join_url(web_url, &file);\n     local_url = join_url(local_url, &file);\n \n-    set_fragment_for_url(web_url.as_mut(), frag.as_deref());\n-    set_fragment_for_url(local_url.as_mut(), frag.as_deref());\n+    web_url.as_mut().map(|url| url.set_fragment(frag.as_deref()));\n+    local_url.as_mut().map(|url| url.set_fragment(frag.as_deref()));\n \n     return DocumentationLinks {\n         web_url: web_url.map(|it| it.into()),\n         local_url: local_url.map(|it| it.into()),\n     };\n-\n-    fn join_url(base_url: Option<Url>, path: &str) -> Option<Url> {\n-        base_url.and_then(|url| url.join(path).ok())\n-    }\n-\n-    fn set_fragment_for_url(url: Option<&mut Url>, frag: Option<&str>) {\n-        url.map(|url| url.set_fragment(frag));\n-    }\n }\n \n fn rewrite_intra_doc_link(\n@@ -467,8 +462,14 @@ fn get_doc_base_urls(\n     def: Definition,\n     target_dir: Option<&OsStr>,\n ) -> (Option<Url>, Option<Url>) {\n-    let local_doc_path =\n-        target_dir.and_then(create_url_from_os_str).and_then(|it| it.join(\"doc/\").ok());\n+    let local_doc_path = target_dir\n+        .and_then(|path: &OsStr| -> Option<Url> {\n+            let mut with_prefix = OsStr::new(\"file:///\").to_os_string();\n+            with_prefix.push(path);\n+            with_prefix.push(\"/\");\n+            with_prefix.to_str().and_then(|s| Url::parse(s).ok())\n+        })\n+        .and_then(|it| it.join(\"doc/\").ok());\n     // special case base url of `BuiltinType` to core\n     // https://github.com/rust-lang/rust-analyzer/issues/12250\n     if let Definition::BuiltinType(..) = def {\n@@ -533,14 +534,7 @@ fn get_doc_base_urls(\n         .and_then(|it| it.join(&format!(\"{display_name}/\")).ok());\n     let local_base = local_base.and_then(|it| it.join(&format!(\"{display_name}/\")).ok());\n \n-    return (web_base, local_base);\n-\n-    fn create_url_from_os_str(path: &OsStr) -> Option<Url> {\n-        let mut with_prefix = OsStr::new(\"file:///\").to_os_string();\n-        with_prefix.push(path);\n-        with_prefix.push(\"/\");\n-        with_prefix.to_str().and_then(|s| Url::parse(s).ok())\n-    }\n+    (web_base, local_base)\n }\n \n /// Get the filename and extension generated for a symbol by rustdoc."}, {"sha": "7678ef5250c5eb83de05be92c7e24abda0c7101c", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/396934860c609bbe7d780fd072b77778ba220f44/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/396934860c609bbe7d780fd072b77778ba220f44/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=396934860c609bbe7d780fd072b77778ba220f44", "patch": "@@ -476,7 +476,7 @@ impl Analysis {\n         position: FilePosition,\n         target_dir: Option<&OsStr>,\n     ) -> Cancellable<doc_links::DocumentationLinks> {\n-        self.with_db(|db| doc_links::external_docs(db, &position, target_dir))\n+        self.with_db(|db| doc_links::external_docs(db, &position, target_dir).unwrap_or_default())\n     }\n \n     /// Computes parameter information at the given position."}, {"sha": "3d939b9847177a90c1cf1cbd37f8a1c6cfb2f9f3", "filename": "crates/rust-analyzer/src/handlers/request.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/396934860c609bbe7d780fd072b77778ba220f44/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/396934860c609bbe7d780fd072b77778ba220f44/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs?ref=396934860c609bbe7d780fd072b77778ba220f44", "patch": "@@ -1537,14 +1537,16 @@ pub(crate) fn handle_open_docs(\n     params: lsp_types::TextDocumentPositionParams,\n ) -> Result<(Option<lsp_types::Url>, Option<lsp_types::Url>)> {\n     let _p = profile::span(\"handle_open_docs\");\n+    let file_uri = &params.text_document.uri;\n+    let file_id = from_proto::file_id(&snap, file_uri)?;\n     let position = from_proto::file_position(&snap, params)?;\n \n-    let cargo = match snap.workspaces.get(0) {\n-        Some(ProjectWorkspace::Cargo { cargo, .. }) => Some(cargo),\n+    let cargo = match &*snap.analysis.crates_for(file_id)? {\n+        &[crate_id, ..] => snap.cargo_target_for_crate_root(crate_id).map(|(it, _)| it),\n         _ => None,\n     };\n-    let target_dir =\n-        cargo.and_then(|cargo| Some(cargo.target_directory())).and_then(|p| Some(p.as_os_str()));\n+\n+    let target_dir = cargo.map(|cargo| cargo.target_directory()).map(|p| p.as_os_str());\n     let Ok(remote_urls) = snap.analysis.external_docs(position, target_dir) else { return Ok((None, None)); };\n \n     let web_url = remote_urls.web_url.and_then(|it| Url::parse(&it).ok());"}]}