{"sha": "641c3785dc875744fae75d5c1db12708a819e235", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MWMzNzg1ZGM4NzU3NDRmYWU3NWQ1YzFkYjEyNzA4YTgxOWUyMzU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-14T15:54:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-14T15:54:45Z"}, "message": "Rollup merge of #81891 - CraftSpider:fn-header, r=jyn514\n\n[rustdoc-json] Make `header` a vec of modifiers, and FunctionPointer consistent\n\nBumps version number and adds tests, this is a breaking change. I can split this into two (`is_unsafe` -> `header` and `header: Vec<Modifiers>`) if desired.\n\nRationale: Modifiers are individual notes on a function, it makes more sense for them to be a list of an independent enum over a String which is inconsistently exposing the HIR representation (prefix_str vs custom literals).\nFunction pointers currently only support `unsafe`, but there has been talk on and off about allowing them to also support `const`, and this makes handling their modifiers consistent with handling those of a function, allowing better shared code.\n\n`@rustbot` modify labels: +A-rustdoc-json +T-rustdoc\nCC: `@HeroicKatora`\nr? `@jyn514`", "tree": {"sha": "c9fd4f4f525aaa389a6bba57dcaa061e181ed8e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9fd4f4f525aaa389a6bba57dcaa061e181ed8e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/641c3785dc875744fae75d5c1db12708a819e235", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgKUfFCRBK7hj4Ov3rIwAAdHIIAJ93nuwaDMjAx3YYjEwm4yMI\n3iCzQ2P2ipJjzj0bqnHaJe1D1HjkQjpYhA1WKTM/jL7B8vFUsbtoIS8RDOMvmaRX\nc59df503jW7/UxpmrfNyRJWSuuF1J18llWAB9zQUEhPCvMOZ9+i2X1IsNz02OVGg\nElLipYiHSQjkW8Xt8qGiVOwdqi7hi0XLJUsQwlQZMVbzXelRM1EGZpzNqWGkFo0y\nCFzgTG96DteeaqPW97CdRBb4fohUW6dsiTIA6WVPdKG+k20L0MTzo0m4zfTiezX+\nGCv1sSs/fo2PasVoSz+SGZ7vmSus/H8bqCcuzsfo/DHT3R9K/9PYlNHTnD6pwsM=\n=lPeU\n-----END PGP SIGNATURE-----\n", "payload": "tree c9fd4f4f525aaa389a6bba57dcaa061e181ed8e5\nparent e3b2655c3a37b9655cca934c475672517297b42f\nparent be4ea06643a5bd4ff3cb91efdaafd7acb070cb30\nauthor Dylan DPC <dylan.dpc@gmail.com> 1613318085 +0100\ncommitter GitHub <noreply@github.com> 1613318085 +0100\n\nRollup merge of #81891 - CraftSpider:fn-header, r=jyn514\n\n[rustdoc-json] Make `header` a vec of modifiers, and FunctionPointer consistent\n\nBumps version number and adds tests, this is a breaking change. I can split this into two (`is_unsafe` -> `header` and `header: Vec<Modifiers>`) if desired.\n\nRationale: Modifiers are individual notes on a function, it makes more sense for them to be a list of an independent enum over a String which is inconsistently exposing the HIR representation (prefix_str vs custom literals).\nFunction pointers currently only support `unsafe`, but there has been talk on and off about allowing them to also support `const`, and this makes handling their modifiers consistent with handling those of a function, allowing better shared code.\n\n`@rustbot` modify labels: +A-rustdoc-json +T-rustdoc\nCC: `@HeroicKatora`\nr? `@jyn514`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/641c3785dc875744fae75d5c1db12708a819e235", "html_url": "https://github.com/rust-lang/rust/commit/641c3785dc875744fae75d5c1db12708a819e235", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/641c3785dc875744fae75d5c1db12708a819e235/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3b2655c3a37b9655cca934c475672517297b42f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3b2655c3a37b9655cca934c475672517297b42f", "html_url": "https://github.com/rust-lang/rust/commit/e3b2655c3a37b9655cca934c475672517297b42f"}, {"sha": "be4ea06643a5bd4ff3cb91efdaafd7acb070cb30", "url": "https://api.github.com/repos/rust-lang/rust/commits/be4ea06643a5bd4ff3cb91efdaafd7acb070cb30", "html_url": "https://github.com/rust-lang/rust/commit/be4ea06643a5bd4ff3cb91efdaafd7acb070cb30"}], "stats": {"total": 112, "additions": 95, "deletions": 17}, "files": [{"sha": "7572b8c6f4a8c761b9d14fede1f5fcaae3986b57", "filename": "src/etc/check_missing_items.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/641c3785dc875744fae75d5c1db12708a819e235/src%2Fetc%2Fcheck_missing_items.py", "raw_url": "https://github.com/rust-lang/rust/raw/641c3785dc875744fae75d5c1db12708a819e235/src%2Fetc%2Fcheck_missing_items.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcheck_missing_items.py?ref=641c3785dc875744fae75d5c1db12708a819e235", "patch": "@@ -108,7 +108,7 @@ def check_type(ty):\n     elif ty[\"kind\"] == \"function_pointer\":\n         for param in ty[\"inner\"][\"generic_params\"]:\n             check_generic_param(param)\n-        check_decl(ty[\"inner\"][\"inner\"])\n+        check_decl(ty[\"inner\"][\"decl\"])\n     elif ty[\"kind\"] == \"qualified_path\":\n         check_type(ty[\"inner\"][\"self_type\"])\n         check_type(ty[\"inner\"][\"trait\"])"}, {"sha": "e2652ca378a81d78bade61d2edf208d1a8409291", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/641c3785dc875744fae75d5c1db12708a819e235/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641c3785dc875744fae75d5c1db12708a819e235/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=641c3785dc875744fae75d5c1db12708a819e235", "patch": "@@ -2,6 +2,8 @@\n //! the `clean` types but with some fields removed or stringified to simplify the output and not\n //! expose unstable compiler internals.\n \n+#![allow(rustc::default_hash_types)]\n+\n use std::convert::From;\n \n use rustc_ast::ast;\n@@ -16,6 +18,7 @@ use crate::clean;\n use crate::clean::utils::print_const_expr;\n use crate::formats::item_type::ItemType;\n use crate::json::JsonRenderer;\n+use std::collections::HashSet;\n \n impl JsonRenderer<'_> {\n     pub(super) fn convert_item(&self, item: clean::Item) -> Option<Item> {\n@@ -225,15 +228,22 @@ crate fn from_ctor_kind(struct_type: CtorKind) -> StructType {\n     }\n }\n \n-fn stringify_header(header: &rustc_hir::FnHeader) -> String {\n-    let mut s = String::from(header.unsafety.prefix_str());\n-    if header.asyncness == rustc_hir::IsAsync::Async {\n-        s.push_str(\"async \")\n+crate fn from_fn_header(header: &rustc_hir::FnHeader) -> HashSet<Qualifiers> {\n+    let mut v = HashSet::new();\n+\n+    if let rustc_hir::Unsafety::Unsafe = header.unsafety {\n+        v.insert(Qualifiers::Unsafe);\n+    }\n+\n+    if let rustc_hir::IsAsync::Async = header.asyncness {\n+        v.insert(Qualifiers::Async);\n     }\n-    if header.constness == rustc_hir::Constness::Const {\n-        s.push_str(\"const \")\n+\n+    if let rustc_hir::Constness::Const = header.constness {\n+        v.insert(Qualifiers::Const);\n     }\n-    s\n+\n+    v\n }\n \n impl From<clean::Function> for Function {\n@@ -242,7 +252,7 @@ impl From<clean::Function> for Function {\n         Function {\n             decl: decl.into(),\n             generics: generics.into(),\n-            header: stringify_header(&header),\n+            header: from_fn_header(&header),\n             abi: header.abi.to_string(),\n         }\n     }\n@@ -364,7 +374,13 @@ impl From<clean::BareFunctionDecl> for FunctionPointer {\n     fn from(bare_decl: clean::BareFunctionDecl) -> Self {\n         let clean::BareFunctionDecl { unsafety, generic_params, decl, abi } = bare_decl;\n         FunctionPointer {\n-            is_unsafe: unsafety == rustc_hir::Unsafety::Unsafe,\n+            header: if let rustc_hir::Unsafety::Unsafe = unsafety {\n+                let mut hs = HashSet::new();\n+                hs.insert(Qualifiers::Unsafe);\n+                hs\n+            } else {\n+                HashSet::new()\n+            },\n             generic_params: generic_params.into_iter().map(Into::into).collect(),\n             decl: decl.into(),\n             abi: abi.to_string(),\n@@ -439,7 +455,7 @@ crate fn from_function_method(function: clean::Function, has_body: bool) -> Meth\n     Method {\n         decl: decl.into(),\n         generics: generics.into(),\n-        header: stringify_header(&header),\n+        header: from_fn_header(&header),\n         abi: header.abi.to_string(),\n         has_body,\n     }"}, {"sha": "b31276c9dcb7fb49e5f35197f34573eb8e16054c", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/641c3785dc875744fae75d5c1db12708a819e235/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641c3785dc875744fae75d5c1db12708a819e235/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=641c3785dc875744fae75d5c1db12708a819e235", "patch": "@@ -243,7 +243,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                     )\n                 })\n                 .collect(),\n-            format_version: 3,\n+            format_version: 4,\n         };\n         let mut p = self.out_path.clone();\n         p.push(output.index.get(&output.root).unwrap().name.clone().unwrap());"}, {"sha": "6188b87d2c61746e17a23f9f01a8e694475e1b55", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/641c3785dc875744fae75d5c1db12708a819e235/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641c3785dc875744fae75d5c1db12708a819e235/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=641c3785dc875744fae75d5c1db12708a819e235", "patch": "@@ -3,7 +3,7 @@\n //! These types are the public API exposed through the `--output-format json` flag. The [`Crate`]\n //! struct is the root of the JSON blob and all other items are contained within.\n \n-use std::collections::HashMap;\n+use std::collections::{HashMap, HashSet};\n use std::path::PathBuf;\n \n use serde::{Deserialize, Serialize};\n@@ -281,19 +281,28 @@ pub enum StructType {\n     Unit,\n }\n \n+#[non_exhaustive]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq, Eq, Hash)]\n+#[serde(rename_all = \"snake_case\")]\n+pub enum Qualifiers {\n+    Const,\n+    Unsafe,\n+    Async,\n+}\n+\n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct Function {\n     pub decl: FnDecl,\n     pub generics: Generics,\n-    pub header: String,\n+    pub header: HashSet<Qualifiers>,\n     pub abi: String,\n }\n \n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct Method {\n     pub decl: FnDecl,\n     pub generics: Generics,\n-    pub header: String,\n+    pub header: HashSet<Qualifiers>,\n     pub abi: String,\n     pub has_body: bool,\n }\n@@ -404,9 +413,9 @@ pub enum Type {\n \n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct FunctionPointer {\n-    pub is_unsafe: bool,\n-    pub generic_params: Vec<GenericParamDef>,\n     pub decl: FnDecl,\n+    pub generic_params: Vec<GenericParamDef>,\n+    pub header: HashSet<Qualifiers>,\n     pub abi: String,\n }\n "}, {"sha": "a5038e0cd2aa86e6dfe72294514d0bd75ea974ff", "filename": "src/test/rustdoc-json/fn_pointer/header.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/641c3785dc875744fae75d5c1db12708a819e235/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641c3785dc875744fae75d5c1db12708a819e235/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fheader.rs?ref=641c3785dc875744fae75d5c1db12708a819e235", "patch": "@@ -0,0 +1,5 @@\n+// @has header.json \"$.index[*][?(@.name=='FnPointer')].inner.type.inner.header\" \"[]\"\n+pub type FnPointer = fn();\n+\n+// @has - \"$.index[*][?(@.name=='UnsafePointer')].inner.type.inner.header\" '[\"unsafe\"]'\n+pub type UnsafePointer = unsafe fn();"}, {"sha": "29741dd50dadc927e5a3b7696b317233c14b5cdc", "filename": "src/test/rustdoc-json/fns/header.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/641c3785dc875744fae75d5c1db12708a819e235/src%2Ftest%2Frustdoc-json%2Ffns%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641c3785dc875744fae75d5c1db12708a819e235/src%2Ftest%2Frustdoc-json%2Ffns%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fheader.rs?ref=641c3785dc875744fae75d5c1db12708a819e235", "patch": "@@ -0,0 +1,22 @@\n+// edition:2018\n+\n+// @has header.json \"$.index[*][?(@.name=='nothing_fn')].inner.header\" \"[]\"\n+pub fn nothing_fn() {}\n+\n+// @has - \"$.index[*][?(@.name=='const_fn')].inner.header\" '[\"const\"]'\n+pub const fn const_fn() {}\n+\n+// @has - \"$.index[*][?(@.name=='async_fn')].inner.header\" '[\"async\"]'\n+pub async fn async_fn() {}\n+\n+// @count - \"$.index[*][?(@.name=='async_unsafe_fn')].inner.header[*]\" 2\n+// @has - \"$.index[*][?(@.name=='async_unsafe_fn')].inner.header[*]\" '\"async\"'\n+// @has - \"$.index[*][?(@.name=='async_unsafe_fn')].inner.header[*]\" '\"unsafe\"'\n+pub async unsafe fn async_unsafe_fn() {}\n+\n+// @count - \"$.index[*][?(@.name=='const_unsafe_fn')].inner.header[*]\" 2\n+// @has - \"$.index[*][?(@.name=='const_unsafe_fn')].inner.header[*]\" '\"const\"'\n+// @has - \"$.index[*][?(@.name=='const_unsafe_fn')].inner.header[*]\" '\"unsafe\"'\n+pub const unsafe fn const_unsafe_fn() {}\n+\n+// It's impossible for a function to be both const and async, so no test for that"}, {"sha": "50a3db75ef395a14c315d7f88e4e1b13f77c88e2", "filename": "src/test/rustdoc-json/methods/header.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/641c3785dc875744fae75d5c1db12708a819e235/src%2Ftest%2Frustdoc-json%2Fmethods%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641c3785dc875744fae75d5c1db12708a819e235/src%2Ftest%2Frustdoc-json%2Fmethods%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fmethods%2Fheader.rs?ref=641c3785dc875744fae75d5c1db12708a819e235", "patch": "@@ -0,0 +1,26 @@\n+// edition:2018\n+\n+pub struct Foo;\n+\n+impl Foo {\n+    // @has header.json \"$.index[*][?(@.name=='nothing_meth')].inner.header\" \"[]\"\n+    pub fn nothing_meth() {}\n+\n+    // @has - \"$.index[*][?(@.name=='const_meth')].inner.header\" '[\"const\"]'\n+    pub const fn const_meth() {}\n+\n+    // @has - \"$.index[*][?(@.name=='async_meth')].inner.header\" '[\"async\"]'\n+    pub async fn async_meth() {}\n+\n+    // @count - \"$.index[*][?(@.name=='async_unsafe_meth')].inner.header[*]\" 2\n+    // @has - \"$.index[*][?(@.name=='async_unsafe_meth')].inner.header[*]\" '\"async\"'\n+    // @has - \"$.index[*][?(@.name=='async_unsafe_meth')].inner.header[*]\" '\"unsafe\"'\n+    pub async unsafe fn async_unsafe_meth() {}\n+\n+    // @count - \"$.index[*][?(@.name=='const_unsafe_meth')].inner.header[*]\" 2\n+    // @has - \"$.index[*][?(@.name=='const_unsafe_meth')].inner.header[*]\" '\"const\"'\n+    // @has - \"$.index[*][?(@.name=='const_unsafe_meth')].inner.header[*]\" '\"unsafe\"'\n+    pub const unsafe fn const_unsafe_meth() {}\n+\n+    // It's impossible for a method to be both const and async, so no test for that\n+}"}]}