{"sha": "98efae87607aabd7c30b879befe61bf9c29eb978", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZWZhZTg3NjA3YWFiZDdjMzBiODc5YmVmZTYxYmY5YzI5ZWI5Nzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-28T17:39:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-28T17:39:39Z"}, "message": "Auto merge of #74482 - alexcrichton:update-stdarch, r=hanna-kruppe\n\nUpdate stdarch submodule\n\nThis commit updates the src/stdarch submodule primarily to include\nrust-lang/stdarch#874 which updated and revamped WebAssembly SIMD\nintrinsics and renamed WebAssembly atomics intrinsics. This is all\nunstable surface area of the standard library so the changes should be\nok here. The SIMD updates also enable SIMD intrinsics to be used by any\nprogram any any time, yay!\n\ncc #74372, a tracking issue I've opened for the stabilization of SIMD\nintrinsics", "tree": {"sha": "1dd6263cfe68f6594577fb322bf1ce2c5d731a01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1dd6263cfe68f6594577fb322bf1ce2c5d731a01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98efae87607aabd7c30b879befe61bf9c29eb978", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98efae87607aabd7c30b879befe61bf9c29eb978", "html_url": "https://github.com/rust-lang/rust/commit/98efae87607aabd7c30b879befe61bf9c29eb978", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98efae87607aabd7c30b879befe61bf9c29eb978/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b3a7819371cef92a187e9bac8f7810ccde15216", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b3a7819371cef92a187e9bac8f7810ccde15216", "html_url": "https://github.com/rust-lang/rust/commit/7b3a7819371cef92a187e9bac8f7810ccde15216"}, {"sha": "83b493018a31dc6510058a720f386de8ecac4577", "url": "https://api.github.com/repos/rust-lang/rust/commits/83b493018a31dc6510058a720f386de8ecac4577", "html_url": "https://github.com/rust-lang/rust/commit/83b493018a31dc6510058a720f386de8ecac4577"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "d86bb60507be2c0d9bd0f410bd3b8048a4d2f052", "filename": "library/std/src/sys/wasm/condvar_atomics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98efae87607aabd7c30b879befe61bf9c29eb978/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fcondvar_atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98efae87607aabd7c30b879befe61bf9c29eb978/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fcondvar_atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fcondvar_atomics.rs?ref=98efae87607aabd7c30b879befe61bf9c29eb978", "patch": "@@ -42,13 +42,13 @@ impl Condvar {\n \n     pub unsafe fn notify_one(&self) {\n         self.cnt.fetch_add(1, SeqCst);\n-        wasm32::atomic_notify(self.ptr(), 1);\n+        wasm32::memory_atomic_notify(self.ptr(), 1);\n     }\n \n     #[inline]\n     pub unsafe fn notify_all(&self) {\n         self.cnt.fetch_add(1, SeqCst);\n-        wasm32::atomic_notify(self.ptr(), u32::MAX); // -1 == \"wake everyone\"\n+        wasm32::memory_atomic_notify(self.ptr(), u32::MAX); // -1 == \"wake everyone\"\n     }\n \n     pub unsafe fn wait(&self, mutex: &Mutex) {\n@@ -62,7 +62,7 @@ impl Condvar {\n         // wake us up once we're asleep.\n         let ticket = self.cnt.load(SeqCst) as i32;\n         mutex.unlock();\n-        let val = wasm32::i32_atomic_wait(self.ptr(), ticket, -1);\n+        let val = wasm32::memory_atomic_wait32(self.ptr(), ticket, -1);\n         // 0 == woken, 1 == not equal to `ticket`, 2 == timeout (shouldn't happen)\n         debug_assert!(val == 0 || val == 1);\n         mutex.lock();\n@@ -76,7 +76,7 @@ impl Condvar {\n \n         // If the return value is 2 then a timeout happened, so we return\n         // `false` as we weren't actually notified.\n-        let ret = wasm32::i32_atomic_wait(self.ptr(), ticket, nanos as i64) != 2;\n+        let ret = wasm32::memory_atomic_wait32(self.ptr(), ticket, nanos as i64) != 2;\n         mutex.lock();\n         return ret;\n     }"}, {"sha": "4b1a7c9b48141c04632f09560d64cacbeed77f4e", "filename": "library/std/src/sys/wasm/mutex_atomics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98efae87607aabd7c30b879befe61bf9c29eb978/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmutex_atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98efae87607aabd7c30b879befe61bf9c29eb978/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmutex_atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmutex_atomics.rs?ref=98efae87607aabd7c30b879befe61bf9c29eb978", "patch": "@@ -26,7 +26,7 @@ impl Mutex {\n \n     pub unsafe fn lock(&self) {\n         while !self.try_lock() {\n-            let val = wasm32::i32_atomic_wait(\n+            let val = wasm32::memory_atomic_wait32(\n                 self.ptr(),\n                 1,  // we expect our mutex is locked\n                 -1, // wait infinitely\n@@ -40,7 +40,7 @@ impl Mutex {\n     pub unsafe fn unlock(&self) {\n         let prev = self.locked.swap(0, SeqCst);\n         debug_assert_eq!(prev, 1);\n-        wasm32::atomic_notify(self.ptr(), 1); // wake up one waiter, if any\n+        wasm32::memory_atomic_notify(self.ptr(), 1); // wake up one waiter, if any\n     }\n \n     #[inline]\n@@ -91,7 +91,7 @@ impl ReentrantMutex {\n     pub unsafe fn lock(&self) {\n         let me = thread::my_id();\n         while let Err(owner) = self._try_lock(me) {\n-            let val = wasm32::i32_atomic_wait(self.ptr(), owner as i32, -1);\n+            let val = wasm32::memory_atomic_wait32(self.ptr(), owner as i32, -1);\n             debug_assert!(val == 0 || val == 1);\n         }\n     }\n@@ -130,7 +130,7 @@ impl ReentrantMutex {\n         match *self.recursions.get() {\n             0 => {\n                 self.owner.swap(0, SeqCst);\n-                wasm32::atomic_notify(self.ptr() as *mut i32, 1); // wake up one waiter, if any\n+                wasm32::memory_atomic_notify(self.ptr() as *mut i32, 1); // wake up one waiter, if any\n             }\n             ref mut n => *n -= 1,\n         }"}, {"sha": "95a9230aa7888a4cc5ce474b977d54053f1bbb22", "filename": "library/std/src/sys/wasm/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98efae87607aabd7c30b879befe61bf9c29eb978/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98efae87607aabd7c30b879befe61bf9c29eb978/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fthread.rs?ref=98efae87607aabd7c30b879befe61bf9c29eb978", "patch": "@@ -40,7 +40,7 @@ impl Thread {\n         while nanos > 0 {\n             let amt = cmp::min(i64::MAX as u128, nanos);\n             let mut x = 0;\n-            let val = unsafe { wasm32::i32_atomic_wait(&mut x, 0, amt as i64) };\n+            let val = unsafe { wasm32::memory_atomic_wait32(&mut x, 0, amt as i64) };\n             debug_assert_eq!(val, 2);\n             nanos -= amt;\n         }"}, {"sha": "311d56cd91609c1c1c0370cbd2ece8e3048653a5", "filename": "library/stdarch", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstdarch?ref=98efae87607aabd7c30b879befe61bf9c29eb978", "patch": "@@ -1 +1 @@\n-Subproject commit 45340c0e2fdadf2f131ef43cb683b5cafab0ff15\n+Subproject commit 311d56cd91609c1c1c0370cbd2ece8e3048653a5"}]}