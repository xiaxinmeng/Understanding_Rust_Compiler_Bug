{"sha": "b6a1b45c2448c48214fb1a0ad3479aac6f2f9346", "node_id": "C_kwDOAAsO6NoAKGI2YTFiNDVjMjQ0OGM0ODIxNGZiMWEwYWQzNDc5YWFjNmYyZjkzNDY", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-04-28T17:20:23Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-04-28T17:20:23Z"}, "message": "Make \"inline type alias\" work for `Self`", "tree": {"sha": "52170d9b01611aca1a4233c7be327b50b79c5881", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52170d9b01611aca1a4233c7be327b50b79c5881"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6a1b45c2448c48214fb1a0ad3479aac6f2f9346", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6a1b45c2448c48214fb1a0ad3479aac6f2f9346", "html_url": "https://github.com/rust-lang/rust/commit/b6a1b45c2448c48214fb1a0ad3479aac6f2f9346", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6a1b45c2448c48214fb1a0ad3479aac6f2f9346/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d382e24a11c8706b201c8437894506d191691334", "url": "https://api.github.com/repos/rust-lang/rust/commits/d382e24a11c8706b201c8437894506d191691334", "html_url": "https://github.com/rust-lang/rust/commit/d382e24a11c8706b201c8437894506d191691334"}], "stats": {"total": 110, "additions": 93, "deletions": 17}, "files": [{"sha": "369f197456a94819709c4d68ef0e6f225cbad993", "filename": "crates/ide_assists/src/handlers/inline_type_alias.rs", "status": "modified", "additions": 93, "deletions": 17, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/b6a1b45c2448c48214fb1a0ad3479aac6f2f9346/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_type_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6a1b45c2448c48214fb1a0ad3479aac6f2f9346/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_type_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_type_alias.rs?ref=b6a1b45c2448c48214fb1a0ad3479aac6f2f9346", "patch": "@@ -3,7 +3,7 @@\n // - \"inline_alias_to_users\" assist #10881.\n // - Remove unused aliases if there are no longer any users, see inline_call.rs.\n \n-use hir::PathResolution;\n+use hir::{HasSource, PathResolution};\n use itertools::Itertools;\n use std::collections::HashMap;\n use syntax::{\n@@ -41,31 +41,48 @@ use crate::{\n // }\n // ```\n pub(crate) fn inline_type_alias(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let alias_instance = ctx.find_node_at_offset::<ast::PathType>()?;\n-    let alias = get_type_alias(&ctx, &alias_instance)?;\n-    let concrete_type = alias.ty()?;\n-\n     enum Replacement {\n         Generic { lifetime_map: LifetimeMap, const_and_type_map: ConstAndTypeMap },\n         Plain,\n     }\n \n-    let replacement = if let Some(alias_generics) = alias.generic_param_list() {\n-        if alias_generics.generic_params().next().is_none() {\n-            cov_mark::hit!(no_generics_params);\n-            return None;\n+    let alias_instance = ctx.find_node_at_offset::<ast::PathType>()?;\n+    let concrete_type;\n+    let replacement;\n+    match alias_instance.path()?.as_single_name_ref() {\n+        Some(nameref) if nameref.Self_token().is_some() => {\n+            match ctx.sema.resolve_path(&alias_instance.path()?)? {\n+                PathResolution::SelfType(imp) => {\n+                    concrete_type = imp.source(ctx.db())?.value.self_ty()?;\n+                }\n+                // FIXME: should also work in ADT definitions\n+                _ => return None,\n+            }\n+\n+            replacement = Replacement::Plain;\n         }\n+        _ => {\n+            let alias = get_type_alias(&ctx, &alias_instance)?;\n+            concrete_type = alias.ty()?;\n+\n+            replacement = if let Some(alias_generics) = alias.generic_param_list() {\n+                if alias_generics.generic_params().next().is_none() {\n+                    cov_mark::hit!(no_generics_params);\n+                    return None;\n+                }\n \n-        let instance_args =\n-            alias_instance.syntax().descendants().find_map(ast::GenericArgList::cast);\n+                let instance_args =\n+                    alias_instance.syntax().descendants().find_map(ast::GenericArgList::cast);\n \n-        Replacement::Generic {\n-            lifetime_map: LifetimeMap::new(&instance_args, &alias_generics)?,\n-            const_and_type_map: ConstAndTypeMap::new(&instance_args, &alias_generics)?,\n+                Replacement::Generic {\n+                    lifetime_map: LifetimeMap::new(&instance_args, &alias_generics)?,\n+                    const_and_type_map: ConstAndTypeMap::new(&instance_args, &alias_generics)?,\n+                }\n+            } else {\n+                Replacement::Plain\n+            };\n         }\n-    } else {\n-        Replacement::Plain\n-    };\n+    }\n \n     let target = alias_instance.syntax().text_range();\n \n@@ -752,6 +769,65 @@ mod foo {\n fn main() {\n     let a: String;\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_self_type() {\n+        check_assist(\n+            inline_type_alias,\n+            r#\"\n+struct Strukt;\n+\n+impl Strukt {\n+    fn new() -> Self$0 {}\n+}\n+\"#,\n+            r#\"\n+struct Strukt;\n+\n+impl Strukt {\n+    fn new() -> Strukt {}\n+}\n+\"#,\n+        );\n+        check_assist(\n+            inline_type_alias,\n+            r#\"\n+struct Strukt<'a, T, const C: usize>(&'a [T; C]);\n+\n+impl<T, const C: usize> Strukt<'_, T, C> {\n+    fn new() -> Self$0 {}\n+}\n+\"#,\n+            r#\"\n+struct Strukt<'a, T, const C: usize>(&'a [T; C]);\n+\n+impl<T, const C: usize> Strukt<'_, T, C> {\n+    fn new() -> Strukt<'_, T, C> {}\n+}\n+\"#,\n+        );\n+        check_assist(\n+            inline_type_alias,\n+            r#\"\n+struct Strukt<'a, T, const C: usize>(&'a [T; C]);\n+\n+trait Tr<'b, T> {}\n+\n+impl<T, const C: usize> Tr<'static, u8> for Strukt<'_, T, C> {\n+    fn new() -> Self$0 {}\n+}\n+\"#,\n+            r#\"\n+struct Strukt<'a, T, const C: usize>(&'a [T; C]);\n+\n+trait Tr<'b, T> {}\n+\n+impl<T, const C: usize> Tr<'static, u8> for Strukt<'_, T, C> {\n+    fn new() -> Strukt<'_, T, C> {}\n+}\n \"#,\n         );\n     }"}]}