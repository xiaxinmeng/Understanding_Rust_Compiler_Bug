{"sha": "6ccf9b8134653a7b2330e5ccc874b7cf8bb65d09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjY2Y5YjgxMzQ2NTNhN2IyMzMwZTVjY2M4NzRiN2NmOGJiNjVkMDk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-28T15:43:53Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-07T15:37:47Z"}, "message": "change from tuple struct to brace struct", "tree": {"sha": "7e4d8dec0e60e380a234868ae29367fa787729c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e4d8dec0e60e380a234868ae29367fa787729c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ccf9b8134653a7b2330e5ccc874b7cf8bb65d09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ccf9b8134653a7b2330e5ccc874b7cf8bb65d09", "html_url": "https://github.com/rust-lang/rust/commit/6ccf9b8134653a7b2330e5ccc874b7cf8bb65d09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ccf9b8134653a7b2330e5ccc874b7cf8bb65d09/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "html_url": "https://github.com/rust-lang/rust/commit/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a"}], "stats": {"total": 44, "additions": 23, "deletions": 21}, "files": [{"sha": "124987820198ef0ebd32e80c5599f21c61461002", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ccf9b8134653a7b2330e5ccc874b7cf8bb65d09/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ccf9b8134653a7b2330e5ccc874b7cf8bb65d09/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=6ccf9b8134653a7b2330e5ccc874b7cf8bb65d09", "patch": "@@ -44,7 +44,7 @@ newtype_index! {\n }\n \n impl DepNodeIndex {\n-    const INVALID: DepNodeIndex = DepNodeIndex(::std::u32::MAX);\n+    const INVALID: DepNodeIndex = DepNodeIndex { private: ::std::u32::MAX };\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n@@ -1127,14 +1127,14 @@ impl DepNodeColorMap {\n         match self.values[index] {\n             COMPRESSED_NONE => None,\n             COMPRESSED_RED => Some(DepNodeColor::Red),\n-            value => Some(DepNodeColor::Green(DepNodeIndex(value - COMPRESSED_FIRST_GREEN)))\n+            value => Some(DepNodeColor::Green(DepNodeIndex { private: value - COMPRESSED_FIRST_GREEN })),\n         }\n     }\n \n     fn insert(&mut self, index: SerializedDepNodeIndex, color: DepNodeColor) {\n         self.values[index] = match color {\n             DepNodeColor::Red => COMPRESSED_RED,\n-            DepNodeColor::Green(index) => index.0 + COMPRESSED_FIRST_GREEN,\n+            DepNodeColor::Green(index) => index.private + COMPRESSED_FIRST_GREEN,\n         }\n     }\n }"}, {"sha": "2f58c1e93715b83290636d07ec76be0e89eaa3fb", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ccf9b8134653a7b2330e5ccc874b7cf8bb65d09/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ccf9b8134653a7b2330e5ccc874b7cf8bb65d09/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=6ccf9b8134653a7b2330e5ccc874b7cf8bb65d09", "patch": "@@ -41,15 +41,15 @@ newtype_index! {\n impl CrateNum {\n     pub fn new(x: usize) -> CrateNum {\n         assert!(x < (u32::MAX as usize));\n-        CrateNum(x as u32)\n+        CrateNum { private: x as u32 }\n     }\n \n     pub fn from_u32(x: u32) -> CrateNum {\n-        CrateNum(x)\n+        CrateNum { private: x }\n     }\n \n     pub fn as_usize(&self) -> usize {\n-        self.0 as usize\n+        self.private as usize\n     }\n \n     pub fn as_u32(&self) -> u32 {\n@@ -61,7 +61,7 @@ impl CrateNum {\n \n impl fmt::Display for CrateNum {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Display::fmt(&self.0, f)\n+        fmt::Display::fmt(&self.private, f)\n     }\n }\n "}, {"sha": "f6a8f8dc172d4c0266b9b73b9547ef3380ede793", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ccf9b8134653a7b2330e5ccc874b7cf8bb65d09/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ccf9b8134653a7b2330e5ccc874b7cf8bb65d09/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=6ccf9b8134653a7b2330e5ccc874b7cf8bb65d09", "patch": "@@ -165,7 +165,7 @@ newtype_index! {\n     }\n }\n \n-impl_stable_hash_for!(tuple_struct ::middle::region::FirstStatementIndex { idx });\n+impl_stable_hash_for!(struct ::middle::region::FirstStatementIndex { private });\n \n impl From<ScopeData> for Scope {\n     #[inline]"}, {"sha": "7d7fac7d28bbac8752817eb402c820c2fde1896b", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ccf9b8134653a7b2330e5ccc874b7cf8bb65d09/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ccf9b8134653a7b2330e5ccc874b7cf8bb65d09/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=6ccf9b8134653a7b2330e5ccc874b7cf8bb65d09", "patch": "@@ -132,7 +132,7 @@ pub struct Mir<'tcx> {\n }\n \n /// where execution begins\n-pub const START_BLOCK: BasicBlock = BasicBlock(0);\n+pub const START_BLOCK: BasicBlock = BasicBlock { private: 0 };\n \n impl<'tcx> Mir<'tcx> {\n     pub fn new(\n@@ -239,7 +239,7 @@ impl<'tcx> Mir<'tcx> {\n \n     #[inline]\n     pub fn local_kind(&self, local: Local) -> LocalKind {\n-        let index = local.0 as usize;\n+        let index = local.private as usize;\n         if index == 0 {\n             debug_assert!(\n                 self.local_decls[local].mutability == Mutability::Mut,"}, {"sha": "bc871df482630d91de4c7b2784636f411691b47b", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ccf9b8134653a7b2330e5ccc874b7cf8bb65d09/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ccf9b8134653a7b2330e5ccc874b7cf8bb65d09/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=6ccf9b8134653a7b2330e5ccc874b7cf8bb65d09", "patch": "@@ -1274,7 +1274,7 @@ impl DebruijnIndex {\n     /// you would need to shift the index for `'a` into 1 new binder.\n     #[must_use]\n     pub const fn shifted_in(self, amount: u32) -> DebruijnIndex {\n-        DebruijnIndex(self.0 + amount)\n+        DebruijnIndex { private: self.private + amount }\n     }\n \n     /// Update this index in place by shifting it \"in\" through\n@@ -1287,7 +1287,7 @@ impl DebruijnIndex {\n     /// `amount` number of new binders.\n     #[must_use]\n     pub const fn shifted_out(self, amount: u32) -> DebruijnIndex {\n-        DebruijnIndex(self.0 - amount)\n+        DebruijnIndex { private: self.private - amount }\n     }\n \n     /// Update in place by shifting out from `amount` binders.\n@@ -1316,11 +1316,11 @@ impl DebruijnIndex {\n     /// bound by one of the binders we are shifting out of, that is an\n     /// error (and should fail an assertion failure).\n     pub fn shifted_out_to_binder(self, to_binder: DebruijnIndex) -> Self {\n-        self.shifted_out((to_binder.0 - INNERMOST.0) as u32)\n+        self.shifted_out((to_binder.private - INNERMOST.private) as u32)\n     }\n }\n \n-impl_stable_hash_for!(tuple_struct DebruijnIndex { index });\n+impl_stable_hash_for!(struct DebruijnIndex { private });\n \n /// Region utilities\n impl RegionKind {"}, {"sha": "f7ef8c7af1a5232a6c2748c7cb5327db0058a6fb", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6ccf9b8134653a7b2330e5ccc874b7cf8bb65d09/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ccf9b8134653a7b2330e5ccc874b7cf8bb65d09/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=6ccf9b8134653a7b2330e5ccc874b7cf8bb65d09", "patch": "@@ -97,7 +97,9 @@ macro_rules! newtype_index {\n      @vis          [$v:vis]\n      @debug_format [$debug_format:tt]) => (\n         #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, $($derives),*)]\n-        $v struct $type(u32);\n+        $v struct $type {\n+            private: u32\n+        }\n \n         impl $type {\n             /// Extract value of this index as an integer.\n@@ -111,12 +113,12 @@ macro_rules! newtype_index {\n             #[inline]\n             fn new(value: usize) -> Self {\n                 assert!(value < ($max) as usize);\n-                $type(value as u32)\n+                $type { private: value as u32 }\n             }\n \n             #[inline]\n             fn index(self) -> usize {\n-                self.0 as usize\n+                self.private as usize\n             }\n         }\n \n@@ -151,13 +153,13 @@ macro_rules! newtype_index {\n \n         impl From<$type> for u32 {\n             fn from(v: $type) -> u32 {\n-                v.0\n+                v.private\n             }\n         }\n \n         impl From<$type> for usize {\n             fn from(v: $type) -> usize {\n-                v.0 as usize\n+                v.private as usize\n             }\n         }\n \n@@ -193,7 +195,7 @@ macro_rules! newtype_index {\n      @debug_format [$debug_format:tt]) => (\n         impl ::std::fmt::Debug for $type {\n             fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n-                write!(fmt, $debug_format, self.0)\n+                write!(fmt, $debug_format, self.private)\n             }\n         }\n     );\n@@ -376,7 +378,7 @@ macro_rules! newtype_index {\n                    const $name:ident = $constant:expr,\n                    $($tokens:tt)*) => (\n         $(#[doc = $doc])*\n-        pub const $name: $type = $type($constant);\n+        pub const $name: $type = $type { private: $constant  };\n         newtype_index!(\n             @derives      [$($derives,)*]\n             @type         [$type]"}]}