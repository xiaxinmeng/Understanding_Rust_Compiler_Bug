{"sha": "ac23bcd2980c98cf6145524f31c63320431d5d4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMjNiY2QyOTgwYzk4Y2Y2MTQ1NTI0ZjMxYzYzMzIwNDMxZDVkNGE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-25T08:47:34Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-25T08:47:34Z"}, "message": "test using the Global allocator trait to alloc/free a Box", "tree": {"sha": "35d649d2619fab532e44133cf61dacbc6481724c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35d649d2619fab532e44133cf61dacbc6481724c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac23bcd2980c98cf6145524f31c63320431d5d4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac23bcd2980c98cf6145524f31c63320431d5d4a", "html_url": "https://github.com/rust-lang/rust/commit/ac23bcd2980c98cf6145524f31c63320431d5d4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac23bcd2980c98cf6145524f31c63320431d5d4a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "724be298a1e12593dbc3786cafc307627e46e802", "url": "https://api.github.com/repos/rust-lang/rust/commits/724be298a1e12593dbc3786cafc307627e46e802", "html_url": "https://github.com/rust-lang/rust/commit/724be298a1e12593dbc3786cafc307627e46e802"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "e1aace8cecaf11a685ef9da1426f2410a4080694", "filename": "tests/run-pass/heap_allocator.rs", "status": "renamed", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ac23bcd2980c98cf6145524f31c63320431d5d4a/tests%2Frun-pass%2Fheap_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac23bcd2980c98cf6145524f31c63320431d5d4a/tests%2Frun-pass%2Fheap_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fheap_allocator.rs?ref=ac23bcd2980c98cf6145524f31c63320431d5d4a", "patch": "@@ -1,6 +1,7 @@\n //ignore-windows: Inspects allocation base address on Windows\n #![feature(allocator_api)]\n \n+use std::ptr::NonNull;\n use std::alloc::{Global, Alloc, Layout, System};\n \n fn check_overalign_requests<T: Alloc>(mut allocator: T) {\n@@ -23,7 +24,31 @@ fn check_overalign_requests<T: Alloc>(mut allocator: T) {\n     }\n }\n \n+fn global_to_box() {\n+    type T = [i32; 4];\n+    let l = Layout::new::<T>();\n+    // allocate manually with global allocator, then turn into Box and free there\n+    unsafe {\n+        let ptr = Global.alloc(l).unwrap().as_ptr() as *mut T;\n+        let b = Box::from_raw(ptr);\n+        drop(b);\n+    }\n+}\n+\n+fn box_to_global() {\n+    type T = [i32; 4];\n+    let l = Layout::new::<T>();\n+    // allocate with the Box, then deallocate manually with global allocator\n+    unsafe {\n+        let b = Box::new(T::default());\n+        let ptr = Box::into_raw(b);\n+        Global.dealloc(NonNull::new(ptr as *mut u8).unwrap(), l);\n+    }\n+}\n+\n fn main() {\n     check_overalign_requests(System);\n     check_overalign_requests(Global);\n+    global_to_box();\n+    box_to_global();\n }", "previous_filename": "tests/run-pass/heap_system.rs"}]}