{"sha": "66108be99d6736d63e47c2f7f5b75ab703822557", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2MTA4YmU5OWQ2NzM2ZDYzZTQ3YzJmN2Y1Yjc1YWI3MDM4MjI1NTc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-08-23T16:08:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-23T16:08:53Z"}, "message": "Merge pull request #308 from oli-obk/libstd\n\nrustup", "tree": {"sha": "190f73913983f64240f51a6bec0b73e06857e8fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/190f73913983f64240f51a6bec0b73e06857e8fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66108be99d6736d63e47c2f7f5b75ab703822557", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66108be99d6736d63e47c2f7f5b75ab703822557", "html_url": "https://github.com/rust-lang/rust/commit/66108be99d6736d63e47c2f7f5b75ab703822557", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66108be99d6736d63e47c2f7f5b75ab703822557/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d60c614e644cda97758bba5eaa6feb6b0dc5854", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d60c614e644cda97758bba5eaa6feb6b0dc5854", "html_url": "https://github.com/rust-lang/rust/commit/5d60c614e644cda97758bba5eaa6feb6b0dc5854"}, {"sha": "f75dd90961261760fc87031284135a6bb0b46ba1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f75dd90961261760fc87031284135a6bb0b46ba1", "html_url": "https://github.com/rust-lang/rust/commit/f75dd90961261760fc87031284135a6bb0b46ba1"}], "stats": {"total": 53, "additions": 12, "deletions": 41}, "files": [{"sha": "d4b7761567de7577e95f5a74817158a002174162", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66108be99d6736d63e47c2f7f5b75ab703822557/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66108be99d6736d63e47c2f7f5b75ab703822557/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=66108be99d6736d63e47c2f7f5b75ab703822557", "patch": "@@ -2270,6 +2270,12 @@ fn resolve_associated_item<'a, 'tcx>(\n                 substs: rcvr_substs,\n             }\n         }\n+        ::rustc::traits::VtableBuiltin(..) if Some(trait_id) == tcx.lang_items.clone_trait() => {\n+            ty::Instance {\n+                def: ty::InstanceDef::CloneShim(def_id, trait_ref.self_ty()),\n+                substs: rcvr_substs\n+            }\n+        }\n         _ => bug!(\"static call to invalid vtable: {:?}\", vtbl),\n     }\n }"}, {"sha": "d8a432cfa482b5b3b2834abca3eb8dd007dbe4de", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 5, "deletions": 41, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/66108be99d6736d63e47c2f7f5b75ab703822557/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66108be99d6736d63e47c2f7f5b75ab703822557/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=66108be99d6736d63e47c2f7f5b75ab703822557", "patch": "@@ -256,6 +256,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 self.dump_local(ret);\n                 Ok(())\n             }\n+            // FIXME: figure out why we can't just go through the shim\n             ty::InstanceDef::ClosureOnceShim { .. } => {\n                 let mut args = Vec::new();\n                 for arg in arg_operands {\n@@ -297,6 +298,9 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 }\n                 Ok(())\n             }\n+            ty::InstanceDef::FnPtrShim(..) |\n+            ty::InstanceDef::DropGlue(..) |\n+            ty::InstanceDef::CloneShim(..) |\n             ty::InstanceDef::Item(_) => {\n                 let mut args = Vec::new();\n                 for arg in arg_operands {\n@@ -394,47 +398,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 }\n                 Ok(())\n             }\n-            ty::InstanceDef::DropGlue(..) => {\n-                assert_eq!(arg_operands.len(), 1);\n-                assert_eq!(sig.abi, Abi::Rust);\n-                let val = self.eval_operand(&arg_operands[0])?;\n-                let ty = self.operand_ty(&arg_operands[0]);\n-                let (_, target) = destination.expect(\"diverging drop glue\");\n-                self.goto_block(target);\n-                // FIXME: deduplicate these matches\n-                let pointee_type = match ty.sty {\n-                    ty::TyRawPtr(ref tam) |\n-                    ty::TyRef(_, ref tam) => tam.ty,\n-                    ty::TyAdt(def, _) if def.is_box() => ty.boxed_ty(),\n-                    _ => bug!(\"can only deref pointer types\"),\n-                };\n-                self.drop(val, instance, pointee_type, span)\n-            }\n-            ty::InstanceDef::FnPtrShim(..) => {\n-                trace!(\"ABI: {}\", sig.abi);\n-                let mut args = Vec::new();\n-                for arg in arg_operands {\n-                    let arg_val = self.eval_operand(arg)?;\n-                    let arg_ty = self.operand_ty(arg);\n-                    args.push((arg_val, arg_ty));\n-                }\n-                if M::eval_fn_call(self, instance, destination, arg_operands, span, sig)? {\n-                    return Ok(());\n-                }\n-                let arg_locals = self.frame().mir.args_iter();\n-                match sig.abi {\n-                    Abi::Rust => {\n-                        args.remove(0);\n-                    }\n-                    Abi::RustCall => {}\n-                    _ => unimplemented!(),\n-                };\n-                for (arg_local, (arg_val, arg_ty)) in arg_locals.zip(args) {\n-                    let dest = self.eval_lvalue(&mir::Lvalue::Local(arg_local))?;\n-                    self.write_value(arg_val, dest, arg_ty)?;\n-                }\n-                Ok(())\n-            }\n+            // cannot use the shim here, because that will only result in infinite recursion\n             ty::InstanceDef::Virtual(_, idx) => {\n                 let ptr_size = self.memory.pointer_size();\n                 let (_, vtable) = self.eval_operand(&arg_operands[0])?.into_ptr_vtable_pair("}, {"sha": "b842c04ae09e340971ef1ea5ce279b3fd0a9fe48", "filename": "xargo/build.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/66108be99d6736d63e47c2f7f5b75ab703822557/xargo%2Fbuild.sh", "raw_url": "https://github.com/rust-lang/rust/raw/66108be99d6736d63e47c2f7f5b75ab703822557/xargo%2Fbuild.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xargo%2Fbuild.sh?ref=66108be99d6736d63e47c2f7f5b75ab703822557", "patch": "@@ -1,3 +1,4 @@\n #!/bin/sh\n cd \"$(dirname \"$0\")\"\n+sed 's/gcc = \"0\\.3\\.50\"/gcc = \"=0\\.3\\.50\"/' -i ~/.rustup/toolchains/*/lib/rustlib/src/rust/src/libstd/Cargo.toml\n RUSTFLAGS='-Zalways-encode-mir -Zmir-emit-validate=1' xargo build"}]}