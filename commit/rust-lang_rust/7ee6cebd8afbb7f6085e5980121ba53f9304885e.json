{"sha": "7ee6cebd8afbb7f6085e5980121ba53f9304885e", "node_id": "C_kwDOAAsO6NoAKDdlZTZjZWJkOGFmYmI3ZjYwODVlNTk4MDEyMWJhNTNmOTMwNDg4NWU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-08T22:15:22Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-09T17:26:00Z"}, "message": "Unconditionally normalize xform_ret_ty in probe", "tree": {"sha": "16005361efbeb47d6af39d6d42b4b4827fbc55fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16005361efbeb47d6af39d6d42b4b4827fbc55fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ee6cebd8afbb7f6085e5980121ba53f9304885e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ee6cebd8afbb7f6085e5980121ba53f9304885e", "html_url": "https://github.com/rust-lang/rust/commit/7ee6cebd8afbb7f6085e5980121ba53f9304885e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ee6cebd8afbb7f6085e5980121ba53f9304885e/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89e0576bd3aec2f1acf935b353900bd75742860b", "url": "https://api.github.com/repos/rust-lang/rust/commits/89e0576bd3aec2f1acf935b353900bd75742860b", "html_url": "https://github.com/rust-lang/rust/commit/89e0576bd3aec2f1acf935b353900bd75742860b"}], "stats": {"total": 73, "additions": 41, "deletions": 32}, "files": [{"sha": "aa458748a7fa874f3c492b1d2f7caa80ca854b9e", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 41, "deletions": 32, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/7ee6cebd8afbb7f6085e5980121ba53f9304885e/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee6cebd8afbb7f6085e5980121ba53f9304885e/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=7ee6cebd8afbb7f6085e5980121ba53f9304885e", "patch": "@@ -1521,11 +1521,30 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             };\n \n             let mut result = ProbeResult::Match;\n-            let mut xform_ret_ty = probe.xform_ret_ty;\n-            debug!(?xform_ret_ty);\n-\n             let cause = traits::ObligationCause::misc(self.span, self.body_id);\n \n+            let xform_ret_ty = if let Some(xform_ret_ty) = probe.xform_ret_ty {\n+                // `xform_ret_ty` hasn't been normalized yet, only `xform_self_ty`,\n+                // see the reasons mentioned in the comments in `assemble_inherent_impl_probe`\n+                // for why this is necessary\n+                let InferOk {\n+                    value: normalized_xform_ret_ty,\n+                    obligations: normalization_obligations,\n+                } = self.fcx.at(&cause, self.param_env).normalize(xform_ret_ty);\n+                debug!(\"xform_ret_ty after normalization: {:?}\", normalized_xform_ret_ty);\n+\n+                for o in normalization_obligations {\n+                    if !self.predicate_may_hold(&o) {\n+                        possibly_unsatisfied_predicates.push((o.predicate, None, Some(o.cause)));\n+                        result = ProbeResult::NoMatch;\n+                    }\n+                }\n+\n+                Some(normalized_xform_ret_ty)\n+            } else {\n+                None\n+            };\n+\n             let mut parent_pred = None;\n \n             // If so, impls may carry other conditions (e.g., where\n@@ -1534,16 +1553,6 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             // don't have enough information to fully evaluate).\n             match probe.kind {\n                 InherentImplCandidate(ref substs, ref ref_obligations) => {\n-                    // `xform_ret_ty` hasn't been normalized yet, only `xform_self_ty`,\n-                    // see the reasons mentioned in the comments in `assemble_inherent_impl_probe`\n-                    // for why this is necessary\n-                    let InferOk {\n-                        value: normalized_xform_ret_ty,\n-                        obligations: normalization_obligations,\n-                    } = self.fcx.at(&cause, self.param_env).normalize(probe.xform_ret_ty);\n-                    xform_ret_ty = normalized_xform_ret_ty;\n-                    debug!(\"xform_ret_ty after normalization: {:?}\", xform_ret_ty);\n-\n                     // Check whether the impl imposes obligations we have to worry about.\n                     let impl_def_id = probe.item.container_id(self.tcx);\n                     let impl_bounds = self.tcx.predicates_of(impl_def_id);\n@@ -1554,15 +1563,14 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n                     // Convert the bounds into obligations.\n                     let impl_obligations = traits::predicates_for_generics(\n-                        move |_, _| cause.clone(),\n+                        |_, _| cause.clone(),\n                         self.param_env,\n                         impl_bounds,\n                     );\n \n                     let candidate_obligations = impl_obligations\n                         .chain(norm_obligations.into_iter())\n-                        .chain(ref_obligations.iter().cloned())\n-                        .chain(normalization_obligations.into_iter());\n+                        .chain(ref_obligations.iter().cloned());\n \n                     // Evaluate those obligations to see if they might possibly hold.\n                     for o in candidate_obligations {\n@@ -1597,7 +1605,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                         ty::Binder::dummy(trait_ref).without_const().to_predicate(self.tcx);\n                     parent_pred = Some(predicate);\n                     let obligation =\n-                        traits::Obligation::new(self.tcx, cause, self.param_env, predicate);\n+                        traits::Obligation::new(self.tcx, cause.clone(), self.param_env, predicate);\n                     if !self.predicate_may_hold(&obligation) {\n                         result = ProbeResult::NoMatch;\n                         if self.probe(|_| {\n@@ -1656,21 +1664,22 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 }\n             }\n \n-            if let ProbeResult::Match = result {\n-                if let (Some(return_ty), Some(xform_ret_ty)) = (self.return_type, xform_ret_ty) {\n-                    let xform_ret_ty = self.resolve_vars_if_possible(xform_ret_ty);\n-                    debug!(\n-                        \"comparing return_ty {:?} with xform ret ty {:?}\",\n-                        return_ty, probe.xform_ret_ty\n-                    );\n-                    if self\n-                        .at(&ObligationCause::dummy(), self.param_env)\n-                        .define_opaque_types(false)\n-                        .sup(return_ty, xform_ret_ty)\n-                        .is_err()\n-                    {\n-                        return ProbeResult::BadReturnType;\n-                    }\n+            if let ProbeResult::Match = result\n+                && let Some(return_ty) = self.return_type\n+                && let Some(xform_ret_ty) = xform_ret_ty\n+            {\n+                debug!(\n+                    \"comparing return_ty {:?} with xform ret ty {:?}\",\n+                    return_ty, xform_ret_ty\n+                );\n+                if let ProbeResult::Match = result\n+                    && self\n+                    .at(&ObligationCause::dummy(), self.param_env)\n+                    .define_opaque_types(false)\n+                    .sup(return_ty, xform_ret_ty)\n+                    .is_err()\n+                {\n+                    return ProbeResult::BadReturnType;\n                 }\n             }\n "}]}