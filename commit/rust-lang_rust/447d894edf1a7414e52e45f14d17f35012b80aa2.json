{"sha": "447d894edf1a7414e52e45f14d17f35012b80aa2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0N2Q4OTRlZGYxYTc0MTRlNTJlNDVmMTRkMTdmMzUwMTJiODBhYTI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-05-27T20:30:16Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-05-27T20:30:16Z"}, "message": "Use suggestion for assoc fn called like method\n\nWhen encountering an unexisting method for a given trait where an\nassociated function has the same name, suggest using the appropriate\nsyntax, instead of using `help` text.\n\nWhen only one candidate is found, do not call it \"candidate #1\", just\ncall it \"the candidate\".", "tree": {"sha": "5ba4926e5541b6a824188d402b9c27bbf3facf5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ba4926e5541b6a824188d402b9c27bbf3facf5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/447d894edf1a7414e52e45f14d17f35012b80aa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/447d894edf1a7414e52e45f14d17f35012b80aa2", "html_url": "https://github.com/rust-lang/rust/commit/447d894edf1a7414e52e45f14d17f35012b80aa2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/447d894edf1a7414e52e45f14d17f35012b80aa2/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcb405667c3b1726ff4c21da1cc93839d183033a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcb405667c3b1726ff4c21da1cc93839d183033a", "html_url": "https://github.com/rust-lang/rust/commit/dcb405667c3b1726ff4c21da1cc93839d183033a"}], "stats": {"total": 75, "additions": 51, "deletions": 24}, "files": [{"sha": "ce49feed7d9470a98d76b5ebec1e10d349e06b74", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 38, "deletions": 14, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/447d894edf1a7414e52e45f14d17f35012b80aa2/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/447d894edf1a7414e52e45f14d17f35012b80aa2/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=447d894edf1a7414e52e45f14d17f35012b80aa2", "patch": "@@ -119,11 +119,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             }\n                         };\n \n-                        let note_str = format!(\"candidate #{} is defined in an impl{} \\\n-                                                for the type `{}`\",\n-                                               idx + 1,\n-                                               insertion,\n-                                               impl_ty);\n+                        let note_str = if sources.len() > 1 {\n+                            format!(\"candidate #{} is defined in an impl{} for the type `{}`\",\n+                                    idx + 1,\n+                                    insertion,\n+                                    impl_ty)\n+                        } else {\n+                            format!(\"the candidate is defined in an impl{} for the type `{}`\",\n+                                    insertion,\n+                                    impl_ty)\n+                        };\n                         if let Some(note_span) = note_span {\n                             // We have a span pointing to the method. Show note with snippet.\n                             err.span_note(self.tcx.sess.codemap().def_span(note_span), &note_str);\n@@ -137,11 +142,18 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             .unwrap();\n                         let item_span = self.tcx.sess.codemap()\n                             .def_span(self.tcx.def_span(item.def_id));\n-                        span_note!(err,\n-                                   item_span,\n-                                   \"candidate #{} is defined in the trait `{}`\",\n-                                   idx + 1,\n-                                   self.tcx.item_path_str(trait_did));\n+                        if sources.len() > 1 {\n+                            span_note!(err,\n+                                       item_span,\n+                                       \"candidate #{} is defined in the trait `{}`\",\n+                                       idx + 1,\n+                                       self.tcx.item_path_str(trait_did));\n+                        } else {\n+                            span_note!(err,\n+                                       item_span,\n+                                       \"the candidate is defined in the trait `{}`\",\n+                                       self.tcx.item_path_str(trait_did));\n+                        }\n                         err.help(&format!(\"to disambiguate the method call, write `{}::{}({}{})` \\\n                                           instead\",\n                                           self.tcx.item_path_str(trait_did),\n@@ -368,7 +380,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 if !static_sources.is_empty() {\n                     err.note(\"found the following associated functions; to be used as methods, \\\n                               functions must have a `self` parameter\");\n-                    err.help(&format!(\"try with `{}::{}`\", self.ty_to_string(actual), item_name));\n+                    if let Some(expr) = rcvr_expr {\n+                        err.span_suggestion(expr.span.to(span),\n+                                            \"use associated function syntax intead\",\n+                                            format!(\"{}::{}\", self.ty_to_string(actual), item_name));\n+                    } else {\n+                        err.help(&format!(\"try with `{}::{}`\",\n+                                          self.ty_to_string(actual), item_name));\n+                    }\n \n                     report_candidates(&mut err, static_sources);\n                 }\n@@ -468,9 +487,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         } else {\n             let limit = if candidates.len() == 5 { 5 } else { 4 };\n             for (i, trait_did) in candidates.iter().take(limit).enumerate() {\n-                msg.push_str(&format!(\"\\ncandidate #{}: `use {};`\",\n-                                        i + 1,\n-                                        self.tcx.item_path_str(*trait_did)));\n+                if candidates.len() > 1 {\n+                    msg.push_str(&format!(\"\\ncandidate #{}: `use {};`\",\n+                                            i + 1,\n+                                            self.tcx.item_path_str(*trait_did)));\n+                } else {\n+                    msg.push_str(&format!(\"\\n`use {};`\",\n+                                            self.tcx.item_path_str(*trait_did)));\n+                }\n             }\n             if candidates.len() > limit {\n                 msg.push_str(&format!(\"\\nand {} others\", candidates.len() - limit));"}, {"sha": "b3d82e9094ba732ebc6001ee6a355914943984bf", "filename": "src/test/ui/hygiene/no_implicit_prelude.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/447d894edf1a7414e52e45f14d17f35012b80aa2/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/447d894edf1a7414e52e45f14d17f35012b80aa2/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr?ref=447d894edf1a7414e52e45f14d17f35012b80aa2", "patch": "@@ -22,7 +22,7 @@ LL |         ().clone() //~ ERROR no method named `clone` found\n    |\n    = help: items from traits can only be used if the trait is in scope\n    = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n-           candidate #1: `use std::clone::Clone;`\n+           `use std::clone::Clone;`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "1b2975bcf1c284f3488462cc0099a79cdb1913d4", "filename": "src/test/ui/hygiene/trait_items.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/447d894edf1a7414e52e45f14d17f35012b80aa2/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/447d894edf1a7414e52e45f14d17f35012b80aa2/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr?ref=447d894edf1a7414e52e45f14d17f35012b80aa2", "patch": "@@ -9,7 +9,7 @@ LL |     pub macro m() { ().f() } //~ ERROR no method named `f` found for type `\n    |\n    = help: items from traits can only be used if the trait is in scope\n    = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n-           candidate #1: `use foo::T;`\n+           `use foo::T;`\n \n error: aborting due to previous error\n "}, {"sha": "00f08f1d8e085f43ca563f8c2fcf99e3361bbad8", "filename": "src/test/ui/span/issue-7575.stderr", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/447d894edf1a7414e52e45f14d17f35012b80aa2/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/447d894edf1a7414e52e45f14d17f35012b80aa2/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr?ref=447d894edf1a7414e52e45f14d17f35012b80aa2", "patch": "@@ -2,10 +2,11 @@ error[E0599]: no method named `f9` found for type `usize` in the current scope\n   --> $DIR/issue-7575.rs:74:18\n    |\n LL |     u.f8(42) + u.f9(342) + m.fff(42)\n-   |                  ^^\n+   |                --^^\n+   |                |\n+   |                help: use associated function syntax intead: `usize::f9`\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n-   = help: try with `usize::f9`\n note: candidate #1 is defined in the trait `CtxtFn`\n   --> $DIR/issue-7575.rs:16:5\n    |\n@@ -37,11 +38,12 @@ LL | struct Myisize(isize);\n    | ---------------------- method `fff` not found for this\n ...\n LL |     u.f8(42) + u.f9(342) + m.fff(42)\n-   |                              ^^^\n+   |                            --^^^\n+   |                            |\n+   |                            help: use associated function syntax intead: `Myisize::fff`\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n-   = help: try with `Myisize::fff`\n-note: candidate #1 is defined in an impl for the type `Myisize`\n+note: the candidate is defined in an impl for the type `Myisize`\n   --> $DIR/issue-7575.rs:51:5\n    |\n LL |     fn fff(i: isize) -> isize {\n@@ -51,11 +53,12 @@ error[E0599]: no method named `is_str` found for type `T` in the current scope\n   --> $DIR/issue-7575.rs:82:7\n    |\n LL |     t.is_str()\n-   |       ^^^^^^\n+   |     --^^^^^^\n+   |     |\n+   |     help: use associated function syntax intead: `T::is_str`\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n-   = help: try with `T::is_str`\n-note: candidate #1 is defined in the trait `ManyImplTrait`\n+note: the candidate is defined in the trait `ManyImplTrait`\n   --> $DIR/issue-7575.rs:57:5\n    |\n LL |     fn is_str() -> bool {"}]}