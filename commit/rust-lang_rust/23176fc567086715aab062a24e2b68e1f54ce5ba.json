{"sha": "23176fc567086715aab062a24e2b68e1f54ce5ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMTc2ZmM1NjcwODY3MTVhYWIwNjJhMjRlMmI2OGUxZjU0Y2U1YmE=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2013-10-03T08:13:13Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2013-10-06T09:40:26Z"}, "message": "get_crate_map returns an Option", "tree": {"sha": "7a2b1029b0366bfac257650be6b92facbf402208", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a2b1029b0366bfac257650be6b92facbf402208"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23176fc567086715aab062a24e2b68e1f54ce5ba", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23176fc567086715aab062a24e2b68e1f54ce5ba", "html_url": "https://github.com/rust-lang/rust/commit/23176fc567086715aab062a24e2b68e1f54ce5ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23176fc567086715aab062a24e2b68e1f54ce5ba/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7b4f7a5e2982c8412fe71a9534f6f62435f9bc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7b4f7a5e2982c8412fe71a9534f6f62435f9bc3", "html_url": "https://github.com/rust-lang/rust/commit/b7b4f7a5e2982c8412fe71a9534f6f62435f9bc3"}], "stats": {"total": 65, "additions": 42, "deletions": 23}, "files": [{"sha": "061c2e53c7c1717b0b5a32ee0a27d7ab68b8d001", "filename": "src/libstd/rt/crate_map.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/23176fc567086715aab062a24e2b68e1f54ce5ba/src%2Flibstd%2Frt%2Fcrate_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176fc567086715aab062a24e2b68e1f54ce5ba/src%2Flibstd%2Frt%2Fcrate_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcrate_map.rs?ref=23176fc567086715aab062a24e2b68e1f54ce5ba", "patch": "@@ -8,10 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//#[cfg(not(stage0))] use cast::transmute;\n use container::MutableSet;\n use hashmap::HashSet;\n-use option::{Some, None};\n+use option::{Some, None, Option};\n use vec::ImmutableVector;\n \n /// Imports for old crate map versions\n@@ -61,22 +60,23 @@ pub struct ModEntry<'self> {\n pub struct CrateMap<'self> {\n     version: i32,\n     entries: &'self [ModEntry<'self>],\n-    /// a dynamically sized struct, where all pointers to children are listed adjacent\n-    /// to the struct, terminated with NULL\n     children: &'self [&'self CrateMap<'self>]\n }\n \n-\n-\n #[cfg(not(windows))]\n-pub fn get_crate_map() -> &'static CrateMap<'static> {\n-    &'static CRATE_MAP\n+pub fn get_crate_map() -> Option<&'static CrateMap<'static>> {\n+    let ptr: (*CrateMap) = &'static CRATE_MAP;\n+    if ptr.is_null() {\n+        return None;\n+    } else {\n+        return Some(&'static CRATE_MAP);\n+    }\n }\n \n #[cfg(windows)]\n #[fixed_stack_segment]\n #[inline(never)]\n-pub fn get_crate_map() -> &'static CrateMap<'static> {\n+pub fn get_crate_map() -> Option<&'static CrateMap<'static>> {\n     use c_str::ToCStr;\n     use unstable::dynamic_lib::dl;\n \n@@ -88,7 +88,14 @@ pub fn get_crate_map() -> &'static CrateMap<'static> {\n         dl::close(module);\n         sym\n     };\n-    sym\n+    let ptr: (*CrateMap) = sym as *CrateMap;\n+    if ptr.is_null() {\n+        return None;\n+    } else {\n+        unsafe {\n+            return Some(transmute(sym));\n+        }\n+    }\n }\n \n fn version(crate_map: &CrateMap) -> i32 {\n@@ -106,9 +113,9 @@ fn iter_module_map(mod_entries: &[ModEntry], f: &fn(&ModEntry)) {\n }\n \n unsafe fn iter_module_map_v0(entries: *ModEntryV0, f: &fn(&ModEntry)) {\n-    let mut curr = entries; \n+    let mut curr = entries;\n     while !(*curr).name.is_null() {\n-        let mod_entry = ModEntry { name: from_c_str((*curr).name), log_level: (*curr).log_level }; \n+        let mod_entry = ModEntry { name: from_c_str((*curr).name), log_level: (*curr).log_level };\n         f(&mod_entry);\n         curr = curr.offset(1);\n     }\n@@ -125,7 +132,7 @@ fn do_iter_crate_map<'a>(crate_map: &'a CrateMap<'a>, f: &fn(&ModEntry),\n                     do_iter_crate_map(*child, |x| f(x), visited);\n                 }\n             },\n-            /// code for old crate map versions\n+            // code for old crate map versions\n             1 => unsafe {\n                 let v1: *CrateMapV1 = transmute(crate_map);\n                 iter_module_map_v0((*v1).entries, |x| f(x));\n@@ -142,7 +149,7 @@ fn do_iter_crate_map<'a>(crate_map: &'a CrateMap<'a>, f: &fn(&ModEntry),\n                     do_iter_crate_map(transmute(child), |x| f(x), visited);\n                 }\n             },\n-            _ => fail2!(\"invalid crate map version\")  \n+            _ => fail2!(\"invalid crate map version\")\n         }\n     }\n }\n@@ -260,7 +267,9 @@ mod tests {\n \n             let root_crate = CrateMapT3 {\n                 version: 1,\n-                entries: vec::raw::to_ptr([ModEntryV0 { name: ptr::null(), log_level: ptr::mut_null()}]),\n+                entries: vec::raw::to_ptr([\n+                    ModEntryV0 { name: ptr::null(), log_level: ptr::mut_null()}\n+                ]),\n                 children: [&child_crate as *CrateMapV1, &child_crate as *CrateMapV1, ptr::null()]\n             };\n "}, {"sha": "8b8e2762381c10675d1ea8f15fb83f5f3bad53bb", "filename": "src/libstd/rt/logging.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/23176fc567086715aab062a24e2b68e1f54ce5ba/src%2Flibstd%2Frt%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176fc567086715aab062a24e2b68e1f54ce5ba/src%2Flibstd%2Frt%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flogging.rs?ref=23176fc567086715aab062a24e2b68e1f54ce5ba", "patch": "@@ -199,15 +199,25 @@ impl rt::io::Writer for StdErrLogger {\n pub fn init() {\n     use os;\n \n-    let crate_map = get_crate_map();\n-\n     let log_spec = os::getenv(\"RUST_LOG\");\n-    match log_spec {\n-        Some(spec) => {\n-            update_log_settings(crate_map, spec);\n-        }\n-        None => {\n-            update_log_settings(crate_map, ~\"\");\n+    match get_crate_map() {\n+        Some(crate_map) => {\n+            match log_spec {\n+                Some(spec) => {\n+                    update_log_settings(crate_map, spec);\n+                }\n+                None => {\n+                    update_log_settings(crate_map, ~\"\");\n+                }\n+            }\n+        },\n+        _ => {\n+            match log_spec {\n+                Some(_) => {\n+                    dumb_println(\"warning: RUST_LOG set, but no crate map found.\");\n+                },\n+                None => {}\n+            }\n         }\n     }\n }"}]}