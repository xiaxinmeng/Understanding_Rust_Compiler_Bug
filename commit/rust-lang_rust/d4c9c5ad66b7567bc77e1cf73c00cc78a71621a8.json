{"sha": "d4c9c5ad66b7567bc77e1cf73c00cc78a71621a8", "node_id": "C_kwDOAAsO6NoAKGQ0YzljNWFkNjZiNzU2N2JjNzdlMWNmNzNjMDBjYzc4YTcxNjIxYTg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-23T00:09:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-23T00:09:46Z"}, "message": "Rollup merge of #93185 - camelid:crate-private, r=GuillaumeGomez\n\nrustdoc: Make some `pub` items crate-private\n\nThey don't need to be `pub`. Making them crate-private improves code\nclarity and `dead_code` linting.", "tree": {"sha": "5f54de2be1446add0b2f0d90957140b11f9848e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f54de2be1446add0b2f0d90957140b11f9848e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4c9c5ad66b7567bc77e1cf73c00cc78a71621a8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh7JzKCRBK7hj4Ov3rIwAAfXkIADVf0D1tkTaAxJLqnDd1uYKH\nU0PY7/cz/zmZBw6mJgByJJaRSDhLF6sWgWwZHSV6coQIgzCE4MljUC8tByOOHZB+\n5rNgMulAwNGcGxVNSXhD38kNLYzkquDchmaZyytFxo/P5AlHk0rewpAa37XmBstt\nY4bt9otvz12y/LjOAF8ZW1BJyscPwjVjKz2UAH2v4LimV23PAhKOqXYI26Hi2uRq\nxwk/aee/ihZGFGYZi7Yuq1eXwStv00xsxQT40SKEn0dpXiLv8hjMV5m9ntU3Mdch\nj38PKEZOZHGBXpWaRFeO0s5rprZ/Ndt7H2YoT2gLCOGYTKADHd+6ZXjhS+I9N4w=\n=vkkS\n-----END PGP SIGNATURE-----\n", "payload": "tree 5f54de2be1446add0b2f0d90957140b11f9848e1\nparent 389e712a464aa86739312f91f5b8afbee18f16a7\nparent fc16b815cc204b3fe7d31b9918a8fa3c17a5eef3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642896586 +0100\ncommitter GitHub <noreply@github.com> 1642896586 +0100\n\nRollup merge of #93185 - camelid:crate-private, r=GuillaumeGomez\n\nrustdoc: Make some `pub` items crate-private\n\nThey don't need to be `pub`. Making them crate-private improves code\nclarity and `dead_code` linting.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4c9c5ad66b7567bc77e1cf73c00cc78a71621a8", "html_url": "https://github.com/rust-lang/rust/commit/d4c9c5ad66b7567bc77e1cf73c00cc78a71621a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4c9c5ad66b7567bc77e1cf73c00cc78a71621a8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "389e712a464aa86739312f91f5b8afbee18f16a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/389e712a464aa86739312f91f5b8afbee18f16a7", "html_url": "https://github.com/rust-lang/rust/commit/389e712a464aa86739312f91f5b8afbee18f16a7"}, {"sha": "fc16b815cc204b3fe7d31b9918a8fa3c17a5eef3", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc16b815cc204b3fe7d31b9918a8fa3c17a5eef3", "html_url": "https://github.com/rust-lang/rust/commit/fc16b815cc204b3fe7d31b9918a8fa3c17a5eef3"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "0c0787c6b2f7fa1422228fcd49fac8cb3ce9bf39", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d4c9c5ad66b7567bc77e1cf73c00cc78a71621a8/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c9c5ad66b7567bc77e1cf73c00cc78a71621a8/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=d4c9c5ad66b7567bc77e1cf73c00cc78a71621a8", "patch": "@@ -429,7 +429,7 @@ impl Item {\n \n     /// Convenience wrapper around [`Self::from_def_id_and_parts`] which converts\n     /// `hir_id` to a [`DefId`]\n-    pub fn from_hir_id_and_parts(\n+    crate fn from_hir_id_and_parts(\n         hir_id: hir::HirId,\n         name: Option<Symbol>,\n         kind: ItemKind,\n@@ -438,7 +438,7 @@ impl Item {\n         Item::from_def_id_and_parts(cx.tcx.hir().local_def_id(hir_id).to_def_id(), name, kind, cx)\n     }\n \n-    pub fn from_def_id_and_parts(\n+    crate fn from_def_id_and_parts(\n         def_id: DefId,\n         name: Option<Symbol>,\n         kind: ItemKind,\n@@ -456,7 +456,7 @@ impl Item {\n         )\n     }\n \n-    pub fn from_def_id_and_attrs_and_parts(\n+    crate fn from_def_id_and_attrs_and_parts(\n         def_id: DefId,\n         name: Option<Symbol>,\n         kind: ItemKind,\n@@ -984,26 +984,26 @@ crate fn collapse_doc_fragments(doc_strings: &[DocFragment]) -> String {\n #[derive(Clone, Debug, PartialEq, Eq, Hash)]\n crate struct ItemLink {\n     /// The original link written in the markdown\n-    pub(crate) link: String,\n+    crate link: String,\n     /// The link text displayed in the HTML.\n     ///\n     /// This may not be the same as `link` if there was a disambiguator\n     /// in an intra-doc link (e.g. \\[`fn@f`\\])\n-    pub(crate) link_text: String,\n-    pub(crate) did: DefId,\n+    crate link_text: String,\n+    crate did: DefId,\n     /// The url fragment to append to the link\n-    pub(crate) fragment: Option<UrlFragment>,\n+    crate fragment: Option<UrlFragment>,\n }\n \n pub struct RenderedLink {\n     /// The text the link was original written as.\n     ///\n     /// This could potentially include disambiguators and backticks.\n-    pub(crate) original_text: String,\n+    crate original_text: String,\n     /// The text to display in the HTML\n-    pub(crate) new_text: String,\n+    crate new_text: String,\n     /// The URL to put in the `href`\n-    pub(crate) href: String,\n+    crate href: String,\n }\n \n /// The attributes on an [`Item`], including attributes like `#[derive(...)]` and `#[inline]`,"}, {"sha": "d9f6a9d02cab5656a68b1716fdabe3c810a25381", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c9c5ad66b7567bc77e1cf73c00cc78a71621a8/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c9c5ad66b7567bc77e1cf73c00cc78a71621a8/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=d4c9c5ad66b7567bc77e1cf73c00cc78a71621a8", "patch": "@@ -33,8 +33,8 @@ use crate::passes::{self, Condition::*};\n crate use rustc_session::config::{DebuggingOptions, Input, Options};\n \n crate struct ResolverCaches {\n-    pub all_traits: Option<Vec<DefId>>,\n-    pub all_trait_impls: Option<Vec<DefId>>,\n+    crate all_traits: Option<Vec<DefId>>,\n+    crate all_trait_impls: Option<Vec<DefId>>,\n }\n \n crate struct DocContext<'tcx> {"}, {"sha": "c3edefc469864eb47e70c537f389d5728f9d7cb9", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4c9c5ad66b7567bc77e1cf73c00cc78a71621a8/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c9c5ad66b7567bc77e1cf73c00cc78a71621a8/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=d4c9c5ad66b7567bc77e1cf73c00cc78a71621a8", "patch": "@@ -175,7 +175,7 @@ crate struct StylePath {\n }\n \n impl StylePath {\n-    pub fn basename(&self) -> Result<String, Error> {\n+    crate fn basename(&self) -> Result<String, Error> {\n         Ok(try_none!(try_none!(self.path.file_stem(), &self.path).to_str(), &self.path).to_string())\n     }\n }"}, {"sha": "e82ab122481d421c2b7a8aed98e488e30ff4b966", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4c9c5ad66b7567bc77e1cf73c00cc78a71621a8/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c9c5ad66b7567bc77e1cf73c00cc78a71621a8/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=d4c9c5ad66b7567bc77e1cf73c00cc78a71621a8", "patch": "@@ -362,7 +362,7 @@ struct DiagnosticInfo<'a> {\n \n #[derive(Clone, Debug, Hash)]\n struct CachedLink {\n-    pub res: (Res, Option<UrlFragment>),\n+    res: (Res, Option<UrlFragment>),\n }\n \n struct LinkCollector<'a, 'tcx> {"}]}