{"sha": "095d818e0c9c2428e11287e918c38bb6c487e6ed", "node_id": "C_kwDOAAsO6NoAKDA5NWQ4MThlMGM5YzI0MjhlMTEyODdlOTE4YzM4YmI2YzQ4N2U2ZWQ", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-03-03T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-03-04T15:57:34Z"}, "message": "Always include global target features in function attributes\n\nThis ensures that information about target features configured with\n`-C target-feature=...` or detected with `-C target-cpu=native` is\nretained for subsequent consumers of LLVM bitcode.\n\nThis is crucial for linker plugin LTO, since this information is not\nconveyed to the plugin otherwise.", "tree": {"sha": "6869e5b21fba14afaa35071cee12b541c20ad9ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6869e5b21fba14afaa35071cee12b541c20ad9ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/095d818e0c9c2428e11287e918c38bb6c487e6ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/095d818e0c9c2428e11287e918c38bb6c487e6ed", "html_url": "https://github.com/rust-lang/rust/commit/095d818e0c9c2428e11287e918c38bb6c487e6ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/095d818e0c9c2428e11287e918c38bb6c487e6ed/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6f845f22524c161d94ab37d630086780c4aabc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6f845f22524c161d94ab37d630086780c4aabc1", "html_url": "https://github.com/rust-lang/rust/commit/b6f845f22524c161d94ab37d630086780c4aabc1"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "101da0012cb4b0d8fe33d2401db69cf8ef03082a", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/095d818e0c9c2428e11287e918c38bb6c487e6ed/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/095d818e0c9c2428e11287e918c38bb6c487e6ed/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=095d818e0c9c2428e11287e918c38bb6c487e6ed", "patch": "@@ -378,13 +378,12 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n         }\n     }\n \n-    if !function_features.is_empty() {\n-        let global_features = cx.tcx.global_backend_features(()).iter().map(|s| &s[..]);\n-        let val = global_features\n-            .chain(function_features.iter().map(|s| &s[..]))\n-            .intersperse(\",\")\n-            .collect::<SmallStr<1024>>();\n-        to_add.push(llvm::CreateAttrStringValue(cx.llcx, \"target-features\", &val));\n+    let global_features = cx.tcx.global_backend_features(()).iter().map(|s| s.as_str());\n+    let function_features = function_features.iter().map(|s| s.as_str());\n+    let target_features =\n+        global_features.chain(function_features).intersperse(\",\").collect::<SmallStr<1024>>();\n+    if !target_features.is_empty() {\n+        to_add.push(llvm::CreateAttrStringValue(cx.llcx, \"target-features\", &target_features));\n     }\n \n     attributes::apply_to_llfn(llfn, Function, &to_add);"}, {"sha": "4be77e36e760bdf0a160bd2fb7f7fd6582165220", "filename": "src/test/codegen/target-feature-overrides.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/095d818e0c9c2428e11287e918c38bb6c487e6ed/src%2Ftest%2Fcodegen%2Ftarget-feature-overrides.rs", "raw_url": "https://github.com/rust-lang/rust/raw/095d818e0c9c2428e11287e918c38bb6c487e6ed/src%2Ftest%2Fcodegen%2Ftarget-feature-overrides.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ftarget-feature-overrides.rs?ref=095d818e0c9c2428e11287e918c38bb6c487e6ed", "patch": "@@ -29,7 +29,7 @@ pub unsafe fn apple() -> u32 {\n     peach()\n }\n \n-// target features same as global (not reflected or overriden in IR)\n+// target features same as global\n #[no_mangle]\n pub unsafe fn banana() -> u32 {\n // CHECK-LABEL: @banana()\n@@ -43,5 +43,5 @@ pub unsafe fn banana() -> u32 {\n // COMPAT-SAME: \"target-features\"=\"+avx2,+avx,+avx\"\n // INCOMPAT-SAME: \"target-features\"=\"-avx2,-avx,+avx\"\n // CHECK: attributes [[BANANAATTRS]]\n-// CHECK-NOT: target-features\n-// CHECK-SAME: }\n+// COMPAT-SAME: \"target-features\"=\"+avx2,+avx\"\n+// INCOMPAT-SAME: \"target-features\"=\"-avx2,-avx\""}]}