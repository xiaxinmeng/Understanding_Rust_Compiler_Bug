{"sha": "925ec0d3c77601ebfa32b148393a5192943c2ff1", "node_id": "C_kwDOAAsO6NoAKDkyNWVjMGQzYzc3NjAxZWJmYTMyYjE0ODM5M2E1MTkyOTQzYzJmZjE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-01-27T06:00:16Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-02-15T05:03:26Z"}, "message": "Overhaul `PredicateInner` and `Predicate`.\n\nSpecifically, change `Ty` from this:\n```\npub struct Predicate<'tcx> { inner: &'tcx PredicateInner<'tcx> }\n```\nto this:\n```\npub struct Predicate<'tcx>(&'tcx Interned<PredicateS<'tcx>>)\n```\nwhere `PredicateInner` is renamed as `PredicateS`.\n\n This (plus a few other minor changes) makes the parallels with `Ty` and\n`TyS` much clearer, and makes the uniqueness more explicit.", "tree": {"sha": "6d1bc9dafbf9329e5a6194e05cf6873db451a820", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d1bc9dafbf9329e5a6194e05cf6873db451a820"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/925ec0d3c77601ebfa32b148393a5192943c2ff1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/925ec0d3c77601ebfa32b148393a5192943c2ff1", "html_url": "https://github.com/rust-lang/rust/commit/925ec0d3c77601ebfa32b148393a5192943c2ff1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/925ec0d3c77601ebfa32b148393a5192943c2ff1/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9a0c429c5da5a34c0469117774fe32694a0281c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9a0c429c5da5a34c0469117774fe32694a0281c", "html_url": "https://github.com/rust-lang/rust/commit/e9a0c429c5da5a34c0469117774fe32694a0281c"}], "stats": {"total": 139, "additions": 69, "deletions": 70}, "files": [{"sha": "14655a0d00c4dd26362606dc8fb42659cbd02b0a", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/925ec0d3c77601ebfa32b148393a5192943c2ff1/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925ec0d3c77601ebfa32b148393a5192943c2ff1/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=925ec0d3c77601ebfa32b148393a5192943c2ff1", "patch": "@@ -88,7 +88,7 @@ macro_rules! arena_types {\n \n             // Interned types\n             [] tys: rustc_middle::ty::TyS<'tcx>,\n-            [] predicates: rustc_middle::ty::PredicateInner<'tcx>,\n+            [] predicates: rustc_middle::ty::PredicateS<'tcx>,\n \n             // Note that this deliberately duplicates items in the `rustc_hir::arena`,\n             // since we need to allocate this type on both the `rustc_hir` arena"}, {"sha": "d9435517991d6d0bf86a7da508d56b8bfc504fa3", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/925ec0d3c77601ebfa32b148393a5192943c2ff1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925ec0d3c77601ebfa32b148393a5192943c2ff1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=925ec0d3c77601ebfa32b148393a5192943c2ff1", "patch": "@@ -20,7 +20,7 @@ use crate::ty::{\n     self, AdtDef, AdtKind, Binder, BindingMode, BoundVar, CanonicalPolyFnSig,\n     ClosureSizeProfileData, Const, ConstVid, DefIdTree, ExistentialPredicate, FloatTy, FloatVar,\n     FloatVid, GenericParamDefKind, InferConst, InferTy, IntTy, IntVar, IntVid, List, ParamConst,\n-    ParamTy, PolyFnSig, Predicate, PredicateInner, PredicateKind, ProjectionTy, Region, RegionKind,\n+    ParamTy, PolyFnSig, Predicate, PredicateKind, PredicateS, ProjectionTy, Region, RegionKind,\n     ReprOptions, TraitObjectVisitor, Ty, TyKind, TyS, TyVar, TyVid, TypeAndMut, UintTy,\n };\n use rustc_ast as ast;\n@@ -107,7 +107,7 @@ pub struct CtxtInterners<'tcx> {\n     region: InternedSet<'tcx, RegionKind>,\n     poly_existential_predicates:\n         InternedSet<'tcx, List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>>,\n-    predicate: InternedSet<'tcx, PredicateInner<'tcx>>,\n+    predicate: InternedSet<'tcx, PredicateS<'tcx>>,\n     predicates: InternedSet<'tcx, List<Predicate<'tcx>>>,\n     projs: InternedSet<'tcx, List<ProjectionKind>>,\n     place_elems: InternedSet<'tcx, List<PlaceElem<'tcx>>>,\n@@ -170,23 +170,22 @@ impl<'tcx> CtxtInterners<'tcx> {\n     }\n \n     #[inline(never)]\n-    fn intern_predicate(\n-        &self,\n-        kind: Binder<'tcx, PredicateKind<'tcx>>,\n-    ) -> &'tcx PredicateInner<'tcx> {\n-        self.predicate\n-            .intern(kind, |kind| {\n-                let flags = super::flags::FlagComputation::for_predicate(kind);\n-\n-                let predicate_struct = PredicateInner {\n-                    kind,\n-                    flags: flags.flags,\n-                    outer_exclusive_binder: flags.outer_exclusive_binder,\n-                };\n+    fn intern_predicate(&self, kind: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {\n+        Predicate(Interned::new_unchecked(\n+            self.predicate\n+                .intern(kind, |kind| {\n+                    let flags = super::flags::FlagComputation::for_predicate(kind);\n \n-                InternedInSet(self.arena.alloc(predicate_struct))\n-            })\n-            .0\n+                    let predicate_struct = PredicateS {\n+                        kind,\n+                        flags: flags.flags,\n+                        outer_exclusive_binder: flags.outer_exclusive_binder,\n+                    };\n+\n+                    InternedInSet(self.arena.alloc(predicate_struct))\n+                })\n+                .0,\n+        ))\n     }\n }\n \n@@ -1684,7 +1683,7 @@ nop_lift! {type_; Ty<'a> => Ty<'tcx>}\n nop_lift_old! {region; Region<'a> => Region<'tcx>}\n nop_lift_old! {const_; &'a Const<'a> => &'tcx Const<'tcx>}\n nop_lift_old! {const_allocation; &'a Allocation => &'tcx Allocation}\n-nop_lift_old! {predicate; &'a PredicateInner<'a> => &'tcx PredicateInner<'tcx>}\n+nop_lift! {predicate; Predicate<'a> => Predicate<'tcx>}\n \n nop_list_lift! {type_list; Ty<'a> => Ty<'tcx>}\n nop_list_lift! {poly_existential_predicates; ty::Binder<'a, ExistentialPredicate<'a>> => ty::Binder<'tcx, ExistentialPredicate<'tcx>>}\n@@ -2040,23 +2039,23 @@ impl<'tcx> Hash for InternedInSet<'tcx, TyS<'tcx>> {\n     }\n }\n \n-impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for InternedInSet<'tcx, PredicateInner<'tcx>> {\n+impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for InternedInSet<'tcx, PredicateS<'tcx>> {\n     fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {\n         &self.0.kind\n     }\n }\n \n-impl<'tcx> PartialEq for InternedInSet<'tcx, PredicateInner<'tcx>> {\n-    fn eq(&self, other: &InternedInSet<'tcx, PredicateInner<'tcx>>) -> bool {\n+impl<'tcx> PartialEq for InternedInSet<'tcx, PredicateS<'tcx>> {\n+    fn eq(&self, other: &InternedInSet<'tcx, PredicateS<'tcx>>) -> bool {\n         // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals\n         // `x == y`.\n         self.0.kind == other.0.kind\n     }\n }\n \n-impl<'tcx> Eq for InternedInSet<'tcx, PredicateInner<'tcx>> {}\n+impl<'tcx> Eq for InternedInSet<'tcx, PredicateS<'tcx>> {}\n \n-impl<'tcx> Hash for InternedInSet<'tcx, PredicateInner<'tcx>> {\n+impl<'tcx> Hash for InternedInSet<'tcx, PredicateS<'tcx>> {\n     fn hash<H: Hasher>(&self, s: &mut H) {\n         // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.\n         self.0.kind.hash(s)\n@@ -2237,8 +2236,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {\n-        let inner = self.interners.intern_predicate(binder);\n-        Predicate { inner }\n+        self.interners.intern_predicate(binder)\n     }\n \n     #[inline]"}, {"sha": "f55e8bbddaaf905fe94a90b70522516d53e7c7e0", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/925ec0d3c77601ebfa32b148393a5192943c2ff1/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925ec0d3c77601ebfa32b148393a5192943c2ff1/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=925ec0d3c77601ebfa32b148393a5192943c2ff1", "patch": "@@ -1181,7 +1181,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n \n     #[inline]\n     fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if predicate.inner.outer_exclusive_binder > self.outer_index {\n+        if predicate.outer_exclusive_binder() > self.outer_index {\n             ControlFlow::Break(FoundEscapingVars)\n         } else {\n             ControlFlow::CONTINUE\n@@ -1263,9 +1263,11 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n     fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n         debug!(\n             \"HasTypeFlagsVisitor: predicate={:?} predicate.flags={:?} self.flags={:?}\",\n-            predicate, predicate.inner.flags, self.flags\n+            predicate,\n+            predicate.flags(),\n+            self.flags\n         );\n-        if predicate.inner.flags.intersects(self.flags) {\n+        if predicate.flags().intersects(self.flags) {\n             ControlFlow::Break(FoundFlags)\n         } else {\n             ControlFlow::CONTINUE"}, {"sha": "78bf9b81eeb4e25586fe6507e7d20a6372aef440", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/925ec0d3c77601ebfa32b148393a5192943c2ff1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925ec0d3c77601ebfa32b148393a5192943c2ff1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=925ec0d3c77601ebfa32b148393a5192943c2ff1", "patch": "@@ -43,9 +43,9 @@ use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::{sym, Span};\n use rustc_target::abi::Align;\n \n-use std::hash::{Hash, Hasher};\n+use std::hash::Hash;\n use std::ops::ControlFlow;\n-use std::{fmt, ptr, str};\n+use std::{fmt, str};\n \n pub use crate::ty::diagnostics::*;\n pub use rustc_type_ir::InferTy::*;\n@@ -466,51 +466,50 @@ impl ty::EarlyBoundRegion {\n     }\n }\n \n+/// Represents a predicate.\n+///\n+/// See comments on `TyS`, which apply here too (albeit for\n+/// `PredicateS`/`Predicate` rather than `TyS`/`Ty`).\n #[derive(Debug)]\n-crate struct PredicateInner<'tcx> {\n+crate struct PredicateS<'tcx> {\n     kind: Binder<'tcx, PredicateKind<'tcx>>,\n     flags: TypeFlags,\n     /// See the comment for the corresponding field of [TyS].\n     outer_exclusive_binder: ty::DebruijnIndex,\n }\n \n+// This type is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(PredicateInner<'_>, 56);\n-\n-#[derive(Clone, Copy, Lift)]\n-pub struct Predicate<'tcx> {\n-    inner: &'tcx PredicateInner<'tcx>,\n-}\n-\n-impl<'tcx> PartialEq for Predicate<'tcx> {\n-    fn eq(&self, other: &Self) -> bool {\n-        // `self.kind` is always interned.\n-        ptr::eq(self.inner, other.inner)\n-    }\n-}\n-\n-impl Hash for Predicate<'_> {\n-    fn hash<H: Hasher>(&self, s: &mut H) {\n-        (self.inner as *const PredicateInner<'_>).hash(s)\n-    }\n-}\n+static_assert_size!(PredicateS<'_>, 56);\n \n-impl<'tcx> Eq for Predicate<'tcx> {}\n+/// Use this rather than `PredicateS`, whenever possible.\n+#[derive(Clone, Copy, PartialEq, Eq, Hash)]\n+#[cfg_attr(not(bootstrap), rustc_pass_by_value)]\n+pub struct Predicate<'tcx>(Interned<'tcx, PredicateS<'tcx>>);\n \n impl<'tcx> Predicate<'tcx> {\n     /// Gets the inner `Binder<'tcx, PredicateKind<'tcx>>`.\n     #[inline]\n     pub fn kind(self) -> Binder<'tcx, PredicateKind<'tcx>> {\n-        self.inner.kind\n+        self.0.kind\n+    }\n+\n+    #[inline(always)]\n+    pub fn flags(self) -> TypeFlags {\n+        self.0.flags\n+    }\n+\n+    #[inline(always)]\n+    pub fn outer_exclusive_binder(self) -> DebruijnIndex {\n+        self.0.outer_exclusive_binder\n     }\n \n     /// Flips the polarity of a Predicate.\n     ///\n     /// Given `T: Trait` predicate it returns `T: !Trait` and given `T: !Trait` returns `T: Trait`.\n-    pub fn flip_polarity(&self, tcx: TyCtxt<'tcx>) -> Option<Predicate<'tcx>> {\n+    pub fn flip_polarity(self, tcx: TyCtxt<'tcx>) -> Option<Predicate<'tcx>> {\n         let kind = self\n-            .inner\n-            .kind\n+            .kind()\n             .map_bound(|kind| match kind {\n                 PredicateKind::Trait(TraitPredicate { trait_ref, constness, polarity }) => {\n                     Some(PredicateKind::Trait(TraitPredicate {\n@@ -530,14 +529,14 @@ impl<'tcx> Predicate<'tcx> {\n \n impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Predicate<'tcx> {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let PredicateInner {\n+        let PredicateS {\n             ref kind,\n \n             // The other fields just provide fast access to information that is\n             // also contained in `kind`, so no need to hash them.\n             flags: _,\n             outer_exclusive_binder: _,\n-        } = self.inner;\n+        } = self.0.0;\n \n         kind.hash_stable(hcx, hasher);\n     }"}, {"sha": "f59038569e1374d9d182f42a36bea1218933d6f3", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/925ec0d3c77601ebfa32b148393a5192943c2ff1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925ec0d3c77601ebfa32b148393a5192943c2ff1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=925ec0d3c77601ebfa32b148393a5192943c2ff1", "patch": "@@ -1112,24 +1112,24 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n-        let new = self.inner.kind.try_fold_with(folder)?;\n+        let new = self.kind().try_fold_with(folder)?;\n         Ok(folder.tcx().reuse_or_mk_predicate(self, new))\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.inner.kind.visit_with(visitor)\n+        self.kind().visit_with(visitor)\n     }\n \n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_predicate(*self)\n     }\n \n     fn has_vars_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {\n-        self.inner.outer_exclusive_binder > binder\n+        self.outer_exclusive_binder() > binder\n     }\n \n     fn has_type_flags(&self, flags: ty::TypeFlags) -> bool {\n-        self.inner.flags.intersects(flags)\n+        self.flags().intersects(flags)\n     }\n }\n "}, {"sha": "403fabe0a902c909c52bb7641b2bce1585eeb4e3", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/925ec0d3c77601ebfa32b148393a5192943c2ff1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925ec0d3c77601ebfa32b148393a5192943c2ff1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=925ec0d3c77601ebfa32b148393a5192943c2ff1", "patch": "@@ -198,7 +198,7 @@ fn extend_cause_with_original_assoc_item_obligation<'tcx>(\n     trait_ref: &ty::TraitRef<'tcx>,\n     item: Option<&hir::Item<'tcx>>,\n     cause: &mut traits::ObligationCause<'tcx>,\n-    pred: &ty::Predicate<'tcx>,\n+    pred: ty::Predicate<'tcx>,\n ) {\n     debug!(\n         \"extended_cause_with_original_assoc_item_obligation {:?} {:?} {:?} {:?}\",\n@@ -319,7 +319,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                 trait_ref,\n                 item,\n                 &mut cause,\n-                &obligation.predicate,\n+                obligation.predicate,\n             );\n             traits::Obligation::with_depth(cause, depth, param_env, obligation.predicate)\n         };"}, {"sha": "a4aa965ec95333edee98c9a80e18aad5d8eff579", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/925ec0d3c77601ebfa32b148393a5192943c2ff1/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925ec0d3c77601ebfa32b148393a5192943c2ff1/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=925ec0d3c77601ebfa32b148393a5192943c2ff1", "patch": "@@ -39,7 +39,7 @@ fn try_normalize_after_erasing_regions<'tcx, T: TypeFoldable<'tcx> + PartialEq +\n                 // always only region relations, and we are about to\n                 // erase those anyway:\n                 debug_assert_eq!(\n-                    normalized_obligations.iter().find(|p| not_outlives_predicate(&p.predicate)),\n+                    normalized_obligations.iter().find(|p| not_outlives_predicate(p.predicate)),\n                     None,\n                 );\n \n@@ -57,7 +57,7 @@ fn try_normalize_after_erasing_regions<'tcx, T: TypeFoldable<'tcx> + PartialEq +\n     })\n }\n \n-fn not_outlives_predicate<'tcx>(p: &ty::Predicate<'tcx>) -> bool {\n+fn not_outlives_predicate<'tcx>(p: ty::Predicate<'tcx>) -> bool {\n     match p.kind().skip_binder() {\n         ty::PredicateKind::RegionOutlives(..) | ty::PredicateKind::TypeOutlives(..) => false,\n         ty::PredicateKind::Trait(..)"}, {"sha": "4bef34eb77ec02a75d7b134870cefdcec21950dc", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/925ec0d3c77601ebfa32b148393a5192943c2ff1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925ec0d3c77601ebfa32b148393a5192943c2ff1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=925ec0d3c77601ebfa32b148393a5192943c2ff1", "patch": "@@ -703,7 +703,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let mut bound_spans = vec![];\n \n                     let mut collect_type_param_suggestions =\n-                        |self_ty: Ty<'tcx>, parent_pred: &ty::Predicate<'tcx>, obligation: &str| {\n+                        |self_ty: Ty<'tcx>, parent_pred: ty::Predicate<'tcx>, obligation: &str| {\n                             // We don't care about regions here, so it's fine to skip the binder here.\n                             if let (ty::Param(_), ty::PredicateKind::Trait(p)) =\n                                 (self_ty.kind(), parent_pred.kind().skip_binder())\n@@ -892,15 +892,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         .filter(|(pred, _, _parent_pred)| !skip_list.contains(&pred))\n                         .filter_map(|(pred, parent_pred, _cause)| {\n                             format_pred(*pred).map(|(p, self_ty)| {\n-                                collect_type_param_suggestions(self_ty, pred, &p);\n+                                collect_type_param_suggestions(self_ty, *pred, &p);\n                                 match parent_pred {\n                                     None => format!(\"`{}`\", &p),\n                                     Some(parent_pred) => match format_pred(*parent_pred) {\n                                         None => format!(\"`{}`\", &p),\n                                         Some((parent_p, _)) => {\n                                             collect_type_param_suggestions(\n                                                 self_ty,\n-                                                parent_pred,\n+                                                *parent_pred,\n                                                 &p,\n                                             );\n                                             format!(\"`{}`\\nwhich is required by `{}`\", p, parent_p)"}]}