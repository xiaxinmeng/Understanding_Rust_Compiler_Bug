{"sha": "a3450d060d04b07c09775483b4d4bb7597429e5a", "node_id": "C_kwDOAAsO6NoAKGEzNDUwZDA2MGQwNGIwN2MwOTc3NTQ4M2I0ZDRiYjc1OTc0MjllNWE", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-10-06T21:34:50Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-11-22T22:12:26Z"}, "message": "group fields based on largest power of two dividing its size", "tree": {"sha": "660de009f4a4de793dc8d3e2085f568a07a34077", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/660de009f4a4de793dc8d3e2085f568a07a34077"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3450d060d04b07c09775483b4d4bb7597429e5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3450d060d04b07c09775483b4d4bb7597429e5a", "html_url": "https://github.com/rust-lang/rust/commit/a3450d060d04b07c09775483b4d4bb7597429e5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3450d060d04b07c09775483b4d4bb7597429e5a/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f0cb566ea2f81392de6fb49b09c7e9b4ef4bf1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f0cb566ea2f81392de6fb49b09c7e9b4ef4bf1d", "html_url": "https://github.com/rust-lang/rust/commit/9f0cb566ea2f81392de6fb49b09c7e9b4ef4bf1d"}], "stats": {"total": 10, "additions": 3, "deletions": 7}, "files": [{"sha": "cf7a74dee9901bb65ffa8395e48c938addc53687", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a3450d060d04b07c09775483b4d4bb7597429e5a/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3450d060d04b07c09775483b4d4bb7597429e5a/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=a3450d060d04b07c09775483b4d4bb7597429e5a", "patch": "@@ -140,14 +140,10 @@ fn univariant_uninterned<'tcx>(\n         let optimizing = &mut inverse_memory_index[..end];\n         let effective_field_align = |f: &TyAndLayout<'_>| {\n             if let Some(pack) = pack {\n-                f.align.abi.min(pack)\n-            } else if f.size.bytes().is_power_of_two() && f.size.bytes() >= f.align.abi.bytes() {\n-                // Try to put fields which have a 2^n size and smaller alignment together with\n-                // fields that have an alignment matching that size.\n-                // E.g. group [u8; 4] with u32 fields\n-                Align::from_bytes(f.align.abi.bytes()).unwrap_or(f.align.abi)\n+                f.align.abi.min(pack).bytes()\n             } else {\n-                f.align.abi\n+                // group [u8; 4] with align-4 or [u8; 6] with align-2 fields\n+                f.align.abi.bytes().max(f.size.bytes()).trailing_zeros() as u64\n             }\n         };\n "}]}