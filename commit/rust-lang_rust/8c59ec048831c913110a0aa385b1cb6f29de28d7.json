{"sha": "8c59ec048831c913110a0aa385b1cb6f29de28d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNTllYzA0ODgzMWM5MTMxMTBhMGFhMzg1YjFjYjZmMjlkZTI4ZDc=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-02T04:19:06Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-03T14:34:04Z"}, "message": "unicode: fix fallout", "tree": {"sha": "8ba8376e69abb999cace923720957d2d19dfac85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ba8376e69abb999cace923720957d2d19dfac85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c59ec048831c913110a0aa385b1cb6f29de28d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c59ec048831c913110a0aa385b1cb6f29de28d7", "html_url": "https://github.com/rust-lang/rust/commit/8c59ec048831c913110a0aa385b1cb6f29de28d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c59ec048831c913110a0aa385b1cb6f29de28d7/comments", "author": null, "committer": null, "parents": [{"sha": "3fdd4b366acb23aa0fe17a844fc78cd545e56da8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fdd4b366acb23aa0fe17a844fc78cd545e56da8", "html_url": "https://github.com/rust-lang/rust/commit/3fdd4b366acb23aa0fe17a844fc78cd545e56da8"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "eabe044ce3b7178616adb90f2685aabed9d0a975", "filename": "src/libunicode/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c59ec048831c913110a0aa385b1cb6f29de28d7/src%2Flibunicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c59ec048831c913110a0aa385b1cb6f29de28d7/src%2Flibunicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Flib.rs?ref=8c59ec048831c913110a0aa385b1cb6f29de28d7", "patch": "@@ -29,6 +29,7 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![no_std]\n #![feature(globs, macro_rules, slicing_syntax, unboxed_closures)]\n+#![feature(associated_types)]\n \n extern crate core;\n "}, {"sha": "8ec90acb711f08f1ccef6019b3db39ddb192ee59", "filename": "src/libunicode/u_str.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8c59ec048831c913110a0aa385b1cb6f29de28d7/src%2Flibunicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c59ec048831c913110a0aa385b1cb6f29de28d7/src%2Flibunicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_str.rs?ref=8c59ec048831c913110a0aa385b1cb6f29de28d7", "patch": "@@ -105,7 +105,9 @@ pub struct GraphemeIndices<'a> {\n     iter: Graphemes<'a>,\n }\n \n-impl<'a> Iterator<(uint, &'a str)> for GraphemeIndices<'a> {\n+impl<'a> Iterator for GraphemeIndices<'a> {\n+    type Item = (uint, &'a str);\n+\n     #[inline]\n     fn next(&mut self) -> Option<(uint, &'a str)> {\n         self.iter.next().map(|s| (s.as_ptr() as uint - self.start_offset, s))\n@@ -117,7 +119,7 @@ impl<'a> Iterator<(uint, &'a str)> for GraphemeIndices<'a> {\n     }\n }\n \n-impl<'a> DoubleEndedIterator<(uint, &'a str)> for GraphemeIndices<'a> {\n+impl<'a> DoubleEndedIterator for GraphemeIndices<'a> {\n     #[inline]\n     fn next_back(&mut self) -> Option<(uint, &'a str)> {\n         self.iter.next_back().map(|s| (s.as_ptr() as uint - self.start_offset, s))\n@@ -145,7 +147,9 @@ enum GraphemeState {\n     Regional,\n }\n \n-impl<'a> Iterator<&'a str> for Graphemes<'a> {\n+impl<'a> Iterator for Graphemes<'a> {\n+    type Item = &'a str;\n+\n     #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) {\n         let slen = self.string.len();\n@@ -251,7 +255,7 @@ impl<'a> Iterator<&'a str> for Graphemes<'a> {\n     }\n }\n \n-impl<'a> DoubleEndedIterator<&'a str> for Graphemes<'a> {\n+impl<'a> DoubleEndedIterator for Graphemes<'a> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a str> {\n         use tables::grapheme as gr;\n@@ -428,7 +432,9 @@ impl Utf16Item {\n     }\n }\n \n-impl<'a> Iterator<Utf16Item> for Utf16Items<'a> {\n+impl<'a> Iterator for Utf16Items<'a> {\n+    type Item = Utf16Item;\n+\n     fn next(&mut self) -> Option<Utf16Item> {\n         let u = match self.iter.next() {\n             Some(u) => *u,\n@@ -505,12 +511,14 @@ pub struct Utf16Encoder<I> {\n \n impl<I> Utf16Encoder<I> {\n     /// Create an UTF-16 encoder from any `char` iterator.\n-    pub fn new(chars: I) -> Utf16Encoder<I> where I: Iterator<char> {\n+    pub fn new(chars: I) -> Utf16Encoder<I> where I: Iterator<Item=char> {\n         Utf16Encoder { chars: chars, extra: 0 }\n     }\n }\n \n-impl<I> Iterator<u16> for Utf16Encoder<I> where I: Iterator<char> {\n+impl<I> Iterator for Utf16Encoder<I> where I: Iterator<Item=char> {\n+    type Item = u16;\n+\n     #[inline]\n     fn next(&mut self) -> Option<u16> {\n         if self.extra != 0 {\n@@ -537,9 +545,11 @@ impl<I> Iterator<u16> for Utf16Encoder<I> where I: Iterator<char> {\n     }\n }\n \n-impl<'a> Iterator<&'a str> for Words<'a> {\n+impl<'a> Iterator for Words<'a> {\n+    type Item = &'a str;\n+\n     fn next(&mut self) -> Option<&'a str> { self.inner.next() }\n }\n-impl<'a> DoubleEndedIterator<&'a str> for Words<'a> {\n+impl<'a> DoubleEndedIterator for Words<'a> {\n     fn next_back(&mut self) -> Option<&'a str> { self.inner.next_back() }\n }"}]}