{"sha": "1ab8ca353237470c2587985279d074c1524e90e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYjhjYTM1MzIzNzQ3MGMyNTg3OTg1Mjc5ZDA3NGMxNTI0ZTkwZTE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-03-12T07:37:15Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-03-12T07:37:15Z"}, "message": "Address review comments", "tree": {"sha": "a67f634d27e34457e4af1c0f6206d14a2abda978", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a67f634d27e34457e4af1c0f6206d14a2abda978"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ab8ca353237470c2587985279d074c1524e90e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ab8ca353237470c2587985279d074c1524e90e1", "html_url": "https://github.com/rust-lang/rust/commit/1ab8ca353237470c2587985279d074c1524e90e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ab8ca353237470c2587985279d074c1524e90e1/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79c3651988185bb762e9d59d8c74350416cd669f", "url": "https://api.github.com/repos/rust-lang/rust/commits/79c3651988185bb762e9d59d8c74350416cd669f", "html_url": "https://github.com/rust-lang/rust/commit/79c3651988185bb762e9d59d8c74350416cd669f"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "cae0be463266c051440a3fac5a52bf032f9cf8fa", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ab8ca353237470c2587985279d074c1524e90e1/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ab8ca353237470c2587985279d074c1524e90e1/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1ab8ca353237470c2587985279d074c1524e90e1", "patch": "@@ -1884,7 +1884,9 @@ impl<'a> Parser<'a> {\n         Ok(())\n     }\n \n-    // Try to recover from associated item paths like `[T]::AssocItem`/`(T, U)::AssocItem`.\n+    /// Try to recover from associated item paths like `[T]::AssocItem`/`(T, U)::AssocItem`.\n+    /// Attempt to convert the base expression/pattern/type into a type, parse the `::AssocItem`\n+    /// tail, and combine them into a `<Ty>::AssocItem` expression/pattern/type.\n     fn maybe_recover_from_bad_qpath<T: RecoverQPath>(&mut self, base: P<T>, allow_recovery: bool)\n                                                      -> PResult<'a, P<T>> {\n         // Do not add `::` to expected tokens.\n@@ -1896,6 +1898,8 @@ impl<'a> Parser<'a> {\n         Ok(base)\n     }\n \n+    /// Given an already parsed `Ty` parse the `::AssocItem` tail and\n+    /// combine them into a `<Ty>::AssocItem` expression/pattern/type.\n     fn maybe_recover_from_bad_qpath_stage_2<T: RecoverQPath>(&mut self, ty_span: Span, ty: P<Ty>)\n                                                              -> PResult<'a, P<T>> {\n         self.expect(&token::ModSep)?;\n@@ -1912,7 +1916,7 @@ impl<'a> Parser<'a> {\n                 path.span, \"try\", format!(\"<{}>::{}\", ty_str, path), Applicability::MaybeIncorrect\n             ).emit();\n \n-        let path_span = path.span.to(path.span); // use an empty path since `position` == 0\n+        let path_span = ty_span.shrink_to_hi(); // use an empty path since `position` == 0\n         Ok(P(T::recovered(Some(QSelf { ty, path_span, position: 0 }), path)))\n     }\n "}]}