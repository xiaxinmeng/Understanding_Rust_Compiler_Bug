{"sha": "073127a04fda615fe865808add119f96a241ec91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MzEyN2EwNGZkYTYxNWZlODY1ODA4YWRkMTE5Zjk2YTI0MWVjOTE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-09T07:43:47Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-21T10:27:55Z"}, "message": "check for cycles when unifying const variables", "tree": {"sha": "49c0f42451a8eae327d44ac7c4defa60c4a2395a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49c0f42451a8eae327d44ac7c4defa60c4a2395a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/073127a04fda615fe865808add119f96a241ec91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/073127a04fda615fe865808add119f96a241ec91", "html_url": "https://github.com/rust-lang/rust/commit/073127a04fda615fe865808add119f96a241ec91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/073127a04fda615fe865808add119f96a241ec91/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39245400c53db98b2c4cb90cf712b282d8425d66", "url": "https://api.github.com/repos/rust-lang/rust/commits/39245400c53db98b2c4cb90cf712b282d8425d66", "html_url": "https://github.com/rust-lang/rust/commit/39245400c53db98b2c4cb90cf712b282d8425d66"}], "stats": {"total": 251, "additions": 237, "deletions": 14}, "files": [{"sha": "33d26317c7134f6fd60b523e68f9808fe9d20377", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 231, "deletions": 11, "changes": 242, "blob_url": "https://github.com/rust-lang/rust/blob/073127a04fda615fe865808add119f96a241ec91/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073127a04fda615fe865808add119f96a241ec91/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=073127a04fda615fe865808add119f96a241ec91", "patch": "@@ -45,7 +45,7 @@ use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, InferConst, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc_middle::ty::{IntType, UintType};\n-use rustc_span::DUMMY_SP;\n+use rustc_span::{Span, DUMMY_SP};\n \n /// Small-storage-optimized implementation of a map\n /// made specifically for caching results.\n@@ -219,11 +219,11 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n             }\n \n             (ty::ConstKind::Infer(InferConst::Var(vid)), _) => {\n-                return self.unify_const_variable(a_is_expected, vid, b);\n+                return self.unify_const_variable(relation.param_env(), vid, b, a_is_expected);\n             }\n \n             (_, ty::ConstKind::Infer(InferConst::Var(vid))) => {\n-                return self.unify_const_variable(!a_is_expected, vid, a);\n+                return self.unify_const_variable(relation.param_env(), vid, a, !a_is_expected);\n             }\n             (ty::ConstKind::Unevaluated(..), _) if self.tcx.lazy_normalization() => {\n                 // FIXME(#59490): Need to remove the leak check to accommodate\n@@ -247,17 +247,66 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n         ty::relate::super_relate_consts(relation, a, b)\n     }\n \n-    pub fn unify_const_variable(\n+    /// Unifies the const variable `target_vid` with the given constant.\n+    ///\n+    /// This also tests if the given const `ct` contains an inference variable which was previously\n+    /// unioned with `target_vid`. If this is the case, inferring `target_vid` to `ct`\n+    /// would result in an infinite type as we continously replace an inference variable\n+    /// in `ct` with `ct` itself.\n+    ///\n+    /// This is especially important as unevaluated consts use their parents generics.\n+    /// They therefore often contain unused substs, making these errors far more likely.\n+    ///\n+    /// A good example of this is the following:\n+    ///\n+    /// ```rust\n+    /// #![feature(const_generics)]\n+    ///\n+    /// fn bind<const N: usize>(value: [u8; N]) -> [u8; 3 + 4] {\n+    ///     todo!()\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     let mut arr = Default::default();\n+    ///     arr = bind(arr);\n+    /// }\n+    /// ```\n+    ///\n+    /// Here `3 + 4` ends up as `ConstKind::Unevaluated` which uses the generics\n+    /// of `fn bind` (meaning that its substs contain `N`).\n+    ///\n+    /// `bind(arr)` now infers that the type of `arr` must be `[u8; N]`.\n+    /// The assignment `arr = bind(arr)` now tries to equate `N` with `3 + 4`.\n+    ///\n+    /// As `3 + 4` contains `N` in its substs, this must not succeed.\n+    ///\n+    /// See `src/test/ui/const-generics/occurs-check/` for more examples where this is relevant.\n+    fn unify_const_variable(\n         &self,\n+        param_env: ty::ParamEnv<'tcx>,\n+        target_vid: ty::ConstVid<'tcx>,\n+        ct: &'tcx ty::Const<'tcx>,\n         vid_is_expected: bool,\n-        vid: ty::ConstVid<'tcx>,\n-        value: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n+        let (for_universe, span) = {\n+            let mut inner = self.inner.borrow_mut();\n+            let variable_table = &mut inner.const_unification_table();\n+            let var_value = variable_table.probe_value(target_vid);\n+            match var_value.val {\n+                ConstVariableValue::Known { value } => {\n+                    bug!(\"instantiating {:?} which has a known value {:?}\", target_vid, value)\n+                }\n+                ConstVariableValue::Unknown { universe } => (universe, var_value.origin.span),\n+            }\n+        };\n+        let value = ConstInferUnifier { infcx: self, span, param_env, for_universe, target_vid }\n+            .relate(ct, ct)?;\n+\n         self.inner\n             .borrow_mut()\n             .const_unification_table()\n             .unify_var_value(\n-                vid,\n+                target_vid,\n                 ConstVarValue {\n                     origin: ConstVariableOrigin {\n                         kind: ConstVariableOriginKind::ConstInference,\n@@ -266,8 +315,8 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n                     val: ConstVariableValue::Known { value },\n                 },\n             )\n-            .map_err(|e| const_unification_error(vid_is_expected, e))?;\n-        Ok(value)\n+            .map(|()| value)\n+            .map_err(|e| const_unification_error(vid_is_expected, e))\n     }\n \n     fn unify_integral_variable(\n@@ -422,7 +471,7 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n \n         let for_universe = match self.infcx.inner.borrow_mut().type_variables().probe(for_vid) {\n             v @ TypeVariableValue::Known { .. } => {\n-                panic!(\"instantiating {:?} which has a known value {:?}\", for_vid, v,)\n+                bug!(\"instantiating {:?} which has a known value {:?}\", for_vid, v,)\n             }\n             TypeVariableValue::Unknown { universe } => universe,\n         };\n@@ -740,7 +789,6 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                     }\n                 }\n             }\n-            ty::ConstKind::Unevaluated(..) if self.tcx().lazy_normalization() => Ok(c),\n             _ => relate::super_relate_consts(self, c, c),\n         }\n     }\n@@ -790,3 +838,175 @@ fn float_unification_error<'tcx>(\n     let (ty::FloatVarValue(a), ty::FloatVarValue(b)) = v;\n     TypeError::FloatMismatch(ty::relate::expected_found_bool(a_is_expected, a, b))\n }\n+\n+struct ConstInferUnifier<'cx, 'tcx> {\n+    infcx: &'cx InferCtxt<'cx, 'tcx>,\n+\n+    span: Span,\n+\n+    param_env: ty::ParamEnv<'tcx>,\n+\n+    for_universe: ty::UniverseIndex,\n+\n+    /// The vid of the const variable that is in the process of being\n+    /// instantiated; if we find this within the const we are folding,\n+    /// that means we would have created a cyclic const.\n+    target_vid: ty::ConstVid<'tcx>,\n+}\n+\n+// We use `TypeRelation` here to propagate `RelateResult` upwards.\n+//\n+// Both inputs are expected to be the same.\n+impl TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.infcx.tcx\n+    }\n+\n+    fn param_env(&self) -> ty::ParamEnv<'tcx> {\n+        self.param_env\n+    }\n+\n+    fn tag(&self) -> &'static str {\n+        \"ConstInferUnifier\"\n+    }\n+\n+    fn a_is_expected(&self) -> bool {\n+        true\n+    }\n+\n+    fn relate_with_variance<T: Relate<'tcx>>(\n+        &mut self,\n+        _variance: ty::Variance,\n+        a: T,\n+        b: T,\n+    ) -> RelateResult<'tcx, T> {\n+        // We don't care about variance here.\n+        self.relate(a, b)\n+    }\n+\n+    fn binders<T>(\n+        &mut self,\n+        a: ty::Binder<T>,\n+        b: ty::Binder<T>,\n+    ) -> RelateResult<'tcx, ty::Binder<T>>\n+    where\n+        T: Relate<'tcx>,\n+    {\n+        Ok(ty::Binder::bind(self.relate(a.skip_binder(), b.skip_binder())?))\n+    }\n+\n+    fn tys(&mut self, t: Ty<'tcx>, _t: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n+        debug_assert_eq!(t, _t);\n+        debug!(\"ConstInferUnifier: t={:?}\", t);\n+\n+        match t.kind() {\n+            &ty::Infer(ty::TyVar(vid)) => {\n+                let vid = self.infcx.inner.borrow_mut().type_variables().root_var(vid);\n+                let probe = self.infcx.inner.borrow_mut().type_variables().probe(vid);\n+                match probe {\n+                    TypeVariableValue::Known { value: u } => {\n+                        debug!(\"ConstOccursChecker: known value {:?}\", u);\n+                        self.tys(u, u)\n+                    }\n+                    TypeVariableValue::Unknown { universe } => {\n+                        if self.for_universe.can_name(universe) {\n+                            return Ok(t);\n+                        }\n+\n+                        let origin =\n+                            *self.infcx.inner.borrow_mut().type_variables().var_origin(vid);\n+                        let new_var_id = self.infcx.inner.borrow_mut().type_variables().new_var(\n+                            self.for_universe,\n+                            false,\n+                            origin,\n+                        );\n+                        let u = self.tcx().mk_ty_var(new_var_id);\n+                        debug!(\n+                            \"ConstInferUnifier: replacing original vid={:?} with new={:?}\",\n+                            vid, u\n+                        );\n+                        Ok(u)\n+                    }\n+                }\n+            }\n+            _ => relate::super_relate_tys(self, t, t),\n+        }\n+    }\n+\n+    fn regions(\n+        &mut self,\n+        r: ty::Region<'tcx>,\n+        _r: ty::Region<'tcx>,\n+    ) -> RelateResult<'tcx, ty::Region<'tcx>> {\n+        debug_assert_eq!(r, _r);\n+        debug!(\"ConstInferUnifier: r={:?}\", r);\n+\n+        match r {\n+            // Never make variables for regions bound within the type itself,\n+            // nor for erased regions.\n+            ty::ReLateBound(..) | ty::ReErased => {\n+                return Ok(r);\n+            }\n+\n+            ty::RePlaceholder(..)\n+            | ty::ReVar(..)\n+            | ty::ReEmpty(_)\n+            | ty::ReStatic\n+            | ty::ReEarlyBound(..)\n+            | ty::ReFree(..) => {\n+                // see common code below\n+            }\n+        }\n+\n+        let r_universe = self.infcx.universe_of_region(r);\n+        if self.for_universe.can_name(r_universe) {\n+            return Ok(r);\n+        } else {\n+            // FIXME: This is non-ideal because we don't give a\n+            // very descriptive origin for this region variable.\n+            Ok(self.infcx.next_region_var_in_universe(MiscVariable(self.span), self.for_universe))\n+        }\n+    }\n+\n+    fn consts(\n+        &mut self,\n+        c: &'tcx ty::Const<'tcx>,\n+        _c: &'tcx ty::Const<'tcx>,\n+    ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n+        debug_assert_eq!(c, _c);\n+        debug!(\"ConstInferUnifier: c={:?}\", c);\n+\n+        match c.val {\n+            ty::ConstKind::Infer(InferConst::Var(vid)) => {\n+                let mut inner = self.infcx.inner.borrow_mut();\n+                let variable_table = &mut inner.const_unification_table();\n+\n+                // Check if the current unification would end up\n+                // unifying `target_vid` with a const which contains\n+                // an inference variable which is unioned with `target_vid`.\n+                //\n+                // Not doing so can easily result in stack overflows.\n+                if variable_table.unioned(self.target_vid, vid) {\n+                    return Err(TypeError::CyclicConst(c));\n+                }\n+\n+                let var_value = variable_table.probe_value(vid);\n+                match var_value.val {\n+                    ConstVariableValue::Known { value: u } => self.consts(u, u),\n+                    ConstVariableValue::Unknown { universe } => {\n+                        if self.for_universe.can_name(universe) {\n+                            Ok(c)\n+                        } else {\n+                            let new_var_id = variable_table.new_key(ConstVarValue {\n+                                origin: var_value.origin,\n+                                val: ConstVariableValue::Unknown { universe: self.for_universe },\n+                            });\n+                            Ok(self.tcx().mk_const_var(new_var_id, c.ty))\n+                        }\n+                    }\n+                }\n+            }\n+            _ => relate::super_relate_consts(self, c, c),\n+        }\n+    }\n+}"}, {"sha": "ff98a8b9bf0bf260f5e007fc80fcc5e37a2cde67", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/073127a04fda615fe865808add119f96a241ec91/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073127a04fda615fe865808add119f96a241ec91/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=073127a04fda615fe865808add119f96a241ec91", "patch": "@@ -56,6 +56,7 @@ pub enum TypeError<'tcx> {\n     /// created a cycle (because it appears somewhere within that\n     /// type).\n     CyclicTy(Ty<'tcx>),\n+    CyclicConst(&'tcx ty::Const<'tcx>),\n     ProjectionMismatched(ExpectedFound<DefId>),\n     ExistentialMismatch(ExpectedFound<&'tcx ty::List<ty::ExistentialPredicate<'tcx>>>),\n     ObjectUnsafeCoercion(DefId),\n@@ -100,6 +101,7 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n \n         match *self {\n             CyclicTy(_) => write!(f, \"cyclic type of infinite size\"),\n+            CyclicConst(_) => write!(f, \"encountered a self-referencing constant\"),\n             Mismatch => write!(f, \"types differ\"),\n             UnsafetyMismatch(values) => {\n                 write!(f, \"expected {} fn, found {} fn\", values.expected, values.found)\n@@ -195,9 +197,9 @@ impl<'tcx> TypeError<'tcx> {\n     pub fn must_include_note(&self) -> bool {\n         use self::TypeError::*;\n         match self {\n-            CyclicTy(_) | UnsafetyMismatch(_) | Mismatch | AbiMismatch(_) | FixedArraySize(_)\n-            | Sorts(_) | IntMismatch(_) | FloatMismatch(_) | VariadicMismatch(_)\n-            | TargetFeatureCast(_) => false,\n+            CyclicTy(_) | CyclicConst(_) | UnsafetyMismatch(_) | Mismatch | AbiMismatch(_)\n+            | FixedArraySize(_) | Sorts(_) | IntMismatch(_) | FloatMismatch(_)\n+            | VariadicMismatch(_) | TargetFeatureCast(_) => false,\n \n             Mutability\n             | TupleSize(_)"}, {"sha": "597ceac9386a049d37a9b60d428ddd35ed7a7108", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/073127a04fda615fe865808add119f96a241ec91/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073127a04fda615fe865808add119f96a241ec91/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=073127a04fda615fe865808add119f96a241ec91", "patch": "@@ -689,6 +689,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n             Traits(x) => Traits(x),\n             VariadicMismatch(x) => VariadicMismatch(x),\n             CyclicTy(t) => return tcx.lift(&t).map(|t| CyclicTy(t)),\n+            CyclicConst(ct) => return tcx.lift(&ct).map(|ct| CyclicConst(ct)),\n             ProjectionMismatched(x) => ProjectionMismatched(x),\n             Sorts(ref x) => return tcx.lift(x).map(Sorts),\n             ExistentialMismatch(ref x) => return tcx.lift(x).map(ExistentialMismatch),"}]}