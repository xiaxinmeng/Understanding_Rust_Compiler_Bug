{"sha": "6beb4ba1aaecb59fdfdc676434b5a3b17a4b5bfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZWI0YmExYWFlY2I1OWZkZmRjNjc2NDM0YjVhM2IxN2E0YjViZmM=", "commit": {"author": {"name": "whitequark", "email": "whitequark@whitequark.org", "date": "2015-09-20T19:15:39Z"}, "committer": {"name": "whitequark", "email": "whitequark@whitequark.org", "date": "2015-09-20T19:15:39Z"}, "message": "Fix style.", "tree": {"sha": "ea09570c35ced48c140136fa4a5344b9f49997b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea09570c35ced48c140136fa4a5344b9f49997b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6beb4ba1aaecb59fdfdc676434b5a3b17a4b5bfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6beb4ba1aaecb59fdfdc676434b5a3b17a4b5bfc", "html_url": "https://github.com/rust-lang/rust/commit/6beb4ba1aaecb59fdfdc676434b5a3b17a4b5bfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6beb4ba1aaecb59fdfdc676434b5a3b17a4b5bfc/comments", "author": {"login": "whitequark", "id": 54771, "node_id": "MDQ6VXNlcjU0Nzcx", "avatar_url": "https://avatars.githubusercontent.com/u/54771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whitequark", "html_url": "https://github.com/whitequark", "followers_url": "https://api.github.com/users/whitequark/followers", "following_url": "https://api.github.com/users/whitequark/following{/other_user}", "gists_url": "https://api.github.com/users/whitequark/gists{/gist_id}", "starred_url": "https://api.github.com/users/whitequark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whitequark/subscriptions", "organizations_url": "https://api.github.com/users/whitequark/orgs", "repos_url": "https://api.github.com/users/whitequark/repos", "events_url": "https://api.github.com/users/whitequark/events{/privacy}", "received_events_url": "https://api.github.com/users/whitequark/received_events", "type": "User", "site_admin": false}, "committer": {"login": "whitequark", "id": 54771, "node_id": "MDQ6VXNlcjU0Nzcx", "avatar_url": "https://avatars.githubusercontent.com/u/54771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whitequark", "html_url": "https://github.com/whitequark", "followers_url": "https://api.github.com/users/whitequark/followers", "following_url": "https://api.github.com/users/whitequark/following{/other_user}", "gists_url": "https://api.github.com/users/whitequark/gists{/gist_id}", "starred_url": "https://api.github.com/users/whitequark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whitequark/subscriptions", "organizations_url": "https://api.github.com/users/whitequark/orgs", "repos_url": "https://api.github.com/users/whitequark/repos", "events_url": "https://api.github.com/users/whitequark/events{/privacy}", "received_events_url": "https://api.github.com/users/whitequark/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5fa7776dff913dd75fed6f4e7ed483f0e75e367", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5fa7776dff913dd75fed6f4e7ed483f0e75e367", "html_url": "https://github.com/rust-lang/rust/commit/c5fa7776dff913dd75fed6f4e7ed483f0e75e367"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "ddab16493f01367995250d392c2dda32e6d6aded", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6beb4ba1aaecb59fdfdc676434b5a3b17a4b5bfc/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6beb4ba1aaecb59fdfdc676434b5a3b17a4b5bfc/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=6beb4ba1aaecb59fdfdc676434b5a3b17a4b5bfc", "patch": "@@ -1322,9 +1322,11 @@ impl<T> Drop for Vec<T> {\n         // OK because exactly when this stops being a valid assumption, we\n         // don't need unsafe_no_drop_flag shenanigans anymore.\n         if self.buf.unsafe_no_drop_flag_needs_drop() {\n-            if unsafe { needs_drop::<T>() } {\n-                for x in self.iter_mut() {\n-                    unsafe { drop_in_place(x); }\n+            unsafe {\n+                if needs_drop::<T>() {\n+                    for x in self.iter_mut() {\n+                        drop_in_place(x);\n+                    }\n                 }\n             }\n         }"}]}