{"sha": "e1a8d322d0cb1ecce799a3ae5bfc991892ab09e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYThkMzIyZDBjYjFlY2NlNzk5YTNhZTViZmM5OTE4OTJhYjA5ZTI=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-05T20:47:47Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-17T09:05:04Z"}, "message": "keep the good old lazy_normalization hack alive", "tree": {"sha": "908654b66357648357613df53c1af3a787251ff6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/908654b66357648357613df53c1af3a787251ff6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1a8d322d0cb1ecce799a3ae5bfc991892ab09e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a8d322d0cb1ecce799a3ae5bfc991892ab09e2", "html_url": "https://github.com/rust-lang/rust/commit/e1a8d322d0cb1ecce799a3ae5bfc991892ab09e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1a8d322d0cb1ecce799a3ae5bfc991892ab09e2/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3", "html_url": "https://github.com/rust-lang/rust/commit/c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3"}], "stats": {"total": 30, "additions": 25, "deletions": 5}, "files": [{"sha": "6ab7f66186333ee2a3c04f11befc2db3f175d41f", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e1a8d322d0cb1ecce799a3ae5bfc991892ab09e2/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a8d322d0cb1ecce799a3ae5bfc991892ab09e2/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e1a8d322d0cb1ecce799a3ae5bfc991892ab09e2", "patch": "@@ -1164,13 +1164,33 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             let parent_id = tcx.hir().get_parent_item(hir_id);\n             Some(tcx.hir().local_def_id(parent_id).to_def_id())\n         }\n-\n+        // FIXME(#43408) always enable this once we use `lazy_normalization` is\n+        // stable enough and does not need a feature gate anymore.\n         Node::AnonConst(_) => {\n-            if tcx.features().lazy_normalization_consts {\n-                let parent_id = tcx.hir().get_parent_item(hir_id);\n-                Some(tcx.hir().local_def_id(parent_id).to_def_id())\n+            let parent_id = tcx.hir().get_parent_item(hir_id);\n+            let parent_def_id = tcx.hir().local_def_id(parent_id);\n+\n+            // HACK(eddyb) this provides the correct generics when\n+            // `feature(const_generics)` is enabled, so that const expressions\n+            // used with const generics, e.g. `Foo<{N+1}>`, can work at all.\n+            if tcx.features().const_generics || tcx.features().lazy_normalization_consts {\n+                Some(parent_def_id.to_def_id())\n             } else {\n-                None\n+                let parent_node = tcx.hir().get(tcx.hir().get_parent_node(hir_id));\n+                match parent_node {\n+                    // HACK(eddyb) this provides the correct generics for repeat\n+                    // expressions' count (i.e. `N` in `[x; N]`), and explicit\n+                    // `enum` discriminants (i.e. `D` in `enum Foo { Bar = D }`),\n+                    // as they shouldn't be able to cause query cycle errors.\n+                    Node::Expr(&Expr { kind: ExprKind::Repeat(_, ref constant), .. })\n+                    | Node::Variant(Variant { disr_expr: Some(ref constant), .. })\n+                        if constant.hir_id == hir_id =>\n+                    {\n+                        Some(parent_def_id.to_def_id())\n+                    }\n+\n+                    _ => None,\n+                }\n             }\n         }\n "}]}