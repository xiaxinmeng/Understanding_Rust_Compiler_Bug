{"sha": "df9df19507ea4573ff141d253b2e95cd5b6cd0ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmOWRmMTk1MDdlYTQ1NzNmZjE0MWQyNTNiMmU5NWNkNWI2Y2QwZmY=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-01-06T00:22:52Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-01-13T09:42:59Z"}, "message": "Always calculate glob map but only for glob uses\n\nPreviously calculating glob map was *opt-in*, however it did record\nnode id -> ident use for every use directive. This aims to see if we\ncan unconditionally calculate the glob map and not regress performance.", "tree": {"sha": "9a8676d87faacb301c696229774b4c72c703115c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a8676d87faacb301c696229774b4c72c703115c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df9df19507ea4573ff141d253b2e95cd5b6cd0ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df9df19507ea4573ff141d253b2e95cd5b6cd0ff", "html_url": "https://github.com/rust-lang/rust/commit/df9df19507ea4573ff141d253b2e95cd5b6cd0ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df9df19507ea4573ff141d253b2e95cd5b6cd0ff/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75a369c5b11459baa6bf7734eeb6135998a0a7de", "url": "https://api.github.com/repos/rust-lang/rust/commits/75a369c5b11459baa6bf7734eeb6135998a0a7de", "html_url": "https://github.com/rust-lang/rust/commit/75a369c5b11459baa6bf7734eeb6135998a0a7de"}], "stats": {"total": 52, "additions": 11, "deletions": 41}, "files": [{"sha": "26b4735d926a55799e17a4e0191832d360cd195b", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df9df19507ea4573ff141d253b2e95cd5b6cd0ff/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9df19507ea4573ff141d253b2e95cd5b6cd0ff/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=df9df19507ea4573ff141d253b2e95cd5b6cd0ff", "patch": "@@ -122,7 +122,7 @@ mod sty;\n /// *on-demand* infrastructure.\n #[derive(Clone)]\n pub struct CrateAnalysis {\n-    pub glob_map: Option<hir::GlobMap>,\n+    pub glob_map: hir::GlobMap,\n }\n \n #[derive(Clone)]"}, {"sha": "e026909d127cffea063a52e75699c252cef3622b", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/df9df19507ea4573ff141d253b2e95cd5b6cd0ff/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9df19507ea4573ff141d253b2e95cd5b6cd0ff/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=df9df19507ea4573ff141d253b2e95cd5b6cd0ff", "patch": "@@ -26,7 +26,7 @@ use rustc_passes::{self, ast_validation, hir_stats, loops, rvalue_promotion};\n use rustc_plugin as plugin;\n use rustc_plugin::registry::Registry;\n use rustc_privacy;\n-use rustc_resolve::{MakeGlobMap, Resolver, ResolverArenas};\n+use rustc_resolve::{Resolver, ResolverArenas};\n use rustc_traits;\n use rustc_typeck as typeck;\n use syntax::{self, ast, attr, diagnostics, visit};\n@@ -179,7 +179,6 @@ pub fn compile_input(\n                 registry,\n                 &crate_name,\n                 addl_plugins,\n-                control.make_glob_map,\n                 |expanded_crate| {\n                     let mut state = CompileState::state_after_expand(\n                         input,\n@@ -394,7 +393,6 @@ pub struct CompileController<'a> {\n \n     // FIXME we probably want to group the below options together and offer a\n     // better API, rather than this ad-hoc approach.\n-    pub make_glob_map: MakeGlobMap,\n     // Whether the compiler should keep the ast beyond parsing.\n     pub keep_ast: bool,\n     // -Zcontinue-parse-after-error\n@@ -417,7 +415,6 @@ impl<'a> CompileController<'a> {\n             after_hir_lowering: PhaseController::basic(),\n             after_analysis: PhaseController::basic(),\n             compilation_done: PhaseController::basic(),\n-            make_glob_map: MakeGlobMap::No,\n             keep_ast: false,\n             continue_parse_after_error: false,\n             provide: box |_| {},\n@@ -739,7 +736,6 @@ pub fn phase_2_configure_and_expand<F>(\n     registry: Option<Registry>,\n     crate_name: &str,\n     addl_plugins: Option<Vec<String>>,\n-    make_glob_map: MakeGlobMap,\n     after_expand: F,\n ) -> Result<ExpansionResult, CompileIncomplete>\n where\n@@ -759,7 +755,6 @@ where\n         registry,\n         crate_name,\n         addl_plugins,\n-        make_glob_map,\n         &resolver_arenas,\n         &mut crate_loader,\n         after_expand,\n@@ -785,11 +780,7 @@ where\n             },\n \n             analysis: ty::CrateAnalysis {\n-                glob_map: if resolver.make_glob_map {\n-                    Some(resolver.glob_map)\n-                } else {\n-                    None\n-                },\n+                glob_map: resolver.glob_map\n             },\n         }),\n         Err(x) => Err(x),\n@@ -805,7 +796,6 @@ pub fn phase_2_configure_and_expand_inner<'a, F>(\n     registry: Option<Registry>,\n     crate_name: &str,\n     addl_plugins: Option<Vec<String>>,\n-    make_glob_map: MakeGlobMap,\n     resolver_arenas: &'a ResolverArenas<'a>,\n     crate_loader: &'a mut CrateLoader<'a>,\n     after_expand: F,\n@@ -937,7 +927,6 @@ where\n         cstore,\n         &krate,\n         crate_name,\n-        make_glob_map,\n         crate_loader,\n         &resolver_arenas,\n     );"}, {"sha": "010ac28cdc9445ff71be6ea17e7f533105b22f4b", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df9df19507ea4573ff141d253b2e95cd5b6cd0ff/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9df19507ea4573ff141d253b2e95cd5b6cd0ff/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=df9df19507ea4573ff141d253b2e95cd5b6cd0ff", "patch": "@@ -57,7 +57,6 @@ extern crate syntax_pos;\n use driver::CompileController;\n use pretty::{PpMode, UserIdentifiedItem};\n \n-use rustc_resolve as resolve;\n use rustc_save_analysis as save;\n use rustc_save_analysis::DumpHandler;\n use rustc_data_structures::sync::{self, Lrc, Ordering::SeqCst};\n@@ -950,7 +949,6 @@ pub fn enable_save_analysis(control: &mut CompileController) {\n         });\n     };\n     control.after_analysis.run_callback_on_error = true;\n-    control.make_glob_map = resolve::MakeGlobMap::Yes;\n }\n \n impl RustcDefaultCalls {"}, {"sha": "afcf08632a4f0907e7f7e82812da59b5b3c04abf", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df9df19507ea4573ff141d253b2e95cd5b6cd0ff/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9df19507ea4573ff141d253b2e95cd5b6cd0ff/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=df9df19507ea4573ff141d253b2e95cd5b6cd0ff", "patch": "@@ -18,7 +18,6 @@ use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::sync::{self, Lrc};\n use rustc_lint;\n use rustc_metadata::cstore::CStore;\n-use rustc_resolve::MakeGlobMap;\n use rustc_target::spec::abi::Abi;\n use syntax;\n use syntax::ast;\n@@ -134,7 +133,6 @@ fn test_env_with_pool<F>(\n             None,\n             \"test\",\n             None,\n-            MakeGlobMap::No,\n             |_| Ok(()),\n         ).expect(\"phase 2 aborted\")\n     };"}, {"sha": "797837c0e849da6584ec5a4f26da7d41d1c23a26", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/df9df19507ea4573ff141d253b2e95cd5b6cd0ff/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9df19507ea4573ff141d253b2e95cd5b6cd0ff/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=df9df19507ea4573ff141d253b2e95cd5b6cd0ff", "patch": "@@ -1536,9 +1536,7 @@ pub struct Resolver<'a> {\n     extern_module_map: FxHashMap<(DefId, bool /* MacrosOnly? */), Module<'a>>,\n     binding_parent_modules: FxHashMap<PtrKey<'a, NameBinding<'a>>, Module<'a>>,\n \n-    pub make_glob_map: bool,\n-    /// Maps imports to the names of items actually imported (this actually maps\n-    /// all imports, but only glob imports are actually interesting).\n+    /// Maps glob imports to the names of items actually imported.\n     pub glob_map: GlobMap,\n \n     used_imports: FxHashSet<(NodeId, Namespace)>,\n@@ -1785,7 +1783,6 @@ impl<'a> Resolver<'a> {\n                cstore: &'a CStore,\n                krate: &Crate,\n                crate_name: &str,\n-               make_glob_map: MakeGlobMap,\n                crate_loader: &'a mut CrateLoader<'a>,\n                arenas: &'a ResolverArenas<'a>)\n                -> Resolver<'a> {\n@@ -1869,7 +1866,6 @@ impl<'a> Resolver<'a> {\n             extern_module_map: FxHashMap::default(),\n             binding_parent_modules: FxHashMap::default(),\n \n-            make_glob_map: make_glob_map == MakeGlobMap::Yes,\n             glob_map: Default::default(),\n \n             used_imports: FxHashSet::default(),\n@@ -1979,14 +1975,15 @@ impl<'a> Resolver<'a> {\n             used.set(true);\n             directive.used.set(true);\n             self.used_imports.insert((directive.id, ns));\n-            self.add_to_glob_map(directive.id, ident);\n+            self.add_to_glob_map(&directive, ident);\n             self.record_use(ident, ns, binding, false);\n         }\n     }\n \n-    fn add_to_glob_map(&mut self, id: NodeId, ident: Ident) {\n-        if self.make_glob_map {\n-            self.glob_map.entry(id).or_default().insert(ident.name);\n+    #[inline]\n+    fn add_to_glob_map(&mut self, directive: &ImportDirective<'_>, ident: Ident) {\n+        if directive.is_glob() {\n+            self.glob_map.entry(directive.id).or_default().insert(ident.name);\n         }\n     }\n \n@@ -4551,7 +4548,7 @@ impl<'a> Resolver<'a> {\n                 let import_id = match binding.kind {\n                     NameBindingKind::Import { directive, .. } => {\n                         self.maybe_unused_trait_imports.insert(directive.id);\n-                        self.add_to_glob_map(directive.id, trait_name);\n+                        self.add_to_glob_map(&directive, trait_name);\n                         Some(directive.id)\n                     }\n                     _ => None,\n@@ -5255,12 +5252,6 @@ fn err_path_resolution() -> PathResolution {\n     PathResolution::new(Def::Err)\n }\n \n-#[derive(PartialEq,Copy, Clone)]\n-pub enum MakeGlobMap {\n-    Yes,\n-    No,\n-}\n-\n #[derive(Copy, Clone, Debug)]\n enum CrateLint {\n     /// Do not issue the lint"}, {"sha": "52be67fb51228e63c907efbd4f74a486c5b536b7", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df9df19507ea4573ff141d253b2e95cd5b6cd0ff/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9df19507ea4573ff141d253b2e95cd5b6cd0ff/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=df9df19507ea4573ff141d253b2e95cd5b6cd0ff", "patch": "@@ -1239,7 +1239,6 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n \n                 // Make a comma-separated list of names of imported modules.\n                 let glob_map = &self.save_ctxt.analysis.glob_map;\n-                let glob_map = glob_map.as_ref().unwrap();\n                 let names = if glob_map.contains_key(&id) {\n                     glob_map.get(&id).unwrap().iter().map(|n| n.to_string()).collect()\n                 } else {"}, {"sha": "4b0fb686ba523a6e231bba1870b1caf385a3c4db", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df9df19507ea4573ff141d253b2e95cd5b6cd0ff/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9df19507ea4573ff141d253b2e95cd5b6cd0ff/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=df9df19507ea4573ff141d253b2e95cd5b6cd0ff", "patch": "@@ -1122,8 +1122,6 @@ pub fn process_crate<'l, 'tcx, H: SaveHandler>(\n     mut handler: H,\n ) {\n     tcx.dep_graph.with_ignore(|| {\n-        assert!(analysis.glob_map.is_some());\n-\n         info!(\"Dumping crate {}\", cratename);\n \n         let save_ctxt = SaveContext {"}, {"sha": "78dbf41bf21fdb1d12b0c3ab7b226ff7844b5305", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df9df19507ea4573ff141d253b2e95cd5b6cd0ff/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9df19507ea4573ff141d253b2e95cd5b6cd0ff/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=df9df19507ea4573ff141d253b2e95cd5b6cd0ff", "patch": "@@ -451,7 +451,6 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                                                         None,\n                                                         &name,\n                                                         None,\n-                                                        resolve::MakeGlobMap::No,\n                                                         &resolver_arenas,\n                                                         &mut crate_loader,\n                                                         |_| Ok(()));\n@@ -476,7 +475,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n             }).collect(),\n         };\n         let analysis = ty::CrateAnalysis {\n-            glob_map: if resolver.make_glob_map { Some(resolver.glob_map.clone()) } else { None },\n+            glob_map: resolver.glob_map.clone(),\n         };\n \n         let mut arenas = AllArenas::new();"}, {"sha": "af47c7d5e8bfa89579ebb2176d0ca915febb98a2", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df9df19507ea4573ff141d253b2e95cd5b6cd0ff/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9df19507ea4573ff141d253b2e95cd5b6cd0ff/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=df9df19507ea4573ff141d253b2e95cd5b6cd0ff", "patch": "@@ -6,7 +6,6 @@ use rustc_driver::{self, driver, target_features, Compilation};\n use rustc_driver::driver::phase_2_configure_and_expand;\n use rustc_metadata::cstore::CStore;\n use rustc_metadata::dynamic_lib::DynamicLibrary;\n-use rustc_resolve::MakeGlobMap;\n use rustc::hir;\n use rustc::hir::intravisit;\n use rustc::session::{self, CompileIncomplete, config};\n@@ -100,7 +99,6 @@ pub fn run(mut options: Options) -> isize {\n                 None,\n                 \"rustdoc-test\",\n                 None,\n-                MakeGlobMap::No,\n                 |_| Ok(()),\n             ).expect(\"phase_2_configure_and_expand aborted in rustdoc!\")\n         };"}]}