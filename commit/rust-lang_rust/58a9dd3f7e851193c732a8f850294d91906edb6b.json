{"sha": "58a9dd3f7e851193c732a8f850294d91906edb6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YTlkZDNmN2U4NTExOTNjNzMyYThmODUwMjk0ZDkxOTA2ZWRiNmI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-02-21T20:12:35Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-02-21T20:12:35Z"}, "message": "Add missing urls and examples into Barrier structs", "tree": {"sha": "1b724b89cd9b1f429d57f3ef220eceed62188353", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b724b89cd9b1f429d57f3ef220eceed62188353"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58a9dd3f7e851193c732a8f850294d91906edb6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58a9dd3f7e851193c732a8f850294d91906edb6b", "html_url": "https://github.com/rust-lang/rust/commit/58a9dd3f7e851193c732a8f850294d91906edb6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58a9dd3f7e851193c732a8f850294d91906edb6b/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a1ce4020c480e455ec902e3616843a3dd5fe489", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a1ce4020c480e455ec902e3616843a3dd5fe489", "html_url": "https://github.com/rust-lang/rust/commit/8a1ce4020c480e455ec902e3616843a3dd5fe489"}], "stats": {"total": 76, "additions": 69, "deletions": 7}, "files": [{"sha": "f15e7ff891684ceee5c212d101666874614de53a", "filename": "src/libstd/sync/barrier.rs", "status": "modified", "additions": 69, "deletions": 7, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/58a9dd3f7e851193c732a8f850294d91906edb6b/src%2Flibstd%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a9dd3f7e851193c732a8f850294d91906edb6b/src%2Flibstd%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fbarrier.rs?ref=58a9dd3f7e851193c732a8f850294d91906edb6b", "patch": "@@ -14,6 +14,8 @@ use sync::{Mutex, Condvar};\n /// A barrier enables multiple threads to synchronize the beginning\n /// of some computation.\n ///\n+/// # Examples\n+///\n /// ```\n /// use std::sync::{Arc, Barrier};\n /// use std::thread;\n@@ -50,8 +52,19 @@ struct BarrierState {\n \n /// A result returned from wait.\n ///\n-/// Currently this opaque structure only has one method, `.is_leader()`. Only\n+/// Currently this opaque structure only has one method, [`.is_leader()`]. Only\n /// one thread will receive a result that will return `true` from this function.\n+///\n+/// [`.is_leader()`]: #method.is_leader\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::sync::Barrier;\n+///\n+/// let barrier = Barrier::new(1);\n+/// let barrier_wait_result = barrier.wait();\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct BarrierWaitResult(bool);\n \n@@ -65,8 +78,18 @@ impl fmt::Debug for Barrier {\n impl Barrier {\n     /// Creates a new barrier that can block a given number of threads.\n     ///\n-    /// A barrier will block `n`-1 threads which call `wait` and then wake up\n-    /// all threads at once when the `n`th thread calls `wait`.\n+    /// A barrier will block `n`-1 threads which call [`wait`] and then wake up\n+    /// all threads at once when the `n`th thread calls [`wait`].\n+    ///\n+    /// [`wait`]: #method.wait\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::Barrier;\n+    ///\n+    /// let barrier = Barrier::new(10);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(n: usize) -> Barrier {\n         Barrier {\n@@ -84,10 +107,37 @@ impl Barrier {\n     /// Barriers are re-usable after all threads have rendezvoused once, and can\n     /// be used continuously.\n     ///\n-    /// A single (arbitrary) thread will receive a `BarrierWaitResult` that\n-    /// returns `true` from `is_leader` when returning from this function, and\n+    /// A single (arbitrary) thread will receive a [`BarrierWaitResult`] that\n+    /// returns `true` from [`is_leader`] when returning from this function, and\n     /// all other threads will receive a result that will return `false` from\n-    /// `is_leader`\n+    /// [`is_leader`].\n+    ///\n+    /// [`BarrierWaitResult`]: struct.BarrierWaitResult.html\n+    /// [`is_leader`]: struct.BarrierWaitResult.html#method.is_leader\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::{Arc, Barrier};\n+    /// use std::thread;\n+    ///\n+    /// let mut handles = Vec::with_capacity(10);\n+    /// let barrier = Arc::new(Barrier::new(10));\n+    /// for _ in 0..10 {\n+    ///     let c = barrier.clone();\n+    ///     // The same messages will be printed together.\n+    ///     // You will NOT see any interleaving.\n+    ///     handles.push(thread::spawn(move|| {\n+    ///         println!(\"before wait\");\n+    ///         c.wait();\n+    ///         println!(\"after wait\");\n+    ///     }));\n+    /// }\n+    /// // Wait for other threads to finish.\n+    /// for handle in handles {\n+    ///     handle.join().unwrap();\n+    /// }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn wait(&self) -> BarrierWaitResult {\n         let mut lock = self.lock.lock().unwrap();\n@@ -120,10 +170,22 @@ impl fmt::Debug for BarrierWaitResult {\n }\n \n impl BarrierWaitResult {\n-    /// Returns whether this thread from `wait` is the \"leader thread\".\n+    /// Returns whether this thread from [`wait`] is the \"leader thread\".\n     ///\n     /// Only one thread will have `true` returned from their result, all other\n     /// threads will have `false` returned.\n+    ///\n+    /// [`wait`]: struct.Barrier.html#method.wait\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::Barrier;\n+    ///\n+    /// let barrier = Barrier::new(1);\n+    /// let barrier_wait_result = barrier.wait();\n+    /// println!(\"{:?}\", barrier_wait_result.is_leader());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_leader(&self) -> bool { self.0 }\n }"}]}