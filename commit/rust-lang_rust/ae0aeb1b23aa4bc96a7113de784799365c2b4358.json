{"sha": "ae0aeb1b23aa4bc96a7113de784799365c2b4358", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMGFlYjFiMjNhYTRiYzk2YTcxMTNkZTc4NDc5OTM2NWMyYjQzNTg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-25T21:11:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-25T21:11:33Z"}, "message": "Merge #3307\n\n3307: Semantic Ranges r=matklad a=kjeremy\n\n\n\nCo-authored-by: Jeremy Kolb <kjeremy@gmail.com>\nCo-authored-by: kjeremy <kjeremy@gmail.com>", "tree": {"sha": "4bbcd2d9eb4ac67cf50ba12918c87a41fb5a9624", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bbcd2d9eb4ac67cf50ba12918c87a41fb5a9624"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae0aeb1b23aa4bc96a7113de784799365c2b4358", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeVY2FCRBK7hj4Ov3rIwAAdHIIADv+mfcipILorbKZPYLd1Cw1\nEmfNQkwsVYLqmtLNvLikRj+hUjmEuo3Uszc7jJjY94LdYeJpFVT72tHJDA8Iw/Io\nkRCgmT+UYVHTpcvwq9joZs+vACVPaZMik2OswquXbpBv8Nc18gjliyVnm5Ek5jEr\nphfads9j9TllJGGcVWzrVeQeWqBiQ9rer26BfW7hjBpSfVfxcObWQmgYnbVJzM10\nzPB+ZY/9s76FLQOB94l9+gNAaa1nZ5oc1ywmXtA8HNKWemb6dyA+jRApfjfm1saZ\nKufjE9rIviIARljnESQLV7b7DTkza4NKHbfCfnWm5vX/HacQpzP4m2iWS4I2S5g=\n=9QLk\n-----END PGP SIGNATURE-----\n", "payload": "tree 4bbcd2d9eb4ac67cf50ba12918c87a41fb5a9624\nparent d3040c0deba8266044029a6479a1c12c28e72750\nparent fa355d6339d7b5ccfd4b1a96f035a4366e8152fe\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1582665093 +0000\ncommitter GitHub <noreply@github.com> 1582665093 +0000\n\nMerge #3307\n\n3307: Semantic Ranges r=matklad a=kjeremy\n\n\n\nCo-authored-by: Jeremy Kolb <kjeremy@gmail.com>\nCo-authored-by: kjeremy <kjeremy@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae0aeb1b23aa4bc96a7113de784799365c2b4358", "html_url": "https://github.com/rust-lang/rust/commit/ae0aeb1b23aa4bc96a7113de784799365c2b4358", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae0aeb1b23aa4bc96a7113de784799365c2b4358/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3040c0deba8266044029a6479a1c12c28e72750", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3040c0deba8266044029a6479a1c12c28e72750", "html_url": "https://github.com/rust-lang/rust/commit/d3040c0deba8266044029a6479a1c12c28e72750"}, {"sha": "fa355d6339d7b5ccfd4b1a96f035a4366e8152fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa355d6339d7b5ccfd4b1a96f035a4366e8152fe", "html_url": "https://github.com/rust-lang/rust/commit/fa355d6339d7b5ccfd4b1a96f035a4366e8152fe"}], "stats": {"total": 172, "additions": 131, "deletions": 41}, "files": [{"sha": "d2287066942e3c40a8d98184e9797ef74bc6db43", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ae0aeb1b23aa4bc96a7113de784799365c2b4358/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae0aeb1b23aa4bc96a7113de784799365c2b4358/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=ae0aeb1b23aa4bc96a7113de784799365c2b4358", "patch": "@@ -425,9 +425,14 @@ impl Analysis {\n         self.with_db(|db| runnables::runnables(db, file_id))\n     }\n \n-    /// Computes syntax highlighting for the given file.\n+    /// Computes syntax highlighting for the given file\n     pub fn highlight(&self, file_id: FileId) -> Cancelable<Vec<HighlightedRange>> {\n-        self.with_db(|db| syntax_highlighting::highlight(db, file_id))\n+        self.with_db(|db| syntax_highlighting::highlight(db, file_id, None))\n+    }\n+\n+    /// Computes syntax highlighting for the given file range.\n+    pub fn highlight_range(&self, frange: FileRange) -> Cancelable<Vec<HighlightedRange>> {\n+        self.with_db(|db| syntax_highlighting::highlight(db, frange.file_id, Some(frange.range)))\n     }\n \n     /// Computes syntax highlighting for the given file."}, {"sha": "9bc3ad44894205eebc863a5ccf383bc24fe3784c", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 85, "deletions": 26, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/ae0aeb1b23aa4bc96a7113de784799365c2b4358/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae0aeb1b23aa4bc96a7113de784799365c2b4358/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=ae0aeb1b23aa4bc96a7113de784799365c2b4358", "patch": "@@ -5,8 +5,8 @@ use ra_db::SourceDatabase;\n use ra_ide_db::{defs::NameDefinition, RootDatabase};\n use ra_prof::profile;\n use ra_syntax::{\n-    ast, AstNode, Direction, SyntaxElement, SyntaxKind, SyntaxKind::*, SyntaxToken, TextRange,\n-    WalkEvent, T,\n+    ast, AstNode, Direction, NodeOrToken, SyntaxElement, SyntaxKind, SyntaxKind::*, SyntaxToken,\n+    TextRange, WalkEvent, T,\n };\n use rustc_hash::FxHashMap;\n \n@@ -67,8 +67,13 @@ fn is_control_keyword(kind: SyntaxKind) -> bool {\n     }\n }\n \n-pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRange> {\n+pub(crate) fn highlight(\n+    db: &RootDatabase,\n+    file_id: FileId,\n+    range: Option<TextRange>,\n+) -> Vec<HighlightedRange> {\n     let _p = profile(\"highlight\");\n+\n     let parse = db.parse(file_id);\n     let root = parse.tree().syntax().clone();\n \n@@ -79,22 +84,56 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n \n     let mut in_macro_call = None;\n \n+    // Determine the root based on the given range.\n+    let (root, highlight_range) = if let Some(range) = range {\n+        let root = match root.covering_element(range) {\n+            NodeOrToken::Node(node) => node,\n+            NodeOrToken::Token(token) => token.parent(),\n+        };\n+        (root, range)\n+    } else {\n+        (root.clone(), root.text_range())\n+    };\n+\n     for event in root.preorder_with_tokens() {\n         match event {\n-            WalkEvent::Enter(node) => match node.kind() {\n-                MACRO_CALL => {\n-                    in_macro_call = Some(node.clone());\n-                    if let Some(range) = highlight_macro(InFile::new(file_id.into(), node)) {\n-                        res.push(HighlightedRange { range, tag: tags::MACRO, binding_hash: None });\n-                    }\n+            WalkEvent::Enter(node) => {\n+                if node.text_range().intersection(&highlight_range).is_none() {\n+                    continue;\n                 }\n-                _ if in_macro_call.is_some() => {\n-                    if let Some(token) = node.as_token() {\n-                        if let Some((tag, binding_hash)) = highlight_token_tree(\n+\n+                match node.kind() {\n+                    MACRO_CALL => {\n+                        in_macro_call = Some(node.clone());\n+                        if let Some(range) = highlight_macro(InFile::new(file_id.into(), node)) {\n+                            res.push(HighlightedRange {\n+                                range,\n+                                tag: tags::MACRO,\n+                                binding_hash: None,\n+                            });\n+                        }\n+                    }\n+                    _ if in_macro_call.is_some() => {\n+                        if let Some(token) = node.as_token() {\n+                            if let Some((tag, binding_hash)) = highlight_token_tree(\n+                                &mut sb,\n+                                &analyzer,\n+                                &mut bindings_shadow_count,\n+                                InFile::new(file_id.into(), token.clone()),\n+                            ) {\n+                                res.push(HighlightedRange {\n+                                    range: node.text_range(),\n+                                    tag,\n+                                    binding_hash,\n+                                });\n+                            }\n+                        }\n+                    }\n+                    _ => {\n+                        if let Some((tag, binding_hash)) = highlight_node(\n                             &mut sb,\n-                            &analyzer,\n                             &mut bindings_shadow_count,\n-                            InFile::new(file_id.into(), token.clone()),\n+                            InFile::new(file_id.into(), node.clone()),\n                         ) {\n                             res.push(HighlightedRange {\n                                 range: node.text_range(),\n@@ -104,17 +143,12 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                         }\n                     }\n                 }\n-                _ => {\n-                    if let Some((tag, binding_hash)) = highlight_node(\n-                        &mut sb,\n-                        &mut bindings_shadow_count,\n-                        InFile::new(file_id.into(), node.clone()),\n-                    ) {\n-                        res.push(HighlightedRange { range: node.text_range(), tag, binding_hash });\n-                    }\n-                }\n-            },\n+            }\n             WalkEvent::Leave(node) => {\n+                if node.text_range().intersection(&highlight_range).is_none() {\n+                    continue;\n+                }\n+\n                 if let Some(m) = in_macro_call.as_ref() {\n                     if *m == node {\n                         in_macro_call = None;\n@@ -265,7 +299,7 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n         )\n     }\n \n-    let mut ranges = highlight(db, file_id);\n+    let mut ranges = highlight(db, file_id, None);\n     ranges.sort_by_key(|it| it.range.start());\n     // quick non-optimal heuristic to intersect token ranges and highlighted ranges\n     let mut frontier = 0;\n@@ -374,7 +408,10 @@ mod tests {\n \n     use test_utils::{assert_eq_text, project_dir, read_text};\n \n-    use crate::mock_analysis::{single_file, MockAnalysis};\n+    use crate::{\n+        mock_analysis::{single_file, MockAnalysis},\n+        FileRange, TextRange,\n+    };\n \n     #[test]\n     fn test_highlighting() {\n@@ -475,4 +512,26 @@ fn bar() {\n         let _ = host.analysis().highlight(file_id).unwrap();\n         // eprintln!(\"elapsed: {:?}\", t.elapsed());\n     }\n+\n+    #[test]\n+    fn test_ranges() {\n+        let (analysis, file_id) = single_file(\n+            r#\"\n+            #[derive(Clone, Debug)]\n+            struct Foo {\n+                pub x: i32,\n+                pub y: i32,\n+            }\"#,\n+        );\n+\n+        // The \"x\"\n+        let highlights = &analysis\n+            .highlight_range(FileRange {\n+                file_id,\n+                range: TextRange::offset_len(82.into(), 1.into()),\n+            })\n+            .unwrap();\n+\n+        assert_eq!(highlights[0].tag, \"field\");\n+    }\n }"}, {"sha": "db82eeb1cae5d9674f1023eef7d568bdf392f8c3", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ae0aeb1b23aa4bc96a7113de784799365c2b4358/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae0aeb1b23aa4bc96a7113de784799365c2b4358/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=ae0aeb1b23aa4bc96a7113de784799365c2b4358", "patch": "@@ -7,9 +7,9 @@ use lsp_types::{\n     CompletionOptions, DocumentOnTypeFormattingOptions, FoldingRangeProviderCapability,\n     ImplementationProviderCapability, RenameOptions, RenameProviderCapability, SaveOptions,\n     SelectionRangeProviderCapability, SemanticTokensDocumentProvider, SemanticTokensLegend,\n-    SemanticTokensOptions, SemanticTokensServerCapabilities, ServerCapabilities,\n-    SignatureHelpOptions, TextDocumentSyncCapability, TextDocumentSyncKind,\n-    TextDocumentSyncOptions, TypeDefinitionProviderCapability, WorkDoneProgressOptions,\n+    SemanticTokensOptions, ServerCapabilities, SignatureHelpOptions, TextDocumentSyncCapability,\n+    TextDocumentSyncKind, TextDocumentSyncOptions, TypeDefinitionProviderCapability,\n+    WorkDoneProgressOptions,\n };\n \n pub fn server_capabilities() -> ServerCapabilities {\n@@ -60,7 +60,7 @@ pub fn server_capabilities() -> ServerCapabilities {\n         execute_command_provider: None,\n         workspace: None,\n         call_hierarchy_provider: Some(CallHierarchyServerCapability::Simple(true)),\n-        semantic_tokens_provider: Some(SemanticTokensServerCapabilities::SemanticTokensOptions(\n+        semantic_tokens_provider: Some(\n             SemanticTokensOptions {\n                 legend: SemanticTokensLegend {\n                     token_types: semantic_tokens::supported_token_types().iter().cloned().collect(),\n@@ -71,9 +71,11 @@ pub fn server_capabilities() -> ServerCapabilities {\n                 },\n \n                 document_provider: Some(SemanticTokensDocumentProvider::Bool(true)),\n-                ..SemanticTokensOptions::default()\n-            },\n-        )),\n+                range_provider: Some(true),\n+                work_done_progress_options: Default::default(),\n+            }\n+            .into(),\n+        ),\n         experimental: Default::default(),\n     }\n }"}, {"sha": "2b25f54436caca00c56f69667c3a2a2938a3d7d3", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ae0aeb1b23aa4bc96a7113de784799365c2b4358/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae0aeb1b23aa4bc96a7113de784799365c2b4358/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=ae0aeb1b23aa4bc96a7113de784799365c2b4358", "patch": "@@ -527,8 +527,9 @@ fn on_request(\n         .on::<req::CallHierarchyPrepare>(handlers::handle_call_hierarchy_prepare)?\n         .on::<req::CallHierarchyIncomingCalls>(handlers::handle_call_hierarchy_incoming)?\n         .on::<req::CallHierarchyOutgoingCalls>(handlers::handle_call_hierarchy_outgoing)?\n-        .on::<req::Ssr>(handlers::handle_ssr)?\n         .on::<req::SemanticTokensRequest>(handlers::handle_semantic_tokens)?\n+        .on::<req::SemanticTokensRangeRequest>(handlers::handle_semantic_tokens_range)?\n+        .on::<req::Ssr>(handlers::handle_ssr)?\n         .finish();\n     Ok(())\n }"}, {"sha": "267edd578a3fe428039b15990db7c1c6e51a1952", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ae0aeb1b23aa4bc96a7113de784799365c2b4358/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae0aeb1b23aa4bc96a7113de784799365c2b4358/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=ae0aeb1b23aa4bc96a7113de784799365c2b4358", "patch": "@@ -17,8 +17,8 @@ use lsp_types::{\n     Diagnostic, DocumentFormattingParams, DocumentHighlight, DocumentSymbol, FoldingRange,\n     FoldingRangeParams, Hover, HoverContents, Location, MarkupContent, MarkupKind, Position,\n     PrepareRenameResponse, Range, RenameParams, SemanticTokenModifier, SemanticTokenType,\n-    SemanticTokens, SemanticTokensParams, SemanticTokensResult, SymbolInformation,\n-    TextDocumentIdentifier, TextEdit, WorkspaceEdit,\n+    SemanticTokens, SemanticTokensParams, SemanticTokensRangeParams, SemanticTokensRangeResult,\n+    SemanticTokensResult, SymbolInformation, TextDocumentIdentifier, TextEdit, WorkspaceEdit,\n };\n use ra_ide::{\n     AssistId, FileId, FilePosition, FileRange, Query, RangeInfo, Runnable, RunnableKind,\n@@ -1092,3 +1092,25 @@ pub fn handle_semantic_tokens(\n \n     Ok(Some(tokens.into()))\n }\n+\n+pub fn handle_semantic_tokens_range(\n+    world: WorldSnapshot,\n+    params: SemanticTokensRangeParams,\n+) -> Result<Option<SemanticTokensRangeResult>> {\n+    let _p = profile(\"handle_semantic_tokens_range\");\n+\n+    let frange = (&params.text_document, params.range).try_conv_with(&world)?;\n+    let line_index = world.analysis().file_line_index(frange.file_id)?;\n+\n+    let mut builder = SemanticTokensBuilder::default();\n+\n+    for h in world.analysis().highlight_range(frange)?.into_iter() {\n+        let type_and_modifiers: (SemanticTokenType, Vec<SemanticTokenModifier>) = h.tag.conv();\n+        let (token_type, token_modifiers) = type_and_modifiers.conv();\n+        builder.push(h.range.conv_with(&line_index), token_type, token_modifiers);\n+    }\n+\n+    let tokens = SemanticTokens { data: builder.build(), ..Default::default() };\n+\n+    Ok(Some(tokens.into()))\n+}"}, {"sha": "642ac41ac4012fd4461316f2f431b526126965f3", "filename": "crates/rust-analyzer/src/req.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ae0aeb1b23aa4bc96a7113de784799365c2b4358/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae0aeb1b23aa4bc96a7113de784799365c2b4358/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freq.rs?ref=ae0aeb1b23aa4bc96a7113de784799365c2b4358", "patch": "@@ -12,9 +12,10 @@ pub use lsp_types::{\n     DocumentSymbolResponse, FileSystemWatcher, Hover, InitializeResult, MessageType,\n     PartialResultParams, ProgressParams, ProgressParamsValue, ProgressToken,\n     PublishDiagnosticsParams, ReferenceParams, Registration, RegistrationParams, SelectionRange,\n-    SelectionRangeParams, SemanticTokensParams, SemanticTokensResult, ServerCapabilities,\n-    ShowMessageParams, SignatureHelp, SymbolKind, TextDocumentEdit, TextDocumentPositionParams,\n-    TextEdit, WorkDoneProgressParams, WorkspaceEdit, WorkspaceSymbolParams,\n+    SelectionRangeParams, SemanticTokensParams, SemanticTokensRangeParams,\n+    SemanticTokensRangeResult, SemanticTokensResult, ServerCapabilities, ShowMessageParams,\n+    SignatureHelp, SymbolKind, TextDocumentEdit, TextDocumentPositionParams, TextEdit,\n+    WorkDoneProgressParams, WorkspaceEdit, WorkspaceSymbolParams,\n };\n \n pub enum AnalyzerStatus {}"}]}