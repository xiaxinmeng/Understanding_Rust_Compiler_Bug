{"sha": "c0ae62ee955712c96dec17170d4d63fd2b34f504", "node_id": "C_kwDOAAsO6NoAKGMwYWU2MmVlOTU1NzEyYzk2ZGVjMTcxNzBkNGQ2M2ZkMmIzNGY1MDQ", "commit": {"author": {"name": "Ben Reeves", "email": "benwolverine2019@gmail.com", "date": "2022-11-06T06:07:06Z"}, "committer": {"name": "Ben Reeves", "email": "benwolverine2019@gmail.com", "date": "2022-11-10T18:37:07Z"}, "message": "Require `~const` qualifier on trait bounds in specializing impls if present in base impl.", "tree": {"sha": "2951fc31590a664f32b8dd4fd1995b56703eced7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2951fc31590a664f32b8dd4fd1995b56703eced7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0ae62ee955712c96dec17170d4d63fd2b34f504", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0ae62ee955712c96dec17170d4d63fd2b34f504", "html_url": "https://github.com/rust-lang/rust/commit/c0ae62ee955712c96dec17170d4d63fd2b34f504", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0ae62ee955712c96dec17170d4d63fd2b34f504/comments", "author": {"login": "BGR360", "id": 13339928, "node_id": "MDQ6VXNlcjEzMzM5OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/13339928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BGR360", "html_url": "https://github.com/BGR360", "followers_url": "https://api.github.com/users/BGR360/followers", "following_url": "https://api.github.com/users/BGR360/following{/other_user}", "gists_url": "https://api.github.com/users/BGR360/gists{/gist_id}", "starred_url": "https://api.github.com/users/BGR360/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BGR360/subscriptions", "organizations_url": "https://api.github.com/users/BGR360/orgs", "repos_url": "https://api.github.com/users/BGR360/repos", "events_url": "https://api.github.com/users/BGR360/events{/privacy}", "received_events_url": "https://api.github.com/users/BGR360/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BGR360", "id": 13339928, "node_id": "MDQ6VXNlcjEzMzM5OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/13339928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BGR360", "html_url": "https://github.com/BGR360", "followers_url": "https://api.github.com/users/BGR360/followers", "following_url": "https://api.github.com/users/BGR360/following{/other_user}", "gists_url": "https://api.github.com/users/BGR360/gists{/gist_id}", "starred_url": "https://api.github.com/users/BGR360/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BGR360/subscriptions", "organizations_url": "https://api.github.com/users/BGR360/orgs", "repos_url": "https://api.github.com/users/BGR360/repos", "events_url": "https://api.github.com/users/BGR360/events{/privacy}", "received_events_url": "https://api.github.com/users/BGR360/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d492b9b000553f1407d9b75e15412d9df50314b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d492b9b000553f1407d9b75e15412d9df50314b2", "html_url": "https://github.com/rust-lang/rust/commit/d492b9b000553f1407d9b75e15412d9df50314b2"}], "stats": {"total": 161, "additions": 137, "deletions": 24}, "files": [{"sha": "f3cb558ef70938c8e81420651c7d5891f9a9086b", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 43, "deletions": 16, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c0ae62ee955712c96dec17170d4d63fd2b34f504/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ae62ee955712c96dec17170d4d63fd2b34f504/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=c0ae62ee955712c96dec17170d4d63fd2b34f504", "patch": "@@ -391,7 +391,7 @@ fn check_predicates<'tcx>(\n     );\n \n     for (predicate, span) in impl1_predicates {\n-        if !impl2_predicates.iter().any(|pred2| trait_predicates_eq(predicate, *pred2)) {\n+        if !impl2_predicates.iter().any(|pred2| trait_predicates_eq(tcx, predicate, *pred2, span)) {\n             check_specialization_on(tcx, predicate, span)\n         }\n     }\n@@ -400,8 +400,8 @@ fn check_predicates<'tcx>(\n /// Checks if some predicate on the specializing impl (`predicate1`) is the same\n /// as some predicate on the base impl (`predicate2`).\n ///\n-/// This is slightly more complicated than simple syntactic equivalence, since\n-/// we want to equate `T: Tr` with `T: ~const Tr` so this can work:\n+/// This basically just checks syntactic equivalence, but is a little more\n+/// forgiving since we want to equate `T: Tr` with `T: ~const Tr` so this can work:\n ///\n /// ```ignore (illustrative)\n /// #[rustc_specialization_trait]\n@@ -410,27 +410,54 @@ fn check_predicates<'tcx>(\n /// impl<T: Bound> Tr for T { }\n /// impl<T: ~const Bound + Specialize> const Tr for T { }\n /// ```\n+///\n+/// However, we *don't* want to allow the reverse, i.e., when the bound on the\n+/// specializing impl is not as const as the bound on the base impl:\n+///\n+/// ```ignore (illustrative)\n+/// impl<T: ~const Bound> const Tr for T { }\n+/// impl<T: Bound + Specialize> const Tr for T { } // should be T: ~const Bound\n+/// ```\n+///\n+/// So we make that check in this function and try to raise a helpful error message.\n fn trait_predicates_eq<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n     predicate1: ty::Predicate<'tcx>,\n     predicate2: ty::Predicate<'tcx>,\n+    span: Span,\n ) -> bool {\n-    let predicate_kind_without_constness = |kind: ty::PredicateKind<'tcx>| match kind {\n-        ty::PredicateKind::Trait(ty::TraitPredicate { trait_ref, constness: _, polarity }) => {\n-            ty::PredicateKind::Trait(ty::TraitPredicate {\n-                trait_ref,\n-                constness: ty::BoundConstness::NotConst,\n-                polarity,\n-            })\n+    let pred1_kind = predicate1.kind().no_bound_vars();\n+    let pred2_kind = predicate2.kind().no_bound_vars();\n+    let (trait_pred1, trait_pred2) = match (pred1_kind, pred2_kind) {\n+        (Some(ty::PredicateKind::Trait(pred1)), Some(ty::PredicateKind::Trait(pred2))) => {\n+            (pred1, pred2)\n         }\n-        _ => kind,\n+        // Just use plain syntactic equivalence if either of the predicates aren't\n+        // trait predicates or have bound vars.\n+        _ => return pred1_kind == pred2_kind,\n+    };\n+\n+    let predicates_equal_modulo_constness = {\n+        let pred1_unconsted =\n+            ty::TraitPredicate { constness: ty::BoundConstness::NotConst, ..trait_pred1 };\n+        let pred2_unconsted =\n+            ty::TraitPredicate { constness: ty::BoundConstness::NotConst, ..trait_pred2 };\n+        pred1_unconsted == pred2_unconsted\n     };\n \n-    // We rely on `check_constness` above to ensure that pred1 is const if pred2\n-    // is const.\n-    let pred1_kind_not_const = predicate1.kind().map_bound(predicate_kind_without_constness);\n-    let pred2_kind_not_const = predicate2.kind().map_bound(predicate_kind_without_constness);\n+    if !predicates_equal_modulo_constness {\n+        return false;\n+    }\n+\n+    // Check that the predicate on the specializing impl is at least as const as\n+    // the one on the base.\n+    if trait_pred2.constness == ty::BoundConstness::ConstIfConst\n+        && trait_pred1.constness == ty::BoundConstness::NotConst\n+    {\n+        tcx.sess.struct_span_err(span, \"missing `~const` qualifier\").emit();\n+    }\n \n-    pred1_kind_not_const == pred2_kind_not_const\n+    true\n }\n \n #[instrument(level = \"debug\", skip(tcx))]"}, {"sha": "3ac909924864decc4df351a38999152708498229", "filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/const-default-bound-non-const-specialized-bound.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c0ae62ee955712c96dec17170d4d63fd2b34f504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-bound-non-const-specialized-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ae62ee955712c96dec17170d4d63fd2b34f504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-bound-non-const-specialized-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-bound-non-const-specialized-bound.rs?ref=c0ae62ee955712c96dec17170d4d63fd2b34f504", "patch": "@@ -0,0 +1,46 @@\n+// Tests that trait bounds on specializing trait impls must be `~const` if the\n+// same bound is present on the default impl and is `~const` there.\n+\n+#![feature(const_trait_impl)]\n+#![feature(rustc_attrs)]\n+#![feature(min_specialization)]\n+\n+#[rustc_specialization_trait]\n+trait Specialize {}\n+\n+#[const_trait]\n+trait Foo {}\n+\n+#[const_trait]\n+trait Bar {}\n+\n+// bgr360: I was only able to exercise the code path that raises the\n+// \"missing ~const qualifier\" error by making this base impl non-const, even\n+// though that doesn't really make sense to do. As seen below, if the base impl\n+// is made const, rustc fails earlier with an overlapping impl failure.\n+impl<T> Bar for T\n+where\n+    T: ~const Foo,\n+{}\n+\n+impl<T> Bar for T\n+where\n+    T: Foo, //~ ERROR missing `~const` qualifier\n+    T: Specialize,\n+{}\n+\n+#[const_trait]\n+trait Baz {}\n+\n+impl<T> const Baz for T\n+where\n+    T: ~const Foo,\n+{}\n+\n+impl<T> const Baz for T //~ ERROR conflicting implementations of trait `Baz`\n+where\n+    T: Foo,\n+    T: Specialize,\n+{}\n+\n+fn main() {}"}, {"sha": "583c4cec77fb6ec2275b84c2595d7ece8177d4ff", "filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/const-default-bound-non-const-specialized-bound.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c0ae62ee955712c96dec17170d4d63fd2b34f504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-bound-non-const-specialized-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0ae62ee955712c96dec17170d4d63fd2b34f504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-bound-non-const-specialized-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-bound-non-const-specialized-bound.stderr?ref=c0ae62ee955712c96dec17170d4d63fd2b34f504", "patch": "@@ -0,0 +1,18 @@\n+error: missing `~const` qualifier\n+  --> $DIR/const-default-bound-non-const-specialized-bound.rs:28:8\n+   |\n+LL |     T: Foo,\n+   |        ^^^\n+\n+error[E0119]: conflicting implementations of trait `Baz`\n+  --> $DIR/const-default-bound-non-const-specialized-bound.rs:40:1\n+   |\n+LL | impl<T> const Baz for T\n+   | ----------------------- first implementation here\n+...\n+LL | impl<T> const Baz for T\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "a3bb9b3f93edaee333821435da563aa43cfba147", "filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/const-default-impl-non-const-specialized-impl.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c0ae62ee955712c96dec17170d4d63fd2b34f504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-impl-non-const-specialized-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ae62ee955712c96dec17170d4d63fd2b34f504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-impl-non-const-specialized-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-impl-non-const-specialized-impl.rs?ref=c0ae62ee955712c96dec17170d4d63fd2b34f504", "patch": "@@ -1,5 +1,4 @@\n-// Tests that a const default trait impl cannot be specialized by a non-const\n-// trait impl.\n+// Tests that specializing trait impls must be at least as const as the default impl.\n \n #![feature(const_trait_impl)]\n #![feature(min_specialization)]", "previous_filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/const-default-non-const-specialized.rs"}, {"sha": "24766804708a388c5ec7da2a426cbd39295738b5", "filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/const-default-impl-non-const-specialized-impl.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0ae62ee955712c96dec17170d4d63fd2b34f504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-impl-non-const-specialized-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0ae62ee955712c96dec17170d4d63fd2b34f504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-impl-non-const-specialized-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-impl-non-const-specialized-impl.stderr?ref=c0ae62ee955712c96dec17170d4d63fd2b34f504", "patch": "@@ -1,5 +1,5 @@\n error: cannot specialize on const impl with non-const impl\n-  --> $DIR/const-default-non-const-specialized.rs:20:1\n+  --> $DIR/const-default-impl-non-const-specialized-impl.rs:19:1\n    |\n LL | impl Value for FortyTwo {\n    | ^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/const-default-non-const-specialized.stderr"}, {"sha": "1e6b1c6513b39a5699e39e39bd5ea6a6c73a3b89", "filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/issue-95187-same-trait-bound-different-constness.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c0ae62ee955712c96dec17170d4d63fd2b34f504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95187-same-trait-bound-different-constness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ae62ee955712c96dec17170d4d63fd2b34f504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95187-same-trait-bound-different-constness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95187-same-trait-bound-different-constness.rs?ref=c0ae62ee955712c96dec17170d4d63fd2b34f504", "patch": "@@ -1,5 +1,6 @@\n-// Tests that `T: Foo` and `T: ~const Foo` are treated as equivalent for the\n-// purposes of min_specialization.\n+// Tests that `T: ~const Foo` in a specializing impl is treated as equivalent to\n+// `T: Foo` in the default impl for the purposes of specialization (i.e., it\n+// does not think that the user is attempting to specialize on trait `Foo`).\n \n // check-pass\n \n@@ -27,4 +28,18 @@ where\n     T: Specialize,\n {}\n \n+#[const_trait]\n+trait Baz {}\n+\n+impl<T> const Baz for T\n+where\n+    T: Foo,\n+{}\n+\n+impl<T> const Baz for T\n+where\n+    T: ~const Foo,\n+    T: Specialize,\n+{}\n+\n fn main() {}"}, {"sha": "9ab170f092006a05799cbca6298c1262b7b5ac93", "filename": "src/test/ui/rfc-2632-const-trait-impl/specializing-constness.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0ae62ee955712c96dec17170d4d63fd2b34f504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecializing-constness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ae62ee955712c96dec17170d4d63fd2b34f504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecializing-constness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecializing-constness.rs?ref=c0ae62ee955712c96dec17170d4d63fd2b34f504", "patch": "@@ -17,7 +17,9 @@ impl<T: ~const Default> const A for T {\n     }\n }\n \n-impl<T: Default + Sup> A for T { //~ ERROR: cannot specialize\n+impl<T: Default + Sup> A for T {\n+//~^ ERROR: cannot specialize\n+//~| ERROR: missing `~const` qualifier\n     fn a() -> u32 {\n         3\n     }"}, {"sha": "281ba82d64429e38a4b22d2b24cf3c9b138d679b", "filename": "src/test/ui/rfc-2632-const-trait-impl/specializing-constness.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c0ae62ee955712c96dec17170d4d63fd2b34f504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecializing-constness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0ae62ee955712c96dec17170d4d63fd2b34f504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecializing-constness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecializing-constness.stderr?ref=c0ae62ee955712c96dec17170d4d63fd2b34f504", "patch": "@@ -1,8 +1,14 @@\n-error: cannot specialize on trait `Default`\n+error: cannot specialize on const impl with non-const impl\n+  --> $DIR/specializing-constness.rs:20:1\n+   |\n+LL | impl<T: Default + Sup> A for T {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing `~const` qualifier\n   --> $DIR/specializing-constness.rs:20:9\n    |\n LL | impl<T: Default + Sup> A for T {\n    |         ^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}]}