{"sha": "c64db0078a425c71e131432c41d9c6fc6f961b0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NGRiMDA3OGE0MjVjNzFlMTMxNDMyYzQxZDljNmZjNmY5NjFiMGU=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-07-21T14:50:06Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-07-22T11:53:55Z"}, "message": "Fallback to general error handling in ICE cases.", "tree": {"sha": "ee780834403121447a6104fa7f186d5f18ed81c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee780834403121447a6104fa7f186d5f18ed81c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c64db0078a425c71e131432c41d9c6fc6f961b0e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAltUcFMACgkQAXYLT59T\n8VQQsBAAhhFkFsywAppyT5AFVe1YpqLiwk+ZUsico57G5EhJx55qaoArpMH5GROL\nT6NMUpVjlbcpp2KZxM4uHtxFBhzQftBIpre+5XiSTa0bmZNVTvihQDAYeXLhsdmd\n1J4Ew6jO2aAItygAUdDY6twwRVkx6qMVxMoo5dXwq3uHNa3is/s2/PpE2Y3eaTbv\nYUcmrYTCXAiBdYOROFBaoK/J1ElKrMsJImDAXMyO+qop84CiviCDng5750gITCjL\nrnlnj3rcHUdHeTW4emsvDALiZUn/F+8aw9cgkLNuAZhF8Ub2WmCmYpamJ9tcnyAI\n37yvlWIgfcj9WTv7JfrQZul3xUMlOHG5uUUrKq5wg+nEdasICpcDcmFlOcshgvhH\ntqcziZIFxPzx3Y9ShfGEpxiq8xD4Gq4YBQhaCbDoDpLgNhevIGxdGEpWUUM7kt2Q\nmyL51Gf0tXYBYP0vSvqNb084N9STG2A/DzLqmVDNcmvxE+OlP8SiUeOZKfC37B8y\nZsRg4NwW2NzmY+fbj+2emrNY6CeunoYlTLS3r0GQ6NO3/53TjQo3GBiRPChJCjjI\nfjlegGRHFU5OF0oc8Srzq/3jDxXLjrBUCmW01qEDC01DAiYudjEjfEyBPR4uZAAP\n6DoEGZvunGbHq11BMzVOIoyKxqPZLr8DZpUWSiMQmayuLRv1GIQ=\n=JAQS\n-----END PGP SIGNATURE-----", "payload": "tree ee780834403121447a6104fa7f186d5f18ed81c2\nparent b6dfa8cba398ec95e876ec9d3b2e35b35a30c180\nauthor David Wood <david@davidtw.co> 1532184606 +0100\ncommitter David Wood <david@davidtw.co> 1532260435 +0100\n\nFallback to general error handling in ICE cases.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c64db0078a425c71e131432c41d9c6fc6f961b0e", "html_url": "https://github.com/rust-lang/rust/commit/c64db0078a425c71e131432c41d9c6fc6f961b0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c64db0078a425c71e131432c41d9c6fc6f961b0e/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6dfa8cba398ec95e876ec9d3b2e35b35a30c180", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6dfa8cba398ec95e876ec9d3b2e35b35a30c180", "html_url": "https://github.com/rust-lang/rust/commit/b6dfa8cba398ec95e876ec9d3b2e35b35a30c180"}], "stats": {"total": 101, "additions": 60, "deletions": 41}, "files": [{"sha": "c89dc889b5e392e47e5cb21fdbf93d8b27240448", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c64db0078a425c71e131432c41d9c6fc6f961b0e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c64db0078a425c71e131432c41d9c6fc6f961b0e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=c64db0078a425c71e131432c41d9c6fc6f961b0e", "patch": "@@ -247,7 +247,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         match category {\n             ConstraintCategory::AssignmentToUpvar |\n             ConstraintCategory::CallArgumentToUpvar =>\n-                self.report_closure_error(mir, infcx, fr, outlived_fr, span),\n+                self.report_closure_error(mir, infcx, mir_def_id, fr, outlived_fr, category, span),\n             _ =>\n                 self.report_general_error(mir, infcx, mir_def_id, fr, outlived_fr, category, span),\n         }\n@@ -257,33 +257,44 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         &self,\n         mir: &Mir<'tcx>,\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n+        mir_def_id: DefId,\n         fr: RegionVid,\n         outlived_fr: RegionVid,\n+        category: &ConstraintCategory,\n         span: &Span,\n     ) {\n+        let fr_name_and_span  = self.get_var_name_and_span_for_region(\n+            infcx.tcx, mir, fr);\n+        let outlived_fr_name_and_span = self.get_var_name_and_span_for_region(\n+            infcx.tcx, mir,outlived_fr);\n+\n+        if fr_name_and_span.is_none() && outlived_fr_name_and_span.is_none() {\n+            return self.report_general_error(mir, infcx, mir_def_id, fr, outlived_fr, category,\n+                                             span);\n+        }\n+\n         let diag = &mut infcx.tcx.sess.struct_span_err(\n             *span, &format!(\"borrowed data escapes outside of closure\"),\n         );\n \n-        let (outlived_fr_name, outlived_fr_span) = self.get_var_name_and_span_for_region(\n-            infcx.tcx, mir, outlived_fr);\n-\n-        if let Some(name) = outlived_fr_name {\n-            diag.span_label(\n-                outlived_fr_span,\n-                format!(\"`{}` is declared here, outside of the closure body\", name),\n-            );\n+        if let Some((outlived_fr_name, outlived_fr_span)) = outlived_fr_name_and_span {\n+            if let Some(name) = outlived_fr_name {\n+                diag.span_label(\n+                    outlived_fr_span,\n+                    format!(\"`{}` is declared here, outside of the closure body\", name),\n+                );\n+            }\n         }\n \n-        let (fr_name, fr_span) = self.get_var_name_and_span_for_region(infcx.tcx, mir, fr);\n+        if let Some((fr_name, fr_span)) = fr_name_and_span {\n+            if let Some(name) = fr_name {\n+                diag.span_label(\n+                    fr_span,\n+                    format!(\"`{}` is a reference that is only valid in the closure body\", name),\n+                );\n \n-        if let Some(name) = fr_name {\n-            diag.span_label(\n-                fr_span,\n-                format!(\"`{}` is a reference that is only valid in the closure body\", name),\n-            );\n-\n-            diag.span_label(*span, format!(\"`{}` escapes the closure body here\", name));\n+                diag.span_label(*span, format!(\"`{}` escapes the closure body here\", name));\n+            }\n         }\n \n         diag.emit();"}, {"sha": "f1c3a7489ee8f1f2ead6a6f2c65473741b63f08b", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/var_name.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c64db0078a425c71e131432c41d9c6fc6f961b0e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c64db0078a425c71e131432c41d9c6fc6f961b0e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs?ref=c64db0078a425c71e131432c41d9c6fc6f961b0e", "patch": "@@ -22,7 +22,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         tcx: TyCtxt<'_, '_, 'tcx>,\n         mir: &Mir<'tcx>,\n         fr: RegionVid,\n-    ) -> (Option<Symbol>, Span) {\n+    ) -> Option<(Option<Symbol>, Span)> {\n         debug!(\"get_var_name_and_span_for_region(fr={:?})\", fr);\n         assert!(self.universal_regions.is_universal_region(fr));\n \n@@ -37,7 +37,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 self.get_argument_index_for_region(tcx, fr)\n                     .map(|index| self.get_argument_name_and_span_for_region(mir, index))\n             })\n-            .unwrap_or_else(|| span_bug!(mir.span, \"can't find var name for free region {:?}\", fr))\n     }\n \n     /// Search the upvars (if any) to find one that references fr. Return its index."}, {"sha": "b0fbcd3ad9f39e53d7c0a36c1b6b60b14f9ebcfc", "filename": "src/test/ui/borrowck/issue-7573.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c64db0078a425c71e131432c41d9c6fc6f961b0e/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c64db0078a425c71e131432c41d9c6fc6f961b0e/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.nll.stderr?ref=c64db0078a425c71e131432c41d9c6fc6f961b0e", "patch": "@@ -4,17 +4,17 @@ warning: not reporting region error due to nll\n LL |     let mut lines_to_use: Vec<&CrateId> = Vec::new();\n    |                               ^\n \n-error: unsatisfied lifetime constraints\n+error: borrowed data escapes outside of closure\n   --> $DIR/issue-7573.rs:32:9\n    |\n LL |     let mut lines_to_use: Vec<&CrateId> = Vec::new();\n-   |         ---------------- lifetime `'2` appears in the type of `lines_to_use`\n+   |         ---------------- `lines_to_use` is declared here, outside of the closure body\n LL |         //~^ NOTE cannot infer an appropriate lifetime\n LL |     let push_id = |installed_id: &CrateId| {\n-   |                                  - let's call the lifetime of this reference `'1`\n+   |                    ------------ `installed_id` is a reference that is only valid in the closure body\n ...\n LL |         lines_to_use.push(installed_id);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `installed_id` escapes the closure body here\n \n error: aborting due to previous error\n "}, {"sha": "e26b1956d5e819632e0fb6d090636b36837f6375", "filename": "src/test/ui/in-band-lifetimes/impl/dyn-trait.nll.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c64db0078a425c71e131432c41d9c6fc6f961b0e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c64db0078a425c71e131432c41d9c6fc6f961b0e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.nll.stderr?ref=c64db0078a425c71e131432c41d9c6fc6f961b0e", "patch": "@@ -4,11 +4,13 @@ warning: not reporting region error due to nll\n LL |     static_val(x); //~ ERROR cannot infer\n    |                ^\n \n-error: unsatisfied lifetime constraints\n+error: borrowed data escapes outside of closure\n   --> $DIR/dyn-trait.rs:32:5\n    |\n+LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n+   |                              - `x` is a reference that is only valid in the closure body\n LL |     static_val(x); //~ ERROR cannot infer\n-   |     ^^^^^^^^^^^^^ argument requires that `'a` must outlive `'static`\n+   |     ^^^^^^^^^^^^^ `x` escapes the closure body here\n \n error: aborting due to previous error\n "}, {"sha": "f9dda27da0985b36f5d022e4598a1ca6783a859a", "filename": "src/test/ui/issue-16683.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c64db0078a425c71e131432c41d9c6fc6f961b0e/src%2Ftest%2Fui%2Fissue-16683.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c64db0078a425c71e131432c41d9c6fc6f961b0e/src%2Ftest%2Fui%2Fissue-16683.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-16683.nll.stderr?ref=c64db0078a425c71e131432c41d9c6fc6f961b0e", "patch": "@@ -10,13 +10,13 @@ warning: not reporting region error due to nll\n LL |         self.a(); //~ ERROR cannot infer\n    |              ^\n \n-error: unsatisfied lifetime constraints\n+error: borrowed data escapes outside of closure\n   --> $DIR/issue-16683.rs:14:9\n    |\n LL |     fn b(&self) {\n-   |          - let's call the lifetime of this reference `'1`\n+   |          ----- `self` is a reference that is only valid in the closure body\n LL |         self.a(); //~ ERROR cannot infer\n-   |         ^^^^^^^^ argument requires that `'1` must outlive `'a`\n+   |         ^^^^^^^^ `self` escapes the closure body here\n \n error: aborting due to previous error\n "}, {"sha": "5775135aefc5feb472aaed348d862134190e0f28", "filename": "src/test/ui/issue-17758.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c64db0078a425c71e131432c41d9c6fc6f961b0e/src%2Ftest%2Fui%2Fissue-17758.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c64db0078a425c71e131432c41d9c6fc6f961b0e/src%2Ftest%2Fui%2Fissue-17758.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17758.nll.stderr?ref=c64db0078a425c71e131432c41d9c6fc6f961b0e", "patch": "@@ -10,13 +10,13 @@ warning: not reporting region error due to nll\n LL |         self.foo();\n    |              ^^^\n \n-error: unsatisfied lifetime constraints\n+error: borrowed data escapes outside of closure\n   --> $DIR/issue-17758.rs:17:9\n    |\n LL |     fn bar(&self) {\n-   |            - let's call the lifetime of this reference `'1`\n+   |            ----- `self` is a reference that is only valid in the closure body\n LL |         self.foo();\n-   |         ^^^^^^^^^^ argument requires that `'1` must outlive `'a`\n+   |         ^^^^^^^^^^ `self` escapes the closure body here\n \n error: aborting due to previous error\n "}, {"sha": "d51ba8201aaa62a168151c3ab24b0bf4b3393aeb", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c64db0078a425c71e131432c41d9c6fc6f961b0e/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c64db0078a425c71e131432c41d9c6fc6f961b0e/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=c64db0078a425c71e131432c41d9c6fc6f961b0e", "patch": "@@ -4,16 +4,16 @@ warning: not reporting region error due to nll\n LL |     foo(cell, |cell_a, cell_x| {\n    |     ^^^\n \n-error: unsatisfied lifetime constraints\n+error: borrowed data escapes outside of closure\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:33:20\n    |\n LL |     foo(cell, |cell_a, cell_x| {\n-   |                ------  ------ lifetime `'1` appears in this argument\n+   |                ------  ------ `cell_x` is a reference that is only valid in the closure body\n    |                |\n-   |                lifetime `'2` appears in this argument\n+   |                `cell_a` is declared here, outside of the closure body\n LL |         //~^ WARNING not reporting region error due to nll\n LL |         cell_a.set(cell_x.get()); // forces 'x: 'a, error in closure\n-   |                    ^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+   |                    ^^^^^^^^^^^^ `cell_x` escapes the closure body here\n \n note: No external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:31:15"}, {"sha": "3177cd7c28f647991730cc80908e060b638d12d8", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c64db0078a425c71e131432c41d9c6fc6f961b0e/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c64db0078a425c71e131432c41d9c6fc6f961b0e/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=c64db0078a425c71e131432c41d9c6fc6f961b0e", "patch": "@@ -23,16 +23,18 @@ LL | |     });\n    = note: number of external vids: 2\n    = note: where '_#1r: '_#0r\n \n-error: unsatisfied lifetime constraints\n+error: borrowed data escapes outside of closure\n   --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:45:5\n    |\n+LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+   |                     ------ `cell_a` is a reference that is only valid in the closure body\n LL | /     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n LL | |         //~^ ERROR\n LL | |\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get()) //~ WARNING not reporting region error due to nll\n LL | |     });\n-   | |______^ argument requires that `'a` must outlive `'static`\n+   | |______^ `cell_a` escapes the closure body here\n \n note: No external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:44:1"}, {"sha": "089c88abcdd4aee5ae8fed1eed5a8630597668ed", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c64db0078a425c71e131432c41d9c6fc6f961b0e/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c64db0078a425c71e131432c41d9c6fc6f961b0e/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=c64db0078a425c71e131432c41d9c6fc6f961b0e", "patch": "@@ -23,16 +23,18 @@ LL | |     });\n    = note: number of external vids: 3\n    = note: where '_#1r: '_#0r\n \n-error: unsatisfied lifetime constraints\n+error: borrowed data escapes outside of closure\n   --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:48:5\n    |\n+LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+   |                     ------ `cell_a` is a reference that is only valid in the closure body\n LL | /     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n LL | |         //~^ ERROR\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n LL | |         //~^ WARNING not reporting region error due to nll\n LL | |     });\n-   | |______^ argument requires that `'a` must outlive `'static`\n+   | |______^ `cell_a` escapes the closure body here\n \n note: No external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:47:1"}, {"sha": "8acf2ef51ecd2ef65b4c0ef822f3ba0085251fcd", "filename": "src/test/ui/nll/issue-50716.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c64db0078a425c71e131432c41d9c6fc6f961b0e/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c64db0078a425c71e131432c41d9c6fc6f961b0e/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr?ref=c64db0078a425c71e131432c41d9c6fc6f961b0e", "patch": "@@ -1,8 +1,11 @@\n-error: unsatisfied lifetime constraints\n+error: borrowed data escapes outside of closure\n   --> $DIR/issue-50716.rs:25:14\n    |\n+LL | fn foo<'a, T: 'static>(s: Box<<&'a T as A>::X>)\n+   |                        - `s` is a reference that is only valid in the closure body\n+...\n LL |     let _x = *s; //~ ERROR\n-   |              ^^ assignment requires that `'a` must outlive `'static`\n+   |              ^^ `s` escapes the closure body here\n \n error: aborting due to previous error\n "}]}