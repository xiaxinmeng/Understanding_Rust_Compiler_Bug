{"sha": "7209b9cc49d6fc8484bf0dd5c88cb351a1cb3570", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMDliOWNjNDlkNmZjODQ4NGJmMGRkNWM4OGNiMzUxYTFjYjM1NzA=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-08-24T02:48:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-24T02:48:53Z"}, "message": "Rollup merge of #75856 - matthiaskrgr:more_clippy, r=Dylan-DPC\n\nmore tool clippy fixes\n\nr? @Dylan-DPC", "tree": {"sha": "c7a8d877b61ef9130c7b56ef25c412faba991f85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7a8d877b61ef9130c7b56ef25c412faba991f85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7209b9cc49d6fc8484bf0dd5c88cb351a1cb3570", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfQyqWCRBK7hj4Ov3rIwAAdHIIAFpVVQQMjEQA7L2XJBKXMbnm\nhaM5czopWnB7+SV82bmaiqff/9iX5V9slY5Yu/kTwqFt1ipxFJmx51Eeur8ZbCCN\nOJTvN/eXzPwUrXk1/ves7ShrT3j6N0EjSzI6WHcEaScJT3hT0y+RAKxEyav2gGj6\nBGer7mhN8etItb5zOU0J/0IjIBf0FlbEUXSUeKt5Ys4u2OnJ+3dp9M0UupR61A/g\nJlis8vylZaPl70tdEu2Ly+Z9SQmLFvMtcF5NNYkQVs3PJ7RNNT4kIHq3RHfOzxvK\nPBteiArjRKHoHMwb+joiAw1NAa3itSwgsJAkPj3gyCRU3GCPIWHqP5c2+QA+P9g=\n=83w+\n-----END PGP SIGNATURE-----\n", "payload": "tree c7a8d877b61ef9130c7b56ef25c412faba991f85\nparent 648ad7c57e3833d089b17c1f3e60152a3b9c3c47\nparent a72500145b28a5aa584dab9d19565597aae72892\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1598237333 +0900\ncommitter GitHub <noreply@github.com> 1598237333 +0900\n\nRollup merge of #75856 - matthiaskrgr:more_clippy, r=Dylan-DPC\n\nmore tool clippy fixes\n\nr? @Dylan-DPC\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7209b9cc49d6fc8484bf0dd5c88cb351a1cb3570", "html_url": "https://github.com/rust-lang/rust/commit/7209b9cc49d6fc8484bf0dd5c88cb351a1cb3570", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7209b9cc49d6fc8484bf0dd5c88cb351a1cb3570/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "648ad7c57e3833d089b17c1f3e60152a3b9c3c47", "url": "https://api.github.com/repos/rust-lang/rust/commits/648ad7c57e3833d089b17c1f3e60152a3b9c3c47", "html_url": "https://github.com/rust-lang/rust/commit/648ad7c57e3833d089b17c1f3e60152a3b9c3c47"}, {"sha": "a72500145b28a5aa584dab9d19565597aae72892", "url": "https://api.github.com/repos/rust-lang/rust/commits/a72500145b28a5aa584dab9d19565597aae72892", "html_url": "https://github.com/rust-lang/rust/commit/a72500145b28a5aa584dab9d19565597aae72892"}], "stats": {"total": 50, "additions": 23, "deletions": 27}, "files": [{"sha": "f7ff64036a1a96568982d9c5f88def07db5dbd76", "filename": "src/tools/expand-yaml-anchors/src/main.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7209b9cc49d6fc8484bf0dd5c88cb351a1cb3570/src%2Ftools%2Fexpand-yaml-anchors%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7209b9cc49d6fc8484bf0dd5c88cb351a1cb3570/src%2Ftools%2Fexpand-yaml-anchors%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fexpand-yaml-anchors%2Fsrc%2Fmain.rs?ref=7209b9cc49d6fc8484bf0dd5c88cb351a1cb3570", "patch": "@@ -48,8 +48,8 @@ impl App {\n         // Parse CLI arguments\n         let args = std::env::args().skip(1).collect::<Vec<_>>();\n         let (mode, base) = match args.iter().map(|s| s.as_str()).collect::<Vec<_>>().as_slice() {\n-            &[\"generate\", ref base] => (Mode::Generate, PathBuf::from(base)),\n-            &[\"check\", ref base] => (Mode::Check, PathBuf::from(base)),\n+            [\"generate\", ref base] => (Mode::Generate, PathBuf::from(base)),\n+            [\"check\", ref base] => (Mode::Check, PathBuf::from(base)),\n             _ => {\n                 eprintln!(\"usage: expand-yaml-anchors <source-dir> <dest-dir>\");\n                 std::process::exit(1);\n@@ -138,9 +138,7 @@ fn filter_document(document: Yaml) -> Yaml {\n                 .map(|(key, value)| (filter_document(key), filter_document(value)))\n                 .collect(),\n         ),\n-        Yaml::Array(vec) => {\n-            Yaml::Array(vec.into_iter().map(|item| filter_document(item)).collect())\n-        }\n+        Yaml::Array(vec) => Yaml::Array(vec.into_iter().map(filter_document).collect()),\n         other => other,\n     }\n }"}, {"sha": "b7ceba1e28262ff6a7f36e72e8a6cc5a1ce32fc6", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7209b9cc49d6fc8484bf0dd5c88cb351a1cb3570/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7209b9cc49d6fc8484bf0dd5c88cb351a1cb3570/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=7209b9cc49d6fc8484bf0dd5c88cb351a1cb3570", "patch": "@@ -172,10 +172,10 @@ fn check(cache: &mut Cache, root: &Path, file: &Path, errors: &mut bool) -> Opti\n         {\n             return;\n         }\n-        let mut parts = url.splitn(2, \"#\");\n+        let mut parts = url.splitn(2, '#');\n         let url = parts.next().unwrap();\n         let fragment = parts.next();\n-        let mut parts = url.splitn(2, \"?\");\n+        let mut parts = url.splitn(2, '?');\n         let url = parts.next().unwrap();\n \n         // Once we've plucked out the URL, parse it using our base url and\n@@ -258,7 +258,7 @@ fn check(cache: &mut Cache, root: &Path, file: &Path, errors: &mut bool) -> Opti\n                 }\n \n                 // These appear to be broken in mdbook right now?\n-                if fragment.starts_with(\"-\") {\n+                if fragment.starts_with('-') {\n                     return;\n                 }\n \n@@ -324,7 +324,7 @@ fn load_file(\n }\n \n fn maybe_redirect(source: &str) -> Option<String> {\n-    const REDIRECT: &'static str = \"<p>Redirecting to <a href=\";\n+    const REDIRECT: &str = \"<p>Redirecting to <a href=\";\n \n     let mut lines = source.lines();\n     let redirect_line = lines.nth(6)?;\n@@ -345,11 +345,11 @@ fn with_attrs_in_source<F: FnMut(&str, usize, &str)>(contents: &str, attr: &str,\n             // we can get away with using one pass.\n             let is_base = line[..j].ends_with(\"<base\");\n             line = rest;\n-            let pos_equals = match rest.find(\"=\") {\n+            let pos_equals = match rest.find('=') {\n                 Some(i) => i,\n                 None => continue,\n             };\n-            if rest[..pos_equals].trim_start_matches(\" \") != \"\" {\n+            if rest[..pos_equals].trim_start_matches(' ') != \"\" {\n                 continue;\n             }\n \n@@ -361,7 +361,7 @@ fn with_attrs_in_source<F: FnMut(&str, usize, &str)>(contents: &str, attr: &str,\n             };\n             let quote_delim = rest.as_bytes()[pos_quote] as char;\n \n-            if rest[..pos_quote].trim_start_matches(\" \") != \"\" {\n+            if rest[..pos_quote].trim_start_matches(' ') != \"\" {\n                 continue;\n             }\n             let rest = &rest[pos_quote + 1..];"}, {"sha": "82a5234ac5b240765fb38beb7e7179814c4366ed", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7209b9cc49d6fc8484bf0dd5c88cb351a1cb3570/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7209b9cc49d6fc8484bf0dd5c88cb351a1cb3570/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=7209b9cc49d6fc8484bf0dd5c88cb351a1cb3570", "patch": "@@ -47,9 +47,7 @@ fn check_error_code_explanation(\n     invalid_compile_fail_format\n }\n \n-fn check_if_error_code_is_test_in_explanation(f: &str, err_code: &String) -> bool {\n-    let mut can_be_ignored = false;\n-\n+fn check_if_error_code_is_test_in_explanation(f: &str, err_code: &str) -> bool {\n     for line in f.lines() {\n         let s = line.trim();\n         if s.starts_with(\"#### Note: this error code is no longer emitted by the compiler\") {\n@@ -58,13 +56,13 @@ fn check_if_error_code_is_test_in_explanation(f: &str, err_code: &String) -> boo\n         if s.starts_with(\"```\") {\n             if s.contains(\"compile_fail\") && s.contains(err_code) {\n                 return true;\n-            } else if s.contains(\"(\") {\n+            } else if s.contains('(') {\n                 // It's very likely that we can't actually make it fail compilation...\n-                can_be_ignored = true;\n+                return true;\n             }\n         }\n     }\n-    can_be_ignored\n+    false\n }\n \n macro_rules! some_or_continue {"}, {"sha": "218e9668df4ae60ce6ec08672aa6e2485f01344a", "filename": "src/tools/unicode-table-generator/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7209b9cc49d6fc8484bf0dd5c88cb351a1cb3570/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7209b9cc49d6fc8484bf0dd5c88cb351a1cb3570/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs?ref=7209b9cc49d6fc8484bf0dd5c88cb351a1cb3570", "patch": "@@ -315,7 +315,7 @@ fn version() -> String {\n fn fmt_list<V: std::fmt::Debug>(values: impl IntoIterator<Item = V>) -> String {\n     let pieces = values.into_iter().map(|b| format!(\"{:?}, \", b)).collect::<Vec<_>>();\n     let mut out = String::new();\n-    let mut line = format!(\"\\n    \");\n+    let mut line = String::from(\"\\n    \");\n     for piece in pieces {\n         if line.len() + piece.len() < 98 {\n             line.push_str(&piece);"}, {"sha": "42e7e5fb406051303305f3d059a422ed4898ef85", "filename": "src/tools/unicode-table-generator/src/raw_emitter.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7209b9cc49d6fc8484bf0dd5c88cb351a1cb3570/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7209b9cc49d6fc8484bf0dd5c88cb351a1cb3570/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs?ref=7209b9cc49d6fc8484bf0dd5c88cb351a1cb3570", "patch": "@@ -20,7 +20,7 @@ impl RawEmitter {\n         if self.file.is_empty() || self.file.ends_with(\"\\n\\n\") {\n             return;\n         }\n-        writeln!(&mut self.file, \"\").unwrap();\n+        writeln!(&mut self.file).unwrap();\n     }\n \n     fn emit_bitset(&mut self, ranges: &[Range<u32>]) {\n@@ -161,10 +161,10 @@ pub fn emit_codepoints(emitter: &mut RawEmitter, ranges: &[Range<u32>]) {\n \n     if bitset.bytes_used <= skiplist.bytes_used {\n         *emitter = bitset;\n-        emitter.desc = format!(\"bitset\");\n+        emitter.desc = String::from(\"bitset\");\n     } else {\n         *emitter = skiplist;\n-        emitter.desc = format!(\"skiplist\");\n+        emitter.desc = String::from(\"skiplist\");\n     }\n }\n \n@@ -289,7 +289,7 @@ impl Canonicalized {\n                 // Remove the now-canonicalized word from other mappings,\n                 // to ensure that we deprioritize them in the next iteration of\n                 // the while loop.\n-                for (_, mapped) in &mut mappings {\n+                for mapped in mappings.values_mut() {\n                     let mut i = 0;\n                     while i != mapped.len() {\n                         if mapped[i].0 == *from {\n@@ -309,7 +309,7 @@ impl Canonicalized {\n \n             // Remove the now-canonical word from other mappings, to ensure that\n             // we deprioritize them in the next iteration of the while loop.\n-            for (_, mapped) in &mut mappings {\n+            for mapped in mappings.values_mut() {\n                 let mut i = 0;\n                 while i != mapped.len() {\n                     if mapped[i].0 == to {"}, {"sha": "5d277e1c41f40df1abdb37c8316e51df44fc00dd", "filename": "src/tools/unstable-book-gen/src/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7209b9cc49d6fc8484bf0dd5c88cb351a1cb3570/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7209b9cc49d6fc8484bf0dd5c88cb351a1cb3570/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs?ref=7209b9cc49d6fc8484bf0dd5c88cb351a1cb3570", "patch": "@@ -94,9 +94,9 @@ fn copy_recursive(from: &Path, to: &Path) {\n }\n \n fn main() {\n-    let library_path_str = env::args_os().skip(1).next().expect(\"library path required\");\n-    let src_path_str = env::args_os().skip(2).next().expect(\"source path required\");\n-    let dest_path_str = env::args_os().skip(3).next().expect(\"destination path required\");\n+    let library_path_str = env::args_os().nth(1).expect(\"library path required\");\n+    let src_path_str = env::args_os().nth(2).expect(\"source path required\");\n+    let dest_path_str = env::args_os().nth(3).expect(\"destination path required\");\n     let library_path = Path::new(&library_path_str);\n     let src_path = Path::new(&src_path_str);\n     let dest_path = Path::new(&dest_path_str);"}]}