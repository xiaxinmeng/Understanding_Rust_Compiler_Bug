{"sha": "8e8c54aa3a8d92d8443ec4596754d14b2d196899", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlOGM1NGFhM2E4ZDkyZDg0NDNlYzQ1OTY3NTRkMTRiMmQxOTY4OTk=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-06-27T20:59:47Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-06-27T20:59:47Z"}, "message": "Added the parapgrah to path::Path::is_file too", "tree": {"sha": "c2f4b0eb952888b1d197bb99b82bcdfd31034fcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2f4b0eb952888b1d197bb99b82bcdfd31034fcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e8c54aa3a8d92d8443ec4596754d14b2d196899", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e8c54aa3a8d92d8443ec4596754d14b2d196899", "html_url": "https://github.com/rust-lang/rust/commit/8e8c54aa3a8d92d8443ec4596754d14b2d196899", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e8c54aa3a8d92d8443ec4596754d14b2d196899/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d25d6c5bd8c211a5e606b2ac37bbecb9be1ac12b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d25d6c5bd8c211a5e606b2ac37bbecb9be1ac12b", "html_url": "https://github.com/rust-lang/rust/commit/d25d6c5bd8c211a5e606b2ac37bbecb9be1ac12b"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "f14a9ff72f62f473ef8437ed5c63650cbab30785", "filename": "src/libstd/path.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8e8c54aa3a8d92d8443ec4596754d14b2d196899/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8c54aa3a8d92d8443ec4596754d14b2d196899/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=8e8c54aa3a8d92d8443ec4596754d14b2d196899", "patch": "@@ -2506,12 +2506,17 @@ impl Path {\n     /// check errors, call [`fs::metadata`] and handle its Result. Then call\n     /// [`fs::Metadata::is_file`] if it was Ok.\n     ///\n-    /// Note that the explanation about using `open` instead of `is_file`\n-    /// that is present in the [`fs::Metadata`] documentation also applies here.\n+    /// When the goal is simply to read from (or write to) the source, the most\n+    /// reliable way to test the source can be read (or written to) is to open\n+    /// it. Only using `is_file` can break workflows like `diff <( prog_a )` on\n+    /// a Unix-like system for example. See [`File::open`] or\n+    /// [`OpenOptions::open`] for more information.\n     ///\n     /// [`fs::metadata`]: ../../std/fs/fn.metadata.html\n     /// [`fs::Metadata`]: ../../std/fs/struct.Metadata.html\n     /// [`fs::Metadata::is_file`]: ../../std/fs/struct.Metadata.html#method.is_file\n+    /// [`File::open`]: ../../std/fs/struct.File.html#method.open\n+    /// [`OpenOptions::open`]: ../../std/fs/struct.OpenOptions.html#method.open\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n     pub fn is_file(&self) -> bool {\n         fs::metadata(self).map(|m| m.is_file()).unwrap_or(false)"}]}