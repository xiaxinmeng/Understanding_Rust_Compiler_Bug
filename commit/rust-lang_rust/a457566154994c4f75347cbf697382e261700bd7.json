{"sha": "a457566154994c4f75347cbf697382e261700bd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0NTc1NjYxNTQ5OTRjNGY3NTM0N2NiZjY5NzM4MmUyNjE3MDBiZDc=", "commit": {"author": {"name": "Markus Westerlind", "email": "markus.westerlind@distilnetworks.com", "date": "2020-02-25T12:32:58Z"}, "committer": {"name": "Markus Westerlind", "email": "markus.westerlind@distilnetworks.com", "date": "2020-05-05T09:24:23Z"}, "message": "perf: Separate CombinedSnapshot into a FullSnapshot for probing", "tree": {"sha": "78fffc2f8ff9474bd08c35c1151fbc279316df37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78fffc2f8ff9474bd08c35c1151fbc279316df37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a457566154994c4f75347cbf697382e261700bd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a457566154994c4f75347cbf697382e261700bd7", "html_url": "https://github.com/rust-lang/rust/commit/a457566154994c4f75347cbf697382e261700bd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a457566154994c4f75347cbf697382e261700bd7/comments", "author": null, "committer": null, "parents": [{"sha": "0c5d8338120ebf85e68d2f63670fac05fda97de6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c5d8338120ebf85e68d2f63670fac05fda97de6", "html_url": "https://github.com/rust-lang/rust/commit/0c5d8338120ebf85e68d2f63670fac05fda97de6"}], "stats": {"total": 52, "additions": 33, "deletions": 19}, "files": [{"sha": "a105a7704fab8dd482471fef177bc6019b6a0152", "filename": "src/librustc_infer/infer/fudge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a457566154994c4f75347cbf697382e261700bd7/src%2Flibrustc_infer%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a457566154994c4f75347cbf697382e261700bd7/src%2Flibrustc_infer%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ffudge.rs?ref=a457566154994c4f75347cbf697382e261700bd7", "patch": "@@ -82,7 +82,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     {\n         debug!(\"fudge_inference_if_ok()\");\n \n-        let (mut fudger, value) = self.probe(|snapshot| {\n+        let (mut fudger, value) = self.probe_full(|snapshot| {\n             match f() {\n                 Ok(value) => {\n                     let value = self.resolve_vars_if_possible(&value);"}, {"sha": "5c899e34850a9aa90e073b65b2f3687dc61e4b68", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 32, "deletions": 18, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a457566154994c4f75347cbf697382e261700bd7/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a457566154994c4f75347cbf697382e261700bd7/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=a457566154994c4f75347cbf697382e261700bd7", "patch": "@@ -897,13 +897,18 @@ impl<'tcx> InferOk<'tcx, ()> {\n }\n \n #[must_use = \"once you start a snapshot, you should always consume it\"]\n-pub struct CombinedSnapshot<'a, 'tcx> {\n-    undo_snapshot: Snapshot<'tcx>,\n+pub struct FullSnapshot<'a, 'tcx> {\n+    snapshot: CombinedSnapshot<'a, 'tcx>,\n+    region_constraints_snapshot: RegionSnapshot,\n     type_snapshot: type_variable::Snapshot<'tcx>,\n     const_snapshot: usize,\n     int_snapshot: usize,\n     float_snapshot: usize,\n-    region_constraints_snapshot: RegionSnapshot,\n+}\n+\n+#[must_use = \"once you start a snapshot, you should always consume it\"]\n+pub struct CombinedSnapshot<'a, 'tcx> {\n+    undo_snapshot: Snapshot<'tcx>,\n     region_obligations_snapshot: usize,\n     universe: ty::UniverseIndex,\n     was_in_snapshot: bool,\n@@ -1018,6 +1023,19 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         result\n     }\n \n+    fn start_full_snapshot(&self) -> FullSnapshot<'a, 'tcx> {\n+        let snapshot = self.start_snapshot();\n+        let mut inner = self.inner.borrow_mut();\n+        FullSnapshot {\n+            snapshot,\n+            type_snapshot: inner.type_variables().snapshot(),\n+            const_snapshot: inner.const_unification_table().len(),\n+            int_snapshot: inner.int_unification_table().len(),\n+            float_snapshot: inner.float_unification_table().len(),\n+            region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),\n+        }\n+    }\n+\n     fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {\n         debug!(\"start_snapshot()\");\n \n@@ -1029,11 +1047,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let undo_snapshot = Snapshot { undo_len: inner.undo_log.logs.len(), _marker: PhantomData };\n         CombinedSnapshot {\n             undo_snapshot,\n-            type_snapshot: inner.type_variables().snapshot(),\n-            const_snapshot: inner.const_unification_table().len(),\n-            int_snapshot: inner.int_unification_table().len(),\n-            float_snapshot: inner.float_unification_table().len(),\n-            region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),\n             region_obligations_snapshot: inner.region_obligations.len(),\n             universe: self.universe(),\n             was_in_snapshot: in_snapshot,\n@@ -1048,11 +1061,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         debug!(\"rollback_to(cause={})\", cause);\n         let CombinedSnapshot {\n             undo_snapshot,\n-            type_snapshot: _,\n-            const_snapshot: _,\n-            int_snapshot: _,\n-            float_snapshot: _,\n-            region_constraints_snapshot: _,\n             region_obligations_snapshot,\n             universe,\n             was_in_snapshot,\n@@ -1093,11 +1101,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         debug!(\"commit_from()\");\n         let CombinedSnapshot {\n             undo_snapshot,\n-            type_snapshot: _,\n-            const_snapshot: _,\n-            int_snapshot: _,\n-            float_snapshot: _,\n-            region_constraints_snapshot: _,\n             region_obligations_snapshot: _,\n             universe: _,\n             was_in_snapshot,\n@@ -1156,6 +1159,17 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         r\n     }\n \n+    pub fn probe_full<R, F>(&self, f: F) -> R\n+    where\n+        F: FnOnce(&FullSnapshot<'a, 'tcx>) -> R,\n+    {\n+        debug!(\"probe()\");\n+        let snapshot = self.start_full_snapshot();\n+        let r = f(&snapshot);\n+        self.rollback_to(\"probe\", snapshot.snapshot);\n+        r\n+    }\n+\n     /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.\n     pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R\n     where"}]}