{"sha": "1d19e0c8097ead99d306a91b0912f3e6f9c9ddd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMTllMGM4MDk3ZWFkOTlkMzA2YTkxYjA5MTJmM2U2ZjljOWRkZDE=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-07-11T11:18:57Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-16T13:09:16Z"}, "message": "VariantKind", "tree": {"sha": "eabd9e85e61868933b66e5e6d85caec80561229b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eabd9e85e61868933b66e5e6d85caec80561229b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d19e0c8097ead99d306a91b0912f3e6f9c9ddd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d19e0c8097ead99d306a91b0912f3e6f9c9ddd1", "html_url": "https://github.com/rust-lang/rust/commit/1d19e0c8097ead99d306a91b0912f3e6f9c9ddd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d19e0c8097ead99d306a91b0912f3e6f9c9ddd1/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14893ba96b64f6077dae37ded929956046618714", "url": "https://api.github.com/repos/rust-lang/rust/commits/14893ba96b64f6077dae37ded929956046618714", "html_url": "https://github.com/rust-lang/rust/commit/14893ba96b64f6077dae37ded929956046618714"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "c6f2f71460e2622f92a0127f8c310658471e86c7", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d19e0c8097ead99d306a91b0912f3e6f9c9ddd1/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d19e0c8097ead99d306a91b0912f3e6f9c9ddd1/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=1d19e0c8097ead99d306a91b0912f3e6f9c9ddd1", "patch": "@@ -1507,7 +1507,7 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_variant(&mut self, v: &Variant) -> hir::Variant {\n         Spanned {\n-            node: hir::Variant_ {\n+            node: hir::VariantKind {\n                 name: v.node.ident.name,\n                 attrs: self.lower_attrs(&v.node.attrs),\n                 data: self.lower_variant_data(&v.node.data),"}, {"sha": "6298c3882533b4003349ca32eed0a2005eeae25c", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d19e0c8097ead99d306a91b0912f3e6f9c9ddd1/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d19e0c8097ead99d306a91b0912f3e6f9c9ddd1/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=1d19e0c8097ead99d306a91b0912f3e6f9c9ddd1", "patch": "@@ -1176,7 +1176,7 @@ impl<T:Named> Named for Spanned<T> { fn name(&self) -> Name { self.node.name() }\n \n impl Named for Item { fn name(&self) -> Name { self.name } }\n impl Named for ForeignItem { fn name(&self) -> Name { self.name } }\n-impl Named for Variant_ { fn name(&self) -> Name { self.name } }\n+impl Named for VariantKind { fn name(&self) -> Name { self.name } }\n impl Named for StructField { fn name(&self) -> Name { self.ident.name } }\n impl Named for TraitItem { fn name(&self) -> Name { self.ident.name } }\n impl Named for ImplItem { fn name(&self) -> Name { self.ident.name } }"}, {"sha": "5ae0c3250fff685381ed7f162ef6169d919f87b0", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d19e0c8097ead99d306a91b0912f3e6f9c9ddd1/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d19e0c8097ead99d306a91b0912f3e6f9c9ddd1/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=1d19e0c8097ead99d306a91b0912f3e6f9c9ddd1", "patch": "@@ -1878,15 +1878,15 @@ pub struct EnumDef {\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub struct Variant_ {\n+pub struct VariantKind {\n     pub name: Name,\n     pub attrs: HirVec<Attribute>,\n     pub data: VariantData,\n     /// Explicit discriminant, eg `Foo = 1`\n     pub disr_expr: Option<AnonConst>,\n }\n \n-pub type Variant = Spanned<Variant_>;\n+pub type Variant = Spanned<VariantKind>;\n \n #[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n pub enum UseKind {"}, {"sha": "5fbe570a15fb5781a8b038192bd689ddb848672c", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d19e0c8097ead99d306a91b0912f3e6f9c9ddd1/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d19e0c8097ead99d306a91b0912f3e6f9c9ddd1/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=1d19e0c8097ead99d306a91b0912f3e6f9c9ddd1", "patch": "@@ -793,14 +793,14 @@ impl_stable_hash_for!(struct hir::EnumDef {\n     variants\n });\n \n-impl_stable_hash_for!(struct hir::Variant_ {\n+impl_stable_hash_for!(struct hir::VariantKind {\n     name,\n     attrs,\n     data,\n     disr_expr\n });\n \n-impl_stable_hash_for_spanned!(hir::Variant_);\n+impl_stable_hash_for_spanned!(hir::VariantKind);\n \n impl_stable_hash_for!(enum hir::UseKind {\n     Single,"}, {"sha": "bb6fa72fbe7942c66cae5ed9577aeb10025a857c", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d19e0c8097ead99d306a91b0912f3e6f9c9ddd1/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d19e0c8097ead99d306a91b0912f3e6f9c9ddd1/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=1d19e0c8097ead99d306a91b0912f3e6f9c9ddd1", "patch": "@@ -475,7 +475,7 @@ impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n             && !has_allow_dead_code_or_lang_attr(self.tcx, field.id, &field.attrs)\n     }\n \n-    fn should_warn_about_variant(&mut self, variant: &hir::Variant_) -> bool {\n+    fn should_warn_about_variant(&mut self, variant: &hir::VariantKind) -> bool {\n         !self.symbol_is_live(variant.data.id(), None)\n             && !has_allow_dead_code_or_lang_attr(self.tcx,\n                                                  variant.data.id(),"}, {"sha": "194182ab4960fed860b65e012461e67228e86138", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d19e0c8097ead99d306a91b0912f3e6f9c9ddd1/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d19e0c8097ead99d306a91b0912f3e6f9c9ddd1/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=1d19e0c8097ead99d306a91b0912f3e6f9c9ddd1", "patch": "@@ -981,7 +981,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n             hir::map::NodeVariant(&hir::Variant {\n                 span,\n-                node: hir::Variant_ {\n+                node: hir::VariantKind {\n                     data: hir::VariantData::Tuple(ref fields, _),\n                     ..\n                 },"}, {"sha": "21102533f8b8fc6d06eab59df54328c4ffea3924", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d19e0c8097ead99d306a91b0912f3e6f9c9ddd1/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d19e0c8097ead99d306a91b0912f3e6f9c9ddd1/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=1d19e0c8097ead99d306a91b0912f3e6f9c9ddd1", "patch": "@@ -1090,7 +1090,7 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n \n         NodeStructCtor(&ref def) |\n-        NodeVariant(&Spanned { node: hir::Variant_ { data: ref def, .. }, .. }) => {\n+        NodeVariant(&Spanned { node: hir::VariantKind { data: ref def, .. }, .. }) => {\n             match *def {\n                 VariantData::Unit(..) | VariantData::Struct(..) => {\n                     tcx.type_of(tcx.hir.get_parent_did(node_id))\n@@ -1123,7 +1123,7 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             NodeExpr(&hir::Expr { node: ExprRepeat(_, ref constant), .. })\n                 if constant.id == node_id => tcx.types.usize,\n \n-            NodeVariant(&Spanned { node: Variant_ { disr_expr: Some(ref e), .. }, .. })\n+            NodeVariant(&Spanned { node: VariantKind { disr_expr: Some(ref e), .. }, .. })\n                 if e.id == node_id => {\n                     tcx.adt_def(tcx.hir.get_parent_did(node_id))\n                         .repr.discr_type().to_ty(tcx)\n@@ -1175,7 +1175,7 @@ fn fn_sig<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n \n         NodeStructCtor(&VariantData::Tuple(ref fields, _)) |\n-        NodeVariant(&Spanned { node: hir::Variant_ {\n+        NodeVariant(&Spanned { node: hir::VariantKind {\n             data: VariantData::Tuple(ref fields, _), ..\n         }, .. }) => {\n             let ty = tcx.type_of(tcx.hir.get_parent_did(node_id));"}]}