{"sha": "66e55b0d6e00706fb9bbfd6a062852c9dbd09cec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ZTU1YjBkNmUwMDcwNmZiOWJiZmQ2YTA2Mjg1MmM5ZGJkMDljZWM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-14T03:28:00Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-25T08:22:11Z"}, "message": "fn ptrs and never were accidentally disabled (55)", "tree": {"sha": "d0b0e41bb6be9700c91734e9124f5696934ea75a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0b0e41bb6be9700c91734e9124f5696934ea75a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66e55b0d6e00706fb9bbfd6a062852c9dbd09cec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAll2/7MACgkQpp+NIls6\n19m0vw//Yo/2H117RfTsCWrIgAnm1WK5p8rG2mHwIdVHdNiyVBx7w5EioJ0wy/J7\nrbDSJE6I6rRznjNMD+FkXoeU0+n2UMrzsoLY/B/HdNdCqmPIWbNpjJZ0EPsyTj+n\nRau3C/wIuhBbPxwuEFG/WbDoPB+xnmDqZFLn8xLilRGAy4XwJ3v7Xjxpb7hLDdi/\nMmmBfRkG7boj+eBc9YdSkrw2jW1ZoFztKhsxaO08+Db7ycj7pB6l9V1shLQSxasp\nCedBa/16OdzSQ78StXALOIZYWEQKSqAn87nP35JfRhqLH1uI48ygUw92HMv7xhIE\n5km5ZPJpoGf8vZFnUDxGI2M29DItJSWvsOMZzgcBtOkqWVuhp3OkpeERPsqmto0h\nWIlzqdWLeol15gi9FxCSCsuop9wCOukwx/ePAMh+IqdSBCTv+OgBjNX7EE74YsCE\nq5diQ2b+sDyhW4yO2ejJrp8oaZPwisxMDLEKRrovDBBTmo7MolTwj1bixvEj4Kkk\nyJjaifyb/7gCeY/mAPMs8wC+lnSRrdspTXynaUi89f/m+37wq9f1h0ICxdFxAlbp\ndc7M+7x6FJ/U4342qkKx4EjrvK9DcE+riEJ7ZR9fCrmyOUzqFHJGF+b302hs9sAD\na1kpqdkEPoyThnGGQst58yShi0OOiWs/UWnaaqPXMHe4aCAdmiU=\n=ru9/\n-----END PGP SIGNATURE-----", "payload": "tree d0b0e41bb6be9700c91734e9124f5696934ea75a\nparent 8e495999df573f7872d7df40db939d9235dbbfaa\nauthor Ralf Jung <post@ralfj.de> 1500002880 -0700\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1500970931 +0200\n\nfn ptrs and never were accidentally disabled (55)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66e55b0d6e00706fb9bbfd6a062852c9dbd09cec", "html_url": "https://github.com/rust-lang/rust/commit/66e55b0d6e00706fb9bbfd6a062852c9dbd09cec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66e55b0d6e00706fb9bbfd6a062852c9dbd09cec/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e495999df573f7872d7df40db939d9235dbbfaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e495999df573f7872d7df40db939d9235dbbfaa", "html_url": "https://github.com/rust-lang/rust/commit/8e495999df573f7872d7df40db939d9235dbbfaa"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "60ce28f82323d97d1a6a906779be1297e8c9809b", "filename": "src/librustc_mir/interpret/lvalue.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/66e55b0d6e00706fb9bbfd6a062852c9dbd09cec/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e55b0d6e00706fb9bbfd6a062852c9dbd09cec/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs?ref=66e55b0d6e00706fb9bbfd6a062852c9dbd09cec", "patch": "@@ -529,7 +529,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         let is_owning = match ty.sty {\n             TyInt(_) | TyUint(_) | TyRawPtr(_) |\n             TyBool | TyFloat(_) | TyChar | TyStr |\n-            TyRef(..) => true,\n+            TyRef(..) | TyFnPtr(..) | TyNever => true,\n             TyAdt(adt, _) if adt.is_box() => true,\n             TySlice(_) | TyAdt(_, _) | TyTuple(..) | TyClosure(..) | TyArray(..) => false,\n             TyParam(_) | TyInfer(_) => bug!(\"I got an incomplete type for validation\"),\n@@ -611,6 +611,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let val = self.read_lvalue(lvalue)?;\n                 self.validate_ptr(val, ty.boxed_ty(), vctx)\n             }\n+            TyFnPtr(_sig) => {\n+                // TODO: The function names here could need some improvement.\n+                let ptr = self.read_lvalue(lvalue)?.into_ptr(&mut self.memory)?.to_ptr()?;\n+                self.memory.get_fn(ptr)?;\n+                // TODO: Check if the signature matches (should be the same check as what terminator/mod.rs already does on call?).\n+                Ok(())\n+            }\n+\n+            // Compound types\n             TySlice(elem_ty) => {\n                 let len = match lvalue {\n                     Lvalue::Ptr { extra: LvalueExtra::Length(len), .. } => len,\n@@ -629,13 +638,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 }\n                 Ok(())\n             }\n-            TyFnPtr(_sig) => {\n-                // TODO: The function names here could need some improvement.\n-                let ptr = self.read_lvalue(lvalue)?.into_ptr(&mut self.memory)?.to_ptr()?;\n-                self.memory.get_fn(ptr)?;\n-                // TODO: Check if the signature matches (should be the same check as what terminator/mod.rs already does on call?).\n-                Ok(())\n-            }\n             TyAdt(adt, subst) => {\n                 match adt.adt_kind() {\n                     AdtKind::Enum => {\n@@ -682,6 +684,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     let field_lvalue = self.lvalue_field(lvalue, idx, ty, field_ty)?;\n                     self.validate(field_lvalue, field_ty, vctx)?;\n                 }\n+                // TODO: Check if the signature matches (should be the same check as what terminator/mod.rs already does on call?).\n+                // Is there other things we can/should check?  Like vtable pointers?\n                 Ok(())\n             }\n             _ => bug!(\"We already establishd that this is a type we support.\")"}]}