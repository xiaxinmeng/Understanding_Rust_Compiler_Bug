{"sha": "fbb8b884a2dbc3ced720c84f4604466e223f6d69", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiYjhiODg0YTJkYmMzY2VkNzIwYzg0ZjQ2MDQ0NjZlMjIzZjZkNjk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-24T15:05:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-24T15:05:20Z"}, "message": "Merge #4593\n\n4593: Document some rust-analyzer specific protocol extensions r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "358370ac7f84396ad19ce004097497bfcbae9d18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/358370ac7f84396ad19ce004097497bfcbae9d18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbb8b884a2dbc3ced720c84f4604466e223f6d69", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeyo0wCRBK7hj4Ov3rIwAAdHIIAIcNfXrGer/iUN8x7aN7XAQ0\nk6R+k3IZ+yegZBb+//1so7kPKkYZbs4c+fwP2SrMcR5reKnzQI0FBdSttBZuaYWb\nb/eSCpND0tOOj47OX/A+4DrwVB/vxzsGx8oEiwwy0bSDVTndirr2nwGlgnWCBBDZ\nK8AHYMX5LAzD9QMUUCK67nH6u4UBFuZahKF2uk+dtD1eWpYhN+Nkh5I7q820BCga\nCDdVCnz0JftbPGMkbO8nODXXNGnly/mI/pJI2Two9eVWvELD24uPJOWMqPtw3l30\nBRLppfMLxC25MnKtDLDH1VIv4agm08XXPj7nuIGj+90cUNZgBhVGqnra7VCaxMQ=\n=r/Sf\n-----END PGP SIGNATURE-----\n", "payload": "tree 358370ac7f84396ad19ce004097497bfcbae9d18\nparent d959c913eaeae36b9e04c7b5ee8b341f6c5b678b\nparent 5276bfff819520cd27703b5d33a95d9674649e1e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1590332720 +0000\ncommitter GitHub <noreply@github.com> 1590332720 +0000\n\nMerge #4593\n\n4593: Document some rust-analyzer specific protocol extensions r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbb8b884a2dbc3ced720c84f4604466e223f6d69", "html_url": "https://github.com/rust-lang/rust/commit/fbb8b884a2dbc3ced720c84f4604466e223f6d69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbb8b884a2dbc3ced720c84f4604466e223f6d69/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d959c913eaeae36b9e04c7b5ee8b341f6c5b678b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d959c913eaeae36b9e04c7b5ee8b341f6c5b678b", "html_url": "https://github.com/rust-lang/rust/commit/d959c913eaeae36b9e04c7b5ee8b341f6c5b678b"}, {"sha": "5276bfff819520cd27703b5d33a95d9674649e1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5276bfff819520cd27703b5d33a95d9674649e1e", "html_url": "https://github.com/rust-lang/rust/commit/5276bfff819520cd27703b5d33a95d9674649e1e"}], "stats": {"total": 158, "additions": 131, "deletions": 27}, "files": [{"sha": "52e4fcbecae51879e1000111c5f64dcb694032c8", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fbb8b884a2dbc3ced720c84f4604466e223f6d69/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb8b884a2dbc3ced720c84f4604466e223f6d69/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=fbb8b884a2dbc3ced720c84f4604466e223f6d69", "patch": "@@ -38,13 +38,6 @@ pub struct SyntaxTreeParams {\n     pub range: Option<Range>,\n }\n \n-#[derive(Deserialize, Serialize, Debug)]\n-#[serde(rename_all = \"camelCase\")]\n-pub struct ExpandedMacro {\n-    pub name: String,\n-    pub expansion: String,\n-}\n-\n pub enum ExpandMacro {}\n \n impl Request for ExpandMacro {\n@@ -60,19 +53,26 @@ pub struct ExpandMacroParams {\n     pub position: Option<Position>,\n }\n \n-pub enum FindMatchingBrace {}\n+#[derive(Deserialize, Serialize, Debug)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct ExpandedMacro {\n+    pub name: String,\n+    pub expansion: String,\n+}\n+\n+pub enum MatchingBrace {}\n \n-impl Request for FindMatchingBrace {\n-    type Params = FindMatchingBraceParams;\n+impl Request for MatchingBrace {\n+    type Params = MatchingBraceParams;\n     type Result = Vec<Position>;\n-    const METHOD: &'static str = \"rust-analyzer/findMatchingBrace\";\n+    const METHOD: &'static str = \"experimental/matchingBrace\";\n }\n \n #[derive(Deserialize, Serialize, Debug)]\n #[serde(rename_all = \"camelCase\")]\n-pub struct FindMatchingBraceParams {\n+pub struct MatchingBraceParams {\n     pub text_document: TextDocumentIdentifier,\n-    pub offsets: Vec<Position>,\n+    pub positions: Vec<Position>,\n }\n \n pub enum ParentModule {}"}, {"sha": "f1287d52cd324dec1229b4140dd7e4854db9e95b", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fbb8b884a2dbc3ced720c84f4604466e223f6d69/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb8b884a2dbc3ced720c84f4604466e223f6d69/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=fbb8b884a2dbc3ced720c84f4604466e223f6d69", "patch": "@@ -509,9 +509,7 @@ fn on_request(\n         .on_sync::<lsp_types::request::SelectionRangeRequest>(|s, p| {\n             handlers::handle_selection_range(s.snapshot(), p)\n         })?\n-        .on_sync::<lsp_ext::FindMatchingBrace>(|s, p| {\n-            handlers::handle_find_matching_brace(s.snapshot(), p)\n-        })?\n+        .on_sync::<lsp_ext::MatchingBrace>(|s, p| handlers::handle_matching_brace(s.snapshot(), p))?\n         .on::<lsp_ext::AnalyzerStatus>(handlers::handle_analyzer_status)?\n         .on::<lsp_ext::SyntaxTree>(handlers::handle_syntax_tree)?\n         .on::<lsp_ext::ExpandMacro>(handlers::handle_expand_macro)?"}, {"sha": "d731079681234e68991079bd7b25ce04dfc86436", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fbb8b884a2dbc3ced720c84f4604466e223f6d69/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb8b884a2dbc3ced720c84f4604466e223f6d69/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=fbb8b884a2dbc3ced720c84f4604466e223f6d69", "patch": "@@ -126,15 +126,15 @@ pub fn handle_selection_range(\n     Ok(Some(res?))\n }\n \n-pub fn handle_find_matching_brace(\n+pub fn handle_matching_brace(\n     world: WorldSnapshot,\n-    params: lsp_ext::FindMatchingBraceParams,\n+    params: lsp_ext::MatchingBraceParams,\n ) -> Result<Vec<Position>> {\n-    let _p = profile(\"handle_find_matching_brace\");\n+    let _p = profile(\"handle_matching_brace\");\n     let file_id = from_proto::file_id(&world, &params.text_document.uri)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n     let res = params\n-        .offsets\n+        .positions\n         .into_iter()\n         .map(|position| {\n             let offset = from_proto::offset(&line_index, position);"}, {"sha": "55035cfae183a38adb70cac262bbd8078be5d9dc", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 108, "deletions": 1, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/fbb8b884a2dbc3ced720c84f4604466e223f6d69/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/fbb8b884a2dbc3ced720c84f4604466e223f6d69/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=fbb8b884a2dbc3ced720c84f4604466e223f6d69", "patch": "@@ -95,7 +95,7 @@ Invoking code action at this position will yield two code actions for importing\n \n This request is send from client to server to handle \"Join Lines\" editor action.\n \n-**Method:** `experimental/JoinLines`\n+**Method:** `experimental/joinLines`\n \n **Request:**\n \n@@ -172,3 +172,110 @@ SSR with query `foo($a:expr, $b:expr) ==>> ($a).foo($b)` will transform, eg `foo\n \n * Probably needs search without replace mode\n * Needs a way to limit the scope to certain files.\n+\n+## Matching Brace\n+\n+**Issue:** https://github.com/microsoft/language-server-protocol/issues/999\n+\n+**Server Capability:** `{ \"matchingBrace\": boolean }`\n+\n+This request is send from client to server to handle \"Matching Brace\" editor action.\n+\n+**Method:** `experimental/matchingBrace`\n+\n+**Request:**\n+\n+```typescript\n+interface MatchingBraceParams {\n+    textDocument: TextDocumentIdentifier,\n+    /// Position for each cursor\n+    positions: Position[],\n+}\n+```\n+\n+**Response:**\n+\n+```typescript\n+Position[]\n+```\n+\n+### Example\n+\n+```rust\n+fn main() {\n+    let x: Vec<()>/*cursor here*/ = vec![]\n+}\n+```\n+\n+`experimental/matchingBrace` yields the position of `<`.\n+In many cases, matching braces can be handled by the editor.\n+However, some cases (like disambiguating between generics and comparison operations) need a real parser.\n+Moreover, it would be cool if editors didn't need to implement even basic language parsing\n+\n+### Unresolved Question\n+\n+* Should we return a a nested brace structure, to allow paredit-like actions of jump *out* of the current brace pair?\n+  This is how `SelectionRange` request works.\n+* Alternatively, should we perhaps flag certain `SelectionRange`s as being brace pairs?\n+\n+## Analyzer Status\n+\n+**Method:** `rust-analyzer/analyzerStatus`\n+\n+**Request:** `null`\n+\n+**Response:** `string`\n+\n+Returns internal status message, mostly for debugging purposes.\n+\n+## Collect Garbage\n+\n+**Method:** `rust-analyzer/collectGarbage`\n+\n+**Request:** `null`\n+\n+**Response:** `null`\n+\n+Frees some caches. For internal use, and is mostly broken at the moment.\n+\n+## Syntax Tree\n+\n+**Method:** `rust-analyzer/syntaxTree`\n+\n+**Request:**\n+\n+```typescript\n+interface SyntaxTeeParams {\n+    textDocument: TextDocumentIdentifier,\n+    range?: Range,\n+}\n+```\n+\n+**Response:** `string`\n+\n+Returns textual representation of a parse tree for the file/selected region.\n+Primarily for debugging, but very useful for all people working on rust-analyzer itself.\n+\n+## Expand Macro\n+\n+**Method:** `rust-analyzer/expandMacro`\n+\n+**Request:**\n+\n+```typescript\n+interface ExpandMacroParams {\n+    textDocument: TextDocumentIdentifier,\n+    position?: Position,\n+}\n+```\n+\n+**Response:**\n+\n+```typescript\n+interface ExpandedMacro {\n+    name: string,\n+    expansion: string,\n+}\n+```\n+\n+Expands macro call at a given position."}, {"sha": "9c418b887c21117d72667fca3f7422a1a3252b0e", "filename": "editors/code/src/commands/matching_brace.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fbb8b884a2dbc3ced720c84f4604466e223f6d69/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts", "raw_url": "https://github.com/rust-lang/rust/raw/fbb8b884a2dbc3ced720c84f4604466e223f6d69/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts?ref=fbb8b884a2dbc3ced720c84f4604466e223f6d69", "patch": "@@ -9,9 +9,9 @@ export function matchingBrace(ctx: Ctx): Cmd {\n         const client = ctx.client;\n         if (!editor || !client) return;\n \n-        const response = await client.sendRequest(ra.findMatchingBrace, {\n+        const response = await client.sendRequest(ra.matchingBrace, {\n             textDocument: { uri: editor.document.uri.toString() },\n-            offsets: editor.selections.map(s =>\n+            positions: editor.selections.map(s =>\n                 client.code2ProtocolConverter.asPosition(s.active),\n             ),\n         });"}, {"sha": "900c5cd5bce546ed60a61846e860bb9c4d500ea5", "filename": "editors/code/src/rust-analyzer-api.ts", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fbb8b884a2dbc3ced720c84f4604466e223f6d69/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "raw_url": "https://github.com/rust-lang/rust/raw/fbb8b884a2dbc3ced720c84f4604466e223f6d69/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts?ref=fbb8b884a2dbc3ced720c84f4604466e223f6d69", "patch": "@@ -40,12 +40,11 @@ export interface ExpandedMacro {\n export const expandMacro = request<ExpandMacroParams, Option<ExpandedMacro>>(\"expandMacro\");\n \n \n-export interface FindMatchingBraceParams {\n+export interface MatchingBraceParams {\n     textDocument: lc.TextDocumentIdentifier;\n-    offsets: Vec<lc.Position>;\n+    positions: lc.Position[];\n }\n-export const findMatchingBrace = request<FindMatchingBraceParams, Vec<lc.Position>>(\"findMatchingBrace\");\n-\n+export const matchingBrace = new lc.RequestType<MatchingBraceParams, lc.Position[], unknown>('experimental/matchingBrace');\n \n export interface PublishDecorationsParams {\n     uri: string;"}]}