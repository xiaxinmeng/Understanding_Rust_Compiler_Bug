{"sha": "59d7d4c80ef94ec5b001ffe1a8bac40694c50c3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZDdkNGM4MGVmOTRlYzViMDAxZmZlMWE4YmFjNDA2OTRjNTBjM2Y=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-01-10T19:45:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-01-10T19:47:58Z"}, "message": "only emit suggestion to move `&` if the inner pattern is a binding", "tree": {"sha": "7063a25edd98023f4f9a6f3d2f6bd8c2e13a22a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7063a25edd98023f4f9a6f3d2f6bd8c2e13a22a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59d7d4c80ef94ec5b001ffe1a8bac40694c50c3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59d7d4c80ef94ec5b001ffe1a8bac40694c50c3f", "html_url": "https://github.com/rust-lang/rust/commit/59d7d4c80ef94ec5b001ffe1a8bac40694c50c3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59d7d4c80ef94ec5b001ffe1a8bac40694c50c3f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "563ecc1b1fe8f8daea20910a23b7090411cf2de8", "url": "https://api.github.com/repos/rust-lang/rust/commits/563ecc1b1fe8f8daea20910a23b7090411cf2de8", "html_url": "https://github.com/rust-lang/rust/commit/563ecc1b1fe8f8daea20910a23b7090411cf2de8"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "f7fd78097b80bb8fa79a56497272068518ff5aee", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/59d7d4c80ef94ec5b001ffe1a8bac40694c50c3f/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d7d4c80ef94ec5b001ffe1a8bac40694c50c3f/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=59d7d4c80ef94ec5b001ffe1a8bac40694c50c3f", "patch": "@@ -30,10 +30,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         self.check_pat_arg(pat, expected, false);\n     }\n \n+    /// The `is_arg` argument indicates whether this pattern is the\n+    /// *outermost* pattern in an argument (e.g., in `fn foo(&x:\n+    /// &u32)`, it is true for the `&x` pattern but not `x`). This is\n+    /// used to tailor error reporting.\n     pub fn check_pat_arg(&self, pat: &'gcx hir::Pat, expected: Ty<'tcx>, is_arg: bool) {\n         let tcx = self.tcx;\n \n-        debug!(\"check_pat(pat={:?},expected={:?})\", pat, expected);\n+        debug!(\"check_pat(pat={:?},expected={:?},is_arg={})\", pat, expected, is_arg);\n \n         let ty = match pat.node {\n             PatKind::Wild => {\n@@ -206,6 +210,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     // can, to avoid creating needless variables.  This\n                     // also helps with the bad interactions of the given\n                     // hack detailed in (*) below.\n+                    debug!(\"check_pat_arg: expected={:?}\", expected);\n                     let (rptr_ty, inner_ty) = match expected.sty {\n                         ty::TyRef(_, mt) if mt.mutbl == mutbl => {\n                             (expected, mt.ty)\n@@ -216,15 +221,21 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             let mt = ty::TypeAndMut { ty: inner_ty, mutbl: mutbl };\n                             let region = self.next_region_var(infer::PatternRegion(pat.span));\n                             let rptr_ty = tcx.mk_ref(region, mt);\n+                            debug!(\"check_pat_arg: demanding {:?} = {:?}\", expected, rptr_ty);\n                             let err = self.demand_eqtype_diag(pat.span, expected, rptr_ty);\n+\n+                            // Look for a case like `fn foo(&foo: u32)` and suggest\n+                            // `fn foo(foo: &u32)`\n                             if let Some(mut err) = err {\n                                 if is_arg {\n-                                    if let Ok(snippet) = self.sess().codemap()\n-                                        .span_to_snippet(pat.span)\n-                                    {\n-                                        err.help(&format!(\"did you mean `{}: &{}`?\",\n-                                                          &snippet[1..],\n-                                                          expected));\n+                                    if let PatKind::Binding(..) = inner.node {\n+                                        if let Ok(snippet) = self.sess().codemap()\n+                                                                        .span_to_snippet(pat.span)\n+                                        {\n+                                            err.help(&format!(\"did you mean `{}: &{}`?\",\n+                                                              &snippet[1..],\n+                                                              expected));\n+                                        }\n                                     }\n                                 }\n                                 err.emit();"}]}