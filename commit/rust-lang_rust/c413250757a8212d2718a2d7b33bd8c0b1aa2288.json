{"sha": "c413250757a8212d2718a2d7b33bd8c0b1aa2288", "node_id": "C_kwDOAAsO6NoAKGM0MTMyNTA3NTdhODIxMmQyNzE4YTJkN2IzM2JkOGMwYjFhYTIyODg", "commit": {"author": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2022-05-21T07:59:57Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2022-05-30T14:51:38Z"}, "message": "Add tests for \"not sure\" case of cfg_accessible", "tree": {"sha": "71eca2c797006b91fe086445a89591c14f2dcf1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71eca2c797006b91fe086445a89591c14f2dcf1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c413250757a8212d2718a2d7b33bd8c0b1aa2288", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c413250757a8212d2718a2d7b33bd8c0b1aa2288", "html_url": "https://github.com/rust-lang/rust/commit/c413250757a8212d2718a2d7b33bd8c0b1aa2288", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c413250757a8212d2718a2d7b33bd8c0b1aa2288/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "163374644ba96f4040e28fd7197fb64e7448df93", "url": "https://api.github.com/repos/rust-lang/rust/commits/163374644ba96f4040e28fd7197fb64e7448df93", "html_url": "https://github.com/rust-lang/rust/commit/163374644ba96f4040e28fd7197fb64e7448df93"}], "stats": {"total": 303, "additions": 303, "deletions": 0}, "files": [{"sha": "f0a57def52566125e2d139c9394d3f4612ad69fb", "filename": "src/test/ui/conditional-compilation/cfg_accessible-not_sure.edition2015.stderr", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/c413250757a8212d2718a2d7b33bd8c0b1aa2288/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-not_sure.edition2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c413250757a8212d2718a2d7b33bd8c0b1aa2288/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-not_sure.edition2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-not_sure.edition2015.stderr?ref=c413250757a8212d2718a2d7b33bd8c0b1aa2288", "patch": "@@ -0,0 +1,106 @@\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:14:18\n+   |\n+LL | #[cfg_accessible(Struct::existing)]\n+   |                  ^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:16:18\n+   |\n+LL | #[cfg_accessible(Struct::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:25:18\n+   |\n+LL | #[cfg_accessible(Union::existing)]\n+   |                  ^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:27:18\n+   |\n+LL | #[cfg_accessible(Union::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:36:18\n+   |\n+LL | #[cfg_accessible(Enum::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:46:18\n+   |\n+LL | #[cfg_accessible(Trait::existing)]\n+   |                  ^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:48:18\n+   |\n+LL | #[cfg_accessible(Trait::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:55:18\n+   |\n+LL | #[cfg_accessible(TypeAlias::existing)]\n+   |                  ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:57:18\n+   |\n+LL | #[cfg_accessible(TypeAlias::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:66:18\n+   |\n+LL | #[cfg_accessible(ForeignType::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:75:18\n+   |\n+LL | #[cfg_accessible(AssocType::AssocType::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:80:18\n+   |\n+LL | #[cfg_accessible(u8::unresolved)]\n+   |                  ^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:82:18\n+   |\n+LL | #[cfg_accessible(u8::is_ascii)]\n+   |                  ^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: aborting due to 13 previous errors\n+"}, {"sha": "f0a57def52566125e2d139c9394d3f4612ad69fb", "filename": "src/test/ui/conditional-compilation/cfg_accessible-not_sure.edition2021.stderr", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/c413250757a8212d2718a2d7b33bd8c0b1aa2288/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-not_sure.edition2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c413250757a8212d2718a2d7b33bd8c0b1aa2288/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-not_sure.edition2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-not_sure.edition2021.stderr?ref=c413250757a8212d2718a2d7b33bd8c0b1aa2288", "patch": "@@ -0,0 +1,106 @@\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:14:18\n+   |\n+LL | #[cfg_accessible(Struct::existing)]\n+   |                  ^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:16:18\n+   |\n+LL | #[cfg_accessible(Struct::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:25:18\n+   |\n+LL | #[cfg_accessible(Union::existing)]\n+   |                  ^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:27:18\n+   |\n+LL | #[cfg_accessible(Union::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:36:18\n+   |\n+LL | #[cfg_accessible(Enum::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:46:18\n+   |\n+LL | #[cfg_accessible(Trait::existing)]\n+   |                  ^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:48:18\n+   |\n+LL | #[cfg_accessible(Trait::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:55:18\n+   |\n+LL | #[cfg_accessible(TypeAlias::existing)]\n+   |                  ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:57:18\n+   |\n+LL | #[cfg_accessible(TypeAlias::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:66:18\n+   |\n+LL | #[cfg_accessible(ForeignType::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:75:18\n+   |\n+LL | #[cfg_accessible(AssocType::AssocType::unresolved)]\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:80:18\n+   |\n+LL | #[cfg_accessible(u8::unresolved)]\n+   |                  ^^^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible-not_sure.rs:82:18\n+   |\n+LL | #[cfg_accessible(u8::is_ascii)]\n+   |                  ^^^^^^^^^^^^\n+   |\n+   = note: the type may have associated items, but we are currently not checking them\n+\n+error: aborting due to 13 previous errors\n+"}, {"sha": "3baf72b0de9ef9de1cc0281a9c2f018d3de44184", "filename": "src/test/ui/conditional-compilation/cfg_accessible-not_sure.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/c413250757a8212d2718a2d7b33bd8c0b1aa2288/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-not_sure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c413250757a8212d2718a2d7b33bd8c0b1aa2288/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-not_sure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-not_sure.rs?ref=c413250757a8212d2718a2d7b33bd8c0b1aa2288", "patch": "@@ -0,0 +1,91 @@\n+// revisions: edition2015 edition2021\n+// [edition2015]compile-flags: --edition=2015\n+// [edition2021]compile-flags: --edition=2021\n+\n+#![feature(extern_types)]\n+#![feature(cfg_accessible)]\n+\n+// Struct::unresolved - error\n+\n+struct Struct {\n+    existing: u8,\n+}\n+\n+#[cfg_accessible(Struct::existing)] //~ ERROR not sure\n+const A: bool = true;\n+#[cfg_accessible(Struct::unresolved)] //~ ERROR not sure\n+const B: bool = true;\n+\n+// Union::unresolved - error\n+\n+struct Union {\n+    existing: u8,\n+}\n+\n+#[cfg_accessible(Union::existing)] //~ ERROR not sure\n+const A: bool = true;\n+#[cfg_accessible(Union::unresolved)] //~ ERROR not sure\n+const B: bool = true;\n+\n+// Enum::unresolved - error\n+\n+enum Enum {\n+    Existing { existing: u8 },\n+}\n+\n+// FIXME: Currently returns `false` but should be \"not sure\"\n+#[cfg_accessible(Enum::Existing::existing)]\n+const A: bool = true;\n+// FIXME: Currently returns `false` but should be \"not sure\"\n+#[cfg_accessible(Enum::Existing::unresolved)]\n+const B: bool = true;\n+#[cfg_accessible(Enum::unresolved)] //~ ERROR not sure\n+const C: bool = true;\n+\n+// Trait::unresolved - false or error, depending on edition (error if you can write Trait::foo\n+// instead of <dyn Trait>::foo for methods like impl dyn Trait { fn foo() {} })\n+\n+trait Trait {}\n+impl dyn Trait { fn existing() {} }\n+\n+// FIXME: Should be a error for edition > 2015\n+#[cfg_accessible(Trait::existing)] //~ ERROR not sure\n+const A: bool = true;\n+#[cfg_accessible(Trait::unresolved)] //~ ERROR not sure\n+const B: bool = true;\n+\n+// TypeAlias::unresolved - error\n+\n+type TypeAlias = Struct;\n+\n+#[cfg_accessible(TypeAlias::existing)] //~ ERROR not sure\n+const A: bool = true;\n+#[cfg_accessible(TypeAlias::unresolved)] //~ ERROR not sure\n+const B: bool = true;\n+\n+// ForeignType::unresolved - error\n+\n+extern {\n+    type ForeignType;\n+}\n+\n+#[cfg_accessible(ForeignType::unresolved)] //~ ERROR not sure\n+const A: bool = true;\n+\n+// AssocType::unresolved - error\n+\n+trait AssocType {\n+    type AssocType;\n+}\n+\n+#[cfg_accessible(AssocType::AssocType::unresolved)] //~ ERROR not sure\n+const A: bool = true;\n+\n+// PrimitiveType::unresolved - error\n+\n+#[cfg_accessible(u8::unresolved)] //~ ERROR not sure\n+const A: bool = true;\n+#[cfg_accessible(u8::is_ascii)] //~ ERROR not sure\n+const B: bool = true;\n+\n+fn main() {}"}]}