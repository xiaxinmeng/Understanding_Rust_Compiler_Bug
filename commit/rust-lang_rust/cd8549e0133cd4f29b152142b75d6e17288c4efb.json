{"sha": "cd8549e0133cd4f29b152142b75d6e17288c4efb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkODU0OWUwMTMzY2Q0ZjI5YjE1MjE0MmI3NWQ2ZTE3Mjg4YzRlZmI=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-09-19T23:36:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-19T23:36:46Z"}, "message": "Merge pull request #3036 from topecongiro/issue-2932\n\nCombine chain items only when the item gets orphaned otherwise", "tree": {"sha": "8f0978b73a0ea71389df9528ecc1ffbb2d9e4fbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f0978b73a0ea71389df9528ecc1ffbb2d9e4fbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd8549e0133cd4f29b152142b75d6e17288c4efb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbot2OCRBK7hj4Ov3rIwAAdHIIAGXS5tchi7bej7294Ar1IQdf\nJiWQNX4Z6nSLVm/KI/RyYcPW4TfNoM8CYvKyUFyLoZEvsqapeUkEr9zxnTUMcIMp\nu5/vT7OiIgOFW6uBuxafSaNRT/pVXLWNKwUnFvzo/a704Ww/QvghQqNr9sIo3RUU\nYI7DcgraVu9K7+6RmBtsmCGxxH0458bGlOtyzL8Z9QZTC/8LevmhHjhczORVK8Ce\n57LFWnGjW9F7csESjVVJdn92h1H2tMIkx+3zO7VELpd929FyIEyJTA/7c/PggNx5\nzcG2GdgvrtmrZOsCrm2a5IATupNnnrVQ8g5/1fWUbdHY7/RmkEpDmaTLxmN6Kvg=\n=pb+p\n-----END PGP SIGNATURE-----\n", "payload": "tree 8f0978b73a0ea71389df9528ecc1ffbb2d9e4fbf\nparent 635efdf69b20dc233516aad03ab14af80912cffe\nparent e2b9c66cc9d3228339d07cb5410f6cabdac97de8\nauthor Nick Cameron <nrc@ncameron.org> 1537400206 +1200\ncommitter GitHub <noreply@github.com> 1537400206 +1200\n\nMerge pull request #3036 from topecongiro/issue-2932\n\nCombine chain items only when the item gets orphaned otherwise"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd8549e0133cd4f29b152142b75d6e17288c4efb", "html_url": "https://github.com/rust-lang/rust/commit/cd8549e0133cd4f29b152142b75d6e17288c4efb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd8549e0133cd4f29b152142b75d6e17288c4efb/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "635efdf69b20dc233516aad03ab14af80912cffe", "url": "https://api.github.com/repos/rust-lang/rust/commits/635efdf69b20dc233516aad03ab14af80912cffe", "html_url": "https://github.com/rust-lang/rust/commit/635efdf69b20dc233516aad03ab14af80912cffe"}, {"sha": "e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2b9c66cc9d3228339d07cb5410f6cabdac97de8", "html_url": "https://github.com/rust-lang/rust/commit/e2b9c66cc9d3228339d07cb5410f6cabdac97de8"}], "stats": {"total": 307, "additions": 191, "deletions": 116}, "files": [{"sha": "aa1517167d82e5c6159b6dd433412b6c794a6750", "filename": "src/attr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -229,7 +229,8 @@ impl Rewrite for ast::MetaItem {\n                                 None,\n                                 &inner_meta_item.ident,\n                                 shape,\n-                            ).map_or(false, |s| s.len() + path.len() + 2 <= shape.width),\n+                            )\n+                            .map_or(false, |s| s.len() + path.len() + 2 <= shape.width),\n                             _ => false,\n                         }\n                     }"}, {"sha": "8676e6290e0a621a384acd850f5cfff781804abb", "filename": "src/bin/main.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -421,7 +421,8 @@ fn determine_operation(matches: &Matches) -> Result<Operation, ErrorKind> {\n             // we will do comparison later, so here tries to canonicalize first\n             // to get the expected behavior.\n             p.canonicalize().unwrap_or(p)\n-        }).collect();\n+        })\n+        .collect();\n \n     Ok(Operation::Format {\n         files,"}, {"sha": "eee102b6bf8b8ab03e0df774000cfd24b2798065", "filename": "src/cargo-fmt/main.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fcargo-fmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fcargo-fmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo-fmt%2Fmain.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -163,7 +163,8 @@ fn format_crate(\n             if verbosity == Verbosity::Verbose {\n                 println!(\"[{}] {:?}\", t.kind, t.path)\n             }\n-        }).map(|t| t.path)\n+        })\n+        .map(|t| t.path)\n         .collect();\n \n     run_rustfmt(&files, &rustfmt_args, verbosity)"}, {"sha": "36c89eef20dbd9d2f2e64e4a43105b0ddb71643a", "filename": "src/chains.rs", "status": "modified", "additions": 17, "deletions": 30, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -80,7 +80,6 @@ use utils::{\n \n use std::borrow::Cow;\n use std::cmp::min;\n-use std::iter;\n \n use syntax::source_map::{BytePos, Span};\n use syntax::{ast, ptr};\n@@ -132,8 +131,8 @@ impl ChainItemKind {\n     fn is_block_like(&self, context: &RewriteContext, reps: &str) -> bool {\n         match self {\n             ChainItemKind::Parent(ref expr) => is_block_expr(context, expr, reps),\n-            ChainItemKind::MethodCall(..) => reps.contains('\\n'),\n-            ChainItemKind::StructField(..)\n+            ChainItemKind::MethodCall(..)\n+            | ChainItemKind::StructField(..)\n             | ChainItemKind::TupleField(..)\n             | ChainItemKind::Comment(..) => false,\n         }\n@@ -559,7 +558,8 @@ impl<'a> ChainFormatterShared<'a> {\n             shape.width\n         } else {\n             min(shape.width, context.config.width_heuristics().chain_width)\n-        }.saturating_sub(almost_total);\n+        }\n+        .saturating_sub(almost_total);\n \n         let all_in_one_line = !self.children.iter().any(ChainItem::is_comment)\n             && self.rewrites.iter().all(|s| !s.contains('\\n'))\n@@ -625,12 +625,7 @@ impl<'a> ChainFormatterShared<'a> {\n         Some(())\n     }\n \n-    fn join_rewrites(\n-        &self,\n-        context: &RewriteContext,\n-        child_shape: Shape,\n-        block_like_iter: impl Iterator<Item = bool>,\n-    ) -> Option<String> {\n+    fn join_rewrites(&self, context: &RewriteContext, child_shape: Shape) -> Option<String> {\n         let connector = if self.fits_single_line {\n             // Yay, we can put everything on one line.\n             Cow::from(\"\")\n@@ -645,17 +640,13 @@ impl<'a> ChainFormatterShared<'a> {\n         let mut rewrite_iter = self.rewrites.iter();\n         let mut result = rewrite_iter.next().unwrap().clone();\n         let children_iter = self.children.iter();\n-        let iter = rewrite_iter.zip(block_like_iter).zip(children_iter);\n+        let iter = rewrite_iter.zip(children_iter);\n \n-        for ((rewrite, prev_is_block_like), chain_item) in iter {\n+        for (rewrite, chain_item) in iter {\n             match chain_item.kind {\n                 ChainItemKind::Comment(_, CommentPosition::Back) => result.push(' '),\n                 ChainItemKind::Comment(_, CommentPosition::Top) => result.push_str(&connector),\n-                _ => {\n-                    if !prev_is_block_like {\n-                        result.push_str(&connector);\n-                    }\n-                }\n+                _ => result.push_str(&connector),\n             }\n             result.push_str(&rewrite);\n         }\n@@ -667,15 +658,14 @@ impl<'a> ChainFormatterShared<'a> {\n // Formats a chain using block indent.\n struct ChainFormatterBlock<'a> {\n     shared: ChainFormatterShared<'a>,\n-    // For each rewrite, whether the corresponding item is block-like.\n-    is_block_like: Vec<bool>,\n+    root_ends_with_block: bool,\n }\n \n impl<'a> ChainFormatterBlock<'a> {\n     fn new(chain: &'a Chain) -> ChainFormatterBlock<'a> {\n         ChainFormatterBlock {\n             shared: ChainFormatterShared::new(chain),\n-            is_block_like: Vec::with_capacity(chain.children.len() + 1),\n+            root_ends_with_block: false,\n         }\n     }\n }\n@@ -703,33 +693,32 @@ impl<'a> ChainFormatter for ChainFormatterBlock<'a> {\n                 None => break,\n             }\n \n-            root_ends_with_block = item.kind.is_block_like(context, &root_rewrite);\n+            root_ends_with_block = last_line_extendable(&root_rewrite);\n \n             self.shared.children = &self.shared.children[1..];\n             if self.shared.children.is_empty() {\n                 break;\n             }\n         }\n-        self.is_block_like.push(root_ends_with_block);\n         self.shared.rewrites.push(root_rewrite);\n+        self.root_ends_with_block = root_ends_with_block;\n         Some(())\n     }\n \n     fn child_shape(&self, context: &RewriteContext, shape: Shape) -> Option<Shape> {\n         Some(\n-            if self.is_block_like[0] {\n+            if self.root_ends_with_block {\n                 shape.block_indent(0)\n             } else {\n                 shape.block_indent(context.config.tab_spaces())\n-            }.with_max_width(context.config),\n+            }\n+            .with_max_width(context.config),\n         )\n     }\n \n     fn format_children(&mut self, context: &RewriteContext, child_shape: Shape) -> Option<()> {\n         for item in &self.shared.children[..self.shared.children.len() - 1] {\n             let rewrite = item.rewrite(context, child_shape)?;\n-            self.is_block_like\n-                .push(item.kind.is_block_like(context, &rewrite));\n             self.shared.rewrites.push(rewrite);\n         }\n         Some(())\n@@ -746,8 +735,7 @@ impl<'a> ChainFormatter for ChainFormatterBlock<'a> {\n     }\n \n     fn join_rewrites(&self, context: &RewriteContext, child_shape: Shape) -> Option<String> {\n-        self.shared\n-            .join_rewrites(context, child_shape, self.is_block_like.iter().cloned())\n+        self.shared.join_rewrites(context, child_shape)\n     }\n \n     fn pure_root(&mut self) -> Option<String> {\n@@ -841,8 +829,7 @@ impl<'a> ChainFormatter for ChainFormatterVisual<'a> {\n     }\n \n     fn join_rewrites(&self, context: &RewriteContext, child_shape: Shape) -> Option<String> {\n-        self.shared\n-            .join_rewrites(context, child_shape, iter::repeat(false))\n+        self.shared.join_rewrites(context, child_shape)\n     }\n \n     fn pure_root(&mut self) -> Option<String> {"}, {"sha": "9546451d7ca9961be3801ee860cf06fae5b41536", "filename": "src/closures.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -198,7 +198,8 @@ fn rewrite_closure_expr(\n             } else {\n                 Some(rw)\n             }\n-        }).map(|rw| format!(\"{} {}\", prefix, rw))\n+        })\n+        .map(|rw| format!(\"{} {}\", prefix, rw))\n }\n \n // Rewrite closure whose body is block.\n@@ -367,8 +368,10 @@ where\n                 .map(|e| match e.node {\n                     ast::ExprKind::Closure(..) => true,\n                     _ => false,\n-                }).unwrap_or(false)\n-        }).count()\n+                })\n+                .unwrap_or(false)\n+        })\n+        .count()\n         > 1\n }\n "}, {"sha": "e79b9011cbf44cae3aa437b20d80e2909bac5bdf", "filename": "src/comment.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -370,7 +370,8 @@ fn rewrite_comment_inner(\n             }\n \n             line\n-        }).map(|s| left_trim_comment_line(s, &style))\n+        })\n+        .map(|s| left_trim_comment_line(s, &style))\n         .map(|(line, has_leading_whitespace)| {\n             if orig.starts_with(\"/*\") && line_breaks == 0 {\n                 (\n@@ -542,7 +543,8 @@ fn trim_custom_comment_prefix(s: &str) -> String {\n             } else {\n                 line\n             }\n-        }).collect::<Vec<_>>()\n+        })\n+        .collect::<Vec<_>>()\n         .join(\"\\n\")\n }\n \n@@ -630,7 +632,8 @@ fn light_rewrite_comment(\n             };\n             // Preserve markdown's double-space line break syntax in doc comment.\n             trim_right_unless_two_whitespaces(left_trimmed, is_doc_comment)\n-        }).collect();\n+        })\n+        .collect();\n     Some(lines.join(&format!(\"\\n{}\", offset.to_string(config))))\n }\n \n@@ -1455,7 +1458,8 @@ mod test {\n             .filter_map(|(s, c)| match s {\n                 FullCodeCharKind::Normal | FullCodeCharKind::InString => Some(c),\n                 _ => None,\n-            }).collect()\n+            })\n+            .collect()\n     }\n \n     #[test]"}, {"sha": "84ab0a8fc075db335b93ea556819d1d38d7cf608", "filename": "src/config/file_lines.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fconfig%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fconfig%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Ffile_lines.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -216,7 +216,8 @@ impl FileLines {\n                 .map(|(file, range)| JsonSpan {\n                     file: file.to_owned(),\n                     range: (range.lo, range.hi),\n-                }).collect(),\n+                })\n+                .collect(),\n         }\n     }\n "}, {"sha": "7dca87e17775382159f264dc1a6e4332168c5a73", "filename": "src/config/options.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -394,7 +394,8 @@ impl IgnoreList {\n                     path.push(s);\n                     path\n                 }\n-            }).collect();\n+            })\n+            .collect();\n     }\n \n     fn skip_file_inner(&self, file: &Path) -> bool {"}, {"sha": "674f719b5c74ba8957aece1eb818d6805fb73f29", "filename": "src/expr.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -1029,7 +1029,8 @@ impl<'a> Rewrite for ControlFlow<'a> {\n                         false,\n                         true,\n                         mk_sp(else_block.span.lo(), self.span.hi()),\n-                    ).rewrite(context, shape)\n+                    )\n+                    .rewrite(context, shape)\n                 }\n                 ast::ExprKind::If(ref cond, ref if_block, ref next_else_block) => {\n                     ControlFlow::new_if(\n@@ -1040,7 +1041,8 @@ impl<'a> Rewrite for ControlFlow<'a> {\n                         false,\n                         true,\n                         mk_sp(else_block.span.lo(), self.span.hi()),\n-                    ).rewrite(context, shape)\n+                    )\n+                    .rewrite(context, shape)\n                 }\n                 _ => {\n                     last_in_chain = true;\n@@ -1237,7 +1239,8 @@ fn rewrite_string_lit(context: &RewriteContext, span: Span, shape: Shape) -> Opt\n                             new_indent.to_string(context.config),\n                             line.trim_left()\n                         )\n-                    }).collect::<Vec<_>>()\n+                    })\n+                    .collect::<Vec<_>>()\n                     .join(\"\\n\")\n                     .trim_left(),\n             );\n@@ -1486,7 +1489,12 @@ fn rewrite_index(\n             .offset_left(offset)\n             .and_then(|shape| shape.sub_width(1 + rhs_overhead))\n     } else {\n-        shape.visual_indent(offset).sub_width(offset + 1)\n+        match context.config.indent_style() {\n+            IndentStyle::Block => shape\n+                .offset_left(offset)\n+                .and_then(|shape| shape.sub_width(1)),\n+            IndentStyle::Visual => shape.visual_indent(offset).sub_width(offset + 1),\n+        }\n     };\n     let orig_index_rw = index_shape.and_then(|s| index.rewrite(context, s));\n "}, {"sha": "d940c35f1c734532b416fef590c2fa5a208f32e9", "filename": "src/formatting.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -240,7 +240,8 @@ impl FormattingError {\n                     fl.file\n                         .get_line(fl.lines[0].line_index)\n                         .map(|l| l.into_owned())\n-                }).unwrap_or_else(String::new),\n+                })\n+                .unwrap_or_else(String::new),\n         }\n     }\n "}, {"sha": "4ad004d3a8b16aa7640e84f08779301f5eb9399a", "filename": "src/git-rustfmt/main.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fgit-rustfmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fgit-rustfmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgit-rustfmt%2Fmain.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -46,7 +46,8 @@ fn prune_files(files: Vec<&str>) -> Vec<&str> {\n                 return true;\n             }\n             pruned_prefixes.iter().all(|pp| !f.starts_with(pp))\n-        }).collect()\n+        })\n+        .collect()\n }\n \n fn git_diff(commits: &str) -> String {"}, {"sha": "962d82868d78b8bc4fe6723bfe404d1cc6e16486", "filename": "src/imports.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -44,7 +44,8 @@ impl<'a> FmtVisitor<'a> {\n             Some(item.vis.clone()),\n             Some(item.span.lo()),\n             Some(item.attrs.clone()),\n-        ).rewrite_top_level(&self.get_context(), shape);\n+        )\n+        .rewrite_top_level(&self.get_context(), shape);\n         match rw {\n             Some(ref s) if s.is_empty() => {\n                 // Format up to last newline\n@@ -291,7 +292,8 @@ impl UseTree {\n                     } else {\n                         Some(item.attrs.clone())\n                     },\n-                ).normalize(),\n+                )\n+                .normalize(),\n             ),\n             _ => None,\n         }\n@@ -345,13 +347,15 @@ impl UseTree {\n                     context.snippet_provider.span_after(a.span, \"{\"),\n                     a.span.hi(),\n                     false,\n-                ).collect();\n+                )\n+                .collect();\n                 result.path.push(UseSegment::List(\n                     list.iter()\n                         .zip(items.into_iter())\n                         .map(|(t, list_item)| {\n                             Self::from_ast(context, &t.0, Some(list_item), None, None, None)\n-                        }).collect(),\n+                        })\n+                        .collect(),\n                 ));\n             }\n             UseTreeKind::Simple(ref rename, ..) => {"}, {"sha": "46abe086717632dc2835b99d9973f6ac6ca85a18", "filename": "src/items.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -460,7 +460,8 @@ impl<'a> FmtVisitor<'a> {\n             self.block_indent,\n             mk_sp(span.lo(), body_start),\n             last_line_width(&enum_header),\n-        ).unwrap();\n+        )\n+        .unwrap();\n         self.push_str(&generics_str);\n \n         self.last_pos = body_start;\n@@ -517,7 +518,8 @@ impl<'a> FmtVisitor<'a> {\n                 body_lo,\n                 body_hi,\n                 false,\n-            ).collect()\n+            )\n+            .collect()\n         };\n         let mut items: Vec<_> =\n             itemize_list_with(self.config.width_heuristics().struct_variant_width);\n@@ -1705,7 +1707,8 @@ fn rewrite_static(\n             lhs,\n             &**expr,\n             Shape::legacy(remaining_width, offset.block_only()),\n-        ).and_then(|res| recover_comment_removed(res, static_parts.span, context))\n+        )\n+        .and_then(|res| recover_comment_removed(res, static_parts.span, context))\n         .map(|s| if s.ends_with(';') { s } else { s + \";\" })\n     } else {\n         Some(format!(\"{}{};\", prefix, ty_str))\n@@ -2240,7 +2243,8 @@ fn rewrite_args(\n         .map(|arg| {\n             arg.rewrite(context, Shape::legacy(multi_line_budget, arg_indent))\n                 .unwrap_or_else(|| context.snippet(arg.span()).to_owned())\n-        }).collect::<Vec<_>>();\n+        })\n+        .collect::<Vec<_>>();\n \n     // Account for sugary self.\n     // FIXME: the comment for the self argument is dropped. This is blocked\n@@ -2822,7 +2826,8 @@ impl Rewrite for ast::ForeignItem {\n                 span,\n                 false,\n                 false,\n-            ).map(|(s, _)| format!(\"{};\", s)),\n+            )\n+            .map(|(s, _)| format!(\"{};\", s)),\n             ast::ForeignItemKind::Static(ref ty, is_mutable) => {\n                 // FIXME(#21): we're dropping potential comments in between the\n                 // function keywords here."}, {"sha": "282519286faa8756988546c2ba8864e69f76773b", "filename": "src/macros.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -287,7 +287,8 @@ pub fn rewrite_macro_inner(\n                 } else {\n                     Some(SeparatorTactic::Never)\n                 },\n-            ).map(|rw| match position {\n+            )\n+            .map(|rw| match position {\n                 MacroPosition::Item => format!(\"{};\", rw),\n                 _ => rw,\n             })\n@@ -418,7 +419,8 @@ pub fn rewrite_macro_def(\n         context.snippet_provider.span_after(span, \"{\"),\n         span.hi(),\n         false,\n-    ).collect::<Vec<_>>();\n+    )\n+    .collect::<Vec<_>>();\n \n     let fmt = ListFormatting::new(arm_shape, context.config)\n         .separator(if def.legacy { \";\" } else { \"\" })\n@@ -1141,7 +1143,8 @@ fn indent_macro_snippet(\n                 FullCodeCharKind::InString | FullCodeCharKind::EndString => None,\n                 _ => prefix_space_width,\n             }\n-        }).min()?;\n+        })\n+        .min()?;\n \n     Some(\n         first_line + \"\\n\" + &trimmed_lines\n@@ -1157,7 +1160,8 @@ fn indent_macro_snippet(\n                     }\n                     None => String::new(),\n                 },\n-            ).collect::<Vec<_>>()\n+            )\n+            .collect::<Vec<_>>()\n             .join(\"\\n\"),\n     )\n }\n@@ -1322,7 +1326,8 @@ impl MacroBranch {\n                     }\n                     (s + l + \"\\n\", !kind.is_string() || l.ends_with('\\\\'))\n                 },\n-            ).0;\n+            )\n+            .0;\n \n         // Undo our replacement of macro variables.\n         // FIXME: this could be *much* more efficient."}, {"sha": "acf6d7b4d387eab696463c142cef736f0e1f22e6", "filename": "src/overflow.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -52,7 +52,8 @@ where\n         item_max_width,\n         force_separator_tactic,\n         None,\n-    ).rewrite(shape)\n+    )\n+    .rewrite(shape)\n }\n \n pub fn rewrite_with_angle_brackets<T>(\n@@ -76,7 +77,8 @@ where\n         context.config.max_width(),\n         None,\n         None,\n-    ).rewrite(shape)\n+    )\n+    .rewrite(shape)\n }\n \n pub fn rewrite_with_square_brackets<T>(\n@@ -107,7 +109,8 @@ where\n         context.config.width_heuristics().array_width,\n         force_separator_tactic,\n         Some((\"[\", \"]\")),\n-    ).rewrite(shape)\n+    )\n+    .rewrite(shape)\n }\n \n struct Context<'a, T: 'a> {\n@@ -242,7 +245,8 @@ impl<'a, T: 'a + Rewrite + ToExpr + Spanned> Context<'a, T> {\n                 list_items,\n                 self.one_line_shape,\n                 self.item_max_width,\n-            ).and_then(|arg_shape| {\n+            )\n+            .and_then(|arg_shape| {\n                 self.rewrite_last_item_with_overflow(\n                     &mut list_items[self.items.len() - 1],\n                     arg_shape,\n@@ -495,7 +499,8 @@ where\n     Shape {\n         width: min(args_max_width, shape.width),\n         ..shape\n-    }.offset_left(offset)\n+    }\n+    .offset_left(offset)\n }\n \n fn shape_from_indent_style("}, {"sha": "f078022b9e075f869616d508b1a24329cc75db86", "filename": "src/pairs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fpairs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fpairs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpairs.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -124,7 +124,8 @@ fn rewrite_pairs_multiline<T: Rewrite>(\n     let nested_shape = (match context.config.indent_style() {\n         IndentStyle::Visual => shape.visual_indent(0),\n         IndentStyle::Block => shape.block_indent(context.config.tab_spaces()),\n-    }).with_max_width(&context.config)\n+    })\n+    .with_max_width(&context.config)\n     .sub_width(rhs_offset)?;\n \n     let indent_str = nested_shape.indent.to_string_with_newline(context.config);"}, {"sha": "13fea046aafaf4c5680de2dd527800fa62a61791", "filename": "src/patterns.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -397,7 +397,8 @@ fn count_wildcard_suffix_len(\n         context.snippet_provider.span_after(span, \"(\"),\n         span.hi() - BytePos(1),\n         false,\n-    ).collect();\n+    )\n+    .collect();\n \n     for item in items.iter().rev().take_while(|i| match i.item {\n         Some(ref internal_string) if internal_string == \"_\" => true,"}, {"sha": "f990e68656590a601c07d82a0db0cbea6237b641", "filename": "src/reorder.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -140,7 +140,8 @@ fn rewrite_reorderable_items(\n                 .map(|use_tree| ListItem {\n                     item: use_tree.rewrite_top_level(context, nested_shape),\n                     ..use_tree.list_item.unwrap_or_else(ListItem::empty)\n-                }).collect();\n+                })\n+                .collect();\n \n             wrap_reorderable_items(context, &item_vec, nested_shape)\n         }\n@@ -237,7 +238,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                         last = current;\n                         in_same_group\n                     })\n-            }).count();\n+            })\n+            .count();\n         let items = &items[..item_length];\n \n         let at_least_one_in_file_lines = items"}, {"sha": "dbe1c05406ab44522c071c0c1e0ea8fa702bff91", "filename": "src/rustfmt_diff.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Frustfmt_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Frustfmt_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustfmt_diff.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -207,7 +207,8 @@ where\n             out,\n             \"{} {} {}\",\n             mismatch.line_number_orig, num_removed, num_added\n-        ).unwrap();\n+        )\n+        .unwrap();\n \n         for line in mismatch.lines {\n             match line {"}, {"sha": "a9015cedf6a4f0c83e9b5b57abf7dab633d237a5", "filename": "src/test/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -514,7 +514,8 @@ fn read_significant_comments(file_name: &Path) -> HashMap<String, String> {\n                         .to_owned(),\n                 )\n             })\n-        }).collect()\n+        })\n+        .collect()\n }\n \n // Compare output to input.\n@@ -882,7 +883,8 @@ fn configuration_snippet_tests() {\n         let mut file_iter = BufReader::new(\n             fs::File::open(Path::new(CONFIGURATIONS_FILE_NAME))\n                 .expect(&format!(\"Couldn't read file {}\", CONFIGURATIONS_FILE_NAME)),\n-        ).lines()\n+        )\n+        .lines()\n         .map(|l| l.unwrap())\n         .enumerate();\n         let mut code_blocks: Vec<ConfigCodeBlock> = Vec::new();\n@@ -970,6 +972,7 @@ fn verify_check_works() {\n         rustfmt().to_str().unwrap(),\n         \"--check\",\n         temp_file.path.to_str().unwrap(),\n-    ]).succeeds()\n+    ])\n+    .succeeds()\n     .unwrap();\n }"}, {"sha": "5f71dd6bdc455772a85bf71509fb3e5f8a5905a9", "filename": "src/types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -844,7 +844,8 @@ fn rewrite_lifetime_param(\n         .filter(|p| match p.kind {\n             ast::GenericParamKind::Lifetime => true,\n             _ => false,\n-        }).map(|lt| lt.rewrite(context, shape))\n+        })\n+        .map(|lt| lt.rewrite(context, shape))\n         .collect::<Option<Vec<_>>>()?\n         .join(\", \");\n     if result.is_empty() {"}, {"sha": "d18fa4b9b7587a8ab25b4e7bcad33215d358ac4f", "filename": "src/vertical.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -200,12 +200,14 @@ fn struct_field_prefix_max_min_width<T: AlignedItem>(\n                     Some(field_str.len())\n                 }\n             })\n-        }).fold(Some((0, ::std::usize::MAX)), |acc, len| match (acc, len) {\n+        })\n+        .fold(Some((0, ::std::usize::MAX)), |acc, len| match (acc, len) {\n             (Some((max_len, min_len)), Some(len)) => {\n                 Some((cmp::max(max_len, len), cmp::min(min_len, len)))\n             }\n             _ => None,\n-        }).unwrap_or((0, 0))\n+        })\n+        .unwrap_or((0, 0))\n }\n \n fn rewrite_aligned_items_inner<T: AlignedItem>(\n@@ -236,7 +238,8 @@ fn rewrite_aligned_items_inner<T: AlignedItem>(\n         span.lo(),\n         span.hi(),\n         false,\n-    ).collect::<Vec<_>>();\n+    )\n+    .collect::<Vec<_>>();\n \n     let tactic = definitive_tactic(\n         &items,"}, {"sha": "30752826a856368fa9d974b05c264d09c991d1b3", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -158,7 +158,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                         item.attrs.first()\n                     } else {\n                         first_stmt.attrs().first()\n-                    }.and_then(|attr| {\n+                    }\n+                    .and_then(|attr| {\n                         // Some stmts can have embedded attributes.\n                         // e.g. `match { #![attr] ... }`\n                         let attr_lo = attr.span.lo();"}, {"sha": "2945f836a6b1d4b3950258ed111c58b0b43cc2fe", "filename": "tests/target/chains.rs", "status": "modified", "additions": 42, "deletions": 22, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/tests%2Ftarget%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/tests%2Ftarget%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -38,7 +38,8 @@ fn main() {\n         .method_call_a(aaaaa, bbbbb, |c| {\n             let x = c;\n             x\n-        }).method_call_b(aaaaa, bbbbb, |c| {\n+        })\n+        .method_call_b(aaaaa, bbbbb, |c| {\n             let x = c;\n             x\n         });\n@@ -55,7 +56,8 @@ fn main() {\n     body.fold(Body::new(), |mut body, chunk| {\n         body.extend(chunk);\n         Ok(body)\n-    }).and_then(move |body| {\n+    })\n+    .and_then(move |body| {\n         let req = Request::from_parts(parts, body);\n         f(req).map_err(|_| io::Error::new(io::ErrorKind::Other, \"\"))\n     });\n@@ -64,7 +66,8 @@ fn main() {\n         .map(|x| {\n             x += 1;\n             x\n-        }).filter(some_mod::some_filter)\n+        })\n+        .filter(some_mod::some_filter)\n }\n \n fn floaters() {\n@@ -76,24 +79,27 @@ fn floaters() {\n     let x = Foo {\n         field1: val1,\n         field2: val2,\n-    }.method_call()\n+    }\n+    .method_call()\n     .method_call();\n \n     let y = if cond {\n         val1\n     } else {\n         val2\n-    }.method_call();\n+    }\n+    .method_call();\n \n     {\n         match x {\n             PushParam => {\n                 // params are 1-indexed\n                 stack.push(\n                     mparams[match cur.to_digit(10) {\n-                                Some(d) => d as usize - 1,\n-                                None => return Err(\"bad param number\".to_owned()),\n-                            }].clone(),\n+                        Some(d) => d as usize - 1,\n+                        None => return Err(\"bad param number\".to_owned()),\n+                    }]\n+                    .clone(),\n                 );\n             }\n         }\n@@ -103,28 +109,34 @@ fn floaters() {\n         some();\n     } else {\n         none();\n-    }.bar()\n+    }\n+    .bar()\n     .baz();\n \n     Foo {\n         x: val,\n-    }.baz(|| {\n+    }\n+    .baz(|| {\n         force();\n         multiline();\n-    }).quux();\n+    })\n+    .quux();\n \n     Foo {\n         y: i_am_multi_line,\n         z: ok,\n-    }.baz(|| {\n+    }\n+    .baz(|| {\n         force();\n         multiline();\n-    }).quux();\n+    })\n+    .quux();\n \n     a + match x {\n         true => \"yay!\",\n         false => \"boo!\",\n-    }.bar()\n+    }\n+    .bar()\n }\n \n fn is_replaced_content() -> bool {\n@@ -184,7 +196,8 @@ fn issue1392() {\n         else {\n             b();\n         }\n-        \"#.trim(),\n+        \"#\n+        .trim(),\n     );\n }\n \n@@ -234,7 +247,8 @@ impl Foo {\n                         }\n                     }\n                 })\n-            }).collect();\n+            })\n+            .collect();\n     }\n }\n \n@@ -247,19 +261,23 @@ fn issue2415() {\n         Ok((|| {\n             // stuff\n             Some(value.to_string())\n-        })().ok_or(\"\")?)\n-    })().unwrap_or_else(|_: Box<::std::error::Error>| String::from(\"\"));\n+        })()\n+        .ok_or(\"\")?)\n+    })()\n+    .unwrap_or_else(|_: Box<::std::error::Error>| String::from(\"\"));\n }\n \n impl issue_2786 {\n     fn thing(&self) {\n         foo(|a| {\n             println!(\"a\");\n             println!(\"b\");\n-        }).bar(|c| {\n+        })\n+        .bar(|c| {\n             println!(\"a\");\n             println!(\"b\");\n-        }).baz(|c| {\n+        })\n+        .baz(|c| {\n             println!(\"a\");\n             println!(\"b\");\n         })\n@@ -271,10 +289,12 @@ fn issue_2773() {\n     bar.or_else(|| {\n         // do stuff\n         None\n-    }).or_else(|| {\n+    })\n+    .or_else(|| {\n         // do other stuff\n         None\n-    }).and_then(|val| {\n+    })\n+    .and_then(|val| {\n         // do this stuff\n         None\n     });"}, {"sha": "f3107d19c2fbfc0322672e9208947b39d95f7f09", "filename": "tests/target/closure.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/tests%2Ftarget%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/tests%2Ftarget%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fclosure.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -171,7 +171,8 @@ fn issue1329() {\n         .map(|x| {\n             x += 1;\n             x\n-        }).filter\n+        })\n+        .filter\n }\n \n fn issue325() {"}, {"sha": "19c44dc019a264b1a384786b0eaf720c32953f87", "filename": "tests/target/configs/indent_style/block_call.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/tests%2Ftarget%2Fconfigs%2Findent_style%2Fblock_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/tests%2Ftarget%2Fconfigs%2Findent_style%2Fblock_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Findent_style%2Fblock_call.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -61,7 +61,8 @@ fn issue1420() {\n         # Getting started\n         ...\n     \"#,\n-    ).running(waltz)\n+    )\n+    .running(waltz)\n }\n \n // #1563\n@@ -117,7 +118,8 @@ impl Cursor {\n                     debug_assert_eq!(n, -1);\n                     None\n                 }\n-            }).or_else(|| {\n+            })\n+            .or_else(|| {\n                 let canonical = self.canonical();\n                 if canonical != *self {\n                     canonical.num_template_args()"}, {"sha": "3d452cbde39b55605b2c770fcf50fe399edaeddc", "filename": "tests/target/expr-block.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/tests%2Ftarget%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/tests%2Ftarget%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr-block.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -141,7 +141,8 @@ fn issue_1450() {\n             Relaxed,\n             Release,\n             Relaxed,\n-        ).is_ok()\n+        )\n+        .is_ok()\n     {\n         return;\n     }"}, {"sha": "13820ec293faf74fc50dc6ef6e4923e7238e1e29", "filename": "tests/target/file-lines-1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/tests%2Ftarget%2Ffile-lines-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/tests%2Ftarget%2Ffile-lines-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffile-lines-1.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -4,7 +4,8 @@ fn floaters() {\n     let x = Foo {\n         field1: val1,\n         field2: val2,\n-    }.method_call()\n+    }\n+    .method_call()\n     .method_call();\n \n     let y = if cond {"}, {"sha": "77d6fb26355813a84e5fd18b68a934d3af8482a9", "filename": "tests/target/file-lines-3.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/tests%2Ftarget%2Ffile-lines-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/tests%2Ftarget%2Ffile-lines-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffile-lines-3.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -4,7 +4,8 @@ fn floaters() {\n     let x = Foo {\n         field1: val1,\n         field2: val2,\n-    }.method_call()\n+    }\n+    .method_call()\n     .method_call();\n \n     let y = if cond { val1 } else { val2 }.method_call();"}, {"sha": "902765302eacb775ffe609de7ff7bd9839fc9d74", "filename": "tests/target/issue-1681.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/tests%2Ftarget%2Fissue-1681.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/tests%2Ftarget%2Fissue-1681.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1681.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -16,5 +16,6 @@ fn foo() {\n                 Ok(entry.insert(try!(statement)))\n             }\n         }\n-    }).map(MaybeCached::Cached)\n+    })\n+    .map(MaybeCached::Cached)\n }"}, {"sha": "b7176ec66f85047b2cfe4b91cf09848242ff9986", "filename": "tests/target/issue-2759.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/tests%2Ftarget%2Fissue-2759.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/tests%2Ftarget%2Fissue-2759.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2759.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -55,7 +55,8 @@ fn bar() {}\n ///                 .resource(\"/\", |r| r.f(|r| HttpResponse::Ok()))\n ///                 .boxed(),\n ///         ]\n-///     }).bind(\"127.0.0.1:8080\")\n+///     })\n+///     .bind(\"127.0.0.1:8080\")\n ///     .unwrap()\n ///     .run()\n ///     # });"}, {"sha": "e2c3247f1441da96b1c1eff88e658a0fa6594607", "filename": "tests/target/issue-2896.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/tests%2Ftarget%2Fissue-2896.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/tests%2Ftarget%2Fissue-2896.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2896.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -52,7 +52,8 @@ fn main() {\n                         assert!(row_sum_a > 0);\n                         (item_b, (item_a, num_cooccurrences, row_sum_a))\n                     },\n-                ).join_map(\n+                )\n+                .join_map(\n                     &row_sums,\n                     |&item_b, &(item_a, num_cooccurrences, row_sum_a), &row_sum_b| {\n                         assert!(row_sum_a > 0);\n@@ -159,5 +160,6 @@ fn main() {\n                 worker.step();\n             }\n         }\n-    }).unwrap();\n+    })\n+    .unwrap();\n }"}, {"sha": "400ae0bcdad80b8ee084ffd121e59b58517a1723", "filename": "tests/target/macros.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -173,7 +173,8 @@ fn issue1739() {\n         ..,\n         init_size[1] - extreeeeeeeeeeeeeeeeeeeeeeeem..init_size[1],\n         ..\n-    ]).par_map_inplace(|el| *el = 0.);\n+    ])\n+    .par_map_inplace(|el| *el = 0.);\n }\n \n fn issue_1885() {\n@@ -183,7 +184,8 @@ fn issue_1885() {\n             chan_select! {\n                 rx.recv() => {}\n             }\n-        }).collect::<Vec<_>>();\n+        })\n+        .collect::<Vec<_>>();\n }\n \n fn issue_1917() {"}, {"sha": "cda0ed2abe57fe294762080648d2c8a82ae01c1b", "filename": "tests/target/match.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -381,7 +381,8 @@ fn issue1456() {\n                     .iter()\n                     .map(|node| {\n                         XPathNodeReader::new(node, &context).and_then(|r| ArtistRef::from_xml(&r))\n-                    }).collect();\n+                    })\n+                    .collect();\n                 res?\n             }\n             _ => Vec::new(),"}, {"sha": "fe7190d0abaa30ff96774c177be9768aa8e8b028", "filename": "tests/target/nested-visual-block.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd8549e0133cd4f29b152142b75d6e17288c4efb/tests%2Ftarget%2Fnested-visual-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8549e0133cd4f29b152142b75d6e17288c4efb/tests%2Ftarget%2Fnested-visual-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fnested-visual-block.rs?ref=cd8549e0133cd4f29b152142b75d6e17288c4efb", "patch": "@@ -29,7 +29,8 @@ fn main() {\n                     expr.rewrite(\n                         inner_context,\n                         &Constraints::new(try_opt!(v_budget.checked_sub(2)), indent + 2),\n-                    ).map(|s| format!(\"..{}\", s))\n+                    )\n+                    .map(|s| format!(\"..{}\", s))\n                 }\n             }\n         },"}]}