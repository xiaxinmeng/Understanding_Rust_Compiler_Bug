{"sha": "fa60b7212373a0984c014c2ada74a0538b5b324c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNjBiNzIxMjM3M2EwOTg0YzAxNGMyYWRhNzRhMDUzOGI1YjMyNGM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-03-27T08:38:51Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-03-28T08:12:04Z"}, "message": "Fix stable hashing of AllocIds", "tree": {"sha": "71bdebe4d72026f5dfca79afa16dcd745cb0a983", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71bdebe4d72026f5dfca79afa16dcd745cb0a983"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa60b7212373a0984c014c2ada74a0538b5b324c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCgBKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAlq7TlYsHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MASI\nRA/+PeBCi6TV/oJ/4WttA1XKUOpdtAt2VDZnxJVuoVzqyGvfCfOWptfx1AuJxN+Y\n4lEVf0ZgC4l/K3I94qpLzw1Ycze6fZ1FR9Mm8dl7JAKU6IFvpirFKM95N5yB/FBo\nAjz1D+CVfPybW5JCNDjcnmFU4orIxT7JreC6MjtOUKtaROLz3Xixt0KSICV9UbTf\nXvYBU7FpIlzS/FUNYynhTtV0G/NXQhMWt1yeIILMltIEJUEGQjKUr5aH8DAmLsak\nD3Ga2tDHp6Ih7p5wqZMzxZV3KQTersTjZPwJwZV8hwdNSNOBbXkZOMU4caP+Eg2f\nj+7Ebdm97c2UJdM7nUwJVPXGvtBZWnjPjAPiZZ65o1UA5+K3MqcYn6FvJTi4451Q\nhj4uOgAUZ6H5fIWgyefe/lBVyH/SSB+5Zv1ln/CUmWmcjanatnsPLLZN/Zion4r6\ny899i1LC7mfuequTWD+O3YpUEjODQfLQT3aEO2ILFxHQQIesm7XMkIXwy/8gMEPs\nPRx2laZxiaCwRcwTMhPJtj4HFmM8E24HkTJ+I83BgDgwE5ko0s5EU/+S0fyp727u\nwhB+0htxvfXmKpwiaoOgVoqASGp7seDu10NswJa2hSIKhe1KoCd/6NudxpIlgoNu\nRyWl5WlaNE1FPAl6lLTp/JzVT05oa70nP3FeCWH68q6JV6o=\n=HAlP\n-----END PGP SIGNATURE-----", "payload": "tree 71bdebe4d72026f5dfca79afa16dcd745cb0a983\nparent a0b0f5fba5d7bf18b24d1fa0e454a4fe871fecee\nauthor Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1522139931 +0200\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1522224724 +0200\n\nFix stable hashing of AllocIds\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa60b7212373a0984c014c2ada74a0538b5b324c", "html_url": "https://github.com/rust-lang/rust/commit/fa60b7212373a0984c014c2ada74a0538b5b324c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa60b7212373a0984c014c2ada74a0538b5b324c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0b0f5fba5d7bf18b24d1fa0e454a4fe871fecee", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0b0f5fba5d7bf18b24d1fa0e454a4fe871fecee", "html_url": "https://github.com/rust-lang/rust/commit/a0b0f5fba5d7bf18b24d1fa0e454a4fe871fecee"}], "stats": {"total": 62, "additions": 50, "deletions": 12}, "files": [{"sha": "04b725957b627f41aef542b66288f58ea5c25fb4", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa60b7212373a0984c014c2ada74a0538b5b324c/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa60b7212373a0984c014c2ada74a0538b5b324c/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=fa60b7212373a0984c014c2ada74a0538b5b324c", "patch": "@@ -15,6 +15,7 @@ use hir::map::definitions::Definitions;\n use ich::{self, CachingCodemapView, Fingerprint};\n use middle::cstore::CrateStore;\n use ty::{TyCtxt, fast_reject};\n+use mir::interpret::AllocId;\n use session::Session;\n \n use std::cmp::Ord;\n@@ -59,6 +60,8 @@ pub struct StableHashingContext<'a> {\n     // CachingCodemapView, so we initialize it lazily.\n     raw_codemap: &'a CodeMap,\n     caching_codemap: Option<CachingCodemapView<'a>>,\n+\n+    pub(super) alloc_id_recursion_tracker: FxHashSet<AllocId>,\n }\n \n #[derive(PartialEq, Eq, Clone, Copy)]\n@@ -102,6 +105,7 @@ impl<'a> StableHashingContext<'a> {\n             hash_spans: hash_spans_initial,\n             hash_bodies: true,\n             node_id_hashing_mode: NodeIdHashingMode::HashDefPath,\n+            alloc_id_recursion_tracker: Default::default(),\n         }\n     }\n "}, {"sha": "832f49d5b2368175b633dd433eb0f2cf96f8036e", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fa60b7212373a0984c014c2ada74a0538b5b324c/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa60b7212373a0984c014c2ada74a0538b5b324c/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=fa60b7212373a0984c014c2ada74a0538b5b324c", "patch": "@@ -379,13 +379,13 @@ impl_stable_hash_for!(struct mir::interpret::MemoryPointer {\n });\n \n enum AllocDiscriminant {\n-    Static,\n-    Constant,\n+    Alloc,\n+    ExternStatic,\n     Function,\n }\n impl_stable_hash_for!(enum self::AllocDiscriminant {\n-    Static,\n-    Constant,\n+    Alloc,\n+    ExternStatic,\n     Function\n });\n \n@@ -397,17 +397,23 @@ impl<'a> HashStable<StableHashingContext<'a>> for mir::interpret::AllocId {\n     ) {\n         ty::tls::with_opt(|tcx| {\n             let tcx = tcx.expect(\"can't hash AllocIds during hir lowering\");\n-            if let Some(def_id) = tcx.interpret_interner.get_corresponding_static_def_id(*self) {\n-                AllocDiscriminant::Static.hash_stable(hcx, hasher);\n-                // statics are unique via their DefId\n-                def_id.hash_stable(hcx, hasher);\n-            } else if let Some(alloc) = tcx.interpret_interner.get_alloc(*self) {\n-                // not a static, can't be recursive, hash the allocation\n-                AllocDiscriminant::Constant.hash_stable(hcx, hasher);\n-                alloc.hash_stable(hcx, hasher);\n+            if let Some(alloc) = tcx.interpret_interner.get_alloc(*self) {\n+                AllocDiscriminant::Alloc.hash_stable(hcx, hasher);\n+                if !hcx.alloc_id_recursion_tracker.insert(*self) {\n+                    tcx\n+                        .interpret_interner\n+                        .get_corresponding_static_def_id(*self)\n+                        .hash_stable(hcx, hasher);\n+                    alloc.hash_stable(hcx, hasher);\n+                    assert!(hcx.alloc_id_recursion_tracker.remove(self));\n+                }\n             } else if let Some(inst) = tcx.interpret_interner.get_fn(*self) {\n                 AllocDiscriminant::Function.hash_stable(hcx, hasher);\n                 inst.hash_stable(hcx, hasher);\n+            } else if let Some(def_id) = tcx.interpret_interner\n+                                            .get_corresponding_static_def_id(*self) {\n+                AllocDiscriminant::ExternStatic.hash_stable(hcx, hasher);\n+                def_id.hash_stable(hcx, hasher);\n             } else {\n                 bug!(\"no allocation for {}\", self);\n             }"}, {"sha": "3e421b27c11bc84bb195deef8d0c4760121a3cfb", "filename": "src/test/incremental/static_stable_hash/issue-49301.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fa60b7212373a0984c014c2ada74a0538b5b324c/src%2Ftest%2Fincremental%2Fstatic_stable_hash%2Fissue-49301.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa60b7212373a0984c014c2ada74a0538b5b324c/src%2Ftest%2Fincremental%2Fstatic_stable_hash%2Fissue-49301.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstatic_stable_hash%2Fissue-49301.rs?ref=fa60b7212373a0984c014c2ada74a0538b5b324c", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// https://github.com/rust-lang/rust/issues/49081\n+\n+// revisions:rpass1 rpass2\n+\n+#[cfg(rpass1)]\n+pub static A: &str = \"hello\";\n+#[cfg(rpass2)]\n+pub static A: &str = \"xxxxx\";\n+\n+#[cfg(rpass1)]\n+fn main() {\n+    assert_eq!(A, \"hello\");\n+}\n+\n+#[cfg(rpass2)]\n+fn main() {\n+    assert_eq!(A, \"xxxxx\");\n+}"}]}