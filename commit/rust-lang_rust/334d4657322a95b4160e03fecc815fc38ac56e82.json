{"sha": "334d4657322a95b4160e03fecc815fc38ac56e82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNGQ0NjU3MzIyYTk1YjQxNjBlMDNmZWNjODE1ZmMzOGFjNTZlODI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-02T03:13:59Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-02T03:15:49Z"}, "message": "Point at appropriate arm on type error on if/else/match with one non-! arm", "tree": {"sha": "ccb5fed8a8d74f95e6f4a6c2c70175f10c54bfe6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccb5fed8a8d74f95e6f4a6c2c70175f10c54bfe6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/334d4657322a95b4160e03fecc815fc38ac56e82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/334d4657322a95b4160e03fecc815fc38ac56e82", "html_url": "https://github.com/rust-lang/rust/commit/334d4657322a95b4160e03fecc815fc38ac56e82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/334d4657322a95b4160e03fecc815fc38ac56e82/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfd43f0fdd4e6969c7d82c0670d70bf305fbccf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd43f0fdd4e6969c7d82c0670d70bf305fbccf8", "html_url": "https://github.com/rust-lang/rust/commit/dfd43f0fdd4e6969c7d82c0670d70bf305fbccf8"}], "stats": {"total": 65, "additions": 47, "deletions": 18}, "files": [{"sha": "4a0b3879cb99124bceb5cca3d85ef110549bfa49", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/334d4657322a95b4160e03fecc815fc38ac56e82/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334d4657322a95b4160e03fecc815fc38ac56e82/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=334d4657322a95b4160e03fecc815fc38ac56e82", "patch": "@@ -3687,6 +3687,40 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// If `expr` is a `match` expression that has only one non-`!` arm, use that arm's tail\n+    /// expression's `Span`, otherwise return `expr.span`. This is done to give bettern errors\n+    /// when given code like the following:\n+    /// ```text\n+    /// if false { return 0i32; } else { 1u32 }\n+    /// //                               ^^^^ point at this instead of the whole `if` expression\n+    /// ```\n+    fn get_expr_coercion_span(&self, expr: &hir::Expr) -> syntax_pos::Span {\n+        if let hir::ExprKind::Match(_, arms, _) = &expr.node {\n+            let arm_spans: Vec<Span> = arms.iter().filter_map(|arm| {\n+                self.in_progress_tables\n+                    .and_then(|tables| tables.borrow().node_type_opt(arm.body.hir_id))\n+                    .and_then(|arm_ty| {\n+                        if arm_ty.is_never() {\n+                            None\n+                        } else {\n+                            Some(match &arm.body.node {\n+                                // Point at the tail expression when possible.\n+                                hir::ExprKind::Block(block, _) => block.expr\n+                                    .as_ref()\n+                                    .map(|e| e.span)\n+                                    .unwrap_or(block.span),\n+                                _ => arm.body.span,\n+                            })\n+                        }\n+                    })\n+            }).collect();\n+            if arm_spans.len() == 1 {\n+                return arm_spans[0];\n+            }\n+        }\n+        expr.span\n+    }\n+\n     fn check_block_with_expected(\n         &self,\n         blk: &'tcx hir::Block,\n@@ -3746,12 +3780,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let coerce = ctxt.coerce.as_mut().unwrap();\n             if let Some(tail_expr_ty) = tail_expr_ty {\n                 let tail_expr = tail_expr.unwrap();\n-                let cause = self.cause(tail_expr.span,\n-                                       ObligationCauseCode::BlockTailExpression(blk.hir_id));\n-                coerce.coerce(self,\n-                              &cause,\n-                              tail_expr,\n-                              tail_expr_ty);\n+                let span = self.get_expr_coercion_span(tail_expr);\n+                let cause = self.cause(span, ObligationCauseCode::BlockTailExpression(blk.hir_id));\n+                coerce.coerce(self, &cause, tail_expr, tail_expr_ty);\n             } else {\n                 // Subtle: if there is no explicit tail expression,\n                 // that is typically equivalent to a tail expression"}, {"sha": "d416db628c03f5f969868a7f1caff7b951bfdaa7", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/334d4657322a95b4160e03fecc815fc38ac56e82/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334d4657322a95b4160e03fecc815fc38ac56e82/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.rs?ref=334d4657322a95b4160e03fecc815fc38ac56e82", "patch": "@@ -17,10 +17,10 @@ fn bar() -> impl std::fmt::Display {\n \n fn baz() -> impl std::fmt::Display {\n     if false {\n-    //~^ ERROR mismatched types\n         return 0i32;\n     } else {\n         1u32\n+        //~^ ERROR mismatched types\n     }\n }\n "}, {"sha": "47644d66d1a2c902cdd4a5bb88bf367123ceb30c", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return.stderr", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/334d4657322a95b4160e03fecc815fc38ac56e82/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/334d4657322a95b4160e03fecc815fc38ac56e82/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr?ref=334d4657322a95b4160e03fecc815fc38ac56e82", "patch": "@@ -29,18 +29,16 @@ LL |         return 1u32;\n               found type `u32`\n \n error[E0308]: mismatched types\n-  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:19:5\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:22:9\n    |\n-LL |   fn baz() -> impl std::fmt::Display {\n-   |               ---------------------- expected because this return type...\n-LL | /     if false {\n-LL | |\n-LL | |         return 0i32;\n-   | |                ---- ...is found to be `i32` here\n-LL | |     } else {\n-LL | |         1u32\n-LL | |     }\n-   | |_____^ expected i32, found u32\n+LL | fn baz() -> impl std::fmt::Display {\n+   |             ---------------------- expected because this return type...\n+LL |     if false {\n+LL |         return 0i32;\n+   |                ---- ...is found to be `i32` here\n+LL |     } else {\n+LL |         1u32\n+   |         ^^^^ expected i32, found u32\n    |\n    = note: expected type `i32`\n               found type `u32`"}]}