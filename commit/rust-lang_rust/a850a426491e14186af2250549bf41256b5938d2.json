{"sha": "a850a426491e14186af2250549bf41256b5938d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4NTBhNDI2NDkxZTE0MTg2YWYyMjUwNTQ5YmY0MTI1NmI1OTM4ZDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-22T07:28:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-22T07:28:20Z"}, "message": "Auto merge of #60133 - phansch:deny_rust_2018_idioms, r=Centril\n\nDeny rust_2018_idioms globally\n\ncc https://github.com/rust-lang/rust/issues/58099#issuecomment-484921194", "tree": {"sha": "a701948928cb8ab476f2e44bb331925b3530d1d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a701948928cb8ab476f2e44bb331925b3530d1d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a850a426491e14186af2250549bf41256b5938d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a850a426491e14186af2250549bf41256b5938d2", "html_url": "https://github.com/rust-lang/rust/commit/a850a426491e14186af2250549bf41256b5938d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a850a426491e14186af2250549bf41256b5938d2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f06188991e8e7c764f0775a35432d39e2596c9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f06188991e8e7c764f0775a35432d39e2596c9a", "html_url": "https://github.com/rust-lang/rust/commit/8f06188991e8e7c764f0775a35432d39e2596c9a"}, {"sha": "8e5555909c1c425241ff3733efaa50986a124623", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e5555909c1c425241ff3733efaa50986a124623", "html_url": "https://github.com/rust-lang/rust/commit/8e5555909c1c425241ff3733efaa50986a124623"}], "stats": {"total": 108, "additions": 56, "deletions": 52}, "files": [{"sha": "50d170b8a88447b891840496c1beea13c03c4ae0", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -308,6 +308,7 @@ fn main() {\n     {\n         cmd.arg(\"-Dwarnings\");\n         cmd.arg(\"-Dbare_trait_objects\");\n+        cmd.arg(\"-Drust_2018_idioms\");\n     }\n \n     if verbose > 1 {"}, {"sha": "6f357eda9b83b88d70e93c58cddb4edef75b452b", "filename": "src/liballoc/tests/cow_str.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Fliballoc%2Ftests%2Fcow_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Fliballoc%2Ftests%2Fcow_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fcow_str.rs?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -7,9 +7,9 @@ fn check_cow_add_cow() {\n     let borrowed2 = Cow::Borrowed(\"World!\");\n     let borrow_empty = Cow::Borrowed(\"\");\n \n-    let owned1: Cow<str> = Cow::Owned(String::from(\"Hi, \"));\n-    let owned2: Cow<str> = Cow::Owned(String::from(\"Rustaceans!\"));\n-    let owned_empty: Cow<str> = Cow::Owned(String::new());\n+    let owned1: Cow<'_, str> = Cow::Owned(String::from(\"Hi, \"));\n+    let owned2: Cow<'_, str> = Cow::Owned(String::from(\"Rustaceans!\"));\n+    let owned_empty: Cow<'_, str> = Cow::Owned(String::new());\n \n     assert_eq!(\"Hello, World!\", borrowed1.clone() + borrowed2.clone());\n     assert_eq!(\"Hello, Rustaceans!\", borrowed1.clone() + owned2.clone());\n@@ -36,8 +36,8 @@ fn check_cow_add_str() {\n     let borrowed = Cow::Borrowed(\"Hello, \");\n     let borrow_empty = Cow::Borrowed(\"\");\n \n-    let owned: Cow<str> = Cow::Owned(String::from(\"Hi, \"));\n-    let owned_empty: Cow<str> = Cow::Owned(String::new());\n+    let owned: Cow<'_, str> = Cow::Owned(String::from(\"Hi, \"));\n+    let owned_empty: Cow<'_, str> = Cow::Owned(String::new());\n \n     assert_eq!(\"Hello, World!\", borrowed.clone() + \"World!\");\n \n@@ -60,9 +60,9 @@ fn check_cow_add_assign_cow() {\n     let borrowed2 = Cow::Borrowed(\"World!\");\n     let borrow_empty = Cow::Borrowed(\"\");\n \n-    let mut owned1: Cow<str> = Cow::Owned(String::from(\"Hi, \"));\n-    let owned2: Cow<str> = Cow::Owned(String::from(\"Rustaceans!\"));\n-    let owned_empty: Cow<str> = Cow::Owned(String::new());\n+    let mut owned1: Cow<'_, str> = Cow::Owned(String::from(\"Hi, \"));\n+    let owned2: Cow<'_, str> = Cow::Owned(String::from(\"Rustaceans!\"));\n+    let owned_empty: Cow<'_, str> = Cow::Owned(String::new());\n \n     let mut s = borrowed1.clone();\n     s += borrow_empty.clone();\n@@ -101,8 +101,8 @@ fn check_cow_add_assign_str() {\n     let mut borrowed = Cow::Borrowed(\"Hello, \");\n     let borrow_empty = Cow::Borrowed(\"\");\n \n-    let mut owned: Cow<str> = Cow::Owned(String::from(\"Hi, \"));\n-    let owned_empty: Cow<str> = Cow::Owned(String::new());\n+    let mut owned: Cow<'_, str> = Cow::Owned(String::from(\"Hi, \"));\n+    let owned_empty: Cow<'_, str> = Cow::Owned(String::new());\n \n     let mut s = borrowed.clone();\n     s += \"\";\n@@ -132,10 +132,10 @@ fn check_cow_add_assign_str() {\n \n #[test]\n fn check_cow_clone_from() {\n-    let mut c1: Cow<str> = Cow::Owned(String::with_capacity(25));\n+    let mut c1: Cow<'_, str> = Cow::Owned(String::with_capacity(25));\n     let s: String = \"hi\".to_string();\n     assert!(s.capacity() < 25);\n-    let c2: Cow<str> = Cow::Owned(s);\n+    let c2: Cow<'_, str> = Cow::Owned(s);\n     c1.clone_from(&c2);\n     assert!(c1.into_owned().capacity() >= 25);\n }"}, {"sha": "b736750c57601e5b1798d871837b90910f1bad40", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -7,6 +7,7 @@\n #![feature(try_reserve)]\n #![feature(unboxed_closures)]\n #![feature(vecdeque_rotate)]\n+#![deny(rust_2018_idioms)]\n \n use std::hash::{Hash, Hasher};\n use std::collections::hash_map::DefaultHasher;"}, {"sha": "765210e5aa6b39f636ee6245d04c671246d7824e", "filename": "src/liballoc/tests/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Fliballoc%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Fliballoc%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstring.rs?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -54,11 +54,11 @@ fn test_from_utf8() {\n #[test]\n fn test_from_utf8_lossy() {\n     let xs = b\"hello\";\n-    let ys: Cow<str> = \"hello\".into_cow();\n+    let ys: Cow<'_, str> = \"hello\".into_cow();\n     assert_eq!(String::from_utf8_lossy(xs), ys);\n \n     let xs = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".as_bytes();\n-    let ys: Cow<str> = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".into_cow();\n+    let ys: Cow<'_, str> = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".into_cow();\n     assert_eq!(String::from_utf8_lossy(xs), ys);\n \n     let xs = b\"Hello\\xC2 There\\xFF Goodbye\";"}, {"sha": "4dfd884d2377c12b646a2bee91c7a5fad11be43e", "filename": "src/libcore/tests/cell.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Flibcore%2Ftests%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Flibcore%2Ftests%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fcell.rs?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -139,11 +139,11 @@ fn ref_clone_updates_flag() {\n fn ref_map_does_not_update_flag() {\n     let x = RefCell::new(Some(5));\n     {\n-        let b1: Ref<Option<u32>> = x.borrow();\n+        let b1: Ref<'_, Option<u32>> = x.borrow();\n         assert!(x.try_borrow().is_ok());\n         assert!(x.try_borrow_mut().is_err());\n         {\n-            let b2: Ref<u32> = Ref::map(b1, |o| o.as_ref().unwrap());\n+            let b2: Ref<'_, u32> = Ref::map(b1, |o| o.as_ref().unwrap());\n             assert_eq!(*b2, 5);\n             assert!(x.try_borrow().is_ok());\n             assert!(x.try_borrow_mut().is_err());\n@@ -217,26 +217,26 @@ fn ref_mut_map_split() {\n fn ref_map_accessor() {\n     struct X(RefCell<(u32, char)>);\n     impl X {\n-        fn accessor(&self) -> Ref<u32> {\n+        fn accessor(&self) -> Ref<'_, u32> {\n             Ref::map(self.0.borrow(), |tuple| &tuple.0)\n         }\n     }\n     let x = X(RefCell::new((7, 'z')));\n-    let d: Ref<u32> = x.accessor();\n+    let d: Ref<'_, u32> = x.accessor();\n     assert_eq!(*d, 7);\n }\n \n #[test]\n fn ref_mut_map_accessor() {\n     struct X(RefCell<(u32, char)>);\n     impl X {\n-        fn accessor(&self) -> RefMut<u32> {\n+        fn accessor(&self) -> RefMut<'_, u32> {\n             RefMut::map(self.0.borrow_mut(), |tuple| &mut tuple.0)\n         }\n     }\n     let x = X(RefCell::new((7, 'z')));\n     {\n-        let mut d: RefMut<u32> = x.accessor();\n+        let mut d: RefMut<'_ ,u32> = x.accessor();\n         assert_eq!(*d, 7);\n         *d += 1;\n     }\n@@ -333,16 +333,16 @@ fn refcell_unsized() {\n fn refcell_ref_coercion() {\n     let cell: RefCell<[i32; 3]> = RefCell::new([1, 2, 3]);\n     {\n-        let mut cellref: RefMut<[i32; 3]> = cell.borrow_mut();\n+        let mut cellref: RefMut<'_, [i32; 3]> = cell.borrow_mut();\n         cellref[0] = 4;\n-        let mut coerced: RefMut<[i32]> = cellref;\n+        let mut coerced: RefMut<'_, [i32]> = cellref;\n         coerced[2] = 5;\n     }\n     {\n         let comp: &mut [i32] = &mut [4, 2, 5];\n-        let cellref: Ref<[i32; 3]> = cell.borrow();\n+        let cellref: Ref<'_, [i32; 3]> = cell.borrow();\n         assert_eq!(&*cellref, comp);\n-        let coerced: Ref<[i32]> = cellref;\n+        let coerced: Ref<'_, [i32]> = cellref;\n         assert_eq!(&*coerced, comp);\n     }\n }"}, {"sha": "62fe09c5eb32cde9b7e2e93ee40aeee3e417b946", "filename": "src/libcore/tests/fmt/builders.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Flibcore%2Ftests%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Flibcore%2Ftests%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ffmt%2Fbuilders.rs?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -6,7 +6,7 @@ mod debug_struct {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_struct(\"Foo\").finish()\n             }\n         }\n@@ -20,7 +20,7 @@ mod debug_struct {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_struct(\"Foo\")\n                     .field(\"bar\", &true)\n                     .finish()\n@@ -40,7 +40,7 @@ mod debug_struct {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_struct(\"Foo\")\n                     .field(\"bar\", &true)\n                     .field(\"baz\", &format_args!(\"{}/{}\", 10, 20))\n@@ -62,7 +62,7 @@ mod debug_struct {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_struct(\"Foo\")\n                     .field(\"bar\", &true)\n                     .field(\"baz\", &format_args!(\"{}/{}\", 10, 20))\n@@ -73,7 +73,7 @@ mod debug_struct {\n         struct Bar;\n \n         impl fmt::Debug for Bar {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_struct(\"Bar\")\n                     .field(\"foo\", &Foo)\n                     .field(\"hello\", &\"world\")\n@@ -103,7 +103,7 @@ mod debug_tuple {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_tuple(\"Foo\").finish()\n             }\n         }\n@@ -117,7 +117,7 @@ mod debug_tuple {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_tuple(\"Foo\")\n                     .field(&true)\n                     .finish()\n@@ -137,7 +137,7 @@ mod debug_tuple {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_tuple(\"Foo\")\n                     .field(&true)\n                     .field(&format_args!(\"{}/{}\", 10, 20))\n@@ -159,7 +159,7 @@ mod debug_tuple {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_tuple(\"Foo\")\n                     .field(&true)\n                     .field(&format_args!(\"{}/{}\", 10, 20))\n@@ -170,7 +170,7 @@ mod debug_tuple {\n         struct Bar;\n \n         impl fmt::Debug for Bar {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_tuple(\"Bar\")\n                     .field(&Foo)\n                     .field(&\"world\")\n@@ -200,7 +200,7 @@ mod debug_map {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_map().finish()\n             }\n         }\n@@ -214,7 +214,7 @@ mod debug_map {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_map()\n                     .entry(&\"bar\", &true)\n                     .finish()\n@@ -234,7 +234,7 @@ mod debug_map {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_map()\n                     .entry(&\"bar\", &true)\n                     .entry(&10, &format_args!(\"{}/{}\", 10, 20))\n@@ -256,7 +256,7 @@ mod debug_map {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_map()\n                     .entry(&\"bar\", &true)\n                     .entry(&10, &format_args!(\"{}/{}\", 10, 20))\n@@ -267,7 +267,7 @@ mod debug_map {\n         struct Bar;\n \n         impl fmt::Debug for Bar {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_map()\n                     .entry(&\"foo\", &Foo)\n                     .entry(&Foo, &\"world\")\n@@ -301,7 +301,7 @@ mod debug_set {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_set().finish()\n             }\n         }\n@@ -315,7 +315,7 @@ mod debug_set {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_set()\n                     .entry(&true)\n                     .finish()\n@@ -335,7 +335,7 @@ mod debug_set {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_set()\n                     .entry(&true)\n                     .entry(&format_args!(\"{}/{}\", 10, 20))\n@@ -357,7 +357,7 @@ mod debug_set {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_set()\n                     .entry(&true)\n                     .entry(&format_args!(\"{}/{}\", 10, 20))\n@@ -368,7 +368,7 @@ mod debug_set {\n         struct Bar;\n \n         impl fmt::Debug for Bar {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_set()\n                     .entry(&Foo)\n                     .entry(&\"world\")\n@@ -398,7 +398,7 @@ mod debug_list {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_list().finish()\n             }\n         }\n@@ -412,7 +412,7 @@ mod debug_list {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_list()\n                     .entry(&true)\n                     .finish()\n@@ -432,7 +432,7 @@ mod debug_list {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_list()\n                     .entry(&true)\n                     .entry(&format_args!(\"{}/{}\", 10, 20))\n@@ -454,7 +454,7 @@ mod debug_list {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_list()\n                     .entry(&true)\n                     .entry(&format_args!(\"{}/{}\", 10, 20))\n@@ -465,7 +465,7 @@ mod debug_list {\n         struct Bar;\n \n         impl fmt::Debug for Bar {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_list()\n                     .entry(&Foo)\n                     .entry(&\"world\")"}, {"sha": "7dfb1adad9eede80a81eb92635b292327d4a4a56", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -567,12 +567,12 @@ fn test_iterator_peekable_fold() {\n /// This is an iterator that follows the Iterator contract,\n /// but it is not fused. After having returned None once, it will start\n /// producing elements if .next() is called again.\n-pub struct CycleIter<'a, T: 'a> {\n+pub struct CycleIter<'a, T> {\n     index: usize,\n     data: &'a [T],\n }\n \n-pub fn cycle<T>(data: &[T]) -> CycleIter<T> {\n+pub fn cycle<T>(data: &[T]) -> CycleIter<'_, T> {\n     CycleIter {\n         index: 0,\n         data,"}, {"sha": "2e4a8a15d208874d21cfc87d25a8fe328ea193d3", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -32,8 +32,8 @@\n #![feature(slice_partition_dedup)]\n #![feature(copy_within)]\n #![feature(int_error_matching)]\n+#![deny(rust_2018_idioms)]\n \n-extern crate core;\n extern crate test;\n \n mod any;"}, {"sha": "0fe3d4cfd629705d96942083fca65e774b015450", "filename": "src/libserialize/tests/json.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Flibserialize%2Ftests%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Flibserialize%2Ftests%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Ftests%2Fjson.rs?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,3 +1,4 @@\n+#[allow(unused_extern_crates)]\n extern crate serialize as rustc_serialize;\n \n use rustc_serialize::{Encodable, Decodable};"}, {"sha": "62a8f25124439bf47d5fbe4a99eb86d63332120c", "filename": "src/libserialize/tests/opaque.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Flibserialize%2Ftests%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Flibserialize%2Ftests%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Ftests%2Fopaque.rs?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,3 +1,4 @@\n+#[allow(unused_extern_crates)]\n extern crate serialize as rustc_serialize;\n \n use rustc_serialize::{Encodable, Decodable};"}]}