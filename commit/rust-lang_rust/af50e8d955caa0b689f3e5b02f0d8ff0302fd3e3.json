{"sha": "af50e8d955caa0b689f3e5b02f0d8ff0302fd3e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNTBlOGQ5NTVjYWEwYjY4OWYzZTViMDJmMGQ4ZmYwMzAyZmQzZTM=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-21T17:18:25Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-21T17:25:00Z"}, "message": "Fix box pattern inference panic", "tree": {"sha": "643f38fb2eb9f380e0e9f97aa660ab95c2f4c99c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/643f38fb2eb9f380e0e9f97aa660ab95c2f4c99c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af50e8d955caa0b689f3e5b02f0d8ff0302fd3e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af50e8d955caa0b689f3e5b02f0d8ff0302fd3e3", "html_url": "https://github.com/rust-lang/rust/commit/af50e8d955caa0b689f3e5b02f0d8ff0302fd3e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af50e8d955caa0b689f3e5b02f0d8ff0302fd3e3/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ae20d2b894171f0b8368309da727cd365b95fc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ae20d2b894171f0b8368309da727cd365b95fc1", "html_url": "https://github.com/rust-lang/rust/commit/1ae20d2b894171f0b8368309da727cd365b95fc1"}], "stats": {"total": 60, "additions": 51, "deletions": 9}, "files": [{"sha": "24deff70732ad1cf6b55d4bf38da8af46ad0f977", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af50e8d955caa0b689f3e5b02f0d8ff0302fd3e3/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af50e8d955caa0b689f3e5b02f0d8ff0302fd3e3/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=af50e8d955caa0b689f3e5b02f0d8ff0302fd3e3", "patch": "@@ -513,10 +513,10 @@ impl<'a> InferenceContext<'a> {\n                 let inner_ty = self.infer_expr_inner(*expr, &Expectation::none());\n                 if let Some(box_) = self.resolve_boxed_box() {\n                     let mut sb =\n-                        Substitution::builder(generics(self.db.upcast(), box_.into()).len());\n+                        Substitution::build_for_generics(&generics(self.db.upcast(), box_.into()));\n                     sb = sb.push(inner_ty);\n-                    match self.db.generic_defaults(box_.into()).as_ref() {\n-                        [_, alloc_ty, ..] if !alloc_ty.value.is_unknown() => {\n+                    match self.db.generic_defaults(box_.into()).get(1) {\n+                        Some(alloc_ty) if !alloc_ty.value.is_unknown() && sb.remaining() > 0 => {\n                             sb = sb.push(alloc_ty.value.clone());\n                         }\n                         _ => (),"}, {"sha": "474363709ba31988147430009afa898b74b765f8", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/af50e8d955caa0b689f3e5b02f0d8ff0302fd3e3/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af50e8d955caa0b689f3e5b02f0d8ff0302fd3e3/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=af50e8d955caa0b689f3e5b02f0d8ff0302fd3e3", "patch": "@@ -13,7 +13,9 @@ use hir_expand::name::Name;\n \n use super::{BindingMode, Expectation, InferenceContext};\n use crate::{\n-    lower::lower_to_chalk_mutability, utils::variant_data, Interner, Substitution, Ty, TyKind,\n+    lower::lower_to_chalk_mutability,\n+    utils::{generics, variant_data},\n+    Interner, Substitution, Ty, TyKind,\n };\n \n impl<'a> InferenceContext<'a> {\n@@ -233,13 +235,31 @@ impl<'a> InferenceContext<'a> {\n             Pat::Lit(expr) => self.infer_expr(*expr, &Expectation::has_type(expected.clone())),\n             Pat::Box { inner } => match self.resolve_boxed_box() {\n                 Some(box_adt) => {\n-                    let inner_expected = match expected.as_adt() {\n-                        Some((adt, substs)) if adt == box_adt => substs.as_single().clone(),\n-                        _ => self.result.standard_types.unknown.clone(),\n+                    let (inner_ty, alloc_ty) = match expected.as_adt() {\n+                        Some((adt, subst)) if adt == box_adt => {\n+                            (subst[0].clone(), subst.get(1).cloned())\n+                        }\n+                        _ => (self.result.standard_types.unknown.clone(), None),\n                     };\n \n-                    let inner_ty = self.infer_pat(*inner, &inner_expected, default_bm);\n-                    Ty::adt_ty(box_adt, Substitution::single(inner_ty))\n+                    let inner_ty = self.infer_pat(*inner, &inner_ty, default_bm);\n+                    let mut sb = Substitution::build_for_generics(&generics(\n+                        self.db.upcast(),\n+                        box_adt.into(),\n+                    ));\n+                    sb = sb.push(inner_ty);\n+                    if sb.remaining() == 1 {\n+                        sb = sb.push(match alloc_ty {\n+                            Some(alloc_ty) if !alloc_ty.is_unknown() => alloc_ty,\n+                            _ => match self.db.generic_defaults(box_adt.into()).get(1) {\n+                                Some(alloc_ty) if !alloc_ty.value.is_unknown() => {\n+                                    alloc_ty.value.clone()\n+                                }\n+                                _ => self.table.new_type_var(),\n+                            },\n+                        });\n+                    }\n+                    Ty::adt_ty(box_adt, sb.build())\n                 }\n                 None => self.err_ty(),\n             },"}, {"sha": "85a28e76b2367be08a19ad73db24859381b67a28", "filename": "crates/hir_ty/src/tests/patterns.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/af50e8d955caa0b689f3e5b02f0d8ff0302fd3e3/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af50e8d955caa0b689f3e5b02f0d8ff0302fd3e3/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=af50e8d955caa0b689f3e5b02f0d8ff0302fd3e3", "patch": "@@ -656,6 +656,28 @@ fn slice_tail_pattern() {\n \n #[test]\n fn box_pattern() {\n+    check_infer(\n+        r#\"\n+        pub struct Global;\n+        #[lang = \"owned_box\"]\n+        pub struct Box<T, A = Global>(T);\n+\n+        fn foo(params: Box<i32>) {\n+            match params {\n+                box integer => {}\n+            }\n+        }\n+        \"#,\n+        expect![[r#\"\n+            83..89 'params': Box<i32, Global>\n+            101..155 '{     ...   } }': ()\n+            107..153 'match ...     }': ()\n+            113..119 'params': Box<i32, Global>\n+            130..141 'box integer': Box<i32, Global>\n+            134..141 'integer': i32\n+            145..147 '{}': ()\n+        \"#]],\n+    );\n     check_infer(\n         r#\"\n         #[lang = \"owned_box\"]"}]}