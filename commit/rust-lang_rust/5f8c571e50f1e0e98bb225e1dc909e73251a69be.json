{"sha": "5f8c571e50f1e0e98bb225e1dc909e73251a69be", "node_id": "C_kwDOAAsO6NoAKDVmOGM1NzFlNTBmMWUwZTk4YmIyMjVlMWRjOTA5ZTczMjUxYTY5YmU", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-09-17T00:48:06Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-09-25T15:11:10Z"}, "message": "Move malformed attribute code to a function and fix inner attribute suggestion.\n\nMoving to a dedicated function in preparation for other validation.\n\nThe suggestion given didn't consider if it was an inner attribute.", "tree": {"sha": "c064117fc923680960e2bf670e56f8c5cf4a8aad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c064117fc923680960e2bf670e56f8c5cf4a8aad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f8c571e50f1e0e98bb225e1dc909e73251a69be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f8c571e50f1e0e98bb225e1dc909e73251a69be", "html_url": "https://github.com/rust-lang/rust/commit/5f8c571e50f1e0e98bb225e1dc909e73251a69be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f8c571e50f1e0e98bb225e1dc909e73251a69be/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9f29a851917a706c01b6f51331894df1d15770b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9f29a851917a706c01b6f51331894df1d15770b", "html_url": "https://github.com/rust-lang/rust/commit/e9f29a851917a706c01b6f51331894df1d15770b"}], "stats": {"total": 137, "additions": 69, "deletions": 68}, "files": [{"sha": "6e798fc5c20967d90ba1d3a4abff64b2f24d5b2a", "filename": "compiler/rustc_parse/src/validate_attr.rs", "status": "modified", "additions": 60, "deletions": 59, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/5f8c571e50f1e0e98bb225e1dc909e73251a69be/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f8c571e50f1e0e98bb225e1dc909e73251a69be/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs?ref=5f8c571e50f1e0e98bb225e1dc909e73251a69be", "patch": "@@ -91,73 +91,74 @@ pub fn check_builtin_attribute(\n     // Some special attributes like `cfg` must be checked\n     // before the generic check, so we skip them here.\n     let should_skip = |name| name == sym::cfg;\n-    // Some of previously accepted forms were used in practice,\n-    // report them as warnings for now.\n-    let should_warn = |name| {\n-        name == sym::doc\n-            || name == sym::ignore\n-            || name == sym::inline\n-            || name == sym::link\n-            || name == sym::test\n-            || name == sym::bench\n-    };\n \n     match parse_meta(sess, attr) {\n         Ok(meta) => {\n             if !should_skip(name) && !is_attr_template_compatible(&template, &meta.kind) {\n-                let error_msg = format!(\"malformed `{}` attribute input\", name);\n-                let mut msg = \"attribute must be of the form \".to_owned();\n-                let mut suggestions = vec![];\n-                let mut first = true;\n-                if template.word {\n-                    first = false;\n-                    let code = format!(\"#[{}]\", name);\n-                    msg.push_str(&format!(\"`{}`\", &code));\n-                    suggestions.push(code);\n-                }\n-                if let Some(descr) = template.list {\n-                    if !first {\n-                        msg.push_str(\" or \");\n-                    }\n-                    first = false;\n-                    let code = format!(\"#[{}({})]\", name, descr);\n-                    msg.push_str(&format!(\"`{}`\", &code));\n-                    suggestions.push(code);\n-                }\n-                if let Some(descr) = template.name_value_str {\n-                    if !first {\n-                        msg.push_str(\" or \");\n-                    }\n-                    let code = format!(\"#[{} = \\\"{}\\\"]\", name, descr);\n-                    msg.push_str(&format!(\"`{}`\", &code));\n-                    suggestions.push(code);\n-                }\n-                if should_warn(name) {\n-                    sess.buffer_lint(\n-                        &ILL_FORMED_ATTRIBUTE_INPUT,\n-                        meta.span,\n-                        ast::CRATE_NODE_ID,\n-                        &msg,\n-                    );\n-                } else {\n-                    sess.span_diagnostic\n-                        .struct_span_err(meta.span, &error_msg)\n-                        .span_suggestions(\n-                            meta.span,\n-                            if suggestions.len() == 1 {\n-                                \"must be of the form\"\n-                            } else {\n-                                \"the following are the possible correct uses\"\n-                            },\n-                            suggestions.into_iter(),\n-                            Applicability::HasPlaceholders,\n-                        )\n-                        .emit();\n-                }\n+                emit_malformed_attribute(sess, attr, name, template);\n             }\n         }\n         Err(mut err) => {\n             err.emit();\n         }\n     }\n }\n+\n+fn emit_malformed_attribute(\n+    sess: &ParseSess,\n+    attr: &Attribute,\n+    name: Symbol,\n+    template: AttributeTemplate,\n+) {\n+    // Some of previously accepted forms were used in practice,\n+    // report them as warnings for now.\n+    let should_warn = |name| {\n+        matches!(name, sym::doc | sym::ignore | sym::inline | sym::link | sym::test | sym::bench)\n+    };\n+\n+    let error_msg = format!(\"malformed `{}` attribute input\", name);\n+    let mut msg = \"attribute must be of the form \".to_owned();\n+    let mut suggestions = vec![];\n+    let mut first = true;\n+    let inner = if attr.style == ast::AttrStyle::Inner { \"!\" } else { \"\" };\n+    if template.word {\n+        first = false;\n+        let code = format!(\"#{}[{}]\", inner, name);\n+        msg.push_str(&format!(\"`{}`\", &code));\n+        suggestions.push(code);\n+    }\n+    if let Some(descr) = template.list {\n+        if !first {\n+            msg.push_str(\" or \");\n+        }\n+        first = false;\n+        let code = format!(\"#{}[{}({})]\", inner, name, descr);\n+        msg.push_str(&format!(\"`{}`\", &code));\n+        suggestions.push(code);\n+    }\n+    if let Some(descr) = template.name_value_str {\n+        if !first {\n+            msg.push_str(\" or \");\n+        }\n+        let code = format!(\"#{}[{} = \\\"{}\\\"]\", inner, name, descr);\n+        msg.push_str(&format!(\"`{}`\", &code));\n+        suggestions.push(code);\n+    }\n+    if should_warn(name) {\n+        sess.buffer_lint(&ILL_FORMED_ATTRIBUTE_INPUT, attr.span, ast::CRATE_NODE_ID, &msg);\n+    } else {\n+        sess.span_diagnostic\n+            .struct_span_err(attr.span, &error_msg)\n+            .span_suggestions(\n+                attr.span,\n+                if suggestions.len() == 1 {\n+                    \"must be of the form\"\n+                } else {\n+                    \"the following are the possible correct uses\"\n+                },\n+                suggestions.into_iter(),\n+                Applicability::HasPlaceholders,\n+            )\n+            .emit();\n+    }\n+}"}, {"sha": "8f6977cb55f25b06db7444c53432a4be153359ed", "filename": "src/test/ui/attributes/register-attr-tool-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f8c571e50f1e0e98bb225e1dc909e73251a69be/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f8c571e50f1e0e98bb225e1dc909e73251a69be/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-fail.stderr?ref=5f8c571e50f1e0e98bb225e1dc909e73251a69be", "patch": "@@ -30,13 +30,13 @@ error: malformed `register_attr` attribute input\n   --> $DIR/register-attr-tool-fail.rs:4:1\n    |\n LL | #![register_attr]\n-   | ^^^^^^^^^^^^^^^^^ help: must be of the form: `#[register_attr(attr1, attr2, ...)]`\n+   | ^^^^^^^^^^^^^^^^^ help: must be of the form: `#![register_attr(attr1, attr2, ...)]`\n \n error: malformed `register_tool` attribute input\n   --> $DIR/register-attr-tool-fail.rs:5:1\n    |\n LL | #![register_tool]\n-   | ^^^^^^^^^^^^^^^^^ help: must be of the form: `#[register_tool(tool1, tool2, ...)]`\n+   | ^^^^^^^^^^^^^^^^^ help: must be of the form: `#![register_tool(tool1, tool2, ...)]`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "a8ec9391523c7e1b2c2143e4052507dd2543e789", "filename": "src/test/ui/gated-bad-feature.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f8c571e50f1e0e98bb225e1dc909e73251a69be/src%2Ftest%2Fui%2Fgated-bad-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f8c571e50f1e0e98bb225e1dc909e73251a69be/src%2Ftest%2Fui%2Fgated-bad-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgated-bad-feature.stderr?ref=5f8c571e50f1e0e98bb225e1dc909e73251a69be", "patch": "@@ -20,13 +20,13 @@ error: malformed `feature` attribute input\n   --> $DIR/gated-bad-feature.rs:5:1\n    |\n LL | #![feature]\n-   | ^^^^^^^^^^^ help: must be of the form: `#[feature(name1, name1, ...)]`\n+   | ^^^^^^^^^^^ help: must be of the form: `#![feature(name1, name1, ...)]`\n \n error: malformed `feature` attribute input\n   --> $DIR/gated-bad-feature.rs:6:1\n    |\n LL | #![feature = \"foo\"]\n-   | ^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[feature(name1, name1, ...)]`\n+   | ^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#![feature(name1, name1, ...)]`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "4072a2fa1624a1ebac5b71982fbab5f7a00f6709", "filename": "src/test/ui/invalid_crate_type_syntax.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f8c571e50f1e0e98bb225e1dc909e73251a69be/src%2Ftest%2Fui%2Finvalid_crate_type_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f8c571e50f1e0e98bb225e1dc909e73251a69be/src%2Ftest%2Fui%2Finvalid_crate_type_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid_crate_type_syntax.stderr?ref=5f8c571e50f1e0e98bb225e1dc909e73251a69be", "patch": "@@ -2,7 +2,7 @@ error: malformed `crate_type` attribute input\n   --> $DIR/invalid_crate_type_syntax.rs:2:1\n    |\n LL | #![crate_type(lib)]\n-   | ^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[crate_type = \"bin|lib|...\"]`\n+   | ^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#![crate_type = \"bin|lib|...\"]`\n \n error: aborting due to previous error\n "}, {"sha": "91b4e509b269efd791789ebcfd645c8dd48b15da", "filename": "src/test/ui/lint/lint-malformed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f8c571e50f1e0e98bb225e1dc909e73251a69be/src%2Ftest%2Fui%2Flint%2Flint-malformed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f8c571e50f1e0e98bb225e1dc909e73251a69be/src%2Ftest%2Fui%2Flint%2Flint-malformed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-malformed.stderr?ref=5f8c571e50f1e0e98bb225e1dc909e73251a69be", "patch": "@@ -14,7 +14,7 @@ error: malformed `deny` attribute input\n   --> $DIR/lint-malformed.rs:1:1\n    |\n LL | #![deny = \"foo\"]\n-   | ^^^^^^^^^^^^^^^^ help: must be of the form: `#[deny(lint1, lint2, ..., /*opt*/ reason = \"...\")]`\n+   | ^^^^^^^^^^^^^^^^ help: must be of the form: `#![deny(lint1, lint2, ..., /*opt*/ reason = \"...\")]`\n \n error[E0452]: malformed lint attribute input\n   --> $DIR/lint-malformed.rs:2:10"}, {"sha": "505f6b6f140baa8e9e3578997c9b1076254f756d", "filename": "src/test/ui/malformed/malformed-plugin-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f8c571e50f1e0e98bb225e1dc909e73251a69be/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f8c571e50f1e0e98bb225e1dc909e73251a69be/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.stderr?ref=5f8c571e50f1e0e98bb225e1dc909e73251a69be", "patch": "@@ -2,7 +2,7 @@ error: malformed `plugin` attribute input\n   --> $DIR/malformed-plugin-1.rs:2:1\n    |\n LL | #![plugin]\n-   | ^^^^^^^^^^ help: must be of the form: `#[plugin(name)]`\n+   | ^^^^^^^^^^ help: must be of the form: `#![plugin(name)]`\n \n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/malformed-plugin-1.rs:2:1"}, {"sha": "52bbd82a3892b15f2c5b07656bf6c078af09bf31", "filename": "src/test/ui/malformed/malformed-plugin-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f8c571e50f1e0e98bb225e1dc909e73251a69be/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f8c571e50f1e0e98bb225e1dc909e73251a69be/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.stderr?ref=5f8c571e50f1e0e98bb225e1dc909e73251a69be", "patch": "@@ -2,7 +2,7 @@ error: malformed `plugin` attribute input\n   --> $DIR/malformed-plugin-2.rs:2:1\n    |\n LL | #![plugin=\"bleh\"]\n-   | ^^^^^^^^^^^^^^^^^ help: must be of the form: `#[plugin(name)]`\n+   | ^^^^^^^^^^^^^^^^^ help: must be of the form: `#![plugin(name)]`\n \n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/malformed-plugin-2.rs:2:1"}, {"sha": "93da7c3e0ddd65ca368fa9a4c65cd88ffaff5bca", "filename": "src/test/ui/no_crate_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f8c571e50f1e0e98bb225e1dc909e73251a69be/src%2Ftest%2Fui%2Fno_crate_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f8c571e50f1e0e98bb225e1dc909e73251a69be/src%2Ftest%2Fui%2Fno_crate_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_crate_type.stderr?ref=5f8c571e50f1e0e98bb225e1dc909e73251a69be", "patch": "@@ -2,7 +2,7 @@ error: malformed `crate_type` attribute input\n   --> $DIR/no_crate_type.rs:2:1\n    |\n LL | #![crate_type]\n-   | ^^^^^^^^^^^^^^ help: must be of the form: `#[crate_type = \"bin|lib|...\"]`\n+   | ^^^^^^^^^^^^^^ help: must be of the form: `#![crate_type = \"bin|lib|...\"]`\n \n error: aborting due to previous error\n "}]}