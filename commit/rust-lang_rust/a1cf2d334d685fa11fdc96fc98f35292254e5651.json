{"sha": "a1cf2d334d685fa11fdc96fc98f35292254e5651", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExY2YyZDMzNGQ2ODVmYTExZmRjOTZmYzk4ZjM1MjkyMjU0ZTU2NTE=", "commit": {"author": {"name": "Ryan Sullivant", "email": "rsulli55@gmail.com", "date": "2020-10-06T04:23:36Z"}, "committer": {"name": "Ryan Sullivant", "email": "rsulli55@gmail.com", "date": "2020-11-11T06:18:47Z"}, "message": "Added a lint as suggested in 6010 which recommends using `contains()`\ninstead of `find()` follows by `is_some()` on strings\n\nUpdate clippy_lints/src/find_is_some_on_strs.rs\nCo-authored-by: Takayuki Nakata <f.seasons017@gmail.com>\n\nUpdate clippy_lints/src/methods/mod.rs\nCo-authored-by: Philipp Krones <hello@philkrones.com>", "tree": {"sha": "c5ffdfa657ebb5101b594882a88b5748b482811a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5ffdfa657ebb5101b594882a88b5748b482811a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1cf2d334d685fa11fdc96fc98f35292254e5651", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1cf2d334d685fa11fdc96fc98f35292254e5651", "html_url": "https://github.com/rust-lang/rust/commit/a1cf2d334d685fa11fdc96fc98f35292254e5651", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1cf2d334d685fa11fdc96fc98f35292254e5651/comments", "author": {"login": "rsulli55", "id": 22406159, "node_id": "MDQ6VXNlcjIyNDA2MTU5", "avatar_url": "https://avatars.githubusercontent.com/u/22406159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsulli55", "html_url": "https://github.com/rsulli55", "followers_url": "https://api.github.com/users/rsulli55/followers", "following_url": "https://api.github.com/users/rsulli55/following{/other_user}", "gists_url": "https://api.github.com/users/rsulli55/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsulli55/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsulli55/subscriptions", "organizations_url": "https://api.github.com/users/rsulli55/orgs", "repos_url": "https://api.github.com/users/rsulli55/repos", "events_url": "https://api.github.com/users/rsulli55/events{/privacy}", "received_events_url": "https://api.github.com/users/rsulli55/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsulli55", "id": 22406159, "node_id": "MDQ6VXNlcjIyNDA2MTU5", "avatar_url": "https://avatars.githubusercontent.com/u/22406159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsulli55", "html_url": "https://github.com/rsulli55", "followers_url": "https://api.github.com/users/rsulli55/followers", "following_url": "https://api.github.com/users/rsulli55/following{/other_user}", "gists_url": "https://api.github.com/users/rsulli55/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsulli55/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsulli55/subscriptions", "organizations_url": "https://api.github.com/users/rsulli55/orgs", "repos_url": "https://api.github.com/users/rsulli55/repos", "events_url": "https://api.github.com/users/rsulli55/events{/privacy}", "received_events_url": "https://api.github.com/users/rsulli55/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4fc076e11b7125d481ee96df6d2e0c4ed493356", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4fc076e11b7125d481ee96df6d2e0c4ed493356", "html_url": "https://github.com/rust-lang/rust/commit/c4fc076e11b7125d481ee96df6d2e0c4ed493356"}], "stats": {"total": 65, "additions": 57, "deletions": 8}, "files": [{"sha": "bd04a95e4a193339ba2e700373aa6438a2673d04", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a1cf2d334d685fa11fdc96fc98f35292254e5651/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1cf2d334d685fa11fdc96fc98f35292254e5651/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a1cf2d334d685fa11fdc96fc98f35292254e5651", "patch": "@@ -515,11 +515,11 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for an iterator search (such as `find()`,\n+    /// **What it does:** Checks for an iterator or string search (such as `find()`,\n     /// `position()`, or `rposition()`) followed by a call to `is_some()`.\n     ///\n     /// **Why is this bad?** Readability, this can be written more concisely as\n-    /// `_.any(_)`.\n+    /// `_.any(_)` or `_.contains(_)`.\n     ///\n     /// **Known problems:** None.\n     ///\n@@ -535,7 +535,7 @@ declare_clippy_lint! {\n     /// ```\n     pub SEARCH_IS_SOME,\n     complexity,\n-    \"using an iterator search followed by `is_some()`, which is more succinctly expressed as a call to `any()`\"\n+    \"using an iterator or string search followed by `is_some()`, which is more succinctly expressed as a call to `any()` or `contains()`\"\n }\n \n declare_clippy_lint! {\n@@ -3041,6 +3041,7 @@ fn lint_flat_map_identity<'tcx>(\n }\n \n /// lint searching an Iterator followed by `is_some()`\n+/// or calling `find()` on a string followed by `is_some()`\n fn lint_search_is_some<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &'tcx hir::Expr<'_>,\n@@ -3094,6 +3095,37 @@ fn lint_search_is_some<'tcx>(\n             span_lint(cx, SEARCH_IS_SOME, expr.span, &msg);\n         }\n     }\n+    // lint if `find()` is called by `String` or `&str`\n+    else if search_method == \"find\" {\n+        let is_string_or_str_slice = |e| {\n+            let self_ty = cx.typeck_results().expr_ty(e).peel_refs();\n+            if is_type_diagnostic_item(cx, self_ty, sym!(string_type)) {\n+                true\n+            } else {\n+                *self_ty.kind() == ty::Str\n+            }\n+        };\n+        if_chain! {\n+            if is_string_or_str_slice(&search_args[0]);\n+            if is_string_or_str_slice(&search_args[1]);\n+            then {\n+                let msg = \"called `is_some()` after calling `find()` \\\n+                    on a string. This is more succinctly expressed by calling \\\n+                    `contains()`.\".to_string();\n+                let mut applicability = Applicability::MachineApplicable;\n+                let find_arg = snippet_with_applicability(cx, search_args[1].span, \"..\", &mut applicability);\n+                span_lint_and_sugg(\n+                    cx,\n+                    SEARCH_IS_SOME,\n+                    method_span.with_hi(expr.span.hi()),\n+                    &msg,\n+                    \"try this\",\n+                    format!(\"contains({})\", find_arg),\n+                    applicability,\n+                );\n+            }\n+        }\n+    }\n }\n \n /// Used for `lint_binary_expr_with_method_call`."}, {"sha": "69acd3d9b8bc5cefdcfac28a02a2531e4b367dba", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1cf2d334d685fa11fdc96fc98f35292254e5651/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1cf2d334d685fa11fdc96fc98f35292254e5651/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=a1cf2d334d685fa11fdc96fc98f35292254e5651", "patch": "@@ -2121,7 +2121,7 @@ vec![\n     Lint {\n         name: \"search_is_some\",\n         group: \"complexity\",\n-        desc: \"using an iterator search followed by `is_some()`, which is more succinctly expressed as a call to `any()`\",\n+        desc: \"using an iterator or string search followed by `is_some()`, which is more succinctly expressed as a call to `any()` or `contains()`\",\n         deprecation: None,\n         module: \"methods\",\n     },"}, {"sha": "92ec00a11d27e48a90148fd94f2e6c64f61adca9", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a1cf2d334d685fa11fdc96fc98f35292254e5651/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1cf2d334d685fa11fdc96fc98f35292254e5651/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=a1cf2d334d685fa11fdc96fc98f35292254e5651", "patch": "@@ -168,8 +168,27 @@ fn search_is_some() {\n                                    x < 0\n                                }\n                    ).is_some();\n-\n-    // Check that we don't lint if the caller is not an `Iterator`.\n+    \n+    let s1 = String::from(\"hello world\");\n+    let s2 = String::from(\"world\");\n+    // Check caller `find()` is a &`static str case\n+    let _ = \"hello world\".find(\"world\").is_some();\n+    let _ = \"hello world\".find(&s2).is_some();\n+    let _ = \"hello world\".find(&s2[2..]).is_some();\n+    // Check caller of `find()` is a String case\n+    let _ = s1.find(\"world\").is_some();\n+    let _ = s1.find(&s2).is_some();\n+    let _ = s1.find(&s2[2..]).is_some();\n+    //  Check caller of `find()` is a slice of String case\n+    let _ = s1[2..].find(\"world\").is_some();\n+    let _ = s1[2..].find(&s2).is_some();\n+    let _ = s1[2..].find(&s2[2..]).is_some();\n+\n+    // Check that we don't lint if `find()` is called with\n+    // Pattern that is not a string\n+    let _ = s1.find(|c: char| c == 'o' || c == 'l').is_some();\n+\n+    // Check that we don't lint if the caller is not an `Iterator` or string\n     let foo = IteratorFalsePositives { foo: 0 };\n     let _ = foo.find().is_some();\n     let _ = foo.position().is_some();"}, {"sha": "b2b551bd5f868b5e2c6e2cf039e597308634839d", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1cf2d334d685fa11fdc96fc98f35292254e5651/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1cf2d334d685fa11fdc96fc98f35292254e5651/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=a1cf2d334d685fa11fdc96fc98f35292254e5651", "patch": "@@ -88,5 +88,3 @@ LL | |                                }\n LL | |                    ).is_some();\n    | |______________________________^\n \n-error: aborting due to 11 previous errors\n-"}]}