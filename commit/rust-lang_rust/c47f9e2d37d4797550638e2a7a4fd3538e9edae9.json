{"sha": "c47f9e2d37d4797550638e2a7a4fd3538e9edae9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0N2Y5ZTJkMzdkNDc5NzU1MDYzOGUyYTdhNGZkMzUzOGU5ZWRhZTk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-21T10:37:32Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-21T10:37:32Z"}, "message": "fix compilation", "tree": {"sha": "ffa9276d91e6bdfc3926322f66e6700e6ebbe3b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffa9276d91e6bdfc3926322f66e6700e6ebbe3b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c47f9e2d37d4797550638e2a7a4fd3538e9edae9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c47f9e2d37d4797550638e2a7a4fd3538e9edae9", "html_url": "https://github.com/rust-lang/rust/commit/c47f9e2d37d4797550638e2a7a4fd3538e9edae9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c47f9e2d37d4797550638e2a7a4fd3538e9edae9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d334b5a1db9ec6a57f54077d422a3f4b3c8c1178", "url": "https://api.github.com/repos/rust-lang/rust/commits/d334b5a1db9ec6a57f54077d422a3f4b3c8c1178", "html_url": "https://github.com/rust-lang/rust/commit/d334b5a1db9ec6a57f54077d422a3f4b3c8c1178"}], "stats": {"total": 98, "additions": 39, "deletions": 59}, "files": [{"sha": "f09cf98c88203e52b90a24178569dd502fcb6c6f", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c47f9e2d37d4797550638e2a7a4fd3538e9edae9/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c47f9e2d37d4797550638e2a7a4fd3538e9edae9/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c47f9e2d37d4797550638e2a7a4fd3538e9edae9", "patch": "@@ -1100,6 +1100,7 @@ dependencies = [\n  \"drop_bomb 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ra_parser 0.1.0\",\n  \"ra_text_edit 0.1.0\",\n  \"rowan 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smol_str 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "7931b5189fa02682b3c5fef4bff290eef6d579a5", "filename": "crates/ra_parser/src/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c47f9e2d37d4797550638e2a7a4fd3538e9edae9/crates%2Fra_parser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47f9e2d37d4797550638e2a7a4fd3538e9edae9/crates%2Fra_parser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Flib.rs?ref=c47f9e2d37d4797550638e2a7a4fd3538e9edae9", "patch": "@@ -53,12 +53,12 @@ impl Reparser {\n     ) -> Option<Reparser> {\n         grammar::reparser(node, first_child, parent).map(Reparser)\n     }\n-}\n \n-pub fn reparse(token_source: &dyn TokenSource, tree_sink: &mut dyn TreeSink, reparser: Reparser) {\n-    let Reparser(r) = reparser;\n-    let mut p = parser::Parser::new(token_source);\n-    r(&mut p);\n-    let events = p.finish();\n-    event::process(tree_sink, events);\n+    pub fn parse(self, token_source: &dyn TokenSource, tree_sink: &mut dyn TreeSink) {\n+        let Reparser(r) = self;\n+        let mut p = parser::Parser::new(token_source);\n+        r(&mut p);\n+        let events = p.finish();\n+        event::process(tree_sink, events);\n+    }\n }"}, {"sha": "7e70dad3fff18eeaabef6a473332b9a46bc10666", "filename": "crates/ra_syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c47f9e2d37d4797550638e2a7a4fd3538e9edae9/crates%2Fra_syntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c47f9e2d37d4797550638e2a7a4fd3538e9edae9/crates%2Fra_syntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2FCargo.toml?ref=c47f9e2d37d4797550638e2a7a4fd3538e9edae9", "patch": "@@ -21,6 +21,7 @@ text_unit = { version = \"0.1.6\", features = [\"serde\"] }\n smol_str = { version = \"0.1.9\", features = [\"serde\"] }\n \n ra_text_edit = { path = \"../ra_text_edit\" }\n+ra_parser = { path = \"../ra_parser\" }\n \n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }"}, {"sha": "c788bddec827083f0ab12bfab4858ee17fbb68fa", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c47f9e2d37d4797550638e2a7a4fd3538e9edae9/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47f9e2d37d4797550638e2a7a4fd3538e9edae9/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=c47f9e2d37d4797550638e2a7a4fd3538e9edae9", "patch": "@@ -16,7 +16,6 @@\n #![allow(missing_docs)]\n //#![warn(unreachable_pub)] // rust-lang/rust#47816\n \n-mod syntax_kinds;\n mod syntax_node;\n mod syntax_text;\n mod syntax_error;\n@@ -31,9 +30,9 @@ pub mod ast;\n pub mod utils;\n \n pub use rowan::{SmolStr, TextRange, TextUnit};\n+pub use ra_parser::SyntaxKind;\n pub use crate::{\n     ast::AstNode,\n-    syntax_kinds::SyntaxKind,\n     syntax_error::{SyntaxError, SyntaxErrorKind, Location},\n     syntax_text::SyntaxText,\n     syntax_node::{Direction,  SyntaxNode, WalkEvent, TreeArc},"}, {"sha": "0a11600e19f11552ee1b7bb65ee80890ae39a7fd", "filename": "crates/ra_syntax/src/parsing.rs", "status": "modified", "additions": 5, "deletions": 27, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c47f9e2d37d4797550638e2a7a4fd3538e9edae9/crates%2Fra_syntax%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47f9e2d37d4797550638e2a7a4fd3538e9edae9/crates%2Fra_syntax%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing.rs?ref=c47f9e2d37d4797550638e2a7a4fd3538e9edae9", "patch": "@@ -1,50 +1,28 @@\n-#[macro_use]\n-mod token_set;\n mod builder;\n mod lexer;\n-mod event;\n mod input;\n-mod parser;\n-mod grammar;\n mod reparsing;\n \n+use ra_parser::{parse, ParseError};\n+\n use crate::{\n     SyntaxKind, SyntaxError,\n     parsing::{\n         builder::TreeBuilder,\n         input::ParserInput,\n-        event::process,\n-        parser::Parser,\n     },\n     syntax_node::GreenNode,\n };\n \n pub use self::lexer::{tokenize, Token};\n \n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ParseError(pub String);\n-\n pub(crate) use self::reparsing::incremental_reparse;\n \n pub(crate) fn parse_text(text: &str) -> (GreenNode, Vec<SyntaxError>) {\n     let tokens = tokenize(&text);\n-    let tree_sink = TreeBuilder::new(text, &tokens);\n-    parse_with(tree_sink, text, &tokens, grammar::root)\n-}\n-\n-fn parse_with<S: TreeSink>(\n-    mut tree_sink: S,\n-    text: &str,\n-    tokens: &[Token],\n-    f: fn(&mut Parser),\n-) -> S::Tree {\n-    let events = {\n-        let input = ParserInput::new(text, &tokens);\n-        let mut p = Parser::new(&input);\n-        f(&mut p);\n-        p.finish()\n-    };\n-    process(&mut tree_sink, events);\n+    let token_source = ParserInput::new(text, &tokens);\n+    let mut tree_sink = TreeBuilder::new(text, &tokens);\n+    parse(&token_source, &mut tree_sink);\n     tree_sink.finish()\n }\n "}, {"sha": "0775b090061c7e730bff3680fcfca16fba9ab66e", "filename": "crates/ra_syntax/src/parsing/builder.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c47f9e2d37d4797550638e2a7a4fd3538e9edae9/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47f9e2d37d4797550638e2a7a4fd3538e9edae9/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fbuilder.rs?ref=c47f9e2d37d4797550638e2a7a4fd3538e9edae9", "patch": "@@ -1,7 +1,9 @@\n+use ra_parser::{TreeSink, ParseError};\n+\n use crate::{\n     SmolStr, SyntaxError, SyntaxErrorKind, TextUnit, TextRange,\n     SyntaxKind::{self, *},\n-    parsing::{TreeSink, ParseError, Token},\n+    parsing::Token,\n     syntax_node::{GreenNode, RaTypes},\n };\n \n@@ -17,8 +19,6 @@ pub(crate) struct TreeBuilder<'a> {\n }\n \n impl<'a> TreeSink for TreeBuilder<'a> {\n-    type Tree = (GreenNode, Vec<SyntaxError>);\n-\n     fn leaf(&mut self, kind: SyntaxKind, n_tokens: u8) {\n         self.eat_trivias();\n         let n_tokens = n_tokens as usize;\n@@ -65,10 +65,6 @@ impl<'a> TreeSink for TreeBuilder<'a> {\n         let error = SyntaxError::new(SyntaxErrorKind::ParseError(error), self.text_pos);\n         self.errors.push(error)\n     }\n-\n-    fn finish(self) -> (GreenNode, Vec<SyntaxError>) {\n-        (self.inner.finish(), self.errors)\n-    }\n }\n \n impl<'a> TreeBuilder<'a> {\n@@ -82,6 +78,11 @@ impl<'a> TreeBuilder<'a> {\n             inner: GreenNodeBuilder::new(),\n         }\n     }\n+\n+    pub(super) fn finish(self) -> (GreenNode, Vec<SyntaxError>) {\n+        (self.inner.finish(), self.errors)\n+    }\n+\n     fn eat_trivias(&mut self) {\n         while let Some(&token) = self.tokens.get(self.token_pos) {\n             if !token.kind.is_trivia() {"}, {"sha": "58be795bc302515b3e8e6c87e8ece2df084b2170", "filename": "crates/ra_syntax/src/parsing/input.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c47f9e2d37d4797550638e2a7a4fd3538e9edae9/crates%2Fra_syntax%2Fsrc%2Fparsing%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47f9e2d37d4797550638e2a7a4fd3538e9edae9/crates%2Fra_syntax%2Fsrc%2Fparsing%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Finput.rs?ref=c47f9e2d37d4797550638e2a7a4fd3538e9edae9", "patch": "@@ -1,9 +1,8 @@\n+use ra_parser::TokenSource;\n+\n use crate::{\n     SyntaxKind, SyntaxKind::EOF, TextRange, TextUnit,\n-    parsing::{\n-        TokenSource,\n-        lexer::Token,\n-    },\n+    parsing::lexer::Token,\n };\n \n impl<'t> TokenSource for ParserInput<'t> {"}, {"sha": "ffcb512adf8ddc1a98cf32f07595b94659373b07", "filename": "crates/ra_syntax/src/parsing/reparsing.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c47f9e2d37d4797550638e2a7a4fd3538e9edae9/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47f9e2d37d4797550638e2a7a4fd3538e9edae9/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=c47f9e2d37d4797550638e2a7a4fd3538e9edae9", "patch": "@@ -1,18 +1,18 @@\n+use ra_text_edit::AtomTextEdit;\n+use ra_parser::Reparser;\n+\n use crate::{\n     SyntaxKind::*, TextRange, TextUnit,\n     algo,\n     syntax_node::{GreenNode, SyntaxNode},\n     syntax_error::SyntaxError,\n     parsing::{\n-        grammar, parse_with,\n+        input::ParserInput,\n         builder::TreeBuilder,\n-        parser::Parser,\n         lexer::{tokenize, Token},\n     }\n };\n \n-use ra_text_edit::AtomTextEdit;\n-\n pub(crate) fn incremental_reparse(\n     node: &SyntaxNode,\n     edit: &AtomTextEdit,\n@@ -61,8 +61,10 @@ fn reparse_block<'node>(\n     if !is_balanced(&tokens) {\n         return None;\n     }\n-    let tree_sink = TreeBuilder::new(&text, &tokens);\n-    let (green, new_errors) = parse_with(tree_sink, &text, &tokens, reparser);\n+    let token_source = ParserInput::new(&text, &tokens);\n+    let mut tree_sink = TreeBuilder::new(&text, &tokens);\n+    reparser.parse(&token_source, &mut tree_sink);\n+    let (green, new_errors) = tree_sink.finish();\n     Some((node, green, new_errors))\n }\n \n@@ -78,15 +80,12 @@ fn is_contextual_kw(text: &str) -> bool {\n     }\n }\n \n-fn find_reparsable_node(\n-    node: &SyntaxNode,\n-    range: TextRange,\n-) -> Option<(&SyntaxNode, fn(&mut Parser))> {\n+fn find_reparsable_node(node: &SyntaxNode, range: TextRange) -> Option<(&SyntaxNode, Reparser)> {\n     let node = algo::find_covering_node(node, range);\n     node.ancestors().find_map(|node| {\n         let first_child = node.first_child().map(|it| it.kind());\n         let parent = node.parent().map(|it| it.kind());\n-        grammar::reparser(node.kind(), first_child, parent).map(|r| (node, r))\n+        Reparser::for_node(node.kind(), first_child, parent).map(|r| (node, r))\n     })\n }\n "}, {"sha": "bdd4317422e100deb76000d069da48104ce4d696", "filename": "crates/ra_syntax/src/syntax_error.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c47f9e2d37d4797550638e2a7a4fd3538e9edae9/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47f9e2d37d4797550638e2a7a4fd3538e9edae9/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs?ref=c47f9e2d37d4797550638e2a7a4fd3538e9edae9", "patch": "@@ -1,6 +1,8 @@\n use std::fmt;\n \n-use crate::{TextRange, TextUnit, parsing::ParseError};\n+use ra_parser::ParseError;\n+\n+use crate::{TextRange, TextUnit};\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct SyntaxError {"}]}