{"sha": "00bd306e0d060fc737d670e9aacd2789d3103785", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwYmQzMDZlMGQwNjBmYzczN2Q2NzBlOWFhY2QyNzg5ZDMxMDM3ODU=", "commit": {"author": {"name": "William Brown", "email": "william@blackhats.net.au", "date": "2018-12-19T01:32:56Z"}, "committer": {"name": "William Brown", "email": "william@blackhats.net.au", "date": "2018-12-19T01:32:56Z"}, "message": "Extend documentation for mem uninit to discuss partial allocation of the values", "tree": {"sha": "1292d1a537a31506c9864adb8de02a2872446c18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1292d1a537a31506c9864adb8de02a2872446c18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00bd306e0d060fc737d670e9aacd2789d3103785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00bd306e0d060fc737d670e9aacd2789d3103785", "html_url": "https://github.com/rust-lang/rust/commit/00bd306e0d060fc737d670e9aacd2789d3103785", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00bd306e0d060fc737d670e9aacd2789d3103785/comments", "author": {"login": "Firstyear", "id": 271005, "node_id": "MDQ6VXNlcjI3MTAwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/271005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Firstyear", "html_url": "https://github.com/Firstyear", "followers_url": "https://api.github.com/users/Firstyear/followers", "following_url": "https://api.github.com/users/Firstyear/following{/other_user}", "gists_url": "https://api.github.com/users/Firstyear/gists{/gist_id}", "starred_url": "https://api.github.com/users/Firstyear/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Firstyear/subscriptions", "organizations_url": "https://api.github.com/users/Firstyear/orgs", "repos_url": "https://api.github.com/users/Firstyear/repos", "events_url": "https://api.github.com/users/Firstyear/events{/privacy}", "received_events_url": "https://api.github.com/users/Firstyear/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Firstyear", "id": 271005, "node_id": "MDQ6VXNlcjI3MTAwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/271005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Firstyear", "html_url": "https://github.com/Firstyear", "followers_url": "https://api.github.com/users/Firstyear/followers", "following_url": "https://api.github.com/users/Firstyear/following{/other_user}", "gists_url": "https://api.github.com/users/Firstyear/gists{/gist_id}", "starred_url": "https://api.github.com/users/Firstyear/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Firstyear/subscriptions", "organizations_url": "https://api.github.com/users/Firstyear/orgs", "repos_url": "https://api.github.com/users/Firstyear/repos", "events_url": "https://api.github.com/users/Firstyear/events{/privacy}", "received_events_url": "https://api.github.com/users/Firstyear/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96d1334e567237b1507cd277938e7ae2de75ff51", "url": "https://api.github.com/repos/rust-lang/rust/commits/96d1334e567237b1507cd277938e7ae2de75ff51", "html_url": "https://github.com/rust-lang/rust/commit/96d1334e567237b1507cd277938e7ae2de75ff51"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "7e4e83999c1a3d2c45ad9d1eae536e6efdbb3d02", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/00bd306e0d060fc737d670e9aacd2789d3103785/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00bd306e0d060fc737d670e9aacd2789d3103785/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=00bd306e0d060fc737d670e9aacd2789d3103785", "patch": "@@ -530,6 +530,12 @@ pub unsafe fn zeroed<T>() -> T {\n /// it goes out of scope (and therefore would be dropped). Note that this\n /// includes a `panic` occurring and unwinding the stack suddenly.\n ///\n+/// If you partially initialize an array, you may need to use\n+/// [`ptr::drop_in_place`][drop_in_place] to remove the set you have created\n+/// followed by [`mem::forget`][mem_forget] to prevent drop running on the\n+/// array. If a partially allocated array is dropped this may lead to\n+/// undefined behaviour.\n+///\n /// # Examples\n ///\n /// Here's how to safely initialize an array of [`Vec`]s.\n@@ -583,11 +589,47 @@ pub unsafe fn zeroed<T>() -> T {\n /// println!(\"{:?}\", &data[0]);\n /// ```\n ///\n+/// This example shows how to handle partially allocated arrays, which could\n+/// be found in low-level datastructures.\n+///\n+/// ```\n+/// use std::mem;\n+/// use std::ptr;\n+///\n+/// // Count the number of elements we have assigned.\n+/// let mut data_len: usize = 0;\n+/// let mut data: [String; 1000];\n+///\n+/// unsafe {\n+///     data = mem::uninitialized();\n+///\n+///     for elem in &mut data[0..500] {\n+///         ptr::write(elem, String::from(\"hello\"));\n+///         data_len += 1;\n+///     }\n+///\n+///     // For each item in the array, drop if we allocated it.\n+///     for i in &mut data[0..data_len] {\n+///         ptr::drop_in_place(i);\n+///     }\n+/// }\n+/// // Forget the data. If this is allowed to drop, you may see a crash such as:\n+/// // 'mem_uninit_test(2457,0x7fffb55dd380) malloc: *** error for object 0x7ff3b8402920: pointer being freed was not allocated'\n+/// mem::forget(data);\n+/// ```\n+///\n+/// An alternate strategy is to use [`mem::zeroed`][mem_zeroed] with ptr\n+/// comparison. This is a very error prone strategy and may only be relevant\n+/// for FFI.\n+///\n /// [`Vec`]: ../../std/vec/struct.Vec.html\n /// [`vec!`]: ../../std/macro.vec.html\n /// [`Clone`]: ../../std/clone/trait.Clone.html\n /// [ub]: ../../reference/behavior-considered-undefined.html\n /// [write]: ../ptr/fn.write.html\n+/// [drop_in_place]: ../ptr/fn.drop_in_place.html\n+/// [mem_zeroed]: fn.zeroed.html\n+/// [mem_forget]: fn.forget.html\n /// [copy]: ../intrinsics/fn.copy.html\n /// [copy_no]: ../intrinsics/fn.copy_nonoverlapping.html\n /// [`Drop`]: ../ops/trait.Drop.html"}]}