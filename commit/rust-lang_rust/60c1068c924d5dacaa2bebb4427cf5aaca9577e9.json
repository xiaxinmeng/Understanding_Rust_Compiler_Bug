{"sha": "60c1068c924d5dacaa2bebb4427cf5aaca9577e9", "node_id": "C_kwDOAAsO6NoAKDYwYzEwNjhjOTI0ZDVkYWNhYTJiZWJiNDQyN2NmNWFhY2E5NTc3ZTk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-18T15:44:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-18T15:44:47Z"}, "message": "Rollup merge of #99351 - compiler-errors:arg-mismatch-blame, r=davidtwco\n\nUse `typeck_results` to get accurate qpath res for arg mismatch error\n\nImproves error message from \"function\"  to actually what we're calling (e.g. enum variant constrcutor) in a few cases :smile_cat:", "tree": {"sha": "5f04376b20e0787a77af661c332f3d0785831c42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f04376b20e0787a77af661c332f3d0785831c42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60c1068c924d5dacaa2bebb4427cf5aaca9577e9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi1X/wCRBK7hj4Ov3rIwAAz10IAGsVp1jjMpC0G48+MdxsnPMM\nd5P213/Fj6ZFD94mMneA/xIY1rgNNlMIt7biIVqJjlvzbPmmyq1VwVidbKb2RVZe\nlcJrkOJgi37uf0IVNkyr+D0PBeAbkYCKTkc2XTC/S/SS3oL5EXaAYLA6zw9MB8BU\nH9QcO92lupFd1s7pvAXvOdC9zIhy40Vz9YZR4RobMVXdi29j9JlEmk0vrfchCL5n\niNnLjGt2809O66JZ+XpcqFyADovrQT+yNS2JArjDi7T22b8Inl9ZypWD1R0nvG7e\nhJuX9jytE1FwpJPA6CMoJ5yFszSvIupr7RX25zf6hNjttiKZZAK1EakVSHi2OBo=\n=m7Vd\n-----END PGP SIGNATURE-----\n", "payload": "tree 5f04376b20e0787a77af661c332f3d0785831c42\nparent affdcd6cef020ca7a110c3b954214486a0727b85\nparent 75a1b1cf066b36decf39f4d5036c0b1aae53c680\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1658159087 +0530\ncommitter GitHub <noreply@github.com> 1658159087 +0530\n\nRollup merge of #99351 - compiler-errors:arg-mismatch-blame, r=davidtwco\n\nUse `typeck_results` to get accurate qpath res for arg mismatch error\n\nImproves error message from \"function\"  to actually what we're calling (e.g. enum variant constrcutor) in a few cases :smile_cat:\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60c1068c924d5dacaa2bebb4427cf5aaca9577e9", "html_url": "https://github.com/rust-lang/rust/commit/60c1068c924d5dacaa2bebb4427cf5aaca9577e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60c1068c924d5dacaa2bebb4427cf5aaca9577e9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "affdcd6cef020ca7a110c3b954214486a0727b85", "url": "https://api.github.com/repos/rust-lang/rust/commits/affdcd6cef020ca7a110c3b954214486a0727b85", "html_url": "https://github.com/rust-lang/rust/commit/affdcd6cef020ca7a110c3b954214486a0727b85"}, {"sha": "75a1b1cf066b36decf39f4d5036c0b1aae53c680", "url": "https://api.github.com/repos/rust-lang/rust/commits/75a1b1cf066b36decf39f4d5036c0b1aae53c680", "html_url": "https://github.com/rust-lang/rust/commit/75a1b1cf066b36decf39f4d5036c0b1aae53c680"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "41c38f558b6efb78a83b226a300439b60fe4ecda", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/60c1068c924d5dacaa2bebb4427cf5aaca9577e9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c1068c924d5dacaa2bebb4427cf5aaca9577e9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=60c1068c924d5dacaa2bebb4427cf5aaca9577e9", "patch": "@@ -443,17 +443,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Next, let's construct the error\n         let (error_span, full_call_span, ctor_of) = match &call_expr.kind {\n             hir::ExprKind::Call(\n-                hir::Expr {\n-                    span,\n-                    kind:\n-                        hir::ExprKind::Path(hir::QPath::Resolved(\n-                            _,\n-                            hir::Path { res: Res::Def(DefKind::Ctor(of, _), _), .. },\n-                        )),\n-                    ..\n-                },\n+                hir::Expr { hir_id, span, kind: hir::ExprKind::Path(qpath), .. },\n                 _,\n-            ) => (call_span, *span, Some(of)),\n+            ) => {\n+                if let Res::Def(DefKind::Ctor(of, _), _) =\n+                    self.typeck_results.borrow().qpath_res(qpath, *hir_id)\n+                {\n+                    (call_span, *span, Some(of))\n+                } else {\n+                    (call_span, *span, None)\n+                }\n+            }\n             hir::ExprKind::Call(hir::Expr { span, .. }, _) => (call_span, *span, None),\n             hir::ExprKind::MethodCall(path_segment, _, span) => {\n                 let ident_span = path_segment.ident.span;"}, {"sha": "a922d7a5e4132d7e7b9fac96b6f6c72adfe10654", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60c1068c924d5dacaa2bebb4427cf5aaca9577e9/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60c1068c924d5dacaa2bebb4427cf5aaca9577e9/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr?ref=60c1068c924d5dacaa2bebb4427cf5aaca9577e9", "patch": "@@ -7,7 +7,7 @@ LL |     fn ts_variant() {\n LL |         Self::TSVariant(());\n    |         --------------- ^^ expected type parameter `T`, found `()`\n    |         |\n-   |         arguments to this function are incorrect\n+   |         arguments to this enum variant are incorrect\n    |\n    = note: expected type parameter `T`\n                    found unit type `()`\n@@ -55,7 +55,7 @@ LL | impl<T> Enum<T> {\n LL |         Self::<()>::TSVariant(());\n    |         --------------------- ^^ expected type parameter `T`, found `()`\n    |         |\n-   |         arguments to this function are incorrect\n+   |         arguments to this enum variant are incorrect\n    |\n    = note: expected type parameter `T`\n                    found unit type `()`"}, {"sha": "3a8712f2ae515a266da53e8cd7c42d91dc56c462", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-priority-higher-than-other-inherent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60c1068c924d5dacaa2bebb4427cf5aaca9577e9/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c1068c924d5dacaa2bebb4427cf5aaca9577e9/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.rs?ref=60c1068c924d5dacaa2bebb4427cf5aaca9577e9", "patch": "@@ -18,6 +18,6 @@ impl E2 {\n }\n \n fn main() {\n-    <E>::V(); //~ ERROR this function takes 1 argument but 0 arguments were supplied\n+    <E>::V(); //~ ERROR this enum variant takes 1 argument but 0 arguments were supplied\n     let _: u8 = <E2>::V; //~ ERROR mismatched types\n }"}, {"sha": "006253f84320802f6582a962b9c2ca5c6fe78509", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-priority-higher-than-other-inherent.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60c1068c924d5dacaa2bebb4427cf5aaca9577e9/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60c1068c924d5dacaa2bebb4427cf5aaca9577e9/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr?ref=60c1068c924d5dacaa2bebb4427cf5aaca9577e9", "patch": "@@ -1,4 +1,4 @@\n-error[E0061]: this function takes 1 argument but 0 arguments were supplied\n+error[E0061]: this enum variant takes 1 argument but 0 arguments were supplied\n   --> $DIR/enum-variant-priority-higher-than-other-inherent.rs:21:5\n    |\n LL |     <E>::V();"}]}