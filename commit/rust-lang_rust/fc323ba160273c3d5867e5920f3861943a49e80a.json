{"sha": "fc323ba160273c3d5867e5920f3861943a49e80a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMzIzYmExNjAyNzNjM2Q1ODY3ZTU5MjBmMzg2MTk0M2E0OWU4MGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-16T04:16:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-16T04:16:12Z"}, "message": "Auto merge of #53293 - petrochenkov:gramattr2, r=alexcrichton\n\nsyntax: Enforce attribute grammar in the parser\n\nAlso fix feature-gating for `unrestricted_attribute_tokens` that was introduced in https://github.com/rust-lang/rust/pull/53270, but was actually broken.\n\ncc https://github.com/rust-lang/rust/pull/50911", "tree": {"sha": "9b7e6fc676f2c8c23091546e977821da727971fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b7e6fc676f2c8c23091546e977821da727971fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc323ba160273c3d5867e5920f3861943a49e80a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc323ba160273c3d5867e5920f3861943a49e80a", "html_url": "https://github.com/rust-lang/rust/commit/fc323ba160273c3d5867e5920f3861943a49e80a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc323ba160273c3d5867e5920f3861943a49e80a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c712b149229a7968ca2bd56d92241e1ba13dda7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c712b149229a7968ca2bd56d92241e1ba13dda7", "html_url": "https://github.com/rust-lang/rust/commit/6c712b149229a7968ca2bd56d92241e1ba13dda7"}, {"sha": "097c40cf6e1defc2fc49d521374254ee27f5f1fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/097c40cf6e1defc2fc49d521374254ee27f5f1fb", "html_url": "https://github.com/rust-lang/rust/commit/097c40cf6e1defc2fc49d521374254ee27f5f1fb"}], "stats": {"total": 183, "additions": 128, "deletions": 55}, "files": [{"sha": "5857bd282f0bc6823cb9a2505117b96594eaa089", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=fc323ba160273c3d5867e5920f3861943a49e80a", "patch": "@@ -607,7 +607,7 @@ impl NestedMetaItemKind {\n }\n \n impl Lit {\n-    fn tokens(&self) -> TokenStream {\n+    crate fn tokens(&self) -> TokenStream {\n         TokenTree::Token(self.span, self.node.token()).into()\n     }\n }\n@@ -794,7 +794,7 @@ pub fn inject(mut krate: ast::Crate, parse_sess: &ParseSess, attrs: &[String]) -\n         );\n \n         let start_span = parser.span;\n-        let (path, tokens) = panictry!(parser.parse_path_and_tokens());\n+        let (path, tokens) = panictry!(parser.parse_meta_item_unrestricted());\n         let end_span = parser.span;\n         if parser.token != token::Eof {\n             parse_sess.span_diagnostic"}, {"sha": "b4e35a9d56496371ed32ccd82ec9ef294f74ac93", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=fc323ba160273c3d5867e5920f3861943a49e80a", "patch": "@@ -90,7 +90,7 @@ impl<'a> StripUnconfigured<'a> {\n             let cfg = parser.parse_meta_item()?;\n             parser.expect(&token::Comma)?;\n             let lo = parser.span.lo();\n-            let (path, tokens) = parser.parse_path_and_tokens()?;\n+            let (path, tokens) = parser.parse_meta_item_unrestricted()?;\n             parser.expect(&token::CloseDelim(token::Paren))?;\n             Ok((cfg, path, tokens, parser.prev_span.with_lo(lo)))\n         }) {"}, {"sha": "f837bead6a08527e0647badba922205ecf5801d3", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=fc323ba160273c3d5867e5920f3861943a49e80a", "patch": "@@ -1526,27 +1526,29 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             }\n         }\n \n-        match attr.parse_meta(self.context.parse_sess) {\n-            Ok(meta) => {\n-                // allow attr_literals in #[repr(align(x))] and #[repr(packed(n))]\n-                let mut allow_attr_literal = false;\n-                if attr.path == \"repr\" {\n-                    if let Some(content) = meta.meta_item_list() {\n-                        allow_attr_literal = content.iter().any(\n-                            |c| c.check_name(\"align\") || c.check_name(\"packed\"));\n+        if !self.context.features.unrestricted_attribute_tokens {\n+            // Unfortunately, `parse_meta` cannot be called speculatively because it can report\n+            // errors by itself, so we have to call it only if the feature is disabled.\n+            match attr.parse_meta(self.context.parse_sess) {\n+                Ok(meta) => {\n+                    // allow attr_literals in #[repr(align(x))] and #[repr(packed(n))]\n+                    let mut allow_attr_literal = false;\n+                    if attr.path == \"repr\" {\n+                        if let Some(content) = meta.meta_item_list() {\n+                            allow_attr_literal = content.iter().any(\n+                                |c| c.check_name(\"align\") || c.check_name(\"packed\"));\n+                        }\n                     }\n-                }\n \n-                if !allow_attr_literal && contains_novel_literal(&meta) {\n-                    gate_feature_post!(&self, attr_literals, attr.span,\n-                                    \"non-string literals in attributes, or string \\\n-                                    literals in top-level positions, are experimental\");\n+                    if !allow_attr_literal && contains_novel_literal(&meta) {\n+                        gate_feature_post!(&self, attr_literals, attr.span,\n+                                        \"non-string literals in attributes, or string \\\n+                                        literals in top-level positions, are experimental\");\n+                    }\n+                }\n+                Err(mut err) => {\n+                    err.help(\"try enabling `#![feature(unrestricted_attribute_tokens)]`\").emit()\n                 }\n-            }\n-            Err(mut err) => {\n-                err.cancel();\n-                gate_feature_post!(&self, unrestricted_attribute_tokens, attr.span,\n-                                    \"arbitrary tokens in non-macro attributes are unstable\");\n             }\n         }\n     }"}, {"sha": "b0136c3e18b468a5f05e835068c99e3f11f5629d", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=fc323ba160273c3d5867e5920f3861943a49e80a", "patch": "@@ -12,9 +12,9 @@ use attr;\n use ast;\n use codemap::respan;\n use parse::{SeqSep, PResult};\n-use parse::token::{self, Nonterminal};\n+use parse::token::{self, Nonterminal, DelimToken};\n use parse::parser::{Parser, TokenType, PathStyle};\n-use tokenstream::TokenStream;\n+use tokenstream::{TokenStream, TokenTree};\n \n #[derive(Debug)]\n enum InnerAttributeParsePolicy<'a> {\n@@ -116,7 +116,7 @@ impl<'a> Parser<'a> {\n                 };\n \n                 self.expect(&token::OpenDelim(token::Bracket))?;\n-                let (path, tokens) = self.parse_path_and_tokens()?;\n+                let (path, tokens) = self.parse_meta_item_unrestricted()?;\n                 self.expect(&token::CloseDelim(token::Bracket))?;\n                 let hi = self.prev_span;\n \n@@ -138,7 +138,16 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    crate fn parse_path_and_tokens(&mut self) -> PResult<'a, (ast::Path, TokenStream)> {\n+    /// Parse an inner part of attribute - path and following tokens.\n+    /// The tokens must be either a delimited token stream, or empty token stream,\n+    /// or the \"legacy\" key-value form.\n+    /// PATH `(` TOKEN_STREAM `)`\n+    /// PATH `[` TOKEN_STREAM `]`\n+    /// PATH `{` TOKEN_STREAM `}`\n+    /// PATH\n+    /// PATH `=` TOKEN_TREE\n+    /// The delimiters or `=` are still put into the resulting token stream.\n+    crate fn parse_meta_item_unrestricted(&mut self) -> PResult<'a, (ast::Path, TokenStream)> {\n         let meta = match self.token {\n             token::Interpolated(ref nt) => match nt.0 {\n                 Nonterminal::NtMeta(ref meta) => Some(meta.clone()),\n@@ -150,7 +159,22 @@ impl<'a> Parser<'a> {\n             self.bump();\n             (meta.ident, meta.node.tokens(meta.span))\n         } else {\n-            (self.parse_path(PathStyle::Mod)?, self.parse_tokens())\n+            let path = self.parse_path(PathStyle::Mod)?;\n+            let tokens = if self.check(&token::OpenDelim(DelimToken::Paren)) ||\n+               self.check(&token::OpenDelim(DelimToken::Bracket)) ||\n+               self.check(&token::OpenDelim(DelimToken::Brace)) {\n+                   self.parse_token_tree().into()\n+            } else if self.eat(&token::Eq) {\n+                let eq = TokenTree::Token(self.prev_span, token::Eq);\n+                let tree = match self.token {\n+                    token::CloseDelim(_) | token::Eof => self.unexpected()?,\n+                    _ => self.parse_token_tree(),\n+                };\n+                TokenStream::concat(vec![eq.into(), tree.into()])\n+            } else {\n+                TokenStream::empty()\n+            };\n+            (path, tokens)\n         })\n     }\n "}, {"sha": "b1e1cdee2ee8e5c66ee292e829c2a46697788349", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=fc323ba160273c3d5867e5920f3861943a49e80a", "patch": "@@ -825,7 +825,7 @@ impl<'a> Parser<'a> {\n     ///\n     /// This method will automatically add `tok` to `expected_tokens` if `tok` is not\n     /// encountered.\n-    fn check(&mut self, tok: &token::Token) -> bool {\n+    crate fn check(&mut self, tok: &token::Token) -> bool {\n         let is_present = self.token == *tok;\n         if !is_present { self.expected_tokens.push(TokenType::Token(tok.clone())); }\n         is_present"}, {"sha": "baeb019df1ca0491a0c1c531df5788f8aacbb23d", "filename": "src/test/compile-fail-fulldeps/issue-48941.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Fcompile-fail-fulldeps%2Fissue-48941.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Fcompile-fail-fulldeps%2Fissue-48941.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fissue-48941.rs?ref=fc323ba160273c3d5867e5920f3861943a49e80a", "patch": "@@ -17,10 +17,7 @@\n #![feature(plugin)]\n #![plugin(macro_crate_test)]\n \n-#[noop_attribute\"x\"] //~ ERROR expected one of\n-fn night() { }\n-\n-#[noop_attribute(\"hi\"), rank = 2] //~ ERROR unexpected token\n+#[noop_attribute(\"hi\", rank = a)] //~ ERROR expected unsuffixed literal or identifier, found a\n fn knight() { }\n \n #[noop_attribute(\"/user\", data= = \"<user\")] //~ ERROR literal or identifier"}, {"sha": "df3f7a239b926b9132e752ebe953f35ab49368fe", "filename": "src/test/compile-fail-fulldeps/proc-macro/proc-macro-attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-attributes.rs?ref=fc323ba160273c3d5867e5920f3861943a49e80a", "patch": "@@ -21,7 +21,7 @@ extern crate derive_b;\n #[C] //~ ERROR: The attribute `C` is currently unknown to the compiler\n #[B(D)]\n #[B(E = \"foo\")]\n-#[B arbitrary tokens] //~ ERROR arbitrary tokens in non-macro attributes are unstable\n+#[B(arbitrary tokens)] //~ ERROR expected one of `(`, `)`, `,`, `::`, or `=`, found `tokens`\n struct B;\n \n fn main() {}"}, {"sha": "0798aa549f0b2cd4d2a8ac905551509ad165be54", "filename": "src/test/compile-fail-fulldeps/proc-macro/proc-macro-gates.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-gates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-gates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-gates.rs?ref=fc323ba160273c3d5867e5920f3861943a49e80a", "patch": "@@ -41,12 +41,6 @@ mod _test2_inner {\n #[a = y] //~ ERROR: must only be followed by a delimiter token\n fn _test3() {}\n \n-#[a = ] //~ ERROR: must only be followed by a delimiter token\n-fn _test4() {}\n-\n-#[a () = ] //~ ERROR: must only be followed by a delimiter token\n-fn _test5() {}\n-\n fn attrs() {\n     // Statement, item\n     #[a] // OK"}, {"sha": "ce640a3f67cd22bb639e47b6eb14dd544547ff83", "filename": "src/test/parse-fail/attr-bad-meta-2.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Fparse-fail%2Fattr-bad-meta-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Fparse-fail%2Fattr-bad-meta-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fattr-bad-meta-2.rs?ref=fc323ba160273c3d5867e5920f3861943a49e80a", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[path =] //~ ERROR unexpected token: `]`\n+mod m {}"}, {"sha": "92e2a59d25d87f29e4900c52c0965407954a77bb", "filename": "src/test/parse-fail/attr-bad-meta-3.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Fparse-fail%2Fattr-bad-meta-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Fparse-fail%2Fattr-bad-meta-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fattr-bad-meta-3.rs?ref=fc323ba160273c3d5867e5920f3861943a49e80a", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[path() token] //~ ERROR expected `]`, found `token`\n+mod m {}"}, {"sha": "6f9d794dc2dc302d36eb0f298e1af0652f338344", "filename": "src/test/parse-fail/attr-bad-meta.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Fparse-fail%2Fattr-bad-meta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Fparse-fail%2Fattr-bad-meta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fattr-bad-meta.rs?ref=fc323ba160273c3d5867e5920f3861943a49e80a", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// asterisk is bogus\n-#[path*] //~ ERROR arbitrary tokens in non-macro attributes are unstable\n+#![feature(unrestricted_attribute_tokens)]\n+\n+#[path*] //~ ERROR expected one of `(`, `::`, `=`, `[`, `]`, or `{`, found `*`\n mod m {}"}, {"sha": "e1aabad4142f93cae3f0d00698034e7efe1eb09d", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/derive-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-b.rs?ref=fc323ba160273c3d5867e5920f3861943a49e80a", "patch": "@@ -19,7 +19,7 @@ use proc_macro::TokenStream;\n #[proc_macro_derive(B, attributes(B, C))]\n pub fn derive(input: TokenStream) -> TokenStream {\n     let input = input.to_string();\n-    assert!(input.contains(\"#[B arbitrary tokens]\"));\n+    assert!(input.contains(\"#[B [ arbitrary tokens ]]\"));\n     assert!(input.contains(\"struct B {\"));\n     assert!(input.contains(\"#[C]\"));\n     \"\".parse().unwrap()"}, {"sha": "1de6496e29f8b22fc6a6d8d92bfd7dbb7208b84c", "filename": "src/test/run-pass-fulldeps/proc-macro/derive-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-b.rs?ref=fc323ba160273c3d5867e5920f3861943a49e80a", "patch": "@@ -16,7 +16,7 @@\n extern crate derive_b;\n \n #[derive(Debug, PartialEq, derive_b::B, Eq, Copy, Clone)]\n-#[cfg_attr(all(), B arbitrary tokens)]\n+#[cfg_attr(all(), B[arbitrary tokens])]\n struct B {\n     #[C]\n     a: u64"}, {"sha": "18ca34b117db7a943aa2b5543fd3f39af1e8ba8e", "filename": "src/test/ui-fulldeps/proc-macro/attribute-spans-preserved.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fattribute-spans-preserved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fattribute-spans-preserved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fattribute-spans-preserved.rs?ref=fc323ba160273c3d5867e5920f3861943a49e80a", "patch": "@@ -17,6 +17,6 @@ extern crate attribute_spans_preserved as foo;\n use foo::foo;\n \n #[ foo ( let y: u32 = \"z\"; ) ] //~ ERROR: mismatched types\n-#[ bar let x: u32 = \"y\"; ] //~ ERROR: mismatched types\n+#[ bar { let x: u32 = \"y\"; } ] //~ ERROR: mismatched types\n fn main() {\n }"}, {"sha": "a6cbf79209e2e0dccd4ce9bbb221439dd7544276", "filename": "src/test/ui-fulldeps/proc-macro/attribute-spans-preserved.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fattribute-spans-preserved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fattribute-spans-preserved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fattribute-spans-preserved.stderr?ref=fc323ba160273c3d5867e5920f3861943a49e80a", "patch": "@@ -8,10 +8,10 @@ LL | #[ foo ( let y: u32 = \"z\"; ) ] //~ ERROR: mismatched types\n               found type `&'static str`\n \n error[E0308]: mismatched types\n-  --> $DIR/attribute-spans-preserved.rs:20:21\n+  --> $DIR/attribute-spans-preserved.rs:20:23\n    |\n-LL | #[ bar let x: u32 = \"y\"; ] //~ ERROR: mismatched types\n-   |                     ^^^ expected u32, found reference\n+LL | #[ bar { let x: u32 = \"y\"; } ] //~ ERROR: mismatched types\n+   |                       ^^^ expected u32, found reference\n    |\n    = note: expected type `u32`\n               found type `&'static str`"}, {"sha": "b1487fcd5edbdd7b8db1619f214b78db01b78de0", "filename": "src/test/ui-fulldeps/proc-macro/attribute-spans-preserved.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fattribute-spans-preserved.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fattribute-spans-preserved.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fattribute-spans-preserved.stdout?ref=fc323ba160273c3d5867e5920f3861943a49e80a", "patch": "@@ -1 +1 @@\n-fn main (  ) { let y : u32 = \"z\" ; let x : u32 = \"y\" ; }\n+fn main (  ) { let y : u32 = \"z\" ; { let x : u32 = \"y\" ; } }"}, {"sha": "c759e62dba0b5206fd3286cb9420484b9ae31759", "filename": "src/test/ui/attr-eq-token-tree.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Fui%2Fattr-eq-token-tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Fui%2Fattr-eq-token-tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-eq-token-tree.rs?ref=fc323ba160273c3d5867e5920f3861943a49e80a", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+#![feature(custom_attribute, unrestricted_attribute_tokens)]\n+\n+#[my_attr = !] // OK under feature gate\n+fn main() {}"}, {"sha": "111375b369363e9e2821f961da5e3c4d5dc8dd77", "filename": "src/test/ui/macros/macro-attribute.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Fui%2Fmacros%2Fmacro-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Fui%2Fmacros%2Fmacro-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-attribute.rs?ref=fc323ba160273c3d5867e5920f3861943a49e80a", "patch": "@@ -8,5 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[doc = $not_there] //~ ERROR arbitrary tokens in non-macro attributes are unstable\n+#![feature(unrestricted_attribute_tokens)]\n+\n+#[doc = $not_there] //~ ERROR expected `]`, found `not_there`\n fn main() { }"}, {"sha": "c403872ecb38581bb4c9bc6cf0d533a51997dd92", "filename": "src/test/ui/macros/macro-attribute.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Fui%2Fmacros%2Fmacro-attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Fui%2Fmacros%2Fmacro-attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-attribute.stderr?ref=fc323ba160273c3d5867e5920f3861943a49e80a", "patch": "@@ -1,11 +1,8 @@\n-error[E0658]: arbitrary tokens in non-macro attributes are unstable (see issue #44690)\n-  --> $DIR/macro-attribute.rs:11:1\n+error: expected `]`, found `not_there`\n+  --> $DIR/macro-attribute.rs:13:10\n    |\n-LL | #[doc = $not_there] //~ ERROR arbitrary tokens in non-macro attributes are unstable\n-   | ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(unrestricted_attribute_tokens)] to the crate attributes to enable\n+LL | #[doc = $not_there] //~ ERROR expected `]`, found `not_there`\n+   |          ^^^^^^^^^ expected `]`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "2971b504369b30dea01c0b237306e1e506f8af93", "filename": "src/test/ui/unrestricted-attribute-tokens.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Fui%2Funrestricted-attribute-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc323ba160273c3d5867e5920f3861943a49e80a/src%2Ftest%2Fui%2Funrestricted-attribute-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funrestricted-attribute-tokens.rs?ref=fc323ba160273c3d5867e5920f3861943a49e80a", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+#![feature(custom_attribute, unrestricted_attribute_tokens)]\n+\n+#[my_attr(a b c d)]\n+fn main() {}"}]}