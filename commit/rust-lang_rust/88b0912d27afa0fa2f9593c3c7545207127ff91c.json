{"sha": "88b0912d27afa0fa2f9593c3c7545207127ff91c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4YjA5MTJkMjdhZmEwZmEyZjk1OTNjM2M3NTQ1MjA3MTI3ZmY5MWM=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-02-10T21:44:55Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-02-13T23:51:08Z"}, "message": "Fix a typo in a variable name.", "tree": {"sha": "5a6a31ba59cc93ed520212c3f0475150286d4de5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a6a31ba59cc93ed520212c3f0475150286d4de5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88b0912d27afa0fa2f9593c3c7545207127ff91c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88b0912d27afa0fa2f9593c3c7545207127ff91c", "html_url": "https://github.com/rust-lang/rust/commit/88b0912d27afa0fa2f9593c3c7545207127ff91c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88b0912d27afa0fa2f9593c3c7545207127ff91c/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbd8220891d229f9092e623b8a1dcadbddeb12fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbd8220891d229f9092e623b8a1dcadbddeb12fc", "html_url": "https://github.com/rust-lang/rust/commit/dbd8220891d229f9092e623b8a1dcadbddeb12fc"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "f6abcce4d3facb79592b6e258032d1be208af178", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88b0912d27afa0fa2f9593c3c7545207127ff91c/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88b0912d27afa0fa2f9593c3c7545207127ff91c/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=88b0912d27afa0fa2f9593c3c7545207127ff91c", "patch": "@@ -222,13 +222,14 @@ fn generic_extension<'cx>(\n         // This is used so that if a matcher is not `Success(..)`ful,\n         // then the spans which became gated when parsing the unsuccessful matcher\n         // are not recorded. On the first `Success(..)`ful matcher, the spans are merged.\n-        let mut gated_spans_snaphot = mem::take(&mut *cx.parse_sess.gated_spans.spans.borrow_mut());\n+        let mut gated_spans_snapshot =\n+            mem::take(&mut *cx.parse_sess.gated_spans.spans.borrow_mut());\n \n         match parse_tt(&mut Cow::Borrowed(&parser), lhs_tt) {\n             Success(named_matches) => {\n                 // The matcher was `Success(..)`ful.\n                 // Merge the gated spans from parsing the matcher with the pre-existing ones.\n-                cx.parse_sess.gated_spans.merge(gated_spans_snaphot);\n+                cx.parse_sess.gated_spans.merge(gated_spans_snapshot);\n \n                 let rhs = match rhses[i] {\n                     // ignore delimiters\n@@ -289,7 +290,7 @@ fn generic_extension<'cx>(\n \n         // The matcher was not `Success(..)`ful.\n         // Restore to the state before snapshotting and maybe try again.\n-        mem::swap(&mut gated_spans_snaphot, &mut cx.parse_sess.gated_spans.spans.borrow_mut());\n+        mem::swap(&mut gated_spans_snapshot, &mut cx.parse_sess.gated_spans.spans.borrow_mut());\n     }\n     drop(parser);\n "}]}