{"sha": "29b30a9bd291431d4bcae218fc0b1dcb2d35afec", "node_id": "C_kwDOAAsO6NoAKDI5YjMwYTliZDI5MTQzMWQ0YmNhZTIxOGZjMGIxZGNiMmQzNWFmZWM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-16T12:03:30Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-11-27T16:39:27Z"}, "message": "Visit type in process_projection_elem.", "tree": {"sha": "e7670943ff2d1fb9b41677eded14dfac14b83db0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7670943ff2d1fb9b41677eded14dfac14b83db0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29b30a9bd291431d4bcae218fc0b1dcb2d35afec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29b30a9bd291431d4bcae218fc0b1dcb2d35afec", "html_url": "https://github.com/rust-lang/rust/commit/29b30a9bd291431d4bcae218fc0b1dcb2d35afec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29b30a9bd291431d4bcae218fc0b1dcb2d35afec/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d246f0c8d3063fea86abbb65a824362709541ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d246f0c8d3063fea86abbb65a824362709541ba", "html_url": "https://github.com/rust-lang/rust/commit/6d246f0c8d3063fea86abbb65a824362709541ba"}], "stats": {"total": 66, "additions": 6, "deletions": 60}, "files": [{"sha": "4b6cab24cdb70457537d01f21608a3cacea06e68", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/29b30a9bd291431d4bcae218fc0b1dcb2d35afec/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b30a9bd291431d4bcae218fc0b1dcb2d35afec/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=29b30a9bd291431d4bcae218fc0b1dcb2d35afec", "patch": "@@ -1,7 +1,7 @@\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::{InferCtxt, NllRegionVariableOrigin};\n use rustc_middle::mir::visit::{MutVisitor, TyContext};\n-use rustc_middle::mir::{Body, Location, PlaceElem, Promoted};\n+use rustc_middle::mir::{Body, Location, Promoted};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n \n@@ -62,22 +62,6 @@ impl<'a, 'tcx> MutVisitor<'tcx> for NllVisitor<'a, 'tcx> {\n         debug!(?ty);\n     }\n \n-    fn process_projection_elem(\n-        &mut self,\n-        elem: PlaceElem<'tcx>,\n-        _: Location,\n-    ) -> Option<PlaceElem<'tcx>> {\n-        if let PlaceElem::Field(field, ty) = elem {\n-            let new_ty = self.renumber_regions(ty);\n-\n-            if new_ty != ty {\n-                return Some(PlaceElem::Field(field, new_ty));\n-            }\n-        }\n-\n-        None\n-    }\n-\n     #[instrument(skip(self), level = \"debug\")]\n     fn visit_substs(&mut self, substs: &mut SubstsRef<'tcx>, location: Location) {\n         *substs = self.renumber_regions(*substs);"}, {"sha": "4c23ab49fa29f71efd91a9e12c482d41bf0ada32", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29b30a9bd291431d4bcae218fc0b1dcb2d35afec/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b30a9bd291431d4bcae218fc0b1dcb2d35afec/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=29b30a9bd291431d4bcae218fc0b1dcb2d35afec", "patch": "@@ -1004,8 +1004,12 @@ macro_rules! visit_place_fns {\n \n                     if new_local == local { None } else { Some(PlaceElem::Index(new_local)) }\n                 }\n+                PlaceElem::Field(field, ty) => {\n+                    let mut new_ty = ty;\n+                    self.visit_ty(&mut new_ty, TyContext::Location(location));\n+                    if ty != new_ty { Some(PlaceElem::Field(field, new_ty)) } else { None }\n+                }\n                 PlaceElem::Deref\n-                | PlaceElem::Field(..)\n                 | PlaceElem::ConstantIndex { .. }\n                 | PlaceElem::Subslice { .. }\n                 | PlaceElem::Downcast(..) => None,"}, {"sha": "c45946a9e2a982d6ca43e534934250481922453a", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/29b30a9bd291431d4bcae218fc0b1dcb2d35afec/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b30a9bd291431d4bcae218fc0b1dcb2d35afec/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=29b30a9bd291431d4bcae218fc0b1dcb2d35afec", "patch": "@@ -316,28 +316,6 @@ impl<'tcx> MutVisitor<'tcx> for Replacer<'tcx> {\n         }\n     }\n \n-    fn process_projection_elem(\n-        &mut self,\n-        elem: PlaceElem<'tcx>,\n-        _: Location,\n-    ) -> Option<PlaceElem<'tcx>> {\n-        match elem {\n-            PlaceElem::Index(local) => {\n-                if let Some(replacement) = self.replacements.for_src(local) {\n-                    bug!(\n-                        \"cannot replace {:?} with {:?} in index projection {:?}\",\n-                        local,\n-                        replacement,\n-                        elem,\n-                    );\n-                } else {\n-                    None\n-                }\n-            }\n-            _ => None,\n-        }\n-    }\n-\n     fn visit_place(&mut self, place: &mut Place<'tcx>, context: PlaceContext, location: Location) {\n         if let Some(replacement) = self.replacements.for_src(place.local) {\n             // Rebase `place`s projections onto `replacement`'s."}, {"sha": "3bcb71b64f455e2cf0ba4dcd55f4a9c85d50b6e0", "filename": "compiler/rustc_mir_transform/src/reveal_all.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/29b30a9bd291431d4bcae218fc0b1dcb2d35afec/compiler%2Frustc_mir_transform%2Fsrc%2Freveal_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b30a9bd291431d4bcae218fc0b1dcb2d35afec/compiler%2Frustc_mir_transform%2Fsrc%2Freveal_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Freveal_all.rs?ref=29b30a9bd291431d4bcae218fc0b1dcb2d35afec", "patch": "@@ -35,24 +35,4 @@ impl<'tcx> MutVisitor<'tcx> for RevealAllVisitor<'tcx> {\n     fn visit_ty(&mut self, ty: &mut Ty<'tcx>, _: TyContext) {\n         *ty = self.tcx.normalize_erasing_regions(self.param_env, ty);\n     }\n-\n-    #[inline]\n-    fn process_projection_elem(\n-        &mut self,\n-        elem: PlaceElem<'tcx>,\n-        _: Location,\n-    ) -> Option<PlaceElem<'tcx>> {\n-        match elem {\n-            PlaceElem::Field(field, ty) => {\n-                let new_ty = self.tcx.normalize_erasing_regions(self.param_env, ty);\n-                if ty != new_ty { Some(PlaceElem::Field(field, new_ty)) } else { None }\n-            }\n-            // None of those contain a Ty.\n-            PlaceElem::Index(..)\n-            | PlaceElem::Deref\n-            | PlaceElem::ConstantIndex { .. }\n-            | PlaceElem::Subslice { .. }\n-            | PlaceElem::Downcast(..) => None,\n-        }\n-    }\n }"}]}