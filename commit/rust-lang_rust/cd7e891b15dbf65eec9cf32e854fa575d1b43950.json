{"sha": "cd7e891b15dbf65eec9cf32e854fa575d1b43950", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkN2U4OTFiMTVkYmY2NWVlYzljZjMyZTg1NGZhNTc1ZDFiNDM5NTA=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-12-12T14:07:13Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-12-12T14:07:13Z"}, "message": "specialize: remove Boxes used by Children::insert", "tree": {"sha": "90b2110719972f3c733bba46cbe04e29f77be282", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90b2110719972f3c733bba46cbe04e29f77be282"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd7e891b15dbf65eec9cf32e854fa575d1b43950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd7e891b15dbf65eec9cf32e854fa575d1b43950", "html_url": "https://github.com/rust-lang/rust/commit/cd7e891b15dbf65eec9cf32e854fa575d1b43950", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd7e891b15dbf65eec9cf32e854fa575d1b43950/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae3833db3b0acd5d7f06cad333e61e21e39be295", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae3833db3b0acd5d7f06cad333e61e21e39be295", "html_url": "https://github.com/rust-lang/rust/commit/ae3833db3b0acd5d7f06cad333e61e21e39be295"}], "stats": {"total": 41, "additions": 33, "deletions": 8}, "files": [{"sha": "b0ca2f6cecc0b9d8355e3f2d28f843c1753c61ca", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/cd7e891b15dbf65eec9cf32e854fa575d1b43950/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd7e891b15dbf65eec9cf32e854fa575d1b43950/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=cd7e891b15dbf65eec9cf32e854fa575d1b43950", "patch": "@@ -132,10 +132,12 @@ impl<'a, 'gcx, 'tcx> Children {\n             simplified_self,\n         );\n \n-        for possible_sibling in match simplified_self {\n-            Some(sty) => self.filtered(sty),\n-            None => self.iter(),\n-        } {\n+        let possible_siblings = match simplified_self {\n+            Some(sty) => PotentialSiblings::Filtered(self.filtered(sty)),\n+            None => PotentialSiblings::Unfiltered(self.iter()),\n+        };\n+\n+        for possible_sibling in possible_siblings {\n             debug!(\n                 \"insert: impl_def_id={:?}, simplified_self={:?}, possible_sibling={:?}\",\n                 impl_def_id,\n@@ -222,14 +224,37 @@ impl<'a, 'gcx, 'tcx> Children {\n         Ok(Inserted::BecameNewSibling(last_lint))\n     }\n \n-    fn iter(&mut self) -> Box<dyn Iterator<Item = DefId> + '_> {\n+    fn iter(&mut self) -> impl Iterator<Item = DefId> + '_ {\n         let nonblanket = self.nonblanket_impls.iter_mut().flat_map(|(_, v)| v.iter());\n-        Box::new(self.blanket_impls.iter().chain(nonblanket).cloned())\n+        self.blanket_impls.iter().chain(nonblanket).cloned()\n     }\n \n-    fn filtered(&mut self, sty: SimplifiedType) -> Box<dyn Iterator<Item = DefId> + '_> {\n+    fn filtered(&mut self, sty: SimplifiedType) -> impl Iterator<Item = DefId> + '_ {\n         let nonblanket = self.nonblanket_impls.entry(sty).or_default().iter();\n-        Box::new(self.blanket_impls.iter().chain(nonblanket).cloned())\n+        self.blanket_impls.iter().chain(nonblanket).cloned()\n+    }\n+}\n+\n+// A custom iterator used by Children::insert\n+enum PotentialSiblings<I, J>\n+    where I: Iterator<Item = DefId>,\n+          J: Iterator<Item = DefId>\n+{\n+    Unfiltered(I),\n+    Filtered(J)\n+}\n+\n+impl<I, J> Iterator for PotentialSiblings<I, J>\n+    where I: Iterator<Item = DefId>,\n+          J: Iterator<Item = DefId>\n+{\n+    type Item = DefId;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        match *self {\n+            PotentialSiblings::Unfiltered(ref mut iter) => iter.next(),\n+            PotentialSiblings::Filtered(ref mut iter) => iter.next()\n+        }\n     }\n }\n "}]}