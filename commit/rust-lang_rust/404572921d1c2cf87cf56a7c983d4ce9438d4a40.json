{"sha": "404572921d1c2cf87cf56a7c983d4ce9438d4a40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNDU3MjkyMWQxYzJjZjg3Y2Y1NmE3Yzk4M2Q0Y2U5NDM4ZDRhNDA=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-01-11T01:25:02Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-01-12T22:53:02Z"}, "message": "Use a whitelist and print nice hints", "tree": {"sha": "6e2981557fcb161701717a30073e6cff83479ec9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e2981557fcb161701717a30073e6cff83479ec9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/404572921d1c2cf87cf56a7c983d4ce9438d4a40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/404572921d1c2cf87cf56a7c983d4ce9438d4a40", "html_url": "https://github.com/rust-lang/rust/commit/404572921d1c2cf87cf56a7c983d4ce9438d4a40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/404572921d1c2cf87cf56a7c983d4ce9438d4a40/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f6964e22db1a63c7244a9e841254c41e1a88540", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f6964e22db1a63c7244a9e841254c41e1a88540", "html_url": "https://github.com/rust-lang/rust/commit/3f6964e22db1a63c7244a9e841254c41e1a88540"}], "stats": {"total": 38, "additions": 26, "deletions": 12}, "files": [{"sha": "b0da6647eb9002039ae4bcc913ba8a8c7dd1d8e4", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/404572921d1c2cf87cf56a7c983d4ce9438d4a40/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/404572921d1c2cf87cf56a7c983d4ce9438d4a40/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=404572921d1c2cf87cf56a7c983d4ce9438d4a40", "patch": "@@ -163,24 +163,38 @@ pub fn check(path: &Path, bad: &mut bool) {\n         }\n     });\n \n+    // FIXME get this whitelist empty.\n+    let whitelist = vec![\n+        \"abi_ptx\", \"simd\", \"safe_suggestion\", \"macro_reexport\",\n+        \"more_struct_aliases\", \"static_recursion\", \"reflect\",\n+        \"quote\", \"cfg_target_has_atomic\", \"custom_attribute\",\n+        \"default_type_parameter_fallback\", \"pushpop_unsafe\",\n+        \"use_extern_macros\", \"staged_api\", \"const_indexing\",\n+        \"unboxed_closures\", \"stmt_expr_attributes\",\n+        \"cfg_target_thread_local\", \"unwind_attributes\",\n+        \"inclusive_range_syntax\"\n+    ];\n+\n     // Only check the number of lang features.\n     // Obligatory testing for library features is dumb.\n     let gate_untested = features.iter()\n                                 .filter(|&(_, f)| f.level == Status::Unstable)\n                                 .filter(|&(_, f)| !f.has_gate_test)\n-                                .count();\n+                                .filter(|&(n, _)| !whitelist.contains(&n.as_str()))\n+                                .collect::<Vec<_>>();\n \n-    // FIXME get this number down to zero.\n-    let gate_untested_expected = 94;\n+    for &(name, _) in gate_untested.iter() {\n+        println!(\"Expected a gate test for the feature '{}'.\", name);\n+        println!(\"Hint: create a file named 'feature-gate-{}.rs' in the compile-fail\\\n+                \\n      test suite, with its failures due to missing usage of\\\n+                \\n      #![feature({})].\", name, name);\n+        println!(\"Hint: If you already have such a test and don't want to rename it,\\\n+                \\n      you can also add a // gate-test-{} line to the test file.\",\n+                 name);\n+    }\n \n-    if gate_untested != gate_untested_expected {\n-        print!(\"Expected {} gate untested features, but found {}. \",\n-                gate_untested_expected, gate_untested);\n-        if gate_untested < gate_untested_expected {\n-            println!(\"Did you forget to reduce the expected number?\");\n-        } else {\n-            println!(\"Did you forget to add a gate test for your new feature?\");\n-        }\n+    if gate_untested.len() > 0 {\n+        println!(\"Found {} features without a gate test.\", gate_untested.len());\n         *bad = true;\n     }\n \n@@ -189,7 +203,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n     }\n \n     let mut lines = Vec::new();\n-    for (name, feature) in features {\n+    for (name, feature) in features.iter() {\n         lines.push(format!(\"{:<32} {:<8} {:<12} {:<8}\",\n                            name,\n                            \"lang\","}]}