{"sha": "d536bc2c10b7008dd3bccdfc9e82ba0af2533f34", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MzZiYzJjMTBiNzAwOGRkM2JjY2RmYzllODJiYTBhZjI1MzNmMzQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-09T01:16:46Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-09T01:16:46Z"}, "message": "Clean up std::task", "tree": {"sha": "36906e1a81c9d60dc5ee77de68cf113b30e5711b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36906e1a81c9d60dc5ee77de68cf113b30e5711b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d536bc2c10b7008dd3bccdfc9e82ba0af2533f34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d536bc2c10b7008dd3bccdfc9e82ba0af2533f34", "html_url": "https://github.com/rust-lang/rust/commit/d536bc2c10b7008dd3bccdfc9e82ba0af2533f34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d536bc2c10b7008dd3bccdfc9e82ba0af2533f34/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "061d2c2f7791f18538c42d043fb320f0316a0ed6", "url": "https://api.github.com/repos/rust-lang/rust/commits/061d2c2f7791f18538c42d043fb320f0316a0ed6", "html_url": "https://github.com/rust-lang/rust/commit/061d2c2f7791f18538c42d043fb320f0316a0ed6"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "247496ebd39f03582782746b24987d6eac4699fd", "filename": "src/lib/task.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d536bc2c10b7008dd3bccdfc9e82ba0af2533f34/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d536bc2c10b7008dd3bccdfc9e82ba0af2533f34/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=d536bc2c10b7008dd3bccdfc9e82ba0af2533f34", "patch": "@@ -50,12 +50,12 @@ export spawn;\n export spawn_notify;\n export spawn_joinable;\n \n-native \"rust-intrinsic\" mod rustrt {\n+native \"rust-intrinsic\" mod rusti {\n     // these must run on the Rust stack so that they can swap stacks etc:\n     fn task_sleep(time_in_us: uint);\n }\n \n-native \"c-stack-cdecl\" mod rustrt2 = \"rustrt\" {\n+native \"c-stack-cdecl\" mod rustrt = \"rustrt\" {\n     // these can run on the C stack:\n     fn pin_task();\n     fn unpin_task();\n@@ -81,7 +81,7 @@ type rust_task =\n      mutable notify_chan: comm::chan<task_notification>,\n      mutable stack_ptr: *u8};\n \n-resource rust_task_ptr(task: *rust_task) { rustrt2::drop_task(task); }\n+resource rust_task_ptr(task: *rust_task) { rustrt::drop_task(task); }\n \n type task_id = int;\n \n@@ -128,7 +128,7 @@ Type: get_task\n \n Retreives a handle to the currently executing task\n */\n-fn get_task() -> task { rustrt2::get_task_id() }\n+fn get_task() -> task { rustrt::get_task_id() }\n \n /*\n Function: sleep\n@@ -139,7 +139,7 @@ Parameters:\n \n time_in_us - maximum number of microseconds to yield control for\n */\n-fn sleep(time_in_us: uint) { ret rustrt::task_sleep(time_in_us); }\n+fn sleep(time_in_us: uint) { ret rusti::task_sleep(time_in_us); }\n \n /*\n Function: yield\n@@ -188,14 +188,14 @@ Function: pin\n \n Pins the current task and future child tasks to a single scheduler thread\n */\n-fn pin() { rustrt2::pin_task(); }\n+fn pin() { rustrt::pin_task(); }\n \n /*\n Function: unpin\n \n Unpin the current task and future child tasks\n */\n-fn unpin() { rustrt2::unpin_task(); }\n+fn unpin() { rustrt::unpin_task(); }\n \n /*\n Function: set_min_stack\n@@ -204,7 +204,7 @@ Set the minimum stack size (in bytes) for tasks spawned in the future.\n \n This function has global effect and should probably not be used.\n */\n-fn set_min_stack(stack_size: uint) { rustrt2::set_min_stack(stack_size); }\n+fn set_min_stack(stack_size: uint) { rustrt::set_min_stack(stack_size); }\n \n /*\n Function: spawn\n@@ -293,12 +293,12 @@ fn spawn_inner<uniq T>(-data: T, f: fn(T),\n fn unsafe_spawn_inner(-thunk: fn@(),\n                       notify: option<comm::chan<task_notification>>) ->\n    task unsafe {\n-    let id = rustrt2::new_task();\n+    let id = rustrt::new_task();\n \n     let raw_thunk: {code: u32, env: u32} = cast(thunk);\n \n     // set up the task pointer\n-    let task_ptr <- rust_task_ptr(rustrt2::get_task_pointer(id));\n+    let task_ptr <- rust_task_ptr(rustrt::get_task_pointer(id));\n \n     assert (ptr::null() != (**task_ptr).stack_ptr);\n \n@@ -322,8 +322,8 @@ fn unsafe_spawn_inner(-thunk: fn@(),\n     }\n \n     // give the thunk environment's allocation to the new task\n-    rustrt2::migrate_alloc(cast(raw_thunk.env), id);\n-    rustrt2::start_task(id, cast(thunkfn));\n+    rustrt::migrate_alloc(cast(raw_thunk.env), id);\n+    rustrt::start_task(id, cast(thunkfn));\n     // don't cleanup the thunk in this task\n     unsafe::leak(thunk);\n     ret id;"}]}