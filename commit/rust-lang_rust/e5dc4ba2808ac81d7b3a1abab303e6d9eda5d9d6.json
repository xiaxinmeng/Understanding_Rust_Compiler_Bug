{"sha": "e5dc4ba2808ac81d7b3a1abab303e6d9eda5d9d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZGM0YmEyODA4YWM4MWQ3YjNhMWFiYWIzMDNlNmQ5ZWRhNWQ5ZDY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-22T22:29:55Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-07T10:27:03Z"}, "message": "renumber types in `ty::Const` and relate them to `mir::Constant`", "tree": {"sha": "1852ff2b4560b74127264cef2925154ef19a4814", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1852ff2b4560b74127264cef2925154ef19a4814"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5dc4ba2808ac81d7b3a1abab303e6d9eda5d9d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5dc4ba2808ac81d7b3a1abab303e6d9eda5d9d6", "html_url": "https://github.com/rust-lang/rust/commit/e5dc4ba2808ac81d7b3a1abab303e6d9eda5d9d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5dc4ba2808ac81d7b3a1abab303e6d9eda5d9d6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b637b778db0ec1063662f731773dd7917790a66", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b637b778db0ec1063662f731773dd7917790a66", "html_url": "https://github.com/rust-lang/rust/commit/7b637b778db0ec1063662f731773dd7917790a66"}], "stats": {"total": 62, "additions": 61, "deletions": 1}, "files": [{"sha": "6d9e24bbb876f1f5ed5e0787149ec890267d556c", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e5dc4ba2808ac81d7b3a1abab303e6d9eda5d9d6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5dc4ba2808ac81d7b3a1abab303e6d9eda5d9d6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=e5dc4ba2808ac81d7b3a1abab303e6d9eda5d9d6", "patch": "@@ -43,12 +43,17 @@ pub(in borrow_check) fn replace_regions_in_mir<'cx, 'gcx, 'tcx>(\n     def_id: DefId,\n     mir: &mut Mir<'tcx>,\n ) -> UniversalRegions<'tcx> {\n+    debug!(\"replace_regions_in_mir(def_id={:?})\", def_id);\n+\n     // Compute named region information.\n     let universal_regions = universal_regions::universal_regions(infcx, def_id);\n \n     // Replace all regions with fresh inference variables.\n     renumber::renumber_mir(infcx, &universal_regions, mir);\n \n+    let source = MirSource::item(def_id);\n+    mir_util::dump_mir(infcx.tcx, None, \"renumber\", &0, source, mir, |_, _| Ok(()));\n+\n     universal_regions\n }\n "}, {"sha": "bb32cf88c7514e53c36c44655e47aef7860b0825", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e5dc4ba2808ac81d7b3a1abab303e6d9eda5d9d6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5dc4ba2808ac81d7b3a1abab303e6d9eda5d9d6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=e5dc4ba2808ac81d7b3a1abab303e6d9eda5d9d6", "patch": "@@ -138,6 +138,11 @@ impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n         debug!(\"visit_region: region={:?}\", region);\n     }\n \n+    fn visit_const(&mut self, constant: &mut &'tcx ty::Const<'tcx>, location: Location) {\n+        let ty_context = TyContext::Location(location);\n+        *constant = self.renumber_regions(ty_context, &*constant);\n+    }\n+\n     fn visit_closure_substs(&mut self, substs: &mut ClosureSubsts<'tcx>, location: Location) {\n         debug!(\n             \"visit_closure_substs(substs={:?}, location={:?})\","}, {"sha": "e93f29f9bc8c54cf186d3cf9adaec131755bf202", "filename": "src/librustc_mir/borrow_check/nll/subtype_constraint_generation.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e5dc4ba2808ac81d7b3a1abab303e6d9eda5d9d6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fsubtype_constraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5dc4ba2808ac81d7b3a1abab303e6d9eda5d9d6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fsubtype_constraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fsubtype_constraint_generation.rs?ref=e5dc4ba2808ac81d7b3a1abab303e6d9eda5d9d6", "patch": "@@ -106,7 +106,10 @@ impl<'cx, 'tcx> SubtypeConstraintGenerator<'cx, 'tcx> {\n         if let ty::ReVar(vid) = r {\n             *vid\n         } else {\n-            self.universal_regions.indices[&r]\n+            *self.universal_regions\n+                 .indices\n+                 .get(&r)\n+                 .unwrap_or_else(|| bug!(\"to_region_vid: bad region {:?}\", r))\n         }\n     }\n }"}, {"sha": "f24aa51eb2584aecd800982b6171e222da3c5c01", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e5dc4ba2808ac81d7b3a1abab303e6d9eda5d9d6/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5dc4ba2808ac81d7b3a1abab303e6d9eda5d9d6/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=e5dc4ba2808ac81d7b3a1abab303e6d9eda5d9d6", "patch": "@@ -110,6 +110,7 @@ impl<'a, 'b, 'gcx, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n \n     fn visit_constant(&mut self, constant: &Constant<'tcx>, location: Location) {\n         self.super_constant(constant, location);\n+        self.sanitize_constant(constant, location);\n         self.sanitize_type(constant, constant.ty);\n     }\n \n@@ -159,6 +160,52 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         }\n     }\n \n+    /// Checks that the constant's `ty` field matches up with what\n+    /// would be expected from its literal.\n+    fn sanitize_constant(&mut self, constant: &Constant<'tcx>, location: Location) {\n+        debug!(\n+            \"sanitize_constant(constant={:?}, location={:?})\",\n+            constant,\n+            location\n+        );\n+\n+        let expected_ty = match constant.literal {\n+            Literal::Value { value } => value.ty,\n+            Literal::Promoted { .. } => {\n+                // FIXME -- promoted MIR return types reference\n+                // various \"free regions\" (e.g., scopes and things)\n+                // that they ought not to do. We have to figure out\n+                // how best to handle that -- probably we want treat\n+                // promoted MIR much like closures, renumbering all\n+                // their free regions and propagating constraints\n+                // upwards. We have the same acyclic guarantees, so\n+                // that should be possible. But for now, ignore them.\n+                //\n+                // let promoted_mir = &self.mir.promoted[index];\n+                // promoted_mir.return_ty()\n+                return;\n+            }\n+        };\n+\n+        debug!(\"sanitize_constant: expected_ty={:?}\", expected_ty);\n+\n+        if let Err(terr) = self.cx\n+            .eq_types(expected_ty, constant.ty, location.at_self())\n+        {\n+            span_mirbug!(\n+                self,\n+                constant,\n+                \"constant {:?} should have type {:?} but has {:?} ({:?})\",\n+                constant,\n+                expected_ty,\n+                constant.ty,\n+                terr,\n+            );\n+        }\n+    }\n+\n+    /// Checks that the types internal to the `place` match up with\n+    /// what would be expected.\n     fn sanitize_place(\n         &mut self,\n         place: &Place<'tcx>,"}]}