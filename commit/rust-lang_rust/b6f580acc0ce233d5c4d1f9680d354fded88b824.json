{"sha": "b6f580acc0ce233d5c4d1f9680d354fded88b824", "node_id": "C_kwDOAAsO6NoAKGI2ZjU4MGFjYzBjZTIzM2Q1YzRkMWY5NjgwZDM1NGZkZWQ4OGI4MjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-18T17:19:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-18T17:19:27Z"}, "message": "Auto merge of #90382 - alexcrichton:wasm64-libstd, r=joshtriplett\n\nstd: Get the standard library compiling for wasm64\n\nThis commit goes through and updates various `#[cfg]` as appropriate to\nget the wasm64-unknown-unknown target behaving similarly to the\nwasm32-unknown-unknown target. Most of this is just updating various\nconditions for `target_arch = \"wasm32\"` to also account for `target_arch\n= \"wasm64\"` where appropriate. This commit also lists `wasm64` as an\nallow-listed architecture to not have the `restricted_std` feature\nenabled, enabling experimentation with `-Z build-std` externally.\n\nThe main goal of this commit is to enable playing around with\n`wasm64-unknown-unknown` externally via `-Z build-std` in a way that's\nsimilar to the `wasm32-unknown-unknown` target. These targets are\neffectively the same and only differ in their pointer size, but wasm64\nis much newer and has much less ecosystem/library support so it'll still\ntake time to get wasm64 fully-fledged.", "tree": {"sha": "3b8577cde0c88686f2cca92916f7e60dee8ecdeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b8577cde0c88686f2cca92916f7e60dee8ecdeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6f580acc0ce233d5c4d1f9680d354fded88b824", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6f580acc0ce233d5c4d1f9680d354fded88b824", "html_url": "https://github.com/rust-lang/rust/commit/b6f580acc0ce233d5c4d1f9680d354fded88b824", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6f580acc0ce233d5c4d1f9680d354fded88b824/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6414e0b5b308d3ae27da83c6a25098cc8aadc1a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6414e0b5b308d3ae27da83c6a25098cc8aadc1a9", "html_url": "https://github.com/rust-lang/rust/commit/6414e0b5b308d3ae27da83c6a25098cc8aadc1a9"}, {"sha": "af217f7f78762184b66957aa87c8d4493d83e86a", "url": "https://api.github.com/repos/rust-lang/rust/commits/af217f7f78762184b66957aa87c8d4493d83e86a", "html_url": "https://github.com/rust-lang/rust/commit/af217f7f78762184b66957aa87c8d4493d83e86a"}], "stats": {"total": 243, "additions": 183, "deletions": 60}, "files": [{"sha": "28b922cf9137f05f49d30a80f53ba02bb03afb00", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -678,9 +678,9 @@ dependencies = [\n \n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.1.49\"\n+version = \"0.1.52\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"20b1438ef42c655665a8ab2c1c6d605a305f031d38d9be689ddfef41a20f3aa2\"\n+checksum = \"b6591c2442ee984e2b264638a8b5e7ae44fd47b32d28e3a08e2e9c3cdb0c2fb0\"\n dependencies = [\n  \"cc\",\n  \"rustc-std-workspace-core\",\n@@ -1028,9 +1028,9 @@ dependencies = [\n \n [[package]]\n name = \"dlmalloc\"\n-version = \"0.2.1\"\n+version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"332570860c2edf2d57914987bf9e24835425f75825086b6ba7d1e6a3e4f1f254\"\n+checksum = \"a6fe28e0bf9357092740362502f5cc7955d8dc125ebda71dec72336c2e15c62e\"\n dependencies = [\n  \"compiler_builtins\",\n  \"libc\","}, {"sha": "02096f4abfa5f60d48ef115a1287c27edfb6d321", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -320,7 +320,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 InlineAsmArch::Mips | InlineAsmArch::Mips64 => {}\n                 InlineAsmArch::S390x => {}\n                 InlineAsmArch::SpirV => {}\n-                InlineAsmArch::Wasm32 => {}\n+                InlineAsmArch::Wasm32 | InlineAsmArch::Wasm64 => {}\n                 InlineAsmArch::Bpf => {}\n             }\n         }"}, {"sha": "ff88302bf7aafab999a3718857ecb667e4f7c4da", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -769,7 +769,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         // we like. To ensure that LLVM picks the right instruction we choose\n         // the raw wasm intrinsic functions which avoid LLVM inserting all the\n         // other control flow automatically.\n-        if self.sess().target.arch == \"wasm32\" {\n+        if self.sess().target.is_like_wasm {\n             let src_ty = self.cx.val_ty(val);\n             if self.cx.type_kind(src_ty) != TypeKind::Vector {\n                 let float_width = self.cx.float_width(src_ty);\n@@ -791,7 +791,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n \n     fn fptosi(&mut self, val: &'ll Value, dest_ty: &'ll Type) -> &'ll Value {\n         // see `fptoui` above for why wasm is different here\n-        if self.sess().target.arch == \"wasm32\" {\n+        if self.sess().target.is_like_wasm {\n             let src_ty = self.cx.val_ty(val);\n             if self.cx.type_kind(src_ty) != TypeKind::Vector {\n                 let float_width = self.cx.float_width(src_ty);"}, {"sha": "b154ced42f0d6ca7808407179df28cdbe72dc007", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -490,7 +490,7 @@ impl StaticMethods for CodegenCx<'ll, 'tcx> {\n \n             // Wasm statics with custom link sections get special treatment as they\n             // go into custom sections of the wasm executable.\n-            if self.tcx.sess.opts.target_triple.triple().starts_with(\"wasm32\") {\n+            if self.tcx.sess.target.is_like_wasm {\n                 if let Some(section) = attrs.link_section {\n                     let section = llvm::LLVMMDStringInContext(\n                         self.llcx,"}, {"sha": "3393c9baa28e3889804ea05a13d1af1fcfff261b", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -75,7 +75,9 @@ unsafe fn configure_llvm(sess: &Session) {\n         if sess.print_llvm_passes() {\n             add(\"-debug-pass=Structure\", false);\n         }\n-        if !sess.opts.debugging_opts.no_generate_arange_section {\n+        if sess.target.generate_arange_section\n+            && !sess.opts.debugging_opts.no_generate_arange_section\n+        {\n             add(\"-generate-arange-section\", false);\n         }\n "}, {"sha": "bff132465215eda9d247eb56cd68e7546532725c", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -189,6 +189,7 @@ pub enum InlineAsmArch {\n     S390x,\n     SpirV,\n     Wasm32,\n+    Wasm64,\n     Bpf,\n }\n \n@@ -212,6 +213,7 @@ impl FromStr for InlineAsmArch {\n             \"s390x\" => Ok(Self::S390x),\n             \"spirv\" => Ok(Self::SpirV),\n             \"wasm32\" => Ok(Self::Wasm32),\n+            \"wasm64\" => Ok(Self::Wasm64),\n             \"bpf\" => Ok(Self::Bpf),\n             _ => Err(()),\n         }\n@@ -318,7 +320,7 @@ impl InlineAsmReg {\n             InlineAsmArch::SpirV => {\n                 Self::SpirV(SpirVInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n-            InlineAsmArch::Wasm32 => {\n+            InlineAsmArch::Wasm32 | InlineAsmArch::Wasm64 => {\n                 Self::Wasm(WasmInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n             InlineAsmArch::Bpf => {\n@@ -529,7 +531,9 @@ impl InlineAsmRegClass {\n             }\n             InlineAsmArch::S390x => Self::S390x(S390xInlineAsmRegClass::parse(arch, name)?),\n             InlineAsmArch::SpirV => Self::SpirV(SpirVInlineAsmRegClass::parse(arch, name)?),\n-            InlineAsmArch::Wasm32 => Self::Wasm(WasmInlineAsmRegClass::parse(arch, name)?),\n+            InlineAsmArch::Wasm32 | InlineAsmArch::Wasm64 => {\n+                Self::Wasm(WasmInlineAsmRegClass::parse(arch, name)?)\n+            }\n             InlineAsmArch::Bpf => Self::Bpf(BpfInlineAsmRegClass::parse(arch, name)?),\n         })\n     }\n@@ -725,7 +729,7 @@ pub fn allocatable_registers(\n             spirv::fill_reg_map(arch, has_feature, target, &mut map);\n             map\n         }\n-        InlineAsmArch::Wasm32 => {\n+        InlineAsmArch::Wasm32 | InlineAsmArch::Wasm64 => {\n             let mut map = wasm::regclass_map();\n             wasm::fill_reg_map(arch, has_feature, target, &mut map);\n             map"}, {"sha": "0771f9985350020449f02ec968c3b4fb78f81b1d", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -1357,6 +1357,9 @@ pub struct TargetOptions {\n \n     /// Minimum number of bits in #[repr(C)] enum. Defaults to 32.\n     pub c_enum_min_bits: u64,\n+\n+    /// Whether or not the DWARF `.debug_aranges` section should be generated.\n+    pub generate_arange_section: bool,\n }\n \n impl Default for TargetOptions {\n@@ -1462,6 +1465,7 @@ impl Default for TargetOptions {\n             supported_sanitizers: SanitizerSet::empty(),\n             default_adjusted_cabi: None,\n             c_enum_min_bits: 32,\n+            generate_arange_section: true,\n         }\n     }\n }\n@@ -2047,6 +2051,7 @@ impl Target {\n         key!(supported_sanitizers, SanitizerSet)?;\n         key!(default_adjusted_cabi, Option<Abi>)?;\n         key!(c_enum_min_bits, u64);\n+        key!(generate_arange_section, bool);\n \n         if base.is_builtin {\n             // This can cause unfortunate ICEs later down the line.\n@@ -2286,6 +2291,7 @@ impl ToJson for Target {\n         target_option_val!(split_debuginfo);\n         target_option_val!(supported_sanitizers);\n         target_option_val!(c_enum_min_bits);\n+        target_option_val!(generate_arange_section);\n \n         if let Some(abi) = self.default_adjusted_cabi {\n             d.insert(\"default-adjusted-cabi\".to_string(), Abi::name(abi).to_json());"}, {"sha": "69a404ec564e2d85210bc9ba395b6fa984e4122b", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -37,7 +37,7 @@ pub fn target() -> Target {\n         is_like_emscripten: true,\n         panic_strategy: PanicStrategy::Unwind,\n         post_link_args,\n-        families: vec![\"unix\".to_string()],\n+        families: vec![\"unix\".to_string(), \"wasm\".to_string()],\n         ..options\n     };\n     Target {"}, {"sha": "6b7dfbb87d2502c141b95360f25c7a59fb4fcae2", "filename": "compiler/rustc_target/src/spec/wasm64_unknown_unknown.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm64_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm64_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm64_unknown_unknown.rs?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -23,11 +23,15 @@ pub fn target() -> Target {\n     // For now this target just never has an entry symbol no matter the output\n     // type, so unconditionally pass this.\n     clang_args.push(\"-Wl,--no-entry\".to_string());\n-    options\n-        .pre_link_args\n-        .get_mut(&LinkerFlavor::Lld(LldFlavor::Wasm))\n-        .unwrap()\n-        .push(\"--no-entry\".to_string());\n+\n+    let lld_args = options.pre_link_args.get_mut(&LinkerFlavor::Lld(LldFlavor::Wasm)).unwrap();\n+    lld_args.push(\"--no-entry\".to_string());\n+    lld_args.push(\"-mwasm64\".to_string());\n+\n+    // Any engine that implements wasm64 will surely implement the rest of these\n+    // features since they were all merged into the official spec by the time\n+    // wasm64 was designed.\n+    options.features = \"+bulk-memory,+mutable-globals,+sign-ext,+nontrapping-fptoint\".to_string();\n \n     Target {\n         llvm_target: \"wasm64-unknown-unknown\".to_string(),"}, {"sha": "24e9c62516999dc612dfb74f25481603c86fb284", "filename": "compiler/rustc_target/src/spec/wasm_base.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -128,6 +128,12 @@ pub fn options() -> TargetOptions {\n         // gdb scripts don't work on wasm blobs\n         emit_debug_gdb_scripts: false,\n \n+        // There's more discussion of this at\n+        // https://bugs.llvm.org/show_bug.cgi?id=52442 but the general result is\n+        // that this isn't useful for wasm and has tricky issues with\n+        // representation, so this is disabled.\n+        generate_arange_section: false,\n+\n         ..Default::default()\n     }\n }"}, {"sha": "e7fba3a70ff42d986aa05c28240426c3f8731ff3", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -536,8 +536,8 @@ fn fn_maybe_err(tcx: TyCtxt<'_>, sp: Span, abi: Abi) {\n }\n \n fn maybe_check_static_with_link_section(tcx: TyCtxt<'_>, id: LocalDefId, span: Span) {\n-    // Only restricted on wasm32 target for now\n-    if !tcx.sess.opts.target_triple.triple().starts_with(\"wasm32\") {\n+    // Only restricted on wasm target for now\n+    if !tcx.sess.target.is_like_wasm {\n         return;\n     }\n "}, {"sha": "9c4cf89b6bc35cb00d6fa1c723cdbfea56c56ad6", "filename": "library/core/src/ffi.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/library%2Fcore%2Fsrc%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/library%2Fcore%2Fsrc%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi.rs?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -62,7 +62,7 @@ impl fmt::Debug for c_void {\n #[cfg(any(\n     all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"), not(target_arch = \"x86_64\")),\n     all(target_arch = \"aarch64\", any(target_os = \"macos\", target_os = \"ios\")),\n-    target_arch = \"wasm32\",\n+    target_family = \"wasm\",\n     target_arch = \"asmjs\",\n     windows\n ))]\n@@ -85,7 +85,7 @@ pub struct VaListImpl<'f> {\n #[cfg(any(\n     all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"), not(target_arch = \"x86_64\")),\n     all(target_arch = \"aarch64\", any(target_os = \"macos\", target_os = \"ios\")),\n-    target_arch = \"wasm32\",\n+    target_family = \"wasm\",\n     target_arch = \"asmjs\",\n     windows\n ))]\n@@ -185,7 +185,7 @@ pub struct VaList<'a, 'f: 'a> {\n             not(target_arch = \"x86_64\")\n         ),\n         all(target_arch = \"aarch64\", any(target_os = \"macos\", target_os = \"ios\")),\n-        target_arch = \"wasm32\",\n+        target_family = \"wasm\",\n         target_arch = \"asmjs\",\n         windows\n     ))]\n@@ -194,7 +194,7 @@ pub struct VaList<'a, 'f: 'a> {\n     #[cfg(all(\n         any(target_arch = \"aarch64\", target_arch = \"powerpc\", target_arch = \"x86_64\"),\n         any(not(target_arch = \"aarch64\"), not(any(target_os = \"macos\", target_os = \"ios\"))),\n-        not(target_arch = \"wasm32\"),\n+        not(target_family = \"wasm\"),\n         not(target_arch = \"asmjs\"),\n         not(windows)\n     ))]\n@@ -206,7 +206,7 @@ pub struct VaList<'a, 'f: 'a> {\n #[cfg(any(\n     all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"), not(target_arch = \"x86_64\")),\n     all(target_arch = \"aarch64\", any(target_os = \"macos\", target_os = \"ios\")),\n-    target_arch = \"wasm32\",\n+    target_family = \"wasm\",\n     target_arch = \"asmjs\",\n     windows\n ))]\n@@ -227,7 +227,7 @@ impl<'f> VaListImpl<'f> {\n #[cfg(all(\n     any(target_arch = \"aarch64\", target_arch = \"powerpc\", target_arch = \"x86_64\"),\n     any(not(target_arch = \"aarch64\"), not(any(target_os = \"macos\", target_os = \"ios\"))),\n-    not(target_arch = \"wasm32\"),\n+    not(target_family = \"wasm\"),\n     not(target_arch = \"asmjs\"),\n     not(windows)\n ))]"}, {"sha": "dec5e0b2123fc0b5e7846a3d6f38173cf4b80f5c", "filename": "library/panic_abort/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/library%2Fpanic_abort%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/library%2Fpanic_abort%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_abort%2Fsrc%2Flib.rs?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -117,7 +117,7 @@ pub unsafe extern \"C-unwind\" fn __rust_start_panic(_payload: *mut &mut dyn BoxMe\n pub mod personalities {\n     #[rustc_std_internal_symbol]\n     #[cfg(not(any(\n-        all(target_arch = \"wasm32\", not(target_os = \"emscripten\"),),\n+        all(target_family = \"wasm\", not(target_os = \"emscripten\")),\n         all(target_os = \"windows\", target_env = \"gnu\", target_arch = \"x86_64\",),\n     )))]\n     pub extern \"C\" fn rust_eh_personality() {}"}, {"sha": "a4bcd216c60f074b3f9c391fd3d8c98763c660a2", "filename": "library/panic_unwind/src/dummy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/library%2Fpanic_unwind%2Fsrc%2Fdummy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/library%2Fpanic_unwind%2Fsrc%2Fdummy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Fdummy.rs?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -1,6 +1,6 @@\n-//! Unwinding for *wasm32* target.\n+//! Unwinding for unsupported target.\n //!\n-//! Right now we don't support this, so this is just stubs.\n+//! Stubs that simply abort for targets that don't support unwinding otherwise.\n \n use alloc::boxed::Box;\n use core::any::Any;"}, {"sha": "e5753ccae2d4fb072d6648ee3318555dc0ae2983", "filename": "library/panic_unwind/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Flib.rs?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -56,7 +56,7 @@ cfg_if::cfg_if! {\n         mod real_imp;\n     } else {\n         // Targets that don't support unwinding.\n-        // - arch=wasm32\n+        // - family=wasm\n         // - os=none (\"bare metal\" targets)\n         // - os=uefi\n         // - os=espidf"}, {"sha": "8f43e902a87ed3b33057dbf39caeb4b613eeef95", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -16,7 +16,7 @@ panic_unwind = { path = \"../panic_unwind\", optional = true }\n panic_abort = { path = \"../panic_abort\" }\n core = { path = \"../core\" }\n libc = { version = \"0.2.106\", default-features = false, features = ['rustc-dep-of-std'] }\n-compiler_builtins = { version = \"0.1.44\" }\n+compiler_builtins = { version = \"0.1.52\" }\n profiler_builtins = { path = \"../profiler_builtins\", optional = true }\n unwind = { path = \"../unwind\" }\n hashbrown = { version = \"0.11\", default-features = false, features = ['rustc-dep-of-std'] }\n@@ -35,8 +35,8 @@ features = ['read_core', 'elf', 'macho', 'pe', 'unaligned', 'archive']\n [dev-dependencies]\n rand = \"0.7\"\n \n-[target.'cfg(any(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")), all(target_vendor = \"fortanix\", target_env = \"sgx\")))'.dependencies]\n-dlmalloc = { version = \"0.2.1\", features = ['rustc-dep-of-std'] }\n+[target.'cfg(any(all(target_family = \"wasm\", not(target_os = \"emscripten\")), all(target_vendor = \"fortanix\", target_env = \"sgx\")))'.dependencies]\n+dlmalloc = { version = \"0.2.3\", features = ['rustc-dep-of-std'] }\n \n [target.x86_64-fortanix-unknown-sgx.dependencies]\n fortanix-sgx-abi = { version = \"0.3.2\", features = ['rustc-dep-of-std'] }"}, {"sha": "43168e77296ab5cdaa25bef8847c57cb0ce75e55", "filename": "library/std/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/library%2Fstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/library%2Fstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fbuild.rs?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -25,6 +25,7 @@ fn main() {\n         || target.contains(\"haiku\")\n         || target.contains(\"vxworks\")\n         || target.contains(\"wasm32\")\n+        || target.contains(\"wasm64\")\n         || target.contains(\"asmjs\")\n         || target.contains(\"espidf\")\n         || target.contains(\"solid\")"}, {"sha": "9665d1fa89243859b8bd1c133c41c414e61adc4b", "filename": "library/std/src/sys/common/alloc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -24,7 +24,8 @@ pub const MIN_ALIGN: usize = 8;\n     target_arch = \"mips64\",\n     target_arch = \"s390x\",\n     target_arch = \"sparc64\",\n-    target_arch = \"riscv64\"\n+    target_arch = \"riscv64\",\n+    target_arch = \"wasm64\",\n )))]\n pub const MIN_ALIGN: usize = 16;\n "}, {"sha": "167c918c94cf92e3f9cef62c9d66b0872e07af5e", "filename": "library/std/src/sys/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -40,7 +40,7 @@ cfg_if::cfg_if! {\n     } else if #[cfg(target_os = \"wasi\")] {\n         mod wasi;\n         pub use self::wasi::*;\n-    } else if #[cfg(target_arch = \"wasm32\")] {\n+    } else if #[cfg(target_family = \"wasm\")] {\n         mod wasm;\n         pub use self::wasm::*;\n     } else if #[cfg(all(target_vendor = \"fortanix\", target_env = \"sgx\"))] {"}, {"sha": "3223e8941024c8a3e468803ad45a82550909e777", "filename": "library/std/src/sys/wasm/alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Falloc.rs?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -1,8 +1,8 @@\n-//! This is an implementation of a global allocator on the wasm32 platform when\n+//! This is an implementation of a global allocator on wasm targets when\n //! emscripten is not in use. In that situation there's no actual runtime for us\n //! to lean on for allocation, so instead we provide our own!\n //!\n-//! The wasm32 instruction set has two instructions for getting the current\n+//! The wasm instruction set has two instructions for getting the current\n //! amount of memory and growing the amount of memory. These instructions are the\n //! foundation on which we're able to build an allocator, so we do so! Note that\n //! the instructions are also pretty \"global\" and this is the \"global\" allocator"}, {"sha": "804727fbc54d139ec37c8afb4b66e93e30d915b5", "filename": "library/std/src/sys_common/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -40,7 +40,7 @@ cfg_if::cfg_if! {\n     if #[cfg(any(target_os = \"l4re\",\n                  target_os = \"hermit\",\n                  feature = \"restricted-std\",\n-                 all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n+                 all(target_family = \"wasm\", not(target_os = \"emscripten\")),\n                  all(target_vendor = \"fortanix\", target_env = \"sgx\")))] {\n         pub use crate::sys::net;\n     } else {"}, {"sha": "f6898d283fc16ed7226d4958daffd3a6917bdd8e", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -172,7 +172,7 @@ macro_rules! __thread_local_inner {\n             //\n             // FIXME(#84224) this should come after the `target_thread_local`\n             // block.\n-            #[cfg(all(target_arch = \"wasm32\", not(target_feature = \"atomics\")))]\n+            #[cfg(all(target_family = \"wasm\", not(target_feature = \"atomics\")))]\n             {\n                 static mut VAL: $t = $init;\n                 Some(&VAL)\n@@ -181,7 +181,7 @@ macro_rules! __thread_local_inner {\n             // If the platform has support for `#[thread_local]`, use it.\n             #[cfg(all(\n                 target_thread_local,\n-                not(all(target_arch = \"wasm32\", not(target_feature = \"atomics\"))),\n+                not(all(target_family = \"wasm\", not(target_feature = \"atomics\"))),\n             ))]\n             {\n                 // If a dtor isn't needed we can do something \"very raw\" and\n@@ -238,7 +238,7 @@ macro_rules! __thread_local_inner {\n             // same implementation as below for os thread locals.\n             #[cfg(all(\n                 not(target_thread_local),\n-                not(all(target_arch = \"wasm32\", not(target_feature = \"atomics\"))),\n+                not(all(target_family = \"wasm\", not(target_feature = \"atomics\"))),\n             ))]\n             {\n                 #[inline]\n@@ -285,21 +285,21 @@ macro_rules! __thread_local_inner {\n             // The issue of \"should enable on Windows sometimes\" is #84933\n             #[cfg_attr(not(windows), inline)]\n             unsafe fn __getit() -> $crate::option::Option<&'static $t> {\n-                #[cfg(all(target_arch = \"wasm32\", not(target_feature = \"atomics\")))]\n+                #[cfg(all(target_family = \"wasm\", not(target_feature = \"atomics\")))]\n                 static __KEY: $crate::thread::__StaticLocalKeyInner<$t> =\n                     $crate::thread::__StaticLocalKeyInner::new();\n \n                 #[thread_local]\n                 #[cfg(all(\n                     target_thread_local,\n-                    not(all(target_arch = \"wasm32\", not(target_feature = \"atomics\"))),\n+                    not(all(target_family = \"wasm\", not(target_feature = \"atomics\"))),\n                 ))]\n                 static __KEY: $crate::thread::__FastLocalKeyInner<$t> =\n                     $crate::thread::__FastLocalKeyInner::new();\n \n                 #[cfg(all(\n                     not(target_thread_local),\n-                    not(all(target_arch = \"wasm32\", not(target_feature = \"atomics\"))),\n+                    not(all(target_family = \"wasm\", not(target_feature = \"atomics\"))),\n                 ))]\n                 static __KEY: $crate::thread::__OsLocalKeyInner<$t> =\n                     $crate::thread::__OsLocalKeyInner::new();\n@@ -479,10 +479,10 @@ mod lazy {\n     }\n }\n \n-/// On some platforms like wasm32 there's no threads, so no need to generate\n+/// On some targets like wasm there's no threads, so no need to generate\n /// thread locals and we can instead just use plain statics!\n #[doc(hidden)]\n-#[cfg(all(target_arch = \"wasm32\", not(target_feature = \"atomics\")))]\n+#[cfg(all(target_family = \"wasm\", not(target_feature = \"atomics\")))]\n pub mod statik {\n     use super::lazy::LazyKeyInner;\n     use crate::fmt;"}, {"sha": "39b53b51bfa637468b7ca6147b4a2ec7b8a91f1e", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -200,7 +200,7 @@ pub use self::local::fast::Key as __FastLocalKeyInner;\n #[doc(hidden)]\n pub use self::local::os::Key as __OsLocalKeyInner;\n #[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n-#[cfg(all(target_arch = \"wasm32\", not(target_feature = \"atomics\")))]\n+#[cfg(all(target_family = \"wasm\", not(target_feature = \"atomics\")))]\n #[doc(hidden)]\n pub use self::local::statik::Key as __StaticLocalKeyInner;\n "}, {"sha": "815d55c610dab39e92e7c83bf5fd4b7a020b4d46", "filename": "library/stdarch", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstdarch?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -1 +1 @@\n-Subproject commit 5fdbc476afc81a789806697fc4a2d9d19b8c9993\n+Subproject commit 815d55c610dab39e92e7c83bf5fd4b7a020b4d46"}, {"sha": "9c261e8cc8effcc707744698bf64f9bb10977d84", "filename": "library/test/src/console.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/library%2Ftest%2Fsrc%2Fconsole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/library%2Ftest%2Fsrc%2Fconsole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fconsole.rs?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -284,7 +284,7 @@ pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Resu\n     // Prevent the usage of `Instant` in some cases:\n     // - It's currently not supported for wasm targets.\n     // - We disable it for miri because it's not available when isolation is enabled.\n-    let is_instant_supported = !cfg!(target_arch = \"wasm32\") && !cfg!(miri);\n+    let is_instant_supported = !cfg!(target_family = \"wasm\") && !cfg!(miri);\n \n     let start_time = is_instant_supported.then(Instant::now);\n     run_tests(opts, tests, |x| on_test_event(&x, &mut st, &mut *out))?;"}, {"sha": "2516f3452b186a4ba8f54ede65c3fe4d608249a1", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -470,7 +470,7 @@ pub fn run_test(\n \n     // Emscripten can catch panics but other wasm targets cannot\n     let ignore_because_no_process_support = desc.should_panic != ShouldPanic::No\n-        && cfg!(target_arch = \"wasm32\")\n+        && cfg!(target_family = \"wasm\")\n         && !cfg!(target_os = \"emscripten\");\n \n     if force_ignore || desc.ignore || ignore_because_no_process_support {\n@@ -519,7 +519,7 @@ pub fn run_test(\n         // If the platform is single-threaded we're just going to run\n         // the test synchronously, regardless of the concurrency\n         // level.\n-        let supports_threads = !cfg!(target_os = \"emscripten\") && !cfg!(target_arch = \"wasm32\");\n+        let supports_threads = !cfg!(target_os = \"emscripten\") && !cfg!(target_family = \"wasm\");\n         if concurrency == Concurrent::Yes && supports_threads {\n             let cfg = thread::Builder::new().name(name.as_slice().to_owned());\n             let mut runtest = Arc::new(Mutex::new(Some(runtest)));"}, {"sha": "cb1b0ebf8db4ac883eda6ef61d489fbe4d126ff8", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -1276,7 +1276,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n         builder.ensure(native::TestHelpers { target: compiler.host });\n \n         // As well as the target, except for plain wasm32, which can't build it\n-        if !target.contains(\"wasm32\") || target.contains(\"emscripten\") {\n+        if !target.contains(\"wasm\") || target.contains(\"emscripten\") {\n             builder.ensure(native::TestHelpers { target });\n         }\n "}, {"sha": "69a0304d41d8c958445603e9e1f65897a1238490", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -16,6 +16,7 @@\n     - [aarch64-apple-ios-sim](platform-support/aarch64-apple-ios-sim.md)\n     - [\\*-kmc-solid_\\*](platform-support/kmc-solid.md)\n     - [x86_64-unknown-none](platform-support/x86_64-unknown-none.md)\n+    - [wasm64-unknown-unknown](platform-support/wasm64-unknown-unknown.md)\n - [Target Tier Policy](target-tier-policy.md)\n - [Targets](targets/index.md)\n     - [Built-in Targets](targets/built-in.md)"}, {"sha": "4da3491c5863475c969c59902e9e26197594426f", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -276,7 +276,7 @@ target | std | host | notes\n `thumbv7a-pc-windows-msvc` | ? |  |\n `thumbv7a-uwp-windows-msvc` | \u2713 |  |\n `thumbv7neon-unknown-linux-musleabihf` | ? |  | Thumb2-mode ARMv7a Linux with NEON, MUSL\n-`wasm64-unknown-unknown` | * |  | WebAssembly\n+[`wasm64-unknown-unknown`](platform-support/wasm64-unknown-unknown.md) | ? |  | WebAssembly\n `x86_64-apple-ios-macabi` | \u2713 |  | Apple Catalyst on x86_64\n `x86_64-apple-tvos` | * | | x86 64-bit tvOS\n `x86_64-pc-windows-msvc` | \u2713 |  | 64-bit Windows XP support"}, {"sha": "021b904debd8f6b8d3b3bd2c30b5390cfb39917d", "filename": "src/doc/rustc/src/platform-support/wasm64-unknown-unknown.md", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fwasm64-unknown-unknown.md", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fwasm64-unknown-unknown.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fwasm64-unknown-unknown.md?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -0,0 +1,101 @@\n+# `wasm64-unknown-unknown`\n+\n+**Tier: 3**\n+\n+WebAssembly target which uses 64-bit memories, relying on the [memory64]\n+WebAssembly proposal.\n+\n+[memory64]: https://github.com/webassembly/memory64\n+\n+## Target maintainers\n+\n+- Alex Crichton, https://github.com/alexcrichton\n+\n+## Requirements\n+\n+This target is cross-compiled. The target supports `std` in the same manner as\n+the `wasm32-unknown-unknown` target which is to say that it comes with the\n+standard library but many I/O functions such as `std::fs` and `std::net` will\n+simply return error. Additionally I/O operations like `println!` don't actually\n+do anything and the prints aren't routed anywhere. This is the same as the\n+`wasm32-unknown-unknown` target. This target comes by default with an allocator,\n+currently [dlmalloc] which is [ported to rust][dlmalloc-rs].\n+\n+[dlmalloc]: http://gee.cs.oswego.edu/dl/html/malloc.html\n+[dlmalloc-rs]: https://github.com/alexcrichton/dlmalloc-rs\n+\n+The difference of this target with `wasm32-unknown-unknown` is that it's\n+compiled for 64-bit memories instead of 32-bit memories. This means that `usize`\n+is 8-bytes large as well as pointers. The tradeoff, though, is that the maximum\n+memory size is now the full 64-bit address space instead of the 4GB as limited\n+by the 32-bit address space for `wasm32-unknown-unknown`.\n+\n+This target is not a stable target. The [memory64] WebAssembly proposal is stil\n+in-progress and not standardized. This means that there are not many engines\n+which implement the `memory64` feature and if they do they're likely behind a\n+flag, for example:\n+\n+* Nodejs - `--experimental-wasm-memory64`\n+* Wasmtime - `--wasm-features memory64`\n+\n+Also note that at this time the `wasm64-unknown-unknown` target assumes the\n+presence of other merged wasm proposals such as (with their LLVM feature flags):\n+\n+* [Bulk memory] - `+bulk-memory`\n+* Mutable imported globals - `+mutable-globals`\n+* [Sign-extending operations] - `+sign-ext`\n+* [Non-trapping fp-to-int operations] - `+nontrapping-fptoint`\n+\n+[Bulk memory]: https://github.com/WebAssembly/spec/blob/main/proposals/bulk-memory-operations/Overview.md\n+[Sign-extending operations]: https://github.com/WebAssembly/spec/blob/main/proposals/sign-extension-ops/Overview.md\n+[Non-trapping fp-to-int operations]: https://github.com/WebAssembly/spec/blob/main/proposals/nontrapping-float-to-int-conversion/Overview.md\n+\n+The `wasm64-unknown-unknown` target intends to match the default Clang targets\n+for its `\"C\"` ABI, which is likely to be the same as Clang's\n+`wasm32-unknown-unknown` largely.\n+\n+> **Note**: due to the relatively early-days nature of this target when working\n+> with this target you may encounter LLVM bugs. If an assertion hit or a bug is\n+> found it's recommended to open an issue either with rust-lang/rust or ideally\n+> with LLVM itself.\n+\n+This target does not support `panic=unwind` at this time.\n+\n+## Building the target\n+\n+You can build Rust with support for the target by adding it to the `target`\n+list in `config.toml`, and the target also requires `lld` to be built to work.\n+\n+```toml\n+[build]\n+target = [\"wasm64-unknown-unknown\"]\n+\n+[rust]\n+lld = true\n+```\n+\n+## Building Rust programs\n+\n+Rust does not yet ship pre-compiled artifacts for this target. To compile for\n+this target, you will either need to build Rust with the target enabled (see\n+\"Building the target\" above), or build your own copy of `std` by using\n+`build-std` or similar.\n+\n+Note that the following `cfg` directives are set for `wasm64-unknown-unknown`:\n+\n+* `cfg(target_arch = \"wasm64\")`\n+* `cfg(target_family = \"wasm\")`\n+\n+## Testing\n+\n+Currently testing is not well supported for `wasm64-unknown-unknown` and the\n+Rust project doesn't run any tests for this target. Testing support sort of\n+works but without `println!` it's not the most exciting tests to run.\n+\n+## Cross-compilation toolchains and C code\n+\n+Compiling Rust code with C code for `wasm64-unknown-unknown` is theoretically\n+possible, but there are no known toolchains to do this at this time. At the time\n+of this writing there is no known \"libc\" for wasm that works with\n+`wasm64-unknown-unknown`, which means that mixing C & Rust with this target\n+effectively cannot be done."}, {"sha": "5182cdc8940a00961b788873eeca9f7aba8d1017", "filename": "src/test/ui/cfg/cfg-target-family.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b6f580acc0ce233d5c4d1f9680d354fded88b824/src%2Ftest%2Fui%2Fcfg%2Fcfg-target-family.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f580acc0ce233d5c4d1f9680d354fded88b824/src%2Ftest%2Fui%2Fcfg%2Fcfg-target-family.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fcfg-target-family.rs?ref=b6f580acc0ce233d5c4d1f9680d354fded88b824", "patch": "@@ -4,13 +4,10 @@\n // pretty-expanded FIXME #23616\n \n #[cfg(target_family = \"windows\")]\n-pub fn main() {\n-}\n+pub fn main() {}\n \n #[cfg(target_family = \"unix\")]\n-pub fn main() {\n-}\n+pub fn main() {}\n \n-#[cfg(target_family=\"wasm\")]\n-pub fn main() {\n-}\n+#[cfg(all(target_family = \"wasm\", not(target_os = \"emscripten\")))]\n+pub fn main() {}"}]}