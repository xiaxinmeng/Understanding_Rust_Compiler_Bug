{"sha": "0129b01a41a062f82909cecdfd0cc7f0093c71f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMjliMDFhNDFhMDYyZjgyOTA5Y2VjZGZkMGNjN2YwMDkzYzcxZjg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-02-10T20:09:25Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-03-04T04:21:35Z"}, "message": "rustc: Tweak default linker selection\n\nThis commit refactors how the path to the linker that we're going to invoke is\nselected. Previously all targets listed *both* a `LinkerFlavor` and a `linker`\n(path) option, but this meant that whenever you changed one you had to change\nthe other. The purpose of this commit is to avoid coupling these where possible.\n\nTarget specifications now only unconditionally define the *flavor* of the linker\nthat they're using by default. If not otherwise specified each flavor now\nimplies a particular default linker to run. As a result, this means that if\nyou'd like to test out `ld` for example you should be able to do:\n\n    rustc -Z linker-flavor=ld foo.rs\n\nwhereas previously you had to do\n\n    rustc -Z linker-flavor=ld -C linker=ld foo.rs\n\nThis will hopefully make it a bit easier to tinker around with variants that\nshould otherwise be well known to work, for example with LLD, `ld` on OSX, etc.", "tree": {"sha": "7213eec523af5741bc99ac39388d8a2f83a16c97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7213eec523af5741bc99ac39388d8a2f83a16c97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0129b01a41a062f82909cecdfd0cc7f0093c71f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0129b01a41a062f82909cecdfd0cc7f0093c71f8", "html_url": "https://github.com/rust-lang/rust/commit/0129b01a41a062f82909cecdfd0cc7f0093c71f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0129b01a41a062f82909cecdfd0cc7f0093c71f8/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d69b24805b5071e5ec9e62d2777a761723644144", "url": "https://api.github.com/repos/rust-lang/rust/commits/d69b24805b5071e5ec9e62d2777a761723644144", "html_url": "https://github.com/rust-lang/rust/commit/d69b24805b5071e5ec9e62d2777a761723644144"}], "stats": {"total": 201, "additions": 83, "deletions": 118}, "files": [{"sha": "576e507824740af3df636ba1b0c1eced370ea8b7", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=0129b01a41a062f82909cecdfd0cc7f0093c71f8", "patch": "@@ -606,8 +606,10 @@ impl Step for Std {\n         let mut src = builder.sysroot_libdir(compiler, target).to_path_buf();\n         src.pop(); // Remove the trailing /lib folder from the sysroot_libdir\n         cp_filtered(&src, &dst, &|path| {\n-            path.file_name().and_then(|s| s.to_str()) !=\n-                Some(build.config.rust_codegen_backends_dir.as_str())\n+            let name = path.file_name().and_then(|s| s.to_str());\n+            name != Some(build.config.rust_codegen_backends_dir.as_str()) &&\n+                name != Some(\"bin\")\n+\n         });\n \n         let mut cmd = rust_installer(builder);"}, {"sha": "7888f0b938d9fdaffa6809a53ea776d2119fe4cb", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=0129b01a41a062f82909cecdfd0cc7f0093c71f8", "patch": "@@ -208,7 +208,7 @@ impl Step for Llvm {\n             cfg.define(\"LLVM_NATIVE_BUILD\", build.llvm_out(build.build).join(\"build\"));\n         }\n \n-        configure_cmake(build, target, &mut cfg);\n+        configure_cmake(build, target, &mut cfg, false);\n \n         // FIXME: we don't actually need to build all LLVM tools and all LLVM\n         //        libraries here, e.g. we just want a few components and a few\n@@ -241,7 +241,8 @@ fn check_llvm_version(build: &Build, llvm_config: &Path) {\n \n fn configure_cmake(build: &Build,\n                    target: Interned<String>,\n-                   cfg: &mut cmake::Config) {\n+                   cfg: &mut cmake::Config,\n+                   building_dist_binaries: bool) {\n     if build.config.ninja {\n         cfg.generator(\"Ninja\");\n     }\n@@ -294,8 +295,10 @@ fn configure_cmake(build: &Build,\n     cfg.build_arg(\"-j\").build_arg(build.jobs().to_string());\n     cfg.define(\"CMAKE_C_FLAGS\", build.cflags(target).join(\" \"));\n     let mut cxxflags = build.cflags(target).join(\" \");\n-    if build.config.llvm_static_stdcpp && !target.contains(\"windows\") {\n-        cxxflags.push_str(\" -static-libstdc++\");\n+    if building_dist_binaries {\n+        if build.config.llvm_static_stdcpp && !target.contains(\"windows\") {\n+            cxxflags.push_str(\" -static-libstdc++\");\n+        }\n     }\n     cfg.define(\"CMAKE_CXX_FLAGS\", cxxflags);\n     if let Some(ar) = build.ar(target) {\n@@ -350,7 +353,7 @@ impl Step for Lld {\n         t!(fs::create_dir_all(&out_dir));\n \n         let mut cfg = cmake::Config::new(build.src.join(\"src/tools/lld\"));\n-        configure_cmake(build, target, &mut cfg);\n+        configure_cmake(build, target, &mut cfg, true);\n \n         cfg.out_dir(&out_dir)\n            .profile(\"Release\")"}, {"sha": "9de56cca3394f5c99625357756687d9be8c25149", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=0129b01a41a062f82909cecdfd0cc7f0093c71f8", "patch": "@@ -57,6 +57,9 @@ pub enum LinkerFlavor {\n          RustcEncodable, RustcDecodable)]\n pub enum LldFlavor {\n     Wasm,\n+    Ld64,\n+    Ld,\n+    Link,\n }\n \n impl ToJson for LinkerFlavor {\n@@ -94,6 +97,9 @@ flavor_mappings! {\n     ((LinkerFlavor::Ld), \"ld\"),\n     ((LinkerFlavor::Msvc), \"msvc\"),\n     ((LinkerFlavor::Lld(LldFlavor::Wasm)), \"wasm-ld\"),\n+    ((LinkerFlavor::Lld(LldFlavor::Ld64)), \"ld64.lld\"),\n+    ((LinkerFlavor::Lld(LldFlavor::Ld)), \"ld.lld\"),\n+    ((LinkerFlavor::Lld(LldFlavor::Link)), \"lld-link\"),\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]"}, {"sha": "a5d0e5bf166dd8c507b5c3978ff7371c7d128de4", "filename": "src/librustc_back/target/aarch64_unknown_cloudabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_cloudabi.rs?ref=0129b01a41a062f82909cecdfd0cc7f0093c71f8", "patch": "@@ -15,7 +15,7 @@ pub fn target() -> TargetResult {\n     let mut base = super::cloudabi_base::opts();\n     base.max_atomic_width = Some(128);\n     base.abi_blacklist = super::arm_base::abi_blacklist();\n-    base.linker = \"aarch64-unknown-cloudabi-cc\".to_string();\n+    base.linker = Some(\"aarch64-unknown-cloudabi-cc\".to_string());\n \n     Ok(Target {\n         llvm_target: \"aarch64-unknown-cloudabi\".to_string(),"}, {"sha": "fa66a35abbf353a37104d9c01223b6d09e6b8b8d", "filename": "src/librustc_back/target/armv7_unknown_cloudabi_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_cloudabi_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_cloudabi_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_cloudabi_eabihf.rs?ref=0129b01a41a062f82909cecdfd0cc7f0093c71f8", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> TargetResult {\n     base.max_atomic_width = Some(64);\n     base.features = \"+v7,+vfp3,+neon\".to_string();\n     base.abi_blacklist = super::arm_base::abi_blacklist();\n-    base.linker = \"armv7-unknown-cloudabi-eabihf-cc\".to_string();\n+    base.linker = Some(\"armv7-unknown-cloudabi-eabihf-cc\".to_string());\n \n     Ok(Target {\n         llvm_target: \"armv7-unknown-cloudabi-eabihf\".to_string(),"}, {"sha": "f114926740a5ec5cd7e37bffa1d06b893c8dabd3", "filename": "src/librustc_back/target/asmjs_unknown_emscripten.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs?ref=0129b01a41a062f82909cecdfd0cc7f0093c71f8", "patch": "@@ -10,7 +10,6 @@\n \n use LinkerFlavor;\n use super::{LinkArgs, Target, TargetOptions};\n-use super::emscripten_base::{cmd};\n \n pub fn target() -> Result<Target, String> {\n     let mut args = LinkArgs::new();\n@@ -19,8 +18,6 @@ pub fn target() -> Result<Target, String> {\n                      \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string()]);\n \n     let opts = TargetOptions {\n-        linker: cmd(\"emcc\"),\n-\n         dynamic_linking: false,\n         executables: true,\n         exe_suffix: \".js\".to_string(),"}, {"sha": "bacada3f5ab02c6f666234a112340d1428b3710b", "filename": "src/librustc_back/target/emscripten_base.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d69b24805b5071e5ec9e62d2777a761723644144/src%2Flibrustc_back%2Ftarget%2Femscripten_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d69b24805b5071e5ec9e62d2777a761723644144/src%2Flibrustc_back%2Ftarget%2Femscripten_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Femscripten_base.rs?ref=d69b24805b5071e5ec9e62d2777a761723644144", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-pub fn cmd(name: &str) -> String {\n-    if cfg!(windows) {\n-        format!(\"{}.bat\", name)\n-    } else {\n-        name.to_string()\n-    }\n-}"}, {"sha": "a1ccb632cab79eadffda4a628c61bba37f003e37", "filename": "src/librustc_back/target/haiku_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Fhaiku_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Fhaiku_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fhaiku_base.rs?ref=0129b01a41a062f82909cecdfd0cc7f0093c71f8", "patch": "@@ -13,7 +13,6 @@ use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n-        linker: \"cc\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n         has_rpath: false,"}, {"sha": "69c3b298caba0459e331fdc91016dc07636fd50a", "filename": "src/librustc_back/target/i686_unknown_cloudabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_cloudabi.rs?ref=0129b01a41a062f82909cecdfd0cc7f0093c71f8", "patch": "@@ -15,7 +15,7 @@ pub fn target() -> TargetResult {\n     let mut base = super::cloudabi_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.linker = \"i686-unknown-cloudabi-cc\".to_string();\n+    base.linker = Some(\"i686-unknown-cloudabi-cc\".to_string());\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n     base.stack_probes = true;\n "}, {"sha": "7cb7f8d613deed0076db8bc42362d897d3807a44", "filename": "src/librustc_back/target/l4re_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fl4re_base.rs?ref=0129b01a41a062f82909cecdfd0cc7f0093c71f8", "patch": "@@ -73,7 +73,6 @@ pub fn opts() -> Result<TargetOptions, String> {\n         has_elf_tls: false,\n         exe_allocation_crate: None,\n         panic_strategy: PanicStrategy::Abort,\n-        linker: \"ld\".to_string(),\n         pre_link_args,\n         post_link_args,\n         target_family: Some(\"unix\".to_string()),"}, {"sha": "0a3e1826f3a1c90e0287efb7784aabc3d9c045eb", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=0129b01a41a062f82909cecdfd0cc7f0093c71f8", "patch": "@@ -58,7 +58,6 @@ mod arm_base;\n mod bitrig_base;\n mod cloudabi_base;\n mod dragonfly_base;\n-mod emscripten_base;\n mod freebsd_base;\n mod haiku_base;\n mod linux_base;\n@@ -279,8 +278,8 @@ pub struct TargetOptions {\n     /// Whether the target is built-in or loaded from a custom target specification.\n     pub is_builtin: bool,\n \n-    /// Linker to invoke. Defaults to \"cc\".\n-    pub linker: String,\n+    /// Linker to invoke\n+    pub linker: Option<String>,\n \n     /// Linker arguments that are unconditionally passed *before* any\n     /// user-defined libraries.\n@@ -482,7 +481,7 @@ impl Default for TargetOptions {\n     fn default() -> TargetOptions {\n         TargetOptions {\n             is_builtin: false,\n-            linker: option_env!(\"CFG_DEFAULT_LINKER\").unwrap_or(\"cc\").to_string(),\n+            linker: option_env!(\"CFG_DEFAULT_LINKER\").map(|s| s.to_string()),\n             pre_link_args: LinkArgs::new(),\n             post_link_args: LinkArgs::new(),\n             asm_args: Vec::new(),\n@@ -732,7 +731,7 @@ impl Target {\n         }\n \n         key!(is_builtin, bool);\n-        key!(linker);\n+        key!(linker, optional);\n         key!(pre_link_args, link_args);\n         key!(pre_link_objects_exe, list);\n         key!(pre_link_objects_dll, list);"}, {"sha": "d0f512ae47cd9d02392ad4358bbacdd9f1009fbc", "filename": "src/librustc_back/target/msp430_none_elf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Fmsp430_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Fmsp430_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmsp430_none_elf.rs?ref=0129b01a41a062f82909cecdfd0cc7f0093c71f8", "patch": "@@ -32,7 +32,7 @@ pub fn target() -> TargetResult {\n             // to gcc to get object files. For this reason we have a hard\n             // dependency on this specific gcc.\n             asm_args: vec![\"-mcpu=msp430\".to_string()],\n-            linker: \"msp430-elf-gcc\".to_string(),\n+            linker: Some(\"msp430-elf-gcc\".to_string()),\n             no_integrated_as: true,\n \n             // There are no atomic instructions available in the MSP430"}, {"sha": "6a8f52f509310b0cf0a962be74c3f56b1dca7932", "filename": "src/librustc_back/target/thumb_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fthumb_base.rs?ref=0129b01a41a062f82909cecdfd0cc7f0093c71f8", "patch": "@@ -45,7 +45,7 @@ pub fn opts() -> TargetOptions {\n         executables: true,\n         // In 99%+ of cases, we want to use the `arm-none-eabi-gcc` compiler (there aren't many\n         // options around)\n-        linker: \"arm-none-eabi-gcc\".to_string(),\n+        linker: Some(\"arm-none-eabi-gcc\".to_string()),\n         // Because these devices have very little resources having an unwinder is too onerous so we\n         // default to \"abort\" because the \"unwind\" strategy is very rare.\n         panic_strategy: PanicStrategy::Abort,"}, {"sha": "13dee3a576869c0a45b9dcb1da338ecadcffaf5d", "filename": "src/librustc_back/target/wasm32_experimental_emscripten.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Fwasm32_experimental_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Fwasm32_experimental_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwasm32_experimental_emscripten.rs?ref=0129b01a41a062f82909cecdfd0cc7f0093c71f8", "patch": "@@ -10,7 +10,6 @@\n \n use LinkerFlavor;\n use super::{LinkArgs, Target, TargetOptions};\n-use super::emscripten_base::{cmd};\n \n pub fn target() -> Result<Target, String> {\n     let mut post_link_args = LinkArgs::new();\n@@ -24,8 +23,6 @@ pub fn target() -> Result<Target, String> {\n                                \"-g3\".to_string()]);\n \n     let opts = TargetOptions {\n-        linker: cmd(\"emcc\"),\n-\n         dynamic_linking: false,\n         executables: true,\n         // Today emcc emits two files - a .js file to bootstrap and"}, {"sha": "2770e67e30a5bd9234d319a0be7c0a8467fb6098", "filename": "src/librustc_back/target/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs?ref=0129b01a41a062f82909cecdfd0cc7f0093c71f8", "patch": "@@ -10,7 +10,6 @@\n \n use LinkerFlavor;\n use super::{LinkArgs, Target, TargetOptions};\n-use super::emscripten_base::{cmd};\n \n pub fn target() -> Result<Target, String> {\n     let mut post_link_args = LinkArgs::new();\n@@ -21,8 +20,6 @@ pub fn target() -> Result<Target, String> {\n                                \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string()]);\n \n     let opts = TargetOptions {\n-        linker: cmd(\"emcc\"),\n-\n         dynamic_linking: false,\n         executables: true,\n         // Today emcc emits two files - a .js file to bootstrap and"}, {"sha": "1d84e13751740f82e58bb5874ac86abeefd46e0e", "filename": "src/librustc_back/target/wasm32_unknown_unknown.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_unknown.rs?ref=0129b01a41a062f82909cecdfd0cc7f0093c71f8", "patch": "@@ -22,8 +22,6 @@ use super::{Target, TargetOptions, PanicStrategy};\n \n pub fn target() -> Result<Target, String> {\n     let opts = TargetOptions {\n-        linker: \"lld\".to_string(),\n-\n         // we allow dynamic linking, but only cdylibs. Basically we allow a\n         // final library artifact that exports some symbols (a wasm module) but\n         // we don't allow intermediate `dylib` crate types"}, {"sha": "05b6247c9518f040fedda7f653c6346803473732", "filename": "src/librustc_back/target/windows_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs?ref=0129b01a41a062f82909cecdfd0cc7f0093c71f8", "patch": "@@ -75,7 +75,7 @@ pub fn opts() -> TargetOptions {\n     TargetOptions {\n         // FIXME(#13846) this should be enabled for windows\n         function_sections: false,\n-        linker: \"gcc\".to_string(),\n+        linker: Some(\"gcc\".to_string()),\n         dynamic_linking: true,\n         executables: true,\n         dll_prefix: \"\".to_string(),"}, {"sha": "34aa17267f8bea59e9e6cdf44c0c49591d20f167", "filename": "src/librustc_back/target/windows_msvc_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs?ref=0129b01a41a062f82909cecdfd0cc7f0093c71f8", "patch": "@@ -20,7 +20,6 @@ pub fn opts() -> TargetOptions {\n \n     TargetOptions {\n         function_sections: true,\n-        linker: \"link.exe\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n         dll_prefix: \"\".to_string(),"}, {"sha": "3158665a2e28d0227192a5f4c6fb99869dc4cdfc", "filename": "src/librustc_back/target/x86_64_rumprun_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Fx86_64_rumprun_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Fx86_64_rumprun_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_rumprun_netbsd.rs?ref=0129b01a41a062f82909cecdfd0cc7f0093c71f8", "patch": "@@ -15,7 +15,7 @@ pub fn target() -> TargetResult {\n     let mut base = super::netbsd_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n-    base.linker = \"x86_64-rumprun-netbsd-gcc\".to_string();\n+    base.linker = Some(\"x86_64-rumprun-netbsd-gcc\".to_string());\n     base.max_atomic_width = Some(64);\n \n     base.dynamic_linking = false;"}, {"sha": "d1a9cb1cd7e7db57cf0ad40caa5d3767dccee207", "filename": "src/librustc_back/target/x86_64_unknown_cloudabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_cloudabi.rs?ref=0129b01a41a062f82909cecdfd0cc7f0093c71f8", "patch": "@@ -15,7 +15,7 @@ pub fn target() -> TargetResult {\n     let mut base = super::cloudabi_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.linker = \"x86_64-unknown-cloudabi-cc\".to_string();\n+    base.linker = Some(\"x86_64-unknown-cloudabi-cc\".to_string());\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.stack_probes = true;\n "}, {"sha": "805d2086ee4f66b7723fc486931c61a26c34f10f", "filename": "src/librustc_trans/Cargo.toml", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_trans%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_trans%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2FCargo.toml?ref=0129b01a41a062f82909cecdfd0cc7f0093c71f8", "patch": "@@ -11,6 +11,7 @@ test = false\n \n [dependencies]\n bitflags = \"1.0\"\n+cc = \"1.0.1\"\n flate2 = \"1.0\"\n jobserver = \"0.1.5\"\n libc = \"0.2\"\n@@ -34,9 +35,6 @@ syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n tempdir = \"0.3\"\n \n-[target.\"cfg(windows)\".dependencies]\n-cc = \"1.0.1\"\n-\n [features]\n # Used to communicate the feature to `rustc_back` in the same manner that the\n # `rustc` driver script communicate this."}, {"sha": "ecf7bf5036e08597c6a538844395e4031ea8a84f", "filename": "src/librustc_trans/back/command.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_trans%2Fback%2Fcommand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_trans%2Fback%2Fcommand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fcommand.rs?ref=0129b01a41a062f82909cecdfd0cc7f0093c71f8", "patch": "@@ -81,17 +81,6 @@ impl Command {\n         self\n     }\n \n-    pub fn envs<I, K, V>(&mut self, envs: I) -> &mut Command\n-        where I: IntoIterator<Item=(K, V)>,\n-              K: AsRef<OsStr>,\n-              V: AsRef<OsStr>\n-    {\n-        for (key, value) in envs {\n-            self._env(key.as_ref(), value.as_ref());\n-        }\n-        self\n-    }\n-\n     fn _env(&mut self, key: &OsStr, value: &OsStr) {\n         self.env.push((key.to_owned(), value.to_owned()));\n     }\n@@ -112,6 +101,9 @@ impl Command {\n                 let mut c = process::Command::new(p);\n                 c.arg(\"-flavor\").arg(match flavor {\n                     LldFlavor::Wasm => \"wasm\",\n+                    LldFlavor::Ld => \"gnu\",\n+                    LldFlavor::Link => \"link\",\n+                    LldFlavor::Ld64 => \"darwin\",\n                 });\n                 c\n             }"}, {"sha": "636b3984117d8d7026a8fd007b64a9709c13edc0", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 44, "deletions": 51, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=0129b01a41a062f82909cecdfd0cc7f0093c71f8", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use cc::windows_registry;\n use super::archive::{ArchiveBuilder, ArchiveConfig};\n use super::bytecode::RLIB_BYTECODE_EXTENSION;\n use super::linker::Linker;\n@@ -35,7 +36,6 @@ use llvm;\n use std::ascii;\n use std::char;\n use std::env;\n-use std::ffi::OsString;\n use std::fmt;\n use std::fs;\n use std::io;\n@@ -58,9 +58,7 @@ pub use rustc_trans_utils::link::{find_crate_name, filename_for_input, default_o\n // The third parameter is for env vars, used on windows to set up the\n // path for MSVC to find its DLLs, and gcc to find its bundled\n // toolchain\n-pub fn get_linker(sess: &Session) -> (PathBuf, Command, Vec<(OsString, OsString)>) {\n-    let envs = vec![(\"PATH\".into(), command_path(sess))];\n-\n+pub fn get_linker(sess: &Session) -> (PathBuf, Command) {\n     // If our linker looks like a batch script on Windows then to execute this\n     // we'll need to spawn `cmd` explicitly. This is primarily done to handle\n     // emscripten where the linker is `emcc.bat` and needs to be spawned as\n@@ -75,60 +73,57 @@ pub fn get_linker(sess: &Session) -> (PathBuf, Command, Vec<(OsString, OsString)\n                 return Command::bat_script(linker)\n             }\n         }\n-        Command::new(linker)\n-    };\n-\n-    if let Some(ref linker) = sess.opts.cg.linker {\n-        (linker.clone(), cmd(linker), envs)\n-    } else if sess.target.target.options.is_like_msvc {\n-        let (cmd, envs) = msvc_link_exe_cmd(sess);\n-        (PathBuf::from(\"link.exe\"), cmd, envs)\n-    } else if let LinkerFlavor::Lld(f) = sess.linker_flavor() {\n-        let linker = PathBuf::from(&sess.target.target.options.linker);\n-        let cmd = Command::lld(&linker, f);\n-        (linker, cmd, envs)\n-    } else {\n-        let linker = PathBuf::from(&sess.target.target.options.linker);\n-        let cmd = cmd(&linker);\n-        (linker, cmd, envs)\n-    }\n-}\n+        match sess.linker_flavor() {\n+            LinkerFlavor::Lld(f) => Command::lld(linker, f),\n+            _ => Command::new(linker),\n \n-#[cfg(windows)]\n-pub fn msvc_link_exe_cmd(sess: &Session) -> (Command, Vec<(OsString, OsString)>) {\n-    use cc::windows_registry;\n+        }\n+    };\n \n-    let target = &sess.opts.target_triple;\n-    let tool = windows_registry::find_tool(target, \"link.exe\");\n+    let msvc_tool = windows_registry::find_tool(&sess.opts.target_triple, \"link.exe\");\n \n-    if let Some(tool) = tool {\n-        let mut cmd = Command::new(tool.path());\n-        cmd.args(tool.args());\n-        for &(ref k, ref v) in tool.env() {\n-            cmd.env(k, v);\n-        }\n-        let envs = tool.env().to_vec();\n-        (cmd, envs)\n-    } else {\n-        debug!(\"Failed to locate linker.\");\n-        (Command::new(\"link.exe\"), vec![])\n-    }\n-}\n+    let linker_path = sess.opts.cg.linker.as_ref().map(|s| &**s)\n+        .or(sess.target.target.options.linker.as_ref().map(|s| s.as_ref()))\n+        .unwrap_or(match sess.linker_flavor() {\n+            LinkerFlavor::Msvc => {\n+                msvc_tool.as_ref().map(|t| t.path()).unwrap_or(\"link.exe\".as_ref())\n+            }\n+            LinkerFlavor::Em if cfg!(windows) => \"emcc.bat\".as_ref(),\n+            LinkerFlavor::Em => \"emcc\".as_ref(),\n+            LinkerFlavor::Gcc => \"cc\".as_ref(),\n+            LinkerFlavor::Ld => \"ld\".as_ref(),\n+            LinkerFlavor::Lld(_) => \"lld\".as_ref(),\n+        });\n \n-#[cfg(not(windows))]\n-pub fn msvc_link_exe_cmd(_sess: &Session) -> (Command, Vec<(OsString, OsString)>) {\n-    (Command::new(\"link.exe\"), vec![])\n-}\n+    let mut cmd = cmd(linker_path);\n \n-fn command_path(sess: &Session) -> OsString {\n     // The compiler's sysroot often has some bundled tools, so add it to the\n     // PATH for the child.\n     let mut new_path = sess.host_filesearch(PathKind::All)\n                            .get_tools_search_paths();\n-    if let Some(path) = env::var_os(\"PATH\") {\n-        new_path.extend(env::split_paths(&path));\n+    let mut msvc_changed_path = false;\n+    if sess.target.target.options.is_like_msvc {\n+        if let Some(ref tool) = msvc_tool {\n+            cmd.args(tool.args());\n+            for &(ref k, ref v) in tool.env() {\n+                if k == \"PATH\" {\n+                    new_path.extend(env::split_paths(v));\n+                    msvc_changed_path = true;\n+                } else {\n+                    cmd.env(k, v);\n+                }\n+            }\n+        }\n     }\n-    env::join_paths(new_path).unwrap()\n+\n+    if !msvc_changed_path {\n+        if let Some(path) = env::var_os(\"PATH\") {\n+            new_path.extend(env::split_paths(&path));\n+        }\n+    }\n+    cmd.env(\"PATH\", env::join_paths(new_path).unwrap());\n+\n+    (linker_path.to_path_buf(), cmd)\n }\n \n pub fn remove(sess: &Session, path: &Path) {\n@@ -618,9 +613,7 @@ fn link_natively(sess: &Session,\n     let flavor = sess.linker_flavor();\n \n     // The invocations of cc share some flags across platforms\n-    let (pname, mut cmd, envs) = get_linker(sess);\n-    // This will set PATH on windows\n-    cmd.envs(envs);\n+    let (pname, mut cmd) = get_linker(sess);\n \n     let root = sess.target_filesearch(PathKind::Native).get_lib_path();\n     if let Some(args) = sess.target.target.options.pre_link_args.get(&flavor) {"}, {"sha": "a3ff39a47a2998e23f9cc41acfe7133add6c2752", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=0129b01a41a062f82909cecdfd0cc7f0093c71f8", "patch": "@@ -45,6 +45,7 @@ impl LinkerInfo {\n                          cmd: Command,\n                          sess: &'a Session) -> Box<Linker+'a> {\n         match sess.linker_flavor() {\n+            LinkerFlavor::Lld(LldFlavor::Link) |\n             LinkerFlavor::Msvc => {\n                 Box::new(MsvcLinker {\n                     cmd,\n@@ -68,6 +69,9 @@ impl LinkerInfo {\n                     is_ld: false,\n                 }) as Box<Linker>\n             }\n+\n+            LinkerFlavor::Lld(LldFlavor::Ld) |\n+            LinkerFlavor::Lld(LldFlavor::Ld64) |\n             LinkerFlavor::Ld => {\n                 Box::new(GccLinker {\n                     cmd,"}, {"sha": "78b26a37485ef89807c2bc773e7ffc7bb8dfd535", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=0129b01a41a062f82909cecdfd0cc7f0093c71f8", "patch": "@@ -1369,7 +1369,7 @@ fn start_executing_work(tcx: TyCtxt,\n \n     let assembler_cmd = if modules_config.no_integrated_as {\n         // HACK: currently we use linker (gcc) as our assembler\n-        let (name, mut cmd, _) = get_linker(sess);\n+        let (name, mut cmd) = get_linker(sess);\n         cmd.args(&sess.target.target.options.asm_args);\n         Some(Arc::new(AssemblerCommand {\n             name,"}, {"sha": "0b8da10b78e776c71acfd2c00c539970c43d0ebf", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0129b01a41a062f82909cecdfd0cc7f0093c71f8/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=0129b01a41a062f82909cecdfd0cc7f0093c71f8", "patch": "@@ -62,7 +62,6 @@ extern crate rustc_trans_utils;\n extern crate syntax_pos;\n extern crate rustc_errors as errors;\n extern crate serialize;\n-#[cfg(windows)]\n extern crate cc; // Used to locate MSVC\n extern crate tempdir;\n "}]}