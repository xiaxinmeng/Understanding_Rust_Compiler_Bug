{"sha": "2fb110e1faa1daabd96a9c961da38a838c906553", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYjExMGUxZmFhMWRhYWJkOTZhOWM5NjFkYTM4YTgzOGM5MDY1NTM=", "commit": {"author": {"name": "pcpthm", "email": "pcpthm@gmail.com", "date": "2019-03-19T08:37:08Z"}, "committer": {"name": "pcpthm", "email": "pcpthm@gmail.com", "date": "2019-03-19T08:37:08Z"}, "message": "Error about attributes on\nunallowed types of expression statement", "tree": {"sha": "b5a78040fa9d101a0a8d1b64df77fb7674dc9bdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5a78040fa9d101a0a8d1b64df77fb7674dc9bdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fb110e1faa1daabd96a9c961da38a838c906553", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb110e1faa1daabd96a9c961da38a838c906553", "html_url": "https://github.com/rust-lang/rust/commit/2fb110e1faa1daabd96a9c961da38a838c906553", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fb110e1faa1daabd96a9c961da38a838c906553/comments", "author": {"login": "pcpthm", "id": 43881370, "node_id": "MDQ6VXNlcjQzODgxMzcw", "avatar_url": "https://avatars.githubusercontent.com/u/43881370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcpthm", "html_url": "https://github.com/pcpthm", "followers_url": "https://api.github.com/users/pcpthm/followers", "following_url": "https://api.github.com/users/pcpthm/following{/other_user}", "gists_url": "https://api.github.com/users/pcpthm/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcpthm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcpthm/subscriptions", "organizations_url": "https://api.github.com/users/pcpthm/orgs", "repos_url": "https://api.github.com/users/pcpthm/repos", "events_url": "https://api.github.com/users/pcpthm/events{/privacy}", "received_events_url": "https://api.github.com/users/pcpthm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcpthm", "id": 43881370, "node_id": "MDQ6VXNlcjQzODgxMzcw", "avatar_url": "https://avatars.githubusercontent.com/u/43881370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcpthm", "html_url": "https://github.com/pcpthm", "followers_url": "https://api.github.com/users/pcpthm/followers", "following_url": "https://api.github.com/users/pcpthm/following{/other_user}", "gists_url": "https://api.github.com/users/pcpthm/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcpthm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcpthm/subscriptions", "organizations_url": "https://api.github.com/users/pcpthm/orgs", "repos_url": "https://api.github.com/users/pcpthm/repos", "events_url": "https://api.github.com/users/pcpthm/events{/privacy}", "received_events_url": "https://api.github.com/users/pcpthm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffed132e52964f029a586a3efd4afc879ed39c59", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffed132e52964f029a586a3efd4afc879ed39c59", "html_url": "https://github.com/rust-lang/rust/commit/ffed132e52964f029a586a3efd4afc879ed39c59"}], "stats": {"total": 94, "additions": 82, "deletions": 12}, "files": [{"sha": "c8ce07179dcdc8f2a77b644a482c1635c6e5e075", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2fb110e1faa1daabd96a9c961da38a838c906553/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb110e1faa1daabd96a9c961da38a838c906553/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=2fb110e1faa1daabd96a9c961da38a838c906553", "patch": "@@ -38,6 +38,13 @@ pub(crate) fn block(p: &mut Parser) {\n     m.complete(p, BLOCK);\n }\n \n+fn is_expr_stmt_attr_allowed(kind: SyntaxKind) -> bool {\n+    match kind {\n+        BIN_EXPR | RANGE_EXPR | IF_EXPR => false,\n+        _ => true,\n+    }\n+}\n+\n pub(crate) fn expr_block_contents(p: &mut Parser) {\n     // This is checked by a validator\n     attributes::inner_attributes(p);\n@@ -62,6 +69,7 @@ pub(crate) fn expr_block_contents(p: &mut Parser) {\n         //     #[C] #[D] {}\n         //     #[D] return ();\n         // }\n+        let has_attrs = p.at(POUND);\n         attributes::outer_attributes(p);\n         if p.at(LET_KW) {\n             let_stmt(p, m);\n@@ -74,26 +82,29 @@ pub(crate) fn expr_block_contents(p: &mut Parser) {\n         };\n \n         let (cm, blocklike) = expr_stmt(p);\n-        let cm = match cm {\n-            None => {\n-                if p.at(R_CURLY) {\n-                    m.abandon(p);\n-                } else {\n-                    p.expect(SEMI);\n-                    m.complete(p, EXPR_STMT);\n-                }\n-                continue;\n+\n+        if let Some(cm) = &cm {\n+            if has_attrs && !is_expr_stmt_attr_allowed(cm.kind()) {\n+                // test_err attr_on_expr_not_allowed\n+                // fn foo() {\n+                //    #[A] 1 + 2;\n+                //    #[B] if true {};\n+                // }\n+                p.error(format!(\"attributes are not allowed on {:?}\", cm.kind()));\n             }\n-            Some(cm) => cm,\n-        };\n+        }\n \n         if p.at(R_CURLY) {\n             // test attr_on_last_expr_in_block\n             // fn foo() {\n             //     { #[A] bar!()? }\n             //     #[B] &()\n             // }\n-            m.contract_child(p, cm);\n+            if let Some(cm) = cm {\n+                m.contract_child(p, cm);\n+            } else {\n+                m.abandon(p);\n+            }\n         } else {\n             // test no_semi_after_block\n             // fn foo() {"}, {"sha": "d725a07ce962edf364629f258ae9da5472c1e874", "filename": "crates/ra_syntax/tests/data/parser/inline/err/0009_attr_on_expr_not_allowed.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fb110e1faa1daabd96a9c961da38a838c906553/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb110e1faa1daabd96a9c961da38a838c906553/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.rs?ref=2fb110e1faa1daabd96a9c961da38a838c906553", "patch": "@@ -0,0 +1,4 @@\n+fn foo() {\n+   #[A] 1 + 2;\n+   #[B] if true {};\n+}"}, {"sha": "fdea1ec1efc40e730720b66724d58d9bf50de484", "filename": "crates/ra_syntax/tests/data/parser/inline/err/0009_attr_on_expr_not_allowed.txt", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/2fb110e1faa1daabd96a9c961da38a838c906553/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2fb110e1faa1daabd96a9c961da38a838c906553/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.txt?ref=2fb110e1faa1daabd96a9c961da38a838c906553", "patch": "@@ -0,0 +1,55 @@\n+SOURCE_FILE@[0; 48)\n+  FN_DEF@[0; 47)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 8)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+    WHITESPACE@[8; 9)\n+    BLOCK@[9; 47)\n+      L_CURLY@[9; 10)\n+      WHITESPACE@[10; 14)\n+      EXPR_STMT@[14; 25)\n+        ATTR@[14; 18)\n+          POUND@[14; 15)\n+          TOKEN_TREE@[15; 18)\n+            L_BRACK@[15; 16)\n+            IDENT@[16; 17) \"A\"\n+            R_BRACK@[17; 18)\n+        WHITESPACE@[18; 19)\n+        BIN_EXPR@[19; 24)\n+          LITERAL@[19; 20)\n+            INT_NUMBER@[19; 20) \"1\"\n+          WHITESPACE@[20; 21)\n+          PLUS@[21; 22)\n+          WHITESPACE@[22; 23)\n+          LITERAL@[23; 24)\n+            INT_NUMBER@[23; 24) \"2\"\n+            err: `attributes are not allowed on BIN_EXPR`\n+        SEMI@[24; 25)\n+      WHITESPACE@[25; 29)\n+      EXPR_STMT@[29; 45)\n+        ATTR@[29; 33)\n+          POUND@[29; 30)\n+          TOKEN_TREE@[30; 33)\n+            L_BRACK@[30; 31)\n+            IDENT@[31; 32) \"B\"\n+            R_BRACK@[32; 33)\n+        WHITESPACE@[33; 34)\n+        IF_EXPR@[34; 44)\n+          IF_KW@[34; 36)\n+          WHITESPACE@[36; 37)\n+          CONDITION@[37; 41)\n+            LITERAL@[37; 41)\n+              TRUE_KW@[37; 41)\n+          WHITESPACE@[41; 42)\n+          BLOCK@[42; 44)\n+            L_CURLY@[42; 43)\n+            R_CURLY@[43; 44)\n+            err: `attributes are not allowed on IF_EXPR`\n+        SEMI@[44; 45)\n+      WHITESPACE@[45; 46)\n+      R_CURLY@[46; 47)\n+  WHITESPACE@[47; 48)"}]}