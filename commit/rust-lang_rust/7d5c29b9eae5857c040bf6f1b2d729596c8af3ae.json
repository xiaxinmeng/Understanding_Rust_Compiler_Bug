{"sha": "7d5c29b9eae5857c040bf6f1b2d729596c8af3ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNWMyOWI5ZWFlNTg1N2MwNDBiZjZmMWIyZDcyOTU5NmM4YWYzYWU=", "commit": {"author": {"name": "Lymia Aluysia", "email": "lymia@lymiahugs.com", "date": "2018-03-14T07:00:41Z"}, "committer": {"name": "Lymia Aluysia", "email": "lymia@lymiahugs.com", "date": "2018-03-18T15:07:19Z"}, "message": "Feature gate raw identifiers.", "tree": {"sha": "8a0880590ff513f1da9acb7dfa8d309c520c8fb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a0880590ff513f1da9acb7dfa8d309c520c8fb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEfrc19M/exUzAyXK/2y4gTJiSUfcFAlqugKcACgkQ2y4gTJiS\nUfd/vxAAyzBbcsH1HCghBMcIwxx5ARI6MwV1a25/SDQ+MDioo/N+Z62huWRgoS4f\n/iVxToUu1X7fUKKrjl9cut8W4cm0i+WgLggM0JszovPwbk9BL6FohpQfuvZmMock\nSwYMg/A6QAqlpuTKGPta6P2x3M+cpWSpcNuAyZ5zr6/HeCwc2oxyCtRx1wsyGoK/\n0K3UpS4JC9U18njzQ/0iho2tK4ibhVKEfVw1Cc9mB2QAae5ce9ubL9tLV87O08ft\nijG6P81wOR2j5hsZ+uV/iu2+9l2MWzSvuVKpo9QmryZLlE6RqH0VSIUZuKUq7A40\no/luCfsEy6FCZsrR+Tpxph7IpQbZWb08Y40F9eznB5zCVmxJSPzwrCCivYKZ1fLp\nJ1kdTHmyJVYImNpv7ak8ElUZni75kYh5DoxfQFy/4tWaLjfmAyDmo1HZSuSXUaSE\n1OozoqZkqmfjFWahChxMBPBWrWgXdWTwc9NL5ihSFJObHtb+lSOwCMWTpOUa8Iat\nZTGChV2OPHz6m/z0B7V1udwqSqLfN0C1nU0q8fb8l6Z6W4BWP82d/Rwk9LBBbidt\n+TWtmLel7CtqFwacF0MyHZjoCKRms3K+o5VnJYereISoMNzwwxU0mAexIK69m6uY\nPIvtnjqPlpwA99qmUyMLXp+IfbPpO+GLlgvyoCLM4zf+CjaG9qw=\n=b4WD\n-----END PGP SIGNATURE-----", "payload": "tree 8a0880590ff513f1da9acb7dfa8d309c520c8fb1\nparent fad1648e0f8299a8b108f85c2b1055eb37bdab9e\nauthor Lymia Aluysia <lymia@lymiahugs.com> 1521010841 -0500\ncommitter Lymia Aluysia <lymia@lymiahugs.com> 1521385639 -0500\n\nFeature gate raw identifiers.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae", "html_url": "https://github.com/rust-lang/rust/commit/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/comments", "author": {"login": "Lymia", "id": 483849, "node_id": "MDQ6VXNlcjQ4Mzg0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/483849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lymia", "html_url": "https://github.com/Lymia", "followers_url": "https://api.github.com/users/Lymia/followers", "following_url": "https://api.github.com/users/Lymia/following{/other_user}", "gists_url": "https://api.github.com/users/Lymia/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lymia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lymia/subscriptions", "organizations_url": "https://api.github.com/users/Lymia/orgs", "repos_url": "https://api.github.com/users/Lymia/repos", "events_url": "https://api.github.com/users/Lymia/events{/privacy}", "received_events_url": "https://api.github.com/users/Lymia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Lymia", "id": 483849, "node_id": "MDQ6VXNlcjQ4Mzg0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/483849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lymia", "html_url": "https://github.com/Lymia", "followers_url": "https://api.github.com/users/Lymia/followers", "following_url": "https://api.github.com/users/Lymia/following{/other_user}", "gists_url": "https://api.github.com/users/Lymia/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lymia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lymia/subscriptions", "organizations_url": "https://api.github.com/users/Lymia/orgs", "repos_url": "https://api.github.com/users/Lymia/repos", "events_url": "https://api.github.com/users/Lymia/events{/privacy}", "received_events_url": "https://api.github.com/users/Lymia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fad1648e0f8299a8b108f85c2b1055eb37bdab9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fad1648e0f8299a8b108f85c2b1055eb37bdab9e", "html_url": "https://github.com/rust-lang/rust/commit/fad1648e0f8299a8b108f85c2b1055eb37bdab9e"}], "stats": {"total": 67, "additions": 62, "deletions": 5}, "files": [{"sha": "153e42c8214f89610b48d5ef7cc43c95831cae3d", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=7d5c29b9eae5857c040bf6f1b2d729596c8af3ae", "patch": "@@ -452,6 +452,9 @@ declare_features! (\n \n     // `use path as _;` and `extern crate c as _;`\n     (active, underscore_imports, \"1.26.0\", Some(48216), None),\n+\n+    // Raw identifiers allowing keyword names to be used\n+    (active, raw_identifiers, \"1.26.0\", Some(48589), None),\n );\n \n declare_features! (\n@@ -1932,6 +1935,17 @@ pub fn check_crate(krate: &ast::Crate,\n         parse_sess: sess,\n         plugin_attributes,\n     };\n+\n+    if !features.raw_identifiers {\n+        for &span in sess.raw_identifier_spans.borrow().iter() {\n+            if !span.allows_unstable() {\n+                gate_feature!(&ctx, raw_identifiers, span,\n+                    \"raw identifiers are experimental and subject to change\"\n+                );\n+            }\n+        }\n+    }\n+\n     let visitor = &mut PostExpansionVisitor { context: &ctx };\n     visitor.whole_crate_feature_gates(krate);\n     visit::walk_crate(visitor, krate);"}, {"sha": "8e746ea69e79fd3a6b972f9febae082c8d4a4f18", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=7d5c29b9eae5857c040bf6f1b2d729596c8af3ae", "patch": "@@ -1796,6 +1796,7 @@ mod tests {\n             included_mod_stack: RefCell::new(Vec::new()),\n             code_map: cm,\n             missing_fragment_specifiers: RefCell::new(HashSet::new()),\n+            raw_identifier_spans: RefCell::new(Vec::new()),\n             registered_diagnostics: Lock::new(ErrorMap::new()),\n             non_modrs_mods: RefCell::new(vec![]),\n         }"}, {"sha": "03ac1e8b5a9bbc3470a32c5bd2291aaa608c16d1", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=7d5c29b9eae5857c040bf6f1b2d729596c8af3ae", "patch": "@@ -48,6 +48,9 @@ pub struct ParseSess {\n     pub unstable_features: UnstableFeatures,\n     pub config: CrateConfig,\n     pub missing_fragment_specifiers: RefCell<HashSet<Span>>,\n+    /// Places where raw identifiers were used. This is used for feature gating\n+    /// raw identifiers\n+    pub raw_identifier_spans: RefCell<Vec<Span>>,\n     /// The registered diagnostics codes\n     pub registered_diagnostics: Lock<ErrorMap>,\n     // Spans where a `mod foo;` statement was included in a non-mod.rs file.\n@@ -74,6 +77,7 @@ impl ParseSess {\n             unstable_features: UnstableFeatures::from_environment(),\n             config: HashSet::new(),\n             missing_fragment_specifiers: RefCell::new(HashSet::new()),\n+            raw_identifier_spans: RefCell::new(Vec::new()),\n             registered_diagnostics: Lock::new(ErrorMap::new()),\n             included_mod_stack: RefCell::new(vec![]),\n             code_map,"}, {"sha": "c2ee78e9e9d1b4edae2325e1b7186f5a2d4a2878", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7d5c29b9eae5857c040bf6f1b2d729596c8af3ae", "patch": "@@ -784,7 +784,7 @@ impl<'a> Parser<'a> {\n \n     fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, ast::Ident> {\n         match self.token {\n-            token::Ident(i, _) => {\n+            token::Ident(i, is_raw) => {\n                 if self.token.is_reserved_ident() {\n                     let mut err = self.expected_ident_found();\n                     if recover {\n@@ -793,6 +793,9 @@ impl<'a> Parser<'a> {\n                         return Err(err);\n                     }\n                 }\n+                if is_raw {\n+                    self.sess.raw_identifier_spans.borrow_mut().push(self.span);\n+                }\n                 self.bump();\n                 Ok(i)\n             }"}, {"sha": "6cea75cf1d11e9a83daa59481c62a90d8f60d9cf", "filename": "src/test/run-pass/rfc-2151-raw-identifiers/attr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/src%2Ftest%2Frun-pass%2Frfc-2151-raw-identifiers%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/src%2Ftest%2Frun-pass%2Frfc-2151-raw-identifiers%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2151-raw-identifiers%2Fattr.rs?ref=7d5c29b9eae5857c040bf6f1b2d729596c8af3ae", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(raw_identifiers)]\n+\n use std::mem;\n \n #[r#repr(r#C, r#packed)]"}, {"sha": "5d495c4e9e557eca33006318ca3ffd6af05b9bd7", "filename": "src/test/run-pass/rfc-2151-raw-identifiers/basic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/src%2Ftest%2Frun-pass%2Frfc-2151-raw-identifiers%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/src%2Ftest%2Frun-pass%2Frfc-2151-raw-identifiers%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2151-raw-identifiers%2Fbasic.rs?ref=7d5c29b9eae5857c040bf6f1b2d729596c8af3ae", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(raw_identifiers)]\n+\n fn r#fn(r#match: u32) -> u32 {\n     r#match\n }"}, {"sha": "256bd263d38d42c1d5c182310ccbdf50c48e4518", "filename": "src/test/run-pass/rfc-2151-raw-identifiers/items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/src%2Ftest%2Frun-pass%2Frfc-2151-raw-identifiers%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/src%2Ftest%2Frun-pass%2Frfc-2151-raw-identifiers%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2151-raw-identifiers%2Fitems.rs?ref=7d5c29b9eae5857c040bf6f1b2d729596c8af3ae", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(raw_identifiers)]\n+\n #[derive(Debug, PartialEq, Eq)]\n struct IntWrapper(u32);\n "}, {"sha": "4bd16ded52fbdf6b39ba4e5d86aaa8deadd7207f", "filename": "src/test/run-pass/rfc-2151-raw-identifiers/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/src%2Ftest%2Frun-pass%2Frfc-2151-raw-identifiers%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/src%2Ftest%2Frun-pass%2Frfc-2151-raw-identifiers%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2151-raw-identifiers%2Fmacros.rs?ref=7d5c29b9eae5857c040bf6f1b2d729596c8af3ae", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(decl_macro)]\n+#![feature(raw_identifiers)]\n \n r#macro_rules! r#struct {\n     ($r#struct:expr) => { $r#struct }"}, {"sha": "38024feb432d9f31587a2f8787b895d8b9169763", "filename": "src/test/ui/feature-gate-raw-identifiers.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/src%2Ftest%2Fui%2Ffeature-gate-raw-identifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/src%2Ftest%2Fui%2Ffeature-gate-raw-identifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-raw-identifiers.rs?ref=7d5c29b9eae5857c040bf6f1b2d729596c8af3ae", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let r#foo = 3; //~ ERROR raw identifiers are experimental and subject to change\n+    println!(\"{}\", foo);\n+}"}, {"sha": "02eff7247c47bf6f1e705f11ae9d0855cb451987", "filename": "src/test/ui/feature-gate-raw-identifiers.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/src%2Ftest%2Fui%2Ffeature-gate-raw-identifiers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/src%2Ftest%2Fui%2Ffeature-gate-raw-identifiers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-raw-identifiers.stderr?ref=7d5c29b9eae5857c040bf6f1b2d729596c8af3ae", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: raw identifiers are experimental and subject to change (see issue #48589)\n+  --> $DIR/feature-gate-raw-identifiers.rs:12:9\n+   |\n+LL |     let r#foo = 3; //~ ERROR raw identifiers are experimental and subject to change\n+   |         ^^^^^\n+   |\n+   = help: add #![feature(raw_identifiers)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "9b28aa0b15116d9549b56ac0bf908f52b01a34bf", "filename": "src/test/ui/raw-literal-keywords.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/src%2Ftest%2Fui%2Fraw-literal-keywords.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/src%2Ftest%2Fui%2Fraw-literal-keywords.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw-literal-keywords.rs?ref=7d5c29b9eae5857c040bf6f1b2d729596c8af3ae", "patch": "@@ -11,6 +11,7 @@\n // compile-flags: -Z parse-only\n \n #![feature(dyn_trait)]\n+#![feature(raw_identifiers)]\n \n fn test_if() {\n     r#if true { } //~ ERROR found `true`"}, {"sha": "3758568323cc0ac0a3e10a348bee33266e6a1d2d", "filename": "src/test/ui/raw-literal-keywords.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/src%2Ftest%2Fui%2Fraw-literal-keywords.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/src%2Ftest%2Fui%2Fraw-literal-keywords.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw-literal-keywords.stderr?ref=7d5c29b9eae5857c040bf6f1b2d729596c8af3ae", "patch": "@@ -1,17 +1,17 @@\n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `true`\n-  --> $DIR/raw-literal-keywords.rs:16:10\n+  --> $DIR/raw-literal-keywords.rs:17:10\n    |\n LL |     r#if true { } //~ ERROR found `true`\n    |          ^^^^ expected one of 8 possible tokens here\n \n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `Test`\n-  --> $DIR/raw-literal-keywords.rs:20:14\n+  --> $DIR/raw-literal-keywords.rs:21:14\n    |\n LL |     r#struct Test; //~ ERROR found `Test`\n    |              ^^^^ expected one of 8 possible tokens here\n \n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `Test`\n-  --> $DIR/raw-literal-keywords.rs:24:13\n+  --> $DIR/raw-literal-keywords.rs:25:13\n    |\n LL |     r#union Test; //~ ERROR found `Test`\n    |             ^^^^ expected one of 8 possible tokens here"}, {"sha": "f88d6cf9a67bd635df468f0697e9f965dba7cce5", "filename": "src/test/ui/raw-literal-self.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/src%2Ftest%2Fui%2Fraw-literal-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/src%2Ftest%2Fui%2Fraw-literal-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw-literal-self.rs?ref=7d5c29b9eae5857c040bf6f1b2d729596c8af3ae", "patch": "@@ -10,6 +10,8 @@\n \n // compile-flags: -Z parse-only\n \n+#![feature(raw_identifiers)]\n+\n fn self_test(r#self: u32) {\n     //~^ ERROR `r#self` is not currently supported.\n }"}, {"sha": "e3345847aa895367624496deb0981c21de063e1f", "filename": "src/test/ui/raw-literal-self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/src%2Ftest%2Fui%2Fraw-literal-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d5c29b9eae5857c040bf6f1b2d729596c8af3ae/src%2Ftest%2Fui%2Fraw-literal-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw-literal-self.stderr?ref=7d5c29b9eae5857c040bf6f1b2d729596c8af3ae", "patch": "@@ -1,5 +1,5 @@\n error: `r#self` is not currently supported.\n-  --> $DIR/raw-literal-self.rs:13:14\n+  --> $DIR/raw-literal-self.rs:15:14\n    |\n LL | fn self_test(r#self: u32) {\n    |              ^^^^^^"}]}