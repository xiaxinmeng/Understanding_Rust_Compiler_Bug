{"sha": "22c0cbfa8675bf81091bd4bcf50b824fbffba108", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyYzBjYmZhODY3NWJmODEwOTFiZDRiY2Y1MGI4MjRmYmZmYmExMDg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-18T16:19:38Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-18T16:26:46Z"}, "message": "remove `generator_interiors` map", "tree": {"sha": "1735a638ed13373387a7e175ab504a58c3aec7f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1735a638ed13373387a7e175ab504a58c3aec7f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22c0cbfa8675bf81091bd4bcf50b824fbffba108", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22c0cbfa8675bf81091bd4bcf50b824fbffba108", "html_url": "https://github.com/rust-lang/rust/commit/22c0cbfa8675bf81091bd4bcf50b824fbffba108", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22c0cbfa8675bf81091bd4bcf50b824fbffba108/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "413f07438eb18cbb8973d47a516a78d258876346", "url": "https://api.github.com/repos/rust-lang/rust/commits/413f07438eb18cbb8973d47a516a78d258876346", "html_url": "https://github.com/rust-lang/rust/commit/413f07438eb18cbb8973d47a516a78d258876346"}], "stats": {"total": 45, "additions": 5, "deletions": 40}, "files": [{"sha": "dbcdd17480eace6efe8f847a91fe2aea6ebad7e5", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/22c0cbfa8675bf81091bd4bcf50b824fbffba108/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c0cbfa8675bf81091bd4bcf50b824fbffba108/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=22c0cbfa8675bf81091bd4bcf50b824fbffba108", "patch": "@@ -360,8 +360,6 @@ pub struct TypeckTables<'tcx> {\n     /// not all closures are present in the map.\n     closure_kind_origins: ItemLocalMap<(Span, ast::Name)>,\n \n-    generator_interiors: ItemLocalMap<ty::GeneratorInterior<'tcx>>,\n-\n     /// For each fn, records the \"liberated\" types of its arguments\n     /// and return type. Liberated means that all bound regions\n     /// (including late-bound regions) are replaced with free\n@@ -406,7 +404,6 @@ impl<'tcx> TypeckTables<'tcx> {\n             pat_binding_modes: ItemLocalMap(),\n             pat_adjustments: ItemLocalMap(),\n             upvar_capture_map: FxHashMap(),\n-            generator_interiors: ItemLocalMap(),\n             closure_kind_origins: ItemLocalMap(),\n             liberated_fn_sigs: ItemLocalMap(),\n             fru_field_types: ItemLocalMap(),\n@@ -657,24 +654,6 @@ impl<'tcx> TypeckTables<'tcx> {\n             data: &mut self.cast_kinds\n         }\n     }\n-\n-    pub fn generator_interiors(&self)\n-        -> LocalTableInContext<ty::GeneratorInterior<'tcx>>\n-    {\n-        LocalTableInContext {\n-            local_id_root: self.local_id_root,\n-            data: &self.generator_interiors,\n-        }\n-    }\n-\n-    pub fn generator_interiors_mut(&mut self)\n-        -> LocalTableInContextMut<ty::GeneratorInterior<'tcx>>\n-    {\n-        LocalTableInContextMut {\n-            local_id_root: self.local_id_root,\n-            data: &mut self.generator_interiors,\n-        }\n-    }\n }\n \n impl<'gcx> HashStable<StableHashingContext<'gcx>> for TypeckTables<'gcx> {\n@@ -699,7 +678,6 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for TypeckTables<'gcx> {\n             ref used_trait_imports,\n             tainted_by_errors,\n             ref free_region_map,\n-            ref generator_interiors,\n         } = *self;\n \n         hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n@@ -735,7 +713,6 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for TypeckTables<'gcx> {\n             liberated_fn_sigs.hash_stable(hcx, hasher);\n             fru_field_types.hash_stable(hcx, hasher);\n             cast_kinds.hash_stable(hcx, hasher);\n-            generator_interiors.hash_stable(hcx, hasher);\n             used_trait_imports.hash_stable(hcx, hasher);\n             tainted_by_errors.hash_stable(hcx, hasher);\n             free_region_map.hash_stable(hcx, hasher);"}, {"sha": "d46aa1c7aef2b4f2eef8e6a8b7d4b82a95449dc0", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22c0cbfa8675bf81091bd4bcf50b824fbffba108/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c0cbfa8675bf81091bd4bcf50b824fbffba108/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=22c0cbfa8675bf81091bd4bcf50b824fbffba108", "patch": "@@ -768,7 +768,11 @@ impl MirPass for StateTransform {\n         let hir_id = tcx.hir.node_to_hir_id(node_id);\n \n         // Get the interior types which typeck computed\n-        let interior = *tcx.typeck_tables_of(def_id).generator_interiors().get(hir_id).unwrap();\n+        let tables = tcx.typeck_tables_of(def_id);\n+        let interior = match tables.node_id_to_type(hir_id).sty {\n+            ty::TyGenerator(_, _, interior) => interior,\n+            ref t => bug!(\"type of generator not a generator: {:?}\", t),\n+        };\n \n         // The first argument is the generator type passed by value\n         let gen_ty = mir.local_decls.raw[1].ty;"}, {"sha": "b70c62cd73339dd043fa89d0c058859f3e843b17", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22c0cbfa8675bf81091bd4bcf50b824fbffba108/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c0cbfa8675bf81091bd4bcf50b824fbffba108/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=22c0cbfa8675bf81091bd4bcf50b824fbffba108", "patch": "@@ -1040,9 +1040,6 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n         let witness = fcx.next_ty_var(TypeVariableOrigin::MiscVariable(span));\n         fcx.deferred_generator_interiors.borrow_mut().push((body.id(), witness));\n         let interior = ty::GeneratorInterior::new(witness);\n-\n-        inherited.tables.borrow_mut().generator_interiors_mut().insert(fn_hir_id, interior);\n-\n         Some(GeneratorTypes { yield_ty: fcx.yield_ty.unwrap(), interior: interior })\n     } else {\n         None"}, {"sha": "d39918501217063dc08112990d39f2716fe5fbb9", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/22c0cbfa8675bf81091bd4bcf50b824fbffba108/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c0cbfa8675bf81091bd4bcf50b824fbffba108/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=22c0cbfa8675bf81091bd4bcf50b824fbffba108", "patch": "@@ -46,7 +46,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         wbcx.visit_anon_types();\n         wbcx.visit_cast_types();\n         wbcx.visit_free_region_map();\n-        wbcx.visit_generator_interiors();\n \n         let used_trait_imports = mem::replace(&mut self.tables.borrow_mut().used_trait_imports,\n                                               Rc::new(DefIdSet()));\n@@ -378,18 +377,6 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn visit_generator_interiors(&mut self) {\n-        let common_local_id_root = self.fcx.tables.borrow().local_id_root.unwrap();\n-        for (&id, interior) in self.fcx.tables.borrow().generator_interiors().iter() {\n-            let hir_id = hir::HirId {\n-                owner: common_local_id_root.index,\n-                local_id: id,\n-            };\n-            let interior = self.resolve(interior, &hir_id);\n-            self.tables.generator_interiors_mut().insert(hir_id, interior);\n-        }\n-    }\n-\n     fn visit_liberated_fn_sigs(&mut self) {\n         let fcx_tables = self.fcx.tables.borrow();\n         debug_assert_eq!(fcx_tables.local_id_root, self.tables.local_id_root);"}]}