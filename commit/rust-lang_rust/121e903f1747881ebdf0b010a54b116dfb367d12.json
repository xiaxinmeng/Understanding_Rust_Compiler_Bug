{"sha": "121e903f1747881ebdf0b010a54b116dfb367d12", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMWU5MDNmMTc0Nzg4MWViZGYwYjAxMGE1NGIxMTZkZmIzNjdkMTI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-10-11T02:51:27Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-10-26T22:44:42Z"}, "message": "Add possibility of deprecating attributes", "tree": {"sha": "fc80af2a11d41e7662644167c4703bb8f1dc9ef3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc80af2a11d41e7662644167c4703bb8f1dc9ef3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/121e903f1747881ebdf0b010a54b116dfb367d12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/121e903f1747881ebdf0b010a54b116dfb367d12", "html_url": "https://github.com/rust-lang/rust/commit/121e903f1747881ebdf0b010a54b116dfb367d12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/121e903f1747881ebdf0b010a54b116dfb367d12/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a25b65c1fbdd6101b77e8a8b06a5e42d775dc3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a25b65c1fbdd6101b77e8a8b06a5e42d775dc3f", "html_url": "https://github.com/rust-lang/rust/commit/3a25b65c1fbdd6101b77e8a8b06a5e42d775dc3f"}], "stats": {"total": 176, "additions": 129, "deletions": 47}, "files": [{"sha": "7eea6a2fcf2709cee8cb26d642d5e78254cf4af1", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/121e903f1747881ebdf0b010a54b116dfb367d12/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121e903f1747881ebdf0b010a54b116dfb367d12/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=121e903f1747881ebdf0b010a54b116dfb367d12", "patch": "@@ -314,5 +314,4 @@ pub enum LintSource {\n pub type LevelSource = (Level, LintSource);\n \n pub mod builtin;\n-\n mod context;"}, {"sha": "e31a4fe52a97acad6722e6c8175f85ff5375c92a", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/121e903f1747881ebdf0b010a54b116dfb367d12/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121e903f1747881ebdf0b010a54b116dfb367d12/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=121e903f1747881ebdf0b010a54b116dfb367d12", "patch": "@@ -39,11 +39,11 @@ use rustc::traits::{self, Reveal};\n use rustc::hir::map as hir_map;\n use util::nodemap::NodeSet;\n use lint::{Level, LateContext, LintContext, LintArray, Lint};\n-use lint::{LintPass, LateLintPass};\n+use lint::{LintPass, LateLintPass, EarlyLintPass, EarlyContext};\n \n use std::collections::HashSet;\n \n-use syntax::ast;\n+use syntax::{ast, feature_gate};\n use syntax::attr;\n use syntax_pos::Span;\n \n@@ -741,6 +741,40 @@ impl LateLintPass for Deprecated {\n     }\n }\n \n+declare_lint! {\n+    DEPRECATED_ATTR,\n+    Warn,\n+    \"detects use of deprecated attributes\"\n+}\n+\n+/// Checks for use of attributes which have been deprecated.\n+#[derive(Clone)]\n+pub struct DeprecatedAttr;\n+\n+impl LintPass for DeprecatedAttr {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(DEPRECATED_ATTR)\n+    }\n+}\n+\n+impl EarlyLintPass for DeprecatedAttr {\n+    fn check_attribute(&mut self, cx: &EarlyContext, attr: &ast::Attribute) {\n+        let name = &*attr.name();\n+        for &(n, _, ref g) in feature_gate::KNOWN_ATTRIBUTES {\n+            if n == name {\n+                if let &feature_gate::AttributeGate::Gated(feature_gate::Stability::Deprecated,\n+                                                           ref name,\n+                                                           ..) = g {\n+                    cx.span_lint(DEPRECATED,\n+                                 attr.span,\n+                                 &format!(\"use of deprecated attribute: {}\", name));\n+                }\n+                return;\n+            }\n+        }\n+    }\n+}\n+\n declare_lint! {\n     pub UNCONDITIONAL_RECURSION,\n     Warn,"}, {"sha": "c14496f31db5063703eb9de52a5bddc94a02e846", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/121e903f1747881ebdf0b010a54b116dfb367d12/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121e903f1747881ebdf0b010a54b116dfb367d12/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=121e903f1747881ebdf0b010a54b116dfb367d12", "patch": "@@ -103,6 +103,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n \n     add_early_builtin!(sess,\n                        UnusedParens,\n+                       DeprecatedAttr,\n                        );\n \n     add_builtin!(sess,"}, {"sha": "07b52d4c9aae2fa16c9c10e348c52dc680610ef1", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 92, "deletions": 44, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/121e903f1747881ebdf0b010a54b116dfb367d12/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121e903f1747881ebdf0b010a54b116dfb367d12/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=121e903f1747881ebdf0b010a54b116dfb367d12", "patch": "@@ -371,17 +371,23 @@ pub enum AttributeType {\n pub enum AttributeGate {\n     /// Is gated by a given feature gate, reason\n     /// and function to check if enabled\n-    Gated(&'static str, &'static str, fn(&Features) -> bool),\n+    Gated(Stability, &'static str, &'static str, fn(&Features) -> bool),\n \n     /// Ungated attribute, can be used on all release channels\n     Ungated,\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq)]\n+pub enum Stability {\n+    Unstable,\n+    Deprecated,\n+}\n+\n // fn() is not Debug\n impl ::std::fmt::Debug for AttributeGate {\n     fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n         match *self {\n-            Gated(ref name, ref expl, _) => write!(fmt, \"Gated({}, {})\", name, expl),\n+            Gated(_, ref name, ref expl, _) => write!(fmt, \"Gated({}, {})\", name, expl),\n             Ungated => write!(fmt, \"Ungated\")\n         }\n     }\n@@ -432,158 +438,190 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGat\n     (\"macro_escape\", Normal, Ungated),\n \n     // RFC #1445.\n-    (\"structural_match\", Whitelisted, Gated(\"structural_match\",\n+    (\"structural_match\", Whitelisted, Gated(Stability::Unstable,\n+                                            \"structural_match\",\n                                             \"the semantics of constant patterns is \\\n                                              not yet settled\",\n                                             cfg_fn!(structural_match))),\n \n     // Not used any more, but we can't feature gate it\n     (\"no_stack_check\", Normal, Ungated),\n \n-    (\"plugin\", CrateLevel, Gated(\"plugin\",\n+    (\"plugin\", CrateLevel, Gated(Stability::Unstable,\n+                                 \"plugin\",\n                                  \"compiler plugins are experimental \\\n                                   and possibly buggy\",\n                                  cfg_fn!(plugin))),\n \n     (\"no_std\", CrateLevel, Ungated),\n-    (\"no_core\", CrateLevel, Gated(\"no_core\",\n+    (\"no_core\", CrateLevel, Gated(Stability::Unstable,\n+                                  \"no_core\",\n                                   \"no_core is experimental\",\n                                   cfg_fn!(no_core))),\n-    (\"lang\", Normal, Gated(\"lang_items\",\n+    (\"lang\", Normal, Gated(Stability::Unstable,\n+                           \"lang_items\",\n                            \"language items are subject to change\",\n                            cfg_fn!(lang_items))),\n-    (\"linkage\", Whitelisted, Gated(\"linkage\",\n+    (\"linkage\", Whitelisted, Gated(Stability::Unstable,\n+                                   \"linkage\",\n                                    \"the `linkage` attribute is experimental \\\n                                     and not portable across platforms\",\n                                    cfg_fn!(linkage))),\n-    (\"thread_local\", Whitelisted, Gated(\"thread_local\",\n+    (\"thread_local\", Whitelisted, Gated(Stability::Unstable,\n+                                        \"thread_local\",\n                                         \"`#[thread_local]` is an experimental feature, and does \\\n                                          not currently handle destructors. There is no \\\n                                          corresponding `#[task_local]` mapping to the task \\\n                                          model\",\n                                         cfg_fn!(thread_local))),\n \n-    (\"rustc_on_unimplemented\", Normal, Gated(\"on_unimplemented\",\n+    (\"rustc_on_unimplemented\", Normal, Gated(Stability::Unstable,\n+                                             \"on_unimplemented\",\n                                              \"the `#[rustc_on_unimplemented]` attribute \\\n                                               is an experimental feature\",\n                                              cfg_fn!(on_unimplemented))),\n-    (\"allocator\", Whitelisted, Gated(\"allocator\",\n+    (\"allocator\", Whitelisted, Gated(Stability::Unstable,\n+                                     \"allocator\",\n                                      \"the `#[allocator]` attribute is an experimental feature\",\n                                      cfg_fn!(allocator))),\n-    (\"needs_allocator\", Normal, Gated(\"needs_allocator\",\n+    (\"needs_allocator\", Normal, Gated(Stability::Unstable,\n+                                      \"needs_allocator\",\n                                       \"the `#[needs_allocator]` \\\n                                        attribute is an experimental \\\n                                        feature\",\n                                       cfg_fn!(needs_allocator))),\n-    (\"panic_runtime\", Whitelisted, Gated(\"panic_runtime\",\n+    (\"panic_runtime\", Whitelisted, Gated(Stability::Unstable,\n+                                         \"panic_runtime\",\n                                          \"the `#[panic_runtime]` attribute is \\\n                                           an experimental feature\",\n                                          cfg_fn!(panic_runtime))),\n-    (\"needs_panic_runtime\", Whitelisted, Gated(\"needs_panic_runtime\",\n+    (\"needs_panic_runtime\", Whitelisted, Gated(Stability::Unstable,\n+                                               \"needs_panic_runtime\",\n                                                \"the `#[needs_panic_runtime]` \\\n                                                 attribute is an experimental \\\n                                                 feature\",\n                                                cfg_fn!(needs_panic_runtime))),\n-    (\"rustc_variance\", Normal, Gated(\"rustc_attrs\",\n+    (\"rustc_variance\", Normal, Gated(Stability::Unstable,\n+                                     \"rustc_attrs\",\n                                      \"the `#[rustc_variance]` attribute \\\n                                       is just used for rustc unit tests \\\n                                       and will never be stable\",\n                                      cfg_fn!(rustc_attrs))),\n-    (\"rustc_error\", Whitelisted, Gated(\"rustc_attrs\",\n+    (\"rustc_error\", Whitelisted, Gated(Stability::Unstable,\n+                                       \"rustc_attrs\",\n                                        \"the `#[rustc_error]` attribute \\\n                                         is just used for rustc unit tests \\\n                                         and will never be stable\",\n                                        cfg_fn!(rustc_attrs))),\n-    (\"rustc_if_this_changed\", Whitelisted, Gated(\"rustc_attrs\",\n+    (\"rustc_if_this_changed\", Whitelisted, Gated(Stability::Unstable,\n+                                                 \"rustc_attrs\",\n                                                  \"the `#[rustc_if_this_changed]` attribute \\\n                                                   is just used for rustc unit tests \\\n                                                   and will never be stable\",\n                                                  cfg_fn!(rustc_attrs))),\n-    (\"rustc_then_this_would_need\", Whitelisted, Gated(\"rustc_attrs\",\n+    (\"rustc_then_this_would_need\", Whitelisted, Gated(Stability::Unstable,\n+                                                      \"rustc_attrs\",\n                                                       \"the `#[rustc_if_this_changed]` attribute \\\n                                                        is just used for rustc unit tests \\\n                                                        and will never be stable\",\n                                                       cfg_fn!(rustc_attrs))),\n-    (\"rustc_dirty\", Whitelisted, Gated(\"rustc_attrs\",\n+    (\"rustc_dirty\", Whitelisted, Gated(Stability::Unstable,\n+                                       \"rustc_attrs\",\n                                        \"the `#[rustc_dirty]` attribute \\\n                                         is just used for rustc unit tests \\\n                                         and will never be stable\",\n                                        cfg_fn!(rustc_attrs))),\n-    (\"rustc_clean\", Whitelisted, Gated(\"rustc_attrs\",\n+    (\"rustc_clean\", Whitelisted, Gated(Stability::Unstable,\n+                                       \"rustc_attrs\",\n                                        \"the `#[rustc_clean]` attribute \\\n                                         is just used for rustc unit tests \\\n                                         and will never be stable\",\n                                        cfg_fn!(rustc_attrs))),\n-    (\"rustc_metadata_dirty\", Whitelisted, Gated(\"rustc_attrs\",\n+    (\"rustc_metadata_dirty\", Whitelisted, Gated(Stability::Unstable,\n+                                                \"rustc_attrs\",\n                                                 \"the `#[rustc_metadata_dirty]` attribute \\\n                                                  is just used for rustc unit tests \\\n                                                  and will never be stable\",\n                                                  cfg_fn!(rustc_attrs))),\n-    (\"rustc_metadata_clean\", Whitelisted, Gated(\"rustc_attrs\",\n+    (\"rustc_metadata_clean\", Whitelisted, Gated(Stability::Unstable,\n+                                                \"rustc_attrs\",\n                                                 \"the `#[rustc_metadata_clean]` attribute \\\n                                                  is just used for rustc unit tests \\\n                                                  and will never be stable\",\n                                                  cfg_fn!(rustc_attrs))),\n-    (\"rustc_partition_reused\", Whitelisted, Gated(\"rustc_attrs\",\n+    (\"rustc_partition_reused\", Whitelisted, Gated(Stability::Unstable,\n+                                                  \"rustc_attrs\",\n                                                   \"this attribute \\\n                                                    is just used for rustc unit tests \\\n                                                    and will never be stable\",\n                                                   cfg_fn!(rustc_attrs))),\n-    (\"rustc_partition_translated\", Whitelisted, Gated(\"rustc_attrs\",\n+    (\"rustc_partition_translated\", Whitelisted, Gated(Stability::Unstable,\n+                                                      \"rustc_attrs\",\n                                                       \"this attribute \\\n                                                        is just used for rustc unit tests \\\n                                                        and will never be stable\",\n                                                       cfg_fn!(rustc_attrs))),\n-    (\"rustc_symbol_name\", Whitelisted, Gated(\"rustc_attrs\",\n+    (\"rustc_symbol_name\", Whitelisted, Gated(Stability::Unstable,\n+                                             \"rustc_attrs\",\n                                              \"internal rustc attributes will never be stable\",\n                                              cfg_fn!(rustc_attrs))),\n-    (\"rustc_item_path\", Whitelisted, Gated(\"rustc_attrs\",\n+    (\"rustc_item_path\", Whitelisted, Gated(Stability::Unstable,\n+                                           \"rustc_attrs\",\n                                            \"internal rustc attributes will never be stable\",\n                                            cfg_fn!(rustc_attrs))),\n-    (\"rustc_move_fragments\", Normal, Gated(\"rustc_attrs\",\n+    (\"rustc_move_fragments\", Normal, Gated(Stability::Unstable,\n+                                           \"rustc_attrs\",\n                                            \"the `#[rustc_move_fragments]` attribute \\\n                                             is just used for rustc unit tests \\\n                                             and will never be stable\",\n                                            cfg_fn!(rustc_attrs))),\n-    (\"rustc_mir\", Whitelisted, Gated(\"rustc_attrs\",\n+    (\"rustc_mir\", Whitelisted, Gated(Stability::Unstable,\n+                                     \"rustc_attrs\",\n                                      \"the `#[rustc_mir]` attribute \\\n                                       is just used for rustc unit tests \\\n                                       and will never be stable\",\n                                      cfg_fn!(rustc_attrs))),\n-    (\"rustc_inherit_overflow_checks\", Whitelisted, Gated(\"rustc_attrs\",\n+    (\"rustc_inherit_overflow_checks\", Whitelisted, Gated(Stability::Unstable,\n+                                                         \"rustc_attrs\",\n                                                          \"the `#[rustc_inherit_overflow_checks]` \\\n                                                           attribute is just used to control \\\n                                                           overflow checking behavior of several \\\n                                                           libcore functions that are inlined \\\n                                                           across crates and will never be stable\",\n                                                           cfg_fn!(rustc_attrs))),\n-    (\"compiler_builtins\", Whitelisted, Gated(\"compiler_builtins\",\n+    (\"compiler_builtins\", Whitelisted, Gated(Stability::Unstable,\n+                                             \"compiler_builtins\",\n                                              \"the `#[compiler_builtins]` attribute is used to \\\n                                               identify the `compiler_builtins` crate which \\\n                                               contains compiler-rt intrinsics and will never be \\\n                                               stable\",\n                                           cfg_fn!(compiler_builtins))),\n \n-    (\"allow_internal_unstable\", Normal, Gated(\"allow_internal_unstable\",\n+    (\"allow_internal_unstable\", Normal, Gated(Stability::Unstable,\n+                                              \"allow_internal_unstable\",\n                                               EXPLAIN_ALLOW_INTERNAL_UNSTABLE,\n                                               cfg_fn!(allow_internal_unstable))),\n \n-    (\"fundamental\", Whitelisted, Gated(\"fundamental\",\n+    (\"fundamental\", Whitelisted, Gated(Stability::Unstable,\n+                                       \"fundamental\",\n                                        \"the `#[fundamental]` attribute \\\n                                         is an experimental feature\",\n                                        cfg_fn!(fundamental))),\n \n-    (\"linked_from\", Normal, Gated(\"linked_from\",\n+    (\"linked_from\", Normal, Gated(Stability::Unstable,\n+                                  \"linked_from\",\n                                   \"the `#[linked_from]` attribute \\\n                                    is an experimental feature\",\n                                   cfg_fn!(linked_from))),\n \n-    (\"proc_macro_derive\", Normal, Gated(\"proc_macro\",\n+    (\"proc_macro_derive\", Normal, Gated(Stability::Unstable,\n+                                        \"proc_macro\",\n                                         \"the `#[proc_macro_derive]` attribute \\\n                                          is an experimental feature\",\n                                         cfg_fn!(proc_macro))),\n \n-    (\"rustc_copy_clone_marker\", Whitelisted, Gated(\"rustc_attrs\",\n+    (\"rustc_copy_clone_marker\", Whitelisted, Gated(Stability::Unstable,\n+                                                   \"rustc_attrs\",\n                                                    \"internal implementation detail\",\n                                                    cfg_fn!(rustc_attrs))),\n \n@@ -593,7 +631,8 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGat\n     // FIXME: #14406 these are processed in trans, which happens after the\n     // lint pass\n     (\"cold\", Whitelisted, Ungated),\n-    (\"naked\", Whitelisted, Gated(\"naked_functions\",\n+    (\"naked\", Whitelisted, Gated(Stability::Unstable,\n+                                 \"naked_functions\",\n                                  \"the `#[naked]` attribute \\\n                                   is an experimental feature\",\n                                  cfg_fn!(naked_functions))),\n@@ -604,31 +643,38 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGat\n     (\"link_section\", Whitelisted, Ungated),\n     (\"no_builtins\", Whitelisted, Ungated),\n     (\"no_mangle\", Whitelisted, Ungated),\n-    (\"no_debug\", Whitelisted, Gated(\"no_debug\",\n+    (\"no_debug\", Whitelisted, Gated(Stability::Unstable,\n+                                    \"no_debug\",\n                                     \"the `#[no_debug]` attribute \\\n                                      is an experimental feature\",\n                                     cfg_fn!(no_debug))),\n-    (\"omit_gdb_pretty_printer_section\", Whitelisted, Gated(\"omit_gdb_pretty_printer_section\",\n+    (\"omit_gdb_pretty_printer_section\", Whitelisted, Gated(Stability::Unstable,\n+                                                       \"omit_gdb_pretty_printer_section\",\n                                                        \"the `#[omit_gdb_pretty_printer_section]` \\\n                                                         attribute is just used for the Rust test \\\n                                                         suite\",\n                                                        cfg_fn!(omit_gdb_pretty_printer_section))),\n     (\"unsafe_destructor_blind_to_params\",\n      Normal,\n-     Gated(\"dropck_parametricity\",\n+     Gated(Stability::Unstable,\n+           \"dropck_parametricity\",\n            \"unsafe_destructor_blind_to_params has unstable semantics \\\n             and may be removed in the future\",\n            cfg_fn!(dropck_parametricity))),\n     (\"may_dangle\",\n      Normal,\n-     Gated(\"dropck_eyepatch\",\n+     Gated(Stability::Unstable,\n+           \"dropck_eyepatch\",\n            \"may_dangle has unstable semantics and may be removed in the future\",\n            cfg_fn!(dropck_eyepatch))),\n-    (\"unwind\", Whitelisted, Gated(\"unwind_attributes\", \"#[unwind] is experimental\",\n+    (\"unwind\", Whitelisted, Gated(Stability::Unstable,\n+                                  \"unwind_attributes\",\n+                                  \"#[unwind] is experimental\",\n                                   cfg_fn!(unwind_attributes))),\n \n     // used in resolve\n-    (\"prelude_import\", Whitelisted, Gated(\"prelude_import\",\n+    (\"prelude_import\", Whitelisted, Gated(Stability::Unstable,\n+                                          \"prelude_import\",\n                                           \"`#[prelude_import]` is for use by rustc only\",\n                                           cfg_fn!(prelude_import))),\n \n@@ -640,10 +686,12 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGat\n     (\"unstable\", Whitelisted, Ungated),\n     (\"deprecated\", Normal, Ungated),\n \n-    (\"rustc_paren_sugar\", Normal, Gated(\"unboxed_closures\",\n+    (\"rustc_paren_sugar\", Normal, Gated(Stability::Unstable,\n+                                        \"unboxed_closures\",\n                                         \"unboxed_closures are still evolving\",\n                                         cfg_fn!(unboxed_closures))),\n-    (\"rustc_reflect_like\", Whitelisted, Gated(\"reflect\",\n+    (\"rustc_reflect_like\", Whitelisted, Gated(Stability::Unstable,\n+                                              \"reflect\",\n                                               \"defining reflective traits is still evolving\",\n                                               cfg_fn!(reflect))),\n \n@@ -726,7 +774,7 @@ impl<'a> Context<'a> {\n         let name = &*attr.name();\n         for &(n, ty, ref gateage) in KNOWN_ATTRIBUTES {\n             if n == name {\n-                if let &Gated(ref name, ref desc, ref has_feature) = gateage {\n+                if let &Gated(_, ref name, ref desc, ref has_feature) = gateage {\n                     gate_feature_fn!(self, has_feature, attr.span, name, desc);\n                 }\n                 debug!(\"check_attribute: {:?} is known, {:?}, {:?}\", name, ty, gateage);"}]}