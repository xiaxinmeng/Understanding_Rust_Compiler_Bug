{"sha": "d1d7fb1ae53a02f5073a7cf0ab1497aaa9617ebe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZDdmYjFhZTUzYTAyZjUwNzNhN2NmMGFiMTQ5N2FhYTk2MTdlYmU=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-04-18T18:51:42Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-04-18T19:09:14Z"}, "message": "Only generate dummy assign when instrumenting coverage\n\nAnd make the LocalDecl internal, to avoid needing to declare storage.\n(For multiple `continue` stateuemtns, it must also be mutable.)", "tree": {"sha": "303b7985d5ad4dec212e120fe13750a1900780fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/303b7985d5ad4dec212e120fe13750a1900780fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1d7fb1ae53a02f5073a7cf0ab1497aaa9617ebe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1d7fb1ae53a02f5073a7cf0ab1497aaa9617ebe", "html_url": "https://github.com/rust-lang/rust/commit/d1d7fb1ae53a02f5073a7cf0ab1497aaa9617ebe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1d7fb1ae53a02f5073a7cf0ab1497aaa9617ebe/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "448e52d97c9b76600fd1ec29c8159391329e48ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/448e52d97c9b76600fd1ec29c8159391329e48ab", "html_url": "https://github.com/rust-lang/rust/commit/448e52d97c9b76600fd1ec29c8159391329e48ab"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "41fc925c0494ed850ee21c84354b1a0b038e8f1f", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d1d7fb1ae53a02f5073a7cf0ab1497aaa9617ebe/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d7fb1ae53a02f5073a7cf0ab1497aaa9617ebe/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=d1d7fb1ae53a02f5073a7cf0ab1497aaa9617ebe", "patch": "@@ -618,16 +618,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n         } else {\n             assert!(value.is_none(), \"`return` and `break` should have a destination\");\n-            // `continue` statements generate no MIR statement with the `continue` statement's Span,\n-            // and the `InstrumentCoverage` statement will have no way to generate a coverage\n-            // code region for the `continue` statement, unless we add a dummy `Assign` here:\n-            let mut local_decl = LocalDecl::new(self.tcx.mk_unit(), span);\n-            local_decl = local_decl.immutable();\n-            let temp = self.local_decls.push(local_decl);\n-            let temp_place = Place::from(temp);\n-            self.cfg.push(block, Statement { source_info, kind: StatementKind::StorageLive(temp) });\n-            self.cfg.push_assign_unit(block, source_info, temp_place, self.tcx);\n-            self.cfg.push(block, Statement { source_info, kind: StatementKind::StorageDead(temp) });\n+            if self.tcx.sess.instrument_coverage() {\n+                // Unlike `break` and `return`, which push an `Assign` statement to MIR, from which\n+                // a Coverage code region can be generated, `continue` needs no `Assign`; but\n+                // without one, the `InstrumentCoverage` MIR pass cannot generate a code region for\n+                // `continue`. Coverage will be missing unless we add a dummy `Assign` to MIR.\n+                self.add_dummy_assignment(&span, block, source_info);\n+            }\n         }\n \n         let region_scope = self.scopes.breakable_scopes[break_index].region_scope;\n@@ -653,6 +650,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.cfg.start_new_block().unit()\n     }\n \n+    // Add a dummy `Assign` statement to the CFG, with the span for the source code's `continue`\n+    // statement.\n+    fn add_dummy_assignment(&mut self, span: &Span, block: BasicBlock, source_info: SourceInfo) {\n+        let local_decl = LocalDecl::new(self.tcx.mk_unit(), *span).internal();\n+        let temp_place = Place::from(self.local_decls.push(local_decl));\n+        self.cfg.push_assign_unit(block, source_info, temp_place, self.tcx);\n+    }\n+\n     crate fn exit_top_scope(\n         &mut self,\n         mut block: BasicBlock,"}, {"sha": "99c7ac8d5b708c4e7e076ec359e6f8699fa0dde2", "filename": "src/test/mir-opt/loop_test.main.SimplifyCfg-promote-consts.after.mir", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d7fb1ae53a02f5073a7cf0ab1497aaa9617ebe/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d1d7fb1ae53a02f5073a7cf0ab1497aaa9617ebe/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir?ref=d1d7fb1ae53a02f5073a7cf0ab1497aaa9617ebe", "patch": "@@ -8,7 +8,6 @@ fn main() -> () {\n     let mut _4: !;                       // in scope 0 at $DIR/loop_test.rs:13:5: 16:6\n     let mut _5: ();                      // in scope 0 at $DIR/loop_test.rs:6:1: 17:2\n     let _6: i32;                         // in scope 0 at $DIR/loop_test.rs:14:13: 14:14\n-    let _7: ();                          // in scope 0 at $DIR/loop_test.rs:15:9: 15:17\n     scope 1 {\n         debug x => _6;                   // in scope 1 at $DIR/loop_test.rs:14:13: 14:14\n     }\n@@ -43,9 +42,6 @@ fn main() -> () {\n         StorageLive(_6);                 // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n         _6 = const 1_i32;                // scope 0 at $DIR/loop_test.rs:14:17: 14:18\n         FakeRead(ForLet(None), _6);      // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n-        StorageLive(_7);                 // scope 1 at $DIR/loop_test.rs:15:9: 15:17\n-        _7 = const ();                   // scope 1 at $DIR/loop_test.rs:15:9: 15:17\n-        StorageDead(_7);                 // scope 1 at $DIR/loop_test.rs:15:9: 15:17\n         StorageDead(_6);                 // scope 0 at $DIR/loop_test.rs:16:5: 16:6\n         goto -> bb3;                     // scope 0 at $DIR/loop_test.rs:1:1: 1:1\n     }"}]}