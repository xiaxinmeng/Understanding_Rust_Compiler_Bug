{"sha": "111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMTg5MWRjMmRjMWQyYzdlYTg3MTQ0ZThlM2RkZWZlMjNmYzdiNmQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-20T15:00:01Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-20T15:41:23Z"}, "message": "Move constants to new ID\n\nThis allows us to get rid of trait item index", "tree": {"sha": "7e96d773620a3b03254d00386711cdc7c909e3ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e96d773620a3b03254d00386711cdc7c909e3ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d", "html_url": "https://github.com/rust-lang/rust/commit/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee95a35664e6fe9153f6324cfc57872ca365887c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee95a35664e6fe9153f6324cfc57872ca365887c", "html_url": "https://github.com/rust-lang/rust/commit/ee95a35664e6fe9153f6324cfc57872ca365887c"}], "stats": {"total": 208, "additions": 119, "deletions": 89}, "files": [{"sha": "920899dceb45117dfb58e4ef2c05a8c262a0b4a4", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d", "patch": "@@ -729,7 +729,7 @@ pub struct Const {\n \n impl Const {\n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        Module { id: self.id.module(db) }\n+        Module { id: self.id.lookup(db).module(db) }\n     }\n \n     pub fn krate(self, db: &impl DefDatabase) -> Option<Crate> {\n@@ -748,22 +748,27 @@ impl Const {\n         db.infer(self.into())\n     }\n \n-    /// The containing impl block, if this is a method.\n+    /// The containing impl block, if this is a type alias.\n     pub fn impl_block(self, db: &impl DefDatabase) -> Option<ImplBlock> {\n-        ImplBlock::containing(db, self.into())\n+        match self.container(db) {\n+            Some(Container::ImplBlock(it)) => Some(it),\n+            _ => None,\n+        }\n     }\n \n+    /// The containing trait, if this is a trait type alias definition.\n     pub fn parent_trait(self, db: &impl DefDatabase) -> Option<Trait> {\n-        db.trait_items_index(self.module(db).id).get_parent_trait(self.id.into()).map(Trait::from)\n+        match self.container(db) {\n+            Some(Container::Trait(it)) => Some(it),\n+            _ => None,\n+        }\n     }\n \n     pub fn container(self, db: &impl DefDatabase) -> Option<Container> {\n-        if let Some(impl_block) = self.impl_block(db) {\n-            Some(impl_block.into())\n-        } else if let Some(trait_) = self.parent_trait(db) {\n-            Some(trait_.into())\n-        } else {\n-            None\n+        match self.id.lookup(db).container {\n+            ContainerId::TraitId(it) => Some(Container::Trait(it.into())),\n+            ContainerId::ImplId(it) => Some(Container::ImplBlock(it.into())),\n+            ContainerId::ModuleId(_) => None,\n         }\n     }\n "}, {"sha": "354d2c98f2c9cd08f56305449eab507f286e293f", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d", "patch": "@@ -120,7 +120,7 @@ impl HasSource for Function {\n impl HasSource for Const {\n     type Ast = ast::ConstDef;\n     fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::ConstDef> {\n-        self.id.source(db)\n+        self.id.lookup(db).source(db)\n     }\n }\n impl HasSource for Static {"}, {"sha": "5bb7961b3916bfe00b982c41ef4acef667146d72", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d", "patch": "@@ -26,7 +26,6 @@ pub use hir_def::db::{\n     BodyQuery, BodyWithSourceMapQuery, CrateDefMapQuery, DefDatabase2, DefDatabase2Storage,\n     EnumDataQuery, ExprScopesQuery, ImplDataQuery, InternDatabase, InternDatabaseStorage,\n     RawItemsQuery, RawItemsWithSourceMapQuery, StructDataQuery, TraitDataQuery,\n-    TraitItemsIndexQuery,\n };\n pub use hir_expand::db::{\n     AstDatabase, AstDatabaseStorage, AstIdMapQuery, MacroArgQuery, MacroDefQuery, MacroExpandQuery,"}, {"sha": "b86307c58acfc3e2a1949abbf0106dbc1bce1d6d", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d", "patch": "@@ -79,8 +79,27 @@ impl FromSource for Function {\n impl FromSource for Const {\n     type Ast = ast::ConstDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self> {\n-        let id = from_source(db, src)?;\n-        Some(Const { id })\n+        let items = match Container::find(db, src.as_ref().map(|it| it.syntax()))? {\n+            Container::Trait(it) => it.items(db),\n+            Container::ImplBlock(it) => it.items(db),\n+            Container::Module(m) => {\n+                return m\n+                    .declarations(db)\n+                    .into_iter()\n+                    .filter_map(|it| match it {\n+                        ModuleDef::Const(it) => Some(it),\n+                        _ => None,\n+                    })\n+                    .find(|it| same_source(&it.source(db), &src))\n+            }\n+        };\n+        items\n+            .into_iter()\n+            .filter_map(|it| match it {\n+                AssocItem::Const(it) => Some(it),\n+                _ => None,\n+            })\n+            .find(|it| same_source(&it.source(db), &src))\n     }\n }\n impl FromSource for Static {\n@@ -292,7 +311,7 @@ impl Container {\n /// equal if they point to exactly the same object.\n ///\n /// In general, we do not guarantee that we have exactly one instance of a\n-/// syntax tree for each file. We probably should add such guanratree, but, for\n+/// syntax tree for each file. We probably should add such guarantee, but, for\n /// the time being, we will use identity-less AstPtr comparison.\n fn same_source<N: AstNode>(s1: &Source<N>, s2: &Source<N>) -> bool {\n     s1.as_ref().map(AstPtr::new) == s2.as_ref().map(AstPtr::new)"}, {"sha": "0513f28a9613ae843b5545b0c0ce59062949cef1", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d", "patch": "@@ -19,14 +19,6 @@ impl HasSource for ImplBlock {\n }\n \n impl ImplBlock {\n-    pub(crate) fn containing(db: &impl DefDatabase, item: AssocItem) -> Option<ImplBlock> {\n-        let module = item.module(db);\n-        let crate_def_map = db.crate_def_map(module.id.krate);\n-        crate_def_map[module.id.module_id].impls.iter().copied().map(ImplBlock::from).find(|it| {\n-            db.impl_data(it.id).items().iter().copied().map(AssocItem::from).any(|it| it == item)\n-        })\n-    }\n-\n     pub fn target_trait(&self, db: &impl DefDatabase) -> Option<TypeRef> {\n         db.impl_data(self.id).target_trait().cloned()\n     }"}, {"sha": "fd9994098b99124ec41234d3cd1af058ebfc1129", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d", "patch": "@@ -71,7 +71,7 @@ fn def_with_body_from_child_node(\n         match_ast! {\n             match node {\n                 ast::FnDef(def)  => { return Function::from_source(db, child.with_value(def)).map(DefWithBody::from); },\n-                ast::ConstDef(def) => { Some(Const { id: ctx.to_def(&def) }.into()) },\n+                ast::ConstDef(def) => { return Const::from_source(db, child.with_value(def)).map(DefWithBody::from); },\n                 ast::StaticDef(def) => { Some(Static { id: ctx.to_def(&def) }.into()) },\n                 _ => { None },\n             }\n@@ -428,6 +428,11 @@ impl SourceAnalyzer {\n     pub(crate) fn inference_result(&self) -> Arc<crate::ty::InferenceResult> {\n         self.infer.clone().unwrap()\n     }\n+\n+    #[cfg(test)]\n+    pub(crate) fn analyzed_declaration(&self) -> Option<DefWithBody> {\n+        self.body_owner\n+    }\n }\n \n fn scope_for("}, {"sha": "36ece723f237adeec3b9bac5fc39972ddac49ade", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d", "patch": "@@ -3,15 +3,16 @@\n \n mod autoderef;\n pub(crate) mod primitive;\n-#[cfg(test)]\n-mod tests;\n pub(crate) mod traits;\n pub(crate) mod method_resolution;\n mod op;\n mod lower;\n mod infer;\n pub(crate) mod display;\n \n+#[cfg(test)]\n+mod tests;\n+\n use std::ops::Deref;\n use std::sync::Arc;\n use std::{fmt, iter, mem};"}, {"sha": "74c12a0a2d5a53cfe138c7386ba184cd2e0d60f1", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d", "patch": "@@ -11,6 +11,7 @@ use ra_syntax::{\n     ast::{self, AstNode},\n     SyntaxKind::*,\n };\n+use rustc_hash::FxHashSet;\n use test_utils::covers;\n \n use crate::{\n@@ -2518,7 +2519,6 @@ fn test() {\n     [167; 179) 'GLOBAL_CONST': u32\n     [189; 191) 'id': u32\n     [194; 210) 'Foo::A..._CONST': u32\n-    [126; 128) '99': u32\n     \"###\n     );\n }\n@@ -4742,10 +4742,13 @@ fn infer(content: &str) -> String {\n         }\n     };\n \n+    let mut analyzed = FxHashSet::default();\n     for node in source_file.syntax().descendants() {\n         if node.kind() == FN_DEF || node.kind() == CONST_DEF || node.kind() == STATIC_DEF {\n             let analyzer = SourceAnalyzer::new(&db, Source::new(file_id.into(), &node), None);\n-            infer_def(analyzer.inference_result(), analyzer.body_source_map());\n+            if analyzed.insert(analyzer.analyzed_declaration()) {\n+                infer_def(analyzer.inference_result(), analyzer.body_source_map());\n+            }\n         }\n     }\n "}, {"sha": "dfb79a30acaee6574c496ae5dc07cfe84878201c", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d", "patch": "@@ -155,6 +155,7 @@ impl Body {\n                 (src.file_id, f.module(db), src.value.body().map(ast::Expr::from))\n             }\n             DefWithBodyId::ConstId(c) => {\n+                let c = c.lookup(db);\n                 let src = c.source(db);\n                 (src.file_id, c.module(db), src.value.body())\n             }"}, {"sha": "c6cd4369b2d2db5fcf42ba6fce5dfd5cc200745c", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d", "patch": "@@ -13,8 +13,8 @@ use crate::{\n         raw::{ImportSourceMap, RawItems},\n         CrateDefMap,\n     },\n-    traits::{TraitData, TraitItemsIndex},\n-    DefWithBodyId, EnumId, ImplId, ItemLoc, ModuleId, StructOrUnionId, TraitId,\n+    traits::TraitData,\n+    DefWithBodyId, EnumId, ImplId, ItemLoc, StructOrUnionId, TraitId,\n };\n \n #[salsa::query_group(InternDatabaseStorage)]\n@@ -26,7 +26,7 @@ pub trait InternDatabase: SourceDatabase {\n     #[salsa::interned]\n     fn intern_enum(&self, loc: ItemLoc<ast::EnumDef>) -> crate::EnumId;\n     #[salsa::interned]\n-    fn intern_const(&self, loc: ItemLoc<ast::ConstDef>) -> crate::ConstId;\n+    fn intern_const(&self, loc: crate::ConstLoc) -> crate::ConstId;\n     #[salsa::interned]\n     fn intern_static(&self, loc: ItemLoc<ast::StaticDef>) -> crate::StaticId;\n     #[salsa::interned]\n@@ -63,9 +63,6 @@ pub trait DefDatabase2: InternDatabase + AstDatabase {\n     #[salsa::invoke(TraitData::trait_data_query)]\n     fn trait_data(&self, e: TraitId) -> Arc<TraitData>;\n \n-    #[salsa::invoke(TraitItemsIndex::trait_items_index)]\n-    fn trait_items_index(&self, module: ModuleId) -> TraitItemsIndex;\n-\n     #[salsa::invoke(Body::body_with_source_map_query)]\n     fn body_with_source_map(&self, def: DefWithBodyId) -> (Arc<Body>, Arc<BodySourceMap>);\n "}, {"sha": "750a869f256fa9cc02e5669ec5094d91bb7a716e", "filename": "crates/ra_hir_def/src/impls.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_hir_def%2Fsrc%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_hir_def%2Fsrc%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fimpls.rs?ref=111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d", "patch": "@@ -9,8 +9,8 @@ use hir_expand::AstId;\n use ra_syntax::ast;\n \n use crate::{\n-    db::DefDatabase2, type_ref::TypeRef, AssocItemId, AstItemDef, ConstId, ContainerId,\n-    FunctionLoc, ImplId, Intern, LocationCtx, TypeAliasLoc,\n+    db::DefDatabase2, type_ref::TypeRef, AssocItemId, AstItemDef, ConstLoc, ContainerId,\n+    FunctionLoc, ImplId, Intern, TypeAliasLoc,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -31,7 +31,6 @@ impl ImplData {\n         let negative = src.value.is_negative();\n \n         let items = if let Some(item_list) = src.value.item_list() {\n-            let ctx = LocationCtx::new(db, id.module(db), src.file_id);\n             item_list\n                 .impl_items()\n                 .map(|item_node| match item_node {\n@@ -44,7 +43,12 @@ impl ImplData {\n                         def.into()\n                     }\n                     ast::ImplItem::ConstDef(it) => {\n-                        ConstId::from_ast_id(ctx, items.ast_id(&it)).into()\n+                        let def = ConstLoc {\n+                            container: ContainerId::ImplId(id),\n+                            ast_id: AstId::new(src.file_id, items.ast_id(&it)),\n+                        }\n+                        .intern(db);\n+                        def.into()\n                     }\n                     ast::ImplItem::TypeAliasDef(it) => {\n                         let def = TypeAliasLoc {"}, {"sha": "0af41de879b09ee449709fd31ed60545949728f2", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d", "patch": "@@ -289,12 +289,23 @@ impl_arena_id!(LocalStructFieldId);\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ConstId(salsa::InternId);\n impl_intern_key!(ConstId);\n-impl AstItemDef<ast::ConstDef> for ConstId {\n-    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::ConstDef>) -> Self {\n-        db.intern_const(loc)\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct ConstLoc {\n+    pub container: ContainerId,\n+    pub ast_id: AstId<ast::ConstDef>,\n+}\n+\n+impl Intern for ConstLoc {\n+    type ID = ConstId;\n+    fn intern(self, db: &impl db::DefDatabase2) -> ConstId {\n+        db.intern_const(self)\n     }\n-    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::ConstDef> {\n-        db.lookup_intern_const(self)\n+}\n+\n+impl Lookup for ConstId {\n+    type Data = ConstLoc;\n+    fn lookup(&self, db: &impl db::DefDatabase2) -> ConstLoc {\n+        db.lookup_intern_const(*self)\n     }\n }\n \n@@ -498,6 +509,16 @@ impl HasModule for TypeAliasLoc {\n     }\n }\n \n+impl HasModule for ConstLoc {\n+    fn module(&self, db: &impl db::DefDatabase2) -> ModuleId {\n+        match self.container {\n+            ContainerId::ModuleId(it) => it,\n+            ContainerId::ImplId(it) => it.module(db),\n+            ContainerId::TraitId(it) => it.module(db),\n+        }\n+    }\n+}\n+\n pub trait HasSource {\n     type Value;\n     fn source(&self, db: &impl db::DefDatabase2) -> Source<Self::Value>;\n@@ -520,3 +541,12 @@ impl HasSource for TypeAliasLoc {\n         Source::new(self.ast_id.file_id(), node)\n     }\n }\n+\n+impl HasSource for ConstLoc {\n+    type Value = ast::ConstDef;\n+\n+    fn source(&self, db: &impl db::DefDatabase2) -> Source<ast::ConstDef> {\n+        let node = self.ast_id.to_node(db);\n+        Source::new(self.ast_id.file_id(), node)\n+    }\n+}"}, {"sha": "aae3dcadf7befd73871dfcc0e080773b60031bcb", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d", "patch": "@@ -19,7 +19,7 @@ use crate::{\n         per_ns::PerNs, raw, CrateDefMap, ModuleData, Resolution, ResolveMode,\n     },\n     path::{Path, PathKind},\n-    AdtId, AstId, AstItemDef, ConstId, ContainerId, CrateModuleId, EnumId, EnumVariantId,\n+    AdtId, AstId, AstItemDef, ConstLoc, ContainerId, CrateModuleId, EnumId, EnumVariantId,\n     FunctionLoc, ImplId, Intern, LocationCtx, ModuleDefId, ModuleId, StaticId, StructId,\n     StructOrUnionId, TraitId, TypeAliasLoc, UnionId,\n };\n@@ -692,7 +692,15 @@ where\n                 PerNs::both(u, u)\n             }\n             raw::DefKind::Enum(ast_id) => PerNs::types(EnumId::from_ast_id(ctx, ast_id).into()),\n-            raw::DefKind::Const(ast_id) => PerNs::values(ConstId::from_ast_id(ctx, ast_id).into()),\n+            raw::DefKind::Const(ast_id) => {\n+                let def = ConstLoc {\n+                    container: ContainerId::ModuleId(module),\n+                    ast_id: AstId::new(self.file_id, ast_id),\n+                }\n+                .intern(self.def_collector.db);\n+\n+                PerNs::values(def.into())\n+            }\n             raw::DefKind::Static(ast_id) => {\n                 PerNs::values(StaticId::from_ast_id(ctx, ast_id).into())\n             }"}, {"sha": "877d73d666d7b5fbcc405a18c3beb431400485b3", "filename": "crates/ra_hir_def/src/traits.rs", "status": "modified", "additions": 8, "deletions": 37, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_hir_def%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_hir_def%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftraits.rs?ref=111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d", "patch": "@@ -8,11 +8,10 @@ use hir_expand::{\n };\n \n use ra_syntax::ast::{self, NameOwner};\n-use rustc_hash::FxHashMap;\n \n use crate::{\n-    db::DefDatabase2, AssocItemId, AstItemDef, ConstId, ContainerId, FunctionLoc, Intern,\n-    LocationCtx, ModuleDefId, ModuleId, TraitId, TypeAliasLoc,\n+    db::DefDatabase2, AssocItemId, AstItemDef, ConstLoc, ContainerId, FunctionLoc, Intern, TraitId,\n+    TypeAliasLoc,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -26,8 +25,6 @@ impl TraitData {\n     pub(crate) fn trait_data_query(db: &impl DefDatabase2, tr: TraitId) -> Arc<TraitData> {\n         let src = tr.source(db);\n         let name = src.value.name().map(|n| n.as_name());\n-        let module = tr.module(db);\n-        let ctx = LocationCtx::new(db, module, src.file_id);\n         let auto = src.value.is_auto();\n         let ast_id_map = db.ast_id_map(src.file_id);\n         let items = if let Some(item_list) = src.value.item_list() {\n@@ -40,7 +37,12 @@ impl TraitData {\n                     }\n                     .intern(db)\n                     .into(),\n-                    ast::ImplItem::ConstDef(it) => ConstId::from_ast(ctx, &it).into(),\n+                    ast::ImplItem::ConstDef(it) => ConstLoc {\n+                        container: ContainerId::TraitId(tr),\n+                        ast_id: AstId::new(src.file_id, ast_id_map.ast_id(&it)),\n+                    }\n+                    .intern(db)\n+                    .into(),\n                     ast::ImplItem::TypeAliasDef(it) => TypeAliasLoc {\n                         container: ContainerId::TraitId(tr),\n                         ast_id: AstId::new(src.file_id, ast_id_map.ast_id(&it)),\n@@ -55,34 +57,3 @@ impl TraitData {\n         Arc::new(TraitData { name, items, auto })\n     }\n }\n-\n-#[derive(Debug, Clone, PartialEq, Eq)]\n-pub struct TraitItemsIndex {\n-    traits_by_def: FxHashMap<AssocItemId, TraitId>,\n-}\n-\n-impl TraitItemsIndex {\n-    pub fn trait_items_index(db: &impl DefDatabase2, module: ModuleId) -> TraitItemsIndex {\n-        let mut index = TraitItemsIndex { traits_by_def: FxHashMap::default() };\n-        let crate_def_map = db.crate_def_map(module.krate);\n-        for decl in crate_def_map[module.module_id].scope.declarations() {\n-            if let ModuleDefId::TraitId(tr) = decl {\n-                for item in db.trait_data(tr).items.iter() {\n-                    match item {\n-                        AssocItemId::FunctionId(_) => (),\n-                        AssocItemId::TypeAliasId(_) => (),\n-                        _ => {\n-                            let prev = index.traits_by_def.insert(*item, tr);\n-                            assert!(prev.is_none());\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-        index\n-    }\n-\n-    pub fn get_parent_trait(&self, item: AssocItemId) -> Option<TraitId> {\n-        self.traits_by_def.get(&item).cloned()\n-    }\n-}"}, {"sha": "3c607d5b53c40c7a03e90014dd1bff3f5cb46cb7", "filename": "crates/ra_ide_api/src/change.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fchange.rs?ref=111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d", "patch": "@@ -309,7 +309,6 @@ impl RootDatabase {\n             hir::db::StructDataQuery\n             hir::db::EnumDataQuery\n             hir::db::TraitDataQuery\n-            hir::db::TraitItemsIndexQuery\n             hir::db::RawItemsWithSourceMapQuery\n             hir::db::RawItemsQuery\n             hir::db::CrateDefMapQuery"}, {"sha": "9839be985f4895dbd3b2f8ddc3e08ba4b45b95a1", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=111891dc2dc1d2c7ea87144e8e3ddefe23fc7b6d", "patch": "@@ -404,19 +404,15 @@ mod tests {\n         check_hover_result(\n             r#\"\n             //- /main.rs\n-            fn main() {\n-                const foo<|>: u32 = 0;\n-            }\n+            const foo<|>: u32 = 0;\n         \"#,\n             &[\"const foo: u32\"],\n         );\n \n         check_hover_result(\n             r#\"\n             //- /main.rs\n-            fn main() {\n-                static foo<|>: u32 = 0;\n-            }\n+            static foo<|>: u32 = 0;\n         \"#,\n             &[\"static foo: u32\"],\n         );"}]}