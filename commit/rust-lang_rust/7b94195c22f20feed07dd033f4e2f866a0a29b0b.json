{"sha": "7b94195c22f20feed07dd033f4e2f866a0a29b0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiOTQxOTVjMjJmMjBmZWVkMDdkZDAzM2Y0ZTJmODY2YTBhMjliMGI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-02T15:53:39Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-29T16:17:12Z"}, "message": "Remove const_{cstr,str_slice,get_elt,get_real} and is_const_real methods from cg_ssa\n\nThis introduces the static_panic_msg trait method to StaticBuilderMethods.", "tree": {"sha": "e508dd48804d74ad9ef7c9dbddd4d30e3cfb8722", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e508dd48804d74ad9ef7c9dbddd4d30e3cfb8722"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b94195c22f20feed07dd033f4e2f866a0a29b0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b94195c22f20feed07dd033f4e2f866a0a29b0b", "html_url": "https://github.com/rust-lang/rust/commit/7b94195c22f20feed07dd033f4e2f866a0a29b0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b94195c22f20feed07dd033f4e2f866a0a29b0b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3fa1161d22f5055e28340cd6c00d1451e4d9572", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3fa1161d22f5055e28340cd6c00d1451e4d9572", "html_url": "https://github.com/rust-lang/rust/commit/a3fa1161d22f5055e28340cd6c00d1451e4d9572"}], "stats": {"total": 234, "additions": 126, "deletions": 108}, "files": [{"sha": "3b3b437007aeba9c288b996e00cd5d9ef8d8c777", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7b94195c22f20feed07dd033f4e2f866a0a29b0b/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b94195c22f20feed07dd033f4e2f866a0a29b0b/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=7b94195c22f20feed07dd033f4e2f866a0a29b0b", "patch": "@@ -5,6 +5,7 @@ use crate::context::CodegenCx;\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n+use syntax::symbol::LocalInternedString;\n use rustc_codegen_ssa::common::{IntPredicate, TypeKind, RealPredicate};\n use rustc_codegen_ssa::MemFlags;\n use libc::{c_uint, c_char};\n@@ -1475,6 +1476,36 @@ impl StaticBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         // Forward to the `get_static` method of `CodegenCx`\n         self.cx().get_static(def_id)\n     }\n+\n+    fn static_panic_msg(\n+        &mut self,\n+        msg: Option<LocalInternedString>,\n+        filename: LocalInternedString,\n+        line: Self::Value,\n+        col: Self::Value,\n+        kind: &str,\n+    ) -> Self::Value {\n+        let align = self.tcx.data_layout.aggregate_align.abi\n+            .max(self.tcx.data_layout.i32_align.abi)\n+            .max(self.tcx.data_layout.pointer_align.abi);\n+\n+        let filename = self.const_str_slice(filename);\n+\n+        let with_msg_components;\n+        let without_msg_components;\n+\n+        let components = if let Some(msg) = msg {\n+            let msg = self.const_str_slice(msg);\n+            with_msg_components = [msg, filename, line, col];\n+            &with_msg_components as &[_]\n+        } else {\n+            without_msg_components = [filename, line, col];\n+            &without_msg_components as &[_]\n+        };\n+\n+        let struct_ = self.const_struct(&components, false);\n+        self.static_addr_of(struct_, align, Some(kind))\n+    }\n }\n \n impl Builder<'a, 'll, 'tcx> {"}, {"sha": "9554e54e4142ae207105b317ba324574e97819b6", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 66, "deletions": 66, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/7b94195c22f20feed07dd033f4e2f866a0a29b0b/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b94195c22f20feed07dd033f4e2f866a0a29b0b/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=7b94195c22f20feed07dd033f4e2f866a0a29b0b", "patch": "@@ -119,6 +119,72 @@ impl CodegenCx<'ll, 'tcx> {\n     pub fn const_bytes(&self, bytes: &[u8]) -> &'ll Value {\n         bytes_in_context(self.llcx, bytes)\n     }\n+\n+    fn const_cstr(\n+        &self,\n+        s: LocalInternedString,\n+        null_terminated: bool,\n+    ) -> &'ll Value {\n+        unsafe {\n+            if let Some(&llval) = self.const_cstr_cache.borrow().get(&s) {\n+                return llval;\n+            }\n+\n+            let sc = llvm::LLVMConstStringInContext(self.llcx,\n+                                                    s.as_ptr() as *const c_char,\n+                                                    s.len() as c_uint,\n+                                                    !null_terminated as Bool);\n+            let sym = self.generate_local_symbol_name(\"str\");\n+            let g = self.define_global(&sym[..], self.val_ty(sc)).unwrap_or_else(||{\n+                bug!(\"symbol `{}` is already defined\", sym);\n+            });\n+            llvm::LLVMSetInitializer(g, sc);\n+            llvm::LLVMSetGlobalConstant(g, True);\n+            llvm::LLVMRustSetLinkage(g, llvm::Linkage::InternalLinkage);\n+\n+            self.const_cstr_cache.borrow_mut().insert(s, g);\n+            g\n+        }\n+    }\n+\n+    pub fn const_str_slice(&self, s: LocalInternedString) -> &'ll Value {\n+        let len = s.len();\n+        let cs = consts::ptrcast(self.const_cstr(s, false),\n+            self.type_ptr_to(self.layout_of(self.tcx.mk_str()).llvm_type(self)));\n+        self.const_fat_ptr(cs, self.const_usize(len as u64))\n+    }\n+\n+    pub fn const_get_elt(&self, v: &'ll Value, idx: u64) -> &'ll Value {\n+        unsafe {\n+            assert_eq!(idx as c_uint as u64, idx);\n+            let us = &[idx as c_uint];\n+            let r = llvm::LLVMConstExtractValue(v, us.as_ptr(), us.len() as c_uint);\n+\n+            debug!(\"const_get_elt(v={:?}, idx={}, r={:?})\",\n+                   v, idx, r);\n+\n+            r\n+        }\n+    }\n+\n+    pub fn const_get_real(&self, v: &'ll Value) -> Option<(f64, bool)> {\n+        unsafe {\n+            if self.is_const_real(v) {\n+                let mut loses_info: llvm::Bool = ::std::mem::uninitialized();\n+                let r = llvm::LLVMConstRealGetDouble(v, &mut loses_info);\n+                let loses_info = if loses_info == 1 { true } else { false };\n+                Some((r, loses_info))\n+            } else {\n+                None\n+            }\n+        }\n+    }\n+\n+    fn is_const_real(&self, v: &'ll Value) -> bool {\n+        unsafe {\n+            llvm::LLVMIsAConstantFP(v).is_some()\n+        }\n+    }\n }\n \n impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n@@ -183,40 +249,6 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         self.const_uint(self.type_i8(), i as u64)\n     }\n \n-    fn const_cstr(\n-        &self,\n-        s: LocalInternedString,\n-        null_terminated: bool,\n-    ) -> &'ll Value {\n-        unsafe {\n-            if let Some(&llval) = self.const_cstr_cache.borrow().get(&s) {\n-                return llval;\n-            }\n-\n-            let sc = llvm::LLVMConstStringInContext(self.llcx,\n-                                                    s.as_ptr() as *const c_char,\n-                                                    s.len() as c_uint,\n-                                                    !null_terminated as Bool);\n-            let sym = self.generate_local_symbol_name(\"str\");\n-            let g = self.define_global(&sym[..], self.val_ty(sc)).unwrap_or_else(||{\n-                bug!(\"symbol `{}` is already defined\", sym);\n-            });\n-            llvm::LLVMSetInitializer(g, sc);\n-            llvm::LLVMSetGlobalConstant(g, True);\n-            llvm::LLVMRustSetLinkage(g, llvm::Linkage::InternalLinkage);\n-\n-            self.const_cstr_cache.borrow_mut().insert(s, g);\n-            g\n-        }\n-    }\n-\n-    fn const_str_slice(&self, s: LocalInternedString) -> &'ll Value {\n-        let len = s.len();\n-        let cs = consts::ptrcast(self.const_cstr(s, false),\n-            self.type_ptr_to(self.layout_of(self.tcx.mk_str()).llvm_type(self)));\n-        self.const_fat_ptr(cs, self.const_usize(len as u64))\n-    }\n-\n     fn const_struct(\n         &self,\n         elts: &[&'ll Value],\n@@ -225,32 +257,6 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         struct_in_context(self.llcx, elts, packed)\n     }\n \n-    fn const_get_elt(&self, v: &'ll Value, idx: u64) -> &'ll Value {\n-        unsafe {\n-            assert_eq!(idx as c_uint as u64, idx);\n-            let us = &[idx as c_uint];\n-            let r = llvm::LLVMConstExtractValue(v, us.as_ptr(), us.len() as c_uint);\n-\n-            debug!(\"const_get_elt(v={:?}, idx={}, r={:?})\",\n-                   v, idx, r);\n-\n-            r\n-        }\n-    }\n-\n-    fn const_get_real(&self, v: &'ll Value) -> Option<(f64, bool)> {\n-        unsafe {\n-            if self.is_const_real(v) {\n-                let mut loses_info: llvm::Bool = ::std::mem::uninitialized();\n-                let r = llvm::LLVMConstRealGetDouble(v, &mut loses_info);\n-                let loses_info = if loses_info == 1 { true } else { false };\n-                Some((r, loses_info))\n-            } else {\n-                None\n-            }\n-        }\n-    }\n-\n     fn const_to_uint(&self, v: &'ll Value) -> u64 {\n         unsafe {\n             llvm::LLVMConstIntGetZExtValue(v)\n@@ -263,12 +269,6 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         }\n     }\n \n-    fn is_const_real(&self, v: &'ll Value) -> bool {\n-        unsafe {\n-            llvm::LLVMIsAConstantFP(v).is_some()\n-        }\n-    }\n-\n     fn const_to_opt_u128(&self, v: &'ll Value, sign_ext: bool) -> Option<u128> {\n         unsafe {\n             if self.is_const_integral(v) {"}, {"sha": "f0e8a18c479b16db64a7b0f59aa2a3b2a2d48f1d", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 20, "deletions": 33, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/7b94195c22f20feed07dd033f4e2f866a0a29b0b/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b94195c22f20feed07dd033f4e2f866a0a29b0b/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=7b94195c22f20feed07dd033f4e2f866a0a29b0b", "patch": "@@ -399,43 +399,37 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         // Get the location information.\n         let loc = bx.sess().source_map().lookup_char_pos(span.lo());\n         let filename = Symbol::intern(&loc.file.name.to_string()).as_str();\n-        let filename = bx.const_str_slice(filename);\n         let line = bx.const_u32(loc.line as u32);\n         let col = bx.const_u32(loc.col.to_usize() as u32 + 1);\n-        let align = self.cx.tcx().data_layout.aggregate_align.abi\n-            .max(self.cx.tcx().data_layout.i32_align.abi)\n-            .max(self.cx.tcx().data_layout.pointer_align.abi);\n \n         // Put together the arguments to the panic entry point.\n         let (lang_item, args) = match *msg {\n             EvalErrorKind::BoundsCheck { ref len, ref index } => {\n                 let len = self.codegen_operand(&mut bx, len).immediate();\n                 let index = self.codegen_operand(&mut bx, index).immediate();\n \n-                let file_line_col = bx.const_struct(&[filename, line, col], false);\n-                let file_line_col = bx.static_addr_of(\n-                    file_line_col,\n-                    align,\n-                    Some(\"panic_bounds_check_loc\")\n+                let file_line_col = bx.static_panic_msg(\n+                    None,\n+                    filename,\n+                    line,\n+                    col,\n+                    \"panic_bounds_check_loc\",\n                 );\n                 (lang_items::PanicBoundsCheckFnLangItem,\n-                 vec![file_line_col, index, len])\n+                    vec![file_line_col, index, len])\n             }\n             _ => {\n                 let str = msg.description();\n                 let msg_str = Symbol::intern(str).as_str();\n-                let msg_str = bx.const_str_slice(msg_str);\n-                let msg_file_line_col = bx.const_struct(\n-                    &[msg_str, filename, line, col],\n-                    false\n-                );\n-                let msg_file_line_col = bx.static_addr_of(\n-                    msg_file_line_col,\n-                    align,\n-                    Some(\"panic_loc\")\n+                let msg_file_line_col = bx.static_panic_msg(\n+                    Some(msg_str),\n+                    filename,\n+                    line,\n+                    col,\n+                    \"panic_loc\",\n                 );\n                 (lang_items::PanicFnLangItem,\n-                 vec![msg_file_line_col])\n+                    vec![msg_file_line_col])\n             }\n         };\n \n@@ -539,27 +533,20 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             if layout.abi.is_uninhabited() {\n                 let loc = bx.sess().source_map().lookup_char_pos(span.lo());\n                 let filename = Symbol::intern(&loc.file.name.to_string()).as_str();\n-                let filename = bx.const_str_slice(filename);\n                 let line = bx.const_u32(loc.line as u32);\n                 let col = bx.const_u32(loc.col.to_usize() as u32 + 1);\n-                let align = self.cx.tcx().data_layout.aggregate_align.abi\n-                    .max(self.cx.tcx().data_layout.i32_align.abi)\n-                    .max(self.cx.tcx().data_layout.pointer_align.abi);\n \n                 let str = format!(\n                     \"Attempted to instantiate uninhabited type {}\",\n                     ty\n                 );\n                 let msg_str = Symbol::intern(&str).as_str();\n-                let msg_str = bx.const_str_slice(msg_str);\n-                let msg_file_line_col = bx.const_struct(\n-                    &[msg_str, filename, line, col],\n-                    false,\n-                );\n-                let msg_file_line_col = bx.static_addr_of(\n-                    msg_file_line_col,\n-                    align,\n-                    Some(\"panic_loc\"),\n+                let msg_file_line_col = bx.static_panic_msg(\n+                    Some(msg_str),\n+                    filename,\n+                    line,\n+                    col,\n+                    \"panic_loc\",\n                 );\n \n                 // Obtain the panic entry point."}, {"sha": "32412f303c155efc0f4a745fa29da80fe168ebf2", "filename": "src/librustc_codegen_ssa/traits/consts.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7b94195c22f20feed07dd033f4e2f866a0a29b0b/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b94195c22f20feed07dd033f4e2f866a0a29b0b/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs?ref=7b94195c22f20feed07dd033f4e2f866a0a29b0b", "patch": "@@ -3,7 +3,6 @@ use crate::mir::place::PlaceRef;\n use rustc::mir::interpret::Allocation;\n use rustc::mir::interpret::Scalar;\n use rustc::ty::layout;\n-use syntax::symbol::LocalInternedString;\n \n pub trait ConstMethods<'tcx>: BackendTypes {\n     // Constant constructors\n@@ -19,20 +18,12 @@ pub trait ConstMethods<'tcx>: BackendTypes {\n     fn const_usize(&self, i: u64) -> Self::Value;\n     fn const_u8(&self, i: u8) -> Self::Value;\n \n-    // This is a 'c-like' raw string, which differs from\n-    // our boxed-and-length-annotated strings.\n-    fn const_cstr(&self, s: LocalInternedString, null_terminated: bool) -> Self::Value;\n-\n-    fn const_str_slice(&self, s: LocalInternedString) -> Self::Value;\n     fn const_struct(&self, elts: &[Self::Value], packed: bool) -> Self::Value;\n \n-    fn const_get_elt(&self, v: Self::Value, idx: u64) -> Self::Value;\n-    fn const_get_real(&self, v: Self::Value) -> Option<(f64, bool)>;\n     fn const_to_uint(&self, v: Self::Value) -> u64;\n     fn const_to_opt_u128(&self, v: Self::Value, sign_ext: bool) -> Option<u128>;\n \n     fn is_const_integral(&self, v: Self::Value) -> bool;\n-    fn is_const_real(&self, v: Self::Value) -> bool;\n \n     fn scalar_to_backend(\n         &self,"}, {"sha": "d8992c159337dc3d3490b58258328555c7bdc3f5", "filename": "src/librustc_codegen_ssa/traits/statics.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7b94195c22f20feed07dd033f4e2f866a0a29b0b/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b94195c22f20feed07dd033f4e2f866a0a29b0b/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs?ref=7b94195c22f20feed07dd033f4e2f866a0a29b0b", "patch": "@@ -1,4 +1,5 @@\n use super::BackendTypes;\n+use syntax_pos::symbol::LocalInternedString;\n use rustc::hir::def_id::DefId;\n use rustc::ty::layout::Align;\n \n@@ -9,4 +10,12 @@ pub trait StaticMethods: BackendTypes {\n \n pub trait StaticBuilderMethods<'tcx>: BackendTypes {\n     fn get_static(&mut self, def_id: DefId) -> Self::Value;\n+    fn static_panic_msg(\n+        &mut self,\n+        msg: Option<LocalInternedString>,\n+        filename: LocalInternedString,\n+        line: Self::Value,\n+        col: Self::Value,\n+        kind: &str,\n+    ) -> Self::Value;\n }"}]}