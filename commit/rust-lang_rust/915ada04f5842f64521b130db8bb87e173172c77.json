{"sha": "915ada04f5842f64521b130db8bb87e173172c77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNWFkYTA0ZjU4NDJmNjQ1MjFiMTMwZGI4YmI4N2UxNzMxNzJjNzc=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-05-12T11:01:43Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-05-12T16:40:32Z"}, "message": "UI test cleanup: Extract many_single_char_names tests", "tree": {"sha": "6b875e924d2551fce750ecbf34af5064274b65b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b875e924d2551fce750ecbf34af5064274b65b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/915ada04f5842f64521b130db8bb87e173172c77", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJEBAABCgAuFiEEj4U0bmbiMSg/mWqvgqphyqETl+YFAlzYTIEQHGRldkBwaGFu\nc2NoLm5ldAAKCRCCqmHKoROX5tY6EAC7MlQtvOg2o1Fhy7eED5jVEF7739zhd3xD\nqsUC89GOjmygoGdUP+E3PGxTZYif+E5LldvZ9jW8D5bR2vfzsj4IRAsvZD5MpO/j\n/lAV3TFaqNPKO8gySVZ9+g8Nq/KkOmgbCHcL5DYitmEOlZYD4O0442UPha+GctdY\nI1x5pPTPmlWQrl7s+5vFDOh3P18RLMcQLSDkS5I0mU+JmbKNbYoraSIQKz0OsEpQ\nFPsDxdY947h/knNolHODcTnN/ehEtPRFyRWkGqnFGODs5vlFHlPuqoqBpOc5ktrg\nR7GOKEP8cbQ+2uPViAZCFNQu5TrP/qDmeei4/9ctopq8gE/w5EWidc8a8kjN0hPF\n9LAkUR49XlxhQ3pqk1aGu3ra4sa7mDlBxuvTS5mof9TyjmGi9mVAPdv0ioacgN28\nmglbVKQBJd4nlbM9lESr9xCqhbk3xXpo4gyHqiawoq7Sj5NTexo05bOSuruglkfp\nRH3kjuQq/CLrzc76nQgbRFgwHFt3NL+22Cdnjxld3gWKcS5vfIU+3zSlxEo4qbh4\neU6K1p17xazvaQ7k0m87ebgp6bj1CLSBcLDwqNImvVwzDHEWumi7uDyiigyqimbw\n4lMxVA955mRwyFnTpfVa4Q9WMWmO6cOixr1KJ3rwa63iyLFreCABm9pKmgmPYqn3\n+GdTQjFMEg==\n=/U3X\n-----END PGP SIGNATURE-----", "payload": "tree 6b875e924d2551fce750ecbf34af5064274b65b7\nparent 3710ec59962295336ab4aed100267b584dd7df7d\nauthor Philipp Hansch <dev@phansch.net> 1557658903 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1557679232 +0200\n\nUI test cleanup: Extract many_single_char_names tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/915ada04f5842f64521b130db8bb87e173172c77", "html_url": "https://github.com/rust-lang/rust/commit/915ada04f5842f64521b130db8bb87e173172c77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/915ada04f5842f64521b130db8bb87e173172c77/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3710ec59962295336ab4aed100267b584dd7df7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3710ec59962295336ab4aed100267b584dd7df7d", "html_url": "https://github.com/rust-lang/rust/commit/3710ec59962295336ab4aed100267b584dd7df7d"}], "stats": {"total": 247, "additions": 126, "deletions": 121}, "files": [{"sha": "d8ec63a6ef7156f351f72a631d769372b610980b", "filename": "tests/ui/many_single_char_names.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/915ada04f5842f64521b130db8bb87e173172c77/tests%2Fui%2Fmany_single_char_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915ada04f5842f64521b130db8bb87e173172c77/tests%2Fui%2Fmany_single_char_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmany_single_char_names.rs?ref=915ada04f5842f64521b130db8bb87e173172c77", "patch": "@@ -0,0 +1,68 @@\n+#[warn(clippy::many_single_char_names)]\n+\n+fn bla() {\n+    let a: i32;\n+    let (b, c, d): (i32, i64, i16);\n+    {\n+        {\n+            let cdefg: i32;\n+            let blar: i32;\n+        }\n+        {\n+            let e: i32;\n+        }\n+        {\n+            let e: i32;\n+            let f: i32;\n+        }\n+        match 5 {\n+            1 => println!(),\n+            e => panic!(),\n+        }\n+        match 5 {\n+            1 => println!(),\n+            _ => panic!(),\n+        }\n+    }\n+}\n+\n+fn bindings(a: i32, b: i32, c: i32, d: i32, e: i32, f: i32, g: i32, h: i32) {}\n+\n+fn bindings2() {\n+    let (a, b, c, d, e, f, g, h) = unimplemented!();\n+}\n+\n+fn shadowing() {\n+    let a = 0i32;\n+    let a = 0i32;\n+    let a = 0i32;\n+    let a = 0i32;\n+    let a = 0i32;\n+    let a = 0i32;\n+    {\n+        let a = 0i32;\n+    }\n+}\n+\n+fn patterns() {\n+    enum Z {\n+        A(i32),\n+        B(i32),\n+        C(i32),\n+        D(i32),\n+        E(i32),\n+        F(i32),\n+    }\n+\n+    // These should not trigger a warning, since the pattern bindings are a new scope.\n+    match Z::A(0) {\n+        Z::A(a) => {},\n+        Z::B(b) => {},\n+        Z::C(c) => {},\n+        Z::D(d) => {},\n+        Z::E(e) => {},\n+        Z::F(f) => {},\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a746667baf0e8e156e55c0ae0fe1d64f43e93856", "filename": "tests/ui/many_single_char_names.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/915ada04f5842f64521b130db8bb87e173172c77/tests%2Fui%2Fmany_single_char_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/915ada04f5842f64521b130db8bb87e173172c77/tests%2Fui%2Fmany_single_char_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmany_single_char_names.stderr?ref=915ada04f5842f64521b130db8bb87e173172c77", "patch": "@@ -0,0 +1,51 @@\n+error: 5 bindings with single-character names in scope\n+  --> $DIR/many_single_char_names.rs:4:9\n+   |\n+LL |     let a: i32;\n+   |         ^\n+LL |     let (b, c, d): (i32, i64, i16);\n+   |          ^  ^  ^\n+...\n+LL |             let e: i32;\n+   |                 ^\n+   |\n+   = note: `-D clippy::many-single-char-names` implied by `-D warnings`\n+\n+error: 6 bindings with single-character names in scope\n+  --> $DIR/many_single_char_names.rs:4:9\n+   |\n+LL |     let a: i32;\n+   |         ^\n+LL |     let (b, c, d): (i32, i64, i16);\n+   |          ^  ^  ^\n+...\n+LL |             let e: i32;\n+   |                 ^\n+LL |             let f: i32;\n+   |                 ^\n+\n+error: 5 bindings with single-character names in scope\n+  --> $DIR/many_single_char_names.rs:4:9\n+   |\n+LL |     let a: i32;\n+   |         ^\n+LL |     let (b, c, d): (i32, i64, i16);\n+   |          ^  ^  ^\n+...\n+LL |             e => panic!(),\n+   |             ^\n+\n+error: 8 bindings with single-character names in scope\n+  --> $DIR/many_single_char_names.rs:29:13\n+   |\n+LL | fn bindings(a: i32, b: i32, c: i32, d: i32, e: i32, f: i32, g: i32, h: i32) {}\n+   |             ^       ^       ^       ^       ^       ^       ^       ^\n+\n+error: 8 bindings with single-character names in scope\n+  --> $DIR/many_single_char_names.rs:32:10\n+   |\n+LL |     let (a, b, c, d, e, f, g, h) = unimplemented!();\n+   |          ^  ^  ^  ^  ^  ^  ^  ^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "58415b4aede260b668dbd3db7a0f9a56bc56ecd8", "filename": "tests/ui/non_expressive_names.rs", "status": "modified", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/915ada04f5842f64521b130db8bb87e173172c77/tests%2Fui%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915ada04f5842f64521b130db8bb87e173172c77/tests%2Fui%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_expressive_names.rs?ref=915ada04f5842f64521b130db8bb87e173172c77", "patch": "@@ -23,71 +23,6 @@ impl MaybeInst {\n     }\n }\n \n-fn bla() {\n-    let a: i32;\n-    let (b, c, d): (i32, i64, i16);\n-    {\n-        {\n-            let cdefg: i32;\n-            let blar: i32;\n-        }\n-        {\n-            let e: i32;\n-        }\n-        {\n-            let e: i32;\n-            let f: i32;\n-        }\n-        match 5 {\n-            1 => println!(\"\"),\n-            e => panic!(),\n-        }\n-        match 5 {\n-            1 => println!(\"\"),\n-            _ => panic!(),\n-        }\n-    }\n-}\n-\n-fn bindings(a: i32, b: i32, c: i32, d: i32, e: i32, f: i32, g: i32, h: i32) {}\n-\n-fn bindings2() {\n-    let (a, b, c, d, e, f, g, h) = unimplemented!();\n-}\n-\n-fn shadowing() {\n-    let a = 0i32;\n-    let a = 0i32;\n-    let a = 0i32;\n-    let a = 0i32;\n-    let a = 0i32;\n-    let a = 0i32;\n-    {\n-        let a = 0i32;\n-    }\n-}\n-\n-fn patterns() {\n-    enum Z {\n-        A(i32),\n-        B(i32),\n-        C(i32),\n-        D(i32),\n-        E(i32),\n-        F(i32),\n-    }\n-\n-    // These should not trigger a warning, since the pattern bindings are a new scope.\n-    match Z::A(0) {\n-        Z::A(a) => {},\n-        Z::B(b) => {},\n-        Z::C(c) => {},\n-        Z::D(d) => {},\n-        Z::E(e) => {},\n-        Z::F(f) => {},\n-    }\n-}\n-\n fn underscores_and_numbers() {\n     let _1 = 1; //~ERROR Consider a more descriptive name\n     let ____1 = 1; //~ERROR Consider a more descriptive name"}, {"sha": "a0ca46f0efc602cd0a6bccc6c35b48dee5697e5e", "filename": "tests/ui/non_expressive_names.stderr", "status": "modified", "additions": 7, "deletions": 56, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/915ada04f5842f64521b130db8bb87e173172c77/tests%2Fui%2Fnon_expressive_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/915ada04f5842f64521b130db8bb87e173172c77/tests%2Fui%2Fnon_expressive_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_expressive_names.stderr?ref=915ada04f5842f64521b130db8bb87e173172c77", "patch": "@@ -1,89 +1,40 @@\n-error: 5 bindings with single-character names in scope\n-  --> $DIR/non_expressive_names.rs:27:9\n-   |\n-LL |     let a: i32;\n-   |         ^\n-LL |     let (b, c, d): (i32, i64, i16);\n-   |          ^  ^  ^\n-...\n-LL |             let e: i32;\n-   |                 ^\n-   |\n-   = note: `-D clippy::many-single-char-names` implied by `-D warnings`\n-\n-error: 6 bindings with single-character names in scope\n-  --> $DIR/non_expressive_names.rs:27:9\n-   |\n-LL |     let a: i32;\n-   |         ^\n-LL |     let (b, c, d): (i32, i64, i16);\n-   |          ^  ^  ^\n-...\n-LL |             let e: i32;\n-   |                 ^\n-LL |             let f: i32;\n-   |                 ^\n-\n-error: 5 bindings with single-character names in scope\n-  --> $DIR/non_expressive_names.rs:27:9\n-   |\n-LL |     let a: i32;\n-   |         ^\n-LL |     let (b, c, d): (i32, i64, i16);\n-   |          ^  ^  ^\n-...\n-LL |             e => panic!(),\n-   |             ^\n-\n-error: 8 bindings with single-character names in scope\n-  --> $DIR/non_expressive_names.rs:52:13\n-   |\n-LL | fn bindings(a: i32, b: i32, c: i32, d: i32, e: i32, f: i32, g: i32, h: i32) {}\n-   |             ^       ^       ^       ^       ^       ^       ^       ^\n-\n-error: 8 bindings with single-character names in scope\n-  --> $DIR/non_expressive_names.rs:55:10\n-   |\n-LL |     let (a, b, c, d, e, f, g, h) = unimplemented!();\n-   |          ^  ^  ^  ^  ^  ^  ^  ^\n-\n error: consider choosing a more descriptive name\n-  --> $DIR/non_expressive_names.rs:92:9\n+  --> $DIR/non_expressive_names.rs:27:9\n    |\n LL |     let _1 = 1; //~ERROR Consider a more descriptive name\n    |         ^^\n    |\n    = note: `-D clippy::just-underscores-and-digits` implied by `-D warnings`\n \n error: consider choosing a more descriptive name\n-  --> $DIR/non_expressive_names.rs:93:9\n+  --> $DIR/non_expressive_names.rs:28:9\n    |\n LL |     let ____1 = 1; //~ERROR Consider a more descriptive name\n    |         ^^^^^\n \n error: consider choosing a more descriptive name\n-  --> $DIR/non_expressive_names.rs:94:9\n+  --> $DIR/non_expressive_names.rs:29:9\n    |\n LL |     let __1___2 = 12; //~ERROR Consider a more descriptive name\n    |         ^^^^^^^\n \n error: consider choosing a more descriptive name\n-  --> $DIR/non_expressive_names.rs:114:13\n+  --> $DIR/non_expressive_names.rs:49:13\n    |\n LL |         let _1 = 1;\n    |             ^^\n \n error: consider choosing a more descriptive name\n-  --> $DIR/non_expressive_names.rs:115:13\n+  --> $DIR/non_expressive_names.rs:50:13\n    |\n LL |         let ____1 = 1;\n    |             ^^^^^\n \n error: consider choosing a more descriptive name\n-  --> $DIR/non_expressive_names.rs:116:13\n+  --> $DIR/non_expressive_names.rs:51:13\n    |\n LL |         let __1___2 = 12;\n    |             ^^^^^^^\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 6 previous errors\n "}]}