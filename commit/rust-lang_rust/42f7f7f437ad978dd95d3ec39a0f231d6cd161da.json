{"sha": "42f7f7f437ad978dd95d3ec39a0f231d6cd161da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyZjdmN2Y0MzdhZDk3OGRkOTVkM2VjMzlhMGYyMzFkNmNkMTYxZGE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-20T03:15:06Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:28Z"}, "message": "librustc: De-`@mut` `inherent_impls` in the type context", "tree": {"sha": "9c12917fd46775a4ce1df29ff86915246346ff32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c12917fd46775a4ce1df29ff86915246346ff32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42f7f7f437ad978dd95d3ec39a0f231d6cd161da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42f7f7f437ad978dd95d3ec39a0f231d6cd161da", "html_url": "https://github.com/rust-lang/rust/commit/42f7f7f437ad978dd95d3ec39a0f231d6cd161da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42f7f7f437ad978dd95d3ec39a0f231d6cd161da/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c554d23a9a615e6317011fc44a5eeaba1930b783", "url": "https://api.github.com/repos/rust-lang/rust/commits/c554d23a9a615e6317011fc44a5eeaba1930b783", "html_url": "https://github.com/rust-lang/rust/commit/c554d23a9a615e6317011fc44a5eeaba1930b783"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "c04d7b1418fdeeaabd9633702d7dddb8d70ce25e", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42f7f7f437ad978dd95d3ec39a0f231d6cd161da/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f7f7f437ad978dd95d3ec39a0f231d6cd161da/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=42f7f7f437ad978dd95d3ec39a0f231d6cd161da", "patch": "@@ -442,7 +442,8 @@ fn encode_reexported_static_base_methods(ecx: &EncodeContext,\n                                          ebml_w: &mut writer::Encoder,\n                                          exp: &middle::resolve::Export2)\n                                          -> bool {\n-    match ecx.tcx.inherent_impls.find(&exp.def_id) {\n+    let inherent_impls = ecx.tcx.inherent_impls.borrow();\n+    match inherent_impls.get().find(&exp.def_id) {\n         Some(implementations) => {\n             for &base_impl in implementations.iter() {\n                 for &m in base_impl.methods.iter() {\n@@ -862,7 +863,8 @@ fn should_inline(attrs: &[Attribute]) -> bool {\n fn encode_inherent_implementations(ecx: &EncodeContext,\n                                    ebml_w: &mut writer::Encoder,\n                                    def_id: DefId) {\n-    match ecx.tcx.inherent_impls.find(&def_id) {\n+    let inherent_impls = ecx.tcx.inherent_impls.borrow();\n+    match inherent_impls.get().find(&def_id) {\n         None => {}\n         Some(&implementations) => {\n             for implementation in implementations.iter() {"}, {"sha": "dd4f92212d3b191e0f5985c172f6052083adab79", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42f7f7f437ad978dd95d3ec39a0f231d6cd161da/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f7f7f437ad978dd95d3ec39a0f231d6cd161da/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=42f7f7f437ad978dd95d3ec39a0f231d6cd161da", "patch": "@@ -282,7 +282,8 @@ impl DeadVisitor {\n         // method of a private type is used, but the type itself is never\n         // called directly.\n         let def_id = local_def(id);\n-        match self.tcx.inherent_impls.find(&def_id) {\n+        let inherent_impls = self.tcx.inherent_impls.borrow();\n+        match inherent_impls.get().find(&def_id) {\n             None => (),\n             Some(ref impl_list) => {\n                 for impl_ in impl_list.iter() {"}, {"sha": "976a4f3af68c63577a00eacba07fc14b00eb3b0d", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/42f7f7f437ad978dd95d3ec39a0f231d6cd161da/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f7f7f437ad978dd95d3ec39a0f231d6cd161da/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=42f7f7f437ad978dd95d3ec39a0f231d6cd161da", "patch": "@@ -338,7 +338,7 @@ struct ctxt_ {\n     // Maps a def_id of a type to a list of its inherent impls.\n     // Contains implementations of methods that are inherent to a type.\n     // Methods in these implementations don't need to be exported.\n-    inherent_impls: @mut HashMap<ast::DefId, @mut ~[@Impl]>,\n+    inherent_impls: RefCell<HashMap<ast::DefId, @mut ~[@Impl]>>,\n \n     // Maps a def_id of an impl to an Impl structure.\n     // Note that this contains all of the impls that we know about,\n@@ -1006,7 +1006,7 @@ pub fn mk_ctxt(s: session::Session,\n         destructor_for_type: RefCell::new(HashMap::new()),\n         destructors: RefCell::new(HashSet::new()),\n         trait_impls: RefCell::new(HashMap::new()),\n-        inherent_impls:  @mut HashMap::new(),\n+        inherent_impls: RefCell::new(HashMap::new()),\n         impls:  @mut HashMap::new(),\n         used_unsafe: @mut HashSet::new(),\n         used_mut_nodes: @mut HashSet::new(),\n@@ -4549,10 +4549,11 @@ pub fn populate_implementations_for_type_if_necessary(tcx: ctxt,\n         // If this is an inherent implementation, record it.\n         if associated_traits.is_none() {\n             let implementation_list;\n-            match tcx.inherent_impls.find(&type_id) {\n+            let mut inherent_impls = tcx.inherent_impls.borrow_mut();\n+            match inherent_impls.get().find(&type_id) {\n                 None => {\n                     implementation_list = @mut ~[];\n-                    tcx.inherent_impls.insert(type_id, implementation_list);\n+                    inherent_impls.get().insert(type_id, implementation_list);\n                 }\n                 Some(&existing_implementation_list) => {\n                     implementation_list = existing_implementation_list;"}, {"sha": "2892ad62b736c768e84e62391664d770b75220b7", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42f7f7f437ad978dd95d3ec39a0f231d6cd161da/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f7f7f437ad978dd95d3ec39a0f231d6cd161da/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=42f7f7f437ad978dd95d3ec39a0f231d6cd161da", "patch": "@@ -527,7 +527,8 @@ impl<'a> LookupContext<'a> {\n         // metadata if necessary.\n         ty::populate_implementations_for_type_if_necessary(self.tcx(), did);\n \n-        let opt_impl_infos = self.tcx().inherent_impls.find(&did);\n+        let inherent_impls = self.tcx().inherent_impls.borrow();\n+        let opt_impl_infos = inherent_impls.get().find(&did);\n         for impl_infos in opt_impl_infos.iter() {\n             for impl_info in impl_infos.iter() {\n                 self.push_candidates_from_impl("}, {"sha": "f4ffd03cf64135a45800fb7c6e2c1dbe9c8a2628", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/42f7f7f437ad978dd95d3ec39a0f231d6cd161da/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f7f7f437ad978dd95d3ec39a0f231d6cd161da/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=42f7f7f437ad978dd95d3ec39a0f231d6cd161da", "patch": "@@ -384,10 +384,11 @@ impl CoherenceChecker {\n                              implementation: @Impl) {\n         let tcx = self.crate_context.tcx;\n         let implementation_list;\n-        match tcx.inherent_impls.find(&base_def_id) {\n+        let mut inherent_impls = tcx.inherent_impls.borrow_mut();\n+        match inherent_impls.get().find(&base_def_id) {\n             None => {\n                 implementation_list = @mut ~[];\n-                tcx.inherent_impls.insert(base_def_id, implementation_list);\n+                inherent_impls.get().insert(base_def_id, implementation_list);\n             }\n             Some(&existing_implementation_list) => {\n                 implementation_list = existing_implementation_list;"}]}