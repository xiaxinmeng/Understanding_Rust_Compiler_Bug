{"sha": "59f551a2dcf57c0d3d96ac5ef60e000524210469", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZjU1MWEyZGNmNTdjMGQzZDk2YWM1ZWY2MGUwMDA1MjQyMTA0Njk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-03T00:17:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-03T00:17:16Z"}, "message": "Auto merge of #84840 - Dylan-DPC:rollup-uzk7w0h, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #84072 (Allow setting `target_family` to multiple values, and implement `target_family=\"wasm\"`)\n - #84744 (Add ErrorKind::OutOfMemory)\n - #84784 (Add help message to suggest const for unused type param)\n - #84811 (RustDoc: Fix bounds linking trait.Foo instead of traitalias.Foo)\n - #84818 (suggestion for unit enum variant when matched with a patern)\n - #84832 (Do not print visibility in external traits)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "df03e623e18dfb1926e55323d19c491281f22ed9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df03e623e18dfb1926e55323d19c491281f22ed9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59f551a2dcf57c0d3d96ac5ef60e000524210469", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59f551a2dcf57c0d3d96ac5ef60e000524210469", "html_url": "https://github.com/rust-lang/rust/commit/59f551a2dcf57c0d3d96ac5ef60e000524210469", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59f551a2dcf57c0d3d96ac5ef60e000524210469/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a8ed078832da1910dc9473bafb1bc2635a6c758", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a8ed078832da1910dc9473bafb1bc2635a6c758", "html_url": "https://github.com/rust-lang/rust/commit/8a8ed078832da1910dc9473bafb1bc2635a6c758"}, {"sha": "83c49d09b776038d97b8a45c7269bd686b16ec9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/83c49d09b776038d97b8a45c7269bd686b16ec9a", "html_url": "https://github.com/rust-lang/rust/commit/83c49d09b776038d97b8a45c7269bd686b16ec9a"}], "stats": {"total": 477, "additions": 383, "deletions": 94}, "files": [{"sha": "7561b3df3af70841d2b436f12115018614048950", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -819,6 +819,19 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             _ => false,\n         };\n \n+        let find_span = |source: &PathSource<'_>, err: &mut DiagnosticBuilder<'_>| {\n+            match source {\n+                PathSource::Expr(Some(Expr { span, kind: ExprKind::Call(_, _), .. }))\n+                | PathSource::TupleStruct(span, _) => {\n+                    // We want the main underline to cover the suggested code as well for\n+                    // cleaner output.\n+                    err.set_span(*span);\n+                    *span\n+                }\n+                _ => span,\n+            }\n+        };\n+\n         let mut bad_struct_syntax_suggestion = |def_id: DefId| {\n             let (followed_by_brace, closing_brace) = self.followed_by_brace(span);\n \n@@ -862,18 +875,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     }\n                 }\n                 PathSource::Expr(_) | PathSource::TupleStruct(..) | PathSource::Pat => {\n-                    let span = match &source {\n-                        PathSource::Expr(Some(Expr {\n-                            span, kind: ExprKind::Call(_, _), ..\n-                        }))\n-                        | PathSource::TupleStruct(span, _) => {\n-                            // We want the main underline to cover the suggested code as well for\n-                            // cleaner output.\n-                            err.set_span(*span);\n-                            *span\n-                        }\n-                        _ => span,\n-                    };\n+                    let span = find_span(&source, err);\n                     if let Some(span) = self.def_span(def_id) {\n                         err.span_label(span, &format!(\"`{}` defined here\", path_str));\n                     }\n@@ -1047,6 +1049,23 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             ) if ns == ValueNS => {\n                 bad_struct_syntax_suggestion(def_id);\n             }\n+            (Res::Def(DefKind::Ctor(_, CtorKind::Const), def_id), _) if ns == ValueNS => {\n+                match source {\n+                    PathSource::Expr(_) | PathSource::TupleStruct(..) | PathSource::Pat => {\n+                        let span = find_span(&source, err);\n+                        if let Some(span) = self.def_span(def_id) {\n+                            err.span_label(span, &format!(\"`{}` defined here\", path_str));\n+                        }\n+                        err.span_suggestion(\n+                            span,\n+                            &format!(\"use this syntax instead\"),\n+                            format!(\"{path_str}\"),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                    _ => return false,\n+                }\n+            }\n             (Res::Def(DefKind::Ctor(_, CtorKind::Fn), def_id), _) if ns == ValueNS => {\n                 if let Some(span) = self.def_span(def_id) {\n                     err.span_label(span, &format!(\"`{}` defined here\", path_str));"}, {"sha": "1ddd7d694547d895b4f6034a00fb4eb1ce527edb", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -816,7 +816,7 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n     ret.reserve(6); // the minimum number of insertions\n     // Target bindings.\n     ret.insert((sym::target_os, Some(Symbol::intern(os))));\n-    if let Some(ref fam) = sess.target.os_family {\n+    for fam in &sess.target.families {\n         ret.insert((sym::target_family, Some(Symbol::intern(fam))));\n         if fam == \"windows\" {\n             ret.insert((sym::windows, None));"}, {"sha": "bc2ec6709011a6cacb6db75cb30ae0e4cc3bdd60", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -23,7 +23,7 @@ pub fn opts(os: &str) -> TargetOptions {\n         function_sections: false,\n         dynamic_linking: true,\n         executables: true,\n-        os_family: Some(\"unix\".to_string()),\n+        families: vec![\"unix\".to_string()],\n         is_like_osx: true,\n         dwarf_version: Some(2),\n         has_rpath: true,"}, {"sha": "fb94498c131fd38283062d398271ccdf02c0727e", "filename": "compiler/rustc_target/src/spec/dragonfly_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -5,7 +5,7 @@ pub fn opts() -> TargetOptions {\n         os: \"dragonfly\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        os_family: Some(\"unix\".to_string()),\n+        families: vec![\"unix\".to_string()],\n         linker_is_gnu: true,\n         has_rpath: true,\n         position_independent_executables: true,"}, {"sha": "5d3c28e5f29c9d80a19675ff9f85d5ff4ce830be", "filename": "compiler/rustc_target/src/spec/freebsd_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -5,7 +5,7 @@ pub fn opts() -> TargetOptions {\n         os: \"freebsd\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        os_family: Some(\"unix\".to_string()),\n+        families: vec![\"unix\".to_string()],\n         linker_is_gnu: true,\n         has_rpath: true,\n         position_independent_executables: true,"}, {"sha": "13264dffeb4edd955caaf67e80247fc95ff07d3a", "filename": "compiler/rustc_target/src/spec/fuchsia_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -25,7 +25,7 @@ pub fn opts() -> TargetOptions {\n         linker: Some(\"rust-lld\".to_owned()),\n         dynamic_linking: true,\n         executables: true,\n-        os_family: Some(\"unix\".to_string()),\n+        families: vec![\"unix\".to_string()],\n         is_like_fuchsia: true,\n         linker_is_gnu: true,\n         pre_link_args,"}, {"sha": "fae56f6a82dc8e7222b736c573166601f06a9045", "filename": "compiler/rustc_target/src/spec/haiku_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -5,7 +5,7 @@ pub fn opts() -> TargetOptions {\n         os: \"haiku\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        os_family: Some(\"unix\".to_string()),\n+        families: vec![\"unix\".to_string()],\n         relro_level: RelroLevel::Full,\n         linker_is_gnu: true,\n         ..Default::default()"}, {"sha": "2e365d210f3f62356498e666dd010bf286b75a04", "filename": "compiler/rustc_target/src/spec/illumos_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -20,7 +20,7 @@ pub fn opts() -> TargetOptions {\n         dynamic_linking: true,\n         executables: true,\n         has_rpath: true,\n-        os_family: Some(\"unix\".to_string()),\n+        families: vec![\"unix\".to_string()],\n         is_like_solaris: true,\n         limit_rdylib_exports: false, // Linker doesn't support this\n         eliminate_frame_pointer: false,"}, {"sha": "65c343a5f2169b07e645c79c42935a56642e5c22", "filename": "compiler/rustc_target/src/spec/l4re_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -20,7 +20,7 @@ pub fn opts() -> TargetOptions {\n         executables: true,\n         panic_strategy: PanicStrategy::Abort,\n         linker: Some(\"ld\".to_string()),\n-        os_family: Some(\"unix\".to_string()),\n+        families: vec![\"unix\".to_string()],\n         ..Default::default()\n     }\n }"}, {"sha": "184659e22d98693dabc233c64676ab709af615dd", "filename": "compiler/rustc_target/src/spec/linux_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -5,7 +5,7 @@ pub fn opts() -> TargetOptions {\n         os: \"linux\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        os_family: Some(\"unix\".to_string()),\n+        families: vec![\"unix\".to_string()],\n         linker_is_gnu: true,\n         has_rpath: true,\n         position_independent_executables: true,"}, {"sha": "dfc97447ce042bb9b11a887725cc7f9b6e305eae", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -1042,8 +1042,12 @@ pub struct TargetOptions {\n     pub staticlib_prefix: String,\n     /// String to append to the name of every static library. Defaults to \".a\".\n     pub staticlib_suffix: String,\n-    /// OS family to use for conditional compilation. Valid options: \"unix\", \"windows\".\n-    pub os_family: Option<String>,\n+    /// Values of the `target_family` cfg set for this target.\n+    ///\n+    /// Common options are: \"unix\", \"windows\". Defaults to no families.\n+    ///\n+    /// See <https://doc.rust-lang.org/reference/conditional-compilation.html#target_family>.\n+    pub families: Vec<String>,\n     /// Whether the target toolchain's ABI supports returning small structs as an integer.\n     pub abi_return_struct_as_int: bool,\n     /// Whether the target toolchain is like macOS's. Only useful for compiling against iOS/macOS,\n@@ -1293,7 +1297,7 @@ impl Default for TargetOptions {\n             exe_suffix: String::new(),\n             staticlib_prefix: \"lib\".to_string(),\n             staticlib_suffix: \".a\".to_string(),\n-            os_family: None,\n+            families: Vec::new(),\n             abi_return_struct_as_int: false,\n             is_like_osx: false,\n             is_like_solaris: false,\n@@ -1605,14 +1609,6 @@ impl Target {\n                         .map(|s| s.to_string() );\n                 }\n             } );\n-            ($key_name:ident = $json_name:expr, optional) => ( {\n-                let name = $json_name;\n-                if let Some(o) = obj.find(name) {\n-                    base.$key_name = o\n-                        .as_string()\n-                        .map(|s| s.to_string() );\n-                }\n-            } );\n             ($key_name:ident, LldFlavor) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n@@ -1759,6 +1755,16 @@ impl Target {\n                     Some(Ok(()))\n                 })).unwrap_or(Ok(()))\n             } );\n+            ($key_name:ident, TargetFamilies) => ( {\n+                let value = obj.find(\"target-family\");\n+                if let Some(v) = value.and_then(Json::as_array) {\n+                    base.$key_name = v.iter()\n+                        .map(|a| a.as_string().unwrap().to_string())\n+                        .collect();\n+                } else if let Some(v) = value.and_then(Json::as_string) {\n+                    base.$key_name = vec![v.to_string()];\n+                }\n+            } );\n         }\n \n         if let Some(s) = obj.find(\"target-endian\").and_then(Json::as_string) {\n@@ -1802,7 +1808,7 @@ impl Target {\n         key!(exe_suffix);\n         key!(staticlib_prefix);\n         key!(staticlib_suffix);\n-        key!(os_family = \"target-family\", optional);\n+        key!(families, TargetFamilies);\n         key!(abi_return_struct_as_int, bool);\n         key!(is_like_osx, bool);\n         key!(is_like_solaris, bool);\n@@ -2042,7 +2048,7 @@ impl ToJson for Target {\n         target_option_val!(exe_suffix);\n         target_option_val!(staticlib_prefix);\n         target_option_val!(staticlib_suffix);\n-        target_option_val!(os_family, \"target-family\");\n+        target_option_val!(families, \"target-family\");\n         target_option_val!(abi_return_struct_as_int);\n         target_option_val!(is_like_osx);\n         target_option_val!(is_like_solaris);"}, {"sha": "602fb6eb6413b7ac50d82ad5dde01e74351227e1", "filename": "compiler/rustc_target/src/spec/netbsd_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -5,7 +5,7 @@ pub fn opts() -> TargetOptions {\n         os: \"netbsd\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        os_family: Some(\"unix\".to_string()),\n+        families: vec![\"unix\".to_string()],\n         linker_is_gnu: true,\n         no_default_libraries: false,\n         has_rpath: true,"}, {"sha": "8f33bacd9228eb34166cbadd488257d8f728067c", "filename": "compiler/rustc_target/src/spec/openbsd_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -5,7 +5,7 @@ pub fn opts() -> TargetOptions {\n         os: \"openbsd\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        os_family: Some(\"unix\".to_string()),\n+        families: vec![\"unix\".to_string()],\n         linker_is_gnu: true,\n         has_rpath: true,\n         abi_return_struct_as_int: true,"}, {"sha": "72052b9e2e2e3e19f7f328057a057dc71a1f503a", "filename": "compiler/rustc_target/src/spec/redox_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -6,7 +6,7 @@ pub fn opts() -> TargetOptions {\n         env: \"relibc\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        os_family: Some(\"unix\".to_string()),\n+        families: vec![\"unix\".to_string()],\n         linker_is_gnu: true,\n         has_rpath: true,\n         position_independent_executables: true,"}, {"sha": "4c922eb5cea55081d8c251501b657d412dd8adbf", "filename": "compiler/rustc_target/src/spec/solaris_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -6,7 +6,7 @@ pub fn opts() -> TargetOptions {\n         dynamic_linking: true,\n         executables: true,\n         has_rpath: true,\n-        os_family: Some(\"unix\".to_string()),\n+        families: vec![\"unix\".to_string()],\n         is_like_solaris: true,\n         limit_rdylib_exports: false, // Linker doesn't support this\n         eh_frame_header: false,"}, {"sha": "0e8e87f2dff5c9512574cc8c5b192d882c5a6d58", "filename": "compiler/rustc_target/src/spec/vxworks_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -9,7 +9,7 @@ pub fn opts() -> TargetOptions {\n         exe_suffix: \".vxe\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        os_family: Some(\"unix\".to_string()),\n+        families: vec![\"unix\".to_string()],\n         linker_is_gnu: true,\n         has_rpath: true,\n         has_elf_tls: true,"}, {"sha": "ddf28b423f0d2df4266fe4780399b384eb6edc70", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -38,7 +38,7 @@ pub fn target() -> Target {\n         is_like_emscripten: true,\n         panic_strategy: PanicStrategy::Unwind,\n         post_link_args,\n-        os_family: Some(\"unix\".to_string()),\n+        families: vec![\"unix\".to_string()],\n         ..options\n     };\n     Target {"}, {"sha": "87e740de08e9175e0099c03bac8ff93252d65c63", "filename": "compiler/rustc_target/src/spec/wasm_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -61,6 +61,7 @@ pub fn options() -> TargetOptions {\n \n     TargetOptions {\n         is_like_wasm: true,\n+        families: vec![\"wasm\".to_string()],\n \n         // we allow dynamic linking, but only cdylibs. Basically we allow a\n         // final library artifact that exports some symbols (a wasm module) but"}, {"sha": "35a52896f6fa628e6842da4b68de2029b9a59260", "filename": "compiler/rustc_target/src/spec/windows_gnu_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -71,7 +71,7 @@ pub fn opts() -> TargetOptions {\n         dll_prefix: String::new(),\n         dll_suffix: \".dll\".to_string(),\n         exe_suffix: \".exe\".to_string(),\n-        os_family: Some(\"windows\".to_string()),\n+        families: vec![\"windows\".to_string()],\n         is_like_windows: true,\n         allows_weak_linkage: false,\n         pre_link_args,"}, {"sha": "0d58618a449a901bcf5955a352885c96b3e0156a", "filename": "compiler/rustc_target/src/spec/windows_msvc_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -13,7 +13,7 @@ pub fn opts() -> TargetOptions {\n         exe_suffix: \".exe\".to_string(),\n         staticlib_prefix: String::new(),\n         staticlib_suffix: \".lib\".to_string(),\n-        os_family: Some(\"windows\".to_string()),\n+        families: vec![\"windows\".to_string()],\n         crt_static_allows_dylibs: true,\n         crt_static_respected: true,\n         requires_uwtable: true,"}, {"sha": "4914f196afbb5af1ed34a0c7dd7e5213aa493e1a", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -1298,12 +1298,14 @@ fn check_variances_for_type_defn<'tcx>(\n \n         match param.name {\n             hir::ParamName::Error => {}\n-            _ => report_bivariance(tcx, param.span, param.name.ident().name),\n+            _ => report_bivariance(tcx, param),\n         }\n     }\n }\n \n-fn report_bivariance(tcx: TyCtxt<'_>, span: Span, param_name: Symbol) {\n+fn report_bivariance(tcx: TyCtxt<'_>, param: &rustc_hir::GenericParam<'_>) {\n+    let span = param.span;\n+    let param_name = param.name.ident().name;\n     let mut err = error_392(tcx, span, param_name);\n \n     let suggested_marker_id = tcx.lang_items().phantom_data();\n@@ -1318,7 +1320,14 @@ fn report_bivariance(tcx: TyCtxt<'_>, span: Span, param_name: Symbol) {\n         format!(\"consider removing `{}` or referring to it in a field\", param_name)\n     };\n     err.help(&msg);\n-    err.emit();\n+\n+    if matches!(param.kind, rustc_hir::GenericParamKind::Type { .. }) {\n+        err.help(&format!(\n+            \"if you intended `{0}` to be a const parameter, use `const {0}: usize` instead\",\n+            param_name\n+        ));\n+    }\n+    err.emit()\n }\n \n /// Feature gates RFC 2056 -- trivial bounds, checking for global bounds that"}, {"sha": "ae896d1240ea536bbfcfbbe9a139c34b6fc48c5a", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -186,6 +186,11 @@ pub enum ErrorKind {\n     /// This means that the operation can never succeed.\n     #[stable(feature = \"unsupported_error\", since = \"1.53.0\")]\n     Unsupported,\n+\n+    /// An operation could not be completed, because it failed\n+    /// to allocate enough memory.\n+    #[stable(feature = \"out_of_memory_error\", since = \"1.53.0\")]\n+    OutOfMemory,\n }\n \n impl ErrorKind {\n@@ -210,6 +215,7 @@ impl ErrorKind {\n             ErrorKind::Other => \"other os error\",\n             ErrorKind::UnexpectedEof => \"unexpected end of file\",\n             ErrorKind::Unsupported => \"unsupported\",\n+            ErrorKind::OutOfMemory => \"out of memory\",\n         }\n     }\n }"}, {"sha": "562d9d92637a6662fb415d4509e491c702b37df0", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -149,6 +149,7 @@ pub fn decode_error_kind(errno: i32) -> ErrorKind {\n         libc::ETIMEDOUT => ErrorKind::TimedOut,\n         libc::EEXIST => ErrorKind::AlreadyExists,\n         libc::ENOSYS => ErrorKind::Unsupported,\n+        libc::ENOMEM => ErrorKind::OutOfMemory,\n \n         // These two constants can have the same value on some systems,\n         // but different values on others, so we can't use a match"}, {"sha": "88b81d455d2416f1c408c1b62e1fdcf4cfb2d165", "filename": "library/std/src/sys/wasi/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -77,6 +77,7 @@ pub fn decode_error_kind(errno: i32) -> std_io::ErrorKind {\n         wasi::ERRNO_EXIST => AlreadyExists,\n         wasi::ERRNO_AGAIN => WouldBlock,\n         wasi::ERRNO_NOSYS => Unsupported,\n+        wasi::ERRNO_NOMEM => OutOfMemory,\n         _ => Other,\n     }\n }"}, {"sha": "7ea6048e94a883e0fea616733edadb3fb73797d4", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -168,6 +168,8 @@ pub const ERROR_FILE_NOT_FOUND: DWORD = 2;\n pub const ERROR_PATH_NOT_FOUND: DWORD = 3;\n pub const ERROR_ACCESS_DENIED: DWORD = 5;\n pub const ERROR_INVALID_HANDLE: DWORD = 6;\n+pub const ERROR_NOT_ENOUGH_MEMORY: DWORD = 8;\n+pub const ERROR_OUTOFMEMORY: DWORD = 14;\n pub const ERROR_NO_MORE_FILES: DWORD = 18;\n pub const ERROR_HANDLE_EOF: DWORD = 38;\n pub const ERROR_FILE_EXISTS: DWORD = 80;"}, {"sha": "2208ff025c0f7d77e6a6563a986488207662b0fc", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -71,6 +71,7 @@ pub fn decode_error_kind(errno: i32) -> ErrorKind {\n         c::ERROR_PATH_NOT_FOUND => return ErrorKind::NotFound,\n         c::ERROR_NO_DATA => return ErrorKind::BrokenPipe,\n         c::ERROR_INVALID_PARAMETER => return ErrorKind::InvalidInput,\n+        c::ERROR_NOT_ENOUGH_MEMORY | c::ERROR_OUTOFMEMORY => return ErrorKind::OutOfMemory,\n         c::ERROR_SEM_TIMEOUT\n         | c::WAIT_TIMEOUT\n         | c::ERROR_DRIVER_CANCEL_TIMEOUT"}, {"sha": "6ad635012b134bb3f4639bf425d6a4e10051595d", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -19,7 +19,7 @@ use crate::clean::{self, Attributes, AttributesExt, GetDefId, ToSource};\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n \n-use super::Clean;\n+use super::{Clean, Visibility};\n \n type Attrs<'hir> = rustc_middle::ty::Attributes<'hir>;\n \n@@ -188,13 +188,23 @@ crate fn record_extern_fqn(cx: &mut DocContext<'_>, did: DefId, kind: ItemType)\n     if did.is_local() {\n         cx.cache.exact_paths.insert(did, fqn);\n     } else {\n-        cx.cache.external_paths.insert(did, (fqn, ItemType::from(kind)));\n+        cx.cache.external_paths.insert(did, (fqn, kind));\n     }\n }\n \n crate fn build_external_trait(cx: &mut DocContext<'_>, did: DefId) -> clean::Trait {\n-    let trait_items =\n-        cx.tcx.associated_items(did).in_definition_order().map(|item| item.clean(cx)).collect();\n+    let trait_items = cx\n+        .tcx\n+        .associated_items(did)\n+        .in_definition_order()\n+        .map(|item| {\n+            // When building an external trait, the cleaned trait will have all items public,\n+            // which causes methods to have a `pub` prefix, which is invalid since items in traits\n+            // can not have a visibility prefix. Thus we override the visibility here manually.\n+            // See https://github.com/rust-lang/rust/issues/81274\n+            clean::Item { visibility: Visibility::Inherited, ..item.clean(cx) }\n+        })\n+        .collect();\n \n     let predicates = cx.tcx.predicates_of(did);\n     let generics = (cx.tcx.generics_of(did), predicates).clean(cx);"}, {"sha": "33df9ea3f3e0cb11cdf819f4d96fbdd03609b027", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -17,11 +17,11 @@ use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::region_constraints::{Constraint, RegionConstraintData};\n-use rustc_middle::bug;\n use rustc_middle::middle::resolve_lifetime as rl;\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{self, AdtKind, Lift, Ty, TyCtxt};\n+use rustc_middle::{bug, span_bug};\n use rustc_mir::const_eval::{is_const_fn, is_unstable_const_fn};\n use rustc_span::hygiene::{AstPass, MacroKind};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -158,7 +158,15 @@ impl Clean<GenericBound> for hir::GenericBound<'_> {\n impl Clean<Type> for (ty::TraitRef<'_>, &[TypeBinding]) {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Type {\n         let (trait_ref, bounds) = *self;\n-        inline::record_extern_fqn(cx, trait_ref.def_id, ItemType::Trait);\n+        let kind = cx.tcx.def_kind(trait_ref.def_id).into();\n+        if !matches!(kind, ItemType::Trait | ItemType::TraitAlias) {\n+            span_bug!(\n+                cx.tcx.def_span(trait_ref.def_id),\n+                \"`TraitRef` had unexpected kind {:?}\",\n+                kind\n+            );\n+        }\n+        inline::record_extern_fqn(cx, trait_ref.def_id, kind);\n         let path = external_path(\n             cx,\n             cx.tcx.item_name(trait_ref.def_id),"}, {"sha": "b6b76a96e7f9647ec1b36faaed916f7727a2e05b", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 32, "deletions": 14, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -327,6 +327,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n             | clean::EnumItem(..)\n             | clean::TypedefItem(..)\n             | clean::TraitItem(..)\n+            | clean::TraitAliasItem(..)\n             | clean::FunctionItem(..)\n             | clean::ModuleItem(..)\n             | clean::ForeignFunctionItem(..)\n@@ -337,26 +338,43 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n             | clean::ForeignTypeItem\n             | clean::MacroItem(..)\n             | clean::ProcMacroItem(..)\n-            | clean::VariantItem(..)\n-                if !self.cache.stripped_mod =>\n-            {\n-                // Re-exported items mean that the same id can show up twice\n-                // in the rustdoc ast that we're looking at. We know,\n-                // however, that a re-exported item doesn't show up in the\n-                // `public_items` map, so we can skip inserting into the\n-                // paths map if there was already an entry present and we're\n-                // not a public item.\n-                if !self.cache.paths.contains_key(&item.def_id)\n-                    || self.cache.access_levels.is_public(item.def_id)\n-                {\n-                    self.cache.paths.insert(item.def_id, (self.cache.stack.clone(), item.type_()));\n+            | clean::VariantItem(..) => {\n+                if !self.cache.stripped_mod {\n+                    // Re-exported items mean that the same id can show up twice\n+                    // in the rustdoc ast that we're looking at. We know,\n+                    // however, that a re-exported item doesn't show up in the\n+                    // `public_items` map, so we can skip inserting into the\n+                    // paths map if there was already an entry present and we're\n+                    // not a public item.\n+                    if !self.cache.paths.contains_key(&item.def_id)\n+                        || self.cache.access_levels.is_public(item.def_id)\n+                    {\n+                        self.cache\n+                            .paths\n+                            .insert(item.def_id, (self.cache.stack.clone(), item.type_()));\n+                    }\n                 }\n             }\n             clean::PrimitiveItem(..) => {\n                 self.cache.paths.insert(item.def_id, (self.cache.stack.clone(), item.type_()));\n             }\n \n-            _ => {}\n+            clean::ExternCrateItem { .. }\n+            | clean::ImportItem(..)\n+            | clean::OpaqueTyItem(..)\n+            | clean::ImplItem(..)\n+            | clean::TyMethodItem(..)\n+            | clean::MethodItem(..)\n+            | clean::StructFieldItem(..)\n+            | clean::AssocConstItem(..)\n+            | clean::AssocTypeItem(..)\n+            | clean::StrippedItem(..)\n+            | clean::KeywordItem(..) => {\n+                // FIXME: Do these need handling?\n+                // The person writing this comment doesn't know.\n+                // So would rather leave them to an expert,\n+                // as at least the list is better than `_ => {}`.\n+            }\n         }\n \n         // Maintain the parent stack"}, {"sha": "6df06c87a09d5ea09c4cf5452e4a659b787615bd", "filename": "src/test/rustdoc/auxiliary/trait-alias-mention.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Frustdoc%2Fauxiliary%2Ftrait-alias-mention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Frustdoc%2Fauxiliary%2Ftrait-alias-mention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Ftrait-alias-mention.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -0,0 +1,3 @@\n+#![feature(trait_alias)]\n+\n+pub trait SomeAlias = std::fmt::Debug + std::marker::Copy;"}, {"sha": "1e8d0b8e02a93d8c0e7966fe31ba782aea3dd443", "filename": "src/test/rustdoc/auxiliary/trait-visibility.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Frustdoc%2Fauxiliary%2Ftrait-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Frustdoc%2Fauxiliary%2Ftrait-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Ftrait-visibility.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -0,0 +1,3 @@\n+pub trait Bar {\n+    fn foo();\n+}"}, {"sha": "6da0dc68785c58dd11ade1e357e17e640c94eff1", "filename": "src/test/rustdoc/trait-alias-mention.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Frustdoc%2Ftrait-alias-mention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Frustdoc%2Ftrait-alias-mention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-alias-mention.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -0,0 +1,10 @@\n+// aux-build:trait-alias-mention.rs\n+// build-aux-docs\n+\n+#![crate_name = \"foo\"]\n+\n+extern crate trait_alias_mention;\n+\n+// @has foo/fn.mention_alias_in_bounds.html '//a[@href=\"../trait_alias_mention/traitalias.SomeAlias.html\"]' 'SomeAlias'\n+pub fn mention_alias_in_bounds<T: trait_alias_mention::SomeAlias>() {\n+}"}, {"sha": "8ba3ee03a74f3dba69aabb51a9ab7f95ef2c8fef", "filename": "src/test/rustdoc/trait-visibility.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Frustdoc%2Ftrait-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Frustdoc%2Ftrait-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-visibility.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -0,0 +1,8 @@\n+// aux-build:trait-visibility.rs\n+\n+#![crate_name = \"foo\"]\n+\n+extern crate trait_visibility;\n+\n+// @has foo/trait.Bar.html '//a[@href=\"#tymethod.foo\"]/..' \"fn foo()\"\n+pub use trait_visibility::Bar;"}, {"sha": "6cd4a1a0afa085e89f210d1c46138fda15f1194a", "filename": "src/test/rustdoc/trait_alias.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Frustdoc%2Ftrait_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Frustdoc%2Ftrait_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait_alias.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -19,3 +19,5 @@ pub trait CopyAlias = Copy;\n pub trait Alias2 = Copy + Debug;\n // @has foo/traitalias.Foo.html '//section[@id=\"main\"]/pre' 'trait Foo<T> = Into<T> + Debug;'\n pub trait Foo<T> = Into<T> + Debug;\n+// @has foo/fn.bar.html '//a[@href=\"traitalias.Alias2.html\"]' 'Alias2'\n+pub fn bar<T>() where T: Alias2 {}"}, {"sha": "c7d196a2aa6eba992610f4ea1319b68450f37a99", "filename": "src/test/ui/cfg/cfg-family.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fcfg%2Fcfg-family.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fcfg%2Fcfg-family.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fcfg-family.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -1,6 +1,6 @@\n-// run-pass\n+// build-pass\n // pretty-expanded FIXME #23616\n-// ignore-wasm32-bare no target_family\n+// ignore-wasm32-bare no bare family\n // ignore-sgx\n \n #[cfg(windows)]"}, {"sha": "90a59fab8e250b7c2808e21492146600abf425b5", "filename": "src/test/ui/cfg/cfg-target-family.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fcfg%2Fcfg-target-family.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fcfg%2Fcfg-target-family.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fcfg-target-family.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -1,5 +1,4 @@\n-// run-pass\n-// ignore-wasm32-bare no target_family\n+// build-pass\n // ignore-sgx\n \n // pretty-expanded FIXME #23616\n@@ -11,3 +10,7 @@ pub fn main() {\n #[cfg(target_family = \"unix\")]\n pub fn main() {\n }\n+\n+#[cfg(target_family=\"wasm\")]\n+pub fn main() {\n+}"}, {"sha": "32f7dea82639b70d41221a97d7c30205a7677ebe", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.full.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.full.stderr?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -11,6 +11,7 @@ LL | pub struct Dependent<T, const X: T>([(); X]);\n    |                      ^ unused parameter\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n+   = help: if you intended `T` to be a const parameter, use `const T: usize` instead\n \n error: aborting due to 2 previous errors\n "}, {"sha": "32f7dea82639b70d41221a97d7c30205a7677ebe", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.min.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.min.stderr?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -11,6 +11,7 @@ LL | pub struct Dependent<T, const X: T>([(); X]);\n    |                      ^ unused parameter\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n+   = help: if you intended `T` to be a const parameter, use `const T: usize` instead\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0fe65272f1b78d0bea6437c2da47606da92fc59d", "filename": "src/test/ui/const-generics/issue-67375.full.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.full.stderr?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -15,6 +15,7 @@ LL | struct Bug<T> {\n    |            ^ unused parameter\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n+   = help: if you intended `T` to be a const parameter, use `const T: usize` instead\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "be81fa921297b2a67ffa0ed00d89a2c4ed011318", "filename": "src/test/ui/const-generics/issue-67375.min.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.min.stderr?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -14,6 +14,7 @@ LL | struct Bug<T> {\n    |            ^ unused parameter\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n+   = help: if you intended `T` to be a const parameter, use `const T: usize` instead\n \n error: aborting due to 2 previous errors\n "}, {"sha": "63c50b5ca542387bc5058f9b94c222a2314e313c", "filename": "src/test/ui/const-generics/issue-67945-1.full.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.full.stderr?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -19,6 +19,7 @@ LL | struct Bug<S> {\n    |            ^ unused parameter\n    |\n    = help: consider removing `S`, referring to it in a field, or using a marker such as `PhantomData`\n+   = help: if you intended `S` to be a const parameter, use `const S: usize` instead\n \n error: aborting due to 2 previous errors\n "}, {"sha": "074d36c8ef3ed2d41a3894f4115f7636fac0c387", "filename": "src/test/ui/const-generics/issue-67945-1.min.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.min.stderr?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -23,6 +23,7 @@ LL | struct Bug<S> {\n    |            ^ unused parameter\n    |\n    = help: consider removing `S`, referring to it in a field, or using a marker such as `PhantomData`\n+   = help: if you intended `S` to be a const parameter, use `const S: usize` instead\n \n error: aborting due to 3 previous errors\n "}, {"sha": "b900406023117111434003fc8c6cf261bd131300", "filename": "src/test/ui/const-generics/issue-67945-2.full.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.full.stderr?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -19,6 +19,7 @@ LL | struct Bug<S> {\n    |            ^ unused parameter\n    |\n    = help: consider removing `S`, referring to it in a field, or using a marker such as `PhantomData`\n+   = help: if you intended `S` to be a const parameter, use `const S: usize` instead\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c06df79f8428c51a3b3da3e8ea9cafd31b319bb6", "filename": "src/test/ui/const-generics/issue-67945-2.min.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.min.stderr?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -23,6 +23,7 @@ LL | struct Bug<S> {\n    |            ^ unused parameter\n    |\n    = help: consider removing `S`, referring to it in a field, or using a marker such as `PhantomData`\n+   = help: if you intended `S` to be a const parameter, use `const S: usize` instead\n \n error: aborting due to 3 previous errors\n "}, {"sha": "2251512c4596ea26c58de59419f830a8356fcc2a", "filename": "src/test/ui/const-generics/unused-type-param-suggestion.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fconst-generics%2Funused-type-param-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fconst-generics%2Funused-type-param-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused-type-param-suggestion.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -0,0 +1,4 @@\n+#![crate_type=\"lib\"]\n+\n+struct Example<N>;\n+//~^ ERROR parameter"}, {"sha": "807065ca109e5990607c327dbf39d9de0d35deed", "filename": "src/test/ui/const-generics/unused-type-param-suggestion.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fconst-generics%2Funused-type-param-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fconst-generics%2Funused-type-param-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused-type-param-suggestion.stderr?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -0,0 +1,12 @@\n+error[E0392]: parameter `N` is never used\n+  --> $DIR/unused-type-param-suggestion.rs:3:16\n+   |\n+LL | struct Example<N>;\n+   |                ^ unused parameter\n+   |\n+   = help: consider removing `N`, referring to it in a field, or using a marker such as `PhantomData`\n+   = help: if you intended `N` to be a const parameter, use `const N: usize` instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "a704e1fae497cb0065dc867d0a29d43214806921", "filename": "src/test/ui/empty/empty-struct-unit-pat.stderr", "status": "modified", "additions": 86, "deletions": 16, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-pat.stderr?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -1,84 +1,154 @@\n error[E0532]: expected tuple struct or tuple variant, found unit struct `Empty2`\n   --> $DIR/empty-struct-unit-pat.rs:21:9\n    |\n+LL | struct Empty2;\n+   | -------------- `Empty2` defined here\n+...\n LL |         Empty2() => ()\n-   |         ^^^^^^ help: a tuple struct with a similar name exists: `XEmpty6`\n+   |         ^^^^^^^^\n    | \n   ::: $DIR/auxiliary/empty-struct.rs:3:1\n    |\n LL | pub struct XEmpty6();\n    | --------------------- similarly named tuple struct `XEmpty6` defined here\n+   |\n+help: use this syntax instead\n+   |\n+LL |         Empty2 => ()\n+   |         ^^^^^^\n+help: a tuple struct with a similar name exists\n+   |\n+LL |         XEmpty6() => ()\n+   |         ^^^^^^^\n \n error[E0532]: expected tuple struct or tuple variant, found unit struct `XEmpty2`\n   --> $DIR/empty-struct-unit-pat.rs:24:9\n    |\n LL |         XEmpty2() => ()\n-   |         ^^^^^^^ help: a tuple struct with a similar name exists: `XEmpty6`\n+   |         ^^^^^^^^^\n    | \n-  ::: $DIR/auxiliary/empty-struct.rs:3:1\n+  ::: $DIR/auxiliary/empty-struct.rs:2:1\n    |\n+LL | pub struct XEmpty2;\n+   | ------------------- `XEmpty2` defined here\n LL | pub struct XEmpty6();\n    | --------------------- similarly named tuple struct `XEmpty6` defined here\n+   |\n+help: use this syntax instead\n+   |\n+LL |         XEmpty2 => ()\n+   |         ^^^^^^^\n+help: a tuple struct with a similar name exists\n+   |\n+LL |         XEmpty6() => ()\n+   |         ^^^^^^^\n \n error[E0532]: expected tuple struct or tuple variant, found unit struct `Empty2`\n   --> $DIR/empty-struct-unit-pat.rs:28:9\n    |\n+LL | struct Empty2;\n+   | -------------- `Empty2` defined here\n+...\n LL |         Empty2(..) => ()\n-   |         ^^^^^^ help: a tuple struct with a similar name exists: `XEmpty6`\n+   |         ^^^^^^^^^^\n    | \n   ::: $DIR/auxiliary/empty-struct.rs:3:1\n    |\n LL | pub struct XEmpty6();\n    | --------------------- similarly named tuple struct `XEmpty6` defined here\n+   |\n+help: use this syntax instead\n+   |\n+LL |         Empty2 => ()\n+   |         ^^^^^^\n+help: a tuple struct with a similar name exists\n+   |\n+LL |         XEmpty6(..) => ()\n+   |         ^^^^^^^\n \n error[E0532]: expected tuple struct or tuple variant, found unit struct `XEmpty2`\n   --> $DIR/empty-struct-unit-pat.rs:32:9\n    |\n LL |         XEmpty2(..) => ()\n-   |         ^^^^^^^ help: a tuple struct with a similar name exists: `XEmpty6`\n+   |         ^^^^^^^^^^^\n    | \n-  ::: $DIR/auxiliary/empty-struct.rs:3:1\n+  ::: $DIR/auxiliary/empty-struct.rs:2:1\n    |\n+LL | pub struct XEmpty2;\n+   | ------------------- `XEmpty2` defined here\n LL | pub struct XEmpty6();\n    | --------------------- similarly named tuple struct `XEmpty6` defined here\n+   |\n+help: use this syntax instead\n+   |\n+LL |         XEmpty2 => ()\n+   |         ^^^^^^^\n+help: a tuple struct with a similar name exists\n+   |\n+LL |         XEmpty6(..) => ()\n+   |         ^^^^^^^\n \n error[E0532]: expected tuple struct or tuple variant, found unit variant `E::Empty4`\n   --> $DIR/empty-struct-unit-pat.rs:37:9\n    |\n+LL |     Empty4\n+   |     ------ `E::Empty4` defined here\n+...\n LL |         E::Empty4() => ()\n-   |         ^^^^^^^^^ not a tuple struct or tuple variant\n+   |         ^^^^^^^^^^^ help: use this syntax instead: `E::Empty4`\n \n error[E0532]: expected tuple struct or tuple variant, found unit variant `XE::XEmpty4`\n   --> $DIR/empty-struct-unit-pat.rs:41:9\n    |\n LL |         XE::XEmpty4() => (),\n-   |         ^^^^-------\n-   |             |\n-   |             help: a tuple variant with a similar name exists: `XEmpty5`\n+   |         ^^^^^^^^^^^^^\n    | \n-  ::: $DIR/auxiliary/empty-struct.rs:8:5\n+  ::: $DIR/auxiliary/empty-struct.rs:7:5\n    |\n+LL |     XEmpty4,\n+   |     ------- `XE::XEmpty4` defined here\n LL |     XEmpty5(),\n    |     --------- similarly named tuple variant `XEmpty5` defined here\n+   |\n+help: use this syntax instead\n+   |\n+LL |         XE::XEmpty4 => (),\n+   |         ^^^^^^^^^^^\n+help: a tuple variant with a similar name exists\n+   |\n+LL |         XE::XEmpty5() => (),\n+   |             ^^^^^^^\n \n error[E0532]: expected tuple struct or tuple variant, found unit variant `E::Empty4`\n   --> $DIR/empty-struct-unit-pat.rs:46:9\n    |\n+LL |     Empty4\n+   |     ------ `E::Empty4` defined here\n+...\n LL |         E::Empty4(..) => ()\n-   |         ^^^^^^^^^ not a tuple struct or tuple variant\n+   |         ^^^^^^^^^^^^^ help: use this syntax instead: `E::Empty4`\n \n error[E0532]: expected tuple struct or tuple variant, found unit variant `XE::XEmpty4`\n   --> $DIR/empty-struct-unit-pat.rs:50:9\n    |\n LL |         XE::XEmpty4(..) => (),\n-   |         ^^^^-------\n-   |             |\n-   |             help: a tuple variant with a similar name exists: `XEmpty5`\n+   |         ^^^^^^^^^^^^^^^\n    | \n-  ::: $DIR/auxiliary/empty-struct.rs:8:5\n+  ::: $DIR/auxiliary/empty-struct.rs:7:5\n    |\n+LL |     XEmpty4,\n+   |     ------- `XE::XEmpty4` defined here\n LL |     XEmpty5(),\n    |     --------- similarly named tuple variant `XEmpty5` defined here\n+   |\n+help: use this syntax instead\n+   |\n+LL |         XE::XEmpty4 => (),\n+   |         ^^^^^^^^^^^\n+help: a tuple variant with a similar name exists\n+   |\n+LL |         XE::XEmpty5(..) => (),\n+   |             ^^^^^^^\n \n error: aborting due to 8 previous errors\n "}, {"sha": "f89be630eeb30c7746fbedbecfb2a6f28e8a8407", "filename": "src/test/ui/enum-discriminant/issue-70453-generics-in-discr-ice.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.stderr?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -14,6 +14,7 @@ LL | enum MyWeirdOption<T> {\n    |                    ^ unused parameter\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n+   = help: if you intended `T` to be a const parameter, use `const T: usize` instead\n \n error: aborting due to 2 previous errors\n "}, {"sha": "227899e75350f3ed155d2640315c2b61b02764df", "filename": "src/test/ui/enum/issue-67945-1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fenum%2Fissue-67945-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fenum%2Fissue-67945-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fissue-67945-1.stderr?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -14,6 +14,7 @@ LL | enum Bug<S> {\n    |          ^ unused parameter\n    |\n    = help: consider removing `S`, referring to it in a field, or using a marker such as `PhantomData`\n+   = help: if you intended `S` to be a const parameter, use `const S: usize` instead\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5a90f00c346d0de0f44b8d131f96592318e836a1", "filename": "src/test/ui/enum/issue-67945-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fenum%2Fissue-67945-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fenum%2Fissue-67945-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fissue-67945-2.stderr?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -14,6 +14,7 @@ LL | enum Bug<S> {\n    |          ^ unused parameter\n    |\n    = help: consider removing `S`, referring to it in a field, or using a marker such as `PhantomData`\n+   = help: if you intended `S` to be a const parameter, use `const S: usize` instead\n \n error: aborting due to 2 previous errors\n "}, {"sha": "622402999c348b11d5167b4d55681a81127ce7c0", "filename": "src/test/ui/error-codes/E0392.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Ferror-codes%2FE0392.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Ferror-codes%2FE0392.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0392.stderr?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -5,6 +5,7 @@ LL | enum Foo<T> { Bar }\n    |          ^ unused parameter\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n+   = help: if you intended `T` to be a const parameter, use `const T: usize` instead\n \n error: aborting due to previous error\n "}, {"sha": "e4e449e4159b6b8067e5be8ad38ba817fe904455", "filename": "src/test/ui/inner-static-type-parameter.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Finner-static-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Finner-static-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finner-static-type-parameter.stderr?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -13,6 +13,7 @@ LL | enum Bar<T> { What }\n    |          ^ unused parameter\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n+   = help: if you intended `T` to be a const parameter, use `const T: usize` instead\n \n error: aborting due to 2 previous errors\n "}, {"sha": "259e029113d5097cf0a14e0ad6ab74de17c66c50", "filename": "src/test/ui/issues/issue-17904-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fissues%2Fissue-17904-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fissues%2Fissue-17904-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17904-2.stderr?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -5,6 +5,7 @@ LL | struct Foo<T> where T: Copy;\n    |            ^ unused parameter\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n+   = help: if you intended `T` to be a const parameter, use `const T: usize` instead\n \n error: aborting due to previous error\n "}, {"sha": "6bcff7aff2dc4fa59982c14a7299c509ce1dfb0d", "filename": "src/test/ui/issues/issue-20413.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -5,6 +5,7 @@ LL | struct NoData<T>;\n    |               ^ unused parameter\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n+   = help: if you intended `T` to be a const parameter, use `const T: usize` instead\n \n error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Foo`\n   --> $DIR/issue-20413.rs:8:36"}, {"sha": "bf125a8942edf904636de5c92da05a30865db05a", "filename": "src/test/ui/issues/issue-32004.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fissues%2Fissue-32004.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fissues%2Fissue-32004.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32004.stderr?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -21,8 +21,11 @@ LL |         Foo::Baz => {}\n error[E0532]: expected tuple struct or tuple variant, found unit struct `S`\n   --> $DIR/issue-32004.rs:16:9\n    |\n+LL | struct S;\n+   | --------- `S` defined here\n+...\n LL |         S(()) => {}\n-   |         ^ not a tuple struct or tuple variant\n+   |         ^^^^^ help: use this syntax instead: `S`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "dc24fb353f408069dfe673c7bc3d98f97c62b2ac", "filename": "src/test/ui/issues/issue-36299.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fissues%2Fissue-36299.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fissues%2Fissue-36299.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36299.stderr?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -13,6 +13,7 @@ LL | struct Foo<'a, A> {}\n    |                ^ unused parameter\n    |\n    = help: consider removing `A`, referring to it in a field, or using a marker such as `PhantomData`\n+   = help: if you intended `A` to be a const parameter, use `const A: usize` instead\n \n error: aborting due to 2 previous errors\n "}, {"sha": "733fc4af534f76477e57ed97521527cc8a823be0", "filename": "src/test/ui/issues/issue-36638.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fissues%2Fissue-36638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fissues%2Fissue-36638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36638.stderr?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -17,6 +17,7 @@ LL | struct Foo<Self>(Self);\n    |            ^^^^ unused parameter\n    |\n    = help: consider removing `Self`, referring to it in a field, or using a marker such as `PhantomData`\n+   = help: if you intended `Self` to be a const parameter, use `const Self: usize` instead\n \n error: aborting due to 3 previous errors\n "}, {"sha": "82bb51028c9774d84dd478fc43268fe6cf2cbcaf", "filename": "src/test/ui/issues/issue-37534.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -22,6 +22,7 @@ LL | struct Foo<T: ?Hash> { }\n    |            ^ unused parameter\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n+   = help: if you intended `T` to be a const parameter, use `const T: usize` instead\n \n error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "57783d75ba182e1c81448782ffc2a8231e4cb150", "filename": "src/test/ui/issues/issue-pr29383.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fissues%2Fissue-pr29383.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fissues%2Fissue-pr29383.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-pr29383.stderr?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -1,14 +1,20 @@\n error[E0532]: expected tuple struct or tuple variant, found unit variant `E::A`\n   --> $DIR/issue-pr29383.rs:9:14\n    |\n+LL |     A,\n+   |     - `E::A` defined here\n+...\n LL |         Some(E::A(..)) => {}\n-   |              ^^^^ not a tuple struct or tuple variant\n+   |              ^^^^^^^^ help: use this syntax instead: `E::A`\n \n error[E0532]: expected tuple struct or tuple variant, found unit variant `E::B`\n   --> $DIR/issue-pr29383.rs:11:14\n    |\n+LL |     B,\n+   |     - `E::B` defined here\n+...\n LL |         Some(E::B(..)) => {}\n-   |              ^^^^ not a tuple struct or tuple variant\n+   |              ^^^^^^^^ help: use this syntax instead: `E::B`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ba32d0e99a47165c06007adb4f55a926c22976f0", "filename": "src/test/ui/match/match-pattern-field-mismatch-2.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch-2.stderr?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -1,8 +1,11 @@\n error[E0532]: expected tuple struct or tuple variant, found unit variant `Color::NoColor`\n   --> $DIR/match-pattern-field-mismatch-2.rs:12:11\n    |\n+LL |         NoColor,\n+   |         ------- `Color::NoColor` defined here\n+...\n LL |           Color::NoColor(_) => { }\n-   |           ^^^^^^^^^^^^^^ not a tuple struct or tuple variant\n+   |           ^^^^^^^^^^^^^^^^^ help: use this syntax instead: `Color::NoColor`\n \n error: aborting due to previous error\n "}, {"sha": "44d6a854b3db6d90ddc35f48484c2f66566660e6", "filename": "src/test/ui/pattern/pattern-error-continue.stderr", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.stderr?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -9,11 +9,21 @@ error[E0532]: expected tuple struct or tuple variant, found unit variant `A::D`\n    |\n LL |     B(isize, isize),\n    |     --------------- similarly named tuple variant `B` defined here\n+LL |     C(isize, isize, isize),\n+LL |     D\n+   |     - `A::D` defined here\n ...\n LL |         A::D(_) => (),\n-   |         ^^^-\n-   |            |\n-   |            help: a tuple variant with a similar name exists: `B`\n+   |         ^^^^^^^\n+   |\n+help: use this syntax instead\n+   |\n+LL |         A::D => (),\n+   |         ^^^^\n+help: a tuple variant with a similar name exists\n+   |\n+LL |         A::B(_) => (),\n+   |            ^\n \n error[E0023]: this pattern has 3 fields, but the corresponding tuple variant has 2 fields\n   --> $DIR/pattern-error-continue.rs:17:9"}, {"sha": "a27169fdbb2d5e7b918108bc2654c2ccf54a89a8", "filename": "src/test/ui/suggestions/issue-84700.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84700.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84700.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84700.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -0,0 +1,26 @@\n+// test for suggestion on fieldless enum variant\n+\n+#[derive(PartialEq, Debug)]\n+enum FarmAnimal {\n+    Worm,\n+    Cow,\n+    Bull,\n+    Chicken { num_eggs: usize },\n+    Dog (String),\n+}\n+\n+fn what_does_the_animal_say(animal: &FarmAnimal) {\n+\n+    let noise = match animal {\n+        FarmAnimal::Cow(_) => \"moo\".to_string(),\n+        //~^ ERROR expected tuple struct or tuple variant, found unit variant `FarmAnimal::Cow`\n+        FarmAnimal::Chicken(_) => \"cluck, cluck!\".to_string(),\n+        //~^ ERROR expected tuple struct or tuple variant, found struct variant `FarmAnimal::Chicken`\n+        FarmAnimal::Dog{..} => \"woof!\".to_string(),\n+        _ => todo!()\n+    };\n+\n+    println!(\"{:?} says: {:?}\", animal, noise);\n+}\n+\n+fn main() {}"}, {"sha": "b36d8aba36d30a5c114ca91d1c8d216f96e0d5ae", "filename": "src/test/ui/suggestions/issue-84700.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84700.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84700.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84700.stderr?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -0,0 +1,21 @@\n+error[E0532]: expected tuple struct or tuple variant, found unit variant `FarmAnimal::Cow`\n+  --> $DIR/issue-84700.rs:15:9\n+   |\n+LL |     Cow,\n+   |     --- `FarmAnimal::Cow` defined here\n+...\n+LL |         FarmAnimal::Cow(_) => \"moo\".to_string(),\n+   |         ^^^^^^^^^^^^^^^^^^ help: use this syntax instead: `FarmAnimal::Cow`\n+\n+error[E0532]: expected tuple struct or tuple variant, found struct variant `FarmAnimal::Chicken`\n+  --> $DIR/issue-84700.rs:17:9\n+   |\n+LL |     Chicken { num_eggs: usize },\n+   |     --------------------------- `FarmAnimal::Chicken` defined here\n+...\n+LL |         FarmAnimal::Chicken(_) => \"cluck, cluck!\".to_string(),\n+   |         ^^^^^^^^^^^^^^^^^^^^^^ help: use struct pattern syntax instead: `FarmAnimal::Chicken { num_eggs }`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0532`."}, {"sha": "270233c0c97723acc8b785e842141c1596a86b4a", "filename": "src/test/ui/variance/variance-unused-type-param.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-type-param.stderr?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -5,6 +5,7 @@ LL | struct SomeStruct<A> { x: u32 }\n    |                   ^ unused parameter\n    |\n    = help: consider removing `A`, referring to it in a field, or using a marker such as `PhantomData`\n+   = help: if you intended `A` to be a const parameter, use `const A: usize` instead\n \n error[E0392]: parameter `A` is never used\n   --> $DIR/variance-unused-type-param.rs:9:15\n@@ -13,6 +14,7 @@ LL | enum SomeEnum<A> { Nothing }\n    |               ^ unused parameter\n    |\n    = help: consider removing `A`, referring to it in a field, or using a marker such as `PhantomData`\n+   = help: if you intended `A` to be a const parameter, use `const A: usize` instead\n \n error[E0392]: parameter `T` is never used\n   --> $DIR/variance-unused-type-param.rs:13:15\n@@ -21,6 +23,7 @@ LL | enum ListCell<T> {\n    |               ^ unused parameter\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n+   = help: if you intended `T` to be a const parameter, use `const T: usize` instead\n \n error: aborting due to 3 previous errors\n "}, {"sha": "5ad27bb14501feb8988331dfaefd1dee909e6431", "filename": "src/tools/clippy/tests/ui/wildcard_enum_match_arm.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_enum_match_arm.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_enum_match_arm.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_enum_match_arm.fixed?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -77,7 +77,7 @@ fn main() {\n     let error_kind = ErrorKind::NotFound;\n     match error_kind {\n         ErrorKind::NotFound => {},\n-        ErrorKind::PermissionDenied | ErrorKind::ConnectionRefused | ErrorKind::ConnectionReset | ErrorKind::ConnectionAborted | ErrorKind::NotConnected | ErrorKind::AddrInUse | ErrorKind::AddrNotAvailable | ErrorKind::BrokenPipe | ErrorKind::AlreadyExists | ErrorKind::WouldBlock | ErrorKind::InvalidInput | ErrorKind::InvalidData | ErrorKind::TimedOut | ErrorKind::WriteZero | ErrorKind::Interrupted | ErrorKind::Other | ErrorKind::UnexpectedEof | ErrorKind::Unsupported | _ => {},\n+        ErrorKind::PermissionDenied | ErrorKind::ConnectionRefused | ErrorKind::ConnectionReset | ErrorKind::ConnectionAborted | ErrorKind::NotConnected | ErrorKind::AddrInUse | ErrorKind::AddrNotAvailable | ErrorKind::BrokenPipe | ErrorKind::AlreadyExists | ErrorKind::WouldBlock | ErrorKind::InvalidInput | ErrorKind::InvalidData | ErrorKind::TimedOut | ErrorKind::WriteZero | ErrorKind::Interrupted | ErrorKind::Other | ErrorKind::UnexpectedEof | ErrorKind::Unsupported | ErrorKind::OutOfMemory | _ => {},\n     }\n     match error_kind {\n         ErrorKind::NotFound => {},\n@@ -99,6 +99,7 @@ fn main() {\n         ErrorKind::Other => {},\n         ErrorKind::UnexpectedEof => {},\n         ErrorKind::Unsupported => {},\n+        ErrorKind::OutOfMemory => {},\n         _ => {},\n     }\n }"}, {"sha": "adca0738bba5b3cdee4e8255d79916ed98a3912c", "filename": "src/tools/clippy/tests/ui/wildcard_enum_match_arm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_enum_match_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_enum_match_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_enum_match_arm.rs?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -99,6 +99,7 @@ fn main() {\n         ErrorKind::Other => {},\n         ErrorKind::UnexpectedEof => {},\n         ErrorKind::Unsupported => {},\n+        ErrorKind::OutOfMemory => {},\n         _ => {},\n     }\n }"}, {"sha": "73f6a4a80c960d36c8611b63fca88f59d1103c5d", "filename": "src/tools/clippy/tests/ui/wildcard_enum_match_arm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_enum_match_arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59f551a2dcf57c0d3d96ac5ef60e000524210469/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_enum_match_arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_enum_match_arm.stderr?ref=59f551a2dcf57c0d3d96ac5ef60e000524210469", "patch": "@@ -32,7 +32,7 @@ error: wildcard matches known variants and will also match future added variants\n   --> $DIR/wildcard_enum_match_arm.rs:80:9\n    |\n LL |         _ => {},\n-   |         ^ help: try this: `ErrorKind::PermissionDenied | ErrorKind::ConnectionRefused | ErrorKind::ConnectionReset | ErrorKind::ConnectionAborted | ErrorKind::NotConnected | ErrorKind::AddrInUse | ErrorKind::AddrNotAvailable | ErrorKind::BrokenPipe | ErrorKind::AlreadyExists | ErrorKind::WouldBlock | ErrorKind::InvalidInput | ErrorKind::InvalidData | ErrorKind::TimedOut | ErrorKind::WriteZero | ErrorKind::Interrupted | ErrorKind::Other | ErrorKind::UnexpectedEof | ErrorKind::Unsupported | _`\n+   |         ^ help: try this: `ErrorKind::PermissionDenied | ErrorKind::ConnectionRefused | ErrorKind::ConnectionReset | ErrorKind::ConnectionAborted | ErrorKind::NotConnected | ErrorKind::AddrInUse | ErrorKind::AddrNotAvailable | ErrorKind::BrokenPipe | ErrorKind::AlreadyExists | ErrorKind::WouldBlock | ErrorKind::InvalidInput | ErrorKind::InvalidData | ErrorKind::TimedOut | ErrorKind::WriteZero | ErrorKind::Interrupted | ErrorKind::Other | ErrorKind::UnexpectedEof | ErrorKind::Unsupported | ErrorKind::OutOfMemory | _`\n \n error: aborting due to 5 previous errors\n "}]}