{"sha": "9cbe99488bbeb8bdd742a4d15fe484ee665f9363", "node_id": "C_kwDOAAsO6NoAKDljYmU5OTQ4OGJiZWI4YmRkNzQyYTRkMTVmZTQ4NGVlNjY1ZjkzNjM", "commit": {"author": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2022-02-05T06:38:29Z"}, "committer": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2022-02-05T07:15:02Z"}, "message": "Add more tests for io::Error packing, and fix some comments that weren't quite accurate anymore", "tree": {"sha": "a845067514b76ef271042efc851213780d56411b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a845067514b76ef271042efc851213780d56411b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cbe99488bbeb8bdd742a4d15fe484ee665f9363", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEh0+qV0hta6XFe2D54u/UMJ4RyKgFAmH+I/YACgkQ4u/UMJ4R\nyKiZuBAAj9ZkJQ2qp2/TQphGSedZDINWRzpn0OA99VEPGVcxYxMvhkID/2EBqNuR\na/6IpwbTEAzuSnDy/BQfpdV3H+gZ6kPFgaBDx5pqNJYWzhgroNtSnN027rZ8Xy23\nN6RFKFnGHiTdnPPptzQxxO7auTXQ2X3QaArmJ0EpQZtHcqZGf7JRv4aY6LDBGsaR\nicaVMoO9zHqTkPzfmY6UZItJY0GoyvCPxKBYw776lqOC9/s5lqiAz3k+TzlhnzTW\n7a46CeYza+TCq1CI/cYBK7ziMV8Mt/31m7rI9OsIOZo7XNXCVtkYNHwmDps8Ok/i\n4qLze2DXfmojUPRxfE2OyVjbL7o+XodUk1Omy1KDWXF4byWn5BzwkFGNhDo8KukW\n/73UxRInoCCsfHWB7QlzWVuwaMndzwW8qrugiCR5hyE7C02RYxKU7QJatwIuL/T6\n8RDJavmnxcbtSozr2yqLIuB8HsIkOlq1dyuMeERDjVna+YkMuPB7bamhkAnomcNn\nFxYhi/ax0O4unZIEEkgZCYUbJY49prZKx1LyOgy0wbiSF7rQqEFeOJeqoLtSrt1K\n2JVLKui7hAVbnrzB9SrJ4z6ssJTIOljFxPHuIn4DhTZ2HgVrrlU9xuh+eT4QbpEl\nytl5CfL4y4Bm0VX9oKvN/8fC2NZ/Sime+p0d48md4dplwfL1RMY=\n=XtTm\n-----END PGP SIGNATURE-----", "payload": "tree a845067514b76ef271042efc851213780d56411b\nparent a17a896d097796af88cc184b391159c74958b9b3\nauthor Thom Chiovoloni <chiovolonit@gmail.com> 1644043109 -0800\ncommitter Thom Chiovoloni <chiovolonit@gmail.com> 1644045302 -0800\n\nAdd more tests for io::Error packing, and fix some comments that weren't quite accurate anymore\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cbe99488bbeb8bdd742a4d15fe484ee665f9363", "html_url": "https://github.com/rust-lang/rust/commit/9cbe99488bbeb8bdd742a4d15fe484ee665f9363", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cbe99488bbeb8bdd742a4d15fe484ee665f9363/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a17a896d097796af88cc184b391159c74958b9b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a17a896d097796af88cc184b391159c74958b9b3", "html_url": "https://github.com/rust-lang/rust/commit/a17a896d097796af88cc184b391159c74958b9b3"}], "stats": {"total": 117, "additions": 101, "deletions": 16}, "files": [{"sha": "4b55324a2424cf45d424e44154b291db5ed3bd20", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cbe99488bbeb8bdd742a4d15fe484ee665f9363/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cbe99488bbeb8bdd742a4d15fe484ee665f9363/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=9cbe99488bbeb8bdd742a4d15fe484ee665f9363", "patch": "@@ -76,6 +76,9 @@ impl fmt::Debug for Error {\n     }\n }\n \n+// Only derive debug in tests, to make sure it\n+// doesn't accidentally get printed.\n+#[cfg_attr(test, derive(Debug))]\n enum ErrorData<C> {\n     Os(i32),\n     Simple(ErrorKind),\n@@ -98,6 +101,7 @@ enum ErrorData<C> {\n // if `error/repr_bitpacked.rs` is in use \u2014\u00a0for the unpacked repr it doesn't\n // matter at all)\n #[repr(align(4))]\n+#[derive(Debug)]\n pub(crate) struct SimpleMessage {\n     kind: ErrorKind,\n     message: &'static str,"}, {"sha": "f317368e8e59dec5138f35fd71dda97c03f38863", "filename": "library/std/src/io/error/repr_bitpacked.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9cbe99488bbeb8bdd742a4d15fe484ee665f9363/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cbe99488bbeb8bdd742a4d15fe484ee665f9363/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs?ref=9cbe99488bbeb8bdd742a4d15fe484ee665f9363", "patch": "@@ -6,9 +6,9 @@\n //! a more clever manner than `rustc`'s default layout algorithm would).\n //!\n //! Conceptually, it stores the same data as the \"unpacked\" equivalent we use on\n-//! other targets. Specifically, you can imagine it as an optimized following\n-//! data (which is equivalent to what's stored by `repr_unpacked::Repr`, e.g.\n-//! `super::ErrorData<Box<Custom>>`):\n+//! other targets. Specifically, you can imagine it as an optimized version of\n+//! the following enum (which is roughly equivalent to what's stored by\n+//! `repr_unpacked::Repr`, e.g. `super::ErrorData<Box<Custom>>`):\n //!\n //! ```ignore (exposition-only)\n //! enum ErrorData {\n@@ -135,7 +135,16 @@ impl Repr {\n         // (rather than `ptr::wrapping_add`), but it's unclear this would give\n         // any benefit, so we just use `wrapping_add` instead.\n         let tagged = p.wrapping_add(TAG_CUSTOM).cast::<()>();\n-        // Safety: the above safety comment also means the result can't be null.\n+        // Safety: `TAG_CUSTOM + p` is the same as `TAG_CUSTOM | p`,\n+        // because `p`'s alignment means it isn't allowed to have any of the\n+        // `TAG_BITS` set (you can verify that addition and bitwise-or are the\n+        // same when the operands have no bits in common using a truth table).\n+        //\n+        // Then, `TAG_CUSTOM | p` is not zero, as that would require\n+        // `TAG_CUSTOM` and `p` both be zero, and neither is (as `p` came from a\n+        // box, and `TAG_CUSTOM` just... isn't zero -- it's `0b01`). Therefore,\n+        // `TAG_CUSTOM + p` isn't zero and so `tagged` can't be, and the\n+        // `new_unchecked` is safe.\n         let res = Self(unsafe { NonNull::new_unchecked(tagged) });\n         // quickly smoke-check we encoded the right thing (This generally will\n         // only run in libstd's tests, unless the user uses -Zbuild-std)\n@@ -342,12 +351,25 @@ static_assert!(@usize_eq: size_of::<NonNull<()>>(), size_of::<usize>());\n static_assert!(@usize_eq: size_of::<&'static SimpleMessage>(), 8);\n static_assert!(@usize_eq: size_of::<Box<Custom>>(), 8);\n \n-// And they must have >= 4 byte alignment.\n-static_assert!(align_of::<SimpleMessage>() >= 4);\n-static_assert!(align_of::<Custom>() >= 4);\n+static_assert!((TAG_MASK + 1).is_power_of_two());\n+// And they must have sufficient alignment.\n+static_assert!(align_of::<SimpleMessage>() >= TAG_MASK + 1);\n+static_assert!(align_of::<Custom>() >= TAG_MASK + 1);\n+\n+static_assert!(@usize_eq: (TAG_MASK & TAG_SIMPLE_MESSAGE), TAG_SIMPLE_MESSAGE);\n+static_assert!(@usize_eq: (TAG_MASK & TAG_CUSTOM), TAG_CUSTOM);\n+static_assert!(@usize_eq: (TAG_MASK & TAG_OS), TAG_OS);\n+static_assert!(@usize_eq: (TAG_MASK & TAG_SIMPLE), TAG_SIMPLE);\n \n-// This is obviously true (`TAG_CUSTOM` is `0b01`), but our implementation of\n-// `Repr::new_custom` and such would be wrong if it were not, so we check.\n+// This is obviously true (`TAG_CUSTOM` is `0b01`), but in `Repr::new_custom` we\n+// offset a pointer by this value, and expect it to both be within the same\n+// object, and to not wrap around the address space. See the comment in that\n+// function for further details.\n+//\n+// Actually, at the moment we use `ptr::wrapping_add`, not `ptr::add`, so this\n+// check isn't needed for that one, although the assertion that we don't\n+// actually wrap around in that wrapping_add does simplify the safety reasoning\n+// elsewhere considerably.\n static_assert!(size_of::<Custom>() >= TAG_CUSTOM);\n \n // These two store a payload which is allowed to be zero, so they must be"}, {"sha": "c2c51553b208c25253eff217e4891d2f9b2f5dce", "filename": "library/std/src/io/error/tests.rs", "status": "modified", "additions": 66, "deletions": 7, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/9cbe99488bbeb8bdd742a4d15fe484ee665f9363/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cbe99488bbeb8bdd742a4d15fe484ee665f9363/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs?ref=9cbe99488bbeb8bdd742a4d15fe484ee665f9363", "patch": "@@ -1,4 +1,5 @@\n-use super::{const_io_error, Custom, Error, ErrorKind, Repr};\n+use super::{const_io_error, Custom, Error, ErrorData, ErrorKind, Repr};\n+use crate::assert_matches::assert_matches;\n use crate::error;\n use crate::fmt;\n use crate::mem::size_of;\n@@ -69,16 +70,74 @@ fn test_const() {\n }\n \n #[test]\n-fn test_error_packing() {\n+fn test_os_packing() {\n     for code in -20i32..20i32 {\n         let e = Error::from_raw_os_error(code);\n         assert_eq!(e.raw_os_error(), Some(code));\n+        assert_matches!(\n+            e.repr.data(),\n+            ErrorData::Os(c) if c == code,\n+        );\n     }\n+}\n+\n+#[test]\n+fn test_errorkind_packing() {\n     assert_eq!(Error::from(ErrorKind::NotFound).kind(), ErrorKind::NotFound);\n+    assert_eq!(Error::from(ErrorKind::PermissionDenied).kind(), ErrorKind::PermissionDenied);\n     assert_eq!(Error::from(ErrorKind::Uncategorized).kind(), ErrorKind::Uncategorized);\n-    assert_eq!(Error::from(ErrorKind::NotFound).kind(), ErrorKind::NotFound);\n-    assert_eq!(Error::from(ErrorKind::Uncategorized).kind(), ErrorKind::Uncategorized);\n-    let dunno = const_io_error!(ErrorKind::Uncategorized, \"dunno\");\n-    assert_eq!(dunno.kind(), ErrorKind::Uncategorized);\n-    assert!(format!(\"{:?}\", dunno).contains(\"dunno\"))\n+    // Check that the innards look like like what we want.\n+    assert_matches!(\n+        Error::from(ErrorKind::OutOfMemory).repr.data(),\n+        ErrorData::Simple(ErrorKind::OutOfMemory),\n+    );\n+}\n+\n+#[test]\n+fn test_simple_message_packing() {\n+    use super::{ErrorKind::*, SimpleMessage};\n+    macro_rules! check_simple_msg {\n+        ($err:expr, $kind:ident, $msg:literal) => {{\n+            let e = &$err;\n+            // Check that the public api is right.\n+            assert_eq!(e.kind(), $kind);\n+            assert!(format!(\"{:?}\", e).contains($msg));\n+            // and we got what we expected\n+            assert_matches!(\n+                e.repr.data(),\n+                ErrorData::SimpleMessage(SimpleMessage { kind: $kind, message: $msg })\n+            );\n+        }};\n+    }\n+\n+    let not_static = const_io_error!(Uncategorized, \"not a constant!\");\n+    check_simple_msg!(not_static, Uncategorized, \"not a constant!\");\n+\n+    const CONST: Error = const_io_error!(NotFound, \"definitely a constant!\");\n+    check_simple_msg!(CONST, NotFound, \"definitely a constant!\");\n+\n+    static STATIC: Error = const_io_error!(BrokenPipe, \"a constant, sort of!\");\n+    check_simple_msg!(STATIC, BrokenPipe, \"a constant, sort of!\");\n+}\n+\n+#[derive(Debug, PartialEq)]\n+struct Bojji(bool);\n+impl error::Error for Bojji {}\n+impl fmt::Display for Bojji {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"ah! {:?}\", self)\n+    }\n+}\n+\n+#[test]\n+fn test_custom_error_packing() {\n+    use super::Custom;\n+    let test = Error::new(ErrorKind::Uncategorized, Bojji(true));\n+    assert_matches!(\n+        test.repr.data(),\n+        ErrorData::Custom(Custom {\n+            kind: ErrorKind::Uncategorized,\n+            error,\n+        }) if error.downcast_ref::<Bojji>().as_deref() == Some(&Bojji(true)),\n+    );\n }"}]}