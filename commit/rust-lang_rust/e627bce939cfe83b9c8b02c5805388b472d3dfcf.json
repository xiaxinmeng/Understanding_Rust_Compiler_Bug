{"sha": "e627bce939cfe83b9c8b02c5805388b472d3dfcf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2MjdiY2U5MzljZmU4M2I5YzhiMDJjNTgwNTM4OGI0NzJkM2RmY2Y=", "commit": {"author": {"name": "Eunchong Yu", "email": "kroisse@gmail.com", "date": "2014-03-17T06:30:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-18T20:49:16Z"}, "message": "Add impl IntoStr for ::std::vec_ng::Vec<Ascii>", "tree": {"sha": "89a97a44300dd7b0cbc41e0beaf1e41856a07e2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89a97a44300dd7b0cbc41e0beaf1e41856a07e2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e627bce939cfe83b9c8b02c5805388b472d3dfcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e627bce939cfe83b9c8b02c5805388b472d3dfcf", "html_url": "https://github.com/rust-lang/rust/commit/e627bce939cfe83b9c8b02c5805388b472d3dfcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e627bce939cfe83b9c8b02c5805388b472d3dfcf/comments", "author": {"login": "Kroisse", "id": 543661, "node_id": "MDQ6VXNlcjU0MzY2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/543661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kroisse", "html_url": "https://github.com/Kroisse", "followers_url": "https://api.github.com/users/Kroisse/followers", "following_url": "https://api.github.com/users/Kroisse/following{/other_user}", "gists_url": "https://api.github.com/users/Kroisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kroisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kroisse/subscriptions", "organizations_url": "https://api.github.com/users/Kroisse/orgs", "repos_url": "https://api.github.com/users/Kroisse/repos", "events_url": "https://api.github.com/users/Kroisse/events{/privacy}", "received_events_url": "https://api.github.com/users/Kroisse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22655120332293901f8d4cb822e10a8aa6ee3697", "url": "https://api.github.com/repos/rust-lang/rust/commits/22655120332293901f8d4cb822e10a8aa6ee3697", "html_url": "https://github.com/rust-lang/rust/commit/22655120332293901f8d4cb822e10a8aa6ee3697"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "3ca08797dd1fe259ead6ccf81cbb6bbc57386105", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e627bce939cfe83b9c8b02c5805388b472d3dfcf/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e627bce939cfe83b9c8b02c5805388b472d3dfcf/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=e627bce939cfe83b9c8b02c5805388b472d3dfcf", "patch": "@@ -20,6 +20,7 @@ use cast;\n use fmt;\n use iter::Iterator;\n use vec::{ImmutableVector, MutableVector, Vector};\n+use vec_ng::Vec;\n use option::{Option, Some, None};\n \n /// Datatype to hold one ascii character. It wraps a `u8`, with the highest bit always zero.\n@@ -305,6 +306,14 @@ impl IntoStr for ~[Ascii] {\n     }\n }\n \n+impl IntoStr for Vec<Ascii> {\n+    #[inline]\n+    fn into_str(self) -> ~str {\n+        let v: ~[Ascii] = self.move_iter().collect();\n+        unsafe { cast::transmute(v) }\n+    }\n+}\n+\n /// Trait to convert to an owned byte array by consuming self\n pub trait IntoBytes {\n     /// Converts to an owned byte array by consuming self\n@@ -473,13 +482,18 @@ mod tests {\n     use super::*;\n     use str::from_char;\n     use char::from_u32;\n+    use vec_ng::Vec;\n \n     macro_rules! v2ascii (\n         ( [$($e:expr),*]) => (&[$(Ascii{chr:$e}),*]);\n         (&[$($e:expr),*]) => (&[$(Ascii{chr:$e}),*]);\n         (~[$($e:expr),*]) => (~[$(Ascii{chr:$e}),*]);\n     )\n \n+    macro_rules! vec2ascii (\n+        ($($e:expr),*) => (Vec::from_slice([$(Ascii{chr:$e}),*]));\n+    )\n+\n     #[test]\n     fn test_ascii() {\n         assert_eq!(65u8.to_ascii().to_byte(), 65u8);\n@@ -535,6 +549,17 @@ mod tests {\n \n     }\n \n+    #[test]\n+    fn test_ascii_vec_ng() {\n+        assert_eq!(Vec::from_slice(\"abCDef&?#\".to_ascii().to_lower()).into_str(), ~\"abcdef&?#\");\n+        assert_eq!(Vec::from_slice(\"abCDef&?#\".to_ascii().to_upper()).into_str(), ~\"ABCDEF&?#\");\n+\n+        assert_eq!(Vec::from_slice(\"\".to_ascii().to_lower()).into_str(), ~\"\");\n+        assert_eq!(Vec::from_slice(\"YMCA\".to_ascii().to_lower()).into_str(), ~\"ymca\");\n+        assert_eq!(Vec::from_slice(\"abcDEFxyz:.;\".to_ascii().to_upper()).into_str(),\n+                   ~\"ABCDEFXYZ:.;\");\n+    }\n+\n     #[test]\n     fn test_owned_ascii_vec() {\n         assert_eq!((~\"( ;\").into_ascii(), v2ascii!(~[40, 32, 59]));\n@@ -550,6 +575,7 @@ mod tests {\n     #[test]\n     fn test_ascii_into_str() {\n         assert_eq!(v2ascii!(~[40, 32, 59]).into_str(), ~\"( ;\");\n+        assert_eq!(vec2ascii!(40, 32, 59).into_str(), ~\"( ;\");\n     }\n \n     #[test]"}]}