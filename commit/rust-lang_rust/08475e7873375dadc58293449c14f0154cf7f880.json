{"sha": "08475e7873375dadc58293449c14f0154cf7f880", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NDc1ZTc4NzMzNzVkYWRjNTgyOTM0NDljMTRmMDE1NGNmN2Y4ODA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-08T12:13:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-08T12:13:26Z"}, "message": "Rollup merge of #82857 - pierwill:edit-ast-lowering-lib, r=Dylan-DPC\n\nEdit ructc_ast_lowering docs\n\nFixes some punctuation and formatting; also makes some small wording changes.", "tree": {"sha": "9a6e355f62b412d7bd554491f45c3b83df9d8238", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a6e355f62b412d7bd554491f45c3b83df9d8238"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08475e7873375dadc58293449c14f0154cf7f880", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgRhTmCRBK7hj4Ov3rIwAAdHIIAF7YI0o3JynglZ3Pe1XmXdWG\nTRqkWL0rWqDeoZok3YbPuu+XS1O1+cerBWG3glCHcJ3tMKbZQzvUtjZNWHUdnQvi\nR+01R/umQtgZfIMe8BKGRbt5MOB+nUGbpOo3ql38wxPOIxGAl9nxWWC4LrchAE49\n1NfjtAw8CRbj7PGr92agh4SE59oQXr82A2N+afkt6HVWEADzkeooXBUCMfCPesS+\n/3w9nqAWxSJ/ORWTpHg3NJIu/YzPH/d7HTmhjZSBNMiEa+CRQIYe7/nc79I4YV6J\nyuumH+fu67PuaYwkKh0fIYUsid039FoFgC7kaOrXIFwXMjw0J4fJe6/ic+5PzHA=\n=QXTV\n-----END PGP SIGNATURE-----\n", "payload": "tree 9a6e355f62b412d7bd554491f45c3b83df9d8238\nparent 041bc04be43ebcb6c1e408190c68c150d97eabf1\nparent 6b2eb0e6c67407aac50577eea443a9539d9c8f9a\nauthor Dylan DPC <dylan.dpc@gmail.com> 1615205606 +0100\ncommitter GitHub <noreply@github.com> 1615205606 +0100\n\nRollup merge of #82857 - pierwill:edit-ast-lowering-lib, r=Dylan-DPC\n\nEdit ructc_ast_lowering docs\n\nFixes some punctuation and formatting; also makes some small wording changes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08475e7873375dadc58293449c14f0154cf7f880", "html_url": "https://github.com/rust-lang/rust/commit/08475e7873375dadc58293449c14f0154cf7f880", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08475e7873375dadc58293449c14f0154cf7f880/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "041bc04be43ebcb6c1e408190c68c150d97eabf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/041bc04be43ebcb6c1e408190c68c150d97eabf1", "html_url": "https://github.com/rust-lang/rust/commit/041bc04be43ebcb6c1e408190c68c150d97eabf1"}, {"sha": "6b2eb0e6c67407aac50577eea443a9539d9c8f9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b2eb0e6c67407aac50577eea443a9539d9c8f9a", "html_url": "https://github.com/rust-lang/rust/commit/6b2eb0e6c67407aac50577eea443a9539d9c8f9a"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "756caf18ec5ebb37b856ed34ad0836fc8f64e092", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/08475e7873375dadc58293449c14f0154cf7f880/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08475e7873375dadc58293449c14f0154cf7f880/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=08475e7873375dadc58293449c14f0154cf7f880", "patch": "@@ -12,7 +12,7 @@\n //! For the simpler lowering steps, IDs and spans should be preserved. Unlike\n //! expansion we do not preserve the process of lowering in the spans, so spans\n //! should not be modified here. When creating a new node (as opposed to\n-//! 'folding' an existing one), then you create a new ID using `next_id()`.\n+//! \"folding\" an existing one), create a new ID using `next_id()`.\n //!\n //! You must ensure that IDs are unique. That means that you should only use the\n //! ID from an AST node in a single HIR node (you can assume that AST node-IDs\n@@ -26,7 +26,7 @@\n //! span and spans don't need to be kept in order, etc. Where code is preserved\n //! by lowering, it should have the same span as in the AST. Where HIR nodes are\n //! new it is probably best to give a span for the whole AST node being lowered.\n-//! All nodes should have real spans, don't use dummy spans. Tools are likely to\n+//! All nodes should have real spans; don't use dummy spans. Tools are likely to\n //! get confused if the spans from leaf AST nodes occur in multiple places\n //! in the HIR, especially for multiple identifiers.\n \n@@ -95,7 +95,7 @@ struct LoweringContext<'a, 'hir: 'a> {\n     /// librustc_middle is independent of the parser, we use dynamic dispatch here.\n     nt_to_tokenstream: NtToTokenstream,\n \n-    /// Used to allocate HIR nodes\n+    /// Used to allocate HIR nodes.\n     arena: &'hir Arena<'hir>,\n \n     /// The items being lowered are collected here.\n@@ -128,7 +128,7 @@ struct LoweringContext<'a, 'hir: 'a> {\n     is_in_trait_impl: bool,\n     is_in_dyn_type: bool,\n \n-    /// What to do when we encounter either an \"anonymous lifetime\n+    /// What to do when we encounter an \"anonymous lifetime\n     /// reference\". The term \"anonymous\" is meant to encompass both\n     /// `'_` lifetimes as well as fully elided cases where nothing is\n     /// written at all (e.g., `&T` or `std::cell::Ref<T>`).\n@@ -238,11 +238,13 @@ enum ImplTraitContext<'b, 'a> {\n     OtherOpaqueTy {\n         /// Set of lifetimes that this opaque type can capture, if it uses\n         /// them. This includes lifetimes bound since we entered this context.\n-        /// For example, in\n+        /// For example:\n         ///\n+        /// ```\n         /// type A<'b> = impl for<'a> Trait<'a, Out = impl Sized + 'a>;\n+        /// ```\n         ///\n-        /// the inner opaque type captures `'a` because it uses it. It doesn't\n+        /// Here the inner opaque type captures `'a` because it uses it. It doesn't\n         /// need to capture `'b` because it already inherits the lifetime\n         /// parameter from `A`.\n         // FIXME(impl_trait): but `required_region_bounds` will ICE later\n@@ -2110,7 +2112,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::FnRetTy::Return(self.arena.alloc(opaque_ty))\n     }\n \n-    /// Transforms `-> T` into `Future<Output = T>`\n+    /// Transforms `-> T` into `Future<Output = T>`.\n     fn lower_async_fn_output_type_to_future_bound(\n         &mut self,\n         output: &FnRetTy,"}]}