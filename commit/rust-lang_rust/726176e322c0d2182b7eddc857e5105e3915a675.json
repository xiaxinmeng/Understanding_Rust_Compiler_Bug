{"sha": "726176e322c0d2182b7eddc857e5105e3915a675", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNjE3NmUzMjJjMGQyMTgyYjdlZGRjODU3ZTUxMDVlMzkxNWE2NzU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-04-19T05:14:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-19T05:14:09Z"}, "message": "Merge pull request #4003 from rust-lang/stable-backports\n\nBackport some things to stable", "tree": {"sha": "8fa3612fc6c1be967195d6816906ba21207767e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fa3612fc6c1be967195d6816906ba21207767e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/726176e322c0d2182b7eddc857e5105e3915a675", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcuVkhCRBK7hj4Ov3rIwAAdHIIAKPqqfr/TzMSjNe8RDAo3EwC\nNvoXOZzqMrw6NEEC7mT0VENSJpyJYgZeMb9bkMqSyXtl+ouzUDuG/7yOKSBy8Xw9\n52Y65pU6LJ+m7GI9KdZIir8n1fdla9RUcbaQygsSxdXNuYDX3uq6wDI5pKbQmaLt\njDTp0uMvhODRLOtSC9X3aidKpCABnv2yClGE5u+rSFQAgQOPvWUlhQNih3trsWIe\nJ6ZSSaIybh3jf7GlgglAkE/BtGksViu4iBn5WRWnwuIwGDourjCx0cI3L/AYkDMJ\nbFK4NGVVEkUjXLGZQaXdBTJoBxJokf3D28vPC0MjEr6/z9piZTQk7IHiiCTtUBE=\n=q3xN\n-----END PGP SIGNATURE-----\n", "payload": "tree 8fa3612fc6c1be967195d6816906ba21207767e7\nparent 1fac38088609747627b07807945224cf1ea642ca\nparent 5ab87dd8568208016a82a7d087292312af786921\nauthor Manish Goregaokar <manishsmail@gmail.com> 1555650849 -0700\ncommitter GitHub <noreply@github.com> 1555650849 -0700\n\nMerge pull request #4003 from rust-lang/stable-backports\n\nBackport some things to stable"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/726176e322c0d2182b7eddc857e5105e3915a675", "html_url": "https://github.com/rust-lang/rust/commit/726176e322c0d2182b7eddc857e5105e3915a675", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/726176e322c0d2182b7eddc857e5105e3915a675/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fac38088609747627b07807945224cf1ea642ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fac38088609747627b07807945224cf1ea642ca", "html_url": "https://github.com/rust-lang/rust/commit/1fac38088609747627b07807945224cf1ea642ca"}, {"sha": "5ab87dd8568208016a82a7d087292312af786921", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ab87dd8568208016a82a7d087292312af786921", "html_url": "https://github.com/rust-lang/rust/commit/5ab87dd8568208016a82a7d087292312af786921"}], "stats": {"total": 88, "additions": 72, "deletions": 16}, "files": [{"sha": "c41f0f5856cec82aaab1d18362ce627aefb14293", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/726176e322c0d2182b7eddc857e5105e3915a675/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/726176e322c0d2182b7eddc857e5105e3915a675/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=726176e322c0d2182b7eddc857e5105e3915a675", "patch": "@@ -47,7 +47,7 @@ rustc_tools_util = { version = \"0.1.1\", path = \"rustc_tools_util\"}\n [dev-dependencies]\n clippy_dev = { version = \"0.0.1\", path = \"clippy_dev\" }\n cargo_metadata = \"0.7.1\"\n-compiletest_rs = \"0.3.18\"\n+compiletest_rs = \"=0.3.18\"\n lazy_static = \"1.0\"\n serde_derive = \"1.0\"\n clippy-mini-macro-test = { version = \"0.2\", path = \"mini-macro\" }"}, {"sha": "59e6ec768fbc271660d5cf1bba64f3698cf97971", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/726176e322c0d2182b7eddc857e5105e3915a675/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/726176e322c0d2182b7eddc857e5105e3915a675/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=726176e322c0d2182b7eddc857e5105e3915a675", "patch": "@@ -129,25 +129,30 @@ fn get_ufcs_type_name(\n     let actual_type_of_self = &cx.tables.node_type(self_arg.hir_id).sty;\n \n     if let Some(trait_id) = cx.tcx.trait_of_item(method_def_id) {\n-        //if the method expectes &self, ufcs requires explicit borrowing so closure can't be removed\n-        return match (expected_type_of_self, actual_type_of_self) {\n-            (ty::Ref(_, _, _), ty::Ref(_, _, _)) => Some(cx.tcx.item_path_str(trait_id)),\n-            (l, r) => match (l, r) {\n-                (ty::Ref(_, _, _), _) | (_, ty::Ref(_, _, _)) => None,\n-                (_, _) => Some(cx.tcx.item_path_str(trait_id)),\n-            },\n-        };\n+        if match_borrow_depth(expected_type_of_self, actual_type_of_self) {\n+            return Some(cx.tcx.item_path_str(trait_id));\n+        }\n     }\n \n     cx.tcx.impl_of_method(method_def_id).and_then(|_| {\n-        //a type may implicitly implement other types methods (e.g. Deref)\n+        //a type may implicitly implement other type's methods (e.g. Deref)\n         if match_types(expected_type_of_self, actual_type_of_self) {\n             return Some(get_type_name(cx, &actual_type_of_self));\n         }\n         None\n     })\n }\n \n+fn match_borrow_depth(lhs: &ty::TyKind<'_>, rhs: &ty::TyKind<'_>) -> bool {\n+    match (lhs, rhs) {\n+        (ty::Ref(_, t1, _), ty::Ref(_, t2, _)) => match_borrow_depth(&t1.sty, &t2.sty),\n+        (l, r) => match (l, r) {\n+            (ty::Ref(_, _, _), _) | (_, ty::Ref(_, _, _)) => false,\n+            (_, _) => true,\n+        },\n+    }\n+}\n+\n fn match_types(lhs: &ty::TyKind<'_>, rhs: &ty::TyKind<'_>) -> bool {\n     match (lhs, rhs) {\n         (ty::Bool, ty::Bool)"}, {"sha": "b5858708796857fa869d3df77ec319f41bd94c0c", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/726176e322c0d2182b7eddc857e5105e3915a675/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/726176e322c0d2182b7eddc857e5105e3915a675/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=726176e322c0d2182b7eddc857e5105e3915a675", "patch": "@@ -150,7 +150,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n \n         let nodeid = cx.tcx.hir().hir_to_node_id(hir_id);\n         self.check_raw_ptr(cx, unsafety, decl, body, nodeid);\n-        self.check_line_number(cx, span);\n+        self.check_line_number(cx, span, body);\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::TraitItem) {\n@@ -181,12 +181,12 @@ impl<'a, 'tcx> Functions {\n         }\n     }\n \n-    fn check_line_number(self, cx: &LateContext<'_, '_>, span: Span) {\n+    fn check_line_number(self, cx: &LateContext<'_, '_>, span: Span, body: &'tcx hir::Body) {\n         if in_external_macro(cx.sess(), span) {\n             return;\n         }\n \n-        let code_snippet = snippet(cx, span, \"..\");\n+        let code_snippet = snippet(cx, body.value.span, \"..\");\n         let mut line_count: u64 = 0;\n         let mut in_comment = false;\n         let mut code_in_line;"}, {"sha": "633105ff60bb73959c1ba000442aeb3e35278a39", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/726176e322c0d2182b7eddc857e5105e3915a675/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/726176e322c0d2182b7eddc857e5105e3915a675/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=726176e322c0d2182b7eddc857e5105e3915a675", "patch": "@@ -1,8 +1,9 @@\n use crate::utils::{is_entrypoint_fn, span_lint};\n+use if_chain::if_chain;\n use rustc::hir;\n use rustc::hir::intravisit::FnKind;\n use rustc::hir::{Body, Constness, FnDecl, HirId};\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, lint_array};\n use rustc_mir::transform::qualify_min_const_fn::is_min_const_fn;\n use syntax_pos::Span;\n@@ -82,7 +83,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n     ) {\n         let def_id = cx.tcx.hir().local_def_id_from_hir_id(hir_id);\n \n-        if is_entrypoint_fn(cx, def_id) {\n+        if in_external_macro(cx.tcx.sess, span) || is_entrypoint_fn(cx, def_id) {\n             return;\n         }\n \n@@ -95,7 +96,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n                 }\n             },\n             FnKind::Method(_, sig, ..) => {\n-                if already_const(sig.header) {\n+                if is_trait_method(cx, hir_id) || already_const(sig.header) {\n                     return;\n                 }\n             },\n@@ -114,6 +115,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n     }\n }\n \n+fn is_trait_method(cx: &LateContext<'_, '_>, hir_id: HirId) -> bool {\n+    // Get the implemented trait for the current function\n+    let parent_impl = cx.tcx.hir().get_parent_item(hir_id);\n+    if_chain! {\n+        if parent_impl != hir::CRATE_HIR_ID;\n+        if let hir::Node::Item(item) = cx.tcx.hir().get_by_hir_id(parent_impl);\n+        if let hir::ItemKind::Impl(_, _, _, _, Some(_trait_ref), _, _) = &item.node;\n+        then { return true; }\n+    }\n+    false\n+}\n+\n // We don't have to lint on something that's already `const`\n fn already_const(header: hir::FnHeader) -> bool {\n     header.constness == Constness::Const"}, {"sha": "cdf018cbc88d8426193b2951d64734312df50dc2", "filename": "tests/ui/crashes/ice-3747.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/726176e322c0d2182b7eddc857e5105e3915a675/tests%2Fui%2Fcrashes%2Fice-3747.rs", "raw_url": "https://github.com/rust-lang/rust/raw/726176e322c0d2182b7eddc857e5105e3915a675/tests%2Fui%2Fcrashes%2Fice-3747.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-3747.rs?ref=726176e322c0d2182b7eddc857e5105e3915a675", "patch": "@@ -0,0 +1,17 @@\n+/// Test for https://github.com/rust-lang/rust-clippy/issues/3747\n+\n+macro_rules! a {\n+    ( $pub:tt $($attr:tt)* ) => {\n+        $($attr)* $pub fn say_hello() {}\n+    };\n+}\n+\n+macro_rules! b {\n+    () => {\n+        a! { pub }\n+    };\n+}\n+\n+b! {}\n+\n+fn main() {}"}, {"sha": "f777939c67d2f11261f32ebbafa88c6f1f061920", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/726176e322c0d2182b7eddc857e5105e3915a675/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/726176e322c0d2182b7eddc857e5105e3915a675/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=726176e322c0d2182b7eddc857e5105e3915a675", "patch": "@@ -88,6 +88,14 @@ fn test_redundant_closures_containing_method_calls() {\n     let c = Some(TestStruct { some_ref: &i })\n         .as_ref()\n         .map(|c| c.to_ascii_uppercase());\n+\n+    fn test_different_borrow_levels<T>(t: &[&T])\n+    where\n+        T: TestTrait,\n+    {\n+        t.iter().filter(|x| x.trait_foo_ref());\n+        t.iter().map(|x| x.trait_foo_ref());\n+    }\n }\n \n fn meta<F>(f: F)"}, {"sha": "115cc954dc7860f0287a7419f9a96641a8fa1f01", "filename": "tests/ui/missing_const_for_fn/cant_be_const.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/726176e322c0d2182b7eddc857e5105e3915a675/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/726176e322c0d2182b7eddc857e5105e3915a675/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs?ref=726176e322c0d2182b7eddc857e5105e3915a675", "patch": "@@ -55,3 +55,16 @@ trait Foo {\n         33\n     }\n }\n+\n+// Don't lint in external macros (derive)\n+#[derive(PartialEq, Eq)]\n+struct Point(isize, isize);\n+\n+impl std::ops::Add for Point {\n+    type Output = Self;\n+\n+    // Don't lint in trait impls of derived methods\n+    fn add(self, other: Self) -> Self {\n+        Point(self.0 + other.0, self.1 + other.1)\n+    }\n+}"}]}