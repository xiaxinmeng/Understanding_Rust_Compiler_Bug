{"sha": "363e67273622285a65caa74bb63ecfa04df59055", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2M2U2NzI3MzYyMjI4NWE2NWNhYTc0YmI2M2VjZmEwNGRmNTkwNTU=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-05-23T14:58:23Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-05-27T18:12:13Z"}, "message": "Use adjustments table for allocation lint", "tree": {"sha": "321eef6def46a0e6a0ec519cdff04916976300f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/321eef6def46a0e6a0ec519cdff04916976300f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/363e67273622285a65caa74bb63ecfa04df59055", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/363e67273622285a65caa74bb63ecfa04df59055", "html_url": "https://github.com/rust-lang/rust/commit/363e67273622285a65caa74bb63ecfa04df59055", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/363e67273622285a65caa74bb63ecfa04df59055/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5d4ea84f5f38c230235a2bab142bfb55d6febdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5d4ea84f5f38c230235a2bab142bfb55d6febdc", "html_url": "https://github.com/rust-lang/rust/commit/f5d4ea84f5f38c230235a2bab142bfb55d6febdc"}], "stats": {"total": 35, "additions": 7, "deletions": 28}, "files": [{"sha": "ae60a90c7acd85a7423026da5d71a0ecc0f155a1", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 7, "deletions": 28, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/363e67273622285a65caa74bb63ecfa04df59055/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/363e67273622285a65caa74bb63ecfa04df59055/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=363e67273622285a65caa74bb63ecfa04df59055", "patch": "@@ -892,14 +892,9 @@ fn lint_session(cx: @mut Context) -> visit::vt<()> {\n }\n \n fn lint_unnecessary_allocations(cx: @mut Context) -> visit::vt<()> {\n-    // If the expression `e` has an allocated type, but `t` dictates that it's\n-    // something like a slice (doesn't need allocation), emit a warning with the\n-    // specified span.\n-    //\n-    // Currently, this only applies to string and vector literals with sigils in\n-    // front. Those can have the sigil removed to get a borrowed pointer\n-    // automatically.\n-    fn check(cx: @mut Context, e: @ast::expr, t: ty::t) {\n+    // Warn if string and vector literals with sigils are immediately borrowed.\n+    // Those can have the sigil removed.\n+    fn check(cx: @mut Context, e: @ast::expr) {\n         match e.node {\n             ast::expr_vstore(e2, ast::expr_vstore_uniq) |\n             ast::expr_vstore(e2, ast::expr_vstore_box) => {\n@@ -914,9 +909,9 @@ fn lint_unnecessary_allocations(cx: @mut Context) -> visit::vt<()> {\n             _ => return\n         }\n \n-        match ty::get(t).sty {\n-            ty::ty_estr(ty::vstore_slice(*)) |\n-            ty::ty_evec(_, ty::vstore_slice(*)) => {\n+        match cx.tcx.adjustments.find_copy(&e.id) {\n+            Some(@ty::AutoDerefRef(ty::AutoDerefRef {\n+                autoref: Some(ty::AutoBorrowVec(*)), _ })) => {\n                 cx.span_lint(unnecessary_allocation,\n                              e.span, \"unnecessary allocation, the sigil can be \\\n                                       removed\");\n@@ -927,23 +922,7 @@ fn lint_unnecessary_allocations(cx: @mut Context) -> visit::vt<()> {\n     }\n \n     let visit_expr: @fn(@ast::expr) = |e| {\n-        match e.node {\n-            ast::expr_call(c, ref args, _) => {\n-                let t = ty::node_id_to_type(cx.tcx, c.id);\n-                let s = ty::ty_fn_sig(t);\n-                for vec::each2(*args, s.inputs) |e, t| {\n-                    check(cx, *e, *t);\n-                }\n-            }\n-            ast::expr_method_call(_, _, _, ref args, _) => {\n-                let t = ty::node_id_to_type(cx.tcx, e.callee_id);\n-                let s = ty::ty_fn_sig(t);\n-                for vec::each2(*args, s.inputs) |e, t| {\n-                    check(cx, *e, *t);\n-                }\n-            }\n-            _ => {}\n-        }\n+        check(cx, e);\n     };\n \n     visit::mk_simple_visitor(@visit::SimpleVisitor {"}]}