{"sha": "15f7e818ec83cd8b6a726e625b24e1507d8687ee", "node_id": "C_kwDOAAsO6NoAKDE1ZjdlODE4ZWM4M2NkOGI2YTcyNmU2MjViMjRlMTUwN2Q4Njg3ZWU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-12-01T16:34:40Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-12-17T18:22:14Z"}, "message": "Check all opaque types, even return position impl trait.\n\nWhile not necessary right now, this is the safe choice and will\nbe necessary for lazy TAIT.", "tree": {"sha": "79bb237978e95ec7ea71ee1e2f14f8fd500d328b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79bb237978e95ec7ea71ee1e2f14f8fd500d328b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15f7e818ec83cd8b6a726e625b24e1507d8687ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15f7e818ec83cd8b6a726e625b24e1507d8687ee", "html_url": "https://github.com/rust-lang/rust/commit/15f7e818ec83cd8b6a726e625b24e1507d8687ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15f7e818ec83cd8b6a726e625b24e1507d8687ee/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d07a6ceb4d54ad05d701fa8344468d9a8d707a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d07a6ceb4d54ad05d701fa8344468d9a8d707a5", "html_url": "https://github.com/rust-lang/rust/commit/5d07a6ceb4d54ad05d701fa8344468d9a8d707a5"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "3ac2dfd86695725baef67c696e17f9487ae05578", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/15f7e818ec83cd8b6a726e625b24e1507d8687ee/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f7e818ec83cd8b6a726e625b24e1507d8687ee/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=15f7e818ec83cd8b6a726e625b24e1507d8687ee", "patch": "@@ -626,25 +626,22 @@ pub(super) fn check_opaque_for_cycles<'tcx>(\n ///\n /// Without this check the above code is incorrectly accepted: we would ICE if\n /// some tried, for example, to clone an `Option<X<&mut ()>>`.\n-#[instrument(skip(tcx))]\n+#[instrument(level = \"debug\", skip(tcx))]\n fn check_opaque_meets_bounds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: LocalDefId,\n     substs: SubstsRef<'tcx>,\n     span: Span,\n     origin: &hir::OpaqueTyOrigin,\n ) {\n-    match origin {\n-        // Checked when type checking the function containing them.\n-        hir::OpaqueTyOrigin::FnReturn(..) | hir::OpaqueTyOrigin::AsyncFn(..) => return,\n-        // Can have different predicates to their defining use\n-        hir::OpaqueTyOrigin::TyAlias => {}\n-    }\n-\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-    let param_env = tcx.param_env(def_id);\n+    let defining_use_anchor = match *origin {\n+        hir::OpaqueTyOrigin::FnReturn(did) | hir::OpaqueTyOrigin::AsyncFn(did) => did,\n+        hir::OpaqueTyOrigin::TyAlias => def_id,\n+    };\n+    let param_env = tcx.param_env(defining_use_anchor);\n \n-    tcx.infer_ctxt().with_opaque_type_inference(def_id).enter(move |infcx| {\n+    tcx.infer_ctxt().with_opaque_type_inference(defining_use_anchor).enter(move |infcx| {\n         let inh = Inherited::new(infcx, def_id);\n         let infcx = &inh.infcx;\n         let opaque_ty = tcx.mk_opaque(def_id.to_def_id(), substs);\n@@ -678,10 +675,17 @@ fn check_opaque_meets_bounds<'tcx>(\n             infcx.report_fulfillment_errors(&errors, None, false);\n         }\n \n-        // Finally, resolve all regions. This catches wily misuses of\n-        // lifetime parameters.\n-        let fcx = FnCtxt::new(&inh, param_env, hir_id);\n-        fcx.regionck_item(hir_id, span, FxHashSet::default());\n+        match origin {\n+            // Checked when type checking the function containing them.\n+            hir::OpaqueTyOrigin::FnReturn(..) | hir::OpaqueTyOrigin::AsyncFn(..) => return,\n+            // Can have different predicates to their defining use\n+            hir::OpaqueTyOrigin::TyAlias => {\n+                // Finally, resolve all regions. This catches wily misuses of\n+                // lifetime parameters.\n+                let fcx = FnCtxt::new(&inh, param_env, hir_id);\n+                fcx.regionck_item(hir_id, span, FxHashSet::default());\n+            }\n+        }\n     });\n }\n "}]}