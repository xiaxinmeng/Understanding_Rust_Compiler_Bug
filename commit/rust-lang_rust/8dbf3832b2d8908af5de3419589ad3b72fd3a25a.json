{"sha": "8dbf3832b2d8908af5de3419589ad3b72fd3a25a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkYmYzODMyYjJkODkwOGFmNWRlMzQxOTU4OWFkM2I3MmZkM2EyNWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-31T11:38:52Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-31T11:38:52Z"}, "message": "internal: split database loading time in anaysis-stats into components", "tree": {"sha": "14f10992bc4faf76e109199671218dd92ddf0ee9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14f10992bc4faf76e109199671218dd92ddf0ee9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dbf3832b2d8908af5de3419589ad3b72fd3a25a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dbf3832b2d8908af5de3419589ad3b72fd3a25a", "html_url": "https://github.com/rust-lang/rust/commit/8dbf3832b2d8908af5de3419589ad3b72fd3a25a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dbf3832b2d8908af5de3419589ad3b72fd3a25a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c704f11d2ef82d7517680bba6dd0015d750fca2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c704f11d2ef82d7517680bba6dd0015d750fca2", "html_url": "https://github.com/rust-lang/rust/commit/5c704f11d2ef82d7517680bba6dd0015d750fca2"}], "stats": {"total": 57, "additions": 38, "deletions": 19}, "files": [{"sha": "a2dc842e75b637a4fb61cbc9f175494a845a5f41", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8dbf3832b2d8908af5de3419589ad3b72fd3a25a/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dbf3832b2d8908af5de3419589ad3b72fd3a25a/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=8dbf3832b2d8908af5de3419589ad3b72fd3a25a", "patch": "@@ -20,16 +20,16 @@ use ide_db::base_db::{\n use itertools::Itertools;\n use oorandom::Rand32;\n use profile::{Bytes, StopWatch};\n-use project_model::CargoConfig;\n+use project_model::{CargoConfig, ProjectManifest, ProjectWorkspace};\n use rayon::prelude::*;\n use rustc_hash::FxHashSet;\n use stdx::format_to;\n use syntax::{AstNode, SyntaxNode};\n-use vfs::{Vfs, VfsPath};\n+use vfs::{AbsPathBuf, Vfs, VfsPath};\n \n use crate::cli::{\n     flags,\n-    load_cargo::{load_workspace_at, LoadCargoConfig},\n+    load_cargo::{load_workspace, LoadCargoConfig},\n     print_memory_usage,\n     progress_report::ProgressReport,\n     report_metric, Result, Verbosity,\n@@ -50,18 +50,40 @@ impl flags::AnalysisStats {\n             Rand32::new(seed)\n         };\n \n-        let mut db_load_sw = self.stop_watch();\n         let mut cargo_config = CargoConfig::default();\n         cargo_config.no_sysroot = self.no_sysroot;\n         let load_cargo_config = LoadCargoConfig {\n             load_out_dirs_from_check: !self.disable_build_scripts,\n             with_proc_macro: !self.disable_proc_macros,\n             prefill_caches: false,\n         };\n-        let (host, vfs, _proc_macro) =\n-            load_workspace_at(&self.path, &cargo_config, &load_cargo_config, &|_| {})?;\n+        let no_progress = &|_| ();\n+\n+        let mut db_load_sw = self.stop_watch();\n+\n+        let path = AbsPathBuf::assert(env::current_dir()?.join(&self.path));\n+        let manifest = ProjectManifest::discover_single(&path)?;\n+\n+        let mut workspace = ProjectWorkspace::load(manifest, &cargo_config, no_progress)?;\n+        let metadata_time = db_load_sw.elapsed();\n+\n+        let build_scripts_time = if self.disable_build_scripts {\n+            None\n+        } else {\n+            let mut build_scripts_sw = self.stop_watch();\n+            let bs = workspace.run_build_scripts(&cargo_config, no_progress)?;\n+            workspace.set_build_scripts(bs);\n+            Some(build_scripts_sw.elapsed())\n+        };\n+\n+        let (host, vfs, _proc_macro) = load_workspace(workspace, &load_cargo_config)?;\n         let db = host.raw_database();\n-        eprintln!(\"{:<20} {}\", \"Database loaded:\", db_load_sw.elapsed());\n+        eprint!(\"{:<20} {}\", \"Database loaded:\", db_load_sw.elapsed());\n+        eprint!(\" (metadata {}\", metadata_time);\n+        if let Some(build_scripts_time) = build_scripts_time {\n+            eprint!(\"; build {}\", build_scripts_time);\n+        }\n+        eprintln!(\")\");\n \n         let mut analysis_sw = self.stop_watch();\n         let mut num_crates = 0;"}, {"sha": "9559d352a7a48e74eafad29fc382fd2f83652002", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8dbf3832b2d8908af5de3419589ad3b72fd3a25a/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dbf3832b2d8908af5de3419589ad3b72fd3a25a/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=8dbf3832b2d8908af5de3419589ad3b72fd3a25a", "patch": "@@ -8,7 +8,7 @@ use hir::db::DefDatabase;\n use ide::{AnalysisHost, Change};\n use ide_db::base_db::CrateGraph;\n use proc_macro_api::ProcMacroClient;\n-use project_model::{CargoConfig, ProjectManifest, ProjectWorkspace, WorkspaceBuildScripts};\n+use project_model::{CargoConfig, ProjectManifest, ProjectWorkspace};\n use vfs::{loader::Handle, AbsPath, AbsPathBuf};\n \n use crate::reload::{load_proc_macro, ProjectFolders, SourceRootConfig};\n@@ -31,9 +31,14 @@ pub fn load_workspace_at(\n ) -> Result<(AnalysisHost, vfs::Vfs, Option<ProcMacroClient>)> {\n     let root = AbsPathBuf::assert(std::env::current_dir()?.join(root));\n     let root = ProjectManifest::discover_single(&root)?;\n-    let workspace = ProjectWorkspace::load(root, cargo_config, progress)?;\n+    let mut workspace = ProjectWorkspace::load(root, cargo_config, progress)?;\n \n-    load_workspace(workspace, cargo_config, load_config, progress)\n+    if load_config.load_out_dirs_from_check {\n+        let build_scripts = workspace.run_build_scripts(cargo_config, progress)?;\n+        workspace.set_build_scripts(build_scripts)\n+    }\n+\n+    load_workspace(workspace, load_config)\n }\n \n // Note: Since this function is used by external tools that use rust-analyzer as a library\n@@ -42,10 +47,8 @@ pub fn load_workspace_at(\n // The reason both, `load_workspace_at` and `load_workspace` are `pub` is that some of\n // these tools need access to `ProjectWorkspace`, too, which `load_workspace_at` hides.\n pub fn load_workspace(\n-    mut ws: ProjectWorkspace,\n-    cargo_config: &CargoConfig,\n+    ws: ProjectWorkspace,\n     load_config: &LoadCargoConfig,\n-    progress: &dyn Fn(String),\n ) -> Result<(AnalysisHost, vfs::Vfs, Option<ProcMacroClient>)> {\n     let (sender, receiver) = unbounded();\n     let mut vfs = vfs::Vfs::default();\n@@ -62,12 +65,6 @@ pub fn load_workspace(\n         None\n     };\n \n-    ws.set_build_scripts(if load_config.load_out_dirs_from_check {\n-        ws.run_build_scripts(cargo_config, progress)?\n-    } else {\n-        WorkspaceBuildScripts::default()\n-    });\n-\n     let crate_graph = ws.to_crate_graph(\n         &mut |path: &AbsPath| load_proc_macro(proc_macro_client.as_ref(), path),\n         &mut |path: &AbsPath| {"}]}