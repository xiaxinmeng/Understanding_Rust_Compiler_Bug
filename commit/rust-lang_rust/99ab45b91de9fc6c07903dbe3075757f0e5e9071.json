{"sha": "99ab45b91de9fc6c07903dbe3075757f0e5e9071", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YWI0NWI5MWRlOWZjNmMwNzkwM2RiZTMwNzU3NTdmMGU1ZTkwNzE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-08T23:03:38Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-15T20:55:43Z"}, "message": "Handle `Self` restriction needed", "tree": {"sha": "6ff2df433369aa7e61246955db6864a26186950f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ff2df433369aa7e61246955db6864a26186950f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99ab45b91de9fc6c07903dbe3075757f0e5e9071", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99ab45b91de9fc6c07903dbe3075757f0e5e9071", "html_url": "https://github.com/rust-lang/rust/commit/99ab45b91de9fc6c07903dbe3075757f0e5e9071", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99ab45b91de9fc6c07903dbe3075757f0e5e9071/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbd75c8c40a06ac682251b67a548a8252c5d4b18", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbd75c8c40a06ac682251b67a548a8252c5d4b18", "html_url": "https://github.com/rust-lang/rust/commit/dbd75c8c40a06ac682251b67a548a8252c5d4b18"}], "stats": {"total": 113, "additions": 76, "deletions": 37}, "files": [{"sha": "6e111089d06d1c7ed820d7fcaa4aefe9303d5c23", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/99ab45b91de9fc6c07903dbe3075757f0e5e9071/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99ab45b91de9fc6c07903dbe3075757f0e5e9071/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=99ab45b91de9fc6c07903dbe3075757f0e5e9071", "patch": "@@ -986,6 +986,34 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         while let Some(node) = self.tcx.hir().find(hir_id) {\n             debug!(\"suggest_restricting_param_bound node={:?}\", node);\n             match node {\n+                hir::Node::Item(hir::Item {\n+                    kind: hir::ItemKind::Fn(decl, _, generics, _), ..\n+                }) |\n+                hir::Node::TraitItem(hir::TraitItem {\n+                    generics,\n+                    kind: hir::TraitItemKind::Method(hir::MethodSig { decl, .. }, _), ..\n+                }) |\n+                hir::Node::ImplItem(hir::ImplItem {\n+                    generics,\n+                    kind: hir::ImplItemKind::Method(hir::MethodSig { decl, .. }, _), ..\n+                }) if param_ty.name.as_str() == \"Self\" => {\n+                    if !generics.where_clause.predicates.is_empty() {\n+                        err.span_suggestion(\n+                            generics.where_clause.span().unwrap().shrink_to_hi(),\n+                            \"consider further restricting `Self`\",\n+                            format!(\", {}\", trait_ref.to_predicate()),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    } else {\n+                        err.span_suggestion(\n+                            decl.output.span().shrink_to_hi(),\n+                            \"consider further restricting `Self`\",\n+                            format!(\" where {}\", trait_ref.to_predicate()),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    }\n+                    return;\n+                }\n                 hir::Node::Item(hir::Item { kind: hir::ItemKind::Struct(_, generics), span, .. }) |\n                 hir::Node::Item(hir::Item { kind: hir::ItemKind::Enum(_, generics), span, .. }) |\n                 hir::Node::Item(hir::Item { kind: hir::ItemKind::Union(_, generics), span, .. }) |"}, {"sha": "79525e6362f17be5673d3277adc9320273358797", "filename": "src/test/ui/associated-types/associated-types-for-unimpl-trait.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/99ab45b91de9fc6c07903dbe3075757f0e5e9071/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99ab45b91de9fc6c07903dbe3075757f0e5e9071/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr?ref=99ab45b91de9fc6c07903dbe3075757f0e5e9071", "patch": "@@ -2,9 +2,10 @@ error[E0277]: the trait bound `Self: Get` is not satisfied\n   --> $DIR/associated-types-for-unimpl-trait.rs:7:5\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: Get` bound\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-^\n+   |     |                                                        |\n+   |     |                                                        help: consider further restricting `Self`: `where Self: Get`\n+   |     the trait `Get` is not implemented for `Self`\n \n error: aborting due to previous error\n "}, {"sha": "43950defc7cb9bf05a46e304d93469c5ab474987", "filename": "src/test/ui/associated-types/associated-types-no-suitable-supertrait-2.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/99ab45b91de9fc6c07903dbe3075757f0e5e9071/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99ab45b91de9fc6c07903dbe3075757f0e5e9071/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr?ref=99ab45b91de9fc6c07903dbe3075757f0e5e9071", "patch": "@@ -2,9 +2,10 @@ error[E0277]: the trait bound `Self: Get` is not satisfied\n   --> $DIR/associated-types-no-suitable-supertrait-2.rs:17:5\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: Get` bound\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-^\n+   |     |                                                        |\n+   |     |                                                        help: consider further restricting `Self`: `where Self: Get`\n+   |     the trait `Get` is not implemented for `Self`\n \n error: aborting due to previous error\n "}, {"sha": "82e366dbea4b4e5e55758dc945fa109b044c8f60", "filename": "src/test/ui/associated-types/associated-types-no-suitable-supertrait.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/99ab45b91de9fc6c07903dbe3075757f0e5e9071/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99ab45b91de9fc6c07903dbe3075757f0e5e9071/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr?ref=99ab45b91de9fc6c07903dbe3075757f0e5e9071", "patch": "@@ -2,9 +2,10 @@ error[E0277]: the trait bound `Self: Get` is not satisfied\n   --> $DIR/associated-types-no-suitable-supertrait.rs:17:5\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: Get` bound\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-^\n+   |     |                                                        |\n+   |     |                                                        help: consider further restricting `Self`: `where Self: Get`\n+   |     the trait `Get` is not implemented for `Self`\n \n error[E0277]: the trait bound `(T, U): Get` is not satisfied\n   --> $DIR/associated-types-no-suitable-supertrait.rs:22:5"}, {"sha": "54daeca42520853921a41439f0a43f69707cc224", "filename": "src/test/ui/associated-types/associated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/99ab45b91de9fc6c07903dbe3075757f0e5e9071/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99ab45b91de9fc6c07903dbe3075757f0e5e9071/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr?ref=99ab45b91de9fc6c07903dbe3075757f0e5e9071", "patch": "@@ -2,9 +2,10 @@ error[E0277]: the trait bound `Self: Get` is not satisfied\n   --> $DIR/associated-types-projection-to-unrelated-trait-in-method-without-default.rs:9:5\n    |\n LL |     fn okay<U:Get>(&self, foo: U, bar: <Self as Get>::Value);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: Get` bound\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |                                                       |\n+   |     |                                                       help: consider further restricting `Self`: `where Self: Get`\n+   |     the trait `Get` is not implemented for `Self`\n \n error: aborting due to previous error\n "}, {"sha": "31376f2d1be0fa557a43dfdacb6521eaecbf69e5", "filename": "src/test/ui/issues/issue-20005.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99ab45b91de9fc6c07903dbe3075757f0e5e9071/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99ab45b91de9fc6c07903dbe3075757f0e5e9071/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr?ref=99ab45b91de9fc6c07903dbe3075757f0e5e9071", "patch": "@@ -7,13 +7,13 @@ LL |   trait From<Src> {\n LL | /     fn to<Dst>(\n LL | |         self\n LL | |     ) -> <Dst as From<Self>>::Result where Dst: From<Self> {\n+   | |                                                           - help: consider further restricting `Self`: `, Self: std::marker::Sized`\n LL | |         From::from(self)\n LL | |     }\n    | |_____^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where Self: std::marker::Sized` bound\n \n error: aborting due to previous error\n "}, {"sha": "fbc72d063f37cc687a1862ecaf9446f38193852b", "filename": "src/test/ui/issues/issue-27078.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/99ab45b91de9fc6c07903dbe3075757f0e5e9071/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99ab45b91de9fc6c07903dbe3075757f0e5e9071/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr?ref=99ab45b91de9fc6c07903dbe3075757f0e5e9071", "patch": "@@ -2,11 +2,12 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n   --> $DIR/issue-27078.rs:5:12\n    |\n LL |     fn foo(self) -> &'static i32 {\n-   |            ^^^^ doesn't have a size known at compile-time\n+   |            ^^^^                 - help: consider further restricting `Self`: `where Self: std::marker::Sized`\n+   |            |\n+   |            doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where Self: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "7ce249a60b85eefa6bb0f11f5ac8b21c157719b3", "filename": "src/test/ui/type/type-params-in-different-spaces-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99ab45b91de9fc6c07903dbe3075757f0e5e9071/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99ab45b91de9fc6c07903dbe3075757f0e5e9071/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-2.stderr?ref=99ab45b91de9fc6c07903dbe3075757f0e5e9071", "patch": "@@ -4,21 +4,21 @@ error[E0277]: the trait bound `Self: Tr<U>` is not satisfied\n LL |     fn op(_: T) -> Self;\n    |     -------------------- required by `Tr::op`\n ...\n+LL |     fn test<U>(u: U) -> Self {\n+   |                             - help: consider further restricting `Self`: `where Self: Tr<U>`\n LL |         Tr::op(u)\n    |         ^^^^^^ the trait `Tr<U>` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: Tr<U>` bound\n \n error[E0277]: the trait bound `Self: Tr<U>` is not satisfied\n   --> $DIR/type-params-in-different-spaces-2.rs:16:9\n    |\n LL |     fn op(_: T) -> Self;\n    |     -------------------- required by `Tr::op`\n ...\n+LL |     fn test<U>(u: U) -> Self {\n+   |                             - help: consider further restricting `Self`: `where Self: Tr<U>`\n LL |         Tr::op(u)\n    |         ^^^^^^ the trait `Tr<U>` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: Tr<U>` bound\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3efcdf72eee3b08bf25b155a1772860e0da641fa", "filename": "src/test/ui/wf/wf-trait-default-fn-arg.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/99ab45b91de9fc6c07903dbe3075757f0e5e9071/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99ab45b91de9fc6c07903dbe3075757f0e5e9071/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.stderr?ref=99ab45b91de9fc6c07903dbe3075757f0e5e9071", "patch": "@@ -4,14 +4,15 @@ error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n LL |   struct Bar<T:Eq+?Sized> { value: Box<T> }\n    |   ----------------------- required by `Bar`\n ...\n-LL | /     fn bar(&self, x: &Bar<Self>) {\n+LL |       fn bar(&self, x: &Bar<Self>) {\n+   |       ^                            - help: consider further restricting `Self`: `where Self: std::cmp::Eq`\n+   |  _____|\n+   | |\n LL | |\n LL | |         //\n LL | |         // Here, Eq ought to be implemented.\n LL | |     }\n    | |_____^ the trait `std::cmp::Eq` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: std::cmp::Eq` bound\n \n error: aborting due to previous error\n "}, {"sha": "e32630a5a4a400025b55a06774fd01768d910fce", "filename": "src/test/ui/wf/wf-trait-default-fn-ret.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/99ab45b91de9fc6c07903dbe3075757f0e5e9071/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99ab45b91de9fc6c07903dbe3075757f0e5e9071/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-ret.stderr?ref=99ab45b91de9fc6c07903dbe3075757f0e5e9071", "patch": "@@ -4,15 +4,16 @@ error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n LL |   struct Bar<T:Eq+?Sized> { value: Box<T> }\n    |   ----------------------- required by `Bar`\n ...\n-LL | /     fn bar(&self) -> Bar<Self> {\n+LL |       fn bar(&self) -> Bar<Self> {\n+   |       ^                         - help: consider further restricting `Self`: `where Self: std::cmp::Eq`\n+   |  _____|\n+   | |\n LL | |\n LL | |         //\n LL | |         // Here, Eq ought to be implemented.\n LL | |         loop { }\n LL | |     }\n    | |_____^ the trait `std::cmp::Eq` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: std::cmp::Eq` bound\n \n error: aborting due to previous error\n "}, {"sha": "a443ff1bb63969ed2a9ecd16f3c311f04b9e726e", "filename": "src/test/ui/wf/wf-trait-default-fn-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/99ab45b91de9fc6c07903dbe3075757f0e5e9071/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99ab45b91de9fc6c07903dbe3075757f0e5e9071/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.stderr?ref=99ab45b91de9fc6c07903dbe3075757f0e5e9071", "patch": "@@ -4,14 +4,15 @@ error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n LL |   trait Bar<T:Eq+?Sized> { }\n    |   ---------------------- required by `Bar`\n ...\n-LL | /     fn bar<A>(&self) where A: Bar<Self> {\n+LL |       fn bar<A>(&self) where A: Bar<Self> {\n+   |       ^                                  - help: consider further restricting `Self`: `, Self: std::cmp::Eq`\n+   |  _____|\n+   | |\n LL | |\n LL | |         //\n LL | |         // Here, Eq ought to be implemented.\n LL | |     }\n    | |_____^ the trait `std::cmp::Eq` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: std::cmp::Eq` bound\n \n error: aborting due to previous error\n "}, {"sha": "42a28ee676373c9638965f9f8b8739d2944a4341", "filename": "src/test/ui/wf/wf-trait-fn-arg.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/99ab45b91de9fc6c07903dbe3075757f0e5e9071/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99ab45b91de9fc6c07903dbe3075757f0e5e9071/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-arg.stderr?ref=99ab45b91de9fc6c07903dbe3075757f0e5e9071", "patch": "@@ -5,9 +5,10 @@ LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n    | ----------------------- required by `Bar`\n ...\n LL |     fn bar(&self, x: &Bar<Self>);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: std::cmp::Eq` bound\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |                           |\n+   |     |                           help: consider further restricting `Self`: `where Self: std::cmp::Eq`\n+   |     the trait `std::cmp::Eq` is not implemented for `Self`\n \n error: aborting due to previous error\n "}, {"sha": "7ec4dbe0056b4acdf505748aae7b422d74176494", "filename": "src/test/ui/wf/wf-trait-fn-ret.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/99ab45b91de9fc6c07903dbe3075757f0e5e9071/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99ab45b91de9fc6c07903dbe3075757f0e5e9071/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-ret.stderr?ref=99ab45b91de9fc6c07903dbe3075757f0e5e9071", "patch": "@@ -5,9 +5,10 @@ LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n    | ----------------------- required by `Bar`\n ...\n LL |     fn bar(&self) -> &Bar<Self>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: std::cmp::Eq` bound\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |                          |\n+   |     |                          help: consider further restricting `Self`: `where Self: std::cmp::Eq`\n+   |     the trait `std::cmp::Eq` is not implemented for `Self`\n \n error: aborting due to previous error\n "}, {"sha": "256edb5b2ca1d0a3fe8fc4855412268452279dc0", "filename": "src/test/ui/wf/wf-trait-fn-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/99ab45b91de9fc6c07903dbe3075757f0e5e9071/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99ab45b91de9fc6c07903dbe3075757f0e5e9071/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.stderr?ref=99ab45b91de9fc6c07903dbe3075757f0e5e9071", "patch": "@@ -5,9 +5,10 @@ LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n    | ----------------------- required by `Bar`\n ...\n LL |     fn bar(&self) where Self: Sized, Bar<Self>: Copy;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: std::cmp::Eq` bound\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |                                               |\n+   |     |                                               help: consider further restricting `Self`: `, Self: std::cmp::Eq`\n+   |     the trait `std::cmp::Eq` is not implemented for `Self`\n \n error: aborting due to previous error\n "}]}