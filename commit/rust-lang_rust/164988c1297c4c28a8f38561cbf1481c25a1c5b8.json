{"sha": "164988c1297c4c28a8f38561cbf1481c25a1c5b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2NDk4OGMxMjk3YzRjMjhhOGYzODU2MWNiZjE0ODFjMjVhMWM1Yjg=", "commit": {"author": {"name": "Fabian Drinck", "email": "fabian.drinck@rwth-aachen.de", "date": "2019-04-27T20:39:17Z"}, "committer": {"name": "Fabian Drinck", "email": "fabian.drinck@rwth-aachen.de", "date": "2019-05-04T08:02:59Z"}, "message": "Remove `def_path_from_id`, `node_id_to_string`", "tree": {"sha": "0b66a6edca3d166ea1b9be628191a53c6e008223", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b66a6edca3d166ea1b9be628191a53c6e008223"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/164988c1297c4c28a8f38561cbf1481c25a1c5b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/164988c1297c4c28a8f38561cbf1481c25a1c5b8", "html_url": "https://github.com/rust-lang/rust/commit/164988c1297c4c28a8f38561cbf1481c25a1c5b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/164988c1297c4c28a8f38561cbf1481c25a1c5b8/comments", "author": {"login": "fabric-and-ink", "id": 13430670, "node_id": "MDQ6VXNlcjEzNDMwNjcw", "avatar_url": "https://avatars.githubusercontent.com/u/13430670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fabric-and-ink", "html_url": "https://github.com/fabric-and-ink", "followers_url": "https://api.github.com/users/fabric-and-ink/followers", "following_url": "https://api.github.com/users/fabric-and-ink/following{/other_user}", "gists_url": "https://api.github.com/users/fabric-and-ink/gists{/gist_id}", "starred_url": "https://api.github.com/users/fabric-and-ink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fabric-and-ink/subscriptions", "organizations_url": "https://api.github.com/users/fabric-and-ink/orgs", "repos_url": "https://api.github.com/users/fabric-and-ink/repos", "events_url": "https://api.github.com/users/fabric-and-ink/events{/privacy}", "received_events_url": "https://api.github.com/users/fabric-and-ink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fabric-and-ink", "id": 13430670, "node_id": "MDQ6VXNlcjEzNDMwNjcw", "avatar_url": "https://avatars.githubusercontent.com/u/13430670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fabric-and-ink", "html_url": "https://github.com/fabric-and-ink", "followers_url": "https://api.github.com/users/fabric-and-ink/followers", "following_url": "https://api.github.com/users/fabric-and-ink/following{/other_user}", "gists_url": "https://api.github.com/users/fabric-and-ink/gists{/gist_id}", "starred_url": "https://api.github.com/users/fabric-and-ink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fabric-and-ink/subscriptions", "organizations_url": "https://api.github.com/users/fabric-and-ink/orgs", "repos_url": "https://api.github.com/users/fabric-and-ink/repos", "events_url": "https://api.github.com/users/fabric-and-ink/events{/privacy}", "received_events_url": "https://api.github.com/users/fabric-and-ink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa7582d1dd37d0bdb08033bcb810274084bc26ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa7582d1dd37d0bdb08033bcb810274084bc26ca", "html_url": "https://github.com/rust-lang/rust/commit/fa7582d1dd37d0bdb08033bcb810274084bc26ca"}], "stats": {"total": 56, "additions": 24, "deletions": 32}, "files": [{"sha": "a59170e96669c3d1e7ec790576c4b246c2934e8e", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 20, "deletions": 31, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/164988c1297c4c28a8f38561cbf1481c25a1c5b8/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/164988c1297c4c28a8f38561cbf1481c25a1c5b8/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=164988c1297c4c28a8f38561cbf1481c25a1c5b8", "patch": "@@ -208,17 +208,12 @@ impl<'hir> Map<'hir> {\n         self.definitions.def_key(def_id.index)\n     }\n \n-    pub fn def_path_from_id(&self, id: NodeId) -> Option<DefPath> {\n-        self.opt_local_def_id(id).map(|def_id| {\n+    pub fn def_path_from_hir_id(&self, id: HirId) -> Option<DefPath> {\n+        self.opt_local_def_id_from_hir_id(id).map(|def_id| {\n             self.def_path(def_id)\n         })\n     }\n \n-    // FIXME(@ljedrz): replace the NodeId variant\n-    pub fn def_path_from_hir_id(&self, id: HirId) -> DefPath {\n-        self.def_path(self.local_def_id_from_hir_id(id))\n-    }\n-\n     pub fn def_path(&self, def_id: DefId) -> DefPath {\n         assert!(def_id.is_local());\n         self.definitions.def_path(def_id.index)\n@@ -1075,7 +1070,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn node_to_string(&self, id: NodeId) -> String {\n-        node_id_to_string(self, id, true)\n+        hir_id_to_string(self, self.node_to_hir_id(id), true)\n     }\n \n     // FIXME(@ljedrz): replace the NodeId variant\n@@ -1084,7 +1079,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn node_to_user_string(&self, id: NodeId) -> String {\n-        node_id_to_string(self, id, false)\n+        hir_id_to_string(self, self.node_to_hir_id(id), false)\n     }\n \n     // FIXME(@ljedrz): replace the NodeId variant\n@@ -1303,18 +1298,18 @@ impl<'a> print::State<'a> {\n     }\n }\n \n-fn node_id_to_string(map: &Map<'_>, id: NodeId, include_id: bool) -> String {\n-    let id_str = format!(\" (id={})\", id);\n+fn hir_id_to_string(map: &Map<'_>, id: HirId, include_id: bool) -> String {\n+    let id_str = format!(\" (hir_id={})\", id);\n     let id_str = if include_id { &id_str[..] } else { \"\" };\n \n     let path_str = || {\n         // This functionality is used for debugging, try to use TyCtxt to get\n         // the user-friendly path, otherwise fall back to stringifying DefPath.\n         crate::ty::tls::with_opt(|tcx| {\n             if let Some(tcx) = tcx {\n-                let def_id = map.local_def_id(id);\n+                let def_id = map.local_def_id_from_hir_id(id);\n                 tcx.def_path_str(def_id)\n-            } else if let Some(path) = map.def_path_from_id(id) {\n+            } else if let Some(path) = map.def_path_from_hir_id(id) {\n                 path.data.into_iter().map(|elem| {\n                     elem.data.to_string()\n                 }).collect::<Vec<_>>().join(\"::\")\n@@ -1324,7 +1319,7 @@ fn node_id_to_string(map: &Map<'_>, id: NodeId, include_id: bool) -> String {\n         })\n     };\n \n-    match map.find(id) {\n+    match map.find_by_hir_id(id) {\n         Some(Node::Item(item)) => {\n             let item_str = match item.node {\n                 ItemKind::ExternCrate(..) => \"extern crate\",\n@@ -1385,40 +1380,40 @@ fn node_id_to_string(map: &Map<'_>, id: NodeId, include_id: bool) -> String {\n                     path_str(), id_str)\n         }\n         Some(Node::AnonConst(_)) => {\n-            format!(\"const {}{}\", map.node_to_pretty_string(id), id_str)\n+            format!(\"const {}{}\", map.hir_to_pretty_string(id), id_str)\n         }\n         Some(Node::Expr(_)) => {\n-            format!(\"expr {}{}\", map.node_to_pretty_string(id), id_str)\n+            format!(\"expr {}{}\", map.hir_to_pretty_string(id), id_str)\n         }\n         Some(Node::Stmt(_)) => {\n-            format!(\"stmt {}{}\", map.node_to_pretty_string(id), id_str)\n+            format!(\"stmt {}{}\", map.hir_to_pretty_string(id), id_str)\n         }\n         Some(Node::PathSegment(_)) => {\n-            format!(\"path segment {}{}\", map.node_to_pretty_string(id), id_str)\n+            format!(\"path segment {}{}\", map.hir_to_pretty_string(id), id_str)\n         }\n         Some(Node::Ty(_)) => {\n-            format!(\"type {}{}\", map.node_to_pretty_string(id), id_str)\n+            format!(\"type {}{}\", map.hir_to_pretty_string(id), id_str)\n         }\n         Some(Node::TraitRef(_)) => {\n-            format!(\"trait_ref {}{}\", map.node_to_pretty_string(id), id_str)\n+            format!(\"trait_ref {}{}\", map.hir_to_pretty_string(id), id_str)\n         }\n         Some(Node::Binding(_)) => {\n-            format!(\"local {}{}\", map.node_to_pretty_string(id), id_str)\n+            format!(\"local {}{}\", map.hir_to_pretty_string(id), id_str)\n         }\n         Some(Node::Pat(_)) => {\n-            format!(\"pat {}{}\", map.node_to_pretty_string(id), id_str)\n+            format!(\"pat {}{}\", map.hir_to_pretty_string(id), id_str)\n         }\n         Some(Node::Block(_)) => {\n-            format!(\"block {}{}\", map.node_to_pretty_string(id), id_str)\n+            format!(\"block {}{}\", map.hir_to_pretty_string(id), id_str)\n         }\n         Some(Node::Local(_)) => {\n-            format!(\"local {}{}\", map.node_to_pretty_string(id), id_str)\n+            format!(\"local {}{}\", map.hir_to_pretty_string(id), id_str)\n         }\n         Some(Node::Ctor(..)) => {\n             format!(\"ctor {}{}\", path_str(), id_str)\n         }\n         Some(Node::Lifetime(_)) => {\n-            format!(\"lifetime {}{}\", map.node_to_pretty_string(id), id_str)\n+            format!(\"lifetime {}{}\", map.hir_to_pretty_string(id), id_str)\n         }\n         Some(Node::GenericParam(ref param)) => {\n             format!(\"generic_param {:?}{}\", param, id_str)\n@@ -1434,12 +1429,6 @@ fn node_id_to_string(map: &Map<'_>, id: NodeId, include_id: bool) -> String {\n     }\n }\n \n-// FIXME(@ljedrz): replace the NodeId variant\n-fn hir_id_to_string(map: &Map<'_>, id: HirId, include_id: bool) -> String {\n-    let node_id = map.hir_to_node_id(id);\n-    node_id_to_string(map, node_id, include_id)\n-}\n-\n pub fn def_kind(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Option<DefKind> {\n     if let Some(node_id) = tcx.hir().as_local_node_id(def_id) {\n         tcx.hir().def_kind(node_id)"}, {"sha": "4fdcdafcab86c7b9059a158e7fe5995bca1c1f4f", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/164988c1297c4c28a8f38561cbf1481c25a1c5b8/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/164988c1297c4c28a8f38561cbf1481c25a1c5b8/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=164988c1297c4c28a8f38561cbf1481c25a1c5b8", "patch": "@@ -255,7 +255,10 @@ trait HirPrinterSupport<'hir>: pprust_hir::PpAnn {\n \n     /// Computes an user-readable representation of a path, if possible.\n     fn node_path(&self, id: ast::NodeId) -> Option<String> {\n-        self.hir_map().and_then(|map| map.def_path_from_id(id)).map(|path| {\n+        self.hir_map().and_then(|map| {\n+            let hir_id = map.node_to_hir_id(id);\n+            map.def_path_from_hir_id(hir_id)\n+        }).map(|path| {\n             path.data\n                 .into_iter()\n                 .map(|elem| elem.data.to_string())"}]}