{"sha": "c1c82c2503d1fcc581e230129f84523e59835c13", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYzgyYzI1MDNkMWZjYzU4MWUyMzAxMjlmODQ1MjNlNTk4MzVjMTM=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-04T20:28:09Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-04T20:28:09Z"}, "message": "Properly capitalize PathConversion", "tree": {"sha": "0ea05f0bfe5735cd231a4f1ba22cd1701557dcc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ea05f0bfe5735cd231a4f1ba22cd1701557dcc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1c82c2503d1fcc581e230129f84523e59835c13", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl96MFkACgkQtAh+UQ6Y\nsWRJYxAAghCsHH9/AEL776Zm1MhCYJQnuRJNLJgvABOuCPg86uuyBwmFwJKtRanA\nbdb6S1dUcxx5mEKAQhMArIVv0bwyeTG0oqgPB1drmpA7X0VLV1uBhOyb/M1gvSWS\nlQz5HS5cFR3hPEZz5f/9GXMaGyQozcLI/5WfJ96jnRq0VV6XxDkDiZ2Jg0265D1h\ndxnaGTXt+qPxQg1+Vh0uMPz/avr1Ai04SJ/0K68psH7gpO79HlB+W+I870KRXYZK\nKsVsB3wOueenFK9TIWUkq7E74Ct2iNyyQGE42rPeyffHGzSWghkuZ12tOcU/eREU\naerrGlWy9CBoCe03DfZcRHMfZe3FOWvvnB9vw6zj0OPyTPgMXFpsODF2KM+V0qOX\n2dKvFh/HC53RW+CXVLjU7D6/sYHSo5ZLg4zQUiN/W7rrysPrg0xeXJifRWzqranX\nS5PfzLXsW0wlDbV+w9mat58JSX5JodnA5zWOchVdKLJtPxcuw2SyDvTFnbapclAz\nW4nEQkJRapRLi9c3KTny0lxzUBqwjfpOkM3NFIXgp3MM63fgQ65hixpZNGBl3s1W\nXchbIPqpxpDxVvi4sejzsQjnU6pJX/m/3BrH3JdoEW4J7NFJ+DPXbxDE2ZokEDa8\n4pCQ3GuL5Tjoo8YkPjv8bJNgOym/riEcvc2sl1yHVPGW9ETuRNA=\n=Gvz+\n-----END PGP SIGNATURE-----", "payload": "tree 0ea05f0bfe5735cd231a4f1ba22cd1701557dcc9\nparent 4eea02e725052a8941abd728cb1da98e4d9770a8\nauthor Aaron Hill <aa1ronham@gmail.com> 1601843289 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1601843289 -0400\n\nProperly capitalize PathConversion\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1c82c2503d1fcc581e230129f84523e59835c13", "html_url": "https://github.com/rust-lang/rust/commit/c1c82c2503d1fcc581e230129f84523e59835c13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1c82c2503d1fcc581e230129f84523e59835c13/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eea02e725052a8941abd728cb1da98e4d9770a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eea02e725052a8941abd728cb1da98e4d9770a8", "html_url": "https://github.com/rust-lang/rust/commit/4eea02e725052a8941abd728cb1da98e4d9770a8"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "7635047064f12132bb244b02d7e0c55270c858ac", "filename": "src/shims/os_str.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c1c82c2503d1fcc581e230129f84523e59835c13/src%2Fshims%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c82c2503d1fcc581e230129f84523e59835c13/src%2Fshims%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fos_str.rs?ref=c1c82c2503d1fcc581e230129f84523e59835c13", "patch": "@@ -14,7 +14,7 @@ use rustc_target::abi::LayoutOf;\n use crate::*;\n \n /// Represent how path separator conversion should be done.\n-pub enum Pathconversion {\n+pub enum PathConversion {\n     HostToTarget,\n     TargetToHost,\n }\n@@ -188,7 +188,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_ref();\n         let os_str = this.read_os_str_from_c_str(scalar)?;\n \n-        Ok(match this.convert_path_separator(Cow::Borrowed(os_str), Pathconversion::TargetToHost) {\n+        Ok(match this.convert_path_separator(Cow::Borrowed(os_str), PathConversion::TargetToHost) {\n             Cow::Borrowed(x) => Cow::Borrowed(Path::new(x)),\n             Cow::Owned(y) => Cow::Owned(PathBuf::from(y)),\n         })\n@@ -199,7 +199,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_ref();\n         let os_str = this.read_os_str_from_wide_str(scalar)?;\n \n-        Ok(this.convert_path_separator(Cow::Owned(os_str), Pathconversion::TargetToHost).into_owned().into())\n+        Ok(this.convert_path_separator(Cow::Owned(os_str), PathConversion::TargetToHost).into_owned().into())\n     }\n \n     /// Write a Path to the machine memory (as a null-terminated sequence of bytes),\n@@ -211,7 +211,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         size: u64,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         let this = self.eval_context_mut();\n-        let os_str = this.convert_path_separator(Cow::Borrowed(path.as_os_str()), Pathconversion::HostToTarget);\n+        let os_str = this.convert_path_separator(Cow::Borrowed(path.as_os_str()), PathConversion::HostToTarget);\n         this.write_os_str_to_c_str(&os_str, scalar, size)\n     }\n \n@@ -224,14 +224,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         size: u64,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         let this = self.eval_context_mut();\n-        let os_str = this.convert_path_separator(Cow::Borrowed(path.as_os_str()), Pathconversion::HostToTarget);\n+        let os_str = this.convert_path_separator(Cow::Borrowed(path.as_os_str()), PathConversion::HostToTarget);\n         this.write_os_str_to_wide_str(&os_str, scalar, size)\n     }\n \n     fn convert_path_separator<'a>(\n         &self,\n         os_str: Cow<'a, OsStr>,\n-        direction: Pathconversion,\n+        direction: PathConversion,\n     ) -> Cow<'a, OsStr> {\n         let this = self.eval_context_ref();\n         let target_os = &this.tcx.sess.target.target.target_os;\n@@ -242,8 +242,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         } else {\n             // Unix target, Windows host.\n             let (from, to) = match direction {\n-                Pathconversion::HostToTarget => ('\\\\', '/'),\n-                Pathconversion::TargetToHost => ('/', '\\\\'),\n+                PathConversion::HostToTarget => ('\\\\', '/'),\n+                PathConversion::TargetToHost => ('/', '\\\\'),\n             };\n             let converted = os_str\n                 .encode_wide()\n@@ -255,8 +255,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         return if target_os == \"windows\" {\n             // Windows target, Unix host.\n             let (from, to) = match direction {\n-                Pathconversion::HostToTarget => ('/', '\\\\'),\n-                Pathconversion::TargetToHost => ('\\\\', '/'),\n+                PathConversion::HostToTarget => ('/', '\\\\'),\n+                PathConversion::TargetToHost => ('\\\\', '/'),\n             };\n             let converted = os_str\n                 .as_bytes()"}, {"sha": "4e8d38a977c56fa8af0d7bc941e15e902861dc38", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1c82c2503d1fcc581e230129f84523e59835c13/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c82c2503d1fcc581e230129f84523e59835c13/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=c1c82c2503d1fcc581e230129f84523e59835c13", "patch": "@@ -1372,7 +1372,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let result = std::fs::read_link(pathname);\n         match result {\n             Ok(resolved) => {\n-                let resolved = this.convert_path_separator(Cow::Borrowed(resolved.as_ref()), crate::shims::os_str::Pathconversion::HostToTarget);\n+                let resolved = this.convert_path_separator(Cow::Borrowed(resolved.as_ref()), crate::shims::os_str::PathConversion::HostToTarget);\n                 let mut path_bytes = crate::shims::os_str::os_str_to_bytes(resolved.as_ref())?;\n                 let bufsize: usize = bufsize.try_into().unwrap();\n                 if path_bytes.len() > bufsize {"}]}