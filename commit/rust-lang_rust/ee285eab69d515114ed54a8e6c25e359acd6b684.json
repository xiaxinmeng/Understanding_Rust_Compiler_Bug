{"sha": "ee285eab69d515114ed54a8e6c25e359acd6b684", "node_id": "C_kwDOAAsO6NoAKGVlMjg1ZWFiNjlkNTE1MTE0ZWQ1NGE4ZTZjMjVlMzU5YWNkNmI2ODQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-28T12:26:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-28T12:26:37Z"}, "message": "Auto merge of #96324 - berendjan:set_tcp_quickack, r=dtolnay\n\nAdd setter and getter for TCP_QUICKACK on TcpStream for Linux\n\nReference issue #96256\n\nSetting TCP_QUICKACK on TcpStream for Linux", "tree": {"sha": "06a56f6b46dc59ebed0764b7fcc77d462cc3e63f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06a56f6b46dc59ebed0764b7fcc77d462cc3e63f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee285eab69d515114ed54a8e6c25e359acd6b684", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee285eab69d515114ed54a8e6c25e359acd6b684", "html_url": "https://github.com/rust-lang/rust/commit/ee285eab69d515114ed54a8e6c25e359acd6b684", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee285eab69d515114ed54a8e6c25e359acd6b684/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fdd578d72a24d4efc2fe2ad18eec3b6ba72271e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fdd578d72a24d4efc2fe2ad18eec3b6ba72271e", "html_url": "https://github.com/rust-lang/rust/commit/3fdd578d72a24d4efc2fe2ad18eec3b6ba72271e"}, {"sha": "786e8755e7f8142c90a82351a11ad51acf5e1460", "url": "https://api.github.com/repos/rust-lang/rust/commits/786e8755e7f8142c90a82351a11ad51acf5e1460", "html_url": "https://github.com/rust-lang/rust/commit/786e8755e7f8142c90a82351a11ad51acf5e1460"}], "stats": {"total": 140, "additions": 138, "deletions": 2}, "files": [{"sha": "6f9743f3a0ebe824882d5048a49384e46f5ceba4", "filename": "library/std/src/net/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee285eab69d515114ed54a8e6c25e359acd6b684/library%2Fstd%2Fsrc%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee285eab69d515114ed54a8e6c25e359acd6b684/library%2Fstd%2Fsrc%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fmod.rs?ref=ee285eab69d515114ed54a8e6c25e359acd6b684", "patch": "@@ -41,7 +41,7 @@ mod ip;\n mod parser;\n mod tcp;\n #[cfg(test)]\n-mod test;\n+pub(crate) mod test;\n mod udp;\n \n /// Possible values which can be passed to the [`TcpStream::shutdown`] method."}, {"sha": "5adcb82b6a49b41ebb7a09e1594fd9cf931d54e6", "filename": "library/std/src/os/android/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee285eab69d515114ed54a8e6c25e359acd6b684/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee285eab69d515114ed54a8e6c25e359acd6b684/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Fmod.rs?ref=ee285eab69d515114ed54a8e6c25e359acd6b684", "patch": "@@ -3,4 +3,5 @@\n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n pub mod fs;\n+pub mod net;\n pub mod raw;"}, {"sha": "ff96125c37bdca2d1dca2b351a15e440ba6d5944", "filename": "library/std/src/os/android/net.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee285eab69d515114ed54a8e6c25e359acd6b684/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee285eab69d515114ed54a8e6c25e359acd6b684/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Fnet.rs?ref=ee285eab69d515114ed54a8e6c25e359acd6b684", "patch": "@@ -0,0 +1,4 @@\n+//! Linux and Android-specific definitions for socket options.\n+\n+#![unstable(feature = \"tcp_quickack\", issue = \"96256\")]\n+pub use crate::os::net::tcp::TcpStreamExt;"}, {"sha": "c17053011adfce71afb3b4a7e51791459b900d51", "filename": "library/std/src/os/linux/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee285eab69d515114ed54a8e6c25e359acd6b684/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee285eab69d515114ed54a8e6c25e359acd6b684/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fmod.rs?ref=ee285eab69d515114ed54a8e6c25e359acd6b684", "patch": "@@ -4,5 +4,6 @@\n #![doc(cfg(target_os = \"linux\"))]\n \n pub mod fs;\n+pub mod net;\n pub mod process;\n pub mod raw;"}, {"sha": "ff96125c37bdca2d1dca2b351a15e440ba6d5944", "filename": "library/std/src/os/linux/net.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee285eab69d515114ed54a8e6c25e359acd6b684/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee285eab69d515114ed54a8e6c25e359acd6b684/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fnet.rs?ref=ee285eab69d515114ed54a8e6c25e359acd6b684", "patch": "@@ -0,0 +1,4 @@\n+//! Linux and Android-specific definitions for socket options.\n+\n+#![unstable(feature = \"tcp_quickack\", issue = \"96256\")]\n+pub use crate::os::net::tcp::TcpStreamExt;"}, {"sha": "18c64b51007647b3d2683147f204af06db49ff65", "filename": "library/std/src/os/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee285eab69d515114ed54a8e6c25e359acd6b684/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee285eab69d515114ed54a8e6c25e359acd6b684/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fmod.rs?ref=ee285eab69d515114ed54a8e6c25e359acd6b684", "patch": "@@ -148,3 +148,6 @@ pub mod vxworks;\n \n #[cfg(any(unix, target_os = \"wasi\", doc))]\n mod fd;\n+\n+#[cfg(any(target_os = \"linux\", target_os = \"android\", doc))]\n+mod net;"}, {"sha": "d6d84d24ec489de0db4c154f822fa47c5ebf763d", "filename": "library/std/src/os/net/mod.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ee285eab69d515114ed54a8e6c25e359acd6b684/library%2Fstd%2Fsrc%2Fos%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee285eab69d515114ed54a8e6c25e359acd6b684/library%2Fstd%2Fsrc%2Fos%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fnet%2Fmod.rs?ref=ee285eab69d515114ed54a8e6c25e359acd6b684", "patch": "@@ -0,0 +1,7 @@\n+//! Linux and Android-specific definitions for socket options.\n+\n+#![unstable(feature = \"tcp_quickack\", issue = \"96256\")]\n+#![doc(cfg(any(target_os = \"linux\", target_os = \"android\",)))]\n+pub mod tcp;\n+#[cfg(test)]\n+mod tests;"}, {"sha": "5e9ee65a4152e4ff6d38848facd984365084228c", "filename": "library/std/src/os/net/tcp.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/ee285eab69d515114ed54a8e6c25e359acd6b684/library%2Fstd%2Fsrc%2Fos%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee285eab69d515114ed54a8e6c25e359acd6b684/library%2Fstd%2Fsrc%2Fos%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fnet%2Ftcp.rs?ref=ee285eab69d515114ed54a8e6c25e359acd6b684", "patch": "@@ -0,0 +1,70 @@\n+//! Linux and Android-specific tcp extensions to primitives in the [`std::net`] module.\n+//!\n+//! [`std::net`]: crate::net\n+\n+use crate::io;\n+use crate::net;\n+use crate::sealed::Sealed;\n+use crate::sys_common::AsInner;\n+\n+/// Os-specific extensions for [`TcpStream`]\n+///\n+/// [`TcpStream`]: net::TcpStream\n+#[unstable(feature = \"tcp_quickack\", issue = \"96256\")]\n+pub trait TcpStreamExt: Sealed {\n+    /// Enable or disable `TCP_QUICKACK`.\n+    ///\n+    /// This flag causes Linux to eagerly send ACKs rather than delaying them.\n+    /// Linux may reset this flag after further operations on the socket.\n+    ///\n+    /// See [`man 7 tcp`](https://man7.org/linux/man-pages/man7/tcp.7.html) and\n+    /// [TCP delayed acknowledgement](https://en.wikipedia.org/wiki/TCP_delayed_acknowledgment)\n+    /// for more information.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(tcp_quickack)]\n+    /// use std::net::TcpStream;\n+    /// use std::os::linux::net::TcpStreamExt;\n+    ///\n+    /// let stream = TcpStream::connect(\"127.0.0.1:8080\")\n+    ///         .expect(\"Couldn't connect to the server...\");\n+    /// stream.set_quickack(true).expect(\"set_quickack call failed\");\n+    /// ```\n+    #[unstable(feature = \"tcp_quickack\", issue = \"96256\")]\n+    fn set_quickack(&self, quickack: bool) -> io::Result<()>;\n+\n+    /// Gets the value of the `TCP_QUICKACK` option on this socket.\n+    ///\n+    /// For more information about this option, see [`TcpStreamExt::set_quickack`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(tcp_quickack)]\n+    /// use std::net::TcpStream;\n+    /// use std::os::linux::net::TcpStreamExt;\n+    ///\n+    /// let stream = TcpStream::connect(\"127.0.0.1:8080\")\n+    ///         .expect(\"Couldn't connect to the server...\");\n+    /// stream.set_quickack(true).expect(\"set_quickack call failed\");\n+    /// assert_eq!(stream.quickack().unwrap_or(false), true);\n+    /// ```\n+    #[unstable(feature = \"tcp_quickack\", issue = \"96256\")]\n+    fn quickack(&self) -> io::Result<bool>;\n+}\n+\n+#[unstable(feature = \"tcp_quickack\", issue = \"96256\")]\n+impl Sealed for net::TcpStream {}\n+\n+#[unstable(feature = \"tcp_quickack\", issue = \"96256\")]\n+impl TcpStreamExt for net::TcpStream {\n+    fn set_quickack(&self, quickack: bool) -> io::Result<()> {\n+        self.as_inner().as_inner().set_quickack(quickack)\n+    }\n+\n+    fn quickack(&self) -> io::Result<bool> {\n+        self.as_inner().as_inner().quickack()\n+    }\n+}"}, {"sha": "4704e3156913c7288b6a0601caf855803bd38a93", "filename": "library/std/src/os/net/tests.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ee285eab69d515114ed54a8e6c25e359acd6b684/library%2Fstd%2Fsrc%2Fos%2Fnet%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee285eab69d515114ed54a8e6c25e359acd6b684/library%2Fstd%2Fsrc%2Fos%2Fnet%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fnet%2Ftests.rs?ref=ee285eab69d515114ed54a8e6c25e359acd6b684", "patch": "@@ -0,0 +1,29 @@\n+#[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n+#[test]\n+fn quickack() {\n+    use crate::{\n+        net::{test::next_test_ip4, TcpListener, TcpStream},\n+        os::net::tcp::TcpStreamExt,\n+    };\n+\n+    macro_rules! t {\n+        ($e:expr) => {\n+            match $e {\n+                Ok(t) => t,\n+                Err(e) => panic!(\"received error for `{}`: {}\", stringify!($e), e),\n+            }\n+        };\n+    }\n+\n+    let addr = next_test_ip4();\n+    let _listener = t!(TcpListener::bind(&addr));\n+\n+    let stream = t!(TcpStream::connect(&(\"localhost\", addr.port())));\n+\n+    t!(stream.set_quickack(false));\n+    assert_eq!(false, t!(stream.quickack()));\n+    t!(stream.set_quickack(true));\n+    assert_eq!(true, t!(stream.quickack()));\n+    t!(stream.set_quickack(false));\n+    assert_eq!(false, t!(stream.quickack()));\n+}"}, {"sha": "85dcfc747afefefec017fca59ff21f3101a8088a", "filename": "library/std/src/sys/unix/net.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ee285eab69d515114ed54a8e6c25e359acd6b684/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee285eab69d515114ed54a8e6c25e359acd6b684/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs?ref=ee285eab69d515114ed54a8e6c25e359acd6b684", "patch": "@@ -392,6 +392,17 @@ impl Socket {\n         Ok(raw != 0)\n     }\n \n+    #[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n+    pub fn set_quickack(&self, quickack: bool) -> io::Result<()> {\n+        setsockopt(self, libc::IPPROTO_TCP, libc::TCP_QUICKACK, quickack as c_int)\n+    }\n+\n+    #[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n+    pub fn quickack(&self) -> io::Result<bool> {\n+        let raw: c_int = getsockopt(self, libc::IPPROTO_TCP, libc::TCP_QUICKACK)?;\n+        Ok(raw != 0)\n+    }\n+\n     #[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n     pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {\n         setsockopt(self, libc::SOL_SOCKET, libc::SO_PASSCRED, passcred as libc::c_int)"}, {"sha": "3ad802afa8f7a69ca5fa30a772d4a00d2c8da416", "filename": "library/std/src/sys_common/net.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee285eab69d515114ed54a8e6c25e359acd6b684/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee285eab69d515114ed54a8e6c25e359acd6b684/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs?ref=ee285eab69d515114ed54a8e6c25e359acd6b684", "patch": "@@ -10,7 +10,7 @@ use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};\n use crate::ptr;\n use crate::sys::net::netc as c;\n use crate::sys::net::{cvt, cvt_gai, cvt_r, init, wrlen_t, Socket};\n-use crate::sys_common::{FromInner, IntoInner};\n+use crate::sys_common::{AsInner, FromInner, IntoInner};\n use crate::time::Duration;\n \n use libc::{c_int, c_void};\n@@ -345,6 +345,12 @@ impl TcpStream {\n     }\n }\n \n+impl AsInner<Socket> for TcpStream {\n+    fn as_inner(&self) -> &Socket {\n+        &self.inner\n+    }\n+}\n+\n impl FromInner<Socket> for TcpStream {\n     fn from_inner(socket: Socket) -> TcpStream {\n         TcpStream { inner: socket }"}]}