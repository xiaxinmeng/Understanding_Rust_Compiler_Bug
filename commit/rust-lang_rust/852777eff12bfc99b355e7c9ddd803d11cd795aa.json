{"sha": "852777eff12bfc99b355e7c9ddd803d11cd795aa", "node_id": "C_kwDOAAsO6NoAKDg1Mjc3N2VmZjEyYmZjOTliMzU1ZTdjOWRkZDgwM2QxMWNkNzk1YWE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-28T16:15:04Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-28T16:15:04Z"}, "message": "note to future self", "tree": {"sha": "ad2fb19fa4acf1d41071f18efc9239057ef6dcfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad2fb19fa4acf1d41071f18efc9239057ef6dcfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/852777eff12bfc99b355e7c9ddd803d11cd795aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/852777eff12bfc99b355e7c9ddd803d11cd795aa", "html_url": "https://github.com/rust-lang/rust/commit/852777eff12bfc99b355e7c9ddd803d11cd795aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/852777eff12bfc99b355e7c9ddd803d11cd795aa/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad33519455c7f10bc5e7fdb7cc45ef6f1ccc51c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad33519455c7f10bc5e7fdb7cc45ef6f1ccc51c4", "html_url": "https://github.com/rust-lang/rust/commit/ad33519455c7f10bc5e7fdb7cc45ef6f1ccc51c4"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "6b1e63e0cfaae8de34a3609dea1029d0911af504", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/852777eff12bfc99b355e7c9ddd803d11cd795aa/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/852777eff12bfc99b355e7c9ddd803d11cd795aa/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=852777eff12bfc99b355e7c9ddd803d11cd795aa", "patch": "@@ -26,6 +26,7 @@\n //!   some memory happens to exist at that address and gets deallocated. This corresponds to writing\n //!   your own allocator: allocating zero-sized objects is not very hard. The canonical way to\n //!   obtain a pointer that is valid for zero-sized accesses is [`NonNull::dangling`].\n+//FIXME: mention `ptr::invalid` above, once it is stable.\n //! * All accesses performed by functions in this module are *non-atomic* in the sense\n //!   of [atomic operations] used to synchronize between threads. This means it is\n //!   undefined behavior to perform two concurrent accesses to the same location from different"}]}