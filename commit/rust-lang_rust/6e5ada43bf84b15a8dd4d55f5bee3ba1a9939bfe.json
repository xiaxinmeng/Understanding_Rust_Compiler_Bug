{"sha": "6e5ada43bf84b15a8dd4d55f5bee3ba1a9939bfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlNWFkYTQzYmY4NGIxNWE4ZGQ0ZDU1ZjViZWUzYmExYTk5MzliZmU=", "commit": {"author": {"name": "Tim Vermeulen", "email": "tvermeulen@me.com", "date": "2019-08-31T21:00:15Z"}, "committer": {"name": "Tim Vermeulen", "email": "tvermeulen@me.com", "date": "2019-09-14T19:52:08Z"}, "message": "Add cmp::{min_by, min_by_key, max_by, max_by_key}", "tree": {"sha": "69d8e70b6ef3f5d18cc6fa0be3c791985c4f2ef8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69d8e70b6ef3f5d18cc6fa0be3c791985c4f2ef8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e5ada43bf84b15a8dd4d55f5bee3ba1a9939bfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e5ada43bf84b15a8dd4d55f5bee3ba1a9939bfe", "html_url": "https://github.com/rust-lang/rust/commit/6e5ada43bf84b15a8dd4d55f5bee3ba1a9939bfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e5ada43bf84b15a8dd4d55f5bee3ba1a9939bfe/comments", "author": {"login": "timvermeulen", "id": 2904179, "node_id": "MDQ6VXNlcjI5MDQxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2904179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvermeulen", "html_url": "https://github.com/timvermeulen", "followers_url": "https://api.github.com/users/timvermeulen/followers", "following_url": "https://api.github.com/users/timvermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/timvermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvermeulen/subscriptions", "organizations_url": "https://api.github.com/users/timvermeulen/orgs", "repos_url": "https://api.github.com/users/timvermeulen/repos", "events_url": "https://api.github.com/users/timvermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/timvermeulen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "timvermeulen", "id": 2904179, "node_id": "MDQ6VXNlcjI5MDQxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2904179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvermeulen", "html_url": "https://github.com/timvermeulen", "followers_url": "https://api.github.com/users/timvermeulen/followers", "following_url": "https://api.github.com/users/timvermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/timvermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvermeulen/subscriptions", "organizations_url": "https://api.github.com/users/timvermeulen/orgs", "repos_url": "https://api.github.com/users/timvermeulen/repos", "events_url": "https://api.github.com/users/timvermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/timvermeulen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c0931e168671d7536b58563dc3664c948a8dcd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c0931e168671d7536b58563dc3664c948a8dcd3", "html_url": "https://github.com/rust-lang/rust/commit/2c0931e168671d7536b58563dc3664c948a8dcd3"}], "stats": {"total": 115, "additions": 112, "deletions": 3}, "files": [{"sha": "4e2b1627e15ef17d9d24161dfcf8b5cc121392af", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 88, "deletions": 2, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/6e5ada43bf84b15a8dd4d55f5bee3ba1a9939bfe/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5ada43bf84b15a8dd4d55f5bee3ba1a9939bfe/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=6e5ada43bf84b15a8dd4d55f5bee3ba1a9939bfe", "patch": "@@ -570,7 +570,7 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     #[inline]\n     fn max(self, other: Self) -> Self\n     where Self: Sized {\n-        if other >= self { other } else { self }\n+        max_by(self, other, Ord::cmp)\n     }\n \n     /// Compares and returns the minimum of two values.\n@@ -587,7 +587,7 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     #[inline]\n     fn min(self, other: Self) -> Self\n     where Self: Sized {\n-        if self <= other { self } else { other }\n+        min_by(self, other, Ord::cmp)\n     }\n \n     /// Restrict a value to a certain interval.\n@@ -898,6 +898,49 @@ pub fn min<T: Ord>(v1: T, v2: T) -> T {\n     v1.min(v2)\n }\n \n+/// Returns the minimum of two values with respect to the specified comparison function.\n+///\n+/// Returns the first argument if the comparison determines them to be equal.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(cmp_min_max_by)]\n+///\n+/// use std::cmp;\n+///\n+/// assert_eq!(cmp::min_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 1);\n+/// assert_eq!(cmp::min_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);\n+/// ```\n+#[inline]\n+#[unstable(feature = \"cmp_min_max_by\", issue = \"64460\")]\n+pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {\n+    match compare(&v1, &v2) {\n+        Ordering::Less | Ordering::Equal => v1,\n+        Ordering::Greater => v2,\n+    }\n+}\n+\n+/// Returns the element that gives the minimum value from the specified function.\n+///\n+/// Returns the first argument if the comparison determines them to be equal.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(cmp_min_max_by)]\n+///\n+/// use std::cmp;\n+///\n+/// assert_eq!(cmp::min_by_key(-2, 1, |x: &i32| x.abs()), 1);\n+/// assert_eq!(cmp::min_by_key(-2, 2, |x: &i32| x.abs()), -2);\n+/// ```\n+#[inline]\n+#[unstable(feature = \"cmp_min_max_by\", issue = \"64460\")]\n+pub fn min_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {\n+    min_by(v1, v2, |v1, v2| f(v1).cmp(&f(v2)))\n+}\n+\n /// Compares and returns the maximum of two values.\n ///\n /// Returns the second argument if the comparison determines them to be equal.\n@@ -918,6 +961,49 @@ pub fn max<T: Ord>(v1: T, v2: T) -> T {\n     v1.max(v2)\n }\n \n+/// Returns the maximum of two values with respect to the specified comparison function.\n+///\n+/// Returns the second argument if the comparison determines them to be equal.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(cmp_min_max_by)]\n+///\n+/// use std::cmp;\n+///\n+/// assert_eq!(cmp::max_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);\n+/// assert_eq!(cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 2);\n+/// ```\n+#[inline]\n+#[unstable(feature = \"cmp_min_max_by\", issue = \"64460\")]\n+pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {\n+    match compare(&v1, &v2) {\n+        Ordering::Less | Ordering::Equal => v2,\n+        Ordering::Greater => v1,\n+    }\n+}\n+\n+/// Returns the element that gives the maximum value from the specified function.\n+///\n+/// Returns the second argument if the comparison determines them to be equal.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(cmp_min_max_by)]\n+///\n+/// use std::cmp;\n+///\n+/// assert_eq!(cmp::max_by_key(-2, 1, |x: &i32| x.abs()), -2);\n+/// assert_eq!(cmp::max_by_key(-2, 2, |x: &i32| x.abs()), 2);\n+/// ```\n+#[inline]\n+#[unstable(feature = \"cmp_min_max_by\", issue = \"64460\")]\n+pub fn max_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {\n+    max_by(v1, v2, |v1, v2| f(v1).cmp(&f(v2)))\n+}\n+\n // Implementation of PartialEq, Eq, PartialOrd and Ord for primitive types\n mod impls {\n     use crate::cmp::Ordering::{self, Less, Greater, Equal};"}, {"sha": "5e6778e222a291a3f17843aaede8c12e23902fa6", "filename": "src/libcore/tests/cmp.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6e5ada43bf84b15a8dd4d55f5bee3ba1a9939bfe/src%2Flibcore%2Ftests%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5ada43bf84b15a8dd4d55f5bee3ba1a9939bfe/src%2Flibcore%2Ftests%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fcmp.rs?ref=6e5ada43bf84b15a8dd4d55f5bee3ba1a9939bfe", "patch": "@@ -1,4 +1,4 @@\n-use core::cmp::Ordering::{Less, Greater, Equal};\n+use core::cmp::{self, Ordering::*};\n \n #[test]\n fn test_int_totalord() {\n@@ -28,6 +28,28 @@ fn test_ord_max_min() {\n     assert_eq!(1.min(1), 1);\n }\n \n+#[test]\n+fn test_ord_min_max_by() {\n+    let f = |x: &i32, y: &i32| x.abs().cmp(&y.abs());\n+    assert_eq!(cmp::min_by(1, -1, f), 1);\n+    assert_eq!(cmp::min_by(1, -2, f), 1);\n+    assert_eq!(cmp::min_by(2, -1, f), -1);\n+    assert_eq!(cmp::max_by(1, -1, f), -1);\n+    assert_eq!(cmp::max_by(1, -2, f), -2);\n+    assert_eq!(cmp::max_by(2, -1, f), 2);\n+}\n+\n+#[test]\n+fn test_ord_min_max_by_key() {\n+    let f = |x: &i32| x.abs();\n+    assert_eq!(cmp::min_by_key(1, -1, f), 1);\n+    assert_eq!(cmp::min_by_key(1, -2, f), 1);\n+    assert_eq!(cmp::min_by_key(2, -1, f), -1);\n+    assert_eq!(cmp::max_by_key(1, -1, f), -1);\n+    assert_eq!(cmp::max_by_key(1, -2, f), -2);\n+    assert_eq!(cmp::max_by_key(2, -1, f), 2);\n+}\n+\n #[test]\n fn test_ordering_reverse() {\n     assert_eq!(Less.reverse(), Greater);"}, {"sha": "35661356028cbf2b861c0cdeac28dd2253e5ffdd", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e5ada43bf84b15a8dd4d55f5bee3ba1a9939bfe/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5ada43bf84b15a8dd4d55f5bee3ba1a9939bfe/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=6e5ada43bf84b15a8dd4d55f5bee3ba1a9939bfe", "patch": "@@ -34,6 +34,7 @@\n #![feature(iter_partition_in_place)]\n #![feature(iter_is_partitioned)]\n #![feature(iter_order_by)]\n+#![feature(cmp_min_max_by)]\n \n extern crate test;\n "}]}