{"sha": "2d10c2a3302d53e10a4ad3ac581103faaae9eeb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMTBjMmEzMzAyZDUzZTEwYTRhZDNhYzU4MTEwM2ZhYWFlOWVlYjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-08T04:33:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-08T04:33:22Z"}, "message": "Auto merge of #87798 - durin42:llvm-14, r=nikic\n\nPassWrapper: handle move of OptimizationLevel class out of PassBuilder\n\nThis is the first build break of the LLVM 14 cycle, and was caused by\nhttps://reviews.llvm.org/D107025. Mercifully an easy fix.", "tree": {"sha": "de220f8d9fba75a87c0675a609e1da4d9130d667", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de220f8d9fba75a87c0675a609e1da4d9130d667"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d10c2a3302d53e10a4ad3ac581103faaae9eeb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d10c2a3302d53e10a4ad3ac581103faaae9eeb6", "html_url": "https://github.com/rust-lang/rust/commit/2d10c2a3302d53e10a4ad3ac581103faaae9eeb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d10c2a3302d53e10a4ad3ac581103faaae9eeb6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "835dce569d8fbad7566942b6ccf8c62ac3900791", "url": "https://api.github.com/repos/rust-lang/rust/commits/835dce569d8fbad7566942b6ccf8c62ac3900791", "html_url": "https://github.com/rust-lang/rust/commit/835dce569d8fbad7566942b6ccf8c62ac3900791"}, {"sha": "482f1901b0c9bfecc1d433670ba32fcc482b8867", "url": "https://api.github.com/repos/rust-lang/rust/commits/482f1901b0c9bfecc1d433670ba32fcc482b8867", "html_url": "https://github.com/rust-lang/rust/commit/482f1901b0c9bfecc1d433670ba32fcc482b8867"}], "stats": {"total": 58, "additions": 31, "deletions": 27}, "files": [{"sha": "f563870e3e0c722eb295913fe0dac4c180ffb14e", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 31, "deletions": 27, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/2d10c2a3302d53e10a4ad3ac581103faaae9eeb6/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2d10c2a3302d53e10a4ad3ac581103faaae9eeb6/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=2d10c2a3302d53e10a4ad3ac581103faaae9eeb6", "patch": "@@ -331,20 +331,24 @@ enum class LLVMRustPassBuilderOptLevel {\n   Oz,\n };\n \n-static PassBuilder::OptimizationLevel fromRust(LLVMRustPassBuilderOptLevel Level) {\n+#if LLVM_VERSION_LT(14,0)\n+using OptimizationLevel = PassBuilder::OptimizationLevel;\n+#endif\n+\n+static OptimizationLevel fromRust(LLVMRustPassBuilderOptLevel Level) {\n   switch (Level) {\n   case LLVMRustPassBuilderOptLevel::O0:\n-    return PassBuilder::OptimizationLevel::O0;\n+    return OptimizationLevel::O0;\n   case LLVMRustPassBuilderOptLevel::O1:\n-    return PassBuilder::OptimizationLevel::O1;\n+    return OptimizationLevel::O1;\n   case LLVMRustPassBuilderOptLevel::O2:\n-    return PassBuilder::OptimizationLevel::O2;\n+    return OptimizationLevel::O2;\n   case LLVMRustPassBuilderOptLevel::O3:\n-    return PassBuilder::OptimizationLevel::O3;\n+    return OptimizationLevel::O3;\n   case LLVMRustPassBuilderOptLevel::Os:\n-    return PassBuilder::OptimizationLevel::Os;\n+    return OptimizationLevel::Os;\n   case LLVMRustPassBuilderOptLevel::Oz:\n-    return PassBuilder::OptimizationLevel::Oz;\n+    return OptimizationLevel::Oz;\n   default:\n     report_fatal_error(\"Bad PassBuilderOptLevel.\");\n   }\n@@ -754,7 +758,7 @@ LLVMRustOptimizeWithNewPassManager(\n     const char *ExtraPasses, size_t ExtraPassesLen) {\n   Module *TheModule = unwrap(ModuleRef);\n   TargetMachine *TM = unwrap(TMRef);\n-  PassBuilder::OptimizationLevel OptLevel = fromRust(OptLevelRust);\n+  OptimizationLevel OptLevel = fromRust(OptLevelRust);\n \n \n   PipelineTuningOptions PTO;\n@@ -827,35 +831,35 @@ LLVMRustOptimizeWithNewPassManager(\n \n   // We manually collect pipeline callbacks so we can apply them at O0, where the\n   // PassBuilder does not create a pipeline.\n-  std::vector<std::function<void(ModulePassManager &, PassBuilder::OptimizationLevel)>>\n+  std::vector<std::function<void(ModulePassManager &, OptimizationLevel)>>\n       PipelineStartEPCallbacks;\n #if LLVM_VERSION_GE(11, 0)\n-  std::vector<std::function<void(ModulePassManager &, PassBuilder::OptimizationLevel)>>\n+  std::vector<std::function<void(ModulePassManager &, OptimizationLevel)>>\n       OptimizerLastEPCallbacks;\n #else\n-  std::vector<std::function<void(FunctionPassManager &, PassBuilder::OptimizationLevel)>>\n+  std::vector<std::function<void(FunctionPassManager &, OptimizationLevel)>>\n       OptimizerLastEPCallbacks;\n #endif\n \n   if (VerifyIR) {\n     PipelineStartEPCallbacks.push_back(\n-      [VerifyIR](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n+      [VerifyIR](ModulePassManager &MPM, OptimizationLevel Level) {\n         MPM.addPass(VerifierPass());\n       }\n     );\n   }\n \n   if (InstrumentGCOV) {\n     PipelineStartEPCallbacks.push_back(\n-      [](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n+      [](ModulePassManager &MPM, OptimizationLevel Level) {\n         MPM.addPass(GCOVProfilerPass(GCOVOptions::getDefault()));\n       }\n     );\n   }\n \n   if (InstrumentCoverage) {\n     PipelineStartEPCallbacks.push_back(\n-      [](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n+      [](ModulePassManager &MPM, OptimizationLevel Level) {\n         InstrProfOptions Options;\n         MPM.addPass(InstrProfiling(Options, false));\n       }\n@@ -870,19 +874,19 @@ LLVMRustOptimizeWithNewPassManager(\n           /*CompileKernel=*/false);\n #if LLVM_VERSION_GE(11, 0)\n       OptimizerLastEPCallbacks.push_back(\n-        [Options](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n+        [Options](ModulePassManager &MPM, OptimizationLevel Level) {\n           MPM.addPass(MemorySanitizerPass(Options));\n           MPM.addPass(createModuleToFunctionPassAdaptor(MemorySanitizerPass(Options)));\n         }\n       );\n #else\n       PipelineStartEPCallbacks.push_back(\n-        [Options](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n+        [Options](ModulePassManager &MPM, OptimizationLevel Level) {\n           MPM.addPass(MemorySanitizerPass(Options));\n         }\n       );\n       OptimizerLastEPCallbacks.push_back(\n-        [Options](FunctionPassManager &FPM, PassBuilder::OptimizationLevel Level) {\n+        [Options](FunctionPassManager &FPM, OptimizationLevel Level) {\n           FPM.addPass(MemorySanitizerPass(Options));\n         }\n       );\n@@ -892,19 +896,19 @@ LLVMRustOptimizeWithNewPassManager(\n     if (SanitizerOptions->SanitizeThread) {\n #if LLVM_VERSION_GE(11, 0)\n       OptimizerLastEPCallbacks.push_back(\n-        [](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n+        [](ModulePassManager &MPM, OptimizationLevel Level) {\n           MPM.addPass(ThreadSanitizerPass());\n           MPM.addPass(createModuleToFunctionPassAdaptor(ThreadSanitizerPass()));\n         }\n       );\n #else\n       PipelineStartEPCallbacks.push_back(\n-        [](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n+        [](ModulePassManager &MPM, OptimizationLevel Level) {\n           MPM.addPass(ThreadSanitizerPass());\n         }\n       );\n       OptimizerLastEPCallbacks.push_back(\n-        [](FunctionPassManager &FPM, PassBuilder::OptimizationLevel Level) {\n+        [](FunctionPassManager &FPM, OptimizationLevel Level) {\n           FPM.addPass(ThreadSanitizerPass());\n         }\n       );\n@@ -914,7 +918,7 @@ LLVMRustOptimizeWithNewPassManager(\n     if (SanitizerOptions->SanitizeAddress) {\n #if LLVM_VERSION_GE(11, 0)\n       OptimizerLastEPCallbacks.push_back(\n-        [SanitizerOptions](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n+        [SanitizerOptions](ModulePassManager &MPM, OptimizationLevel Level) {\n           MPM.addPass(RequireAnalysisPass<ASanGlobalsMetadataAnalysis, Module>());\n           MPM.addPass(ModuleAddressSanitizerPass(\n               /*CompileKernel=*/false, SanitizerOptions->SanitizeAddressRecover));\n@@ -925,19 +929,19 @@ LLVMRustOptimizeWithNewPassManager(\n       );\n #else\n       PipelineStartEPCallbacks.push_back(\n-        [&](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n+        [&](ModulePassManager &MPM, OptimizationLevel Level) {\n           MPM.addPass(RequireAnalysisPass<ASanGlobalsMetadataAnalysis, Module>());\n         }\n       );\n       OptimizerLastEPCallbacks.push_back(\n-        [SanitizerOptions](FunctionPassManager &FPM, PassBuilder::OptimizationLevel Level) {\n+        [SanitizerOptions](FunctionPassManager &FPM, OptimizationLevel Level) {\n           FPM.addPass(AddressSanitizerPass(\n               /*CompileKernel=*/false, SanitizerOptions->SanitizeAddressRecover,\n               /*UseAfterScope=*/true));\n         }\n       );\n       PipelineStartEPCallbacks.push_back(\n-        [SanitizerOptions](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n+        [SanitizerOptions](ModulePassManager &MPM, OptimizationLevel Level) {\n           MPM.addPass(ModuleAddressSanitizerPass(\n               /*CompileKernel=*/false, SanitizerOptions->SanitizeAddressRecover));\n         }\n@@ -947,14 +951,14 @@ LLVMRustOptimizeWithNewPassManager(\n     if (SanitizerOptions->SanitizeHWAddress) {\n #if LLVM_VERSION_GE(11, 0)\n       OptimizerLastEPCallbacks.push_back(\n-        [SanitizerOptions](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n+        [SanitizerOptions](ModulePassManager &MPM, OptimizationLevel Level) {\n           MPM.addPass(HWAddressSanitizerPass(\n               /*CompileKernel=*/false, SanitizerOptions->SanitizeHWAddressRecover));\n         }\n       );\n #else\n       PipelineStartEPCallbacks.push_back(\n-        [SanitizerOptions](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n+        [SanitizerOptions](ModulePassManager &MPM, OptimizationLevel Level) {\n           MPM.addPass(HWAddressSanitizerPass(\n               /*CompileKernel=*/false, SanitizerOptions->SanitizeHWAddressRecover));\n         }\n@@ -970,7 +974,7 @@ LLVMRustOptimizeWithNewPassManager(\n #endif\n   bool NeedThinLTOBufferPasses = UseThinLTOBuffers;\n   if (!NoPrepopulatePasses) {\n-    if (OptLevel == PassBuilder::OptimizationLevel::O0) {\n+    if (OptLevel == OptimizationLevel::O0) {\n #if LLVM_VERSION_GE(12, 0)\n       for (const auto &C : PipelineStartEPCallbacks)\n         PB.registerPipelineStartEPCallback(C);"}]}