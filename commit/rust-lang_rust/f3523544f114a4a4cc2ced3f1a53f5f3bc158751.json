{"sha": "f3523544f114a4a4cc2ced3f1a53f5f3bc158751", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNTIzNTQ0ZjExNGE0YTRjYzJjZWQzZjFhNTNmNWYzYmMxNTg3NTE=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-28T02:16:17Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-28T02:19:32Z"}, "message": "Address more review comments\n\n- Add back various diagnostic methods on `Session`.\n\n  It seems unfortunate to duplicate these in so many places, but in the\n  meantime, making the API inconsistent between `Session` and `Diagnostic`\n  also seems unfortunate.\n\n- Add back TyCtxtAt methods\n\n  These will hopefully be used in the near future.\n\n- Add back `with_const`, it would need to be added soon after anyway.\n- Add back `split()` and `get_mut()`, they're useful.", "tree": {"sha": "9d1883421ed2f6c80ab2c9d137a206e4893c946c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d1883421ed2f6c80ab2c9d137a206e4893c946c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3523544f114a4a4cc2ced3f1a53f5f3bc158751", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3523544f114a4a4cc2ced3f1a53f5f3bc158751", "html_url": "https://github.com/rust-lang/rust/commit/f3523544f114a4a4cc2ced3f1a53f5f3bc158751", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3523544f114a4a4cc2ced3f1a53f5f3bc158751/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "230e396a7663d933d24c3c30f556abbc1dd9405e", "url": "https://api.github.com/repos/rust-lang/rust/commits/230e396a7663d933d24c3c30f556abbc1dd9405e", "html_url": "https://github.com/rust-lang/rust/commit/230e396a7663d933d24c3c30f556abbc1dd9405e"}], "stats": {"total": 82, "additions": 81, "deletions": 1}, "files": [{"sha": "94c1758b25c21ab4d5b6d068742e41b4fc71b5f9", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f3523544f114a4a4cc2ced3f1a53f5f3bc158751/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3523544f114a4a4cc2ced3f1a53f5f3bc158751/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=f3523544f114a4a4cc2ced3f1a53f5f3bc158751", "patch": "@@ -14,7 +14,7 @@ use crate::middle::stability;\n use crate::mir::interpret::{self, Allocation, ConstValue, Scalar};\n use crate::mir::{Body, Field, Local, Place, PlaceElem, ProjectionKind, Promoted};\n use crate::traits;\n-use crate::ty::query::{self, OnDiskCache};\n+use crate::ty::query::{self, OnDiskCache, TyCtxtAt};\n use crate::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Subst, SubstsRef, UserSubsts};\n use crate::ty::TyKind::*;\n use crate::ty::{\n@@ -2650,6 +2650,21 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n }\n \n+impl TyCtxtAt<'tcx> {\n+    /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.\n+    #[track_caller]\n+    pub fn ty_error(self) -> Ty<'tcx> {\n+        self.tcx.ty_error_with_message(self.span, \"TyKind::Error constructed but no error reported\")\n+    }\n+\n+    /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` with the given `msg to\n+    /// ensure it gets used.\n+    #[track_caller]\n+    pub fn ty_error_with_message(self, msg: &str) -> Ty<'tcx> {\n+        self.tcx.ty_error_with_message(self.span, msg)\n+    }\n+}\n+\n pub trait InternAs<T: ?Sized, R> {\n     type Output;\n     fn intern_with<F>(self, f: F) -> Self::Output"}, {"sha": "c0025cf3fc8a5039bf69f388abb7a211d0fbdc1b", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3523544f114a4a4cc2ced3f1a53f5f3bc158751/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3523544f114a4a4cc2ced3f1a53f5f3bc158751/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=f3523544f114a4a4cc2ced3f1a53f5f3bc158751", "patch": "@@ -1208,6 +1208,11 @@ pub trait WithConstness: Sized {\n         ConstnessAnd { constness, value: self }\n     }\n \n+    #[inline]\n+    fn with_const(self) -> ConstnessAnd<Self> {\n+        self.with_constness(Constness::Const)\n+    }\n+\n     #[inline]\n     fn without_const(self) -> ConstnessAnd<Self> {\n         self.with_constness(Constness::NotConst)"}, {"sha": "b8fe7aa7fd06acaca16727ca94f3f4afa8986df2", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f3523544f114a4a4cc2ced3f1a53f5f3bc158751/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3523544f114a4a4cc2ced3f1a53f5f3bc158751/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=f3523544f114a4a4cc2ced3f1a53f5f3bc158751", "patch": "@@ -1058,6 +1058,20 @@ impl<T> Binder<T> {\n     {\n         Binder(f(self.0, u.0))\n     }\n+\n+    /// Splits the contents into two things that share the same binder\n+    /// level as the original, returning two distinct binders.\n+    ///\n+    /// `f` should consider bound regions at depth 1 to be free, and\n+    /// anything it produces with bound regions at depth 1 will be\n+    /// bound in the resulting return values.\n+    pub fn split<U, V, F>(self, f: F) -> (Binder<U>, Binder<V>)\n+    where\n+        F: FnOnce(T) -> (U, V),\n+    {\n+        let (u, v) = f(self.0);\n+        (Binder(u), Binder(v))\n+    }\n }\n \n impl<T> Binder<Option<T>> {"}, {"sha": "65869f956397f16ab79a89e5e5d5867bd4dc68f6", "filename": "compiler/rustc_mir/src/interpret/machine.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3523544f114a4a4cc2ced3f1a53f5f3bc158751/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3523544f114a4a4cc2ced3f1a53f5f3bc158751/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs?ref=f3523544f114a4a4cc2ced3f1a53f5f3bc158751", "patch": "@@ -71,6 +71,11 @@ pub trait AllocMap<K: Hash + Eq, V> {\n     fn get(&self, k: K) -> Option<&V> {\n         self.get_or(k, || Err(())).ok()\n     }\n+\n+    /// Mutable lookup.\n+    fn get_mut(&mut self, k: K) -> Option<&mut V> {\n+        self.get_mut_or(k, || Err(())).ok()\n+    }\n }\n \n /// Methods of this trait signifies a point where CTFE evaluation would fail"}, {"sha": "693f427d7afccf1e733110449bef4c209fe66dea", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f3523544f114a4a4cc2ced3f1a53f5f3bc158751/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3523544f114a4a4cc2ced3f1a53f5f3bc158751/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=f3523544f114a4a4cc2ced3f1a53f5f3bc158751", "patch": "@@ -364,6 +364,14 @@ impl Session {\n     pub fn struct_span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_span_warn(sp, msg)\n     }\n+    pub fn struct_span_warn_with_code<S: Into<MultiSpan>>(\n+        &self,\n+        sp: S,\n+        msg: &str,\n+        code: DiagnosticId,\n+    ) -> DiagnosticBuilder<'_> {\n+        self.diagnostic().struct_span_warn_with_code(sp, msg, code)\n+    }\n     pub fn struct_warn(&self, msg: &str) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_warn(msg)\n     }\n@@ -402,16 +410,37 @@ impl Session {\n     ) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_span_fatal_with_code(sp, msg, code)\n     }\n+    pub fn struct_fatal(&self, msg: &str) -> DiagnosticBuilder<'_> {\n+        self.diagnostic().struct_fatal(msg)\n+    }\n \n     pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! {\n         self.diagnostic().span_fatal(sp, msg).raise()\n     }\n+    pub fn span_fatal_with_code<S: Into<MultiSpan>>(\n+        &self,\n+        sp: S,\n+        msg: &str,\n+        code: DiagnosticId,\n+    ) -> ! {\n+        self.diagnostic().span_fatal_with_code(sp, msg, code).raise()\n+    }\n     pub fn fatal(&self, msg: &str) -> ! {\n         self.diagnostic().fatal(msg).raise()\n     }\n+    pub fn span_err_or_warn<S: Into<MultiSpan>>(&self, is_warning: bool, sp: S, msg: &str) {\n+        if is_warning {\n+            self.span_warn(sp, msg);\n+        } else {\n+            self.span_err(sp, msg);\n+        }\n+    }\n     pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.diagnostic().span_err(sp, msg)\n     }\n+    pub fn span_err_with_code<S: Into<MultiSpan>>(&self, sp: S, msg: &str, code: DiagnosticId) {\n+        self.diagnostic().span_err_with_code(sp, &msg, code)\n+    }\n     pub fn err(&self, msg: &str) {\n         self.diagnostic().err(msg)\n     }\n@@ -451,9 +480,18 @@ impl Session {\n     pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.diagnostic().span_warn(sp, msg)\n     }\n+    pub fn span_warn_with_code<S: Into<MultiSpan>>(&self, sp: S, msg: &str, code: DiagnosticId) {\n+        self.diagnostic().span_warn_with_code(sp, msg, code)\n+    }\n     pub fn warn(&self, msg: &str) {\n         self.diagnostic().warn(msg)\n     }\n+    pub fn opt_span_warn<S: Into<MultiSpan>>(&self, opt_sp: Option<S>, msg: &str) {\n+        match opt_sp {\n+            Some(sp) => self.span_warn(sp, msg),\n+            None => self.warn(msg),\n+        }\n+    }\n     /// Delay a span_bug() call until abort_if_errors()\n     #[track_caller]\n     pub fn delay_span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n@@ -480,6 +518,9 @@ impl Session {\n     pub fn note_without_error(&self, msg: &str) {\n         self.diagnostic().note_without_error(msg)\n     }\n+    pub fn span_note_without_error<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n+        self.diagnostic().span_note_without_error(sp, msg)\n+    }\n     pub fn struct_note_without_error(&self, msg: &str) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_note_without_error(msg)\n     }"}]}