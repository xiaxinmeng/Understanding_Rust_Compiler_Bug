{"sha": "fd24fd5e318c5bfbe0cba49f0b49edd3c112f451", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMjRmZDVlMzE4YzViZmJlMGNiYTQ5ZjBiNDllZGQzYzExMmY0NTE=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-07-11T18:31:57Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-12T01:44:27Z"}, "message": "Only print up to six lines on error. Print ^~~~~ to highlight error span.", "tree": {"sha": "ae6b8844abd7ebc2815b9db9c193413ae44aa102", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae6b8844abd7ebc2815b9db9c193413ae44aa102"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd24fd5e318c5bfbe0cba49f0b49edd3c112f451", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd24fd5e318c5bfbe0cba49f0b49edd3c112f451", "html_url": "https://github.com/rust-lang/rust/commit/fd24fd5e318c5bfbe0cba49f0b49edd3c112f451", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd24fd5e318c5bfbe0cba49f0b49edd3c112f451/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b62fcdcc36a451a23a0b4639f78e4434949190ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/b62fcdcc36a451a23a0b4639f78e4434949190ba", "html_url": "https://github.com/rust-lang/rust/commit/b62fcdcc36a451a23a0b4639f78e4434949190ba"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "8a1f5d791ce44631285fefd4dd4c675911bb49b3", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd24fd5e318c5bfbe0cba49f0b49edd3c112f451/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd24fd5e318c5bfbe0cba49f0b49edd3c112f451/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=fd24fd5e318c5bfbe0cba49f0b49edd3c112f451", "patch": "@@ -10,6 +10,7 @@ import std::option;\n import std::option::some;\n import std::option::none;\n import std::str;\n+import std::vec;\n \n tag os { os_win32; os_macos; os_linux; }\n "}, {"sha": "34b5a02112f39b622c42ef391b4a259f8c68efa0", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/fd24fd5e318c5bfbe0cba49f0b49edd3c112f451/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd24fd5e318c5bfbe0cba49f0b49edd3c112f451/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=fd24fd5e318c5bfbe0cba49f0b49edd3c112f451", "patch": "@@ -78,17 +78,65 @@ fn emit_diagnostic(&option::t[span] sp, &str msg, &str kind, u8 color,\n     io::stdout().write_str(#fmt(\" %s\\n\", msg));\n     alt (maybe_lines) {\n         case (some(?lines)) {\n+            // FIXME: reading in the entire file is the worst possible way to\n+            //        get access to the necessary lines.\n             auto rdr = io::file_reader(lines.name);\n             auto file = str::unsafe_from_bytes(rdr.read_whole_stream());\n             auto fm = codemap::get_filemap(cm, lines.name);\n-            for (uint line in lines.lines) {\n+\n+            // arbitrarily only print up to six lines of the error\n+            auto max_lines = 6u;\n+            auto elided = false;\n+            auto display_lines = lines.lines;\n+            if (vec::len(display_lines) > max_lines) {\n+                display_lines = vec::slice(display_lines, 0u, max_lines);\n+                elided = true;\n+            }\n+            // Print the offending lines\n+            for (uint line in display_lines) {\n                 io::stdout().write_str(#fmt(\"%s:%u \", fm.name, line + 1u));\n                 auto s = codemap::get_line(fm, line as int, file);\n                 if (!str::ends_with(s, \"\\n\")) {\n                     s += \"\\n\";\n                 }\n                 io::stdout().write_str(s);\n             }\n+            if (elided) {\n+                auto last_line = display_lines.(vec::len(display_lines) - 1u);\n+                auto s = #fmt(\"%s:%u \", fm.name, last_line + 1u);\n+                auto indent = str::char_len(s);\n+                auto out = \"\";\n+                while (indent > 0u) { out += \" \"; indent -= 1u; }\n+                out += \"...\\n\";\n+                io::stdout().write_str(out);\n+            }\n+\n+            // If there's one line at fault we can easily point to the problem\n+            if (vec::len(lines.lines) == 1u) {\n+                auto lo = codemap::lookup_pos(cm, option::get(sp).lo);\n+                auto digits = 0u;\n+                auto num = lines.lines.(0) / 10u;\n+\n+                // how many digits must be indent past?\n+                while (num > 0u) { num /= 10u; digits += 1u; }\n+\n+                // indent past |name:## | and the 0-offset column location\n+                auto left = str::char_len(fm.name) + digits + lo.col + 3u;\n+                auto s = \"\";\n+                while (left > 0u) { str::push_char(s, ' '); left -= 1u; }\n+\n+                s += \"^\";\n+                auto hi = codemap::lookup_pos(cm, option::get(sp).hi);\n+                if (hi.col != lo.col) {\n+                    // the ^ already takes up one space\n+                    auto width = hi.col - lo.col - 1u;\n+                    while (width > 0u) {\n+                        str::push_char(s, '~');\n+                        width -= 1u;\n+                    }\n+                }\n+                io::stdout().write_str(s + \"\\n\");\n+            }\n         }\n         case (_) {}\n     }"}]}