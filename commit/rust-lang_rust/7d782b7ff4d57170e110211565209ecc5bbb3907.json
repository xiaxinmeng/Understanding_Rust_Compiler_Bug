{"sha": "7d782b7ff4d57170e110211565209ecc5bbb3907", "node_id": "C_kwDOAAsO6NoAKDdkNzgyYjdmZjRkNTcxNzBlMTEwMjExNTY1MjA5ZWNjNWJiYjM5MDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-27T11:41:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-27T11:41:41Z"}, "message": "Auto merge of #108175 - cjgillot:validate-storage, r=tmiasko\n\nMIR-Validate StorageLive.\n\n`StorageLive` statements on a local which already has storage is banned by miri.\n\nThis check is easy enough, and can detect bugs in MIR opts.", "tree": {"sha": "8554515c247bf460d6be7509310350d6fb750d4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8554515c247bf460d6be7509310350d6fb750d4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d782b7ff4d57170e110211565209ecc5bbb3907", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d782b7ff4d57170e110211565209ecc5bbb3907", "html_url": "https://github.com/rust-lang/rust/commit/7d782b7ff4d57170e110211565209ecc5bbb3907", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d782b7ff4d57170e110211565209ecc5bbb3907/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "url": "https://api.github.com/repos/rust-lang/rust/commits/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "html_url": "https://github.com/rust-lang/rust/commit/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39"}, {"sha": "bf46b9cb281cd196ca6227b2b72ef64dee390b5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf46b9cb281cd196ca6227b2b72ef64dee390b5a", "html_url": "https://github.com/rust-lang/rust/commit/bf46b9cb281cd196ca6227b2b72ef64dee390b5a"}], "stats": {"total": 65, "additions": 63, "deletions": 2}, "files": [{"sha": "fb37eb79a335fa3304452fd5a944aaaf1b1e6e09", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7d782b7ff4d57170e110211565209ecc5bbb3907/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d782b7ff4d57170e110211565209ecc5bbb3907/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=7d782b7ff4d57170e110211565209ecc5bbb3907", "patch": "@@ -755,8 +755,26 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     self.fail(location, format!(\"explicit `{:?}` is forbidden\", kind));\n                 }\n             }\n-            StatementKind::StorageLive(..)\n-            | StatementKind::StorageDead(..)\n+            StatementKind::StorageLive(local) => {\n+                // We check that the local is not live when entering a `StorageLive` for it.\n+                // Technically, violating this restriction is only UB and not actually indicative\n+                // of not well-formed MIR. This means that an optimization which turns MIR that\n+                // already has UB into MIR that fails this check is not necessarily wrong. However,\n+                // we have no such optimizations at the moment, and so we include this check anyway\n+                // to help us catch bugs. If you happen to write an optimization that might cause\n+                // this to incorrectly fire, feel free to remove this check.\n+                if self.reachable_blocks.contains(location.block) {\n+                    self.storage_liveness.seek_before_primary_effect(location);\n+                    let locals_with_storage = self.storage_liveness.get();\n+                    if locals_with_storage.contains(*local) {\n+                        self.fail(\n+                            location,\n+                            format!(\"StorageLive({local:?}) which already has storage here\"),\n+                        );\n+                    }\n+                }\n+            }\n+            StatementKind::StorageDead(_)\n             | StatementKind::Coverage(_)\n             | StatementKind::ConstEvalCounter\n             | StatementKind::Nop => {}"}, {"sha": "ed3c26ed6da5a8b60f682f4c3a1e0804ad2e59aa", "filename": "tests/ui/mir/validate/storage-live.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7d782b7ff4d57170e110211565209ecc5bbb3907/tests%2Fui%2Fmir%2Fvalidate%2Fstorage-live.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d782b7ff4d57170e110211565209ecc5bbb3907/tests%2Fui%2Fmir%2Fvalidate%2Fstorage-live.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Fvalidate%2Fstorage-live.rs?ref=7d782b7ff4d57170e110211565209ecc5bbb3907", "patch": "@@ -0,0 +1,30 @@\n+// compile-flags: -Zvalidate-mir -Ztreat-err-as-bug\n+// failure-status: 101\n+// error-pattern: broken MIR in\n+// error-pattern: StorageLive(_1) which already has storage here\n+// normalize-stderr-test \"note: .*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"thread 'rustc' panicked.*\\n\" -> \"\"\n+// normalize-stderr-test \"storage_live\\[....\\]\" -> \"storage_live[HASH]\"\n+// rustc-env:RUST_BACKTRACE=0\n+\n+#![feature(custom_mir, core_intrinsics)]\n+\n+extern crate core;\n+use core::intrinsics::mir::*;\n+use core::ptr::{addr_of, addr_of_mut};\n+\n+#[custom_mir(dialect = \"built\")]\n+fn multiple_storage() {\n+    mir!(\n+        let a: usize;\n+        {\n+            StorageLive(a);\n+            StorageLive(a);\n+            Return()\n+        }\n+    )\n+}\n+\n+fn main() {\n+    multiple_storage()\n+}"}, {"sha": "b586a8658498fe2ca1dcca28e9fb0bc4e14df01f", "filename": "tests/ui/mir/validate/storage-live.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7d782b7ff4d57170e110211565209ecc5bbb3907/tests%2Fui%2Fmir%2Fvalidate%2Fstorage-live.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d782b7ff4d57170e110211565209ecc5bbb3907/tests%2Fui%2Fmir%2Fvalidate%2Fstorage-live.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Fvalidate%2Fstorage-live.stderr?ref=7d782b7ff4d57170e110211565209ecc5bbb3907", "patch": "@@ -0,0 +1,13 @@\n+error: internal compiler error: broken MIR in Item(WithOptConstParam { did: DefId(0:8 ~ storage_live[HASH]::multiple_storage), const_param_did: None }) (before pass CheckPackedRef) at bb0[1]:\n+                                StorageLive(_1) which already has storage here\n+  --> $DIR/storage-live.rs:22:13\n+   |\n+LL |             StorageLive(a);\n+   |             ^^^^^^^^^^^^^^\n+\n+error: the compiler unexpectedly panicked. this is a bug.\n+\n+query stack during panic:\n+#0 [mir_const] preparing `multiple_storage` for borrow checking\n+#1 [mir_promoted] processing MIR for `multiple_storage`\n+end of query stack"}]}