{"sha": "be9e7f9aaf742217532f20a80d4cbc15fd185ecf", "node_id": "C_kwDOAAsO6NoAKGJlOWU3ZjlhYWY3NDIyMTc1MzJmMjBhODBkNGNiYzE1ZmQxODVlY2Y", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-12T12:42:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-12T12:42:36Z"}, "message": "Merge #10528\n\n10528: internal: Make selections in assists with trailing/leading whitespace more forgiving r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "682c5905b9a861a43f5acabc54fe82bc071808df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/682c5905b9a861a43f5acabc54fe82bc071808df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be9e7f9aaf742217532f20a80d4cbc15fd185ecf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhZYK8CRBK7hj4Ov3rIwAA17UIAJqZLt9GfPhaW2nBqztHwW2h\nv28gHCogXQwTIDar1aHpWNLVWjdEzwyhg1qAWR7mITWP7+YKAt1t0ejlXaPUO/Qb\neEsuQlYxHBwt/cW4/ATlZxyscmStSCCcWLz/OdJcxDwM6zlFXoYZenzZrDQe3683\nYofAdFeecwFprbaks+cRbcnDBd3R3b1ufIWMJ1hQtKJDdQeyNwMrFv6LWhqIRWuH\njMJXLDbsaN0CQKCEH/I41svLyzKCmScMa7vAO1KwNKGltlXpyeeI9tv8rPDjik0G\nyJMdYu0adRIUmbgDNuLABCJfuYe9wCYrmc8TEQTCMuhl8zXz76KzMlmveL0KGiA=\n=EaYS\n-----END PGP SIGNATURE-----\n", "payload": "tree 682c5905b9a861a43f5acabc54fe82bc071808df\nparent 64b1c72af2d61495a784d6e97142284761c06437\nparent 03fcf1b24661a2e2251fc6ad5c2c66c40387dae0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1634042556 +0000\ncommitter GitHub <noreply@github.com> 1634042556 +0000\n\nMerge #10528\n\n10528: internal: Make selections in assists with trailing/leading whitespace more forgiving r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be9e7f9aaf742217532f20a80d4cbc15fd185ecf", "html_url": "https://github.com/rust-lang/rust/commit/be9e7f9aaf742217532f20a80d4cbc15fd185ecf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64b1c72af2d61495a784d6e97142284761c06437", "url": "https://api.github.com/repos/rust-lang/rust/commits/64b1c72af2d61495a784d6e97142284761c06437", "html_url": "https://github.com/rust-lang/rust/commit/64b1c72af2d61495a784d6e97142284761c06437"}, {"sha": "03fcf1b24661a2e2251fc6ad5c2c66c40387dae0", "url": "https://api.github.com/repos/rust-lang/rust/commits/03fcf1b24661a2e2251fc6ad5c2c66c40387dae0", "html_url": "https://github.com/rust-lang/rust/commit/03fcf1b24661a2e2251fc6ad5c2c66c40387dae0"}], "stats": {"total": 80, "additions": 57, "deletions": 23}, "files": [{"sha": "d6fd27efac7670e30482e7ade311e66df4943395", "filename": "crates/ide_assists/src/assist_context.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/crates%2Fide_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/crates%2Fide_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fassist_context.rs?ref=be9e7f9aaf742217532f20a80d4cbc15fd185ecf", "patch": "@@ -14,7 +14,7 @@ use ide_db::{\n };\n use syntax::{\n     algo::{self, find_node_at_offset, find_node_at_range},\n-    AstNode, AstToken, SourceFile, SyntaxElement, SyntaxKind, SyntaxNode, SyntaxNodePtr,\n+    AstNode, AstToken, Direction, SourceFile, SyntaxElement, SyntaxKind, SyntaxNode, SyntaxNodePtr,\n     SyntaxToken, TextRange, TextSize, TokenAtOffset,\n };\n use text_edit::{TextEdit, TextEditBuilder};\n@@ -57,6 +57,7 @@ pub(crate) struct AssistContext<'a> {\n     pub(crate) config: &'a AssistConfig,\n     pub(crate) sema: Semantics<'a, RootDatabase>,\n     pub(crate) frange: FileRange,\n+    trimmed_range: TextRange,\n     source_file: SourceFile,\n }\n \n@@ -67,7 +68,20 @@ impl<'a> AssistContext<'a> {\n         frange: FileRange,\n     ) -> AssistContext<'a> {\n         let source_file = sema.parse(frange.file_id);\n-        AssistContext { config, sema, frange, source_file }\n+\n+        let start = frange.range.start();\n+        let end = frange.range.end();\n+        let left = source_file.syntax().token_at_offset(start);\n+        let right = source_file.syntax().token_at_offset(end);\n+        let left =\n+            left.right_biased().and_then(|t| algo::skip_whitespace_token(t, Direction::Next));\n+        let right =\n+            right.left_biased().and_then(|t| algo::skip_whitespace_token(t, Direction::Prev));\n+        let left = left.map(|t| t.text_range().start()).unwrap_or(start).clamp(start, end);\n+        let right = right.map(|t| t.text_range().end()).unwrap_or(end).clamp(start, end);\n+        let trimmed_range = TextRange::new(left, right);\n+\n+        AssistContext { config, sema, frange, source_file, trimmed_range }\n     }\n \n     pub(crate) fn db(&self) -> &RootDatabase {\n@@ -79,6 +93,12 @@ impl<'a> AssistContext<'a> {\n         self.frange.range.start()\n     }\n \n+    /// Returns the selected range trimmed for whitespace tokens, that is the range will be snapped\n+    /// to the nearest enclosed token.\n+    pub(crate) fn selection_trimmed(&self) -> TextRange {\n+        self.trimmed_range\n+    }\n+\n     pub(crate) fn token_at_offset(&self) -> TokenAtOffset<SyntaxToken> {\n         self.source_file.syntax().token_at_offset(self.offset())\n     }\n@@ -92,13 +112,15 @@ impl<'a> AssistContext<'a> {\n         find_node_at_offset(self.source_file.syntax(), self.offset())\n     }\n     pub(crate) fn find_node_at_range<N: AstNode>(&self) -> Option<N> {\n-        find_node_at_range(self.source_file.syntax(), self.frange.range)\n+        find_node_at_range(self.source_file.syntax(), self.trimmed_range)\n     }\n     pub(crate) fn find_node_at_offset_with_descend<N: AstNode>(&self) -> Option<N> {\n         self.sema.find_node_at_offset_with_descend(self.source_file.syntax(), self.offset())\n     }\n+    /// Returns the element covered by the selection range, this excludes trailing whitespace in the selection.\n     pub(crate) fn covering_element(&self) -> SyntaxElement {\n-        self.source_file.syntax().covering_element(self.frange.range)\n+        self.source_file.syntax().covering_element(self.selection_trimmed())\n+        // self.source_file.syntax().covering_element(self.frange.range)\n     }\n }\n "}, {"sha": "84983597eb8343c3cbb34458fd28da0b045512b1", "filename": "crates/ide_assists/src/handlers/add_return_type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs?ref=be9e7f9aaf742217532f20a80d4cbc15fd185ecf", "patch": "@@ -107,11 +107,11 @@ fn extract_tail(ctx: &AssistContext) -> Option<(FnType, ast::Expr, InsertOrRepla\n             let ret_range = TextRange::new(rparen_pos, ret_range_end);\n             (FnType::Function, tail_expr, ret_range, action)\n         };\n-    let frange = ctx.frange.range;\n-    if return_type_range.contains_range(frange) {\n+    let range = ctx.selection_trimmed();\n+    if return_type_range.contains_range(range) {\n         cov_mark::hit!(cursor_in_ret_position);\n         cov_mark::hit!(cursor_in_ret_position_closure);\n-    } else if tail_expr.syntax().text_range().contains_range(frange) {\n+    } else if tail_expr.syntax().text_range().contains_range(range) {\n         cov_mark::hit!(cursor_on_tail);\n         cov_mark::hit!(cursor_on_tail_closure);\n     } else {"}, {"sha": "b3fcf6578a3ba913e615e1c37efa4c1bb8308d2c", "filename": "crates/ide_assists/src/handlers/apply_demorgan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs?ref=be9e7f9aaf742217532f20a80d4cbc15fd185ecf", "patch": "@@ -33,7 +33,7 @@ pub(crate) fn apply_demorgan(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n         _ => return None,\n     };\n \n-    let cursor_in_range = op_range.contains_range(ctx.frange.range);\n+    let cursor_in_range = op_range.contains_range(ctx.selection_trimmed());\n     if !cursor_in_range {\n         return None;\n     }"}, {"sha": "eca6d047a1a74af0028a9955030caa9b7329a58c", "filename": "crates/ide_assists/src/handlers/convert_iter_for_each_to_for.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs?ref=be9e7f9aaf742217532f20a80d4cbc15fd185ecf", "patch": "@@ -199,7 +199,7 @@ fn validate_method_call_expr(\n     expr: ast::MethodCallExpr,\n ) -> Option<(ast::Expr, ast::Expr)> {\n     let name_ref = expr.name_ref()?;\n-    if name_ref.syntax().text_range().intersect(ctx.frange.range).is_none() {\n+    if !name_ref.syntax().text_range().contains_range(ctx.selection_trimmed()) {\n         cov_mark::hit!(test_for_each_not_applicable_invalid_cursor_pos);\n         return None;\n     }"}, {"sha": "f33b455f141aec1c9b0ab0be928257a8918ab217", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=be9e7f9aaf742217532f20a80d4cbc15fd185ecf", "patch": "@@ -56,7 +56,7 @@ type FxIndexSet<T> = indexmap::IndexSet<T, BuildHasherDefault<FxHasher>>;\n // }\n // ```\n pub(crate) fn extract_function(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let range = ctx.frange.range;\n+    let range = ctx.selection_trimmed();\n     if range.is_empty() {\n         return None;\n     }"}, {"sha": "544f1fb583d78d6dd425af49b6acf1c9b051a1fb", "filename": "crates/ide_assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=be9e7f9aaf742217532f20a80d4cbc15fd185ecf", "patch": "@@ -31,6 +31,7 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n     if ctx.frange.range.is_empty() {\n         return None;\n     }\n+\n     let node = match ctx.covering_element() {\n         NodeOrToken::Node(it) => it,\n         NodeOrToken::Token(it) if it.kind() == COMMENT => {\n@@ -238,7 +239,7 @@ fn foo() {\n             extract_variable,\n             r#\"\n fn foo() {\n-    $01 + 1$0;\n+  $0  1 + 1$0;\n }\"#,\n             r#\"\n fn foo() {\n@@ -247,12 +248,12 @@ fn foo() {\n         );\n         check_assist(\n             extract_variable,\n-            \"\n+            r\"\n fn foo() {\n     $0{ let x = 0; x }$0\n     something_else();\n }\",\n-            \"\n+            r\"\n fn foo() {\n     let $0var_name = { let x = 0; x };\n     something_else();\n@@ -264,11 +265,11 @@ fn foo() {\n     fn test_extract_var_part_of_expr_stmt() {\n         check_assist(\n             extract_variable,\n-            \"\n+            r\"\n fn foo() {\n     $01$0 + 1;\n }\",\n-            \"\n+            r\"\n fn foo() {\n     let $0var_name = 1;\n     var_name + 1;"}, {"sha": "19e85b27f986dfc07538d5eddafa94028d4be221", "filename": "crates/ide_assists/src/handlers/flip_binexpr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs?ref=be9e7f9aaf742217532f20a80d4cbc15fd185ecf", "patch": "@@ -23,7 +23,7 @@ pub(crate) fn flip_binexpr(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     let rhs = expr.rhs()?.syntax().clone();\n     let op_range = expr.op_token()?.text_range();\n     // The assist should be applied only if the cursor is on the operator\n-    let cursor_in_range = op_range.contains_range(ctx.frange.range);\n+    let cursor_in_range = op_range.contains_range(ctx.selection_trimmed());\n     if !cursor_in_range {\n         return None;\n     }"}, {"sha": "c2b2b5512c78e1364eb6682efb1857eed1c1d188", "filename": "crates/ide_assists/src/handlers/inline_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=be9e7f9aaf742217532f20a80d4cbc15fd185ecf", "patch": "@@ -199,7 +199,7 @@ pub(crate) fn inline_call(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     let param_list = fn_source.value.param_list()?;\n \n     let FileRange { file_id, range } = fn_source.syntax().original_file_range(ctx.sema.db);\n-    if file_id == ctx.frange.file_id && range.contains(ctx.frange.range.start()) {\n+    if file_id == ctx.frange.file_id && range.contains(ctx.offset()) {\n         cov_mark::hit!(inline_call_recursive);\n         return None;\n     }"}, {"sha": "237b816a240eddd44f39d00895d93c00fb7f048a", "filename": "crates/ide_assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=be9e7f9aaf742217532f20a80d4cbc15fd185ecf", "patch": "@@ -1,7 +1,7 @@\n use either::Either;\n use hir::{PathResolution, Semantics};\n use ide_db::{\n-    base_db::{FileId, FileRange},\n+    base_db::FileId,\n     defs::Definition,\n     search::{FileReference, UsageSearchResult},\n     RootDatabase,\n@@ -33,7 +33,8 @@ use crate::{\n // }\n // ```\n pub(crate) fn inline_local_variable(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let FileRange { file_id, range } = ctx.frange;\n+    let file_id = ctx.frange.file_id;\n+    let range = ctx.selection_trimmed();\n     let InlineData { let_stmt, delete_let, references, target } =\n         if let Some(let_stmt) = ctx.find_node_at_offset::<ast::LetStmt>() {\n             inline_let(&ctx.sema, let_stmt, range, file_id)"}, {"sha": "20f6b0c54c9e53262fa9ceb7f0f6609396e5776b", "filename": "crates/ide_assists/src/handlers/invert_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs?ref=be9e7f9aaf742217532f20a80d4cbc15fd185ecf", "patch": "@@ -29,7 +29,7 @@ pub(crate) fn invert_if(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let if_keyword = ctx.find_token_syntax_at_offset(T![if])?;\n     let expr = ast::IfExpr::cast(if_keyword.parent()?)?;\n     let if_range = if_keyword.text_range();\n-    let cursor_in_range = if_range.contains_range(ctx.frange.range);\n+    let cursor_in_range = if_range.contains_range(ctx.selection_trimmed());\n     if !cursor_in_range {\n         return None;\n     }"}, {"sha": "105ca278de8b663cbdc6eb99227e0789d18a2b44", "filename": "crates/ide_assists/src/handlers/move_from_mod_rs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_from_mod_rs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_from_mod_rs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_from_mod_rs.rs?ref=be9e7f9aaf742217532f20a80d4cbc15fd185ecf", "patch": "@@ -27,7 +27,7 @@ pub(crate) fn move_from_mod_rs(acc: &mut Assists, ctx: &AssistContext) -> Option\n     let source_file = ctx.find_node_at_offset::<ast::SourceFile>()?;\n     let module = ctx.sema.to_module_def(ctx.frange.file_id)?;\n     // Enable this assist if the user select all \"meaningful\" content in the source file\n-    let trimmed_selected_range = trimmed_text_range(&source_file, ctx.frange.range);\n+    let trimmed_selected_range = trimmed_text_range(&source_file, ctx.selection_trimmed());\n     let trimmed_file_range = trimmed_text_range(&source_file, source_file.syntax().text_range());\n     if !module.is_mod_rs(ctx.db()) {\n         cov_mark::hit!(not_mod_rs);"}, {"sha": "183f963d4b0279f22aa59a8614059199689feb0a", "filename": "crates/ide_assists/src/handlers/move_to_mod_rs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_to_mod_rs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_to_mod_rs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_to_mod_rs.rs?ref=be9e7f9aaf742217532f20a80d4cbc15fd185ecf", "patch": "@@ -27,7 +27,7 @@ pub(crate) fn move_to_mod_rs(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n     let source_file = ctx.find_node_at_offset::<ast::SourceFile>()?;\n     let module = ctx.sema.to_module_def(ctx.frange.file_id)?;\n     // Enable this assist if the user select all \"meaningful\" content in the source file\n-    let trimmed_selected_range = trimmed_text_range(&source_file, ctx.frange.range);\n+    let trimmed_selected_range = trimmed_text_range(&source_file, ctx.selection_trimmed());\n     let trimmed_file_range = trimmed_text_range(&source_file, source_file.syntax().text_range());\n     if module.is_mod_rs(ctx.db()) {\n         cov_mark::hit!(already_mod_rs);"}, {"sha": "4d5262646c800958827a64d4f878488422636bc3", "filename": "crates/ide_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=be9e7f9aaf742217532f20a80d4cbc15fd185ecf", "patch": "@@ -48,7 +48,7 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext)\n         if_expr.syntax().text_range().start(),\n         if_expr.then_branch()?.syntax().text_range().start(),\n     );\n-    let cursor_in_range = available_range.contains_range(ctx.frange.range);\n+    let cursor_in_range = available_range.contains_range(ctx.selection_trimmed());\n     if !cursor_in_range {\n         return None;\n     }"}, {"sha": "817625f8792cadde8671abbbb5a54c979693869f", "filename": "crates/syntax/src/algo.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/crates%2Fsyntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9e7f9aaf742217532f20a80d4cbc15fd185ecf/crates%2Fsyntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Falgo.rs?ref=be9e7f9aaf742217532f20a80d4cbc15fd185ecf", "patch": "@@ -53,6 +53,16 @@ pub fn skip_trivia_token(mut token: SyntaxToken, direction: Direction) -> Option\n     }\n     Some(token)\n }\n+/// Skip to next non `whitespace` token\n+pub fn skip_whitespace_token(mut token: SyntaxToken, direction: Direction) -> Option<SyntaxToken> {\n+    while token.kind() == SyntaxKind::WHITESPACE {\n+        token = match direction {\n+            Direction::Next => token.next_token()?,\n+            Direction::Prev => token.prev_token()?,\n+        }\n+    }\n+    Some(token)\n+}\n \n /// Finds the first sibling in the given direction which is not `trivia`\n pub fn non_trivia_sibling(element: SyntaxElement, direction: Direction) -> Option<SyntaxElement> {"}]}