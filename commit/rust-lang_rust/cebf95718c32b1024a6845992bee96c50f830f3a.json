{"sha": "cebf95718c32b1024a6845992bee96c50f830f3a", "node_id": "C_kwDOAAsO6NoAKGNlYmY5NTcxOGMzMmIxMDI0YTY4NDU5OTJiZWU5NmM1MGY4MzBmM2E", "commit": {"author": {"name": "Justin Ridgewell", "email": "justin@ridgewell.name", "date": "2022-08-16T21:53:10Z"}, "committer": {"name": "Justin Ridgewell", "email": "justin@ridgewell.name", "date": "2022-08-16T21:53:10Z"}, "message": "Find IntoFuture::IntoFuture's poll method", "tree": {"sha": "15d4b9787d8e355bd095562fb78a8148aab0d0ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15d4b9787d8e355bd095562fb78a8148aab0d0ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cebf95718c32b1024a6845992bee96c50f830f3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cebf95718c32b1024a6845992bee96c50f830f3a", "html_url": "https://github.com/rust-lang/rust/commit/cebf95718c32b1024a6845992bee96c50f830f3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cebf95718c32b1024a6845992bee96c50f830f3a/comments", "author": {"login": "jridgewell", "id": 112982, "node_id": "MDQ6VXNlcjExMjk4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/112982?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jridgewell", "html_url": "https://github.com/jridgewell", "followers_url": "https://api.github.com/users/jridgewell/followers", "following_url": "https://api.github.com/users/jridgewell/following{/other_user}", "gists_url": "https://api.github.com/users/jridgewell/gists{/gist_id}", "starred_url": "https://api.github.com/users/jridgewell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jridgewell/subscriptions", "organizations_url": "https://api.github.com/users/jridgewell/orgs", "repos_url": "https://api.github.com/users/jridgewell/repos", "events_url": "https://api.github.com/users/jridgewell/events{/privacy}", "received_events_url": "https://api.github.com/users/jridgewell/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jridgewell", "id": 112982, "node_id": "MDQ6VXNlcjExMjk4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/112982?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jridgewell", "html_url": "https://github.com/jridgewell", "followers_url": "https://api.github.com/users/jridgewell/followers", "following_url": "https://api.github.com/users/jridgewell/following{/other_user}", "gists_url": "https://api.github.com/users/jridgewell/gists{/gist_id}", "starred_url": "https://api.github.com/users/jridgewell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jridgewell/subscriptions", "organizations_url": "https://api.github.com/users/jridgewell/orgs", "repos_url": "https://api.github.com/users/jridgewell/repos", "events_url": "https://api.github.com/users/jridgewell/events{/privacy}", "received_events_url": "https://api.github.com/users/jridgewell/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc3219bb11f032e2e6f1d16deab2b5eabe9463d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc3219bb11f032e2e6f1d16deab2b5eabe9463d7", "html_url": "https://github.com/rust-lang/rust/commit/dc3219bb11f032e2e6f1d16deab2b5eabe9463d7"}], "stats": {"total": 75, "additions": 65, "deletions": 10}, "files": [{"sha": "46d24b9f14632366b518df2711bb3ea320bf25bc", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cebf95718c32b1024a6845992bee96c50f830f3a/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cebf95718c32b1024a6845992bee96c50f830f3a/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=cebf95718c32b1024a6845992bee96c50f830f3a", "patch": "@@ -2777,9 +2777,10 @@ impl Type {\n         self.ty.is_unknown()\n     }\n \n-    /// Checks that particular type `ty` implements `std::future::Future`.\n+    /// Checks that particular type `ty` implements `std::future::IntoFuture` or\n+    /// `std::future::Future`.\n     /// This function is used in `.await` syntax completion.\n-    pub fn impls_future(&self, db: &dyn HirDatabase) -> bool {\n+    pub fn impls_into_future(&self, db: &dyn HirDatabase) -> bool {\n         let trait_ = db\n             .lang_item(self.env.krate, SmolStr::new_inline(\"into_future\"))\n             .and_then(|it| {"}, {"sha": "9418afa91dae5d768828d44edeea3679ce6efdd8", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cebf95718c32b1024a6845992bee96c50f830f3a/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cebf95718c32b1024a6845992bee96c50f830f3a/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=cebf95718c32b1024a6845992bee96c50f830f3a", "patch": "@@ -27,6 +27,7 @@ use hir_def::{\n use hir_expand::{\n     builtin_fn_macro::BuiltinFnLikeExpander,\n     hygiene::Hygiene,\n+    mod_path::path,\n     name,\n     name::{AsName, Name},\n     HirFileId, InFile,\n@@ -269,16 +270,35 @@ impl SourceAnalyzer {\n         db: &dyn HirDatabase,\n         await_expr: &ast::AwaitExpr,\n     ) -> Option<FunctionId> {\n-        // FIXME This should be pointing to the poll of IntoFuture::Output's Future impl, but I\n-        // don't know how to resolve the Output type so that we can query for its poll method.\n-        let ty = self.ty_of_expr(db, &await_expr.expr()?.into())?;\n+        let mut ty = self.ty_of_expr(db, &await_expr.expr()?.into())?.clone();\n+\n+        let into_future_trait = self\n+            .resolver\n+            .resolve_known_trait(db.upcast(), &path![core::future::IntoFuture])\n+            .map(Trait::from);\n+\n+        if let Some(into_future_trait) = into_future_trait {\n+            let type_ = Type::new_with_resolver(db, &self.resolver, ty.clone());\n+            if type_.impls_trait(db, into_future_trait, &[]) {\n+                let items = into_future_trait.items(db);\n+                let into_future_type = items.into_iter().find_map(|item| match item {\n+                    AssocItem::TypeAlias(alias)\n+                        if alias.name(db) == hir_expand::name![IntoFuture] =>\n+                    {\n+                        Some(alias)\n+                    }\n+                    _ => None,\n+                })?;\n+                let future_trait = type_.normalize_trait_assoc_type(db, &[], into_future_type)?;\n+                ty = future_trait.ty;\n+            }\n+        }\n \n-        let op_fn = db\n+        let poll_fn = db\n             .lang_item(self.resolver.krate(), hir_expand::name![poll].to_smol_str())?\n             .as_function()?;\n-        let substs = hir_ty::TyBuilder::subst_for_def(db, op_fn).push(ty.clone()).build();\n-\n-        Some(self.resolve_impl_method_or_trait_def(db, op_fn, &substs))\n+        let substs = hir_ty::TyBuilder::subst_for_def(db, poll_fn).push(ty.clone()).build();\n+        Some(self.resolve_impl_method_or_trait_def(db, poll_fn, &substs))\n     }\n \n     pub(crate) fn resolve_prefix_expr("}, {"sha": "02004ff7b686876e2a699cb51f0c61ca90a3b06a", "filename": "crates/ide-completion/src/completions/dot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cebf95718c32b1024a6845992bee96c50f830f3a/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cebf95718c32b1024a6845992bee96c50f830f3a/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=cebf95718c32b1024a6845992bee96c50f830f3a", "patch": "@@ -19,7 +19,7 @@ pub(crate) fn complete_dot(\n     };\n \n     // Suggest .await syntax for types that implement Future trait\n-    if receiver_ty.impls_future(ctx.db) {\n+    if receiver_ty.impls_into_future(ctx.db) {\n         let mut item =\n             CompletionItem::new(CompletionItemKind::Keyword, ctx.source_range(), \"await\");\n         item.detail(\"expr.await\");"}, {"sha": "c7a922e6cc6aa3e5d0759893371f1d55dd9b1295", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cebf95718c32b1024a6845992bee96c50f830f3a/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cebf95718c32b1024a6845992bee96c50f830f3a/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=cebf95718c32b1024a6845992bee96c50f830f3a", "patch": "@@ -1664,6 +1664,40 @@ fn f() {\n         );\n     }\n \n+    #[test]\n+    fn goto_await_into_future_poll() {\n+        check(\n+            r#\"\n+//- minicore: future\n+\n+struct Futurable;\n+\n+impl core::future::IntoFuture for Futurable {\n+    type IntoFuture = MyFut;\n+}\n+\n+struct MyFut;\n+\n+impl core::future::Future for MyFut {\n+    type Output = ();\n+\n+    fn poll(\n+     //^^^^\n+        self: std::pin::Pin<&mut Self>,\n+        cx: &mut std::task::Context<'_>\n+    ) -> std::task::Poll<Self::Output>\n+    {\n+        ()\n+    }\n+}\n+\n+fn f() {\n+    Futurable.await$0;\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn goto_try_op() {\n         check("}]}