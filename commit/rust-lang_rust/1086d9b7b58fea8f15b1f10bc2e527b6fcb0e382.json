{"sha": "1086d9b7b58fea8f15b1f10bc2e527b6fcb0e382", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwODZkOWI3YjU4ZmVhOGYxNWIxZjEwYmMyZTUyN2I2ZmNiMGUzODI=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-31T15:35:57Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-31T15:55:34Z"}, "message": "Rename CrateSpecific -> InvocationSpecific", "tree": {"sha": "225c9cf55bab6e2695a888f25753420ea9a8b97b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/225c9cf55bab6e2695a888f25753420ea9a8b97b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1086d9b7b58fea8f15b1f10bc2e527b6fcb0e382", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1086d9b7b58fea8f15b1f10bc2e527b6fcb0e382", "html_url": "https://github.com/rust-lang/rust/commit/1086d9b7b58fea8f15b1f10bc2e527b6fcb0e382", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1086d9b7b58fea8f15b1f10bc2e527b6fcb0e382/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4f3f91c48dd244357a439a234a44d5f0e99f014", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4f3f91c48dd244357a439a234a44d5f0e99f014", "html_url": "https://github.com/rust-lang/rust/commit/d4f3f91c48dd244357a439a234a44d5f0e99f014"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "246e0ebbb2ba0a1daa060781a1cf5fc5e715ca29", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1086d9b7b58fea8f15b1f10bc2e527b6fcb0e382/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1086d9b7b58fea8f15b1f10bc2e527b6fcb0e382/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=1086d9b7b58fea8f15b1f10bc2e527b6fcb0e382", "patch": "@@ -274,7 +274,7 @@ crate struct RenderOptions {\n crate enum EmitType {\n     Unversioned,\n     Toolchain,\n-    CrateSpecific,\n+    InvocationSpecific,\n }\n \n impl FromStr for EmitType {\n@@ -285,15 +285,15 @@ impl FromStr for EmitType {\n         match s {\n             \"unversioned-shared-resources\" => Ok(Unversioned),\n             \"toolchain-shared-resources\" => Ok(Toolchain),\n-            \"crate-specific\" => Ok(CrateSpecific),\n+            \"invocation-specific\" => Ok(InvocationSpecific),\n             _ => Err(()),\n         }\n     }\n }\n \n impl RenderOptions {\n     crate fn should_emit_crate(&self) -> bool {\n-        self.emit.is_empty() || self.emit.contains(&EmitType::CrateSpecific)\n+        self.emit.is_empty() || self.emit.contains(&EmitType::InvocationSpecific)\n     }\n }\n "}, {"sha": "34994097812c2d8bca645133d6606ec17039e7a1", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1086d9b7b58fea8f15b1f10bc2e527b6fcb0e382/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1086d9b7b58fea8f15b1f10bc2e527b6fcb0e382/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=1086d9b7b58fea8f15b1f10bc2e527b6fcb0e382", "patch": "@@ -49,10 +49,10 @@ enum SharedResource<'a> {\n     ///\n     /// It has a resource suffix.\n     ToolchainSpecific { basename: &'static str },\n-    /// This file may change for any crate within a build.\n+    /// This file may change for any crate within a build, or based on the CLI arguments.\n     ///\n-    /// This differs from normal crate-specific files because it has a resource suffix.\n-    CrateSpecific { basename: &'a str },\n+    /// This differs from normal invocation-specific files because it has a resource suffix.\n+    InvocationSpecific { basename: &'a str },\n }\n \n impl SharedResource<'_> {\n@@ -61,15 +61,15 @@ impl SharedResource<'_> {\n         match self {\n             Unversioned { name }\n             | ToolchainSpecific { basename: name }\n-            | CrateSpecific { basename: name } => Path::new(name).extension(),\n+            | InvocationSpecific { basename: name } => Path::new(name).extension(),\n         }\n     }\n \n     fn path(&self, cx: &Context<'_>) -> PathBuf {\n         match self {\n             SharedResource::Unversioned { name } => cx.dst.join(name),\n             SharedResource::ToolchainSpecific { basename } => cx.suffix_path(basename),\n-            SharedResource::CrateSpecific { basename } => cx.suffix_path(basename),\n+            SharedResource::InvocationSpecific { basename } => cx.suffix_path(basename),\n         }\n     }\n \n@@ -80,7 +80,7 @@ impl SharedResource<'_> {\n         let kind = match self {\n             SharedResource::Unversioned { .. } => EmitType::Unversioned,\n             SharedResource::ToolchainSpecific { .. } => EmitType::Toolchain,\n-            SharedResource::CrateSpecific { .. } => EmitType::CrateSpecific,\n+            SharedResource::InvocationSpecific { .. } => EmitType::InvocationSpecific,\n         };\n         emit.contains(&kind)\n     }\n@@ -165,7 +165,7 @@ pub(super) fn write_shared(\n     // Crate resources should always be dynamic.\n     let write_crate = |p: &_, make_content: &dyn Fn() -> Result<Vec<u8>, Error>| {\n         let content = make_content()?;\n-        cx.write_shared(SharedResource::CrateSpecific { basename: p }, content, &options.emit)\n+        cx.write_shared(SharedResource::InvocationSpecific { basename: p }, content, &options.emit)\n     };\n \n     // Add all the static files. These may already exist, but we just"}, {"sha": "54a6fc625a6152f6e55c925436757de9c87452ae", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1086d9b7b58fea8f15b1f10bc2e527b6fcb0e382/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1086d9b7b58fea8f15b1f10bc2e527b6fcb0e382/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=1086d9b7b58fea8f15b1f10bc2e527b6fcb0e382", "patch": "@@ -532,7 +532,7 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"\",\n                 \"emit\",\n                 \"Comma separated list of types of output for rustdoc to emit\",\n-                \"[unversioned-shared-resources,toolchain-shared-resources,crate-specific]\",\n+                \"[unversioned-shared-resources,toolchain-shared-resources,invocation-specific]\",\n             )\n         }),\n     ]"}, {"sha": "66a36dae9d370084f1ab935f5e6d06aa96581285", "filename": "src/test/run-make/emit-shared-files/Makefile", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1086d9b7b58fea8f15b1f10bc2e527b6fcb0e382/src%2Ftest%2Frun-make%2Femit-shared-files%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1086d9b7b58fea8f15b1f10bc2e527b6fcb0e382/src%2Ftest%2Frun-make%2Femit-shared-files%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Femit-shared-files%2FMakefile?ref=1086d9b7b58fea8f15b1f10bc2e527b6fcb0e382", "patch": "@@ -1,21 +1,21 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-CRATE_ONLY = $(TMPDIR)/crate-only\n+INVOCATION_ONLY = $(TMPDIR)/invocation-only\n TOOLCHAIN_ONLY = $(TMPDIR)/toolchain-only\n ALL_SHARED = $(TMPDIR)/all-shared\n \n-all: crate-only toolchain-only all-shared\n+all: invocation-only toolchain-only all-shared\n \n-crate-only:\n-\t$(RUSTDOC) -Z unstable-options --emit=crate-specific --output $(CRATE_ONLY) --resource-suffix=-xxx --theme y.css x.rs\n-\t[ -e $(CRATE_ONLY)/search-index-xxx.js ]\n-\t[ -e $(CRATE_ONLY)/settings.html ]\n-\t[ -e $(CRATE_ONLY)/x/all.html ]\n-\t[ -e $(CRATE_ONLY)/x/index.html ]\n+invocation-only:\n+\t$(RUSTDOC) -Z unstable-options --emit=invocation-specific --output $(INVOCATION_ONLY) --resource-suffix=-xxx --theme y.css x.rs\n+\t[ -e $(INVOCATION_ONLY)/search-index-xxx.js ]\n+\t[ -e $(INVOCATION_ONLY)/settings.html ]\n+\t[ -e $(INVOCATION_ONLY)/x/all.html ]\n+\t[ -e $(INVOCATION_ONLY)/x/index.html ]\n \t# FIXME: this probably shouldn't have a suffix\n-\t[ -e $(CRATE_ONLY)/y-xxx.css ]\n-\t! [ -e $(CRATE_ONLY)/storage-xxx.js ]\n-\t! [ -e $(CRATE_ONLY)/SourceSerifPro-It.ttf.woff ]\n+\t[ -e $(INVOCATION_ONLY)/y-xxx.css ]\n+\t! [ -e $(INVOCATION_ONLY)/storage-xxx.js ]\n+\t! [ -e $(INVOCATION_ONLY)/SourceSerifPro-It.ttf.woff ]\n \n toolchain-only:\n \t$(RUSTDOC) -Z unstable-options --emit=toolchain-shared-resources --output $(TOOLCHAIN_ONLY) --resource-suffix=-xxx x.rs"}]}