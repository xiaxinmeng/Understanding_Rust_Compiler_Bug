{"sha": "7a8560ba382af4b3955b14757518f748e0d67709", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhODU2MGJhMzgyYWY0YjM5NTViMTQ3NTc1MThmNzQ4ZTBkNjc3MDk=", "commit": {"author": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-12-19T18:12:19Z"}, "committer": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-12-19T20:12:18Z"}, "message": "Fix expression parsing by bailing out upon a macro block being found\n\nTODO: Fix this when the block like macro is in expression position\n\nE.g. `test(test!{})` currently parses", "tree": {"sha": "59924b78fc7ab10700624e5c5b143309526c8eed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59924b78fc7ab10700624e5c5b143309526c8eed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a8560ba382af4b3955b14757518f748e0d67709", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a8560ba382af4b3955b14757518f748e0d67709", "html_url": "https://github.com/rust-lang/rust/commit/7a8560ba382af4b3955b14757518f748e0d67709", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a8560ba382af4b3955b14757518f748e0d67709/comments", "author": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97e70bf50f15007f5782f7f96d19da342b7c9505", "url": "https://api.github.com/repos/rust-lang/rust/commits/97e70bf50f15007f5782f7f96d19da342b7c9505", "html_url": "https://github.com/rust-lang/rust/commit/97e70bf50f15007f5782f7f96d19da342b7c9505"}], "stats": {"total": 29, "additions": 12, "deletions": 17}, "files": [{"sha": "9d75bfb90c7de05e2df71ba046f63caa86153644", "filename": "crates/ra_syntax/src/grammar/expressions.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7a8560ba382af4b3955b14757518f748e0d67709/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8560ba382af4b3955b14757518f748e0d67709/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=7a8560ba382af4b3955b14757518f748e0d67709", "patch": "@@ -158,13 +158,14 @@ fn current_op(p: &Parser) -> (u8, Op) {\n // Parses expression with binding power of at least bp.\n fn expr_bp(p: &mut Parser, r: Restrictions, bp: u8) -> BlockLike {\n     let mut lhs = match lhs(p, r) {\n-        (Some(lhs), blocklike) => {\n+        (Some(lhs), macro_blocklike) => {\n             // test stmt_bin_expr_ambiguity\n             // fn foo() {\n             //     let _ = {1} & 2;\n             //     {1} &2;\n             // }\n-            if r.prefer_stmt && (is_block(lhs.kind()) || blocklike == Some(BlockLike::Block)) {\n+            if r.prefer_stmt && (is_block(lhs.kind()) || macro_blocklike == Some(BlockLike::Block))\n+            {\n                 return BlockLike::Block;\n             }\n             lhs\n@@ -251,11 +252,11 @@ fn lhs(p: &mut Parser, r: Restrictions) -> (Option<CompletedMarker>, Option<Bloc\n         _ => {\n             let (lhs_marker, macro_block_like) = atom::atom_expr(p, r);\n \n+            if macro_block_like == Some(BlockLike::Block) {\n+                return (lhs_marker, macro_block_like);\n+            }\n             if let Some(lhs_marker) = lhs_marker {\n-                return (\n-                    Some(postfix_expr(p, r, lhs_marker, macro_block_like)),\n-                    macro_block_like,\n-                );\n+                return (Some(postfix_expr(p, r, lhs_marker)), macro_block_like);\n             } else {\n                 return (None, None);\n             }\n@@ -265,14 +266,11 @@ fn lhs(p: &mut Parser, r: Restrictions) -> (Option<CompletedMarker>, Option<Bloc\n     (Some(m.complete(p, kind)), None)\n }\n \n-fn postfix_expr(\n-    p: &mut Parser,\n-    r: Restrictions,\n-    mut lhs: CompletedMarker,\n-    macro_block_like: Option<BlockLike>,\n-) -> CompletedMarker {\n-    let mut allow_calls =\n-        !r.prefer_stmt || !is_block(lhs.kind()) || macro_block_like != Some(BlockLike::Block);\n+fn postfix_expr(p: &mut Parser, r: Restrictions, mut lhs: CompletedMarker) -> CompletedMarker {\n+    // Calls are disallowed if the type is a block and we prefer statements because the call cannot be disambiguated from a tuple\n+    // E.g. `while true {break}();` is parsed as\n+    // `while true {break}; ();`\n+    let mut allow_calls = !r.prefer_stmt || !is_block(lhs.kind());\n     loop {\n         lhs = match p.current() {\n             // test stmt_postfix_expr_ambiguity"}, {"sha": "a07855768586b22d1ffd963f9b941bc1f937b214", "filename": "crates/ra_syntax/tests/test.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a8560ba382af4b3955b14757518f748e0d67709/crates%2Fra_syntax%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8560ba382af4b3955b14757518f748e0d67709/crates%2Fra_syntax%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Ftest.rs?ref=7a8560ba382af4b3955b14757518f748e0d67709", "patch": "@@ -43,7 +43,6 @@ fn parser_fuzz_tests() {\n fn self_hosting_parsing() {\n     let empty_vec = vec![];\n     let dir = project_dir();\n-    let mut count = 0u32;\n     for entry in walkdir::WalkDir::new(dir)\n         .into_iter()\n         .filter_entry(|entry| {\n@@ -64,7 +63,6 @@ fn self_hosting_parsing() {\n             !entry.path().is_dir() && (entry.path().extension() == Some(std::ffi::OsStr::new(\"rs\")))\n         })\n     {\n-        count += 1;\n         let text = read_text(entry.path());\n         let node = SourceFileNode::parse(&text);\n         let errors = node.errors();\n@@ -74,7 +72,6 @@ fn self_hosting_parsing() {\n             entry\n         );\n     }\n-    panic!(\"{}\", count)\n }\n /// Read file and normalize newlines.\n ///"}]}