{"sha": "4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmOTRhZjNjNGFhYTU3ZWJiNGNiMDFmN2U0ZWRmYjNhMDgyMWIwOWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-11T13:49:56Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-11T15:28:51Z"}, "message": "use Source for Function", "tree": {"sha": "b7bbb49966711e4b771d93561d1635607c300369", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7bbb49966711e4b771d93561d1635607c300369"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b", "html_url": "https://github.com/rust-lang/rust/commit/4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36865adcb946d5567fb61d3547b78fc71df58b20", "url": "https://api.github.com/repos/rust-lang/rust/commits/36865adcb946d5567fb61d3547b78fc71df58b20", "html_url": "https://github.com/rust-lang/rust/commit/36865adcb946d5567fb61d3547b78fc71df58b20"}], "stats": {"total": 58, "additions": 30, "deletions": 28}, "files": [{"sha": "aa6eb741b749bf032e1d23d4f15825a03f3b2a82", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b", "patch": "@@ -603,6 +603,14 @@ pub struct Function {\n     pub(crate) id: FunctionId,\n }\n \n+impl HasSource for Function {\n+    type Ast = TreeArc<ast::FnDef>;\n+\n+    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::FnDef>> {\n+        self.id.source(db).into()\n+    }\n+}\n+\n /// The declared signature of a function.\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct FnSignature {\n@@ -619,11 +627,11 @@ impl FnSignature {\n         db: &(impl DefDatabase + AstDatabase),\n         func: Function,\n     ) -> Arc<FnSignature> {\n-        let (_, node) = func.source(db);\n-        let name = node.name().map(|n| n.as_name()).unwrap_or_else(Name::missing);\n+        let src = func.source(db);\n+        let name = src.ast.name().map(|n| n.as_name()).unwrap_or_else(Name::missing);\n         let mut params = Vec::new();\n         let mut has_self_param = false;\n-        if let Some(param_list) = node.param_list() {\n+        if let Some(param_list) = src.ast.param_list() {\n             if let Some(self_param) = param_list.self_param() {\n                 let self_type = if let Some(type_ref) = self_param.ascribed_type() {\n                     TypeRef::from_ast(type_ref)\n@@ -647,7 +655,7 @@ impl FnSignature {\n                 params.push(type_ref);\n             }\n         }\n-        let ret_type = if let Some(type_ref) = node.ret_type().and_then(|rt| rt.type_ref()) {\n+        let ret_type = if let Some(type_ref) = src.ast.ret_type().and_then(|rt| rt.type_ref()) {\n             TypeRef::from_ast(type_ref)\n         } else {\n             TypeRef::unit()\n@@ -676,8 +684,8 @@ impl FnSignature {\n }\n \n impl Function {\n-    pub fn source(self, db: &(impl DefDatabase + AstDatabase)) -> (HirFileId, TreeArc<ast::FnDef>) {\n-        self.id.source(db)\n+    pub fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::FnDef>> {\n+        self.id.source(db).into()\n     }\n \n     pub fn module(self, db: &impl DefDatabase) -> Module {"}, {"sha": "8d7a5255f4a9d5e9ddb393635d300a872c1dfcb6", "filename": "crates/ra_hir/src/docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b/crates%2Fra_hir%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b/crates%2Fra_hir%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdocs.rs?ref=4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b", "patch": "@@ -81,7 +81,7 @@ pub(crate) fn documentation_query(\n         DocDef::EnumVariant(it) => docs_from_ast(&*it.source(db).ast),\n         DocDef::Static(it) => docs_from_ast(&*it.source(db).1),\n         DocDef::Const(it) => docs_from_ast(&*it.source(db).1),\n-        DocDef::Function(it) => docs_from_ast(&*it.source(db).1),\n+        DocDef::Function(it) => docs_from_ast(&*it.source(db).ast),\n         DocDef::Union(it) => docs_from_ast(&*it.source(db).1),\n         DocDef::Trait(it) => docs_from_ast(&*it.source(db).1),\n         DocDef::TypeAlias(it) => docs_from_ast(&*it.source(db).1),"}, {"sha": "46d51e0db357aa0a55f2a713a8cc8b1ef202af75", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b", "patch": "@@ -1023,9 +1023,9 @@ pub(crate) fn body_with_source_map_query(\n             collector.collect_const_body(&src)\n         }\n         DefWithBody::Function(ref f) => {\n-            let (file_id, src) = f.source(db);\n-            collector = ExprCollector::new(def, file_id, def.resolver(db), db);\n-            collector.collect_fn_body(&src)\n+            let src = f.source(db);\n+            collector = ExprCollector::new(def, src.file_id, def.resolver(db), db);\n+            collector.collect_fn_body(&src.ast)\n         }\n         DefWithBody::Static(ref s) => {\n             let (file_id, src) = s.source(db);"}, {"sha": "ff5e5f68ee9d5aa17827542594e033d6f276e36c", "filename": "crates/ra_hir/src/expr/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs?ref=4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b", "patch": "@@ -71,7 +71,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             return;\n         }\n         let source_map = self.func.body_source_map(db);\n-        let file_id = self.func.source(db).0;\n+        let file_id = self.func.source(db).file_id;\n         let source_file = db.parse(file_id.original_file(db)).tree;\n         if let Some(field_list_node) = source_map\n             .expr_syntax(id)"}, {"sha": "fcccd67c8e476887ee89cb7d4d440a595b5f367f", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b", "patch": "@@ -68,7 +68,7 @@ impl GenericParams {\n         generics.parent_params = parent.map(|p| db.generic_params(p));\n         let start = generics.parent_params.as_ref().map(|p| p.params.len()).unwrap_or(0) as u32;\n         match def {\n-            GenericDef::Function(it) => generics.fill(&*it.source(db).1, start),\n+            GenericDef::Function(it) => generics.fill(&*it.source(db).ast, start),\n             GenericDef::Struct(it) => generics.fill(&*it.source(db).ast, start),\n             GenericDef::Union(it) => generics.fill(&*it.source(db).1, start),\n             GenericDef::Enum(it) => generics.fill(&*it.source(db).ast, start),"}, {"sha": "a534c2336702f71f9b6fb6734df09ec9b06e49a4", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b", "patch": "@@ -1432,7 +1432,7 @@ mod diagnostics {\n         ) {\n             match self {\n                 InferenceDiagnostic::NoSuchField { expr, field } => {\n-                    let (file, _) = owner.source(db);\n+                    let file = owner.source(db).file_id;\n                     let field = owner.body_source_map(db).field_syntax(*expr, *field);\n                     sink.push(NoSuchField { file, field })\n                 }"}, {"sha": "e9ae2022508e33aeb26d5126c6daa327c395c56a", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b", "patch": "@@ -100,7 +100,7 @@ impl Completions {\n     ) {\n         let sig = func.signature(ctx.db);\n         let name = name.unwrap_or_else(|| sig.name().to_string());\n-        let (_, ast_node) = func.source(ctx.db);\n+        let ast_node = func.source(ctx.db).ast;\n         let detail = function_label(&ast_node);\n \n         let mut builder = CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name)"}, {"sha": "d0c155de712fc2f7d72f3349f9a89eb39d4d8ee8", "filename": "crates/ra_ide_api/src/display/function_signature.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b", "patch": "@@ -33,7 +33,7 @@ impl FunctionSignature {\n \n     pub(crate) fn from_hir(db: &db::RootDatabase, function: hir::Function) -> Self {\n         let doc = function.docs(db);\n-        let (_, ast_node) = function.source(db);\n+        let ast_node = function.source(db).ast;\n         FunctionSignature::from(&*ast_node).with_doc_opt(doc)\n     }\n }"}, {"sha": "3333771ab5a7c44feb17dcc21ce7425c9e093f41", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b", "patch": "@@ -164,13 +164,7 @@ impl NavigationTarget {\n     }\n \n     pub(crate) fn from_function(db: &RootDatabase, func: hir::Function) -> NavigationTarget {\n-        let (file_id, fn_def) = func.source(db);\n-        NavigationTarget::from_named(\n-            file_id.original_file(db),\n-            &*fn_def,\n-            fn_def.doc_comment_text(),\n-            fn_def.short_label(),\n-        )\n+        NavigationTarget::from_def_source(db, func)\n     }\n \n     pub(crate) fn from_field(db: &RootDatabase, field: hir::StructField) -> NavigationTarget {"}, {"sha": "4dd3c1b9f9df00f75d919bf51d1af5f256d62c97", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b", "patch": "@@ -96,8 +96,8 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n \n         match classify_name_ref(db, &analyzer, name_ref) {\n             Some(Method(it)) => {\n-                let it = it.source(db).1;\n-                res.extend(hover_text(it.doc_comment_text(), it.short_label()));\n+                let src = it.source(db);\n+                res.extend(hover_text(src.ast.doc_comment_text(), src.ast.short_label()));\n             }\n             Some(Macro(it)) => {\n                 let it = it.source(db).1;\n@@ -111,8 +111,8 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n             }\n             Some(AssocItem(it)) => match it {\n                 hir::ImplItem::Method(it) => {\n-                    let it = it.source(db).1;\n-                    res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                    let src = it.source(db);\n+                    res.extend(hover_text(src.ast.doc_comment_text(), src.ast.short_label()))\n                 }\n                 hir::ImplItem::Const(it) => {\n                     let it = it.source(db).1;\n@@ -132,8 +132,8 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n                         }\n                     }\n                     hir::ModuleDef::Function(it) => {\n-                        let it = it.source(db).1;\n-                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                        let src = it.source(db);\n+                        res.extend(hover_text(src.ast.doc_comment_text(), src.ast.short_label()))\n                     }\n                     hir::ModuleDef::Struct(it) => {\n                         let src = it.source(db);"}]}