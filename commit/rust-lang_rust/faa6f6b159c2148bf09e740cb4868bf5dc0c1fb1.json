{"sha": "faa6f6b159c2148bf09e740cb4868bf5dc0c1fb1", "node_id": "C_kwDOAAsO6NoAKGZhYTZmNmIxNTljMjE0OGJmMDllNzQwY2I0ODY4YmY1ZGMwYzFmYjE", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-07-27T10:05:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-27T10:05:34Z"}, "message": "Rollup merge of #99769 - bjorn3:sync_cg_clif-2022-07-26, r=bjorn3\n\nSync rustc_codegen_cranelift\n\nI did a large refactoring of the intrinsics module to remove the intrinsic_match macro which is not very clear to other people. This also enables rustfmt to run on this code. While I already did a sync yesterday, I am going to do another sync again to avoid potential conflicts as those will likely be painful to resolve.\n\nr? ``@ghost``\n\n``@rustbot`` label +A-codegen +A-cranelift +T-compiler", "tree": {"sha": "6b9aed8caa4c35abf5f1adfc478bdef2e0376d14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b9aed8caa4c35abf5f1adfc478bdef2e0376d14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faa6f6b159c2148bf09e740cb4868bf5dc0c1fb1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi4Q3uCRBK7hj4Ov3rIwAABJIIABLvsw/OzD48/LJUc8ScKfqC\nB/8FEA8vjW17vVbrnUmE8L+Frh8gxIoB/X0cNCC21Xk7GPHrvHbblSFc7xUSpXOm\n2El6/qT8Bw7llObd+ODh8yCOS3WpzhwvwVNTHCgC10lVpIr3RcyU3Kc+BwjkReD8\nD0Upkr8zzghFl6OrLmhT3u8wHim8obYRkKugUcvio1Ay5MUtOMTTgiRFiE2I8Lkx\nM8OCpXHxlFioMWvpfF9/AuLQO3YsJYdQ6+2/VVLK1izM/Gv01lQTA2h/LhWE1QFD\ngT2uuXyOqEzmczCV78dnh9q9fmi1u9nB0zO+QZhqlLnlRwiQYh+7i7IFdeLdn8s=\n=LOg8\n-----END PGP SIGNATURE-----\n", "payload": "tree 6b9aed8caa4c35abf5f1adfc478bdef2e0376d14\nparent 28b44ff5d44144bfb965941f65d653ece636ee6c\nparent 30a5eb063eca51f7dac9fce79d66a95bc8cbacad\nauthor Yuki Okushi <jtitor@2k36.org> 1658916334 +0900\ncommitter GitHub <noreply@github.com> 1658916334 +0900\n\nRollup merge of #99769 - bjorn3:sync_cg_clif-2022-07-26, r=bjorn3\n\nSync rustc_codegen_cranelift\n\nI did a large refactoring of the intrinsics module to remove the intrinsic_match macro which is not very clear to other people. This also enables rustfmt to run on this code. While I already did a sync yesterday, I am going to do another sync again to avoid potential conflicts as those will likely be painful to resolve.\n\nr? ``@ghost``\n\n``@rustbot`` label +A-codegen +A-cranelift +T-compiler\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faa6f6b159c2148bf09e740cb4868bf5dc0c1fb1", "html_url": "https://github.com/rust-lang/rust/commit/faa6f6b159c2148bf09e740cb4868bf5dc0c1fb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faa6f6b159c2148bf09e740cb4868bf5dc0c1fb1/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28b44ff5d44144bfb965941f65d653ece636ee6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/28b44ff5d44144bfb965941f65d653ece636ee6c", "html_url": "https://github.com/rust-lang/rust/commit/28b44ff5d44144bfb965941f65d653ece636ee6c"}, {"sha": "30a5eb063eca51f7dac9fce79d66a95bc8cbacad", "url": "https://api.github.com/repos/rust-lang/rust/commits/30a5eb063eca51f7dac9fce79d66a95bc8cbacad", "html_url": "https://github.com/rust-lang/rust/commit/30a5eb063eca51f7dac9fce79d66a95bc8cbacad"}], "stats": {"total": 1166, "additions": 705, "deletions": 461}, "files": [{"sha": "869670c8cfac7ec41e50df30dce1954f49ce915f", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/llvm.rs", "status": "modified", "additions": 81, "deletions": 64, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/faa6f6b159c2148bf09e740cb4868bf5dc0c1fb1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa6f6b159c2148bf09e740cb4868bf5dc0c1fb1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm.rs?ref=faa6f6b159c2148bf09e740cb4868bf5dc0c1fb1", "patch": "@@ -13,23 +13,20 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n     ret: CPlace<'tcx>,\n     target: Option<BasicBlock>,\n ) {\n-    intrinsic_match! {\n-        fx, intrinsic, args,\n-        _ => {\n-            fx.tcx.sess.warn(&format!(\"unsupported llvm intrinsic {}; replacing with trap\", intrinsic));\n-            crate::trap::trap_unimplemented(fx, intrinsic);\n-        };\n-\n+    match intrinsic {\n         // Used by `_mm_movemask_epi8` and `_mm256_movemask_epi8`\n-        \"llvm.x86.sse2.pmovmskb.128\" | \"llvm.x86.avx2.pmovmskb\" | \"llvm.x86.sse2.movmsk.pd\", (c a) {\n+        \"llvm.x86.sse2.pmovmskb.128\" | \"llvm.x86.avx2.pmovmskb\" | \"llvm.x86.sse2.movmsk.pd\" => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n+\n             let (lane_count, lane_ty) = a.layout().ty.simd_size_and_type(fx.tcx);\n             let lane_ty = fx.clif_type(lane_ty).unwrap();\n             assert!(lane_count <= 32);\n \n             let mut res = fx.bcx.ins().iconst(types::I32, 0);\n \n             for lane in (0..lane_count).rev() {\n-                let a_lane = a.value_field(fx, mir::Field::new(lane.try_into().unwrap())).load_scalar(fx);\n+                let a_lane =\n+                    a.value_field(fx, mir::Field::new(lane.try_into().unwrap())).load_scalar(fx);\n \n                 // cast float to int\n                 let a_lane = match lane_ty {\n@@ -49,26 +46,29 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n \n             let res = CValue::by_val(res, fx.layout_of(fx.tcx.types.i32));\n             ret.write_cvalue(fx, res);\n-        };\n-        \"llvm.x86.sse2.cmp.ps\" | \"llvm.x86.sse2.cmp.pd\", (c x, c y, o kind) {\n-            let kind = crate::constant::mir_operand_get_const_val(fx, kind).expect(\"llvm.x86.sse2.cmp.* kind not const\");\n-            let flt_cc = match kind.try_to_bits(Size::from_bytes(1)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", kind)) {\n+        }\n+        \"llvm.x86.sse2.cmp.ps\" | \"llvm.x86.sse2.cmp.pd\" => {\n+            let (x, y, kind) = match args {\n+                [x, y, kind] => (x, y, kind),\n+                _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n+            };\n+            let x = codegen_operand(fx, x);\n+            let y = codegen_operand(fx, y);\n+            let kind = crate::constant::mir_operand_get_const_val(fx, kind)\n+                .expect(\"llvm.x86.sse2.cmp.* kind not const\");\n+\n+            let flt_cc = match kind\n+                .try_to_bits(Size::from_bytes(1))\n+                .unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", kind))\n+            {\n                 0 => FloatCC::Equal,\n                 1 => FloatCC::LessThan,\n                 2 => FloatCC::LessThanOrEqual,\n-                7 => {\n-                    unimplemented!(\"Compares corresponding elements in `a` and `b` to see if neither is `NaN`.\");\n-                }\n-                3 => {\n-                    unimplemented!(\"Compares corresponding elements in `a` and `b` to see if either is `NaN`.\");\n-                }\n+                7 => FloatCC::Ordered,\n+                3 => FloatCC::Unordered,\n                 4 => FloatCC::NotEqual,\n-                5 => {\n-                    unimplemented!(\"not less than\");\n-                }\n-                6 => {\n-                    unimplemented!(\"not less than or equal\");\n-                }\n+                5 => FloatCC::UnorderedOrGreaterThanOrEqual,\n+                6 => FloatCC::UnorderedOrGreaterThan,\n                 kind => unreachable!(\"kind {:?}\", kind),\n             };\n \n@@ -79,50 +79,67 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n                 };\n                 bool_to_zero_or_max_uint(fx, res_lane_ty, res_lane)\n             });\n-        };\n-        \"llvm.x86.sse2.psrli.d\", (c a, o imm8) {\n-            let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8).expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n-            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| {\n-                match imm8.try_to_bits(Size::from_bytes(4)).unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8)) {\n-                    imm8 if imm8 < 32 => fx.bcx.ins().ushr_imm(lane, i64::from(imm8 as u8)),\n-                    _ => fx.bcx.ins().iconst(types::I32, 0),\n-                }\n+        }\n+        \"llvm.x86.sse2.psrli.d\" => {\n+            let (a, imm8) = match args {\n+                [a, imm8] => (a, imm8),\n+                _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n+            };\n+            let a = codegen_operand(fx, a);\n+            let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8)\n+                .expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n+\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| match imm8\n+                .try_to_bits(Size::from_bytes(4))\n+                .unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8))\n+            {\n+                imm8 if imm8 < 32 => fx.bcx.ins().ushr_imm(lane, i64::from(imm8 as u8)),\n+                _ => fx.bcx.ins().iconst(types::I32, 0),\n             });\n-        };\n-        \"llvm.x86.sse2.pslli.d\", (c a, o imm8) {\n-            let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8).expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n-            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| {\n-                match imm8.try_to_bits(Size::from_bytes(4)).unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8)) {\n-                    imm8 if imm8 < 32 => fx.bcx.ins().ishl_imm(lane, i64::from(imm8 as u8)),\n-                    _ => fx.bcx.ins().iconst(types::I32, 0),\n-                }\n+        }\n+        \"llvm.x86.sse2.pslli.d\" => {\n+            let (a, imm8) = match args {\n+                [a, imm8] => (a, imm8),\n+                _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n+            };\n+            let a = codegen_operand(fx, a);\n+            let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8)\n+                .expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n+\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| match imm8\n+                .try_to_bits(Size::from_bytes(4))\n+                .unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8))\n+            {\n+                imm8 if imm8 < 32 => fx.bcx.ins().ishl_imm(lane, i64::from(imm8 as u8)),\n+                _ => fx.bcx.ins().iconst(types::I32, 0),\n             });\n-        };\n-        \"llvm.x86.sse2.storeu.dq\", (v mem_addr, c a) {\n+        }\n+        \"llvm.x86.sse2.storeu.dq\" => {\n+            intrinsic_args!(fx, args => (mem_addr, a); intrinsic);\n+            let mem_addr = mem_addr.load_scalar(fx);\n+\n             // FIXME correctly handle the unalignment\n             let dest = CPlace::for_ptr(Pointer::new(mem_addr), a.layout());\n             dest.write_cvalue(fx, a);\n-        };\n-        \"llvm.x86.addcarry.64\", (v c_in, c a, c b) {\n-            llvm_add_sub(\n-                fx,\n-                BinOp::Add,\n-                ret,\n-                c_in,\n-                a,\n-                b\n-            );\n-        };\n-        \"llvm.x86.subborrow.64\", (v b_in, c a, c b) {\n-            llvm_add_sub(\n-                fx,\n-                BinOp::Sub,\n-                ret,\n-                b_in,\n-                a,\n-                b\n-            );\n-        };\n+        }\n+        \"llvm.x86.addcarry.64\" => {\n+            intrinsic_args!(fx, args => (c_in, a, b); intrinsic);\n+            let c_in = c_in.load_scalar(fx);\n+\n+            llvm_add_sub(fx, BinOp::Add, ret, c_in, a, b);\n+        }\n+        \"llvm.x86.subborrow.64\" => {\n+            intrinsic_args!(fx, args => (b_in, a, b); intrinsic);\n+            let b_in = b_in.load_scalar(fx);\n+\n+            llvm_add_sub(fx, BinOp::Sub, ret, b_in, a, b);\n+        }\n+        _ => {\n+            fx.tcx\n+                .sess\n+                .warn(&format!(\"unsupported llvm intrinsic {}; replacing with trap\", intrinsic));\n+            crate::trap::trap_unimplemented(fx, intrinsic);\n+        }\n     }\n \n     let dest = target.expect(\"all llvm intrinsics used by stdlib should return\");"}, {"sha": "b2a83e1d4ebc96c57da441aff4e044123a5faeed", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 372, "deletions": 250, "changes": 622, "blob_url": "https://github.com/rust-lang/rust/blob/faa6f6b159c2148bf09e740cb4868bf5dc0c1fb1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa6f6b159c2148bf09e740cb4868bf5dc0c1fb1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=faa6f6b159c2148bf09e740cb4868bf5dc0c1fb1", "patch": "@@ -1,50 +1,14 @@\n //! Codegen of intrinsics. This includes `extern \"rust-intrinsic\"`, `extern \"platform-intrinsic\"`\n //! and LLVM intrinsics that have symbol names starting with `llvm.`.\n \n-macro_rules! intrinsic_pat {\n-    (_) => {\n-        _\n-    };\n-    ($name:ident) => {\n-        sym::$name\n-    };\n-    (kw.$name:ident) => {\n-        kw::$name\n-    };\n-    ($name:literal) => {\n-        $name\n-    };\n-}\n-\n-macro_rules! intrinsic_arg {\n-    (o $fx:expr, $arg:ident) => {};\n-    (c $fx:expr, $arg:ident) => {\n-        let $arg = codegen_operand($fx, $arg);\n-    };\n-    (v $fx:expr, $arg:ident) => {\n-        let $arg = codegen_operand($fx, $arg).load_scalar($fx);\n-    };\n-}\n-\n-macro_rules! intrinsic_match {\n-    ($fx:expr, $intrinsic:expr, $args:expr,\n-    _ => $unknown:block;\n-    $(\n-        $($($name:tt).*)|+ $(if $cond:expr)?, ($($a:ident $arg:ident),*) $content:block;\n-    )*) => {\n-        match $intrinsic {\n-            $(\n-                $(intrinsic_pat!($($name).*))|* $(if $cond)? => {\n-                    if let [$($arg),*] = $args {\n-                        $(intrinsic_arg!($a $fx, $arg);)*\n-                        $content\n-                    } else {\n-                        bug!(\"wrong number of args for intrinsic {:?}\", $intrinsic);\n-                    }\n-                }\n-            )*\n-            _ => $unknown,\n-        }\n+macro_rules! intrinsic_args {\n+    ($fx:expr, $args:expr => ($($arg:tt),*); $intrinsic:expr) => {\n+        #[allow(unused_parens)]\n+        let ($($arg),*) = if let [$($arg),*] = $args {\n+            ($(codegen_operand($fx, $arg)),*)\n+        } else {\n+            $crate::intrinsics::bug_on_incorrect_arg_count($intrinsic);\n+        };\n     }\n }\n \n@@ -62,6 +26,10 @@ use rustc_span::symbol::{kw, sym, Symbol};\n use crate::prelude::*;\n use cranelift_codegen::ir::AtomicRmwOp;\n \n+fn bug_on_incorrect_arg_count(intrinsic: impl std::fmt::Display) -> ! {\n+    bug!(\"wrong number of args for intrinsic {}\", intrinsic);\n+}\n+\n fn report_atomic_type_validation_error<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     intrinsic: Symbol,\n@@ -351,28 +319,31 @@ fn codegen_regular_intrinsic_call<'tcx>(\n ) {\n     let usize_layout = fx.layout_of(fx.tcx.types.usize);\n \n-    intrinsic_match! {\n-        fx, intrinsic, args,\n-        _ => {\n-            fx.tcx.sess.span_fatal(source_info.span, &format!(\"unsupported intrinsic {}\", intrinsic));\n-        };\n+    match intrinsic {\n+        sym::assume => {\n+            intrinsic_args!(fx, args => (_a); intrinsic);\n+        }\n+        sym::likely | sym::unlikely => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n \n-        assume, (c _a) {};\n-        likely | unlikely, (c a) {\n             ret.write_cvalue(fx, a);\n-        };\n-        breakpoint, () {\n+        }\n+        sym::breakpoint => {\n+            intrinsic_args!(fx, args => (); intrinsic);\n+\n             fx.bcx.ins().debugtrap();\n-        };\n-        copy | copy_nonoverlapping, (v src, v dst, v count) {\n+        }\n+        sym::copy | sym::copy_nonoverlapping => {\n+            intrinsic_args!(fx, args => (src, dst, count); intrinsic);\n+            let src = src.load_scalar(fx);\n+            let dst = dst.load_scalar(fx);\n+            let count = count.load_scalar(fx);\n+\n             let elem_ty = substs.type_at(0);\n             let elem_size: u64 = fx.layout_of(elem_ty).size.bytes();\n             assert_eq!(args.len(), 3);\n-            let byte_amount = if elem_size != 1 {\n-                fx.bcx.ins().imul_imm(count, elem_size as i64)\n-            } else {\n-                count\n-            };\n+            let byte_amount =\n+                if elem_size != 1 { fx.bcx.ins().imul_imm(count, elem_size as i64) } else { count };\n \n             if intrinsic == sym::copy_nonoverlapping {\n                 // FIXME emit_small_memcpy\n@@ -381,17 +352,19 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 // FIXME emit_small_memmove\n                 fx.bcx.call_memmove(fx.target_config, dst, src, byte_amount);\n             }\n-        };\n-        // NOTE: the volatile variants have src and dst swapped\n-        volatile_copy_memory | volatile_copy_nonoverlapping_memory, (v dst, v src, v count) {\n+        }\n+        sym::volatile_copy_memory | sym::volatile_copy_nonoverlapping_memory => {\n+            // NOTE: the volatile variants have src and dst swapped\n+            intrinsic_args!(fx, args => (dst, src, count); intrinsic);\n+            let dst = dst.load_scalar(fx);\n+            let src = src.load_scalar(fx);\n+            let count = count.load_scalar(fx);\n+\n             let elem_ty = substs.type_at(0);\n             let elem_size: u64 = fx.layout_of(elem_ty).size.bytes();\n             assert_eq!(args.len(), 3);\n-            let byte_amount = if elem_size != 1 {\n-                fx.bcx.ins().imul_imm(count, elem_size as i64)\n-            } else {\n-                count\n-            };\n+            let byte_amount =\n+                if elem_size != 1 { fx.bcx.ins().imul_imm(count, elem_size as i64) } else { count };\n \n             // FIXME make the copy actually volatile when using emit_small_mem{cpy,move}\n             if intrinsic == sym::volatile_copy_nonoverlapping_memory {\n@@ -401,8 +374,10 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 // FIXME emit_small_memmove\n                 fx.bcx.call_memmove(fx.target_config, dst, src, byte_amount);\n             }\n-        };\n-        size_of_val, (c ptr) {\n+        }\n+        sym::size_of_val => {\n+            intrinsic_args!(fx, args => (ptr); intrinsic);\n+\n             let layout = fx.layout_of(substs.type_at(0));\n             // Note: Can't use is_unsized here as truly unsized types need to take the fixed size\n             // branch\n@@ -411,14 +386,13 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 let (size, _align) = crate::unsize::size_and_align_of_dst(fx, layout, info);\n                 size\n             } else {\n-                fx\n-                    .bcx\n-                    .ins()\n-                    .iconst(fx.pointer_type, layout.size.bytes() as i64)\n+                fx.bcx.ins().iconst(fx.pointer_type, layout.size.bytes() as i64)\n             };\n             ret.write_cvalue(fx, CValue::by_val(size, usize_layout));\n-        };\n-        min_align_of_val, (c ptr) {\n+        }\n+        sym::min_align_of_val => {\n+            intrinsic_args!(fx, args => (ptr); intrinsic);\n+\n             let layout = fx.layout_of(substs.type_at(0));\n             // Note: Can't use is_unsized here as truly unsized types need to take the fixed size\n             // branch\n@@ -427,26 +401,37 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 let (_size, align) = crate::unsize::size_and_align_of_dst(fx, layout, info);\n                 align\n             } else {\n-                fx\n-                    .bcx\n-                    .ins()\n-                    .iconst(fx.pointer_type, layout.align.abi.bytes() as i64)\n+                fx.bcx.ins().iconst(fx.pointer_type, layout.align.abi.bytes() as i64)\n             };\n             ret.write_cvalue(fx, CValue::by_val(align, usize_layout));\n-        };\n+        }\n+\n+        sym::vtable_size => {\n+            intrinsic_args!(fx, args => (vtable); intrinsic);\n+            let vtable = vtable.load_scalar(fx);\n \n-        vtable_size, (v vtable) {\n             let size = crate::vtable::size_of_obj(fx, vtable);\n             ret.write_cvalue(fx, CValue::by_val(size, usize_layout));\n-        };\n+        }\n+\n+        sym::vtable_align => {\n+            intrinsic_args!(fx, args => (vtable); intrinsic);\n+            let vtable = vtable.load_scalar(fx);\n \n-        vtable_align, (v vtable) {\n             let align = crate::vtable::min_align_of_obj(fx, vtable);\n             ret.write_cvalue(fx, CValue::by_val(align, usize_layout));\n-        };\n+        }\n+\n+        sym::unchecked_add\n+        | sym::unchecked_sub\n+        | sym::unchecked_mul\n+        | sym::unchecked_div\n+        | sym::exact_div\n+        | sym::unchecked_rem\n+        | sym::unchecked_shl\n+        | sym::unchecked_shr => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n \n-        unchecked_add | unchecked_sub | unchecked_mul | unchecked_div | exact_div | unchecked_rem\n-        | unchecked_shl | unchecked_shr, (c x, c y) {\n             // FIXME trap on overflow\n             let bin_op = match intrinsic {\n                 sym::unchecked_add => BinOp::Add,\n@@ -460,8 +445,10 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             };\n             let res = crate::num::codegen_int_binop(fx, bin_op, x, y);\n             ret.write_cvalue(fx, res);\n-        };\n-        add_with_overflow | sub_with_overflow | mul_with_overflow, (c x, c y) {\n+        }\n+        sym::add_with_overflow | sym::sub_with_overflow | sym::mul_with_overflow => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n+\n             assert_eq!(x.layout().ty, y.layout().ty);\n             let bin_op = match intrinsic {\n                 sym::add_with_overflow => BinOp::Add,\n@@ -470,15 +457,12 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 _ => unreachable!(),\n             };\n \n-            let res = crate::num::codegen_checked_int_binop(\n-                fx,\n-                bin_op,\n-                x,\n-                y,\n-            );\n+            let res = crate::num::codegen_checked_int_binop(fx, bin_op, x, y);\n             ret.write_cvalue(fx, res);\n-        };\n-        saturating_add | saturating_sub, (c lhs, c rhs) {\n+        }\n+        sym::saturating_add | sym::saturating_sub => {\n+            intrinsic_args!(fx, args => (lhs, rhs); intrinsic);\n+\n             assert_eq!(lhs.layout().ty, rhs.layout().ty);\n             let bin_op = match intrinsic {\n                 sym::saturating_add => BinOp::Add,\n@@ -488,12 +472,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let signed = type_sign(lhs.layout().ty);\n \n-            let checked_res = crate::num::codegen_checked_int_binop(\n-                fx,\n-                bin_op,\n-                lhs,\n-                rhs,\n-            );\n+            let checked_res = crate::num::codegen_checked_int_binop(fx, bin_op, lhs, rhs);\n \n             let (val, has_overflow) = checked_res.load_scalar_pair(fx);\n             let clif_ty = fx.clif_type(lhs.layout().ty).unwrap();\n@@ -505,13 +484,15 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 (sym::saturating_sub, false) => fx.bcx.ins().select(has_overflow, min, val),\n                 (sym::saturating_add, true) => {\n                     let rhs = rhs.load_scalar(fx);\n-                    let rhs_ge_zero = fx.bcx.ins().icmp_imm(IntCC::SignedGreaterThanOrEqual, rhs, 0);\n+                    let rhs_ge_zero =\n+                        fx.bcx.ins().icmp_imm(IntCC::SignedGreaterThanOrEqual, rhs, 0);\n                     let sat_val = fx.bcx.ins().select(rhs_ge_zero, max, min);\n                     fx.bcx.ins().select(has_overflow, sat_val, val)\n                 }\n                 (sym::saturating_sub, true) => {\n                     let rhs = rhs.load_scalar(fx);\n-                    let rhs_ge_zero = fx.bcx.ins().icmp_imm(IntCC::SignedGreaterThanOrEqual, rhs, 0);\n+                    let rhs_ge_zero =\n+                        fx.bcx.ins().icmp_imm(IntCC::SignedGreaterThanOrEqual, rhs, 0);\n                     let sat_val = fx.bcx.ins().select(rhs_ge_zero, min, max);\n                     fx.bcx.ins().select(has_overflow, sat_val, val)\n                 }\n@@ -521,23 +502,32 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             let res = CValue::by_val(val, lhs.layout());\n \n             ret.write_cvalue(fx, res);\n-        };\n-        rotate_left, (c x, v y) {\n+        }\n+        sym::rotate_left => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n+            let y = y.load_scalar(fx);\n+\n             let layout = x.layout();\n             let x = x.load_scalar(fx);\n             let res = fx.bcx.ins().rotl(x, y);\n             ret.write_cvalue(fx, CValue::by_val(res, layout));\n-        };\n-        rotate_right, (c x, v y) {\n+        }\n+        sym::rotate_right => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n+            let y = y.load_scalar(fx);\n+\n             let layout = x.layout();\n             let x = x.load_scalar(fx);\n             let res = fx.bcx.ins().rotr(x, y);\n             ret.write_cvalue(fx, CValue::by_val(res, layout));\n-        };\n+        }\n \n         // The only difference between offset and arith_offset is regarding UB. Because Cranelift\n         // doesn't have UB both are codegen'ed the same way\n-        offset | arith_offset, (c base, v offset) {\n+        sym::offset | sym::arith_offset => {\n+            intrinsic_args!(fx, args => (base, offset); intrinsic);\n+            let offset = offset.load_scalar(fx);\n+\n             let pointee_ty = base.layout().ty.builtin_deref(true).unwrap().ty;\n             let pointee_size = fx.layout_of(pointee_ty).size.bytes();\n             let ptr_diff = if pointee_size != 1 {\n@@ -548,12 +538,18 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             let base_val = base.load_scalar(fx);\n             let res = fx.bcx.ins().iadd(base_val, ptr_diff);\n             ret.write_cvalue(fx, CValue::by_val(res, base.layout()));\n-        };\n+        }\n+\n+        sym::transmute => {\n+            intrinsic_args!(fx, args => (from); intrinsic);\n \n-        transmute, (c from) {\n             ret.write_cvalue_transmute(fx, from);\n-        };\n-        write_bytes | volatile_set_memory, (c dst, v val, v count) {\n+        }\n+        sym::write_bytes | sym::volatile_set_memory => {\n+            intrinsic_args!(fx, args => (dst, val, count); intrinsic);\n+            let val = val.load_scalar(fx);\n+            let count = count.load_scalar(fx);\n+\n             let pointee_ty = dst.layout().ty.builtin_deref(true).unwrap().ty;\n             let pointee_size = fx.layout_of(pointee_ty).size.bytes();\n             let count = if pointee_size != 1 {\n@@ -565,34 +561,42 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             // FIXME make the memset actually volatile when switching to emit_small_memset\n             // FIXME use emit_small_memset\n             fx.bcx.call_memset(fx.target_config, dst_ptr, val, count);\n-        };\n-        ctlz | ctlz_nonzero, (c arg) {\n+        }\n+        sym::ctlz | sym::ctlz_nonzero => {\n+            intrinsic_args!(fx, args => (arg); intrinsic);\n             let val = arg.load_scalar(fx);\n+\n             // FIXME trap on `ctlz_nonzero` with zero arg.\n             let res = fx.bcx.ins().clz(val);\n             let res = CValue::by_val(res, arg.layout());\n             ret.write_cvalue(fx, res);\n-        };\n-        cttz | cttz_nonzero, (c arg) {\n+        }\n+        sym::cttz | sym::cttz_nonzero => {\n+            intrinsic_args!(fx, args => (arg); intrinsic);\n             let val = arg.load_scalar(fx);\n+\n             // FIXME trap on `cttz_nonzero` with zero arg.\n             let res = fx.bcx.ins().ctz(val);\n             let res = CValue::by_val(res, arg.layout());\n             ret.write_cvalue(fx, res);\n-        };\n-        ctpop, (c arg) {\n+        }\n+        sym::ctpop => {\n+            intrinsic_args!(fx, args => (arg); intrinsic);\n             let val = arg.load_scalar(fx);\n+\n             let res = fx.bcx.ins().popcnt(val);\n             let res = CValue::by_val(res, arg.layout());\n             ret.write_cvalue(fx, res);\n-        };\n-        bitreverse, (c arg) {\n+        }\n+        sym::bitreverse => {\n+            intrinsic_args!(fx, args => (arg); intrinsic);\n             let val = arg.load_scalar(fx);\n+\n             let res = fx.bcx.ins().bitrev(val);\n             let res = CValue::by_val(res, arg.layout());\n             ret.write_cvalue(fx, res);\n-        };\n-        bswap, (c arg) {\n+        }\n+        sym::bswap => {\n             // FIXME(CraneStation/cranelift#794) add bswap instruction to cranelift\n             fn swap(bcx: &mut FunctionBuilder<'_>, v: Value) -> Value {\n                 match bcx.func.dfg.value_type(v) {\n@@ -668,11 +672,15 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                     ty => unreachable!(\"bswap {}\", ty),\n                 }\n             }\n+            intrinsic_args!(fx, args => (arg); intrinsic);\n             let val = arg.load_scalar(fx);\n+\n             let res = CValue::by_val(swap(&mut fx.bcx, val), arg.layout());\n             ret.write_cvalue(fx, res);\n-        };\n-        assert_inhabited | assert_zero_valid | assert_uninit_valid, () {\n+        }\n+        sym::assert_inhabited | sym::assert_zero_valid | sym::assert_uninit_valid => {\n+            intrinsic_args!(fx, args => (); intrinsic);\n+\n             let layout = fx.layout_of(substs.type_at(0));\n             if layout.abi.is_uninhabited() {\n                 with_no_trimmed_paths!({\n@@ -689,7 +697,10 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 with_no_trimmed_paths!({\n                     crate::base::codegen_panic(\n                         fx,\n-                        &format!(\"attempted to zero-initialize type `{}`, which is invalid\", layout.ty),\n+                        &format!(\n+                            \"attempted to zero-initialize type `{}`, which is invalid\",\n+                            layout.ty\n+                        ),\n                         source_info,\n                     );\n                 });\n@@ -700,41 +711,53 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 with_no_trimmed_paths!({\n                     crate::base::codegen_panic(\n                         fx,\n-                        &format!(\"attempted to leave type `{}` uninitialized, which is invalid\", layout.ty),\n+                        &format!(\n+                            \"attempted to leave type `{}` uninitialized, which is invalid\",\n+                            layout.ty\n+                        ),\n                         source_info,\n                     )\n                 });\n                 return;\n             }\n-        };\n+        }\n+\n+        sym::volatile_load | sym::unaligned_volatile_load => {\n+            intrinsic_args!(fx, args => (ptr); intrinsic);\n \n-        volatile_load | unaligned_volatile_load, (c ptr) {\n             // Cranelift treats loads as volatile by default\n             // FIXME correctly handle unaligned_volatile_load\n-            let inner_layout =\n-                fx.layout_of(ptr.layout().ty.builtin_deref(true).unwrap().ty);\n+            let inner_layout = fx.layout_of(ptr.layout().ty.builtin_deref(true).unwrap().ty);\n             let val = CValue::by_ref(Pointer::new(ptr.load_scalar(fx)), inner_layout);\n             ret.write_cvalue(fx, val);\n-        };\n-        volatile_store | unaligned_volatile_store, (v ptr, c val) {\n+        }\n+        sym::volatile_store | sym::unaligned_volatile_store => {\n+            intrinsic_args!(fx, args => (ptr, val); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             // Cranelift treats stores as volatile by default\n             // FIXME correctly handle unaligned_volatile_store\n             let dest = CPlace::for_ptr(Pointer::new(ptr), val.layout());\n             dest.write_cvalue(fx, val);\n-        };\n+        }\n+\n+        sym::pref_align_of\n+        | sym::needs_drop\n+        | sym::type_id\n+        | sym::type_name\n+        | sym::variant_count => {\n+            intrinsic_args!(fx, args => (); intrinsic);\n \n-        pref_align_of | needs_drop | type_id | type_name | variant_count, () {\n             let const_val =\n                 fx.tcx.const_eval_instance(ParamEnv::reveal_all(), instance, None).unwrap();\n-            let val = crate::constant::codegen_const_value(\n-                fx,\n-                const_val,\n-                ret.layout().ty,\n-            );\n+            let val = crate::constant::codegen_const_value(fx, const_val, ret.layout().ty);\n             ret.write_cvalue(fx, val);\n-        };\n+        }\n \n-        ptr_offset_from | ptr_offset_from_unsigned, (v ptr, v base) {\n+        sym::ptr_offset_from | sym::ptr_offset_from_unsigned => {\n+            intrinsic_args!(fx, args => (ptr, base); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+            let base = base.load_scalar(fx);\n             let ty = substs.type_at(0);\n \n             let pointee_size: u64 = fx.layout_of(ty).size.bytes();\n@@ -750,31 +773,44 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 CValue::by_val(fx.bcx.ins().sdiv_imm(diff_bytes, pointee_size as i64), isize_layout)\n             };\n             ret.write_cvalue(fx, val);\n-        };\n+        }\n+\n+        sym::ptr_guaranteed_eq => {\n+            intrinsic_args!(fx, args => (a, b); intrinsic);\n \n-        ptr_guaranteed_eq, (c a, c b) {\n             let val = crate::num::codegen_ptr_binop(fx, BinOp::Eq, a, b);\n             ret.write_cvalue(fx, val);\n-        };\n+        }\n+\n+        sym::ptr_guaranteed_ne => {\n+            intrinsic_args!(fx, args => (a, b); intrinsic);\n \n-        ptr_guaranteed_ne, (c a, c b) {\n             let val = crate::num::codegen_ptr_binop(fx, BinOp::Ne, a, b);\n             ret.write_cvalue(fx, val);\n-        };\n+        }\n+\n+        sym::caller_location => {\n+            intrinsic_args!(fx, args => (); intrinsic);\n \n-        caller_location, () {\n             let caller_location = fx.get_caller_location(source_info);\n             ret.write_cvalue(fx, caller_location);\n-        };\n+        }\n+\n+        _ if intrinsic.as_str().starts_with(\"atomic_fence\") => {\n+            intrinsic_args!(fx, args => (); intrinsic);\n \n-        _ if intrinsic.as_str().starts_with(\"atomic_fence\"), () {\n             fx.bcx.ins().fence();\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_singlethreadfence\"), () {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_singlethreadfence\") => {\n+            intrinsic_args!(fx, args => (); intrinsic);\n+\n             // FIXME use a compiler fence once Cranelift supports it\n             fx.bcx.ins().fence();\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_load\"), (v ptr) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_load\") => {\n+            intrinsic_args!(fx, args => (ptr); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let ty = substs.type_at(0);\n             match ty.kind() {\n                 ty::Uint(UintTy::U128) | ty::Int(IntTy::I128) => {\n@@ -786,7 +822,9 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                         fx.bcx.ins().jump(ret_block, &[]);\n                         return;\n                     } else {\n-                        fx.tcx.sess.span_fatal(source_info.span, \"128bit atomics not yet supported\");\n+                        fx.tcx\n+                            .sess\n+                            .span_fatal(source_info.span, \"128bit atomics not yet supported\");\n                     }\n                 }\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -801,8 +839,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let val = CValue::by_val(val, fx.layout_of(ty));\n             ret.write_cvalue(fx, val);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_store\"), (v ptr, c val) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_store\") => {\n+            intrinsic_args!(fx, args => (ptr, val); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let ty = substs.type_at(0);\n             match ty.kind() {\n                 ty::Uint(UintTy::U128) | ty::Int(IntTy::I128) => {\n@@ -814,7 +855,9 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                         fx.bcx.ins().jump(ret_block, &[]);\n                         return;\n                     } else {\n-                        fx.tcx.sess.span_fatal(source_info.span, \"128bit atomics not yet supported\");\n+                        fx.tcx\n+                            .sess\n+                            .span_fatal(source_info.span, \"128bit atomics not yet supported\");\n                     }\n                 }\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -827,8 +870,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             let val = val.load_scalar(fx);\n \n             fx.bcx.ins().atomic_store(MemFlags::trusted(), val, ptr);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_xchg\"), (v ptr, c new) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_xchg\") => {\n+            intrinsic_args!(fx, args => (ptr, new); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = new.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -845,8 +891,12 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_cxchg\"), (v ptr, c test_old, c new) { // both atomic_cxchg_* and atomic_cxchgweak_*\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_cxchg\") => {\n+            // both atomic_cxchg_* and atomic_cxchgweak_*\n+            intrinsic_args!(fx, args => (ptr, test_old, new); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = new.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -862,11 +912,15 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             let old = fx.bcx.ins().atomic_cas(MemFlags::trusted(), ptr, test_old, new);\n             let is_eq = fx.bcx.ins().icmp(IntCC::Equal, old, test_old);\n \n-            let ret_val = CValue::by_val_pair(old, fx.bcx.ins().bint(types::I8, is_eq), ret.layout());\n+            let ret_val =\n+                CValue::by_val_pair(old, fx.bcx.ins().bint(types::I8, is_eq), ret.layout());\n             ret.write_cvalue(fx, ret_val)\n-        };\n+        }\n+\n+        _ if intrinsic.as_str().starts_with(\"atomic_xadd\") => {\n+            intrinsic_args!(fx, args => (ptr, amount); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n \n-        _ if intrinsic.as_str().starts_with(\"atomic_xadd\"), (v ptr, c amount) {\n             let layout = amount.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -879,12 +933,16 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let amount = amount.load_scalar(fx);\n \n-            let old = fx.bcx.ins().atomic_rmw(ty, MemFlags::trusted(), AtomicRmwOp::Add, ptr, amount);\n+            let old =\n+                fx.bcx.ins().atomic_rmw(ty, MemFlags::trusted(), AtomicRmwOp::Add, ptr, amount);\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_xsub\"), (v ptr, c amount) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_xsub\") => {\n+            intrinsic_args!(fx, args => (ptr, amount); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = amount.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -897,12 +955,16 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let amount = amount.load_scalar(fx);\n \n-            let old = fx.bcx.ins().atomic_rmw(ty, MemFlags::trusted(), AtomicRmwOp::Sub, ptr, amount);\n+            let old =\n+                fx.bcx.ins().atomic_rmw(ty, MemFlags::trusted(), AtomicRmwOp::Sub, ptr, amount);\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_and\"), (v ptr, c src) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_and\") => {\n+            intrinsic_args!(fx, args => (ptr, src); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = src.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -919,8 +981,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_or\"), (v ptr, c src) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_or\") => {\n+            intrinsic_args!(fx, args => (ptr, src); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = src.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -937,8 +1002,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_xor\"), (v ptr, c src) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_xor\") => {\n+            intrinsic_args!(fx, args => (ptr, src); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = src.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -955,8 +1023,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_nand\"), (v ptr, c src) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_nand\") => {\n+            intrinsic_args!(fx, args => (ptr, src); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = src.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -973,8 +1044,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_max\"), (v ptr, c src) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_max\") => {\n+            intrinsic_args!(fx, args => (ptr, src); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = src.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -991,8 +1065,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_umax\"), (v ptr, c src) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_umax\") => {\n+            intrinsic_args!(fx, args => (ptr, src); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = src.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -1009,8 +1086,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_min\"), (v ptr, c src) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_min\") => {\n+            intrinsic_args!(fx, args => (ptr, src); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = src.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -1027,8 +1107,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_umin\"), (v ptr, c src) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_umin\") => {\n+            intrinsic_args!(fx, args => (ptr, src); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = src.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -1045,30 +1128,51 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n+        }\n+\n+        sym::minnumf32 => {\n+            intrinsic_args!(fx, args => (a, b); intrinsic);\n+            let a = a.load_scalar(fx);\n+            let b = b.load_scalar(fx);\n \n-        minnumf32, (v a, v b) {\n             let val = crate::num::codegen_float_min(fx, a, b);\n             let val = CValue::by_val(val, fx.layout_of(fx.tcx.types.f32));\n             ret.write_cvalue(fx, val);\n-        };\n-        minnumf64, (v a, v b) {\n+        }\n+        sym::minnumf64 => {\n+            intrinsic_args!(fx, args => (a, b); intrinsic);\n+            let a = a.load_scalar(fx);\n+            let b = b.load_scalar(fx);\n+\n             let val = crate::num::codegen_float_min(fx, a, b);\n             let val = CValue::by_val(val, fx.layout_of(fx.tcx.types.f64));\n             ret.write_cvalue(fx, val);\n-        };\n-        maxnumf32, (v a, v b) {\n+        }\n+        sym::maxnumf32 => {\n+            intrinsic_args!(fx, args => (a, b); intrinsic);\n+            let a = a.load_scalar(fx);\n+            let b = b.load_scalar(fx);\n+\n             let val = crate::num::codegen_float_max(fx, a, b);\n             let val = CValue::by_val(val, fx.layout_of(fx.tcx.types.f32));\n             ret.write_cvalue(fx, val);\n-        };\n-        maxnumf64, (v a, v b) {\n+        }\n+        sym::maxnumf64 => {\n+            intrinsic_args!(fx, args => (a, b); intrinsic);\n+            let a = a.load_scalar(fx);\n+            let b = b.load_scalar(fx);\n+\n             let val = crate::num::codegen_float_max(fx, a, b);\n             let val = CValue::by_val(val, fx.layout_of(fx.tcx.types.f64));\n             ret.write_cvalue(fx, val);\n-        };\n+        }\n+\n+        kw::Try => {\n+            intrinsic_args!(fx, args => (f, data, catch_fn); intrinsic);\n+            let f = f.load_scalar(fx);\n+            let data = data.load_scalar(fx);\n+            let _catch_fn = catch_fn.load_scalar(fx);\n \n-        kw.Try, (v f, v data, v _catch_fn) {\n             // FIXME once unwinding is supported, change this to actually catch panics\n             let f_sig = fx.bcx.func.import_signature(Signature {\n                 call_conv: fx.target_config.default_call_conv,\n@@ -1081,20 +1185,30 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             let layout = ret.layout();\n             let ret_val = CValue::const_val(fx, layout, ty::ScalarInt::null(layout.size));\n             ret.write_cvalue(fx, ret_val);\n-        };\n+        }\n \n-        fadd_fast | fsub_fast | fmul_fast | fdiv_fast | frem_fast, (c x, c y) {\n-            let res = crate::num::codegen_float_binop(fx, match intrinsic {\n-                sym::fadd_fast => BinOp::Add,\n-                sym::fsub_fast => BinOp::Sub,\n-                sym::fmul_fast => BinOp::Mul,\n-                sym::fdiv_fast => BinOp::Div,\n-                sym::frem_fast => BinOp::Rem,\n-                _ => unreachable!(),\n-            }, x, y);\n+        sym::fadd_fast | sym::fsub_fast | sym::fmul_fast | sym::fdiv_fast | sym::frem_fast => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n+\n+            let res = crate::num::codegen_float_binop(\n+                fx,\n+                match intrinsic {\n+                    sym::fadd_fast => BinOp::Add,\n+                    sym::fsub_fast => BinOp::Sub,\n+                    sym::fmul_fast => BinOp::Mul,\n+                    sym::fdiv_fast => BinOp::Div,\n+                    sym::frem_fast => BinOp::Rem,\n+                    _ => unreachable!(),\n+                },\n+                x,\n+                y,\n+            );\n             ret.write_cvalue(fx, res);\n-        };\n-        float_to_int_unchecked, (v f) {\n+        }\n+        sym::float_to_int_unchecked => {\n+            intrinsic_args!(fx, args => (f); intrinsic);\n+            let f = f.load_scalar(fx);\n+\n             let res = crate::cast::clif_int_or_float_cast(\n                 fx,\n                 f,\n@@ -1103,66 +1217,74 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 type_sign(ret.layout().ty),\n             );\n             ret.write_cvalue(fx, CValue::by_val(res, ret.layout()));\n-        };\n+        }\n+\n+        sym::raw_eq => {\n+            intrinsic_args!(fx, args => (lhs_ref, rhs_ref); intrinsic);\n+            let lhs_ref = lhs_ref.load_scalar(fx);\n+            let rhs_ref = rhs_ref.load_scalar(fx);\n \n-        raw_eq, (v lhs_ref, v rhs_ref) {\n             let size = fx.layout_of(substs.type_at(0)).layout.size();\n             // FIXME add and use emit_small_memcmp\n-            let is_eq_value =\n-                if size == Size::ZERO {\n-                    // No bytes means they're trivially equal\n-                    fx.bcx.ins().iconst(types::I8, 1)\n-                } else if let Some(clty) = size.bits().try_into().ok().and_then(Type::int) {\n-                    // Can't use `trusted` for these loads; they could be unaligned.\n-                    let mut flags = MemFlags::new();\n-                    flags.set_notrap();\n-                    let lhs_val = fx.bcx.ins().load(clty, flags, lhs_ref, 0);\n-                    let rhs_val = fx.bcx.ins().load(clty, flags, rhs_ref, 0);\n-                    let eq = fx.bcx.ins().icmp(IntCC::Equal, lhs_val, rhs_val);\n-                    fx.bcx.ins().bint(types::I8, eq)\n-                } else {\n-                    // Just call `memcmp` (like slices do in core) when the\n-                    // size is too large or it's not a power-of-two.\n-                    let signed_bytes = i64::try_from(size.bytes()).unwrap();\n-                    let bytes_val = fx.bcx.ins().iconst(fx.pointer_type, signed_bytes);\n-                    let params = vec![AbiParam::new(fx.pointer_type); 3];\n-                    let returns = vec![AbiParam::new(types::I32)];\n-                    let args = &[lhs_ref, rhs_ref, bytes_val];\n-                    let cmp = fx.lib_call(\"memcmp\", params, returns, args)[0];\n-                    let eq = fx.bcx.ins().icmp_imm(IntCC::Equal, cmp, 0);\n-                    fx.bcx.ins().bint(types::I8, eq)\n-                };\n+            let is_eq_value = if size == Size::ZERO {\n+                // No bytes means they're trivially equal\n+                fx.bcx.ins().iconst(types::I8, 1)\n+            } else if let Some(clty) = size.bits().try_into().ok().and_then(Type::int) {\n+                // Can't use `trusted` for these loads; they could be unaligned.\n+                let mut flags = MemFlags::new();\n+                flags.set_notrap();\n+                let lhs_val = fx.bcx.ins().load(clty, flags, lhs_ref, 0);\n+                let rhs_val = fx.bcx.ins().load(clty, flags, rhs_ref, 0);\n+                let eq = fx.bcx.ins().icmp(IntCC::Equal, lhs_val, rhs_val);\n+                fx.bcx.ins().bint(types::I8, eq)\n+            } else {\n+                // Just call `memcmp` (like slices do in core) when the\n+                // size is too large or it's not a power-of-two.\n+                let signed_bytes = i64::try_from(size.bytes()).unwrap();\n+                let bytes_val = fx.bcx.ins().iconst(fx.pointer_type, signed_bytes);\n+                let params = vec![AbiParam::new(fx.pointer_type); 3];\n+                let returns = vec![AbiParam::new(types::I32)];\n+                let args = &[lhs_ref, rhs_ref, bytes_val];\n+                let cmp = fx.lib_call(\"memcmp\", params, returns, args)[0];\n+                let eq = fx.bcx.ins().icmp_imm(IntCC::Equal, cmp, 0);\n+                fx.bcx.ins().bint(types::I8, eq)\n+            };\n             ret.write_cvalue(fx, CValue::by_val(is_eq_value, ret.layout()));\n-        };\n+        }\n+\n+        sym::const_allocate => {\n+            intrinsic_args!(fx, args => (_size, _align); intrinsic);\n \n-        const_allocate, (c _size, c _align) {\n             // returns a null pointer at runtime.\n             let null = fx.bcx.ins().iconst(fx.pointer_type, 0);\n             ret.write_cvalue(fx, CValue::by_val(null, ret.layout()));\n-        };\n+        }\n \n-        const_deallocate, (c _ptr, c _size, c _align) {\n+        sym::const_deallocate => {\n+            intrinsic_args!(fx, args => (_ptr, _size, _align); intrinsic);\n             // nop at runtime.\n-        };\n+        }\n+\n+        sym::black_box => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n \n-        black_box, (c a) {\n             // FIXME implement black_box semantics\n             ret.write_cvalue(fx, a);\n-        };\n+        }\n \n         // FIXME implement variadics in cranelift\n-        va_copy, (o _dest, o _src) {\n+        sym::va_copy | sym::va_arg | sym::va_end => {\n             fx.tcx.sess.span_fatal(\n                 source_info.span,\n                 \"Defining variadic functions is not yet supported by Cranelift\",\n             );\n-        };\n-        va_arg | va_end, (o _valist) {\n-            fx.tcx.sess.span_fatal(\n-                source_info.span,\n-                \"Defining variadic functions is not yet supported by Cranelift\",\n-            );\n-        };\n+        }\n+\n+        _ => {\n+            fx.tcx\n+                .sess\n+                .span_fatal(source_info.span, &format!(\"unsupported intrinsic {}\", intrinsic));\n+        }\n     }\n \n     let ret_block = fx.get_block(destination.unwrap());"}, {"sha": "30e3d112594a6d60beb75bb8459ffeb485d1ec6d", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/simd.rs", "status": "modified", "additions": 252, "deletions": 147, "changes": 399, "blob_url": "https://github.com/rust-lang/rust/blob/faa6f6b159c2148bf09e740cb4868bf5dc0c1fb1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa6f6b159c2148bf09e740cb4868bf5dc0c1fb1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs?ref=faa6f6b159c2148bf09e740cb4868bf5dc0c1fb1", "patch": "@@ -25,13 +25,10 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n     ret: CPlace<'tcx>,\n     span: Span,\n ) {\n-    intrinsic_match! {\n-        fx, intrinsic, args,\n-        _ => {\n-            fx.tcx.sess.span_fatal(span, &format!(\"Unknown SIMD intrinsic {}\", intrinsic));\n-        };\n+    match intrinsic {\n+        sym::simd_cast => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n \n-        simd_cast, (c a) {\n             if !a.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n                 return;\n@@ -45,9 +42,11 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n                 clif_int_or_float_cast(fx, lane, from_signed, ret_lane_clif_ty, to_signed)\n             });\n-        };\n+        }\n+\n+        sym::simd_eq | sym::simd_ne | sym::simd_lt | sym::simd_le | sym::simd_gt | sym::simd_ge => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n \n-        simd_eq | simd_ne | simd_lt | simd_le | simd_gt | simd_ge, (c x, c y) {\n             if !x.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, x.layout().ty);\n                 return;\n@@ -57,7 +56,9 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             simd_pair_for_each_lane(fx, x, y, ret, &|fx, lane_ty, res_lane_ty, x_lane, y_lane| {\n                 let res_lane = match (lane_ty.kind(), intrinsic) {\n                     (ty::Uint(_), sym::simd_eq) => fx.bcx.ins().icmp(IntCC::Equal, x_lane, y_lane),\n-                    (ty::Uint(_), sym::simd_ne) => fx.bcx.ins().icmp(IntCC::NotEqual, x_lane, y_lane),\n+                    (ty::Uint(_), sym::simd_ne) => {\n+                        fx.bcx.ins().icmp(IntCC::NotEqual, x_lane, y_lane)\n+                    }\n                     (ty::Uint(_), sym::simd_lt) => {\n                         fx.bcx.ins().icmp(IntCC::UnsignedLessThan, x_lane, y_lane)\n                     }\n@@ -72,8 +73,12 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                     }\n \n                     (ty::Int(_), sym::simd_eq) => fx.bcx.ins().icmp(IntCC::Equal, x_lane, y_lane),\n-                    (ty::Int(_), sym::simd_ne) => fx.bcx.ins().icmp(IntCC::NotEqual, x_lane, y_lane),\n-                    (ty::Int(_), sym::simd_lt) => fx.bcx.ins().icmp(IntCC::SignedLessThan, x_lane, y_lane),\n+                    (ty::Int(_), sym::simd_ne) => {\n+                        fx.bcx.ins().icmp(IntCC::NotEqual, x_lane, y_lane)\n+                    }\n+                    (ty::Int(_), sym::simd_lt) => {\n+                        fx.bcx.ins().icmp(IntCC::SignedLessThan, x_lane, y_lane)\n+                    }\n                     (ty::Int(_), sym::simd_le) => {\n                         fx.bcx.ins().icmp(IntCC::SignedLessThanOrEqual, x_lane, y_lane)\n                     }\n@@ -84,13 +89,21 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                         fx.bcx.ins().icmp(IntCC::SignedGreaterThanOrEqual, x_lane, y_lane)\n                     }\n \n-                    (ty::Float(_), sym::simd_eq) => fx.bcx.ins().fcmp(FloatCC::Equal, x_lane, y_lane),\n-                    (ty::Float(_), sym::simd_ne) => fx.bcx.ins().fcmp(FloatCC::NotEqual, x_lane, y_lane),\n-                    (ty::Float(_), sym::simd_lt) => fx.bcx.ins().fcmp(FloatCC::LessThan, x_lane, y_lane),\n+                    (ty::Float(_), sym::simd_eq) => {\n+                        fx.bcx.ins().fcmp(FloatCC::Equal, x_lane, y_lane)\n+                    }\n+                    (ty::Float(_), sym::simd_ne) => {\n+                        fx.bcx.ins().fcmp(FloatCC::NotEqual, x_lane, y_lane)\n+                    }\n+                    (ty::Float(_), sym::simd_lt) => {\n+                        fx.bcx.ins().fcmp(FloatCC::LessThan, x_lane, y_lane)\n+                    }\n                     (ty::Float(_), sym::simd_le) => {\n                         fx.bcx.ins().fcmp(FloatCC::LessThanOrEqual, x_lane, y_lane)\n                     }\n-                    (ty::Float(_), sym::simd_gt) => fx.bcx.ins().fcmp(FloatCC::GreaterThan, x_lane, y_lane),\n+                    (ty::Float(_), sym::simd_gt) => {\n+                        fx.bcx.ins().fcmp(FloatCC::GreaterThan, x_lane, y_lane)\n+                    }\n                     (ty::Float(_), sym::simd_ge) => {\n                         fx.bcx.ins().fcmp(FloatCC::GreaterThanOrEqual, x_lane, y_lane)\n                     }\n@@ -103,10 +116,19 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 let res_lane = fx.bcx.ins().bint(ty, res_lane);\n                 fx.bcx.ins().ineg(res_lane)\n             });\n-        };\n+        }\n \n         // simd_shuffle32<T, U>(x: T, y: T, idx: [u32; 32]) -> U\n-        _ if intrinsic.as_str().starts_with(\"simd_shuffle\"), (c x, c y, o idx) {\n+        _ if intrinsic.as_str().starts_with(\"simd_shuffle\") => {\n+            let (x, y, idx) = match args {\n+                [x, y, idx] => (x, y, idx),\n+                _ => {\n+                    bug!(\"wrong number of args for intrinsic {intrinsic}\");\n+                }\n+            };\n+            let x = codegen_operand(fx, x);\n+            let y = codegen_operand(fx, y);\n+\n             if !x.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, x.layout().ty);\n                 return;\n@@ -119,11 +141,13 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 // version of this intrinsic.\n                 let idx_ty = fx.monomorphize(idx.ty(fx.mir, fx.tcx));\n                 match idx_ty.kind() {\n-                    ty::Array(ty, len) if matches!(ty.kind(), ty::Uint(ty::UintTy::U32)) => {\n-                        len.try_eval_usize(fx.tcx, ty::ParamEnv::reveal_all()).unwrap_or_else(|| {\n+                    ty::Array(ty, len) if matches!(ty.kind(), ty::Uint(ty::UintTy::U32)) => len\n+                        .try_eval_usize(fx.tcx, ty::ParamEnv::reveal_all())\n+                        .unwrap_or_else(|| {\n                             span_bug!(span, \"could not evaluate shuffle index array length\")\n-                        }).try_into().unwrap()\n-                    }\n+                        })\n+                        .try_into()\n+                        .unwrap(),\n                     _ => {\n                         fx.tcx.sess.span_err(\n                             span,\n@@ -154,24 +178,30 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n             let indexes = {\n                 use rustc_middle::mir::interpret::*;\n-                let idx_const = crate::constant::mir_operand_get_const_val(fx, idx).expect(\"simd_shuffle* idx not const\");\n+                let idx_const = crate::constant::mir_operand_get_const_val(fx, idx)\n+                    .expect(\"simd_shuffle* idx not const\");\n \n                 let idx_bytes = match idx_const {\n                     ConstValue::ByRef { alloc, offset } => {\n-                        let size = Size::from_bytes(4 * ret_lane_count /* size_of([u32; ret_lane_count]) */);\n+                        let size = Size::from_bytes(\n+                            4 * ret_lane_count, /* size_of([u32; ret_lane_count]) */\n+                        );\n                         alloc.inner().get_bytes(fx, alloc_range(offset, size)).unwrap()\n                     }\n                     _ => unreachable!(\"{:?}\", idx_const),\n                 };\n \n-                (0..ret_lane_count).map(|i| {\n-                    let i = usize::try_from(i).unwrap();\n-                    let idx = rustc_middle::mir::interpret::read_target_uint(\n-                        fx.tcx.data_layout.endian,\n-                        &idx_bytes[4*i.. 4*i + 4],\n-                    ).expect(\"read_target_uint\");\n-                    u16::try_from(idx).expect(\"try_from u32\")\n-                }).collect::<Vec<u16>>()\n+                (0..ret_lane_count)\n+                    .map(|i| {\n+                        let i = usize::try_from(i).unwrap();\n+                        let idx = rustc_middle::mir::interpret::read_target_uint(\n+                            fx.tcx.data_layout.endian,\n+                            &idx_bytes[4 * i..4 * i + 4],\n+                        )\n+                        .expect(\"read_target_uint\");\n+                        u16::try_from(idx).expect(\"try_from u32\")\n+                    })\n+                    .collect::<Vec<u16>>()\n             };\n \n             for &idx in &indexes {\n@@ -187,43 +217,63 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 let out_lane = ret.place_lane(fx, u64::try_from(out_idx).unwrap());\n                 out_lane.write_cvalue(fx, in_lane);\n             }\n-        };\n+        }\n+\n+        sym::simd_insert => {\n+            let (base, idx, val) = match args {\n+                [base, idx, val] => (base, idx, val),\n+                _ => {\n+                    bug!(\"wrong number of args for intrinsic {intrinsic}\");\n+                }\n+            };\n+            let base = codegen_operand(fx, base);\n+            let val = codegen_operand(fx, val);\n \n-        simd_insert, (c base, o idx, c val) {\n             // FIXME validate\n-            let idx_const = if let Some(idx_const) = crate::constant::mir_operand_get_const_val(fx, idx) {\n+            let idx_const = if let Some(idx_const) =\n+                crate::constant::mir_operand_get_const_val(fx, idx)\n+            {\n                 idx_const\n             } else {\n-                fx.tcx.sess.span_fatal(\n-                    span,\n-                    \"Index argument for `simd_insert` is not a constant\",\n-                );\n+                fx.tcx.sess.span_fatal(span, \"Index argument for `simd_insert` is not a constant\");\n             };\n \n-            let idx = idx_const.try_to_bits(Size::from_bytes(4 /* u32*/)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", idx_const));\n+            let idx = idx_const\n+                .try_to_bits(Size::from_bytes(4 /* u32*/))\n+                .unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", idx_const));\n             let (lane_count, _lane_ty) = base.layout().ty.simd_size_and_type(fx.tcx);\n             if idx >= lane_count.into() {\n-                fx.tcx.sess.span_fatal(fx.mir.span, &format!(\"[simd_insert] idx {} >= lane_count {}\", idx, lane_count));\n+                fx.tcx.sess.span_fatal(\n+                    fx.mir.span,\n+                    &format!(\"[simd_insert] idx {} >= lane_count {}\", idx, lane_count),\n+                );\n             }\n \n             ret.write_cvalue(fx, base);\n             let ret_lane = ret.place_field(fx, mir::Field::new(idx.try_into().unwrap()));\n             ret_lane.write_cvalue(fx, val);\n-        };\n+        }\n+\n+        sym::simd_extract => {\n+            let (v, idx) = match args {\n+                [v, idx] => (v, idx),\n+                _ => {\n+                    bug!(\"wrong number of args for intrinsic {intrinsic}\");\n+                }\n+            };\n+            let v = codegen_operand(fx, v);\n \n-        simd_extract, (c v, o idx) {\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n                 return;\n             }\n \n-            let idx_const = if let Some(idx_const) = crate::constant::mir_operand_get_const_val(fx, idx) {\n+            let idx_const = if let Some(idx_const) =\n+                crate::constant::mir_operand_get_const_val(fx, idx)\n+            {\n                 idx_const\n             } else {\n-                fx.tcx.sess.span_warn(\n-                    span,\n-                    \"Index argument for `simd_extract` is not a constant\",\n-                );\n+                fx.tcx.sess.span_warn(span, \"Index argument for `simd_extract` is not a constant\");\n                 let res = crate::trap::trap_unimplemented_ret_value(\n                     fx,\n                     ret.layout(),\n@@ -233,89 +283,105 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 return;\n             };\n \n-            let idx = idx_const.try_to_bits(Size::from_bytes(4 /* u32*/)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", idx_const));\n+            let idx = idx_const\n+                .try_to_bits(Size::from_bytes(4 /* u32*/))\n+                .unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", idx_const));\n             let (lane_count, _lane_ty) = v.layout().ty.simd_size_and_type(fx.tcx);\n             if idx >= lane_count.into() {\n-                fx.tcx.sess.span_fatal(fx.mir.span, &format!(\"[simd_extract] idx {} >= lane_count {}\", idx, lane_count));\n+                fx.tcx.sess.span_fatal(\n+                    fx.mir.span,\n+                    &format!(\"[simd_extract] idx {} >= lane_count {}\", idx, lane_count),\n+                );\n             }\n \n             let ret_lane = v.value_lane(fx, idx.try_into().unwrap());\n             ret.write_cvalue(fx, ret_lane);\n-        };\n+        }\n+\n+        sym::simd_neg => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n \n-        simd_neg, (c a) {\n             if !a.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n                 return;\n             }\n \n-            simd_for_each_lane(fx, a, ret, &|fx, lane_ty, _ret_lane_ty, lane| {\n-                match lane_ty.kind() {\n+            simd_for_each_lane(\n+                fx,\n+                a,\n+                ret,\n+                &|fx, lane_ty, _ret_lane_ty, lane| match lane_ty.kind() {\n                     ty::Int(_) => fx.bcx.ins().ineg(lane),\n                     ty::Float(_) => fx.bcx.ins().fneg(lane),\n                     _ => unreachable!(),\n-                }\n-            });\n-        };\n-\n-        simd_add | simd_sub | simd_mul | simd_div | simd_rem\n-        | simd_shl | simd_shr | simd_and | simd_or | simd_xor, (c x, c y) {\n-            if !x.layout().ty.is_simd() {\n-                report_simd_type_validation_error(fx, intrinsic, span, x.layout().ty);\n-                return;\n-            }\n+                },\n+            );\n+        }\n+\n+        sym::simd_add\n+        | sym::simd_sub\n+        | sym::simd_mul\n+        | sym::simd_div\n+        | sym::simd_rem\n+        | sym::simd_shl\n+        | sym::simd_shr\n+        | sym::simd_and\n+        | sym::simd_or\n+        | sym::simd_xor => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n \n             // FIXME use vector instructions when possible\n-            simd_pair_for_each_lane(fx, x, y, ret, &|fx, lane_ty, _ret_lane_ty, x_lane, y_lane| match (\n-                lane_ty.kind(),\n-                intrinsic,\n-            ) {\n-                (ty::Uint(_), sym::simd_add) => fx.bcx.ins().iadd(x_lane, y_lane),\n-                (ty::Uint(_), sym::simd_sub) => fx.bcx.ins().isub(x_lane, y_lane),\n-                (ty::Uint(_), sym::simd_mul) => fx.bcx.ins().imul(x_lane, y_lane),\n-                (ty::Uint(_), sym::simd_div) => fx.bcx.ins().udiv(x_lane, y_lane),\n-                (ty::Uint(_), sym::simd_rem) => fx.bcx.ins().urem(x_lane, y_lane),\n-\n-                (ty::Int(_), sym::simd_add) => fx.bcx.ins().iadd(x_lane, y_lane),\n-                (ty::Int(_), sym::simd_sub) => fx.bcx.ins().isub(x_lane, y_lane),\n-                (ty::Int(_), sym::simd_mul) => fx.bcx.ins().imul(x_lane, y_lane),\n-                (ty::Int(_), sym::simd_div) => fx.bcx.ins().sdiv(x_lane, y_lane),\n-                (ty::Int(_), sym::simd_rem) => fx.bcx.ins().srem(x_lane, y_lane),\n-\n-                (ty::Float(_), sym::simd_add) => fx.bcx.ins().fadd(x_lane, y_lane),\n-                (ty::Float(_), sym::simd_sub) => fx.bcx.ins().fsub(x_lane, y_lane),\n-                (ty::Float(_), sym::simd_mul) => fx.bcx.ins().fmul(x_lane, y_lane),\n-                (ty::Float(_), sym::simd_div) => fx.bcx.ins().fdiv(x_lane, y_lane),\n-                (ty::Float(FloatTy::F32), sym::simd_rem) => fx.lib_call(\n-                    \"fmodf\",\n-                    vec![AbiParam::new(types::F32), AbiParam::new(types::F32)],\n-                    vec![AbiParam::new(types::F32)],\n-                    &[x_lane, y_lane],\n-                )[0],\n-                (ty::Float(FloatTy::F64), sym::simd_rem) => fx.lib_call(\n-                    \"fmod\",\n-                    vec![AbiParam::new(types::F64), AbiParam::new(types::F64)],\n-                    vec![AbiParam::new(types::F64)],\n-                    &[x_lane, y_lane],\n-                )[0],\n-\n-                (ty::Uint(_), sym::simd_shl) => fx.bcx.ins().ishl(x_lane, y_lane),\n-                (ty::Uint(_), sym::simd_shr) => fx.bcx.ins().ushr(x_lane, y_lane),\n-                (ty::Uint(_), sym::simd_and) => fx.bcx.ins().band(x_lane, y_lane),\n-                (ty::Uint(_), sym::simd_or) => fx.bcx.ins().bor(x_lane, y_lane),\n-                (ty::Uint(_), sym::simd_xor) => fx.bcx.ins().bxor(x_lane, y_lane),\n-\n-                (ty::Int(_), sym::simd_shl) => fx.bcx.ins().ishl(x_lane, y_lane),\n-                (ty::Int(_), sym::simd_shr) => fx.bcx.ins().sshr(x_lane, y_lane),\n-                (ty::Int(_), sym::simd_and) => fx.bcx.ins().band(x_lane, y_lane),\n-                (ty::Int(_), sym::simd_or) => fx.bcx.ins().bor(x_lane, y_lane),\n-                (ty::Int(_), sym::simd_xor) => fx.bcx.ins().bxor(x_lane, y_lane),\n-\n-                _ => unreachable!(),\n+            simd_pair_for_each_lane(fx, x, y, ret, &|fx, lane_ty, _ret_lane_ty, x_lane, y_lane| {\n+                match (lane_ty.kind(), intrinsic) {\n+                    (ty::Uint(_), sym::simd_add) => fx.bcx.ins().iadd(x_lane, y_lane),\n+                    (ty::Uint(_), sym::simd_sub) => fx.bcx.ins().isub(x_lane, y_lane),\n+                    (ty::Uint(_), sym::simd_mul) => fx.bcx.ins().imul(x_lane, y_lane),\n+                    (ty::Uint(_), sym::simd_div) => fx.bcx.ins().udiv(x_lane, y_lane),\n+                    (ty::Uint(_), sym::simd_rem) => fx.bcx.ins().urem(x_lane, y_lane),\n+\n+                    (ty::Int(_), sym::simd_add) => fx.bcx.ins().iadd(x_lane, y_lane),\n+                    (ty::Int(_), sym::simd_sub) => fx.bcx.ins().isub(x_lane, y_lane),\n+                    (ty::Int(_), sym::simd_mul) => fx.bcx.ins().imul(x_lane, y_lane),\n+                    (ty::Int(_), sym::simd_div) => fx.bcx.ins().sdiv(x_lane, y_lane),\n+                    (ty::Int(_), sym::simd_rem) => fx.bcx.ins().srem(x_lane, y_lane),\n+\n+                    (ty::Float(_), sym::simd_add) => fx.bcx.ins().fadd(x_lane, y_lane),\n+                    (ty::Float(_), sym::simd_sub) => fx.bcx.ins().fsub(x_lane, y_lane),\n+                    (ty::Float(_), sym::simd_mul) => fx.bcx.ins().fmul(x_lane, y_lane),\n+                    (ty::Float(_), sym::simd_div) => fx.bcx.ins().fdiv(x_lane, y_lane),\n+                    (ty::Float(FloatTy::F32), sym::simd_rem) => fx.lib_call(\n+                        \"fmodf\",\n+                        vec![AbiParam::new(types::F32), AbiParam::new(types::F32)],\n+                        vec![AbiParam::new(types::F32)],\n+                        &[x_lane, y_lane],\n+                    )[0],\n+                    (ty::Float(FloatTy::F64), sym::simd_rem) => fx.lib_call(\n+                        \"fmod\",\n+                        vec![AbiParam::new(types::F64), AbiParam::new(types::F64)],\n+                        vec![AbiParam::new(types::F64)],\n+                        &[x_lane, y_lane],\n+                    )[0],\n+\n+                    (ty::Uint(_), sym::simd_shl) => fx.bcx.ins().ishl(x_lane, y_lane),\n+                    (ty::Uint(_), sym::simd_shr) => fx.bcx.ins().ushr(x_lane, y_lane),\n+                    (ty::Uint(_), sym::simd_and) => fx.bcx.ins().band(x_lane, y_lane),\n+                    (ty::Uint(_), sym::simd_or) => fx.bcx.ins().bor(x_lane, y_lane),\n+                    (ty::Uint(_), sym::simd_xor) => fx.bcx.ins().bxor(x_lane, y_lane),\n+\n+                    (ty::Int(_), sym::simd_shl) => fx.bcx.ins().ishl(x_lane, y_lane),\n+                    (ty::Int(_), sym::simd_shr) => fx.bcx.ins().sshr(x_lane, y_lane),\n+                    (ty::Int(_), sym::simd_and) => fx.bcx.ins().band(x_lane, y_lane),\n+                    (ty::Int(_), sym::simd_or) => fx.bcx.ins().bor(x_lane, y_lane),\n+                    (ty::Int(_), sym::simd_xor) => fx.bcx.ins().bxor(x_lane, y_lane),\n+\n+                    _ => unreachable!(),\n+                }\n             });\n-        };\n+        }\n+\n+        sym::simd_fma => {\n+            intrinsic_args!(fx, args => (a, b, c); intrinsic);\n \n-        simd_fma, (c a, c b, c c) {\n             if !a.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n                 return;\n@@ -333,16 +399,22 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 let c_lane = c.value_lane(fx, lane);\n \n                 let res_lane = match lane_ty.kind() {\n-                    ty::Float(FloatTy::F32) => fx.easy_call(\"fmaf\", &[a_lane, b_lane, c_lane], lane_ty),\n-                    ty::Float(FloatTy::F64) => fx.easy_call(\"fma\", &[a_lane, b_lane, c_lane], lane_ty),\n+                    ty::Float(FloatTy::F32) => {\n+                        fx.easy_call(\"fmaf\", &[a_lane, b_lane, c_lane], lane_ty)\n+                    }\n+                    ty::Float(FloatTy::F64) => {\n+                        fx.easy_call(\"fma\", &[a_lane, b_lane, c_lane], lane_ty)\n+                    }\n                     _ => unreachable!(),\n                 };\n \n                 ret.place_lane(fx, lane).write_cvalue(fx, res_lane);\n             }\n-        };\n+        }\n+\n+        sym::simd_fmin | sym::simd_fmax => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n \n-        simd_fmin | simd_fmax, (c x, c y) {\n             if !x.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, x.layout().ty);\n                 return;\n@@ -351,7 +423,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             // FIXME use vector instructions when possible\n             simd_pair_for_each_lane(fx, x, y, ret, &|fx, lane_ty, _ret_lane_ty, x_lane, y_lane| {\n                 match lane_ty.kind() {\n-                    ty::Float(_) => {},\n+                    ty::Float(_) => {}\n                     _ => unreachable!(\"{:?}\", lane_ty),\n                 }\n                 match intrinsic {\n@@ -360,16 +432,21 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                     _ => unreachable!(),\n                 }\n             });\n-        };\n+        }\n+\n+        sym::simd_round => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n \n-        simd_round, (c a) {\n             if !a.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n                 return;\n             }\n \n-            simd_for_each_lane(fx, a, ret, &|fx, lane_ty, _ret_lane_ty, lane| {\n-                match lane_ty.kind() {\n+            simd_for_each_lane(\n+                fx,\n+                a,\n+                ret,\n+                &|fx, lane_ty, _ret_lane_ty, lane| match lane_ty.kind() {\n                     ty::Float(FloatTy::F32) => fx.lib_call(\n                         \"roundf\",\n                         vec![AbiParam::new(types::F32)],\n@@ -383,19 +460,21 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                         &[lane],\n                     )[0],\n                     _ => unreachable!(\"{:?}\", lane_ty),\n-                }\n-            });\n-        };\n+                },\n+            );\n+        }\n+\n+        sym::simd_fabs | sym::simd_fsqrt | sym::simd_ceil | sym::simd_floor | sym::simd_trunc => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n \n-        simd_fabs | simd_fsqrt | simd_ceil | simd_floor | simd_trunc, (c a) {\n             if !a.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n                 return;\n             }\n \n             simd_for_each_lane(fx, a, ret, &|fx, lane_ty, _ret_lane_ty, lane| {\n                 match lane_ty.kind() {\n-                    ty::Float(_) => {},\n+                    ty::Float(_) => {}\n                     _ => unreachable!(\"{:?}\", lane_ty),\n                 }\n                 match intrinsic {\n@@ -407,9 +486,12 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                     _ => unreachable!(),\n                 }\n             });\n-        };\n+        }\n+\n+        sym::simd_reduce_add_ordered | sym::simd_reduce_add_unordered => {\n+            intrinsic_args!(fx, args => (v, acc); intrinsic);\n+            let acc = acc.load_scalar(fx);\n \n-        simd_reduce_add_ordered | simd_reduce_add_unordered, (c v, v acc) {\n             // FIXME there must be no acc param for integer vectors\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n@@ -423,9 +505,12 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                     fx.bcx.ins().iadd(a, b)\n                 }\n             });\n-        };\n+        }\n+\n+        sym::simd_reduce_mul_ordered | sym::simd_reduce_mul_unordered => {\n+            intrinsic_args!(fx, args => (v, acc); intrinsic);\n+            let acc = acc.load_scalar(fx);\n \n-        simd_reduce_mul_ordered | simd_reduce_mul_unordered, (c v, v acc) {\n             // FIXME there must be no acc param for integer vectors\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n@@ -439,54 +524,66 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                     fx.bcx.ins().imul(a, b)\n                 }\n             });\n-        };\n+        }\n+\n+        sym::simd_reduce_all => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n \n-        simd_reduce_all, (c v) {\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n                 return;\n             }\n \n             simd_reduce_bool(fx, v, ret, &|fx, a, b| fx.bcx.ins().band(a, b));\n-        };\n+        }\n+\n+        sym::simd_reduce_any => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n \n-        simd_reduce_any, (c v) {\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n                 return;\n             }\n \n             simd_reduce_bool(fx, v, ret, &|fx, a, b| fx.bcx.ins().bor(a, b));\n-        };\n+        }\n+\n+        sym::simd_reduce_and => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n \n-        simd_reduce_and, (c v) {\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n                 return;\n             }\n \n             simd_reduce(fx, v, None, ret, &|fx, _ty, a, b| fx.bcx.ins().band(a, b));\n-        };\n+        }\n+\n+        sym::simd_reduce_or => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n \n-        simd_reduce_or, (c v) {\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n                 return;\n             }\n \n             simd_reduce(fx, v, None, ret, &|fx, _ty, a, b| fx.bcx.ins().bor(a, b));\n-        };\n+        }\n+\n+        sym::simd_reduce_xor => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n \n-        simd_reduce_xor, (c v) {\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n                 return;\n             }\n \n             simd_reduce(fx, v, None, ret, &|fx, _ty, a, b| fx.bcx.ins().bxor(a, b));\n-        };\n+        }\n+\n+        sym::simd_reduce_min => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n \n-        simd_reduce_min, (c v) {\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n                 return;\n@@ -501,9 +598,11 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 };\n                 fx.bcx.ins().select(lt, a, b)\n             });\n-        };\n+        }\n+\n+        sym::simd_reduce_max => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n \n-        simd_reduce_max, (c v) {\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n                 return;\n@@ -518,9 +617,11 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 };\n                 fx.bcx.ins().select(gt, a, b)\n             });\n-        };\n+        }\n+\n+        sym::simd_select => {\n+            intrinsic_args!(fx, args => (m, a, b); intrinsic);\n \n-        simd_select, (c m, c a, c b) {\n             if !m.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, m.layout().ty);\n                 return;\n@@ -540,15 +641,19 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 let b_lane = b.value_lane(fx, lane).load_scalar(fx);\n \n                 let m_lane = fx.bcx.ins().icmp_imm(IntCC::Equal, m_lane, 0);\n-                let res_lane = CValue::by_val(fx.bcx.ins().select(m_lane, b_lane, a_lane), lane_layout);\n+                let res_lane =\n+                    CValue::by_val(fx.bcx.ins().select(m_lane, b_lane, a_lane), lane_layout);\n \n                 ret.place_lane(fx, lane).write_cvalue(fx, res_lane);\n             }\n-        };\n+        }\n \n         // simd_saturating_*\n         // simd_bitmask\n         // simd_scatter\n         // simd_gather\n+        _ => {\n+            fx.tcx.sess.span_fatal(span, &format!(\"Unknown SIMD intrinsic {}\", intrinsic));\n+        }\n     }\n }"}]}