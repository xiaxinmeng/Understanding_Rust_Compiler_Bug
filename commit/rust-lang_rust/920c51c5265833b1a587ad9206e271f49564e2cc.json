{"sha": "920c51c5265833b1a587ad9206e271f49564e2cc", "node_id": "C_kwDOAAsO6NoAKDkyMGM1MWM1MjY1ODMzYjFhNTg3YWQ5MjA2ZTI3MWY0OTU2NGUyY2M", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-20T20:53:43Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-08T21:11:16Z"}, "message": "Enforce that PointerLike requires a pointer-like ABI", "tree": {"sha": "520eb40faebeae292023c75f2c8fab7220ef4f0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/520eb40faebeae292023c75f2c8fab7220ef4f0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/920c51c5265833b1a587ad9206e271f49564e2cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/920c51c5265833b1a587ad9206e271f49564e2cc", "html_url": "https://github.com/rust-lang/rust/commit/920c51c5265833b1a587ad9206e271f49564e2cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/920c51c5265833b1a587ad9206e271f49564e2cc/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd2b19539ea4d62a150cf13d45942e58b6b44e54", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd2b19539ea4d62a150cf13d45942e58b6b44e54", "html_url": "https://github.com/rust-lang/rust/commit/dd2b19539ea4d62a150cf13d45942e58b6b44e54"}], "stats": {"total": 66, "additions": 41, "deletions": 25}, "files": [{"sha": "76765c8a0aa3870d79289a8bb6f5ec2d8b91d219", "filename": "compiler/rustc_abi/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/920c51c5265833b1a587ad9206e271f49564e2cc/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/920c51c5265833b1a587ad9206e271f49564e2cc/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flib.rs?ref=920c51c5265833b1a587ad9206e271f49564e2cc", "patch": "@@ -1522,6 +1522,16 @@ impl<'a> Layout<'a> {\n     pub fn size(self) -> Size {\n         self.0.0.size\n     }\n+\n+    /// Whether the layout is from a type that implements [`std::marker::PointerLike`].\n+    ///\n+    /// Currently, that means that the type is pointer-sized, pointer-aligned,\n+    /// and has a scalar ABI.\n+    pub fn is_pointer_like(self, data_layout: &TargetDataLayout) -> bool {\n+        self.size() == data_layout.pointer_size\n+            && self.align().abi == data_layout.pointer_align.abi\n+            && matches!(self.abi(), Abi::Scalar(..))\n+    }\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Debug)]"}, {"sha": "a2203473ca970365f26d3b1229965f9f26333b57", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/920c51c5265833b1a587ad9206e271f49564e2cc/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/920c51c5265833b1a587ad9206e271f49564e2cc/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=920c51c5265833b1a587ad9206e271f49564e2cc", "patch": "@@ -221,8 +221,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         let self_ty = tcx.erase_regions(goal.predicate.self_ty());\n \n         if let Ok(layout) = tcx.layout_of(goal.param_env.and(self_ty))\n-            && layout.layout.size() == tcx.data_layout.pointer_size\n-            && layout.layout.align().abi == tcx.data_layout.pointer_align.abi\n+            && layout.layout.is_pointer_like(&tcx.data_layout)\n         {\n             // FIXME: We could make this faster by making a no-constraints response\n             ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)"}, {"sha": "a794d20d683f3400e1cc6eded5879d7e1f4be904", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/920c51c5265833b1a587ad9206e271f49564e2cc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/920c51c5265833b1a587ad9206e271f49564e2cc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=920c51c5265833b1a587ad9206e271f49564e2cc", "patch": "@@ -97,7 +97,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             } else if lang_items.tuple_trait() == Some(def_id) {\n                 self.assemble_candidate_for_tuple(obligation, &mut candidates);\n             } else if lang_items.pointer_like() == Some(def_id) {\n-                self.assemble_candidate_for_ptr_sized(obligation, &mut candidates);\n+                self.assemble_candidate_for_pointer_like(obligation, &mut candidates);\n             } else if lang_items.fn_ptr_trait() == Some(def_id) {\n                 self.assemble_candidates_for_fn_ptr_trait(obligation, &mut candidates);\n             } else {\n@@ -942,25 +942,24 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n     }\n \n-    fn assemble_candidate_for_ptr_sized(\n+    fn assemble_candidate_for_pointer_like(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n         candidates: &mut SelectionCandidateSet<'tcx>,\n     ) {\n         // The regions of a type don't affect the size of the type\n-        let self_ty = self\n-            .tcx()\n-            .erase_regions(self.tcx().erase_late_bound_regions(obligation.predicate.self_ty()));\n+        let tcx = self.tcx();\n+        let self_ty =\n+            tcx.erase_regions(tcx.erase_late_bound_regions(obligation.predicate.self_ty()));\n \n         // But if there are inference variables, we have to wait until it's resolved.\n         if self_ty.has_non_region_infer() {\n             candidates.ambiguous = true;\n             return;\n         }\n \n-        if let Ok(layout) = self.tcx().layout_of(obligation.param_env.and(self_ty))\n-            && layout.layout.size() == self.tcx().data_layout.pointer_size\n-            && layout.layout.align().abi == self.tcx().data_layout.pointer_align.abi\n+        if let Ok(layout) = tcx.layout_of(obligation.param_env.and(self_ty))\n+            && layout.layout.is_pointer_like(&tcx.data_layout)\n         {\n             candidates.vec.push(BuiltinCandidate { has_nested: false });\n         }"}, {"sha": "62064f1aa6cb1d0c00fd24d4e2029ca602259a86", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/920c51c5265833b1a587ad9206e271f49564e2cc/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/920c51c5265833b1a587ad9206e271f49564e2cc/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=920c51c5265833b1a587ad9206e271f49564e2cc", "patch": "@@ -879,7 +879,7 @@ pub trait Tuple {}\n #[unstable(feature = \"pointer_like_trait\", issue = \"none\")]\n #[lang = \"pointer_like\"]\n #[rustc_on_unimplemented(\n-    message = \"`{Self}` needs to have the same alignment and size as a pointer\",\n+    message = \"`{Self}` needs to have the same ABI as a pointer\",\n     label = \"`{Self}` needs to be a pointer-like type\"\n )]\n pub trait PointerLike {}"}, {"sha": "42fa4fd6f00cefd8befcd58750a3a5f228e1567a", "filename": "tests/ui/dyn-star/align.normal.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/920c51c5265833b1a587ad9206e271f49564e2cc/tests%2Fui%2Fdyn-star%2Falign.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/920c51c5265833b1a587ad9206e271f49564e2cc/tests%2Fui%2Fdyn-star%2Falign.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Falign.normal.stderr?ref=920c51c5265833b1a587ad9206e271f49564e2cc", "patch": "@@ -1,11 +1,20 @@\n warning: the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/align.rs:4:12\n+  --> $DIR/align.rs:3:12\n    |\n LL | #![feature(dyn_star)]\n    |            ^^^^^^^^\n    |\n    = note: see issue #102425 <https://github.com/rust-lang/rust/issues/102425> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-warning: 1 warning emitted\n+error[E0277]: `AlignedUsize` needs to have the same ABI as a pointer\n+  --> $DIR/align.rs:14:13\n+   |\n+LL |     let x = AlignedUsize(12) as dyn* Debug;\n+   |             ^^^^^^^^^^^^^^^^ `AlignedUsize` needs to be a pointer-like type\n+   |\n+   = help: the trait `PointerLike` is not implemented for `AlignedUsize`\n+\n+error: aborting due to previous error; 1 warning emitted\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "42fa4fd6f00cefd8befcd58750a3a5f228e1567a", "filename": "tests/ui/dyn-star/align.over_aligned.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/920c51c5265833b1a587ad9206e271f49564e2cc/tests%2Fui%2Fdyn-star%2Falign.over_aligned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/920c51c5265833b1a587ad9206e271f49564e2cc/tests%2Fui%2Fdyn-star%2Falign.over_aligned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Falign.over_aligned.stderr?ref=920c51c5265833b1a587ad9206e271f49564e2cc", "patch": "@@ -1,14 +1,14 @@\n warning: the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/align.rs:4:12\n+  --> $DIR/align.rs:3:12\n    |\n LL | #![feature(dyn_star)]\n    |            ^^^^^^^^\n    |\n    = note: see issue #102425 <https://github.com/rust-lang/rust/issues/102425> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0277]: `AlignedUsize` needs to have the same alignment and size as a pointer\n-  --> $DIR/align.rs:15:13\n+error[E0277]: `AlignedUsize` needs to have the same ABI as a pointer\n+  --> $DIR/align.rs:14:13\n    |\n LL |     let x = AlignedUsize(12) as dyn* Debug;\n    |             ^^^^^^^^^^^^^^^^ `AlignedUsize` needs to be a pointer-like type"}, {"sha": "79cbaba0c78a1a02affeccf784cc4da1fd871f75", "filename": "tests/ui/dyn-star/align.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/920c51c5265833b1a587ad9206e271f49564e2cc/tests%2Fui%2Fdyn-star%2Falign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/920c51c5265833b1a587ad9206e271f49564e2cc/tests%2Fui%2Fdyn-star%2Falign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Falign.rs?ref=920c51c5265833b1a587ad9206e271f49564e2cc", "patch": "@@ -1,5 +1,4 @@\n // revisions: normal over_aligned\n-//[normal] check-pass\n \n #![feature(dyn_star)]\n //~^ WARN the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n@@ -13,5 +12,5 @@ struct AlignedUsize(usize);\n \n fn main() {\n     let x = AlignedUsize(12) as dyn* Debug;\n-    //[over_aligned]~^ ERROR `AlignedUsize` needs to have the same alignment and size as a pointer\n+    //~^ ERROR `AlignedUsize` needs to have the same ABI as a pointer\n }"}, {"sha": "913c2faacbd61acb08b4542c770c2eda6407e0eb", "filename": "tests/ui/dyn-star/check-size-at-cast-polymorphic-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/920c51c5265833b1a587ad9206e271f49564e2cc/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/920c51c5265833b1a587ad9206e271f49564e2cc/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.rs?ref=920c51c5265833b1a587ad9206e271f49564e2cc", "patch": "@@ -9,7 +9,7 @@ fn dyn_debug(_: (dyn* Debug + '_)) {\n \n fn polymorphic<T: Debug + ?Sized>(t: &T) {\n     dyn_debug(t);\n-    //~^ ERROR `&T` needs to have the same alignment and size as a pointer\n+    //~^ ERROR `&T` needs to have the same ABI as a pointer\n }\n \n fn main() {}"}, {"sha": "8726fae79a00627cb9286c5b39ae1c78c983fca1", "filename": "tests/ui/dyn-star/check-size-at-cast-polymorphic-bad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/920c51c5265833b1a587ad9206e271f49564e2cc/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/920c51c5265833b1a587ad9206e271f49564e2cc/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.stderr?ref=920c51c5265833b1a587ad9206e271f49564e2cc", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: `&T` needs to have the same alignment and size as a pointer\n+error[E0277]: `&T` needs to have the same ABI as a pointer\n   --> $DIR/check-size-at-cast-polymorphic-bad.rs:11:15\n    |\n LL |     dyn_debug(t);"}, {"sha": "e15e090b529ab8b02f20184226f744982afdc4c6", "filename": "tests/ui/dyn-star/check-size-at-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/920c51c5265833b1a587ad9206e271f49564e2cc/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/920c51c5265833b1a587ad9206e271f49564e2cc/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast.rs?ref=920c51c5265833b1a587ad9206e271f49564e2cc", "patch": "@@ -5,6 +5,6 @@ use std::fmt::Debug;\n \n fn main() {\n     let i = [1, 2, 3, 4] as dyn* Debug;\n-    //~^ ERROR `[i32; 4]` needs to have the same alignment and size as a pointer\n+    //~^ ERROR `[i32; 4]` needs to have the same ABI as a pointer\n     dbg!(i);\n }"}, {"sha": "e60b5c56ff049039aa5034e9a0a9bbf0126483f1", "filename": "tests/ui/dyn-star/check-size-at-cast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/920c51c5265833b1a587ad9206e271f49564e2cc/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/920c51c5265833b1a587ad9206e271f49564e2cc/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast.stderr?ref=920c51c5265833b1a587ad9206e271f49564e2cc", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: `[i32; 4]` needs to have the same alignment and size as a pointer\n+error[E0277]: `[i32; 4]` needs to have the same ABI as a pointer\n   --> $DIR/check-size-at-cast.rs:7:13\n    |\n LL |     let i = [1, 2, 3, 4] as dyn* Debug;"}, {"sha": "8b34c7f8b710f41e49a393353b7ffc44660cac16", "filename": "tests/ui/dyn-star/upcast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/920c51c5265833b1a587ad9206e271f49564e2cc/tests%2Fui%2Fdyn-star%2Fupcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/920c51c5265833b1a587ad9206e271f49564e2cc/tests%2Fui%2Fdyn-star%2Fupcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fupcast.stderr?ref=920c51c5265833b1a587ad9206e271f49564e2cc", "patch": "@@ -7,7 +7,7 @@ LL | #![feature(dyn_star, trait_upcasting)]\n    = note: see issue #102425 <https://github.com/rust-lang/rust/issues/102425> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0277]: `dyn* Foo` needs to have the same alignment and size as a pointer\n+error[E0277]: `dyn* Foo` needs to have the same ABI as a pointer\n   --> $DIR/upcast.rs:30:23\n    |\n LL |     let w: dyn* Bar = w;"}, {"sha": "98630176976f5c3bf4b2f21546adffbe9a25c312", "filename": "tests/ui/traits/new-solver/pointer-like.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/920c51c5265833b1a587ad9206e271f49564e2cc/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/920c51c5265833b1a587ad9206e271f49564e2cc/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-like.rs?ref=920c51c5265833b1a587ad9206e271f49564e2cc", "patch": "@@ -9,6 +9,6 @@ fn require_(_: impl PointerLike) {}\n fn main() {\n     require_(1usize);\n     require_(1u16);\n-    //~^ ERROR `u16` needs to have the same alignment and size as a pointer\n+    //~^ ERROR `u16` needs to have the same ABI as a pointer\n     require_(&1i16);\n }"}, {"sha": "215a81cc26573bd9733adb0f3c8d37ffe7057a4e", "filename": "tests/ui/traits/new-solver/pointer-like.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/920c51c5265833b1a587ad9206e271f49564e2cc/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-like.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/920c51c5265833b1a587ad9206e271f49564e2cc/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-like.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-like.stderr?ref=920c51c5265833b1a587ad9206e271f49564e2cc", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: `u16` needs to have the same alignment and size as a pointer\n+error[E0277]: `u16` needs to have the same ABI as a pointer\n   --> $DIR/pointer-like.rs:11:14\n    |\n LL |     require_(1u16);"}]}