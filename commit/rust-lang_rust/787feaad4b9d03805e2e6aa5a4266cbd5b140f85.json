{"sha": "787feaad4b9d03805e2e6aa5a4266cbd5b140f85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4N2ZlYWFkNGI5ZDAzODA1ZTJlNmFhNWE0MjY2Y2JkNWIxNDBmODU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-28T16:22:53Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-28T16:22:53Z"}, "message": "allow tuple field indexing into anonymous tuples", "tree": {"sha": "838c534b330e1a2d17604ed3d7e9ad61ee810efc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/838c534b330e1a2d17604ed3d7e9ad61ee810efc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/787feaad4b9d03805e2e6aa5a4266cbd5b140f85", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX6+5dAAoJEFbW7qD8Z6xGIeEQALMjlwIXsTEELUNcqYDm0Agw\nBezR4lEZMugYZCXTZPQ9rT+qvHB/WHVpE1d+p0UgGnf6sJJ+ax5UoB651MCJLdRO\nJpWBagBDeOqIKeC69LRb7cLbtTBRM61/tsVEbSAn4I3S4sIHnitDlz/gn+UO+kJz\n8XFMr+Mw4quHjp4YMmt1lK6DcNMCSqRRp6DLi21uZFKH8ww1gThbIFtepzG34dHD\neOrRIhN4WyFppGAJoZlm114TbdgcvY7yewxXna+Mkr8ISDqfcmx88Hcew+Zs1R/4\n9sZJYfuIqAFlm4BLbHUwM8pkPy2ryC66RDEoQgAKfLBUGrX+t3ev3S13CfeU5W8X\nY8TCpysywXp3DoVokL6P1AYrtqybCd+wRihG2mtKY9ODGtuIt7QGtwFdE9mR/Rmu\naB0D/ioVCOVso6QJEUI5jQPwXXe5K6cWHCnptAakxKc4Ej0bGB9H4GdRgEJFUI/Z\n1ozh9bhJkviw1IfJiIV7OxfURivUTHUoMcSjSicm8R3f2ihtlE4zopUTF2hjA2II\nlvQj44AVXSASMlxjDB4SrIqmlLdeRGd1Uvj5YSAnqqe3Jw8nE0YWqApYsbIBEPJ1\nR/ZvDTWNURHc/HpWnBZ8LzbvMUSDjDbRqS1Lu70+Q+IA/xSy3ZOC/s92+NxgzFkR\nj8OLzsQPFlBH/I/dXq2s\n=hlLx\n-----END PGP SIGNATURE-----", "payload": "tree 838c534b330e1a2d17604ed3d7e9ad61ee810efc\nparent 51abf19e123b2c74114e44962f77e147e021ac4f\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1475079773 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1475079773 +0200\n\nallow tuple field indexing into anonymous tuples"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/787feaad4b9d03805e2e6aa5a4266cbd5b140f85", "html_url": "https://github.com/rust-lang/rust/commit/787feaad4b9d03805e2e6aa5a4266cbd5b140f85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/787feaad4b9d03805e2e6aa5a4266cbd5b140f85/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51abf19e123b2c74114e44962f77e147e021ac4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/51abf19e123b2c74114e44962f77e147e021ac4f", "html_url": "https://github.com/rust-lang/rust/commit/51abf19e123b2c74114e44962f77e147e021ac4f"}], "stats": {"total": 52, "additions": 51, "deletions": 1}, "files": [{"sha": "70b7806706fc88a6e348968522d4169067260504", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/787feaad4b9d03805e2e6aa5a4266cbd5b140f85/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/787feaad4b9d03805e2e6aa5a4266cbd5b140f85/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=787feaad4b9d03805e2e6aa5a4266cbd5b140f85", "patch": "@@ -1,5 +1,6 @@\n use rustc::middle::const_val::ConstVal;\n use rustc::hir::def_id::DefId;\n+use rustc::hir::map::definitions::DefPathData;\n use rustc::mir::mir_map::MirMap;\n use rustc::mir::repr as mir;\n use rustc::traits::Reveal;\n@@ -712,13 +713,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 Ok(adt_def.struct_variant().fields[field_index].ty(self.tcx, substs))\n             }\n \n+            ty::TyTuple(fields) => Ok(fields[field_index]),\n+\n             ty::TyRef(_, ty::TypeAndMut { ty, .. }) |\n             ty::TyRawPtr(ty::TypeAndMut { ty, .. }) |\n             ty::TyBox(ty) => {\n                 assert_eq!(field_index, 0);\n                 Ok(ty)\n             }\n-            _ => Err(EvalError::Unimplemented(format!(\"can't handle type: {:?}\", ty))),\n+            _ => Err(EvalError::Unimplemented(format!(\"can't handle type: {:?}, {:?}\", ty, ty.sty))),\n         }\n     }\n \n@@ -1255,6 +1258,10 @@ fn report(tcx: TyCtxt, ecx: &EvalContext, e: EvalError) {\n     };\n     let mut err = tcx.sess.struct_span_err(span, &e.to_string());\n     for &Frame { def_id, substs, span, .. } in ecx.stack().iter().rev() {\n+        if tcx.def_key(def_id).disambiguated_data.data == DefPathData::ClosureExpr {\n+            err.span_note(span, \"inside call to closure\");\n+            continue;\n+        }\n         // FIXME(solson): Find a way to do this without this Display impl hack.\n         use rustc::util::ppaux;\n         use std::fmt;"}, {"sha": "bee05ecd7fae3f88b167bd913964da10532f1ac4", "filename": "tests/compile-fail/send-is-not-static-par-for.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/787feaad4b9d03805e2e6aa5a4266cbd5b140f85/tests%2Fcompile-fail%2Fsend-is-not-static-par-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/787feaad4b9d03805e2e6aa5a4266cbd5b140f85/tests%2Fcompile-fail%2Fsend-is-not-static-par-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fsend-is-not-static-par-for.rs?ref=787feaad4b9d03805e2e6aa5a4266cbd5b140f85", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//error-pattern: no mir for `std::panicking::panicking`\n+\n+use std::sync::Mutex;\n+\n+fn par_for<I, F>(iter: I, f: F)\n+    where I: Iterator,\n+          I::Item: Send,\n+          F: Fn(I::Item) + Sync\n+{\n+    for item in iter {\n+        f(item)\n+    }\n+}\n+\n+fn sum(x: &[i32]) {\n+    let sum_lengths = Mutex::new(0);\n+    par_for(x.windows(4), |x| {\n+        *sum_lengths.lock().unwrap() += x.len()\n+    });\n+\n+    assert_eq!(*sum_lengths.lock().unwrap(), (x.len() - 3) * 4);\n+}\n+\n+fn main() {\n+    let mut elements = [0; 20];\n+\n+    // iterators over references into this stack frame\n+    par_for(elements.iter_mut().enumerate(), |(i, x)| {\n+        *x = i as i32\n+    });\n+\n+    sum(&elements)\n+}"}]}