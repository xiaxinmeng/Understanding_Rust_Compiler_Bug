{"sha": "a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNWM4M2IyZWJjNGU4NWUzMmY3MjNlNzA4YTQwZGJkM2YxNjVjZDA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-22T07:16:39Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-23T23:59:38Z"}, "message": "parse: use `parse_item_common` in `parse_assoc_item_`.", "tree": {"sha": "8a5fe4fb32c7968db725c058c3991bcd4a3cdfd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a5fe4fb32c7968db725c058c3991bcd4a3cdfd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "html_url": "https://github.com/rust-lang/rust/commit/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6", "html_url": "https://github.com/rust-lang/rust/commit/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6"}], "stats": {"total": 954, "additions": 668, "deletions": 286}, "files": [{"sha": "e5f957a63de552e118f70fee74c94d8a3b3ef12c", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -865,15 +865,15 @@ pub fn parse_ast_fragment<'a>(\n         }\n         AstFragmentKind::TraitItems => {\n             let mut items = SmallVec::new();\n-            while this.token != token::Eof {\n-                items.push(this.parse_trait_item(&mut false)?);\n+            while let Some(item) = this.parse_trait_item()? {\n+                items.extend(item);\n             }\n             AstFragment::TraitItems(items)\n         }\n         AstFragmentKind::ImplItems => {\n             let mut items = SmallVec::new();\n-            while this.token != token::Eof {\n-                items.push(this.parse_impl_item(&mut false)?);\n+            while let Some(item) = this.parse_impl_item()? {\n+                items.extend(item);\n             }\n             AstFragment::ImplItems(items)\n         }"}, {"sha": "8c5add46bfcae5a1cf43def44175b54fba75c77f", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 72, "deletions": 144, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -5,12 +5,12 @@ use super::{FollowedByType, Parser, PathStyle};\n use crate::maybe_whole;\n \n use rustc_ast_pretty::pprust;\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, PResult, StashKey};\n+use rustc_errors::{struct_span_err, Applicability, PResult, StashKey};\n use rustc_span::source_map::{self, Span};\n use rustc_span::symbol::{kw, sym, Symbol};\n use syntax::ast::{self, AttrStyle, AttrVec, Attribute, Ident, DUMMY_NODE_ID};\n-use syntax::ast::{AssocItem, AssocItemKind, Item, ItemKind, UseTree, UseTreeKind};\n-use syntax::ast::{Async, Const, Defaultness, IsAuto, PathSegment, Unsafe};\n+use syntax::ast::{AssocItem, AssocItemKind, ForeignItemKind, Item, ItemKind};\n+use syntax::ast::{Async, Const, Defaultness, IsAuto, PathSegment, Unsafe, UseTree, UseTreeKind};\n use syntax::ast::{BindingMode, Block, FnDecl, FnSig, Mac, MacArgs, MacDelimiter, Param, SelfKind};\n use syntax::ast::{EnumDef, Generics, StructField, TraitRef, Ty, TyKind, Variant, VariantData};\n use syntax::ast::{FnHeader, ForeignItem, Mutability, Visibility, VisibilityKind};\n@@ -81,7 +81,7 @@ impl<'a> Parser<'a> {\n             Some(item)\n         });\n \n-        let item = self.parse_item_common(attrs, macros_allowed, attributes_allowed)?;\n+        let item = self.parse_item_common(attrs, macros_allowed, attributes_allowed, |_| true)?;\n         if let Some(ref item) = item {\n             self.error_on_illegal_default(item.defaultness);\n         }\n@@ -91,21 +91,25 @@ impl<'a> Parser<'a> {\n     fn parse_item_common(\n         &mut self,\n         mut attrs: Vec<Attribute>,\n-        macros_allowed: bool,\n-        attributes_allowed: bool,\n+        mac_allowed: bool,\n+        attrs_allowed: bool,\n+        req_name: ReqName,\n     ) -> PResult<'a, Option<Item>> {\n         let lo = self.token.span;\n         let vis = self.parse_visibility(FollowedByType::No)?;\n         let mut def = self.parse_defaultness();\n-        let kind = self.parse_item_kind(&mut attrs, macros_allowed, lo, &vis, &mut def)?;\n+        let kind = self.parse_item_kind(&mut attrs, mac_allowed, lo, &vis, &mut def, req_name)?;\n         if let Some((ident, kind)) = kind {\n-            return Ok(Some(self.mk_item(lo, ident, kind, vis, def, attrs)));\n+            let span = lo.to(self.prev_span);\n+            let id = DUMMY_NODE_ID;\n+            let item = Item { ident, attrs, id, kind, vis, defaultness: def, span, tokens: None };\n+            return Ok(Some(item));\n         }\n \n         // At this point, we have failed to parse an item.\n         self.error_on_unmatched_vis(&vis);\n         self.error_on_unmatched_defaultness(def);\n-        if !attributes_allowed {\n+        if !attrs_allowed {\n             self.recover_attrs_no_item(&attrs)?;\n         }\n         Ok(None)\n@@ -151,6 +155,7 @@ impl<'a> Parser<'a> {\n         lo: Span,\n         vis: &Visibility,\n         def: &mut Defaultness,\n+        req_name: ReqName,\n     ) -> PResult<'a, Option<ItemInfo>> {\n         let info = if self.eat_keyword(kw::Use) {\n             // USE ITEM\n@@ -159,7 +164,7 @@ impl<'a> Parser<'a> {\n             (Ident::invalid(), ItemKind::Use(P(tree)))\n         } else if self.check_fn_front_matter() {\n             // FUNCTION ITEM\n-            let (ident, sig, generics, body) = self.parse_fn(&mut false, attrs, |_| true)?;\n+            let (ident, sig, generics, body) = self.parse_fn(&mut false, attrs, req_name)?;\n             (ident, ItemKind::Fn(sig, generics, body))\n         } else if self.eat_keyword(kw::Extern) {\n             if self.eat_keyword(kw::Crate) {\n@@ -367,23 +372,6 @@ impl<'a> Parser<'a> {\n         self.token.is_keyword(kw::Async) && self.is_keyword_ahead(1, &[kw::Fn])\n     }\n \n-    /// Given this code `path(`, it seems like this is not\n-    /// setting the visibility of a macro invocation,\n-    /// but rather a mistyped method declaration.\n-    /// Create a diagnostic pointing out that `fn` is missing.\n-    ///\n-    /// ```\n-    /// x |     pub   path(&self) {\n-    ///   |         ^ missing `fn`, `type`, `const`, or `static`\n-    /// ```\n-    fn missing_nested_item_kind_err(&self, prev_span: Span) -> DiagnosticBuilder<'a> {\n-        let sp = prev_span.between(self.token.span);\n-        let expected_kinds = \"missing `fn`, `type`, `const`, or `static`\";\n-        let mut err = self.struct_span_err(sp, &format!(\"{} for item declaration\", expected_kinds));\n-        err.span_label(sp, expected_kinds);\n-        err\n-    }\n-\n     /// Parses an implementation item.\n     ///\n     /// ```\n@@ -457,8 +445,7 @@ impl<'a> Parser<'a> {\n \n         generics.where_clause = self.parse_where_clause()?;\n \n-        let impl_items =\n-            self.parse_item_list(attrs, |p, at_end| p.parse_impl_item(at_end).map(Some).map(Some))?;\n+        let impl_items = self.parse_item_list(attrs, |p| p.parse_impl_item())?;\n \n         let item_kind = match ty_second {\n             Some(ty_second) => {\n@@ -517,7 +504,7 @@ impl<'a> Parser<'a> {\n     fn parse_item_list<T>(\n         &mut self,\n         attrs: &mut Vec<Attribute>,\n-        mut parse_item: impl FnMut(&mut Parser<'a>, &mut bool) -> PResult<'a, Option<Option<T>>>,\n+        mut parse_item: impl FnMut(&mut Parser<'a>) -> PResult<'a, Option<Option<T>>>,\n     ) -> PResult<'a, Vec<T>> {\n         let open_brace_span = self.token.span;\n         self.expect(&token::OpenDelim(token::Brace))?;\n@@ -528,8 +515,7 @@ impl<'a> Parser<'a> {\n             if self.recover_doc_comment_before_brace() {\n                 continue;\n             }\n-            let mut at_end = false;\n-            match parse_item(self, &mut at_end) {\n+            match parse_item(self) {\n                 Ok(None) => {\n                     // We have to bail or we'll potentially never make progress.\n                     let non_item_span = self.token.span;\n@@ -543,11 +529,11 @@ impl<'a> Parser<'a> {\n                 }\n                 Ok(Some(item)) => items.extend(item),\n                 Err(mut err) => {\n-                    err.emit();\n-                    if !at_end {\n-                        self.consume_block(token::Brace, ConsumeClosingDelim::Yes);\n-                        break;\n-                    }\n+                    self.consume_block(token::Brace, ConsumeClosingDelim::Yes);\n+                    err.span_label(open_brace_span, \"while parsing this item list starting here\")\n+                        .span_label(self.prev_span, \"the item list ends here\")\n+                        .emit();\n+                    break;\n                 }\n             }\n         }\n@@ -644,103 +630,69 @@ impl<'a> Parser<'a> {\n         } else {\n             // It's a normal trait.\n             tps.where_clause = self.parse_where_clause()?;\n-            let items = self.parse_item_list(attrs, |p, at_end| {\n-                p.parse_trait_item(at_end).map(Some).map(Some)\n-            })?;\n+            let items = self.parse_item_list(attrs, |p| p.parse_trait_item())?;\n             Ok((ident, ItemKind::Trait(is_auto, unsafety, tps, bounds, items)))\n         }\n     }\n \n-    pub fn parse_impl_item(&mut self, at_end: &mut bool) -> PResult<'a, P<AssocItem>> {\n-        maybe_whole!(self, NtImplItem, |x| x);\n-        self.parse_assoc_item(at_end, |_| true)\n+    pub fn parse_impl_item(&mut self) -> PResult<'a, Option<Option<P<AssocItem>>>> {\n+        maybe_whole!(self, NtImplItem, |x| Some(Some(x)));\n+        self.parse_assoc_item(|_| true)\n     }\n \n-    pub fn parse_trait_item(&mut self, at_end: &mut bool) -> PResult<'a, P<AssocItem>> {\n-        maybe_whole!(self, NtTraitItem, |x| x);\n+    pub fn parse_trait_item(&mut self) -> PResult<'a, Option<Option<P<AssocItem>>>> {\n+        maybe_whole!(self, NtTraitItem, |x| Some(Some(x)));\n         // This is somewhat dubious; We don't want to allow\n         // param names to be left off if there is a definition...\n         //\n         // We don't allow param names to be left off in edition 2018.\n-        self.parse_assoc_item(at_end, |t| t.span.rust_2018())\n+        self.parse_assoc_item(|t| t.span.rust_2018())\n     }\n \n     /// Parses associated items.\n-    fn parse_assoc_item(\n-        &mut self,\n-        at_end: &mut bool,\n-        req_name: ReqName,\n-    ) -> PResult<'a, P<AssocItem>> {\n+    fn parse_assoc_item(&mut self, req_name: ReqName) -> PResult<'a, Option<Option<P<AssocItem>>>> {\n         let attrs = self.parse_outer_attributes()?;\n         let mut unclosed_delims = vec![];\n         let (mut item, tokens) = self.collect_tokens(|this| {\n-            let item = this.parse_assoc_item_(at_end, attrs, req_name);\n+            let item = this.parse_assoc_item_(attrs, req_name);\n             unclosed_delims.append(&mut this.unclosed_delims);\n             item\n         })?;\n         self.unclosed_delims.append(&mut unclosed_delims);\n         // See `parse_item` for why this clause is here.\n-        if !item.attrs.iter().any(|attr| attr.style == AttrStyle::Inner) {\n-            item.tokens = Some(tokens);\n-        }\n-        self.error_on_assoc_static(&item);\n-        Ok(P(item))\n-    }\n-\n-    fn error_on_assoc_static(&self, item: &AssocItem) {\n-        if let AssocItemKind::Static(..) = item.kind {\n-            self.struct_span_err(item.span, \"associated `static` items are not allowed\").emit();\n+        if let Some(Some(item)) = &mut item {\n+            if !item.attrs.iter().any(|attr| attr.style == AttrStyle::Inner) {\n+                item.tokens = Some(tokens);\n+            }\n         }\n+        Ok(item)\n     }\n \n     fn parse_assoc_item_(\n         &mut self,\n-        at_end: &mut bool,\n-        mut attrs: Vec<Attribute>,\n-        req_name: ReqName,\n-    ) -> PResult<'a, AssocItem> {\n-        let lo = self.token.span;\n-        let vis = self.parse_visibility(FollowedByType::No)?;\n-        let defaultness = self.parse_defaultness();\n-        let (ident, kind) = self.parse_assoc_item_kind(at_end, &mut attrs, req_name, &vis)?;\n-        let span = lo.to(self.prev_span);\n-        let id = DUMMY_NODE_ID;\n-        Ok(AssocItem { id, span, ident, attrs, vis, defaultness, kind, tokens: None })\n-    }\n-\n-    fn parse_assoc_item_kind(\n-        &mut self,\n-        at_end: &mut bool,\n-        attrs: &mut Vec<Attribute>,\n+        attrs: Vec<Attribute>,\n         req_name: ReqName,\n-        vis: &Visibility,\n-    ) -> PResult<'a, (Ident, AssocItemKind)> {\n-        if self.eat_keyword(kw::Type) {\n-            match self.parse_type_alias()? {\n-                (ident, ItemKind::TyAlias(a, b, c)) => Ok((ident, AssocItemKind::TyAlias(a, b, c))),\n-                _ => unreachable!(),\n-            }\n-        } else if self.check_fn_front_matter() {\n-            let (ident, sig, generics, body) = self.parse_fn(at_end, attrs, req_name)?;\n-            Ok((ident, AssocItemKind::Fn(sig, generics, body)))\n-        } else if self.is_static_global() {\n-            self.bump(); // `static`\n-            let mutbl = self.parse_mutability();\n-            let (ident, ty, expr) = self.parse_item_const_common(Some(mutbl))?;\n-            Ok((ident, AssocItemKind::Static(ty, mutbl, expr)))\n-        } else if self.eat_keyword(kw::Const) {\n-            let (ident, ty, expr) = self.parse_item_const_common(None)?;\n-            Ok((ident, AssocItemKind::Const(ty, expr)))\n-        } else if self.isnt_macro_invocation() {\n-            Err(self.missing_nested_item_kind_err(self.prev_span))\n-        } else if self.token.is_path_start() {\n-            let mac = self.parse_item_macro(&vis)?;\n-            *at_end = true;\n-            Ok((Ident::invalid(), AssocItemKind::Macro(mac)))\n-        } else {\n-            self.recover_attrs_no_item(attrs)?;\n-            self.unexpected()\n-        }\n+    ) -> PResult<'a, Option<Option<P<AssocItem>>>> {\n+        let it = self.parse_item_common(attrs, true, false, req_name)?;\n+        Ok(it.map(|Item { attrs, id, span, vis, ident, defaultness, kind, tokens }| {\n+            let kind = match kind {\n+                ItemKind::Mac(a) => AssocItemKind::Macro(a),\n+                ItemKind::Fn(a, b, c) => AssocItemKind::Fn(a, b, c),\n+                ItemKind::TyAlias(a, b, c) => AssocItemKind::TyAlias(a, b, c),\n+                ItemKind::Const(a, c) => AssocItemKind::Const(a, c),\n+                ItemKind::Static(a, _, b) => {\n+                    self.struct_span_err(span, \"associated `static` items are not allowed\").emit();\n+                    AssocItemKind::Const(a, b)\n+                }\n+                _ => {\n+                    let span = self.sess.source_map().def_span(span);\n+                    self.struct_span_err(span, \"item kind not supported in `trait` or `impl`\")\n+                        .emit();\n+                    return None;\n+                }\n+            };\n+            Some(P(Item { attrs, id, span, vis, ident, defaultness, kind, tokens }))\n+        }))\n     }\n \n     /// Parses a `type` alias with the following grammar:\n@@ -907,7 +859,7 @@ impl<'a> Parser<'a> {\n     /// ```\n     fn parse_item_foreign_mod(&mut self, attrs: &mut Vec<Attribute>) -> PResult<'a, ItemInfo> {\n         let abi = self.parse_abi(); // ABI?\n-        let items = self.parse_item_list(attrs, |p, _| p.parse_foreign_item())?;\n+        let items = self.parse_item_list(attrs, |p| p.parse_foreign_item())?;\n         let module = ast::ForeignMod { abi, items };\n         Ok((Ident::invalid(), ItemKind::ForeignMod(module)))\n     }\n@@ -917,17 +869,17 @@ impl<'a> Parser<'a> {\n         maybe_whole!(self, NtForeignItem, |item| Some(Some(item)));\n \n         let attrs = self.parse_outer_attributes()?;\n-        let it = self.parse_item_common(attrs, true, false)?;\n+        let it = self.parse_item_common(attrs, true, false, |_| true)?;\n         Ok(it.map(|Item { attrs, id, span, vis, ident, defaultness, kind, tokens }| {\n             self.error_on_illegal_default(defaultness);\n             let kind = match kind {\n-                ItemKind::Mac(a) => AssocItemKind::Macro(a),\n-                ItemKind::Fn(a, b, c) => AssocItemKind::Fn(a, b, c),\n-                ItemKind::TyAlias(a, b, c) => AssocItemKind::TyAlias(a, b, c),\n-                ItemKind::Static(a, b, c) => AssocItemKind::Static(a, b, c),\n+                ItemKind::Mac(a) => ForeignItemKind::Macro(a),\n+                ItemKind::Fn(a, b, c) => ForeignItemKind::Fn(a, b, c),\n+                ItemKind::TyAlias(a, b, c) => ForeignItemKind::TyAlias(a, b, c),\n+                ItemKind::Static(a, b, c) => ForeignItemKind::Static(a, b, c),\n                 ItemKind::Const(a, b) => {\n                     self.error_on_foreign_const(span, ident);\n-                    AssocItemKind::Static(a, Mutability::Not, b)\n+                    ForeignItemKind::Static(a, Mutability::Not, b)\n                 }\n                 _ => {\n                     let span = self.sess.source_map().def_span(span);\n@@ -989,22 +941,6 @@ impl<'a> Parser<'a> {\n     ///\n     /// When `m` is `\"const\"`, `$ident` may also be `\"_\"`.\n     fn parse_item_const(&mut self, m: Option<Mutability>) -> PResult<'a, ItemInfo> {\n-        let (id, ty, expr) = self.parse_item_const_common(m)?;\n-        let item = match m {\n-            Some(m) => ItemKind::Static(ty, m, expr),\n-            None => ItemKind::Const(ty, expr),\n-        };\n-        Ok((id, item))\n-    }\n-\n-    /// Parse `[\"const\" | (\"static\" \"mut\"?)] $ident \":\" $ty (= $expr)?` with\n-    /// `[\"const\" | (\"static\" \"mut\"?)]` already parsed and stored in `m`.\n-    ///\n-    /// When `m` is `\"const\"`, `$ident` may also be `\"_\"`.\n-    fn parse_item_const_common(\n-        &mut self,\n-        m: Option<Mutability>,\n-    ) -> PResult<'a, (Ident, P<Ty>, Option<P<ast::Expr>>)> {\n         let id = if m.is_none() { self.parse_ident_or_underscore() } else { self.parse_ident() }?;\n \n         // Parse the type of a `const` or `static mut?` item.\n@@ -1017,7 +953,12 @@ impl<'a> Parser<'a> {\n \n         let expr = if self.eat(&token::Eq) { Some(self.parse_expr()?) } else { None };\n         self.expect_semi()?;\n-        Ok((id, ty, expr))\n+\n+        let item = match m {\n+            Some(m) => ItemKind::Static(ty, m, expr),\n+            None => ItemKind::Const(ty, expr),\n+        };\n+        Ok((id, item))\n     }\n \n     /// We were supposed to parse `:` but the `:` was missing.\n@@ -1477,19 +1418,6 @@ impl<'a> Parser<'a> {\n         }\n         Ok(true)\n     }\n-\n-    fn mk_item<K>(\n-        &self,\n-        lo: Span,\n-        ident: Ident,\n-        kind: K,\n-        vis: Visibility,\n-        defaultness: Defaultness,\n-        attrs: Vec<Attribute>,\n-    ) -> Item<K> {\n-        let span = lo.to(self.prev_span);\n-        Item { ident, attrs, id: DUMMY_NODE_ID, kind, vis, defaultness, span, tokens: None }\n-    }\n }\n \n /// The parsing configuration used to parse a parameter list (see `parse_fn_params`)."}, {"sha": "c97b4ff0f497e72480422bc63929eeb6fe32715e", "filename": "src/test/ui/async-await/no-unsafe-async.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.stderr?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -1,8 +1,13 @@\n error: expected one of `extern` or `fn`, found keyword `async`\n   --> $DIR/no-unsafe-async.rs:7:12\n    |\n+LL | impl S {\n+   |        - while parsing this item list starting here\n+LL |     #[cfg(FALSE)]\n LL |     unsafe async fn g() {}\n    |            ^^^^^ expected one of `extern` or `fn`\n+LL | }\n+   | - the item list ends here\n \n error: expected one of `extern` or `fn`, found keyword `async`\n   --> $DIR/no-unsafe-async.rs:11:8"}, {"sha": "74f304d81a0f169323fb80362872580571666851", "filename": "src/test/ui/did_you_mean/issue-40006.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -1,28 +1,28 @@\n-impl dyn A { //~ ERROR missing\n+impl dyn A {\n     Y\n-}\n+} //~ ERROR expected one of `!` or `::`, found `}`\n \n struct S;\n \n-trait X { //~ ERROR missing\n-    X() {}\n+trait X {\n+    X() {} //~ ERROR expected one of `!` or `::`, found `(`\n     fn xxx() { ### }\n     L = M;\n     Z = { 2 + 3 };\n     ::Y ();\n }\n \n-trait A { //~ ERROR missing\n-    X() {}\n+trait A {\n+    X() {} //~ ERROR expected one of `!` or `::`, found `(`\n }\n trait B {\n     fn xxx() { ### } //~ ERROR expected\n }\n-trait C { //~ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n-    L = M;\n+trait C {\n+    L = M; //~ ERROR expected one of `!` or `::`, found `=`\n }\n-trait D { //~ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n-    Z = { 2 + 3 };\n+trait D {\n+    Z = { 2 + 3 }; //~ ERROR expected one of `!` or `::`, found `=`\n }\n trait E {\n     ::Y (); //~ ERROR expected one of"}, {"sha": "613d7eee59480869cfa38bb5600ba90d7a68d566", "filename": "src/test/ui/did_you_mean/issue-40006.stderr", "status": "modified", "additions": 60, "deletions": 32, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -1,60 +1,88 @@\n-error: missing `fn`, `type`, `const`, or `static` for item declaration\n-  --> $DIR/issue-40006.rs:1:13\n+error: expected one of `!` or `::`, found `}`\n+  --> $DIR/issue-40006.rs:3:1\n    |\n-LL |   impl dyn A {\n-   |  _____________^\n-LL | |     Y\n-   | |____^ missing `fn`, `type`, `const`, or `static`\n+LL | impl dyn A {\n+   |            - while parsing this item list starting here\n+LL |     Y\n+   |      - expected one of `!` or `::`\n+LL | }\n+   | ^\n+   | |\n+   | unexpected token\n+   | the item list ends here\n \n-error: missing `fn`, `type`, `const`, or `static` for item declaration\n-  --> $DIR/issue-40006.rs:7:10\n+error: expected one of `!` or `::`, found `(`\n+  --> $DIR/issue-40006.rs:8:6\n    |\n-LL |   trait X {\n-   |  __________^\n-LL | |     X() {}\n-   | |____^ missing `fn`, `type`, `const`, or `static`\n+LL | trait X {\n+   |         - while parsing this item list starting here\n+LL |     X() {}\n+   |      ^ expected one of `!` or `::`\n+...\n+LL | }\n+   | - the item list ends here\n \n-error: missing `fn`, `type`, `const`, or `static` for item declaration\n-  --> $DIR/issue-40006.rs:15:10\n+error: expected one of `!` or `::`, found `(`\n+  --> $DIR/issue-40006.rs:16:6\n    |\n-LL |   trait A {\n-   |  __________^\n-LL | |     X() {}\n-   | |____^ missing `fn`, `type`, `const`, or `static`\n+LL | trait A {\n+   |         - while parsing this item list starting here\n+LL |     X() {}\n+   |      ^ expected one of `!` or `::`\n+LL | }\n+   | - the item list ends here\n \n error: expected `[`, found `#`\n   --> $DIR/issue-40006.rs:19:17\n    |\n LL |     fn xxx() { ### }\n    |                 ^ expected `[`\n \n-error: missing `fn`, `type`, `const`, or `static` for item declaration\n-  --> $DIR/issue-40006.rs:21:10\n+error: expected one of `!` or `::`, found `=`\n+  --> $DIR/issue-40006.rs:22:7\n    |\n-LL |   trait C {\n-   |  __________^\n-LL | |     L = M;\n-   | |____^ missing `fn`, `type`, `const`, or `static`\n+LL | trait C {\n+   |         - while parsing this item list starting here\n+LL |     L = M;\n+   |       ^ expected one of `!` or `::`\n+LL | }\n+   | - the item list ends here\n \n-error: missing `fn`, `type`, `const`, or `static` for item declaration\n-  --> $DIR/issue-40006.rs:24:10\n+error: expected one of `!` or `::`, found `=`\n+  --> $DIR/issue-40006.rs:25:7\n    |\n-LL |   trait D {\n-   |  __________^\n-LL | |     Z = { 2 + 3 };\n-   | |____^ missing `fn`, `type`, `const`, or `static`\n+LL | trait D {\n+   |         - while parsing this item list starting here\n+LL |     Z = { 2 + 3 };\n+   |       ^ expected one of `!` or `::`\n+LL | }\n+   | - the item list ends here\n \n error: expected one of `!` or `::`, found `(`\n   --> $DIR/issue-40006.rs:28:9\n    |\n+LL | trait E {\n+   |         - while parsing this item list starting here\n LL |     ::Y ();\n    |         ^ expected one of `!` or `::`\n+LL | }\n+   | - the item list ends here\n \n-error: missing `fn`, `type`, `const`, or `static` for item declaration\n+error: missing `fn` for method definition\n   --> $DIR/issue-40006.rs:32:8\n    |\n+LL | impl S {\n+   |        - while parsing this item list starting here\n LL |     pub hello_method(&self) {\n-   |        ^ missing `fn`, `type`, `const`, or `static`\n+   |        ^\n+...\n+LL | }\n+   | - the item list ends here\n+   |\n+help: add `fn` here to parse `hello_method` as a public method\n+   |\n+LL |     pub fn hello_method(&self) {\n+   |         ^^\n \n error[E0599]: no method named `hello_method` found for struct `S` in the current scope\n   --> $DIR/issue-40006.rs:38:7"}, {"sha": "bd5708d81403776643aeeb4f416c30cff3ef8fe3", "filename": "src/test/ui/generic-associated-types/empty_generics.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.stderr?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -1,8 +1,13 @@\n error: expected one of `>`, `const`, identifier, or lifetime, found `,`\n   --> $DIR/empty_generics.rs:5:14\n    |\n+LL | trait Foo {\n+   |           - while parsing this item list starting here\n LL |     type Bar<,>;\n    |              ^ expected one of `>`, `const`, identifier, or lifetime\n+LL |\n+LL | }\n+   | - the item list ends here\n \n error: aborting due to previous error\n "}, {"sha": "a8db8e8b41ad20ebcbc2a93f4c963c8f12e957f7", "filename": "src/test/ui/issues/issue-58856-1.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.stderr?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -9,8 +9,14 @@ LL |     fn b(self>\n error: expected `;` or `{`, found `>`\n   --> $DIR/issue-58856-1.rs:3:14\n    |\n+LL | impl A {\n+   |        - while parsing this item list starting here\n+LL |\n LL |     fn b(self>\n    |              ^ expected `;` or `{`\n+...\n+LL | }\n+   | - the item list ends here\n \n error[E0412]: cannot find type `A` in this scope\n   --> $DIR/issue-58856-1.rs:1:6"}, {"sha": "9356d57b0e5f42aa3e25135aa99996a808e5de53", "filename": "src/test/ui/issues/issue-58856-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.rs?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -9,6 +9,6 @@ impl Howness for () {\n         Empty\n     }\n }\n-//~^ ERROR expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`,\n+//~^ ERROR non-item in item list\n \n fn main() {}"}, {"sha": "303b5eacc3296c277520d103960605b038b88b6c", "filename": "src/test/ui/issues/issue-58856-2.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.stderr?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -7,13 +7,17 @@ LL |     fn how_are_you(&self -> Empty {\n    |                   |     help: `)` may belong here\n    |                   unclosed delimiter\n \n-error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `static`, `type`, `unsafe`, `}`, or identifier, found `)`\n+error: non-item in item list\n   --> $DIR/issue-58856-2.rs:11:1\n    |\n-LL |     }\n-   |      - expected one of 12 possible tokens\n+LL | impl Howness for () {\n+   |                     - item list starts here\n+...\n LL | }\n-   | ^ unexpected token\n+   | ^\n+   | |\n+   | non-item starts here\n+   | item list ends here\n \n error[E0407]: method `how_are_you` is not a member of trait `Howness`\n   --> $DIR/issue-58856-2.rs:6:5"}, {"sha": "e89d78ee8a6a284826e6b53f918665129563a4a3", "filename": "src/test/ui/issues/issue-60075.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fissues%2Fissue-60075.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fissues%2Fissue-60075.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60075.rs?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -4,7 +4,8 @@ trait T {\n     fn qux() -> Option<usize> {\n         let _ = if true {\n         });\n-//~^ ERROR expected one of `async`\n-//~| ERROR expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n+//~^ ERROR non-item in item list\n+//~| ERROR mismatched closing delimiter: `)`\n+//~| ERROR expected one of `.`, `;`\n         Some(4)\n     }"}, {"sha": "e3b7f4ad420e8a200972dae53e79389a25440738", "filename": "src/test/ui/issues/issue-60075.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -4,14 +4,26 @@ error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n LL |         });\n    |          ^ expected one of `.`, `;`, `?`, `else`, or an operator\n \n-error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `static`, `type`, `unsafe`, `}`, or identifier, found `;`\n+error: non-item in item list\n   --> $DIR/issue-60075.rs:6:11\n    |\n+LL | trait T {\n+   |         - item list starts here\n+...\n+LL |         });\n+   |           ^ non-item starts here\n+...\n+LL |     }\n+   |     - item list ends here\n+\n+error: mismatched closing delimiter: `)`\n+  --> $DIR/issue-60075.rs:6:10\n+   |\n LL |     fn qux() -> Option<usize> {\n    |                               - unclosed delimiter\n LL |         let _ = if true {\n LL |         });\n-   |           ^ help: `}` may belong here\n+   |          ^ mismatched closing delimiter\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "da4015a4620ffddf4dbb72ff796328d21ac709d8", "filename": "src/test/ui/parser/assoc-static-semantic-fail.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.rs?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -10,10 +10,12 @@ impl S {\n     //~^ ERROR associated `static` items are not allowed\n     static IB: u8;\n     //~^ ERROR associated `static` items are not allowed\n+    //~| ERROR associated constant in `impl` without body\n     default static IC: u8 = 0;\n     //~^ ERROR associated `static` items are not allowed\n     pub(crate) default static ID: u8;\n     //~^ ERROR associated `static` items are not allowed\n+    //~| ERROR associated constant in `impl` without body\n }\n \n trait T {\n@@ -35,9 +37,11 @@ impl T for S {\n     //~^ ERROR associated `static` items are not allowed\n     static TB: u8;\n     //~^ ERROR associated `static` items are not allowed\n+    //~| ERROR associated constant in `impl` without body\n     default static TC: u8 = 0;\n     //~^ ERROR associated `static` items are not allowed\n     pub default static TD: u8;\n     //~^ ERROR associated `static` items are not allowed\n+    //~| ERROR associated constant in `impl` without body\n     //~| ERROR unnecessary visibility qualifier\n }"}, {"sha": "ca05b05e9b110298d5635641e06de19d7ebfeb51", "filename": "src/test/ui/parser/assoc-static-semantic-fail.stderr", "status": "modified", "additions": 47, "deletions": 15, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.stderr?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -11,93 +11,125 @@ LL |     static IB: u8;\n    |     ^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:13:5\n+  --> $DIR/assoc-static-semantic-fail.rs:14:5\n    |\n LL |     default static IC: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:15:5\n+  --> $DIR/assoc-static-semantic-fail.rs:16:5\n    |\n LL |     pub(crate) default static ID: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:20:5\n+  --> $DIR/assoc-static-semantic-fail.rs:22:5\n    |\n LL |     static TA: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:22:5\n+  --> $DIR/assoc-static-semantic-fail.rs:24:5\n    |\n LL |     static TB: u8;\n    |     ^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:24:5\n+  --> $DIR/assoc-static-semantic-fail.rs:26:5\n    |\n LL |     default static TC: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:27:5\n+  --> $DIR/assoc-static-semantic-fail.rs:29:5\n    |\n LL |     pub(crate) default static TD: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:34:5\n+  --> $DIR/assoc-static-semantic-fail.rs:36:5\n    |\n LL |     static TA: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:36:5\n+  --> $DIR/assoc-static-semantic-fail.rs:38:5\n    |\n LL |     static TB: u8;\n    |     ^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:38:5\n+  --> $DIR/assoc-static-semantic-fail.rs:41:5\n    |\n LL |     default static TC: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:40:5\n+  --> $DIR/assoc-static-semantic-fail.rs:43:5\n    |\n LL |     pub default static TD: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: associated constant in `impl` without body\n+  --> $DIR/assoc-static-semantic-fail.rs:11:5\n+   |\n+LL |     static IB: u8;\n+   |     ^^^^^^^^^^^^^-\n+   |                  |\n+   |                  help: provide a definition for the constant: `= <expr>;`\n+\n+error: associated constant in `impl` without body\n+  --> $DIR/assoc-static-semantic-fail.rs:16:5\n+   |\n+LL |     pub(crate) default static ID: u8;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                     |\n+   |                                     help: provide a definition for the constant: `= <expr>;`\n+\n error: `default` is only allowed on items in `impl` definitions\n-  --> $DIR/assoc-static-semantic-fail.rs:24:5\n+  --> $DIR/assoc-static-semantic-fail.rs:26:5\n    |\n LL |     default static TC: u8 = 0;\n    |     -------^^^^^^^^^^^^^^^^^^^\n    |     |\n    |     `default` because of this\n \n error: `default` is only allowed on items in `impl` definitions\n-  --> $DIR/assoc-static-semantic-fail.rs:27:5\n+  --> $DIR/assoc-static-semantic-fail.rs:29:5\n    |\n LL |     pub(crate) default static TD: u8;\n    |     ^^^^^^^^^^^-------^^^^^^^^^^^^^^^\n    |                |\n    |                `default` because of this\n \n error[E0449]: unnecessary visibility qualifier\n-  --> $DIR/assoc-static-semantic-fail.rs:27:5\n+  --> $DIR/assoc-static-semantic-fail.rs:29:5\n    |\n LL |     pub(crate) default static TD: u8;\n    |     ^^^^^^^^^^\n \n+error: associated constant in `impl` without body\n+  --> $DIR/assoc-static-semantic-fail.rs:38:5\n+   |\n+LL |     static TB: u8;\n+   |     ^^^^^^^^^^^^^-\n+   |                  |\n+   |                  help: provide a definition for the constant: `= <expr>;`\n+\n+error: associated constant in `impl` without body\n+  --> $DIR/assoc-static-semantic-fail.rs:43:5\n+   |\n+LL |     pub default static TD: u8;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                              |\n+   |                              help: provide a definition for the constant: `= <expr>;`\n+\n error[E0449]: unnecessary visibility qualifier\n-  --> $DIR/assoc-static-semantic-fail.rs:40:5\n+  --> $DIR/assoc-static-semantic-fail.rs:43:5\n    |\n LL |     pub default static TD: u8;\n    |     ^^^ `pub` not permitted here because it's implied\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 20 previous errors\n \n For more information about this error, try `rustc --explain E0449`."}, {"sha": "3862f5c379fc37dc668b67ec68d04d87d8123590", "filename": "src/test/ui/parser/attrs-after-extern-mod.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fattrs-after-extern-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fattrs-after-extern-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattrs-after-extern-mod.stderr?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -1,8 +1,12 @@\n error: expected item after attributes\n   --> $DIR/attrs-after-extern-mod.rs:6:5\n    |\n+LL | extern {\n+   |        - while parsing this item list starting here\n LL |     #[cfg(stage37)]\n    |     ^^^^^^^^^^^^^^^\n+LL | }\n+   | - the item list ends here\n \n error: aborting due to previous error\n "}, {"sha": "16bb7735c90c622ff9d51e04f2f2b023e6f4c44d", "filename": "src/test/ui/parser/default-on-wrong-item-kind.rs", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.rs?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -60,3 +60,73 @@ extern \"C\" {\n     default macro_rules! foo {} //~ ERROR item cannot be `default`\n     //~^ ERROR item kind not supported in `extern` block\n }\n+\n+#[cfg(FALSE)]\n+impl S {\n+    default extern crate foo;\n+    //~^ ERROR item kind not supported in `trait` or `impl`\n+    default use foo;\n+    //~^ ERROR item kind not supported in `trait` or `impl`\n+    default static foo: u8;\n+    //~^ ERROR associated `static` items are not allowed\n+    default const foo: u8;\n+    default fn foo();\n+    default mod foo {}\n+    //~^ ERROR item kind not supported in `trait` or `impl`\n+    default extern \"C\" {}\n+    //~^ ERROR item kind not supported in `trait` or `impl`\n+    default type foo = u8;\n+    default enum foo {}\n+    //~^ ERROR item kind not supported in `trait` or `impl`\n+    default struct foo {}\n+    //~^ ERROR item kind not supported in `trait` or `impl`\n+    default union foo {}\n+    //~^ ERROR item kind not supported in `trait` or `impl`\n+    default trait foo {}\n+    //~^ ERROR item kind not supported in `trait` or `impl`\n+    default trait foo = Ord;\n+    //~^ ERROR item kind not supported in `trait` or `impl`\n+    default impl foo {}\n+    //~^ ERROR item kind not supported in `trait` or `impl`\n+    default!();\n+    default::foo::bar!();\n+    default macro foo {}\n+    //~^ ERROR item kind not supported in `trait` or `impl`\n+    default macro_rules! foo {}\n+    //~^ ERROR item kind not supported in `trait` or `impl`\n+}\n+\n+#[cfg(FALSE)]\n+trait T {\n+    default extern crate foo;\n+    //~^ ERROR item kind not supported in `trait` or `impl`\n+    default use foo;\n+    //~^ ERROR item kind not supported in `trait` or `impl`\n+    default static foo: u8;\n+    //~^ ERROR associated `static` items are not allowed\n+    default const foo: u8;\n+    default fn foo();\n+    default mod foo {}\n+    //~^ ERROR item kind not supported in `trait` or `impl`\n+    default extern \"C\" {}\n+    //~^ ERROR item kind not supported in `trait` or `impl`\n+    default type foo = u8;\n+    default enum foo {}\n+    //~^ ERROR item kind not supported in `trait` or `impl`\n+    default struct foo {}\n+    //~^ ERROR item kind not supported in `trait` or `impl`\n+    default union foo {}\n+    //~^ ERROR item kind not supported in `trait` or `impl`\n+    default trait foo {}\n+    //~^ ERROR item kind not supported in `trait` or `impl`\n+    default trait foo = Ord;\n+    //~^ ERROR item kind not supported in `trait` or `impl`\n+    default impl foo {}\n+    //~^ ERROR item kind not supported in `trait` or `impl`\n+    default!();\n+    default::foo::bar!();\n+    default macro foo {}\n+    //~^ ERROR item kind not supported in `trait` or `impl`\n+    default macro_rules! foo {}\n+    //~^ ERROR item kind not supported in `trait` or `impl`\n+}"}, {"sha": "1812c45eba6a98936d1a2ffdd3dc07ac2c255676", "filename": "src/test/ui/parser/default-on-wrong-item-kind.stderr", "status": "modified", "additions": 157, "deletions": 1, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.stderr?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -320,5 +320,161 @@ error: item kind not supported in `extern` block\n LL |     default macro_rules! foo {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 43 previous errors\n+error: item kind not supported in `trait` or `impl`\n+  --> $DIR/default-on-wrong-item-kind.rs:66:5\n+   |\n+LL |     default extern crate foo;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: item kind not supported in `trait` or `impl`\n+  --> $DIR/default-on-wrong-item-kind.rs:68:5\n+   |\n+LL |     default use foo;\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: associated `static` items are not allowed\n+  --> $DIR/default-on-wrong-item-kind.rs:70:5\n+   |\n+LL |     default static foo: u8;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: item kind not supported in `trait` or `impl`\n+  --> $DIR/default-on-wrong-item-kind.rs:74:5\n+   |\n+LL |     default mod foo {}\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: item kind not supported in `trait` or `impl`\n+  --> $DIR/default-on-wrong-item-kind.rs:76:5\n+   |\n+LL |     default extern \"C\" {}\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: item kind not supported in `trait` or `impl`\n+  --> $DIR/default-on-wrong-item-kind.rs:79:5\n+   |\n+LL |     default enum foo {}\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: item kind not supported in `trait` or `impl`\n+  --> $DIR/default-on-wrong-item-kind.rs:81:5\n+   |\n+LL |     default struct foo {}\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: item kind not supported in `trait` or `impl`\n+  --> $DIR/default-on-wrong-item-kind.rs:83:5\n+   |\n+LL |     default union foo {}\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: item kind not supported in `trait` or `impl`\n+  --> $DIR/default-on-wrong-item-kind.rs:85:5\n+   |\n+LL |     default trait foo {}\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: item kind not supported in `trait` or `impl`\n+  --> $DIR/default-on-wrong-item-kind.rs:87:5\n+   |\n+LL |     default trait foo = Ord;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: item kind not supported in `trait` or `impl`\n+  --> $DIR/default-on-wrong-item-kind.rs:89:5\n+   |\n+LL |     default impl foo {}\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: item kind not supported in `trait` or `impl`\n+  --> $DIR/default-on-wrong-item-kind.rs:93:5\n+   |\n+LL |     default macro foo {}\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: item kind not supported in `trait` or `impl`\n+  --> $DIR/default-on-wrong-item-kind.rs:95:5\n+   |\n+LL |     default macro_rules! foo {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: item kind not supported in `trait` or `impl`\n+  --> $DIR/default-on-wrong-item-kind.rs:101:5\n+   |\n+LL |     default extern crate foo;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: item kind not supported in `trait` or `impl`\n+  --> $DIR/default-on-wrong-item-kind.rs:103:5\n+   |\n+LL |     default use foo;\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: associated `static` items are not allowed\n+  --> $DIR/default-on-wrong-item-kind.rs:105:5\n+   |\n+LL |     default static foo: u8;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: item kind not supported in `trait` or `impl`\n+  --> $DIR/default-on-wrong-item-kind.rs:109:5\n+   |\n+LL |     default mod foo {}\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: item kind not supported in `trait` or `impl`\n+  --> $DIR/default-on-wrong-item-kind.rs:111:5\n+   |\n+LL |     default extern \"C\" {}\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: item kind not supported in `trait` or `impl`\n+  --> $DIR/default-on-wrong-item-kind.rs:114:5\n+   |\n+LL |     default enum foo {}\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: item kind not supported in `trait` or `impl`\n+  --> $DIR/default-on-wrong-item-kind.rs:116:5\n+   |\n+LL |     default struct foo {}\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: item kind not supported in `trait` or `impl`\n+  --> $DIR/default-on-wrong-item-kind.rs:118:5\n+   |\n+LL |     default union foo {}\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: item kind not supported in `trait` or `impl`\n+  --> $DIR/default-on-wrong-item-kind.rs:120:5\n+   |\n+LL |     default trait foo {}\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: item kind not supported in `trait` or `impl`\n+  --> $DIR/default-on-wrong-item-kind.rs:122:5\n+   |\n+LL |     default trait foo = Ord;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: item kind not supported in `trait` or `impl`\n+  --> $DIR/default-on-wrong-item-kind.rs:124:5\n+   |\n+LL |     default impl foo {}\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: item kind not supported in `trait` or `impl`\n+  --> $DIR/default-on-wrong-item-kind.rs:128:5\n+   |\n+LL |     default macro foo {}\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: item kind not supported in `trait` or `impl`\n+  --> $DIR/default-on-wrong-item-kind.rs:130:5\n+   |\n+LL |     default macro_rules! foo {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 69 previous errors\n "}, {"sha": "bca6f5654dbfbc310e3560c31f8211a675818c5a", "filename": "src/test/ui/parser/default-unmatched-assoc.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-assoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-assoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-assoc.rs?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -0,0 +1,16 @@\n+fn main() {}\n+\n+trait Foo {\n+    default!(); //~ ERROR cannot find macro `default` in this scope\n+    default do\n+    //~^ ERROR unmatched `default`\n+    //~| ERROR non-item in item list\n+}\n+\n+struct S;\n+impl S {\n+    default!(); //~ ERROR cannot find macro `default` in this scope\n+    default do\n+    //~^ ERROR unmatched `default`\n+    //~| ERROR non-item in item list\n+}"}, {"sha": "f3877f2ca6d519cf308695f77a178cfda73db6b5", "filename": "src/test/ui/parser/default-unmatched-assoc.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-assoc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-assoc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-assoc.stderr?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -0,0 +1,50 @@\n+error: unmatched `default`\n+  --> $DIR/default-unmatched-assoc.rs:5:5\n+   |\n+LL |     default do\n+   |     ^^^^^^^ the unmatched `default`\n+\n+error: non-item in item list\n+  --> $DIR/default-unmatched-assoc.rs:5:13\n+   |\n+LL | trait Foo {\n+   |           - item list starts here\n+LL |     default!();\n+LL |     default do\n+   |             ^^ non-item starts here\n+...\n+LL | }\n+   | - item list ends here\n+\n+error: unmatched `default`\n+  --> $DIR/default-unmatched-assoc.rs:13:5\n+   |\n+LL |     default do\n+   |     ^^^^^^^ the unmatched `default`\n+\n+error: non-item in item list\n+  --> $DIR/default-unmatched-assoc.rs:13:13\n+   |\n+LL | impl S {\n+   |        - item list starts here\n+LL |     default!();\n+LL |     default do\n+   |             ^^ non-item starts here\n+...\n+LL | }\n+   | - item list ends here\n+\n+error: cannot find macro `default` in this scope\n+  --> $DIR/default-unmatched-assoc.rs:12:5\n+   |\n+LL |     default!();\n+   |     ^^^^^^^\n+\n+error: cannot find macro `default` in this scope\n+  --> $DIR/default-unmatched-assoc.rs:4:5\n+   |\n+LL |     default!();\n+   |     ^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "bd9ed0f452470a936a5823e3680d3f41b111cbfe", "filename": "src/test/ui/parser/default.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault.rs?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -20,7 +20,8 @@ impl Foo for u16 {\n \n impl Foo for u32 { //~ ERROR not all trait items implemented, missing: `foo`\n     default pub fn foo<T: Default>() -> T { T::default() }\n-    //~^ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n+    //~^ ERROR unmatched `default`\n+    //~| ERROR non-item in item list\n }\n \n fn main() {}"}, {"sha": "fbf8101c36a730906c13c18a73a5981f93b66620", "filename": "src/test/ui/parser/default.stderr", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -1,8 +1,19 @@\n-error: missing `fn`, `type`, `const`, or `static` for item declaration\n-  --> $DIR/default.rs:22:12\n+error: unmatched `default`\n+  --> $DIR/default.rs:22:5\n    |\n LL |     default pub fn foo<T: Default>() -> T { T::default() }\n-   |            ^ missing `fn`, `type`, `const`, or `static`\n+   |     ^^^^^^^ the unmatched `default`\n+\n+error: non-item in item list\n+  --> $DIR/default.rs:22:13\n+   |\n+LL | impl Foo for u32 {\n+   |                  - item list starts here\n+LL |     default pub fn foo<T: Default>() -> T { T::default() }\n+   |             ^^^ non-item starts here\n+...\n+LL | }\n+   | - item list ends here\n \n error[E0449]: unnecessary visibility qualifier\n   --> $DIR/default.rs:16:5\n@@ -19,7 +30,7 @@ LL |     fn foo<T: Default>() -> T;\n LL | impl Foo for u32 {\n    | ^^^^^^^^^^^^^^^^ missing `foo` in implementation\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0046, E0449.\n For more information about an error, try `rustc --explain E0046`."}, {"sha": "0151cb4235b0da8740ac190eb7b983d4df6e7241", "filename": "src/test/ui/parser/extern-no-fn.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fextern-no-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fextern-no-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-no-fn.stderr?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -1,8 +1,12 @@\n error: expected one of `!` or `::`, found `(`\n   --> $DIR/extern-no-fn.rs:2:6\n    |\n+LL | extern {\n+   |        - while parsing this item list starting here\n LL |     f();\n    |      ^ expected one of `!` or `::`\n+LL | }\n+   | - the item list ends here\n \n error: aborting due to previous error\n "}, {"sha": "46eb320a172f2f89edb7a97706e6afea4b15fc32", "filename": "src/test/ui/parser/issue-19398.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fissue-19398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fissue-19398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-19398.rs?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -1,6 +1,6 @@\n trait T {\n-    //~^ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n     extern \"Rust\" unsafe fn foo();\n+    //~^ ERROR expected `{`, found keyword `unsafe`\n }\n \n fn main() {}"}, {"sha": "1da00960adfe4cc59c1939e408acf217605d397b", "filename": "src/test/ui/parser/issue-19398.stderr", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fissue-19398.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fissue-19398.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-19398.stderr?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -1,11 +1,13 @@\n-error: missing `fn`, `type`, `const`, or `static` for item declaration\n-  --> $DIR/issue-19398.rs:1:10\n+error: expected `{`, found keyword `unsafe`\n+  --> $DIR/issue-19398.rs:2:19\n    |\n-LL |   trait T {\n-   |  __________^\n-LL | |\n-LL | |     extern \"Rust\" unsafe fn foo();\n-   | |____^ missing `fn`, `type`, `const`, or `static`\n+LL | trait T {\n+   |         - while parsing this item list starting here\n+LL |     extern \"Rust\" unsafe fn foo();\n+   |                   ^^^^^^ expected `{`\n+LL |\n+LL | }\n+   | - the item list ends here\n \n error: aborting due to previous error\n "}, {"sha": "12b18bbc59416a7ad6cd22964694f2346a25cb80", "filename": "src/test/ui/parser/issue-20711-2.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fissue-20711-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fissue-20711-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-20711-2.stderr?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -1,8 +1,14 @@\n error: expected item after attributes\n   --> $DIR/issue-20711-2.rs:6:5\n    |\n+LL | impl Foo {\n+   |          - while parsing this item list starting here\n+...\n LL |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | }\n+   | - the item list ends here\n \n error: aborting due to previous error\n "}, {"sha": "4af4b22bee292e499d508c1fb2f478122ccb1ad3", "filename": "src/test/ui/parser/issue-20711.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fissue-20711.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fissue-20711.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-20711.stderr?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -1,8 +1,13 @@\n error: expected item after attributes\n   --> $DIR/issue-20711.rs:4:5\n    |\n+LL | impl Foo {\n+   |          - while parsing this item list starting here\n LL |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | }\n+   | - the item list ends here\n \n error: aborting due to previous error\n "}, {"sha": "bf5fdb1f3c6b048195b1e2d76f9e733c8bec0d89", "filename": "src/test/ui/parser/issue-21153.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fissue-21153.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fissue-21153.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-21153.rs?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -1,6 +1,6 @@\n trait MyTrait<T>: Iterator {\n-    //~^ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n     Item = T;\n+    //~^ ERROR expected one of `!` or `::`, found `=`\n }\n \n fn main() {}"}, {"sha": "cbfa9ded3c3939ec4096242b235f6ac06a67ce70", "filename": "src/test/ui/parser/issue-21153.stderr", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fissue-21153.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fissue-21153.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-21153.stderr?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -1,11 +1,13 @@\n-error: missing `fn`, `type`, `const`, or `static` for item declaration\n-  --> $DIR/issue-21153.rs:1:29\n+error: expected one of `!` or `::`, found `=`\n+  --> $DIR/issue-21153.rs:2:10\n    |\n-LL |   trait MyTrait<T>: Iterator {\n-   |  _____________________________^\n-LL | |\n-LL | |     Item = T;\n-   | |____^ missing `fn`, `type`, `const`, or `static`\n+LL | trait MyTrait<T>: Iterator {\n+   |                            - while parsing this item list starting here\n+LL |     Item = T;\n+   |          ^ expected one of `!` or `::`\n+LL |\n+LL | }\n+   | - the item list ends here\n \n error: aborting due to previous error\n "}, {"sha": "7515369aaa0b9da6262dae51a4beeb8c154c1feb", "filename": "src/test/ui/parser/issue-32446.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fissue-32446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fissue-32446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-32446.stderr?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -1,8 +1,11 @@\n-error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `static`, `type`, `unsafe`, `}`, or identifier, found `...`\n+error: non-item in item list\n   --> $DIR/issue-32446.rs:4:11\n    |\n LL | trait T { ... }\n-   |           ^^^ expected one of 12 possible tokens\n+   |         - ^^^ - item list ends here\n+   |         | |\n+   |         | non-item starts here\n+   |         item list starts here\n \n error: aborting due to previous error\n "}, {"sha": "bed4805e7cea9ee89074b5fc2f66a9ef2fb27eed", "filename": "src/test/ui/parser/issue-41155.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fissue-41155.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fissue-41155.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-41155.rs?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -1,7 +1,7 @@\n struct S;\n \n impl S {\n-    pub\n-} //~ ERROR expected one of\n+    pub //~ ERROR unmatched visibility `pub`\n+} //~ ERROR non-item in item list\n \n fn main() {}"}, {"sha": "a9c1035f4d85d5cf07198ae740d55eb13595ee11", "filename": "src/test/ui/parser/issue-41155.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fissue-41155.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fissue-41155.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-41155.stderr?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -1,10 +1,22 @@\n-error: expected one of `(`, `async`, `const`, `default`, `extern`, `fn`, `static`, `type`, `unsafe`, or identifier, found `}`\n+error: unmatched visibility `pub`\n+  --> $DIR/issue-41155.rs:4:5\n+   |\n+LL |     pub\n+   |     ^^^ the unmatched visibility\n+   |\n+   = help: you likely meant to define an item, e.g., `pub fn foo() {}`\n+\n+error: non-item in item list\n   --> $DIR/issue-41155.rs:5:1\n    |\n+LL | impl S {\n+   |        - item list starts here\n LL |     pub\n-   |        - expected one of 10 possible tokens\n LL | }\n-   | ^ unexpected token\n+   | ^\n+   | |\n+   | non-item starts here\n+   | item list ends here\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}, {"sha": "a98042089466435485cbb380bd2fac82386d16d6", "filename": "src/test/ui/parser/issue-6610.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fissue-6610.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fissue-6610.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-6610.stderr?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -2,7 +2,11 @@ error: expected `;` or `{`, found `}`\n   --> $DIR/issue-6610.rs:1:20\n    |\n LL | trait Foo { fn a() }\n-   |                    ^ expected `;` or `{`\n+   |           -        ^\n+   |           |        |\n+   |           |        expected `;` or `{`\n+   |           |        the item list ends here\n+   |           while parsing this item list starting here\n \n error: aborting due to previous error\n "}, {"sha": "97fb564bf647958f7d37926e23d388a7beecc84f", "filename": "src/test/ui/parser/macro/trait-non-item-macros.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.rs?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -1,10 +1,13 @@\n macro_rules! bah {\n-    ($a:expr) => ($a)\n-    //~^ ERROR expected one of `async`\n+    ($a:expr) => {\n+        $a\n+    }; //~^ ERROR macro expansion ignores token `2` and any following\n }\n \n-trait bar {\n+trait Bar {\n     bah!(2);\n }\n \n-fn main() {}\n+fn main() {\n+    let _recovery_witness: () = 0; //~ ERROR mismatched types\n+}"}, {"sha": "35e5bfe62f5b4da8bcea1d83fe19e1990db184f0", "filename": "src/test/ui/parser/macro/trait-non-item-macros.stderr", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -1,13 +1,22 @@\n-error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `static`, `type`, `unsafe`, or identifier, found `2`\n-  --> $DIR/trait-non-item-macros.rs:2:19\n+error: macro expansion ignores token `2` and any following\n+  --> $DIR/trait-non-item-macros.rs:3:9\n    |\n-LL |     ($a:expr) => ($a)\n-   |                   ^^ expected one of 11 possible tokens\n+LL |         $a\n+   |         ^^\n ...\n LL |     bah!(2);\n-   |     -------- in this macro invocation\n+   |     -------- caused by the macro expansion here\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: the usage of `bah!` is likely invalid in trait item context\n \n-error: aborting due to previous error\n+error[E0308]: mismatched types\n+  --> $DIR/trait-non-item-macros.rs:12:33\n+   |\n+LL |     let _recovery_witness: () = 0;\n+   |                            --   ^ expected `()`, found integer\n+   |                            |\n+   |                            expected due to this\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "d85255328f7f4059c094bed40342b1ed6bd109d1", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-impl-trait.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.rs?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -3,12 +3,11 @@ fn main() {}\n impl T for () { //~ ERROR cannot find trait `T` in this scope\n \n fn foo(&self) {}\n-//~^ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n \n-trait T {\n+trait T { //~ ERROR item kind not supported in `trait` or `impl`\n     fn foo(&self);\n }\n \n-pub(crate) struct Bar<T>();\n+pub(crate) struct Bar<T>(); //~ ERROR item kind not supported in `trait` or `impl`\n \n //~ ERROR this file contains an unclosed delimiter"}, {"sha": "2b72c06c9c7d36e40ffbb0ed964d16c8d95e43ec", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-impl-trait.stderr", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.stderr?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -1,28 +1,30 @@\n error: this file contains an unclosed delimiter\n-  --> $DIR/missing-close-brace-in-impl-trait.rs:14:52\n+  --> $DIR/missing-close-brace-in-impl-trait.rs:13:52\n    |\n LL | impl T for () {\n    |               - unclosed delimiter\n ...\n LL |\n    |                                                    ^\n \n-error: missing `fn`, `type`, `const`, or `static` for item declaration\n-  --> $DIR/missing-close-brace-in-impl-trait.rs:5:17\n+error: item kind not supported in `trait` or `impl`\n+  --> $DIR/missing-close-brace-in-impl-trait.rs:7:1\n    |\n-LL |   fn foo(&self) {}\n-   |  _________________^\n-LL | |\n-LL | |\n-LL | | trait T {\n-   | |_ missing `fn`, `type`, `const`, or `static`\n+LL | trait T {\n+   | ^^^^^^^\n+\n+error: item kind not supported in `trait` or `impl`\n+  --> $DIR/missing-close-brace-in-impl-trait.rs:11:1\n+   |\n+LL | pub(crate) struct Bar<T>();\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0405]: cannot find trait `T` in this scope\n   --> $DIR/missing-close-brace-in-impl-trait.rs:3:6\n    |\n LL | impl T for () {\n    |      ^ not found in this scope\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0405`."}, {"sha": "b2515b17ff3388e8c81d3338d2198101fc241504", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.rs?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -1,11 +1,11 @@\n trait T {\n-//~^ ERROR `main` function not found in crate `missing_close_brace_in_trait`\n     fn foo(&self);\n \n pub(crate) struct Bar<T>();\n-//~^ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n+//~^ ERROR item kind not supported in `trait` or `impl`\n \n impl T for Bar<usize> {\n+//~^ ERROR item kind not supported in `trait` or `impl`\n fn foo(&self) {}\n }\n "}, {"sha": "89bf29165109f22b651ecb63565455370a71702e", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-trait.stderr", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -7,24 +7,17 @@ LL | trait T {\n LL | fn main() {}\n    |                                                                 ^\n \n-error: missing `fn`, `type`, `const`, or `static` for item declaration\n-  --> $DIR/missing-close-brace-in-trait.rs:5:11\n+error: item kind not supported in `trait` or `impl`\n+  --> $DIR/missing-close-brace-in-trait.rs:4:1\n    |\n LL | pub(crate) struct Bar<T>();\n-   |           ^ missing `fn`, `type`, `const`, or `static`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0601]: `main` function not found in crate `missing_close_brace_in_trait`\n-  --> $DIR/missing-close-brace-in-trait.rs:1:1\n+error: item kind not supported in `trait` or `impl`\n+  --> $DIR/missing-close-brace-in-trait.rs:7:1\n    |\n-LL | / trait T {\n-LL | |\n-LL | |     fn foo(&self);\n-LL | |\n-...  |\n-LL | |\n-LL | | fn main() {}\n-   | |________________________________________________________________^ consider adding a `main` function to `$DIR/missing-close-brace-in-trait.rs`\n+LL | impl T for Bar<usize> {\n+   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "04e34dc16a84209f06e2cd9ec5abfef665fabdce", "filename": "src/test/ui/parser/removed-syntax-static-fn.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.stderr?ref=a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "patch": "@@ -7,8 +7,13 @@ LL |     static fn f() {}\n error: expected one of `:`, `;`, or `=`, found `f`\n   --> $DIR/removed-syntax-static-fn.rs:4:15\n    |\n+LL | impl S {\n+   |        - while parsing this item list starting here\n LL |     static fn f() {}\n    |               ^ expected one of `:`, `;`, or `=`\n+...\n+LL | }\n+   | - the item list ends here\n \n error: missing type for `static` item\n   --> $DIR/removed-syntax-static-fn.rs:4:12"}]}