{"sha": "bb4cdf8ec034dca5c056ec9295f38062e5b7e871", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNGNkZjhlYzAzNGRjYTVjMDU2ZWM5Mjk1ZjM4MDYyZTViN2U4NzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-14T17:36:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-14T17:36:06Z"}, "message": "Auto merge of #82399 - petrochenkov:modin2, r=Aaron1011\n\nexpand: Resolve and expand inner attributes on out-of-line modules\n\nFixes https://github.com/rust-lang/rust/issues/81661\nr? `@Aaron1011`", "tree": {"sha": "7d21e3243a3b0bb85daacf47e3d7cb6493bcbfb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d21e3243a3b0bb85daacf47e3d7cb6493bcbfb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb4cdf8ec034dca5c056ec9295f38062e5b7e871", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb4cdf8ec034dca5c056ec9295f38062e5b7e871", "html_url": "https://github.com/rust-lang/rust/commit/bb4cdf8ec034dca5c056ec9295f38062e5b7e871", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb4cdf8ec034dca5c056ec9295f38062e5b7e871/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9320b121b5b20d2201c9f5ec40fb3c241fcac6f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9320b121b5b20d2201c9f5ec40fb3c241fcac6f0", "html_url": "https://github.com/rust-lang/rust/commit/9320b121b5b20d2201c9f5ec40fb3c241fcac6f0"}, {"sha": "a4cc3cae04525c7fd6edc8a4301a4034c82fdfad", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4cc3cae04525c7fd6edc8a4301a4034c82fdfad", "html_url": "https://github.com/rust-lang/rust/commit/a4cc3cae04525c7fd6edc8a4301a4034c82fdfad"}], "stats": {"total": 262, "additions": 230, "deletions": 32}, "files": [{"sha": "3c278a6a491a95f779038384d31a3d7dab79d9c5", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb4cdf8ec034dca5c056ec9295f38062e5b7e871/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/bb4cdf8ec034dca5c056ec9295f38062e5b7e871/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=bb4cdf8ec034dca5c056ec9295f38062e5b7e871", "patch": "@@ -4774,7 +4774,7 @@ version = \"0.11.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"f301af10236f6df4160f7c3f04eec6dbc70ace82d23326abad5edee88801c6b6\"\n dependencies = [\n- \"semver-parser 0.10.1\",\n+ \"semver-parser 0.10.2\",\n  \"serde\",\n ]\n \n@@ -4786,9 +4786,9 @@ checksum = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n \n [[package]]\n name = \"semver-parser\"\n-version = \"0.10.1\"\n+version = \"0.10.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"42ef146c2ad5e5f4b037cd6ce2ebb775401729b19a82040c1beac9d36c7d1428\"\n+checksum = \"00b0bef5b7f9e0df16536d3961cfb6e84331c065b4066afb39768d0e319411f7\"\n dependencies = [\n  \"pest\",\n ]"}, {"sha": "a934bdd79801b3c082bba8781f311f00d78934a4", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4cdf8ec034dca5c056ec9295f38062e5b7e871/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4cdf8ec034dca5c056ec9295f38062e5b7e871/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=bb4cdf8ec034dca5c056ec9295f38062e5b7e871", "patch": "@@ -2297,7 +2297,7 @@ impl FnRetTy {\n     }\n }\n \n-#[derive(Clone, PartialEq, Encodable, Decodable, Debug)]\n+#[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug)]\n pub enum Inline {\n     Yes,\n     No,"}, {"sha": "a1e5979f62dcdd3734dbba257d9d287f16152388", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bb4cdf8ec034dca5c056ec9295f38062e5b7e871/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4cdf8ec034dca5c056ec9295f38062e5b7e871/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=bb4cdf8ec034dca5c056ec9295f38062e5b7e871", "patch": "@@ -1282,16 +1282,13 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                 let (file_path, dir_path, dir_ownership) = match mod_kind {\n                     ModKind::Loaded(_, inline, _) => {\n                         // Inline `mod foo { ... }`, but we still need to push directories.\n-                        assert!(\n-                            *inline == Inline::Yes,\n-                            \"`mod` item is loaded from a file for the second time\"\n-                        );\n                         let (dir_path, dir_ownership) = mod_dir_path(\n                             &self.cx.sess,\n                             ident,\n                             &attrs,\n                             &self.cx.current_expansion.module,\n                             self.cx.current_expansion.dir_ownership,\n+                            *inline,\n                         );\n                         item.attrs = attrs;\n                         (None, dir_path, dir_ownership)\n@@ -1322,10 +1319,19 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                         item.attrs = attrs;\n                         if item.attrs.len() > old_attrs_len {\n                             // If we loaded an out-of-line module and added some inner attributes,\n-                            // then we need to re-configure it.\n-                            // FIXME: Attributes also need to be recollected\n-                            // for resolution and expansion.\n+                            // then we need to re-configure it and re-collect attributes for\n+                            // resolution and expansion.\n                             item = configure!(self, item);\n+\n+                            if let Some(attr) = self.take_first_attr(&mut item) {\n+                                return self\n+                                    .collect_attr(\n+                                        attr,\n+                                        Annotatable::Item(item),\n+                                        AstFragmentKind::Items,\n+                                    )\n+                                    .make_items();\n+                            }\n                         }\n                         (Some(file_path), dir_path, dir_ownership)\n                     }"}, {"sha": "c5ce0baaa8f6a13d33eeca78cc2cb02252ccf5af", "filename": "compiler/rustc_expand/src/module.rs", "status": "modified", "additions": 39, "deletions": 19, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/bb4cdf8ec034dca5c056ec9295f38062e5b7e871/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4cdf8ec034dca5c056ec9295f38062e5b7e871/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs?ref=bb4cdf8ec034dca5c056ec9295f38062e5b7e871", "patch": "@@ -1,6 +1,6 @@\n use crate::base::ModuleData;\n use rustc_ast::ptr::P;\n-use rustc_ast::{token, Attribute, Item};\n+use rustc_ast::{token, Attribute, Inline, Item};\n use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_parse::new_parser_from_file;\n use rustc_session::parse::ParseSess;\n@@ -83,29 +83,49 @@ crate fn mod_dir_path(\n     attrs: &[Attribute],\n     module: &ModuleData,\n     mut dir_ownership: DirOwnership,\n+    inline: Inline,\n ) -> (PathBuf, DirOwnership) {\n-    if let Some(file_path) = mod_file_path_from_attr(sess, attrs, &module.dir_path) {\n-        // For inline modules file path from `#[path]` is actually the directory path\n-        // for historical reasons, so we don't pop the last segment here.\n-        return (file_path, DirOwnership::Owned { relative: None });\n-    }\n+    match inline {\n+        Inline::Yes => {\n+            if let Some(file_path) = mod_file_path_from_attr(sess, attrs, &module.dir_path) {\n+                // For inline modules file path from `#[path]` is actually the directory path\n+                // for historical reasons, so we don't pop the last segment here.\n+                return (file_path, DirOwnership::Owned { relative: None });\n+            }\n \n-    // We have to push on the current module name in the case of relative\n-    // paths in order to ensure that any additional module paths from inline\n-    // `mod x { ... }` come after the relative extension.\n-    //\n-    // For example, a `mod z { ... }` inside `x/y.rs` should set the current\n-    // directory path to `/x/y/z`, not `/x/z` with a relative offset of `y`.\n-    let mut dir_path = module.dir_path.clone();\n-    if let DirOwnership::Owned { relative } = &mut dir_ownership {\n-        if let Some(ident) = relative.take() {\n-            // Remove the relative offset.\n+            // We have to push on the current module name in the case of relative\n+            // paths in order to ensure that any additional module paths from inline\n+            // `mod x { ... }` come after the relative extension.\n+            //\n+            // For example, a `mod z { ... }` inside `x/y.rs` should set the current\n+            // directory path to `/x/y/z`, not `/x/z` with a relative offset of `y`.\n+            let mut dir_path = module.dir_path.clone();\n+            if let DirOwnership::Owned { relative } = &mut dir_ownership {\n+                if let Some(ident) = relative.take() {\n+                    // Remove the relative offset.\n+                    dir_path.push(&*ident.as_str());\n+                }\n+            }\n             dir_path.push(&*ident.as_str());\n+\n+            (dir_path, dir_ownership)\n         }\n-    }\n-    dir_path.push(&*ident.as_str());\n+        Inline::No => {\n+            // FIXME: This is a subset of `parse_external_mod` without actual parsing,\n+            // check whether the logic for unloaded, loaded and inline modules can be unified.\n+            let file_path = mod_file_path(sess, ident, &attrs, &module.dir_path, dir_ownership)\n+                .map(|mp| {\n+                    dir_ownership = mp.dir_ownership;\n+                    mp.file_path\n+                })\n+                .unwrap_or_default();\n+\n+            // Extract the directory path for submodules of the module.\n+            let dir_path = file_path.parent().unwrap_or(&file_path).to_owned();\n \n-    (dir_path, dir_ownership)\n+            (dir_path, dir_ownership)\n+        }\n+    }\n }\n \n fn mod_file_path<'a>("}, {"sha": "2e47d4cecee4cb6865940ee19ba930be56d55a47", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bb4cdf8ec034dca5c056ec9295f38062e5b7e871/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4cdf8ec034dca5c056ec9295f38062e5b7e871/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=bb4cdf8ec034dca5c056ec9295f38062e5b7e871", "patch": "@@ -6,14 +6,15 @@ use crate::Namespace::*;\n use crate::{AmbiguityError, AmbiguityErrorMisc, AmbiguityKind, BuiltinMacroState, Determinacy};\n use crate::{CrateLint, ParentScope, ResolutionError, Resolver, Scope, ScopeSet, Weak};\n use crate::{ModuleKind, ModuleOrUniformRoot, NameBinding, PathResult, Segment, ToNameBinding};\n-use rustc_ast::{self as ast, NodeId};\n+use rustc_ast::{self as ast, Inline, ItemKind, ModKind, NodeId};\n use rustc_ast_lowering::ResolverAstLowering;\n use rustc_ast_pretty::pprust;\n use rustc_attr::StabilityLevel;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::ptr_key::PtrKey;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::struct_span_err;\n+use rustc_expand::base::Annotatable;\n use rustc_expand::base::{Indeterminate, ResolverExpand, SyntaxExtension, SyntaxExtensionKind};\n use rustc_expand::compile_declarative_macro;\n use rustc_expand::expand::{AstFragment, Invocation, InvocationKind};\n@@ -153,6 +154,26 @@ crate fn registered_attrs_and_tools(\n     (registered_attrs, registered_tools)\n }\n \n+// Some feature gates for inner attributes are reported as lints for backward compatibility.\n+fn soft_custom_inner_attributes_gate(path: &ast::Path, invoc: &Invocation) -> bool {\n+    match &path.segments[..] {\n+        // `#![test]`\n+        [seg] if seg.ident.name == sym::test => return true,\n+        // `#![rustfmt::skip]` on out-of-line modules\n+        [seg1, seg2] if seg1.ident.name == sym::rustfmt && seg2.ident.name == sym::skip => {\n+            if let InvocationKind::Attr { item, .. } = &invoc.kind {\n+                if let Annotatable::Item(item) = item {\n+                    if let ItemKind::Mod(_, ModKind::Loaded(_, Inline::No, _)) = item.kind {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+        _ => {}\n+    }\n+    false\n+}\n+\n impl<'a> ResolverExpand for Resolver<'a> {\n     fn next_node_id(&mut self) -> NodeId {\n         self.next_node_id()\n@@ -267,6 +288,7 @@ impl<'a> ResolverExpand for Resolver<'a> {\n             parent_scope,\n             node_id,\n             force,\n+            soft_custom_inner_attributes_gate(path, invoc),\n         )?;\n \n         let span = invoc.span();\n@@ -440,6 +462,7 @@ impl<'a> Resolver<'a> {\n         parent_scope: &ParentScope<'a>,\n         node_id: NodeId,\n         force: bool,\n+        soft_custom_inner_attributes_gate: bool,\n     ) -> Result<(Lrc<SyntaxExtension>, Res), Indeterminate> {\n         let (ext, res) = match self.resolve_macro_path(path, Some(kind), parent_scope, true, force)\n         {\n@@ -507,7 +530,7 @@ impl<'a> Resolver<'a> {\n                 Res::NonMacroAttr(..) => \"custom inner attributes are unstable\",\n                 _ => unreachable!(),\n             };\n-            if path == &sym::test {\n+            if soft_custom_inner_attributes_gate {\n                 self.session.parse_sess.buffer_lint(SOFT_UNSTABLE, path.span, node_id, msg);\n             } else {\n                 feature_err(&self.session.parse_sess, sym::custom_inner_attributes, path.span, msg)"}, {"sha": "4fcb8b6c1b7abfce0df2d8b5a6a8c9f7177b0d79", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4cdf8ec034dca5c056ec9295f38062e5b7e871/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4cdf8ec034dca5c056ec9295f38062e5b7e871/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=bb4cdf8ec034dca5c056ec9295f38062e5b7e871", "patch": "@@ -1111,6 +1111,7 @@ symbols! {\n         size_of,\n         size_of_val,\n         sized,\n+        skip,\n         slice,\n         slice_alloc,\n         slice_patterns,"}, {"sha": "af5a6462e8a750d020b94a340fa47489f79ec7bb", "filename": "src/test/ui/conditional-compilation/inner-cfg-non-inline-mod.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb4cdf8ec034dca5c056ec9295f38062e5b7e871/src%2Ftest%2Fui%2Fconditional-compilation%2Finner-cfg-non-inline-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4cdf8ec034dca5c056ec9295f38062e5b7e871/src%2Ftest%2Fui%2Fconditional-compilation%2Finner-cfg-non-inline-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Finner-cfg-non-inline-mod.rs?ref=bb4cdf8ec034dca5c056ec9295f38062e5b7e871", "patch": "@@ -0,0 +1,7 @@\n+// check-pass\n+\n+mod module_with_cfg;\n+\n+mod module_with_cfg {} // Ok, the module above is configured away by an inner attribute.\n+\n+fn main() {}"}, {"sha": "56c4baadf22b4bb3d9643fd146fd587cb48a9a22", "filename": "src/test/ui/conditional-compilation/module_with_cfg.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb4cdf8ec034dca5c056ec9295f38062e5b7e871/src%2Ftest%2Fui%2Fconditional-compilation%2Fmodule_with_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4cdf8ec034dca5c056ec9295f38062e5b7e871/src%2Ftest%2Fui%2Fconditional-compilation%2Fmodule_with_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fmodule_with_cfg.rs?ref=bb4cdf8ec034dca5c056ec9295f38062e5b7e871", "patch": "@@ -0,0 +1,3 @@\n+// ignore-test\n+\n+#![cfg_attr(all(), cfg(FALSE))]"}, {"sha": "30c2666df470c70bfddc7a8a2361daf3334e5008", "filename": "src/test/ui/proc-macro/inner-attr-non-inline-mod.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bb4cdf8ec034dca5c056ec9295f38062e5b7e871/src%2Ftest%2Fui%2Fproc-macro%2Finner-attr-non-inline-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4cdf8ec034dca5c056ec9295f38062e5b7e871/src%2Ftest%2Fui%2Fproc-macro%2Finner-attr-non-inline-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finner-attr-non-inline-mod.rs?ref=bb4cdf8ec034dca5c056ec9295f38062e5b7e871", "patch": "@@ -0,0 +1,18 @@\n+// compile-flags: -Z span-debug\n+// error-pattern:custom inner attributes are unstable\n+// error-pattern:inner macro attributes are unstable\n+// error-pattern:this was previously accepted\n+// aux-build:test-macros.rs\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+#[deny(unused_attributes)]\n+mod module_with_attrs;\n+//~^ ERROR non-inline modules in proc macro input are unstable\n+//~| ERROR custom inner attributes are unstable\n+\n+fn main() {}"}, {"sha": "4286896dfc39246ca52993a1ee97128b5f701f8b", "filename": "src/test/ui/proc-macro/inner-attr-non-inline-mod.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bb4cdf8ec034dca5c056ec9295f38062e5b7e871/src%2Ftest%2Fui%2Fproc-macro%2Finner-attr-non-inline-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4cdf8ec034dca5c056ec9295f38062e5b7e871/src%2Ftest%2Fui%2Fproc-macro%2Finner-attr-non-inline-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finner-attr-non-inline-mod.stderr?ref=bb4cdf8ec034dca5c056ec9295f38062e5b7e871", "patch": "@@ -0,0 +1,40 @@\n+error[E0658]: inner macro attributes are unstable\n+  --> $DIR/module_with_attrs.rs:4:4\n+   |\n+LL | #![print_attr]\n+   |    ^^^^^^^^^^\n+   |\n+   = note: see issue #54726 <https://github.com/rust-lang/rust/issues/54726> for more information\n+   = help: add `#![feature(custom_inner_attributes)]` to the crate attributes to enable\n+\n+error[E0658]: non-inline modules in proc macro input are unstable\n+  --> $DIR/inner-attr-non-inline-mod.rs:14:1\n+   |\n+LL | mod module_with_attrs;\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #54727 <https://github.com/rust-lang/rust/issues/54727> for more information\n+   = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n+\n+error[E0658]: custom inner attributes are unstable\n+  --> $DIR/inner-attr-non-inline-mod.rs:14:1\n+   |\n+LL | mod module_with_attrs;\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #54726 <https://github.com/rust-lang/rust/issues/54726> for more information\n+   = help: add `#![feature(custom_inner_attributes)]` to the crate attributes to enable\n+\n+error: custom inner attributes are unstable\n+  --> $DIR/module_with_attrs.rs:3:4\n+   |\n+LL | #![rustfmt::skip]\n+   |    ^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(soft_unstable)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #64266 <https://github.com/rust-lang/rust/issues/64266>\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "dbef342ef241d63640657f1e25e89cffa70fa55e", "filename": "src/test/ui/proc-macro/inner-attr-non-inline-mod.stdout", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/bb4cdf8ec034dca5c056ec9295f38062e5b7e871/src%2Ftest%2Fui%2Fproc-macro%2Finner-attr-non-inline-mod.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/bb4cdf8ec034dca5c056ec9295f38062e5b7e871/src%2Ftest%2Fui%2Fproc-macro%2Finner-attr-non-inline-mod.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finner-attr-non-inline-mod.stdout?ref=bb4cdf8ec034dca5c056ec9295f38062e5b7e871", "patch": "@@ -0,0 +1,76 @@\n+PRINT-ATTR INPUT (DISPLAY): #[deny(unused_attributes)] mod module_with_attrs { # ! [rustfmt :: skip] }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/inner-attr-non-inline-mod.rs:14:1: 14:23 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"deny\",\n+                span: $DIR/inner-attr-non-inline-mod.rs:14:1: 14:23 (#0),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"unused_attributes\",\n+                        span: $DIR/inner-attr-non-inline-mod.rs:14:1: 14:23 (#0),\n+                    },\n+                ],\n+                span: $DIR/inner-attr-non-inline-mod.rs:14:1: 14:23 (#0),\n+            },\n+        ],\n+        span: $DIR/inner-attr-non-inline-mod.rs:14:1: 14:23 (#0),\n+    },\n+    Ident {\n+        ident: \"mod\",\n+        span: $DIR/inner-attr-non-inline-mod.rs:14:1: 14:23 (#0),\n+    },\n+    Ident {\n+        ident: \"module_with_attrs\",\n+        span: $DIR/inner-attr-non-inline-mod.rs:14:1: 14:23 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '#',\n+                spacing: Joint,\n+                span: $DIR/inner-attr-non-inline-mod.rs:14:1: 14:23 (#0),\n+            },\n+            Punct {\n+                ch: '!',\n+                spacing: Alone,\n+                span: $DIR/inner-attr-non-inline-mod.rs:14:1: 14:23 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"rustfmt\",\n+                        span: $DIR/inner-attr-non-inline-mod.rs:14:1: 14:23 (#0),\n+                    },\n+                    Punct {\n+                        ch: ':',\n+                        spacing: Joint,\n+                        span: $DIR/inner-attr-non-inline-mod.rs:14:1: 14:23 (#0),\n+                    },\n+                    Punct {\n+                        ch: ':',\n+                        spacing: Alone,\n+                        span: $DIR/inner-attr-non-inline-mod.rs:14:1: 14:23 (#0),\n+                    },\n+                    Ident {\n+                        ident: \"skip\",\n+                        span: $DIR/inner-attr-non-inline-mod.rs:14:1: 14:23 (#0),\n+                    },\n+                ],\n+                span: $DIR/inner-attr-non-inline-mod.rs:14:1: 14:23 (#0),\n+            },\n+        ],\n+        span: $DIR/inner-attr-non-inline-mod.rs:14:1: 14:23 (#0),\n+    },\n+]"}, {"sha": "63e66a62ac3801d4efa67c718b8207612967724f", "filename": "src/test/ui/proc-macro/module_with_attrs.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4cdf8ec034dca5c056ec9295f38062e5b7e871/src%2Ftest%2Fui%2Fproc-macro%2Fmodule_with_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4cdf8ec034dca5c056ec9295f38062e5b7e871/src%2Ftest%2Fui%2Fproc-macro%2Fmodule_with_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmodule_with_attrs.rs?ref=bb4cdf8ec034dca5c056ec9295f38062e5b7e871", "patch": "@@ -0,0 +1,4 @@\n+// ignore-test\n+\n+#![rustfmt::skip]\n+#![print_attr]"}]}