{"sha": "0ec4b065243f38f711a55563bff7d0c66eea1b4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlYzRiMDY1MjQzZjM4ZjcxMWE1NTU2M2JmZjdkMGM2NmVlYTFiNGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-16T22:16:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-16T22:16:48Z"}, "message": "Auto merge of #72178 - tmiasko:inliner-lifetimes, r=nikic\n\nConsistently use LLVM lifetime markers during codegen\n\nEnsure that inliner inserts lifetime markers if they have been emitted during\ncodegen. Otherwise if allocas from inlined functions are merged together,\nlifetime markers from one function might invalidate load & stores performed\nby the other one.\n\nFixes #72154.", "tree": {"sha": "0f0ee4d5dc2dea274c840a515f39d4348fa82cc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f0ee4d5dc2dea274c840a515f39d4348fa82cc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ec4b065243f38f711a55563bff7d0c66eea1b4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ec4b065243f38f711a55563bff7d0c66eea1b4a", "html_url": "https://github.com/rust-lang/rust/commit/0ec4b065243f38f711a55563bff7d0c66eea1b4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ec4b065243f38f711a55563bff7d0c66eea1b4a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd927a5b0f29342f7ad919fb52ca29510d2e7362", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd927a5b0f29342f7ad919fb52ca29510d2e7362", "html_url": "https://github.com/rust-lang/rust/commit/dd927a5b0f29342f7ad919fb52ca29510d2e7362"}, {"sha": "bbb63d4554b03feee481bc799a04f183abaff1d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbb63d4554b03feee481bc799a04f183abaff1d4", "html_url": "https://github.com/rust-lang/rust/commit/bbb63d4554b03feee481bc799a04f183abaff1d4"}], "stats": {"total": 63, "additions": 50, "deletions": 13}, "files": [{"sha": "a08235b304dc50c6948afd9c047aadb62d866393", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0ec4b065243f38f711a55563bff7d0c66eea1b4a/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec4b065243f38f711a55563bff7d0c66eea1b4a/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=0ec4b065243f38f711a55563bff7d0c66eea1b4a", "patch": "@@ -394,6 +394,7 @@ pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n         config.vectorize_slp,\n         config.vectorize_loop,\n         config.no_builtins,\n+        config.emit_lifetime_markers,\n         sanitizer_options.as_ref(),\n         pgo_gen_path.as_ref().map_or(std::ptr::null(), |s| s.as_ptr()),\n         pgo_use_path.as_ref().map_or(std::ptr::null(), |s| s.as_ptr()),\n@@ -934,10 +935,10 @@ pub unsafe fn with_llvm_pmb(\n             llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 25);\n         }\n         (llvm::CodeGenOptLevel::None, ..) => {\n-            llvm::LLVMRustAddAlwaysInlinePass(builder, false);\n+            llvm::LLVMRustAddAlwaysInlinePass(builder, config.emit_lifetime_markers);\n         }\n         (llvm::CodeGenOptLevel::Less, ..) => {\n-            llvm::LLVMRustAddAlwaysInlinePass(builder, true);\n+            llvm::LLVMRustAddAlwaysInlinePass(builder, config.emit_lifetime_markers);\n         }\n         (llvm::CodeGenOptLevel::Default, ..) => {\n             llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 225);"}, {"sha": "f5ae9824df8946b108527ec757d59a5bc840c261", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0ec4b065243f38f711a55563bff7d0c66eea1b4a/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec4b065243f38f711a55563bff7d0c66eea1b4a/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=0ec4b065243f38f711a55563bff7d0c66eea1b4a", "patch": "@@ -18,7 +18,6 @@ use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::layout::TyAndLayout;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n-use rustc_session::config::{self, Sanitizer};\n use rustc_target::abi::{self, Align, Size};\n use rustc_target::spec::{HasTargetSpec, Target};\n use std::borrow::Cow;\n@@ -1243,14 +1242,7 @@ impl Builder<'a, 'll, 'tcx> {\n             return;\n         }\n \n-        let opts = &self.cx.sess().opts;\n-        let emit = match opts.debugging_opts.sanitizer {\n-            // Some sanitizer use lifetime intrinsics. When they are in use,\n-            // emit lifetime intrinsics regardless of optimization level.\n-            Some(Sanitizer::Address | Sanitizer::Memory) => true,\n-            _ => opts.optimize != config::OptLevel::No,\n-        };\n-        if !emit {\n+        if !self.cx().sess().emit_lifetime_markers() {\n             return;\n         }\n "}, {"sha": "713cb2324f7f7c53a76248b7ca31730837ec0cb2", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ec4b065243f38f711a55563bff7d0c66eea1b4a/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec4b065243f38f711a55563bff7d0c66eea1b4a/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=0ec4b065243f38f711a55563bff7d0c66eea1b4a", "patch": "@@ -2000,6 +2000,7 @@ extern \"C\" {\n         SLPVectorize: bool,\n         LoopVectorize: bool,\n         DisableSimplifyLibCalls: bool,\n+        EmitLifetimeMarkers: bool,\n         SanitizerOptions: Option<&SanitizerOptions>,\n         PGOGenPath: *const c_char,\n         PGOUsePath: *const c_char,"}, {"sha": "53dfe7cb7499803b5ac46c6e0448a17aea2e8ef7", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ec4b065243f38f711a55563bff7d0c66eea1b4a/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec4b065243f38f711a55563bff7d0c66eea1b4a/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=0ec4b065243f38f711a55563bff7d0c66eea1b4a", "patch": "@@ -110,6 +110,7 @@ pub struct ModuleConfig {\n     pub merge_functions: bool,\n     pub inline_threshold: Option<usize>,\n     pub new_llvm_pass_manager: bool,\n+    pub emit_lifetime_markers: bool,\n }\n \n impl ModuleConfig {\n@@ -244,6 +245,7 @@ impl ModuleConfig {\n \n             inline_threshold: sess.opts.cg.inline_threshold,\n             new_llvm_pass_manager: sess.opts.debugging_opts.new_llvm_pass_manager,\n+            emit_lifetime_markers: sess.emit_lifetime_markers(),\n         }\n     }\n "}, {"sha": "cb5bd37442a7ed9fd6ce69f4ade58319381ea3a6", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0ec4b065243f38f711a55563bff7d0c66eea1b4a/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec4b065243f38f711a55563bff7d0c66eea1b4a/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=0ec4b065243f38f711a55563bff7d0c66eea1b4a", "patch": "@@ -936,6 +936,16 @@ impl Session {\n         // then try to skip it where possible.\n         dbg_opts.plt.unwrap_or(needs_plt || !full_relro)\n     }\n+\n+    /// Checks if LLVM lifetime markers should be emitted.\n+    pub fn emit_lifetime_markers(&self) -> bool {\n+        match self.opts.debugging_opts.sanitizer {\n+            // AddressSanitizer uses lifetimes to detect use after scope bugs.\n+            // MemorySanitizer uses lifetimes to detect use of uninitialized stack variables.\n+            Some(Sanitizer::Address | Sanitizer::Memory) => true,\n+            _ => self.opts.optimize != config::OptLevel::No,\n+        }\n+    }\n }\n \n pub fn build_session("}, {"sha": "b17fa57c5c1efb15a3e47be5218cac2f58396832", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ec4b065243f38f711a55563bff7d0c66eea1b4a/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0ec4b065243f38f711a55563bff7d0c66eea1b4a/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=0ec4b065243f38f711a55563bff7d0c66eea1b4a", "patch": "@@ -717,7 +717,7 @@ LLVMRustOptimizeWithNewPassManager(\n     LLVMRustOptStage OptStage,\n     bool NoPrepopulatePasses, bool VerifyIR, bool UseThinLTOBuffers,\n     bool MergeFunctions, bool UnrollLoops, bool SLPVectorize, bool LoopVectorize,\n-    bool DisableSimplifyLibCalls,\n+    bool DisableSimplifyLibCalls, bool EmitLifetimeMarkers,\n     LLVMRustSanitizerOptions *SanitizerOptions,\n     const char *PGOGenPath, const char *PGOUsePath,\n     void* LlvmSelfProfiler,\n@@ -853,7 +853,7 @@ LLVMRustOptimizeWithNewPassManager(\n         MPM.addPass(createModuleToFunctionPassAdaptor(std::move(FPM)));\n       }\n \n-      MPM.addPass(AlwaysInlinerPass(/*InsertLifetimeIntrinsics=*/false));\n+      MPM.addPass(AlwaysInlinerPass(EmitLifetimeMarkers));\n \n #if LLVM_VERSION_GE(10, 0)\n       if (PGOOpt) {"}, {"sha": "458f99143b6488ada45e038b0ba973d7f260ca15", "filename": "src/test/ui/sanitize/issue-72154-lifetime-markers.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0ec4b065243f38f711a55563bff7d0c66eea1b4a/src%2Ftest%2Fui%2Fsanitize%2Fissue-72154-lifetime-markers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec4b065243f38f711a55563bff7d0c66eea1b4a/src%2Ftest%2Fui%2Fsanitize%2Fissue-72154-lifetime-markers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fissue-72154-lifetime-markers.rs?ref=0ec4b065243f38f711a55563bff7d0c66eea1b4a", "patch": "@@ -0,0 +1,31 @@\n+// Regression test for issue 72154, where the use of AddressSanitizer enabled\n+// emission of lifetime markers during codegen, while at the same time asking\n+// always inliner pass not to insert them.  This eventually lead to a\n+// miscompilation which was subsequently detected by AddressSanitizer as UB.\n+//\n+// needs-sanitizer-support\n+// only-x86_64\n+//\n+// compile-flags: -Copt-level=0 -Zsanitizer=address\n+// run-pass\n+\n+pub struct Wrap {\n+    pub t: [usize; 1]\n+}\n+\n+impl Wrap {\n+    #[inline(always)]\n+    pub fn new(t: [usize; 1]) -> Self {\n+        Wrap { t }\n+    }\n+}\n+\n+#[inline(always)]\n+pub fn assume_init() -> [usize; 1] {\n+    [1234]\n+}\n+\n+fn main() {\n+    let x: [usize; 1] = assume_init();\n+    Wrap::new(x);\n+}"}]}