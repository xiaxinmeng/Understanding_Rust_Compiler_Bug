{"sha": "e29dbdb139fb3a35902b4b3d11a92d45861d210b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyOWRiZGIxMzlmYjNhMzU5MDJiNGIzZDExYTkyZDQ1ODYxZDIxMGI=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-17T22:38:01Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-17T22:38:01Z"}, "message": "Simplify the command execution", "tree": {"sha": "1f011539525108a10f36fdcde151d294c78db1c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f011539525108a10f36fdcde151d294c78db1c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e29dbdb139fb3a35902b4b3d11a92d45861d210b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e29dbdb139fb3a35902b4b3d11a92d45861d210b", "html_url": "https://github.com/rust-lang/rust/commit/e29dbdb139fb3a35902b4b3d11a92d45861d210b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e29dbdb139fb3a35902b4b3d11a92d45861d210b/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67d30312d0741d3bcc45d794dc8c333f1a7d9ed8", "url": "https://api.github.com/repos/rust-lang/rust/commits/67d30312d0741d3bcc45d794dc8c333f1a7d9ed8", "html_url": "https://github.com/rust-lang/rust/commit/67d30312d0741d3bcc45d794dc8c333f1a7d9ed8"}], "stats": {"total": 62, "additions": 28, "deletions": 34}, "files": [{"sha": "db779a2d26a211a977ff2a6e2012ec7906397e79", "filename": "crates/ra_project_model/src/sysroot.rs", "status": "modified", "additions": 28, "deletions": 34, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/e29dbdb139fb3a35902b4b3d11a92d45861d210b/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29dbdb139fb3a35902b4b3d11a92d45861d210b/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs?ref=e29dbdb139fb3a35902b4b3d11a92d45861d210b", "patch": "@@ -4,7 +4,7 @@ use anyhow::{bail, Context, Result};\n use std::{\n     env,\n     path::{Path, PathBuf},\n-    process::Command,\n+    process::{Command, Output},\n };\n \n use ra_arena::{impl_arena_id, Arena, RawId};\n@@ -79,49 +79,43 @@ impl Sysroot {\n     }\n }\n \n-fn get_or_install_rust_src(cargo_toml: &Path) -> Result<PathBuf> {\n-    fn try_install_rust_src(cargo_toml: &Path) -> Result<()> {\n-        let rustup_output = Command::new(\"rustup\")\n-            .current_dir(cargo_toml.parent().unwrap())\n-            .args(&[\"component\", \"add\", \"rust-src\"])\n-            .output()\n-            .context(\"rustup component add rust-src failed\")?;\n-        if !rustup_output.status.success() {\n-            match rustup_output.status.code() {\n-                Some(code) => bail!(\n-                    \"failed to install rust-src: rustup component add rust-src exited with code {}\",\n-                    code\n-                ),\n-                None => bail!(\n-                    \"failed to install rust-src: rustup component add rust-src terminated by signal\"\n-                ),\n-            };\n-        }\n-        Ok(())\n-    }\n+fn create_command_text(program: &str, args: &[&str]) -> String {\n+    format!(\"{} {}\", program, args.join(\" \"))\n+}\n \n-    if let Ok(path) = env::var(\"RUST_SRC_PATH\") {\n-        return Ok(path.into());\n-    }\n-    let rustc_output = Command::new(\"rustc\")\n+fn run_command_in_cargo_dir(cargo_toml: &Path, program: &str, args: &[&str]) -> Result<Output> {\n+    let output = Command::new(program)\n         .current_dir(cargo_toml.parent().unwrap())\n-        .args(&[\"--print\", \"sysroot\"])\n+        .args(args)\n         .output()\n-        .context(\"rustc --print sysroot failed\")?;\n-    if !rustc_output.status.success() {\n-        match rustc_output.status.code() {\n-            Some(code) => {\n-                bail!(\"failed to locate sysroot: rustc --print sysroot exited with code {}\", code)\n-            }\n-            None => bail!(\"failed to locate sysroot: rustc --print sysroot terminated by signal\"),\n+        .context(format!(\"{} failed\", create_command_text(program, args)))?;\n+    if !output.status.success() {\n+        match output.status.code() {\n+            Some(code) => bail!(\n+                \"failed to run the command: '{}' exited with code {}\",\n+                create_command_text(program, args),\n+                code\n+            ),\n+            None => bail!(\n+                \"failed to run the command: '{}' terminated by signal\",\n+                create_command_text(program, args)\n+            ),\n         };\n     }\n+    Ok(output)\n+}\n+\n+fn get_or_install_rust_src(cargo_toml: &Path) -> Result<PathBuf> {\n+    if let Ok(path) = env::var(\"RUST_SRC_PATH\") {\n+        return Ok(path.into());\n+    }\n+    let rustc_output = run_command_in_cargo_dir(cargo_toml, \"rustc\", &[\"--print\", \"sysroot\"])?;\n     let stdout = String::from_utf8(rustc_output.stdout)?;\n     let sysroot_path = Path::new(stdout.trim());\n     let src_path = sysroot_path.join(\"lib/rustlib/src/rust/src\");\n \n     if !src_path.exists() {\n-        try_install_rust_src(cargo_toml)?\n+        run_command_in_cargo_dir(cargo_toml, \"rustup\", &[\"component\", \"add\", \"rust-src\"])?;\n     }\n     if !src_path.exists() {\n         bail!("}]}