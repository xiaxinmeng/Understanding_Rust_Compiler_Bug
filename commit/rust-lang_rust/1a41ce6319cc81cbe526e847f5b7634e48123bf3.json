{"sha": "1a41ce6319cc81cbe526e847f5b7634e48123bf3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNDFjZTYzMTljYzgxY2JlNTI2ZTg0N2Y1Yjc2MzRlNDgxMjNiZjM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-07T08:03:15Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-07T08:03:15Z"}, "message": "Merge remote-tracking branch 'origin/master' into stacked-borrows-2-phase", "tree": {"sha": "9dd3a4c758fda242649493fc038a461c8e4f7d2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dd3a4c758fda242649493fc038a461c8e4f7d2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a41ce6319cc81cbe526e847f5b7634e48123bf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a41ce6319cc81cbe526e847f5b7634e48123bf3", "html_url": "https://github.com/rust-lang/rust/commit/1a41ce6319cc81cbe526e847f5b7634e48123bf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a41ce6319cc81cbe526e847f5b7634e48123bf3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61f20761d3124f5a1b1caee8aa15637cc7f92d8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/61f20761d3124f5a1b1caee8aa15637cc7f92d8e", "html_url": "https://github.com/rust-lang/rust/commit/61f20761d3124f5a1b1caee8aa15637cc7f92d8e"}, {"sha": "173ad363a0a2cd04af5fc5f2fc119f57bdaab670", "url": "https://api.github.com/repos/rust-lang/rust/commits/173ad363a0a2cd04af5fc5f2fc119f57bdaab670", "html_url": "https://github.com/rust-lang/rust/commit/173ad363a0a2cd04af5fc5f2fc119f57bdaab670"}], "stats": {"total": 68, "additions": 14, "deletions": 54}, "files": [{"sha": "db9ac93279f15983d29c00112c1812d24af88cee", "filename": "tests/compile-fail-fullmir/stacked_borrows/alias_through_mutation.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Falias_through_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Falias_through_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Falias_through_mutation.rs?ref=1a41ce6319cc81cbe526e847f5b7634e48123bf3", "patch": "@@ -1,5 +1,3 @@\n-#![allow(unused_variables)]\n-\n // This makes a ref that was passed to us via &mut alias with things it should not alias with\n fn retarget(x: &mut &u32, target: &mut u32) {\n     unsafe { *x = &mut *(target as *mut _); }"}, {"sha": "9bced43f6e8568325acf7c87bd04b7e3fda7fac8", "filename": "tests/compile-fail-fullmir/stacked_borrows/aliasing_mut1.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Faliasing_mut1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Faliasing_mut1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Faliasing_mut1.rs?ref=1a41ce6319cc81cbe526e847f5b7634e48123bf3", "patch": "@@ -1,8 +1,6 @@\n-#![allow(unused_variables)]\n-\n use std::mem;\n \n-pub fn safe(x: &mut i32, y: &mut i32) {} //~ ERROR barrier\n+pub fn safe(_x: &mut i32, _y: &mut i32) {} //~ ERROR barrier\n \n fn main() {\n     let mut x = 0;"}, {"sha": "ea24f1bd274881233f8a6298efd8d024a4a20ff0", "filename": "tests/compile-fail-fullmir/stacked_borrows/aliasing_mut2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Faliasing_mut2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Faliasing_mut2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Faliasing_mut2.rs?ref=1a41ce6319cc81cbe526e847f5b7634e48123bf3", "patch": "@@ -1,8 +1,6 @@\n-#![allow(unused_variables)]\n-\n use std::mem;\n \n-pub fn safe(x: &i32, y: &mut i32) {} //~ ERROR barrier\n+pub fn safe(_x: &i32, _y: &mut i32) {} //~ ERROR barrier\n \n fn main() {\n     let mut x = 0;"}, {"sha": "e564e878ddb19f7857da287901cd518e01aca368", "filename": "tests/compile-fail-fullmir/stacked_borrows/aliasing_mut3.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Faliasing_mut3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Faliasing_mut3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Faliasing_mut3.rs?ref=1a41ce6319cc81cbe526e847f5b7634e48123bf3", "patch": "@@ -1,8 +1,6 @@\n-#![allow(unused_variables)]\n-\n use std::mem;\n \n-pub fn safe(x: &mut i32, y: &i32) {} //~ ERROR does not exist on the stack\n+pub fn safe(_x: &mut i32, _y: &i32) {} //~ ERROR does not exist on the stack\n \n fn main() {\n     let mut x = 0;"}, {"sha": "15f67d0f8728bee20420cca6f4e1b016a5ede4d0", "filename": "tests/compile-fail-fullmir/stacked_borrows/aliasing_mut4.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Faliasing_mut4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Faliasing_mut4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Faliasing_mut4.rs?ref=1a41ce6319cc81cbe526e847f5b7634e48123bf3", "patch": "@@ -1,10 +1,8 @@\n-#![allow(unused_variables)]\n-\n use std::mem;\n use std::cell::Cell;\n \n // Make sure &mut UnsafeCell also is exclusive\n-pub fn safe(x: &i32, y: &mut Cell<i32>) {} //~ ERROR barrier\n+pub fn safe(_x: &i32, _y: &mut Cell<i32>) {} //~ ERROR barrier\n \n fn main() {\n     let mut x = 0;"}, {"sha": "959c6314690d277474a5a000dec4cbdaf8ff6f36", "filename": "tests/compile-fail-fullmir/stacked_borrows/buggy_split_at_mut.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fbuggy_split_at_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fbuggy_split_at_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fbuggy_split_at_mut.rs?ref=1a41ce6319cc81cbe526e847f5b7634e48123bf3", "patch": "@@ -1,5 +1,3 @@\n-#![allow(unused_variables)]\n-\n mod safe {\n     use std::slice::from_raw_parts_mut;\n "}, {"sha": "ba3b6686b84cb2be541f1ef1f50e99ee785b4b01", "filename": "tests/compile-fail-fullmir/stacked_borrows/illegal_write2.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fillegal_write2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fillegal_write2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fillegal_write2.rs?ref=1a41ce6319cc81cbe526e847f5b7634e48123bf3", "patch": "@@ -1,9 +1,3 @@\n-// We fail to detect this when neither this nor libstd are optimized/have retagging.\n-// FIXME: Investigate that.\n-// compile-flags: -Zmir-opt-level=0\n-\n-#![allow(unused_variables)]\n-\n fn main() {\n     let target = &mut 42;\n     let target2 = target as *mut _;"}, {"sha": "bd5e28b47e8673a94f48cf26144be28900e49f8d", "filename": "tests/compile-fail-fullmir/stacked_borrows/pointer_smuggling.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fpointer_smuggling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fpointer_smuggling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fpointer_smuggling.rs?ref=1a41ce6319cc81cbe526e847f5b7634e48123bf3", "patch": "@@ -1,5 +1,3 @@\n-#![allow(unused_variables)]\n-\n static mut PTR: *mut u8 = 0 as *mut _;\n \n fn fun1(x: &mut u8) {\n@@ -14,7 +12,8 @@ fn fun2() {\n }\n \n fn main() {\n-    let val = &mut 0; // FIXME: This should also work with a local variable, but currently it does not.\n+    let mut val = 0;\n+    let val = &mut val;\n     fun1(val);\n     *val = 2; // this invalidates any raw ptrs `fun1` might have created.\n     fun2(); // if they now use a raw ptr they break our reference"}, {"sha": "34203338696cbdeb3c250ed062840b9c0798242c", "filename": "tests/compile-fail/never_transmute_humans.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Fcompile-fail%2Fnever_transmute_humans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Fcompile-fail%2Fnever_transmute_humans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_transmute_humans.rs?ref=1a41ce6319cc81cbe526e847f5b7634e48123bf3", "patch": "@@ -2,17 +2,12 @@\n // compile-flags: -Zmiri-disable-validation\n \n #![feature(never_type)]\n-#![allow(unreachable_code)]\n-#![allow(unused_variables)]\n \n struct Human;\n \n fn main() {\n-    let x: ! = unsafe {\n+    let _x: ! = unsafe {\n         std::mem::transmute::<Human, !>(Human) //~ ERROR constant evaluation error\n         //^~ NOTE entered unreachable code\n     };\n-    f(x)\n }\n-\n-fn f(x: !) -> ! { x }"}, {"sha": "fab4981047f8d482971b842582a6ae43a4a6c5c3", "filename": "tests/compile-fail/never_transmute_void.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Fcompile-fail%2Fnever_transmute_void.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Fcompile-fail%2Fnever_transmute_void.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_transmute_void.rs?ref=1a41ce6319cc81cbe526e847f5b7634e48123bf3", "patch": "@@ -2,8 +2,6 @@\n // compile-flags: -Zmiri-disable-validation\n \n #![feature(never_type)]\n-#![allow(unreachable_code)]\n-#![allow(unused_variables)]\n \n enum Void {}\n "}, {"sha": "4b6a3c95928ae0b551e7b03e7e16753c58c76998", "filename": "tests/compile-fail/validity/transmute_through_ptr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Fcompile-fail%2Fvalidity%2Ftransmute_through_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Fcompile-fail%2Fvalidity%2Ftransmute_through_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Ftransmute_through_ptr.rs?ref=1a41ce6319cc81cbe526e847f5b7634e48123bf3", "patch": "@@ -1,5 +1,3 @@\n-#![allow(unused_variables)]\n-\n #[repr(u32)]\n enum Bool { True }\n "}, {"sha": "1c11d07c1bcc5912a53f338bb1b2d4f358d3f966", "filename": "tests/compiletest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=1a41ce6319cc81cbe526e847f5b7634e48123bf3", "patch": "@@ -106,7 +106,7 @@ fn miri_pass(sysroot: &Path, path: &str, target: &str, host: &str, need_fullmir:\n         flags.push(\"-Zmir-opt-level=1\".to_owned());\n     }\n     if !have_fullmir() {\n-        // Validation relies on the EscapeToRaw statements being emitted\n+        // FIXME: Validation relies on the EscapeToRaw statements being emitted\n         flags.push(\"-Zmiri-disable-validation\".to_owned());\n     }\n "}, {"sha": "4c9e598e6ba33324559ccd500a8c075b72949653", "filename": "tests/run-pass/dst-struct.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Frun-pass%2Fdst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Frun-pass%2Fdst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdst-struct.rs?ref=1a41ce6319cc81cbe526e847f5b7634e48123bf3", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unused_features)]\n #![feature(box_syntax)]\n \n struct Fat<T: ?Sized> {\n@@ -127,8 +125,9 @@ pub fn main() {\n     let f2 : Box<Fat<[isize]>> = f1;\n     foo(&*f2);\n \n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let f3 : Box<Fat<[isize]>> =\n         Box::<Fat<[_; 3]>>::new(Fat { f1: 5, f2: \"some str\", ptr: [1, 2, 3] });\n     foo(&*f3);\n+    let f4 : Box<Fat<[isize]>> = box Fat { f1: 5, f2: \"some str\", ptr: [1, 2, 3] };\n+    foo(&*f4);\n }"}, {"sha": "aaeeef8bf98be7e7696a698029bc7800986f7d15", "filename": "tests/run-pass/issue-31267-additional.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Frun-pass%2Fissue-31267-additional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Frun-pass%2Fissue-31267-additional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-31267-additional.rs?ref=1a41ce6319cc81cbe526e847f5b7634e48123bf3", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unused_variables)]\n-\n #[derive(Clone, Copy, Debug)]\n struct Bar;\n \n@@ -25,5 +23,5 @@ impl Biz {\n }\n \n fn main() {\n-    let foo = Biz::BAZ;\n+    let _foo = Biz::BAZ;\n }"}, {"sha": "d4901abb808f4faa68ace052f86826b075f2bd95", "filename": "tests/run-pass/many_shr_bor.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Frun-pass%2Fmany_shr_bor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Frun-pass%2Fmany_shr_bor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmany_shr_bor.rs?ref=1a41ce6319cc81cbe526e847f5b7634e48123bf3", "patch": "@@ -1,5 +1,4 @@\n // Make sure validation can handle many overlapping shared borrows for different parts of a data structure\n-#![allow(unused_variables)]\n use std::cell::RefCell;\n \n struct Test {\n@@ -25,9 +24,9 @@ fn test2(r: &mut RefCell<i32>) {\n     let x = &*r; // releasing write lock, first suspension recorded\n     let mut x_ref = x.borrow_mut();\n     let x_inner : &mut i32 = &mut *x_ref; // new inner write lock, with same lifetime as outer lock\n-    let x_inner_shr = &*x_inner; // releasing inner write lock, recording suspension\n-    let y = &*r; // second suspension for the outer write lock\n-    let x_inner_shr2 = &*x_inner; // 2nd suspension for inner write lock\n+    let _x_inner_shr = &*x_inner; // releasing inner write lock, recording suspension\n+    let _y = &*r; // second suspension for the outer write lock\n+    let _x_inner_shr2 = &*x_inner; // 2nd suspension for inner write lock\n }\n \n fn main() {"}, {"sha": "77f763888eae1411ab7ce1b27a905f2b4a7b7b37", "filename": "tests/run-pass/move-arg-2-unique.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Frun-pass%2Fmove-arg-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Frun-pass%2Fmove-arg-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmove-arg-2-unique.rs?ref=1a41ce6319cc81cbe526e847f5b7634e48123bf3", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unused_features, unused_variables)]\n #![feature(box_syntax)]\n \n fn test(foo: Box<Vec<isize>> ) { assert_eq!((*foo)[0], 10); }"}, {"sha": "0754a3f60d36011119361142a9a7465a89b5cf61", "filename": "tests/run-pass/move-arg-3-unique.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Frun-pass%2Fmove-arg-3-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Frun-pass%2Fmove-arg-3-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmove-arg-3-unique.rs?ref=1a41ce6319cc81cbe526e847f5b7634e48123bf3", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unused_features, unused_variables)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "dfdf89c9c1cd9c180adff029a9132777482e6eb5", "filename": "tests/run-pass/regions-lifetime-nonfree-late-bound.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs?ref=1a41ce6319cc81cbe526e847f5b7634e48123bf3", "patch": "@@ -22,7 +22,6 @@\n // doing region-folding, when really all clients of the region-folding\n // case only want to see FREE lifetime variables, not bound ones.\n \n-#![allow(unused_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "daeba060a78bf344a2f147216a27ca5046d47485", "filename": "tests/run-pass/sums.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Frun-pass%2Fsums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Frun-pass%2Fsums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsums.rs?ref=1a41ce6319cc81cbe526e847f5b7634e48123bf3", "patch": "@@ -1,6 +1,3 @@\n-// FIXME(solson): 32-bit mode doesn't test anything currently.\n-#![cfg_attr(target_pointer_width = \"32\", allow(dead_code))]\n-\n #[derive(Debug, PartialEq)]\n enum Unit { Unit(()) } // Force non-C-enum representation.\n "}, {"sha": "396846b23236e724884094e22a8f87a9d6494a30", "filename": "tests/run-pass/vec-matching-fold.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Frun-pass%2Fvec-matching-fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a41ce6319cc81cbe526e847f5b7634e48123bf3/tests%2Frun-pass%2Fvec-matching-fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fvec-matching-fold.rs?ref=1a41ce6319cc81cbe526e847f5b7634e48123bf3", "patch": "@@ -22,7 +22,6 @@ fn foldl<T, U, F>(values: &[T],\n         &[ref head, ref tail..] =>\n             foldl(tail, function(initial, head), function),\n         &[] => {\n-            // FIXME: call guards\n             let res = initial.clone(); res\n         }\n     }\n@@ -39,7 +38,6 @@ fn foldr<T, U, F>(values: &[T],\n         &[ref head.., ref tail] =>\n             foldr(head, function(tail, initial), function),\n         &[] => {\n-            // FIXME: call guards\n             let res = initial.clone(); res\n         }\n     }"}]}