{"sha": "ece87c3f4e76fd996dbbbaf8202f2adecff06c1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZTg3YzNmNGU3NmZkOTk2ZGJiYmFmODIwMmYyYWRlY2ZmMDZjMWU=", "commit": {"author": {"name": "Fabian Zaiser", "email": "fabian.zaiser@gmail.com", "date": "2018-03-27T23:41:40Z"}, "committer": {"name": "Fabian Zaiser", "email": "fabian.zaiser@gmail.com", "date": "2018-03-27T23:41:40Z"}, "message": "Address nits and tidy errors.", "tree": {"sha": "0c4cb1ceeb9dd8e14f897a901c229ab90b2dd114", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c4cb1ceeb9dd8e14f897a901c229ab90b2dd114"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ece87c3f4e76fd996dbbbaf8202f2adecff06c1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ece87c3f4e76fd996dbbbaf8202f2adecff06c1e", "html_url": "https://github.com/rust-lang/rust/commit/ece87c3f4e76fd996dbbbaf8202f2adecff06c1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ece87c3f4e76fd996dbbbaf8202f2adecff06c1e/comments", "author": {"login": "fanzier", "id": 5846332, "node_id": "MDQ6VXNlcjU4NDYzMzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5846332?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fanzier", "html_url": "https://github.com/fanzier", "followers_url": "https://api.github.com/users/fanzier/followers", "following_url": "https://api.github.com/users/fanzier/following{/other_user}", "gists_url": "https://api.github.com/users/fanzier/gists{/gist_id}", "starred_url": "https://api.github.com/users/fanzier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fanzier/subscriptions", "organizations_url": "https://api.github.com/users/fanzier/orgs", "repos_url": "https://api.github.com/users/fanzier/repos", "events_url": "https://api.github.com/users/fanzier/events{/privacy}", "received_events_url": "https://api.github.com/users/fanzier/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fanzier", "id": 5846332, "node_id": "MDQ6VXNlcjU4NDYzMzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5846332?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fanzier", "html_url": "https://github.com/fanzier", "followers_url": "https://api.github.com/users/fanzier/followers", "following_url": "https://api.github.com/users/fanzier/following{/other_user}", "gists_url": "https://api.github.com/users/fanzier/gists{/gist_id}", "starred_url": "https://api.github.com/users/fanzier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fanzier/subscriptions", "organizations_url": "https://api.github.com/users/fanzier/orgs", "repos_url": "https://api.github.com/users/fanzier/repos", "events_url": "https://api.github.com/users/fanzier/events{/privacy}", "received_events_url": "https://api.github.com/users/fanzier/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9255bbd035ee032f1ccd47fcf93c87f7bc2e4bad", "url": "https://api.github.com/repos/rust-lang/rust/commits/9255bbd035ee032f1ccd47fcf93c87f7bc2e4bad", "html_url": "https://github.com/rust-lang/rust/commit/9255bbd035ee032f1ccd47fcf93c87f7bc2e4bad"}], "stats": {"total": 36, "additions": 19, "deletions": 17}, "files": [{"sha": "9e7e93571595228b87daf324235aea44fe185328", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ece87c3f4e76fd996dbbbaf8202f2adecff06c1e/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece87c3f4e76fd996dbbbaf8202f2adecff06c1e/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=ece87c3f4e76fd996dbbbaf8202f2adecff06c1e", "patch": "@@ -634,8 +634,8 @@ $EndFeature, \"\n         }\n \n         doc_comment! {\n-            concat!(\"Checked Euclidean division. Computes `self.div_euc(rhs)`, returning `None` if `rhs == 0`\n-or the division results in overflow.\n+            concat!(\"Checked Euclidean division. Computes `self.div_euc(rhs)`,\n+returning `None` if `rhs == 0` or the division results in overflow.\n \n # Examples\n \n@@ -1047,8 +1047,8 @@ $EndFeature, \"\n         }\n \n         doc_comment! {\n-            concat!(\"Wrapping Euclidean division. Computes `self.div_euc(rhs)`, wrapping around at the\n-boundary of the type.\n+            concat!(\"Wrapping Euclidean division. Computes `self.div_euc(rhs)`,\n+wrapping around at the boundary of the type.\n \n The only case where such wrapping can occur is when one divides `MIN / -1` on a signed type (where\n `MIN` is the negative minimal value for the type); this is equivalent to `-MIN`, a positive value\n@@ -1462,7 +1462,7 @@ $EndFeature, \"\n \n \n         doc_comment! {\n-            concat!(\"Calculates the modulo of Euclidean divsion `self.mod_euc(rhs)`.\n+            concat!(\"Calculates the remainder `self.mod_euc(rhs)` by Euclidean division.\n \n Returns a tuple of the remainder after dividing along with a boolean indicating whether an\n arithmetic overflow would occur. If an overflow would occur then 0 is returned.\n@@ -1691,8 +1691,8 @@ $EndFeature, \"\n         doc_comment! {\n             concat!(\"Calculates the quotient of Euclidean division of `self` by `rhs`.\n \n-This computes the integer n such that `self = n * rhs + self.mod_euc(rhs)`.\n-In other words, the result is `self / rhs` rounded to the integer n\n+This computes the integer `n` such that `self = n * rhs + self.mod_euc(rhs)`.\n+In other words, the result is `self / rhs` rounded to the integer `n`\n such that `self >= n * rhs`.\n \n # Panics\n@@ -1727,7 +1727,7 @@ $EndFeature, \"\n \n \n         doc_comment! {\n-            concat!(\"Calculates the modulo `self mod rhs` by Euclidean division.\n+            concat!(\"Calculates the remainder `self mod rhs` by Euclidean division.\n \n In particular, the result `n` satisfies `0 <= n < rhs.abs()`.\n \n@@ -2720,7 +2720,7 @@ Basic usage:\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n             #[inline]\n             pub fn wrapping_div_euc(self, rhs: Self) -> Self {\n-                self.div_euc(rhs)\n+                self / rhs\n             }\n         }\n \n@@ -3018,7 +3018,8 @@ This function will panic if `rhs` is 0.\n Basic usage\n \n ```\n-\", $Feature, \"assert_eq!(5\", stringify!($SelfT), \".overflowing_div_euc(2), (2, false));\", $EndFeature, \"\n+\", $Feature, \"assert_eq!(5\", stringify!($SelfT), \".overflowing_div_euc(2), (2, false));\",\n+$EndFeature, \"\n ```\"),\n             #[inline]\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n@@ -3054,7 +3055,7 @@ Basic usage\n         }\n \n         doc_comment! {\n-            concat!(\"Calculates the modulo of Euclidean division of `self.mod_euc(rhs)`.\n+            concat!(\"Calculates the remainder `self.mod_euc(rhs)` by Euclidean division.\n \n Returns a tuple of the modulo after dividing along with a boolean\n indicating whether an arithmetic overflow would occur. Note that for\n@@ -3070,7 +3071,8 @@ This function will panic if `rhs` is 0.\n Basic usage\n \n ```\n-\", $Feature, \"assert_eq!(5\", stringify!($SelfT), \".overflowing_mod_euc(2), (1, false));\", $EndFeature, \"\n+\", $Feature, \"assert_eq!(5\", stringify!($SelfT), \".overflowing_mod_euc(2), (1, false));\",\n+$EndFeature, \"\n ```\"),\n             #[inline]\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n@@ -3259,7 +3261,7 @@ $EndFeature, \"\n \n \n         doc_comment! {\n-            concat!(\"Calculates the Euclidean modulo `self mod rhs`.\n+            concat!(\"Calculates the remainder `self mod rhs` by Euclidean division.\n \n For unsigned types, this is just the same as `self % rhs`.\n "}, {"sha": "ca39089a9583acf553e6a164e20b71207e34290f", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ece87c3f4e76fd996dbbbaf8202f2adecff06c1e/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece87c3f4e76fd996dbbbaf8202f2adecff06c1e/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=ece87c3f4e76fd996dbbbaf8202f2adecff06c1e", "patch": "@@ -331,9 +331,9 @@ impl f32 {\n \n     /// Calculates Euclidean division, the matching method for `mod_euc`.\n     ///\n-    /// This computes the integer n such that\n+    /// This computes the integer `n` such that\n     /// `self = n * rhs + self.mod_euc(rhs)`.\n-    /// In other words, the result is `self / rhs` rounded to the integer n\n+    /// In other words, the result is `self / rhs` rounded to the integer `n`\n     /// such that `self >= n * rhs`.\n     ///\n     /// ```"}, {"sha": "a9585670ad043d4242de60eab2f1e4071adf702b", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ece87c3f4e76fd996dbbbaf8202f2adecff06c1e/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece87c3f4e76fd996dbbbaf8202f2adecff06c1e/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=ece87c3f4e76fd996dbbbaf8202f2adecff06c1e", "patch": "@@ -317,9 +317,9 @@ impl f64 {\n \n     /// Calculates Euclidean division, the matching method for `mod_euc`.\n     ///\n-    /// This computes the integer n such that\n+    /// This computes the integer `n` such that\n     /// `self = n * rhs + self.mod_euc(rhs)`.\n-    /// In other words, the result is `self / rhs` rounded to the integer n\n+    /// In other words, the result is `self / rhs` rounded to the integer `n`\n     /// such that `self >= n * rhs`.\n     ///\n     /// ```"}]}