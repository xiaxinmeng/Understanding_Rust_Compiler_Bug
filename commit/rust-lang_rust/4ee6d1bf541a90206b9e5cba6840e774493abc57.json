{"sha": "4ee6d1bf541a90206b9e5cba6840e774493abc57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlZTZkMWJmNTQxYTkwMjA2YjllNWNiYTY4NDBlNzc0NDkzYWJjNTc=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-30T19:33:06Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-30T19:35:17Z"}, "message": "Add description independent of `Read::read_to_string`", "tree": {"sha": "f8cabf3aa68857a59458216725e6bfe9dbea3701", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8cabf3aa68857a59458216725e6bfe9dbea3701"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ee6d1bf541a90206b9e5cba6840e774493abc57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ee6d1bf541a90206b9e5cba6840e774493abc57", "html_url": "https://github.com/rust-lang/rust/commit/4ee6d1bf541a90206b9e5cba6840e774493abc57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ee6d1bf541a90206b9e5cba6840e774493abc57/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f9a8a1620a677d668c981a8e6be3ce02ef06cd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f9a8a1620a677d668c981a8e6be3ce02ef06cd5", "html_url": "https://github.com/rust-lang/rust/commit/1f9a8a1620a677d668c981a8e6be3ce02ef06cd5"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "1fdd82400d0617601cdb9df84159b082c8dd591a", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4ee6d1bf541a90206b9e5cba6840e774493abc57/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee6d1bf541a90206b9e5cba6840e774493abc57/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=4ee6d1bf541a90206b9e5cba6840e774493abc57", "patch": "@@ -945,12 +945,13 @@ pub trait Read {\n     }\n }\n \n-/// Convenience function for [`Read::read_to_string`].\n+/// Read all bytes from a [reader][Read] into a new [`String`].\n ///\n-/// This avoids having to create a variable first and it provides more type safety\n-/// since you can only get the buffer out if there were no errors. (If you use\n-/// [`Read::read_to_string`] you have to remember to check whether the read succeeded\n-/// because otherwise your buffer will be empty.)\n+/// This is a convenience function for [`Read::read_to_string`]. Using this\n+/// function avoids having to create a variable first and provides more type\n+/// safety since you can only get the buffer out if there were no errors. (If you\n+/// use [`Read::read_to_string`] you have to remember to check whether the read\n+/// succeeded because otherwise your buffer will be empty.)\n ///\n /// # Examples\n ///"}]}