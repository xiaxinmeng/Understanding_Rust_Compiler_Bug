{"sha": "a43bba760ef424f5c849666949b4323f090b6970", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0M2JiYTc2MGVmNDI0ZjVjODQ5NjY2OTQ5YjQzMjNmMDkwYjY5NzA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-17T08:41:36Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-17T08:41:36Z"}, "message": "internal: switch some tests to minicore", "tree": {"sha": "e990cc971fa07e3e41c89eeaf75bbe2416b12bd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e990cc971fa07e3e41c89eeaf75bbe2416b12bd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a43bba760ef424f5c849666949b4323f090b6970", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a43bba760ef424f5c849666949b4323f090b6970", "html_url": "https://github.com/rust-lang/rust/commit/a43bba760ef424f5c849666949b4323f090b6970", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a43bba760ef424f5c849666949b4323f090b6970/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c42cdff3d2ed2e30add09dd0d602181b6f83534d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c42cdff3d2ed2e30add09dd0d602181b6f83534d", "html_url": "https://github.com/rust-lang/rust/commit/c42cdff3d2ed2e30add09dd0d602181b6f83534d"}], "stats": {"total": 191, "additions": 37, "deletions": 154}, "files": [{"sha": "7fd73d4c71c8c97e61444631afbcad8dd88b50f6", "filename": "crates/ide_assists/src/handlers/convert_iter_for_each_to_for.rs", "status": "modified", "additions": 37, "deletions": 84, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/a43bba760ef424f5c849666949b4323f090b6970/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a43bba760ef424f5c849666949b4323f090b6970/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs?ref=a43bba760ef424f5c849666949b4323f090b6970", "patch": "@@ -77,9 +77,11 @@ fn validate_method_call_expr(\n     expr: ast::MethodCallExpr,\n ) -> Option<(ast::Expr, ast::Expr)> {\n     let name_ref = expr.name_ref()?;\n-    if name_ref.syntax().text_range().intersect(ctx.frange.range).is_none()\n-        || name_ref.text() != \"for_each\"\n-    {\n+    if name_ref.syntax().text_range().intersect(ctx.frange.range).is_none() {\n+        cov_mark::hit!(test_for_each_not_applicable_invalid_cursor_pos);\n+        return None;\n+    }\n+    if name_ref.text() != \"for_each\" {\n         return None;\n     }\n \n@@ -98,59 +100,27 @@ fn validate_method_call_expr(\n \n #[cfg(test)]\n mod tests {\n-    use crate::tests::{self, check_assist};\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n \n-    const EMPTY_ITER_FIXTURE: &'static str = r\"\n-//- /lib.rs deps:core crate:empty_iter\n-pub struct EmptyIter;\n-impl Iterator for EmptyIter {\n-    type Item = usize;\n-    fn next(&mut self) -> Option<Self::Item> { None }\n-}\n-pub struct Empty;\n-impl Empty {\n-    pub fn iter(&self) -> EmptyIter { EmptyIter }\n-}\n-\";\n-\n-    fn check_assist_with_fixtures(before: &str, after: &str) {\n-        let before = &format!(\n-            \"//- /main.rs crate:main deps:core,empty_iter{}{}{}\",\n-            before,\n-            EMPTY_ITER_FIXTURE,\n-            FamousDefs::FIXTURE,\n-        );\n-        check_assist(convert_iter_for_each_to_for, before, after);\n-    }\n-\n-    fn check_assist_not_applicable(before: &str) {\n-        let before = &format!(\n-            \"//- /main.rs crate:main deps:core,empty_iter{}{}{}\",\n-            before,\n-            EMPTY_ITER_FIXTURE,\n-            FamousDefs::FIXTURE,\n-        );\n-        tests::check_assist_not_applicable(convert_iter_for_each_to_for, before);\n-    }\n-\n     #[test]\n     fn test_for_each_in_method_stmt() {\n-        check_assist_with_fixtures(\n+        check_assist(\n+            convert_iter_for_each_to_for,\n             r#\"\n-use empty_iter::*;\n+//- minicore: iterators\n fn main() {\n-    let x = Empty;\n-    x.iter().$0for_each(|(x, y)| {\n+    let it = core::iter::repeat(92);\n+    it.$0for_each(|(x, y)| {\n         println!(\"x: {}, y: {}\", x, y);\n     });\n-}\"#,\n+}\n+\"#,\n             r#\"\n-use empty_iter::*;\n fn main() {\n-    let x = Empty;\n-    for (x, y) in x.iter() {\n+    let it = core::iter::repeat(92);\n+    for (x, y) in it {\n         println!(\"x: {}, y: {}\", x, y);\n     }\n }\n@@ -160,43 +130,21 @@ fn main() {\n \n     #[test]\n     fn test_for_each_in_method() {\n-        check_assist_with_fixtures(\n+        check_assist(\n+            convert_iter_for_each_to_for,\n             r#\"\n-use empty_iter::*;\n+//- minicore: iterators\n fn main() {\n-    let x = Empty;\n-    x.iter().$0for_each(|(x, y)| {\n+    let it = core::iter::repeat(92);\n+    it.$0for_each(|(x, y)| {\n         println!(\"x: {}, y: {}\", x, y);\n     })\n-}\"#,\n-            r#\"\n-use empty_iter::*;\n-fn main() {\n-    let x = Empty;\n-    for (x, y) in x.iter() {\n-        println!(\"x: {}, y: {}\", x, y);\n-    }\n }\n \"#,\n-        )\n-    }\n-\n-    #[test]\n-    fn test_for_each_in_iter_stmt() {\n-        check_assist_with_fixtures(\n-            r#\"\n-use empty_iter::*;\n-fn main() {\n-    let x = Empty.iter();\n-    x.$0for_each(|(x, y)| {\n-        println!(\"x: {}, y: {}\", x, y);\n-    });\n-}\"#,\n             r#\"\n-use empty_iter::*;\n fn main() {\n-    let x = Empty.iter();\n-    for (x, y) in x {\n+    let it = core::iter::repeat(92);\n+    for (x, y) in it {\n         println!(\"x: {}, y: {}\", x, y);\n     }\n }\n@@ -206,18 +154,19 @@ fn main() {\n \n     #[test]\n     fn test_for_each_without_braces_stmt() {\n-        check_assist_with_fixtures(\n+        check_assist(\n+            convert_iter_for_each_to_for,\n             r#\"\n-use empty_iter::*;\n+//- minicore: iterators\n fn main() {\n-    let x = Empty;\n-    x.iter().$0for_each(|(x, y)| println!(\"x: {}, y: {}\", x, y));\n-}\"#,\n+    let it = core::iter::repeat(92);\n+    it.$0for_each(|(x, y)| println!(\"x: {}, y: {}\", x, y));\n+}\n+\"#,\n             r#\"\n-use empty_iter::*;\n fn main() {\n-    let x = Empty;\n-    for (x, y) in x.iter() {\n+    let it = core::iter::repeat(92);\n+    for (x, y) in it {\n         println!(\"x: {}, y: {}\", x, y)\n     }\n }\n@@ -228,7 +177,9 @@ fn main() {\n     #[test]\n     fn test_for_each_not_applicable() {\n         check_assist_not_applicable(\n+            convert_iter_for_each_to_for,\n             r#\"\n+//- minicore: iterators\n fn main() {\n     ().$0for_each(|x| println!(\"{}\", x));\n }\"#,\n@@ -237,11 +188,13 @@ fn main() {\n \n     #[test]\n     fn test_for_each_not_applicable_invalid_cursor_pos() {\n+        cov_mark::check!(test_for_each_not_applicable_invalid_cursor_pos);\n         check_assist_not_applicable(\n+            convert_iter_for_each_to_for,\n             r#\"\n-use empty_iter::*;\n+//- minicore: iterators\n fn main() {\n-    Empty.iter().for_each(|(x, y)| $0println!(\"x: {}, y: {}\", x, y));\n+    core::iter::repeat(92).for_each(|(x, y)| $0println!(\"x: {}, y: {}\", x, y));\n }\"#,\n         )\n     }"}, {"sha": "5aa77a24de6f0bf5f000600841769396d1fb747c", "filename": "crates/ide_db/src/helpers/famous_defs_fixture.rs", "status": "modified", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/a43bba760ef424f5c849666949b4323f090b6970/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a43bba760ef424f5c849666949b4323f090b6970/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs?ref=a43bba760ef424f5c849666949b4323f090b6970", "patch": "@@ -26,76 +26,6 @@ pub mod default {\n     }\n }\n \n-pub mod iter {\n-    pub use self::traits::{collect::IntoIterator, iterator::Iterator};\n-    mod traits {\n-        pub(crate) mod iterator {\n-            use crate::option::Option;\n-            pub trait Iterator {\n-                type Item;\n-                fn next(&mut self) -> Option<Self::Item>;\n-                fn by_ref(&mut self) -> &mut Self {\n-                    self\n-                }\n-                fn take(self, n: usize) -> crate::iter::Take<Self> {\n-                    crate::iter::Take { inner: self }\n-                }\n-            }\n-\n-            impl<I: Iterator> Iterator for &mut I {\n-                type Item = I::Item;\n-                fn next(&mut self) -> Option<I::Item> {\n-                    (**self).next()\n-                }\n-            }\n-        }\n-        pub(crate) mod collect {\n-            pub trait IntoIterator {\n-                type Item;\n-            }\n-        }\n-    }\n-\n-    pub use self::sources::*;\n-    pub(crate) mod sources {\n-        use super::Iterator;\n-        use crate::option::Option::{self, *};\n-        pub struct Repeat<A> {\n-            element: A,\n-        }\n-\n-        pub fn repeat<T>(elt: T) -> Repeat<T> {\n-            Repeat { element: elt }\n-        }\n-\n-        impl<A> Iterator for Repeat<A> {\n-            type Item = A;\n-\n-            fn next(&mut self) -> Option<A> {\n-                None\n-            }\n-        }\n-    }\n-\n-    pub use self::adapters::*;\n-    pub(crate) mod adapters {\n-        use super::Iterator;\n-        use crate::option::Option::{self, *};\n-        pub struct Take<I> {\n-            pub(crate) inner: I,\n-        }\n-        impl<I> Iterator for Take<I>\n-        where\n-            I: Iterator,\n-        {\n-            type Item = <I as Iterator>::Item;\n-            fn next(&mut self) -> Option<<I as Iterator>::Item> {\n-                None\n-            }\n-        }\n-    }\n-}\n-\n pub mod ops {\n     #[lang = \"fn\"]\n     pub trait Fn<Args>: FnMut<Args> {"}]}