{"sha": "d308f17a211068971858551a1bd9149abdf09d35", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMDhmMTdhMjExMDY4OTcxODU4NTUxYTFiZDkxNDlhYmRmMDlkMzU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-03T18:05:00Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-03T18:05:54Z"}, "message": "Inline parameters in `inline_call` if possible", "tree": {"sha": "06b119417d05a633c71770175abd35261e0fda37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06b119417d05a633c71770175abd35261e0fda37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d308f17a211068971858551a1bd9149abdf09d35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d308f17a211068971858551a1bd9149abdf09d35", "html_url": "https://github.com/rust-lang/rust/commit/d308f17a211068971858551a1bd9149abdf09d35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d308f17a211068971858551a1bd9149abdf09d35/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14e18bfa38dc445a07109cd8fbd98d6ff804f076", "url": "https://api.github.com/repos/rust-lang/rust/commits/14e18bfa38dc445a07109cd8fbd98d6ff804f076", "html_url": "https://github.com/rust-lang/rust/commit/14e18bfa38dc445a07109cd8fbd98d6ff804f076"}], "stats": {"total": 167, "additions": 111, "deletions": 56}, "files": [{"sha": "9b46b8f2feed7e169c87a91c075dee449c8278a6", "filename": "crates/ide_assists/src/handlers/inline_call.rs", "status": "modified", "additions": 96, "deletions": 56, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/d308f17a211068971858551a1bd9149abdf09d35/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d308f17a211068971858551a1bd9149abdf09d35/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=d308f17a211068971858551a1bd9149abdf09d35", "patch": "@@ -1,5 +1,7 @@\n use ast::make;\n use hir::{HasSource, PathResolution};\n+use ide_db::{defs::Definition, search::FileReference};\n+use itertools::izip;\n use syntax::{\n     ast::{self, edit::AstNodeEdit, ArgListOwner},\n     ted, AstNode,\n@@ -69,23 +71,25 @@ pub(crate) fn inline_(\n     arg_list: Vec<ast::Expr>,\n     expr: ast::Expr,\n ) -> Option<()> {\n-    let hir::InFile { value: function_source, .. } = function.source(ctx.db())?;\n+    let hir::InFile { value: function_source, file_id } = function.source(ctx.db())?;\n     let param_list = function_source.param_list()?;\n+    let mut assoc_fn_params = function.assoc_fn_params(ctx.sema.db).into_iter();\n \n     let mut params = Vec::new();\n     if let Some(self_param) = param_list.self_param() {\n         // FIXME this should depend on the receiver as well as the self_param\n-        params.push(\n+        params.push((\n             make::ident_pat(\n                 self_param.amp_token().is_some(),\n                 self_param.mut_token().is_some(),\n                 make::name(\"this\"),\n             )\n             .into(),\n-        );\n+            assoc_fn_params.next()?,\n+        ));\n     }\n     for param in param_list.params() {\n-        params.push(param.pat()?);\n+        params.push((param.pat()?, assoc_fn_params.next()?));\n     }\n \n     if arg_list.len() != params.len() {\n@@ -95,41 +99,95 @@ pub(crate) fn inline_(\n         return None;\n     }\n \n-    let new_bindings = params.into_iter().zip(arg_list);\n-\n     let body = function_source.body()?;\n \n     acc.add(\n         AssistId(\"inline_call\", AssistKind::RefactorInline),\n         label,\n         expr.syntax().text_range(),\n         |builder| {\n-            // FIXME: emit type ascriptions when a coercion happens?\n-            // FIXME: dont create locals when its not required\n-            let statements = new_bindings\n-                .map(|(pattern, value)| make::let_stmt(pattern, Some(value)).into())\n-                .chain(body.statements());\n-\n-            let original_indentation = expr.indent_level();\n-            let mut replacement = make::block_expr(statements, body.tail_expr())\n-                .reset_indent()\n-                .indent(original_indentation);\n-\n+            let body = body.clone_for_update();\n+\n+            let file_id = file_id.original_file(ctx.sema.db);\n+            let usages_for_locals = |local| {\n+                Definition::Local(local)\n+                    .usages(&ctx.sema)\n+                    .all()\n+                    .references\n+                    .remove(&file_id)\n+                    .unwrap_or_default()\n+                    .into_iter()\n+            };\n+            // Contains the nodes of usages of parameters.\n+            // If the inner Vec for a parameter is empty it either means there are no usages or that the parameter\n+            // has a pattern that does not allow inlining\n+            let param_use_nodes: Vec<Vec<_>> = params\n+                .iter()\n+                .map(|(pat, param)| {\n+                    if !matches!(pat, ast::Pat::IdentPat(pat) if pat.is_simple_ident()) {\n+                        return Vec::new();\n+                    }\n+                    usages_for_locals(param.as_local(ctx.sema.db))\n+                        .map(|FileReference { name, range, .. }| match name {\n+                            ast::NameLike::NameRef(_) => body\n+                                .syntax()\n+                                .covering_element(range)\n+                                .ancestors()\n+                                .nth(3)\n+                                .filter(|it| ast::PathExpr::can_cast(it.kind())),\n+                            _ => None,\n+                        })\n+                        .collect::<Option<Vec<_>>>()\n+                        .unwrap_or_default()\n+                })\n+                .collect();\n+\n+            // Rewrite `self` to `this`\n             if param_list.self_param().is_some() {\n-                replacement = replacement.clone_for_update();\n                 let this = make::name_ref(\"this\").syntax().clone_for_update();\n-                // FIXME dont look into descendant methods\n-                replacement\n-                    .syntax()\n-                    .descendants()\n-                    .filter_map(ast::NameRef::cast)\n-                    .filter(|n| n.self_token().is_some())\n-                    .collect::<Vec<_>>()\n-                    .into_iter()\n-                    .rev()\n-                    .for_each(|self_ref| ted::replace(self_ref.syntax(), &this));\n+                usages_for_locals(params[0].1.as_local(ctx.sema.db))\n+                    .flat_map(|FileReference { name, range, .. }| match name {\n+                        ast::NameLike::NameRef(_) => Some(body.syntax().covering_element(range)),\n+                        _ => None,\n+                    })\n+                    .for_each(|it| {\n+                        ted::replace(it, &this);\n+                    })\n+            }\n+\n+            // Inline parameter expressions or generate `let` statements depending on whether inlining works or not.\n+            for ((pat, _), usages, expr) in izip!(params, param_use_nodes, arg_list).rev() {\n+                match &*usages {\n+                    // inline single use parameters\n+                    [usage] => {\n+                        ted::replace(usage, expr.syntax().clone_for_update());\n+                    }\n+                    // inline parameters whose expression is a simple local reference\n+                    [_, ..]\n+                        if matches!(&expr,\n+                            ast::Expr::PathExpr(expr)\n+                                if expr.path().and_then(|path| path.as_single_name_ref()).is_some()\n+                        ) =>\n+                    {\n+                        let expr = expr.syntax().clone_for_update();\n+                        usages.into_iter().for_each(|usage| {\n+                            ted::replace(usage, &expr);\n+                        });\n+                    }\n+                    // cant inline, emit a let statement\n+                    // FIXME: emit type ascriptions when a coercion happens?\n+                    _ => body.push_front(make::let_stmt(pat, Some(expr)).clone_for_update().into()),\n+                }\n             }\n-            builder.replace_ast(expr, ast::Expr::BlockExpr(replacement));\n+\n+            let original_indentation = expr.indent_level();\n+            let replacement = body.reset_indent().indent(original_indentation);\n+\n+            let replacement = match replacement.tail_expr() {\n+                Some(expr) if replacement.statements().next().is_none() => expr,\n+                _ => ast::Expr::BlockExpr(replacement),\n+            };\n+            builder.replace_ast(expr, replacement);\n         },\n     )\n }\n@@ -153,9 +211,7 @@ fn main() {\n             r#\"\n fn foo() { println!(\"Hello, World!\"); }\n fn main() {\n-    {\n-        println!(\"Hello, World!\");\n-    };\n+    { println!(\"Hello, World!\"); };\n }\n \"#,\n         );\n@@ -174,10 +230,7 @@ fn main() {\n             r#\"\n fn foo(name: String) { println!(\"Hello, {}!\", name); }\n fn main() {\n-    {\n-        let name = String::from(\"Michael\");\n-        println!(\"Hello, {}!\", name);\n-    };\n+    { let name = String::from(\"Michael\"); println!(\"Hello, {}!\", name); };\n }\n \"#,\n         );\n@@ -218,10 +271,8 @@ fn foo(a: u32, b: u32) -> u32 {\n }\n \n fn main() {\n-    let x = {\n-        let a = 1;\n-        let b = 2;\n-        let x = a + b;\n+    let x = { let b = 2;\n+        let x = 1 + b;\n         let y = x - b;\n         x * y\n     };\n@@ -257,11 +308,7 @@ impl Foo {\n }\n \n fn main() {\n-    let x = {\n-        let this = Foo(3);\n-        let a = 2;\n-        Foo(this.0 + a)\n-    };\n+    let x = Foo(Foo(3).0 + 2);\n }\n \"#,\n         );\n@@ -294,11 +341,7 @@ impl Foo {\n }\n \n fn main() {\n-    let x = {\n-        let this = Foo(3);\n-        let a = 2;\n-        Foo(this.0 + a)\n-    };\n+    let x = Foo(Foo(3).0 + 2);\n }\n \"#,\n         );\n@@ -331,10 +374,8 @@ impl Foo {\n }\n \n fn main() {\n-    let x = {\n-        let ref this = Foo(3);\n-        let a = 2;\n-        Foo(this.0 + a)\n+    let x = { let ref this = Foo(3);\n+        Foo(this.0 + 2)\n     };\n }\n \"#,\n@@ -370,8 +411,7 @@ impl Foo {\n \n fn main() {\n     let mut foo = Foo(3);\n-    {\n-        let ref mut this = foo;\n+    { let ref mut this = foo;\n         this.0 = 0;\n     };\n }"}, {"sha": "30af469bc7eb128a208e5123bbc5087fbcb5e926", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d308f17a211068971858551a1bd9149abdf09d35/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d308f17a211068971858551a1bd9149abdf09d35/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=d308f17a211068971858551a1bd9149abdf09d35", "patch": "@@ -431,6 +431,12 @@ impl ast::RecordExprFieldList {\n     }\n }\n \n+impl ast::BlockExpr {\n+    pub fn push_front(&self, statement: ast::Stmt) {\n+        ted::insert(Position::after(self.l_curly_token().unwrap()), statement.syntax());\n+    }\n+}\n+\n fn normalize_ws_between_braces(node: &SyntaxNode) -> Option<()> {\n     let l = node\n         .children_with_tokens()"}, {"sha": "e54c3f430c3e0b447170ffe72c1930c4e55c91eb", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d308f17a211068971858551a1bd9149abdf09d35/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d308f17a211068971858551a1bd9149abdf09d35/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=d308f17a211068971858551a1bd9149abdf09d35", "patch": "@@ -641,6 +641,15 @@ impl ast::SlicePat {\n     }\n }\n \n+impl ast::IdentPat {\n+    pub fn is_simple_ident(&self) -> bool {\n+        self.at_token().is_none()\n+            && self.mut_token().is_none()\n+            && self.ref_token().is_none()\n+            && self.pat().is_none()\n+    }\n+}\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum SelfParamKind {\n     /// self"}]}