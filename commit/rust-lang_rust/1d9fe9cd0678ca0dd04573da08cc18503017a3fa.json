{"sha": "1d9fe9cd0678ca0dd04573da08cc18503017a3fa", "node_id": "C_kwDOAAsO6NoAKDFkOWZlOWNkMDY3OGNhMGRkMDQ1NzNkYTA4Y2MxODUwMzAxN2EzZmE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-06T22:12:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-06T22:12:04Z"}, "message": "Rollup merge of #90627 - camelid:suggest-box-deref, r=davidtwco\n\nSuggest dereference of `Box` when inner type is expected\n\nFor example:\n\n    enum Ty {\n        Unit,\n        List(Box<Ty>),\n    }\n\n    fn foo(x: Ty) -> Ty {\n        match x {\n            Ty::Unit => Ty::Unit,\n            Ty::List(elem) => foo(elem),\n        }\n    }\n\nBefore, the only suggestion was to rewrap `inner` with `Ty::Wrapper`,\nwhich is unhelpful and confusing:\n\n    error[E0308]: mismatched types\n     --> src/test/ui/suggestions/boxed-variant-field.rs:9:31\n      |\n    9 |         Ty::List(elem) => foo(elem),\n      |                               ^^^^\n      |                               |\n      |                               expected enum `Ty`, found struct `Box`\n      |                               help: try using a variant of the expected enum: `Ty::List(elem)`\n      |\n      = note: expected enum `Ty`\n               found struct `Box<Ty>`\n\nNow, rustc will first suggest dereferencing the `Box`, which is most\nlikely what the user intended:\n\n    error[E0308]: mismatched types\n     --> src/test/ui/suggestions/boxed-variant-field.rs:9:31\n      |\n    9 |         Ty::List(elem) => foo(elem),\n      |                               ^^^^ expected enum `Ty`, found struct `Box`\n      |\n      = note: expected enum `Ty`\n               found struct `Box<Ty>`\n    help: try dereferencing the `Box`\n      |\n    9 |         Ty::List(elem) => foo(*elem),\n      |                               +\n    help: try using a variant of the expected enum\n      |\n    9 |         Ty::List(elem) => foo(Ty::List(elem)),\n      |                               ~~~~~~~~~~~~~~\n\nr? ``@davidtwco``", "tree": {"sha": "69b0579a935e17af7f0ff605883b3d5f2ae8923d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69b0579a935e17af7f0ff605883b3d5f2ae8923d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d9fe9cd0678ca0dd04573da08cc18503017a3fa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhhv20CRBK7hj4Ov3rIwAAn9EIAA9zjrLICJMorD+mnxusdfzA\n9k2UPb6xscCqu0YQULeMJopU9kD3SU2WBLLKLcL/ZbF2VPDMQ0l1yVve9iepmR0+\nSjGg5ZdCcu5NZ2nCAawrXL1SuTfNs+ACEDhS285TzsExeVc924W1vXii0RzRDGnY\nbnHWklAAkepauyz/DUyVDO06WBmTO7dj06XEL9sGZELHQ8UV1EveRn0/hIjKAb2t\n1hDj8AyljtmqbvNW7mqrWMK5slorjs31nUQle9BKC/uWhK13Fi7lGxMFpITQW6qy\nTaZn6HJ2ur096r48TJ+JFKuA0OPP4eXz2mJSC+GZ+ERtWdW9V0nx9a5HCHv5oyE=\n=1Lcg\n-----END PGP SIGNATURE-----\n", "payload": "tree 69b0579a935e17af7f0ff605883b3d5f2ae8923d\nparent 4c49db35fc671a522dbe07bfbeda8c7e7897108c\nparent d93f7f93c44a7106071411224c0615c7cfcb2468\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1636236724 +0100\ncommitter GitHub <noreply@github.com> 1636236724 +0100\n\nRollup merge of #90627 - camelid:suggest-box-deref, r=davidtwco\n\nSuggest dereference of `Box` when inner type is expected\n\nFor example:\n\n    enum Ty {\n        Unit,\n        List(Box<Ty>),\n    }\n\n    fn foo(x: Ty) -> Ty {\n        match x {\n            Ty::Unit => Ty::Unit,\n            Ty::List(elem) => foo(elem),\n        }\n    }\n\nBefore, the only suggestion was to rewrap `inner` with `Ty::Wrapper`,\nwhich is unhelpful and confusing:\n\n    error[E0308]: mismatched types\n     --> src/test/ui/suggestions/boxed-variant-field.rs:9:31\n      |\n    9 |         Ty::List(elem) => foo(elem),\n      |                               ^^^^\n      |                               |\n      |                               expected enum `Ty`, found struct `Box`\n      |                               help: try using a variant of the expected enum: `Ty::List(elem)`\n      |\n      = note: expected enum `Ty`\n               found struct `Box<Ty>`\n\nNow, rustc will first suggest dereferencing the `Box`, which is most\nlikely what the user intended:\n\n    error[E0308]: mismatched types\n     --> src/test/ui/suggestions/boxed-variant-field.rs:9:31\n      |\n    9 |         Ty::List(elem) => foo(elem),\n      |                               ^^^^ expected enum `Ty`, found struct `Box`\n      |\n      = note: expected enum `Ty`\n               found struct `Box<Ty>`\n    help: try dereferencing the `Box`\n      |\n    9 |         Ty::List(elem) => foo(*elem),\n      |                               +\n    help: try using a variant of the expected enum\n      |\n    9 |         Ty::List(elem) => foo(Ty::List(elem)),\n      |                               ~~~~~~~~~~~~~~\n\nr? ``@davidtwco``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d9fe9cd0678ca0dd04573da08cc18503017a3fa", "html_url": "https://github.com/rust-lang/rust/commit/1d9fe9cd0678ca0dd04573da08cc18503017a3fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d9fe9cd0678ca0dd04573da08cc18503017a3fa/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c49db35fc671a522dbe07bfbeda8c7e7897108c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c49db35fc671a522dbe07bfbeda8c7e7897108c", "html_url": "https://github.com/rust-lang/rust/commit/4c49db35fc671a522dbe07bfbeda8c7e7897108c"}, {"sha": "d93f7f93c44a7106071411224c0615c7cfcb2468", "url": "https://api.github.com/repos/rust-lang/rust/commits/d93f7f93c44a7106071411224c0615c7cfcb2468", "html_url": "https://github.com/rust-lang/rust/commit/d93f7f93c44a7106071411224c0615c7cfcb2468"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "0cbbcdd107371d56c4c525ceae17595d6f9db697", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1d9fe9cd0678ca0dd04573da08cc18503017a3fa/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d9fe9cd0678ca0dd04573da08cc18503017a3fa/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=1d9fe9cd0678ca0dd04573da08cc18503017a3fa", "patch": "@@ -29,6 +29,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected_ty_expr: Option<&'tcx hir::Expr<'tcx>>,\n     ) {\n         self.annotate_expected_due_to_let_ty(err, expr);\n+        self.suggest_box_deref(err, expr, expected, expr_ty);\n         self.suggest_compatible_variants(err, expr, expected, expr_ty);\n         self.suggest_deref_ref_or_into(err, expr, expected, expr_ty, expected_ty_expr);\n         if self.suggest_calling_boxed_future_when_appropriate(err, expr, expected, expr_ty) {\n@@ -167,6 +168,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn suggest_box_deref(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        expr: &hir::Expr<'_>,\n+        expected: Ty<'tcx>,\n+        expr_ty: Ty<'tcx>,\n+    ) {\n+        if expr_ty.is_box() && expr_ty.boxed_ty() == expected {\n+            err.span_suggestion_verbose(\n+                expr.span.shrink_to_lo(),\n+                \"try dereferencing the `Box`\",\n+                \"*\".to_string(),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+\n     /// If the expected type is an enum (Issue #55250) with any variants whose\n     /// sole field is of the found type, suggest such variants. (Issue #42764)\n     fn suggest_compatible_variants("}, {"sha": "d8f7fac15135635b10cb4d8b1df9772a35d594d0", "filename": "src/test/ui/suggestions/boxed-variant-field.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1d9fe9cd0678ca0dd04573da08cc18503017a3fa/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d9fe9cd0678ca0dd04573da08cc18503017a3fa/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.rs?ref=1d9fe9cd0678ca0dd04573da08cc18503017a3fa", "patch": "@@ -0,0 +1,16 @@\n+enum Ty {\n+    Unit,\n+    List(Box<Ty>),\n+}\n+\n+fn foo(x: Ty) -> Ty {\n+    match x {\n+        Ty::Unit => Ty::Unit,\n+        Ty::List(elem) => foo(elem),\n+        //~^ ERROR mismatched types\n+        //~| HELP try dereferencing the `Box`\n+        //~| HELP try using a variant of the expected enum\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d4ccb2ca490bc0f9fb0f899cda5fc8565645d71d", "filename": "src/test/ui/suggestions/boxed-variant-field.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1d9fe9cd0678ca0dd04573da08cc18503017a3fa/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d9fe9cd0678ca0dd04573da08cc18503017a3fa/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.stderr?ref=1d9fe9cd0678ca0dd04573da08cc18503017a3fa", "patch": "@@ -0,0 +1,20 @@\n+error[E0308]: mismatched types\n+  --> $DIR/boxed-variant-field.rs:9:31\n+   |\n+LL |         Ty::List(elem) => foo(elem),\n+   |                               ^^^^ expected enum `Ty`, found struct `Box`\n+   |\n+   = note: expected enum `Ty`\n+            found struct `Box<Ty>`\n+help: try dereferencing the `Box`\n+   |\n+LL |         Ty::List(elem) => foo(*elem),\n+   |                               +\n+help: try using a variant of the expected enum\n+   |\n+LL |         Ty::List(elem) => foo(Ty::List(elem)),\n+   |                               ~~~~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "65d90678040d5ff094278cde42b3bb483ad2d067", "filename": "src/test/ui/terr-sorts.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d9fe9cd0678ca0dd04573da08cc18503017a3fa/src%2Ftest%2Fui%2Fterr-sorts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d9fe9cd0678ca0dd04573da08cc18503017a3fa/src%2Ftest%2Fui%2Fterr-sorts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterr-sorts.stderr?ref=1d9fe9cd0678ca0dd04573da08cc18503017a3fa", "patch": "@@ -6,6 +6,10 @@ LL |     want_foo(b);\n    |\n    = note: expected struct `Foo`\n               found struct `Box<Foo>`\n+help: try dereferencing the `Box`\n+   |\n+LL |     want_foo(*b);\n+   |              +\n \n error: aborting due to previous error\n "}]}