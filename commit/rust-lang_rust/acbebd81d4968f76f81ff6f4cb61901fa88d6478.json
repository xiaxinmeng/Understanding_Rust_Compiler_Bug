{"sha": "acbebd81d4968f76f81ff6f4cb61901fa88d6478", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYmViZDgxZDQ5NjhmNzZmODFmZjZmNGNiNjE5MDFmYTg4ZDY0Nzg=", "commit": {"author": {"name": "Daiki Ihara", "email": "sasurau4@gmail.com", "date": "2020-11-30T14:24:08Z"}, "committer": {"name": "Daiki Ihara", "email": "sasurau4@gmail.com", "date": "2020-12-21T12:40:47Z"}, "message": "add suggest for PatternsInWithoutBody", "tree": {"sha": "918aa68d69adada855d7fe8a3681afbdb38b7c70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/918aa68d69adada855d7fe8a3681afbdb38b7c70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acbebd81d4968f76f81ff6f4cb61901fa88d6478", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acbebd81d4968f76f81ff6f4cb61901fa88d6478", "html_url": "https://github.com/rust-lang/rust/commit/acbebd81d4968f76f81ff6f4cb61901fa88d6478", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acbebd81d4968f76f81ff6f4cb61901fa88d6478/comments", "author": {"login": "sasurau4", "id": 13580199, "node_id": "MDQ6VXNlcjEzNTgwMTk5", "avatar_url": "https://avatars.githubusercontent.com/u/13580199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sasurau4", "html_url": "https://github.com/sasurau4", "followers_url": "https://api.github.com/users/sasurau4/followers", "following_url": "https://api.github.com/users/sasurau4/following{/other_user}", "gists_url": "https://api.github.com/users/sasurau4/gists{/gist_id}", "starred_url": "https://api.github.com/users/sasurau4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sasurau4/subscriptions", "organizations_url": "https://api.github.com/users/sasurau4/orgs", "repos_url": "https://api.github.com/users/sasurau4/repos", "events_url": "https://api.github.com/users/sasurau4/events{/privacy}", "received_events_url": "https://api.github.com/users/sasurau4/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sasurau4", "id": 13580199, "node_id": "MDQ6VXNlcjEzNTgwMTk5", "avatar_url": "https://avatars.githubusercontent.com/u/13580199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sasurau4", "html_url": "https://github.com/sasurau4", "followers_url": "https://api.github.com/users/sasurau4/followers", "following_url": "https://api.github.com/users/sasurau4/following{/other_user}", "gists_url": "https://api.github.com/users/sasurau4/gists{/gist_id}", "starred_url": "https://api.github.com/users/sasurau4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sasurau4/subscriptions", "organizations_url": "https://api.github.com/users/sasurau4/orgs", "repos_url": "https://api.github.com/users/sasurau4/repos", "events_url": "https://api.github.com/users/sasurau4/events{/privacy}", "received_events_url": "https://api.github.com/users/sasurau4/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "463ce4042835526f0bd7bf50d6905ed7e2004a2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/463ce4042835526f0bd7bf50d6905ed7e2004a2e", "html_url": "https://github.com/rust-lang/rust/commit/463ce4042835526f0bd7bf50d6905ed7e2004a2e"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "8718bba1fd6d4f3fc4df36bc95651c8400c3b5dc", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/acbebd81d4968f76f81ff6f4cb61901fa88d6478/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acbebd81d4968f76f81ff6f4cb61901fa88d6478/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=acbebd81d4968f76f81ff6f4cb61901fa88d6478", "patch": "@@ -16,7 +16,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{error_code, pluralize, struct_span_err, Applicability};\n use rustc_parse::validate_attr;\n use rustc_session::lint::builtin::PATTERNS_IN_FNS_WITHOUT_BODY;\n-use rustc_session::lint::LintBuffer;\n+use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::Session;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Span;\n@@ -213,14 +213,14 @@ impl<'a> AstValidator<'a> {\n         err.emit();\n     }\n \n-    fn check_decl_no_pat(decl: &FnDecl, mut report_err: impl FnMut(Span, bool)) {\n+    fn check_decl_no_pat(decl: &FnDecl, mut report_err: impl FnMut(Span, Option<Ident>, bool)) {\n         for Param { pat, .. } in &decl.inputs {\n             match pat.kind {\n                 PatKind::Ident(BindingMode::ByValue(Mutability::Not), _, None) | PatKind::Wild => {}\n-                PatKind::Ident(BindingMode::ByValue(Mutability::Mut), _, None) => {\n-                    report_err(pat.span, true)\n+                PatKind::Ident(BindingMode::ByValue(Mutability::Mut), ident, None) => {\n+                    report_err(pat.span, Some(ident), true)\n                 }\n-                _ => report_err(pat.span, false),\n+                _ => report_err(pat.span, None, false),\n             }\n         }\n     }\n@@ -815,7 +815,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         match ty.kind {\n             TyKind::BareFn(ref bfty) => {\n                 self.check_fn_decl(&bfty.decl, SelfSemantic::No);\n-                Self::check_decl_no_pat(&bfty.decl, |span, _| {\n+                Self::check_decl_no_pat(&bfty.decl, |span, _, _| {\n                     struct_span_err!(\n                         self.session,\n                         span,\n@@ -1285,7 +1285,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n         // Functions without bodies cannot have patterns.\n         if let FnKind::Fn(ctxt, _, sig, _, None) = fk {\n-            Self::check_decl_no_pat(&sig.decl, |span, mut_ident| {\n+            Self::check_decl_no_pat(&sig.decl, |span, ident, mut_ident| {\n                 let (code, msg, label) = match ctxt {\n                     FnCtxt::Foreign => (\n                         error_code!(E0130),\n@@ -1299,7 +1299,16 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     ),\n                 };\n                 if mut_ident && matches!(ctxt, FnCtxt::Assoc(_)) {\n-                    self.lint_buffer.buffer_lint(PATTERNS_IN_FNS_WITHOUT_BODY, id, span, msg);\n+                    if let Some(ident) = ident {\n+                        let diag = BuiltinLintDiagnostics::PatternsInFnsWithoutBody(span, ident);\n+                        self.lint_buffer.buffer_lint_with_diagnostic(\n+                            PATTERNS_IN_FNS_WITHOUT_BODY,\n+                            id,\n+                            span,\n+                            msg,\n+                            diag,\n+                        )\n+                    }\n                 } else {\n                     self.err_handler()\n                         .struct_span_err(span, msg)"}, {"sha": "d0e46426ff5317958d159d82f5d87a2c3c4d053d", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/acbebd81d4968f76f81ff6f4cb61901fa88d6478/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acbebd81d4968f76f81ff6f4cb61901fa88d6478/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=acbebd81d4968f76f81ff6f4cb61901fa88d6478", "patch": "@@ -596,6 +596,9 @@ pub trait LintContext: Sized {\n                     db.help(\"to document an item produced by a macro, \\\n                                   the macro must produce the documentation as part of its expansion\");\n                 }\n+                BuiltinLintDiagnostics::PatternsInFnsWithoutBody(span, ident) => {\n+                    db.span_suggestion(span, \"remove `mut` from the parameter\", ident.to_string(), Applicability::MachineApplicable);\n+                }\n             }\n             // Rewrap `db`, and pass control to the user.\n             decorate(LintDiagnosticBuilder::new(db));"}, {"sha": "2bfc6a8557691b54edc0488b915774bbc3a8fe76", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acbebd81d4968f76f81ff6f4cb61901fa88d6478/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acbebd81d4968f76f81ff6f4cb61901fa88d6478/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=acbebd81d4968f76f81ff6f4cb61901fa88d6478", "patch": "@@ -253,6 +253,7 @@ pub enum BuiltinLintDiagnostics {\n     RedundantImport(Vec<(Span, bool)>, Ident),\n     DeprecatedMacro(Option<Symbol>, Span),\n     UnusedDocComment(Span),\n+    PatternsInFnsWithoutBody(Span, Ident),\n }\n \n /// Lints that are buffered up early on in the `Session` before the"}]}