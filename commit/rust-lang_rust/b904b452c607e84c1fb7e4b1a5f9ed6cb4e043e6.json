{"sha": "b904b452c607e84c1fb7e4b1a5f9ed6cb4e043e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MDRiNDUyYzYwN2U4NGMxZmI3ZTRiMWE1ZjllZDZjYjRlMDQzZTY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-07-29T20:13:54Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-07-29T20:13:54Z"}, "message": "Rollup merge of #27373 - alexcrichton:fix-wait-timeout-ms, r=brson\n\nThe API we're calling requires us to pass an absolute point in time as an\r\nargument (`pthread_cond_timedwait`) so we call `gettimeofday` ahead of time to\r\nthen add the specified duration to. Unfortuantely the current \"add the duration\"\r\nlogic forgot to take into account the current time's sub-second precision (e.g.\r\nthe `tv_usec` field was ignored), causing sub-second duration waits to return\r\nspuriously.", "tree": {"sha": "57a8be42abc195e1508f7b5abb2e454bab4f97a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57a8be42abc195e1508f7b5abb2e454bab4f97a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b904b452c607e84c1fb7e4b1a5f9ed6cb4e043e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b904b452c607e84c1fb7e4b1a5f9ed6cb4e043e6", "html_url": "https://github.com/rust-lang/rust/commit/b904b452c607e84c1fb7e4b1a5f9ed6cb4e043e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b904b452c607e84c1fb7e4b1a5f9ed6cb4e043e6/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35d95515f3de27c0e1a7d67893fcad8d0ad6fac9", "url": "https://api.github.com/repos/rust-lang/rust/commits/35d95515f3de27c0e1a7d67893fcad8d0ad6fac9", "html_url": "https://github.com/rust-lang/rust/commit/35d95515f3de27c0e1a7d67893fcad8d0ad6fac9"}, {"sha": "43b2c4781e5d6e25dedfc480218ceda92d9dffad", "url": "https://api.github.com/repos/rust-lang/rust/commits/43b2c4781e5d6e25dedfc480218ceda92d9dffad", "html_url": "https://github.com/rust-lang/rust/commit/43b2c4781e5d6e25dedfc480218ceda92d9dffad"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "beecb445e8d687fd6ab6aefd5804f3ec0cf68a78", "filename": "src/libstd/sys/unix/condvar.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b904b452c607e84c1fb7e4b1a5f9ed6cb4e043e6/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b904b452c607e84c1fb7e4b1a5f9ed6cb4e043e6/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs?ref=b904b452c607e84c1fb7e4b1a5f9ed6cb4e043e6", "patch": "@@ -60,21 +60,22 @@ impl Condvar {\n         let r = ffi::gettimeofday(&mut sys_now, ptr::null_mut());\n         debug_assert_eq!(r, 0);\n \n+        let nsec = dur.extra_nanos() as libc::c_long +\n+                   (sys_now.tv_usec * 1000) as libc::c_long;\n+        let extra = (nsec / 1_000_000_000) as libc::time_t;\n+        let nsec = nsec % 1_000_000_000;\n         let seconds = dur.secs() as libc::time_t;\n-        let timeout = match sys_now.tv_sec.checked_add(seconds) {\n-            Some(sec) => {\n-                libc::timespec {\n-                    tv_sec: sec,\n-                    tv_nsec: dur.extra_nanos() as libc::c_long,\n-                }\n-            }\n-            None => {\n-                libc::timespec {\n-                    tv_sec: <libc::time_t>::max_value(),\n-                    tv_nsec: 1_000_000_000 - 1,\n-                }\n+\n+        let timeout = sys_now.tv_sec.checked_add(extra).and_then(|s| {\n+            s.checked_add(seconds)\n+        }).map(|s| {\n+            libc::timespec { tv_sec: s, tv_nsec: nsec }\n+        }).unwrap_or_else(|| {\n+            libc::timespec {\n+                tv_sec: <libc::time_t>::max_value(),\n+                tv_nsec: 1_000_000_000 - 1,\n             }\n-        };\n+        });\n \n         // And wait!\n         let r = ffi::pthread_cond_timedwait(self.inner.get(), mutex::raw(mutex),"}]}