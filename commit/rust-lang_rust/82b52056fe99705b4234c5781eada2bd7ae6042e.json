{"sha": "82b52056fe99705b4234c5781eada2bd7ae6042e", "node_id": "C_kwDOAAsO6NoAKDgyYjUyMDU2ZmU5OTcwNWI0MjM0YzU3ODFlYWRhMmJkN2FlNjA0MmU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-10T02:10:42Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-18T19:32:58Z"}, "message": "Check that built-in callable types validate their output type is `Sized` (in new solver)", "tree": {"sha": "ed9a5baf83c9879c7de33adb6a88cd5990654de9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed9a5baf83c9879c7de33adb6a88cd5990654de9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82b52056fe99705b4234c5781eada2bd7ae6042e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82b52056fe99705b4234c5781eada2bd7ae6042e", "html_url": "https://github.com/rust-lang/rust/commit/82b52056fe99705b4234c5781eada2bd7ae6042e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82b52056fe99705b4234c5781eada2bd7ae6042e/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3eb5c4581a386b13c414e8c8bd73846ef37236d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eb5c4581a386b13c414e8c8bd73846ef37236d1", "html_url": "https://github.com/rust-lang/rust/commit/3eb5c4581a386b13c414e8c8bd73846ef37236d1"}], "stats": {"total": 94, "additions": 80, "deletions": 14}, "files": [{"sha": "a9e0c5509a5e99791a530c4fa16e205c00998eac", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82b52056fe99705b4234c5781eada2bd7ae6042e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b52056fe99705b4234c5781eada2bd7ae6042e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=82b52056fe99705b4234c5781eada2bd7ae6042e", "patch": "@@ -96,10 +96,22 @@ pub(super) trait GoalKind<'tcx>: TypeFoldable<'tcx> + Copy + Eq {\n         impl_def_id: DefId,\n     ) -> QueryResult<'tcx>;\n \n+    // Consider a predicate we know holds (`assumption`) against a goal we're trying to prove.\n     fn consider_assumption(\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n         assumption: ty::Predicate<'tcx>,\n+    ) -> QueryResult<'tcx> {\n+        Self::consider_assumption_with_certainty(ecx, goal, assumption, Certainty::Yes)\n+    }\n+\n+    // Consider a predicate we know holds (`assumption`) against a goal, unifying with\n+    // the `assumption_certainty` if it satisfies the goal.\n+    fn consider_assumption_with_certainty(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+        assumption: ty::Predicate<'tcx>,\n+        assumption_certainty: Certainty,\n     ) -> QueryResult<'tcx>;\n \n     // A type implements an `auto trait` if its components do as well. These components"}, {"sha": "adf8a1690c83a3aa607373d06c3a36bf21b13b1f", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/82b52056fe99705b4234c5781eada2bd7ae6042e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b52056fe99705b4234c5781eada2bd7ae6042e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=82b52056fe99705b4234c5781eada2bd7ae6042e", "patch": "@@ -260,10 +260,11 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n         })\n     }\n \n-    fn consider_assumption(\n+    fn consider_assumption_with_certainty(\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n         assumption: ty::Predicate<'tcx>,\n+        assumption_certainty: Certainty,\n     ) -> QueryResult<'tcx> {\n         if let Some(poly_projection_pred) = assumption.to_opt_poly_projection_pred()\n             && poly_projection_pred.projection_def_id() == goal.predicate.def_id()\n@@ -280,7 +281,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n \n                 ecx.eq_term_and_make_canonical_response(\n                     goal,\n-                    subst_certainty,\n+                    subst_certainty.unify_and(assumption_certainty),\n                     assumption_projection_pred.term,\n                 )\n             })\n@@ -329,22 +330,29 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n         goal: Goal<'tcx, Self>,\n         goal_kind: ty::ClosureKind,\n     ) -> QueryResult<'tcx> {\n+        let tcx = ecx.tcx();\n         if let Some(tupled_inputs_and_output) =\n             structural_traits::extract_tupled_inputs_and_output_from_callable(\n-                ecx.tcx(),\n+                tcx,\n                 goal.predicate.self_ty(),\n                 goal_kind,\n             )?\n         {\n+            // A built-in `Fn` trait needs to check that its output is `Sized`\n+            // (FIXME: technically we only need to check this if the type is a fn ptr...)\n+            let output_is_sized_pred = tupled_inputs_and_output\n+                .map_bound(|(_, output)| tcx.at(DUMMY_SP).mk_trait_ref(LangItem::Sized, [output]));\n+            let (_, output_is_sized_certainty) =\n+                ecx.evaluate_goal(goal.with(tcx, output_is_sized_pred))?;\n+\n             let pred = tupled_inputs_and_output\n                 .map_bound(|(inputs, output)| ty::ProjectionPredicate {\n-                    projection_ty: ecx\n-                        .tcx()\n+                    projection_ty: tcx\n                         .mk_alias_ty(goal.predicate.def_id(), [goal.predicate.self_ty(), inputs]),\n                     term: output.into(),\n                 })\n-                .to_predicate(ecx.tcx());\n-            Self::consider_assumption(ecx, goal, pred)\n+                .to_predicate(tcx);\n+            Self::consider_assumption_with_certainty(ecx, goal, pred, output_is_sized_certainty)\n         } else {\n             ecx.make_canonical_response(Certainty::AMBIGUOUS)\n         }"}, {"sha": "dd47a5ae15077158ef3986eede8d410ec05c307d", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/82b52056fe99705b4234c5781eada2bd7ae6042e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b52056fe99705b4234c5781eada2bd7ae6042e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=82b52056fe99705b4234c5781eada2bd7ae6042e", "patch": "@@ -6,6 +6,7 @@ use super::assembly;\n use super::infcx_ext::InferCtxtExt;\n use super::{CanonicalResponse, Certainty, EvalCtxt, Goal, QueryResult};\n use rustc_hir::def_id::DefId;\n+use rustc_hir::LangItem;\n use rustc_infer::infer::InferCtxt;\n use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::util::supertraits;\n@@ -61,10 +62,11 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         })\n     }\n \n-    fn consider_assumption(\n+    fn consider_assumption_with_certainty(\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n         assumption: ty::Predicate<'tcx>,\n+        assumption_certainty: Certainty,\n     ) -> QueryResult<'tcx> {\n         if let Some(poly_trait_pred) = assumption.to_opt_poly_trait_pred()\n             && poly_trait_pred.def_id() == goal.predicate.def_id()\n@@ -78,7 +80,9 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                     goal.predicate.trait_ref,\n                     assumption_trait_pred.trait_ref,\n                 )?;\n-                ecx.evaluate_all_and_make_canonical_response(nested_goals)\n+                ecx.evaluate_all(nested_goals).and_then(|certainty| {\n+                    ecx.make_canonical_response(certainty.unify_and(assumption_certainty))\n+                })\n             })\n         } else {\n             Err(NoSolution)\n@@ -173,20 +177,27 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         goal: Goal<'tcx, Self>,\n         goal_kind: ty::ClosureKind,\n     ) -> QueryResult<'tcx> {\n+        let tcx = ecx.tcx();\n         if let Some(tupled_inputs_and_output) =\n             structural_traits::extract_tupled_inputs_and_output_from_callable(\n-                ecx.tcx(),\n+                tcx,\n                 goal.predicate.self_ty(),\n                 goal_kind,\n             )?\n         {\n+            // A built-in `Fn` trait needs to check that its output is `Sized`\n+            // (FIXME: technically we only need to check this if the type is a fn ptr...)\n+            let output_is_sized_pred = tupled_inputs_and_output\n+                .map_bound(|(_, output)| tcx.at(DUMMY_SP).mk_trait_ref(LangItem::Sized, [output]));\n+            let (_, output_is_sized_certainty) =\n+                ecx.evaluate_goal(goal.with(tcx, output_is_sized_pred))?;\n+\n             let pred = tupled_inputs_and_output\n                 .map_bound(|(inputs, _)| {\n-                    ecx.tcx()\n-                        .mk_trait_ref(goal.predicate.def_id(), [goal.predicate.self_ty(), inputs])\n+                    tcx.mk_trait_ref(goal.predicate.def_id(), [goal.predicate.self_ty(), inputs])\n                 })\n-                .to_predicate(ecx.tcx());\n-            Self::consider_assumption(ecx, goal, pred)\n+                .to_predicate(tcx);\n+            Self::consider_assumption_with_certainty(ecx, goal, pred, output_is_sized_certainty)\n         } else {\n             ecx.make_canonical_response(Certainty::AMBIGUOUS)\n         }"}, {"sha": "ba473653ecfe328ff545df1011a644ab097e6cf8", "filename": "tests/ui/traits/new-solver/builtin-fn-must-return-sized.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/82b52056fe99705b4234c5781eada2bd7ae6042e/tests%2Fui%2Ftraits%2Fnew-solver%2Fbuiltin-fn-must-return-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b52056fe99705b4234c5781eada2bd7ae6042e/tests%2Fui%2Ftraits%2Fnew-solver%2Fbuiltin-fn-must-return-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fbuiltin-fn-must-return-sized.rs?ref=82b52056fe99705b4234c5781eada2bd7ae6042e", "patch": "@@ -0,0 +1,17 @@\n+// compile-flags: -Ztrait-solver=next\n+\n+#![feature(fn_traits)]\n+#![feature(unboxed_closures)]\n+#![feature(tuple_trait)]\n+\n+use std::ops::Fn;\n+use std::marker::Tuple;\n+\n+fn foo<F: Fn<T>, T: Tuple>(f: Option<F>, t: T) {\n+    let y = (f.unwrap()).call(t);\n+}\n+\n+fn main() {\n+    foo::<fn() -> str, _>(None, ());\n+    //~^ expected a `Fn<_>` closure, found `fn() -> str`\n+}"}, {"sha": "f7551739b13286dfa23e7b8e8c4bc74ceec00980", "filename": "tests/ui/traits/new-solver/builtin-fn-must-return-sized.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/82b52056fe99705b4234c5781eada2bd7ae6042e/tests%2Fui%2Ftraits%2Fnew-solver%2Fbuiltin-fn-must-return-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82b52056fe99705b4234c5781eada2bd7ae6042e/tests%2Fui%2Ftraits%2Fnew-solver%2Fbuiltin-fn-must-return-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fbuiltin-fn-must-return-sized.stderr?ref=82b52056fe99705b4234c5781eada2bd7ae6042e", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: expected a `Fn<_>` closure, found `fn() -> str`\n+  --> $DIR/builtin-fn-must-return-sized.rs:15:27\n+   |\n+LL |     foo::<fn() -> str, _>(None, ());\n+   |     --------------------- ^^^^ expected an `Fn<_>` closure, found `fn() -> str`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Fn<_>` is not implemented for `fn() -> str`\n+note: required by a bound in `foo`\n+  --> $DIR/builtin-fn-must-return-sized.rs:10:11\n+   |\n+LL | fn foo<F: Fn<T>, T: Tuple>(f: Option<F>, t: T) {\n+   |           ^^^^^ required by this bound in `foo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}