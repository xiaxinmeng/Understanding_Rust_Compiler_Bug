{"sha": "98e3e82ecea8b3b2100362e6fa87dc76779855bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZTNlODJlY2VhOGIzYjIxMDAzNjJlNmZhODdkYzc2Nzc5ODU1YmM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-17T18:52:58Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-25T10:26:47Z"}, "message": "Use UFCS", "tree": {"sha": "f248637d9e4660b5428afa29cc7ae58bfb1aba1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f248637d9e4660b5428afa29cc7ae58bfb1aba1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98e3e82ecea8b3b2100362e6fa87dc76779855bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98e3e82ecea8b3b2100362e6fa87dc76779855bc", "html_url": "https://github.com/rust-lang/rust/commit/98e3e82ecea8b3b2100362e6fa87dc76779855bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98e3e82ecea8b3b2100362e6fa87dc76779855bc/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6330bf24fe2641cec2045fdfaab439f96c35652a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6330bf24fe2641cec2045fdfaab439f96c35652a", "html_url": "https://github.com/rust-lang/rust/commit/6330bf24fe2641cec2045fdfaab439f96c35652a"}], "stats": {"total": 43, "additions": 21, "deletions": 22}, "files": [{"sha": "2e9169ce5b942920c16dc5426003888fd98ec8b7", "filename": "src/etc/generate-deriving-span-tests.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98e3e82ecea8b3b2100362e6fa87dc76779855bc/src%2Fetc%2Fgenerate-deriving-span-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/98e3e82ecea8b3b2100362e6fa87dc76779855bc/src%2Fetc%2Fgenerate-deriving-span-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgenerate-deriving-span-tests.py?ref=98e3e82ecea8b3b2100362e6fa87dc76779855bc", "patch": "@@ -122,7 +122,7 @@ def write_file(name, string):\n \n for (trait, supers, errs) in [('Clone', [], 1),\n                               ('PartialEq', [], 2),\n-                              ('PartialOrd', ['PartialEq'], 2),\n+                              ('PartialOrd', ['PartialEq'], 1),\n                               ('Eq', ['PartialEq'], 1),\n                               ('Ord', ['Eq', 'PartialOrd', 'PartialEq'], 1),\n                               ('Debug', [], 1),"}, {"sha": "f8c27bf42a943d2f3d5c51e2b226b564feef35d0", "filename": "src/libsyntax_ext/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/98e3e82ecea8b3b2100362e6fa87dc76779855bc/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e3e82ecea8b3b2100362e6fa87dc76779855bc/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=98e3e82ecea8b3b2100362e6fa87dc76779855bc", "patch": "@@ -201,21 +201,27 @@ fn cs_op(less: bool,\n         cx.expr_path(cx.path_global(span, cx.std_path(&[\"cmp\", \"Ordering\", name])))\n     };\n \n-    let par_cmp = |cx: &mut ExtCtxt, span: Span, self_f: P<Expr>, other_fs: &[P<Expr>]| {\n+    let par_cmp = |cx: &mut ExtCtxt, span, self_f: P<Expr>, other_fs: &[P<Expr>], default| {\n         let other_f = match (other_fs.len(), other_fs.get(0)) {\n             (1, Some(o_f)) => o_f,\n             _ => cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialOrd)`\"),\n         };\n \n-        // `self.fi.partial_cmp(other.fi)`\n-        let cmp = cx.expr_method_call(span,\n-                                      cx.expr_addr_of(span, self_f),\n-                                      Ident::from_str(\"partial_cmp\"),\n-                                      vec![cx.expr_addr_of(span, other_f.clone())]);\n+        // `PartialOrd::partial_cmp(self.fi, other.fi)`\n+        let cmp_path = cx.expr_path(cx.path_global(span, cx.std_path(&[\"cmp\",\n+                                                                       \"PartialOrd\",\n+                                                                       \"partial_cmp\"])));\n+        let cmp = cx.expr_call(span,\n+                               cmp_path,\n+                               vec![cx.expr_addr_of(span, self_f),\n+                                    cx.expr_addr_of(span, other_f.clone())]);\n \n-        let default = ordering_path(cx, \"Equal\");\n-        // `_.unwrap_or(Ordering::Equal)`\n-        cx.expr_method_call(span, cmp, Ident::from_str(\"unwrap_or\"), vec![default])\n+        let default = ordering_path(cx, default);\n+        // `Option::unwrap_or(_, Ordering::Equal)`\n+        let unwrap_path = cx.expr_path(cx.path_global(span, cx.std_path(&[\"option\",\n+                                                                          \"Option\",\n+                                                                          \"unwrap_or\"])));\n+        cx.expr_call(span, unwrap_path, vec![cmp, default])\n     };\n \n     let fold = cs_fold1(false, // need foldr\n@@ -244,7 +250,7 @@ fn cs_op(less: bool,\n             // layers of pointers, if the type includes pointers.\n \n             // `self.fi.partial_cmp(other.fi).unwrap_or(Ordering::Equal)`\n-            let par_cmp = par_cmp(cx, span, self_f, other_fs);\n+            let par_cmp = par_cmp(cx, span, self_f, other_fs, \"Equal\");\n \n             // `self.fi.partial_cmp(other.fi).unwrap_or(Ordering::Equal).then_with(...)`\n             cx.expr_method_call(span,\n@@ -254,7 +260,10 @@ fn cs_op(less: bool,\n         },\n         |cx, args| {\n             match args {\n-                Some((span, self_f, other_fs)) => par_cmp(cx, span, self_f, other_fs),\n+                Some((span, self_f, other_fs)) => {\n+                    let opposite = if less { \"Greater\" } else { \"Less\" };\n+                    par_cmp(cx, span, self_f, other_fs, opposite)\n+                },\n                 None => cx.expr_bool(span, inclusive)\n             }\n         },"}, {"sha": "a5df717e06ba91401e86ed83f43d9ac2d04fc3f4", "filename": "src/test/compile-fail/derives-span-PartialOrd-enum-struct-variant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98e3e82ecea8b3b2100362e6fa87dc76779855bc/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialOrd-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e3e82ecea8b3b2100362e6fa87dc76779855bc/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialOrd-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialOrd-enum-struct-variant.rs?ref=98e3e82ecea8b3b2100362e6fa87dc76779855bc", "patch": "@@ -17,7 +17,6 @@ struct Error;\n enum Enum {\n    A {\n      x: Error //~ ERROR\n-//~^ ERROR\n    }\n }\n "}, {"sha": "3411d2f3119ec4af87418e9297bbd015bde6b29c", "filename": "src/test/compile-fail/derives-span-PartialOrd-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98e3e82ecea8b3b2100362e6fa87dc76779855bc/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialOrd-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e3e82ecea8b3b2100362e6fa87dc76779855bc/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialOrd-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialOrd-enum.rs?ref=98e3e82ecea8b3b2100362e6fa87dc76779855bc", "patch": "@@ -17,7 +17,6 @@ struct Error;\n enum Enum {\n    A(\n      Error //~ ERROR\n-//~^ ERROR\n      )\n }\n "}, {"sha": "1feadc2fd83b5c2b4ef0472b413449dcc389f8d4", "filename": "src/test/compile-fail/derives-span-PartialOrd-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98e3e82ecea8b3b2100362e6fa87dc76779855bc/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialOrd-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e3e82ecea8b3b2100362e6fa87dc76779855bc/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialOrd-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialOrd-struct.rs?ref=98e3e82ecea8b3b2100362e6fa87dc76779855bc", "patch": "@@ -16,7 +16,6 @@ struct Error;\n #[derive(PartialOrd,PartialEq)]\n struct Struct {\n     x: Error //~ ERROR\n-//~^ ERROR\n }\n \n fn main() {}"}, {"sha": "9db0fed2d9e9d543dd4688ae5516e55afd55bf35", "filename": "src/test/compile-fail/derives-span-PartialOrd-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98e3e82ecea8b3b2100362e6fa87dc76779855bc/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialOrd-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e3e82ecea8b3b2100362e6fa87dc76779855bc/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialOrd-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderives-span-PartialOrd-tuple-struct.rs?ref=98e3e82ecea8b3b2100362e6fa87dc76779855bc", "patch": "@@ -16,7 +16,6 @@ struct Error;\n #[derive(PartialOrd,PartialEq)]\n struct Struct(\n     Error //~ ERROR\n-//~^ ERROR\n );\n \n fn main() {}"}, {"sha": "32f9b83b6e2c77f556439d8e5cbf4851f1ecca11", "filename": "src/test/compile-fail/range_traits-1.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98e3e82ecea8b3b2100362e6fa87dc76779855bc/src%2Ftest%2Fcompile-fail%2Frange_traits-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e3e82ecea8b3b2100362e6fa87dc76779855bc/src%2Ftest%2Fcompile-fail%2Frange_traits-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange_traits-1.rs?ref=98e3e82ecea8b3b2100362e6fa87dc76779855bc", "patch": "@@ -15,27 +15,21 @@ struct AllTheRanges {\n     a: Range<usize>,\n     //~^ ERROR PartialOrd\n     //~^^ ERROR Ord\n-    //~^^^ the trait bound\n     b: RangeTo<usize>,\n     //~^ ERROR PartialOrd\n     //~^^ ERROR Ord\n-    //~^^^ no method named `partial_cmp`\n     c: RangeFrom<usize>,\n     //~^ ERROR PartialOrd\n     //~^^ ERROR Ord\n-    //~^^^ the trait bound\n     d: RangeFull,\n     //~^ ERROR PartialOrd\n     //~^^ ERROR Ord\n-    //~^^^ no method named `partial_cmp`\n     e: RangeInclusive<usize>,\n     //~^ ERROR PartialOrd\n     //~^^ ERROR Ord\n-    //~^^^ the trait bound\n     f: RangeToInclusive<usize>,\n     //~^ ERROR PartialOrd\n     //~^^ ERROR Ord\n-    //~^^^ no method named `partial_cmp`\n }\n \n fn main() {}"}]}