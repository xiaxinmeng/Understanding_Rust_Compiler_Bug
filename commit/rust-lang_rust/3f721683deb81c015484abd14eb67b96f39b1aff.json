{"sha": "3f721683deb81c015484abd14eb67b96f39b1aff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNzIxNjgzZGViODFjMDE1NDg0YWJkMTRlYjY3Yjk2ZjM5YjFhZmY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-25T15:54:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-25T15:54:05Z"}, "message": "Merge #5878\n\n5878: Prepare to share sysroot lowering code between Cargo & ProjectJSON\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "72113617219eeae9f16b324ae4bb33e49c8320d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72113617219eeae9f16b324ae4bb33e49c8320d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f721683deb81c015484abd14eb67b96f39b1aff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfRTQdCRBK7hj4Ov3rIwAAdHIIAIOYjWIxGiaQl83KgKxkPFw0\nNGO/hkZw8Q73b2Hy440nhcjy4RYZdc6C4XR/bsaCJueKcpbUJ04yClzj2OIRb32N\nN1Hdi3kJyCst63+xTMGpOfgev0fw1JB5aNq53gJPn1qeFMqydYCHN7kipWgpX2kJ\n26YXfZbIGhE9Pshh5My2DtK6rmaNkETPtSg41g1KSeLoqoETo26OZMT+gWMtY801\nnv0ODT3xQVpznKFmn+ZX8aUAFf3RVnPw/brzmPlrwvTlXrwzMXWHzJVHdzZ3rmYS\n/6H4Et43IIwFySpcFR2UScqMlmHxj/urRVJXXM7jp6Net0PJyjAdO14ObcvdL5s=\n=W4Fg\n-----END PGP SIGNATURE-----\n", "payload": "tree 72113617219eeae9f16b324ae4bb33e49c8320d9\nparent 32be2d60af7c5c4706dc4ad4957056032d569643\nparent 7fcda5aa46808eed478defbd0494c6e11fee2ac6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1598370845 +0000\ncommitter GitHub <noreply@github.com> 1598370845 +0000\n\nMerge #5878\n\n5878: Prepare to share sysroot lowering code between Cargo & ProjectJSON\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f721683deb81c015484abd14eb67b96f39b1aff", "html_url": "https://github.com/rust-lang/rust/commit/3f721683deb81c015484abd14eb67b96f39b1aff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f721683deb81c015484abd14eb67b96f39b1aff/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32be2d60af7c5c4706dc4ad4957056032d569643", "url": "https://api.github.com/repos/rust-lang/rust/commits/32be2d60af7c5c4706dc4ad4957056032d569643", "html_url": "https://github.com/rust-lang/rust/commit/32be2d60af7c5c4706dc4ad4957056032d569643"}, {"sha": "7fcda5aa46808eed478defbd0494c6e11fee2ac6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fcda5aa46808eed478defbd0494c6e11fee2ac6", "html_url": "https://github.com/rust-lang/rust/commit/7fcda5aa46808eed478defbd0494c6e11fee2ac6"}], "stats": {"total": 178, "additions": 73, "deletions": 105}, "files": [{"sha": "cbd4c5009c8ae946d6113b12a9c5a534e06cbfdd", "filename": "crates/project_model/src/lib.rs", "status": "modified", "additions": 66, "deletions": 92, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/3f721683deb81c015484abd14eb67b96f39b1aff/crates%2Fproject_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f721683deb81c015484abd14eb67b96f39b1aff/crates%2Fproject_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Flib.rs?ref=3f721683deb81c015484abd14eb67b96f39b1aff", "patch": "@@ -335,45 +335,8 @@ impl ProjectWorkspace {\n                 let mut cfg_options = CfgOptions::default();\n                 cfg_options.extend(get_rustc_cfg_options(target));\n \n-                let sysroot_crates: FxHashMap<_, _> = sysroot\n-                    .crates()\n-                    .filter_map(|krate| {\n-                        let file_id = load(&sysroot[krate].root)?;\n-\n-                        let env = Env::default();\n-                        let proc_macro = vec![];\n-                        let name = sysroot[krate].name.clone();\n-                        let crate_id = crate_graph.add_crate_root(\n-                            file_id,\n-                            Edition::Edition2018,\n-                            Some(name),\n-                            cfg_options.clone(),\n-                            env,\n-                            proc_macro,\n-                        );\n-                        Some((krate, crate_id))\n-                    })\n-                    .collect();\n-\n-                for from in sysroot.crates() {\n-                    for &to in sysroot[from].deps.iter() {\n-                        let name = &sysroot[to].name;\n-                        if let (Some(&from), Some(&to)) =\n-                            (sysroot_crates.get(&from), sysroot_crates.get(&to))\n-                        {\n-                            if crate_graph.add_dep(from, CrateName::new(name).unwrap(), to).is_err()\n-                            {\n-                                log::error!(\"cyclic dependency between sysroot crates\")\n-                            }\n-                        }\n-                    }\n-                }\n-\n-                let libcore = sysroot.core().and_then(|it| sysroot_crates.get(&it).copied());\n-                let liballoc = sysroot.alloc().and_then(|it| sysroot_crates.get(&it).copied());\n-                let libstd = sysroot.std().and_then(|it| sysroot_crates.get(&it).copied());\n-                let libproc_macro =\n-                    sysroot.proc_macro().and_then(|it| sysroot_crates.get(&it).copied());\n+                let (public_deps, libproc_macro) =\n+                    sysroot_to_crate_graph(&mut crate_graph, sysroot, &cfg_options, load);\n \n                 let mut pkg_to_lib_crate = FxHashMap::default();\n                 let mut pkg_crates = FxHashMap::default();\n@@ -424,14 +387,11 @@ impl ProjectWorkspace {\n                             }\n                             if cargo[tgt].is_proc_macro {\n                                 if let Some(proc_macro) = libproc_macro {\n-                                    if crate_graph\n-                                        .add_dep(\n-                                            crate_id,\n-                                            CrateName::new(\"proc_macro\").unwrap(),\n-                                            proc_macro,\n-                                        )\n-                                        .is_err()\n-                                    {\n+                                    if let Err(_) = crate_graph.add_dep(\n+                                        crate_id,\n+                                        CrateName::new(\"proc_macro\").unwrap(),\n+                                        proc_macro,\n+                                    ) {\n                                         log::error!(\n                                             \"cyclic dependency on proc_macro for {}\",\n                                             &cargo[pkg].name\n@@ -447,65 +407,33 @@ impl ProjectWorkspace {\n                     // Set deps to the core, std and to the lib target of the current package\n                     for &from in pkg_crates.get(&pkg).into_iter().flatten() {\n                         if let Some((to, name)) = lib_tgt.clone() {\n-                            if to != from\n-                                && crate_graph\n-                                    .add_dep(\n-                                        from,\n-                                        // For root projects with dashes in their name,\n-                                        // cargo metadata does not do any normalization,\n-                                        // so we do it ourselves currently\n-                                        CrateName::normalize_dashes(&name),\n-                                        to,\n-                                    )\n-                                    .is_err()\n-                            {\n-                                {\n-                                    log::error!(\n-                                        \"cyclic dependency between targets of {}\",\n-                                        &cargo[pkg].name\n-                                    )\n-                                }\n+                            // For root projects with dashes in their name,\n+                            // cargo metadata does not do any normalization,\n+                            // so we do it ourselves currently\n+                            let name = CrateName::normalize_dashes(&name);\n+                            if to != from && crate_graph.add_dep(from, name, to).is_err() {\n+                                log::error!(\n+                                    \"cyclic dependency between targets of {}\",\n+                                    &cargo[pkg].name\n+                                )\n                             }\n                         }\n-                        // core is added as a dependency before std in order to\n-                        // mimic rustcs dependency order\n-                        if let Some(core) = libcore {\n-                            if crate_graph\n-                                .add_dep(from, CrateName::new(\"core\").unwrap(), core)\n-                                .is_err()\n-                            {\n+                        for (name, krate) in public_deps.iter() {\n+                            if let Err(_) = crate_graph.add_dep(from, name.clone(), *krate) {\n                                 log::error!(\"cyclic dependency on core for {}\", &cargo[pkg].name)\n                             }\n                         }\n-                        if let Some(alloc) = liballoc {\n-                            if crate_graph\n-                                .add_dep(from, CrateName::new(\"alloc\").unwrap(), alloc)\n-                                .is_err()\n-                            {\n-                                log::error!(\"cyclic dependency on alloc for {}\", &cargo[pkg].name)\n-                            }\n-                        }\n-                        if let Some(std) = libstd {\n-                            if crate_graph\n-                                .add_dep(from, CrateName::new(\"std\").unwrap(), std)\n-                                .is_err()\n-                            {\n-                                log::error!(\"cyclic dependency on std for {}\", &cargo[pkg].name)\n-                            }\n-                        }\n                     }\n                 }\n \n                 // Now add a dep edge from all targets of upstream to the lib\n                 // target of downstream.\n                 for pkg in cargo.packages() {\n                     for dep in cargo[pkg].dependencies.iter() {\n+                        let name = CrateName::new(&dep.name).unwrap();\n                         if let Some(&to) = pkg_to_lib_crate.get(&dep.pkg) {\n                             for &from in pkg_crates.get(&pkg).into_iter().flatten() {\n-                                if crate_graph\n-                                    .add_dep(from, CrateName::new(&dep.name).unwrap(), to)\n-                                    .is_err()\n-                                {\n+                                if let Err(_) = crate_graph.add_dep(from, name.clone(), to) {\n                                     log::error!(\n                                         \"cyclic dependency {} -> {}\",\n                                         &cargo[pkg].name,\n@@ -563,3 +491,49 @@ fn utf8_stdout(mut cmd: Command) -> Result<String> {\n     let stdout = String::from_utf8(output.stdout)?;\n     Ok(stdout.trim().to_string())\n }\n+\n+fn sysroot_to_crate_graph(\n+    crate_graph: &mut CrateGraph,\n+    sysroot: &Sysroot,\n+    cfg_options: &CfgOptions,\n+    load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n+) -> (Vec<(CrateName, CrateId)>, Option<CrateId>) {\n+    let sysroot_crates: FxHashMap<_, _> = sysroot\n+        .crates()\n+        .filter_map(|krate| {\n+            let file_id = load(&sysroot[krate].root)?;\n+\n+            let env = Env::default();\n+            let proc_macro = vec![];\n+            let name = sysroot[krate].name.clone();\n+            let crate_id = crate_graph.add_crate_root(\n+                file_id,\n+                Edition::Edition2018,\n+                Some(name),\n+                cfg_options.clone(),\n+                env,\n+                proc_macro,\n+            );\n+            Some((krate, crate_id))\n+        })\n+        .collect();\n+\n+    for from in sysroot.crates() {\n+        for &to in sysroot[from].deps.iter() {\n+            let name = CrateName::new(&sysroot[to].name).unwrap();\n+            if let (Some(&from), Some(&to)) = (sysroot_crates.get(&from), sysroot_crates.get(&to)) {\n+                if let Err(_) = crate_graph.add_dep(from, name, to) {\n+                    log::error!(\"cyclic dependency between sysroot crates\")\n+                }\n+            }\n+        }\n+    }\n+\n+    let public_deps = sysroot\n+        .public_deps()\n+        .map(|(name, idx)| (CrateName::new(name).unwrap(), sysroot_crates[&idx]))\n+        .collect::<Vec<_>>();\n+\n+    let libproc_macro = sysroot.proc_macro().and_then(|it| sysroot_crates.get(&it).copied());\n+    (public_deps, libproc_macro)\n+}"}, {"sha": "74c0eda9a52230761da23593096c9a3a5dc383e2", "filename": "crates/project_model/src/sysroot.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3f721683deb81c015484abd14eb67b96f39b1aff/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f721683deb81c015484abd14eb67b96f39b1aff/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fsysroot.rs?ref=3f721683deb81c015484abd14eb67b96f39b1aff", "patch": "@@ -34,16 +34,10 @@ impl ops::Index<SysrootCrate> for Sysroot {\n }\n \n impl Sysroot {\n-    pub fn core(&self) -> Option<SysrootCrate> {\n-        self.by_name(\"core\")\n-    }\n-\n-    pub fn alloc(&self) -> Option<SysrootCrate> {\n-        self.by_name(\"alloc\")\n-    }\n-\n-    pub fn std(&self) -> Option<SysrootCrate> {\n-        self.by_name(\"std\")\n+    pub fn public_deps(&self) -> impl Iterator<Item = (&'static str, SysrootCrate)> + '_ {\n+        // core is added as a dependency before std in order to\n+        // mimic rustcs dependency order\n+        vec![\"core\", \"alloc\", \"std\"].into_iter().filter_map(move |it| Some((it, self.by_name(it)?)))\n     }\n \n     pub fn proc_macro(&self) -> Option<SysrootCrate> {\n@@ -81,16 +75,16 @@ impl Sysroot {\n             }\n         }\n \n-        if let Some(std) = sysroot.std() {\n+        if let Some(std) = sysroot.by_name(\"std\") {\n             for dep in STD_DEPS.trim().lines() {\n                 if let Some(dep) = sysroot.by_name(dep) {\n                     sysroot.crates[std].deps.push(dep)\n                 }\n             }\n         }\n \n-        if let Some(alloc) = sysroot.alloc() {\n-            if let Some(core) = sysroot.core() {\n+        if let Some(alloc) = sysroot.by_name(\"alloc\") {\n+            if let Some(core) = sysroot.by_name(\"core\") {\n                 sysroot.crates[alloc].deps.push(core);\n             }\n         }"}]}