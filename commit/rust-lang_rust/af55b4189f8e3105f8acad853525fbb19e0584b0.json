{"sha": "af55b4189f8e3105f8acad853525fbb19e0584b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNTViNDE4OWY4ZTMxMDVmOGFjYWQ4NTM1MjVmYmIxOWUwNTg0YjA=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-03-04T00:26:42Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-03-04T13:24:28Z"}, "message": "clean up check_pat_enum", "tree": {"sha": "e03a71d94b34845b000255291a11be09326b55dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e03a71d94b34845b000255291a11be09326b55dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af55b4189f8e3105f8acad853525fbb19e0584b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af55b4189f8e3105f8acad853525fbb19e0584b0", "html_url": "https://github.com/rust-lang/rust/commit/af55b4189f8e3105f8acad853525fbb19e0584b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af55b4189f8e3105f8acad853525fbb19e0584b0/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9e61c9f403e89415a3787fae90fef5aad8ee477", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9e61c9f403e89415a3787fae90fef5aad8ee477", "html_url": "https://github.com/rust-lang/rust/commit/b9e61c9f403e89415a3787fae90fef5aad8ee477"}], "stats": {"total": 74, "additions": 28, "deletions": 46}, "files": [{"sha": "8d0ae0f880d092f5f188419fc10dd7e4b1d92540", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 28, "deletions": 46, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/af55b4189f8e3105f8acad853525fbb19e0584b0/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af55b4189f8e3105f8acad853525fbb19e0584b0/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=af55b4189f8e3105f8acad853525fbb19e0584b0", "patch": "@@ -599,12 +599,12 @@ fn bad_struct_kind_err(sess: &Session, pat: &hir::Pat, path: &hir::Path, lint: b\n     }\n }\n \n-pub fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n-                                pat: &hir::Pat,\n-                                path: &hir::Path,\n-                                subpats: Option<&'tcx [P<hir::Pat>]>,\n-                                expected: Ty<'tcx>,\n-                                is_tuple_struct_pat: bool)\n+fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n+                            pat: &hir::Pat,\n+                            path: &hir::Path,\n+                            subpats: Option<&'tcx [P<hir::Pat>]>,\n+                            expected: Ty<'tcx>,\n+                            is_tuple_struct_pat: bool)\n {\n     // Typecheck the path.\n     let fcx = pcx.fcx;\n@@ -687,59 +687,41 @@ pub fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n     demand::eqtype(fcx, pat.span, expected, pat_ty);\n \n     let real_path_ty = fcx.node_ty(pat.id);\n-    let (arg_tys, kind_name): (Vec<_>, &'static str) = match real_path_ty.sty {\n+    let (kind_name, variant, expected_substs) = match real_path_ty.sty {\n         ty::TyEnum(enum_def, expected_substs) => {\n             let variant = enum_def.variant_of_def(def);\n-            if variant.kind() == ty::VariantKind::Struct {\n-                report_bad_struct_kind(false);\n-                return;\n-            }\n-            if is_tuple_struct_pat && variant.kind() != ty::VariantKind::Tuple {\n-                // Matching unit variants with tuple variant patterns (`UnitVariant(..)`)\n-                // is allowed for backward compatibility.\n-                let is_special_case = variant.kind() == ty::VariantKind::Unit;\n-                report_bad_struct_kind(is_special_case);\n-                if !is_special_case {\n-                    return\n-                }\n-            }\n-            (variant.fields\n-                    .iter()\n-                    .map(|f| fcx.instantiate_type_scheme(pat.span,\n-                                                         expected_substs,\n-                                                         &f.unsubst_ty()))\n-                    .collect(),\n-             \"variant\")\n+            (\"variant\", variant, expected_substs)\n         }\n         ty::TyStruct(struct_def, expected_substs) => {\n             let variant = struct_def.struct_variant();\n-            if is_tuple_struct_pat && variant.kind() != ty::VariantKind::Tuple {\n-                // Matching unit structs with tuple variant patterns (`UnitVariant(..)`)\n-                // is allowed for backward compatibility.\n-                let is_special_case = variant.kind() == ty::VariantKind::Unit;\n-                report_bad_struct_kind(is_special_case);\n-                return;\n-            }\n-            (variant.fields\n-                    .iter()\n-                    .map(|f| fcx.instantiate_type_scheme(pat.span,\n-                                                         expected_substs,\n-                                                         &f.unsubst_ty()))\n-                    .collect(),\n-             \"struct\")\n+            (\"struct\", variant, expected_substs)\n         }\n         _ => {\n             report_bad_struct_kind(false);\n             return;\n         }\n     };\n \n+    match (is_tuple_struct_pat, variant.kind()) {\n+        (true, ty::VariantKind::Unit) => {\n+            // Matching unit structs with tuple variant patterns (`UnitVariant(..)`)\n+            // is allowed for backward compatibility.\n+            report_bad_struct_kind(true);\n+        }\n+        (_, ty::VariantKind::Struct) => {\n+            report_bad_struct_kind(false);\n+            return\n+        }\n+        _ => {}\n+    }\n+\n     if let Some(subpats) = subpats {\n-        if subpats.len() == arg_tys.len() {\n-            for (subpat, arg_ty) in subpats.iter().zip(arg_tys) {\n-                check_pat(pcx, &subpat, arg_ty);\n+        if subpats.len() == variant.fields.len() {\n+            for (subpat, field) in subpats.iter().zip(&variant.fields) {\n+                let field_ty = fcx.field_ty(subpat.span, field, expected_substs);\n+                check_pat(pcx, &subpat, field_ty);\n             }\n-        } else if arg_tys.is_empty() {\n+        } else if variant.fields.is_empty() {\n             span_err!(tcx.sess, pat.span, E0024,\n                       \"this pattern has {} field{}, but the corresponding {} has no fields\",\n                       subpats.len(), if subpats.len() == 1 {\"\"} else {\"s\"}, kind_name);\n@@ -752,7 +734,7 @@ pub fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n                       \"this pattern has {} field{}, but the corresponding {} has {} field{}\",\n                       subpats.len(), if subpats.len() == 1 {\"\"} else {\"s\"},\n                       kind_name,\n-                      arg_tys.len(), if arg_tys.len() == 1 {\"\"} else {\"s\"});\n+                      variant.fields.len(), if variant.fields.len() == 1 {\"\"} else {\"s\"});\n \n             for pat in subpats {\n                 check_pat(pcx, &pat, tcx.types.err);"}]}