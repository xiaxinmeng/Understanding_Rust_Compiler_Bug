{"sha": "98232ece14bdd68aeac3d761039d9a7c88c30b3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4MjMyZWNlMTRiZGQ2OGFlYWMzZDc2MTAzOWQ5YTdjODhjMzBiM2Y=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2020-08-02T17:58:34Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2020-08-30T16:04:43Z"}, "message": "fix broken trait method links", "tree": {"sha": "b9a1b24709bd109c7be1f86887691303e182cfdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9a1b24709bd109c7be1f86887691303e182cfdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98232ece14bdd68aeac3d761039d9a7c88c30b3f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAl9LzhwWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdAIGB/9IA16NKe6ZW0/MpkWEaiHUx417\nvfXmqAv4iZyTYGdTvl7NliyQs2bxtvYwe4cC1xBedxDa9pfwYT0Nye9xt/erbC3R\nXtZgxQIGSxPp1S3LX5Mk7SuJ60Cp+AhzaKvjY7av5XEyQ4tRmS3/VhS/tQIc4iPI\nhkJpJ5fluiW/R99puSMuAH32jmK9QRIH+I9xtWufH+97QGM9QR70Fyvm1x0+0tuD\nY7s2b3h0AKyV+HfH+sTK822nO4t4jblNoz1rOC1q/P7S0ckJZmCW9OPwO4IX+D5R\nvWTDFxMM5P78vtXfNO5HPvokaY/i/vmAZISrMV4lsZCD0HXAxbhizmCMSh9r\n=R91f\n-----END PGP SIGNATURE-----", "payload": "tree b9a1b24709bd109c7be1f86887691303e182cfdb\nparent e0822ecdbc43a6128136661bb73fb6f3c3db2b4a\nauthor Andy Russell <arussell123@gmail.com> 1596391114 -0400\ncommitter Andy Russell <arussell123@gmail.com> 1598803483 -0400\n\nfix broken trait method links\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98232ece14bdd68aeac3d761039d9a7c88c30b3f", "html_url": "https://github.com/rust-lang/rust/commit/98232ece14bdd68aeac3d761039d9a7c88c30b3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98232ece14bdd68aeac3d761039d9a7c88c30b3f/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0822ecdbc43a6128136661bb73fb6f3c3db2b4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0822ecdbc43a6128136661bb73fb6f3c3db2b4a", "html_url": "https://github.com/rust-lang/rust/commit/e0822ecdbc43a6128136661bb73fb6f3c3db2b4a"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "48b7f2739eeb29b9ac47958bdb14d13bf3acf06d", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98232ece14bdd68aeac3d761039d9a7c88c30b3f/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98232ece14bdd68aeac3d761039d9a7c88c30b3f/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=98232ece14bdd68aeac3d761039d9a7c88c30b3f", "patch": "@@ -168,8 +168,6 @@ pub trait Write {\n     /// This method should generally not be invoked manually, but rather through\n     /// the [`write!`] macro itself.\n     ///\n-    /// [`write!`]: ../../std/macro.write.html\n-    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "323fdbb45f36b125c2a957cdc848ff12999df9df", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98232ece14bdd68aeac3d761039d9a7c88c30b3f/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98232ece14bdd68aeac3d761039d9a7c88c30b3f/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=98232ece14bdd68aeac3d761039d9a7c88c30b3f", "patch": "@@ -149,7 +149,7 @@ pub trait DoubleEndedIterator: Iterator {\n     /// This is the reverse version of [`try_fold()`]: it takes elements\n     /// starting from the back of the iterator.\n     ///\n-    /// [`try_fold()`]: trait.Iterator.html#method.try_fold\n+    /// [`try_fold()`]: Iterator::try_fold\n     ///\n     /// # Examples\n     ///\n@@ -214,7 +214,7 @@ pub trait DoubleEndedIterator: Iterator {\n     /// Folding is useful whenever you have a collection of something, and want\n     /// to produce a single value from it.\n     ///\n-    /// [`fold()`]: trait.Iterator.html#method.fold\n+    /// [`fold()`]: Iterator::fold\n     ///\n     /// # Examples\n     ///"}, {"sha": "a1d11b597a1402e5968326ab4214530ac1cdd37f", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98232ece14bdd68aeac3d761039d9a7c88c30b3f/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98232ece14bdd68aeac3d761039d9a7c88c30b3f/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=98232ece14bdd68aeac3d761039d9a7c88c30b3f", "patch": "@@ -2713,7 +2713,7 @@ pub trait Iterator {\n     /// This is useful when you have an iterator over `&T`, but you need an\n     /// iterator over `T`.\n     ///\n-    /// [`clone`]: crate::clone::Clone::clone\n+    /// [`clone`]: Clone::clone\n     ///\n     /// # Examples\n     ///"}, {"sha": "4dcb91d63c9c350d7e93bedefef5e94a4ed652dc", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98232ece14bdd68aeac3d761039d9a7c88c30b3f/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98232ece14bdd68aeac3d761039d9a7c88c30b3f/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=98232ece14bdd68aeac3d761039d9a7c88c30b3f", "patch": "@@ -3219,7 +3219,7 @@ pub unsafe trait SliceIndex<T: ?Sized>: private_slice_index::Sealed {\n     /// Calling this method with an out-of-bounds index or a dangling `slice` pointer\n     /// is *[undefined behavior]* even if the resulting reference is not used.\n     ///\n-    /// [undefined behavior]: ../../reference/behavior-considered-undefined.html\n+    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n     #[unstable(feature = \"slice_index_methods\", issue = \"none\")]\n     unsafe fn get_unchecked(self, slice: *const T) -> *const Self::Output;\n \n@@ -3228,7 +3228,7 @@ pub unsafe trait SliceIndex<T: ?Sized>: private_slice_index::Sealed {\n     /// Calling this method with an out-of-bounds index or a dangling `slice` pointer\n     /// is *[undefined behavior]* even if the resulting reference is not used.\n     ///\n-    /// [undefined behavior]: ../../reference/behavior-considered-undefined.html\n+    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n     #[unstable(feature = \"slice_index_methods\", issue = \"none\")]\n     unsafe fn get_unchecked_mut(self, slice: *mut T) -> *mut Self::Output;\n "}, {"sha": "14719a9be5e8a24be91b93c1d54a02de432e6b2d", "filename": "library/std/src/os/linux/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98232ece14bdd68aeac3d761039d9a7c88c30b3f/library%2Fstd%2Fsrc%2Fos%2Flinux%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98232ece14bdd68aeac3d761039d9a7c88c30b3f/library%2Fstd%2Fsrc%2Fos%2Flinux%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Ffs.rs?ref=98232ece14bdd68aeac3d761039d9a7c88c30b3f", "patch": "@@ -196,7 +196,7 @@ pub trait MetadataExt {\n     fn st_atime(&self) -> i64;\n     /// Returns the last access time of the file, in nanoseconds since [`st_atime`].\n     ///\n-    /// [`st_atime`]: #tymethod.st_atime\n+    /// [`st_atime`]: Self::st_atime\n     ///\n     /// # Examples\n     ///\n@@ -232,7 +232,7 @@ pub trait MetadataExt {\n     fn st_mtime(&self) -> i64;\n     /// Returns the last modification time of the file, in nanoseconds since [`st_mtime`].\n     ///\n-    /// [`st_mtime`]: #tymethod.st_mtime\n+    /// [`st_mtime`]: Self::st_mtime\n     ///\n     /// # Examples\n     ///\n@@ -268,7 +268,7 @@ pub trait MetadataExt {\n     fn st_ctime(&self) -> i64;\n     /// Returns the last status change time of the file, in nanoseconds since [`st_ctime`].\n     ///\n-    /// [`st_ctime`]: #tymethod.st_ctime\n+    /// [`st_ctime`]: Self::st_ctime\n     ///\n     /// # Examples\n     ///"}, {"sha": "0f179c8b837dd8708a584aa45338c38770ec9c07", "filename": "library/std/src/os/redox/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98232ece14bdd68aeac3d761039d9a7c88c30b3f/library%2Fstd%2Fsrc%2Fos%2Fredox%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98232ece14bdd68aeac3d761039d9a7c88c30b3f/library%2Fstd%2Fsrc%2Fos%2Fredox%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fredox%2Ffs.rs?ref=98232ece14bdd68aeac3d761039d9a7c88c30b3f", "patch": "@@ -200,7 +200,7 @@ pub trait MetadataExt {\n     fn st_atime(&self) -> i64;\n     /// Returns the last access time of the file, in nanoseconds since [`st_atime`].\n     ///\n-    /// [`st_atime`]: #tymethod.st_atime\n+    /// [`st_atime`]: Self::st_atime\n     ///\n     /// # Examples\n     ///\n@@ -236,7 +236,7 @@ pub trait MetadataExt {\n     fn st_mtime(&self) -> i64;\n     /// Returns the last modification time of the file, in nanoseconds since [`st_mtime`].\n     ///\n-    /// [`st_mtime`]: #tymethod.st_mtime\n+    /// [`st_mtime`]: Self::st_mtime\n     ///\n     /// # Examples\n     ///\n@@ -272,7 +272,7 @@ pub trait MetadataExt {\n     fn st_ctime(&self) -> i64;\n     /// Returns the last status change time of the file, in nanoseconds since [`st_ctime`].\n     ///\n-    /// [`st_ctime`]: #tymethod.st_ctime\n+    /// [`st_ctime`]: Self::st_ctime\n     ///\n     /// # Examples\n     ///"}]}