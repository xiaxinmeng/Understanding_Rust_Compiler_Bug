{"sha": "caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYTEwYzNiZGU2MGNlMGQ5YjU0MDE3NzFjNDQzYmZmNTFkMmE4ZTI=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-09-06T15:32:34Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-09-14T07:56:13Z"}, "message": "move middle::ty and related modules to middle/ty/", "tree": {"sha": "ccb3ccaa9f56fa07841675ab071490c2ad11d383", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccb3ccaa9f56fa07841675ab071490c2ad11d383"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "html_url": "https://github.com/rust-lang/rust/commit/caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/comments", "author": null, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "009f2cf7dd97d952b78bb68a95f661cecfb1562f", "url": "https://api.github.com/repos/rust-lang/rust/commits/009f2cf7dd97d952b78bb68a95f661cecfb1562f", "html_url": "https://github.com/rust-lang/rust/commit/009f2cf7dd97d952b78bb68a95f661cecfb1562f"}], "stats": {"total": 294, "additions": 140, "deletions": 154}, "files": [{"sha": "cfeab976e24cb110d00a1dff96289c8b4f4a82e3", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -107,7 +107,6 @@ pub mod front {\n pub mod middle {\n     pub mod astconv_util;\n     pub mod astencode;\n-    pub mod cast;\n     pub mod cfg;\n     pub mod check_const;\n     pub mod check_static_recursion;\n@@ -124,15 +123,13 @@ pub mod middle {\n     pub mod effect;\n     pub mod entry;\n     pub mod expr_use_visitor;\n-    pub mod fast_reject;\n     pub mod free_region;\n     pub mod intrinsicck;\n     pub mod infer;\n     pub mod implicator;\n     pub mod lang_items;\n     pub mod liveness;\n     pub mod mem_categorization;\n-    pub mod outlives;\n     pub mod pat_util;\n     pub mod privacy;\n     pub mod reachable;\n@@ -143,11 +140,6 @@ pub mod middle {\n     pub mod subst;\n     pub mod traits;\n     pub mod ty;\n-    pub mod ty_fold;\n-    pub mod ty_match;\n-    pub mod ty_relate;\n-    pub mod ty_walk;\n-    pub mod wf;\n     pub mod weak_lang_items;\n }\n "}, {"sha": "ac2dd54598253d888ef1e404e09209548fb5a3c2", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -27,7 +27,7 @@ use metadata::tydecode;\n use metadata::tydecode::{DefIdSource, NominalType, TypeWithId};\n use metadata::tydecode::{RegionParameter, ClosureSource};\n use metadata::tyencode;\n-use middle::cast;\n+use middle::ty::cast;\n use middle::check_const::ConstQualif;\n use middle::def;\n use middle::def_id::{DefId, LOCAL_CRATE};"}, {"sha": "48c8cca76b0564e8904a5d8a88478e565bf4bf7e", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -24,7 +24,7 @@\n // - It's not possible to take the address of a static item with unsafe interior. This is enforced\n // by borrowck::gather_loans\n \n-use middle::cast::{CastKind};\n+use middle::ty::cast::{CastKind};\n use middle::const_eval;\n use middle::const_eval::EvalHint::ExprTypeChecked;\n use middle::def;"}, {"sha": "2e9e5fafb1d9b348dce9a2afb58aa48d37422160", "filename": "src/librustc/middle/free_region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffree_region.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -16,7 +16,7 @@\n //! region outlives another and so forth.\n \n use middle::ty::{self, FreeRegion, Region};\n-use middle::wf::ImpliedBound;\n+use middle::ty::wf::ImpliedBound;\n use rustc_data_structures::transitive_relation::TransitiveRelation;\n \n #[derive(Clone)]"}, {"sha": "9f33c4df03d41717ce77cd477f3c6fcc3ceac594", "filename": "src/librustc/middle/implicator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Fimplicator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Fimplicator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fimplicator.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -15,7 +15,7 @@ use middle::infer::{InferCtxt, GenericKind};\n use middle::subst::Substs;\n use middle::traits;\n use middle::ty::{self, RegionEscape, ToPredicate, Ty};\n-use middle::ty_fold::{TypeFoldable, TypeFolder};\n+use middle::ty::fold::{TypeFoldable, TypeFolder};\n \n use syntax::ast;\n use syntax::codemap::Span;"}, {"sha": "2d9432b75e719fd13737c4722e37ed4cf4b5e038", "filename": "src/librustc/middle/infer/bivariate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Finfer%2Fbivariate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Finfer%2Fbivariate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fbivariate.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -30,7 +30,7 @@ use super::type_variable::{BiTo};\n \n use middle::ty::{self, Ty};\n use middle::ty::TyVar;\n-use middle::ty_relate::{Relate, RelateResult, TypeRelation};\n+use middle::ty::relate::{Relate, RelateResult, TypeRelation};\n \n pub struct Bivariate<'a, 'tcx: 'a> {\n     fields: CombineFields<'a, 'tcx>"}, {"sha": "3a29fdfae2307dfb74ef1c3849dc3ab46be8eee4", "filename": "src/librustc/middle/infer/combine.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -44,9 +44,8 @@ use super::type_variable::{RelationDir, BiTo, EqTo, SubtypeOf, SupertypeOf};\n use middle::ty::{TyVar};\n use middle::ty::{IntType, UintType};\n use middle::ty::{self, Ty, TypeError};\n-use middle::ty_fold;\n-use middle::ty_fold::{TypeFolder, TypeFoldable};\n-use middle::ty_relate::{self, Relate, RelateResult, TypeRelation};\n+use middle::ty::fold::{TypeFolder, TypeFoldable};\n+use middle::ty::relate::{Relate, RelateResult, TypeRelation};\n \n use syntax::codemap::Span;\n use rustc_front::hir;\n@@ -56,7 +55,7 @@ pub struct CombineFields<'a, 'tcx: 'a> {\n     pub infcx: &'a InferCtxt<'a, 'tcx>,\n     pub a_is_expected: bool,\n     pub trace: TypeTrace<'tcx>,\n-    pub cause: Option<ty_relate::Cause>,\n+    pub cause: Option<ty::relate::Cause>,\n }\n \n pub fn super_combine_tys<'a,'tcx:'a,R>(infcx: &InferCtxt<'a, 'tcx>,\n@@ -108,12 +107,12 @@ pub fn super_combine_tys<'a,'tcx:'a,R>(infcx: &InferCtxt<'a, 'tcx>,\n         // All other cases of inference are errors\n         (&ty::TyInfer(_), _) |\n         (_, &ty::TyInfer(_)) => {\n-            Err(TypeError::Sorts(ty_relate::expected_found(relation, &a, &b)))\n+            Err(TypeError::Sorts(ty::relate::expected_found(relation, &a, &b)))\n         }\n \n \n         _ => {\n-            ty_relate::super_relate_tys(relation, a, b)\n+            ty::relate::super_relate_tys(relation, a, b)\n         }\n     }\n }\n@@ -293,7 +292,7 @@ struct Generalizer<'cx, 'tcx:'cx> {\n     cycle_detected: bool,\n }\n \n-impl<'cx, 'tcx> ty_fold::TypeFolder<'tcx> for Generalizer<'cx, 'tcx> {\n+impl<'cx, 'tcx> ty::fold::TypeFolder<'tcx> for Generalizer<'cx, 'tcx> {\n     fn tcx(&self) -> &ty::ctxt<'tcx> {\n         self.infcx.tcx\n     }\n@@ -319,7 +318,7 @@ impl<'cx, 'tcx> ty_fold::TypeFolder<'tcx> for Generalizer<'cx, 'tcx> {\n                 }\n             }\n             _ => {\n-                ty_fold::super_fold_ty(self, t)\n+                ty::fold::super_fold_ty(self, t)\n             }\n         }\n     }\n@@ -384,13 +383,13 @@ fn int_unification_error<'tcx>(a_is_expected: bool, v: (ty::IntVarValue, ty::Int\n                                -> ty::TypeError<'tcx>\n {\n     let (a, b) = v;\n-    TypeError::IntMismatch(ty_relate::expected_found_bool(a_is_expected, &a, &b))\n+    TypeError::IntMismatch(ty::relate::expected_found_bool(a_is_expected, &a, &b))\n }\n \n fn float_unification_error<'tcx>(a_is_expected: bool,\n                                  v: (hir::FloatTy, hir::FloatTy))\n                                  -> ty::TypeError<'tcx>\n {\n     let (a, b) = v;\n-    TypeError::FloatMismatch(ty_relate::expected_found_bool(a_is_expected, &a, &b))\n+    TypeError::FloatMismatch(ty::relate::expected_found_bool(a_is_expected, &a, &b))\n }"}, {"sha": "07ce4688c069f1ec9e46f7ea5ac0ca965580a78b", "filename": "src/librustc/middle/infer/equate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -15,7 +15,7 @@ use super::type_variable::{EqTo};\n \n use middle::ty::{self, Ty};\n use middle::ty::TyVar;\n-use middle::ty_relate::{Relate, RelateResult, TypeRelation};\n+use middle::ty::relate::{Relate, RelateResult, TypeRelation};\n \n pub struct Equate<'a, 'tcx: 'a> {\n     fields: CombineFields<'a, 'tcx>"}, {"sha": "0bae3cd2d86903dac5912b503c914c83293a2d67", "filename": "src/librustc/middle/infer/freshen.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -31,9 +31,8 @@\n //! inferencer knows \"so far\".\n \n use middle::ty::{self, Ty, HasTypeFlags};\n-use middle::ty_fold;\n-use middle::ty_fold::TypeFoldable;\n-use middle::ty_fold::TypeFolder;\n+use middle::ty::fold::TypeFoldable;\n+use middle::ty::fold::TypeFolder;\n use std::collections::hash_map::{self, Entry};\n \n use super::InferCtxt;\n@@ -170,7 +169,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n             ty::TyTuple(..) |\n             ty::TyProjection(..) |\n             ty::TyParam(..) => {\n-                ty_fold::super_fold_ty(self, t)\n+                ty::fold::super_fold_ty(self, t)\n             }\n         }\n     }"}, {"sha": "0035f31e8db942110df94b2c45642a6d532553b2", "filename": "src/librustc/middle/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -15,7 +15,7 @@ use super::lattice::{self, LatticeDir};\n use super::Subtype;\n \n use middle::ty::{self, Ty};\n-use middle::ty_relate::{Relate, RelateResult, TypeRelation};\n+use middle::ty::relate::{Relate, RelateResult, TypeRelation};\n \n /// \"Greatest lower bound\" (common subtype)\n pub struct Glb<'a, 'tcx: 'a> {"}, {"sha": "10a31f0e657e57481e4571b448aed43537c5bfa8", "filename": "src/librustc/middle/infer/higher_ranked/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -15,8 +15,8 @@ use super::{CombinedSnapshot, InferCtxt, HigherRankedType, SkolemizationMap};\n use super::combine::CombineFields;\n \n use middle::ty::{self, TypeError, Binder};\n-use middle::ty_fold::{self, TypeFoldable};\n-use middle::ty_relate::{Relate, RelateResult, TypeRelation};\n+use middle::ty::fold::TypeFoldable;\n+use middle::ty::relate::{Relate, RelateResult, TypeRelation};\n use syntax::codemap::Span;\n use util::nodemap::{FnvHashMap, FnvHashSet};\n \n@@ -358,7 +358,7 @@ fn fold_regions_in<'tcx, T, F>(tcx: &ty::ctxt<'tcx>,\n     where T: TypeFoldable<'tcx>,\n           F: FnMut(ty::Region, ty::DebruijnIndex) -> ty::Region,\n {\n-    ty_fold::fold_regions(tcx, unbound_value, &mut false, |region, current_depth| {\n+    ty::fold::fold_regions(tcx, unbound_value, &mut false, |region, current_depth| {\n         // we should only be encountering \"escaping\" late-bound regions here,\n         // because the ones at the current level should have been replaced\n         // with fresh variables\n@@ -438,7 +438,7 @@ impl<'a,'tcx> InferCtxtExt for InferCtxt<'a,'tcx> {\n \n         let mut escaping_region_vars = FnvHashSet();\n         for ty in &escaping_types {\n-            ty_fold::collect_regions(self.tcx, ty, &mut escaping_region_vars);\n+            ty::fold::collect_regions(self.tcx, ty, &mut escaping_region_vars);\n         }\n \n         region_vars.retain(|&region_vid| {\n@@ -468,7 +468,7 @@ pub fn skolemize_late_bound_regions<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n      * details.\n      */\n \n-    let (result, map) = ty_fold::replace_late_bound_regions(infcx.tcx, binder, |br| {\n+    let (result, map) = ty::fold::replace_late_bound_regions(infcx.tcx, binder, |br| {\n         infcx.region_vars.new_skolemized(br, &snapshot.region_vars_snapshot)\n     });\n \n@@ -590,7 +590,7 @@ pub fn plug_leaks<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n     // binder is that we encountered in `value`. The caller is\n     // responsible for ensuring that (a) `value` contains at least one\n     // binder and (b) that binder is the one we want to use.\n-    let result = ty_fold::fold_regions(infcx.tcx, &value, &mut false, |r, current_depth| {\n+    let result = ty::fold::fold_regions(infcx.tcx, &value, &mut false, |r, current_depth| {\n         match inv_skol_map.get(&r) {\n             None => r,\n             Some(br) => {"}, {"sha": "2a560ec8a1d237dd497d70ef6fe7fc569c10dc75", "filename": "src/librustc/middle/infer/lattice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Flattice.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -34,7 +34,7 @@ use super::InferCtxt;\n \n use middle::ty::TyVar;\n use middle::ty::{self, Ty};\n-use middle::ty_relate::{RelateResult, TypeRelation};\n+use middle::ty::relate::{RelateResult, TypeRelation};\n \n pub trait LatticeDir<'f,'tcx> : TypeRelation<'f,'tcx> {\n     fn infcx(&self) -> &'f InferCtxt<'f, 'tcx>;"}, {"sha": "238dad65ef0d93db67ab2b388241da88cdd5ff9f", "filename": "src/librustc/middle/infer/lub.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -15,7 +15,7 @@ use super::lattice::{self, LatticeDir};\n use super::Subtype;\n \n use middle::ty::{self, Ty};\n-use middle::ty_relate::{Relate, RelateResult, TypeRelation};\n+use middle::ty::relate::{Relate, RelateResult, TypeRelation};\n \n /// \"Least upper bound\" (common supertype)\n pub struct Lub<'a, 'tcx: 'a> {\n@@ -83,4 +83,3 @@ impl<'a, 'tcx> LatticeDir<'a,'tcx> for Lub<'a, 'tcx> {\n         Ok(())\n     }\n }\n-"}, {"sha": "5b94f5311fd0f6bf54ef99cae2a93898e99abbba", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -32,8 +32,8 @@ use middle::traits::{self, FulfillmentContext, Normalized,\n                      SelectionContext, ObligationCause};\n use middle::ty::{TyVid, IntVid, FloatVid, RegionVid, UnconstrainedNumeric};\n use middle::ty::{self, Ty, TypeError, HasTypeFlags};\n-use middle::ty_fold::{self, TypeFolder, TypeFoldable};\n-use middle::ty_relate::{Relate, RelateResult, TypeRelation};\n+use middle::ty::fold::{TypeFolder, TypeFoldable};\n+use middle::ty::relate::{Relate, RelateResult, TypeRelation};\n use rustc_data_structures::unify::{self, UnificationTable};\n use std::cell::{RefCell, Ref};\n use std::fmt;\n@@ -583,7 +583,7 @@ pub fn drain_fulfillment_cx<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n /// Returns an equivalent value with all free regions removed (note\n /// that late-bound regions remain, because they are important for\n /// subtyping, but they are anonymized and normalized as well). This\n-/// is a stronger, caching version of `ty_fold::erase_regions`.\n+/// is a stronger, caching version of `ty::fold::erase_regions`.\n pub fn erase_regions<'tcx,T>(cx: &ty::ctxt<'tcx>, value: &T) -> T\n     where T : TypeFoldable<'tcx>\n {\n@@ -603,7 +603,7 @@ pub fn erase_regions<'tcx,T>(cx: &ty::ctxt<'tcx>, value: &T) -> T\n                 Some(u) => return u\n             }\n \n-            let t_norm = ty_fold::super_fold_ty(self, ty);\n+            let t_norm = ty::fold::super_fold_ty(self, ty);\n             self.tcx().normalized_cache.borrow_mut().insert(ty, t_norm);\n             return t_norm;\n         }\n@@ -612,7 +612,7 @@ pub fn erase_regions<'tcx,T>(cx: &ty::ctxt<'tcx>, value: &T) -> T\n             where T : TypeFoldable<'tcx>\n         {\n             let u = self.tcx().anonymize_late_bound_regions(t);\n-            ty_fold::super_fold_binder(self, &u)\n+            ty::fold::super_fold_binder(self, &u)\n         }\n \n         fn fold_region(&mut self, r: ty::Region) -> ty::Region {\n@@ -1406,7 +1406,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         -> (T, FnvHashMap<ty::BoundRegion,ty::Region>)\n         where T : TypeFoldable<'tcx>\n     {\n-        ty_fold::replace_late_bound_regions(\n+        ty::fold::replace_late_bound_regions(\n             self.tcx,\n             value,\n             |br| self.next_region_var(LateBoundRegion(span, br, lbrct)))"}, {"sha": "a62fd8890baf6eb1e2cb02d66657b8634ce5f674", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -27,7 +27,7 @@ use middle::ty::{self, Ty, TypeError};\n use middle::ty::{BoundRegion, FreeRegion, Region, RegionVid};\n use middle::ty::{ReEmpty, ReStatic, ReFree, ReEarlyBound};\n use middle::ty::{ReLateBound, ReScope, ReVar, ReSkolemized, BrFresh};\n-use middle::ty_relate::RelateResult;\n+use middle::ty::relate::RelateResult;\n use util::common::indenter;\n use util::nodemap::{FnvHashMap, FnvHashSet};\n "}, {"sha": "4bcceade775999c1d90d024890a7bfb4421e044f", "filename": "src/librustc/middle/infer/resolve.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fresolve.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -10,7 +10,7 @@\n \n use super::{InferCtxt, FixupError, FixupResult};\n use middle::ty::{self, Ty, HasTypeFlags};\n-use middle::ty_fold::{self, TypeFoldable};\n+use middle::ty::fold::{TypeFoldable};\n \n ///////////////////////////////////////////////////////////////////////////\n // OPPORTUNISTIC TYPE RESOLVER\n@@ -30,7 +30,7 @@ impl<'a, 'tcx> OpportunisticTypeResolver<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> ty_fold::TypeFolder<'tcx> for OpportunisticTypeResolver<'a, 'tcx> {\n+impl<'a, 'tcx> ty::fold::TypeFolder<'tcx> for OpportunisticTypeResolver<'a, 'tcx> {\n     fn tcx(&self) -> &ty::ctxt<'tcx> {\n         self.infcx.tcx\n     }\n@@ -40,7 +40,7 @@ impl<'a, 'tcx> ty_fold::TypeFolder<'tcx> for OpportunisticTypeResolver<'a, 'tcx>\n             t // micro-optimize -- if there is nothing in this type that this fold affects...\n         } else {\n             let t0 = self.infcx.shallow_resolve(t);\n-            ty_fold::super_fold_ty(self, t0)\n+            ty::fold::super_fold_ty(self, t0)\n         }\n     }\n }\n@@ -69,7 +69,7 @@ struct FullTypeResolver<'a, 'tcx:'a> {\n     err: Option<FixupError>,\n }\n \n-impl<'a, 'tcx> ty_fold::TypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n+impl<'a, 'tcx> ty::fold::TypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n     fn tcx(&self) -> &ty::ctxt<'tcx> {\n         self.infcx.tcx\n     }\n@@ -98,7 +98,7 @@ impl<'a, 'tcx> ty_fold::TypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n                                 t));\n                 }\n                 _ => {\n-                    ty_fold::super_fold_ty(self, t)\n+                    ty::fold::super_fold_ty(self, t)\n                 }\n             }\n         }"}, {"sha": "155f5f44002f428826a966b59b687a5db3107d90", "filename": "src/librustc/middle/infer/sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -15,7 +15,7 @@ use super::type_variable::{SubtypeOf, SupertypeOf};\n \n use middle::ty::{self, Ty};\n use middle::ty::TyVar;\n-use middle::ty_relate::{Cause, Relate, RelateResult, TypeRelation};\n+use middle::ty::relate::{Cause, Relate, RelateResult, TypeRelation};\n use std::mem;\n \n /// \"Greatest lower bound\" (common subtype)"}, {"sha": "c44891de0a055356b81400c8d3239b5892f2c211", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -14,7 +14,7 @@ pub use self::ParamSpace::*;\n pub use self::RegionSubsts::*;\n \n use middle::ty::{self, Ty, HasTypeFlags, RegionEscape};\n-use middle::ty_fold::{self, TypeFoldable, TypeFolder};\n+use middle::ty::fold::{TypeFoldable, TypeFolder};\n \n use std::fmt;\n use std::iter::IntoIterator;\n@@ -643,7 +643,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n                 self.ty_for_param(p, t)\n             }\n             _ => {\n-                ty_fold::super_fold_ty(self, t)\n+                ty::fold::super_fold_ty(self, t)\n             }\n         };\n \n@@ -731,13 +731,13 @@ impl<'a,'tcx> SubstFolder<'a,'tcx> {\n             return ty;\n         }\n \n-        let result = ty_fold::shift_regions(self.tcx(), self.region_binders_passed, &ty);\n+        let result = ty::fold::shift_regions(self.tcx(), self.region_binders_passed, &ty);\n         debug!(\"shift_regions: shifted result = {:?}\", result);\n \n         result\n     }\n \n     fn shift_region_through_binders(&self, region: ty::Region) -> ty::Region {\n-        ty_fold::shift_region(region, self.region_binders_passed)\n+        ty::fold::shift_region(region, self.region_binders_passed)\n     }\n }"}, {"sha": "5322a571ed91e8199c8010c0237b6d07438aa3e9", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -27,7 +27,7 @@ use fmt_macros::{Parser, Piece, Position};\n use middle::def_id::DefId;\n use middle::infer::InferCtxt;\n use middle::ty::{self, ToPredicate, HasTypeFlags, ToPolyTraitRef, TraitRef, Ty};\n-use middle::ty_fold::TypeFoldable;\n+use middle::ty::fold::TypeFoldable;\n use std::collections::HashMap;\n use std::fmt;\n use syntax::codemap::Span;"}, {"sha": "6271dd211662ea6cb1b5c850e36de8e726d33632", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -10,7 +10,6 @@\n \n use middle::infer::InferCtxt;\n use middle::ty::{self, RegionEscape, Ty, HasTypeFlags};\n-use middle::wf;\n \n use std::fmt;\n use syntax::ast;\n@@ -496,8 +495,8 @@ fn process_predicate<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,\n                 ObligationCauseCode::RFC1214(_) => true,\n                 _ => false,\n             };\n-            match wf::obligations(selcx.infcx(), obligation.cause.body_id,\n-                                  ty, obligation.cause.span, rfc1214) {\n+            match ty::wf::obligations(selcx.infcx(), obligation.cause.body_id,\n+                                      ty, obligation.cause.span, rfc1214) {\n                 Some(obligations) => {\n                     new_obligations.extend(obligations);\n                     true"}, {"sha": "6c581a701a27e0a82507b9ab910e8971c51cd6a8", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -19,7 +19,7 @@ use middle::def_id::DefId;\n use middle::free_region::FreeRegionMap;\n use middle::subst;\n use middle::ty::{self, HasTypeFlags, Ty};\n-use middle::ty_fold::TypeFoldable;\n+use middle::ty::fold::TypeFoldable;\n use middle::infer::{self, fixup_err_to_string, InferCtxt};\n use std::rc::Rc;\n use syntax::ast;"}, {"sha": "0d320989cbc7f42a1e67b512709ea152515d2659", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -24,7 +24,7 @@ use super::util;\n use middle::infer;\n use middle::subst::Subst;\n use middle::ty::{self, ToPredicate, RegionEscape, HasTypeFlags, ToPolyTraitRef, Ty};\n-use middle::ty_fold::{self, TypeFoldable, TypeFolder};\n+use middle::ty::fold::{TypeFoldable, TypeFolder};\n use syntax::parse::token;\n use util::common::FN_OUTPUT_NAME;\n \n@@ -265,7 +265,7 @@ impl<'a,'b,'tcx> TypeFolder<'tcx> for AssociatedTypeNormalizer<'a,'b,'tcx> {\n         // normalize it when we instantiate those bound regions (which\n         // should occur eventually).\n \n-        let ty = ty_fold::super_fold_ty(self, ty);\n+        let ty = ty::fold::super_fold_ty(self, ty);\n         match ty.sty {\n             ty::TyProjection(ref data) if !data.has_escaping_regions() => { // (*)\n "}, {"sha": "6f422018c13d595fd94b6038cbcb917ebb5d7efa", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -38,15 +38,13 @@ use super::object_safety;\n use super::util;\n \n use middle::def_id::{DefId, LOCAL_CRATE};\n-use middle::fast_reject;\n-use middle::subst::{Subst, Substs, TypeSpace};\n-use middle::ty::{self, ToPredicate, RegionEscape, ToPolyTraitRef, Ty, HasTypeFlags};\n use middle::infer;\n use middle::infer::{InferCtxt, TypeFreshener};\n-use middle::ty_fold::TypeFoldable;\n-use middle::ty_match;\n-use middle::ty_relate::TypeRelation;\n-use middle::wf;\n+use middle::subst::{Subst, Substs, TypeSpace};\n+use middle::ty::{self, ToPredicate, RegionEscape, ToPolyTraitRef, Ty, HasTypeFlags};\n+use middle::ty::fast_reject;\n+use middle::ty::fold::TypeFoldable;\n+use middle::ty::relate::TypeRelation;\n \n use std::cell::RefCell;\n use std::fmt;\n@@ -471,9 +469,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             ty::Predicate::WellFormed(ty) => {\n-                match wf::obligations(self.infcx, obligation.cause.body_id,\n-                                      ty, obligation.cause.span,\n-                                      obligation.cause.code.is_rfc1214()) {\n+                match ty::wf::obligations(self.infcx, obligation.cause.body_id,\n+                                          ty, obligation.cause.span,\n+                                          obligation.cause.code.is_rfc1214()) {\n                     Some(obligations) =>\n                         self.evaluate_predicates_recursively(previous_stack, obligations.iter()),\n                     None =>\n@@ -2824,7 +2822,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                               current: &ty::PolyTraitRef<'tcx>)\n                               -> bool\n     {\n-        let mut matcher = ty_match::Match::new(self.tcx());\n+        let mut matcher = ty::_match::Match::new(self.tcx());\n         matcher.relate(previous, current).is_ok()\n     }\n "}, {"sha": "2ebb23369bd0161973deca470e991e7ac391a683", "filename": "src/librustc/middle/ty/_match.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Fty%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Fty%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2F_match.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use middle::ty::{self, Ty};\n-use middle::ty_relate::{self, Relate, TypeRelation, RelateResult};\n+use middle::ty::relate::{self, Relate, TypeRelation, RelateResult};\n \n /// A type \"A\" *matches* \"B\" if the fresh types in B could be\n /// substituted with values so as to make it equal to A. Matching is\n@@ -73,15 +73,15 @@ impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Match<'a, 'tcx> {\n \n             (&ty::TyInfer(_), _) |\n             (_, &ty::TyInfer(_)) => {\n-                Err(ty::TypeError::Sorts(ty_relate::expected_found(self, &a, &b)))\n+                Err(ty::TypeError::Sorts(relate::expected_found(self, &a, &b)))\n             }\n \n             (&ty::TyError, _) | (_, &ty::TyError) => {\n                 Ok(self.tcx().types.err)\n             }\n \n             _ => {\n-                ty_relate::super_relate_tys(self, a, b)\n+                relate::super_relate_tys(self, a, b)\n             }\n         }\n     }", "previous_filename": "src/librustc/middle/ty_match.rs"}, {"sha": "8cb4f941a2264eb8fc84a2e98c2022f6a6c76f97", "filename": "src/librustc/middle/ty/cast.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Fty%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Fty%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fcast.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "previous_filename": "src/librustc/middle/cast.rs"}, {"sha": "2b81be19182e2d525e568e97d678c402481f448b", "filename": "src/librustc/middle/ty/fast_reject.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Ffast_reject.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "previous_filename": "src/librustc/middle/fast_reject.rs"}, {"sha": "c6d213583af20173cd367bee82715a715bad4a82", "filename": "src/librustc/middle/ty/fold.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Ffold.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "previous_filename": "src/librustc/middle/ty_fold.rs"}, {"sha": "21f068ca887a0a35b3de02080eadfd1ae839aaf3", "filename": "src/librustc/middle/ty/mod.rs", "status": "renamed", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -43,13 +43,11 @@ use front::map as ast_map;\n use front::map::LinkedPath;\n use metadata::csearch;\n use middle;\n-use middle::cast;\n use middle::check_const;\n use middle::const_eval::{self, ConstVal, ErrKind};\n use middle::const_eval::EvalHint::UncheckedExprHint;\n use middle::def::{self, DefMap, ExportMap};\n use middle::def_id::{DefId, LOCAL_CRATE};\n-use middle::fast_reject;\n use middle::free_region::FreeRegionMap;\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n use middle::region;\n@@ -62,8 +60,8 @@ use middle::stability;\n use middle::subst::{self, ParamSpace, Subst, Substs, VecPerParamSpace};\n use middle::traits;\n use middle::ty;\n-use middle::ty_fold::{self, TypeFoldable, TypeFolder};\n-use middle::ty_walk::{self, TypeWalker};\n+use middle::ty::fold::{TypeFoldable, TypeFolder};\n+use middle::ty::walk::{TypeWalker};\n use util::common::{memoized, ErrorReported};\n use util::nodemap::{NodeMap, NodeSet, DefIdMap, DefIdSet};\n use util::nodemap::FnvHashMap;\n@@ -96,6 +94,15 @@ use rustc_front::hir::{ItemImpl, ItemTrait};\n use rustc_front::hir::{MutImmutable, MutMutable, Visibility};\n use rustc_front::attr::{self, AttrMetaMethods, SignedInt, UnsignedInt};\n \n+pub mod cast;\n+pub mod fast_reject;\n+pub mod fold;\n+pub mod _match;\n+pub mod outlives;\n+pub mod relate;\n+pub mod walk;\n+pub mod wf;\n+\n pub type Disr = u64;\n \n pub const INITIAL_DISCRIMINANT_VALUE: Disr = 0;\n@@ -4252,7 +4259,7 @@ impl<'tcx> TyS<'tcx> {\n     /// `Foo<Bar<i32>, u32>` yields the sequence `[Bar<i32>, u32]`\n     /// (but not `i32`, like `walk`).\n     pub fn walk_shallow(&'tcx self) -> IntoIter<Ty<'tcx>> {\n-        ty_walk::walk_shallow(self)\n+        walk::walk_shallow(self)\n     }\n \n     pub fn as_opt_param_ty(&self) -> Option<ty::ParamTy> {\n@@ -6879,7 +6886,7 @@ impl<'tcx> ctxt<'tcx> {\n         -> T\n         where T : TypeFoldable<'tcx>\n     {\n-        ty_fold::replace_late_bound_regions(\n+        fold::replace_late_bound_regions(\n             self, value,\n             |br| ty::ReFree(ty::FreeRegion{scope: all_outlive_scope, bound_region: br})).0\n     }\n@@ -6891,8 +6898,8 @@ impl<'tcx> ctxt<'tcx> {\n         where T: TypeFoldable<'tcx>\n     {\n         let bound0_value = bound2_value.skip_binder().skip_binder();\n-        let value = ty_fold::fold_regions(self, bound0_value, &mut false,\n-                                          |region, current_depth| {\n+        let value = fold::fold_regions(self, bound0_value, &mut false,\n+                                       |region, current_depth| {\n             match region {\n                 ty::ReLateBound(debruijn, br) if debruijn.depth >= current_depth => {\n                     // should be true if no escaping regions from bound2_value\n@@ -6922,7 +6929,7 @@ impl<'tcx> ctxt<'tcx> {\n     pub fn erase_late_bound_regions<T>(&self, value: &Binder<T>) -> T\n         where T : TypeFoldable<'tcx>\n     {\n-        ty_fold::replace_late_bound_regions(self, value, |_| ty::ReStatic).0\n+        fold::replace_late_bound_regions(self, value, |_| ty::ReStatic).0\n     }\n \n     /// Rewrite any late-bound regions so that they are anonymous.  Region numbers are\n@@ -6937,7 +6944,7 @@ impl<'tcx> ctxt<'tcx> {\n         where T : TypeFoldable<'tcx>,\n     {\n         let mut counter = 0;\n-        ty::Binder(ty_fold::replace_late_bound_regions(self, sig, |_| {\n+        ty::Binder(fold::replace_late_bound_regions(self, sig, |_| {\n             counter += 1;\n             ReLateBound(ty::DebruijnIndex::new(1), BrAnon(counter))\n         }).0)", "previous_filename": "src/librustc/middle/ty.rs"}, {"sha": "9a2570d710d387bf6d353648c53023be2ddd0deb", "filename": "src/librustc/middle/ty/outlives.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Foutlives.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "previous_filename": "src/librustc/middle/outlives.rs"}, {"sha": "7baf075cc69ba0d56738469305e0c0f20e3cbac5", "filename": "src/librustc/middle/ty/relate.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Frelate.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -16,7 +16,7 @@\n use middle::def_id::DefId;\n use middle::subst::{ErasedRegions, NonerasedRegions, ParamSpace, Substs};\n use middle::ty::{self, HasTypeFlags, Ty, TypeError};\n-use middle::ty_fold::TypeFoldable;\n+use middle::ty::fold::TypeFoldable;\n use std::rc::Rc;\n use syntax::abi;\n use rustc_front::hir as ast;", "previous_filename": "src/librustc/middle/ty_relate/mod.rs"}, {"sha": "81cad4486904b7e6e7ee946bbd2a2ebc53ca540a", "filename": "src/librustc/middle/ty/walk.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fwalk.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "previous_filename": "src/librustc/middle/ty_walk.rs"}, {"sha": "20534f72666db656f244e7282ce0e4000429efbd", "filename": "src/librustc/middle/ty/wf.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Fmiddle%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fwf.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -10,7 +10,7 @@\n \n use middle::def_id::DefId;\n use middle::infer::InferCtxt;\n-use middle::outlives::{self, Component};\n+use middle::ty::outlives::{self, Component};\n use middle::subst::Substs;\n use middle::traits;\n use middle::ty::{self, RegionEscape, ToPredicate, Ty};\n@@ -544,4 +544,3 @@ pub fn object_region_bounds<'tcx>(\n \n     tcx.required_region_bounds(open_ty, predicates)\n }\n-", "previous_filename": "src/librustc/middle/wf.rs"}, {"sha": "222de426432975b72f120bd1fc10a1b975d9017c", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -21,7 +21,7 @@ use middle::ty::{TyParam, TyRawPtr, TyRef, TyTuple};\n use middle::ty::TyClosure;\n use middle::ty::{TyBox, TyTrait, TyInt, TyUint, TyInfer};\n use middle::ty::{self, TypeAndMut, Ty, HasTypeFlags};\n-use middle::ty_fold::{self, TypeFoldable};\n+use middle::ty::fold::{self, TypeFoldable};\n \n use std::fmt;\n use syntax::abi;\n@@ -219,7 +219,7 @@ fn in_binder<'tcx, T, U>(f: &mut fmt::Formatter,\n         }\n     };\n \n-    let new_value = ty_fold::replace_late_bound_regions(tcx, &value, |br| {\n+    let new_value = fold::replace_late_bound_regions(tcx, &value, |br| {\n         let _ = start_or_continue(f, \"for<\", \", \");\n         ty::ReLateBound(ty::DebruijnIndex::new(1), match br {\n             ty::BrNamed(_, name) => {\n@@ -255,7 +255,7 @@ fn in_binder<'tcx, T, U>(f: &mut fmt::Formatter,\n struct TraitAndProjections<'tcx>(ty::TraitRef<'tcx>, Vec<ty::ProjectionPredicate<'tcx>>);\n \n impl<'tcx> TypeFoldable<'tcx> for TraitAndProjections<'tcx> {\n-    fn fold_with<F:ty_fold::TypeFolder<'tcx>>(&self, folder: &mut F)\n+    fn fold_with<F: fold::TypeFolder<'tcx>>(&self, folder: &mut F)\n                                               -> TraitAndProjections<'tcx> {\n         TraitAndProjections(self.0.fold_with(folder), self.1.fold_with(folder))\n     }"}, {"sha": "96d9572b4859178854dde6ce2eefa11371385904", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -24,7 +24,7 @@ use rustc_typeck::middle::stability;\n use rustc_typeck::middle::subst;\n use rustc_typeck::middle::subst::Subst;\n use rustc_typeck::middle::ty::{self, Ty, RegionEscape};\n-use rustc_typeck::middle::ty_relate::TypeRelation;\n+use rustc_typeck::middle::ty::relate::TypeRelation;\n use rustc_typeck::middle::infer;\n use rustc_typeck::middle::infer::lub::Lub;\n use rustc_typeck::middle::infer::glb::Glb;"}, {"sha": "044e96db04de5cd97bbc5b1ae158510ced41609c", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -38,8 +38,7 @@ use trans::type_::Type;\n use trans::type_of;\n use middle::traits;\n use middle::ty::{self, HasTypeFlags, Ty};\n-use middle::ty_fold;\n-use middle::ty_fold::{TypeFolder, TypeFoldable};\n+use middle::ty::fold::{TypeFolder, TypeFoldable};\n use rustc::front::map::{PathElem, PathName};\n use rustc_front::hir;\n use util::nodemap::{FnvHashMap, NodeMap};\n@@ -60,7 +59,7 @@ pub use trans::context::CrateContext;\n /// Returns an equivalent value with all free regions removed (note\n /// that late-bound regions remain, because they are important for\n /// subtyping, but they are anonymized and normalized as well). This\n-/// is a stronger, caching version of `ty_fold::erase_regions`.\n+/// is a stronger, caching version of `ty::fold::erase_regions`.\n pub fn erase_regions<'tcx,T>(cx: &ty::ctxt<'tcx>, value: &T) -> T\n     where T : TypeFoldable<'tcx>\n {\n@@ -80,7 +79,7 @@ pub fn erase_regions<'tcx,T>(cx: &ty::ctxt<'tcx>, value: &T) -> T\n                 Some(u) => return u\n             }\n \n-            let t_norm = ty_fold::super_fold_ty(self, ty);\n+            let t_norm = ty::fold::super_fold_ty(self, ty);\n             self.tcx().normalized_cache.borrow_mut().insert(ty, t_norm);\n             return t_norm;\n         }\n@@ -89,7 +88,7 @@ pub fn erase_regions<'tcx,T>(cx: &ty::ctxt<'tcx>, value: &T) -> T\n             where T : TypeFoldable<'tcx>\n         {\n             let u = self.tcx().anonymize_late_bound_regions(t);\n-            ty_fold::super_fold_binder(self, &u)\n+            ty::fold::super_fold_binder(self, &u)\n         }\n \n         fn fold_region(&mut self, r: ty::Region) -> ty::Region {"}, {"sha": "c98760ce02a269f8f617dcf7e52d712ca173b904", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -33,9 +33,9 @@ use trans::declare;\n use trans::monomorphize;\n use trans::type_::Type;\n use trans::type_of;\n-use middle::cast::{CastTy,IntTy};\n use middle::subst::Substs;\n use middle::ty::{self, Ty};\n+use middle::ty::cast::{CastTy,IntTy};\n use util::nodemap::NodeMap;\n \n use rustc_front::hir;"}, {"sha": "59040b9cafef51d7e5269bf5af64ad2d81211bcc", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -71,10 +71,10 @@ use trans::machine;\n use trans::meth;\n use trans::tvec;\n use trans::type_of;\n-use middle::cast::{CastKind, CastTy};\n use middle::ty::{AdjustDerefRef, AdjustReifyFnPointer, AdjustUnsafeFnPointer};\n use middle::ty::{self, Ty};\n use middle::ty::MethodCall;\n+use middle::ty::cast::{CastKind, CastTy};\n use util::common::indenter;\n use trans::machine::{llsize_of, llsize_of_alloc};\n use trans::type_::Type;\n@@ -2045,8 +2045,8 @@ fn trans_imm_cast<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                               id: ast::NodeId)\n                               -> DatumBlock<'blk, 'tcx, Expr>\n {\n-    use middle::cast::CastTy::*;\n-    use middle::cast::IntTy::*;\n+    use middle::ty::cast::CastTy::*;\n+    use middle::ty::cast::IntTy::*;\n \n     fn int_cast(bcx: Block,\n                 lldsttype: Type,"}, {"sha": "1ef9981a0a46a0b609603836a4217f6847810c11", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -17,7 +17,7 @@ use middle::infer;\n use middle::subst;\n use middle::subst::{Subst, Substs};\n use middle::traits;\n-use middle::ty_fold::{TypeFolder, TypeFoldable};\n+use middle::ty::fold::{TypeFolder, TypeFoldable};\n use trans::attributes;\n use trans::base::{trans_enum_variant, push_ctxt, get_item_val};\n use trans::base::trans_fn;"}, {"sha": "e6f9b1f9d6dec4808b6c438616b9cab914033e73", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -53,13 +53,12 @@ use middle::const_eval::{self, ConstVal};\n use middle::const_eval::EvalHint::UncheckedExprHint;\n use middle::def;\n use middle::def_id::{DefId, LOCAL_CRATE};\n-use middle::wf::object_region_bounds;\n use middle::resolve_lifetime as rl;\n use middle::privacy::{AllPublic, LastMod};\n use middle::subst::{FnSpace, TypeSpace, SelfSpace, Subst, Substs, ParamSpace};\n use middle::traits;\n use middle::ty::{self, RegionEscape, Ty, ToPredicate, HasTypeFlags};\n-use middle::ty_fold;\n+use middle::ty::wf::object_region_bounds;\n use require_c_abi_if_variadic;\n use rscope::{self, UnelidableRscope, RegionScope, ElidableRscope,\n              ObjectLifetimeDefaultRscope, ShiftedRscope, BindingRscope,\n@@ -535,9 +534,9 @@ fn find_implied_output_region<'tcx>(tcx: &ty::ctxt<'tcx>,\n \n     for (input_type, input_pat) in input_tys.iter().zip(input_pats) {\n         let mut regions = FnvHashSet();\n-        let have_bound_regions = ty_fold::collect_regions(tcx,\n-                                                          input_type,\n-                                                          &mut regions);\n+        let have_bound_regions = ty::fold::collect_regions(tcx,\n+                                                           input_type,\n+                                                           &mut regions);\n \n         debug!(\"find_implied_output_regions: collected {:?} from {:?} \\\n                 have_bound_regions={:?}\", &regions, input_type, have_bound_regions);\n@@ -2249,7 +2248,7 @@ impl<'tcx> Bounds<'tcx> {\n         for &region_bound in &self.region_bounds {\n             // account for the binder being introduced below; no need to shift `param_ty`\n             // because, at present at least, it can only refer to early-bound regions\n-            let region_bound = ty_fold::shift_region(region_bound, 1);\n+            let region_bound = ty::fold::shift_region(region_bound, 1);\n             vec.push(ty::Binder(ty::OutlivesPredicate(param_ty, region_bound)).to_predicate());\n         }\n "}, {"sha": "8dc95562e44afabc536ab9faa05c9ef2ea58a41f", "filename": "src/librustc_typeck/check/assoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -12,7 +12,7 @@ use middle::infer::InferCtxt;\n use middle::traits::{self, FulfillmentContext, Normalized, MiscObligation,\n                      SelectionContext, ObligationCause};\n use middle::ty::HasTypeFlags;\n-use middle::ty_fold::TypeFoldable;\n+use middle::ty::fold::TypeFoldable;\n use syntax::ast;\n use syntax::codemap::Span;\n "}, {"sha": "98c8c0a319946ce04ded756353d81b43f05ded8b", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -44,9 +44,9 @@ use super::FnCtxt;\n use super::structurally_resolved_type;\n \n use lint;\n-use middle::cast::{CastKind, CastTy};\n use middle::def_id::DefId;\n use middle::ty::{self, Ty, HasTypeFlags};\n+use middle::ty::cast::{CastKind, CastTy};\n use syntax::codemap::Span;\n use rustc_front::hir;\n use rustc_front::hir::UintTy::TyU8;\n@@ -226,8 +226,8 @@ impl<'tcx> CastCheck<'tcx> {\n     /// can return Ok and create type errors in the fcx rather than returning\n     /// directly. coercion-cast is handled in check instead of here.\n     fn do_check<'a>(&self, fcx: &FnCtxt<'a, 'tcx>) -> Result<CastKind, CastError> {\n-        use middle::cast::IntTy::*;\n-        use middle::cast::CastTy::*;\n+        use middle::ty::cast::IntTy::*;\n+        use middle::ty::cast::CastTy::*;\n \n         let (t_from, t_cast) = match (CastTy::from_ty(self.expr_ty),\n                                       CastTy::from_ty(self.cast_ty)) {"}, {"sha": "d3a292676c5ef7f30b5ccfb607107f98f741e614", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -67,7 +67,7 @@ use middle::traits::{self, ObligationCause};\n use middle::traits::{predicate_for_trait_def, report_selection_error};\n use middle::ty::{AutoDerefRef, AdjustDerefRef};\n use middle::ty::{self, LvaluePreference, TypeAndMut, Ty, TypeError};\n-use middle::ty_relate::RelateResult;\n+use middle::ty::relate::RelateResult;\n use util::common::indent;\n \n use std::cell::RefCell;"}, {"sha": "e7c7b5831d0fc97c20bf9c1fd3f681c7d25e80eb", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -17,7 +17,7 @@ use middle::def_id::DefId;\n use middle::subst;\n use middle::ty::FnSig;\n use middle::ty::{self, Ty};\n-use middle::ty_fold::TypeFolder;\n+use middle::ty::fold::TypeFolder;\n use {CrateCtxt, require_same_types};\n \n use std::collections::{HashMap};"}, {"sha": "048a2b62bcaa3fbc9e6dfb53b00845287e103a5d", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -16,7 +16,7 @@ use middle::def_id::DefId;\n use middle::subst::{self};\n use middle::traits;\n use middle::ty::{self, NoPreference, PreferMutLvalue, Ty};\n-use middle::ty_fold::TypeFoldable;\n+use middle::ty::fold::TypeFoldable;\n use middle::infer;\n use middle::infer::InferCtxt;\n use syntax::codemap::Span;"}, {"sha": "f65602d9aaccb0d9e9d1a348fd709cf79f9e32a3", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -16,13 +16,12 @@ use super::suggest;\n use check;\n use check::{FnCtxt, UnresolvedTypeAction};\n use middle::def_id::DefId;\n-use middle::fast_reject;\n use middle::subst;\n use middle::subst::Subst;\n use middle::traits;\n use middle::ty::{self, NoPreference, RegionEscape, Ty, ToPolyTraitRef, TraitRef};\n use middle::ty::HasTypeFlags;\n-use middle::ty_fold::TypeFoldable;\n+use middle::ty::fold::TypeFoldable;\n use middle::infer;\n use middle::infer::InferCtxt;\n use syntax::ast;\n@@ -41,7 +40,7 @@ struct ProbeContext<'a, 'tcx:'a> {\n     mode: Mode,\n     item_name: ast::Name,\n     steps: Rc<Vec<CandidateStep<'tcx>>>,\n-    opt_simplified_steps: Option<Vec<fast_reject::SimplifiedType>>,\n+    opt_simplified_steps: Option<Vec<ty::fast_reject::SimplifiedType>>,\n     inherent_candidates: Vec<Candidate<'tcx>>,\n     extension_candidates: Vec<Candidate<'tcx>>,\n     impl_dups: HashSet<DefId>,\n@@ -163,7 +162,7 @@ pub fn probe<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     // Create a list of simplified self types, if we can.\n     let mut simplified_steps = Vec::new();\n     for step in &steps {\n-        match fast_reject::simplify_type(fcx.tcx(), step.self_ty, true) {\n+        match ty::fast_reject::simplify_type(fcx.tcx(), step.self_ty, true) {\n             None => { break; }\n             Some(simplified_type) => { simplified_steps.push(simplified_type); }\n         }\n@@ -236,7 +235,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n            mode: Mode,\n            item_name: ast::Name,\n            steps: Vec<CandidateStep<'tcx>>,\n-           opt_simplified_steps: Option<Vec<fast_reject::SimplifiedType>>)\n+           opt_simplified_steps: Option<Vec<ty::fast_reject::SimplifiedType>>)\n            -> ProbeContext<'a,'tcx>\n     {\n         ProbeContext {\n@@ -684,7 +683,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n \n         let impl_type = self.tcx().lookup_item_type(impl_def_id);\n         let impl_simplified_type =\n-            match fast_reject::simplify_type(self.tcx(), impl_type.ty, false) {\n+            match ty::fast_reject::simplify_type(self.tcx(), impl_type.ty, false) {\n                 Some(simplified_type) => simplified_type,\n                 None => { return true; }\n             };"}, {"sha": "dc433786ae4d63f509786ff4c51281327ca27d39", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -97,7 +97,7 @@ use middle::ty::{Disr, ParamTy, ParameterEnvironment};\n use middle::ty::{LvaluePreference, NoPreference, PreferMutLvalue};\n use middle::ty::{self, HasTypeFlags, RegionEscape, ToPolyTraitRef, Ty};\n use middle::ty::{MethodCall, MethodCallee};\n-use middle::ty_fold::{TypeFolder, TypeFoldable};\n+use middle::ty::fold::{TypeFolder, TypeFoldable};\n use require_c_abi_if_variadic;\n use rscope::{ElisionFailureInfo, RegionScope};\n use session::Session;"}, {"sha": "b6ff7b529c556a6bacc7691597467f2f7afd28c4", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -88,14 +88,13 @@ use check::FnCtxt;\n use middle::free_region::FreeRegionMap;\n use middle::implicator::{self, Implication};\n use middle::mem_categorization as mc;\n-use middle::outlives;\n use middle::region::CodeExtent;\n use middle::subst::Substs;\n use middle::traits;\n use middle::ty::{self, RegionEscape, ReScope, Ty, MethodCall, HasTypeFlags};\n use middle::infer::{self, GenericKind, InferCtxt, SubregionOrigin, VerifyBound};\n use middle::pat_util;\n-use middle::wf::{self, ImpliedBound};\n+use middle::ty::wf::ImpliedBound;\n \n use std::mem;\n use std::rc::Rc;\n@@ -420,7 +419,7 @@ impl<'a, 'tcx> Rcx<'a, 'tcx> {\n         for &ty in fn_sig_tys {\n             let ty = self.resolve_type(ty);\n             debug!(\"relate_free_regions(t={:?})\", ty);\n-            let implied_bounds = wf::implied_bounds(self.fcx.infcx(), body_id, ty, span);\n+            let implied_bounds = ty::wf::implied_bounds(self.fcx.infcx(), body_id, ty, span);\n \n             // Record any relations between free regions that we observe into the free-region-map.\n             self.free_region_map.relate_free_regions_from_implied_bounds(&implied_bounds);\n@@ -1527,39 +1526,39 @@ pub fn type_must_outlive<'a, 'tcx>(rcx: &Rcx<'a, 'tcx>,\n \n     assert!(!ty.has_escaping_regions());\n \n-    let components = outlives::components(rcx.infcx(), ty);\n+    let components = ty::outlives::components(rcx.infcx(), ty);\n     components_must_outlive(rcx, origin, components, region);\n }\n \n fn components_must_outlive<'a, 'tcx>(rcx: &Rcx<'a, 'tcx>,\n                                      origin: infer::SubregionOrigin<'tcx>,\n-                                     components: Vec<outlives::Component<'tcx>>,\n+                                     components: Vec<ty::outlives::Component<'tcx>>,\n                                      region: ty::Region)\n {\n     for component in components {\n         let origin = origin.clone();\n         match component {\n-            outlives::Component::Region(region1) => {\n+            ty::outlives::Component::Region(region1) => {\n                 rcx.fcx.mk_subr(origin, region, region1);\n             }\n-            outlives::Component::Param(param_ty) => {\n+            ty::outlives::Component::Param(param_ty) => {\n                 param_ty_must_outlive(rcx, origin, region, param_ty);\n             }\n-            outlives::Component::Projection(projection_ty) => {\n+            ty::outlives::Component::Projection(projection_ty) => {\n                 projection_must_outlive(rcx, origin, region, projection_ty);\n             }\n-            outlives::Component::EscapingProjection(subcomponents) => {\n+            ty::outlives::Component::EscapingProjection(subcomponents) => {\n                 components_must_outlive(rcx, origin, subcomponents, region);\n             }\n-            outlives::Component::UnresolvedInferenceVariable(v) => {\n+            ty::outlives::Component::UnresolvedInferenceVariable(v) => {\n                 // ignore this, we presume it will yield an error\n                 // later, since if a type variable is not resolved by\n                 // this point it never will be\n                 rcx.tcx().sess.delay_span_bug(\n                     origin.span(),\n                     &format!(\"unresolved inference variable in outlives: {:?}\", v));\n             }\n-            outlives::Component::RFC1214(subcomponents) => {\n+            ty::outlives::Component::RFC1214(subcomponents) => {\n                 let suborigin = infer::RFC1214Subregion(Rc::new(origin));\n                 components_must_outlive(rcx, suborigin, subcomponents, region);\n             }"}, {"sha": "2c931e7830d59ba04b9f1eb28899acda39865738", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -17,7 +17,7 @@ use middle::region;\n use middle::subst::{self, TypeSpace, FnSpace, ParamSpace, SelfSpace};\n use middle::traits;\n use middle::ty::{self, Ty};\n-use middle::ty_fold::{TypeFolder, TypeFoldable, super_fold_ty};\n+use middle::ty::fold::{TypeFolder, TypeFoldable, super_fold_ty};\n \n use std::cell::RefCell;\n use std::collections::HashSet;"}, {"sha": "06dd80c57ada8132094e6880f044dd65c3c43d19", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -16,8 +16,7 @@ use middle::def_id::DefId;\n use middle::subst::{self, TypeSpace, FnSpace, ParamSpace, SelfSpace};\n use middle::traits;\n use middle::ty::{self, Ty};\n-use middle::ty_fold::{TypeFolder};\n-use middle::wf;\n+use middle::ty::fold::{TypeFolder};\n \n use std::cell::RefCell;\n use std::collections::HashSet;\n@@ -309,11 +308,11 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n                         fcx.instantiate_type_scheme(\n                             ast_trait_ref.path.span, free_substs, &trait_ref);\n                     let obligations =\n-                        wf::trait_obligations(fcx.infcx(),\n-                                              fcx.body_id,\n-                                              &trait_ref,\n-                                              ast_trait_ref.path.span,\n-                                              true);\n+                        ty::wf::trait_obligations(fcx.infcx(),\n+                                                  fcx.body_id,\n+                                                  &trait_ref,\n+                                                  ast_trait_ref.path.span,\n+                                                  true);\n                     for obligation in obligations {\n                         fcx.register_predicate(obligation);\n                     }\n@@ -341,11 +340,11 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n         let obligations =\n             predicates.predicates\n                       .iter()\n-                      .flat_map(|p| wf::predicate_obligations(fcx.infcx(),\n-                                                              fcx.body_id,\n-                                                              p,\n-                                                              span,\n-                                                              true));\n+                      .flat_map(|p| ty::wf::predicate_obligations(fcx.infcx(),\n+                                                                  fcx.body_id,\n+                                                                  p,\n+                                                                  span,\n+                                                                  true));\n \n         for obligation in obligations {\n             fcx.register_predicate(obligation);"}, {"sha": "de841a0cc0022857311975ab1bf9fcb5840307ef", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -18,7 +18,7 @@ use check::FnCtxt;\n use middle::def_id::DefId;\n use middle::pat_util;\n use middle::ty::{self, Ty, MethodCall, MethodCallee};\n-use middle::ty_fold::{TypeFolder,TypeFoldable};\n+use middle::ty::fold::{TypeFolder,TypeFoldable};\n use middle::infer;\n use write_substs_to_tcx;\n use write_ty_to_tcx;"}, {"sha": "930eb431f4957fdca3dd1af7e0de10baebb77d91", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -78,7 +78,7 @@ use middle::subst::{Substs, FnSpace, ParamSpace, SelfSpace, TypeSpace, VecPerPar\n use middle::ty::{ToPredicate, ImplContainer, ImplOrTraitItemContainer, TraitContainer};\n use middle::ty::{self, RegionEscape, ToPolyTraitRef, Ty, TypeScheme, IntTypeExt};\n use middle::ty::{VariantKind};\n-use middle::ty_fold::{self, TypeFolder, TypeFoldable};\n+use middle::ty::fold::{TypeFolder, TypeFoldable};\n use middle::infer;\n use rscope::*;\n use rustc::front::map as hir_map;\n@@ -2374,7 +2374,7 @@ fn check_method_self_type<'a, 'tcx, RS:RegionScope>(\n          * before we really have a `ParameterEnvironment` to check.\n          */\n \n-        ty_fold::fold_regions(tcx, value, &mut false, |region, _| {\n+        ty::fold::fold_regions(tcx, value, &mut false, |region, _| {\n             match region {\n                 ty::ReEarlyBound(data) => {\n                     let def_id = DefId::local(data.param_id);"}, {"sha": "1b02c736dce3b6e3a0e932afd947bee65784bb41", "filename": "src/librustc_typeck/rscope.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_typeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10c3bde60ce0d9b5401771c443bff51d2a8e2/src%2Flibrustc_typeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Frscope.rs?ref=caa10c3bde60ce0d9b5401771c443bff51d2a8e2", "patch": "@@ -10,7 +10,6 @@\n \n \n use middle::ty;\n-use middle::ty_fold;\n \n use std::cell::Cell;\n use syntax::codemap::Span;\n@@ -239,11 +238,11 @@ impl<'r> ShiftedRscope<'r> {\n impl<'r> RegionScope for ShiftedRscope<'r> {\n     fn object_lifetime_default(&self, span: Span) -> Option<ty::Region> {\n         self.base_scope.object_lifetime_default(span)\n-            .map(|r| ty_fold::shift_region(r, 1))\n+            .map(|r| ty::fold::shift_region(r, 1))\n     }\n \n     fn base_object_lifetime_default(&self, span: Span) -> ty::Region {\n-        ty_fold::shift_region(self.base_scope.base_object_lifetime_default(span), 1)\n+        ty::fold::shift_region(self.base_scope.base_object_lifetime_default(span), 1)\n     }\n \n     fn anon_regions(&self,\n@@ -254,7 +253,7 @@ impl<'r> RegionScope for ShiftedRscope<'r> {\n         match self.base_scope.anon_regions(span, count) {\n             Ok(mut v) => {\n                 for r in &mut v {\n-                    *r = ty_fold::shift_region(*r, 1);\n+                    *r = ty::fold::shift_region(*r, 1);\n                 }\n                 Ok(v)\n             }"}]}