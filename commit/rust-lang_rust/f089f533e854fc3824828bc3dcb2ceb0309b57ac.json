{"sha": "f089f533e854fc3824828bc3dcb2ceb0309b57ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwODlmNTMzZTg1NGZjMzgyNDgyOGJjM2RjYjJjZWIwMzA5YjU3YWM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-29T08:46:49Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-29T08:46:49Z"}, "message": "Move expr_cast and expr_copy to DPS style\n\nIssue #667", "tree": {"sha": "82e3b1e68347da746a165b8add1ae5fb1c122802", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82e3b1e68347da746a165b8add1ae5fb1c122802"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f089f533e854fc3824828bc3dcb2ceb0309b57ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f089f533e854fc3824828bc3dcb2ceb0309b57ac", "html_url": "https://github.com/rust-lang/rust/commit/f089f533e854fc3824828bc3dcb2ceb0309b57ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f089f533e854fc3824828bc3dcb2ceb0309b57ac/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d946e09a7243522249c2f69affdc435f0a423200", "url": "https://api.github.com/repos/rust-lang/rust/commits/d946e09a7243522249c2f69affdc435f0a423200", "html_url": "https://github.com/rust-lang/rust/commit/d946e09a7243522249c2f69affdc435f0a423200"}], "stats": {"total": 30, "additions": 12, "deletions": 18}, "files": [{"sha": "e4f186d13df2a7c538e719defd941bd602095790", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f089f533e854fc3824828bc3dcb2ceb0309b57ac/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f089f533e854fc3824828bc3dcb2ceb0309b57ac/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=f089f533e854fc3824828bc3dcb2ceb0309b57ac", "patch": "@@ -3392,7 +3392,8 @@ fn float_cast(bcx: @block_ctxt, lldsttype: TypeRef, llsrctype: TypeRef,\n         } else { llsrc };\n }\n \n-fn trans_cast(cx: @block_ctxt, e: @ast::expr, id: ast::node_id) -> result {\n+fn trans_cast(cx: @block_ctxt, e: @ast::expr, id: ast::node_id,\n+              dest: dest) -> @block_ctxt {\n     let ccx = bcx_ccx(cx);\n     let e_res = trans_expr(cx, e);\n     let ll_t_in = val_ty(e_res.val);\n@@ -3446,7 +3447,7 @@ fn trans_cast(cx: @block_ctxt, e: @ast::expr, id: ast::node_id) -> result {\n           }\n           _ { ccx.sess.bug(\"Translating unsupported cast.\") }\n         };\n-    ret rslt(e_res.bcx, newval);\n+    ret store_in_dest(e_res.bcx, newval, dest);\n }\n \n // pth is cx.path\n@@ -4188,22 +4189,6 @@ fn trans_rec(bcx: @block_ctxt, fields: [ast::field],\n fn trans_expr(cx: @block_ctxt, e: @ast::expr) -> result {\n     // Fixme Fill in cx.sp\n     alt e.node {\n-      ast::expr_copy(a) {\n-        let e_ty = ty::expr_ty(bcx_tcx(cx), a);\n-        let lv = trans_lval(cx, a);\n-        let bcx = lv.bcx;\n-        if !lv.is_mem { ret {bcx: lv.bcx, val: lv.val}; }\n-        let r = if type_is_immediate(bcx_ccx(cx), e_ty) {\n-            rslt(bcx, Load(bcx, lv.val))\n-        } else {\n-            let {bcx, val: dest} = alloc_ty(bcx, e_ty);\n-            bcx = copy_val(bcx, INIT, dest, lv.val, e_ty);\n-            rslt(bcx, dest)\n-        };\n-        add_clean_temp(bcx, r.val, e_ty);\n-        ret r;\n-      }\n-      ast::expr_cast(val, _) { ret trans_cast(cx, val, e.id); }\n       ast::expr_anon_obj(anon_obj) {\n         ret trans_anon_obj(cx, e.span, anon_obj, e.id);\n       }\n@@ -4283,6 +4268,15 @@ fn trans_expr_dps(bcx: @block_ctxt, e: @ast::expr, dest: dest)\n       }\n       ast::expr_fn(f) { ret trans_expr_fn(bcx, f, e.span, e.id, dest); }\n       ast::expr_bind(f, args) { ret trans_bind(bcx, f, args, e.id, dest); }\n+      ast::expr_copy(a) {\n+        if !expr_is_lval(bcx_tcx(bcx), a) {\n+            ret trans_expr_dps(bcx, a, dest);\n+        } else {\n+            // FIXME[DPS] give this a name that makes more sense\n+            ret trans_expr_backwards_compat(bcx, e, dest);\n+        }\n+      }\n+      ast::expr_cast(val, _) { ret trans_cast(bcx, val, e.id, dest); }\n \n       // These return nothing\n       ast::expr_break. {"}]}