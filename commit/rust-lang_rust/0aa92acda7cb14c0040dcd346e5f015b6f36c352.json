{"sha": "0aa92acda7cb14c0040dcd346e5f015b6f36c352", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYTkyYWNkYTdjYjE0YzAwNDBkY2QzNDZlNWYwMTViNmYzNmMzNTI=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-05-03T16:29:14Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-05-11T11:01:44Z"}, "message": "Add a query to convert from ConstValue to Allocation", "tree": {"sha": "ed1e0e0ae5e77771398982c9b9f6fbc101ba5006", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed1e0e0ae5e77771398982c9b9f6fbc101ba5006"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0aa92acda7cb14c0040dcd346e5f015b6f36c352", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0aa92acda7cb14c0040dcd346e5f015b6f36c352", "html_url": "https://github.com/rust-lang/rust/commit/0aa92acda7cb14c0040dcd346e5f015b6f36c352", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0aa92acda7cb14c0040dcd346e5f015b6f36c352/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdd9787777dac5db6bd555df08038e3c191999e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdd9787777dac5db6bd555df08038e3c191999e4", "html_url": "https://github.com/rust-lang/rust/commit/fdd9787777dac5db6bd555df08038e3c191999e4"}], "stats": {"total": 131, "additions": 110, "deletions": 21}, "files": [{"sha": "4847a7f4ddbec4e6b5f98f9c0e58f6bf44704523", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0aa92acda7cb14c0040dcd346e5f015b6f36c352/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa92acda7cb14c0040dcd346e5f015b6f36c352/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=0aa92acda7cb14c0040dcd346e5f015b6f36c352", "patch": "@@ -621,13 +621,14 @@ define_dep_nodes!( <'tcx>\n     [input] UsedCrateSource(CrateNum),\n     [input] PostorderCnums,\n \n-    // This query is not expected to have inputs -- as a result, it's\n-    // not a good candidate for \"replay\" because it's essentially a\n-    // pure function of its input (and hence the expectation is that\n-    // no caller would be green **apart** from just this\n-    // query). Making it anonymous avoids hashing the result, which\n+    // These queries are not expected to have inputs -- as a result, they\n+    // are not good candidates for \"replay\" because they are essentially\n+    // pure functions of their input (and hence the expectation is that\n+    // no caller would be green **apart** from just these\n+    // queries). Making them anonymous avoids hashing the result, which\n     // may save a bit of time.\n     [anon] EraseRegionsTy { ty: Ty<'tcx> },\n+    [anon] ConstValueToAllocation { val: ConstValue<'tcx>, ty: Ty<'tcx> },\n \n     [input] Freevars(DefId),\n     [input] MaybeUnusedTraitImport(DefId),"}, {"sha": "4e104692d859b78f75a0efd5a30ae0e13a847f23", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0aa92acda7cb14c0040dcd346e5f015b6f36c352/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa92acda7cb14c0040dcd346e5f015b6f36c352/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=0aa92acda7cb14c0040dcd346e5f015b6f36c352", "patch": "@@ -137,6 +137,12 @@ impl<'tcx> QueryDescription<'tcx> for queries::super_predicates_of<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::const_value_to_allocation<'tcx> {\n+    fn describe(_tcx: TyCtxt, (val, ty): (ConstValue<'tcx>, Ty<'tcx>)) -> String {\n+        format!(\"converting value `{:?}` ({}) to an allocation\", val, ty)\n+    }\n+}\n+\n impl<'tcx> QueryDescription<'tcx> for queries::erase_regions_ty<'tcx> {\n     fn describe(_tcx: TyCtxt, ty: Ty<'tcx>) -> String {\n         format!(\"erasing regions from `{:?}`\", ty)"}, {"sha": "3510a1b7a028f55a04d4ded97028b1a8fe47bde1", "filename": "src/librustc/ty/maps/keys.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0aa92acda7cb14c0040dcd346e5f015b6f36c352/src%2Flibrustc%2Fty%2Fmaps%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa92acda7cb14c0040dcd346e5f015b6f36c352/src%2Flibrustc%2Fty%2Fmaps%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fkeys.rs?ref=0aa92acda7cb14c0040dcd346e5f015b6f36c352", "patch": "@@ -145,6 +145,15 @@ impl<'tcx> Key for ty::PolyTraitRef<'tcx>{\n     }\n }\n \n+impl<'tcx> Key for (mir::interpret::ConstValue<'tcx>, Ty<'tcx>) {\n+    fn map_crate(&self) -> CrateNum {\n+        LOCAL_CRATE\n+    }\n+    fn default_span(&self, _: TyCtxt) -> Span {\n+        DUMMY_SP\n+    }\n+}\n+\n impl<'tcx> Key for Ty<'tcx> {\n     fn map_crate(&self) -> CrateNum {\n         LOCAL_CRATE"}, {"sha": "6e419627dd8b5bfe6ed04ecd6fac754fdb18c0f4", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0aa92acda7cb14c0040dcd346e5f015b6f36c352/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa92acda7cb14c0040dcd346e5f015b6f36c352/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=0aa92acda7cb14c0040dcd346e5f015b6f36c352", "patch": "@@ -228,6 +228,11 @@ define_maps! { <'tcx>\n     [] fn const_eval: const_eval_dep_node(ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n         -> EvalResult<'tcx>,\n \n+    /// Converts a constant value to an constant allocation\n+    [] fn const_value_to_allocation: const_value_to_allocation(\n+        (ConstValue<'tcx>, Ty<'tcx>)\n+    ) -> &'tcx Allocation,\n+\n     [] fn check_match: CheckMatch(DefId)\n         -> Result<(), ErrorReported>,\n \n@@ -478,6 +483,12 @@ fn erase_regions_ty<'tcx>(ty: Ty<'tcx>) -> DepConstructor<'tcx> {\n     DepConstructor::EraseRegionsTy { ty }\n }\n \n+fn const_value_to_allocation<'tcx>(\n+    (val, ty): (ConstValue<'tcx>, Ty<'tcx>)\n+) -> DepConstructor<'tcx> {\n+    DepConstructor::ConstValueToAllocation { val, ty }\n+}\n+\n fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {\n     DepConstructor::TypeParamPredicates {\n         item_id,"}, {"sha": "65dcb7311d336fd76885afc62aa53c50be118b50", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa92acda7cb14c0040dcd346e5f015b6f36c352/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa92acda7cb14c0040dcd346e5f015b6f36c352/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=0aa92acda7cb14c0040dcd346e5f015b6f36c352", "patch": "@@ -956,6 +956,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::FulfillObligation |\n         DepKind::VtableMethods |\n         DepKind::EraseRegionsTy |\n+        DepKind::ConstValueToAllocation |\n         DepKind::NormalizeProjectionTy |\n         DepKind::NormalizeTyAfterErasingRegions |\n         DepKind::DropckOutlives |"}, {"sha": "6bf965aaf44630079178dd4536be7f565a31782c", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0aa92acda7cb14c0040dcd346e5f015b6f36c352/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa92acda7cb14c0040dcd346e5f015b6f36c352/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=0aa92acda7cb14c0040dcd346e5f015b6f36c352", "patch": "@@ -8,12 +8,13 @@ use rustc::ty::subst::Subst;\n \n use syntax::ast::Mutability;\n use syntax::codemap::Span;\n+use syntax::codemap::DUMMY_SP;\n \n use rustc::mir::interpret::{\n     EvalResult, EvalError, EvalErrorKind, GlobalId,\n     Value, Pointer, PrimVal, AllocId, Allocation, ConstValue,\n };\n-use super::{Place, EvalContext, StackPopCleanup, ValTy, PlaceExtra, Memory};\n+use super::{Place, EvalContext, StackPopCleanup, ValTy, PlaceExtra, Memory, MemoryKind};\n \n use std::fmt;\n use std::error::Error;\n@@ -470,7 +471,6 @@ pub fn const_variant_index<'a, 'tcx>(\n     let (ptr, align) = match value {\n         Value::ByValPair(..) | Value::ByVal(_) => {\n             let layout = ecx.layout_of(ty)?;\n-            use super::MemoryKind;\n             let ptr = ecx.memory.allocate(layout.size.bytes(), layout.align, Some(MemoryKind::Stack))?;\n             let ptr: Pointer = ptr.into();\n             ecx.write_value_to_ptr(value, ptr, layout.align, ty)?;\n@@ -482,6 +482,30 @@ pub fn const_variant_index<'a, 'tcx>(\n     ecx.read_discriminant_as_variant_index(place, ty)\n }\n \n+pub fn const_value_to_allocation_provider<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    (val, ty): (ConstValue<'tcx>, Ty<'tcx>),\n+) -> &'tcx Allocation {\n+    match val {\n+        ConstValue::ByRef(alloc) => return alloc,\n+        _ => ()\n+    }\n+    let result = || -> EvalResult<'tcx, &'tcx Allocation> {\n+        let mut ecx = EvalContext::new(\n+            tcx.at(DUMMY_SP),\n+            ty::ParamEnv::reveal_all(),\n+            CompileTimeEvaluator,\n+            ());\n+        let value = ecx.const_value_to_value(val, ty)?;\n+        let layout = ecx.layout_of(ty)?;\n+        let ptr = ecx.memory.allocate(layout.size.bytes(), layout.align, Some(MemoryKind::Stack))?;\n+        ecx.write_value_to_ptr(value, ptr.into(), layout.align, ty)?;\n+        let alloc = ecx.memory.get(ptr.alloc_id)?;\n+        Ok(tcx.intern_const_alloc(alloc.clone()))\n+    };\n+    result().expect(\"unable to convert ConstVal to Allocation\")\n+}\n+\n pub fn const_eval_provider<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,"}, {"sha": "ba1c05deef1b42e8a0264c5ef4d7dc34223d14ce", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0aa92acda7cb14c0040dcd346e5f015b6f36c352/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa92acda7cb14c0040dcd346e5f015b6f36c352/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=0aa92acda7cb14c0040dcd346e5f015b6f36c352", "patch": "@@ -1,14 +1,17 @@\n use std::collections::{btree_map, VecDeque};\n use std::ptr;\n \n+use rustc::hir::def_id::DefId;\n use rustc::ty::Instance;\n+use rustc::ty::ParamEnv;\n use rustc::ty::maps::TyCtxtAt;\n use rustc::ty::layout::{self, Align, TargetDataLayout};\n use syntax::ast::Mutability;\n+use rustc::middle::const_val::{ConstVal, ErrKind};\n \n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use rustc::mir::interpret::{MemoryPointer, AllocId, Allocation, AccessKind, Value, Pointer,\n-                            EvalResult, PrimVal, EvalErrorKind};\n+                            EvalResult, PrimVal, EvalErrorKind, GlobalId};\n pub use rustc::mir::interpret::{write_target_uint, write_target_int, read_target_uint};\n \n use super::{EvalContext, Machine};\n@@ -274,6 +277,31 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n \n /// Allocation accessors\n impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n+    fn const_eval_static(&self, def_id: DefId) -> EvalResult<'tcx, &'tcx Allocation> {\n+        let instance = Instance::mono(self.tcx.tcx, def_id);\n+        let gid = GlobalId {\n+            instance,\n+            promoted: None,\n+        };\n+        self.tcx.const_eval(ParamEnv::reveal_all().and(gid)).map_err(|err| {\n+            match *err.kind {\n+                ErrKind::Miri(ref err, _) => match err.kind {\n+                    EvalErrorKind::TypeckError |\n+                    EvalErrorKind::Layout(_) => EvalErrorKind::TypeckError.into(),\n+                    _ => EvalErrorKind::ReferencedConstant.into(),\n+                },\n+                ErrKind::TypeckError => EvalErrorKind::TypeckError.into(),\n+                ref other => bug!(\"const eval returned {:?}\", other),\n+            }\n+        }).map(|val| {\n+            let const_val = match val.val {\n+                ConstVal::Value(val) => val,\n+                ConstVal::Unevaluated(..) => bug!(\"should be evaluated\"),\n+            };\n+            self.tcx.const_value_to_allocation((const_val, val.ty))\n+        })\n+    }\n+\n     pub fn get(&self, id: AllocId) -> EvalResult<'tcx, &Allocation> {\n         // normal alloc?\n         match self.alloc_map.get(&id) {\n@@ -283,13 +311,19 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n                 Some(alloc) => Ok(alloc),\n                 None => {\n                     // static alloc?\n-                    self.tcx.interpret_interner.get_alloc(id)\n-                        // no alloc? produce an error\n-                        .ok_or_else(|| if self.tcx.interpret_interner.get_fn(id).is_some() {\n-                            EvalErrorKind::DerefFunctionPointer.into()\n-                        } else {\n-                            EvalErrorKind::DanglingPointerDeref.into()\n-                        })\n+                    if let Some(a) = self.tcx.interpret_interner.get_alloc(id) {\n+                        return Ok(a);\n+                    }\n+                    // static variable?\n+                    if let Some(did) = self.tcx.interpret_interner.get_static(id) {\n+                        return self.const_eval_static(did);\n+                    }\n+                    // otherwise return an error\n+                    Err(if self.tcx.interpret_interner.get_fn(id).is_some() {\n+                        EvalErrorKind::DerefFunctionPointer.into()\n+                    } else {\n+                        EvalErrorKind::DanglingPointerDeref.into()\n+                    })\n                 },\n             },\n         }"}, {"sha": "d39bae5e8dbbaa1ca4ecc17539f5b6039af025a3", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa92acda7cb14c0040dcd346e5f015b6f36c352/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa92acda7cb14c0040dcd346e5f015b6f36c352/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=0aa92acda7cb14c0040dcd346e5f015b6f36c352", "patch": "@@ -23,6 +23,7 @@ pub use self::const_eval::{\n     mk_borrowck_eval_cx,\n     eval_body,\n     CompileTimeEvaluator,\n+    const_value_to_allocation_provider,\n     const_eval_provider,\n     const_val_field,\n     const_variant_index,"}, {"sha": "fbc0facbc49670ca94fedbeef383d422780c83be", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa92acda7cb14c0040dcd346e5f015b6f36c352/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa92acda7cb14c0040dcd346e5f015b6f36c352/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=0aa92acda7cb14c0040dcd346e5f015b6f36c352", "patch": "@@ -85,6 +85,7 @@ pub fn provide(providers: &mut Providers) {\n     shim::provide(providers);\n     transform::provide(providers);\n     providers.const_eval = interpret::const_eval_provider;\n+    providers.const_value_to_allocation = interpret::const_value_to_allocation_provider;\n     providers.check_match = hair::pattern::check_match;\n }\n "}, {"sha": "0dd1adbff86e0daf7f616c646dcee11b3748c856", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0aa92acda7cb14c0040dcd346e5f015b6f36c352/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa92acda7cb14c0040dcd346e5f015b6f36c352/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=0aa92acda7cb14c0040dcd346e5f015b6f36c352", "patch": "@@ -1373,6 +1373,7 @@ mod temp_stable_hash_impls {\n \n fn fetch_wasm_section(tcx: TyCtxt, id: DefId) -> (String, Vec<u8>) {\n     use rustc::mir::interpret::GlobalId;\n+    use rustc::middle::const_val::ConstVal;\n \n     info!(\"loading wasm section {:?}\", id);\n \n@@ -1391,11 +1392,11 @@ fn fetch_wasm_section(tcx: TyCtxt, id: DefId) -> (String, Vec<u8>) {\n     let param_env = ty::ParamEnv::reveal_all();\n     let val = tcx.const_eval(param_env.and(cid)).unwrap();\n \n-    let mem = val.to_ptr().expect(\"should be pointer\");\n-    assert_eq!(mem.offset, 0);\n-    let alloc = tcx\n-        .interpret_interner\n-        .get_alloc(mem.alloc_id)\n-        .expect(\"miri allocation never successfully created\");\n+    let const_val = match val.val {\n+        ConstVal::Value(val) => val,\n+        ConstVal::Unevaluated(..) => bug!(\"should be evaluated\"),\n+    };\n+\n+    let alloc = tcx.const_value_to_allocation((const_val, val.ty));\n     (section.to_string(), alloc.bytes.clone())\n }"}]}