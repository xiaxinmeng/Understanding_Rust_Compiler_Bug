{"sha": "5bd84432dd2a8e4ad9273c08bce553a5faf9769b", "node_id": "C_kwDOAAsO6NoAKDViZDg0NDMyZGQyYThlNGFkOTI3M2MwOGJjZTU1M2E1ZmFmOTc2OWI", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2022-07-23T21:16:36Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2022-07-23T21:24:44Z"}, "message": "internal: extract common code for adjusting diagnostic range", "tree": {"sha": "3a847ba05e3d8923a8a3ef5ce7a91cd1e5b06ef1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a847ba05e3d8923a8a3ef5ce7a91cd1e5b06ef1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bd84432dd2a8e4ad9273c08bce553a5faf9769b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bd84432dd2a8e4ad9273c08bce553a5faf9769b", "html_url": "https://github.com/rust-lang/rust/commit/5bd84432dd2a8e4ad9273c08bce553a5faf9769b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bd84432dd2a8e4ad9273c08bce553a5faf9769b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a436be44b2952df94acf1f91591e0bc788c36dc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a436be44b2952df94acf1f91591e0bc788c36dc3", "html_url": "https://github.com/rust-lang/rust/commit/a436be44b2952df94acf1f91591e0bc788c36dc3"}], "stats": {"total": 108, "additions": 53, "deletions": 55}, "files": [{"sha": "5f8b3e543b9440edbcb26ea73e321ecb815d2a3e", "filename": "crates/ide-diagnostics/src/handlers/mismatched_arg_count.rs", "status": "modified", "additions": 24, "deletions": 34, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/5bd84432dd2a8e4ad9273c08bce553a5faf9769b/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmismatched_arg_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd84432dd2a8e4ad9273c08bce553a5faf9769b/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmismatched_arg_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmismatched_arg_count.rs?ref=5bd84432dd2a8e4ad9273c08bce553a5faf9769b", "patch": "@@ -1,11 +1,9 @@\n-use ide_db::base_db::{FileRange, SourceDatabase};\n use syntax::{\n-    algo::find_node_at_range,\n     ast::{self, HasArgList},\n     AstNode, TextRange,\n };\n \n-use crate::{Diagnostic, DiagnosticsContext};\n+use crate::{adjusted_display_range, Diagnostic, DiagnosticsContext};\n \n // Diagnostic: mismatched-arg-count\n //\n@@ -20,40 +18,32 @@ pub(crate) fn mismatched_arg_count(\n }\n \n fn invalid_args_range(ctx: &DiagnosticsContext<'_>, d: &hir::MismatchedArgCount) -> TextRange {\n-    let FileRange { file_id, range } =\n-        ctx.sema.diagnostics_display_range(d.call_expr.clone().map(|it| it.into()));\n-\n-    let source_file = ctx.sema.db.parse(file_id);\n-    let expr = find_node_at_range::<ast::Expr>(&source_file.syntax_node(), range)\n-        .filter(|it| it.syntax().text_range() == range);\n-    let arg_list = match expr {\n-        Some(ast::Expr::CallExpr(call)) => call.arg_list(),\n-        Some(ast::Expr::MethodCallExpr(call)) => call.arg_list(),\n-        _ => None,\n-    };\n-    let arg_list = match arg_list {\n-        Some(it) => it,\n-        None => return range,\n-    };\n-    if d.found < d.expected {\n-        if d.found == 0 {\n-            return arg_list.syntax().text_range();\n+    adjusted_display_range::<ast::Expr>(ctx, d.call_expr.clone().map(|it| it.into()), &|expr| {\n+        let arg_list = match expr {\n+            ast::Expr::CallExpr(call) => call.arg_list()?,\n+            ast::Expr::MethodCallExpr(call) => call.arg_list()?,\n+            _ => return None,\n+        };\n+        if d.found < d.expected {\n+            if d.found == 0 {\n+                return Some(arg_list.syntax().text_range());\n+            }\n+            if let Some(r_paren) = arg_list.r_paren_token() {\n+                return Some(r_paren.text_range());\n+            }\n         }\n-        if let Some(r_paren) = arg_list.r_paren_token() {\n-            return r_paren.text_range();\n+        if d.expected < d.found {\n+            if d.expected == 0 {\n+                return Some(arg_list.syntax().text_range());\n+            }\n+            let zip = arg_list.args().nth(d.expected).zip(arg_list.r_paren_token());\n+            if let Some((arg, r_paren)) = zip {\n+                return Some(arg.syntax().text_range().cover(r_paren.text_range()));\n+            }\n         }\n-    }\n-    if d.expected < d.found {\n-        if d.expected == 0 {\n-            return arg_list.syntax().text_range();\n-        }\n-        let zip = arg_list.args().nth(d.expected).zip(arg_list.r_paren_token());\n-        if let Some((arg, r_paren)) = zip {\n-            return arg.syntax().text_range().cover(r_paren.text_range());\n-        }\n-    }\n \n-    range\n+        None\n+    })\n }\n \n #[cfg(test)]"}, {"sha": "6bf90e645b49ae4be4789207762044b05f584264", "filename": "crates/ide-diagnostics/src/handlers/type_mismatch.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5bd84432dd2a8e4ad9273c08bce553a5faf9769b/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd84432dd2a8e4ad9273c08bce553a5faf9769b/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs?ref=5bd84432dd2a8e4ad9273c08bce553a5faf9769b", "patch": "@@ -1,34 +1,27 @@\n use hir::{db::AstDatabase, HirDisplay, Type};\n-use ide_db::{\n-    base_db::{FileRange, SourceDatabase},\n-    famous_defs::FamousDefs,\n-    source_change::SourceChange,\n-};\n+use ide_db::{famous_defs::FamousDefs, source_change::SourceChange};\n use syntax::{\n-    algo::find_node_at_range,\n     ast::{self, BlockExpr, ExprStmt},\n     AstNode,\n };\n use text_edit::TextEdit;\n \n-use crate::{fix, Assist, Diagnostic, DiagnosticsContext};\n+use crate::{adjusted_display_range, fix, Assist, Diagnostic, DiagnosticsContext};\n \n // Diagnostic: type-mismatch\n //\n // This diagnostic is triggered when the type of an expression does not match\n // the expected type.\n pub(crate) fn type_mismatch(ctx: &DiagnosticsContext<'_>, d: &hir::TypeMismatch) -> Diagnostic {\n-    let FileRange { file_id, range } =\n-        ctx.sema.diagnostics_display_range(d.expr.clone().map(|it| it.into()));\n-\n-    let source_file = ctx.sema.db.parse(file_id);\n-    let block = find_node_at_range::<ast::BlockExpr>(&source_file.syntax_node(), range)\n-        .filter(|it| it.syntax().text_range() == range);\n-    let display_range = block\n-        .and_then(|it| it.stmt_list())\n-        .and_then(|it| it.r_curly_token())\n-        .map(|it| it.text_range())\n-        .unwrap_or(range);\n+    let display_range = adjusted_display_range::<ast::BlockExpr>(\n+        ctx,\n+        d.expr.clone().map(|it| it.into()),\n+        &|block| {\n+            let r_curly_range = block.stmt_list()?.r_curly_token()?.text_range();\n+            cov_mark::hit!(type_mismatch_on_block);\n+            Some(r_curly_range)\n+        },\n+    );\n \n     let mut diag = Diagnostic::new(\n         \"type-mismatch\",\n@@ -565,6 +558,7 @@ fn test() -> String {\n \n     #[test]\n     fn type_mismatch_on_block() {\n+        cov_mark::check!(type_mismatch_on_block);\n         check_diagnostics(\n             r#\"\n fn f() -> i32 {"}, {"sha": "41abaa836f5fd6354555c7b2b0d5542fe9a6d943", "filename": "crates/ide-diagnostics/src/lib.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5bd84432dd2a8e4ad9273c08bce553a5faf9769b/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd84432dd2a8e4ad9273c08bce553a5faf9769b/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Flib.rs?ref=5bd84432dd2a8e4ad9273c08bce553a5faf9769b", "patch": "@@ -55,15 +55,15 @@ mod handlers {\n #[cfg(test)]\n mod tests;\n \n-use hir::{diagnostics::AnyDiagnostic, Semantics};\n+use hir::{diagnostics::AnyDiagnostic, InFile, Semantics};\n use ide_db::{\n     assists::{Assist, AssistId, AssistKind, AssistResolveStrategy},\n-    base_db::{FileId, SourceDatabase},\n+    base_db::{FileId, FileRange, SourceDatabase},\n     label::Label,\n     source_change::SourceChange,\n     FxHashSet, RootDatabase,\n };\n-use syntax::{ast::AstNode, TextRange};\n+use syntax::{algo::find_node_at_range, ast::AstNode, SyntaxNodePtr, TextRange};\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n pub struct DiagnosticCode(pub &'static str);\n@@ -244,3 +244,17 @@ fn unresolved_fix(id: &'static str, label: &str, target: TextRange) -> Assist {\n         trigger_signature_help: false,\n     }\n }\n+\n+fn adjusted_display_range<N: AstNode>(\n+    ctx: &DiagnosticsContext<'_>,\n+    diag_ptr: InFile<SyntaxNodePtr>,\n+    adj: &dyn Fn(N) -> Option<TextRange>,\n+) -> TextRange {\n+    let FileRange { file_id, range } = ctx.sema.diagnostics_display_range(diag_ptr);\n+\n+    let source_file = ctx.sema.db.parse(file_id);\n+    find_node_at_range::<N>(&source_file.syntax_node(), range)\n+        .filter(|it| it.syntax().text_range() == range)\n+        .and_then(adj)\n+        .unwrap_or(range)\n+}"}]}