{"sha": "9cb20153a8e8cdcbf0e88f5575c9b1f7b37175da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljYjIwMTUzYThlOGNkY2JmMGU4OGY1NTc1YzliMWY3YjM3MTc1ZGE=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-05-11T11:06:43Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-05-11T11:06:43Z"}, "message": "Hash only on def_num when storing def_ids that are local", "tree": {"sha": "2024dff87e6854215123f8924d5ee11e80ae3d30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2024dff87e6854215123f8924d5ee11e80ae3d30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cb20153a8e8cdcbf0e88f5575c9b1f7b37175da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cb20153a8e8cdcbf0e88f5575c9b1f7b37175da", "html_url": "https://github.com/rust-lang/rust/commit/9cb20153a8e8cdcbf0e88f5575c9b1f7b37175da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cb20153a8e8cdcbf0e88f5575c9b1f7b37175da/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f222423b7795cd8788b59a34542f19745bd4863", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f222423b7795cd8788b59a34542f19745bd4863", "html_url": "https://github.com/rust-lang/rust/commit/7f222423b7795cd8788b59a34542f19745bd4863"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "ce2048af80b5785b93982592bd3ddd8567e512b5", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9cb20153a8e8cdcbf0e88f5575c9b1f7b37175da/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb20153a8e8cdcbf0e88f5575c9b1f7b37175da/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=9cb20153a8e8cdcbf0e88f5575c9b1f7b37175da", "patch": "@@ -6,6 +6,7 @@ import front.ast.ann;\n import front.creader;\n import driver.session.session;\n import util.common.new_def_hash;\n+import util.common.new_int_hash;\n import util.common.span;\n import util.typestate_ann.ts_ann;\n import std.Map.hashmap;\n@@ -56,8 +57,8 @@ fn new_ext_hash() -> ext_hash {\n     ret std.Map.mk_hashmap[tup(def_id,str),def](hash, eq);\n }\n \n-type env = rec(hashmap[def_id,import_state] imports,\n-               hashmap[def_id,@wrap_mod] mod_map,\n+type env = rec(hashmap[ast.def_num,import_state] imports,\n+               hashmap[ast.def_num,@wrap_mod] mod_map,\n                hashmap[def_id,vec[ident]] ext_map,\n                ext_hash ext_cache,\n                session sess);\n@@ -72,8 +73,8 @@ tag namespace {\n }\n \n fn resolve_crate(session sess, @ast.crate crate) -> @ast.crate {\n-    auto e = @rec(imports = new_def_hash[import_state](),\n-                  mod_map = new_def_hash[@wrap_mod](),\n+    auto e = @rec(imports = new_int_hash[import_state](),\n+                  mod_map = new_int_hash[@wrap_mod](),\n                   ext_map = new_def_hash[vec[ident]](),\n                   ext_cache = new_ext_hash(),\n                   sess = sess);\n@@ -107,10 +108,10 @@ fn map_crate(&@env e, &ast.crate c) {\n         *sc = cons[scope](scope_item(i), @*sc);\n         alt (i.node) {\n             case (ast.item_mod(_, ?md, ?defid)) {\n-                e.mod_map.insert(defid, @wmod(md));\n+                e.mod_map.insert(defid._1, @wmod(md));\n             }\n             case (ast.item_native_mod(_, ?nmd, ?defid)) {\n-                e.mod_map.insert(defid, @wnmod(nmd));\n+                e.mod_map.insert(defid._1, @wnmod(nmd));\n             }\n             case (_) {}\n         }\n@@ -121,15 +122,15 @@ fn map_crate(&@env e, &ast.crate c) {\n     fn visit_view_item(@env e, @mutable list[scope] sc, &@ast.view_item i) {\n         alt (i.node) {\n             case (ast.view_item_import(_, ?ids, ?defid)) {\n-                e.imports.insert(defid, todo(i, *sc));\n+                e.imports.insert(defid._1, todo(i, *sc));\n             }\n             case (_) {}\n         }\n     }\n }\n \n fn resolve_imports(&env e) {\n-    for each (@tup(def_id, import_state) it in e.imports.items()) {\n+    for each (@tup(ast.def_num, import_state) it in e.imports.items()) {\n         alt (it._1) {\n             case (todo(?item, ?sc)) {\n                 resolve_import(e, item, sc);\n@@ -185,7 +186,7 @@ fn resolve_names(&@env e, &ast.crate c) -> @ast.crate {\n }\n \n fn lookup_import(&env e, def_id defid, namespace ns) -> Option.t[def] {\n-    alt (e.imports.get(defid)) {\n+    alt (e.imports.get(defid._1)) {\n         case (todo(?item, ?sc)) {\n             resolve_import(e, item, sc);\n             ret lookup_import(e, defid, ns);\n@@ -207,7 +208,7 @@ fn resolve_import(&env e, &@ast.view_item it, &list[scope] sc) {\n             defid = _defid; ids = _ids;\n         }\n     }\n-    e.imports.insert(defid, resolving(it.span));\n+    e.imports.insert(defid._1, resolving(it.span));\n     \n     auto n_idents = Vec.len(ids);\n     auto end_id = ids.(n_idents - 1u);\n@@ -242,7 +243,7 @@ fn resolve_import(&env e, &@ast.view_item it, &list[scope] sc) {\n         if (val == none[def] && typ == none[def]) {\n             unresolved(e, sp, id, \"import\");\n         }\n-        e.imports.insert(defid, resolved(val, typ));\n+        e.imports.insert(defid._1, resolved(val, typ));\n     }\n }\n \n@@ -610,14 +611,14 @@ fn lookup_in_mod(&env e, def m, ident id, namespace ns, dir dr)\n     }\n     alt (m) {\n         case (ast.def_mod(?defid)) {\n-            alt (*e.mod_map.get(defid)) {\n+            alt (*e.mod_map.get(defid._1)) {\n                 case (wmod(?m)) {\n                     ret lookup_in_regular_mod(e, m, id, ns, dr);\n                 }\n             }\n         }\n         case (ast.def_native_mod(?defid)) {\n-            alt (*e.mod_map.get(defid)) {\n+            alt (*e.mod_map.get(defid._1)) {\n                 case (wnmod(?m)) {\n                     ret lookup_in_native_mod(e, m, id, ns);\n                 }"}]}