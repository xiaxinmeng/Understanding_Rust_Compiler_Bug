{"sha": "2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYmMyNWU2ZmNlOWJiNTk0ZWE3OGNjZmQ1OGVmMWI2ZWE0MmVhMzg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-03-24T14:49:58Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-03-24T14:59:18Z"}, "message": "Merge `DefPathData::VariantCtor` and `DefPathData::StructCtor`", "tree": {"sha": "96398c53c365693a2e0a0843b957478e22803139", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96398c53c365693a2e0a0843b957478e22803139"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38", "html_url": "https://github.com/rust-lang/rust/commit/2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bcf9f4f119b8109c6c642dcfeb63fb39c26950a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bcf9f4f119b8109c6c642dcfeb63fb39c26950a", "html_url": "https://github.com/rust-lang/rust/commit/5bcf9f4f119b8109c6c642dcfeb63fb39c26950a"}], "stats": {"total": 64, "additions": 26, "deletions": 38}, "files": [{"sha": "1a3bbc5ecc49ed3bce7c9f370efa8a65059f5860", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38", "patch": "@@ -160,10 +160,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                 ItemKind::Struct(ref struct_def, _) | ItemKind::Union(ref struct_def, _) => {\n                     // If this is a unit or tuple-like struct, register the constructor.\n                     if let Some(ctor_hir_id) = struct_def.ctor_id() {\n-                        this.create_def(ctor_hir_id,\n-                                        DefPathData::StructCtor,\n-                                        REGULAR_SPACE,\n-                                        i.span);\n+                        this.create_def(ctor_hir_id, DefPathData::Ctor, REGULAR_SPACE, i.span);\n                     }\n                 }\n                 _ => {}\n@@ -199,10 +196,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                                   v.span);\n         self.with_parent(def, |this| {\n             if let Some(ctor_hir_id) = v.node.data.ctor_id() {\n-                this.create_def(ctor_hir_id,\n-                                DefPathData::VariantCtor,\n-                                REGULAR_SPACE,\n-                                v.span);\n+                this.create_def(ctor_hir_id, DefPathData::Ctor, REGULAR_SPACE, v.span);\n             }\n             visit::walk_variant(this, v, g, item_id)\n         });"}, {"sha": "1006d813e65ed6cd29183fa0fff77da36c9f00b6", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38", "patch": "@@ -366,10 +366,8 @@ pub enum DefPathData {\n     EnumVariant(InternedString),\n     /// A struct field\n     Field(InternedString),\n-    /// Implicit ctor for a unit or tuple-like struct\n-    StructCtor,\n-    /// Implicit ctor for a unit or tuple-like enum variant\n-    VariantCtor,\n+    /// Implicit ctor for a unit or tuple-like struct or enum variant.\n+    Ctor,\n     /// A constant expression (see {ast,hir}::AnonConst).\n     AnonConst,\n     /// An `impl Trait` type node\n@@ -654,8 +652,7 @@ impl DefPathData {\n             CrateRoot |\n             Misc |\n             ClosureExpr |\n-            StructCtor |\n-            VariantCtor |\n+            Ctor |\n             AnonConst |\n             ImplTrait => None\n         }\n@@ -686,8 +683,7 @@ impl DefPathData {\n             Impl => \"{{impl}}\",\n             Misc => \"{{misc}}\",\n             ClosureExpr => \"{{closure}}\",\n-            StructCtor => \"{{struct constructor}}\",\n-            VariantCtor => \"{{variant constructor}}\",\n+            Ctor => \"{{constructor}}\",\n             AnonConst => \"{{constant}}\",\n             ImplTrait => \"{{opaque}}\",\n         };"}, {"sha": "f54e69f352a4ed481a0436086f5de8a448e7f4d4", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38", "patch": "@@ -150,8 +150,7 @@ impl<'tcx> InstanceDef<'tcx> {\n             _ => return true\n         };\n         match tcx.def_key(def_id).disambiguated_data.data {\n-            DefPathData::StructCtor | DefPathData::VariantCtor |\n-            DefPathData::ClosureExpr => true,\n+            DefPathData::Ctor | DefPathData::ClosureExpr => true,\n             _ => false\n         }\n     }"}, {"sha": "880f75ab9ddba572f710b1f60e81a8d896d94096", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38", "patch": "@@ -2960,8 +2960,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         } else {\n             let def_key = self.def_key(id);\n             match def_key.disambiguated_data.data {\n-                // The name of a `StructCtor` or `VariantCtor` is that of its parent.\n-                hir_map::DefPathData::StructCtor | hir_map::DefPathData::VariantCtor =>\n+                // The name of a constructor is that of its parent.\n+                hir_map::DefPathData::Ctor =>\n                     self.item_name(DefId {\n                         krate: id.krate,\n                         index: def_key.parent.unwrap()"}, {"sha": "c9a4961a8e044cabfabbe53fb0ff850a0a6eb31e", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38", "patch": "@@ -285,13 +285,13 @@ pub trait PrettyPrinter<'gcx: 'tcx, 'tcx>:\n         let mut cur_def_key = self.tcx().def_key(def_id);\n         debug!(\"try_print_visible_def_path: cur_def_key={:?}\", cur_def_key);\n \n-        // For a UnitStruct or TupleStruct we want the name of its parent rather than <unnamed>.\n+        // For a constructor we want the name of its parent rather than <unnamed>.\n         match cur_def_key.disambiguated_data.data {\n-            DefPathData::StructCtor | DefPathData::VariantCtor => {\n+            DefPathData::Ctor => {\n                 let parent = DefId {\n                     krate: def_id.krate,\n                     index: cur_def_key.parent\n-                        .expect(\"DefPathData::StructCtor/VariantData missing a parent\"),\n+                        .expect(\"DefPathData::Ctor/VariantData missing a parent\"),\n                 };\n \n                 cur_def_key = self.tcx().def_key(parent);\n@@ -864,8 +864,7 @@ impl TyCtxt<'_, '_, '_> {\n             DefPathData::AnonConst |\n             DefPathData::ConstParam(..) |\n             DefPathData::ClosureExpr |\n-            DefPathData::VariantCtor |\n-            DefPathData::StructCtor => Namespace::ValueNS,\n+            DefPathData::Ctor => Namespace::ValueNS,\n \n             DefPathData::MacroDef(..) => Namespace::MacroNS,\n \n@@ -1029,7 +1028,7 @@ impl<F: fmt::Write> Printer<'gcx, 'tcx> for FmtPrinter<'_, 'gcx, 'tcx, F> {\n \n         // Skip `::{{constructor}}` on tuple/unit structs.\n         match disambiguated_data.data {\n-            DefPathData::StructCtor | DefPathData::VariantCtor => return Ok(self),\n+            DefPathData::Ctor => return Ok(self),\n             _ => {}\n         }\n "}, {"sha": "ccead14e76b23ea68da5e34d49f32d69ce5cdca8", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38", "patch": "@@ -549,8 +549,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     /// Returns `true` if this `DefId` refers to the implicit constructor for\n     /// a tuple struct like `struct Foo(u32)`, and `false` otherwise.\n-    pub fn is_struct_constructor(self, def_id: DefId) -> bool {\n-        self.def_key(def_id).disambiguated_data.data == DefPathData::StructCtor\n+    pub fn is_constructor(self, def_id: DefId) -> bool {\n+        self.def_key(def_id).disambiguated_data.data == DefPathData::Ctor\n     }\n \n     /// Given the `DefId` of a fn or closure, returns the `DefId` of"}, {"sha": "ebd48f0ae1e2b751a3fa63f9eb9a37fbaca47efb", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38", "patch": "@@ -522,7 +522,7 @@ impl Printer<'tcx, 'tcx> for SymbolPrinter<'_, 'tcx> {\n \n         // Skip `::{{constructor}}` on tuple/unit structs.\n         match disambiguated_data.data {\n-            DefPathData::StructCtor => return Ok(self),\n+            DefPathData::Ctor => return Ok(self),\n             _ => {}\n         }\n "}, {"sha": "0e750cd15eebd55494056f272bc2bdb0e5e4ecb1", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38", "patch": "@@ -947,11 +947,11 @@ impl<'a, 'tcx> CrateMetadata {\n             return Lrc::new([]);\n         }\n \n-        // The attributes for a tuple struct are attached to the definition, not the ctor;\n+        // The attributes for a tuple struct/variant are attached to the definition, not the ctor;\n         // we assume that someone passing in a tuple struct ctor is actually wanting to\n         // look at the definition\n         let def_key = self.def_key(node_id);\n-        let item_id = if def_key.disambiguated_data.data == DefPathData::StructCtor {\n+        let item_id = if def_key.disambiguated_data.data == DefPathData::Ctor {\n             def_key.parent.unwrap()\n         } else {\n             node_id"}, {"sha": "5f0892d1d46e684024c61c89817a1ef105ad28c9", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38", "patch": "@@ -75,8 +75,8 @@ fn mir_borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> BorrowC\n     // Return early if we are not supposed to use MIR borrow checker for this function.\n     return_early = !tcx.has_attr(def_id, \"rustc_mir\") && !tcx.use_mir_borrowck();\n \n-    if tcx.is_struct_constructor(def_id) {\n-        // We are not borrow checking the automatically generated struct constructors\n+    if tcx.is_constructor(def_id) {\n+        // We are not borrow checking the automatically generated struct/variant constructors\n         // because we want to accept structs such as this (taken from the `linked-hash-map`\n         // crate):\n         // ```rust"}, {"sha": "d3d6b98627703ac3e9f948e665a5aa69e21ad783", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38", "patch": "@@ -2685,8 +2685,8 @@ impl MirPass for TypeckMir {\n             return;\n         }\n \n-        if tcx.is_struct_constructor(def_id) {\n-            // We just assume that the automatically generated struct constructors are\n+        if tcx.is_constructor(def_id) {\n+            // We just assume that the automatically generated struct/variant constructors are\n             // correct. See the comment in the `mir_borrowck` implementation for an\n             // explanation why we need this.\n             return;"}, {"sha": "f4f17e1dcc519873795c46e8eb14b93b505f420f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38", "patch": "@@ -5334,7 +5334,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         Some(original_span.with_lo(original_span.hi() - BytePos(1)))\n     }\n \n-    // Rewrite `SelfCtor` to `StructCtor`\n+    // Rewrite `SelfCtor` to `Ctor`\n     pub fn rewrite_self_ctor(&self, def: Def, span: Span) -> (Def, DefId, Ty<'tcx>) {\n         let tcx = self.tcx;\n         if let Def::SelfCtor(impl_def_id) = def {"}, {"sha": "606503151c985911077be563dde3d98a1da4174e", "filename": "src/test/mir-opt/unusual-item-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs?ref=2cbc25e6fce9bb594ea78ccfd58ef1b6ea42ea38", "patch": "@@ -72,7 +72,7 @@ fn main() {\n // }\n // END rustc.ptr-real_drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir\n \n-// START rustc.Test-X-{{variant constructor}}.mir_map.0.mir\n+// START rustc.Test-X-{{constructor}}.mir_map.0.mir\n // fn Test::X(_1: usize) -> Test {\n //     let mut _0: Test;\n //\n@@ -81,4 +81,4 @@ fn main() {\n //         return;\n //     }\n // }\n-// END rustc.Test-X-{{variant constructor}}.mir_map.0.mir\n+// END rustc.Test-X-{{constructor}}.mir_map.0.mir"}]}