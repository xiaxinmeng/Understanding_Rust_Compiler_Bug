{"sha": "5b4d54ee5be3166b662acd6fa0231c9851069e99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNGQ1NGVlNWJlMzE2NmI2NjJhY2Q2ZmEwMjMxYzk4NTEwNjllOTk=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-04-17T20:02:16Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-04-22T12:18:36Z"}, "message": "Specialize kinds inference for `Unsafe<T>`\n\nThis patch adds a special rule for `Unsafe<T>` and makes it `Share`\nregardless of whether T is `Share`.\n\n[breaking-change]\n\nCloses #13125", "tree": {"sha": "3ddbd6e84d70d8e27c76abf41a288b27d63c4c87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ddbd6e84d70d8e27c76abf41a288b27d63c4c87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b4d54ee5be3166b662acd6fa0231c9851069e99", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b4d54ee5be3166b662acd6fa0231c9851069e99", "html_url": "https://github.com/rust-lang/rust/commit/5b4d54ee5be3166b662acd6fa0231c9851069e99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b4d54ee5be3166b662acd6fa0231c9851069e99/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef1b929b2f732f96d6f9357467cf7b45b85c5413", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef1b929b2f732f96d6f9357467cf7b45b85c5413", "html_url": "https://github.com/rust-lang/rust/commit/ef1b929b2f732f96d6f9357467cf7b45b85c5413"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "3428ee96c73104b47e0cd80ae7583dce28297679", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b4d54ee5be3166b662acd6fa0231c9851069e99/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b4d54ee5be3166b662acd6fa0231c9851069e99/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=5b4d54ee5be3166b662acd6fa0231c9851069e99", "patch": "@@ -2214,7 +2214,9 @@ pub fn type_contents(cx: &ctxt, ty: t) -> TypeContents {\n         } else if Some(did) == cx.lang_items.no_share_bound() {\n             tc | TC::ReachesNoShare\n         } else if Some(did) == cx.lang_items.unsafe_type() {\n-            tc | TC::InteriorUnsafe\n+            // FIXME(#13231): This shouldn't be needed after\n+            // opt-in built-in bounds are implemented.\n+            (tc | TC::InteriorUnsafe) - TC::Nonsharable\n         } else {\n             tc\n         }"}, {"sha": "6dec86ddf622f8222613c9e587644ad6ff48b1ae", "filename": "src/test/compile-fail/typeck-unsafe-always-share.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5b4d54ee5be3166b662acd6fa0231c9851069e99/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b4d54ee5be3166b662acd6fa0231c9851069e99/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs?ref=5b4d54ee5be3166b662acd6fa0231c9851069e99", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Verify that Unsafe is *always* share regardles `T` is share.\n+\n+// ignore-tidy-linelength\n+\n+use std::ty::Unsafe;\n+use std::kinds::marker;\n+\n+struct MyShare<T> {\n+    u: Unsafe<T>\n+}\n+\n+struct NoShare {\n+    m: marker::NoShare\n+}\n+\n+fn test<T: Share>(s: T){\n+\n+}\n+\n+fn main() {\n+    let us = Unsafe::new(MyShare{u: Unsafe::new(0)});\n+    test(us);\n+\n+    let uns = Unsafe::new(NoShare{m: marker::NoShare});\n+    test(uns);\n+\n+    let ms = MyShare{u: uns};\n+    test(ms);\n+\n+    let ns = NoShare{m: marker::NoShare};\n+    test(ns);\n+    //~^ ERROR instantiating a type parameter with an incompatible type `NoShare`, which does not fulfill `Share`\n+}"}]}