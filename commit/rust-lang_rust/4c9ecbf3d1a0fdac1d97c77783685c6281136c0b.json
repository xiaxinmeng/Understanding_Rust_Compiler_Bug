{"sha": "4c9ecbf3d1a0fdac1d97c77783685c6281136c0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjOWVjYmYzZDFhMGZkYWMxZDk3Yzc3NzgzNjg1YzYyODExMzZjMGI=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-06-03T06:10:03Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-06-04T23:09:35Z"}, "message": "Add `modernize_and_adjust` methods.\n\nThese combine two `HygieneData::with` calls into one.", "tree": {"sha": "f4f6536f0c6201c6f45dc99593151a6bf0da996b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4f6536f0c6201c6f45dc99593151a6bf0da996b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c9ecbf3d1a0fdac1d97c77783685c6281136c0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c9ecbf3d1a0fdac1d97c77783685c6281136c0b", "html_url": "https://github.com/rust-lang/rust/commit/4c9ecbf3d1a0fdac1d97c77783685c6281136c0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c9ecbf3d1a0fdac1d97c77783685c6281136c0b/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab9bbf48db3ef8cd83bbcc4dfd40f0308a738cc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab9bbf48db3ef8cd83bbcc4dfd40f0308a738cc1", "html_url": "https://github.com/rust-lang/rust/commit/ab9bbf48db3ef8cd83bbcc4dfd40f0308a738cc1"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "e585f9939a0141e0f48e6bc717b779f95ee18ebe", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c9ecbf3d1a0fdac1d97c77783685c6281136c0b/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c9ecbf3d1a0fdac1d97c77783685c6281136c0b/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=4c9ecbf3d1a0fdac1d97c77783685c6281136c0b", "patch": "@@ -3101,15 +3101,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn adjust_ident(self, mut ident: Ident, scope: DefId) -> Ident {\n-        ident = ident.modern();\n-        ident.span.adjust(self.expansion_that_defined(scope));\n+        ident.span.modernize_and_adjust(self.expansion_that_defined(scope));\n         ident\n     }\n \n     pub fn adjust_ident_and_get_scope(self, mut ident: Ident, scope: DefId, block: hir::HirId)\n                                       -> (Ident, DefId) {\n-        ident = ident.modern();\n-        let scope = match ident.span.adjust(self.expansion_that_defined(scope)) {\n+        let scope = match ident.span.modernize_and_adjust(self.expansion_that_defined(scope)) {\n             Some(actual_expansion) =>\n                 self.hir().definitions().parent_module_of_macro_def(actual_expansion),\n             None => self.hir().get_module_parent_by_hir_id(block),"}, {"sha": "9b9cf80f822b027c8487f31c4b7b0693c1eb3d73", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c9ecbf3d1a0fdac1d97c77783685c6281136c0b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c9ecbf3d1a0fdac1d97c77783685c6281136c0b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4c9ecbf3d1a0fdac1d97c77783685c6281136c0b", "patch": "@@ -2330,14 +2330,12 @@ impl<'a> Resolver<'a> {\n         let orig_current_module = self.current_module;\n         match module {\n             ModuleOrUniformRoot::Module(module) => {\n-                ident.span = ident.span.modern();\n-                if let Some(def) = ident.span.adjust(module.expansion) {\n+                if let Some(def) = ident.span.modernize_and_adjust(module.expansion) {\n                     self.current_module = self.macro_def_scope(def);\n                 }\n             }\n             ModuleOrUniformRoot::ExternPrelude => {\n-                ident.span = ident.span.modern();\n-                ident.span.adjust(Mark::root());\n+                ident.span.modernize_and_adjust(Mark::root());\n             }\n             ModuleOrUniformRoot::CrateRootAndExternPrelude |\n             ModuleOrUniformRoot::CurrentScope => {"}, {"sha": "213993996a63cc3fd3ee15808e85cdc5dc7346a8", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c9ecbf3d1a0fdac1d97c77783685c6281136c0b/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c9ecbf3d1a0fdac1d97c77783685c6281136c0b/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=4c9ecbf3d1a0fdac1d97c77783685c6281136c0b", "patch": "@@ -508,6 +508,14 @@ impl SyntaxContext {\n         HygieneData::with(|data| data.adjust(self, expansion))\n     }\n \n+    /// Like `SyntaxContext::adjust`, but also modernizes `self`.\n+    pub fn modernize_and_adjust(&mut self, expansion: Mark) -> Option<Mark> {\n+        HygieneData::with(|data| {\n+            *self = data.modern(*self);\n+            data.adjust(self, expansion)\n+        })\n+    }\n+\n     /// Adjust this context for resolution in a scope created by the given expansion\n     /// via a glob import with the given `SyntaxContext`.\n     /// For example:"}, {"sha": "24aa82184ced58d9e4c7900a9c444b35ccd8545c", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c9ecbf3d1a0fdac1d97c77783685c6281136c0b/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c9ecbf3d1a0fdac1d97c77783685c6281136c0b/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=4c9ecbf3d1a0fdac1d97c77783685c6281136c0b", "patch": "@@ -534,6 +534,14 @@ impl Span {\n         mark\n     }\n \n+    #[inline]\n+    pub fn modernize_and_adjust(&mut self, expansion: Mark) -> Option<Mark> {\n+        let mut span = self.data();\n+        let mark = span.ctxt.modernize_and_adjust(expansion);\n+        *self = Span::new(span.lo, span.hi, span.ctxt);\n+        mark\n+    }\n+\n     #[inline]\n     pub fn glob_adjust(&mut self, expansion: Mark, glob_span: Span) -> Option<Option<Mark>> {\n         let mut span = self.data();"}]}