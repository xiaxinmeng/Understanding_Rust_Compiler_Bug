{"sha": "d16677282a35e92291ee048809afb6c8061ee3e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNjY3NzI4MmEzNWU5MjI5MWVlMDQ4ODA5YWZiNmM4MDYxZWUzZTU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-04T10:30:35Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-06T13:39:05Z"}, "message": "Try to improve PhantomData docs with more examples", "tree": {"sha": "cf01f562c7b9318673ed7230211c6902756bbb63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf01f562c7b9318673ed7230211c6902756bbb63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d16677282a35e92291ee048809afb6c8061ee3e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d16677282a35e92291ee048809afb6c8061ee3e5", "html_url": "https://github.com/rust-lang/rust/commit/d16677282a35e92291ee048809afb6c8061ee3e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d16677282a35e92291ee048809afb6c8061ee3e5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82dcec7ee4a8a71fdfb8e8771ae6785261ec1d5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/82dcec7ee4a8a71fdfb8e8771ae6785261ec1d5b", "html_url": "https://github.com/rust-lang/rust/commit/82dcec7ee4a8a71fdfb8e8771ae6785261ec1d5b"}], "stats": {"total": 67, "additions": 58, "deletions": 9}, "files": [{"sha": "1953f4689ab0d6a3363061070483687723142b15", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 58, "deletions": 9, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/d16677282a35e92291ee048809afb6c8061ee3e5/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16677282a35e92291ee048809afb6c8061ee3e5/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=d16677282a35e92291ee048809afb6c8061ee3e5", "patch": "@@ -356,8 +356,49 @@ pub trait PhantomFn<A:?Sized,R:?Sized=()> { }\n ///\n /// # Examples\n ///\n-/// When handling external resources over a foreign function interface, `PhantomData<T>` can\n-/// prevent mismatches by enforcing types in the method implementations:\n+/// ## Unused lifetime parameter\n+///\n+/// Perhaps the most common time that `PhantomData` is required is\n+/// with a struct that has an unused lifetime parameter, typically as\n+/// part of some unsafe code. For example, here is a struct `Slice`\n+/// that has two pointers of type `*const T`, presumably pointing into\n+/// an array somewhere:\n+///\n+/// ```\n+/// struct Slice<'a, T> {\n+///     start: *const T,\n+///     end: *const T,\n+/// }\n+/// ```\n+///\n+/// The intention is that the underlying data is only valid for the\n+/// lifetime `'a`, so `Slice` should not outlive `'a`. However, this\n+/// intent is not expressed in the code, since there are no uses of\n+/// the lifetime `'a` and hence it is not clear what data it applies\n+/// to. We can correct this by telling the compiler to act *as if* the\n+/// `Slice` struct contained a borrowed reference `&'a T`:\n+///\n+/// ```\n+/// use std::marker::PhantomData;\n+///\n+/// struct Slice<'a, T:'a> {\n+///     start: *const T,\n+///     end: *const T,\n+///     phantom: PhantomData<&'a T>\n+/// }\n+/// ```\n+///\n+/// This also in turn requires that we annotate `T:'a`, indicating\n+/// that `T` is a type that can be borrowed for the lifetime `'a`.\n+///\n+/// ## Unused type parameters\n+///\n+/// It sometimes happens that there are unused type parameters that\n+/// indicate what type of data a struct is \"tied\" to, even though that\n+/// data is not actually found in the struct itself. Here is an\n+/// example where this arises when handling external resources over a\n+/// foreign function interface. `PhantomData<T>` can prevent\n+/// mismatches by enforcing types in the method implementations:\n ///\n /// ```\n /// # trait ResType { fn foo(&self); };\n@@ -391,13 +432,21 @@ pub trait PhantomFn<A:?Sized,R:?Sized=()> { }\n /// }\n /// ```\n ///\n-/// Another example: embedding a `PhantomData<T>` will inform the compiler\n-/// that one or more instances of the type `T` could be dropped when\n-/// instances of the type itself is dropped, though that may not be\n-/// apparent from the other structure of the type itself. This is\n-/// commonly necessary if the structure is using an unsafe pointer\n-/// like `*mut T` whose referent may be dropped when the type is\n-/// dropped, as a `*mut T` is otherwise not treated as owned.\n+/// ## Indicating ownership\n+///\n+/// Adding a field of type `PhantomData<T>` also indicates that your\n+/// struct owns data of type `T`. This in turn implies that when your\n+/// struct is dropped, it may in turn drop one or more instances of\n+/// the type `T`, though that may not be apparent from the other\n+/// structure of the type itself. This is commonly necessary if the\n+/// structure is using an unsafe pointer like `*mut T` whose referent\n+/// may be dropped when the type is dropped, as a `*mut T` is\n+/// otherwise not treated as owned.\n+///\n+/// If your struct does not in fact *own* the data of type `T`, it is\n+/// better to use a reference type, like `PhantomData<&'a T>`\n+/// (ideally) or `PhantomData<*const T>` (if no lifetime applies), so\n+/// as not to indicate ownership.\n #[lang=\"phantom_data\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct PhantomData<T:?Sized>;"}]}