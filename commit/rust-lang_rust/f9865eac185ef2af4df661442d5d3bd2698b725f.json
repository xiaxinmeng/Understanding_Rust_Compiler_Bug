{"sha": "f9865eac185ef2af4df661442d5d3bd2698b725f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ODY1ZWFjMTg1ZWYyYWY0ZGY2NjE0NDJkNWQzYmQyNjk4YjcyNWY=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-11T02:50:07Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-30T15:37:44Z"}, "message": "fix fallout", "tree": {"sha": "b4630177edd59031f520ab675c61411f34be2178", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4630177edd59031f520ab675c61411f34be2178"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9865eac185ef2af4df661442d5d3bd2698b725f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9865eac185ef2af4df661442d5d3bd2698b725f", "html_url": "https://github.com/rust-lang/rust/commit/f9865eac185ef2af4df661442d5d3bd2698b725f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9865eac185ef2af4df661442d5d3bd2698b725f/comments", "author": null, "committer": null, "parents": [{"sha": "9fdc0effd292b097ae487ec4d927ca15102c5791", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fdc0effd292b097ae487ec4d927ca15102c5791", "html_url": "https://github.com/rust-lang/rust/commit/9fdc0effd292b097ae487ec4d927ca15102c5791"}], "stats": {"total": 161, "additions": 118, "deletions": 43}, "files": [{"sha": "2bd86fa987f4be962bd3ec3086dd5ee2b8cf5b2e", "filename": "src/doc/trpl/unsafe.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Fdoc%2Ftrpl%2Funsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Fdoc%2Ftrpl%2Funsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Funsafe.md?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -576,6 +576,10 @@ extern fn panic_fmt(args: &core::fmt::Arguments,\n #[lang = \"eh_personality\"] extern fn eh_personality() {}\n # #[start] fn start(argc: isize, argv: *const *const u8) -> isize { 0 }\n # fn main() {}\n+# mod std {  // for-loops\n+#     pub use core::iter;\n+#     pub use core::option;\n+# }\n ```\n \n Note that there is one extra lang item here which differs from the examples"}, {"sha": "99172dcdef3cca42626dcce754f2e84548342073", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -104,7 +104,9 @@ type MatchWords<'a> = Chain<Enumerate<Blocks<'a>>, Skip<Take<Enumerate<Repeat<u3\n \n fn reverse_bits(byte: u8) -> u8 {\n     let mut result = 0;\n-    for i in 0..u8::BITS {\n+    // FIXME(#21245) use a for loop\n+    let mut iter = 0..u8::BITS;\n+    while let Some(i) = iter.next() {\n         result |= ((byte >> i) & 1) << (u8::BITS - 1 - i);\n     }\n     result"}, {"sha": "8d6f06b25c5be42512197325e74381087784be10", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -271,7 +271,7 @@ impl<T> DoubleEndedIterator for RawItems<T> {\n #[unsafe_destructor]\n impl<T> Drop for RawItems<T> {\n     fn drop(&mut self) {\n-        for _ in *self {}\n+        for _ in self.by_ref() {}\n     }\n }\n \n@@ -1374,9 +1374,9 @@ impl<K, V> Drop for MoveTraversalImpl<K, V> {\n     fn drop(&mut self) {\n         // We need to cleanup the stored values manually, as the RawItems destructor would run\n         // after our deallocation.\n-        for _ in self.keys {}\n-        for _ in self.vals {}\n-        for _ in self.edges {}\n+        for _ in self.keys.by_ref() {}\n+        for _ in self.vals.by_ref() {}\n+        for _ in self.edges.by_ref() {}\n \n         let (alignment, size) =\n                 calculate_allocation_generic::<K, V>(self.capacity, self.is_leaf);"}, {"sha": "f28262dc0fea746ab5c06c0ac394810414428afd", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -34,6 +34,8 @@\n #![feature(unicode)]\n #![feature(hash)]\n #![cfg_attr(test, feature(test))]\n+// NOTE(stage0): remove after a snapshot\n+#![cfg_attr(not(stage0), allow(unused_mut))]\n \n #[macro_use]\n extern crate core;\n@@ -114,6 +116,8 @@ mod std {\n     pub use core::marker;   // derive(Copy)\n     pub use core::hash;     // derive(Hash)\n     pub use core::ops;      // RangeFull\n+    // for-loops\n+    pub use core::iter;\n }\n \n #[cfg(test)]"}, {"sha": "a9b31da8250e12850c882f473d6f55ebb97f2232", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -1510,7 +1510,7 @@ pub struct Drain<'a, T: 'a> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T: 'a> Drop for Drain<'a, T> {\n     fn drop(&mut self) {\n-        for _ in *self {}\n+        for _ in self.by_ref() {}\n         self.inner.head = 0;\n         self.inner.tail = 0;\n     }\n@@ -1793,7 +1793,9 @@ mod tests {\n     fn bench_push_back_100(b: &mut test::Bencher) {\n         let mut deq = RingBuf::with_capacity(101);\n         b.iter(|| {\n-            for i in 0i..100 {\n+            // FIXME(#21245) use a for loop\n+            let mut iter = 0i..100;\n+            while let Some(i) = iter.next() {\n                 deq.push_back(i);\n             }\n             deq.head = 0;\n@@ -1805,7 +1807,9 @@ mod tests {\n     fn bench_push_front_100(b: &mut test::Bencher) {\n         let mut deq = RingBuf::with_capacity(101);\n         b.iter(|| {\n-            for i in 0i..100 {\n+            // FIXME(#21245) use a for loop\n+            let mut iter = 0i..100;\n+            while let Some(i) = iter.next() {\n                 deq.push_front(i);\n             }\n             deq.head = 0;"}, {"sha": "57ee4704a9ee099b376bd791ba53be8057a202bb", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -1958,7 +1958,7 @@ mod tests {\n             let mut amt = 0;\n             let mut it = v.permutations();\n             let (min_size, max_opt) = it.size_hint();\n-            for _perm in it {\n+            for _perm in it.by_ref() {\n                 amt += 1;\n             }\n             assert_eq!(amt, it.swaps.swaps_made);"}, {"sha": "bbed943fc70229c2978d8191a94347903eaf5330", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -279,7 +279,7 @@ impl<'a> Iterator for Recompositions<'a> {\n         loop {\n             match self.state {\n                 Composing => {\n-                    for ch in self.iter {\n+                    for ch in self.iter.by_ref() {\n                         let ch_class = unicode::char::canonical_combining_class(ch);\n                         if self.composee.is_none() {\n                             if ch_class != 0 {"}, {"sha": "4ea8267135f0e18796c1cf8307fe68195a65955d", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -1567,7 +1567,9 @@ impl<T> Drop for Vec<T> {\n         // zeroed (when moving out, because of #[unsafe_no_drop_flag]).\n         if self.cap != 0 {\n             unsafe {\n-                for x in self.iter() {\n+                // FIXME(#21245) use a for loop\n+                let mut iter = self.iter();\n+                while let Some(x) = iter.next() {\n                     ptr::read(x);\n                 }\n                 dealloc(*self.ptr, self.cap)\n@@ -1648,7 +1650,7 @@ impl<T> IntoIter<T> {\n     #[unstable(feature = \"collections\")]\n     pub fn into_inner(mut self) -> Vec<T> {\n         unsafe {\n-            for _x in self { }\n+            for _x in self.by_ref() { }\n             let IntoIter { allocation, cap, ptr: _ptr, end: _end } = self;\n             mem::forget(self);\n             Vec { ptr: NonZero::new(allocation), cap: cap, len: 0 }\n@@ -1726,7 +1728,7 @@ impl<T> Drop for IntoIter<T> {\n     fn drop(&mut self) {\n         // destroy the remaining elements\n         if self.cap != 0 {\n-            for _x in *self {}\n+            for _x in self.by_ref() {}\n             unsafe {\n                 dealloc(self.allocation, self.cap);\n             }\n@@ -1816,7 +1818,7 @@ impl<'a, T> Drop for Drain<'a, T> {\n         // so we can use #[unsafe_no_drop_flag].\n \n         // destroy the remaining elements\n-        for _x in *self {}\n+        for _x in self.by_ref() {}\n     }\n }\n "}, {"sha": "7847ed13ca9f86e73373610fef37b61da16da93a", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -195,7 +195,7 @@ pub trait IteratorExt: Iterator + Sized {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn nth(&mut self, mut n: usize) -> Option<Self::Item> {\n-        for x in *self {\n+        for x in self.by_ref() {\n             if n == 0 { return Some(x) }\n             n -= 1;\n         }\n@@ -492,7 +492,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// fn process<U: Iterator<Item=isize>>(it: U) -> isize {\n     ///     let mut it = it.fuse();\n     ///     let mut sum = 0;\n-    ///     for x in it {\n+    ///     for x in it.by_ref() {\n     ///         if x > 5 {\n     ///             break;\n     ///         }\n@@ -660,7 +660,7 @@ pub trait IteratorExt: Iterator + Sized {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn any<F>(&mut self, mut f: F) -> bool where F: FnMut(Self::Item) -> bool {\n-        for x in *self { if f(x) { return true; } }\n+        for x in self.by_ref() { if f(x) { return true; } }\n         false\n     }\n \n@@ -680,7 +680,7 @@ pub trait IteratorExt: Iterator + Sized {\n     fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item> where\n         P: FnMut(&Self::Item) -> bool,\n     {\n-        for x in *self {\n+        for x in self.by_ref() {\n             if predicate(&x) { return Some(x) }\n         }\n         None\n@@ -703,7 +703,7 @@ pub trait IteratorExt: Iterator + Sized {\n         P: FnMut(Self::Item) -> bool,\n     {\n         let mut i = 0;\n-        for x in *self {\n+        for x in self.by_ref() {\n             if predicate(x) {\n                 return Some(i);\n             }\n@@ -1664,7 +1664,7 @@ impl<A, I, P> Iterator for Filter<A, I, P> where I: Iterator<Item=A>, P: FnMut(&\n \n     #[inline]\n     fn next(&mut self) -> Option<A> {\n-        for x in self.iter {\n+        for x in self.iter.by_ref() {\n             if (self.predicate)(&x) {\n                 return Some(x);\n             } else {\n@@ -1728,7 +1728,7 @@ impl<A, B, I, F> Iterator for FilterMap<A, B, I, F> where\n \n     #[inline]\n     fn next(&mut self) -> Option<B> {\n-        for x in self.iter {\n+        for x in self.iter.by_ref() {\n             match (self.f)(x) {\n                 Some(y) => return Some(y),\n                 None => ()\n@@ -1914,7 +1914,7 @@ impl<A, I, P> Iterator for SkipWhile<A, I, P> where I: Iterator<Item=A>, P: FnMu\n \n     #[inline]\n     fn next(&mut self) -> Option<A> {\n-        for x in self.iter {\n+        for x in self.iter.by_ref() {\n             if self.flag || !(self.predicate)(&x) {\n                 self.flag = true;\n                 return Some(x);\n@@ -2207,7 +2207,7 @@ impl<A, B, I, U, F> Iterator for FlatMap<A, B, I, U, F> where\n     fn next(&mut self) -> Option<B> {\n         loop {\n             for inner in self.frontiter.iter_mut() {\n-                for x in *inner {\n+                for x in inner.by_ref() {\n                     return Some(x)\n                 }\n             }"}, {"sha": "353d4252dfb05c296bcf7049710d97014adab999", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -65,6 +65,8 @@\n #![allow(unknown_features)] #![feature(int_uint)]\n #![feature(on_unimplemented)]\n #![deny(missing_docs)]\n+// NOTE(stage0) remove cfg_attr after a snapshot\n+#![cfg_attr(not(stage0), allow(unused_mut))]\n \n #[macro_use]\n mod macros;\n@@ -158,4 +160,6 @@ mod std {\n     pub use marker;\n     pub use ops;\n     pub use option;\n+    // for-loops\n+    pub use iter;\n }"}, {"sha": "1be7a0fb066b5bb8b384fd94841df901deb749bd", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -1524,7 +1524,7 @@ macro_rules! from_str_radix_float_impl {\n                 let mut exp_info = None::<(char, uint)>;\n \n                 // Parse the integer part of the significand\n-                for (i, c) in cs {\n+                for (i, c) in cs.by_ref() {\n                     match c.to_digit(radix) {\n                         Some(digit) => {\n                             // shift significand one digit left\n@@ -1572,7 +1572,7 @@ macro_rules! from_str_radix_float_impl {\n                 // part of the significand\n                 if exp_info.is_none() {\n                     let mut power = 1.0;\n-                    for (i, c) in cs {\n+                    for (i, c) in cs.by_ref() {\n                         match c.to_digit(radix) {\n                             Some(digit) => {\n                                 // Decrease power one order of magnitude"}, {"sha": "8c50550a6e84cd3a8c78d8c7be48f55f05ee1977", "filename": "src/librand/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -498,6 +498,8 @@ mod std {\n     pub use core::{option, fmt}; // panic!()\n     pub use core::clone; // derive Clone\n     pub use core::marker;\n+    // for-loops\n+    pub use core::iter;\n }\n \n #[cfg(test)]"}, {"sha": "e99b203cce71f2362f1ce2f575624450e690cad0", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -41,6 +41,9 @@\n #![feature(unicode)]\n #![feature(hash)]\n #![cfg_attr(test, feature(test))]\n+#![allow(unstable)]\n+// NOTE(stage0) remove cfg_attr after a snapshot\n+#![cfg_attr(not(stage0), allow(unused_mut))]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "d5ee0e57b79685a5eaa2a2b492b2302d5986c2f8", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -352,7 +352,9 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n         for (word_index, &word) in words.iter().enumerate() {\n             if word != 0 {\n                 let base_index = word_index * uint::BITS;\n-                for offset in 0u..uint::BITS {\n+                // FIXME(#21245) use a for loop\n+                let mut iter = 0u..uint::BITS;\n+                while let Some(offset) = iter.next() {\n                     let bit = 1 << offset;\n                     if (word & bit) != 0 {\n                         // NB: we round up the total number of bits"}, {"sha": "5a2ff926669212bacef36a7fa5a1b4b1e5087afb", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -41,6 +41,9 @@\n #![feature(std_misc)]\n #![feature(unicode)]\n #![feature(hash)]\n+#![allow(unstable)]\n+// NOTE(stage0) remove cfg_attr after a snapshot\n+#![cfg_attr(not(stage0), allow(unused_mut))]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "4772fac8bd4593f1fff7a38d77ff51cb67bfba34", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -84,6 +84,9 @@ This API is completely unstable and subject to change.\n #![feature(core)]\n #![feature(rustc_private)]\n #![feature(std_misc)]\n+#![allow(unstable)]\n+// NOTE(stage0) remove cfg_attr after a snapshot\n+#![cfg_attr(not(stage0), allow(unused_mut))]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "974d8b96d32e3ad970b20a8ded359f8c2549df0a", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -32,6 +32,9 @@\n #![feature(test)]\n #![feature(unicode)]\n #![feature(hash)]\n+#![allow(unstable)]\n+// NOTE(stage0) remove cfg_attr after a snapshot\n+#![cfg_attr(not(stage0), allow(unused_mut))]\n \n extern crate arena;\n extern crate getopts;"}, {"sha": "77308d0a66f62bcad0327b23dc72148f5a2a4847", "filename": "src/libserialize/collection_impls.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibserialize%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibserialize%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fcollection_impls.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -148,7 +148,9 @@ impl<\n     fn decode<D: Decoder>(d: &mut D) -> Result<EnumSet<T>, D::Error> {\n         let bits = try!(d.read_uint());\n         let mut set = EnumSet::new();\n-        for bit in 0..uint::BITS {\n+        // FIXME(#21245) use a for loop\n+        let mut iter = 0..uint::BITS;\n+        while let Some(bit) = iter.next() {\n             if bits & (1 << bit) != 0 {\n                 set.insert(CLike::from_uint(1 << bit));\n             }"}, {"sha": "ffc4c5c6bacebf6c5d4a47db42ee1168339dcb92", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -232,7 +232,10 @@ pub fn escape_default<F>(c: u8, mut f: F) where\n         _ => {\n             f(b'\\\\');\n             f(b'x');\n-            for &offset in [4u, 0u].iter() {\n+            // FIXME(#21245) use a for loop\n+            let arr = [4u, 0u];\n+            let mut iter = arr.iter();\n+            while let ::option::Option::Some(&offset) = ::iter::Iterator::next(&mut iter) {\n                 match ((c as i32) >> offset) & 0xf {\n                     i @ 0 ... 9 => f(b'0' + (i as u8)),\n                     i => f(b'a' + (i as u8 - 10)),"}, {"sha": "141c51d8363d86de319d49ae3842347fa49747f5", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -15,7 +15,7 @@ use self::BucketState::*;\n use clone::Clone;\n use cmp;\n use hash::{Hash, Hasher};\n-use iter::{Iterator, ExactSizeIterator, count};\n+use iter::{Iterator, IteratorExt, ExactSizeIterator, count};\n use marker::{Copy, Sized, self};\n use mem::{min_align_of, size_of};\n use mem;\n@@ -921,7 +921,7 @@ impl<'a, K, V> ExactSizeIterator for Drain<'a, K, V> {\n #[unsafe_destructor]\n impl<'a, K: 'a, V: 'a> Drop for Drain<'a, K, V> {\n     fn drop(&mut self) {\n-        for _ in *self {}\n+        for _ in self.by_ref() {}\n     }\n }\n "}, {"sha": "534ece52ff5ff2e7252c55c45c4b6c17b466a8c3", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -123,6 +123,9 @@\n #![feature(rand)]\n #![feature(hash)]\n #![cfg_attr(test, feature(test))]\n+#![allow(unstable)]\n+// NOTE(stage0): remove cfg_attr after a snapshot\n+#![cfg_attr(not(stage0), allow(unused_mut))]\n \n // Don't link to std. We are std.\n #![no_std]\n@@ -310,4 +313,6 @@ mod std {\n     pub use slice;\n \n     pub use boxed; // used for vec![]\n+    // for-loops\n+    pub use iter;\n }"}, {"sha": "98e0320cd14d21f0c8ee7ae20fbe36b3cb62b5b5", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -557,7 +557,7 @@ impl GenericPath for Path {\n                     }\n                     (Some(a), Some(_)) => {\n                         comps.push(\"..\");\n-                        for _ in itb {\n+                        for _ in itb.by_ref() {\n                             comps.push(\"..\");\n                         }\n                         comps.push(a);"}, {"sha": "05677e1379db081c731385a480a7ca9c128cbd79", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -404,7 +404,9 @@ mod test {\n         }\n \n         // start all the tasks\n-        for tx in txs.iter() {\n+        // FIXME(#21245) use a for loop\n+        let mut iter = txs.iter();\n+        while let Some(tx) = iter.next() {\n             tx.send(()).unwrap();\n         }\n     }"}, {"sha": "b503b92b00f962e17861c30209ebb72fbc8eccb2", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -1476,7 +1476,9 @@ mod test {\n \n         let _t = Thread::spawn(move|| {\n             let mut count = 0;\n-            for x in rx.iter() {\n+            // FIXME(#21245) use a for loop\n+            let mut iter = rx.iter();\n+            while let Some(x) = iter.next() {\n                 if count >= 3 {\n                     break;\n                 } else {\n@@ -1940,7 +1942,9 @@ mod sync_tests {\n \n         let _t = Thread::spawn(move|| {\n             let mut count = 0;\n-            for x in rx.iter() {\n+            // FIXME(#21245) use a for loop\n+            let mut iter = rx.iter();\n+            while let Some(x) = iter.next() {\n                 if count >= 3 {\n                     break;\n                 } else {"}, {"sha": "cc09cfd665c7a098a871a331ef881cb13367c86c", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -185,7 +185,9 @@ mod tests {\n             let tx = tx.clone();\n             let q = q.clone();\n             Thread::spawn(move|| {\n-                for i in 0..nmsgs {\n+                // FIXME(#21245) use a for loop\n+                let mut iter = 0..nmsgs;\n+                while let Some(i) = iter.next() {\n                     q.push(i);\n                 }\n                 tx.send(()).unwrap();"}, {"sha": "d739e5fe6a03aa70b5f927d6d24fd985792f227c", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -37,10 +37,14 @@ pub trait MoveMap<T> {\n \n impl<T> MoveMap<T> for Vec<T> {\n     fn move_map<F>(mut self, mut f: F) -> Vec<T> where F: FnMut(T) -> T {\n-        for p in self.iter_mut() {\n-            unsafe {\n-                // FIXME(#5016) this shouldn't need to zero to be safe.\n-                ptr::write(p, f(ptr::read_and_zero(p)));\n+        // FIXME(#21245) use a for loop\n+        {\n+            let mut iter = self.iter_mut();\n+            while let Some(p) = iter.next() {\n+                unsafe {\n+                    // FIXME(#5016) this shouldn't need to zero to be safe.\n+                    ptr::write(p, f(ptr::read_and_zero(p)));\n+                }\n             }\n         }\n         self"}, {"sha": "456c6f73ce1eb9888399cf8b3233866e6affcfc8", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -39,6 +39,9 @@\n #![feature(rustc_private)]\n #![feature(std_misc)]\n #![feature(unicode)]\n+#![allow(unstable)]\n+// NOTE(stage0) remove cfg_attr after a snapshot\n+#![cfg_attr(not(stage0), allow(unused_mut))]\n \n extern crate arena;\n extern crate fmt_macros;"}, {"sha": "af8d5b86f4bd5a0a8e45e6551af864696e51fbab", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -44,6 +44,9 @@\n #![feature(rustc_private)]\n #![feature(std_misc)]\n #![feature(hash)]\n+#![allow(unstable)]\n+// NOTE(stage0): remove cfg_attr after a snapshot\n+#![cfg_attr(not(stage0), allow(unused_mut))]\n \n extern crate getopts;\n extern crate serialize;"}, {"sha": "659d57b729214e65dbcb19b9bc56e661e4c0f130", "filename": "src/libunicode/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibunicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Flibunicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Flib.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -84,4 +84,7 @@ mod std {\n     pub use core::cmp;\n     pub use core::fmt;\n     pub use core::marker;\n+    // for-loops\n+    pub use core::iter;\n+    pub use core::option;\n }"}, {"sha": "e84e6ac5699e4baaaf81ad4b564456f98e1a994e", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -133,7 +133,9 @@ fn mandelbrot<W: old_io::Writer>(w: uint, mut out: W) -> old_io::IoResult<()> {\n                 (i + 1) * chunk_size\n             };\n \n-            for &init_i in vec_init_i[start..end].iter() {\n+            // FIXME(#21245) use a for loop\n+            let mut iter = vec_init_i[start..end].iter();\n+            while let Some(&init_i) = iter.next() {\n                 write_line(init_i, init_r_slice, &mut res);\n             }\n \n@@ -142,7 +144,9 @@ fn mandelbrot<W: old_io::Writer>(w: uint, mut out: W) -> old_io::IoResult<()> {\n     }).collect::<Vec<_>>();\n \n     try!(writeln!(&mut out as &mut Writer, \"P4\\n{} {}\", w, h));\n-    for res in data.into_iter() {\n+    // FIXME(#21245) use a for loop\n+    let mut iter = data.into_iter();\n+    while let Some(res) = iter.next() {\n         try!(out.write(res.join().ok().unwrap().as_slice()));\n     }\n     out.flush()"}, {"sha": "209cc985383bc654c04a97b7b0df4a27fc53013d", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9865eac185ef2af4df661442d5d3bd2698b725f/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=f9865eac185ef2af4df661442d5d3bd2698b725f", "patch": "@@ -180,7 +180,9 @@ fn make_masks() -> Vec<Vec<Vec<u64> > > {\n // all unused piece can be placed on the board.\n fn is_board_unfeasible(board: u64, masks: &Vec<Vec<Vec<u64>>>) -> bool {\n     let mut coverable = board;\n-    for (i, masks_at) in masks.iter().enumerate() {\n+    // FIXME(#21245) use a for loop\n+    let mut iter = masks.iter().enumerate();\n+    while let Some((i, masks_at)) = iter.next() {\n         if board & 1 << i != 0 { continue; }\n         for (cur_id, pos_masks) in masks_at.iter().enumerate() {\n             if board & 1 << (50 + cur_id) != 0 { continue; }\n@@ -222,7 +224,9 @@ fn to_vec(raw_sol: &List<u64>) -> Vec<u8> {\n     let mut sol = repeat('.' as u8).take(50).collect::<Vec<_>>();\n     for &m in raw_sol.iter() {\n         let id = '0' as u8 + get_id(m);\n-        for i in 0u..50 {\n+        // FIXME(#21245) use a for loop\n+        let mut iter = 0u..50;\n+        while let Some(i) = iter.next() {\n             if m & 1 << i != 0 {\n                 sol[i] = id;\n             }"}]}