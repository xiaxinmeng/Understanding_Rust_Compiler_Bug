{"sha": "3cba0dc26b707bebc1865671fd2c5139c1e1c537", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYmEwZGMyNmI3MDdiZWJjMTg2NTY3MWZkMmM1MTM5YzFlMWM1Mzc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-21T13:10:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-21T13:10:00Z"}, "message": "Merge #4552\n\n4552: Transition OnEnter to WorkspaceSnippetEdit r=matklad a=matklad\n\nThis also changes our handiling of snippet edits on the client side.\n`editor.insertSnippet` unfortunately forces indentation, which we\nreally don't want to have to deal with. So, let's just implement our\nmanual hacky way of dealing with a simple subset of snippets we\nactually use in rust-analyzer\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "6d77f69e3299d4245ebae8987fc030348ae2ebb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d77f69e3299d4245ebae8987fc030348ae2ebb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cba0dc26b707bebc1865671fd2c5139c1e1c537", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJexn2oCRBK7hj4Ov3rIwAAdHIIAC5qltGukcnT3EMSUnLonE8C\ndwuQvRjfKEHW/BUpw9vTWkVJSKnPZmlYV0eayhY7y1/DMWB6h++7e1z7gQzwIr1Z\nInHkJ9URtG4OVR7WFUnDX07tdmjQfPQ0Iwk3CDjQ+w4TLkaFOJ7pn/Ltz1j3ZWgI\nna3kJuFU7M/apZmA7B2/paNK2LkNxfbgFuKuKVqifA43bkOUMFCzBLbRUU7slQ7E\nLx5jcSV5WCD2Mktnj+aexwKEXjJg6DLLMiZmx5wedd7RXhDZyTId8y4VIg99bnSH\nKNOUCVD1cb8cmzJ777KxaCALC/0eRMHSIhyVNgc8FUDpgQId5aVgsjq5We3P5lw=\n=pFYw\n-----END PGP SIGNATURE-----\n", "payload": "tree 6d77f69e3299d4245ebae8987fc030348ae2ebb9\nparent 0c2b548b0b5712dcc2f9a4eead57e028b5461ba7\nparent ff28c79ebd4c5a9a27542917940def9d4e66eea6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1590066600 +0000\ncommitter GitHub <noreply@github.com> 1590066600 +0000\n\nMerge #4552\n\n4552: Transition OnEnter to WorkspaceSnippetEdit r=matklad a=matklad\n\nThis also changes our handiling of snippet edits on the client side.\n`editor.insertSnippet` unfortunately forces indentation, which we\nreally don't want to have to deal with. So, let's just implement our\nmanual hacky way of dealing with a simple subset of snippets we\nactually use in rust-analyzer\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cba0dc26b707bebc1865671fd2c5139c1e1c537", "html_url": "https://github.com/rust-lang/rust/commit/3cba0dc26b707bebc1865671fd2c5139c1e1c537", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cba0dc26b707bebc1865671fd2c5139c1e1c537/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c2b548b0b5712dcc2f9a4eead57e028b5461ba7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c2b548b0b5712dcc2f9a4eead57e028b5461ba7", "html_url": "https://github.com/rust-lang/rust/commit/0c2b548b0b5712dcc2f9a4eead57e028b5461ba7"}, {"sha": "ff28c79ebd4c5a9a27542917940def9d4e66eea6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff28c79ebd4c5a9a27542917940def9d4e66eea6", "html_url": "https://github.com/rust-lang/rust/commit/ff28c79ebd4c5a9a27542917940def9d4e66eea6"}], "stats": {"total": 587, "additions": 109, "deletions": 478}, "files": [{"sha": "62dd3547fa23f6f5556367e22e807384d8de6870", "filename": "crates/ra_assists/src/tests.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3cba0dc26b707bebc1865671fd2c5139c1e1c537/crates%2Fra_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cba0dc26b707bebc1865671fd2c5139c1e1c537/crates%2Fra_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests.rs?ref=3cba0dc26b707bebc1865671fd2c5139c1e1c537", "patch": "@@ -7,8 +7,7 @@ use ra_db::{fixture::WithFixture, FileId, FileRange, SourceDatabaseExt};\n use ra_ide_db::{symbol_index::SymbolsDatabase, RootDatabase};\n use ra_syntax::TextRange;\n use test_utils::{\n-    add_cursor, assert_eq_text, extract_offset, extract_range, extract_range_or_offset,\n-    RangeOrOffset,\n+    assert_eq_text, extract_offset, extract_range, extract_range_or_offset, RangeOrOffset,\n };\n \n use crate::{handlers::Handler, Assist, AssistConfig, AssistContext, Assists};\n@@ -103,12 +102,6 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult) {\n \n             let mut actual = db.file_text(change.file_id).as_ref().to_owned();\n             change.edit.apply(&mut actual);\n-\n-            if !source_change.is_snippet {\n-                if let Some(off) = source_change.cursor_position {\n-                    actual = add_cursor(&actual, off.offset)\n-                }\n-            }\n             assert_eq_text!(after, &actual);\n         }\n         (Some(assist), ExpectedResult::Target(target)) => {"}, {"sha": "c2819bbf7b807f769d6eb0482c00f18ed76c67c0", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cba0dc26b707bebc1865671fd2c5139c1e1c537/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cba0dc26b707bebc1865671fd2c5139c1e1c537/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=3cba0dc26b707bebc1865671fd2c5139c1e1c537", "patch": "@@ -628,7 +628,6 @@ mod tests {\n                                 path: \"foo.rs\",\n                             },\n                         ],\n-                        cursor_position: None,\n                         is_snippet: false,\n                     },\n                 ),\n@@ -685,7 +684,6 @@ mod tests {\n                             },\n                         ],\n                         file_system_edits: [],\n-                        cursor_position: None,\n                         is_snippet: false,\n                     },\n                 ),"}, {"sha": "1d7bacbf6d23fd45a065f29e430a11a4e7b80b7d", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cba0dc26b707bebc1865671fd2c5139c1e1c537/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cba0dc26b707bebc1865671fd2c5139c1e1c537/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=3cba0dc26b707bebc1865671fd2c5139c1e1c537", "patch": "@@ -87,7 +87,6 @@ pub use ra_db::{\n pub use ra_ide_db::{\n     change::{AnalysisChange, LibraryData},\n     line_index::{LineCol, LineIndex},\n-    line_index_utils::translate_offset_with_edit,\n     search::SearchScope,\n     source_change::{FileSystemEdit, SourceChange, SourceFileEdit},\n     symbol_index::Query,"}, {"sha": "55c3319cbcb1dbf0b095484ede376e096f667474", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3cba0dc26b707bebc1865671fd2c5139c1e1c537/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cba0dc26b707bebc1865671fd2c5139c1e1c537/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=3cba0dc26b707bebc1865671fd2c5139c1e1c537", "patch": "@@ -669,7 +669,6 @@ mod tests {\n                             dst_path: \"bar/foo2.rs\",\n                         },\n                     ],\n-                    cursor_position: None,\n                     is_snippet: false,\n                 },\n             },\n@@ -722,7 +721,6 @@ mod tests {\n                             dst_path: \"foo2/mod.rs\",\n                         },\n                     ],\n-                    cursor_position: None,\n                     is_snippet: false,\n                 },\n             },\n@@ -819,7 +817,6 @@ mod tests {\n                             dst_path: \"bar/foo2.rs\",\n                         },\n                     ],\n-                    cursor_position: None,\n                     is_snippet: false,\n                 },\n             },"}, {"sha": "85be14ad33a2a152d352cace64bcf6b39702af3c", "filename": "crates/ra_ide/src/typing/on_enter.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3cba0dc26b707bebc1865671fd2c5139c1e1c537/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cba0dc26b707bebc1865671fd2c5139c1e1c537/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs?ref=3cba0dc26b707bebc1865671fd2c5139c1e1c537", "patch": "@@ -38,17 +38,15 @@ pub(crate) fn on_enter(db: &RootDatabase, position: FilePosition) -> Option<Sour\n     }\n \n     let indent = node_indent(&file, comment.syntax())?;\n-    let inserted = format!(\"\\n{}{} \", indent, prefix);\n-    let cursor_position = position.offset + TextSize::of(&inserted);\n+    let inserted = format!(\"\\n{}{} $0\", indent, prefix);\n     let edit = TextEdit::insert(position.offset, inserted);\n \n-    Some(\n-        SourceChange::source_file_edit(\n-            \"On enter\",\n-            SourceFileEdit { edit, file_id: position.file_id },\n-        )\n-        .with_cursor(FilePosition { offset: cursor_position, file_id: position.file_id }),\n-    )\n+    let mut res = SourceChange::source_file_edit(\n+        \"On enter\",\n+        SourceFileEdit { edit, file_id: position.file_id },\n+    );\n+    res.is_snippet = true;\n+    Some(res)\n }\n \n fn followed_by_comment(comment: &ast::Comment) -> bool {\n@@ -84,7 +82,7 @@ fn node_indent(file: &SourceFile, token: &SyntaxToken) -> Option<SmolStr> {\n \n #[cfg(test)]\n mod tests {\n-    use test_utils::{add_cursor, assert_eq_text, extract_offset};\n+    use test_utils::{assert_eq_text, extract_offset};\n \n     use crate::mock_analysis::single_file;\n \n@@ -98,7 +96,6 @@ mod tests {\n         assert_eq!(result.source_file_edits.len(), 1);\n         let mut actual = before.to_string();\n         result.source_file_edits[0].edit.apply(&mut actual);\n-        let actual = add_cursor(&actual, result.cursor_position.unwrap().offset);\n         Some(actual)\n     }\n \n@@ -121,7 +118,7 @@ fn foo() {\n \",\n             r\"\n /// Some docs\n-/// <|>\n+/// $0\n fn foo() {\n }\n \",\n@@ -137,7 +134,7 @@ impl S {\n             r\"\n impl S {\n     /// Some\n-    /// <|> docs.\n+    /// $0 docs.\n     fn foo() {}\n }\n \",\n@@ -151,7 +148,7 @@ fn foo() {\n \",\n             r\"\n ///\n-/// <|> Some docs\n+/// $0 Some docs\n fn foo() {\n }\n \",\n@@ -175,7 +172,7 @@ fn main() {\n             r\"\n fn main() {\n     // Fix\n-    // <|> me\n+    // $0 me\n     let x = 1 + 1;\n }\n \",\n@@ -195,7 +192,7 @@ fn main() {\n             r\"\n fn main() {\n     // Fix\n-    // <|>\n+    // $0\n     // me\n     let x = 1 + 1;\n }"}, {"sha": "1b74e6558613d2064b8c208284a46ed2e4a67640", "filename": "crates/ra_ide_db/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cba0dc26b707bebc1865671fd2c5139c1e1c537/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cba0dc26b707bebc1865671fd2c5139c1e1c537/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Flib.rs?ref=3cba0dc26b707bebc1865671fd2c5139c1e1c537", "patch": "@@ -3,7 +3,6 @@\n //! It is mainly a `HirDatabase` for semantic analysis, plus a `SymbolsDatabase`, for fuzzy search.\n \n pub mod line_index;\n-pub mod line_index_utils;\n pub mod symbol_index;\n pub mod change;\n pub mod defs;"}, {"sha": "7fa6fc448e0e88c441c1493a5c4d152ffad6feb0", "filename": "crates/ra_ide_db/src/line_index_utils.rs", "status": "removed", "additions": 0, "deletions": 302, "changes": 302, "blob_url": "https://github.com/rust-lang/rust/blob/0c2b548b0b5712dcc2f9a4eead57e028b5461ba7/crates%2Fra_ide_db%2Fsrc%2Fline_index_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2b548b0b5712dcc2f9a4eead57e028b5461ba7/crates%2Fra_ide_db%2Fsrc%2Fline_index_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fline_index_utils.rs?ref=0c2b548b0b5712dcc2f9a4eead57e028b5461ba7", "patch": "@@ -1,302 +0,0 @@\n-//! Code actions can specify desirable final position of the cursor.\n-//!\n-//! The position is specified as a `TextSize` in the final file. We need to send\n-//! it in `(Line, Column)` coordinate though. However, we only have a LineIndex\n-//! for a file pre-edit!\n-//!\n-//! Code in this module applies this \"to (Line, Column) after edit\"\n-//! transformation.\n-\n-use std::convert::TryInto;\n-\n-use ra_syntax::{TextRange, TextSize};\n-use ra_text_edit::{Indel, TextEdit};\n-\n-use crate::line_index::{LineCol, LineIndex, Utf16Char};\n-\n-pub fn translate_offset_with_edit(\n-    line_index: &LineIndex,\n-    offset: TextSize,\n-    text_edit: &TextEdit,\n-) -> LineCol {\n-    let mut state = Edits::from_text_edit(&text_edit);\n-\n-    let mut res = RunningLineCol::new();\n-\n-    macro_rules! test_step {\n-        ($x:ident) => {\n-            match &$x {\n-                Step::Newline(n) => {\n-                    if offset < *n {\n-                        return res.to_line_col(offset);\n-                    } else {\n-                        res.add_line(*n);\n-                    }\n-                }\n-                Step::Utf16Char(x) => {\n-                    if offset < x.end() {\n-                        // if the offset is inside a multibyte char it's invalid\n-                        // clamp it to the start of the char\n-                        let clamp = offset.min(x.start());\n-                        return res.to_line_col(clamp);\n-                    } else {\n-                        res.adjust_col(*x);\n-                    }\n-                }\n-            }\n-        };\n-    }\n-\n-    for orig_step in LineIndexStepIter::from(line_index) {\n-        loop {\n-            let translated_step = state.translate_step(&orig_step);\n-            match state.next_steps(&translated_step) {\n-                NextSteps::Use => {\n-                    test_step!(translated_step);\n-                    break;\n-                }\n-                NextSteps::ReplaceMany(ns) => {\n-                    for n in ns {\n-                        test_step!(n);\n-                    }\n-                    break;\n-                }\n-                NextSteps::AddMany(ns) => {\n-                    for n in ns {\n-                        test_step!(n);\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    loop {\n-        match state.next_inserted_steps() {\n-            None => break,\n-            Some(ns) => {\n-                for n in ns {\n-                    test_step!(n);\n-                }\n-            }\n-        }\n-    }\n-\n-    res.to_line_col(offset)\n-}\n-\n-#[derive(Debug, Clone)]\n-enum Step {\n-    Newline(TextSize),\n-    Utf16Char(TextRange),\n-}\n-\n-#[derive(Debug)]\n-struct LineIndexStepIter<'a> {\n-    line_index: &'a LineIndex,\n-    next_newline_idx: usize,\n-    utf16_chars: Option<(TextSize, std::slice::Iter<'a, Utf16Char>)>,\n-}\n-\n-impl LineIndexStepIter<'_> {\n-    fn from(line_index: &LineIndex) -> LineIndexStepIter {\n-        let mut x = LineIndexStepIter { line_index, next_newline_idx: 0, utf16_chars: None };\n-        // skip first newline since it's not real\n-        x.next();\n-        x\n-    }\n-}\n-\n-impl Iterator for LineIndexStepIter<'_> {\n-    type Item = Step;\n-    fn next(&mut self) -> Option<Step> {\n-        self.utf16_chars\n-            .as_mut()\n-            .and_then(|(newline, x)| {\n-                let x = x.next()?;\n-                Some(Step::Utf16Char(TextRange::new(*newline + x.start, *newline + x.end)))\n-            })\n-            .or_else(|| {\n-                let next_newline = *self.line_index.newlines.get(self.next_newline_idx)?;\n-                self.utf16_chars = self\n-                    .line_index\n-                    .utf16_lines\n-                    .get(&(self.next_newline_idx as u32))\n-                    .map(|x| (next_newline, x.iter()));\n-                self.next_newline_idx += 1;\n-                Some(Step::Newline(next_newline))\n-            })\n-    }\n-}\n-\n-#[derive(Debug)]\n-struct OffsetStepIter<'a> {\n-    text: &'a str,\n-    offset: TextSize,\n-}\n-\n-impl Iterator for OffsetStepIter<'_> {\n-    type Item = Step;\n-    fn next(&mut self) -> Option<Step> {\n-        let (next, next_offset) = self\n-            .text\n-            .char_indices()\n-            .filter_map(|(i, c)| {\n-                let i: TextSize = i.try_into().unwrap();\n-                let char_len = TextSize::of(c);\n-                if c == '\\n' {\n-                    let next_offset = self.offset + i + char_len;\n-                    let next = Step::Newline(next_offset);\n-                    Some((next, next_offset))\n-                } else {\n-                    if !c.is_ascii() {\n-                        let start = self.offset + i;\n-                        let end = start + char_len;\n-                        let next = Step::Utf16Char(TextRange::new(start, end));\n-                        let next_offset = end;\n-                        Some((next, next_offset))\n-                    } else {\n-                        None\n-                    }\n-                }\n-            })\n-            .next()?;\n-        let next_idx: usize = (next_offset - self.offset).into();\n-        self.text = &self.text[next_idx..];\n-        self.offset = next_offset;\n-        Some(next)\n-    }\n-}\n-\n-#[derive(Debug)]\n-enum NextSteps<'a> {\n-    Use,\n-    ReplaceMany(OffsetStepIter<'a>),\n-    AddMany(OffsetStepIter<'a>),\n-}\n-\n-#[derive(Debug)]\n-struct TranslatedEdit<'a> {\n-    delete: TextRange,\n-    insert: &'a str,\n-    diff: i64,\n-}\n-\n-struct Edits<'a> {\n-    edits: &'a [Indel],\n-    current: Option<TranslatedEdit<'a>>,\n-    acc_diff: i64,\n-}\n-\n-impl<'a> Edits<'a> {\n-    fn from_text_edit(text_edit: &'a TextEdit) -> Edits<'a> {\n-        let mut x = Edits { edits: text_edit.as_indels(), current: None, acc_diff: 0 };\n-        x.advance_edit();\n-        x\n-    }\n-    fn advance_edit(&mut self) {\n-        self.acc_diff += self.current.as_ref().map_or(0, |x| x.diff);\n-        match self.edits.split_first() {\n-            Some((next, rest)) => {\n-                let delete = self.translate_range(next.delete);\n-                let diff = next.insert.len() as i64 - usize::from(next.delete.len()) as i64;\n-                self.current = Some(TranslatedEdit { delete, insert: &next.insert, diff });\n-                self.edits = rest;\n-            }\n-            None => {\n-                self.current = None;\n-            }\n-        }\n-    }\n-\n-    fn next_inserted_steps(&mut self) -> Option<OffsetStepIter<'a>> {\n-        let cur = self.current.as_ref()?;\n-        let res = Some(OffsetStepIter { offset: cur.delete.start(), text: &cur.insert });\n-        self.advance_edit();\n-        res\n-    }\n-\n-    fn next_steps(&mut self, step: &Step) -> NextSteps {\n-        let step_pos = match *step {\n-            Step::Newline(n) => n,\n-            Step::Utf16Char(r) => r.end(),\n-        };\n-        match &mut self.current {\n-            Some(edit) => {\n-                if step_pos <= edit.delete.start() {\n-                    NextSteps::Use\n-                } else if step_pos <= edit.delete.end() {\n-                    let iter = OffsetStepIter { offset: edit.delete.start(), text: &edit.insert };\n-                    // empty slice to avoid returning steps again\n-                    edit.insert = &edit.insert[edit.insert.len()..];\n-                    NextSteps::ReplaceMany(iter)\n-                } else {\n-                    let iter = OffsetStepIter { offset: edit.delete.start(), text: &edit.insert };\n-                    // empty slice to avoid returning steps again\n-                    edit.insert = &edit.insert[edit.insert.len()..];\n-                    self.advance_edit();\n-                    NextSteps::AddMany(iter)\n-                }\n-            }\n-            None => NextSteps::Use,\n-        }\n-    }\n-\n-    fn translate_range(&self, range: TextRange) -> TextRange {\n-        if self.acc_diff == 0 {\n-            range\n-        } else {\n-            let start = self.translate(range.start());\n-            let end = self.translate(range.end());\n-            TextRange::new(start, end)\n-        }\n-    }\n-\n-    fn translate(&self, x: TextSize) -> TextSize {\n-        if self.acc_diff == 0 {\n-            x\n-        } else {\n-            TextSize::from((usize::from(x) as i64 + self.acc_diff) as u32)\n-        }\n-    }\n-\n-    fn translate_step(&self, x: &Step) -> Step {\n-        if self.acc_diff == 0 {\n-            x.clone()\n-        } else {\n-            match *x {\n-                Step::Newline(n) => Step::Newline(self.translate(n)),\n-                Step::Utf16Char(r) => Step::Utf16Char(self.translate_range(r)),\n-            }\n-        }\n-    }\n-}\n-\n-#[derive(Debug)]\n-struct RunningLineCol {\n-    line: u32,\n-    last_newline: TextSize,\n-    col_adjust: TextSize,\n-}\n-\n-impl RunningLineCol {\n-    fn new() -> RunningLineCol {\n-        RunningLineCol { line: 0, last_newline: TextSize::from(0), col_adjust: TextSize::from(0) }\n-    }\n-\n-    fn to_line_col(&self, offset: TextSize) -> LineCol {\n-        LineCol {\n-            line: self.line,\n-            col_utf16: ((offset - self.last_newline) - self.col_adjust).into(),\n-        }\n-    }\n-\n-    fn add_line(&mut self, newline: TextSize) {\n-        self.line += 1;\n-        self.last_newline = newline;\n-        self.col_adjust = TextSize::from(0);\n-    }\n-\n-    fn adjust_col(&mut self, range: TextRange) {\n-        self.col_adjust += range.len() - TextSize::from(1);\n-    }\n-}"}, {"sha": "3484f55886b8d858cc99a7d52671db0c7fc5090f", "filename": "crates/ra_ide_db/src/source_change.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3cba0dc26b707bebc1865671fd2c5139c1e1c537/crates%2Fra_ide_db%2Fsrc%2Fsource_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cba0dc26b707bebc1865671fd2c5139c1e1c537/crates%2Fra_ide_db%2Fsrc%2Fsource_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsource_change.rs?ref=3cba0dc26b707bebc1865671fd2c5139c1e1c537", "patch": "@@ -3,7 +3,7 @@\n //!\n //! It can be viewed as a dual for `AnalysisChange`.\n \n-use ra_db::{FileId, FilePosition, RelativePathBuf, SourceRootId};\n+use ra_db::{FileId, RelativePathBuf, SourceRootId};\n use ra_text_edit::TextEdit;\n \n #[derive(Debug, Clone)]\n@@ -12,7 +12,6 @@ pub struct SourceChange {\n     pub label: String,\n     pub source_file_edits: Vec<SourceFileEdit>,\n     pub file_system_edits: Vec<FileSystemEdit>,\n-    pub cursor_position: Option<FilePosition>,\n     pub is_snippet: bool,\n }\n \n@@ -28,7 +27,6 @@ impl SourceChange {\n             label: label.into(),\n             source_file_edits,\n             file_system_edits,\n-            cursor_position: None,\n             is_snippet: false,\n         }\n     }\n@@ -42,7 +40,6 @@ impl SourceChange {\n             label: label,\n             source_file_edits: edits,\n             file_system_edits: vec![],\n-            cursor_position: None,\n             is_snippet: false,\n         }\n     }\n@@ -54,7 +51,6 @@ impl SourceChange {\n             label: label.into(),\n             source_file_edits: vec![],\n             file_system_edits: edits,\n-            cursor_position: None,\n             is_snippet: false,\n         }\n     }\n@@ -80,18 +76,6 @@ impl SourceChange {\n     pub fn file_system_edit<L: Into<String>>(label: L, edit: FileSystemEdit) -> Self {\n         SourceChange::file_system_edits(label, vec![edit])\n     }\n-\n-    /// Sets the cursor position to the given `FilePosition`\n-    pub fn with_cursor(mut self, cursor_position: FilePosition) -> Self {\n-        self.cursor_position = Some(cursor_position);\n-        self\n-    }\n-\n-    /// Sets the cursor position to the given `FilePosition`\n-    pub fn with_cursor_opt(mut self, cursor_position: Option<FilePosition>) -> Self {\n-        self.cursor_position = cursor_position;\n-        self\n-    }\n }\n \n #[derive(Debug, Clone)]\n@@ -117,7 +101,6 @@ impl SingleFileChange {\n             label: self.label,\n             source_file_edits: vec![SourceFileEdit { file_id, edit: self.edit }],\n             file_system_edits: Vec::new(),\n-            cursor_position: None,\n             is_snippet: false,\n         }\n     }"}, {"sha": "3c7bd609d24fb3e452b05eee91574497861e1edb", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cba0dc26b707bebc1865671fd2c5139c1e1c537/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cba0dc26b707bebc1865671fd2c5139c1e1c537/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=3cba0dc26b707bebc1865671fd2c5139c1e1c537", "patch": "@@ -102,7 +102,7 @@ pub enum OnEnter {}\n \n impl Request for OnEnter {\n     type Params = lsp_types::TextDocumentPositionParams;\n-    type Result = Option<SourceChange>;\n+    type Result = Option<SnippetWorkspaceEdit>;\n     const METHOD: &'static str = \"rust-analyzer/onEnter\";\n }\n "}, {"sha": "fcf08cd79897cb51f5e8f3e9c1c27dcc16e4c00b", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cba0dc26b707bebc1865671fd2c5139c1e1c537/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cba0dc26b707bebc1865671fd2c5139c1e1c537/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=3cba0dc26b707bebc1865671fd2c5139c1e1c537", "patch": "@@ -159,12 +159,12 @@ pub fn handle_join_lines(\n pub fn handle_on_enter(\n     world: WorldSnapshot,\n     params: lsp_types::TextDocumentPositionParams,\n-) -> Result<Option<lsp_ext::SourceChange>> {\n+) -> Result<Option<lsp_ext::SnippetWorkspaceEdit>> {\n     let _p = profile(\"handle_on_enter\");\n     let position = from_proto::file_position(&world, params)?;\n     match world.analysis().on_enter(position)? {\n         None => Ok(None),\n-        Some(source_change) => to_proto::source_change(&world, source_change).map(Some),\n+        Some(source_change) => to_proto::snippet_workspace_edit(&world, source_change).map(Some),\n     }\n }\n "}, {"sha": "9a8e9e174a99e5cf3c022922750781731d330c19", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 10, "deletions": 53, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/3cba0dc26b707bebc1865671fd2c5139c1e1c537/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cba0dc26b707bebc1865671fd2c5139c1e1c537/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=3cba0dc26b707bebc1865671fd2c5139c1e1c537", "patch": "@@ -1,10 +1,10 @@\n //! Conversion of rust-analyzer specific types to lsp_types equivalents.\n use ra_db::{FileId, FileRange};\n use ra_ide::{\n-    translate_offset_with_edit, Assist, CompletionItem, CompletionItemKind, Documentation,\n-    FileSystemEdit, Fold, FoldKind, FunctionSignature, Highlight, HighlightModifier, HighlightTag,\n-    HighlightedRange, InlayHint, InlayKind, InsertTextFormat, LineIndex, NavigationTarget,\n-    ReferenceAccess, Severity, SourceChange, SourceFileEdit,\n+    Assist, CompletionItem, CompletionItemKind, Documentation, FileSystemEdit, Fold, FoldKind,\n+    FunctionSignature, Highlight, HighlightModifier, HighlightTag, HighlightedRange, InlayHint,\n+    InlayKind, InsertTextFormat, LineIndex, NavigationTarget, ReferenceAccess, Severity,\n+    SourceChange, SourceFileEdit,\n };\n use ra_syntax::{SyntaxKind, TextRange, TextSize};\n use ra_text_edit::{Indel, TextEdit};\n@@ -375,14 +375,6 @@ pub(crate) fn url(world: &WorldSnapshot, file_id: FileId) -> Result<lsp_types::U\n     world.file_id_to_uri(file_id)\n }\n \n-pub(crate) fn text_document_identifier(\n-    world: &WorldSnapshot,\n-    file_id: FileId,\n-) -> Result<lsp_types::TextDocumentIdentifier> {\n-    let res = lsp_types::TextDocumentIdentifier { uri: url(world, file_id)? };\n-    Ok(res)\n-}\n-\n pub(crate) fn versioned_text_document_identifier(\n     world: &WorldSnapshot,\n     file_id: FileId,\n@@ -496,30 +488,9 @@ pub(crate) fn source_change(\n     world: &WorldSnapshot,\n     source_change: SourceChange,\n ) -> Result<lsp_ext::SourceChange> {\n-    let cursor_position = match source_change.cursor_position {\n-        None => None,\n-        Some(pos) => {\n-            let line_index = world.analysis().file_line_index(pos.file_id)?;\n-            let edit = source_change\n-                .source_file_edits\n-                .iter()\n-                .find(|it| it.file_id == pos.file_id)\n-                .map(|it| &it.edit);\n-            let line_col = match edit {\n-                Some(edit) => translate_offset_with_edit(&*line_index, pos.offset, edit),\n-                None => line_index.line_col(pos.offset),\n-            };\n-            let position =\n-                lsp_types::Position::new(u64::from(line_col.line), u64::from(line_col.col_utf16));\n-            Some(lsp_types::TextDocumentPositionParams {\n-                text_document: text_document_identifier(world, pos.file_id)?,\n-                position,\n-            })\n-        }\n-    };\n     let label = source_change.label.clone();\n     let workspace_edit = self::snippet_workspace_edit(world, source_change)?;\n-    Ok(lsp_ext::SourceChange { label, workspace_edit, cursor_position })\n+    Ok(lsp_ext::SourceChange { label, workspace_edit, cursor_position: None })\n }\n \n pub(crate) fn snippet_workspace_edit(\n@@ -639,25 +610,11 @@ fn main() <fold>{\n }\n \n pub(crate) fn code_action(world: &WorldSnapshot, assist: Assist) -> Result<lsp_ext::CodeAction> {\n-    let res = if assist.source_change.cursor_position.is_none() {\n-        lsp_ext::CodeAction {\n-            title: assist.label,\n-            kind: Some(String::new()),\n-            edit: Some(snippet_workspace_edit(world, assist.source_change)?),\n-            command: None,\n-        }\n-    } else {\n-        assert!(!assist.source_change.is_snippet);\n-        let source_change = source_change(&world, assist.source_change)?;\n-        let arg = serde_json::to_value(source_change)?;\n-        let title = assist.label;\n-        let command = lsp_types::Command {\n-            title: title.clone(),\n-            command: \"rust-analyzer.applySourceChange\".to_string(),\n-            arguments: Some(vec![arg]),\n-        };\n-\n-        lsp_ext::CodeAction { title, kind: Some(String::new()), edit: None, command: Some(command) }\n+    let res = lsp_ext::CodeAction {\n+        title: assist.label,\n+        kind: Some(String::new()),\n+        edit: Some(snippet_workspace_edit(world, assist.source_change)?),\n+        command: None,\n     };\n     Ok(res)\n }"}, {"sha": "4e94c37e1c16da1ada9a2d940a251e23d565aa2b", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 28, "deletions": 40, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/3cba0dc26b707bebc1865671fd2c5139c1e1c537/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cba0dc26b707bebc1865671fd2c5139c1e1c537/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=3cba0dc26b707bebc1865671fd2c5139c1e1c537", "patch": "@@ -474,27 +474,21 @@ fn main() {{}}\n             position: Position { line: 0, character: 5 },\n         },\n         json!({\n-          \"cursorPosition\": {\n-            \"position\": { \"character\": 4, \"line\": 1 },\n-            \"textDocument\": { \"uri\": \"file:///[..]src/m0.rs\" }\n-          },\n-          \"label\": \"On enter\",\n-          \"workspaceEdit\": {\n-            \"documentChanges\": [\n-              {\n-                \"edits\": [\n-                  {\n-                    \"newText\": \"\\n/// \",\n-                    \"range\": {\n-                      \"end\": { \"character\": 5, \"line\": 0 },\n-                      \"start\": { \"character\": 5, \"line\": 0 }\n-                    }\n+          \"documentChanges\": [\n+            {\n+              \"edits\": [\n+                {\n+                  \"insertTextFormat\": 2,\n+                  \"newText\": \"\\n/// $0\",\n+                  \"range\": {\n+                    \"end\": { \"character\": 5, \"line\": 0 },\n+                    \"start\": { \"character\": 5, \"line\": 0 }\n                   }\n-                ],\n-                \"textDocument\": { \"uri\": \"file:///[..]src/m0.rs\", \"version\": null }\n-              }\n-            ]\n-          }\n+                }\n+              ],\n+              \"textDocument\": { \"uri\": \"file:///[..]src/m0.rs\", \"version\": null }\n+            }\n+          ]\n         }),\n     );\n     let elapsed = start.elapsed();\n@@ -526,27 +520,21 @@ version = \\\"0.0.0\\\"\n             position: Position { line: 0, character: 8 },\n         },\n         json!({\n-          \"cursorPosition\": {\n-            \"position\": { \"line\": 1, \"character\": 4 },\n-            \"textDocument\": { \"uri\": \"file:///[..]src/main.rs\" }\n-          },\n-          \"label\": \"On enter\",\n-          \"workspaceEdit\": {\n-            \"documentChanges\": [\n-              {\n-                \"edits\": [\n-                  {\n-                    \"newText\": \"\\r\\n/// \",\n-                    \"range\": {\n-                      \"end\": { \"line\": 0, \"character\": 8 },\n-                      \"start\": { \"line\": 0, \"character\": 8 }\n-                    }\n+          \"documentChanges\": [\n+            {\n+              \"edits\": [\n+                {\n+                  \"insertTextFormat\": 2,\n+                  \"newText\": \"\\r\\n/// $0\",\n+                  \"range\": {\n+                    \"end\": { \"line\": 0, \"character\": 8 },\n+                    \"start\": { \"line\": 0, \"character\": 8 }\n                   }\n-                ],\n-                \"textDocument\": { \"uri\": \"file:///[..]src/main.rs\", \"version\": null }\n-              }\n-            ]\n-          }\n+                }\n+              ],\n+              \"textDocument\": { \"uri\": \"file:///[..]src/main.rs\", \"version\": null }\n+            }\n+          ]\n         }),\n     );\n }"}, {"sha": "e5ed77e32230a4883c89b4b687b297cfde7ef8b5", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 48, "deletions": 27, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/3cba0dc26b707bebc1865671fd2c5139c1e1c537/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3cba0dc26b707bebc1865671fd2c5139c1e1c537/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=3cba0dc26b707bebc1865671fd2c5139c1e1c537", "patch": "@@ -53,36 +53,57 @@ export function selectAndApplySourceChange(ctx: Ctx): Cmd {\n     };\n }\n \n-export function applySnippetWorkspaceEdit(_ctx: Ctx): Cmd {\n+export function applySnippetWorkspaceEditCommand(_ctx: Ctx): Cmd {\n     return async (edit: vscode.WorkspaceEdit) => {\n-        assert(edit.entries().length === 1, `bad ws edit: ${JSON.stringify(edit)}`);\n-        const [uri, edits] = edit.entries()[0];\n+        await applySnippetWorkspaceEdit(edit);\n+    };\n+}\n+\n+export async function applySnippetWorkspaceEdit(edit: vscode.WorkspaceEdit) {\n+    assert(edit.entries().length === 1, `bad ws edit: ${JSON.stringify(edit)}`);\n+    const [uri, edits] = edit.entries()[0];\n \n-        const editor = vscode.window.visibleTextEditors.find((it) => it.document.uri.toString() === uri.toString());\n-        if (!editor) return;\n+    const editor = vscode.window.visibleTextEditors.find((it) => it.document.uri.toString() === uri.toString());\n+    if (!editor) return;\n \n-        let editWithSnippet: vscode.TextEdit | undefined = undefined;\n-        let lineDelta = 0;\n-        await editor.edit((builder) => {\n-            for (const indel of edits) {\n-                const isSnippet = indel.newText.indexOf('$0') !== -1 || indel.newText.indexOf('${') !== -1;\n-                if (isSnippet) {\n-                    editWithSnippet = indel;\n-                } else {\n-                    if (!editWithSnippet) {\n-                        lineDelta = (indel.newText.match(/\\n/g) || []).length - (indel.range.end.line - indel.range.start.line);\n-                    }\n-                    builder.replace(indel.range, indel.newText);\n-                }\n+    let selection: vscode.Selection | undefined = undefined;\n+    let lineDelta = 0;\n+    await editor.edit((builder) => {\n+        for (const indel of edits) {\n+            const parsed = parseSnippet(indel.newText);\n+            if (parsed) {\n+                const [newText, [placeholderStart, placeholderLength]] = parsed;\n+                const prefix = newText.substr(0, placeholderStart);\n+                const lastNewline = prefix.lastIndexOf('\\n');\n+\n+                const startLine = indel.range.start.line + lineDelta + countLines(prefix);\n+                const startColumn = lastNewline === -1 ?\n+                    indel.range.start.character + placeholderStart\n+                    : prefix.length - lastNewline - 1;\n+                const endColumn = startColumn + placeholderLength;\n+                selection = new vscode.Selection(\n+                    new vscode.Position(startLine, startColumn),\n+                    new vscode.Position(startLine, endColumn),\n+                );\n+                builder.replace(indel.range, newText);\n+            } else {\n+                lineDelta = countLines(indel.newText) - (indel.range.end.line - indel.range.start.line);\n+                builder.replace(indel.range, indel.newText);\n             }\n-        });\n-        if (editWithSnippet) {\n-            const snip = editWithSnippet as vscode.TextEdit;\n-            const range = snip.range.with(\n-                snip.range.start.with(snip.range.start.line + lineDelta),\n-                snip.range.end.with(snip.range.end.line + lineDelta),\n-            );\n-            await editor.insertSnippet(new vscode.SnippetString(snip.newText), range);\n         }\n-    };\n+    });\n+    if (selection) editor.selection = selection;\n+}\n+\n+function parseSnippet(snip: string): [string, [number, number]] | undefined {\n+    const m = snip.match(/\\$(0|\\{0:([^}]*)\\})/);\n+    if (!m) return undefined;\n+    const placeholder = m[2] ?? \"\";\n+    const range: [number, number] = [m.index!!, placeholder.length];\n+    const insert = snip.replace(m[0], placeholder);\n+    return [insert, range];\n+}\n+\n+function countLines(text: string): number {\n+    return (text.match(/\\n/g) || []).length;\n }"}, {"sha": "a7871c31eed0bde9d209833eb2e9ff82b06df673", "filename": "editors/code/src/commands/on_enter.ts", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3cba0dc26b707bebc1865671fd2c5139c1e1c537/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3cba0dc26b707bebc1865671fd2c5139c1e1c537/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts?ref=3cba0dc26b707bebc1865671fd2c5139c1e1c537", "patch": "@@ -1,8 +1,8 @@\n import * as vscode from 'vscode';\n import * as ra from '../rust-analyzer-api';\n \n-import { applySourceChange } from '../source_change';\n import { Cmd, Ctx } from '../ctx';\n+import { applySnippetWorkspaceEdit } from '.';\n \n async function handleKeypress(ctx: Ctx) {\n     const editor = ctx.activeRustEditor;\n@@ -21,7 +21,8 @@ async function handleKeypress(ctx: Ctx) {\n     });\n     if (!change) return false;\n \n-    await applySourceChange(ctx, change);\n+    const workspaceEdit = client.protocol2CodeConverter.asWorkspaceEdit(change);\n+    await applySnippetWorkspaceEdit(workspaceEdit);\n     return true;\n }\n "}, {"sha": "8b0a9d8706e9d903fee897bbeb29f48b0bba60b1", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cba0dc26b707bebc1865671fd2c5139c1e1c537/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3cba0dc26b707bebc1865671fd2c5139c1e1c537/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=3cba0dc26b707bebc1865671fd2c5139c1e1c537", "patch": "@@ -91,7 +91,7 @@ export async function activate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('debugSingle', commands.debugSingle);\n     ctx.registerCommand('showReferences', commands.showReferences);\n     ctx.registerCommand('applySourceChange', commands.applySourceChange);\n-    ctx.registerCommand('applySnippetWorkspaceEdit', commands.applySnippetWorkspaceEdit);\n+    ctx.registerCommand('applySnippetWorkspaceEdit', commands.applySnippetWorkspaceEditCommand);\n     ctx.registerCommand('selectAndApplySourceChange', commands.selectAndApplySourceChange);\n \n     ctx.pushCleanup(activateTaskProvider(workspaceFolder));"}, {"sha": "3b83b10e38adbf04d98fa3fc0740fd96a763c3a4", "filename": "editors/code/src/rust-analyzer-api.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cba0dc26b707bebc1865671fd2c5139c1e1c537/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3cba0dc26b707bebc1865671fd2c5139c1e1c537/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts?ref=3cba0dc26b707bebc1865671fd2c5139c1e1c537", "patch": "@@ -69,7 +69,7 @@ export interface JoinLinesParams {\n export const joinLines = request<JoinLinesParams, SourceChange>(\"joinLines\");\n \n \n-export const onEnter = request<lc.TextDocumentPositionParams, Option<SourceChange>>(\"onEnter\");\n+export const onEnter = request<lc.TextDocumentPositionParams, Option<lc.WorkspaceEdit>>(\"onEnter\");\n \n export interface RunnablesParams {\n     textDocument: lc.TextDocumentIdentifier;"}]}