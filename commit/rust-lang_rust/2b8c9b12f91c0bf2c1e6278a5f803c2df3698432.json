{"sha": "2b8c9b12f91c0bf2c1e6278a5f803c2df3698432", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiOGM5YjEyZjkxYzBiZjJjMWU2Mjc4YTVmODAzYzJkZjM2OTg0MzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-28T00:44:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-28T00:44:56Z"}, "message": "Auto merge of #24478 - alexcrichton:issue-24313, r=aturon\n\nInspecting the current thread's info may not always work due to the TLS value\r\nhaving been destroyed (or is actively being destroyed). The code for printing\r\na panic message assumed, however, that it could acquire the thread's name\r\nthrough this method.\r\n\r\nInstead this commit propagates the `Option` outwards to allow the\r\n`std::panicking` module to handle the case where the current thread isn't\r\npresent.\r\n\r\nWhile it solves the immediate issue of #24313, there is still another underlying\r\nissue of panicking destructors in thread locals will abort the process.\r\n\r\nCloses #24313", "tree": {"sha": "c50c1c6986dae1d4ae23335c43155888aacd8bc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c50c1c6986dae1d4ae23335c43155888aacd8bc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b8c9b12f91c0bf2c1e6278a5f803c2df3698432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b8c9b12f91c0bf2c1e6278a5f803c2df3698432", "html_url": "https://github.com/rust-lang/rust/commit/2b8c9b12f91c0bf2c1e6278a5f803c2df3698432", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b8c9b12f91c0bf2c1e6278a5f803c2df3698432/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97d4e76c20ec2e80affd100dd169155914370fd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/97d4e76c20ec2e80affd100dd169155914370fd2", "html_url": "https://github.com/rust-lang/rust/commit/97d4e76c20ec2e80affd100dd169155914370fd2"}, {"sha": "d98ab4faf869ff0430ad73260b13ef8e473ef212", "url": "https://api.github.com/repos/rust-lang/rust/commits/d98ab4faf869ff0430ad73260b13ef8e473ef212", "html_url": "https://github.com/rust-lang/rust/commit/d98ab4faf869ff0430ad73260b13ef8e473ef212"}], "stats": {"total": 86, "additions": 55, "deletions": 31}, "files": [{"sha": "7366524fd7ea82f1729f67578920b5e0ac2adc41", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b8c9b12f91c0bf2c1e6278a5f803c2df3698432/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8c9b12f91c0bf2c1e6278a5f803c2df3698432/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=2b8c9b12f91c0bf2c1e6278a5f803c2df3698432", "patch": "@@ -17,7 +17,7 @@ use any::Any;\n use cell::RefCell;\n use rt::{backtrace, unwind};\n use sys::stdio::Stderr;\n-use thread;\n+use sys_common::thread_info;\n \n thread_local! {\n     pub static LOCAL_STDERR: RefCell<Option<Box<Write + Send>>> = {\n@@ -34,8 +34,8 @@ pub fn on_panic(obj: &(Any+Send), file: &'static str, line: u32) {\n         }\n     };\n     let mut err = Stderr::new();\n-    let thread = thread::current();\n-    let name = thread.name().unwrap_or(\"<unnamed>\");\n+    let thread = thread_info::current_thread();\n+    let name = thread.as_ref().and_then(|t| t.name()).unwrap_or(\"<unnamed>\");\n     let prev = LOCAL_STDERR.with(|s| s.borrow_mut().take());\n     match prev {\n         Some(mut stderr) => {"}, {"sha": "ae55bae37aa884e3870e7b43315f745e425a927d", "filename": "src/libstd/sys/common/thread_info.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2b8c9b12f91c0bf2c1e6278a5f803c2df3698432/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8c9b12f91c0bf2c1e6278a5f803c2df3698432/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs?ref=2b8c9b12f91c0bf2c1e6278a5f803c2df3698432", "patch": "@@ -25,10 +25,9 @@ struct ThreadInfo {\n thread_local! { static THREAD_INFO: RefCell<Option<ThreadInfo>> = RefCell::new(None) }\n \n impl ThreadInfo {\n-    fn with<R, F>(f: F) -> R where F: FnOnce(&mut ThreadInfo) -> R {\n+    fn with<R, F>(f: F) -> Option<R> where F: FnOnce(&mut ThreadInfo) -> R {\n         if THREAD_INFO.state() == LocalKeyState::Destroyed {\n-            panic!(\"Use of std::thread::current() is not possible after \\\n-                    the thread's local data has been destroyed\");\n+            return None\n         }\n \n         THREAD_INFO.with(move |c| {\n@@ -38,16 +37,16 @@ impl ThreadInfo {\n                     thread: NewThread::new(None),\n                 })\n             }\n-            f(c.borrow_mut().as_mut().unwrap())\n+            Some(f(c.borrow_mut().as_mut().unwrap()))\n         })\n     }\n }\n \n-pub fn current_thread() -> Thread {\n+pub fn current_thread() -> Option<Thread> {\n     ThreadInfo::with(|info| info.thread.clone())\n }\n \n-pub fn stack_guard() -> usize {\n+pub fn stack_guard() -> Option<usize> {\n     ThreadInfo::with(|info| info.stack_guard)\n }\n "}, {"sha": "2bc280d12743958fbe5a1ff36b9c96960a27b223", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b8c9b12f91c0bf2c1e6278a5f803c2df3698432/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8c9b12f91c0bf2c1e6278a5f803c2df3698432/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=2b8c9b12f91c0bf2c1e6278a5f803c2df3698432", "patch": "@@ -81,7 +81,7 @@ mod imp {\n         // We're calling into functions with stack checks\n         stack::record_sp_limit(0);\n \n-        let guard = thread_info::stack_guard();\n+        let guard = thread_info::stack_guard().unwrap_or(0);\n         let addr = (*info).si_addr as usize;\n \n         if guard == 0 || addr < guard - PAGE_SIZE || addr >= guard {"}, {"sha": "d028a169b64b7051a3963cead3c4023aa9f6dc5d", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2b8c9b12f91c0bf2c1e6278a5f803c2df3698432/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8c9b12f91c0bf2c1e6278a5f803c2df3698432/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=2b8c9b12f91c0bf2c1e6278a5f803c2df3698432", "patch": "@@ -18,7 +18,6 @@ use cell::UnsafeCell;\n \n // Sure wish we had macro hygiene, no?\n #[doc(hidden)]\n-#[unstable(feature = \"thread_local_internals\")]\n pub mod __impl {\n     pub use super::imp::Key as KeyInner;\n     pub use super::imp::destroy_value;\n@@ -78,12 +77,10 @@ pub struct LocalKey<T> {\n     // This is trivially devirtualizable by LLVM because we never store anything\n     // to this field and rustc can declare the `static` as constant as well.\n     #[doc(hidden)]\n-    #[unstable(feature = \"thread_local_internals\")]\n     pub inner: fn() -> &'static __impl::KeyInner<UnsafeCell<Option<T>>>,\n \n     // initialization routine to invoke to create a value\n     #[doc(hidden)]\n-    #[unstable(feature = \"thread_local_internals\")]\n     pub init: fn() -> T,\n }\n \n@@ -297,36 +294,31 @@ impl<T: 'static> LocalKey<T> {\n }\n \n #[cfg(all(any(target_os = \"macos\", target_os = \"linux\"), not(target_arch = \"aarch64\")))]\n+#[doc(hidden)]\n mod imp {\n     use prelude::v1::*;\n \n     use cell::UnsafeCell;\n     use intrinsics;\n     use ptr;\n \n-    #[doc(hidden)]\n-    #[unstable(feature = \"thread_local_internals\")]\n     pub struct Key<T> {\n         // Place the inner bits in an `UnsafeCell` to currently get around the\n         // \"only Sync statics\" restriction. This allows any type to be placed in\n         // the cell.\n         //\n         // Note that all access requires `T: 'static` so it can't be a type with\n         // any borrowed pointers still.\n-        #[unstable(feature = \"thread_local_internals\")]\n         pub inner: UnsafeCell<T>,\n \n         // Metadata to keep track of the state of the destructor. Remember that\n         // these variables are thread-local, not global.\n-        #[unstable(feature = \"thread_local_internals\")]\n         pub dtor_registered: UnsafeCell<bool>, // should be Cell\n-        #[unstable(feature = \"thread_local_internals\")]\n         pub dtor_running: UnsafeCell<bool>, // should be Cell\n     }\n \n     unsafe impl<T> ::marker::Sync for Key<T> { }\n \n-    #[doc(hidden)]\n     impl<T> Key<T> {\n         pub unsafe fn get(&'static self) -> Option<&'static T> {\n             if intrinsics::needs_drop::<T>() && *self.dtor_running.get() {\n@@ -422,8 +414,6 @@ mod imp {\n         _tlv_atexit(dtor, t);\n     }\n \n-    #[doc(hidden)]\n-    #[unstable(feature = \"thread_local_internals\")]\n     pub unsafe extern fn destroy_value<T>(ptr: *mut u8) {\n         let ptr = ptr as *mut Key<T>;\n         // Right before we run the user destructor be sure to flag the\n@@ -435,6 +425,7 @@ mod imp {\n }\n \n #[cfg(any(not(any(target_os = \"macos\", target_os = \"linux\")), target_arch = \"aarch64\"))]\n+#[doc(hidden)]\n mod imp {\n     use prelude::v1::*;\n \n@@ -444,16 +435,12 @@ mod imp {\n     use ptr;\n     use sys_common::thread_local::StaticKey as OsStaticKey;\n \n-    #[doc(hidden)]\n-    #[unstable(feature = \"thread_local_internals\")]\n     pub struct Key<T> {\n         // Statically allocated initialization expression, using an `UnsafeCell`\n         // for the same reasons as above.\n-        #[unstable(feature = \"thread_local_internals\")]\n         pub inner: UnsafeCell<T>,\n \n         // OS-TLS key that we'll use to key off.\n-        #[unstable(feature = \"thread_local_internals\")]\n         pub os: OsStaticKey,\n     }\n \n@@ -464,7 +451,6 @@ mod imp {\n         value: T,\n     }\n \n-    #[doc(hidden)]\n     impl<T> Key<T> {\n         pub unsafe fn get(&'static self) -> Option<&'static T> {\n             self.ptr().map(|p| &*p)\n@@ -489,14 +475,12 @@ mod imp {\n                 key: self,\n                 value: mem::transmute_copy(&self.inner),\n             };\n-            let ptr: *mut Value<T> = boxed::into_raw(ptr);\n+            let ptr = boxed::into_raw(ptr);\n             self.os.set(ptr as *mut u8);\n             Some(&mut (*ptr).value as *mut T)\n         }\n     }\n \n-    #[doc(hidden)]\n-    #[unstable(feature = \"thread_local_internals\")]\n     pub unsafe extern fn destroy_value<T: 'static>(ptr: *mut u8) {\n         // The OS TLS ensures that this key contains a NULL value when this\n         // destructor starts to run. We set it back to a sentinel value of 1 to\n@@ -505,7 +489,7 @@ mod imp {\n         //\n         // Note that to prevent an infinite loop we reset it back to null right\n         // before we return from the destructor ourselves.\n-        let ptr: Box<Value<T>> = Box::from_raw(ptr as *mut Value<T>);\n+        let ptr = Box::from_raw(ptr as *mut Value<T>);\n         let key = ptr.key;\n         key.os.set(1 as *mut u8);\n         drop(ptr);"}, {"sha": "ce531fb13812c30db599fef9a42b10e8f3a8aad0", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b8c9b12f91c0bf2c1e6278a5f803c2df3698432/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8c9b12f91c0bf2c1e6278a5f803c2df3698432/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=2b8c9b12f91c0bf2c1e6278a5f803c2df3698432", "patch": "@@ -407,7 +407,9 @@ pub fn scoped<'a, T, F>(f: F) -> JoinGuard<'a, T> where\n /// Gets a handle to the thread that invokes it.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn current() -> Thread {\n-    thread_info::current_thread()\n+    thread_info::current_thread().expect(\"use of std::thread::current() is not \\\n+                                          possible after the thread's local \\\n+                                          data has been destroyed\")\n }\n \n /// Cooperatively gives up a timeslice to the OS scheduler."}, {"sha": "9acfb04d781e0847db017dc524659079408ccee7", "filename": "src/test/run-pass/issue-24313.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2b8c9b12f91c0bf2c1e6278a5f803c2df3698432/src%2Ftest%2Frun-pass%2Fissue-24313.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8c9b12f91c0bf2c1e6278a5f803c2df3698432/src%2Ftest%2Frun-pass%2Fissue-24313.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-24313.rs?ref=2b8c9b12f91c0bf2c1e6278a5f803c2df3698432", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::thread;\n+use std::env;\n+use std::process::Command;\n+\n+struct Handle(i32);\n+\n+impl Drop for Handle {\n+    fn drop(&mut self) { panic!(); }\n+}\n+\n+thread_local!(static HANDLE: Handle = Handle(0));\n+\n+fn main() {\n+    let args = env::args().collect::<Vec<_>>();\n+    if args.len() == 1 {\n+        let out = Command::new(&args[0]).arg(\"test\").output().unwrap();\n+        let stderr = std::str::from_utf8(&out.stderr).unwrap();\n+        assert!(stderr.contains(\"panicked at 'explicit panic'\"),\n+                \"bad failure message:\\n{}\\n\", stderr);\n+    } else {\n+        // TLS dtors are not always run on process exit\n+        thread::spawn(|| {\n+            HANDLE.with(|h| {\n+                println!(\"{}\", h.0);\n+            });\n+        }).join().unwrap();\n+    }\n+}\n+"}]}