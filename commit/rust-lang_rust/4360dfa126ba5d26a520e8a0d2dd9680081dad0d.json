{"sha": "4360dfa126ba5d26a520e8a0d2dd9680081dad0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNjBkZmExMjZiYTVkMjZhNTIwZThhMGQyZGQ5NjgwMDgxZGFkMGQ=", "commit": {"author": {"name": "hedgehog1024", "email": "hedgehog1024@scryptmail.com", "date": "2018-02-12T19:27:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-12T19:27:33Z"}, "message": "Delete information about 'entry_and_modify' from Unstable book", "tree": {"sha": "b80e9e26e877742f41dc8952378750808f8dca7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b80e9e26e877742f41dc8952378750808f8dca7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4360dfa126ba5d26a520e8a0d2dd9680081dad0d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJageqlCRBK7hj4Ov3rIwAAdHIIAJJX6Z/NEKH3OkMPty3Yng9w\nvaUCSdtPX0VLdsJRlJLTBctFM1xTBY1jpGOcoUbZbxVqfEE5BNztn0dgCj0CdzLS\nEiOXV8E3hzyFasbQam5zLQeujFDCJF63d/WLPu2MMY2ZHa3FhyrhIE96lG/6qIlA\n+B9acqKmwYWPi+UR67NmbSK0vGxznAYThjDdnlQmWsiQjrBWAcF0XQRHOceECgSg\nos0AlgvxdmViwjtHq2QTMUSoYvSJGW9bFj2V2ZOtU7PNJZfU1fgQjNhOsZXQckt4\niTdINtQE+Lt1i7gd6uGYqWgGXKJSV0oh0oEGZ7hUPy8a2nkRwGOWeogVXpYm24g=\n=8oF7\n-----END PGP SIGNATURE-----\n", "payload": "tree b80e9e26e877742f41dc8952378750808f8dca7b\nparent 862132be72d4de87330e31d53489b8c718a6663e\nauthor hedgehog1024 <hedgehog1024@scryptmail.com> 1518463653 +0300\ncommitter GitHub <noreply@github.com> 1518463653 +0300\n\nDelete information about 'entry_and_modify' from Unstable book"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4360dfa126ba5d26a520e8a0d2dd9680081dad0d", "html_url": "https://github.com/rust-lang/rust/commit/4360dfa126ba5d26a520e8a0d2dd9680081dad0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4360dfa126ba5d26a520e8a0d2dd9680081dad0d/comments", "author": {"login": "hedgehog1024", "id": 21061809, "node_id": "MDQ6VXNlcjIxMDYxODA5", "avatar_url": "https://avatars.githubusercontent.com/u/21061809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hedgehog1024", "html_url": "https://github.com/hedgehog1024", "followers_url": "https://api.github.com/users/hedgehog1024/followers", "following_url": "https://api.github.com/users/hedgehog1024/following{/other_user}", "gists_url": "https://api.github.com/users/hedgehog1024/gists{/gist_id}", "starred_url": "https://api.github.com/users/hedgehog1024/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hedgehog1024/subscriptions", "organizations_url": "https://api.github.com/users/hedgehog1024/orgs", "repos_url": "https://api.github.com/users/hedgehog1024/repos", "events_url": "https://api.github.com/users/hedgehog1024/events{/privacy}", "received_events_url": "https://api.github.com/users/hedgehog1024/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "862132be72d4de87330e31d53489b8c718a6663e", "url": "https://api.github.com/repos/rust-lang/rust/commits/862132be72d4de87330e31d53489b8c718a6663e", "html_url": "https://github.com/rust-lang/rust/commit/862132be72d4de87330e31d53489b8c718a6663e"}], "stats": {"total": 77, "additions": 0, "deletions": 77}, "files": [{"sha": "1280c71e83c922fa2b5e3befe3419f6014aa1dd2", "filename": "src/doc/unstable-book/src/library-features/entry-and-modify.md", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/862132be72d4de87330e31d53489b8c718a6663e/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fentry-and-modify.md", "raw_url": "https://github.com/rust-lang/rust/raw/862132be72d4de87330e31d53489b8c718a6663e/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fentry-and-modify.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fentry-and-modify.md?ref=862132be72d4de87330e31d53489b8c718a6663e", "patch": "@@ -1,77 +0,0 @@\n-# `entry_and_modify`\n-\n-The tracking issue for this feature is: [#44733]\n-\n-[#44733]: https://github.com/rust-lang/rust/issues/44733\n-\n-------------------------\n-\n-This introduces a new method for the Entry API of maps\n-(`std::collections::HashMap` and `std::collections::BTreeMap`), so that\n-occupied entries can be modified before any potential inserts into the\n-map.\n-\n-For example:\n-\n-```rust\n-#![feature(entry_and_modify)]\n-# fn main() {\n-use std::collections::HashMap;\n-\n-struct Foo {\n-    new: bool,\n-}\n-\n-let mut map: HashMap<&str, Foo> = HashMap::new();\n-\n-map.entry(\"quux\")\n-   .and_modify(|e| e.new = false)\n-   .or_insert(Foo { new: true });\n-# }\n-```\n-\n-This is not possible with the stable API alone since inserting a default\n-_before_ modifying the `new` field would mean we would lose the default state:\n-\n-```rust\n-# fn main() {\n-use std::collections::HashMap;\n-\n-struct Foo {\n-    new: bool,\n-}\n-\n-let mut map: HashMap<&str, Foo> = HashMap::new();\n-\n-map.entry(\"quux\").or_insert(Foo { new: true }).new = false;\n-# }\n-```\n-\n-In the above code the `new` field will never be `true`, even though we only\n-intended to update that field to `false` for previously extant entries.\n-\n-To achieve the same effect as `and_modify` we would have to manually match\n-against the `Occupied` and `Vacant` variants of the `Entry` enum, which is\n-a little less user-friendly, and much more verbose:\n-\n-```rust\n-# fn main() {\n-use std::collections::HashMap;\n-use std::collections::hash_map::Entry;\n-\n-struct Foo {\n-    new: bool,\n-}\n-\n-let mut map: HashMap<&str, Foo> = HashMap::new();\n-\n-match map.entry(\"quux\") {\n-    Entry::Occupied(entry) => {\n-        entry.into_mut().new = false;\n-    },\n-    Entry::Vacant(entry) => {\n-        entry.insert(Foo { new: true });\n-    },\n-};\n-# }\n-```"}]}