{"sha": "51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxZTUxNGMwZmI0ZjlhZmNhYWUzYjAyZGQ5Y2NiOTNlMTViMzBlZjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-12T20:48:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-12T20:48:09Z"}, "message": "Auto merge of #88759 - Amanieu:panic_in_drop, r=nagisa,eddyb\n\nAdd -Z panic-in-drop={unwind,abort} command-line option\n\nThis PR changes `Drop` to abort if an unwinding panic attempts to escape it, making the process abort instead. This has several benefits:\n- The current behavior when unwinding out of `Drop` is very unintuitive and easy to miss: unwinding continues, but the remaining drops in scope are simply leaked.\n- A lot of unsafe code doesn't expect drops to unwind, which can lead to unsoundness:\n  - https://github.com/servo/rust-smallvec/issues/14\n  - https://github.com/bluss/arrayvec/issues/3\n- There is a code size and compilation time cost to this: LLVM needs to generate extra landing pads out of all calls in a drop implementation. This can compound when functions are inlined since unwinding will then continue on to process drops in the callee, which can itself unwind, etc.\n  - Initial measurements show a 3% size reduction and up to 10% compilation time reduction on some crates (`syn`).\n\nOne thing to note about `-Z panic-in-drop=abort` is that *all* crates must be built with this option for it to be sound since it makes the compiler assume that dropping `Box<dyn Any>` will never unwind.\n\ncc https://github.com/rust-lang/lang-team/issues/97", "tree": {"sha": "5cc0a4eaf3c88e826459f84b2a623026feed2195", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cc0a4eaf3c88e826459f84b2a623026feed2195"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8", "html_url": "https://github.com/rust-lang/rust/commit/51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2dfb0eb8e30d188fb1731e540bc1b418bcd046d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2dfb0eb8e30d188fb1731e540bc1b418bcd046d", "html_url": "https://github.com/rust-lang/rust/commit/d2dfb0eb8e30d188fb1731e540bc1b418bcd046d"}, {"sha": "5862a0004a65e32ea3a36d33c52e305cd75a69fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/5862a0004a65e32ea3a36d33c52e305cd75a69fe", "html_url": "https://github.com/rust-lang/rust/commit/5862a0004a65e32ea3a36d33c52e305cd75a69fe"}], "stats": {"total": 136, "additions": 119, "deletions": 17}, "files": [{"sha": "1a0a3a0c340fa2bc4c43a84a5c74f597481ec8bd", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8", "patch": "@@ -511,7 +511,12 @@ impl<'tcx> FnAbiLlvmExt<'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n     }\n \n     fn apply_attrs_callsite(&self, bx: &mut Builder<'a, 'll, 'tcx>, callsite: &'ll Value) {\n-        // FIXME(wesleywiser, eddyb): We should apply `nounwind` and `noreturn` as appropriate to this callsite.\n+        if self.ret.layout.abi.is_uninhabited() {\n+            llvm::Attribute::NoReturn.apply_callsite(llvm::AttributePlace::Function, callsite);\n+        }\n+        if !self.can_unwind {\n+            llvm::Attribute::NoUnwind.apply_callsite(llvm::AttributePlace::Function, callsite);\n+        }\n \n         let mut i = 0;\n         let mut apply = |cx: &CodegenCx<'_, '_>, attrs: &ArgAttributes| {"}, {"sha": "81433e571021ea94aaceaed02a1bc0680a7c2598", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8", "patch": "@@ -743,6 +743,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(no_profiler_runtime, true);\n     tracked!(osx_rpath_install_name, true);\n     tracked!(panic_abort_tests, true);\n+    tracked!(panic_in_drop, PanicStrategy::Abort);\n     tracked!(partially_uninit_const_threshold, Some(123));\n     tracked!(plt, Some(true));\n     tracked!(polonius, true);"}, {"sha": "b8d22560618162bdbdf6a88b047b96b88b1cdc9a", "filename": "compiler/rustc_metadata/src/dependency_format.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs?ref=51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8", "patch": "@@ -400,21 +400,35 @@ fn verify_ok(tcx: TyCtxt<'_>, list: &[Linkage]) {\n                 continue;\n             }\n             let cnum = CrateNum::new(i + 1);\n-            let found_strategy = tcx.panic_strategy(cnum);\n-            let is_compiler_builtins = tcx.is_compiler_builtins(cnum);\n-            if is_compiler_builtins || desired_strategy == found_strategy {\n+            if tcx.is_compiler_builtins(cnum) {\n                 continue;\n             }\n \n-            sess.err(&format!(\n-                \"the crate `{}` is compiled with the \\\n+            let found_strategy = tcx.panic_strategy(cnum);\n+            if desired_strategy != found_strategy {\n+                sess.err(&format!(\n+                    \"the crate `{}` is compiled with the \\\n                                panic strategy `{}` which is \\\n                                incompatible with this crate's \\\n                                strategy of `{}`\",\n-                tcx.crate_name(cnum),\n-                found_strategy.desc(),\n-                desired_strategy.desc()\n-            ));\n+                    tcx.crate_name(cnum),\n+                    found_strategy.desc(),\n+                    desired_strategy.desc()\n+                ));\n+            }\n+\n+            let found_drop_strategy = tcx.panic_in_drop_strategy(cnum);\n+            if tcx.sess.opts.debugging_opts.panic_in_drop != found_drop_strategy {\n+                sess.err(&format!(\n+                    \"the crate `{}` is compiled with the \\\n+                               panic-in-drop strategy `{}` which is \\\n+                               incompatible with this crate's \\\n+                               strategy of `{}`\",\n+                    tcx.crate_name(cnum),\n+                    found_drop_strategy.desc(),\n+                    tcx.sess.opts.debugging_opts.panic_in_drop.desc()\n+                ));\n+            }\n         }\n     }\n }"}, {"sha": "a01eaf68f01c20ec52da4d64333f199276c4c20f", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8", "patch": "@@ -159,6 +159,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     has_panic_handler => { cdata.root.has_panic_handler }\n     is_profiler_runtime => { cdata.root.profiler_runtime }\n     panic_strategy => { cdata.root.panic_strategy }\n+    panic_in_drop_strategy => { cdata.root.panic_in_drop_strategy }\n     extern_crate => {\n         let r = *cdata.extern_crate.lock();\n         r.map(|c| &*tcx.arena.alloc(c))"}, {"sha": "b0d22037f21a92d1766164e267819c82b49dc4c4", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8", "patch": "@@ -692,6 +692,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hash: tcx.crate_hash(LOCAL_CRATE),\n             stable_crate_id: tcx.def_path_hash(LOCAL_CRATE.as_def_id()).stable_crate_id(),\n             panic_strategy: tcx.sess.panic_strategy(),\n+            panic_in_drop_strategy: tcx.sess.opts.debugging_opts.panic_in_drop,\n             edition: tcx.sess.edition(),\n             has_global_allocator: tcx.has_global_allocator(LOCAL_CRATE),\n             has_panic_handler: tcx.has_panic_handler(LOCAL_CRATE),"}, {"sha": "1f307f3fdeee34baf4ef87a9c615cfa7a71cd968", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8", "patch": "@@ -205,6 +205,7 @@ crate struct CrateRoot<'tcx> {\n     hash: Svh,\n     stable_crate_id: StableCrateId,\n     panic_strategy: PanicStrategy,\n+    panic_in_drop_strategy: PanicStrategy,\n     edition: Edition,\n     has_global_allocator: bool,\n     has_panic_handler: bool,"}, {"sha": "985d35ff9a9b18e9d9ddb4e05164f206e5ae25ed", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8", "patch": "@@ -1167,6 +1167,10 @@ rustc_queries! {\n         fatal_cycle\n         desc { \"query a crate's configured panic strategy\" }\n     }\n+    query panic_in_drop_strategy(_: CrateNum) -> PanicStrategy {\n+        fatal_cycle\n+        desc { \"query a crate's configured panic-in-drop strategy\" }\n+    }\n     query is_no_builtins(_: CrateNum) -> bool {\n         fatal_cycle\n         desc { \"test whether a crate has `#![no_builtins]`\" }"}, {"sha": "1abb64219f6e97dee0a68d16da9e8e761152ce26", "filename": "compiler/rustc_mir_transform/src/abort_unwinding_calls.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs?ref=51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8", "patch": "@@ -5,6 +5,7 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::layout;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_target::spec::abi::Abi;\n+use rustc_target::spec::PanicStrategy;\n \n /// A pass that runs which is targeted at ensuring that codegen guarantees about\n /// unwinding are upheld for compilations of panic=abort programs.\n@@ -82,10 +83,11 @@ impl<'tcx> MirPass<'tcx> for AbortUnwindingCalls {\n                     };\n                     layout::fn_can_unwind(tcx, flags, sig.abi())\n                 }\n-                TerminatorKind::Drop { .. }\n-                | TerminatorKind::DropAndReplace { .. }\n-                | TerminatorKind::Assert { .. }\n-                | TerminatorKind::FalseUnwind { .. } => {\n+                TerminatorKind::Drop { .. } | TerminatorKind::DropAndReplace { .. } => {\n+                    tcx.sess.opts.debugging_opts.panic_in_drop == PanicStrategy::Unwind\n+                        && layout::fn_can_unwind(tcx, CodegenFnAttrFlags::empty(), Abi::Rust)\n+                }\n+                TerminatorKind::Assert { .. } | TerminatorKind::FalseUnwind { .. } => {\n                     layout::fn_can_unwind(tcx, CodegenFnAttrFlags::empty(), Abi::Rust)\n                 }\n                 _ => continue,"}, {"sha": "bb29a87035e8001f2e24b160a11ed4dbc3dbd977", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8", "patch": "@@ -349,6 +349,7 @@ mod desc {\n     pub const parse_threads: &str = parse_number;\n     pub const parse_passes: &str = \"a space-separated list of passes, or `all`\";\n     pub const parse_panic_strategy: &str = \"either `unwind` or `abort`\";\n+    pub const parse_opt_panic_strategy: &str = parse_panic_strategy;\n     pub const parse_relro_level: &str = \"one of: `full`, `partial`, or `off`\";\n     pub const parse_sanitizers: &str =\n         \"comma separated list of sanitizers: `address`, `hwaddress`, `leak`, `memory` or `thread`\";\n@@ -549,7 +550,7 @@ mod parse {\n         }\n     }\n \n-    crate fn parse_panic_strategy(slot: &mut Option<PanicStrategy>, v: Option<&str>) -> bool {\n+    crate fn parse_opt_panic_strategy(slot: &mut Option<PanicStrategy>, v: Option<&str>) -> bool {\n         match v {\n             Some(\"unwind\") => *slot = Some(PanicStrategy::Unwind),\n             Some(\"abort\") => *slot = Some(PanicStrategy::Abort),\n@@ -558,6 +559,15 @@ mod parse {\n         true\n     }\n \n+    crate fn parse_panic_strategy(slot: &mut PanicStrategy, v: Option<&str>) -> bool {\n+        match v {\n+            Some(\"unwind\") => *slot = PanicStrategy::Unwind,\n+            Some(\"abort\") => *slot = PanicStrategy::Abort,\n+            _ => return false,\n+        }\n+        true\n+    }\n+\n     crate fn parse_relro_level(slot: &mut Option<RelroLevel>, v: Option<&str>) -> bool {\n         match v {\n             Some(s) => match s.parse::<RelroLevel>() {\n@@ -958,7 +968,7 @@ options! {\n         \"optimization level (0-3, s, or z; default: 0)\"),\n     overflow_checks: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"use overflow checks for integer arithmetic\"),\n-    panic: Option<PanicStrategy> = (None, parse_panic_strategy, [TRACKED],\n+    panic: Option<PanicStrategy> = (None, parse_opt_panic_strategy, [TRACKED],\n         \"panic strategy to compile crate with\"),\n     passes: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n         \"a list of extra LLVM passes to run (space separated)\"),\n@@ -1186,6 +1196,8 @@ options! {\n         \"pass `-install_name @rpath/...` to the macOS linker (default: no)\"),\n     panic_abort_tests: bool = (false, parse_bool, [TRACKED],\n         \"support compiling tests with panic=abort (default: no)\"),\n+    panic_in_drop: PanicStrategy = (PanicStrategy::Unwind, parse_panic_strategy, [TRACKED],\n+        \"panic strategy for panics in drops\"),\n     parse_only: bool = (false, parse_bool, [UNTRACKED],\n         \"parse only; do not compile, assemble, or link (default: no)\"),\n     partially_uninit_const_threshold: Option<usize> = (None, parse_opt_number, [TRACKED],"}, {"sha": "8b1d1e450d0376cbac6d29d5837037bca61f3d64", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8", "patch": "@@ -46,7 +46,7 @@ use rustc_session::lint;\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n-use rustc_target::spec::{abi, SanitizerSet};\n+use rustc_target::spec::{abi, PanicStrategy, SanitizerSet};\n use rustc_trait_selection::traits::error_reporting::suggestions::NextTypeParamName;\n use std::iter;\n \n@@ -2683,6 +2683,13 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n         codegen_fn_attrs.flags |= CodegenFnAttrFlags::TRACK_CALLER;\n     }\n \n+    // With -Z panic-in-drop=abort, drop_in_place never unwinds.\n+    if tcx.sess.opts.debugging_opts.panic_in_drop == PanicStrategy::Abort {\n+        if Some(id) == tcx.lang_items().drop_in_place_fn() {\n+            codegen_fn_attrs.flags |= CodegenFnAttrFlags::NEVER_UNWIND;\n+        }\n+    }\n+\n     let supported_target_features = tcx.supported_target_features(LOCAL_CRATE);\n \n     let mut inline_span = None;"}, {"sha": "62d093507ddeed0be61ff029e3a0c7a46d227b20", "filename": "src/test/codegen/panic-in-drop-abort.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8/src%2Ftest%2Fcodegen%2Fpanic-in-drop-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8/src%2Ftest%2Fcodegen%2Fpanic-in-drop-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpanic-in-drop-abort.rs?ref=51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8", "patch": "@@ -0,0 +1,54 @@\n+// compile-flags: -Z panic-in-drop=abort -O\n+\n+// Ensure that unwinding code paths are eliminated from the output after\n+// optimization.\n+\n+#![crate_type = \"lib\"]\n+use std::any::Any;\n+use std::mem::forget;\n+\n+pub struct ExternDrop;\n+impl Drop for ExternDrop {\n+    #[inline(always)]\n+    fn drop(&mut self) {\n+        // This call may potentially unwind.\n+        extern \"Rust\" {\n+            fn extern_drop();\n+        }\n+        unsafe {\n+            extern_drop();\n+        }\n+    }\n+}\n+\n+struct AssertNeverDrop;\n+impl Drop for AssertNeverDrop {\n+    #[inline(always)]\n+    fn drop(&mut self) {\n+        // This call should be optimized away as unreachable.\n+        extern \"C\" {\n+            fn should_not_appear_in_output();\n+        }\n+        unsafe {\n+            should_not_appear_in_output();\n+        }\n+    }\n+}\n+\n+// CHECK-LABEL: normal_drop\n+// CHECK-NOT: should_not_appear_in_output\n+#[no_mangle]\n+pub fn normal_drop(x: ExternDrop) {\n+    let guard = AssertNeverDrop;\n+    drop(x);\n+    forget(guard);\n+}\n+\n+// CHECK-LABEL: indirect_drop\n+// CHECK-NOT: should_not_appear_in_output\n+#[no_mangle]\n+pub fn indirect_drop(x: Box<dyn Any>) {\n+    let guard = AssertNeverDrop;\n+    drop(x);\n+    forget(guard);\n+}"}]}