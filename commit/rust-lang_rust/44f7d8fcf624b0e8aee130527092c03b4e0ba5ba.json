{"sha": "44f7d8fcf624b0e8aee130527092c03b4e0ba5ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZjdkOGZjZjYyNGIwZThhZWUxMzA1MjcwOTJjMDNiNGUwYmE1YmE=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-11-05T18:39:48Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-11-14T20:20:10Z"}, "message": "Use `TypeVisitor::BreakTy` in `HasEscapingVarsVisitor`", "tree": {"sha": "b8bfacb118731fcae8c897a66d4f5afdc5a15e56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8bfacb118731fcae8c897a66d4f5afdc5a15e56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44f7d8fcf624b0e8aee130527092c03b4e0ba5ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44f7d8fcf624b0e8aee130527092c03b4e0ba5ba", "html_url": "https://github.com/rust-lang/rust/commit/44f7d8fcf624b0e8aee130527092c03b4e0ba5ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44f7d8fcf624b0e8aee130527092c03b4e0ba5ba/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29b140a1c38aab78ecc1bbdd824e7117e3b81f56", "url": "https://api.github.com/repos/rust-lang/rust/commits/29b140a1c38aab78ecc1bbdd824e7117e3b81f56", "html_url": "https://github.com/rust-lang/rust/commit/29b140a1c38aab78ecc1bbdd824e7117e3b81f56"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "57aa15f69a9520f2b63626d1e3b0a987fa3dc2e1", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/44f7d8fcf624b0e8aee130527092c03b4e0ba5ba/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f7d8fcf624b0e8aee130527092c03b4e0ba5ba/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=44f7d8fcf624b0e8aee130527092c03b4e0ba5ba", "patch": "@@ -818,6 +818,9 @@ where\n     value.fold_with(&mut Shifter::new(tcx, amount))\n }\n \n+#[derive(Debug, PartialEq, Eq, Copy, Clone)]\n+struct FoundEscapingVars;\n+\n /// An \"escaping var\" is a bound var whose binder is not part of `t`. A bound var can be a\n /// bound region or a bound type.\n ///\n@@ -849,6 +852,8 @@ struct HasEscapingVarsVisitor {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n+    type BreakTy = FoundEscapingVars;\n+\n     fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<Self::BreakTy> {\n         self.outer_index.shift_in(1);\n         let result = t.super_visit_with(self);\n@@ -863,7 +868,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n         // `outer_exclusive_binder` is always 1 higher than the\n         // content in `t`). Therefore, `t` has some escaping vars.\n         if t.outer_exclusive_binder > self.outer_index {\n-            ControlFlow::BREAK\n+            ControlFlow::Break(FoundEscapingVars)\n         } else {\n             ControlFlow::CONTINUE\n         }\n@@ -874,7 +879,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n         // of outer index, then it escapes the binders we have\n         // visited.\n         if r.bound_at_or_above_binder(self.outer_index) {\n-            ControlFlow::BREAK\n+            ControlFlow::Break(FoundEscapingVars)\n         } else {\n             ControlFlow::CONTINUE\n         }\n@@ -887,14 +892,16 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n         // const, as it has types/regions embedded in a lot of other\n         // places.\n         match ct.val {\n-            ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => ControlFlow::BREAK,\n+            ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => {\n+                ControlFlow::Break(FoundEscapingVars)\n+            }\n             _ => ct.super_visit_with(self),\n         }\n     }\n \n     fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if predicate.inner.outer_exclusive_binder > self.outer_index {\n-            ControlFlow::BREAK\n+            ControlFlow::Break(FoundEscapingVars)\n         } else {\n             ControlFlow::CONTINUE\n         }"}]}