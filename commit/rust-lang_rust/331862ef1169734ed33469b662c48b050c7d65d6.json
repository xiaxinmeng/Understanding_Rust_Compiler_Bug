{"sha": "331862ef1169734ed33469b662c48b050c7d65d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMTg2MmVmMTE2OTczNGVkMzM0NjliNjYyYzQ4YjA1MGM3ZDY1ZDY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-11-13T09:09:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-13T09:09:42Z"}, "message": "Rollup merge of #45893 - redox-os:futex_timeout, r=alexcrichton\n\nRedox: Use futex timeout to implement CondVar::wait_timeout\n\n`CondVar::wait_timeout` is implemented by supplying a `TimeSpec` pointer to `futex`. In addition, all calls to `unimplemented!()` have been removed from the Redox `sys` module.\n\nRelated to https://github.com/rust-lang/rust/pull/45892", "tree": {"sha": "a9aeed5ea1b7196eabc1c155e16ccaf6cc6b2086", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9aeed5ea1b7196eabc1c155e16ccaf6cc6b2086"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/331862ef1169734ed33469b662c48b050c7d65d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/331862ef1169734ed33469b662c48b050c7d65d6", "html_url": "https://github.com/rust-lang/rust/commit/331862ef1169734ed33469b662c48b050c7d65d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/331862ef1169734ed33469b662c48b050c7d65d6/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "563af5d2607d8e7e4205de5a04c9c7e7c4582677", "url": "https://api.github.com/repos/rust-lang/rust/commits/563af5d2607d8e7e4205de5a04c9c7e7c4582677", "html_url": "https://github.com/rust-lang/rust/commit/563af5d2607d8e7e4205de5a04c9c7e7c4582677"}, {"sha": "2f68b870b5111e45af24e80a5014ad21c657a02c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f68b870b5111e45af24e80a5014ad21c657a02c", "html_url": "https://github.com/rust-lang/rust/commit/2f68b870b5111e45af24e80a5014ad21c657a02c"}], "stats": {"total": 60, "additions": 38, "deletions": 22}, "files": [{"sha": "2a611ed7dabbef50953c2a36975caf1a61410e81", "filename": "src/libstd/sys/redox/condvar.rs", "status": "modified", "additions": 37, "deletions": 20, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/331862ef1169734ed33469b662c48b050c7d65d6/src%2Flibstd%2Fsys%2Fredox%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331862ef1169734ed33469b662c48b050c7d65d6/src%2Flibstd%2Fsys%2Fredox%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fcondvar.rs?ref=331862ef1169734ed33469b662c48b050c7d65d6", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n use cell::UnsafeCell;\n-use intrinsics::{atomic_cxchg, atomic_xadd, atomic_xchg};\n+use intrinsics::{atomic_cxchg, atomic_load, atomic_xadd, atomic_xchg};\n use ptr;\n use time::Duration;\n \n use sys::mutex::{mutex_unlock, Mutex};\n-use sys::syscall::{futex, FUTEX_WAIT, FUTEX_WAKE, FUTEX_REQUEUE};\n+use sys::syscall::{futex, TimeSpec, FUTEX_WAIT, FUTEX_WAKE, FUTEX_REQUEUE};\n \n pub struct Condvar {\n     lock: UnsafeCell<*mut i32>,\n@@ -63,33 +63,50 @@ impl Condvar {\n     }\n \n     #[inline]\n-    pub fn wait(&self, mutex: &Mutex) {\n-        unsafe {\n-            let lock = self.lock.get();\n-            let seq = self.seq.get();\n-\n-            if *lock != mutex.lock.get() {\n-                if *lock != ptr::null_mut() {\n-                    panic!(\"Condvar used with more than one Mutex\");\n-                }\n+    unsafe fn wait_inner(&self, mutex: &Mutex, timeout_ptr: *const TimeSpec) -> bool {\n+        let lock = self.lock.get();\n+        let seq = self.seq.get();\n \n-                atomic_cxchg(lock as *mut usize, 0, mutex.lock.get() as usize);\n+        if *lock != mutex.lock.get() {\n+            if *lock != ptr::null_mut() {\n+                panic!(\"Condvar used with more than one Mutex\");\n             }\n \n-            mutex_unlock(*lock);\n+            atomic_cxchg(lock as *mut usize, 0, mutex.lock.get() as usize);\n+        }\n \n-            let _ = futex(seq, FUTEX_WAIT, *seq, 0, ptr::null_mut());\n+        mutex_unlock(*lock);\n \n-            while atomic_xchg(*lock, 2) != 0 {\n-                let _ = futex(*lock, FUTEX_WAIT, 2, 0, ptr::null_mut());\n-            }\n+        let seq_before = atomic_load(seq);\n+\n+        let _ = futex(seq, FUTEX_WAIT, seq_before, timeout_ptr as usize, ptr::null_mut());\n+\n+        let seq_after = atomic_load(seq);\n+\n+        while atomic_xchg(*lock, 2) != 0 {\n+            let _ = futex(*lock, FUTEX_WAIT, 2, 0, ptr::null_mut());\n+        }\n+\n+        seq_before != seq_after\n+    }\n+\n+    #[inline]\n+    pub fn wait(&self, mutex: &Mutex) {\n+        unsafe {\n+            assert!(self.wait_inner(mutex, ptr::null()));\n         }\n     }\n \n     #[inline]\n-    pub fn wait_timeout(&self, _mutex: &Mutex, _dur: Duration) -> bool {\n-        ::sys_common::util::dumb_print(format_args!(\"condvar wait_timeout\\n\"));\n-        unimplemented!();\n+    pub fn wait_timeout(&self, mutex: &Mutex, dur: Duration) -> bool {\n+        unsafe {\n+            let timeout = TimeSpec {\n+                tv_sec: dur.as_secs() as i64,\n+                tv_nsec: dur.subsec_nanos() as i32\n+            };\n+\n+            self.wait_inner(mutex, &timeout as *const TimeSpec)\n+        }\n     }\n \n     #[inline]"}, {"sha": "3483477d40cf62981ecc9d404048048415bea288", "filename": "src/libstd/sys/redox/fs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/331862ef1169734ed33469b662c48b050c7d65d6/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331862ef1169734ed33469b662c48b050c7d65d6/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs?ref=331862ef1169734ed33469b662c48b050c7d65d6", "patch": "@@ -437,8 +437,7 @@ pub fn symlink(src: &Path, dst: &Path) -> io::Result<()> {\n }\n \n pub fn link(_src: &Path, _dst: &Path) -> io::Result<()> {\n-    ::sys_common::util::dumb_print(format_args!(\"Link\\n\"));\n-    unimplemented!();\n+    Err(Error::from_raw_os_error(syscall::ENOSYS))\n }\n \n pub fn stat(p: &Path) -> io::Result<FileAttr> {"}]}