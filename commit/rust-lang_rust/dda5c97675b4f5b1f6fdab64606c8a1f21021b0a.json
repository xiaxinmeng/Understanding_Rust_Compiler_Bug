{"sha": "dda5c97675b4f5b1f6fdab64606c8a1f21021b0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkYTVjOTc2NzViNGY1YjFmNmZkYWI2NDYwNmM4YTFmMjEwMjFiMGE=", "commit": {"author": {"name": "Patrick Mooney", "email": "pmooney@oxide.computer", "date": "2020-04-15T00:44:06Z"}, "committer": {"name": "Patrick Mooney", "email": "pmooney@oxide.computer", "date": "2020-04-15T01:10:22Z"}, "message": "Use fcntl() to set nonblock for solarish sockets\n\nThe ioctl(FIONBIO) method of setting a file descriptor to be\nnon-blocking does not notify the underlying resource in the same way\nthat fcntl(F_SETFL, O_NONBLOCK) does on illumos and Solaris.", "tree": {"sha": "2396ef0dfdac984da711877f038106bd2f6603b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2396ef0dfdac984da711877f038106bd2f6603b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dda5c97675b4f5b1f6fdab64606c8a1f21021b0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dda5c97675b4f5b1f6fdab64606c8a1f21021b0a", "html_url": "https://github.com/rust-lang/rust/commit/dda5c97675b4f5b1f6fdab64606c8a1f21021b0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dda5c97675b4f5b1f6fdab64606c8a1f21021b0a/comments", "author": {"login": "pfmooney", "id": 1555070, "node_id": "MDQ6VXNlcjE1NTUwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1555070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pfmooney", "html_url": "https://github.com/pfmooney", "followers_url": "https://api.github.com/users/pfmooney/followers", "following_url": "https://api.github.com/users/pfmooney/following{/other_user}", "gists_url": "https://api.github.com/users/pfmooney/gists{/gist_id}", "starred_url": "https://api.github.com/users/pfmooney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pfmooney/subscriptions", "organizations_url": "https://api.github.com/users/pfmooney/orgs", "repos_url": "https://api.github.com/users/pfmooney/repos", "events_url": "https://api.github.com/users/pfmooney/events{/privacy}", "received_events_url": "https://api.github.com/users/pfmooney/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pfmooney", "id": 1555070, "node_id": "MDQ6VXNlcjE1NTUwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1555070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pfmooney", "html_url": "https://github.com/pfmooney", "followers_url": "https://api.github.com/users/pfmooney/followers", "following_url": "https://api.github.com/users/pfmooney/following{/other_user}", "gists_url": "https://api.github.com/users/pfmooney/gists{/gist_id}", "starred_url": "https://api.github.com/users/pfmooney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pfmooney/subscriptions", "organizations_url": "https://api.github.com/users/pfmooney/orgs", "repos_url": "https://api.github.com/users/pfmooney/repos", "events_url": "https://api.github.com/users/pfmooney/events{/privacy}", "received_events_url": "https://api.github.com/users/pfmooney/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b77aefb76ebb9e73cf5a26885c131674495f434d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b77aefb76ebb9e73cf5a26885c131674495f434d", "html_url": "https://github.com/rust-lang/rust/commit/b77aefb76ebb9e73cf5a26885c131674495f434d"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "d18c22b0573f375b9515eff8bbea4d3a77f70ee7", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dda5c97675b4f5b1f6fdab64606c8a1f21021b0a/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dda5c97675b4f5b1f6fdab64606c8a1f21021b0a/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=dda5c97675b4f5b1f6fdab64606c8a1f21021b0a", "patch": "@@ -322,11 +322,19 @@ impl Socket {\n         Ok(raw != 0)\n     }\n \n+    #[cfg(not(any(target_os = \"solaris\", target_os = \"illumos\")))]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         let mut nonblocking = nonblocking as libc::c_int;\n         cvt(unsafe { libc::ioctl(*self.as_inner(), libc::FIONBIO, &mut nonblocking) }).map(drop)\n     }\n \n+    #[cfg(any(target_os = \"solaris\", target_os = \"illumos\"))]\n+    pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n+        // FIONBIO is inadequate for sockets on illumos/Solaris, so use the\n+        // fcntl(F_[GS]ETFL)-based method provided by FileDesc instead.\n+        self.0.set_nonblocking(nonblocking)\n+    }\n+\n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n         let raw: c_int = getsockopt(self, libc::SOL_SOCKET, libc::SO_ERROR)?;\n         if raw == 0 { Ok(None) } else { Ok(Some(io::Error::from_raw_os_error(raw as i32))) }"}]}