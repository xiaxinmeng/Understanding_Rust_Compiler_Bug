{"sha": "f6aa161936887bf4a0aaebbd5cfc743132a1ab0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2YWExNjE5MzY4ODdiZjRhMGFhZWJiZDVjZmM3NDMxMzJhMWFiMGI=", "commit": {"author": {"name": "Nathan Corbyn", "email": "me@nathancorbyn.com", "date": "2020-05-14T10:37:58Z"}, "committer": {"name": "Nathan Corbyn", "email": "me@nathancorbyn.com", "date": "2020-05-14T14:29:05Z"}, "message": "Don't ICE on missing `Unsize` impl", "tree": {"sha": "e888108267483c16d5057cd6501e07f967427adb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e888108267483c16d5057cd6501e07f967427adb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6aa161936887bf4a0aaebbd5cfc743132a1ab0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6aa161936887bf4a0aaebbd5cfc743132a1ab0b", "html_url": "https://github.com/rust-lang/rust/commit/f6aa161936887bf4a0aaebbd5cfc743132a1ab0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6aa161936887bf4a0aaebbd5cfc743132a1ab0b/comments", "author": {"login": "doctorn", "id": 6421560, "node_id": "MDQ6VXNlcjY0MjE1NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6421560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doctorn", "html_url": "https://github.com/doctorn", "followers_url": "https://api.github.com/users/doctorn/followers", "following_url": "https://api.github.com/users/doctorn/following{/other_user}", "gists_url": "https://api.github.com/users/doctorn/gists{/gist_id}", "starred_url": "https://api.github.com/users/doctorn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doctorn/subscriptions", "organizations_url": "https://api.github.com/users/doctorn/orgs", "repos_url": "https://api.github.com/users/doctorn/repos", "events_url": "https://api.github.com/users/doctorn/events{/privacy}", "received_events_url": "https://api.github.com/users/doctorn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "doctorn", "id": 6421560, "node_id": "MDQ6VXNlcjY0MjE1NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6421560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doctorn", "html_url": "https://github.com/doctorn", "followers_url": "https://api.github.com/users/doctorn/followers", "following_url": "https://api.github.com/users/doctorn/following{/other_user}", "gists_url": "https://api.github.com/users/doctorn/gists{/gist_id}", "starred_url": "https://api.github.com/users/doctorn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doctorn/subscriptions", "organizations_url": "https://api.github.com/users/doctorn/orgs", "repos_url": "https://api.github.com/users/doctorn/repos", "events_url": "https://api.github.com/users/doctorn/events{/privacy}", "received_events_url": "https://api.github.com/users/doctorn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c34d8d6629506a596215886e5fc4bb2b04b00ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c34d8d6629506a596215886e5fc4bb2b04b00ae", "html_url": "https://github.com/rust-lang/rust/commit/7c34d8d6629506a596215886e5fc4bb2b04b00ae"}], "stats": {"total": 58, "additions": 52, "deletions": 6}, "files": [{"sha": "784fc36e67e655242aad0cedc8fd1c1b3530a414", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f6aa161936887bf4a0aaebbd5cfc743132a1ab0b/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6aa161936887bf4a0aaebbd5cfc743132a1ab0b/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=f6aa161936887bf4a0aaebbd5cfc743132a1ab0b", "patch": "@@ -283,6 +283,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             .unwrap_or(false);\n                         let is_from = format!(\"{}\", trait_ref.print_only_trait_path())\n                             .starts_with(\"std::convert::From<\");\n+                        let is_unsize =\n+                            { Some(trait_ref.def_id()) == self.tcx.lang_items().unsize_trait() };\n                         let (message, note) = if is_try && is_from {\n                             (\n                                 Some(format!(\n@@ -405,6 +407,17 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             return;\n                         }\n \n+                        if is_unsize {\n+                            // If the obligation failed due to a missing implementation of the\n+                            // `Unsize` trait, give a pointer to why that might be the case\n+                            err.note(\n+                                \"all implementations of `Unsize` are provided \\\n+                                automatically by the compiler, see \\\n+                                <https://doc.rust-lang.org/stable/std/marker/trait.Unsize.html> \\\n+                                for more information\",\n+                            );\n+                        }\n+\n                         // Try to report a help message\n                         if !trait_ref.has_infer_types_or_consts()\n                             && self.predicate_can_apply(obligation.param_env, trait_ref)\n@@ -427,12 +440,16 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                 let impl_candidates = self.find_similar_impl_candidates(trait_ref);\n                                 self.report_similar_impl_candidates(impl_candidates, &mut err);\n                             }\n-                            self.suggest_change_mut(\n-                                &obligation,\n-                                &mut err,\n-                                &trait_ref,\n-                                points_at_arg,\n-                            );\n+                            // Changing mutability doesn't make a difference to whether we have\n+                            // an `Unsize` impl (Fixes ICE in #71036)\n+                            if !is_unsize {\n+                                self.suggest_change_mut(\n+                                    &obligation,\n+                                    &mut err,\n+                                    &trait_ref,\n+                                    points_at_arg,\n+                                );\n+                            }\n                         }\n \n                         // If this error is due to `!: Trait` not implemented but `(): Trait` is"}, {"sha": "01d1cff42e4ba3ec87044ced7b80c5692990e66d", "filename": "src/test/ui/issues/issue-71036.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f6aa161936887bf4a0aaebbd5cfc743132a1ab0b/src%2Ftest%2Fui%2Fissues%2Fissue-71036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6aa161936887bf4a0aaebbd5cfc743132a1ab0b/src%2Ftest%2Fui%2Fissues%2Fissue-71036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-71036.rs?ref=f6aa161936887bf4a0aaebbd5cfc743132a1ab0b", "patch": "@@ -0,0 +1,17 @@\n+#![feature(unsize, dispatch_from_dyn)]\n+\n+use std::marker::Unsize;\n+use std::ops::DispatchFromDyn;\n+\n+#[allow(unused)]\n+struct Foo<'a, T: ?Sized> {\n+    _inner: &'a &'a T,\n+}\n+\n+impl<'a, T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Foo<'a, U>> for Foo<'a, T> {}\n+//~^ ERROR the trait bound `&'a T: std::marker::Unsize<&'a U>` is not satisfied\n+//~| NOTE the trait `std::marker::Unsize<&'a U>` is not implemented for `&'a T`\n+//~| NOTE all implementations of `Unsize` are provided automatically by the compiler\n+//~| NOTE required because of the requirements on the impl\n+\n+fn main() {}"}, {"sha": "57cf24689454ec50e18dc119764553110b8e93b4", "filename": "src/test/ui/issues/issue-71036.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f6aa161936887bf4a0aaebbd5cfc743132a1ab0b/src%2Ftest%2Fui%2Fissues%2Fissue-71036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6aa161936887bf4a0aaebbd5cfc743132a1ab0b/src%2Ftest%2Fui%2Fissues%2Fissue-71036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-71036.stderr?ref=f6aa161936887bf4a0aaebbd5cfc743132a1ab0b", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: the trait bound `&'a T: std::marker::Unsize<&'a U>` is not satisfied\n+  --> $DIR/issue-71036.rs:11:1\n+   |\n+LL | impl<'a, T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Foo<'a, U>> for Foo<'a, T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Unsize<&'a U>` is not implemented for `&'a T`\n+   |\n+   = note: all implementations of `Unsize` are provided automatically by the compiler, see <https://doc.rust-lang.org/stable/std/marker/trait.Unsize.html> for more information\n+   = note: required because of the requirements on the impl of `std::ops::DispatchFromDyn<&'a &'a U>` for `&'a &'a T`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}