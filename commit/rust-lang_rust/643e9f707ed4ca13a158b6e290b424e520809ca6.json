{"sha": "643e9f707ed4ca13a158b6e290b424e520809ca6", "node_id": "C_kwDOAAsO6NoAKDY0M2U5ZjcwN2VkNGNhMTNhMTU4YjZlMjkwYjQyNGU1MjA4MDljYTY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-21T03:49:40Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-21T03:49:40Z"}, "message": "Introduced `Cursor::next_with_spacing_ref`.\n\nThis lets us clone just the parts within a `TokenTree` that need\ncloning, rather than the entire thing. This is a surprisingly large\nperformance win, up to 4% on `async-std-1.10.0`.", "tree": {"sha": "7c737c276331b5891fabcd32be126ff1be6e7dff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c737c276331b5891fabcd32be126ff1be6e7dff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/643e9f707ed4ca13a158b6e290b424e520809ca6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/643e9f707ed4ca13a158b6e290b424e520809ca6", "html_url": "https://github.com/rust-lang/rust/commit/643e9f707ed4ca13a158b6e290b424e520809ca6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/643e9f707ed4ca13a158b6e290b424e520809ca6/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc4e3443ecf96f395e598b14af208d36a11ffb9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc4e3443ecf96f395e598b14af208d36a11ffb9f", "html_url": "https://github.com/rust-lang/rust/commit/cc4e3443ecf96f395e598b14af208d36a11ffb9f"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "d609fa6720502c5ca1b679ad2cd0b0c99c813be7", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/643e9f707ed4ca13a158b6e290b424e520809ca6/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643e9f707ed4ca13a158b6e290b424e520809ca6/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=643e9f707ed4ca13a158b6e290b424e520809ca6", "patch": "@@ -583,6 +583,14 @@ impl Cursor {\n         })\n     }\n \n+    #[inline]\n+    pub fn next_with_spacing_ref(&mut self) -> Option<&TreeAndSpacing> {\n+        self.stream.0.get(self.index).map(|tree| {\n+            self.index += 1;\n+            tree\n+        })\n+    }\n+\n     pub fn index(&self) -> usize {\n         self.index\n     }"}, {"sha": "1686c5873e1833f4b5627fd627300aad055e950d", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/643e9f707ed4ca13a158b6e290b424e520809ca6/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643e9f707ed4ca13a158b6e290b424e520809ca6/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=643e9f707ed4ca13a158b6e290b424e520809ca6", "patch": "@@ -267,17 +267,17 @@ impl TokenCursor {\n             // FIXME: we currently don't return `NoDelim` open/close delims. To fix #67062 we will\n             // need to, whereupon the `delim != DelimToken::NoDelim` conditions below can be\n             // removed, as well as the loop.\n-            if let Some((tree, spacing)) = self.frame.tree_cursor.next_with_spacing() {\n+            if let Some((tree, spacing)) = self.frame.tree_cursor.next_with_spacing_ref() {\n                 match tree {\n-                    TokenTree::Token(token) => match (desugar_doc_comments, &token) {\n+                    &TokenTree::Token(ref token) => match (desugar_doc_comments, token) {\n                         (true, &Token { kind: token::DocComment(_, attr_style, data), span }) => {\n                             return self.desugar(attr_style, data, span);\n                         }\n-                        _ => return (token, spacing),\n+                        _ => return (token.clone(), *spacing),\n                     },\n-                    TokenTree::Delimited(sp, delim, tts) => {\n+                    &TokenTree::Delimited(sp, delim, ref tts) => {\n                         // Set `open_delim` to true here because we deal with it immediately.\n-                        let frame = TokenCursorFrame::new(sp, delim, tts);\n+                        let frame = TokenCursorFrame::new(sp, delim, tts.clone());\n                         self.stack.push(mem::replace(&mut self.frame, frame));\n                         if delim != DelimToken::NoDelim {\n                             return (Token::new(token::OpenDelim(delim), sp.open), Spacing::Alone);"}]}