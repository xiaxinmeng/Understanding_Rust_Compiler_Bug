{"sha": "a12706ca7127bbb1ba4930c773595c81e21f87ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMjcwNmNhNzEyN2JiYjFiYTQ5MzBjNzczNTk1YzgxZTIxZjg3YmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-21T02:48:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-21T02:48:17Z"}, "message": "Auto merge of #46083 - petrochenkov:morepriv, r=nikomatsakis\n\nType privacy polishing\n\nVarious preparations before implementing https://github.com/rust-lang/rfcs/pull/2145 containing final minor breaking changes (mostly for unstable code or code using `allow(private_in_public)`).\n(Continuation of https://github.com/rust-lang/rust/pull/42125, https://github.com/rust-lang/rust/pull/44633 and https://github.com/rust-lang/rust/pull/41332.)\n\nIt would be good to run crater on this.\nr? @eddyb", "tree": {"sha": "acd5036b9c25dabad7ce60a00155a255276d0426", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acd5036b9c25dabad7ce60a00155a255276d0426"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a12706ca7127bbb1ba4930c773595c81e21f87ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a12706ca7127bbb1ba4930c773595c81e21f87ba", "html_url": "https://github.com/rust-lang/rust/commit/a12706ca7127bbb1ba4930c773595c81e21f87ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a12706ca7127bbb1ba4930c773595c81e21f87ba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdfb0071091d7257b20ee2a75041d868c23f1114", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdfb0071091d7257b20ee2a75041d868c23f1114", "html_url": "https://github.com/rust-lang/rust/commit/fdfb0071091d7257b20ee2a75041d868c23f1114"}, {"sha": "c6209a36bbef743a25f3823e1ab387080a4f307c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6209a36bbef743a25f3823e1ab387080a4f307c", "html_url": "https://github.com/rust-lang/rust/commit/c6209a36bbef743a25f3823e1ab387080a4f307c"}], "stats": {"total": 792, "additions": 656, "deletions": 136}, "files": [{"sha": "3a6fabc33ab5d7030fa3a56cbb71eb3dfef27b2b", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=a12706ca7127bbb1ba4930c773595c81e21f87ba", "patch": "@@ -258,8 +258,13 @@ impl Path {\n \n impl fmt::Debug for Path {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"path({})\",\n-               print::to_string(print::NO_ANN, |s| s.print_path(self, false)))\n+        write!(f, \"path({})\", print::to_string(print::NO_ANN, |s| s.print_path(self, false)))\n+    }\n+}\n+\n+impl fmt::Display for Path {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"{}\", print::to_string(print::NO_ANN, |s| s.print_path(self, false)))\n     }\n }\n "}, {"sha": "5b277402f1e03b1e394e10fe55824e351c5e3c8b", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 78, "deletions": 37, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=a12706ca7127bbb1ba4930c773595c81e21f87ba", "patch": "@@ -614,6 +614,7 @@ struct TypePrivacyVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n     current_item: DefId,\n+    in_body: bool,\n     span: Span,\n     empty_tables: &'a ty::TypeckTables<'tcx>,\n }\n@@ -671,10 +672,8 @@ impl<'a, 'tcx> TypePrivacyVisitor<'a, 'tcx> {\n     // Take node ID of an expression or pattern and check its type for privacy.\n     fn check_expr_pat_type(&mut self, id: hir::HirId, span: Span) -> bool {\n         self.span = span;\n-        if let Some(ty) = self.tables.node_id_to_type_opt(id) {\n-            if ty.visit_with(self) {\n-                return true;\n-            }\n+        if self.tables.node_id_to_type(id).visit_with(self) {\n+            return true;\n         }\n         if self.tables.node_substs(id).visit_with(self) {\n             return true;\n@@ -688,6 +687,16 @@ impl<'a, 'tcx> TypePrivacyVisitor<'a, 'tcx> {\n         }\n         false\n     }\n+\n+    fn check_trait_ref(&mut self, trait_ref: ty::TraitRef<'tcx>) -> bool {\n+        if !self.item_is_accessible(trait_ref.def_id) {\n+            let msg = format!(\"trait `{}` is private\", trait_ref);\n+            self.tcx.sess.span_err(self.span, &msg);\n+            return true;\n+        }\n+\n+        trait_ref.super_visit_with(self)\n+    }\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n@@ -699,16 +708,18 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n \n     fn visit_nested_body(&mut self, body: hir::BodyId) {\n         let orig_tables = replace(&mut self.tables, self.tcx.body_tables(body));\n+        let orig_in_body = replace(&mut self.in_body, true);\n         let body = self.tcx.hir.body(body);\n         self.visit_body(body);\n         self.tables = orig_tables;\n+        self.in_body = orig_in_body;\n     }\n \n     fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty) {\n         self.span = hir_ty.span;\n-        if let Some(ty) = self.tables.node_id_to_type_opt(hir_ty.hir_id) {\n+        if self.in_body {\n             // Types in bodies.\n-            if ty.visit_with(self) {\n+            if self.tables.node_id_to_type(hir_ty.hir_id).visit_with(self) {\n                 return;\n             }\n         } else {\n@@ -724,10 +735,21 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n     }\n \n     fn visit_trait_ref(&mut self, trait_ref: &'tcx hir::TraitRef) {\n-        if !self.item_is_accessible(trait_ref.path.def.def_id()) {\n-            let msg = format!(\"trait `{:?}` is private\", trait_ref.path);\n-            self.tcx.sess.span_err(self.span, &msg);\n-            return;\n+        self.span = trait_ref.path.span;\n+        if !self.in_body {\n+            // Avoid calling `hir_trait_to_predicates` in bodies, it will ICE.\n+            // The traits' privacy in bodies is already checked as a part of trait object types.\n+            let (principal, projections) =\n+                rustc_typeck::hir_trait_to_predicates(self.tcx, trait_ref);\n+            if self.check_trait_ref(*principal.skip_binder()) {\n+                return;\n+            }\n+            for poly_predicate in projections {\n+                let tcx = self.tcx;\n+                if self.check_trait_ref(poly_predicate.skip_binder().projection_ty.trait_ref(tcx)) {\n+                    return;\n+                }\n+            }\n         }\n \n         intravisit::walk_trait_ref(self, trait_ref);\n@@ -760,19 +782,35 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n         intravisit::walk_expr(self, expr);\n     }\n \n+    // Prohibit access to associated items with insufficient nominal visibility.\n+    //\n+    // Additionally, until better reachability analysis for macros 2.0 is available,\n+    // we prohibit access to private statics from other crates, this allows to give\n+    // more code internal visibility at link time. (Access to private functions\n+    // is already prohibited by type privacy for funciton types.)\n     fn visit_qpath(&mut self, qpath: &'tcx hir::QPath, id: ast::NodeId, span: Span) {\n-        // Inherent associated constants don't have self type in substs,\n-        // we have to check it additionally.\n-        if let hir::QPath::TypeRelative(..) = *qpath {\n-            let hir_id = self.tcx.hir.node_to_hir_id(id);\n-            if let Some(def) = self.tables.type_dependent_defs().get(hir_id).cloned() {\n-                if let Some(assoc_item) = self.tcx.opt_associated_item(def.def_id()) {\n-                    if let ty::ImplContainer(impl_def_id) = assoc_item.container {\n-                        if self.tcx.type_of(impl_def_id).visit_with(self) {\n-                            return;\n-                        }\n-                    }\n-                }\n+        let def = match *qpath {\n+            hir::QPath::Resolved(_, ref path) => match path.def {\n+                Def::Method(..) | Def::AssociatedConst(..) |\n+                Def::AssociatedTy(..) | Def::Static(..) => Some(path.def),\n+                _ => None,\n+            }\n+            hir::QPath::TypeRelative(..) => {\n+                let hir_id = self.tcx.hir.node_to_hir_id(id);\n+                self.tables.type_dependent_defs().get(hir_id).cloned()\n+            }\n+        };\n+        if let Some(def) = def {\n+            let def_id = def.def_id();\n+            let is_local_static = if let Def::Static(..) = def { def_id.is_local() } else { false };\n+            if !self.item_is_accessible(def_id) && !is_local_static {\n+                let name = match *qpath {\n+                    hir::QPath::Resolved(_, ref path) => format!(\"{}\", path),\n+                    hir::QPath::TypeRelative(_, ref segment) => segment.name.to_string(),\n+                };\n+                let msg = format!(\"{} `{}` is private\", def.kind_name(), name);\n+                self.tcx.sess.span_err(span, &msg);\n+                return;\n             }\n         }\n \n@@ -807,9 +845,11 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n                                         item.id,\n                                         &mut self.tables,\n                                         self.empty_tables);\n+        let orig_in_body = replace(&mut self.in_body, false);\n         self.current_item = self.tcx.hir.local_def_id(item.id);\n         intravisit::walk_item(self, item);\n         self.tables = orig_tables;\n+        self.in_body = orig_in_body;\n         self.current_item = orig_current_item;\n     }\n \n@@ -869,13 +909,8 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n                 }\n             }\n             ty::TyProjection(ref proj) => {\n-                let trait_ref = proj.trait_ref(self.tcx);\n-                if !self.item_is_accessible(trait_ref.def_id) {\n-                    let msg = format!(\"trait `{}` is private\", trait_ref);\n-                    self.tcx.sess.span_err(self.span, &msg);\n-                    return true;\n-                }\n-                if trait_ref.super_visit_with(self) {\n+                let tcx = self.tcx;\n+                if self.check_trait_ref(proj.trait_ref(tcx)) {\n                     return true;\n                 }\n             }\n@@ -1278,6 +1313,7 @@ struct SearchInterfaceForPrivateItemsVisitor<'a, 'tcx: 'a> {\n     min_visibility: ty::Visibility,\n     has_pub_restricted: bool,\n     has_old_errors: bool,\n+    in_assoc_ty: bool,\n }\n \n impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n@@ -1338,11 +1374,11 @@ impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n                 self.min_visibility = vis;\n             }\n             if !vis.is_at_least(self.required_visibility, self.tcx) {\n-                if self.has_pub_restricted || self.has_old_errors {\n+                if self.has_pub_restricted || self.has_old_errors || self.in_assoc_ty {\n                     struct_span_err!(self.tcx.sess, self.span, E0445,\n                                      \"private trait `{}` in public interface\", trait_ref)\n                         .span_label(self.span, format!(\n-                                    \"private trait can't be public\"))\n+                                    \"can't leak private trait\"))\n                         .emit();\n                 } else {\n                     self.tcx.lint_node(lint::builtin::PRIVATE_IN_PUBLIC,\n@@ -1393,7 +1429,7 @@ impl<'a, 'tcx: 'a> TypeVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'\n                     self.min_visibility = vis;\n                 }\n                 if !vis.is_at_least(self.required_visibility, self.tcx) {\n-                    if self.has_pub_restricted || self.has_old_errors {\n+                    if self.has_pub_restricted || self.has_old_errors || self.in_assoc_ty {\n                         let mut err = struct_span_err!(self.tcx.sess, self.span, E0446,\n                             \"private type `{}` in public interface\", ty);\n                         err.span_label(self.span, \"can't leak private type\");\n@@ -1454,6 +1490,7 @@ impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n             required_visibility,\n             has_pub_restricted: self.has_pub_restricted,\n             has_old_errors,\n+            in_assoc_ty: false,\n         }\n     }\n }\n@@ -1494,6 +1531,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n \n                 for trait_item_ref in trait_item_refs {\n                     let mut check = self.check(trait_item_ref.id.node_id, item_visibility);\n+                    check.in_assoc_ty = trait_item_ref.kind == hir::AssociatedItemKind::Type;\n                     check.generics().predicates();\n \n                     if trait_item_ref.kind == hir::AssociatedItemKind::Type &&\n@@ -1544,10 +1582,10 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n \n                 for impl_item_ref in impl_item_refs {\n                     let impl_item = self.tcx.hir.impl_item(impl_item_ref.id);\n-                    let impl_item_vis =\n-                        ty::Visibility::from_hir(&impl_item.vis, item.id, tcx);\n-                    self.check(impl_item.id, min(impl_item_vis, ty_vis))\n-                        .generics().predicates().ty();\n+                    let impl_item_vis = ty::Visibility::from_hir(&impl_item.vis, item.id, tcx);\n+                    let mut check = self.check(impl_item.id, min(impl_item_vis, ty_vis));\n+                    check.in_assoc_ty = impl_item_ref.kind == hir::AssociatedItemKind::Type;\n+                    check.generics().predicates().ty();\n \n                     // Recurse for e.g. `impl Trait` (see `visit_ty`).\n                     self.inner_visibility = impl_item_vis;\n@@ -1562,7 +1600,9 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n                 self.check(item.id, vis).generics().predicates();\n                 for impl_item_ref in impl_item_refs {\n                     let impl_item = self.tcx.hir.impl_item(impl_item_ref.id);\n-                    self.check(impl_item.id, vis).generics().predicates().ty();\n+                    let mut check = self.check(impl_item.id, vis);\n+                    check.in_assoc_ty = impl_item_ref.kind == hir::AssociatedItemKind::Type;\n+                    check.generics().predicates().ty();\n \n                     // Recurse for e.g. `impl Trait` (see `visit_ty`).\n                     self.inner_visibility = vis;\n@@ -1629,6 +1669,7 @@ fn privacy_access_levels<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         tcx,\n         tables: &empty_tables,\n         current_item: DefId::local(CRATE_DEF_INDEX),\n+        in_body: false,\n         span: krate.span,\n         empty_tables: &empty_tables,\n     };"}, {"sha": "cc79ae54c6bc8f0fbaf88c506565c53051d71f18", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 89, "deletions": 73, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=a12706ca7127bbb1ba4930c773595c81e21f87ba", "patch": "@@ -347,13 +347,13 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         }\n     }\n \n-    pub fn instantiate_poly_trait_ref(&self,\n-        ast_trait_ref: &hir::PolyTraitRef,\n+    pub(super) fn instantiate_poly_trait_ref_inner(&self,\n+        trait_ref: &hir::TraitRef,\n         self_ty: Ty<'tcx>,\n-        poly_projections: &mut Vec<ty::PolyProjectionPredicate<'tcx>>)\n+        poly_projections: &mut Vec<ty::PolyProjectionPredicate<'tcx>>,\n+        speculative: bool)\n         -> ty::PolyTraitRef<'tcx>\n     {\n-        let trait_ref = &ast_trait_ref.trait_ref;\n         let trait_def_id = self.trait_def_id(trait_ref);\n \n         debug!(\"ast_path_to_poly_trait_ref({:?}, def_id={:?})\", trait_ref, trait_def_id);\n@@ -370,7 +370,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         poly_projections.extend(assoc_bindings.iter().filter_map(|binding| {\n             // specify type to assert that error was already reported in Err case:\n             let predicate: Result<_, ErrorReported> =\n-                self.ast_type_binding_to_poly_projection_predicate(poly_trait_ref, binding);\n+                self.ast_type_binding_to_poly_projection_predicate(trait_ref.ref_id, poly_trait_ref,\n+                                                                   binding, speculative);\n             predicate.ok() // ok to ignore Err() because ErrorReported (see above)\n         }));\n \n@@ -379,6 +380,16 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         poly_trait_ref\n     }\n \n+    pub fn instantiate_poly_trait_ref(&self,\n+        poly_trait_ref: &hir::PolyTraitRef,\n+        self_ty: Ty<'tcx>,\n+        poly_projections: &mut Vec<ty::PolyProjectionPredicate<'tcx>>)\n+        -> ty::PolyTraitRef<'tcx>\n+    {\n+        self.instantiate_poly_trait_ref_inner(&poly_trait_ref.trait_ref, self_ty,\n+                                              poly_projections, false)\n+    }\n+\n     fn ast_path_to_mono_trait_ref(&self,\n                                   span: Span,\n                                   trait_def_id: DefId,\n@@ -442,82 +453,87 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n     fn ast_type_binding_to_poly_projection_predicate(\n         &self,\n+        ref_id: ast::NodeId,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n-        binding: &ConvertedBinding<'tcx>)\n+        binding: &ConvertedBinding<'tcx>,\n+        speculative: bool)\n         -> Result<ty::PolyProjectionPredicate<'tcx>, ErrorReported>\n     {\n         let tcx = self.tcx();\n \n-        // Given something like `U : SomeTrait<T=X>`, we want to produce a\n-        // predicate like `<U as SomeTrait>::T = X`. This is somewhat\n-        // subtle in the event that `T` is defined in a supertrait of\n-        // `SomeTrait`, because in that case we need to upcast.\n-        //\n-        // That is, consider this case:\n-        //\n-        // ```\n-        // trait SubTrait : SuperTrait<int> { }\n-        // trait SuperTrait<A> { type T; }\n-        //\n-        // ... B : SubTrait<T=foo> ...\n-        // ```\n-        //\n-        // We want to produce `<B as SuperTrait<int>>::T == foo`.\n-\n-        // Find any late-bound regions declared in `ty` that are not\n-        // declared in the trait-ref. These are not wellformed.\n-        //\n-        // Example:\n-        //\n-        //     for<'a> <T as Iterator>::Item = &'a str // <-- 'a is bad\n-        //     for<'a> <T as FnMut<(&'a u32,)>>::Output = &'a str // <-- 'a is ok\n-        let late_bound_in_trait_ref = tcx.collect_constrained_late_bound_regions(&trait_ref);\n-        let late_bound_in_ty = tcx.collect_referenced_late_bound_regions(&ty::Binder(binding.ty));\n-        debug!(\"late_bound_in_trait_ref = {:?}\", late_bound_in_trait_ref);\n-        debug!(\"late_bound_in_ty = {:?}\", late_bound_in_ty);\n-        for br in late_bound_in_ty.difference(&late_bound_in_trait_ref) {\n-            let br_name = match *br {\n-                ty::BrNamed(_, name) => name,\n-                _ => {\n-                    span_bug!(\n-                        binding.span,\n-                        \"anonymous bound region {:?} in binding but not trait ref\",\n-                        br);\n-                }\n-            };\n-            struct_span_err!(tcx.sess,\n-                             binding.span,\n-                             E0582,\n-                             \"binding for associated type `{}` references lifetime `{}`, \\\n-                              which does not appear in the trait input types\",\n-                             binding.item_name, br_name)\n-                .emit();\n+        if !speculative {\n+            // Given something like `U : SomeTrait<T=X>`, we want to produce a\n+            // predicate like `<U as SomeTrait>::T = X`. This is somewhat\n+            // subtle in the event that `T` is defined in a supertrait of\n+            // `SomeTrait`, because in that case we need to upcast.\n+            //\n+            // That is, consider this case:\n+            //\n+            // ```\n+            // trait SubTrait : SuperTrait<int> { }\n+            // trait SuperTrait<A> { type T; }\n+            //\n+            // ... B : SubTrait<T=foo> ...\n+            // ```\n+            //\n+            // We want to produce `<B as SuperTrait<int>>::T == foo`.\n+\n+            // Find any late-bound regions declared in `ty` that are not\n+            // declared in the trait-ref. These are not wellformed.\n+            //\n+            // Example:\n+            //\n+            //     for<'a> <T as Iterator>::Item = &'a str // <-- 'a is bad\n+            //     for<'a> <T as FnMut<(&'a u32,)>>::Output = &'a str // <-- 'a is ok\n+            let late_bound_in_trait_ref = tcx.collect_constrained_late_bound_regions(&trait_ref);\n+            let late_bound_in_ty =\n+                tcx.collect_referenced_late_bound_regions(&ty::Binder(binding.ty));\n+            debug!(\"late_bound_in_trait_ref = {:?}\", late_bound_in_trait_ref);\n+            debug!(\"late_bound_in_ty = {:?}\", late_bound_in_ty);\n+            for br in late_bound_in_ty.difference(&late_bound_in_trait_ref) {\n+                let br_name = match *br {\n+                    ty::BrNamed(_, name) => name,\n+                    _ => {\n+                        span_bug!(\n+                            binding.span,\n+                            \"anonymous bound region {:?} in binding but not trait ref\",\n+                            br);\n+                    }\n+                };\n+                struct_span_err!(tcx.sess,\n+                                binding.span,\n+                                E0582,\n+                                \"binding for associated type `{}` references lifetime `{}`, \\\n+                                which does not appear in the trait input types\",\n+                                binding.item_name, br_name)\n+                    .emit();\n+            }\n         }\n \n-        // Simple case: X is defined in the current trait.\n-        if self.trait_defines_associated_type_named(trait_ref.def_id(), binding.item_name) {\n-            return Ok(trait_ref.map_bound(|trait_ref| {\n-                ty::ProjectionPredicate {\n-                    projection_ty: ty::ProjectionTy::from_ref_and_name(\n-                        tcx,\n-                        trait_ref,\n-                        binding.item_name,\n-                    ),\n-                    ty: binding.ty,\n-                }\n-            }));\n+        let candidate = if self.trait_defines_associated_type_named(trait_ref.def_id(),\n+                                                                    binding.item_name) {\n+            // Simple case: X is defined in the current trait.\n+            Ok(trait_ref)\n+        } else {\n+            // Otherwise, we have to walk through the supertraits to find\n+            // those that do.\n+            let candidates = traits::supertraits(tcx, trait_ref).filter(|r| {\n+                self.trait_defines_associated_type_named(r.def_id(), binding.item_name)\n+            });\n+            self.one_bound_for_assoc_type(candidates, &trait_ref.to_string(),\n+                                          binding.item_name, binding.span)\n+        }?;\n+\n+        let (assoc_ident, def_scope) = tcx.adjust(binding.item_name, candidate.def_id(), ref_id);\n+        let assoc_ty = tcx.associated_items(candidate.def_id()).find(|i| {\n+            i.kind == ty::AssociatedKind::Type && i.name.to_ident() == assoc_ident\n+        }).expect(\"missing associated type\");\n+\n+        if !assoc_ty.vis.is_accessible_from(def_scope, tcx) {\n+            let msg = format!(\"associated type `{}` is private\", binding.item_name);\n+            tcx.sess.span_err(binding.span, &msg);\n         }\n-\n-        // Otherwise, we have to walk through the supertraits to find\n-        // those that do.\n-        let candidates =\n-            traits::supertraits(tcx, trait_ref.clone())\n-            .filter(|r| self.trait_defines_associated_type_named(r.def_id(), binding.item_name));\n-\n-        let candidate = self.one_bound_for_assoc_type(candidates,\n-                                                      &trait_ref.to_string(),\n-                                                      binding.item_name,\n-                                                      binding.span)?;\n+        tcx.check_stability(assoc_ty.def_id, ref_id, binding.span);\n \n         Ok(candidate.map_bound(|trait_ref| {\n             ty::ProjectionPredicate {"}, {"sha": "05f366dfd18f4963596ba79cac6fa805d45dd89c", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=a12706ca7127bbb1ba4930c773595c81e21f87ba", "patch": "@@ -349,7 +349,22 @@ pub fn hir_ty_to_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, hir_ty: &hir::Ty) ->\n     let env_node_id = tcx.hir.get_parent(hir_ty.id);\n     let env_def_id = tcx.hir.local_def_id(env_node_id);\n     let item_cx = self::collect::ItemCtxt::new(tcx, env_def_id);\n-    item_cx.to_ty(hir_ty)\n+    astconv::AstConv::ast_ty_to_ty(&item_cx, hir_ty)\n+}\n+\n+pub fn hir_trait_to_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, hir_trait: &hir::TraitRef)\n+        -> (ty::PolyTraitRef<'tcx>, Vec<ty::PolyProjectionPredicate<'tcx>>) {\n+    // In case there are any projections etc, find the \"environment\"\n+    // def-id that will be used to determine the traits/predicates in\n+    // scope.  This is derived from the enclosing item-like thing.\n+    let env_node_id = tcx.hir.get_parent(hir_trait.ref_id);\n+    let env_def_id = tcx.hir.local_def_id(env_node_id);\n+    let item_cx = self::collect::ItemCtxt::new(tcx, env_def_id);\n+    let mut projections = Vec::new();\n+    let principal = astconv::AstConv::instantiate_poly_trait_ref_inner(\n+        &item_cx, hir_trait, tcx.types.err, &mut projections, true\n+    );\n+    (principal, projections)\n }\n \n __build_diagnostic_array! { librustc_typeck, DIAGNOSTICS }"}, {"sha": "bca1b52d17a921c4e8fd0cccca6d82f840d3fa2d", "filename": "src/test/compile-fail/E0445.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Ftest%2Fcompile-fail%2FE0445.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Ftest%2Fcompile-fail%2FE0445.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0445.rs?ref=a12706ca7127bbb1ba4930c773595c81e21f87ba", "patch": "@@ -14,9 +14,12 @@ trait Foo {\n \n pub trait Bar : Foo {}\n //~^ ERROR private trait `Foo` in public interface [E0445]\n+//~| NOTE can't leak private trait\n pub struct Bar2<T: Foo>(pub T);\n //~^ ERROR private trait `Foo` in public interface [E0445]\n+//~| NOTE can't leak private trait\n pub fn foo<T: Foo> (t: T) {}\n //~^ ERROR private trait `Foo` in public interface [E0445]\n+//~| NOTE can't leak private trait\n \n fn main() {}"}, {"sha": "fc43765f63ce826ef34a0aebe8de703694253ca3", "filename": "src/test/compile-fail/auxiliary/private-inferred-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fprivate-inferred-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fprivate-inferred-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fprivate-inferred-type.rs?ref=a12706ca7127bbb1ba4930c773595c81e21f87ba", "patch": "@@ -11,6 +11,7 @@\n #![feature(decl_macro)]\n \n fn priv_fn() {}\n+static PRIV_STATIC: u8 = 0;\n enum PrivEnum { Variant }\n pub enum PubEnum { Variant }\n trait PrivTrait { fn method() {} }\n@@ -34,6 +35,7 @@ impl Pub<u8> {\n \n pub macro m() {\n     priv_fn;\n+    PRIV_STATIC;\n     PrivEnum::Variant;\n     PubEnum::Variant;\n     <u8 as PrivTrait>::method;"}, {"sha": "04ae8f6d255d0ffd6542c8061a1cd7ae80f29d29", "filename": "src/test/compile-fail/issue-30079.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Ftest%2Fcompile-fail%2Fissue-30079.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Ftest%2Fcompile-fail%2Fissue-30079.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-30079.rs?ref=a12706ca7127bbb1ba4930c773595c81e21f87ba", "patch": "@@ -8,15 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(private_in_public)]\n-#![allow(unused)]\n-\n struct SemiPriv;\n \n mod m1 {\n     struct Priv;\n     impl ::SemiPriv {\n-        pub fn f(_: Priv) {} //~ ERROR private type `m1::Priv` in public interface\n+        pub fn f(_: Priv) {} //~ WARN private type `m1::Priv` in public interface\n         //~^ WARNING hard error\n     }\n \n@@ -29,7 +26,6 @@ mod m2 {\n     struct Priv;\n     impl ::std::ops::Deref for ::SemiPriv {\n         type Target = Priv; //~ ERROR private type `m2::Priv` in public interface\n-        //~^ WARNING hard error\n         fn deref(&self) -> &Self::Target { unimplemented!() }\n     }\n \n@@ -47,7 +43,6 @@ mod m3 {\n     struct Priv;\n     impl ::SemiPrivTrait for () {\n         type Assoc = Priv; //~ ERROR private type `m3::Priv` in public interface\n-        //~^ WARNING hard error\n     }\n }\n "}, {"sha": "f2defc1d421b09f8e587411f8b03d0d8ceb0dd64", "filename": "src/test/compile-fail/lint-stability-deprecated.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Ftest%2Fcompile-fail%2Flint-stability-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Ftest%2Fcompile-fail%2Flint-stability-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability-deprecated.rs?ref=a12706ca7127bbb1ba4930c773595c81e21f87ba", "patch": "@@ -108,6 +108,11 @@ mod cross_crate {\n         struct S1<T: TraitWithAssociatedTypes>(T::TypeUnstable);\n         struct S2<T: TraitWithAssociatedTypes>(T::TypeDeprecated);\n         //~^ WARN use of deprecated item 'lint_stability::TraitWithAssociatedTypes::TypeDeprecated': text\n+        type A = TraitWithAssociatedTypes<\n+            TypeUnstable = u8,\n+            TypeDeprecated = u16,\n+            //~^ WARN use of deprecated item 'lint_stability::TraitWithAssociatedTypes::TypeDeprecated'\n+        >;\n \n         let _ = DeprecatedStruct { //~ WARN use of deprecated item 'lint_stability::DeprecatedStruct'\n             i: 0 //~ WARN use of deprecated item 'lint_stability::DeprecatedStruct::i'"}, {"sha": "49a52204295e505aa3e6b8762c6c7a8ce02974fe", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=a12706ca7127bbb1ba4930c773595c81e21f87ba", "patch": "@@ -96,6 +96,10 @@ mod cross_crate {\n         struct S1<T: TraitWithAssociatedTypes>(T::TypeUnstable);\n         //~^ ERROR use of unstable library feature\n         struct S2<T: TraitWithAssociatedTypes>(T::TypeDeprecated);\n+        type A = TraitWithAssociatedTypes<\n+            TypeUnstable = u8, //~ ERROR use of unstable library feature\n+            TypeDeprecated = u16,\n+        >;\n \n         let _ = DeprecatedStruct {\n             i: 0"}, {"sha": "63cb6e82c259e0a88488b432b4d425db229bf041", "filename": "src/test/compile-fail/privacy/associated-item-privacy-inherent.rs", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-inherent.rs?ref=a12706ca7127bbb1ba4930c773595c81e21f87ba", "patch": "@@ -0,0 +1,122 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(decl_macro, associated_type_defaults)]\n+#![allow(unused, private_in_public)]\n+\n+mod priv_nominal {\n+    pub struct Pub;\n+    impl Pub {\n+        fn method(&self) {}\n+        const CONST: u8 = 0;\n+        // type AssocTy = u8;\n+    }\n+\n+    pub macro mac() {\n+        let value = Pub::method;\n+        //~^ ERROR type `for<'r> fn(&'r priv_nominal::Pub) {priv_nominal::Pub::method}` is private\n+        value;\n+        //~^ ERROR type `for<'r> fn(&'r priv_nominal::Pub) {priv_nominal::Pub::method}` is private\n+        Pub.method();\n+        //~^ ERROR type `for<'r> fn(&'r priv_nominal::Pub) {priv_nominal::Pub::method}` is private\n+        Pub::CONST;\n+        //~^ ERROR associated constant `CONST` is private\n+        // let _: Pub::AssocTy;\n+        // pub type InSignatureTy = Pub::AssocTy;\n+    }\n+}\n+fn priv_nominal() {\n+    priv_nominal::mac!();\n+}\n+\n+mod priv_signature {\n+    struct Priv;\n+    pub struct Pub;\n+    impl Pub {\n+        pub fn method(&self, arg: Priv) {}\n+    }\n+\n+    pub macro mac() {\n+        let value = Pub::method;\n+        //~^ ERROR type `priv_signature::Priv` is private\n+        value;\n+        //~^ ERROR type `priv_signature::Priv` is private\n+        Pub.method(loop {});\n+        //~^ ERROR type `priv_signature::Priv` is private\n+    }\n+}\n+fn priv_signature() {\n+    priv_signature::mac!();\n+}\n+\n+mod priv_substs {\n+    struct Priv;\n+    pub struct Pub;\n+    impl Pub {\n+        pub fn method<T>(&self) {}\n+    }\n+\n+    pub macro mac() {\n+        let value = Pub::method::<Priv>;\n+        //~^ ERROR type `priv_substs::Priv` is private\n+        value;\n+        //~^ ERROR type `priv_substs::Priv` is private\n+        Pub.method::<Priv>();\n+        //~^ ERROR type `priv_substs::Priv` is private\n+    }\n+}\n+fn priv_substs() {\n+    priv_substs::mac!();\n+}\n+\n+mod priv_parent_substs {\n+    struct Priv;\n+    pub struct Pub<T = Priv>(T);\n+    impl Pub<Priv> {\n+        pub fn method(&self) {}\n+        pub fn static_method() {}\n+        pub const CONST: u8 = 0;\n+        // pub type AssocTy = u8;\n+    }\n+\n+    pub macro mac() {\n+        let value = <Pub>::method;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        value;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        let value = Pub::method;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        value;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        let value = <Pub>::static_method;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        value;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        let value = Pub::static_method;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        value;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        Pub(Priv).method();\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+\n+        <Pub>::CONST;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        Pub::CONST;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+\n+        // let _: Pub::AssocTy;\n+        // pub type InSignatureTy = Pub::AssocTy;\n+    }\n+}\n+fn priv_parent_substs() {\n+    priv_parent_substs::mac!();\n+}\n+\n+fn main() {}"}, {"sha": "bdc0c680a92bc161117743a3bd78179bb3219d33", "filename": "src/test/compile-fail/privacy/associated-item-privacy-trait.rs", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-trait.rs?ref=a12706ca7127bbb1ba4930c773595c81e21f87ba", "patch": "@@ -0,0 +1,151 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+#![feature(decl_macro, associated_type_defaults)]\n+#![allow(unused, private_in_public)]\n+\n+mod priv_trait {\n+    trait PrivTr {\n+        fn method(&self) {}\n+        const CONST: u8 = 0;\n+        type AssocTy = u8;\n+    }\n+    pub struct Pub;\n+    impl PrivTr for Pub {}\n+    pub trait PubTr: PrivTr {}\n+\n+    pub macro mac() {\n+        let value = <Pub as PrivTr>::method;\n+        //~^ ERROR type `for<'r> fn(&'r priv_trait::Pub) {<priv_trait::Pub as priv_trait::PrivTr>::method}` is private\n+        value;\n+        //~^ ERROR type `for<'r> fn(&'r priv_trait::Pub) {<priv_trait::Pub as priv_trait::PrivTr>::method}` is private\n+        Pub.method();\n+        //~^ ERROR type `for<'r> fn(&'r Self) {<Self as priv_trait::PrivTr>::method}` is private\n+        <Pub as PrivTr>::CONST;\n+        //~^ ERROR associated constant `PrivTr::CONST` is private\n+        let _: <Pub as PrivTr>::AssocTy;\n+        //~^ ERROR trait `priv_trait::PrivTr` is private\n+        //~| ERROR trait `priv_trait::PrivTr` is private\n+        pub type InSignatureTy = <Pub as PrivTr>::AssocTy;\n+        //~^ ERROR trait `priv_trait::PrivTr` is private\n+        pub trait InSignatureTr: PrivTr {}\n+        //~^ ERROR trait `priv_trait::PrivTr` is private\n+        impl PrivTr for u8 {}\n+        //~^ ERROR trait `priv_trait::PrivTr` is private\n+    }\n+}\n+fn priv_trait() {\n+    priv_trait::mac!();\n+}\n+\n+mod priv_signature {\n+    pub trait PubTr {\n+        fn method(&self, arg: Priv) {}\n+    }\n+    struct Priv;\n+    pub struct Pub;\n+    impl PubTr for Pub {}\n+\n+    pub macro mac() {\n+        let value = <Pub as PubTr>::method;\n+        //~^ ERROR type `priv_signature::Priv` is private\n+        value;\n+        //~^ ERROR type `priv_signature::Priv` is private\n+        Pub.method(loop {});\n+        //~^ ERROR type `priv_signature::Priv` is private\n+    }\n+}\n+fn priv_signature() {\n+    priv_signature::mac!();\n+}\n+\n+mod priv_substs {\n+    pub trait PubTr {\n+        fn method<T>(&self) {}\n+    }\n+    struct Priv;\n+    pub struct Pub;\n+    impl PubTr for Pub {}\n+\n+    pub macro mac() {\n+        let value = <Pub as PubTr>::method::<Priv>;\n+        //~^ ERROR type `priv_substs::Priv` is private\n+        value;\n+        //~^ ERROR type `priv_substs::Priv` is private\n+        Pub.method::<Priv>();\n+        //~^ ERROR type `priv_substs::Priv` is private\n+    }\n+}\n+fn priv_substs() {\n+    priv_substs::mac!();\n+}\n+\n+mod priv_parent_substs {\n+    pub trait PubTr<T = Priv> {\n+        fn method(&self) {}\n+        const CONST: u8 = 0;\n+        type AssocTy = u8;\n+    }\n+    struct Priv;\n+    pub struct Pub;\n+    impl PubTr<Priv> for Pub {}\n+    impl PubTr<Pub> for Priv {}\n+\n+    pub macro mac() {\n+        let value = <Pub as PubTr>::method;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        value;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        let value = <Pub as PubTr<_>>::method;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        value;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        Pub.method();\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+\n+        let value = <Priv as PubTr<_>>::method;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        value;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        Priv.method();\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+\n+        <Pub as PubTr>::CONST;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        <Pub as PubTr<_>>::CONST;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        <Priv as PubTr<_>>::CONST;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+\n+        let _: <Pub as PubTr>::AssocTy;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        //~| ERROR type `priv_parent_substs::Priv` is private\n+        let _: <Pub as PubTr<_>>::AssocTy;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        //~| ERROR type `priv_parent_substs::Priv` is private\n+        let _: <Priv as PubTr<_>>::AssocTy;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        //~| ERROR type `priv_parent_substs::Priv` is private\n+\n+        pub type InSignatureTy1 = <Pub as PubTr>::AssocTy;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        pub type InSignatureTy2 = <Priv as PubTr<Pub>>::AssocTy;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        impl PubTr for u8 {}\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+    }\n+}\n+fn priv_parent_substs() {\n+    priv_parent_substs::mac!();\n+}\n+\n+fn main() {}"}, {"sha": "c25616c54354d9f0d856927e915e1f383f5c83ba", "filename": "src/test/compile-fail/privacy/associated-item-privacy-type-binding.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-type-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-type-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-type-binding.rs?ref=a12706ca7127bbb1ba4930c773595c81e21f87ba", "patch": "@@ -0,0 +1,74 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(decl_macro, associated_type_defaults)]\n+#![allow(unused, private_in_public)]\n+\n+mod priv_trait {\n+    trait PrivTr {\n+        type AssocTy = u8;\n+    }\n+    pub trait PubTr: PrivTr {}\n+\n+    pub macro mac1() {\n+        let _: Box<PubTr<AssocTy = u8>>;\n+        //~^ ERROR type `priv_trait::PubTr<AssocTy=u8> + '<empty>` is private\n+        //~| ERROR type `priv_trait::PubTr<AssocTy=u8> + '<empty>` is private\n+        type InSignatureTy2 = Box<PubTr<AssocTy = u8>>;\n+        //~^ ERROR type `priv_trait::PubTr<AssocTy=u8> + 'static` is private\n+        trait InSignatureTr2: PubTr<AssocTy = u8> {}\n+        //~^ ERROR trait `priv_trait::PrivTr` is private\n+    }\n+    pub macro mac2() {\n+        let _: Box<PrivTr<AssocTy = u8>>;\n+        //~^ ERROR type `priv_trait::PrivTr<AssocTy=u8> + '<empty>` is private\n+        //~| ERROR type `priv_trait::PrivTr<AssocTy=u8> + '<empty>` is private\n+        type InSignatureTy1 = Box<PrivTr<AssocTy = u8>>;\n+        //~^ ERROR type `priv_trait::PrivTr<AssocTy=u8> + 'static` is private\n+        trait InSignatureTr1: PrivTr<AssocTy = u8> {}\n+        //~^ ERROR trait `priv_trait::PrivTr` is private\n+    }\n+}\n+fn priv_trait1() {\n+    priv_trait::mac1!();\n+}\n+fn priv_trait2() {\n+    priv_trait::mac2!();\n+}\n+\n+mod priv_parent_substs {\n+    pub trait PubTrWithParam<T = Priv> {\n+        type AssocTy = u8;\n+    }\n+    struct Priv;\n+    pub trait PubTr: PubTrWithParam<Priv> {}\n+\n+    pub macro mac() {\n+        let _: Box<PubTrWithParam<AssocTy = u8>>;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        //~| ERROR type `priv_parent_substs::Priv` is private\n+        let _: Box<PubTr<AssocTy = u8>>;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        //~| ERROR type `priv_parent_substs::Priv` is private\n+        pub type InSignatureTy1 = Box<PubTrWithParam<AssocTy = u8>>;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        pub type InSignatureTy2 = Box<PubTr<AssocTy = u8>>;\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        trait InSignatureTr1: PubTrWithParam<AssocTy = u8> {}\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+        trait InSignatureTr2: PubTr<AssocTy = u8> {}\n+        //~^ ERROR type `priv_parent_substs::Priv` is private\n+    }\n+}\n+fn priv_parent_substs() {\n+    priv_parent_substs::mac!();\n+}\n+\n+fn main() {}"}, {"sha": "59dee25664252615f79fd2904183c3a1bd1d8efd", "filename": "src/test/compile-fail/private-in-public-assoc-ty.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-assoc-ty.rs?ref=a12706ca7127bbb1ba4930c773595c81e21f87ba", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Private types and traits are not allowed in interfaces of associated types.\n+// This test also ensures that the checks are performed even inside private modules.\n+\n+#![feature(associated_type_defaults)]\n+\n+mod m {\n+    struct Priv;\n+    trait PrivTr {}\n+    impl PrivTr for Priv {}\n+    pub trait PubTrAux1<T> {}\n+    pub trait PubTrAux2 { type A; }\n+\n+    // \"Private-in-public in associated types is hard error\" in RFC 2145\n+    // applies only to the aliased types, not bounds.\n+    pub trait PubTr {\n+        //~^ WARN private trait `m::PrivTr` in public interface\n+        //~| WARN this was previously accepted\n+        //~| WARN private type `m::Priv` in public interface\n+        //~| WARN this was previously accepted\n+        type Alias1: PrivTr;\n+        type Alias2: PubTrAux1<Priv> = u8;\n+        type Alias3: PubTrAux2<A = Priv> = u8;\n+\n+        type Alias4 = Priv;\n+        //~^ ERROR private type `m::Priv` in public interface\n+    }\n+    impl PubTr for u8 {\n+        type Alias1 = Priv;\n+        //~^ ERROR private type `m::Priv` in public interface\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "4e10614bf62c6b274fce6a581e4928f7d1ad5b7a", "filename": "src/test/compile-fail/private-in-public-ill-formed.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-ill-formed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-ill-formed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-ill-formed.rs?ref=a12706ca7127bbb1ba4930c773595c81e21f87ba", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod aliases_pub {\n+    struct Priv;\n+    mod m {\n+        pub struct Pub3;\n+    }\n+\n+    trait PrivTr {\n+        type AssocAlias;\n+    }\n+    impl PrivTr for Priv {\n+        type AssocAlias = m::Pub3;\n+    }\n+\n+    impl (<Priv as PrivTr>::AssocAlias) { //~ ERROR no base type found for inherent implementation\n+        pub fn f(arg: Priv) {} // private type `aliases_pub::Priv` in public interface\n+    }\n+}\n+\n+mod aliases_priv {\n+    struct Priv;\n+    struct Priv3;\n+\n+    trait PrivTr {\n+        type AssocAlias;\n+    }\n+    impl PrivTr for Priv {\n+        type AssocAlias = Priv3;\n+    }\n+\n+    impl (<Priv as PrivTr>::AssocAlias) { //~ ERROR no base type found for inherent implementation\n+        pub fn f(arg: Priv) {} // OK\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "dfcf4dc01b8abd49e6947ab86d7dd731ebca7e6d", "filename": "src/test/compile-fail/private-in-public-warn.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs?ref=a12706ca7127bbb1ba4930c773595c81e21f87ba", "patch": "@@ -13,7 +13,6 @@\n \n #![feature(associated_type_defaults)]\n #![deny(private_in_public)]\n-#![allow(unused)]\n #![allow(improper_ctypes)]\n \n mod types {\n@@ -35,7 +34,6 @@ mod types {\n         const C: Priv = Priv; //~ ERROR private type `types::Priv` in public interface\n         //~^ WARNING hard error\n         type Alias = Priv; //~ ERROR private type `types::Priv` in public interface\n-        //~^ WARNING hard error\n         fn f1(arg: Priv) {} //~ ERROR private type `types::Priv` in public interface\n         //~^ WARNING hard error\n         fn f2() -> Priv { panic!() } //~ ERROR private type `types::Priv` in public interface\n@@ -51,7 +49,6 @@ mod types {\n     }\n     impl PubTr for Pub {\n         type Alias = Priv; //~ ERROR private type `types::Priv` in public interface\n-        //~^ WARNING hard error\n     }\n }\n \n@@ -146,7 +143,6 @@ mod impls {\n     }\n     impl PubTr for Pub {\n         type Alias = Priv; //~ ERROR private type `impls::Priv` in public interface\n-        //~^ WARNING hard error\n     }\n }\n \n@@ -220,21 +216,14 @@ mod aliases_pub {\n         pub fn f(arg: Priv) {} //~ ERROR private type `aliases_pub::Priv` in public interface\n         //~^ WARNING hard error\n     }\n-    // This doesn't even parse\n-    // impl <Priv as PrivTr>::AssocAlias {\n-    //     pub fn f(arg: Priv) {} // ERROR private type `aliases_pub::Priv` in public interface\n-    // }\n     impl PrivUseAliasTr for PrivUseAlias {\n         type Check = Priv; //~ ERROR private type `aliases_pub::Priv` in public interface\n-        //~^ WARNING hard error\n     }\n     impl PrivUseAliasTr for PrivAlias {\n         type Check = Priv; //~ ERROR private type `aliases_pub::Priv` in public interface\n-        //~^ WARNING hard error\n     }\n     impl PrivUseAliasTr for <Priv as PrivTr>::AssocAlias {\n         type Check = Priv; //~ ERROR private type `aliases_pub::Priv` in public interface\n-        //~^ WARNING hard error\n     }\n }\n \n@@ -273,10 +262,6 @@ mod aliases_priv {\n     impl PrivAlias {\n         pub fn f(arg: Priv) {} // OK\n     }\n-    // This doesn't even parse\n-    // impl <Priv as PrivTr>::AssocAlias {\n-    //     pub fn f(arg: Priv) {} // OK\n-    // }\n     impl PrivUseAliasTr for PrivUseAlias {\n         type Check = Priv; // OK\n     }"}, {"sha": "0c393f02323ec04a3757f16aa641798c773227bb", "filename": "src/test/compile-fail/private-inferred-type-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type-3.rs?ref=a12706ca7127bbb1ba4930c773595c81e21f87ba", "patch": "@@ -11,6 +11,7 @@\n // aux-build:private-inferred-type.rs\n \n // error-pattern:type `fn() {ext::priv_fn}` is private\n+// error-pattern:static `PRIV_STATIC` is private\n // error-pattern:type `ext::PrivEnum` is private\n // error-pattern:type `fn() {<u8 as ext::PrivTrait>::method}` is private\n // error-pattern:type `fn(u8) -> ext::PrivTupleStruct {ext::PrivTupleStruct::{{constructor}}}` is pr"}, {"sha": "351dc6b776b210f7c12916e7ac8a047426e3a23f", "filename": "src/test/compile-fail/private-inferred-type.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs?ref=a12706ca7127bbb1ba4930c773595c81e21f87ba", "patch": "@@ -11,10 +11,11 @@\n #![feature(associated_consts)]\n #![feature(conservative_impl_trait)]\n #![feature(decl_macro)]\n-#![allow(warnings)]\n+#![allow(private_in_public)]\n \n mod m {\n     fn priv_fn() {}\n+    static PRIV_STATIC: u8 = 0;\n     enum PrivEnum { Variant }\n     pub enum PubEnum { Variant }\n     trait PrivTrait { fn method() {} }\n@@ -47,6 +48,7 @@ mod m {\n \n     pub macro m() {\n         priv_fn; //~ ERROR type `fn() {m::priv_fn}` is private\n+        PRIV_STATIC; // OK, not cross-crate\n         PrivEnum::Variant; //~ ERROR type `m::PrivEnum` is private\n         PubEnum::Variant; // OK\n         <u8 as PrivTrait>::method; //~ ERROR type `fn() {<u8 as m::PrivTrait>::method}` is private\n@@ -68,6 +70,7 @@ mod m {\n     impl<T> TraitWithTyParam<T> for u8 {}\n     impl TraitWithTyParam2<Priv> for u8 {}\n     impl TraitWithAssocTy for u8 { type AssocTy = Priv; }\n+    //~^ ERROR private type `m::Priv` in public interface\n \n     pub fn leak_anon1() -> impl Trait + 'static { 0 }\n     pub fn leak_anon2() -> impl TraitWithTyParam<Alias> { 0 }\n@@ -88,7 +91,7 @@ mod adjust {\n     pub struct S3;\n \n     impl Deref for S1 {\n-        type Target = S2Alias;\n+        type Target = S2Alias; //~ ERROR private type `adjust::S2` in public interface\n         fn deref(&self) -> &Self::Target { loop {} }\n     }\n     impl Deref for S2 {"}, {"sha": "be0f7dd4e1cd73f34d35a8b2c7f1cbf3443eda21", "filename": "src/test/compile-fail/trait-item-privacy.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Ftest%2Fcompile-fail%2Ftrait-item-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12706ca7127bbb1ba4930c773595c81e21f87ba/src%2Ftest%2Fcompile-fail%2Ftrait-item-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-item-privacy.rs?ref=a12706ca7127bbb1ba4930c773595c81e21f87ba", "patch": "@@ -131,6 +131,16 @@ fn check_assoc_ty<T: assoc_ty::C>() {\n     let _: T::A; //~ ERROR associated type `A` is private\n     let _: T::B; // OK\n     let _: T::C; // OK\n+\n+    // Associated types, bindings\n+    let _: assoc_ty::B<\n+        B = u8, // OK\n+    >;\n+    let _: C<\n+        A = u8, //~ ERROR associated type `A` is private\n+        B = u8, // OK\n+        C = u8, // OK\n+    >;\n }\n \n fn main() {}"}]}