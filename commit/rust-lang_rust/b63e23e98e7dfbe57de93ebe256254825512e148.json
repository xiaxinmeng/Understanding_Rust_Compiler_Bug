{"sha": "b63e23e98e7dfbe57de93ebe256254825512e148", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2M2UyM2U5OGU3ZGZiZTU3ZGU5M2ViZTI1NjI1NDgyNTUxMmUxNDg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-15T17:58:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-15T17:58:46Z"}, "message": "Merge #5350\n\n5350: Filter assists r=matklad a=kjeremy\n\nUses the `CodeActionContext::only` field to compute only those assists the client cares about.\r\n\r\nIt works but I don't really like the implementation.\n\nCo-authored-by: kjeremy <kjeremy@gmail.com>\nCo-authored-by: Jeremy Kolb <kjeremy@gmail.com>", "tree": {"sha": "4cc8a59f3c508d9f92060f3304a521a187d97c27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cc8a59f3c508d9f92060f3304a521a187d97c27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b63e23e98e7dfbe57de93ebe256254825512e148", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfD0PWCRBK7hj4Ov3rIwAAdHIIAGsk0h6ZeCxqyfjtz8ZYzRga\nA9RVLMT4epo5AamT5xWtEkH2YcpVvbiIEpF0j4a+3p33r3wMNSa7NcYBIVNiD+6t\nYj5tNVQLEoXasjmfrCzROs0LEwvbrk9bP0JTxneem4nl+V7NM/+TOc5VcyK+PfOf\nsDLX42DukuVs79zUsoxzzZppfkmoBdto0QyfTQ3U/LZJymk1DIsPBHAmbmoi26Yz\n+9y3yrNtRyK+cBlKtT2FDkp5+U5QieOMtO2zwOz2DQvbDv1ZPhieRjVolcjh+pBb\nNoljSwE37RydzVBwYs22+eotUmJ9Z8QoLbhrnKniZioKH+RWXsn5DHnTt0OLkp0=\n=mRnf\n-----END PGP SIGNATURE-----\n", "payload": "tree 4cc8a59f3c508d9f92060f3304a521a187d97c27\nparent e30d39d502e485648116d8b608236487e5ebe3df\nparent 21c1504ca972d59307a065f72154e50bd32aa763\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1594835926 +0000\ncommitter GitHub <noreply@github.com> 1594835926 +0000\n\nMerge #5350\n\n5350: Filter assists r=matklad a=kjeremy\n\nUses the `CodeActionContext::only` field to compute only those assists the client cares about.\r\n\r\nIt works but I don't really like the implementation.\n\nCo-authored-by: kjeremy <kjeremy@gmail.com>\nCo-authored-by: Jeremy Kolb <kjeremy@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b63e23e98e7dfbe57de93ebe256254825512e148", "html_url": "https://github.com/rust-lang/rust/commit/b63e23e98e7dfbe57de93ebe256254825512e148", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b63e23e98e7dfbe57de93ebe256254825512e148/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e30d39d502e485648116d8b608236487e5ebe3df", "url": "https://api.github.com/repos/rust-lang/rust/commits/e30d39d502e485648116d8b608236487e5ebe3df", "html_url": "https://github.com/rust-lang/rust/commit/e30d39d502e485648116d8b608236487e5ebe3df"}, {"sha": "21c1504ca972d59307a065f72154e50bd32aa763", "url": "https://api.github.com/repos/rust-lang/rust/commits/21c1504ca972d59307a065f72154e50bd32aa763", "html_url": "https://github.com/rust-lang/rust/commit/21c1504ca972d59307a065f72154e50bd32aa763"}], "stats": {"total": 149, "additions": 141, "deletions": 8}, "files": [{"sha": "cda2abfb9c2fdf49ff322a248c8bf30729150cf0", "filename": "crates/ra_assists/src/assist_config.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b63e23e98e7dfbe57de93ebe256254825512e148/crates%2Fra_assists%2Fsrc%2Fassist_config.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b63e23e98e7dfbe57de93ebe256254825512e148/crates%2Fra_assists%2Fsrc%2Fassist_config.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_config.rs?ref=b63e23e98e7dfbe57de93ebe256254825512e148", "patch": "@@ -4,9 +4,12 @@\n //! module, and we use to statically check that we only produce snippet\n //! assists if we are allowed to.\n \n+use crate::AssistKind;\n+\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct AssistConfig {\n     pub snippet_cap: Option<SnippetCap>,\n+    pub allowed: Option<Vec<AssistKind>>,\n }\n \n impl AssistConfig {\n@@ -22,6 +25,6 @@ pub struct SnippetCap {\n \n impl Default for AssistConfig {\n     fn default() -> Self {\n-        AssistConfig { snippet_cap: Some(SnippetCap { _private: () }) }\n+        AssistConfig { snippet_cap: Some(SnippetCap { _private: () }), allowed: None }\n     }\n }"}, {"sha": "3407df8562d2580635777f6f85ebb15dd0c70439", "filename": "crates/ra_assists/src/assist_context.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b63e23e98e7dfbe57de93ebe256254825512e148/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b63e23e98e7dfbe57de93ebe256254825512e148/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_context.rs?ref=b63e23e98e7dfbe57de93ebe256254825512e148", "patch": "@@ -19,7 +19,7 @@ use ra_text_edit::TextEditBuilder;\n \n use crate::{\n     assist_config::{AssistConfig, SnippetCap},\n-    Assist, AssistId, GroupLabel, ResolvedAssist,\n+    Assist, AssistId, AssistKind, GroupLabel, ResolvedAssist,\n };\n \n /// `AssistContext` allows to apply an assist or check if it could be applied.\n@@ -103,14 +103,26 @@ pub(crate) struct Assists {\n     resolve: bool,\n     file: FileId,\n     buf: Vec<(Assist, Option<SourceChange>)>,\n+    allowed: Option<Vec<AssistKind>>,\n }\n \n impl Assists {\n     pub(crate) fn new_resolved(ctx: &AssistContext) -> Assists {\n-        Assists { resolve: true, file: ctx.frange.file_id, buf: Vec::new() }\n+        Assists {\n+            resolve: true,\n+            file: ctx.frange.file_id,\n+            buf: Vec::new(),\n+            allowed: ctx.config.allowed.clone(),\n+        }\n     }\n+\n     pub(crate) fn new_unresolved(ctx: &AssistContext) -> Assists {\n-        Assists { resolve: false, file: ctx.frange.file_id, buf: Vec::new() }\n+        Assists {\n+            resolve: false,\n+            file: ctx.frange.file_id,\n+            buf: Vec::new(),\n+            allowed: ctx.config.allowed.clone(),\n+        }\n     }\n \n     pub(crate) fn finish_unresolved(self) -> Vec<Assist> {\n@@ -139,9 +151,13 @@ impl Assists {\n         target: TextRange,\n         f: impl FnOnce(&mut AssistBuilder),\n     ) -> Option<()> {\n+        if !self.is_allowed(&id) {\n+            return None;\n+        }\n         let label = Assist::new(id, label.into(), None, target);\n         self.add_impl(label, f)\n     }\n+\n     pub(crate) fn add_group(\n         &mut self,\n         group: &GroupLabel,\n@@ -150,9 +166,14 @@ impl Assists {\n         target: TextRange,\n         f: impl FnOnce(&mut AssistBuilder),\n     ) -> Option<()> {\n+        if !self.is_allowed(&id) {\n+            return None;\n+        }\n+\n         let label = Assist::new(id, label.into(), Some(group.clone()), target);\n         self.add_impl(label, f)\n     }\n+\n     fn add_impl(&mut self, label: Assist, f: impl FnOnce(&mut AssistBuilder)) -> Option<()> {\n         let source_change = if self.resolve {\n             let mut builder = AssistBuilder::new(self.file);\n@@ -170,6 +191,13 @@ impl Assists {\n         self.buf.sort_by_key(|(label, _edit)| label.target.len());\n         self.buf\n     }\n+\n+    fn is_allowed(&self, id: &AssistId) -> bool {\n+        match &self.allowed {\n+            Some(allowed) => allowed.iter().any(|kind| kind.contains(id.1)),\n+            None => true,\n+        }\n+    }\n }\n \n pub(crate) struct AssistBuilder {"}, {"sha": "465b90415171093f0b83f78affe9b26cb28d1122", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b63e23e98e7dfbe57de93ebe256254825512e148/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b63e23e98e7dfbe57de93ebe256254825512e148/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=b63e23e98e7dfbe57de93ebe256254825512e148", "patch": "@@ -37,6 +37,25 @@ pub enum AssistKind {\n     RefactorRewrite,\n }\n \n+impl AssistKind {\n+    pub fn contains(self, other: AssistKind) -> bool {\n+        if self == other {\n+            return true;\n+        }\n+\n+        match self {\n+            AssistKind::None | AssistKind::Generate => return true,\n+            AssistKind::Refactor => match other {\n+                AssistKind::RefactorExtract\n+                | AssistKind::RefactorInline\n+                | AssistKind::RefactorRewrite => return true,\n+                _ => return false,\n+            },\n+            _ => return false,\n+        }\n+    }\n+}\n+\n /// Unique identifier of the assist, should not be shown to the user\n /// directly.\n #[derive(Debug, Clone, Copy, PartialEq, Eq)]"}, {"sha": "18fcb90498742189306e7ce809c4cc400ec34154", "filename": "crates/ra_assists/src/tests.rs", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b63e23e98e7dfbe57de93ebe256254825512e148/crates%2Fra_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b63e23e98e7dfbe57de93ebe256254825512e148/crates%2Fra_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests.rs?ref=b63e23e98e7dfbe57de93ebe256254825512e148", "patch": "@@ -6,7 +6,7 @@ use ra_ide_db::RootDatabase;\n use ra_syntax::TextRange;\n use test_utils::{assert_eq_text, extract_offset, extract_range};\n \n-use crate::{handlers::Handler, Assist, AssistConfig, AssistContext, Assists};\n+use crate::{handlers::Handler, Assist, AssistConfig, AssistContext, AssistKind, Assists};\n use stdx::trim_indent;\n \n pub(crate) fn with_single_file(text: &str) -> (RootDatabase, FileId) {\n@@ -134,3 +134,46 @@ fn assist_order_if_expr() {\n     assert_eq!(assists.next().expect(\"expected assist\").assist.label, \"Extract into variable\");\n     assert_eq!(assists.next().expect(\"expected assist\").assist.label, \"Replace with match\");\n }\n+\n+#[test]\n+fn assist_filter_works() {\n+    let before = \"\n+    pub fn test_some_range(a: int) -> bool {\n+        if let 2..6 = <|>5<|> {\n+            true\n+        } else {\n+            false\n+        }\n+    }\";\n+    let (range, before) = extract_range(before);\n+    let (db, file_id) = with_single_file(&before);\n+    let frange = FileRange { file_id, range };\n+\n+    {\n+        let mut cfg = AssistConfig::default();\n+        cfg.allowed = Some(vec![AssistKind::Refactor]);\n+\n+        let assists = Assist::resolved(&db, &cfg, frange);\n+        let mut assists = assists.iter();\n+\n+        assert_eq!(assists.next().expect(\"expected assist\").assist.label, \"Extract into variable\");\n+        assert_eq!(assists.next().expect(\"expected assist\").assist.label, \"Replace with match\");\n+    }\n+\n+    {\n+        let mut cfg = AssistConfig::default();\n+        cfg.allowed = Some(vec![AssistKind::RefactorExtract]);\n+        let assists = Assist::resolved(&db, &cfg, frange);\n+        assert_eq!(assists.len(), 1);\n+\n+        let mut assists = assists.iter();\n+        assert_eq!(assists.next().expect(\"expected assist\").assist.label, \"Extract into variable\");\n+    }\n+\n+    {\n+        let mut cfg = AssistConfig::default();\n+        cfg.allowed = Some(vec![AssistKind::QuickFix]);\n+        let assists = Assist::resolved(&db, &cfg, frange);\n+        assert!(assists.is_empty(), \"All asserts but quickfixes should be filtered out\");\n+    }\n+}"}, {"sha": "9f8ce3b991e5a5090c3f35093276c8afad20335e", "filename": "crates/rust-analyzer/src/from_proto.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b63e23e98e7dfbe57de93ebe256254825512e148/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b63e23e98e7dfbe57de93ebe256254825512e148/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs?ref=b63e23e98e7dfbe57de93ebe256254825512e148", "patch": "@@ -2,7 +2,7 @@\n use std::convert::TryFrom;\n \n use ra_db::{FileId, FilePosition, FileRange};\n-use ra_ide::{LineCol, LineIndex};\n+use ra_ide::{AssistKind, LineCol, LineIndex};\n use ra_syntax::{TextRange, TextSize};\n use vfs::AbsPathBuf;\n \n@@ -52,3 +52,17 @@ pub(crate) fn file_range(\n     let range = text_range(&line_index, range);\n     Ok(FileRange { file_id, range })\n }\n+\n+pub(crate) fn assist_kind(kind: lsp_types::CodeActionKind) -> Option<AssistKind> {\n+    let assist_kind = match &kind {\n+        k if k == &lsp_types::CodeActionKind::EMPTY => AssistKind::None,\n+        k if k == &lsp_types::CodeActionKind::QUICKFIX => AssistKind::QuickFix,\n+        k if k == &lsp_types::CodeActionKind::REFACTOR => AssistKind::Refactor,\n+        k if k == &lsp_types::CodeActionKind::REFACTOR_EXTRACT => AssistKind::RefactorExtract,\n+        k if k == &lsp_types::CodeActionKind::REFACTOR_INLINE => AssistKind::RefactorInline,\n+        k if k == &lsp_types::CodeActionKind::REFACTOR_REWRITE => AssistKind::RefactorRewrite,\n+        _ => return None,\n+    };\n+\n+    Some(assist_kind)\n+}"}, {"sha": "d28c700f14ed168bdbcd158b45a0636504d21fba", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b63e23e98e7dfbe57de93ebe256254825512e148/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b63e23e98e7dfbe57de93ebe256254825512e148/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=b63e23e98e7dfbe57de93ebe256254825512e148", "patch": "@@ -746,6 +746,19 @@ fn handle_fixes(\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n     let line_index = snap.analysis.file_line_index(file_id)?;\n     let range = from_proto::text_range(&line_index, params.range);\n+\n+    match &params.context.only {\n+        Some(v) => {\n+            if !v.iter().any(|it| {\n+                it == &lsp_types::CodeActionKind::EMPTY\n+                    || it == &lsp_types::CodeActionKind::QUICKFIX\n+            }) {\n+                return Ok(());\n+            }\n+        }\n+        None => {}\n+    };\n+\n     let diagnostics = snap.analysis.diagnostics(file_id)?;\n \n     let fixes_from_diagnostics = diagnostics\n@@ -777,7 +790,7 @@ fn handle_fixes(\n }\n \n pub(crate) fn handle_code_action(\n-    snap: GlobalStateSnapshot,\n+    mut snap: GlobalStateSnapshot,\n     params: lsp_types::CodeActionParams,\n ) -> Result<Option<Vec<lsp_ext::CodeAction>>> {\n     let _p = profile(\"handle_code_action\");\n@@ -792,6 +805,13 @@ pub(crate) fn handle_code_action(\n     let line_index = snap.analysis.file_line_index(file_id)?;\n     let range = from_proto::text_range(&line_index, params.range);\n     let frange = FileRange { file_id, range };\n+\n+    snap.config.assist.allowed = params\n+        .clone()\n+        .context\n+        .only\n+        .map(|it| it.into_iter().filter_map(from_proto::assist_kind).collect());\n+\n     let mut res: Vec<lsp_ext::CodeAction> = Vec::new();\n \n     handle_fixes(&snap, &params, &mut res)?;\n@@ -812,7 +832,7 @@ pub(crate) fn handle_code_action(\n }\n \n pub(crate) fn handle_resolve_code_action(\n-    snap: GlobalStateSnapshot,\n+    mut snap: GlobalStateSnapshot,\n     params: lsp_ext::ResolveCodeActionParams,\n ) -> Result<Option<lsp_ext::SnippetWorkspaceEdit>> {\n     let _p = profile(\"handle_resolve_code_action\");\n@@ -821,6 +841,12 @@ pub(crate) fn handle_resolve_code_action(\n     let range = from_proto::text_range(&line_index, params.code_action_params.range);\n     let frange = FileRange { file_id, range };\n \n+    snap.config.assist.allowed = params\n+        .code_action_params\n+        .context\n+        .only\n+        .map(|it| it.into_iter().filter_map(from_proto::assist_kind).collect());\n+\n     let assists = snap.analysis.resolved_assists(&snap.config.assist, frange)?;\n     let (id_string, index) = split_delim(&params.id, ':').unwrap();\n     let index = index.parse::<usize>().unwrap();"}]}