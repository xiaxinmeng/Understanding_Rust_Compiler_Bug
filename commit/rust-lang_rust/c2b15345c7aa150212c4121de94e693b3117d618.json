{"sha": "c2b15345c7aa150212c4121de94e693b3117d618", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYjE1MzQ1YzdhYTE1MDIxMmM0MTIxZGU5NGU2OTNiMzExN2Q2MTg=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-04-13T11:30:21Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-04-13T11:30:21Z"}, "message": "librusti: only use std::rl if stdin is connected to a tty.", "tree": {"sha": "07d8c8fb97aa0ef5142d59c63ea5e29652b263ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07d8c8fb97aa0ef5142d59c63ea5e29652b263ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2b15345c7aa150212c4121de94e693b3117d618", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2b15345c7aa150212c4121de94e693b3117d618", "html_url": "https://github.com/rust-lang/rust/commit/c2b15345c7aa150212c4121de94e693b3117d618", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2b15345c7aa150212c4121de94e693b3117d618/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65ff441b3d25d83335dc46ed4ef86421fca29c8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/65ff441b3d25d83335dc46ed4ef86421fca29c8d", "html_url": "https://github.com/rust-lang/rust/commit/65ff441b3d25d83335dc46ed4ef86421fca29c8d"}], "stats": {"total": 74, "additions": 44, "deletions": 30}, "files": [{"sha": "8e4a58c766e530eab4a795bdb1a79e71952dce7e", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 44, "deletions": 30, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/c2b15345c7aa150212c4121de94e693b3117d618/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c2b15345c7aa150212c4121de94e693b3117d618/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=c2b15345c7aa150212c4121de94e693b3117d618", "patch": "@@ -29,7 +29,7 @@ extern mod rustc(vers = \"0.7-pre\");\n extern mod syntax(vers = \"0.7-pre\");\n \n use core::*;\n-use core::io::WriterUtil;\n+use core::io::{ReaderUtil, WriterUtil};\n use rustc::driver::{driver, session};\n use syntax::{ast, diagnostic};\n use syntax::ast_util::*;\n@@ -241,23 +241,29 @@ fn compile_crate(src_filename: ~str, binary: ~str) -> Option<bool> {\n \n /// Tries to get a line from rl after outputting a prompt. Returns\n /// None if no input was read (e.g. EOF was reached).\n-fn get_line(prompt: ~str) -> Option<~str> {\n-    let result = unsafe { rl::read(prompt) };\n+fn get_line(use_rl: bool, prompt: ~str) -> Option<~str> {\n+    if use_rl {\n+        let result = unsafe { rl::read(prompt) };\n \n-    if result.is_none() {\n-        return None;\n+        match result {\n+            None => None,\n+            Some(line) => {\n+                unsafe { rl::add_history(line) };\n+                Some(line)\n+            }\n+        }\n+    } else {\n+        if io::stdin().eof() {\n+            None\n+        } else {\n+            Some(io::stdin().read_line())\n+        }\n     }\n-\n-    let line = result.get();\n-\n-    unsafe { rl::add_history(line) };\n-\n-    return Some(line);\n }\n \n /// Run a command, e.g. :clear, :exit, etc.\n fn run_cmd(repl: &mut Repl, _in: @io::Reader, _out: @io::Writer,\n-           cmd: ~str, args: ~[~str]) -> CmdAction {\n+           cmd: ~str, args: ~[~str], use_rl: bool) -> CmdAction {\n     let mut action = action_none;\n     match cmd {\n         ~\"exit\" => repl.running = false,\n@@ -313,7 +319,7 @@ fn run_cmd(repl: &mut Repl, _in: @io::Reader, _out: @io::Writer,\n             let mut multiline_cmd = ~\"\";\n             let mut end_multiline = false;\n             while (!end_multiline) {\n-                match get_line(~\"rusti| \") {\n+                match get_line(use_rl, ~\"rusti| \") {\n                     None => fail!(~\"unterminated multiline command :{ .. :}\"),\n                     Some(line) => {\n                         if str::trim(line) == ~\":}\" {\n@@ -333,7 +339,8 @@ fn run_cmd(repl: &mut Repl, _in: @io::Reader, _out: @io::Writer,\n \n /// Executes a line of input, which may either be rust code or a\n /// :command. Returns a new Repl if it has changed.\n-fn run_line(repl: &mut Repl, in: @io::Reader, out: @io::Writer, line: ~str)\n+fn run_line(repl: &mut Repl, in: @io::Reader, out: @io::Writer, line: ~str,\n+            use_rl: bool)\n     -> Option<Repl> {\n     if line.starts_with(~\":\") {\n         let full = line.substr(1, line.len() - 1);\n@@ -349,11 +356,11 @@ fn run_line(repl: &mut Repl, in: @io::Reader, out: @io::Writer, line: ~str)\n                     vec::slice(split, 1, len).to_vec()\n                 } else { ~[] };\n \n-                match run_cmd(repl, in, out, cmd, args) {\n+                match run_cmd(repl, in, out, cmd, args, use_rl) {\n                     action_none => { }\n                     action_run_line(multiline_cmd) => {\n                         if !multiline_cmd.is_empty() {\n-                            return run_line(repl, in, out, multiline_cmd);\n+                            return run_line(repl, in, out, multiline_cmd, use_rl);\n                         }\n                     }\n                 }\n@@ -386,30 +393,37 @@ pub fn main() {\n         stmts: ~\"\"\n     };\n \n-    io::println(\"WARNING: The Rust REPL is experimental and may be\");\n-    io::println(\"unstable. If you encounter problems, please use the\");\n-    io::println(\"compiler instead.\");\n-\n-    unsafe {\n-        do rl::complete |line, suggest| {\n-            if line.starts_with(\":\") {\n-                suggest(~\":clear\");\n-                suggest(~\":exit\");\n-                suggest(~\":help\");\n-                suggest(~\":load\");\n+    let istty = unsafe { libc::isatty(libc::STDIN_FILENO as i32) } != 0;\n+\n+    // only print this stuff if the user is actually typing into rusti\n+    if istty {\n+        io::println(\"WARNING: The Rust REPL is experimental and may be\");\n+        io::println(\"unstable. If you encounter problems, please use the\");\n+        io::println(\"compiler instead.\");\n+\n+        unsafe {\n+            do rl::complete |line, suggest| {\n+                if line.starts_with(\":\") {\n+                    suggest(~\":clear\");\n+                    suggest(~\":exit\");\n+                    suggest(~\":help\");\n+                    suggest(~\":load\");\n+                }\n             }\n         }\n     }\n \n     while repl.running {\n-        match get_line(repl.prompt) {\n+        match get_line(istty, repl.prompt) {\n             None => break,\n             Some(line) => {\n                 if line.is_empty() {\n-                    io::println(~\"()\");\n+                    if istty {\n+                        io::println(~\"()\");\n+                    }\n                     loop;\n                 }\n-                match run_line(&mut repl, in, out, line) {\n+                match run_line(&mut repl, in, out, line, istty) {\n                     Some(new_repl) => repl = new_repl,\n                     None => { }\n                 }"}]}