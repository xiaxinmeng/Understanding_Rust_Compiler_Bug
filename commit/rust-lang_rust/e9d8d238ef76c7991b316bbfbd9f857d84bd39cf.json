{"sha": "e9d8d238ef76c7991b316bbfbd9f857d84bd39cf", "node_id": "C_kwDOAAsO6NoAKGU5ZDhkMjM4ZWY3NmM3OTkxYjMxNmJiZmJkOWY4NTdkODRiZDM5Y2Y", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-11-13T04:46:05Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-01-20T21:52:24Z"}, "message": "diagnostics: suggest changing `s@self::{macro}@::macro` for exported\n\nFixes #99695", "tree": {"sha": "d3afc52cc337d3f1372f9858e7dcdb7593094bf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3afc52cc337d3f1372f9858e7dcdb7593094bf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9d8d238ef76c7991b316bbfbd9f857d84bd39cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9d8d238ef76c7991b316bbfbd9f857d84bd39cf", "html_url": "https://github.com/rust-lang/rust/commit/e9d8d238ef76c7991b316bbfbd9f857d84bd39cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9d8d238ef76c7991b316bbfbd9f857d84bd39cf/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14", "html_url": "https://github.com/rust-lang/rust/commit/5ce39f42bd2c8bca9c570f0560ebe1fce4eddb14"}], "stats": {"total": 79, "additions": 78, "deletions": 1}, "files": [{"sha": "2a5cc288380f4d69edf4771a49256df96f8189a7", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e9d8d238ef76c7991b316bbfbd9f857d84bd39cf/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d8d238ef76c7991b316bbfbd9f857d84bd39cf/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=e9d8d238ef76c7991b316bbfbd9f857d84bd39cf", "patch": "@@ -2125,9 +2125,31 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n \n                 let source_map = self.r.session.source_map();\n \n+                // Make sure this is actually crate-relative.\n+                let use_and_crate = import.use_span.with_hi(after_crate_name.lo());\n+                let is_definitely_crate =\n+                    source_map.span_to_snippet(use_and_crate).map_or(false, |s| {\n+                        let mut s = s.trim();\n+                        debug!(\"check_for_module_export_macro: s={s:?}\",);\n+                        s = s\n+                            .split_whitespace()\n+                            .rev()\n+                            .next()\n+                            .expect(\"split_whitespace always yields at least once\");\n+                        debug!(\"check_for_module_export_macro: s={s:?}\",);\n+                        if s.ends_with(\"::\") {\n+                            s = &s[..s.len() - 2];\n+                        } else {\n+                            return false;\n+                        }\n+                        s = s.trim();\n+                        debug!(\"check_for_module_export_macro: s={s:?}\",);\n+                        s != \"self\" && s != \"super\"\n+                    });\n+\n                 // Add the import to the start, with a `{` if required.\n                 let start_point = source_map.start_point(after_crate_name);\n-                if let Ok(start_snippet) = source_map.span_to_snippet(start_point) {\n+                if is_definitely_crate && let Ok(start_snippet) = source_map.span_to_snippet(start_point) {\n                     corrections.push((\n                         start_point,\n                         if has_nested {\n@@ -2139,6 +2161,12 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                             format!(\"{{{}, {}\", import_snippet, start_snippet)\n                         },\n                     ));\n+                } else {\n+                    // If the root import is module-relative, add the import separately\n+                    corrections.push((\n+                        source_map.start_point(import.use_span).shrink_to_lo(),\n+                        format!(\"use {module_name}::{import_snippet};\\n\"),\n+                    ));\n                 }\n \n                 // Add a `};` to the end if nested, matching the `{` added at the start."}, {"sha": "6bf228b23aad221d8fbf1a798186f38fb3ebd061", "filename": "tests/ui/imports/issue-99695.fixed", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e9d8d238ef76c7991b316bbfbd9f857d84bd39cf/tests%2Fui%2Fimports%2Fissue-99695.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e9d8d238ef76c7991b316bbfbd9f857d84bd39cf/tests%2Fui%2Fimports%2Fissue-99695.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-99695.fixed?ref=e9d8d238ef76c7991b316bbfbd9f857d84bd39cf", "patch": "@@ -0,0 +1,17 @@\n+// run-rustfix\n+#![allow(unused, nonstandard_style)]\n+mod m {\n+    #[macro_export]\n+    macro_rules! nu {\n+        {} => {};\n+    }\n+\n+    pub struct other_item;\n+\n+    use ::nu;\n+pub use self::{other_item as _};\n+    //~^ ERROR unresolved import `self::nu` [E0432]\n+    //~| HELP a macro with this name exists at the root of the crate\n+}\n+\n+fn main() {}"}, {"sha": "f7199f1497ab0877b12d9d9e8bb6520dc09fa75d", "filename": "tests/ui/imports/issue-99695.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e9d8d238ef76c7991b316bbfbd9f857d84bd39cf/tests%2Fui%2Fimports%2Fissue-99695.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d8d238ef76c7991b316bbfbd9f857d84bd39cf/tests%2Fui%2Fimports%2Fissue-99695.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-99695.rs?ref=e9d8d238ef76c7991b316bbfbd9f857d84bd39cf", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+#![allow(unused, nonstandard_style)]\n+mod m {\n+    #[macro_export]\n+    macro_rules! nu {\n+        {} => {};\n+    }\n+\n+    pub struct other_item;\n+\n+    pub use self::{nu, other_item as _};\n+    //~^ ERROR unresolved import `self::nu` [E0432]\n+    //~| HELP a macro with this name exists at the root of the crate\n+}\n+\n+fn main() {}"}, {"sha": "0ef762e1c8230f81a1faf7ac670a6ccdf7c58ad2", "filename": "tests/ui/imports/issue-99695.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e9d8d238ef76c7991b316bbfbd9f857d84bd39cf/tests%2Fui%2Fimports%2Fissue-99695.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9d8d238ef76c7991b316bbfbd9f857d84bd39cf/tests%2Fui%2Fimports%2Fissue-99695.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-99695.stderr?ref=e9d8d238ef76c7991b316bbfbd9f857d84bd39cf", "patch": "@@ -0,0 +1,16 @@\n+error[E0432]: unresolved import `self::nu`\n+  --> $DIR/issue-99695.rs:11:20\n+   |\n+LL |     pub use self::{nu, other_item as _};\n+   |                    ^^ no `nu` in `m`\n+   |\n+   = note: this could be because a macro annotated with `#[macro_export]` will be exported at the root of the crate instead of the module where it is defined\n+help: a macro with this name exists at the root of the crate\n+   |\n+LL ~     use ::nu;\n+LL ~ pub use self::{other_item as _};\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0432`."}]}