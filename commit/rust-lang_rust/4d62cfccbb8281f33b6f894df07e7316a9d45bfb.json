{"sha": "4d62cfccbb8281f33b6f894df07e7316a9d45bfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNjJjZmNjYmI4MjgxZjMzYjZmODk0ZGYwN2U3MzE2YTlkNDViZmI=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2018-10-07T20:59:02Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2018-10-07T21:12:40Z"}, "message": "Apply tslint suggestions, round one", "tree": {"sha": "56ad69cb2f5c1096a2a74cfa078b92c40fe902e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56ad69cb2f5c1096a2a74cfa078b92c40fe902e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d62cfccbb8281f33b6f894df07e7316a9d45bfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d62cfccbb8281f33b6f894df07e7316a9d45bfb", "html_url": "https://github.com/rust-lang/rust/commit/4d62cfccbb8281f33b6f894df07e7316a9d45bfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69de7e2fd71c3a808f0ac856d7b105eeb210f169", "url": "https://api.github.com/repos/rust-lang/rust/commits/69de7e2fd71c3a808f0ac856d7b105eeb210f169", "html_url": "https://github.com/rust-lang/rust/commit/69de7e2fd71c3a808f0ac856d7b105eeb210f169"}], "stats": {"total": 500, "additions": 258, "deletions": 242}, "files": [{"sha": "c7e27781e06a5cc312045d336efeb58ec13eeb01", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=4d62cfccbb8281f33b6f894df07e7316a9d45bfb", "patch": "@@ -13,5 +13,5 @@ export {\n     matchingBrace,\n     parentModule,\n     runnables,\n-    syntaxTree\n-}\n+    syntaxTree,\n+};"}, {"sha": "f011cbe12e9c01301733cfb7eccaf3ea53490c55", "filename": "editors/code/src/commands/apply_source_change.ts", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fcommands%2Fapply_source_change.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fcommands%2Fapply_source_change.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fapply_source_change.ts?ref=4d62cfccbb8281f33b6f894df07e7316a9d45bfb", "patch": "@@ -1,5 +1,5 @@\n import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient'\n+import * as lc from 'vscode-languageclient';\n \n import { Server } from '../server';\n \n@@ -11,48 +11,48 @@ interface FileSystemEdit {\n }\n \n export interface SourceChange {\n-    label: string,\n-    sourceFileEdits: lc.TextDocumentEdit[],\n-    fileSystemEdits: FileSystemEdit[],\n-    cursorPosition?: lc.TextDocumentPositionParams,\n+    label: string;\n+    sourceFileEdits: lc.TextDocumentEdit[];\n+    fileSystemEdits: FileSystemEdit[];\n+    cursorPosition?: lc.TextDocumentPositionParams;\n }\n \n export async function handle(change: SourceChange) {\n-    console.log(`applySOurceChange ${JSON.stringify(change)}`)\n-    let wsEdit = new vscode.WorkspaceEdit()\n-    for (let sourceEdit of change.sourceFileEdits) {\n-        let uri = Server.client.protocol2CodeConverter.asUri(sourceEdit.textDocument.uri)\n-        let edits = Server.client.protocol2CodeConverter.asTextEdits(sourceEdit.edits)\n-        wsEdit.set(uri, edits)\n+    console.log(`applySOurceChange ${JSON.stringify(change)}`);\n+    const wsEdit = new vscode.WorkspaceEdit();\n+    for (const sourceEdit of change.sourceFileEdits) {\n+        const uri = Server.client.protocol2CodeConverter.asUri(sourceEdit.textDocument.uri);\n+        const edits = Server.client.protocol2CodeConverter.asTextEdits(sourceEdit.edits);\n+        wsEdit.set(uri, edits);\n     }\n     let created;\n     let moved;\n-    for (let fsEdit of change.fileSystemEdits) {\n-        if (fsEdit.type == \"createFile\") {\n-            let uri = vscode.Uri.parse(fsEdit.uri!)\n-            wsEdit.createFile(uri)\n-            created = uri\n-        } else if (fsEdit.type == \"moveFile\") {\n-            let src = vscode.Uri.parse(fsEdit.src!)\n-            let dst = vscode.Uri.parse(fsEdit.dst!)\n-            wsEdit.renameFile(src, dst)\n-            moved = dst\n+    for (const fsEdit of change.fileSystemEdits) {\n+        if (fsEdit.type == 'createFile') {\n+            const uri = vscode.Uri.parse(fsEdit.uri!);\n+            wsEdit.createFile(uri);\n+            created = uri;\n+        } else if (fsEdit.type == 'moveFile') {\n+            const src = vscode.Uri.parse(fsEdit.src!);\n+            const dst = vscode.Uri.parse(fsEdit.dst!);\n+            wsEdit.renameFile(src, dst);\n+            moved = dst;\n         } else {\n-            console.error(`unknown op: ${JSON.stringify(fsEdit)}`)\n+            console.error(`unknown op: ${JSON.stringify(fsEdit)}`);\n         }\n     }\n-    let toOpen = created || moved\n-    let toReveal = change.cursorPosition\n-    await vscode.workspace.applyEdit(wsEdit)\n+    const toOpen = created || moved;\n+    const toReveal = change.cursorPosition;\n+    await vscode.workspace.applyEdit(wsEdit);\n     if (toOpen) {\n-        let doc = await vscode.workspace.openTextDocument(toOpen)\n-        await vscode.window.showTextDocument(doc)\n+        const doc = await vscode.workspace.openTextDocument(toOpen);\n+        await vscode.window.showTextDocument(doc);\n     } else if (toReveal) {\n-        let uri = Server.client.protocol2CodeConverter.asUri(toReveal.textDocument.uri)\n-        let position = Server.client.protocol2CodeConverter.asPosition(toReveal.position)\n-        let editor = vscode.window.activeTextEditor;\n-        if (!editor || editor.document.uri.toString() != uri.toString()) return\n-        if (!editor.selection.isEmpty) return\n-        editor!.selection = new vscode.Selection(position, position)\n+        const uri = Server.client.protocol2CodeConverter.asUri(toReveal.textDocument.uri);\n+        const position = Server.client.protocol2CodeConverter.asPosition(toReveal.position);\n+        const editor = vscode.window.activeTextEditor;\n+        if (!editor || editor.document.uri.toString() != uri.toString()) { return; }\n+        if (!editor.selection.isEmpty) { return; }\n+        editor!.selection = new vscode.Selection(position, position);\n     }\n }"}, {"sha": "b722ac17229ddc8ccec262669fda5d9480f223a9", "filename": "editors/code/src/commands/extend_selection.ts", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fcommands%2Fextend_selection.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fcommands%2Fextend_selection.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fextend_selection.ts?ref=4d62cfccbb8281f33b6f894df07e7316a9d45bfb", "patch": "@@ -1,6 +1,6 @@\n import * as vscode from 'vscode';\n \n-import { TextDocumentIdentifier, Range } from \"vscode-languageclient\";\n+import { Range, TextDocumentIdentifier } from 'vscode-languageclient';\n import { Server } from '../server';\n \n interface ExtendSelectionParams {\n@@ -13,17 +13,17 @@ interface ExtendSelectionResult {\n }\n \n export async function handle() {\n-    let editor = vscode.window.activeTextEditor\n-    if (editor == null || editor.document.languageId != \"rust\") return\n-    let request: ExtendSelectionParams = {\n-        textDocument: { uri: editor.document.uri.toString() },\n+    const editor = vscode.window.activeTextEditor;\n+    if (editor == null || editor.document.languageId != 'rust') { return; }\n+    const request: ExtendSelectionParams = {\n         selections: editor.selections.map((s) => {\n-            return Server.client.code2ProtocolConverter.asRange(s)\n-        })\n-    }\n-    let response = await Server.client.sendRequest<ExtendSelectionResult>(\"m/extendSelection\", request)\n+            return Server.client.code2ProtocolConverter.asRange(s);\n+        }),\n+        textDocument: { uri: editor.document.uri.toString() },\n+    };\n+    const response = await Server.client.sendRequest<ExtendSelectionResult>('m/extendSelection', request);\n     editor.selections = response.selections.map((range: Range) => {\n-        let r = Server.client.protocol2CodeConverter.asRange(range)\n-        return new vscode.Selection(r.start, r.end)\n-    })\n+        const r = Server.client.protocol2CodeConverter.asRange(range);\n+        return new vscode.Selection(r.start, r.end);\n+    });\n }"}, {"sha": "80ad4460ba1a0ca32e08e5c52f82f653ee8e9691", "filename": "editors/code/src/commands/join_lines.ts", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts?ref=4d62cfccbb8281f33b6f894df07e7316a9d45bfb", "patch": "@@ -1,6 +1,6 @@\n import * as vscode from 'vscode';\n \n-import { TextDocumentIdentifier, Range } from \"vscode-languageclient\";\n+import { Range, TextDocumentIdentifier } from 'vscode-languageclient';\n import { Server } from '../server';\n import { handle as applySourceChange, SourceChange } from './apply_source_change';\n \n@@ -10,12 +10,12 @@ interface JoinLinesParams {\n }\n \n export async function handle() {\n-    let editor = vscode.window.activeTextEditor\n-    if (editor == null || editor.document.languageId != \"rust\") return\n-    let request: JoinLinesParams = {\n-        textDocument: { uri: editor.document.uri.toString() },\n+    const editor = vscode.window.activeTextEditor;\n+    if (editor == null || editor.document.languageId != 'rust') { return; }\n+    const request: JoinLinesParams = {\n         range: Server.client.code2ProtocolConverter.asRange(editor.selection),\n-    }\n-    let change = await Server.client.sendRequest<SourceChange>(\"m/joinLines\", request)\n-    await applySourceChange(change)\n+        textDocument: { uri: editor.document.uri.toString() },\n+    };\n+    const change = await Server.client.sendRequest<SourceChange>('m/joinLines', request);\n+    await applySourceChange(change);\n }"}, {"sha": "cf7f6bf8facf3e8fe5b5d040882a7ff296c94a25", "filename": "editors/code/src/commands/matching_brace.ts", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts?ref=4d62cfccbb8281f33b6f894df07e7316a9d45bfb", "patch": "@@ -1,6 +1,6 @@\n import * as vscode from 'vscode';\n \n-import { TextDocumentIdentifier, Position } from \"vscode-languageclient\";\n+import { Position, TextDocumentIdentifier } from 'vscode-languageclient';\n import { Server } from '../server';\n \n interface FindMatchingBraceParams {\n@@ -9,19 +9,19 @@ interface FindMatchingBraceParams {\n }\n \n export async function handle() {\n-    let editor = vscode.window.activeTextEditor\n-    if (editor == null || editor.document.languageId != \"rust\") return\n-    let request: FindMatchingBraceParams = {\n+    const editor = vscode.window.activeTextEditor;\n+    if (editor == null || editor.document.languageId != 'rust') { return; }\n+    const request: FindMatchingBraceParams = {\n         textDocument: { uri: editor.document.uri.toString() },\n         offsets: editor.selections.map((s) => {\n-            return Server.client.code2ProtocolConverter.asPosition(s.active)\n-        })\n-    }\n-    let response = await Server.client.sendRequest<Position[]>(\"m/findMatchingBrace\", request)\n+            return Server.client.code2ProtocolConverter.asPosition(s.active);\n+        }),\n+    };\n+    const response = await Server.client.sendRequest<Position[]>('m/findMatchingBrace', request);\n     editor.selections = editor.selections.map((sel, idx) => {\n-        let active = Server.client.protocol2CodeConverter.asPosition(response[idx])\n-        let anchor = sel.isEmpty ? active : sel.anchor\n-        return new vscode.Selection(anchor, active)\n-    })\n-    editor.revealRange(editor.selection)\n-};\n+        const active = Server.client.protocol2CodeConverter.asPosition(response[idx]);\n+        const anchor = sel.isEmpty ? active : sel.anchor;\n+        return new vscode.Selection(anchor, active);\n+    });\n+    editor.revealRange(editor.selection);\n+}"}, {"sha": "7d413c27a6526c8031345da632586c85682792ff", "filename": "editors/code/src/commands/parent_module.ts", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts?ref=4d62cfccbb8281f33b6f894df07e7316a9d45bfb", "patch": "@@ -1,22 +1,22 @@\n import * as vscode from 'vscode';\n \n-import { TextDocumentIdentifier, Location } from \"vscode-languageclient\";\n+import { Location, TextDocumentIdentifier } from 'vscode-languageclient';\n import { Server } from '../server';\n \n export async function handle() {\n-    let editor = vscode.window.activeTextEditor\n-    if (editor == null || editor.document.languageId != \"rust\") return\n-    let request: TextDocumentIdentifier = {\n-        uri: editor.document.uri.toString()\n-    }\n-    let response = await Server.client.sendRequest<Location[]>(\"m/parentModule\", request)\n-    let loc = response[0]\n-    if (loc == null) return\n-    let uri = Server.client.protocol2CodeConverter.asUri(loc.uri)\n-    let range = Server.client.protocol2CodeConverter.asRange(loc.range)\n+    const editor = vscode.window.activeTextEditor;\n+    if (editor == null || editor.document.languageId != 'rust') { return; }\n+    const request: TextDocumentIdentifier = {\n+        uri: editor.document.uri.toString(),\n+    };\n+    const response = await Server.client.sendRequest<Location[]>('m/parentModule', request);\n+    const loc = response[0];\n+    if (loc == null) { return; }\n+    const uri = Server.client.protocol2CodeConverter.asUri(loc.uri);\n+    const range = Server.client.protocol2CodeConverter.asRange(loc.range);\n \n-    let doc = await vscode.workspace.openTextDocument(uri)\n-    let e = await vscode.window.showTextDocument(doc)\n-    e.selection = new vscode.Selection(range.start, range.start)\n-    e.revealRange(range, vscode.TextEditorRevealType.InCenter)\n+    const doc = await vscode.workspace.openTextDocument(uri);\n+    const e = await vscode.window.showTextDocument(doc);\n+    e.selection = new vscode.Selection(range.start, range.start);\n+    e.revealRange(range, vscode.TextEditorRevealType.InCenter);\n }"}, {"sha": "37db6ea10ac9277612d8fce4314a9a9e6b9f4c48", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=4d62cfccbb8281f33b6f894df07e7316a9d45bfb", "patch": "@@ -1,88 +1,88 @@\n import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient'\n+import * as lc from 'vscode-languageclient';\n import { Server } from '../server';\n \n interface RunnablesParams {\n-    textDocument: lc.TextDocumentIdentifier,\n-    position?: lc.Position,\n+    textDocument: lc.TextDocumentIdentifier;\n+    position?: lc.Position;\n }\n \n interface Runnable {\n     range: lc.Range;\n     label: string;\n     bin: string;\n     args: string[];\n-    env: { [index: string]: string },\n+    env: { [index: string]: string };\n }\n \n class RunnableQuickPick implements vscode.QuickPickItem {\n-    label: string;\n-    description?: string | undefined;\n-    detail?: string | undefined;\n-    picked?: boolean | undefined;\n+    public label: string;\n+    public description?: string | undefined;\n+    public detail?: string | undefined;\n+    public picked?: boolean | undefined;\n \n     constructor(public runnable: Runnable) {\n-        this.label = runnable.label\n+        this.label = runnable.label;\n     }\n }\n \n interface CargoTaskDefinition extends vscode.TaskDefinition {\n     type: 'cargo';\n     label: string;\n     command: string;\n-    args: Array<string>;\n+    args: string[];\n     env?: { [key: string]: string };\n }\n \n function createTask(spec: Runnable): vscode.Task {\n     const TASK_SOURCE = 'Rust';\n-    let definition: CargoTaskDefinition = {\n+    const definition: CargoTaskDefinition = {\n         type: 'cargo',\n         label: 'cargo',\n         command: spec.bin,\n         args: spec.args,\n-        env: spec.env\n-    }\n+        env: spec.env,\n+    };\n \n-    let execCmd = `${definition.command} ${definition.args.join(' ')}`;\n-    let execOption: vscode.ShellExecutionOptions = {\n+    const execCmd = `${definition.command} ${definition.args.join(' ')}`;\n+    const execOption: vscode.ShellExecutionOptions = {\n         cwd: '.',\n         env: definition.env,\n     };\n-    let exec = new vscode.ShellExecution(`clear; ${execCmd}`, execOption);\n+    const exec = new vscode.ShellExecution(`clear; ${execCmd}`, execOption);\n \n-    let f = vscode.workspace.workspaceFolders![0]\n-    let t = new vscode.Task(definition, f, definition.label, TASK_SOURCE, exec, ['$rustc']);\n+    const f = vscode.workspace.workspaceFolders![0];\n+    const t = new vscode.Task(definition, f, definition.label, TASK_SOURCE, exec, ['$rustc']);\n     return t;\n }\n \n-let prevRunnable: RunnableQuickPick | undefined = undefined\n+let prevRunnable: RunnableQuickPick | undefined;\n export async function handle() {\n-    let editor = vscode.window.activeTextEditor\n-    if (editor == null || editor.document.languageId != \"rust\") return\n-    let textDocument: lc.TextDocumentIdentifier = {\n-        uri: editor.document.uri.toString()\n-    }\n-    let params: RunnablesParams = {\n+    const editor = vscode.window.activeTextEditor;\n+    if (editor == null || editor.document.languageId != 'rust') { return; }\n+    const textDocument: lc.TextDocumentIdentifier = {\n+        uri: editor.document.uri.toString(),\n+    };\n+    const params: RunnablesParams = {\n         textDocument,\n-        position: Server.client.code2ProtocolConverter.asPosition(editor.selection.active)\n-    }\n-    let runnables = await Server.client.sendRequest<Runnable[]>('m/runnables', params)\n-    let items: RunnableQuickPick[] = []\n+        position: Server.client.code2ProtocolConverter.asPosition(editor.selection.active),\n+    };\n+    const runnables = await Server.client.sendRequest<Runnable[]>('m/runnables', params);\n+    const items: RunnableQuickPick[] = [];\n     if (prevRunnable) {\n-        items.push(prevRunnable)\n+        items.push(prevRunnable);\n     }\n-    for (let r of runnables) {\n+    for (const r of runnables) {\n         if (prevRunnable && JSON.stringify(prevRunnable.runnable) == JSON.stringify(r)) {\n-            continue\n+            continue;\n         }\n-        items.push(new RunnableQuickPick(r))\n+        items.push(new RunnableQuickPick(r));\n     }\n-    let item = await vscode.window.showQuickPick(items)\n+    const item = await vscode.window.showQuickPick(items);\n     if (item) {\n-        item.detail = \"rerun\"\n-        prevRunnable = item\n-        let task = createTask(item.runnable)\n-        return await vscode.tasks.executeTask(task)\n+        item.detail = 'rerun';\n+        prevRunnable = item;\n+        const task = createTask(item.runnable);\n+        return await vscode.tasks.executeTask(task);\n     }\n }"}, {"sha": "dcb721eee59863d5b52e29066802326b9fae28e3", "filename": "editors/code/src/commands/syntaxTree.ts", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fcommands%2FsyntaxTree.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fcommands%2FsyntaxTree.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2FsyntaxTree.ts?ref=4d62cfccbb8281f33b6f894df07e7316a9d45bfb", "patch": "@@ -6,20 +6,20 @@ import { Server } from '../server';\n export const syntaxTreeUri = vscode.Uri.parse('ra-lsp://syntaxtree');\n \n export class TextDocumentContentProvider implements vscode.TextDocumentContentProvider {\n-    public eventEmitter = new vscode.EventEmitter<vscode.Uri>()\n-    public syntaxTree: string = \"Not available\"\n+    public eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n+    public syntaxTree: string = 'Not available';\n \n     public provideTextDocumentContent(uri: vscode.Uri): vscode.ProviderResult<string> {\n-        let editor = vscode.window.activeTextEditor;\n-        if (editor == null) return \"\"\n-        let request: SyntaxTreeParams = {\n-            textDocument: { uri: editor.document.uri.toString() }\n+        const editor = vscode.window.activeTextEditor;\n+        if (editor == null) { return ''; }\n+        const request: SyntaxTreeParams = {\n+            textDocument: { uri: editor.document.uri.toString() },\n         };\n-        return Server.client.sendRequest<SyntaxTreeResult>(\"m/syntaxTree\", request);\n+        return Server.client.sendRequest<SyntaxTreeResult>('m/syntaxTree', request);\n     }\n \n     get onDidChange(): vscode.Event<vscode.Uri> {\n-        return this.eventEmitter.event\n+        return this.eventEmitter.event;\n     }\n }\n \n@@ -33,6 +33,6 @@ type SyntaxTreeResult = string;\n //\n // The contents of the file come from the `TextDocumentContentProvider`\n export async function handle() {\n-    let document = await vscode.workspace.openTextDocument(syntaxTreeUri)\n-    return vscode.window.showTextDocument(document, vscode.ViewColumn.Two, true)\n+    const document = await vscode.workspace.openTextDocument(syntaxTreeUri);\n+    return vscode.window.showTextDocument(document, vscode.ViewColumn.Two, true);\n }"}, {"sha": "740b5be206a488c212ea91982990507ced871712", "filename": "editors/code/src/config.ts", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=4d62cfccbb8281f33b6f894df07e7316a9d45bfb", "patch": "@@ -0,0 +1,23 @@\n+import * as vscode from 'vscode';\n+\n+import { Server } from './server';\n+\n+export class Config {\n+    public highlightingOn = true;\n+\n+    constructor() {\n+        vscode.workspace.onDidChangeConfiguration((_) => this.userConfigChanged());\n+        this.userConfigChanged();\n+    }\n+\n+    public userConfigChanged() {\n+        const config = vscode.workspace.getConfiguration('ra-lsp');\n+        if (config.has('highlightingOn')) {\n+            this.highlightingOn = config.get('highlightingOn') as boolean;\n+        }\n+\n+        if (!this.highlightingOn && Server) {\n+            Server.highlighter.removeHighlights();\n+        }\n+    }\n+}"}, {"sha": "8e2ac4a469ad9f169376ff9a3e28ebefef4f0aee", "filename": "editors/code/src/events.ts", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fevents.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fevents.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fevents.ts?ref=4d62cfccbb8281f33b6f894df07e7316a9d45bfb", "patch": "@@ -1,7 +1,7 @@\n-import * as changeActiveTextEditor from './events/change_active_text_editor'\n+import * as changeActiveTextEditor from './events/change_active_text_editor';\n import * as changeTextDocument from './events/change_text_document';\n \n export {\n     changeActiveTextEditor,\n-    changeTextDocument\n-}\n\\ No newline at end of file\n+    changeTextDocument,\n+};"}, {"sha": "96d61126c6e1591065bd03fe1461c10728b1439a", "filename": "editors/code/src/events/change_active_text_editor.ts", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fevents%2Fchange_active_text_editor.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fevents%2Fchange_active_text_editor.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fevents%2Fchange_active_text_editor.ts?ref=4d62cfccbb8281f33b6f894df07e7316a9d45bfb", "patch": "@@ -1,14 +1,14 @@\n-import { TextEditor } from \"vscode\";\n-import { TextDocumentIdentifier } from \"vscode-languageclient\";\n+import { TextEditor } from 'vscode';\n+import { TextDocumentIdentifier } from 'vscode-languageclient';\n \n-import { Server } from \"../server\";\n-import { Decoration } from \"../highlighting\";\n+import { Decoration } from '../highlighting';\n+import { Server } from '../server';\n \n export async function handle(editor: TextEditor | undefined) {\n-    if (!Server.config.highlightingOn || !editor || editor.document.languageId != 'rust') return\n-    let params: TextDocumentIdentifier = {\n-        uri: editor.document.uri.toString()\n-    }\n-    let decorations = await Server.client.sendRequest<Decoration[]>(\"m/decorationsRequest\", params)\n-    Server.highlighter.setHighlights(editor, decorations)\n-}\n\\ No newline at end of file\n+    if (!Server.config.highlightingOn || !editor || editor.document.languageId != 'rust') { return; }\n+    const params: TextDocumentIdentifier = {\n+        uri: editor.document.uri.toString(),\n+    };\n+    const decorations = await Server.client.sendRequest<Decoration[]>('m/decorationsRequest', params);\n+    Server.highlighter.setHighlights(editor, decorations);\n+}"}, {"sha": "192fb1e8a8be7fd3a5bb9a9f85e1d6105d640bb6", "filename": "editors/code/src/events/change_text_document.ts", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fevents%2Fchange_text_document.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fevents%2Fchange_text_document.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fevents%2Fchange_text_document.ts?ref=4d62cfccbb8281f33b6f894df07e7316a9d45bfb", "patch": "@@ -4,16 +4,16 @@ import { syntaxTreeUri, TextDocumentContentProvider } from '../commands/syntaxTr\n \n export function createHandler(textDocumentContentProvider: TextDocumentContentProvider) {\n     return (event: vscode.TextDocumentChangeEvent) => {\n-        let doc = event.document\n-        if (doc.languageId != \"rust\") return\n+        const doc = event.document;\n+        if (doc.languageId != 'rust') { return; }\n         afterLs(() => {\n             textDocumentContentProvider.eventEmitter.fire(syntaxTreeUri);\n-        })\n-    }\n+        });\n+    };\n }\n \n // We need to order this after LS updates, but there's no API for that.\n // Hence, good old setTimeout.\n function afterLs(f: () => any) {\n-    setTimeout(f, 10)\n+    setTimeout(f, 10);\n }"}, {"sha": "f1bc0b457b353b7636e9a190c7f9819e4573a68b", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=4d62cfccbb8281f33b6f894df07e7316a9d45bfb", "patch": "@@ -1,40 +1,40 @@\n import * as vscode from 'vscode';\n \n-import * as commands from './commands'\n-import * as events from './events'\n-import { Server } from './server';\n+import * as commands from './commands';\n import { TextDocumentContentProvider } from './commands/syntaxTree';\n+import * as events from './events';\n+import { Server } from './server';\n \n export function activate(context: vscode.ExtensionContext) {\n     function disposeOnDeactivation(disposable: vscode.Disposable) {\n         context.subscriptions.push(disposable);\n     }\n \n     function registerCommand(name: string, f: any) {\n-        disposeOnDeactivation(vscode.commands.registerCommand(name, f))\n+        disposeOnDeactivation(vscode.commands.registerCommand(name, f));\n     }\n \n-    registerCommand('ra-lsp.syntaxTree', commands.syntaxTree.handle)\n+    registerCommand('ra-lsp.syntaxTree', commands.syntaxTree.handle);\n     registerCommand('ra-lsp.extendSelection', commands.extendSelection.handle);\n     registerCommand('ra-lsp.matchingBrace', commands.matchingBrace.handle);\n     registerCommand('ra-lsp.joinLines', commands.joinLines.handle);\n     registerCommand('ra-lsp.parentModule', commands.parentModule.handle);\n     registerCommand('ra-lsp.run', commands.runnables.handle);\n     registerCommand('ra-lsp.applySourceChange', commands.applySourceChange.handle);\n \n-    let textDocumentContentProvider = new TextDocumentContentProvider()\n+    const textDocumentContentProvider = new TextDocumentContentProvider();\n     disposeOnDeactivation(vscode.workspace.registerTextDocumentContentProvider(\n         'ra-lsp',\n-        textDocumentContentProvider\n-    ))\n+        textDocumentContentProvider,\n+    ));\n \n-    Server.start()\n+    Server.start();\n \n     vscode.workspace.onDidChangeTextDocument(\n         events.changeTextDocument.createHandler(textDocumentContentProvider),\n         null,\n-        context.subscriptions)\n-    vscode.window.onDidChangeActiveTextEditor(events.changeActiveTextEditor.handle)\n+        context.subscriptions);\n+    vscode.window.onDidChangeActiveTextEditor(events.changeActiveTextEditor.handle);\n }\n \n export function deactivate(): Thenable<void> {"}, {"sha": "71f8e5baa1897e1cab03fbf891a5b1c166749332", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=4d62cfccbb8281f33b6f894df07e7316a9d45bfb", "patch": "@@ -1,11 +1,11 @@\n import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient'\n+import * as lc from 'vscode-languageclient';\n \n import { Server } from './server';\n \n export interface Decoration {\n-    range: lc.Range,\n-    tag: string,\n+    range: lc.Range;\n+    tag: string;\n }\n \n export class Highlighter {\n@@ -14,17 +14,17 @@ export class Highlighter {\n         this.decorations = {};\n     }\n \n-    removeHighlights() {\n-        for (let tag in this.decorations) {\n+    public removeHighlights() {\n+        for (const tag in this.decorations) {\n             this.decorations[tag].dispose();\n         }\n \n         this.decorations = {};\n     }\n \n-    setHighlights(\n+    public setHighlights(\n         editor: vscode.TextEditor,\n-        highlights: Array<Decoration>\n+        highlights: Decoration[],\n     ) {\n         // Initialize decorations if necessary\n         //\n@@ -34,45 +34,45 @@ export class Highlighter {\n             this.initDecorations();\n         }\n \n-        let byTag: Map<string, vscode.Range[]> = new Map()\n-        for (let tag in this.decorations) {\n-            byTag.set(tag, [])\n+        const byTag: Map<string, vscode.Range[]> = new Map();\n+        for (const tag in this.decorations) {\n+            byTag.set(tag, []);\n         }\n \n-        for (let d of highlights) {\n+        for (const d of highlights) {\n             if (!byTag.get(d.tag)) {\n-                console.log(`unknown tag ${d.tag}`)\n-                continue\n+                console.log(`unknown tag ${d.tag}`);\n+                continue;\n             }\n             byTag.get(d.tag)!.push(\n-                Server.client.protocol2CodeConverter.asRange(d.range)\n-            )\n+                Server.client.protocol2CodeConverter.asRange(d.range),\n+            );\n         }\n \n-        for (let tag of byTag.keys()) {\n-            let dec: vscode.TextEditorDecorationType = this.decorations[tag]\n-            let ranges = byTag.get(tag)!\n-            editor.setDecorations(dec, ranges)\n+        for (const tag of byTag.keys()) {\n+            const dec: vscode.TextEditorDecorationType = this.decorations[tag];\n+            const ranges = byTag.get(tag)!;\n+            editor.setDecorations(dec, ranges);\n         }\n     }\n \n     private initDecorations() {\n-        const decor = (obj: any) => vscode.window.createTextEditorDecorationType({ color: obj })\n+        const decor = (obj: any) => vscode.window.createTextEditorDecorationType({ color: obj });\n         this.decorations = {\n-            background: decor(\"#3F3F3F\"),\n+            background: decor('#3F3F3F'),\n             error: vscode.window.createTextEditorDecorationType({\n-                borderColor: \"red\",\n-                borderStyle: \"none none dashed none\",\n+                borderColor: 'red',\n+                borderStyle: 'none none dashed none',\n             }),\n-            comment: decor(\"#7F9F7F\"),\n-            string: decor(\"#CC9393\"),\n-            keyword: decor(\"#F0DFAF\"),\n-            function: decor(\"#93E0E3\"),\n-            parameter: decor(\"#94BFF3\"),\n-            builtin: decor(\"#DD6718\"),\n-            text: decor(\"#DCDCCC\"),\n-            attribute: decor(\"#BFEBBF\"),\n-            literal: decor(\"#DFAF8F\"),\n-        }\n+            comment: decor('#7F9F7F'),\n+            string: decor('#CC9393'),\n+            keyword: decor('#F0DFAF'),\n+            function: decor('#93E0E3'),\n+            parameter: decor('#94BFF3'),\n+            builtin: decor('#DD6718'),\n+            text: decor('#DCDCCC'),\n+            attribute: decor('#BFEBBF'),\n+            literal: decor('#DFAF8F'),\n+        };\n     }\n }"}, {"sha": "3857b00a5351b5bf1c8d48261e800e9530fe35c7", "filename": "editors/code/src/server.ts", "status": "modified", "additions": 27, "deletions": 47, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fserver.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Fsrc%2Fserver.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fserver.ts?ref=4d62cfccbb8281f33b6f894df07e7316a9d45bfb", "patch": "@@ -1,45 +1,25 @@\n import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient'\n+import * as lc from 'vscode-languageclient';\n \n-import { Highlighter, Decoration } from './highlighting';\n-\n-export class Config {\n-    highlightingOn = true;\n-\n-    constructor() {\n-        vscode.workspace.onDidChangeConfiguration(_ => this.userConfigChanged());\n-        this.userConfigChanged();\n-    }\n-\n-    userConfigChanged() {\n-        let config = vscode.workspace.getConfiguration('ra-lsp');\n-        if (config.has('highlightingOn')) {\n-            this.highlightingOn = config.get('highlightingOn') as boolean;\n-        };\n-\n-        if (!this.highlightingOn) {\n-            Server.highlighter.removeHighlights();\n-        }\n-    }\n-}\n+import { Config } from './config';\n+import { Decoration, Highlighter } from './highlighting';\n \n export class Server {\n-    static highlighter = new Highlighter();\n-    static config = new Config();\n-    static client: lc.LanguageClient;\n-\n-\n-    static start() {\n-        let run: lc.Executable = {\n-            command: \"ra_lsp_server\",\n-            options: { cwd: \".\" }\n-        }\n-        let serverOptions: lc.ServerOptions = {\n+    public static highlighter = new Highlighter();\n+    public static config = new Config();\n+    public static client: lc.LanguageClient;\n+\n+    public static start() {\n+        const run: lc.Executable = {\n+            command: 'ra_lsp_server',\n+            options: { cwd: '.' },\n+        };\n+        const serverOptions: lc.ServerOptions = {\n             run,\n-            debug: run\n+            debug: run,\n         };\n \n-        let clientOptions: lc.LanguageClientOptions = {\n+        const clientOptions: lc.LanguageClientOptions = {\n             documentSelector: [{ scheme: 'file', language: 'rust' }],\n         };\n \n@@ -51,24 +31,24 @@ export class Server {\n         );\n         Server.client.onReady().then(() => {\n             Server.client.onNotification(\n-                \"m/publishDecorations\",\n+                'm/publishDecorations',\n                 (params: PublishDecorationsParams) => {\n-                    let editor = vscode.window.visibleTextEditors.find(\n-                        (editor) => editor.document.uri.toString() == params.uri\n-                    )\n-                    if (!Server.config.highlightingOn || !editor) return;\n+                    const targetEditor = vscode.window.visibleTextEditors.find(\n+                        (editor) => editor.document.uri.toString() == params.uri,\n+                    );\n+                    if (!Server.config.highlightingOn || !targetEditor) { return; }\n                     Server.highlighter.setHighlights(\n-                        editor,\n+                        targetEditor,\n                         params.decorations,\n-                    )\n-                }\n-            )\n-        })\n+                    );\n+                },\n+            );\n+        });\n         Server.client.start();\n     }\n }\n \n interface PublishDecorationsParams {\n-    uri: string,\n-    decorations: Decoration[],\n+    uri: string;\n+    decorations: Decoration[];\n }"}, {"sha": "466e1fa20357ad1316a840dba2e94173e84b0650", "filename": "editors/code/tslint.json", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Ftslint.json", "raw_url": "https://github.com/rust-lang/rust/raw/4d62cfccbb8281f33b6f894df07e7316a9d45bfb/editors%2Fcode%2Ftslint.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftslint.json?ref=4d62cfccbb8281f33b6f894df07e7316a9d45bfb", "patch": "@@ -0,0 +1,13 @@\n+{\n+    \"defaultSeverity\": \"warning\",\n+    \"extends\": [\n+        \"tslint:recommended\"\n+    ],\n+    \"jsRules\": {},\n+    \"rules\": {\n+        \"quotemark\": [true, \"single\"],\n+        \"interface-name\": false,\n+        \"object-literal-sort-keys\": false\n+    },\n+    \"rulesDirectory\": []\n+}"}]}