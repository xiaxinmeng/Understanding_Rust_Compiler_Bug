{"sha": "065b98d5774954a42733bcc3de382029dcdcf0cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2NWI5OGQ1Nzc0OTU0YTQyNzMzYmNjM2RlMzgyMDI5ZGNkY2YwY2Y=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-07-06T06:07:28Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-07-06T06:07:28Z"}, "message": "collections: flesh out Vec benchmarks", "tree": {"sha": "1a37cfa73f943df9629655a0c0ffcbca7b459422", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a37cfa73f943df9629655a0c0ffcbca7b459422"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/065b98d5774954a42733bcc3de382029dcdcf0cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/065b98d5774954a42733bcc3de382029dcdcf0cf", "html_url": "https://github.com/rust-lang/rust/commit/065b98d5774954a42733bcc3de382029dcdcf0cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/065b98d5774954a42733bcc3de382029dcdcf0cf/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaff4e05e19b48d81e4ecb3337f288f42d06edd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaff4e05e19b48d81e4ecb3337f288f42d06edd0", "html_url": "https://github.com/rust-lang/rust/commit/aaff4e05e19b48d81e4ecb3337f288f42d06edd0"}], "stats": {"total": 418, "additions": 364, "deletions": 54}, "files": [{"sha": "e10fc66ea8567afec94aa0d43f0cd900e603b6e9", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 364, "deletions": 54, "changes": 418, "blob_url": "https://github.com/rust-lang/rust/blob/065b98d5774954a42733bcc3de382029dcdcf0cf/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065b98d5774954a42733bcc3de382029dcdcf0cf/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=065b98d5774954a42733bcc3de382029dcdcf0cf", "patch": "@@ -1857,107 +1857,417 @@ mod tests {\n     #[bench]\n     fn bench_new(b: &mut Bencher) {\n         b.iter(|| {\n-            let v: Vec<int> = Vec::new();\n+            let v: Vec<uint> = Vec::new();\n+            assert_eq!(v.len(), 0);\n             assert_eq!(v.capacity(), 0);\n-            assert!(v.as_slice() == []);\n         })\n     }\n \n-    #[bench]\n-    fn bench_with_capacity_0(b: &mut Bencher) {\n+    fn do_bench_with_capacity(b: &mut Bencher, src_len: uint) {\n+        b.bytes = src_len as u64;\n+\n         b.iter(|| {\n-            let v: Vec<int> = Vec::with_capacity(0);\n-            assert_eq!(v.capacity(), 0);\n-            assert!(v.as_slice() == []);\n+            let v: Vec<uint> = Vec::with_capacity(src_len);\n+            assert_eq!(v.len(), 0);\n+            assert_eq!(v.capacity(), src_len);\n         })\n     }\n \n+    #[bench]\n+    fn bench_with_capacity_0000(b: &mut Bencher) {\n+        do_bench_with_capacity(b, 0)\n+    }\n \n     #[bench]\n-    fn bench_with_capacity_5(b: &mut Bencher) {\n-        b.iter(|| {\n-            let v: Vec<int> = Vec::with_capacity(5);\n-            assert_eq!(v.capacity(), 5);\n-            assert!(v.as_slice() == []);\n-        })\n+    fn bench_with_capacity_0010(b: &mut Bencher) {\n+        do_bench_with_capacity(b, 10)\n+    }\n+\n+    #[bench]\n+    fn bench_with_capacity_0100(b: &mut Bencher) {\n+        do_bench_with_capacity(b, 100)\n     }\n \n     #[bench]\n-    fn bench_with_capacity_100(b: &mut Bencher) {\n+    fn bench_with_capacity_1000(b: &mut Bencher) {\n+        do_bench_with_capacity(b, 1000)\n+    }\n+\n+    fn do_bench_from_fn(b: &mut Bencher, src_len: uint) {\n+        b.bytes = src_len as u64;\n+\n         b.iter(|| {\n-            let v: Vec<int> = Vec::with_capacity(100);\n-            assert_eq!(v.capacity(), 100);\n-            assert!(v.as_slice() == []);\n+            let dst = Vec::from_fn(src_len, |i| i);\n+            assert_eq!(dst.len(), src_len);\n+            assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n         })\n     }\n \n     #[bench]\n-    fn bench_from_fn_0(b: &mut Bencher) {\n+    fn bench_from_fn_0000(b: &mut Bencher) {\n+        do_bench_from_fn(b, 0)\n+    }\n+\n+    #[bench]\n+    fn bench_from_fn_0010(b: &mut Bencher) {\n+        do_bench_from_fn(b, 10)\n+    }\n+\n+    #[bench]\n+    fn bench_from_fn_0100(b: &mut Bencher) {\n+        do_bench_from_fn(b, 100)\n+    }\n+\n+    #[bench]\n+    fn bench_from_fn_1000(b: &mut Bencher) {\n+        do_bench_from_fn(b, 1000)\n+    }\n+\n+    fn do_bench_from_elem(b: &mut Bencher, src_len: uint) {\n+        b.bytes = src_len as u64;\n+\n         b.iter(|| {\n-            let v: Vec<int> = Vec::from_fn(0, |_| 5);\n-            assert!(v.as_slice() == []);\n+            let dst: Vec<uint> = Vec::from_elem(src_len, 5);\n+            assert_eq!(dst.len(), src_len);\n+            assert!(dst.iter().all(|x| *x == 5));\n         })\n     }\n \n     #[bench]\n-    fn bench_from_fn_5(b: &mut Bencher) {\n+    fn bench_from_elem_0000(b: &mut Bencher) {\n+        do_bench_from_elem(b, 0)\n+    }\n+\n+    #[bench]\n+    fn bench_from_elem_0010(b: &mut Bencher) {\n+        do_bench_from_elem(b, 10)\n+    }\n+\n+    #[bench]\n+    fn bench_from_elem_0100(b: &mut Bencher) {\n+        do_bench_from_elem(b, 100)\n+    }\n+\n+    #[bench]\n+    fn bench_from_elem_1000(b: &mut Bencher) {\n+        do_bench_from_elem(b, 1000)\n+    }\n+\n+    fn do_bench_from_slice(b: &mut Bencher, src_len: uint) {\n+        let src: Vec<uint> = FromIterator::from_iter(range(0, src_len));\n+\n+        b.bytes = src_len as u64;\n+\n         b.iter(|| {\n-            let v: Vec<int> = Vec::from_fn(5, |_| 5);\n-            assert!(v.as_slice() == [5, 5, 5, 5, 5]);\n-        })\n+            let dst = Vec::from_slice(src.clone().as_slice());\n+            assert_eq!(dst.len(), src_len);\n+            assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n+        });\n+    }\n+\n+    #[bench]\n+    fn bench_from_slice_0000(b: &mut Bencher) {\n+        do_bench_from_slice(b, 0)\n     }\n \n     #[bench]\n-    fn bench_from_slice_0(b: &mut Bencher) {\n+    fn bench_from_slice_0010(b: &mut Bencher) {\n+        do_bench_from_slice(b, 10)\n+    }\n+\n+    #[bench]\n+    fn bench_from_slice_0100(b: &mut Bencher) {\n+        do_bench_from_slice(b, 100)\n+    }\n+\n+    #[bench]\n+    fn bench_from_slice_1000(b: &mut Bencher) {\n+        do_bench_from_slice(b, 1000)\n+    }\n+\n+    fn do_bench_from_iter(b: &mut Bencher, src_len: uint) {\n+        let src: Vec<uint> = FromIterator::from_iter(range(0, src_len));\n+\n+        b.bytes = src_len as u64;\n+\n         b.iter(|| {\n-            let v: Vec<int> = Vec::from_slice([]);\n-            assert!(v.as_slice() == []);\n-        })\n+            let dst: Vec<uint> = FromIterator::from_iter(src.clone().move_iter());\n+            assert_eq!(dst.len(), src_len);\n+            assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n+        });\n+    }\n+\n+    #[bench]\n+    fn bench_from_iter_0000(b: &mut Bencher) {\n+        do_bench_from_iter(b, 0)\n+    }\n+\n+    #[bench]\n+    fn bench_from_iter_0010(b: &mut Bencher) {\n+        do_bench_from_iter(b, 10)\n     }\n \n     #[bench]\n-    fn bench_from_slice_5(b: &mut Bencher) {\n+    fn bench_from_iter_0100(b: &mut Bencher) {\n+        do_bench_from_iter(b, 100)\n+    }\n+\n+    #[bench]\n+    fn bench_from_iter_1000(b: &mut Bencher) {\n+        do_bench_from_iter(b, 1000)\n+    }\n+\n+    fn do_bench_extend(b: &mut Bencher, dst_len: uint, src_len: uint) {\n+        let dst: Vec<uint> = FromIterator::from_iter(range(0, dst_len));\n+        let src: Vec<uint> = FromIterator::from_iter(range(dst_len, dst_len + src_len));\n+\n+        b.bytes = src_len as u64;\n+\n         b.iter(|| {\n-            let v: Vec<int> = Vec::from_slice([1i, 2, 3, 4, 5]);\n-            assert!(v.as_slice() == [1, 2, 3, 4, 5]);\n-        })\n+            let mut dst = dst.clone();\n+            dst.extend(src.clone().move_iter());\n+            assert_eq!(dst.len(), dst_len + src_len);\n+            assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n+        });\n+    }\n+\n+    #[bench]\n+    fn bench_extend_0000_0000(b: &mut Bencher) {\n+        do_bench_extend(b, 0, 0)\n     }\n \n     #[bench]\n-    fn bench_from_iter_0(b: &mut Bencher) {\n+    fn bench_extend_0000_0010(b: &mut Bencher) {\n+        do_bench_extend(b, 0, 10)\n+    }\n+\n+    #[bench]\n+    fn bench_extend_0000_0100(b: &mut Bencher) {\n+        do_bench_extend(b, 0, 100)\n+    }\n+\n+    #[bench]\n+    fn bench_extend_0000_1000(b: &mut Bencher) {\n+        do_bench_extend(b, 0, 1000)\n+    }\n+\n+    #[bench]\n+    fn bench_extend_0010_0010(b: &mut Bencher) {\n+        do_bench_extend(b, 10, 10)\n+    }\n+\n+    #[bench]\n+    fn bench_extend_0100_0100(b: &mut Bencher) {\n+        do_bench_extend(b, 100, 100)\n+    }\n+\n+    #[bench]\n+    fn bench_extend_1000_1000(b: &mut Bencher) {\n+        do_bench_extend(b, 1000, 1000)\n+    }\n+\n+    fn do_bench_push_all(b: &mut Bencher, dst_len: uint, src_len: uint) {\n+        let dst: Vec<uint> = FromIterator::from_iter(range(0, dst_len));\n+        let src: Vec<uint> = FromIterator::from_iter(range(dst_len, dst_len + src_len));\n+\n+        b.bytes = src_len as u64;\n+\n         b.iter(|| {\n-            let v0: Vec<int> = vec!();\n-            let v1: Vec<int> = FromIterator::from_iter(v0.move_iter());\n-            assert!(v1.as_slice() == []);\n-        })\n+            let mut dst = dst.clone();\n+            dst.push_all(src.as_slice());\n+            assert_eq!(dst.len(), dst_len + src_len);\n+            assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n+        });\n+    }\n+\n+    #[bench]\n+    fn bench_push_all_0000_0000(b: &mut Bencher) {\n+        do_bench_push_all(b, 0, 0)\n     }\n \n     #[bench]\n-    fn bench_from_iter_5(b: &mut Bencher) {\n+    fn bench_push_all_0000_0010(b: &mut Bencher) {\n+        do_bench_push_all(b, 0, 10)\n+    }\n+\n+    #[bench]\n+    fn bench_push_all_0000_0100(b: &mut Bencher) {\n+        do_bench_push_all(b, 0, 100)\n+    }\n+\n+    #[bench]\n+    fn bench_push_all_0000_1000(b: &mut Bencher) {\n+        do_bench_push_all(b, 0, 1000)\n+    }\n+\n+    #[bench]\n+    fn bench_push_all_0010_0010(b: &mut Bencher) {\n+        do_bench_push_all(b, 10, 10)\n+    }\n+\n+    #[bench]\n+    fn bench_push_all_0100_0100(b: &mut Bencher) {\n+        do_bench_push_all(b, 100, 100)\n+    }\n+\n+    #[bench]\n+    fn bench_push_all_1000_1000(b: &mut Bencher) {\n+        do_bench_push_all(b, 1000, 1000)\n+    }\n+\n+    fn do_bench_push_all_move(b: &mut Bencher, dst_len: uint, src_len: uint) {\n+        let dst: Vec<uint> = FromIterator::from_iter(range(0u, dst_len));\n+        let src: Vec<uint> = FromIterator::from_iter(range(dst_len, dst_len + src_len));\n+\n+        b.bytes = src_len as u64;\n+\n         b.iter(|| {\n-            let v0: Vec<int> = vec!(1, 2, 3, 4, 5);\n-            let v1: Vec<int> = FromIterator::from_iter(v0.move_iter());\n-            assert!(v1.as_slice() == [1, 2, 3, 4, 5]);\n-        })\n+            let mut dst = dst.clone();\n+            dst.push_all_move(src.clone());\n+            assert_eq!(dst.len(), dst_len + src_len);\n+            assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n+        });\n+    }\n+\n+    #[bench]\n+    fn bench_push_all_move_0000_0000(b: &mut Bencher) {\n+        do_bench_push_all_move(b, 0, 0)\n     }\n \n     #[bench]\n-    fn bench_extend_0(b: &mut Bencher) {\n+    fn bench_push_all_move_0000_0010(b: &mut Bencher) {\n+        do_bench_push_all_move(b, 0, 10)\n+    }\n+\n+    #[bench]\n+    fn bench_push_all_move_0000_0100(b: &mut Bencher) {\n+        do_bench_push_all_move(b, 0, 100)\n+    }\n+\n+    #[bench]\n+    fn bench_push_all_move_0000_1000(b: &mut Bencher) {\n+        do_bench_push_all_move(b, 0, 1000)\n+    }\n+\n+    #[bench]\n+    fn bench_push_all_move_0010_0010(b: &mut Bencher) {\n+        do_bench_push_all_move(b, 10, 10)\n+    }\n+\n+    #[bench]\n+    fn bench_push_all_move_0100_0100(b: &mut Bencher) {\n+        do_bench_push_all_move(b, 100, 100)\n+    }\n+\n+    #[bench]\n+    fn bench_push_all_move_1000_1000(b: &mut Bencher) {\n+        do_bench_push_all_move(b, 1000, 1000)\n+    }\n+\n+    fn do_bench_clone(b: &mut Bencher, src_len: uint) {\n+        let src: Vec<uint> = FromIterator::from_iter(range(0, src_len));\n+\n+        b.bytes = src_len as u64;\n+\n         b.iter(|| {\n-            let v0: Vec<int> = vec!();\n-            let mut v1: Vec<int> = vec!(1, 2, 3, 4, 5);\n-            v1.extend(v0.move_iter());\n-            assert!(v1.as_slice() == [1, 2, 3, 4, 5]);\n-        })\n+            let dst = src.clone();\n+            assert_eq!(dst.len(), src_len);\n+            assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n+        });\n     }\n \n     #[bench]\n-    fn bench_extend_5(b: &mut Bencher) {\n+    fn bench_clone_0000(b: &mut Bencher) {\n+        do_bench_clone(b, 0)\n+    }\n+\n+    #[bench]\n+    fn bench_clone_0010(b: &mut Bencher) {\n+        do_bench_clone(b, 10)\n+    }\n+\n+    #[bench]\n+    fn bench_clone_0100(b: &mut Bencher) {\n+        do_bench_clone(b, 100)\n+    }\n+\n+    #[bench]\n+    fn bench_clone_1000(b: &mut Bencher) {\n+        do_bench_clone(b, 1000)\n+    }\n+\n+    fn do_bench_clone_from(b: &mut Bencher, dst_len: uint, src_len: uint) {\n+        let dst: Vec<uint> = FromIterator::from_iter(range(0, src_len));\n+        let src: Vec<uint> = FromIterator::from_iter(range(dst_len, dst_len + src_len));\n+\n+        b.bytes = src_len as u64;\n+\n         b.iter(|| {\n-            let v0: Vec<int> = vec!(1, 2, 3, 4, 5);\n-            let mut v1: Vec<int> = vec!(1, 2, 3, 4, 5);\n-            v1.extend(v0.move_iter());\n-            assert!(v1.as_slice() == [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]);\n-        })\n+            let mut dst = dst.clone();\n+            let src = src.clone();\n+            dst.clone_from(&src);\n+            assert_eq!(dst.len(), src_len);\n+            assert!(dst.iter().enumerate().all(|(i, x)| dst_len + i == *x));\n+        });\n+    }\n+\n+    #[bench]\n+    fn bench_clone_from_0000_0000(b: &mut Bencher) {\n+        do_bench_clone_from(b, 0, 0)\n+    }\n+\n+    #[bench]\n+    fn bench_clone_from_0000_0010(b: &mut Bencher) {\n+        do_bench_clone_from(b, 0, 10)\n+    }\n+\n+    #[bench]\n+    fn bench_clone_from_0000_0100(b: &mut Bencher) {\n+        do_bench_clone_from(b, 0, 100)\n+    }\n+\n+    #[bench]\n+    fn bench_clone_from_0000_1000(b: &mut Bencher) {\n+        do_bench_clone_from(b, 0, 1000)\n+    }\n+\n+    #[bench]\n+    fn bench_clone_from_0010_0010(b: &mut Bencher) {\n+        do_bench_clone_from(b, 10, 10)\n+    }\n+\n+    #[bench]\n+    fn bench_clone_from_0100_0100(b: &mut Bencher) {\n+        do_bench_clone_from(b, 100, 100)\n+    }\n+\n+    #[bench]\n+    fn bench_clone_from_1000_1000(b: &mut Bencher) {\n+        do_bench_clone_from(b, 1000, 1000)\n+    }\n+\n+    #[bench]\n+    fn bench_clone_from_0010_0100(b: &mut Bencher) {\n+        do_bench_clone_from(b, 10, 100)\n+    }\n+\n+    #[bench]\n+    fn bench_clone_from_0100_1000(b: &mut Bencher) {\n+        do_bench_clone_from(b, 100, 1000)\n+    }\n+\n+    #[bench]\n+    fn bench_clone_from_0010_0000(b: &mut Bencher) {\n+        do_bench_clone_from(b, 10, 0)\n+    }\n+\n+    #[bench]\n+    fn bench_clone_from_0100_0010(b: &mut Bencher) {\n+        do_bench_clone_from(b, 100, 10)\n+    }\n+\n+    #[bench]\n+    fn bench_clone_from_1000_0100(b: &mut Bencher) {\n+        do_bench_clone_from(b, 1000, 100)\n     }\n }"}]}