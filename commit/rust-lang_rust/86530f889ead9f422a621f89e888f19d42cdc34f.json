{"sha": "86530f889ead9f422a621f89e888f19d42cdc34f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NTMwZjg4OWVhZDlmNDIyYTYyMWY4OWU4ODhmMTlkNDJjZGMzNGY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-08T17:03:15Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-14T12:59:36Z"}, "message": "Use maybe_create_entry_wrapper again in jit mode\n\nThis simplifies the jit driver a lot", "tree": {"sha": "b616a8820be8ed670008835089569ae6b945f4dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b616a8820be8ed670008835089569ae6b945f4dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86530f889ead9f422a621f89e888f19d42cdc34f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86530f889ead9f422a621f89e888f19d42cdc34f", "html_url": "https://github.com/rust-lang/rust/commit/86530f889ead9f422a621f89e888f19d42cdc34f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86530f889ead9f422a621f89e888f19d42cdc34f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba8e610b269f90287aad1b5db0520bfd3118612e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba8e610b269f90287aad1b5db0520bfd3118612e", "html_url": "https://github.com/rust-lang/rust/commit/ba8e610b269f90287aad1b5db0520bfd3118612e"}], "stats": {"total": 102, "additions": 42, "deletions": 60}, "files": [{"sha": "2ad580d63303260482cde96548668fae1047488b", "filename": "src/driver/aot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86530f889ead9f422a621f89e888f19d42cdc34f/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86530f889ead9f422a621f89e888f19d42cdc34f/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=86530f889ead9f422a621f89e888f19d42cdc34f", "patch": "@@ -135,7 +135,7 @@ fn module_codegen(\n             }\n         }\n     }\n-    crate::main_shim::maybe_create_entry_wrapper(tcx, &mut module, &mut cx.unwind_context);\n+    crate::main_shim::maybe_create_entry_wrapper(tcx, &mut module, &mut cx.unwind_context, false);\n \n     let codegen_result = emit_module(\n         tcx,"}, {"sha": "6c15d6761238e97e244e7b3b04bae710f10843d8", "filename": "src/driver/jit.rs", "status": "modified", "additions": 19, "deletions": 52, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/86530f889ead9f422a621f89e888f19d42cdc34f/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86530f889ead9f422a621f89e888f19d42cdc34f/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=86530f889ead9f422a621f89e888f19d42cdc34f", "patch": "@@ -8,7 +8,6 @@ use std::os::raw::{c_char, c_int};\n use cranelift_codegen::binemit::{NullStackMapSink, NullTrapSink};\n use rustc_codegen_ssa::CrateInfo;\n use rustc_middle::mir::mono::MonoItem;\n-use rustc_session::config::EntryFnType;\n \n use cranelift_jit::{JITBuilder, JITModule};\n \n@@ -81,6 +80,7 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n     }\n \n     crate::allocator::codegen(tcx, &mut jit_module, &mut cx.unwind_context);\n+    crate::main_shim::maybe_create_entry_wrapper(tcx, &mut jit_module, &mut cx.unwind_context, true);\n \n     tcx.sess.abort_if_errors();\n \n@@ -105,57 +105,24 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n         assert!(tls_backend_config.borrow_mut().replace(backend_config).is_none())\n     });\n \n-    let (main_def_id, entry_ty) = tcx.entry_fn(LOCAL_CRATE).unwrap();\n-    let instance = Instance::mono(tcx, main_def_id.to_def_id()).polymorphize(tcx);\n-\n-    match entry_ty {\n-        EntryFnType::Main => {\n-            // FIXME set program arguments somehow\n-\n-            let main_sig = Signature {\n-                params: vec![],\n-                returns: vec![],\n-                call_conv: CallConv::triple_default(&crate::target_triple(tcx.sess)),\n-            };\n-            let main_func_id = jit_module\n-                .declare_function(tcx.symbol_name(instance).name, Linkage::Import, &main_sig)\n-                .unwrap();\n-            let finalized_main: *const u8 = jit_module.get_finalized_function(main_func_id);\n-\n-            CURRENT_MODULE.with(|current_module| {\n-                assert!(current_module.borrow_mut().replace(jit_module).is_none())\n-            });\n-\n-            let f: extern \"C\" fn() = unsafe { ::std::mem::transmute(finalized_main) };\n-            f();\n-            std::process::exit(0);\n-        }\n-        EntryFnType::Start => {\n-            let start_sig = Signature {\n-                params: vec![\n-                    AbiParam::new(jit_module.target_config().pointer_type()),\n-                    AbiParam::new(jit_module.target_config().pointer_type()),\n-                ],\n-                returns: vec![AbiParam::new(\n-                    jit_module.target_config().pointer_type(), /*isize*/\n-                )],\n-                call_conv: CallConv::triple_default(&crate::target_triple(tcx.sess)),\n-            };\n-            let start_func_id = jit_module\n-                .declare_function(tcx.symbol_name(instance).name, Linkage::Import, &start_sig)\n-                .unwrap();\n-            let finalized_start: *const u8 = jit_module.get_finalized_function(start_func_id);\n-\n-            CURRENT_MODULE.with(|current_module| {\n-                assert!(current_module.borrow_mut().replace(jit_module).is_none())\n-            });\n-\n-            let f: extern \"C\" fn(c_int, *const *const c_char) -> c_int =\n-                unsafe { ::std::mem::transmute(finalized_start) };\n-            let ret = f(args.len() as c_int, argv.as_ptr());\n-            std::process::exit(ret);\n-        }\n-    }\n+    let start_sig = Signature {\n+        params: vec![\n+            AbiParam::new(jit_module.target_config().pointer_type()),\n+            AbiParam::new(jit_module.target_config().pointer_type()),\n+        ],\n+        returns: vec![AbiParam::new(jit_module.target_config().pointer_type() /*isize*/)],\n+        call_conv: CallConv::triple_default(&crate::target_triple(tcx.sess)),\n+    };\n+    let start_func_id = jit_module.declare_function(\"main\", Linkage::Import, &start_sig).unwrap();\n+    let finalized_start: *const u8 = jit_module.get_finalized_function(start_func_id);\n+\n+    CURRENT_MODULE\n+        .with(|current_module| assert!(current_module.borrow_mut().replace(jit_module).is_none()));\n+\n+    let f: extern \"C\" fn(c_int, *const *const c_char) -> c_int =\n+        unsafe { ::std::mem::transmute(finalized_start) };\n+    let ret = f(args.len() as c_int, argv.as_ptr());\n+    std::process::exit(ret);\n }\n \n #[no_mangle]"}, {"sha": "ff386710cd17444a239d4dbfd50aafc8c21c6a6b", "filename": "src/main_shim.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/86530f889ead9f422a621f89e888f19d42cdc34f/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86530f889ead9f422a621f89e888f19d42cdc34f/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=86530f889ead9f422a621f89e888f19d42cdc34f", "patch": "@@ -10,8 +10,9 @@ pub(crate) fn maybe_create_entry_wrapper(\n     tcx: TyCtxt<'_>,\n     module: &mut impl Module,\n     unwind_context: &mut UnwindContext,\n+    ignore_lang_start_wrapper: bool,\n ) {\n-    let (main_def_id, use_start_lang_item) = match tcx.entry_fn(LOCAL_CRATE) {\n+    let (main_def_id, is_main_fn) = match tcx.entry_fn(LOCAL_CRATE) {\n         Some((def_id, entry_ty)) => (\n             def_id.to_def_id(),\n             match entry_ty {\n@@ -27,14 +28,22 @@ pub(crate) fn maybe_create_entry_wrapper(\n         return;\n     }\n \n-    create_entry_fn(tcx, module, unwind_context, main_def_id, use_start_lang_item);\n+    create_entry_fn(\n+        tcx,\n+        module,\n+        unwind_context,\n+        main_def_id,\n+        ignore_lang_start_wrapper,\n+        is_main_fn,\n+    );\n \n     fn create_entry_fn(\n         tcx: TyCtxt<'_>,\n         m: &mut impl Module,\n         unwind_context: &mut UnwindContext,\n         rust_main_def_id: DefId,\n-        use_start_lang_item: bool,\n+        ignore_lang_start_wrapper: bool,\n+        is_main_fn: bool,\n     ) {\n         let main_ret_ty = tcx.fn_sig(rust_main_def_id).output();\n         // Given that `main()` has no arguments,\n@@ -74,7 +83,12 @@ pub(crate) fn maybe_create_entry_wrapper(\n \n             let main_func_ref = m.declare_func_in_func(main_func_id, &mut bcx.func);\n \n-            let call_inst = if use_start_lang_item {\n+            let result = if is_main_fn && ignore_lang_start_wrapper {\n+                // regular main fn, but ignoring #[lang = \"start\"] as we are running in the jit\n+                // FIXME set program arguments somehow\n+                bcx.ins().call(main_func_ref, &[]);\n+                bcx.ins().iconst(m.target_config().pointer_type(), 0)\n+            } else if is_main_fn {\n                 let start_def_id = tcx.require_lang_item(LangItem::Start, None);\n                 let start_instance = Instance::resolve(\n                     tcx,\n@@ -90,13 +104,14 @@ pub(crate) fn maybe_create_entry_wrapper(\n                 let main_val = bcx.ins().func_addr(m.target_config().pointer_type(), main_func_ref);\n \n                 let func_ref = m.declare_func_in_func(start_func_id, &mut bcx.func);\n-                bcx.ins().call(func_ref, &[main_val, arg_argc, arg_argv])\n+                let call_inst = bcx.ins().call(func_ref, &[main_val, arg_argc, arg_argv]);\n+                bcx.inst_results(call_inst)[0]\n             } else {\n                 // using user-defined start fn\n-                bcx.ins().call(main_func_ref, &[arg_argc, arg_argv])\n+                let call_inst = bcx.ins().call(main_func_ref, &[arg_argc, arg_argv]);\n+                bcx.inst_results(call_inst)[0]\n             };\n \n-            let result = bcx.inst_results(call_inst)[0];\n             bcx.ins().return_(&[result]);\n             bcx.seal_all_blocks();\n             bcx.finalize();"}]}