{"sha": "959e483fb705e99097a85ce42371bd57b78bd180", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1OWU0ODNmYjcwNWU5OTA5N2E4NWNlNDIzNzFiZDU3Yjc4YmQxODA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-06T06:00:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-06T06:00:40Z"}, "message": "auto merge of #5235 : yjh0502/rust/io_float, r=graydon\n\nWhen parsing bytes from a wire, there is a need to parse floating-point bytes to float values ([u8*4] to f32, [u8*8] to f64). This can be done via cast::transmute, but there is no way to do it safely.\r\n\r\nIt's quite common, so I think I't better to support it in core library.", "tree": {"sha": "3b4e83a1941021c7ec5f9c335698a1629e3cf82d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b4e83a1941021c7ec5f9c335698a1629e3cf82d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/959e483fb705e99097a85ce42371bd57b78bd180", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/959e483fb705e99097a85ce42371bd57b78bd180", "html_url": "https://github.com/rust-lang/rust/commit/959e483fb705e99097a85ce42371bd57b78bd180", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/959e483fb705e99097a85ce42371bd57b78bd180/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "165cc9e2c424b674a9e6fc88cc7c86ebc7d55b98", "url": "https://api.github.com/repos/rust-lang/rust/commits/165cc9e2c424b674a9e6fc88cc7c86ebc7d55b98", "html_url": "https://github.com/rust-lang/rust/commit/165cc9e2c424b674a9e6fc88cc7c86ebc7d55b98"}, {"sha": "ce23c8c0cfc6aee3eae7d0287651ef7bcd9c6b9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce23c8c0cfc6aee3eae7d0287651ef7bcd9c6b9f", "html_url": "https://github.com/rust-lang/rust/commit/ce23c8c0cfc6aee3eae7d0287651ef7bcd9c6b9f"}], "stats": {"total": 108, "additions": 108, "deletions": 0}, "files": [{"sha": "27456fbe160435610a851f25df282f5bccb5c0a4", "filename": "src/libcore/io.rs", "status": "modified", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/959e483fb705e99097a85ce42371bd57b78bd180/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959e483fb705e99097a85ce42371bd57b78bd180/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=959e483fb705e99097a85ce42371bd57b78bd180", "patch": "@@ -144,6 +144,12 @@ pub trait ReaderUtil {\n     /// Read a big-endian i16 (2 bytes).\n     fn read_be_i16(&self) -> i16;\n \n+    /// Read a big-endian IEEE754 double-precision floating-point (8 bytes).\n+    fn read_be_f64(&self) -> f64;\n+\n+    /// Read a big-endian IEEE754 single-precision floating-point (4 bytes).\n+    fn read_be_f32(&self) -> f32;\n+\n     /// Read a little-endian u64 (8 bytes).\n     fn read_le_u64(&self) -> u64;\n \n@@ -162,6 +168,14 @@ pub trait ReaderUtil {\n     /// Read a litle-endian i16 (2 bytes).\n     fn read_le_i16(&self) -> i16;\n \n+    /// Read a litten-endian IEEE754 double-precision floating-point\n+    /// (8 bytes).\n+    fn read_le_f64(&self) -> f64;\n+\n+    /// Read a litten-endian IEEE754 single-precision floating-point\n+    /// (4 bytes).\n+    fn read_le_f32(&self) -> f32;\n+\n     /// Read a u8 (1 byte).\n     fn read_u8(&self) -> u8;\n \n@@ -368,6 +382,18 @@ impl<T:Reader> ReaderUtil for T {\n         self.read_be_int_n(2) as i16\n     }\n \n+    fn read_be_f64(&self) -> f64 {\n+        unsafe {\n+            cast::transmute::<u64, f64>(self.read_be_u64())\n+        }\n+    }\n+\n+    fn read_be_f32(&self) -> f32 {\n+        unsafe {\n+            cast::transmute::<u32, f32>(self.read_be_u32())\n+        }\n+    }\n+\n     fn read_le_u64(&self) -> u64 {\n         self.read_le_uint_n(8) as u64\n     }\n@@ -392,6 +418,18 @@ impl<T:Reader> ReaderUtil for T {\n         self.read_le_int_n(2) as i16\n     }\n \n+    fn read_le_f64(&self) -> f64 {\n+        unsafe {\n+            cast::transmute::<u64, f64>(self.read_le_u64())\n+        }\n+    }\n+\n+    fn read_le_f32(&self) -> f32 {\n+        unsafe {\n+            cast::transmute::<u32, f32>(self.read_le_u32())\n+        }\n+    }\n+\n     fn read_u8(&self) -> u8 {\n         self.read_byte() as u8\n     }\n@@ -874,6 +912,12 @@ pub trait WriterUtil {\n     /// Write a big-endian i16 (2 bytes).\n     fn write_be_i16(&self, n: i16);\n \n+    /// Write a big-endian IEEE754 double-precision floating-point (8 bytes).\n+    fn write_be_f64(&self, f: f64);\n+\n+    /// Write a big-endian IEEE754 single-precision floating-point (4 bytes).\n+    fn write_be_f32(&self, f: f32);\n+\n     /// Write a little-endian u64 (8 bytes).\n     fn write_le_u64(&self, n: u64);\n \n@@ -892,6 +936,14 @@ pub trait WriterUtil {\n     /// Write a little-endian i16 (2 bytes).\n     fn write_le_i16(&self, n: i16);\n \n+    /// Write a little-endian IEEE754 double-precision floating-point\n+    /// (8 bytes).\n+    fn write_le_f64(&self, f: f64);\n+\n+    /// Write a litten-endian IEEE754 single-precision floating-point\n+    /// (4 bytes).\n+    fn write_le_f32(&self, f: f32);\n+\n     /// Write a u8 (1 byte).\n     fn write_u8(&self, n: u8);\n \n@@ -948,6 +1000,16 @@ impl<T:Writer> WriterUtil for T {\n     fn write_be_i16(&self, n: i16) {\n         u64_to_be_bytes(n as u64, 2u, |v| self.write(v))\n     }\n+    fn write_be_f64(&self, f:f64) {\n+        unsafe {\n+            self.write_be_u64(cast::transmute(f))\n+        }\n+    }\n+    fn write_be_f32(&self, f:f32) {\n+        unsafe {\n+            self.write_be_u32(cast::transmute(f))\n+        }\n+    }\n     fn write_le_u64(&self, n: u64) {\n         u64_to_le_bytes(n, 8u, |v| self.write(v))\n     }\n@@ -966,9 +1028,20 @@ impl<T:Writer> WriterUtil for T {\n     fn write_le_i16(&self, n: i16) {\n         u64_to_le_bytes(n as u64, 2u, |v| self.write(v))\n     }\n+    fn write_le_f64(&self, f:f64) {\n+        unsafe {\n+            self.write_le_u64(cast::transmute(f))\n+        }\n+    }\n+    fn write_le_f32(&self, f:f32) {\n+        unsafe {\n+            self.write_le_u32(cast::transmute(f))\n+        }\n+    }\n \n     fn write_u8(&self, n: u8) { self.write([n]) }\n     fn write_i8(&self, n: i8) { self.write([n as u8]) }\n+\n }\n \n #[allow(non_implicitly_copyable_typarams)]\n@@ -1421,6 +1494,41 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    fn test_read_f32() {\n+        let path = Path(\"tmp/lib-io-test-read-f32.tmp\");\n+        //big-endian floating-point 8.1250\n+        let buf = ~[0x41, 0x02, 0x00, 0x00];\n+\n+        {\n+            let file = io::file_writer(&path, [io::Create]).get();\n+            file.write(buf);\n+        }\n+\n+        {\n+            let file = io::file_reader(&path).get();\n+            let f = file.read_be_f32();\n+            assert f == 8.1250;\n+        }\n+    }\n+\n+#[test]\n+    fn test_read_write_f32() {\n+        let path = Path(\"tmp/lib-io-test-read-write-f32.tmp\");\n+        let f:f32 = 8.1250;\n+\n+        {\n+            let file = io::file_writer(&path, [io::Create]).get();\n+            file.write_be_f32(f);\n+            file.write_le_f32(f);\n+        }\n+\n+        {\n+            let file = io::file_reader(&path).get();\n+            assert file.read_be_f32() == 8.1250;\n+            assert file.read_le_f32() == 8.1250;\n+        }\n+    }\n }\n \n //"}]}