{"sha": "5a5f3a980c0d2afd55f2162300339471378e341f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNWYzYTk4MGMwZDJhZmQ1NWYyMTYyMzAwMzM5NDcxMzc4ZTM0MWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-07T13:57:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-07T13:57:24Z"}, "message": "Auto merge of #81853 - GuillaumeGomez:rollup-xzh1z4v, r=GuillaumeGomez\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #81526 (btree: use Option's unwrap_unchecked())\n - #81742 (Add a note about the correctness and the effect on unsafe code to the `ExactSizeIterator` docs)\n - #81830 (Add long error explanation for E0542)\n - #81835 (Improve long explanation for E0546)\n - #81843 (Add regression test for #29821)\n\nFailed merges:\n\n - #81836 (Add long explanation for E0547)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "f37be80d51410721e381e20574d6acc5ebc4553b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f37be80d51410721e381e20574d6acc5ebc4553b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a5f3a980c0d2afd55f2162300339471378e341f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a5f3a980c0d2afd55f2162300339471378e341f", "html_url": "https://github.com/rust-lang/rust/commit/5a5f3a980c0d2afd55f2162300339471378e341f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a5f3a980c0d2afd55f2162300339471378e341f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae00b62ceb7eaf1f02f5289ab233bf7e0e8060d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae00b62ceb7eaf1f02f5289ab233bf7e0e8060d5", "html_url": "https://github.com/rust-lang/rust/commit/ae00b62ceb7eaf1f02f5289ab233bf7e0e8060d5"}, {"sha": "9a82417a853ce6a90c2f5d3eb90436247952dfaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a82417a853ce6a90c2f5d3eb90436247952dfaa", "html_url": "https://github.com/rust-lang/rust/commit/9a82417a853ce6a90c2f5d3eb90436247952dfaa"}], "stats": {"total": 131, "additions": 96, "deletions": 35}, "files": [{"sha": "849ef18fb90cbf4b7f0a39b99de7fc34cdd40da9", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5f3a980c0d2afd55f2162300339471378e341f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5f3a980c0d2afd55f2162300339471378e341f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=5a5f3a980c0d2afd55f2162300339471378e341f", "patch": "@@ -285,6 +285,7 @@ E0537: include_str!(\"./error_codes/E0537.md\"),\n E0538: include_str!(\"./error_codes/E0538.md\"),\n E0539: include_str!(\"./error_codes/E0539.md\"),\n E0541: include_str!(\"./error_codes/E0541.md\"),\n+E0542: include_str!(\"./error_codes/E0542.md\"),\n E0546: include_str!(\"./error_codes/E0546.md\"),\n E0550: include_str!(\"./error_codes/E0550.md\"),\n E0551: include_str!(\"./error_codes/E0551.md\"),\n@@ -602,7 +603,6 @@ E0781: include_str!(\"./error_codes/E0781.md\"),\n     E0523,\n //  E0526, // shuffle indices are not constant\n //  E0540, // multiple rustc_deprecated attributes\n-    E0542, // missing 'since'\n     E0543, // missing 'reason'\n     E0544, // multiple stability levels\n     E0545, // incorrect 'issue'"}, {"sha": "dbbc34a71be2c5d2cb366f1ccbdcd78c5ac1ffb4", "filename": "compiler/rustc_error_codes/src/error_codes/E0542.md", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5a5f3a980c0d2afd55f2162300339471378e341f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0542.md", "raw_url": "https://github.com/rust-lang/rust/raw/5a5f3a980c0d2afd55f2162300339471378e341f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0542.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0542.md?ref=5a5f3a980c0d2afd55f2162300339471378e341f", "patch": "@@ -0,0 +1,47 @@\n+The `since` value is missing in a stability attribute.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0542\n+#![feature(staged_api)]\n+#![stable(since = \"1.0.0\", feature = \"test\")]\n+\n+#[stable(feature = \"_stable_fn\")] // invalid\n+fn _stable_fn() {}\n+\n+#[rustc_const_stable(feature = \"_stable_const_fn\")] // invalid\n+fn _stable_const_fn() {}\n+\n+#[stable(feature = \"_deprecated_fn\", since = \"0.1.0\")]\n+#[rustc_deprecated(\n+    reason = \"explanation for deprecation\"\n+)] // invalid\n+fn _deprecated_fn() {}\n+```\n+\n+To fix the issue you need to provide the `since` field.\n+\n+```\n+#![feature(staged_api)]\n+#![stable(since = \"1.0.0\", feature = \"test\")]\n+\n+#[stable(feature = \"_stable_fn\", since = \"1.0.0\")] // ok!\n+fn _stable_fn() {}\n+\n+#[rustc_const_stable(feature = \"_stable_const_fn\", since = \"1.0.0\")] // ok!\n+fn _stable_const_fn() {}\n+\n+#[stable(feature = \"_deprecated_fn\", since = \"0.1.0\")]\n+#[rustc_deprecated(\n+    since = \"1.0.0\",\n+    reason = \"explanation for deprecation\"\n+)] // ok!\n+fn _deprecated_fn() {}\n+```\n+\n+See the [How Rust is Made and \u201cNightly Rust\u201d][how-rust-made-nightly] appendix\n+of the Book and the [Stability attributes][stability-attributes] section of the\n+Rustc Dev Guide for more details.\n+\n+[how-rust-made-nightly]: https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\n+[stability-attributes]: https://rustc-dev-guide.rust-lang.org/stability.html"}, {"sha": "0073357b5ea847982e9b7eae91c8bdc0f6c356ec", "filename": "compiler/rustc_error_codes/src/error_codes/E0546.md", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5a5f3a980c0d2afd55f2162300339471378e341f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0546.md", "raw_url": "https://github.com/rust-lang/rust/raw/5a5f3a980c0d2afd55f2162300339471378e341f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0546.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0546.md?ref=5a5f3a980c0d2afd55f2162300339471378e341f", "patch": "@@ -1,4 +1,4 @@\n-A feature name is missing.\n+The `feature` value is missing in a stability attribute.\n \n Erroneous code example:\n \n@@ -13,7 +13,7 @@ fn unstable_fn() {}\n fn stable_fn() {}\n ```\n \n-To fix the issue you need to provide a feature name.\n+To fix the issue you need to provide the `feature` field.\n \n ```\n #![feature(staged_api)]\n@@ -25,3 +25,10 @@ fn unstable_fn() {}\n #[stable(feature = \"stable_fn\", since = \"1.0.0\")] // ok!\n fn stable_fn() {}\n ```\n+\n+See the [How Rust is Made and \u201cNightly Rust\u201d][how-rust-made-nightly] appendix\n+of the Book and the [Stability attributes][stability-attributes] section of the\n+Rustc Dev Guide for more details.\n+\n+[how-rust-made-nightly]: https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\n+[stability-attributes]: https://rustc-dev-guide.rust-lang.org/stability.html"}, {"sha": "8fb9198a7cb250565a80feabfd3759183298e793", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5a5f3a980c0d2afd55f2162300339471378e341f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5f3a980c0d2afd55f2162300339471378e341f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=5a5f3a980c0d2afd55f2162300339471378e341f", "patch": "@@ -11,7 +11,6 @@ use core::ptr;\n use super::borrow::DormantMutRef;\n use super::node::{self, marker, ForceResult::*, Handle, NodeRef, Root};\n use super::search::SearchResult::*;\n-use super::unwrap_unchecked;\n \n mod entry;\n pub use entry::{Entry, OccupiedEntry, VacantEntry};\n@@ -1433,7 +1432,7 @@ impl<K, V> Drop for IntoIter<K, V> {\n \n                 unsafe {\n                     let mut node =\n-                        unwrap_unchecked(ptr::read(&self.0.front)).into_node().forget_type();\n+                        ptr::read(&self.0.front).unwrap_unchecked().into_node().forget_type();\n                     while let Some(parent) = node.deallocate_and_ascend() {\n                         node = parent.into_node().forget_type();\n                     }\n@@ -1758,7 +1757,7 @@ impl<'a, K, V> Range<'a, K, V> {\n     }\n \n     unsafe fn next_unchecked(&mut self) -> (&'a K, &'a V) {\n-        unsafe { unwrap_unchecked(self.front.as_mut()).next_unchecked() }\n+        unsafe { self.front.as_mut().unwrap_unchecked().next_unchecked() }\n     }\n }\n \n@@ -1847,7 +1846,7 @@ impl<'a, K, V> DoubleEndedIterator for Range<'a, K, V> {\n \n impl<'a, K, V> Range<'a, K, V> {\n     unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a V) {\n-        unsafe { unwrap_unchecked(self.back.as_mut()).next_back_unchecked() }\n+        unsafe { self.back.as_mut().unwrap_unchecked().next_back_unchecked() }\n     }\n }\n \n@@ -1893,7 +1892,7 @@ impl<'a, K, V> RangeMut<'a, K, V> {\n     }\n \n     unsafe fn next_unchecked(&mut self) -> (&'a K, &'a mut V) {\n-        unsafe { unwrap_unchecked(self.front.as_mut()).next_unchecked() }\n+        unsafe { self.front.as_mut().unwrap_unchecked().next_unchecked() }\n     }\n \n     /// Returns an iterator of references over the remaining items.\n@@ -1923,7 +1922,7 @@ impl<K, V> FusedIterator for RangeMut<'_, K, V> {}\n \n impl<'a, K, V> RangeMut<'a, K, V> {\n     unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a mut V) {\n-        unsafe { unwrap_unchecked(self.back.as_mut()).next_back_unchecked() }\n+        unsafe { self.back.as_mut().unwrap_unchecked().next_back_unchecked() }\n     }\n }\n "}, {"sha": "cf91c17b511ccc350951cff510908ec4b7315195", "filename": "library/alloc/src/collections/btree/mod.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5a5f3a980c0d2afd55f2162300339471378e341f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5f3a980c0d2afd55f2162300339471378e341f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs?ref=5a5f3a980c0d2afd55f2162300339471378e341f", "patch": "@@ -19,22 +19,6 @@ trait Recover<Q: ?Sized> {\n     fn replace(&mut self, key: Self::Key) -> Option<Self::Key>;\n }\n \n-/// Same purpose as `Option::unwrap` but doesn't always guarantee a panic\n-/// if the option contains no value.\n-/// SAFETY: the caller must ensure that the option contains a value.\n-#[inline(always)]\n-pub unsafe fn unwrap_unchecked<T>(val: Option<T>) -> T {\n-    val.unwrap_or_else(|| {\n-        if cfg!(debug_assertions) {\n-            panic!(\"'unchecked' unwrap on None in BTreeMap\");\n-        } else {\n-            unsafe {\n-                core::intrinsics::unreachable();\n-            }\n-        }\n-    })\n-}\n-\n #[cfg(test)]\n /// XorShiftRng\n struct DeterministicRng {"}, {"sha": "1ef2a572ddd91e40d85004681da877c12c09b5cf", "filename": "library/alloc/src/collections/btree/navigate.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5a5f3a980c0d2afd55f2162300339471378e341f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5f3a980c0d2afd55f2162300339471378e341f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs?ref=5a5f3a980c0d2afd55f2162300339471378e341f", "patch": "@@ -6,7 +6,6 @@ use core::ptr;\n \n use super::node::{marker, ForceResult::*, Handle, NodeRef};\n use super::search::SearchResult;\n-use super::unwrap_unchecked;\n \n /// Finds the leaf edges delimiting a specified range in or underneath a node.\n ///\n@@ -310,7 +309,7 @@ macro_rules! def_next_kv_uncheched_dealloc {\n                     Err(last_edge) => {\n                         unsafe {\n                             let parent_edge = last_edge.into_node().deallocate_and_ascend();\n-                            unwrap_unchecked(parent_edge).forget_node_type()\n+                            parent_edge.unwrap_unchecked().forget_node_type()\n                         }\n                     }\n                 }\n@@ -331,7 +330,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Ed\n     pub unsafe fn next_unchecked(&mut self) -> (&'a K, &'a V) {\n         super::mem::replace(self, |leaf_edge| {\n             let kv = leaf_edge.next_kv();\n-            let kv = unsafe { unwrap_unchecked(kv.ok()) };\n+            let kv = unsafe { kv.ok().unwrap_unchecked() };\n             (kv.next_leaf_edge(), kv.into_kv())\n         })\n     }\n@@ -344,7 +343,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Ed\n     pub unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a V) {\n         super::mem::replace(self, |leaf_edge| {\n             let kv = leaf_edge.next_back_kv();\n-            let kv = unsafe { unwrap_unchecked(kv.ok()) };\n+            let kv = unsafe { kv.ok().unwrap_unchecked() };\n             (kv.next_back_leaf_edge(), kv.into_kv())\n         })\n     }\n@@ -359,7 +358,7 @@ impl<'a, K, V> Handle<NodeRef<marker::ValMut<'a>, K, V, marker::Leaf>, marker::E\n     pub unsafe fn next_unchecked(&mut self) -> (&'a K, &'a mut V) {\n         let kv = super::mem::replace(self, |leaf_edge| {\n             let kv = leaf_edge.next_kv();\n-            let kv = unsafe { unwrap_unchecked(kv.ok()) };\n+            let kv = unsafe { kv.ok().unwrap_unchecked() };\n             (unsafe { ptr::read(&kv) }.next_leaf_edge(), kv)\n         });\n         // Doing this last is faster, according to benchmarks.\n@@ -374,7 +373,7 @@ impl<'a, K, V> Handle<NodeRef<marker::ValMut<'a>, K, V, marker::Leaf>, marker::E\n     pub unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a mut V) {\n         let kv = super::mem::replace(self, |leaf_edge| {\n             let kv = leaf_edge.next_back_kv();\n-            let kv = unsafe { unwrap_unchecked(kv.ok()) };\n+            let kv = unsafe { kv.ok().unwrap_unchecked() };\n             (unsafe { ptr::read(&kv) }.next_back_leaf_edge(), kv)\n         });\n         // Doing this last is faster, according to benchmarks."}, {"sha": "9cd016fa62f0ecc8a6791c17fa67694f73919a93", "filename": "library/alloc/src/collections/btree/remove.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a5f3a980c0d2afd55f2162300339471378e341f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5f3a980c0d2afd55f2162300339471378e341f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs?ref=5a5f3a980c0d2afd55f2162300339471378e341f", "patch": "@@ -1,6 +1,5 @@\n use super::map::MIN_LEN;\n use super::node::{marker, ForceResult::*, Handle, LeftOrRight::*, NodeRef};\n-use super::unwrap_unchecked;\n \n impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::KV> {\n     /// Removes a key-value pair from the tree, and returns that pair, as well as\n@@ -77,12 +76,12 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>,\n         // the element we were asked to remove. Prefer the left adjacent KV,\n         // for the reasons listed in `choose_parent_kv`.\n         let left_leaf_kv = self.left_edge().descend().last_leaf_edge().left_kv();\n-        let left_leaf_kv = unsafe { unwrap_unchecked(left_leaf_kv.ok()) };\n+        let left_leaf_kv = unsafe { left_leaf_kv.ok().unwrap_unchecked() };\n         let (left_kv, left_hole) = left_leaf_kv.remove_leaf_kv(handle_emptied_internal_root);\n \n         // The internal node may have been stolen from or merged. Go back right\n         // to find where the original KV ended up.\n-        let mut internal = unsafe { unwrap_unchecked(left_hole.next_kv().ok()) };\n+        let mut internal = unsafe { left_hole.next_kv().ok().unwrap_unchecked() };\n         let old_kv = internal.replace_kv(left_kv.0, left_kv.1);\n         let pos = internal.next_leaf_edge();\n         (old_kv, pos)"}, {"sha": "99c42a4ba44235a36e010d7af83aab682b24405d", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a5f3a980c0d2afd55f2162300339471378e341f/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5f3a980c0d2afd55f2162300339471378e341f/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=5a5f3a980c0d2afd55f2162300339471378e341f", "patch": "@@ -111,6 +111,7 @@\n #![feature(nll)]\n #![feature(nonnull_slice_from_raw_parts)]\n #![feature(auto_traits)]\n+#![feature(option_result_unwrap_unchecked)]\n #![feature(or_patterns)]\n #![feature(pattern)]\n #![feature(ptr_internals)]"}, {"sha": "167db3359f240de67031851341ee8edbe1fb6dff", "filename": "library/core/src/iter/traits/exact_size.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a5f3a980c0d2afd55f2162300339471378e341f/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fexact_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5f3a980c0d2afd55f2162300339471378e341f/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fexact_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fexact_size.rs?ref=5a5f3a980c0d2afd55f2162300339471378e341f", "patch": "@@ -13,6 +13,12 @@\n /// implement it. However, you may be able to provide a more performant\n /// implementation than the default, so overriding it in this case makes sense.\n ///\n+/// Note that this trait is a safe trait and as such does *not* and *cannot*\n+/// guarantee that the returned length is correct. This means that `unsafe`\n+/// code **must not** rely on the correctness of [`Iterator::size_hint`]. The\n+/// unstable and unsafe [`TrustedLen`](super::marker::TrustedLen) trait gives\n+/// this additional guarantee.\n+///\n /// [`len`]: ExactSizeIterator::len\n ///\n /// # Examples"}, {"sha": "54be3afb59d0aab6127ae87fbbff1486bff35424", "filename": "src/test/ui/issues/issue-29821.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5a5f3a980c0d2afd55f2162300339471378e341f/src%2Ftest%2Fui%2Fissues%2Fissue-29821.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5f3a980c0d2afd55f2162300339471378e341f/src%2Ftest%2Fui%2Fissues%2Fissue-29821.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29821.rs?ref=5a5f3a980c0d2afd55f2162300339471378e341f", "patch": "@@ -0,0 +1,19 @@\n+// build-pass\n+\n+pub trait Foo {\n+    type FooAssoc;\n+}\n+\n+pub struct Bar<F: Foo> {\n+    id: F::FooAssoc\n+}\n+\n+pub struct Baz;\n+\n+impl Foo for Baz {\n+    type FooAssoc = usize;\n+}\n+\n+static mut MY_FOO: Bar<Baz> = Bar { id: 0 };\n+\n+fn main() {}"}, {"sha": "151b96b8b5a66689c1847c831c1f27b9238f5b08", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a5f3a980c0d2afd55f2162300339471378e341f/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a5f3a980c0d2afd55f2162300339471378e341f/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr?ref=5a5f3a980c0d2afd55f2162300339471378e341f", "patch": "@@ -116,5 +116,5 @@ LL | #[rustc_deprecated(since = \"a\", reason = \"text\")]\n \n error: aborting due to 19 previous errors\n \n-Some errors have detailed explanations: E0539, E0541, E0546, E0550.\n+Some errors have detailed explanations: E0539, E0541, E0542, E0546, E0550.\n For more information about an error, try `rustc --explain E0539`."}]}