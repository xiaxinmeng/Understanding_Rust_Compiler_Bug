{"sha": "afb8cba5fc611a652a674b44f1bbf26d200e1aa9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYjhjYmE1ZmM2MTFhNjUyYTY3NGI0NGYxYmJmMjZkMjAwZTFhYTk=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-28T16:15:40Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-28T16:15:40Z"}, "message": "Move hir::Lit -> ty::Const conversion into its own file", "tree": {"sha": "ff3df6be838453307f553cc56f29f4150be75644", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff3df6be838453307f553cc56f29f4150be75644"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afb8cba5fc611a652a674b44f1bbf26d200e1aa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afb8cba5fc611a652a674b44f1bbf26d200e1aa9", "html_url": "https://github.com/rust-lang/rust/commit/afb8cba5fc611a652a674b44f1bbf26d200e1aa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afb8cba5fc611a652a674b44f1bbf26d200e1aa9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40412dc09a0fc4a4d2a38709614755b7b4be23da", "url": "https://api.github.com/repos/rust-lang/rust/commits/40412dc09a0fc4a4d2a38709614755b7b4be23da", "html_url": "https://github.com/rust-lang/rust/commit/40412dc09a0fc4a4d2a38709614755b7b4be23da"}], "stats": {"total": 207, "additions": 106, "deletions": 101}, "files": [{"sha": "c98ef31c2bae22b958f357b969e54be0948ce89c", "filename": "src/librustc_mir/hair/constant.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/afb8cba5fc611a652a674b44f1bbf26d200e1aa9/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afb8cba5fc611a652a674b44f1bbf26d200e1aa9/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fconstant.rs?ref=afb8cba5fc611a652a674b44f1bbf26d200e1aa9", "patch": "@@ -0,0 +1,102 @@\n+use syntax::ast;\n+use rustc::ty::{self, Ty, TyCtxt, ParamEnv};\n+use syntax_pos::symbol::Symbol;\n+use rustc::mir::interpret::{ConstValue, Scalar};\n+\n+#[derive(PartialEq)]\n+crate enum LitToConstError {\n+    UnparseableFloat,\n+    Reported,\n+}\n+\n+crate fn lit_to_const<'a, 'gcx, 'tcx>(\n+    lit: &'tcx ast::LitKind,\n+    tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+    ty: Ty<'tcx>,\n+    neg: bool,\n+) -> Result<&'tcx ty::Const<'tcx>, LitToConstError> {\n+    use syntax::ast::*;\n+\n+    let trunc = |n| {\n+        let param_ty = ParamEnv::reveal_all().and(tcx.lift_to_global(&ty).unwrap());\n+        let width = tcx.layout_of(param_ty).map_err(|_| LitToConstError::Reported)?.size;\n+        trace!(\"trunc {} with size {} and shift {}\", n, width.bits(), 128 - width.bits());\n+        let shift = 128 - width.bits();\n+        let result = (n << shift) >> shift;\n+        trace!(\"trunc result: {}\", result);\n+        Ok(ConstValue::Scalar(Scalar::Bits {\n+            bits: result,\n+            size: width.bytes() as u8,\n+        }))\n+    };\n+\n+    use rustc::mir::interpret::*;\n+    let lit = match *lit {\n+        LitKind::Str(ref s, _) => {\n+            let s = s.as_str();\n+            let id = tcx.allocate_bytes(s.as_bytes());\n+            ConstValue::new_slice(Scalar::Ptr(id.into()), s.len() as u64, &tcx)\n+        },\n+        LitKind::ByteStr(ref data) => {\n+            let id = tcx.allocate_bytes(data);\n+            ConstValue::Scalar(Scalar::Ptr(id.into()))\n+        },\n+        LitKind::Byte(n) => ConstValue::Scalar(Scalar::Bits {\n+            bits: n as u128,\n+            size: 1,\n+        }),\n+        LitKind::Int(n, _) if neg => {\n+            let n = n as i128;\n+            let n = n.overflowing_neg().0;\n+            trunc(n as u128)?\n+        },\n+        LitKind::Int(n, _) => trunc(n)?,\n+        LitKind::Float(n, fty) => {\n+            parse_float(n, fty, neg).map_err(|_| LitToConstError::UnparseableFloat)?\n+        }\n+        LitKind::FloatUnsuffixed(n) => {\n+            let fty = match ty.sty {\n+                ty::Float(fty) => fty,\n+                _ => bug!()\n+            };\n+            parse_float(n, fty, neg).map_err(|_| LitToConstError::UnparseableFloat)?\n+        }\n+        LitKind::Bool(b) => ConstValue::Scalar(Scalar::from_bool(b)),\n+        LitKind::Char(c) => ConstValue::Scalar(Scalar::from_char(c)),\n+    };\n+    Ok(ty::Const::from_const_value(tcx, lit, ty))\n+}\n+\n+fn parse_float<'tcx>(\n+    num: Symbol,\n+    fty: ast::FloatTy,\n+    neg: bool,\n+) -> Result<ConstValue<'tcx>, ()> {\n+    let num = num.as_str();\n+    use rustc_apfloat::ieee::{Single, Double};\n+    use rustc_apfloat::Float;\n+    let (bits, size) = match fty {\n+        ast::FloatTy::F32 => {\n+            num.parse::<f32>().map_err(|_| ())?;\n+            let mut f = num.parse::<Single>().unwrap_or_else(|e| {\n+                panic!(\"apfloat::ieee::Single failed to parse `{}`: {:?}\", num, e)\n+            });\n+            if neg {\n+                f = -f;\n+            }\n+            (f.to_bits(), 4)\n+        }\n+        ast::FloatTy::F64 => {\n+            num.parse::<f64>().map_err(|_| ())?;\n+            let mut f = num.parse::<Double>().unwrap_or_else(|e| {\n+                panic!(\"apfloat::ieee::Single failed to parse `{}`: {:?}\", num, e)\n+            });\n+            if neg {\n+                f = -f;\n+            }\n+            (f.to_bits(), 8)\n+        }\n+    };\n+\n+    Ok(ConstValue::Scalar(Scalar::Bits { bits, size }))\n+}"}, {"sha": "c414088b653221c099ffb5f80ec38c4882fa9035", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afb8cba5fc611a652a674b44f1bbf26d200e1aa9/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afb8cba5fc611a652a674b44f1bbf26d200e1aa9/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=afb8cba5fc611a652a674b44f1bbf26d200e1aa9", "patch": "@@ -31,7 +31,7 @@ use syntax::attr;\n use syntax::symbol::Symbol;\n use rustc::hir;\n use rustc_data_structures::sync::Lrc;\n-use hair::pattern::{lit_to_const, LitToConstError};\n+use hair::constant::{lit_to_const, LitToConstError};\n \n #[derive(Clone)]\n pub struct Cx<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {"}, {"sha": "e604b118eacf1f8f445acd5553806bf1ef9dc8e8", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/afb8cba5fc611a652a674b44f1bbf26d200e1aa9/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afb8cba5fc611a652a674b44f1bbf26d200e1aa9/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=afb8cba5fc611a652a674b44f1bbf26d200e1aa9", "patch": "@@ -26,6 +26,7 @@ use syntax_pos::Span;\n use self::cx::Cx;\n \n pub mod cx;\n+mod constant;\n \n pub mod pattern;\n pub use self::pattern::{BindingMode, Pattern, PatternKind, FieldPattern};"}, {"sha": "61d8297fec90e5f59202a761c5be89df8603f503", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 2, "deletions": 100, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/afb8cba5fc611a652a674b44f1bbf26d200e1aa9/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afb8cba5fc611a652a674b44f1bbf26d200e1aa9/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=afb8cba5fc611a652a674b44f1bbf26d200e1aa9", "patch": "@@ -19,11 +19,12 @@ pub(crate) use self::check_match::check_match;\n use const_eval::{const_field, const_variant_index};\n \n use hair::util::UserAnnotatedTyHelpers;\n+use hair::constant::*;\n \n use rustc::mir::{fmt_const_val, Field, BorrowKind, Mutability};\n use rustc::mir::{ProjectionElem, UserTypeAnnotation, UserTypeProjection, UserTypeProjections};\n use rustc::mir::interpret::{Scalar, GlobalId, ConstValue, sign_extend};\n-use rustc::ty::{self, Region, TyCtxt, AdtDef, Ty, ParamEnv};\n+use rustc::ty::{self, Region, TyCtxt, AdtDef, Ty};\n use rustc::ty::subst::{Substs, Kind};\n use rustc::ty::layout::VariantIdx;\n use rustc::hir::{self, PatKind, RangeEnd};\n@@ -37,7 +38,6 @@ use std::fmt;\n use syntax::ast;\n use syntax::ptr::P;\n use syntax_pos::Span;\n-use syntax_pos::symbol::Symbol;\n \n #[derive(Clone, Debug)]\n pub enum PatternError {\n@@ -1292,101 +1292,3 @@ pub fn compare_const_vals<'a, 'tcx>(\n \n     fallback()\n }\n-\n-#[derive(PartialEq)]\n-pub enum LitToConstError {\n-    UnparseableFloat,\n-    Reported,\n-}\n-\n-pub fn lit_to_const<'a, 'gcx, 'tcx>(\n-    lit: &'tcx ast::LitKind,\n-    tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    ty: Ty<'tcx>,\n-    neg: bool,\n-) -> Result<&'tcx ty::Const<'tcx>, LitToConstError> {\n-    use syntax::ast::*;\n-\n-    let trunc = |n| {\n-        let param_ty = ParamEnv::reveal_all().and(tcx.lift_to_global(&ty).unwrap());\n-        let width = tcx.layout_of(param_ty).map_err(|_| LitToConstError::Reported)?.size;\n-        trace!(\"trunc {} with size {} and shift {}\", n, width.bits(), 128 - width.bits());\n-        let shift = 128 - width.bits();\n-        let result = (n << shift) >> shift;\n-        trace!(\"trunc result: {}\", result);\n-        Ok(ConstValue::Scalar(Scalar::Bits {\n-            bits: result,\n-            size: width.bytes() as u8,\n-        }))\n-    };\n-\n-    use rustc::mir::interpret::*;\n-    let lit = match *lit {\n-        LitKind::Str(ref s, _) => {\n-            let s = s.as_str();\n-            let id = tcx.allocate_bytes(s.as_bytes());\n-            ConstValue::new_slice(Scalar::Ptr(id.into()), s.len() as u64, &tcx)\n-        },\n-        LitKind::ByteStr(ref data) => {\n-            let id = tcx.allocate_bytes(data);\n-            ConstValue::Scalar(Scalar::Ptr(id.into()))\n-        },\n-        LitKind::Byte(n) => ConstValue::Scalar(Scalar::Bits {\n-            bits: n as u128,\n-            size: 1,\n-        }),\n-        LitKind::Int(n, _) if neg => {\n-            let n = n as i128;\n-            let n = n.overflowing_neg().0;\n-            trunc(n as u128)?\n-        },\n-        LitKind::Int(n, _) => trunc(n)?,\n-        LitKind::Float(n, fty) => {\n-            parse_float(n, fty, neg).map_err(|_| LitToConstError::UnparseableFloat)?\n-        }\n-        LitKind::FloatUnsuffixed(n) => {\n-            let fty = match ty.sty {\n-                ty::Float(fty) => fty,\n-                _ => bug!()\n-            };\n-            parse_float(n, fty, neg).map_err(|_| LitToConstError::UnparseableFloat)?\n-        }\n-        LitKind::Bool(b) => ConstValue::Scalar(Scalar::from_bool(b)),\n-        LitKind::Char(c) => ConstValue::Scalar(Scalar::from_char(c)),\n-    };\n-    Ok(ty::Const::from_const_value(tcx, lit, ty))\n-}\n-\n-pub fn parse_float<'tcx>(\n-    num: Symbol,\n-    fty: ast::FloatTy,\n-    neg: bool,\n-) -> Result<ConstValue<'tcx>, ()> {\n-    let num = num.as_str();\n-    use rustc_apfloat::ieee::{Single, Double};\n-    use rustc_apfloat::Float;\n-    let (bits, size) = match fty {\n-        ast::FloatTy::F32 => {\n-            num.parse::<f32>().map_err(|_| ())?;\n-            let mut f = num.parse::<Single>().unwrap_or_else(|e| {\n-                panic!(\"apfloat::ieee::Single failed to parse `{}`: {:?}\", num, e)\n-            });\n-            if neg {\n-                f = -f;\n-            }\n-            (f.to_bits(), 4)\n-        }\n-        ast::FloatTy::F64 => {\n-            num.parse::<f64>().map_err(|_| ())?;\n-            let mut f = num.parse::<Double>().unwrap_or_else(|e| {\n-                panic!(\"apfloat::ieee::Single failed to parse `{}`: {:?}\", num, e)\n-            });\n-            if neg {\n-                f = -f;\n-            }\n-            (f.to_bits(), 8)\n-        }\n-    };\n-\n-    Ok(ConstValue::Scalar(Scalar::Bits { bits, size }))\n-}"}]}