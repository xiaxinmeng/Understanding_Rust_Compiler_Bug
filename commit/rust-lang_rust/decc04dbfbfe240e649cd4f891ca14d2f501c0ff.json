{"sha": "decc04dbfbfe240e649cd4f891ca14d2f501c0ff", "node_id": "C_kwDOAAsO6NoAKGRlY2MwNGRiZmJmZTI0MGU2NDljZDRmODkxY2ExNGQyZjUwMWMwZmY", "commit": {"author": {"name": "Robin Appelman", "email": "robin@icewind.nl", "date": "2022-03-27T18:45:08Z"}, "committer": {"name": "Robin Appelman", "email": "robin@icewind.nl", "date": "2022-04-16T22:44:36Z"}, "message": "show suggestion to replace generic bounds with associated types in more cases", "tree": {"sha": "8c1adf1392bf09a02ddca5c0ce7ad8df20809a4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c1adf1392bf09a02ddca5c0ce7ad8df20809a4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/decc04dbfbfe240e649cd4f891ca14d2f501c0ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/decc04dbfbfe240e649cd4f891ca14d2f501c0ff", "html_url": "https://github.com/rust-lang/rust/commit/decc04dbfbfe240e649cd4f891ca14d2f501c0ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/decc04dbfbfe240e649cd4f891ca14d2f501c0ff/comments", "author": {"login": "icewind1991", "id": 1283854, "node_id": "MDQ6VXNlcjEyODM4NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1283854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/icewind1991", "html_url": "https://github.com/icewind1991", "followers_url": "https://api.github.com/users/icewind1991/followers", "following_url": "https://api.github.com/users/icewind1991/following{/other_user}", "gists_url": "https://api.github.com/users/icewind1991/gists{/gist_id}", "starred_url": "https://api.github.com/users/icewind1991/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/icewind1991/subscriptions", "organizations_url": "https://api.github.com/users/icewind1991/orgs", "repos_url": "https://api.github.com/users/icewind1991/repos", "events_url": "https://api.github.com/users/icewind1991/events{/privacy}", "received_events_url": "https://api.github.com/users/icewind1991/received_events", "type": "User", "site_admin": false}, "committer": {"login": "icewind1991", "id": 1283854, "node_id": "MDQ6VXNlcjEyODM4NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1283854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/icewind1991", "html_url": "https://github.com/icewind1991", "followers_url": "https://api.github.com/users/icewind1991/followers", "following_url": "https://api.github.com/users/icewind1991/following{/other_user}", "gists_url": "https://api.github.com/users/icewind1991/gists{/gist_id}", "starred_url": "https://api.github.com/users/icewind1991/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/icewind1991/subscriptions", "organizations_url": "https://api.github.com/users/icewind1991/orgs", "repos_url": "https://api.github.com/users/icewind1991/repos", "events_url": "https://api.github.com/users/icewind1991/events{/privacy}", "received_events_url": "https://api.github.com/users/icewind1991/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "878c7833f6c1ff10e2fd89074e5bd4ef5ff15936", "url": "https://api.github.com/repos/rust-lang/rust/commits/878c7833f6c1ff10e2fd89074e5bd4ef5ff15936", "html_url": "https://github.com/rust-lang/rust/commit/878c7833f6c1ff10e2fd89074e5bd4ef5ff15936"}], "stats": {"total": 106, "additions": 82, "deletions": 24}, "files": [{"sha": "38cc74a5e37348ccca400456140e43b9650d210b", "filename": "compiler/rustc_typeck/src/astconv/errors.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/decc04dbfbfe240e649cd4f891ca14d2f501c0ff/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decc04dbfbfe240e649cd4f891ca14d2f501c0ff/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs?ref=decc04dbfbfe240e649cd4f891ca14d2f501c0ff", "patch": "@@ -10,7 +10,6 @@ use rustc_span::symbol::{sym, Ident};\n use rustc_span::{Span, DUMMY_SP};\n \n use std::collections::BTreeSet;\n-use std::iter;\n \n impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     /// On missing type parameters, emit an E0393 error and provide a structured suggestion using\n@@ -323,6 +322,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let mut suggestions = vec![];\n         let mut types_count = 0;\n         let mut where_constraints = vec![];\n+        let mut already_has_generics_args_suggestion = false;\n         for (span, assoc_items) in &associated_types {\n             let mut names: FxHashMap<_, usize> = FxHashMap::default();\n             for item in assoc_items {\n@@ -343,16 +343,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 }\n             }\n             if potential_assoc_types.len() == assoc_items.len() {\n-                // Only suggest when the amount of missing associated types equals the number of\n-                // extra type arguments present, as that gives us a relatively high confidence\n-                // that the user forgot to give the associated type's name. The canonical\n-                // example would be trying to use `Iterator<isize>` instead of\n-                // `Iterator<Item = isize>`.\n-                for (potential, item) in iter::zip(&potential_assoc_types, assoc_items) {\n-                    if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(*potential) {\n-                        suggestions.push((*potential, format!(\"{} = {}\", item.name, snippet)));\n-                    }\n-                }\n+                // When the amount of missing associated types equals the number of\n+                // extra type arguments present.  A suggesting to replace the generic args with\n+                // associated types is already emitted.\n+                already_has_generics_args_suggestion = true;\n             } else if let (Ok(snippet), false) =\n                 (tcx.sess.source_map().span_to_snippet(*span), dupes)\n             {\n@@ -382,7 +376,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             // the same associated type name.\n             err.help(where_msg);\n         }\n-        if suggestions.len() != 1 {\n+        if suggestions.len() != 1 || already_has_generics_args_suggestion {\n             // We don't need this label if there's an inline suggestion, show otherwise.\n             for (span, assoc_items) in &associated_types {\n                 let mut names: FxHashMap<_, usize> = FxHashMap::default();"}, {"sha": "5cd7a7d578e4bbcdaca2d1a1bf533c7b7f8bc0f4", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/decc04dbfbfe240e649cd4f891ca14d2f501c0ff/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decc04dbfbfe240e649cd4f891ca14d2f501c0ff/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=decc04dbfbfe240e649cd4f891ca14d2f501c0ff", "patch": "@@ -6,9 +6,10 @@ use rustc_errors::{\n use rustc_hir as hir;\n use rustc_middle::hir::map::fn_sig;\n use rustc_middle::middle::resolve_lifetime::LifetimeScopeForPath;\n-use rustc_middle::ty::{self as ty, TyCtxt};\n+use rustc_middle::ty::{self as ty, AssocItems, AssocKind, TyCtxt};\n use rustc_session::Session;\n use rustc_span::def_id::DefId;\n+use std::iter;\n \n use GenericArgsInfo::*;\n \n@@ -334,6 +335,22 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n             .join(\", \")\n     }\n \n+    fn get_unbound_associated_types(&self) -> Vec<String> {\n+        if self.tcx.is_trait(self.def_id) {\n+            let items: &AssocItems<'_> = self.tcx.associated_items(self.def_id);\n+            items\n+                .in_definition_order()\n+                .filter(|item| item.kind == AssocKind::Type)\n+                .filter(|item| {\n+                    !self.gen_args.bindings.iter().any(|binding| binding.ident.name == item.name)\n+                })\n+                .map(|item| item.name.to_ident_string())\n+                .collect()\n+        } else {\n+            Vec::default()\n+        }\n+    }\n+\n     fn create_error_message(&self) -> String {\n         let def_path = self.tcx.def_path_str(self.def_id);\n         let def_kind = self.tcx.def_kind(self.def_id).descr(self.def_id);\n@@ -618,6 +635,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n     fn suggest_removing_args_or_generics(&self, err: &mut Diagnostic) {\n         let num_provided_lt_args = self.num_provided_lifetime_args();\n         let num_provided_type_const_args = self.num_provided_type_or_const_args();\n+        let unbound_types = self.get_unbound_associated_types();\n         let num_provided_args = num_provided_lt_args + num_provided_type_const_args;\n         assert!(num_provided_args > 0);\n \n@@ -629,6 +647,8 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n         let redundant_type_or_const_args = num_redundant_type_or_const_args > 0;\n \n         let remove_entire_generics = num_redundant_args >= self.gen_args.args.len();\n+        let provided_args_matches_unbound_traits =\n+            unbound_types.len() == num_redundant_type_or_const_args;\n \n         let remove_lifetime_args = |err: &mut Diagnostic| {\n             let mut lt_arg_spans = Vec::new();\n@@ -713,7 +733,28 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n             );\n         };\n \n-        if remove_entire_generics {\n+        // If there is a single unbound associated type and a single excess generic param\n+        // suggest replacing the generic param with the associated type bound\n+        if provided_args_matches_unbound_traits && !unbound_types.is_empty() {\n+            let mut suggestions = vec![];\n+            let unused_generics = &self.gen_args.args[self.num_expected_type_or_const_args()..];\n+            for (potential, name) in iter::zip(unused_generics, &unbound_types) {\n+                if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(potential.span()) {\n+                    suggestions.push((potential.span(), format!(\"{} = {}\", name, snippet)));\n+                }\n+            }\n+\n+            if !suggestions.is_empty() {\n+                err.multipart_suggestion(\n+                    &format!(\n+                        \"replace the generic bound{s} with the associated type{s}\",\n+                        s = pluralize!(unbound_types.len())\n+                    ),\n+                    suggestions,\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+        } else if remove_entire_generics {\n             let span = self\n                 .path_segment\n                 .args"}, {"sha": "f998c1187d810eb7f73e5631663bb5d7396cb69c", "filename": "src/test/ui/const-generics/issues/issue-87493.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decc04dbfbfe240e649cd4f891ca14d2f501c0ff/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87493.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/decc04dbfbfe240e649cd4f891ca14d2f501c0ff/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87493.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87493.stderr?ref=decc04dbfbfe240e649cd4f891ca14d2f501c0ff", "patch": "@@ -13,7 +13,7 @@ error[E0107]: this trait takes 0 generic arguments but 1 generic argument was su\n   --> $DIR/issue-87493.rs:8:8\n    |\n LL |     T: MyTrait<Assoc == S::Assoc>,\n-   |        ^^^^^^^------------------- help: remove these generics\n+   |        ^^^^^^^ ----------------- help: replace the generic bound with the associated type: `Assoc = Assoc == S::Assoc`\n    |        |\n    |        expected 0 generic arguments\n    |"}, {"sha": "d369fc2a5658b28e3d8ce41d9189084fa4460f89", "filename": "src/test/ui/error-codes/E0107.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/decc04dbfbfe240e649cd4f891ca14d2f501c0ff/src%2Ftest%2Fui%2Ferror-codes%2FE0107.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decc04dbfbfe240e649cd4f891ca14d2f501c0ff/src%2Ftest%2Fui%2Ferror-codes%2FE0107.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0107.rs?ref=decc04dbfbfe240e649cd4f891ca14d2f501c0ff", "patch": "@@ -47,4 +47,14 @@ struct Baz<'a, 'b, 'c> {\n     //~| HELP remove this lifetime argument\n }\n \n+pub trait T {\n+    type A;\n+    type B;\n+}\n+\n+fn trait_bound_generic<I: T<u8, u16>>(_i: I) {\n+    //~^ ERROR this trait takes 0 generic arguments\n+    //~| HELP replace the generic bounds with the associated types\n+}\n+\n fn main() {}"}, {"sha": "5ca03b45d82b3851e294cc5d8d62b2fdc6747f41", "filename": "src/test/ui/error-codes/E0107.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/decc04dbfbfe240e649cd4f891ca14d2f501c0ff/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/decc04dbfbfe240e649cd4f891ca14d2f501c0ff/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr?ref=decc04dbfbfe240e649cd4f891ca14d2f501c0ff", "patch": "@@ -128,6 +128,22 @@ note: struct defined here, with 0 lifetime parameters\n LL | struct Quux<T>(T);\n    |        ^^^^\n \n-error: aborting due to 9 previous errors\n+error[E0107]: this trait takes 0 generic arguments but 2 generic arguments were supplied\n+  --> $DIR/E0107.rs:55:27\n+   |\n+LL | fn trait_bound_generic<I: T<u8, u16>>(_i: I) {\n+   |                           ^ expected 0 generic arguments\n+   |\n+note: trait defined here, with 0 generic parameters\n+  --> $DIR/E0107.rs:50:11\n+   |\n+LL | pub trait T {\n+   |           ^\n+help: replace the generic bounds with the associated types\n+   |\n+LL | fn trait_bound_generic<I: T<A = u8, B = u16>>(_i: I) {\n+   |                             ~~~~~~  ~~~~~~~\n+\n+error: aborting due to 10 previous errors\n \n For more information about this error, try `rustc --explain E0107`."}, {"sha": "5409e32c436fbd9ff1e26dc88901e133362c55f3", "filename": "src/test/ui/suggestions/use-type-argument-instead-of-assoc-type.stderr", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/decc04dbfbfe240e649cd4f891ca14d2f501c0ff/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/decc04dbfbfe240e649cd4f891ca14d2f501c0ff/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.stderr?ref=decc04dbfbfe240e649cd4f891ca14d2f501c0ff", "patch": "@@ -2,15 +2,17 @@ error[E0107]: this trait takes 2 generic arguments but 4 generic arguments were\n   --> $DIR/use-type-argument-instead-of-assoc-type.rs:7:16\n    |\n LL |     i: Box<dyn T<usize, usize, usize, usize, B=usize>>,\n-   |                ^               ------------ help: remove these generic arguments\n-   |                |\n-   |                expected 2 generic arguments\n+   |                ^ expected 2 generic arguments\n    |\n note: trait defined here, with 2 generic parameters: `X`, `Y`\n   --> $DIR/use-type-argument-instead-of-assoc-type.rs:1:11\n    |\n LL | pub trait T<X, Y> {\n    |           ^ -  -\n+help: replace the generic bounds with the associated types\n+   |\n+LL |     i: Box<dyn T<usize, usize, A = usize, C = usize, B=usize>>,\n+   |                                ~~~~~~~~~  ~~~~~~~~~\n \n error[E0191]: the value of the associated types `A` (from trait `T`), `C` (from trait `T`) must be specified\n   --> $DIR/use-type-argument-instead-of-assoc-type.rs:7:16\n@@ -23,11 +25,6 @@ LL |     type C;\n ...\n LL |     i: Box<dyn T<usize, usize, usize, usize, B=usize>>,\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ associated types `A`, `C` must be specified\n-   |\n-help: specify the associated types\n-   |\n-LL |     i: Box<dyn T<usize, usize, A = usize, C = usize, B=usize>>,\n-   |                                ~~~~~~~~~  ~~~~~~~~~\n \n error: aborting due to 2 previous errors\n "}]}