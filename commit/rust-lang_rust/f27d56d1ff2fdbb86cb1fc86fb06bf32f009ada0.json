{"sha": "f27d56d1ff2fdbb86cb1fc86fb06bf32f009ada0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyN2Q1NmQxZmYyZmRiYjg2Y2IxZmM4NmZiMDZiZjMyZjAwOWFkYTA=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-11-15T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-11-15T00:00:00Z"}, "message": "Limit storage duration of inlined always live locals", "tree": {"sha": "30cd6a34abaae0085f34220f89a31ef977439368", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30cd6a34abaae0085f34220f89a31ef977439368"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f27d56d1ff2fdbb86cb1fc86fb06bf32f009ada0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f27d56d1ff2fdbb86cb1fc86fb06bf32f009ada0", "html_url": "https://github.com/rust-lang/rust/commit/f27d56d1ff2fdbb86cb1fc86fb06bf32f009ada0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f27d56d1ff2fdbb86cb1fc86fb06bf32f009ada0/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75042566d1c90d912f22e4db43b6d3af98447986", "url": "https://api.github.com/repos/rust-lang/rust/commits/75042566d1c90d912f22e4db43b6d3af98447986", "html_url": "https://github.com/rust-lang/rust/commit/75042566d1c90d912f22e4db43b6d3af98447986"}], "stats": {"total": 78, "additions": 73, "deletions": 5}, "files": [{"sha": "454cdad2e6a788a7951e827195ca1f1b633ef104", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f27d56d1ff2fdbb86cb1fc86fb06bf32f009ada0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f27d56d1ff2fdbb86cb1fc86fb06bf32f009ada0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=f27d56d1ff2fdbb86cb1fc86fb06bf32f009ada0", "patch": "@@ -420,7 +420,9 @@ impl<'tcx> Body<'tcx> {\n     /// Returns an iterator over all user-defined variables and compiler-generated temporaries (all\n     /// locals that are neither arguments nor the return place).\n     #[inline]\n-    pub fn vars_and_temps_iter(&self) -> impl Iterator<Item = Local> + ExactSizeIterator {\n+    pub fn vars_and_temps_iter(\n+        &self,\n+    ) -> impl DoubleEndedIterator<Item = Local> + ExactSizeIterator {\n         let arg_count = self.arg_count;\n         let local_count = self.local_decls.len();\n         (arg_count + 1..local_count).map(Local::new)"}, {"sha": "220fc06da8610dd10f4a9a0b4c2cb3ea3668f2ac", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f27d56d1ff2fdbb86cb1fc86fb06bf32f009ada0/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f27d56d1ff2fdbb86cb1fc86fb06bf32f009ada0/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=f27d56d1ff2fdbb86cb1fc86fb06bf32f009ada0", "patch": "@@ -459,6 +459,7 @@ impl Inliner<'tcx> {\n                     tcx: self.tcx,\n                     callsite_span: callsite.source_info.span,\n                     body_span: callee_body.span,\n+                    always_live_locals: BitSet::new_filled(callee_body.local_decls.len()),\n                 };\n \n                 // Map all `Local`s, `SourceScope`s and `BasicBlock`s to new ones\n@@ -490,6 +491,34 @@ impl Inliner<'tcx> {\n                     }\n                 }\n \n+                // If there are any locals without storage markers, give them storage only for the\n+                // duration of the call.\n+                for local in callee_body.vars_and_temps_iter() {\n+                    if integrator.always_live_locals.contains(local) {\n+                        let new_local = integrator.map_local(local);\n+                        caller_body[callsite.block].statements.push(Statement {\n+                            source_info: callsite.source_info,\n+                            kind: StatementKind::StorageLive(new_local),\n+                        });\n+                    }\n+                }\n+                if let Some(block) = callsite.target {\n+                    // To avoid repeated O(n) insert, push any new statements to the end and rotate\n+                    // the slice once.\n+                    let mut n = 0;\n+                    for local in callee_body.vars_and_temps_iter().rev() {\n+                        if integrator.always_live_locals.contains(local) {\n+                            let new_local = integrator.map_local(local);\n+                            caller_body[block].statements.push(Statement {\n+                                source_info: callsite.source_info,\n+                                kind: StatementKind::StorageDead(new_local),\n+                            });\n+                            n += 1;\n+                        }\n+                    }\n+                    caller_body[block].statements.rotate_right(n);\n+                }\n+\n                 // Insert all of the (mapped) parts of the callee body into the caller.\n                 caller_body.local_decls.extend(\n                     // FIXME(eddyb) make `Range<Local>` iterable so that we can use\n@@ -670,6 +699,7 @@ struct Integrator<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     callsite_span: Span,\n     body_span: Span,\n+    always_live_locals: BitSet<Local>,\n }\n \n impl<'a, 'tcx> Integrator<'a, 'tcx> {\n@@ -759,6 +789,15 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n         }\n     }\n \n+    fn visit_statement(&mut self, statement: &mut Statement<'tcx>, location: Location) {\n+        if let StatementKind::StorageLive(local) | StatementKind::StorageDead(local) =\n+            statement.kind\n+        {\n+            self.always_live_locals.remove(local);\n+        }\n+        self.super_statement(statement, location);\n+    }\n+\n     fn visit_terminator(&mut self, terminator: &mut Terminator<'tcx>, loc: Location) {\n         // Don't try to modify the implicit `_0` access on return (`return` terminators are\n         // replaced down below anyways)."}, {"sha": "07994eb3c16613170e83220a715df13a0c14d475", "filename": "src/test/mir-opt/inline/inline_diverging.h.Inline.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f27d56d1ff2fdbb86cb1fc86fb06bf32f009ada0/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f27d56d1ff2fdbb86cb1fc86fb06bf32f009ada0/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff?ref=f27d56d1ff2fdbb86cb1fc86fb06bf32f009ada0", "patch": "@@ -40,6 +40,7 @@\n -                                          // mir::Constant\n                                            // + span: $DIR/inline-diverging.rs:22:16: 22:21\n                                            // + literal: Const { ty: fn() -> ! {sleep}, val: Value(Scalar(<ZST>)) }\n++         StorageLive(_6);                 // scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n +         StorageLive(_3);                 // scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n +         StorageLive(_4);                 // scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n +         _4 = &_2;                        // scope 1 at $DIR/inline-diverging.rs:22:5: 22:22"}, {"sha": "99497a6fc791c18525b8f148e2a40769ee21cfb2", "filename": "src/test/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f27d56d1ff2fdbb86cb1fc86fb06bf32f009ada0/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f27d56d1ff2fdbb86cb1fc86fb06bf32f009ada0/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=f27d56d1ff2fdbb86cb1fc86fb06bf32f009ada0", "patch": "@@ -65,12 +65,16 @@\n -                                          // + literal: Const { ty: for<'r> fn(std::pin::Pin<&'r mut impl std::ops::Generator<bool>>, bool) -> std::ops::GeneratorState<<impl std::ops::Generator<bool> as std::ops::Generator<bool>>::Yield, <impl std::ops::Generator<bool> as std::ops::Generator<bool>>::Return> {<impl std::ops::Generator<bool> as std::ops::Generator<bool>>::resume}, val: Value(Scalar(<ZST>)) }\n +         StorageLive(_7);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n +         _7 = const false;                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n++         StorageLive(_8);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n++         StorageLive(_9);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n +         _9 = discriminant((*(_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41 {bool, i32}]))); // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n +         switchInt(move _9) -> [0_u32: bb3, 1_u32: bb8, 3_u32: bb7, otherwise: bb9]; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n       }\n   \n -     bb3: {\n +     bb1: {\n++         StorageDead(_9);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n++         StorageDead(_8);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n +         StorageDead(_7);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n           StorageDead(_2);                 // scope 0 at $DIR/inline-generator.rs:9:45: 9:46\n           StorageDead(_4);                 // scope 0 at $DIR/inline-generator.rs:9:46: 9:47"}, {"sha": "092ff42c3b66da9c156ed8c1421fe806f155ff30", "filename": "src/test/mir-opt/inline/inline_shims.drop.Inline.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f27d56d1ff2fdbb86cb1fc86fb06bf32f009ada0/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f27d56d1ff2fdbb86cb1fc86fb06bf32f009ada0/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff?ref=f27d56d1ff2fdbb86cb1fc86fb06bf32f009ada0", "patch": "@@ -36,11 +36,15 @@\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-shims.rs:12:14: 12:37\n -                                          // + literal: Const { ty: unsafe fn(*mut std::option::Option<B>) {std::intrinsics::drop_in_place::<std::option::Option<B>>}, val: Value(Scalar(<ZST>)) }\n++         StorageLive(_6);                 // scope 2 at $DIR/inline-shims.rs:12:14: 12:40\n++         StorageLive(_7);                 // scope 2 at $DIR/inline-shims.rs:12:14: 12:40\n +         _6 = discriminant((*_5));        // scope 3 at $DIR/inline-shims.rs:12:14: 12:40\n +         switchInt(move _6) -> [0_isize: bb2, otherwise: bb3]; // scope 3 at $DIR/inline-shims.rs:12:14: 12:40\n       }\n   \n       bb2: {\n++         StorageDead(_7);                 // scope 2 at $DIR/inline-shims.rs:12:14: 12:40\n++         StorageDead(_6);                 // scope 2 at $DIR/inline-shims.rs:12:14: 12:40\n           StorageDead(_5);                 // scope 2 at $DIR/inline-shims.rs:12:39: 12:40\n           return;                          // scope 0 at $DIR/inline-shims.rs:13:2: 13:2\n +     }"}, {"sha": "72f32ecf7ea22602d1e54cf18e3c5712ea897fd8", "filename": "src/test/ui/mir/auxiliary/issue_76375_aux.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f27d56d1ff2fdbb86cb1fc86fb06bf32f009ada0/src%2Ftest%2Fui%2Fmir%2Fauxiliary%2Fissue_76375_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f27d56d1ff2fdbb86cb1fc86fb06bf32f009ada0/src%2Ftest%2Fui%2Fmir%2Fauxiliary%2Fissue_76375_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fauxiliary%2Fissue_76375_aux.rs?ref=f27d56d1ff2fdbb86cb1fc86fb06bf32f009ada0", "patch": "@@ -1,8 +1,8 @@\n // edition:2018\n-// compile-flags: -Z mir-opt-level=2 -Z unsound-mir-opts\n+// compile-flags: -Z mir-opt-level=2\n \n #[inline(always)]\n-pub fn f(s: bool) -> String {\n+pub fn copy_prop(s: bool) -> String {\n     let a = \"Hello world!\".to_string();\n     let b = a;\n     let c = b;\n@@ -12,3 +12,9 @@ pub fn f(s: bool) -> String {\n         String::new()\n     }\n }\n+\n+#[inline(always)]\n+pub fn dest_prop(x: &[u8]) -> &[u8] {\n+    let y = &x[..x.len()];\n+    y\n+}"}, {"sha": "a7772cb1fe68dba6d78b4efcc7488374bcca5373", "filename": "src/test/ui/mir/issue-76375.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f27d56d1ff2fdbb86cb1fc86fb06bf32f009ada0/src%2Ftest%2Fui%2Fmir%2Fissue-76375.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f27d56d1ff2fdbb86cb1fc86fb06bf32f009ada0/src%2Ftest%2Fui%2Fmir%2Fissue-76375.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-76375.rs?ref=f27d56d1ff2fdbb86cb1fc86fb06bf32f009ada0", "patch": "@@ -1,15 +1,27 @@\n+// Regression test for issue #76375.\n+//\n // edition:2018\n // build-pass\n-// compile-flags: -Z mir-opt-level=2 -L.\n+// compile-flags: -Z mir-opt-level=2\n // aux-build:issue_76375_aux.rs\n \n #![crate_type = \"lib\"]\n \n extern crate issue_76375_aux;\n \n pub async fn g() {\n-    issue_76375_aux::f(true);\n+    issue_76375_aux::copy_prop(true);\n     h().await;\n }\n \n+pub async fn u() {\n+    let b = [0u8; 32];\n+    let mut i = 0;\n+    while i != 10 {\n+        issue_76375_aux::dest_prop(&b);\n+        h().await;\n+        i += 1;\n+    }\n+}\n+\n pub async fn h() {}"}]}