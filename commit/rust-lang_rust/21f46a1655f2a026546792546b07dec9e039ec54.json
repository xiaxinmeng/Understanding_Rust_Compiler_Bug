{"sha": "21f46a1655f2a026546792546b07dec9e039ec54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZjQ2YTE2NTVmMmEwMjY1NDY3OTI1NDZiMDdkZWM5ZTAzOWVjNTQ=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2011-08-10T16:27:22Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-08-16T22:05:56Z"}, "message": "Port the tests to the typaram foo<T> syntax.", "tree": {"sha": "f2bd96727b4a041a682c790bf8900984894ee08c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2bd96727b4a041a682c790bf8900984894ee08c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21f46a1655f2a026546792546b07dec9e039ec54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21f46a1655f2a026546792546b07dec9e039ec54", "html_url": "https://github.com/rust-lang/rust/commit/21f46a1655f2a026546792546b07dec9e039ec54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21f46a1655f2a026546792546b07dec9e039ec54/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4a0f997fb01b9cbb650532fea1278159faff064", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4a0f997fb01b9cbb650532fea1278159faff064", "html_url": "https://github.com/rust-lang/rust/commit/e4a0f997fb01b9cbb650532fea1278159faff064"}], "stats": {"total": 597, "additions": 299, "deletions": 298}, "files": [{"sha": "d4bdbc93b354c7c3421cf5f6a37572c1e94fdab7", "filename": "src/test/bench/shootout-fannkuchredux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -59,4 +59,4 @@ fn fannkuch(n: int) -> int {\n fn main(args: [str]) {\n     let n = 7;\n     log #fmt(\"Pfannkuchen(%d) = %d\", n, fannkuch(n));\n-}\n\\ No newline at end of file\n+}"}, {"sha": "7657d058d028c7b8c5d959111a257f553b48203f", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -27,7 +27,7 @@ fn main() {\n }\n \n // Body::props is a record of floats, so\n-// vec[Body::props] is a vector of records of floats\n+// vec<Body::props> is a vector of records of floats\n \n mod NBodySystem {\n "}, {"sha": "31e6ea6fff0cd75b87e65373fe97e49d5ebd752e", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -27,13 +27,13 @@ import std::comm::_chan;\n import std::comm::send;\n \n fn fib(n: int) -> int {\n-    fn pfib(c: _chan[int], n: int) {\n+    fn pfib(c: _chan<int>, n: int) {\n         if n == 0 {\n             send(c, 0);\n         } else if (n <= 2) {\n             send(c, 1);\n         } else {\n-            let p = mk_port[int]();\n+            let p = mk_port<int>();\n \n             let t1 = task::_spawn(bind pfib(p.mk_chan(), n - 1));\n             let t2 = task::_spawn(bind pfib(p.mk_chan(), n - 2));"}, {"sha": "6baa75e2fa49e85f60409dd81ba50fd34b0cb88a", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -63,39 +63,39 @@ mod map_reduce {\n \n     type mapper = fn(str, putter) ;\n \n-    type getter = fn() -> option[int] ;\n+    type getter = fn() -> option<int> ;\n \n     type reducer = fn(str, getter) ;\n \n     tag ctrl_proto {\n-        find_reducer([u8], _chan[_chan[reduce_proto]]);\n+        find_reducer([u8], _chan<_chan<reduce_proto>>);\n         mapper_done;\n     }\n \n     tag reduce_proto { emit_val(int); done; ref; release; }\n \n-    fn start_mappers(ctrl: _chan[ctrl_proto], inputs: &[str]) -> [task_id] {\n+    fn start_mappers(ctrl: _chan<ctrl_proto>, inputs: &[str]) -> [task_id] {\n         let tasks = ~[];\n         for i: str in inputs {\n             tasks += ~[task::_spawn(bind map_task(ctrl, i))];\n         }\n         ret tasks;\n     }\n \n-    fn map_task(ctrl: _chan[ctrl_proto], input: str) {\n+    fn map_task(ctrl: _chan<ctrl_proto>, input: str) {\n         // log_err \"map_task \" + input;\n         let intermediates = map::new_str_hash();\n \n-        fn emit(im: &map::hashmap[str, _chan[reduce_proto]],\n-                ctrl: _chan[ctrl_proto], key: str, val: int) {\n+        fn emit(im: &map::hashmap<str, _chan<reduce_proto>>,\n+                ctrl: _chan<ctrl_proto>, key: str, val: int) {\n             let c;\n             alt im.find(key) {\n               some(_c) {\n \n                 c = _c\n               }\n               none. {\n-                let p = mk_port[_chan[reduce_proto]]();\n+                let p = mk_port<_chan<reduce_proto>>();\n                 let keyi = str::bytes(key);\n                 send(ctrl, find_reducer(keyi, p.mk_chan()));\n                 c = p.recv();\n@@ -108,24 +108,24 @@ mod map_reduce {\n \n         map(input, bind emit(intermediates, ctrl, _, _));\n \n-        for each kv: @{key: str, val: _chan[reduce_proto]}  in\n+        for each kv: @{key: str, val: _chan<reduce_proto>}  in\n                  intermediates.items() {\n             send(kv.val, release);\n         }\n \n         send(ctrl, mapper_done);\n     }\n \n-    fn reduce_task(key: str, out: _chan[_chan[reduce_proto]]) {\n+    fn reduce_task(key: str, out: _chan<_chan<reduce_proto>>) {\n         let p = mk_port();\n \n         send(out, p.mk_chan());\n \n         let ref_count = 0;\n         let is_done = false;\n \n-        fn get(p: &_port[reduce_proto], ref_count: &mutable int,\n-               is_done: &mutable bool) -> option[int] {\n+        fn get(p: &_port<reduce_proto>, ref_count: &mutable int,\n+               is_done: &mutable bool) -> option<int> {\n             while !is_done || ref_count > 0 {\n                 alt p.recv() {\n                   emit_val(v) {\n@@ -147,12 +147,12 @@ mod map_reduce {\n     }\n \n     fn map_reduce(inputs: &[str]) {\n-        let ctrl = mk_port[ctrl_proto]();\n+        let ctrl = mk_port<ctrl_proto>();\n \n         // This task becomes the master control task. It task::_spawns\n         // to do the rest.\n \n-        let reducers: map::hashmap[str, _chan[reduce_proto]];\n+        let reducers: map::hashmap<str, _chan<reduce_proto>>;\n \n         reducers = map::new_str_hash();\n \n@@ -189,7 +189,7 @@ mod map_reduce {\n             }\n         }\n \n-        for each kv: @{key: str, val: _chan[reduce_proto]} in reducers.items()\n+        for each kv: @{key: str, val: _chan<reduce_proto>} in reducers.items()\n                  {\n             send(kv.val, done);\n         }\n@@ -225,7 +225,7 @@ fn main(argv: [str]) {\n     log_err \"MapReduce completed in \" + u64::str(elapsed) + \"ms\";\n }\n \n-fn read_word(r: io::reader) -> option[str] {\n+fn read_word(r: io::reader) -> option<str> {\n     let w = \"\";\n \n     while !r.eof() {"}, {"sha": "7c97308c5387c8d06a35feae7dfbebfcbe0f1ae1", "filename": "src/test/compile-fail/bad-expr-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -2,4 +2,4 @@\n \n mod m1 { }\n \n-fn main(args: [str]) { log m1::a; }\n\\ No newline at end of file\n+fn main(args: [str]) { log m1::a; }"}, {"sha": "e6596f17b6e05a55530d87a0ad83070fbe3de820", "filename": "src/test/compile-fail/bad-expr-path2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -4,4 +4,4 @@ mod m1 {\n     mod a { }\n }\n \n-fn main(args: [str]) { log m1::a; }\n\\ No newline at end of file\n+fn main(args: [str]) { log m1::a; }"}, {"sha": "1a710c06f91ca05c8c5637e6259a3aa7fe2faa74", "filename": "src/test/compile-fail/for-loop-decl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -3,7 +3,7 @@ use std;\n import std::map::hashmap;\n import std::bitv;\n \n-type fn_info = {vars: hashmap[uint, var_info]};\n+type fn_info = {vars: hashmap<uint, var_info>};\n type var_info = {a: uint, b: uint};\n \n fn bitv_to_str(enclosing: fn_info, v: bitv::t) -> str {"}, {"sha": "f4375eaade38523bc791601acfdeadd24834ad0b", "filename": "src/test/compile-fail/import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompile-fail%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompile-fail%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -4,4 +4,4 @@ import zed::baz;\n mod zed {\n     fn bar() { log \"bar\"; }\n }\n-fn main(args: [str]) { bar(); }\n\\ No newline at end of file\n+fn main(args: [str]) { bar(); }"}, {"sha": "89532f61fb1a68f6cefc33782c3af3cd5b476bf5", "filename": "src/test/compile-fail/import2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport2.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -4,4 +4,4 @@ mod baz { }\n mod zed {\n     fn bar() { log \"bar3\"; }\n }\n-fn main(args: [str]) { bar(); }\n\\ No newline at end of file\n+fn main(args: [str]) { bar(); }"}, {"sha": "680804c97b043fd15244df5388aca0f8facb34c7", "filename": "src/test/compile-fail/import3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompile-fail%2Fimport3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompile-fail%2Fimport3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport3.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -1,4 +1,4 @@\n // error-pattern: unresolved modulename\n import main::bar;\n \n-fn main(args: [str]) { log \"foo\"; }\n\\ No newline at end of file\n+fn main(args: [str]) { log \"foo\"; }"}, {"sha": "6daed215ddb534f078aed8ae685622dad7a961c3", "filename": "src/test/compile-fail/import4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompile-fail%2Fimport4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompile-fail%2Fimport4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport4.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -3,4 +3,4 @@\n import zed::bar;\n import bar::zed;\n \n-fn main(args: [str]) { log \"loop\"; }\n\\ No newline at end of file\n+fn main(args: [str]) { log \"loop\"; }"}, {"sha": "c41c9fb388146104eaaf5746e88a7ae6640fcc60", "filename": "src/test/compile-fail/infinite-vec-type-recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompile-fail%2Finfinite-vec-type-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompile-fail%2Finfinite-vec-type-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-vec-type-recursion.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -3,4 +3,4 @@\n \n type x = [x];\n \n-fn main() { let b: x = ~[]; }\n\\ No newline at end of file\n+fn main() { let b: x = ~[]; }"}, {"sha": "609a850cafa066e906e54b763dbea3af526528e0", "filename": "src/test/compile-fail/nested-ty-params.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompile-fail%2Fnested-ty-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompile-fail%2Fnested-ty-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnested-ty-params.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -1,5 +1,6 @@\n // error-pattern:Attempt to use a type argument out of scope\n fn hd[U](v: &[U]) -> U {\n     fn hd1(w: &[U]) -> U { ret w.(0); }\n+\n     ret hd1(v);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "ead40e3948ee8f1710e55d215801b25e8710e610", "filename": "src/test/compile-fail/pattern-tyvar-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -6,8 +6,8 @@ import std::option::some;\n \n // error-pattern: mismatched types\n \n-tag bar { t1((), option::t[[int]]); t2; }\n+tag bar { t1((), option::t<[int]>); t2; }\n \n fn foo(t: bar) -> int { alt t { t1(_, some(x)) { ret x * 3; } _ { fail; } } }\n \n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}, {"sha": "cd5d0ffc290b7335172f4c2960b6de87fb16f6b7", "filename": "src/test/compile-fail/pattern-tyvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -5,8 +5,8 @@ import std::option::some;\n \n // error-pattern: mismatched types\n \n-tag bar { t1((), option::t[[int]]); t2; }\n+tag bar { t1((), option::t<[int]>); t2; }\n \n fn foo(t: bar) { alt t { t1(_, some[int](x)) { log x; } _ { fail; } } }\n \n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}, {"sha": "10a222f5cd01720aa892427c8db58f750b5e36eb", "filename": "src/test/compile-fail/vec-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompile-fail%2Fvec-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompile-fail%2Fvec-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-field.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -6,4 +6,4 @@ fn f() {\n     log v.some_field_name; //type error\n }\n \n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}, {"sha": "7397773d94011a55cc77df79a3e48c5eaa40870a", "filename": "src/test/compile-fail/writing-through-uninit-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompile-fail%2Fwriting-through-uninit-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompile-fail%2Fwriting-through-uninit-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwriting-through-uninit-vec.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -2,4 +2,4 @@\n \n fn test() { let w: [int]; w.(5) = 0; }\n \n-fn main() { test(); }\n\\ No newline at end of file\n+fn main() { test(); }"}, {"sha": "d800288dd9282dbb6e16cc8c431297acf0de2fce", "filename": "src/test/compile-fail/writing-to-immutable-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-vec.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -1,2 +1,2 @@\n // error-pattern:assignment to immutable vec content\n-fn main() { let v: [int] = ~[1, 2, 3]; v.(1) = 4; }\n\\ No newline at end of file\n+fn main() { let v: [int] = ~[1, 2, 3]; v.(1) = 4; }"}, {"sha": "85b7be9b00f3f2e923211db4e42b71a409ace04e", "filename": "src/test/compiletest/common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fcommon.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -25,12 +25,12 @@ type config = {\n     // Run ignored tests\n     run_ignored: bool,\n     // Only run tests that match this filter\n-    filter: option::t[str],\n+    filter: option::t<str>,\n     // A command line to prefix program execution with,\n     // for running under valgrind\n-    runtool: option::t[str],\n+    runtool: option::t<str>,\n     // Flags to pass to the compiler\n-    rustcflags: option::t[str],\n+    rustcflags: option::t<str>,\n     // Explain what's going on\n     verbose: bool\n };"}, {"sha": "c147e676de3217a8875cca4da8f7cece161b0797", "filename": "src/test/compiletest/compiletest.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fcompiletest.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -81,11 +81,11 @@ fn log_config(config: &config) {\n     logv(c, #fmt(\"\\n\"));\n }\n \n-fn opt_str(maybestr: option::t[str]) -> str {\n+fn opt_str(maybestr: option::t<str>) -> str {\n     alt maybestr { option::some(s) { s } option::none. { \"(none)\" } }\n }\n \n-fn str_opt(maybestr: str) -> option::t[str] {\n+fn str_opt(maybestr: str) -> option::t<str> {\n     if maybestr != \"(none)\" { option::some(maybestr) } else { option::none }\n }\n \n@@ -125,7 +125,7 @@ type tests_and_conv_fn =\n \n fn make_tests(cx: &cx) -> tests_and_conv_fn {\n     log #fmt(\"making tests from %s\", cx.config.src_base);\n-    let configport = mk_port[[u8]]();\n+    let configport = mk_port<[u8]>();\n     let tests = ~[];\n     for file: str in fs::list_dir(cx.config.src_base) {\n         log #fmt(\"inspecting file %s\", file);\n@@ -158,7 +158,7 @@ fn is_test(config: &config, testfile: &str) -> bool {\n     ret valid;\n }\n \n-fn make_test(cx: &cx, testfile: &str, configport: &_port[[u8]]) ->\n+fn make_test(cx: &cx, testfile: &str, configport: &_port<[u8]>) ->\n    test::test_desc {\n     {name: make_test_name(cx.config, testfile),\n      fn: make_test_closure(testfile, configport.mk_chan()),\n@@ -188,12 +188,12 @@ up. Then we'll spawn that data into another task and return the task.\n Really convoluted. Need to think up of a better definition for tests.\n */\n \n-fn make_test_closure(testfile: &str, configchan: _chan[[u8]]) -> test::test_fn\n+fn make_test_closure(testfile: &str, configchan: _chan<[u8]>) -> test::test_fn\n {\n     bind send_config(testfile, configchan)\n }\n \n-fn send_config(testfile: str, configchan: _chan[[u8]]) {\n+fn send_config(testfile: str, configchan: _chan<[u8]>) {\n     send(configchan, str::bytes(testfile));\n }\n \n@@ -207,7 +207,7 @@ break up the config record and pass everything individually to the spawned\n function.\n */\n \n-fn closure_to_task(cx: cx, configport: _port[[u8]], testfn: &fn() ) -> task_id\n+fn closure_to_task(cx: cx, configport: _port<[u8]>, testfn: &fn() ) -> task_id\n {\n     testfn();\n     let testfile = configport.recv();"}, {"sha": "81288f245a7d76f53dea999be9ff9c196433cedb", "filename": "src/test/compiletest/header.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fheader.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -13,10 +13,10 @@ type test_props = {\n     // Lines that should be expected, in order, on standard out\n     error_patterns: [str],\n     // Extra flags to pass to the compiler\n-    compile_flags: option::t[str],\n+    compile_flags: option::t<str>,\n     // If present, the name of a file that this test should match when\n     // pretty-printed\n-    pp_exact: option::t[str],\n+    pp_exact: option::t<str>,\n     // FIXME: no-valgrind is a temporary directive until all of run-fail\n     // is valgrind-clean\n     no_valgrind: bool\n@@ -82,15 +82,15 @@ iter iter_header(testfile: &str) -> str {\n     }\n }\n \n-fn parse_error_pattern(line: &str) -> option::t[str] {\n+fn parse_error_pattern(line: &str) -> option::t<str> {\n     parse_name_value_directive(line, \"error-pattern\")\n }\n \n-fn parse_compile_flags(line: &str) -> option::t[str] {\n+fn parse_compile_flags(line: &str) -> option::t<str> {\n     parse_name_value_directive(line, \"compile-flags\")\n }\n \n-fn parse_pp_exact(line: &str, testfile: &str) -> option::t[str] {\n+fn parse_pp_exact(line: &str, testfile: &str) -> option::t<str> {\n     alt parse_name_value_directive(line, \"pp-exact\") {\n       option::some(s) { option::some(s) }\n       option::none. {\n@@ -108,7 +108,7 @@ fn parse_name_directive(line: &str, directive: &str) -> bool {\n }\n \n fn parse_name_value_directive(line: &str,\n-                              directive: &str) -> option::t[str] {\n+                              directive: &str) -> option::t<str> {\n     let keycolon = directive + \":\";\n     if str::find(line, keycolon) >= 0 {\n         let colon = str::find(line, keycolon) as uint;"}, {"sha": "c90dd6a94ba147448d6b1226cf7e0abed42ef738", "filename": "src/test/compiletest/procsrv.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fprocsrv.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -26,20 +26,20 @@ export run;\n export close;\n export reqchan;\n \n-type reqchan = _chan[request];\n+type reqchan = _chan<request>;\n \n-type handle = {task: option::t[task_id], chan: reqchan};\n+type handle = {task: option::t<task_id>, chan: reqchan};\n \n tag request {\n-    exec([u8], [u8], [[u8]], _chan[response]);\n+    exec([u8], [u8], [[u8]], _chan<response>);\n     stop;\n }\n \n type response = {pid: int, infd: int, outfd: int, errfd: int};\n \n fn mk() -> handle {\n     let setupport = mk_port();\n-    let task = task::_spawn(bind fn(setupchan: _chan[_chan[request]]) {\n+    let task = task::_spawn(bind fn(setupchan: _chan<_chan<request>>) {\n         let reqport = mk_port();\n         let reqchan = reqport.mk_chan();\n         send(setupchan, reqchan);\n@@ -58,9 +58,9 @@ fn close(handle: &handle) {\n }\n \n fn run(handle: &handle, lib_path: &str,\n-       prog: &str, args: &[str], input: &option::t[str]) ->\n+       prog: &str, args: &[str], input: &option::t<str>) ->\n {status: int, out: str, err: str} {\n-    let p = mk_port[response]();\n+    let p = mk_port<response>();\n     let ch = p.mk_chan();\n     send(handle.chan, exec(str::bytes(lib_path),\n                            str::bytes(prog),\n@@ -75,7 +75,7 @@ fn run(handle: &handle, lib_path: &str,\n     ret {status: status, out: output, err: errput};\n }\n \n-fn writeclose(fd: int, s: &option::t[str]) {\n+fn writeclose(fd: int, s: &option::t<str>) {\n     if option::is_some(s) {\n         let writer = io::new_writer(\n             io::fd_buf_writer(fd, option::none));\n@@ -99,7 +99,7 @@ fn readclose(fd: int) -> str {\n     ret buf;\n }\n \n-fn worker(p: _port[request]) {\n+fn worker(p: _port<request>) {\n \n     // FIXME (787): If we declare this inside of the while loop and then\n     // break out of it before it's ever initialized (i.e. we don't run"}, {"sha": "9fd344c4a377f907120b6679f1788fe2691c240b", "filename": "src/test/compiletest/runtest.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fruntest.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -236,7 +236,7 @@ fn exec_compiled_test(cx: &cx, props: &test_props,\n fn compose_and_run(cx: &cx, testfile: &str,\n                    make_args: fn(&config, &str) -> procargs ,\n                    lib_path: &str,\n-                   input: option::t[str]) -> procres {\n+                   input: option::t<str>) -> procres {\n     let procargs = make_args(cx.config, testfile);\n     ret program_output(cx, testfile, lib_path,\n                        procargs.prog, procargs.args,\n@@ -271,9 +271,9 @@ fn make_run_args(config: &config,\n     ret {prog: args.(0), args: vec::slice(args, 1u, vec::len(args))};\n }\n \n-fn split_maybe_args(argstr: &option::t[str]) -> [str] {\n+fn split_maybe_args(argstr: &option::t<str>) -> [str] {\n     fn rm_whitespace(v: &[str]) -> [str] {\n-        fn flt(s: &str) -> option::t[str] {\n+        fn flt(s: &str) -> option::t<str> {\n             if !is_whitespace(s) {\n                 option::some(s)\n             } else {\n@@ -298,7 +298,7 @@ fn split_maybe_args(argstr: &option::t[str]) -> [str] {\n }\n \n fn program_output(cx: &cx, testfile: &str, lib_path: &str, prog: &str,\n-                  args: &[str], input: option::t[str]) -> procres {\n+                  args: &[str], input: option::t<str>) -> procres {\n     let cmdline =\n     {\n         let cmdline = make_cmdline(lib_path, prog, args);"}, {"sha": "048c72b3458cbc50c0f027639012a18516db4b7e", "filename": "src/test/run-fail/bug-811.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-fail%2Fbug-811.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-fail%2Fbug-811.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-811.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:quux\n-fn test00_start(ch: chan_t[int], message: int) {\n+fn test00_start(ch: chan_t<int>, message: int) {\n     send(ch, message);\n }\n \n@@ -11,6 +11,6 @@ type chan_t[~T] = {\n     port : port_id\n };\n \n-fn send[~T](ch : chan_t[T], data : -T) { fail; }\n+fn send[~T](ch : chan_t<T>, data : -T) { fail; }\n \n fn main() { fail \"quux\"; }"}, {"sha": "863ae4034c142915df216e32ad91d06d78e2f562", "filename": "src/test/run-fail/port-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-fail%2Fport-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-fail%2Fport-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fport-type.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -4,7 +4,7 @@ import std::comm::_chan;\n import std::comm::mk_port;\n import std::comm::send;\n \n-fn echo[~T](c: _chan[T], oc: _chan[_chan[T]]) {\n+fn echo[~T](c: _chan<T>, oc: _chan<_chan<T>>) {\n     // Tests that the type argument in port gets\n     // visited\n     let p = mk_port[T]();"}, {"sha": "5e551eca127f123e3cdf4ec33546030b98719603", "filename": "src/test/run-fail/task-comm-14.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-fail%2Ftask-comm-14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-fail%2Ftask-comm-14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftask-comm-14.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -2,7 +2,7 @@\n // xfail-stage2\n // xfail-stage3\n io fn main() {\n-    let port[int] po = port();\n+    let port<int> po = port();\n \n     // Spawn 10 tasks each sending us back one int.\n     let int i = 10;\n@@ -26,7 +26,7 @@ io fn main() {\n     log \"main thread exiting\";\n }\n \n-io fn child(int x, chan[int] ch) {\n+io fn child(int x, chan<int> ch) {\n     log x;\n     ch <| x;\n }"}, {"sha": "9c77d5a9c4e533b4b6eaaccbb4aa5c2aa311557f", "filename": "src/test/run-fail/trivial-message2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-fail%2Ftrivial-message2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-fail%2Ftrivial-message2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftrivial-message2.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -6,10 +6,10 @@\n   This program should hang on the po |> r line.\n  */\n fn main() {\n-    let po: port[int] = port();\n-    let ch: chan[int] = chan(po);\n+    let po: port<int> = port();\n+    let ch: chan<int> = chan(po);\n     let r;\n     po |> r;\n     ch <| 42;\n     log_err r;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "28349f27a507b123a2a5bddf7174d9061db922c8", "filename": "src/test/run-fail/vec-overrun.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-fail%2Fvec-overrun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-fail%2Fvec-overrun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fvec-overrun.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -9,4 +9,4 @@ fn main() {\n     // Bounds-check failure.\n \n     assert (v.(x + 2) == 20);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "41eb94ca73975b3ab8bcc57395f352f66b040d7a", "filename": "src/test/run-fail/vec-underrun.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-fail%2Fvec-underrun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-fail%2Fvec-underrun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fvec-underrun.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -9,4 +9,4 @@ fn main() {\n     // Bounds-check failure.\n \n     assert (v.(x - 1) == 20);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "6eb011484db68ef785af8551398851d916c05244", "filename": "src/test/run-pass/acyclic-unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Facyclic-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Facyclic-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Facyclic-unwind.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -7,7 +7,7 @@ use std;\n import std::comm;\n import std::task;\n \n-fn f(c: comm::_chan[int]) {\n+fn f(c: comm::_chan<int>) {\n     type t = {_0: int, _1: int, _2: int};\n \n     // Allocate a box.\n@@ -38,4 +38,4 @@ fn main() {\n     i = p.recv();\n \n     log \"parent exiting, killing child\";\n-}\n\\ No newline at end of file\n+}"}, {"sha": "b3cb9d0a374ff0bbf4e04109957b56032aaa0094", "filename": "src/test/run-pass/alias-uninit-value.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -7,10 +7,10 @@ import std::option::none;\n \n tag sty { ty_nil; }\n \n-type raw_t = {struct: sty, cname: option::t[str], hash: uint};\n+type raw_t = {struct: sty, cname: option::t<str>, hash: uint};\n \n-fn mk_raw_ty(st: sty, cname: &option::t[str]) -> raw_t {\n+fn mk_raw_ty(st: sty, cname: &option::t<str>) -> raw_t {\n     ret {struct: st, cname: cname, hash: 0u};\n }\n \n-fn main() { mk_raw_ty(ty_nil, none[str]); }\n\\ No newline at end of file\n+fn main() { mk_raw_ty(ty_nil, none[str]); }"}, {"sha": "ae1f550967898cfc99d3896fe17f416c1bee3f34", "filename": "src/test/run-pass/alloca-from-derived-tydesc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -1,7 +1,7 @@\n tag option[T] { some(T); none; }\n \n-type r[T] = {mutable v: [option[T]]};\n+type r[T] = {mutable v: [option<T>]};\n \n fn f[T]() -> [T] { ret ~[]; }\n \n-fn main() { let r: r[int] = {mutable v: ~[]}; r.v = f(); }\n+fn main() { let r: r<int> = {mutable v: ~[]}; r.v = f(); }"}, {"sha": "471d2fd58fbdccf5baf9e3be8f75421010292ff2", "filename": "src/test/run-pass/alt-join.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Falt-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Falt-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-join.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -5,7 +5,7 @@ import std::option::t;\n import std::option::none;\n import std::option::some;\n \n-fn foo[T](y: &option::t[T]) {\n+fn foo[T](y: &option::t<T>) {\n     let x: int;\n     let rs: [int] = ~[];\n     /* tests that x doesn't get put in the precondition for the\n@@ -16,4 +16,4 @@ fn foo[T](y: &option::t[T]) {\n     ret;\n }\n \n-fn main() { log \"hello\"; foo[int](some[int](5)); }\n\\ No newline at end of file\n+fn main() { log \"hello\"; foo[int](some[int](5)); }"}, {"sha": "910377e4008782df5790698c6b43cae812ea63b5", "filename": "src/test/run-pass/alt-pattern-no-type-params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Falt-pattern-no-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Falt-pattern-no-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-no-type-params.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -1,7 +1,7 @@\n tag maybe[T] { nothing; just(T); }\n \n-fn foo(x: maybe[int]) {\n+fn foo(x: maybe<int>) {\n     alt x { nothing. { log_err \"A\"; } just(a) { log_err \"B\"; } }\n }\n \n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}, {"sha": "8f0a58772315660acbb3a4aa6b0f094981ddbaed", "filename": "src/test/run-pass/basic-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fbasic-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fbasic-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic-1.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -6,7 +6,7 @@ import std::comm::mk_port;\n import std::comm::send;\n import std::task;\n \n-fn a(c: _chan[int]) { send(c, 10); }\n+fn a(c: _chan<int>) { send(c, 10); }\n \n fn main() {\n     let p = mk_port();\n@@ -18,12 +18,12 @@ fn main() {\n     //    log \"Finished.\";\n }\n \n-fn b(c: _chan[int]) {\n+fn b(c: _chan<int>) {\n     //    log \"task b0\";\n     //    log \"task b1\";\n     //    log \"task b2\";\n     //    log \"task b3\";\n     //    log \"task b4\";\n     //    log \"task b5\";\n     send(c, 10);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "88c5360ccba842f9976ae1356e18f7a0b5d79ac1", "filename": "src/test/run-pass/basic-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fbasic-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fbasic-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic-2.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -6,7 +6,7 @@ import std::comm::send;\n import std::comm::_chan;\n import std::task;\n \n-fn a(c: _chan[int]) { log \"task a0\"; log \"task a1\"; send(c, 10); }\n+fn a(c: _chan<int>) { log \"task a0\"; log \"task a1\"; send(c, 10); }\n \n fn main() {\n     let p = comm::mk_port();\n@@ -18,11 +18,11 @@ fn main() {\n     log \"Finished.\";\n }\n \n-fn b(c: _chan[int]) {\n+fn b(c: _chan<int>) {\n     log \"task b0\";\n     log \"task b1\";\n     log \"task b2\";\n     log \"task b2\";\n     log \"task b3\";\n     send(c, 10);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "e51a5b60b4b7169e62f169529eb1c91911117313", "filename": "src/test/run-pass/basic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -6,7 +6,7 @@ import std::comm::send;\n import std::comm::_chan;\n import std::task;\n \n-fn a(c: _chan[int]) {\n+fn a(c: _chan<int>) {\n     if true {\n         log \"task a\";\n         log \"task a\";\n@@ -36,7 +36,7 @@ fn main() {\n     log \"children finished, root finishing\";\n }\n \n-fn b(c: _chan[int]) {\n+fn b(c: _chan<int>) {\n     if true {\n         log \"task b\";\n         log \"task b\";\n@@ -46,4 +46,4 @@ fn b(c: _chan[int]) {\n         log \"task b\";\n     }\n     send(c, 10);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "d84a86bb56975983c76c6d7c2bcbf0c31bfc4014", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -69,7 +69,7 @@ fn test_port() {\n }\n \n fn test_chan() {\n-    let p: comm::_port[int] = comm::mk_port();\n+    let p: comm::_port<int> = comm::mk_port();\n     let ch1 = p.mk_chan();\n     let ch2 = p.mk_chan();\n \n@@ -114,10 +114,10 @@ fn test_fn() {\n }\n \n native \"rust\" mod native_mod = \"\" {\n-    fn str_byte_len(s: str) -> vec[u8];\n+    fn str_byte_len(s: str) -> vec<u8>;\n     // This isn't actually the signature of str_alloc, but since\n     // we're not calling it that shouldn't matter\n-    fn str_alloc(s: str) -> vec[u8];\n+    fn str_alloc(s: str) -> vec<u8>;\n }\n \n // FIXME: comparison of native fns"}, {"sha": "de88a538fee37088f3d02cc20d3a2a138c275676", "filename": "src/test/run-pass/box-inside-if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -12,4 +12,4 @@ fn foo(acc: int, n: int) {\n     if is_odd(n) && length_is_even(some_box(1)) { log_err \"bloop\"; }\n }\n \n-fn main() { foo(67, 5); }\n\\ No newline at end of file\n+fn main() { foo(67, 5); }"}, {"sha": "8b18c36fbed390e1ad0eca61123d8aab7ed4cbac", "filename": "src/test/run-pass/box-inside-if2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -12,4 +12,4 @@ fn foo(acc: int, n: int) {\n     if is_odd(n) || length_is_even(some_box(1)) { log_err \"bloop\"; }\n }\n \n-fn main() { foo(67, 5); }\n\\ No newline at end of file\n+fn main() { foo(67, 5); }"}, {"sha": "4392e01c0a9752d7e63e3694e3e5d66b64f34efa", "filename": "src/test/run-pass/box-unbox.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-unbox.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -2,11 +2,11 @@\n \n type box[T] = {c: @T};\n \n-fn unbox[T](b: &box[T]) -> T { ret *b.c; }\n+fn unbox[T](b: &box<T>) -> T { ret *b.c; }\n \n fn main() {\n     let foo: int = 17;\n-    let bfoo: box[int] = {c: @foo};\n+    let bfoo: box<int> = {c: @foo};\n     log \"see what's in our box\";\n     assert (unbox[int](bfoo) == foo);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "43ddd80562c3a8126c4f72f19a5385a0c7789247", "filename": "src/test/run-pass/chan-leak.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchan-leak.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -9,12 +9,12 @@ import std::comm::mk_port;\n \n tag request {\n   quit;\n-  close(_chan[bool]);\n+  close(_chan<bool>);\n }\n \n-type ctx = _chan[request];\n+type ctx = _chan<request>;\n \n-fn request_task(c: _chan[ctx]) {\n+fn request_task(c: _chan<ctx>) {\n     let p = mk_port();\n     send(c, p.mk_chan());\n     let req: request;\n@@ -34,7 +34,7 @@ fn new() -> ctx {\n fn main() {\n     let cx = new();\n \n-    let p = mk_port[bool]();\n+    let p = mk_port<bool>();\n     send(cx, close(p.mk_chan()));\n     send(cx, quit);\n }"}, {"sha": "8c203ecd23f008635dc1e7bbef3f79a2deb0fa87", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -15,8 +15,8 @@ fn main() {\n     assert (y == 10);\n }\n \n-fn child(c: _chan[int]) {\n+fn child(c: _chan<int>) {\n     log_err \"sending\";\n     send(c, 10);\n     log_err \"value sent\"\n-}\n\\ No newline at end of file\n+}"}, {"sha": "429bea89771f335fa445a3b326f7b821b6c17835", "filename": "src/test/run-pass/command-line-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fcommand-line-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fcommand-line-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcommand-line-args.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -1,3 +1,3 @@\n \n \n-fn main(args: [str]) { log args.(0); }\n\\ No newline at end of file\n+fn main(args: [str]) { log args.(0); }"}, {"sha": "e4d0526fbc1832c908beceda313b94a8b61c4174", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -84,4 +84,4 @@ mod test_native_items {\n         fn str_byte_len(s: str) -> uint;\n         fn str_byte_len(s: str) -> uint;\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "0fab46f07612a55ecb737a39617708de641716e5", "filename": "src/test/run-pass/decl-with-recv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fdecl-with-recv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fdecl-with-recv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdecl-with-recv.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -13,4 +13,4 @@ fn main() {\n     send(ch, 11);\n     let j = po.recv();\n     assert (j == 11);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "de1d84ae1345ffef6fd03b2cf785868af5a6adaa", "filename": "src/test/run-pass/empty-mutable-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fempty-mutable-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fempty-mutable-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-mutable-vec.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -1,3 +1,3 @@\n \n \n-fn main() { let v: [mutable int] = ~[mutable ]; }\n\\ No newline at end of file\n+fn main() { let v: [mutable int] = ~[mutable ]; }"}, {"sha": "23ec4c9eed3c3a43eb0319d92c0c4f6606d633db", "filename": "src/test/run-pass/export-non-interference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -2,6 +2,6 @@\n export foo;\n export main;\n \n-tag list_cell[T] { cons(@list_cell[T]); }\n+tag list_cell[T] { cons(@list_cell<T>); }\n \n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}, {"sha": "5618c642a7bc5d558cc812a718702ea0d3ee90c1", "filename": "src/test/run-pass/expr-alt-generic-box1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -4,7 +4,7 @@\n // -*- rust -*-\n type compare[T] = fn(@T, @T) -> bool ;\n \n-fn test_generic[T](expected: @T, eq: &compare[T]) {\n+fn test_generic[T](expected: @T, eq: &compare<T>) {\n     let actual: @T = alt true { true { expected } };\n     assert (eq(expected, actual));\n }\n@@ -15,4 +15,4 @@ fn test_box() {\n     test_generic[bool](@true, eq);\n }\n \n-fn main() { test_box(); }\n\\ No newline at end of file\n+fn main() { test_box(); }"}, {"sha": "318158485caf82e62082ebbe089967f7cc2ce94b", "filename": "src/test/run-pass/expr-alt-generic-box2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -4,7 +4,7 @@\n // -*- rust -*-\n type compare[T] = fn(&T, &T) -> bool ;\n \n-fn test_generic[T](expected: &T, eq: &compare[T]) {\n+fn test_generic[T](expected: &T, eq: &compare<T>) {\n     let actual: T = alt true { true { expected } };\n     assert (eq(expected, actual));\n }\n@@ -15,4 +15,4 @@ fn test_vec() {\n     test_generic[@int](@1, eq);\n }\n \n-fn main() { test_vec(); }\n\\ No newline at end of file\n+fn main() { test_vec(); }"}, {"sha": "3094331480f29c21a757cf2ac2d8d6eb345f872f", "filename": "src/test/run-pass/expr-alt-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -4,7 +4,7 @@\n // -*- rust -*-\n type compare[T] = fn(&T, &T) -> bool ;\n \n-fn test_generic[T](expected: &T, eq: &compare[T]) {\n+fn test_generic[T](expected: &T, eq: &compare<T>) {\n     let actual: T = alt true { true { expected } };\n     assert (eq(expected, actual));\n }\n@@ -23,4 +23,4 @@ fn test_rec() {\n     test_generic[t]({a: 1, b: 2}, eq);\n }\n \n-fn main() { test_bool(); test_rec(); }\n\\ No newline at end of file\n+fn main() { test_bool(); test_rec(); }"}, {"sha": "66825e5c08e4e93443f0a629f964ebaa6a05930e", "filename": "src/test/run-pass/expr-block-generic-box1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -4,7 +4,7 @@\n // -*- rust -*-\n type compare[T] = fn(@T, @T) -> bool ;\n \n-fn test_generic[T](expected: @T, eq: &compare[T]) {\n+fn test_generic[T](expected: @T, eq: &compare<T>) {\n     let actual: @T = { expected };\n     assert (eq(expected, actual));\n }\n@@ -19,4 +19,4 @@ fn test_box() {\n     test_generic[bool](@true, eq);\n }\n \n-fn main() { test_box(); }\n\\ No newline at end of file\n+fn main() { test_box(); }"}, {"sha": "b1fd8e51487616618d8ab8a72a84d45d69ccfff3", "filename": "src/test/run-pass/expr-block-generic-box2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -4,7 +4,7 @@\n // -*- rust -*-\n type compare[T] = fn(&T, &T) -> bool ;\n \n-fn test_generic[T](expected: &T, eq: &compare[T]) {\n+fn test_generic[T](expected: &T, eq: &compare<T>) {\n     let actual: T = { expected };\n     assert (eq(expected, actual));\n }\n@@ -15,4 +15,4 @@ fn test_vec() {\n     test_generic[@int](@1, eq);\n }\n \n-fn main() { test_vec(); }\n\\ No newline at end of file\n+fn main() { test_vec(); }"}, {"sha": "6a50e2fa33f8c0c6b31f30c4baed63445f198e77", "filename": "src/test/run-pass/expr-block-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -6,7 +6,7 @@\n // Tests for standalone blocks as expressions with dynamic type sizes\n type compare[T] = fn(&T, &T) -> bool ;\n \n-fn test_generic[T](expected: &T, eq: &compare[T]) {\n+fn test_generic[T](expected: &T, eq: &compare<T>) {\n     let actual: T = { expected };\n     assert (eq(expected, actual));\n }\n@@ -25,4 +25,4 @@ fn test_rec() {\n     test_generic[t]({a: 1, b: 2}, eq);\n }\n \n-fn main() { test_bool(); test_rec(); }\n\\ No newline at end of file\n+fn main() { test_bool(); test_rec(); }"}, {"sha": "c1cd3985daf65b64faf902d1c359673b89457e3f", "filename": "src/test/run-pass/expr-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fexpr-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fexpr-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-fn.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -55,4 +55,4 @@ fn main() {\n     test_ret();\n     test_372();\n     test_nil();\n-}\n\\ No newline at end of file\n+}"}, {"sha": "8e848c6db75ee3f210522907d225015c8ba4dcbc", "filename": "src/test/run-pass/expr-if-generic-box1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -4,7 +4,7 @@\n // -*- rust -*-\n type compare[T] = fn(@T, @T) -> bool ;\n \n-fn test_generic[T](expected: @T, not_expected: @T, eq: &compare[T]) {\n+fn test_generic[T](expected: @T, not_expected: @T, eq: &compare<T>) {\n     let actual: @T = if true { expected } else { not_expected };\n     assert (eq(expected, actual));\n }\n@@ -15,4 +15,4 @@ fn test_box() {\n     test_generic[bool](@true, @false, eq);\n }\n \n-fn main() { test_box(); }\n\\ No newline at end of file\n+fn main() { test_box(); }"}, {"sha": "5f7c87ac78eda572590cb8187a405d3875bd80f9", "filename": "src/test/run-pass/expr-if-generic-box2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -4,7 +4,7 @@\n // -*- rust -*-\n type compare[T] = fn(&T, &T) -> bool ;\n \n-fn test_generic[T](expected: &T, not_expected: &T, eq: &compare[T]) {\n+fn test_generic[T](expected: &T, not_expected: &T, eq: &compare<T>) {\n     let actual: T = if true { expected } else { not_expected };\n     assert (eq(expected, actual));\n }\n@@ -15,4 +15,4 @@ fn test_vec() {\n     test_generic[@int](@1, @2, eq);\n }\n \n-fn main() { test_vec(); }\n\\ No newline at end of file\n+fn main() { test_vec(); }"}, {"sha": "40365ef53f923481005bcc8a4d265b182e9c8f5b", "filename": "src/test/run-pass/expr-if-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -6,7 +6,7 @@\n // Tests for if as expressions with dynamic type sizes\n type compare[T] = fn(&T, &T) -> bool ;\n \n-fn test_generic[T](expected: &T, not_expected: &T, eq: &compare[T]) {\n+fn test_generic[T](expected: &T, not_expected: &T, eq: &compare<T>) {\n     let actual: T = if true { expected } else { not_expected };\n     assert (eq(expected, actual));\n }\n@@ -25,4 +25,4 @@ fn test_rec() {\n     test_generic[t]({a: 1, b: 2}, {a: 2, b: 3}, eq);\n }\n \n-fn main() { test_bool(); test_rec(); }\n\\ No newline at end of file\n+fn main() { test_bool(); test_rec(); }"}, {"sha": "ce75bcde1fd7652fad3ac203d0305901472e88fc", "filename": "src/test/run-pass/foreach-box-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fforeach-box-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fforeach-box-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-box-drop.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -4,6 +4,6 @@ obj ob[K](k: K) {\n     iter foo() -> @{a: K} { put @{a: k}; }\n }\n \n-fn x(o: &ob[str]) { for each i: @{a: str} in o.foo() { } }\n+fn x(o: &ob<str>) { for each i: @{a: str} in o.foo() { } }\n \n fn main() { let o = ob[str](\"hi\" + \"there\"); x(o); }"}, {"sha": "b49f286d12ba503042dbf755a0529d5f174c4243", "filename": "src/test/run-pass/generic-exterior-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -2,10 +2,10 @@\n \n type recbox[T] = {x: @T};\n \n-fn reclift[T](t: &T) -> recbox[T] { ret {x: @t}; }\n+fn reclift[T](t: &T) -> recbox<T> { ret {x: @t}; }\n \n fn main() {\n     let foo: int = 17;\n-    let rbfoo: recbox[int] = reclift[int](foo);\n+    let rbfoo: recbox<int> = reclift[int](foo);\n     assert (*rbfoo.x == foo);\n }"}, {"sha": "53e813c3ccbf04204a50965755ce6e9047bf085b", "filename": "src/test/run-pass/generic-obj-with-derived-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -7,12 +7,12 @@ obj handle[T](data: T) {\n fn main() {\n     type rgb = {x: u8, y: u8, z: u8};\n \n-    let h: handle[rgb] = handle[rgb]({x: 1 as u8, y: 2 as u8, z: 3 as u8});\n+    let h: handle<rgb> = handle[rgb]({x: 1 as u8, y: 2 as u8, z: 3 as u8});\n     log \"constructed object\";\n     log h.get().x;\n     log h.get().y;\n     log h.get().z;\n     assert (h.get().x == 1 as u8);\n     assert (h.get().y == 2 as u8);\n     assert (h.get().z == 3 as u8);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "8e1da513026172e592bc24124873a8219eded3a9", "filename": "src/test/run-pass/generic-obj.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -11,7 +11,7 @@ obj buf[T](data: {_0: T, _1: T, _2: T}) {\n }\n \n fn main() {\n-    let b: buf[int] = buf[int]({_0: 1, _1: 2, _2: 3});\n+    let b: buf<int> = buf[int]({_0: 1, _1: 2, _2: 3});\n     log \"constructed object\";\n     log b.get(0);\n     log b.get(1);\n@@ -20,4 +20,4 @@ fn main() {\n     assert (b.get(1) == 2);\n     assert (b.get(2) == 3);\n     b.take2(0);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "92d5c354f00166e8ee180d4c880447902549b28a", "filename": "src/test/run-pass/generic-recursive-tag.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -1,8 +1,8 @@\n \n \n-tag list[T] { cons(@T, @list[T]); nil; }\n+tag list[T] { cons(@T, @list<T>); nil; }\n \n fn main() {\n-    let a: list[int] =\n+    let a: list<int> =\n         cons[int](@10, @cons[int](@12, @cons[int](@13, @nil[int])));\n-}\n\\ No newline at end of file\n+}"}, {"sha": "4adf719a741530fe74b363d2bd6b8e9c6806d60e", "filename": "src/test/run-pass/generic-tag-alt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fgeneric-tag-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fgeneric-tag-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-alt.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -2,10 +2,10 @@\n \n tag foo[T] { arm(T); }\n \n-fn altfoo[T](f: &foo[T]) {\n+fn altfoo[T](f: &foo<T>) {\n     let hit = false;\n     alt f { arm[T](x) { log \"in arm\"; hit = true; } }\n     assert (hit);\n }\n \n-fn main() { altfoo[int](arm[int](10)); }\n\\ No newline at end of file\n+fn main() { altfoo[int](arm[int](10)); }"}, {"sha": "c85abc4778b5b364860d5d837aa9c07d7e9223c0", "filename": "src/test/run-pass/generic-tag-values.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -5,10 +5,10 @@\n tag noption[T] { some(T); }\n \n fn main() {\n-    let nop: noption[int] = some[int](5);\n+    let nop: noption<int> = some[int](5);\n     alt nop { some[int](n) { log n; assert (n == 5); } }\n-    let nop2: noption[{x: int, y: int}] = some({x: 17, y: 42});\n+    let nop2: noption<{x: int, y: int}> = some({x: 17, y: 42});\n     alt nop2 {\n       some(t) { log t.x; log t.y; assert (t.x == 17); assert (t.y == 42); }\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "a6175646bed10845ee65cef320d95b64d145489c", "filename": "src/test/run-pass/generic-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -2,4 +2,4 @@\n \n tag option[T] { some(@T); none; }\n \n-fn main() { let a: option[int] = some[int](@10); a = none[int]; }\n\\ No newline at end of file\n+fn main() { let a: option<int> = some[int](@10); a = none[int]; }"}, {"sha": "a58c86b3e5923c2861f30332bd1b89cce5459c5d", "filename": "src/test/run-pass/generic-type-synonym.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fgeneric-type-synonym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fgeneric-type-synonym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-type-synonym.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -2,8 +2,8 @@\n \n type foo[T] = {a: T};\n \n-type bar[T] = foo[T];\n+type bar[T] = foo<T>;\n \n-fn takebar[T](b: &bar[T]) { }\n+fn takebar[T](b: &bar<T>) { }\n \n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}, {"sha": "93aba151eb18682de5cbe73e66b6f3fceddea7cd", "filename": "src/test/run-pass/generic-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fgeneric-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fgeneric-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-type.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -3,7 +3,7 @@\n type pair[T] = {x: T, y: T};\n \n fn main() {\n-    let x: pair[int] = {x: 10, y: 12};\n+    let x: pair<int> = {x: 10, y: 12};\n     assert (x.x == 10);\n     assert (x.y == 12);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "7d99ee112a28124109b96c311b9d81e6af44c606", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -30,17 +30,17 @@ mod map_reduce {\n \n     type mapper = fn(str, putter) ;\n \n-    tag ctrl_proto { find_reducer([u8], _chan[int]); mapper_done; }\n+    tag ctrl_proto { find_reducer([u8], _chan<int>); mapper_done; }\n \n-    fn start_mappers(ctrl: _chan[ctrl_proto], inputs: &[str]) {\n+    fn start_mappers(ctrl: _chan<ctrl_proto>, inputs: &[str]) {\n         for i: str in inputs { task::_spawn(bind map_task(ctrl, i)); }\n     }\n \n-    fn map_task(ctrl: _chan[ctrl_proto], input: str) {\n+    fn map_task(ctrl: _chan<ctrl_proto>, input: str) {\n \n         let intermediates = map::new_str_hash();\n \n-        fn emit(im: &map::hashmap[str, int], ctrl: _chan[ctrl_proto],\n+        fn emit(im: &map::hashmap<str, int>, ctrl: _chan<ctrl_proto>,\n                 key: str, val: str) {\n             let c;\n             alt im.find(key) {\n@@ -62,12 +62,12 @@ mod map_reduce {\n     }\n \n     fn map_reduce(inputs: &[str]) {\n-        let ctrl = mk_port[ctrl_proto]();\n+        let ctrl = mk_port<ctrl_proto>();\n \n         // This task becomes the master control task. It spawns others\n         // to do the rest.\n \n-        let reducers: map::hashmap[str, int];\n+        let reducers: map::hashmap<str, int>;\n \n         reducers = map::new_str_hash();\n "}, {"sha": "9e263b734135b433446ed8b78d4e0487ca05f546", "filename": "src/test/run-pass/import4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fimport4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fimport4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport4.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -5,4 +5,4 @@ mod zed {\n     fn bar() { log \"bar\"; }\n }\n \n-fn main(args: [str]) { let zed = 42; bar(); }\n\\ No newline at end of file\n+fn main(args: [str]) { let zed = 42; bar(); }"}, {"sha": "9f3ec6d2b459017e6204d9f9606a1bb47024febd", "filename": "src/test/run-pass/import5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fimport5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fimport5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport5.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -7,4 +7,4 @@ mod foo {\n     }\n }\n \n-fn main(args: [str]) { bar(); }\n\\ No newline at end of file\n+fn main(args: [str]) { bar(); }"}, {"sha": "40c3d2357bf3be3ad837c2eeb23735d86f3f2b04", "filename": "src/test/run-pass/import7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fimport7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fimport7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport7.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -12,4 +12,4 @@ mod bar {\n         mod zed { }\n     }\n }\n-fn main(args: [str]) { baz(); }\n\\ No newline at end of file\n+fn main(args: [str]) { baz(); }"}, {"sha": "7b95cfcda670a02d89913a22053264533f1d2107", "filename": "src/test/run-pass/integral-indexing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -17,4 +17,4 @@ fn main() {\n     assert (s.(3u32) == 'd' as u8);\n     assert (s.(3i32) == 'd' as u8);\n     log s.(3u8);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "699e730c5fe485bbf36c1e723251edfb75005df8", "filename": "src/test/run-pass/issue-507.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fissue-507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fissue-507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-507.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -13,9 +13,9 @@ import std::comm;\n import std::comm::_chan;\n import std::comm::send;\n \n-fn grandchild(c: _chan[int]) { send(c, 42); }\n+fn grandchild(c: _chan<int>) { send(c, 42); }\n \n-fn child(c: _chan[int]) {\n+fn child(c: _chan<int>) {\n     let _grandchild = task::_spawn(bind grandchild(c));\n     join_id(_grandchild);\n }\n@@ -32,4 +32,4 @@ fn main() {\n     assert (x == 42);\n \n     join_id(_child);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "11731fca56dc472487496a8cde9b3c7015f6df9e", "filename": "src/test/run-pass/issue-687.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fissue-687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fissue-687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-687.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -9,14 +9,14 @@ import std::comm::send;\n \n tag msg { closed; received([u8]); }\n \n-fn producer(c: _chan[[u8]]) {\n+fn producer(c: _chan<[u8]>) {\n     send(c, ~[1u8, 2u8, 3u8, 4u8]);\n     let empty: [u8] = ~[];\n     send(c, empty);\n }\n \n-fn packager(cb: _chan[_chan[[u8]]], msg: _chan[msg]) {\n-    let p: _port[[u8]] = mk_port();\n+fn packager(cb: _chan<_chan<[u8]>>, msg: _chan<msg>) {\n+    let p: _port<[u8]> = mk_port();\n     send(cb, p.mk_chan());\n     while true {\n         log \"waiting for bytes\";\n@@ -37,12 +37,12 @@ fn packager(cb: _chan[_chan[[u8]]], msg: _chan[msg]) {\n }\n \n fn main() {\n-    let p: _port[msg] = mk_port();\n-    let recv_reader: _port[_chan[[u8]]] = mk_port();\n+    let p: _port<msg> = mk_port();\n+    let recv_reader: _port<_chan<[u8]>> = mk_port();\n     let pack = task::_spawn(bind packager(recv_reader.mk_chan(),\n                                           p.mk_chan()));\n \n-    let source_chan: _chan[[u8]] = recv_reader.recv();\n+    let source_chan: _chan<[u8]> = recv_reader.recv();\n     let prod = task::_spawn(bind producer(source_chan));\n \n     while true {"}, {"sha": "41cc89aed7e89d390ec2bb257f261c0412283ead", "filename": "src/test/run-pass/ivec-tag.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-tag.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -7,13 +7,13 @@ import std::comm::_port;\n import std::comm::mk_port;\n import std::comm::send;\n \n-fn producer(c: _chan[[u8]]) {\n+fn producer(c: _chan<[u8]>) {\n     send(c, ~[1u8, 2u8, 3u8, 4u8, 5u8, 6u8, 7u8,\n               8u8, 9u8, 10u8, 11u8, 12u8, 13u8 ]);\n }\n \n fn main() {\n-    let p: _port[[u8]] = mk_port();\n+    let p: _port<[u8]> = mk_port();\n     let prod = task::_spawn(bind producer(p.mk_chan()));\n \n     let data: [u8] = p.recv();"}, {"sha": "e36327649bb5b0063bcd0baa9b00a35f24e607a6", "filename": "src/test/run-pass/lazychan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Flazychan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Flazychan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazychan.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -21,4 +21,4 @@ fn main() {\n     assert (y == 10);\n }\n \n-fn child(c: _chan[int]) { send(c, 10); }\n\\ No newline at end of file\n+fn child(c: _chan<int>) { send(c, 10); }"}, {"sha": "3413c6a31471b7a0ab32a6a4588721d1b0b49d64", "filename": "src/test/run-pass/many.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fmany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fmany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmany.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -4,7 +4,7 @@ use std;\n import std::task;\n import std::comm;\n \n-fn sub(parent: comm::_chan[int], id: int) {\n+fn sub(parent: comm::_chan<int>, id: int) {\n   if (id == 0) {\n       comm::send(parent, 0);\n   } else {"}, {"sha": "8e10eb4b71013046e6fe3982513f8ddff20bf38f", "filename": "src/test/run-pass/mod-view-items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fmod-view-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fmod-view-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmod-view-items.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -10,4 +10,4 @@ mod m {\n     fn f() -> [int] { vec::init_elt(0, 1u) }\n }\n \n-fn main() { let x = m::f(); }\n\\ No newline at end of file\n+fn main() { let x = m::f(); }"}, {"sha": "96e7425d2a5e870698ed263b4b861490b6336a6a", "filename": "src/test/run-pass/mutable-alias-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -13,4 +13,4 @@ fn main() {\n     let len = std::vec::len[int](v);\n     log len;\n     assert (len == 3 as uint);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "58dc936083a13084898d0cdcf81d6f01e01b093c", "filename": "src/test/run-pass/mutable-vec-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -3,4 +3,4 @@ fn main() {\n     // This just tests whether the vec leaks its members.\n     let pvec: [mutable @{a: int, b: int}] =\n         ~[mutable @{a: 1, b: 2}, @{a: 3, b: 4}, @{a: 5, b: 6}];\n-}\n\\ No newline at end of file\n+}"}, {"sha": "060388b12e0a60c97d63362f346b6a0bfc924090", "filename": "src/test/run-pass/native2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fnative2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fnative2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnative2.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -15,4 +15,4 @@ native \"cdecl\" mod libc = \"\" {\n \n native \"cdecl\" mod baz = \"\" { }\n \n-fn main(args: [str]) { }\n\\ No newline at end of file\n+fn main(args: [str]) { }"}, {"sha": "4b77fc5f8708bdf634df4b8c4aa933f7e196274d", "filename": "src/test/run-pass/nested-pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fnested-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fnested-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-pattern.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -6,7 +6,7 @@ import std::option;\n import std::option::some;\n import std::option::none;\n \n-tag t { foo(int, uint); bar(int, option::t[int]); }\n+tag t { foo(int, uint); bar(int, option::t<int>); }\n \n fn nested(o: t) {\n     alt o {\n@@ -15,4 +15,4 @@ fn nested(o: t) {\n     }\n }\n \n-fn main() { nested(bar(1, none[int])); }\n\\ No newline at end of file\n+fn main() { nested(bar(1, none[int])); }"}, {"sha": "09e138982bef5bcb73f9cd36ca7c44b37f4aa67c", "filename": "src/test/run-pass/newtype-polymorphic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -1,12 +1,12 @@\n tag myvec[X] = [X];\n \n-fn myvec_deref[X](mv: &myvec[X]) -> [X] { ret *mv; }\n+fn myvec_deref[X](mv: &myvec<X>) -> [X] { ret *mv; }\n \n-fn myvec_elt[X](mv: &myvec[X]) -> X { ret mv.(0); }\n+fn myvec_elt[X](mv: &myvec<X>) -> X { ret mv.(0); }\n \n fn main() {\n     let mv = myvec(~[1, 2, 3]);\n     assert (myvec_deref(mv).(1) == 2);\n     assert (myvec_elt(mv) == 1);\n     assert (mv.(2) == 3);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "8d4600d90e85738bea2c869051d9960680cc6fb1", "filename": "src/test/run-pass/obj-docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fobj-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fobj-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-docs.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -47,7 +47,7 @@ fn main() {\n         }\n     }\n \n-    obj sender(c: _chan[int]) {\n+    obj sender(c: _chan<int>) {\n         fn take(z: int) {\n             send(c, z);\n         }"}, {"sha": "7e5d16339c070b3b011d4d26d006ac8f371a6934", "filename": "src/test/run-pass/obj-return-polytypes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fobj-return-polytypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fobj-return-polytypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-return-polytypes.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -4,10 +4,10 @@\n // -*- rust -*-\n tag clam[T] { signed(int); unsigned(uint); }\n \n-fn getclam[T]() -> clam[T] { ret signed[T](42); }\n+fn getclam[T]() -> clam<T> { ret signed[T](42); }\n \n obj impatience[T]() {\n-    fn moreclam() -> clam[T] { be getclam[T](); }\n+    fn moreclam() -> clam<T> { be getclam[T](); }\n }\n \n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}, {"sha": "db4050aaf949273f9a3e53bbf888d337aca48767", "filename": "src/test/run-pass/obj-with-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fobj-with-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fobj-with-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-with-vec.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -7,4 +7,4 @@ fn main() {\n     let b = buf(~[1 as u8, 2 as u8, 3 as u8]);\n     log b.get(1);\n     assert (b.get(1) == 2 as u8);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "4fe43d181218c67c04e8fc156abd25fa67e6a7ad", "filename": "src/test/run-pass/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpath.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -4,4 +4,4 @@ mod foo {\n     fn bar(offset: uint) { }\n }\n \n-fn main(args: [str]) { foo::bar(0u); }\n\\ No newline at end of file\n+fn main(args: [str]) { foo::bar(0u); }"}, {"sha": "4fc67429e2c50336b8343c3e28ea1f8ada6fa880", "filename": "src/test/run-pass/preempt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fpreempt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fpreempt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpreempt.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -3,7 +3,7 @@\n // xfail-stage3\n // This checks that preemption works.\n \n-fn starve_main(alive: chan[int]) {\n+fn starve_main(alive: chan<int>) {\n     log \"signalling main\";\n     alive <| 1;\n     log \"starving main\";\n@@ -12,7 +12,7 @@ fn starve_main(alive: chan[int]) {\n }\n \n fn main() {\n-    let alive: port[int] = port();\n+    let alive: port<int> = port();\n     log \"main started\";\n     let s: task = spawn starve_main(chan(alive));\n     let i: int;\n@@ -21,4 +21,4 @@ fn main() {\n     log \"main got alive signal\";\n     while i < 50 { log \"main iterated\"; i += 1; }\n     log \"main completed\";\n-}\n\\ No newline at end of file\n+}"}, {"sha": "9a191b4d07472d0c7434a155b4b5e380c18b0168", "filename": "src/test/run-pass/resource-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -9,7 +9,7 @@ resource close_res(i: closable) {\n \n tag option[T] { none; some(T); }\n \n-fn sink(res: option[close_res]) {}\n+fn sink(res: option<close_res>) {}\n \n fn main() {\n     let c = @mutable true;"}, {"sha": "1d0d4fbc396a02ae5fdcc848262fa1ce9c4a1f43", "filename": "src/test/run-pass/ret-none.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fret-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fret-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fret-none.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -2,6 +2,6 @@\n \n tag option[T] { none; some(T); }\n \n-fn f[T]() -> option[T] { ret none; }\n+fn f[T]() -> option<T> { ret none; }\n \n-fn main() { f[int](); }\n\\ No newline at end of file\n+fn main() { f[int](); }"}, {"sha": "cfd946e86afd54520d3d0e9f1ca0acc36a6d7667", "filename": "src/test/run-pass/rt-circular-buffer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -28,7 +28,7 @@ fn test_init() {\n // Dump lots of items into the channel so it has to grow.\n // Don't trigger any assertions.\n fn test_grow() {\n-    let myport: comm::_port[record] = comm::mk_port();\n+    let myport: comm::_port<record> = comm::mk_port();\n     let mychan = myport.mk_chan();\n     for each i: uint  in uint::range(0u, 100u) {\n         let val: record = {val1: 0u32, val2: 0u32, val3: 0u32};"}, {"sha": "92cff8ba8c437b158d88e69b3ab9bad4f0b06d78", "filename": "src/test/run-pass/send-type-inference.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -6,8 +6,8 @@ import std::comm::mk_port;\n // tests that ctrl's type gets inferred properly\n type command[K, V] = {key: K, val: V};\n \n-fn cache_server[K, V](c: _chan[_chan[command[K, V]]]) {\n-    let ctrl = mk_port[_chan[command[K, V]]]();\n+fn cache_server[K, V](c: _chan<_chan<command<K, V>>>) {\n+    let ctrl = mk_port[_chan<command<K, V>>]();\n     send(c, ctrl.mk_chan());\n }\n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}, {"sha": "85db2e44cf5f36f5c32b4bdc33a1f3358a371dab", "filename": "src/test/run-pass/size-and-align.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsize-and-align.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -4,14 +4,14 @@\n // -*- rust -*-\n tag clam[T] { a(T, int); b; }\n \n-fn uhoh[T](v: &[clam[T]]) {\n+fn uhoh[T](v: &[clam<T>]) {\n     alt v.(1) {\n       a[T](t, u) { log \"incorrect\"; log u; fail; }\n       b[T]. { log \"correct\"; }\n     }\n }\n \n fn main() {\n-    let v: [clam[int]] = ~[b[int], b[int], a[int](42, 17)];\n+    let v: [clam<int>] = ~[b[int], b[int], a[int](42, 17)];\n     uhoh[int](v);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "310fe5d3769ddcda0e0186f5a7e7f5b36a0b8b7b", "filename": "src/test/run-pass/spawn-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-types.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -10,11 +10,11 @@ import std::str;\n import std::comm;\n import std::task;\n \n-type ctx = comm::_chan[int];\n+type ctx = comm::_chan<int>;\n \n fn iotask(cx: ctx, ip: str) { assert (str::eq(ip, \"localhost\")); }\n \n fn main() {\n-    let p = comm::mk_port[int]();\n+    let p = comm::mk_port<int>();\n     task::_spawn(bind iotask(p.mk_chan(), \"localhost\"));\n }"}, {"sha": "943c9a49b3a20c040a2eab1c5841987e5d305650", "filename": "src/test/run-pass/swap-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fswap-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fswap-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fswap-2.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -9,4 +9,4 @@ fn main() {\n     n <-> a.(0);\n     assert (a.(0) == 42);\n     assert (n == 0);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "d76ee9ed12ae34cc72e03f859691df14d039706b", "filename": "src/test/run-pass/tag-in-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftag-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftag-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-in-block.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -6,4 +6,4 @@ fn foo() {\n     fn baz() { zed(nil); }\n }\n \n-fn main(args: [str]) { }\n\\ No newline at end of file\n+fn main(args: [str]) { }"}, {"sha": "f49c2088b79f0801cf6c5b20adb16382930d156b", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -9,7 +9,7 @@ import std::task;\n \n fn main() { test05(); }\n \n-fn test05_start(ch : _chan[int]) {\n+fn test05_start(ch : _chan<int>) {\n     log_err ch;\n     send(ch, 10);\n     log_err \"sent 10\";\n@@ -20,7 +20,7 @@ fn test05_start(ch : _chan[int]) {\n }\n \n fn test05() {\n-    let po = comm::mk_port[int]();\n+    let po = comm::mk_port<int>();\n     let ch = po.mk_chan();\n     task::_spawn(bind test05_start(ch));\n     let value = po.recv();"}, {"sha": "0eba64299696a938e7b9f68e4e4b0943b698e5a9", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -9,8 +9,8 @@ use std;\n import std::task;\n import std::comm;\n \n-fn start(c: comm::_chan[str]) {\n-    let p = comm::mk_port[str]();\n+fn start(c: comm::_chan<str>) {\n+    let p = comm::mk_port<str>();\n     c.send(p.mk_chan().unsafe_ptr());\n \n     let a;"}, {"sha": "50b1e9c7f02bde13c05954919b7309632e072ef8", "filename": "src/test/run-pass/task-comm-11.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -3,13 +3,13 @@ use std;\n import std::comm;\n import std::task;\n \n-fn start(c: comm::_chan[comm::_chan[int]]) {\n-    let p : comm::_port[int] = comm::mk_port();\n+fn start(c: comm::_chan<comm::_chan<int>>) {\n+    let p : comm::_port<int> = comm::mk_port();\n     comm::send(c, p.mk_chan());\n }\n \n fn main() {\n-    let p = comm::mk_port[comm::_chan[int]]();\n+    let p = comm::mk_port<comm::_chan<int>>();\n     let child = task::_spawn(bind start(p.mk_chan()));\n     let c = p.recv();\n }"}, {"sha": "2ae80750f45e90be2b635e057f4adc988f62babb", "filename": "src/test/run-pass/task-comm-13.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -3,14 +3,14 @@ import std::task;\n import std::comm;\n import std::comm::send;\n \n-fn start(c: comm::_chan[int], start: int, number_of_messages: int) {\n+fn start(c: comm::_chan<int>, start: int, number_of_messages: int) {\n     let i: int = 0;\n     while i < number_of_messages { send(c, start + i); i += 1; }\n }\n \n fn main() {\n     log \"Check that we don't deadlock.\";\n-    let p : comm::_port[int] = comm::mk_port();\n+    let p : comm::_port<int> = comm::mk_port();\n     let a = task::_spawn(bind start(p.mk_chan(), 0, 10));\n     task::join_id(a);\n     log \"Joined task\";"}, {"sha": "f7fc38724a194a86d644ca96a4bcd812e0e039ef", "filename": "src/test/run-pass/task-comm-15.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -6,18 +6,18 @@ use std;\n import std::comm;\n import std::task;\n \n-fn start(c : comm::_chan[int], n: int) {\n+fn start(c : comm::_chan<int>, n: int) {\n     let i: int = n;\n \n     while i > 0 { comm::send(c, 0); i = i - 1; }\n }\n \n fn main() {\n-    let p = comm::mk_port[comm::_chan[int]]();\n+    let p = comm::mk_port<comm::_chan<int>>();\n     // Spawn a task that sends us back messages. The parent task\n     // is likely to terminate before the child completes, so from\n     // the child's point of view the receiver may die. We should\n     // drop messages on the floor in this case, and not crash!\n     let child = task::_spawn(bind start(p.mk_chan(), 10));\n     let c = p.recv();\n-}\n\\ No newline at end of file\n+}"}, {"sha": "ac3430aec3fa1cfec82e7b368a8f4cc88cad7f6b", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -9,7 +9,7 @@ import std::comm::send;\n \n fn main() { log \"===== WITHOUT THREADS =====\"; test00(); }\n \n-fn test00_start(ch: _chan[int], message: int, count: int) {\n+fn test00_start(ch: _chan<int>, message: int, count: int) {\n     log \"Starting test00_start\";\n     let i: int = 0;\n     while i < count {"}, {"sha": "0acff8cc022b993c9ca073c66e86338ae07d5a6f", "filename": "src/test/run-pass/task-comm-7.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -4,7 +4,7 @@ import std::comm;\n \n fn main() { test00(); }\n \n-fn test00_start(c: comm::_chan[int], start: int, number_of_messages: int) {\n+fn test00_start(c: comm::_chan<int>, start: int, number_of_messages: int) {\n     let i: int = 0;\n     while i < number_of_messages { comm::send(c, start + i); i += 1; }\n }\n@@ -47,4 +47,4 @@ fn test00() {\n     task::join_id(t3);\n \n     assert (sum == number_of_messages * 4 * (number_of_messages * 4 - 1) / 2);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "649e23f9806c32ce8a31faadddce399c383739a8", "filename": "src/test/run-pass/task-comm-8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -4,7 +4,7 @@ import std::comm;\n \n fn main() { test00(); }\n \n-fn test00_start(c : comm::_chan[int], start: int, number_of_messages: int) {\n+fn test00_start(c : comm::_chan<int>, start: int, number_of_messages: int) {\n     let i: int = 0;\n     while i < number_of_messages { comm::send(c, start + i); i += 1; }\n }\n@@ -47,4 +47,4 @@ fn test00() {\n     task::join_id(t3);\n \n     assert (sum == number_of_messages * 4 * (number_of_messages * 4 - 1) / 2);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "a197ebdf5074b7969e7a1f683e47ef27806bb12e", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -4,7 +4,7 @@ import std::comm;\n \n fn main() { test00(); }\n \n-fn test00_start(c: comm::_chan[int], number_of_messages: int) {\n+fn test00_start(c: comm::_chan<int>, number_of_messages: int) {\n     let i: int = 0;\n     while i < number_of_messages { comm::send(c, i+0); i += 1; }\n }"}, {"sha": "1e0d10001d0084f30c2caa0922d86cc6abbb9ad3", "filename": "src/test/run-pass/task-comm-chan-nil.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftask-comm-chan-nil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftask-comm-chan-nil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-chan-nil.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -7,9 +7,9 @@ import std::comm;\n // any size, but rustc currently can because they do have size. Whether\n // or not this is desirable I don't know, but here's a regression test.\n fn main() {\n-    let po: comm::_port[()] = comm::mk_port();\n-    let ch: comm::_chan[()] = po.mk_chan();\n+    let po: comm::_port<()> = comm::mk_port();\n+    let ch: comm::_chan<()> = po.mk_chan();\n     comm::send(ch, ());\n     let n: () = po.recv();\n     assert (n == ());\n-}\n\\ No newline at end of file\n+}"}, {"sha": "e906c47dfc46d11b24c710758e7fd0b11cd3bb16", "filename": "src/test/run-pass/task-comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -17,7 +17,7 @@ fn main() {\n     test06();\n }\n \n-fn test00_start(ch: _chan[int], message: int, count: int) {\n+fn test00_start(ch: _chan<int>, message: int, count: int) {\n     log \"Starting test00_start\";\n     let i: int = 0;\n     while i < count { log \"Sending Message\"; send(ch, message+0); i = i + 1; }\n@@ -100,7 +100,7 @@ fn test04() {\n     log \"Finishing up.\";\n }\n \n-fn test05_start(ch: _chan[int]) {\n+fn test05_start(ch: _chan<int>) {\n     send(ch, 10);\n     send(ch, 20);\n     send(ch, 30);"}, {"sha": "f5b914454bb27c4d808821f3c03b30822403a5fc", "filename": "src/test/run-pass/task-compare.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftask-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftask-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-compare.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -24,8 +24,8 @@ fn main() {\n     let p1;\n     let p2;\n \n-    p1 = comm::mk_port[int]();\n-    p2 = comm::mk_port[int]();\n+    p1 = comm::mk_port<int>();\n+    p2 = comm::mk_port<int>();\n \n     assert (p1 == p1);\n     assert (p1 != p2);\n@@ -42,4 +42,4 @@ fn main() {\n \n     join_id(t1);\n     join_id(t2);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "438f4431fcf14d9d355a981a0d74361769199a25", "filename": "src/test/run-pass/trivial-message.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftrivial-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftrivial-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrivial-message.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -12,4 +12,4 @@ fn main() {\n     send(ch, 42);\n     let r = po.recv();\n     log_err r;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "65cf9ed31ad3e9266d3769aab36db14d848fe46a", "filename": "src/test/run-pass/type-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftype-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftype-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-param.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -2,4 +2,4 @@\n \n type lteq[T] = fn(&T) -> bool ;\n \n-fn main(args: [str]) { }\n\\ No newline at end of file\n+fn main(args: [str]) { }"}, {"sha": "e608a9f9836ca55af7922267c1d92743193b3506", "filename": "src/test/run-pass/type-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftype-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Ftype-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-ptr.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -2,4 +2,4 @@ fn f(a: *int) -> *int { ret a; }\n \n fn g(a: *int) -> *int { let b = f(a); ret b; }\n \n-fn main(args: [str]) { ret; }\n\\ No newline at end of file\n+fn main(args: [str]) { ret; }"}, {"sha": "2b316ab64c80a71a99cc70a404615705618845f3", "filename": "src/test/run-pass/use-uninit-alt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -1,11 +1,11 @@\n \n \n-fn foo[T](o: &myoption[T]) -> int {\n+fn foo[T](o: &myoption<T>) -> int {\n     let x: int = 5;\n     alt o { none[T]. { } some[T](t) { x += 1; } }\n     ret x;\n }\n \n tag myoption[T] { none; some(T); }\n \n-fn main() { log 5; }\n\\ No newline at end of file\n+fn main() { log 5; }"}, {"sha": "78edf8feb596d40bc8b9b6b6748e1dbee9bc7e02", "filename": "src/test/run-pass/use-uninit-alt2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -1,11 +1,11 @@\n \n \n-fn foo[T](o: &myoption[T]) -> int {\n+fn foo[T](o: &myoption<T>) -> int {\n     let x: int;\n     alt o { none[T]. { fail; } some[T](t) { x = 5; } }\n     ret x;\n }\n \n tag myoption[T] { none; some(T); }\n \n-fn main() { log 5; }\n\\ No newline at end of file\n+fn main() { log 5; }"}, {"sha": "f329908bfe2a3e3dee201a6d74e5fa0a4de14e3d", "filename": "src/test/run-pass/utf8_chars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_chars.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -28,4 +28,4 @@ fn main() {\n     assert (str::shift_char(stack) == '\u00d7');\n     str::unshift_char(stack, '\u00df');\n     assert (str::eq(stack, \"\u00dfu\"));\n-}\n\\ No newline at end of file\n+}"}, {"sha": "6a07ebf9b4ff6725656830e4503f2338135b30db", "filename": "src/test/run-pass/vec-append.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fvec-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fvec-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-append.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -79,4 +79,4 @@ fn slow_growth2() {\n     assert (str::refcount(s) == const_refcount);\n }\n \n-fn main() { fast_growth(); slow_growth(); slow_growth2(); }\n\\ No newline at end of file\n+fn main() { fast_growth(); slow_growth(); slow_growth2(); }"}, {"sha": "2804f8c0f10fd70146ace723eca1532ad5ce2b9b", "filename": "src/test/run-pass/vec-concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fvec-concat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fvec-concat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-concat.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -10,4 +10,4 @@ fn main() {\n     assert (v.(0) == 1);\n     assert (v.(7) == 8);\n     assert (v.(9) == 0);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "dbd0bbcd82cf193a70a633ac5ec9af2f62632839", "filename": "src/test/run-pass/vec-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fvec-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fvec-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-drop.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -5,4 +5,4 @@ fn main() {\n \n     let pvec: [@{x: int, y: int}] =\n         ~[@{x: 1, y: 2}, @{x: 3, y: 4}, @{x: 5, y: 6}];\n-}\n\\ No newline at end of file\n+}"}, {"sha": "c1f180ed23773bd59c0c6587754e45d40663c4cf", "filename": "src/test/run-pass/vec-late-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fvec-late-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fvec-late-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-late-init.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -4,4 +4,4 @@ fn main() {\n     let later: [int];\n     if true { later = ~[1]; } else { later = ~[2]; }\n     log later.(0);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "bbf10b0587c2f57345d9a561429c5b1fa1d76a65", "filename": "src/test/run-pass/vec-push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fvec-push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fvec-push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-push.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -2,4 +2,4 @@\n \n fn push[T](v: &mutable [mutable? T], t: &T) { v += ~[t]; }\n \n-fn main() { let v = ~[1, 2, 3]; push(v, 1); }\n\\ No newline at end of file\n+fn main() { let v = ~[1, 2, 3]; push(v, 1); }"}, {"sha": "084f641871ac9ba4e44728884c456581795c52f7", "filename": "src/test/run-pass/vec-self-append.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fvec-self-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fvec-self-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-self-append.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -17,4 +17,4 @@ fn main() {\n         i -= 1;\n         expected_len *= 2u;\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "f734059466f57dee7636368d50d5c8b3531d544e", "filename": "src/test/run-pass/vec-slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fvec-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fvec-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-slice.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -2,8 +2,8 @@\n // xfail-stage2\n // xfail-stage3\n fn main() {\n-  let vec[int] v = [1,2,3,4,5];\n+  let vec<int> v = [1,2,3,4,5];\n   auto v2 = v.(1,2);\n   assert (v2.(0) == 2);\n   assert (v2.(1) == 3);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "afc452342c832dd6d46b576d677f9e8848583b7e", "filename": "src/test/run-pass/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -12,4 +12,4 @@ fn main() {\n     x = x + 1;\n     assert (v.(x) == 20);\n     assert (v.(x - 1) == 10);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "d25556182819714c69d2171532421594190180c5", "filename": "src/test/run-pass/vector-no-ann-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fvector-no-ann-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fvector-no-ann-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvector-no-ann-2.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -1 +1 @@\n-fn main() { let quux: @[uint] = @~[]; }\n\\ No newline at end of file\n+fn main() { let quux: @[uint] = @~[]; }"}, {"sha": "3dcbb96b04000aabda8dfed519aa4310cc2f38cb", "filename": "src/test/run-pass/while-with-break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -16,4 +16,4 @@ fn main() {\n         }\n     }\n     assert (i == 95);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "5f83542001d46373f19dee198371b92e8f60f616", "filename": "src/test/stdtest/comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fstdtest%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fstdtest%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fcomm.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -3,13 +3,13 @@ import std::comm;\n \n #[test]\n fn create_port_and_chan() {\n-    let p = comm::mk_port[int]();\n+    let p = comm::mk_port<int>();\n     let c = p.mk_chan();\n }\n \n #[test]\n fn send_recv() {\n-    let p = comm::mk_port[int]();\n+    let p = comm::mk_port<int>();\n     let c = p.mk_chan();\n \n     comm::send(c, 42);"}, {"sha": "f2d47b83a466ad6052eccfb6eb1e2f9de2606d3b", "filename": "src/test/stdtest/deque.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fstdtest%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fstdtest%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fdeque.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -6,7 +6,7 @@ import std::deque;\n \n #[test]\n fn test_simple() {\n-    let d: deque::t[int] = deque::create[int]();\n+    let d: deque::t<int> = deque::create[int]();\n     assert (d.size() == 0u);\n     d.add_front(17);\n     d.add_front(42);\n@@ -50,7 +50,7 @@ fn test_simple() {\n }\n \n fn test_boxes(a: @int, b: @int, c: @int, d: @int) {\n-    let deq: deque::t[@int] = deque::create[@int]();\n+    let deq: deque::t<@int> = deque::create[@int]();\n     assert (deq.size() == 0u);\n     deq.add_front(a);\n     deq.add_front(b);\n@@ -81,8 +81,8 @@ fn test_boxes(a: @int, b: @int, c: @int, d: @int) {\n \n type eqfn[T] = fn(&T, &T) -> bool ;\n \n-fn test_parameterized[@T](e: eqfn[T], a: &T, b: &T, c: &T, d: &T) {\n-    let deq: deque::t[T] = deque::create[T]();\n+fn test_parameterized[@T](e: eqfn<T>, a: &T, b: &T, c: &T, d: &T) {\n+    let deq: deque::t<T> = deque::create[T]();\n     assert (deq.size() == 0u);\n     deq.add_front(a);\n     deq.add_front(b);\n@@ -138,7 +138,7 @@ fn test() {\n           }\n         }\n     }\n-    fn taggypareq[@T](a: &taggypar[T], b: &taggypar[T]) -> bool {\n+    fn taggypareq[@T](a: &taggypar<T>, b: &taggypar<T>) -> bool {\n         alt a {\n           onepar[T](a1) {\n             alt b { onepar[T](b1) { ret a1 == b1; } _ { ret false; } }\n@@ -166,20 +166,20 @@ fn test() {\n     test_boxes(@5, @72, @64, @175);\n     log \"*** end test boxes\";\n     log \"test parameterized: int\";\n-    let eq1: eqfn[int] = inteq;\n+    let eq1: eqfn<int> = inteq;\n     test_parameterized[int](eq1, 5, 72, 64, 175);\n     log \"*** test parameterized: @int\";\n-    let eq2: eqfn[@int] = intboxeq;\n+    let eq2: eqfn<@int> = intboxeq;\n     test_parameterized[@int](eq2, @5, @72, @64, @175);\n     log \"*** end test parameterized @int\";\n     log \"test parameterized: taggy\";\n-    let eq3: eqfn[taggy] = taggyeq;\n+    let eq3: eqfn<taggy> = taggyeq;\n     test_parameterized[taggy](eq3, one(1), two(1, 2), three(1, 2, 3),\n                               two(17, 42));\n \n-    log \"*** test parameterized: taggypar[int]\";\n-    let eq4: eqfn[taggypar[int]] = taggypareq[int];\n-    test_parameterized[taggypar[int]](eq4,\n+    log \"*** test parameterized: taggypar<int>\";\n+    let eq4: eqfn<taggypar<int>> = taggypareq[int];\n+    test_parameterized[taggypar<int>](eq4,\n                                       onepar[int](1),\n                                       twopar[int](1, 2),\n                                       threepar[int](1, 2, 3),\n@@ -191,7 +191,7 @@ fn test() {\n     let reccy2: reccy = {x: 345, y: 2, t: two(1, 2)};\n     let reccy3: reccy = {x: 1, y: 777, t: three(1, 2, 3)};\n     let reccy4: reccy = {x: 19, y: 252, t: two(17, 42)};\n-    let eq5: eqfn[reccy] = reccyeq;\n+    let eq5: eqfn<reccy> = reccyeq;\n     test_parameterized[reccy](eq5, reccy1, reccy2, reccy3, reccy4);\n     log \"*** end test parameterized: reccy\";\n     log \"*** done\";"}, {"sha": "21b8184f4960dcc426437925b9aa200287838003", "filename": "src/test/stdtest/either.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fstdtest%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fstdtest%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Feither.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -27,14 +27,14 @@ fn test_lefts() {\n \n #[test]\n fn test_lefts_none() {\n-    let input: [t[int, int]] = ~[right(10), right(10)];\n+    let input: [t<int, int>] = ~[right(10), right(10)];\n     let result = lefts(input);\n     assert (len(result) == 0u);\n }\n \n #[test]\n fn test_lefts_empty() {\n-    let input: [t[int, int]] = ~[];\n+    let input: [t<int, int>] = ~[];\n     let result = lefts(input);\n     assert (len(result) == 0u);\n }\n@@ -48,14 +48,14 @@ fn test_rights() {\n \n #[test]\n fn test_rights_none() {\n-    let input: [t[int, int]] = ~[left(10), left(10)];\n+    let input: [t<int, int>] = ~[left(10), left(10)];\n     let result = rights(input);\n     assert (len(result) == 0u);\n }\n \n #[test]\n fn test_rights_empty() {\n-    let input: [t[int, int]] = ~[];\n+    let input: [t<int, int>] = ~[];\n     let result = rights(input);\n     assert (len(result) == 0u);\n }\n@@ -73,23 +73,23 @@ fn test_partition() {\n \n #[test]\n fn test_partition_no_lefts() {\n-    let input: [t[int, int]] = ~[right(10), right(11)];\n+    let input: [t<int, int>] = ~[right(10), right(11)];\n     let result = partition(input);\n     assert (len(result.lefts) == 0u);\n     assert (len(result.rights) == 2u);\n }\n \n #[test]\n fn test_partition_no_rights() {\n-    let input: [t[int, int]] = ~[left(10), left(11)];\n+    let input: [t<int, int>] = ~[left(10), left(11)];\n     let result = partition(input);\n     assert (len(result.lefts) == 2u);\n     assert (len(result.rights) == 0u);\n }\n \n #[test]\n fn test_partition_empty() {\n-    let input: [t[int, int]] = ~[];\n+    let input: [t<int, int>] = ~[];\n     let result = partition(input);\n     assert (len(result.lefts) == 0u);\n     assert (len(result.rights) == 0u);"}, {"sha": "383a6ce49fe38bc11351b5e359e00eb4c257a495", "filename": "src/test/stdtest/list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fstdtest%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fstdtest%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Flist.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -25,7 +25,7 @@ fn test_foldl() {\n #[test]\n fn test_find_success() {\n     let l = from_vec(~[0, 1, 2]);\n-    fn match(i: &int) -> option::t[int] {\n+    fn match(i: &int) -> option::t<int> {\n         ret if i == 2 { option::some(i) } else { option::none[int] };\n     }\n     let rs = list::find(l, match);\n@@ -35,7 +35,7 @@ fn test_find_success() {\n #[test]\n fn test_find_fail() {\n     let l = from_vec(~[0, 1, 2]);\n-    fn match(i: &int) -> option::t[int] { ret option::none[int]; }\n+    fn match(i: &int) -> option::t<int> { ret option::none[int]; }\n     let rs = list::find(l, match);\n     assert (rs == option::none[int]);\n }"}, {"sha": "ffda00c4947c003f4b046f02559ff6e9ee05faeb", "filename": "src/test/stdtest/map.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fstdtest%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fstdtest%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fmap.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -17,12 +17,12 @@ fn test_simple() {\n \n         ret u;\n     }\n-    let hasher_uint: map::hashfn[uint] = hash_uint;\n-    let eqer_uint: map::eqfn[uint] = eq_uint;\n-    let hasher_str: map::hashfn[str] = str::hash;\n-    let eqer_str: map::eqfn[str] = str::eq;\n+    let hasher_uint: map::hashfn<uint> = hash_uint;\n+    let eqer_uint: map::eqfn<uint> = eq_uint;\n+    let hasher_str: map::hashfn<str> = str::hash;\n+    let eqer_str: map::eqfn<str> = str::eq;\n     log \"uint -> uint\";\n-    let hm_uu: map::hashmap[uint, uint] =\n+    let hm_uu: map::hashmap<uint, uint> =\n         map::mk_hashmap[uint, uint](hasher_uint, eqer_uint);\n     assert (hm_uu.insert(10u, 12u));\n     assert (hm_uu.insert(11u, 13u));\n@@ -38,7 +38,7 @@ fn test_simple() {\n     let eleven: str = \"eleven\";\n     let twelve: str = \"twelve\";\n     log \"str -> uint\";\n-    let hm_su: map::hashmap[str, uint] =\n+    let hm_su: map::hashmap<str, uint> =\n         map::mk_hashmap[str, uint](hasher_str, eqer_str);\n     assert (hm_su.insert(\"ten\", 12u));\n     assert (hm_su.insert(eleven, 13u));\n@@ -52,7 +52,7 @@ fn test_simple() {\n     assert (!hm_su.insert(\"twelve\", 12u));\n     assert (hm_su.get(\"twelve\") == 12u);\n     log \"uint -> str\";\n-    let hm_us: map::hashmap[uint, str] =\n+    let hm_us: map::hashmap<uint, str> =\n         map::mk_hashmap[uint, str](hasher_uint, eqer_uint);\n     assert (hm_us.insert(10u, \"twelve\"));\n     assert (hm_us.insert(11u, \"thirteen\"));\n@@ -65,7 +65,7 @@ fn test_simple() {\n     assert (!hm_us.insert(12u, \"twelve\"));\n     assert (str::eq(hm_us.get(12u), \"twelve\"));\n     log \"str -> str\";\n-    let hm_ss: map::hashmap[str, str] =\n+    let hm_ss: map::hashmap<str, str> =\n         map::mk_hashmap[str, str](hasher_str, eqer_str);\n     assert (hm_ss.insert(ten, \"twelve\"));\n     assert (hm_ss.insert(eleven, \"thirteen\"));\n@@ -96,9 +96,9 @@ fn test_growth() {\n         ret u;\n     }\n     log \"uint -> uint\";\n-    let hasher_uint: map::hashfn[uint] = hash_uint;\n-    let eqer_uint: map::eqfn[uint] = eq_uint;\n-    let hm_uu: map::hashmap[uint, uint] =\n+    let hasher_uint: map::hashfn<uint> = hash_uint;\n+    let eqer_uint: map::eqfn<uint> = eq_uint;\n+    let hm_uu: map::hashmap<uint, uint> =\n         map::mk_hashmap[uint, uint](hasher_uint, eqer_uint);\n     let i: uint = 0u;\n     while i < num_to_insert {\n@@ -127,9 +127,9 @@ fn test_growth() {\n         i += 1u;\n     }\n     log \"str -> str\";\n-    let hasher_str: map::hashfn[str] = str::hash;\n-    let eqer_str: map::eqfn[str] = str::eq;\n-    let hm_ss: map::hashmap[str, str] =\n+    let hasher_str: map::hashfn<str> = str::hash;\n+    let eqer_str: map::eqfn<str> = str::eq;\n+    let hm_ss: map::hashmap<str, str> =\n         map::mk_hashmap[str, str](hasher_str, eqer_str);\n     i = 0u;\n     while i < num_to_insert {\n@@ -178,9 +178,9 @@ fn test_removal() {\n     assert (hash(0u) == hash(1u));\n     assert (hash(2u) == hash(3u));\n     assert (hash(0u) != hash(2u));\n-    let hasher: map::hashfn[uint] = hash;\n-    let eqer: map::eqfn[uint] = eq;\n-    let hm: map::hashmap[uint, uint] =\n+    let hasher: map::hashfn<uint> = hash;\n+    let eqer: map::eqfn<uint> = eq;\n+    let hm: map::hashmap<uint, uint> =\n         map::mk_hashmap[uint, uint](hasher, eqer);\n     let i: uint = 0u;\n     while i < num_to_insert {\n@@ -198,7 +198,7 @@ fn test_removal() {\n          * FIXME (issue #150): we want to check the removed value as in the\n          * following:\n \n-        let util.option[uint] v = hm.remove(i);\n+        let v: util.option<uint> = hm.remove(i);\n         alt (v) {\n           case (util.some[uint](u)) {\n             assert (u == (i * i));\n@@ -281,4 +281,4 @@ fn test_find() {\n     assert (std::option::is_none(map.find(key)));\n     map.insert(key, \"val\");\n     assert (std::option::get(map.find(key)) == \"val\");\n-}\n\\ No newline at end of file\n+}"}, {"sha": "dab250ce142589dae7f02231ddf3f14c0a620ae6", "filename": "src/test/stdtest/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fstdtest%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fstdtest%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fvec.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -12,7 +12,7 @@ fn square_alias(n: &uint) -> uint { ret n * n; }\n \n pred is_three(n: &uint) -> bool { ret n == 3u; }\n \n-fn square_if_odd(n: &uint) -> option::t[uint] {\n+fn square_if_odd(n: &uint) -> option::t<uint> {\n     ret if n % 2u == 1u { some(n * n) } else { none };\n }\n \n@@ -264,7 +264,7 @@ fn test_filter_map() {\n     assert (w.(1) == 9u);\n     assert (w.(2) == 25u);\n \n-    fn halve(i: &int) -> option::t[int] {\n+    fn halve(i: &int) -> option::t<int> {\n         if i % 2 == 0 {\n             ret option::some[int](i / 2);\n         } else { ret option::none[int]; }"}, {"sha": "e2b11cbfb28eb341a7cfcf4797993f56d9bbc793", "filename": "src/test/stdtest/vec_str_conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fstdtest%2Fvec_str_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f46a1655f2a026546792546b07dec9e039ec54/src%2Ftest%2Fstdtest%2Fvec_str_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fvec_str_conversions.rs?ref=21f46a1655f2a026546792546b07dec9e039ec54", "patch": "@@ -25,4 +25,4 @@ fn test_simple() {\n     }\n     log \"refcnt is\";\n     log str::refcount(s1);\n-}\n\\ No newline at end of file\n+}"}]}