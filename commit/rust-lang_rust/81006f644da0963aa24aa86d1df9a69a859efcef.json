{"sha": "81006f644da0963aa24aa86d1df9a69a859efcef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMDA2ZjY0NGRhMDk2M2FhMjRhYTg2ZDFkZjlhNjlhODU5ZWZjZWY=", "commit": {"author": {"name": "Olivier Goffart", "email": "ogoffart@woboq.com", "date": "2020-03-25T22:05:47Z"}, "committer": {"name": "Olivier Goffart", "email": "ogoffart@woboq.com", "date": "2020-03-25T22:08:36Z"}, "message": "Optimize slightly by avoiding to call Niche::reserve when not needed", "tree": {"sha": "cdfc40ae9128e648b55265b80a1893ef02e635b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdfc40ae9128e648b55265b80a1893ef02e635b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81006f644da0963aa24aa86d1df9a69a859efcef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81006f644da0963aa24aa86d1df9a69a859efcef", "html_url": "https://github.com/rust-lang/rust/commit/81006f644da0963aa24aa86d1df9a69a859efcef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81006f644da0963aa24aa86d1df9a69a859efcef/comments", "author": {"login": "ogoffart", "id": 959326, "node_id": "MDQ6VXNlcjk1OTMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/959326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ogoffart", "html_url": "https://github.com/ogoffart", "followers_url": "https://api.github.com/users/ogoffart/followers", "following_url": "https://api.github.com/users/ogoffart/following{/other_user}", "gists_url": "https://api.github.com/users/ogoffart/gists{/gist_id}", "starred_url": "https://api.github.com/users/ogoffart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ogoffart/subscriptions", "organizations_url": "https://api.github.com/users/ogoffart/orgs", "repos_url": "https://api.github.com/users/ogoffart/repos", "events_url": "https://api.github.com/users/ogoffart/events{/privacy}", "received_events_url": "https://api.github.com/users/ogoffart/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ogoffart", "id": 959326, "node_id": "MDQ6VXNlcjk1OTMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/959326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ogoffart", "html_url": "https://github.com/ogoffart", "followers_url": "https://api.github.com/users/ogoffart/followers", "following_url": "https://api.github.com/users/ogoffart/following{/other_user}", "gists_url": "https://api.github.com/users/ogoffart/gists{/gist_id}", "starred_url": "https://api.github.com/users/ogoffart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ogoffart/subscriptions", "organizations_url": "https://api.github.com/users/ogoffart/orgs", "repos_url": "https://api.github.com/users/ogoffart/repos", "events_url": "https://api.github.com/users/ogoffart/events{/privacy}", "received_events_url": "https://api.github.com/users/ogoffart/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d77d010962dc91e225437cbd508e1b10a9192cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d77d010962dc91e225437cbd508e1b10a9192cf", "html_url": "https://github.com/rust-lang/rust/commit/4d77d010962dc91e225437cbd508e1b10a9192cf"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "e8c0ec89cc4436453f0d008ff183d7f37c53a165", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/81006f644da0963aa24aa86d1df9a69a859efcef/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81006f644da0963aa24aa86d1df9a69a859efcef/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=81006f644da0963aa24aa86d1df9a69a859efcef", "patch": "@@ -907,14 +907,25 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                         let count = (niche_variants.end().as_u32()\n                             - niche_variants.start().as_u32()\n                             + 1) as u128;\n-                        if let Some((field_index, niche, (niche_start, niche_scalar))) = variants[i]\n-                            .iter()\n-                            .enumerate()\n-                            .filter_map(|(i, &field)| {\n-                                let niche = field.largest_niche.as_ref()?;\n-                                Some((i, niche, niche.reserve(self, count)?))\n+                        let mut niche_size = 0;\n+                        if let Some((field_index, niche, niche_start, niche_scalar)) =\n+                            variants[i].iter().enumerate().fold(None, |acc, (j, &field)| {\n+                                let niche = match &field.largest_niche {\n+                                    Some(niche) => niche,\n+                                    _ => return acc,\n+                                };\n+                                let ns = niche.available(dl);\n+                                if ns <= niche_size {\n+                                    return acc;\n+                                }\n+                                match niche.reserve(self, count) {\n+                                    Some(pair) => {\n+                                        niche_size = ns;\n+                                        Some((j, niche, pair.0, pair.1))\n+                                    }\n+                                    None => acc,\n+                                }\n                             })\n-                            .max_by_key(|(_, niche, _)| niche.available(dl))\n                         {\n                             let mut align = dl.aggregate_align;\n                             let st = variants"}]}