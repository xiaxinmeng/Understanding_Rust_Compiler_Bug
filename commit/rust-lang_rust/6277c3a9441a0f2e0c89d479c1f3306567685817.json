{"sha": "6277c3a9441a0f2e0c89d479c1f3306567685817", "node_id": "C_kwDOAAsO6NoAKDYyNzdjM2E5NDQxYTBmMmUwYzg5ZDQ3OWMxZjMzMDY1Njc2ODU4MTc", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-06-01T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-06-07T15:33:16Z"}, "message": "Preserve unused pointer to address casts", "tree": {"sha": "b445dcf5390610cd18a8f92bcecb8e714df3a0fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b445dcf5390610cd18a8f92bcecb8e714df3a0fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6277c3a9441a0f2e0c89d479c1f3306567685817", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6277c3a9441a0f2e0c89d479c1f3306567685817", "html_url": "https://github.com/rust-lang/rust/commit/6277c3a9441a0f2e0c89d479c1f3306567685817", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6277c3a9441a0f2e0c89d479c1f3306567685817/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fe2c4b00dfbc33643e1af4b293eb057306a8339", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fe2c4b00dfbc33643e1af4b293eb057306a8339", "html_url": "https://github.com/rust-lang/rust/commit/7fe2c4b00dfbc33643e1af4b293eb057306a8339"}], "stats": {"total": 76, "additions": 65, "deletions": 11}, "files": [{"sha": "f382812f163a14cf238c7f755e13e6b3c1dff4aa", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6277c3a9441a0f2e0c89d479c1f3306567685817/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6277c3a9441a0f2e0c89d479c1f3306567685817/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=6277c3a9441a0f2e0c89d479c1f3306567685817", "patch": "@@ -2605,9 +2605,34 @@ pub enum Rvalue<'tcx> {\n static_assert_size!(Rvalue<'_>, 40);\n \n impl<'tcx> Rvalue<'tcx> {\n+    /// Returns true if rvalue can be safely removed when the result is unused.\n     #[inline]\n-    pub fn is_pointer_int_cast(&self) -> bool {\n-        matches!(self, Rvalue::Cast(CastKind::PointerExposeAddress, _, _))\n+    pub fn is_safe_to_remove(&self) -> bool {\n+        match self {\n+            // Pointer to int casts may be side-effects due to exposing the provenance.\n+            // While the model is undecided, we should be conservative. See\n+            // <https://www.ralfj.de/blog/2022/04/11/provenance-exposed.html>\n+            Rvalue::Cast(CastKind::PointerExposeAddress, _, _) => false,\n+\n+            Rvalue::Use(_)\n+            | Rvalue::Repeat(_, _)\n+            | Rvalue::Ref(_, _, _)\n+            | Rvalue::ThreadLocalRef(_)\n+            | Rvalue::AddressOf(_, _)\n+            | Rvalue::Len(_)\n+            | Rvalue::Cast(\n+                CastKind::Misc | CastKind::Pointer(_) | CastKind::PointerFromExposedAddress,\n+                _,\n+                _,\n+            )\n+            | Rvalue::BinaryOp(_, _)\n+            | Rvalue::CheckedBinaryOp(_, _)\n+            | Rvalue::NullaryOp(_, _)\n+            | Rvalue::UnaryOp(_, _)\n+            | Rvalue::Discriminant(_)\n+            | Rvalue::Aggregate(_, _)\n+            | Rvalue::ShallowInitBox(_, _) => true,\n+        }\n     }\n }\n "}, {"sha": "9b62ee5473c7b6b6459f2793101991646b60d014", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6277c3a9441a0f2e0c89d479c1f3306567685817/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6277c3a9441a0f2e0c89d479c1f3306567685817/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=6277c3a9441a0f2e0c89d479c1f3306567685817", "patch": "@@ -244,13 +244,10 @@ impl<'a, 'tcx> Analysis<'tcx> for MaybeTransitiveLiveLocals<'a> {\n         // Compute the place that we are storing to, if any\n         let destination = match &statement.kind {\n             StatementKind::Assign(assign) => {\n-                if assign.1.is_pointer_int_cast() {\n-                    // Pointer to int casts may be side-effects due to exposing the provenance.\n-                    // While the model is undecided, we should be conservative. See\n-                    // <https://www.ralfj.de/blog/2022/04/11/provenance-exposed.html>\n-                    None\n-                } else {\n+                if assign.1.is_safe_to_remove() {\n                     Some(assign.0)\n+                } else {\n+                    None\n                 }\n             }\n             StatementKind::SetDiscriminant { place, .. } | StatementKind::Deinit(place) => {"}, {"sha": "779f3c778156b6e97e2cd85d814457ddbe39531f", "filename": "compiler/rustc_mir_transform/src/dead_store_elimination.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6277c3a9441a0f2e0c89d479c1f3306567685817/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6277c3a9441a0f2e0c89d479c1f3306567685817/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs?ref=6277c3a9441a0f2e0c89d479c1f3306567685817", "patch": "@@ -34,7 +34,7 @@ pub fn eliminate<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, borrowed: &BitS\n         for (statement_index, statement) in bb_data.statements.iter().enumerate().rev() {\n             let loc = Location { block: bb, statement_index };\n             if let StatementKind::Assign(assign) = &statement.kind {\n-                if assign.1.is_pointer_int_cast() {\n+                if !assign.1.is_safe_to_remove() {\n                     continue;\n                 }\n             }"}, {"sha": "8a78ea5c82bb190de16ee36ad1fbfdc0974ffd0a", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6277c3a9441a0f2e0c89d479c1f3306567685817/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6277c3a9441a0f2e0c89d479c1f3306567685817/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=6277c3a9441a0f2e0c89d479c1f3306567685817", "patch": "@@ -494,8 +494,12 @@ impl<'tcx> Visitor<'tcx> for UsedLocals {\n             StatementKind::StorageLive(_local) | StatementKind::StorageDead(_local) => {}\n \n             StatementKind::Assign(box (ref place, ref rvalue)) => {\n-                self.visit_lhs(place, location);\n-                self.visit_rvalue(rvalue, location);\n+                if rvalue.is_safe_to_remove() {\n+                    self.visit_lhs(place, location);\n+                    self.visit_rvalue(rvalue, location);\n+                } else {\n+                    self.super_statement(statement, location);\n+                }\n             }\n \n             StatementKind::SetDiscriminant { ref place, variant_index: _ }"}, {"sha": "f6bf396cd05152f3571049e6cd9c87828f40aed8", "filename": "src/test/mir-opt/simplify-locals.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6277c3a9441a0f2e0c89d479c1f3306567685817/src%2Ftest%2Fmir-opt%2Fsimplify-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6277c3a9441a0f2e0c89d479c1f3306567685817/src%2Ftest%2Fmir-opt%2Fsimplify-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals.rs?ref=6277c3a9441a0f2e0c89d479c1f3306567685817", "patch": "@@ -62,6 +62,12 @@ fn t4() -> u32 {\n     unsafe { X + 1 }\n }\n \n+// EMIT_MIR simplify_locals.expose_addr.SimplifyLocals.diff\n+fn expose_addr(p: *const usize) {\n+    // Used pointer to address cast. Has a side effect of exposing the provenance.\n+    p as usize;\n+}\n+\n fn main() {\n     c();\n     d1();\n@@ -71,4 +77,5 @@ fn main() {\n     t2();\n     t3();\n     t4();\n+    expose_addr(&0);\n }"}, {"sha": "93d77ad40aa4b7e1acc3de814441149c6484d14c", "filename": "src/test/mir-opt/simplify_locals.expose_addr.SimplifyLocals.diff", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6277c3a9441a0f2e0c89d479c1f3306567685817/src%2Ftest%2Fmir-opt%2Fsimplify_locals.expose_addr.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6277c3a9441a0f2e0c89d479c1f3306567685817/src%2Ftest%2Fmir-opt%2Fsimplify_locals.expose_addr.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.expose_addr.SimplifyLocals.diff?ref=6277c3a9441a0f2e0c89d479c1f3306567685817", "patch": "@@ -0,0 +1,21 @@\n+- // MIR for `expose_addr` before SimplifyLocals\n++ // MIR for `expose_addr` after SimplifyLocals\n+  \n+  fn expose_addr(_1: *const usize) -> () {\n+      debug p => _1;                       // in scope 0 at $DIR/simplify-locals.rs:66:16: 66:17\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify-locals.rs:66:33: 66:33\n+      let _2: usize;                       // in scope 0 at $DIR/simplify-locals.rs:68:5: 68:15\n+      let mut _3: *const usize;            // in scope 0 at $DIR/simplify-locals.rs:68:5: 68:6\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/simplify-locals.rs:68:5: 68:15\n+          StorageLive(_3);                 // scope 0 at $DIR/simplify-locals.rs:68:5: 68:6\n+          _3 = _1;                         // scope 0 at $DIR/simplify-locals.rs:68:5: 68:6\n+          _2 = move _3 as usize (PointerExposeAddress); // scope 0 at $DIR/simplify-locals.rs:68:5: 68:15\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify-locals.rs:68:14: 68:15\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify-locals.rs:68:15: 68:16\n+          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:66:33: 69:2\n+          return;                          // scope 0 at $DIR/simplify-locals.rs:69:2: 69:2\n+      }\n+  }\n+  "}]}