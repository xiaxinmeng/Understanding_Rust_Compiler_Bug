{"sha": "8ae01fc0ae8ee160a5713873177f9fc9957be8ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZTAxZmMwYWU4ZWUxNjBhNTcxMzg3MzE3N2Y5ZmM5OTU3YmU4YWI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T05:03:04Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:30Z"}, "message": "librustc: De-`@mut` the translation `FunctionContext`", "tree": {"sha": "3a54841013a5d7b3171d9445b0b79f584013e431", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a54841013a5d7b3171d9445b0b79f584013e431"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ae01fc0ae8ee160a5713873177f9fc9957be8ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ae01fc0ae8ee160a5713873177f9fc9957be8ab", "html_url": "https://github.com/rust-lang/rust/commit/8ae01fc0ae8ee160a5713873177f9fc9957be8ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ae01fc0ae8ee160a5713873177f9fc9957be8ab/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "558099b5093b9094d13b99e5bec4e71a8f02e01f", "url": "https://api.github.com/repos/rust-lang/rust/commits/558099b5093b9094d13b99e5bec4e71a8f02e01f", "html_url": "https://github.com/rust-lang/rust/commit/558099b5093b9094d13b99e5bec4e71a8f02e01f"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "fd1c1872df7d584579ae2c0253a1e6fd7b63db67", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8ae01fc0ae8ee160a5713873177f9fc9957be8ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae01fc0ae8ee160a5713873177f9fc9957be8ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=8ae01fc0ae8ee160a5713873177f9fc9957be8ab", "patch": "@@ -1188,7 +1188,7 @@ pub fn trans_stmt(cx: @Block, s: &ast::Stmt) -> @Block {\n \n // You probably don't want to use this one. See the\n // next three functions instead.\n-pub fn new_block(cx: @mut FunctionContext,\n+pub fn new_block(cx: @FunctionContext,\n                  parent: Option<@Block>,\n                  scope: Option<@mut ScopeInfo>,\n                  is_lpad: bool,\n@@ -1229,7 +1229,7 @@ pub fn simple_block_scope(parent: Option<@mut ScopeInfo>,\n }\n \n // Use this when you're at the top block of a function or the like.\n-pub fn top_scope_block(fcx: @mut FunctionContext, opt_node_info: Option<NodeInfo>)\n+pub fn top_scope_block(fcx: @FunctionContext, opt_node_info: Option<NodeInfo>)\n                     -> @Block {\n     return new_block(fcx, None, Some(simple_block_scope(None, opt_node_info)), false,\n                   \"function top level\", opt_node_info);\n@@ -1268,7 +1268,7 @@ pub fn sub_block(bcx: @Block, n: &str) -> @Block {\n     new_block(bcx.fcx, Some(bcx), None, bcx.is_lpad, n, None)\n }\n \n-pub fn raw_block(fcx: @mut FunctionContext, is_lpad: bool, llbb: BasicBlockRef) -> @Block {\n+pub fn raw_block(fcx: @FunctionContext, is_lpad: bool, llbb: BasicBlockRef) -> @Block {\n     @Block::new(llbb, None, is_lpad, None, fcx)\n }\n \n@@ -1635,7 +1635,7 @@ pub fn mk_return_basic_block(llfn: ValueRef) -> BasicBlockRef {\n \n // Creates and returns space for, or returns the argument representing, the\n // slot where the return value of the function must go.\n-pub fn make_return_pointer(fcx: @mut FunctionContext, output_type: ty::t) -> ValueRef {\n+pub fn make_return_pointer(fcx: @FunctionContext, output_type: ty::t) -> ValueRef {\n     unsafe {\n         if type_of::return_uses_outptr(fcx.ccx, output_type) {\n             llvm::LLVMGetParam(fcx.llfn, 0)\n@@ -1662,7 +1662,7 @@ pub fn new_fn_ctxt_w_id(ccx: @CrateContext,\n                         param_substs: Option<@param_substs>,\n                         opt_node_info: Option<NodeInfo>,\n                         sp: Option<Span>)\n-                     -> @mut FunctionContext {\n+                     -> @FunctionContext {\n     for p in param_substs.iter() { p.validate(); }\n \n     debug!(\"new_fn_ctxt_w_id(path={}, id={:?}, \\\n@@ -1680,7 +1680,7 @@ pub fn new_fn_ctxt_w_id(ccx: @CrateContext,\n     let uses_outptr = type_of::return_uses_outptr(ccx, substd_output_type);\n     let debug_context = debuginfo::create_function_debug_context(ccx, id, param_substs, llfndecl);\n \n-    let fcx = @mut FunctionContext {\n+    let fcx = @FunctionContext {\n           llfn: llfndecl,\n           llenv: unsafe {\n               Cell::new(llvm::LLVMGetUndef(Type::i8p().to_ref()))\n@@ -1734,7 +1734,7 @@ pub fn new_fn_ctxt(ccx: @CrateContext,\n                    llfndecl: ValueRef,\n                    output_type: ty::t,\n                    sp: Option<Span>)\n-                -> @mut FunctionContext {\n+                -> @FunctionContext {\n     new_fn_ctxt_w_id(ccx, path, llfndecl, -1, output_type, false, None, None, sp)\n }\n \n@@ -1752,7 +1752,7 @@ pub fn new_fn_ctxt(ccx: @CrateContext,\n // spaces that have been created for them (by code in the llallocas field of\n // the function's fn_ctxt).  create_llargs_for_fn_args populates the llargs\n // field of the fn_ctxt with\n-pub fn create_llargs_for_fn_args(cx: @mut FunctionContext,\n+pub fn create_llargs_for_fn_args(cx: @FunctionContext,\n                                  self_arg: self_arg,\n                                  args: &[ast::arg])\n                               -> ~[ValueRef] {\n@@ -1776,7 +1776,7 @@ pub fn create_llargs_for_fn_args(cx: @mut FunctionContext,\n     })\n }\n \n-pub fn copy_args_to_allocas(fcx: @mut FunctionContext,\n+pub fn copy_args_to_allocas(fcx: @FunctionContext,\n                             bcx: @Block,\n                             args: &[ast::arg],\n                             raw_llargs: &[ValueRef],\n@@ -1840,7 +1840,7 @@ pub fn copy_args_to_allocas(fcx: @mut FunctionContext,\n \n // Ties up the llstaticallocas -> llloadenv -> lltop edges,\n // and builds the return block.\n-pub fn finish_fn(fcx: @mut FunctionContext, last_bcx: @Block) {\n+pub fn finish_fn(fcx: @FunctionContext, last_bcx: @Block) {\n     let _icx = push_ctxt(\"finish_fn\");\n \n     let ret_cx = match fcx.llreturn.get() {\n@@ -1901,7 +1901,7 @@ pub fn trans_closure(ccx: @CrateContext,\n                      id: ast::NodeId,\n                      _attributes: &[ast::Attribute],\n                      output_type: ty::t,\n-                     maybe_load_env: |@mut FunctionContext|) {\n+                     maybe_load_env: |@FunctionContext|) {\n     ccx.stats.n_closures += 1;\n     let _icx = push_ctxt(\"trans_closure\");\n     set_uwtable(llfndecl);"}, {"sha": "1d56601cfba44910fbef7a45348b6e185662a71a", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ae01fc0ae8ee160a5713873177f9fc9957be8ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae01fc0ae8ee160a5713873177f9fc9957be8ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=8ae01fc0ae8ee160a5713873177f9fc9957be8ab", "patch": "@@ -293,7 +293,7 @@ pub fn build_closure(bcx0: @Block,\n // Given an enclosing block context, a new function context, a closure type,\n // and a list of upvars, generate code to load and populate the environment\n // with the upvars and type descriptors.\n-pub fn load_environment(fcx: @mut FunctionContext,\n+pub fn load_environment(fcx: @FunctionContext,\n                         cdata_ty: ty::t,\n                         cap_vars: &[moves::CaptureVar],\n                         sigil: ast::Sigil) {"}, {"sha": "d7705b918070b2f996b19e5a524d3cad448a6187", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8ae01fc0ae8ee160a5713873177f9fc9957be8ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae01fc0ae8ee160a5713873177f9fc9957be8ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=8ae01fc0ae8ee160a5713873177f9fc9957be8ab", "patch": "@@ -289,7 +289,7 @@ impl FunctionContext {\n         }\n     }\n \n-    pub fn cleanup(&mut self) {\n+    pub fn cleanup(&self) {\n         unsafe {\n             llvm::LLVMInstructionEraseFromParent(self.alloca_insert_pt\n                                                      .get()\n@@ -299,7 +299,7 @@ impl FunctionContext {\n         self.entry_bcx.set(None);\n     }\n \n-    pub fn get_llreturn(&mut self) -> BasicBlockRef {\n+    pub fn get_llreturn(&self) -> BasicBlockRef {\n         if self.llreturn.get().is_none() {\n             self.llreturn.set(Some(base::mk_return_basic_block(self.llfn)));\n         }\n@@ -671,17 +671,16 @@ pub struct Block {\n     node_info: Option<NodeInfo>,\n     // The function context for the function to which this block is\n     // attached.\n-    fcx: @mut FunctionContext\n+    fcx: @FunctionContext\n }\n \n impl Block {\n-\n     pub fn new(llbb: BasicBlockRef,\n                parent: Option<@Block>,\n                is_lpad: bool,\n                node_info: Option<NodeInfo>,\n-               fcx: @mut FunctionContext)\n-            -> Block {\n+               fcx: @FunctionContext)\n+               -> Block {\n         Block {\n             llbb: llbb,\n             terminated: Cell::new(false),"}]}