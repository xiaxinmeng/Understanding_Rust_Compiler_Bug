{"sha": "78d60a549d0711ffea10e2898bff46ebc739f637", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZDYwYTU0OWQwNzExZmZlYTEwZTI4OThiZmY0NmViYzczOWY2Mzc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-31T12:10:37Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-31T12:10:37Z"}, "message": "default method name to type name", "tree": {"sha": "6333fd564c04dab2b73f71761f1d26d040b5ed0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6333fd564c04dab2b73f71761f1d26d040b5ed0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78d60a549d0711ffea10e2898bff46ebc739f637", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78d60a549d0711ffea10e2898bff46ebc739f637", "html_url": "https://github.com/rust-lang/rust/commit/78d60a549d0711ffea10e2898bff46ebc739f637", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78d60a549d0711ffea10e2898bff46ebc739f637/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05a9d42f542c8eb876d06791579d948b2f571e04", "url": "https://api.github.com/repos/rust-lang/rust/commits/05a9d42f542c8eb876d06791579d948b2f571e04", "html_url": "https://github.com/rust-lang/rust/commit/05a9d42f542c8eb876d06791579d948b2f571e04"}], "stats": {"total": 135, "additions": 51, "deletions": 84}, "files": [{"sha": "58dcf574ea65fcb839a057e198ce1f79ab40363c", "filename": "crates/libsyntax2/src/ast/generated.rs", "status": "modified", "additions": 26, "deletions": 52, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/78d60a549d0711ffea10e2898bff46ebc739f637/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d60a549d0711ffea10e2898bff46ebc739f637/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs?ref=78d60a549d0711ffea10e2898bff46ebc739f637", "patch": "@@ -78,8 +78,7 @@ impl<'a> AstNode<'a> for Attr<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> Attr<'a> {\n-    pub fn value(self) -> Option<TokenTree<'a>> {\n+impl<'a> Attr<'a> {pub fn value(self) -> Option<TokenTree<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -141,8 +140,7 @@ impl<'a> Block<'a> {\n     pub fn statements(self) -> impl Iterator<Item = Stmt<'a>> + 'a {\n         super::children(self)\n     }\n-\n-    pub fn expr(self) -> Option<Expr<'a>> {\n+pub fn expr(self) -> Option<Expr<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -163,8 +161,7 @@ impl<'a> AstNode<'a> for BlockExpr<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> BlockExpr<'a> {\n-    pub fn block(self) -> Option<Block<'a>> {\n+impl<'a> BlockExpr<'a> {pub fn block(self) -> Option<Block<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -203,12 +200,10 @@ impl<'a> AstNode<'a> for CallExpr<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> CallExpr<'a> {\n-    pub fn expr(self) -> Option<Expr<'a>> {\n+impl<'a> CallExpr<'a> {pub fn expr(self) -> Option<Expr<'a>> {\n         super::child_opt(self)\n     }\n-\n-    pub fn arg_list(self) -> Option<ArgList<'a>> {\n+pub fn arg_list(self) -> Option<ArgList<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -247,12 +242,10 @@ impl<'a> AstNode<'a> for Condition<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> Condition<'a> {\n-    pub fn pat(self) -> Option<Pat<'a>> {\n+impl<'a> Condition<'a> {pub fn pat(self) -> Option<Pat<'a>> {\n         super::child_opt(self)\n     }\n-\n-    pub fn expr(self) -> Option<Expr<'a>> {\n+pub fn expr(self) -> Option<Expr<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -466,8 +459,7 @@ impl<'a> AstNode<'a> for ExprStmt<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> ExprStmt<'a> {\n-    pub fn expr(self) -> Option<Expr<'a>> {\n+impl<'a> ExprStmt<'a> {pub fn expr(self) -> Option<Expr<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -545,16 +537,13 @@ impl<'a> AstNode<'a> for FnDef<'a> {\n impl<'a> ast::NameOwner<'a> for FnDef<'a> {}\n impl<'a> ast::TypeParamsOwner<'a> for FnDef<'a> {}\n impl<'a> ast::AttrsOwner<'a> for FnDef<'a> {}\n-impl<'a> FnDef<'a> {\n-    pub fn param_list(self) -> Option<ParamList<'a>> {\n+impl<'a> FnDef<'a> {pub fn param_list(self) -> Option<ParamList<'a>> {\n         super::child_opt(self)\n     }\n-\n-    pub fn body(self) -> Option<Block<'a>> {\n+pub fn body(self) -> Option<Block<'a>> {\n         super::child_opt(self)\n     }\n-\n-    pub fn ret_type(self) -> Option<RetType<'a>> {\n+pub fn ret_type(self) -> Option<RetType<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -594,12 +583,10 @@ impl<'a> AstNode<'a> for ForExpr<'a> {\n }\n \n impl<'a> ast::LoopBodyOwner<'a> for ForExpr<'a> {}\n-impl<'a> ForExpr<'a> {\n-    pub fn pat(self) -> Option<Pat<'a>> {\n+impl<'a> ForExpr<'a> {pub fn pat(self) -> Option<Pat<'a>> {\n         super::child_opt(self)\n     }\n-\n-    pub fn iterable(self) -> Option<Expr<'a>> {\n+pub fn iterable(self) -> Option<Expr<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -638,8 +625,7 @@ impl<'a> AstNode<'a> for IfExpr<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> IfExpr<'a> {\n-    pub fn condition(self) -> Option<Condition<'a>> {\n+impl<'a> IfExpr<'a> {pub fn condition(self) -> Option<Condition<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -732,12 +718,10 @@ impl<'a> AstNode<'a> for LambdaExpr<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> LambdaExpr<'a> {\n-    pub fn param_list(self) -> Option<ParamList<'a>> {\n+impl<'a> LambdaExpr<'a> {pub fn param_list(self) -> Option<ParamList<'a>> {\n         super::child_opt(self)\n     }\n-\n-    pub fn body(self) -> Option<Expr<'a>> {\n+pub fn body(self) -> Option<Expr<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -758,12 +742,10 @@ impl<'a> AstNode<'a> for LetStmt<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> LetStmt<'a> {\n-    pub fn pat(self) -> Option<Pat<'a>> {\n+impl<'a> LetStmt<'a> {pub fn pat(self) -> Option<Pat<'a>> {\n         super::child_opt(self)\n     }\n-\n-    pub fn initializer(self) -> Option<Expr<'a>> {\n+pub fn initializer(self) -> Option<Expr<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -802,8 +784,7 @@ impl<'a> AstNode<'a> for LifetimeParam<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> LifetimeParam<'a> {\n-    pub fn lifetime(self) -> Option<Lifetime<'a>> {\n+impl<'a> LifetimeParam<'a> {pub fn lifetime(self) -> Option<Lifetime<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -1162,8 +1143,7 @@ impl<'a> AstNode<'a> for Param<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> Param<'a> {\n-    pub fn pat(self) -> Option<Pat<'a>> {\n+impl<'a> Param<'a> {pub fn pat(self) -> Option<Pat<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -1291,8 +1271,7 @@ impl<'a> AstNode<'a> for Path<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> Path<'a> {\n-    pub fn segment(self) -> Option<PathSegment<'a>> {\n+impl<'a> Path<'a> {pub fn segment(self) -> Option<PathSegment<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -1349,8 +1328,7 @@ impl<'a> AstNode<'a> for PathSegment<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> PathSegment<'a> {\n-    pub fn name_ref(self) -> Option<NameRef<'a>> {\n+impl<'a> PathSegment<'a> {pub fn name_ref(self) -> Option<NameRef<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -2012,8 +1990,7 @@ impl<'a> AstNode<'a> for UseItem<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> UseItem<'a> {\n-    pub fn use_tree(self) -> Option<UseTree<'a>> {\n+impl<'a> UseItem<'a> {pub fn use_tree(self) -> Option<UseTree<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -2034,12 +2011,10 @@ impl<'a> AstNode<'a> for UseTree<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> UseTree<'a> {\n-    pub fn path(self) -> Option<Path<'a>> {\n+impl<'a> UseTree<'a> {pub fn path(self) -> Option<Path<'a>> {\n         super::child_opt(self)\n     }\n-\n-    pub fn use_tree_list(self) -> Option<UseTreeList<'a>> {\n+pub fn use_tree_list(self) -> Option<UseTreeList<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -2101,8 +2076,7 @@ impl<'a> AstNode<'a> for WhileExpr<'a> {\n }\n \n impl<'a> ast::LoopBodyOwner<'a> for WhileExpr<'a> {}\n-impl<'a> WhileExpr<'a> {\n-    pub fn condition(self) -> Option<Condition<'a>> {\n+impl<'a> WhileExpr<'a> {pub fn condition(self) -> Option<Condition<'a>> {\n         super::child_opt(self)\n     }\n }"}, {"sha": "a72e9b7324809c8261d0080aec23aa337abf5f32", "filename": "crates/libsyntax2/src/ast/generated.rs.tera", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/78d60a549d0711ffea10e2898bff46ebc739f637/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs.tera", "raw_url": "https://github.com/rust-lang/rust/raw/78d60a549d0711ffea10e2898bff46ebc739f637/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs.tera", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs.tera?ref=78d60a549d0711ffea10e2898bff46ebc739f637", "patch": "@@ -65,8 +65,15 @@ impl<'a> {{ node }}<'a> {\n \n {%- if methods.options -%}\n {%- for m in methods.options -%}\n+\n+{%- if m is string -%}\n+{%- set method_name = m | snake -%}\n+{%- set ChildName = m %}\n+{%- else -%}\n {%- set method_name = m.0 -%}\n {%- set ChildName = m.1 %}\n+{%- endif -%}\n+\n     pub fn {{ method_name }}(self) -> Option<{{ ChildName }}<'a>> {\n         super::child_opt(self)\n     }"}, {"sha": "77730e30623164661b22bf66b7bdbd9cd6b40c80", "filename": "crates/libsyntax2/src/grammar.ron", "status": "modified", "additions": 14, "deletions": 31, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/78d60a549d0711ffea10e2898bff46ebc739f637/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/78d60a549d0711ffea10e2898bff46ebc739f637/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron?ref=78d60a549d0711ffea10e2898bff46ebc739f637", "patch": "@@ -250,11 +250,7 @@ Grammar(\n                 \"TypeParamsOwner\",\n                 \"AttrsOwner\",\n             ],\n-            options: [\n-                [\"param_list\", \"ParamList\"],\n-                [\"body\", \"Block\"],\n-                [\"ret_type\", \"RetType\"]\n-            ],\n+            options: [ \"ParamList\", [\"body\", \"Block\"], \"RetType\" ],\n         ),\n         \"RetType\": (),\n         \"StructDef\": (\n@@ -346,34 +342,32 @@ Grammar(\n         \"PathExpr\": (),\n         \"LambdaExpr\": (\n             options: [\n-                [\"param_list\", \"ParamList\"],\n+                \"ParamList\",\n                 [\"body\", \"Expr\"],\n             ]\n         ),\n         \"IfExpr\": (\n-            options: [ [\"condition\", \"Condition\"] ]\n+            options: [ \"Condition\" ]\n         ),\n         \"LoopExpr\": (\n             traits: [\"LoopBodyOwner\"],\n         ),\n         \"ForExpr\": (\n             traits: [\"LoopBodyOwner\"],\n             options: [\n-                [\"pat\", \"Pat\"],\n+                \"Pat\",\n                 [\"iterable\", \"Expr\"],\n             ]\n         ),\n         \"WhileExpr\": (\n             traits: [\"LoopBodyOwner\"],\n-            options: [\n-                [\"condition\", \"Condition\"],\n-            ]\n+            options: [ \"Condition\" ]\n         ),\n         \"ContinueExpr\": (),\n         \"BreakExpr\": (),\n         \"Label\": (),\n         \"BlockExpr\": (\n-            options: [ [\"block\", \"Block\"] ]\n+            options: [ \"Block\" ]\n         ),\n         \"ReturnExpr\": (),\n         \"MatchExpr\": (),\n@@ -384,10 +378,7 @@ Grammar(\n         \"NamedFieldList\": (),\n         \"NamedField\": (),\n         \"CallExpr\": (\n-            options: [\n-                [ \"expr\", \"Expr\" ],\n-                [ \"arg_list\", \"ArgList\" ],\n-            ]\n+            options: [ \"Expr\", \"ArgList\" ]\n         ),\n         \"IndexExpr\": (),\n         \"MethodCallExpr\": (),\n@@ -474,7 +465,7 @@ Grammar(\n             ]\n         ),\n         \"TypeParam\": ( traits: [\"NameOwner\"] ),\n-        \"LifetimeParam\": ( options: [ [\"lifetime\", \"Lifetime\"] ] ),\n+        \"LifetimeParam\": ( options: [ \"Lifetime\" ] ),\n         \"Lifetime\": (),\n         \"WhereClause\": (),\n         \"ExprStmt\": (\n@@ -485,16 +476,13 @@ Grammar(\n             [\"initializer\", \"Expr\"],\n         ]),\n         \"Condition\": (\n-            options: [\n-                [ \"pat\", \"Pat\" ],\n-                [ \"expr\", \"Expr\" ],\n-            ]\n+            options: [ \"Pat\", \"Expr\" ]\n         ),\n         \"Stmt\": (\n             enum: [\"ExprStmt\", \"LetStmt\"],\n         ),\n         \"Block\": (\n-            options: [[\"expr\", \"Expr\"]],\n+            options: [ \"Expr\" ],\n             collections: [\n                 [\"statements\", \"Stmt\"],\n             ]\n@@ -505,16 +493,13 @@ Grammar(\n             ]\n         ),\n         \"Param\": (\n-            options: [[\"pat\", \"Pat\"]],\n+            options: [ \"Pat\" ],\n         ),\n         \"UseItem\": (\n-            options: [[\"use_tree\", \"UseTree\"]]\n+            options: [ \"UseTree\" ]\n         ),\n         \"UseTree\": (\n-            options: [\n-                [\"path\", \"Path\"],\n-                [\"use_tree_list\", \"UseTreeList\"],\n-            ]\n+            options: [ \"Path\", \"UseTreeList\" ]\n         ),\n         \"UseTreeList\": (\n             collections: [[\"use_trees\", \"UseTree\"]]\n@@ -531,9 +516,7 @@ Grammar(\n             ]\n         ),\n         \"PathSegment\": (\n-            options: [\n-                [\"name_ref\", \"NameRef\"]\n-            ]\n+            options: [ \"NameRef\" ]\n         ),\n     },\n )"}, {"sha": "5bfaf18f17d79d0388ac950527cc4546eac2eba8", "filename": "crates/tools/src/main.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/78d60a549d0711ffea10e2898bff46ebc739f637/crates%2Ftools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d60a549d0711ffea10e2898bff46ebc739f637/crates%2Ftools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Fmain.rs?ref=78d60a549d0711ffea10e2898bff46ebc739f637", "patch": "@@ -10,7 +10,7 @@ extern crate commandspec;\n extern crate heck;\n \n use clap::{App, Arg, SubCommand};\n-use heck::{CamelCase, ShoutySnakeCase};\n+use heck::{CamelCase, ShoutySnakeCase, SnakeCase};\n use std::{\n     collections::HashMap,\n     fs,\n@@ -91,6 +91,9 @@ fn render_template(template: &str) -> Result<String> {\n     tera.register_filter(\"camel\", |arg, _| {\n         Ok(arg.as_str().unwrap().to_camel_case().into())\n     });\n+    tera.register_filter(\"snake\", |arg, _| {\n+        Ok(arg.as_str().unwrap().to_snake_case().into())\n+    });\n     tera.register_filter(\"SCREAM\", |arg, _| {\n         Ok(arg.as_str().unwrap().to_shouty_snake_case().into())\n     });"}]}