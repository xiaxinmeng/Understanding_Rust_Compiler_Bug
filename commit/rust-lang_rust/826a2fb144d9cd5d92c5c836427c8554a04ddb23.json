{"sha": "826a2fb144d9cd5d92c5c836427c8554a04ddb23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNmEyZmIxNDRkOWNkNWQ5MmM1YzgzNjQyN2M4NTU0YTA0ZGRiMjM=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-06-02T21:32:14Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-06-02T21:32:14Z"}, "message": "Merge pull request #89 from marcusklaas/enums\n\nImplement basic enum formatting", "tree": {"sha": "fd3971ceaf28d201e1de4ff01feb68401d05038a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd3971ceaf28d201e1de4ff01feb68401d05038a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/826a2fb144d9cd5d92c5c836427c8554a04ddb23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/826a2fb144d9cd5d92c5c836427c8554a04ddb23", "html_url": "https://github.com/rust-lang/rust/commit/826a2fb144d9cd5d92c5c836427c8554a04ddb23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/826a2fb144d9cd5d92c5c836427c8554a04ddb23/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b601ea2bc7a2d69eb064ddfe6a337285b34cf9f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b601ea2bc7a2d69eb064ddfe6a337285b34cf9f6", "html_url": "https://github.com/rust-lang/rust/commit/b601ea2bc7a2d69eb064ddfe6a337285b34cf9f6"}, {"sha": "90bc40a11179096a9a11a3a2680b680bae9b2034", "url": "https://api.github.com/repos/rust-lang/rust/commits/90bc40a11179096a9a11a3a2680b680bae9b2034", "html_url": "https://github.com/rust-lang/rust/commit/90bc40a11179096a9a11a3a2680b680bae9b2034"}], "stats": {"total": 240, "additions": 200, "deletions": 40}, "files": [{"sha": "8d6fa827b66eee4bcc50ecf5fc657d5df4e8b303", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/826a2fb144d9cd5d92c5c836427c8554a04ddb23/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/826a2fb144d9cd5d92c5c836427c8554a04ddb23/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=826a2fb144d9cd5d92c5c836427c8554a04ddb23", "patch": "@@ -22,6 +22,7 @@ pub struct Config {\n     pub fn_args_paren_newline: bool,\n     pub struct_trailing_comma: bool,\n     pub struct_lit_trailing_comma: ::lists::SeparatorTactic,\n+    pub enum_trailing_comma: bool,\n }\n \n impl Config {"}, {"sha": "1a7b01473f3865dc4d867dad5de51c8e2a72b219", "filename": "src/default.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/826a2fb144d9cd5d92c5c836427c8554a04ddb23/src%2Fdefault.toml", "raw_url": "https://github.com/rust-lang/rust/raw/826a2fb144d9cd5d92c5c836427c8554a04ddb23/src%2Fdefault.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdefault.toml?ref=826a2fb144d9cd5d92c5c836427c8554a04ddb23", "patch": "@@ -8,3 +8,4 @@ fn_return_indent = \"WithArgs\"\n fn_args_paren_newline = true\n struct_trailing_comma = true\n struct_lit_trailing_comma = \"Vertical\"\n+enum_trailing_comma = true"}, {"sha": "e91b164a186674aeb56ca33a79c75837217b49e3", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/826a2fb144d9cd5d92c5c836427c8554a04ddb23/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/826a2fb144d9cd5d92c5c836427c8554a04ddb23/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=826a2fb144d9cd5d92c5c836427c8554a04ddb23", "patch": "@@ -264,7 +264,6 @@ impl<'a> FmtVisitor<'a> {\n             _ => {}\n         }\n \n-        let result = self.snippet(expr.span);\n-        result\n+        self.snippet(expr.span)\n     }\n }"}, {"sha": "60f1d2806af9570b703a36db898f1fabb0672488", "filename": "src/imports.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/826a2fb144d9cd5d92c5c836427c8554a04ddb23/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/826a2fb144d9cd5d92c5c836427c8554a04ddb23/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=826a2fb144d9cd5d92c5c836427c8554a04ddb23", "patch": "@@ -10,6 +10,7 @@\n \n use visitor::FmtVisitor;\n use lists::{write_list, ListFormatting, SeparatorTactic, ListTactic};\n+use utils::format_visibility;\n \n use syntax::ast;\n use syntax::parse::token;\n@@ -48,11 +49,7 @@ impl<'a> FmtVisitor<'a> {\n                             path_list: &[ast::PathListItem],\n                             visibility: ast::Visibility) -> String {\n         let path_str = pprust::path_to_string(path);\n-\n-        let vis = match visibility {\n-            ast::Public => \"pub \",\n-            _ => \"\"\n-        };\n+        let vis = format_visibility(visibility);\n \n         if path_list.len() == 1 {\n             return rewrite_single_use_list(path_str, path_list[0], vis);"}, {"sha": "a24e02957faddfc9c86ee35c24eda4f51489f174", "filename": "src/items.rs", "status": "modified", "additions": 143, "deletions": 33, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/826a2fb144d9cd5d92c5c836427c8554a04ddb23/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/826a2fb144d9cd5d92c5c836427c8554a04ddb23/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=826a2fb144d9cd5d92c5c836427c8554a04ddb23", "patch": "@@ -11,7 +11,7 @@\n // Formatting top-level items - functions, structs, enums, traits, impls.\n \n use {ReturnIndent, BraceStyle};\n-use utils::make_indent;\n+use utils::{format_visibility, make_indent};\n use lists::{write_list, ListFormatting, SeparatorTactic, ListTactic};\n use visitor::FmtVisitor;\n use syntax::{ast, abi};\n@@ -109,9 +109,8 @@ impl<'a> FmtVisitor<'a> {\n \n         let mut result = String::with_capacity(1024);\n         // Vis unsafety abi.\n-        if vis == ast::Visibility::Public {\n-            result.push_str(\"pub \");\n-        }\n+        result.push_str(format_visibility(vis));\n+\n         if let &ast::Unsafety::Unsafe = unsafety {\n             result.push_str(\"unsafe \");\n         }\n@@ -351,7 +350,7 @@ impl<'a> FmtVisitor<'a> {\n     }\n \n     fn compute_budgets_for_args(&self,\n-                                result: &String,\n+                                result: &str,\n                                 indent: usize,\n                                 ret_str_len: usize,\n                                 newline_brace: bool)\n@@ -408,14 +407,126 @@ impl<'a> FmtVisitor<'a> {\n         }\n     }\n \n+    pub fn visit_enum(&mut self,\n+                      ident: ast::Ident,\n+                      vis: ast::Visibility,\n+                      enum_def: &ast::EnumDef,\n+                      generics: &ast::Generics,\n+                      span: Span)\n+    {\n+        let header_str = self.format_header(\"enum\", ident, vis);\n+        self.changes.push_str_span(span, &header_str);\n+\n+        let enum_snippet = self.snippet(span);\n+        // FIXME this will give incorrect results if there is a { in a comment.\n+        let body_start = span.lo + BytePos(enum_snippet.find('{').unwrap() as u32 + 1);\n+        let generics_str = self.format_generics(generics, body_start);\n+        self.changes.push_str_span(span, &generics_str);\n+\n+        self.last_pos = body_start;\n+        self.block_indent += config!(tab_spaces);\n+        for (i, f) in enum_def.variants.iter().enumerate() {\n+            let next_span_start: BytePos = if i == enum_def.variants.len() - 1 {\n+                span.hi\n+            } else {\n+                enum_def.variants[i + 1].span.lo\n+            };\n+\n+            self.visit_variant(f, i == enum_def.variants.len() - 1, next_span_start);\n+        }\n+        self.block_indent -= config!(tab_spaces);\n+\n+        self.format_missing_with_indent(span.lo + BytePos(enum_snippet.rfind('}').unwrap() as u32));\n+        self.changes.push_str_span(span, \"}\");\n+    }\n+\n+    // Variant of an enum\n+    fn visit_variant(&mut self,\n+                     field: &ast::Variant,\n+                     last_field: bool,\n+                     next_span_start: BytePos)\n+    {\n+        if self.visit_attrs(&field.node.attrs) {\n+            return;\n+        }\n+\n+        if let ast::VariantKind::TupleVariantKind(ref types) = field.node.kind {\n+            self.format_missing_with_indent(field.span.lo);\n+\n+            let vis = format_visibility(field.node.vis);\n+            self.changes.push_str_span(field.span, vis);\n+            let name = field.node.name.to_string();\n+            self.changes.push_str_span(field.span, &name);\n+\n+            let mut result = String::new();\n+\n+            if types.len() > 0 {\n+                let comments = self.make_comments_for_list(Vec::new(),\n+                                                           types.iter().map(|arg| arg.ty.span),\n+                                                           \",\",\n+                                                           \")\",\n+                                                           |span| span.lo,\n+                                                           |span| span.hi,\n+                                                           next_span_start);\n+\n+                let type_strings: Vec<_> = types.iter()\n+                                                .map(|arg| pprust::ty_to_string(&arg.ty))\n+                                                .zip(comments.into_iter())\n+                                                .collect();\n+\n+                result.push('(');\n+\n+                let indent = self.block_indent\n+                             + vis.len()\n+                             + field.node.name.to_string().len()\n+                             + 1; // 1 = (\n+\n+                let comma_cost = if config!(enum_trailing_comma) { 1 } else { 0 };\n+                let budget = config!(ideal_width) - indent - comma_cost - 1; // 1 = )\n+\n+                let fmt = ListFormatting {\n+                    tactic: ListTactic::HorizontalVertical,\n+                    separator: \",\",\n+                    trailing_separator: SeparatorTactic::Never,\n+                    indent: indent,\n+                    h_width: budget,\n+                    v_width: budget,\n+                };\n+                result.push_str(&write_list(&type_strings, &fmt));\n+                result.push(')');\n+            }\n+\n+            if let Some(ref expr) = field.node.disr_expr {\n+                result.push_str(\" = \");\n+                let expr_snippet = self.snippet(expr.span);\n+                result.push_str(&expr_snippet);\n+\n+                // Make sure we do not exceed column limit\n+                // 4 = \" = ,\"\n+                assert!(config!(max_width) >= vis.len() + name.len() + expr_snippet.len() + 4,\n+                        \"Enum variant exceeded column limit\");\n+            }\n+\n+            self.changes.push_str_span(field.span, &result);\n+\n+            if !last_field || config!(enum_trailing_comma) {\n+                self.changes.push_str_span(field.span, \",\");\n+            }\n+        }\n+\n+        // TODO: deal with struct-like variants\n+\n+        self.last_pos = field.span.hi + BytePos(1);\n+    }\n+\n     pub fn visit_struct(&mut self,\n                         ident: ast::Ident,\n                         vis: ast::Visibility,\n                         struct_def: &ast::StructDef,\n                         generics: &ast::Generics,\n                         span: Span)\n     {\n-        let header_str = self.struct_header(ident, vis);\n+        let header_str = self.format_header(\"struct\", ident, vis);\n         self.changes.push_str_span(span, &header_str);\n \n         if struct_def.fields.len() == 0 {\n@@ -428,24 +539,11 @@ impl<'a> FmtVisitor<'a> {\n             return;\n         }\n \n-        let mut generics_buf = String::new();\n-        let generics_str = self.rewrite_generics(generics, self.block_indent, struct_def.fields[0].span.lo);\n-        generics_buf.push_str(&generics_str);\n-\n-        if generics.where_clause.predicates.len() > 0 {\n-            generics_buf.push_str(&self.rewrite_where_clause(&generics.where_clause,\n-                                                             self.block_indent,\n-                                                             struct_def.fields[0].span.lo));\n-            generics_buf.push_str(&make_indent(self.block_indent));\n-            generics_buf.push_str(\"\\n{\");\n-\n-        } else {\n-            generics_buf.push_str(\" {\");\n-        }\n-        self.changes.push_str_span(span, &generics_buf);\n+        let generics_str = self.format_generics(generics, struct_def.fields[0].span.lo);\n+        self.changes.push_str_span(span, &generics_str);\n \n         let struct_snippet = self.snippet(span);\n-        // FIXME this will give incorrect results if there is a { in a commet.\n+        // FIXME this will give incorrect results if there is a { in a comment.\n         self.last_pos = span.lo + BytePos(struct_snippet.find('{').unwrap() as u32 + 1);\n \n         self.block_indent += config!(tab_spaces);\n@@ -458,18 +556,34 @@ impl<'a> FmtVisitor<'a> {\n         self.changes.push_str_span(span, \"}\");\n     }\n \n-    fn struct_header(&self,\n+    fn format_header(&self,\n+                     item_name: &str,\n                      ident: ast::Ident,\n                      vis: ast::Visibility)\n         -> String\n     {\n-        let vis = if vis == ast::Visibility::Public {\n-            \"pub \"\n+        format!(\"{}{} {}\", format_visibility(vis), item_name, &token::get_ident(ident))\n+    }\n+\n+    fn format_generics(&self,\n+                       generics: &ast::Generics,\n+                       span_end: BytePos)\n+        -> String\n+    {\n+        let mut result = self.rewrite_generics(generics, self.block_indent, span_end);\n+\n+        if generics.where_clause.predicates.len() > 0 {\n+            result.push_str(&self.rewrite_where_clause(&generics.where_clause,\n+                                                             self.block_indent,\n+                                                             span_end));\n+            result.push_str(&make_indent(self.block_indent));\n+            result.push_str(\"\\n{\");\n+\n         } else {\n-            \"\"\n-        };\n+            result.push_str(\" {\");\n+        }\n \n-        format!(\"{}struct {}\", vis, &token::get_ident(ident))\n+        result\n     }\n \n     // Field of a struct\n@@ -491,11 +605,7 @@ impl<'a> FmtVisitor<'a> {\n         };\n         let vis = match field.node.kind {\n             ast::StructFieldKind::NamedField(_, vis) |\n-            ast::StructFieldKind::UnnamedField(vis) => if vis == ast::Visibility::Public {\n-                \"pub \"\n-            } else {\n-                \"\"\n-            }\n+            ast::StructFieldKind::UnnamedField(vis) => format_visibility(vis)\n         };\n         let typ = pprust::ty_to_string(&field.node.ty);\n "}, {"sha": "520877c79c88ff8ed7b551a1660d0930c66f64fd", "filename": "src/utils.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/826a2fb144d9cd5d92c5c836427c8554a04ddb23/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/826a2fb144d9cd5d92c5c836427c8554a04ddb23/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=826a2fb144d9cd5d92c5c836427c8554a04ddb23", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use syntax::ast::Visibility;\n \n #[inline]\n pub fn prev_char(s: &str, mut i: usize) -> usize {\n@@ -38,3 +39,11 @@ pub fn make_indent(width: usize) -> String {\n     }\n     indent\n }\n+\n+#[inline]\n+pub fn format_visibility(vis: Visibility) -> &'static str {\n+    match vis {\n+        Visibility::Public => \"pub \",\n+        Visibility::Inherited => \"\"\n+    }\n+}"}, {"sha": "3c9f3ac1b236222261ae9509bc2933224057f005", "filename": "src/visitor.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/826a2fb144d9cd5d92c5c836427c8554a04ddb23/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/826a2fb144d9cd5d92c5c836427c8554a04ddb23/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=826a2fb144d9cd5d92c5c836427c8554a04ddb23", "patch": "@@ -196,6 +196,15 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                                   item.span);\n                 self.last_pos = item.span.hi;\n             }\n+            ast::Item_::ItemEnum(ref def, ref generics) => {\n+                self.format_missing_with_indent(item.span.lo);\n+                self.visit_enum(item.ident,\n+                                item.vis,\n+                                def,\n+                                generics,\n+                                item.span);\n+                self.last_pos = item.span.hi;\n+            }\n             _ => {\n                 visit::walk_item(self, item);\n             }"}, {"sha": "2f7b3bb66a95b8c6a620525c22f89d33386ef4cb", "filename": "tests/idem/enum.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/826a2fb144d9cd5d92c5c836427c8554a04ddb23/tests%2Fidem%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/826a2fb144d9cd5d92c5c836427c8554a04ddb23/tests%2Fidem%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fidem%2Fenum.rs?ref=826a2fb144d9cd5d92c5c836427c8554a04ddb23", "patch": "@@ -0,0 +1,34 @@\n+// Enums test\n+\n+#[atrr]\n+pub enum Test {\n+    A,\n+    B(u32, A /* comment */),\n+    /// Doc comment\n+    C,\n+}\n+\n+pub enum Foo<'a, Y: Baz>\n+    where X: Whatever\n+{\n+    A,\n+}\n+\n+enum EmtpyWithComment {\n+    // Some comment\n+}\n+\n+// C-style enum\n+enum Bar {\n+    A = 1,\n+    #[someAttr(test)]\n+    B = 2, // comment\n+    C,\n+}\n+\n+enum LongVariants {\n+    First(LOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONG, // small comment\n+          VARIANT),\n+    // This is the second variant\n+    Second,\n+}"}]}