{"sha": "38c53f3c2d31e73404545114f0ef42d5711c6403", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4YzUzZjNjMmQzMWU3MzQwNDU0NTExNGYwZWY0MmQ1NzExYzY0MDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-19T17:44:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-19T17:44:02Z"}, "message": "Auto merge of #40651 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 13 pull requests\n\n- Successful merges: #40441, #40445, #40562, #40564, #40583, #40588, #40589, #40590, #40603, #40611, #40621, #40646, #40648\n- Failed merges:", "tree": {"sha": "54cee6512393829c234980aefb0c90260747278e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54cee6512393829c234980aefb0c90260747278e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38c53f3c2d31e73404545114f0ef42d5711c6403", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38c53f3c2d31e73404545114f0ef42d5711c6403", "html_url": "https://github.com/rust-lang/rust/commit/38c53f3c2d31e73404545114f0ef42d5711c6403", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38c53f3c2d31e73404545114f0ef42d5711c6403/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c15de4fd59bee290848b5443c7e194fd5afb02c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c15de4fd59bee290848b5443c7e194fd5afb02c", "html_url": "https://github.com/rust-lang/rust/commit/9c15de4fd59bee290848b5443c7e194fd5afb02c"}, {"sha": "94e346b7b79d37fea729fa68fc2838e90724cc3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/94e346b7b79d37fea729fa68fc2838e90724cc3f", "html_url": "https://github.com/rust-lang/rust/commit/94e346b7b79d37fea729fa68fc2838e90724cc3f"}], "stats": {"total": 244, "additions": 216, "deletions": 28}, "files": [{"sha": "e9547ee42d0771c8be57a92eb67cec822ad154c9", "filename": "src/bootstrap/clean.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Fbootstrap%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Fbootstrap%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fclean.rs?ref=38c53f3c2d31e73404545114f0ef42d5711c6403", "patch": "@@ -22,9 +22,9 @@ use std::path::Path;\n use Build;\n \n pub fn clean(build: &Build) {\n-    rm_rf(build, \"tmp\".as_ref());\n-    rm_rf(build, &build.out.join(\"tmp\"));\n-    rm_rf(build, &build.out.join(\"dist\"));\n+    rm_rf(\"tmp\".as_ref());\n+    rm_rf(&build.out.join(\"tmp\"));\n+    rm_rf(&build.out.join(\"dist\"));\n \n     for host in build.config.host.iter() {\n         let entries = match build.out.join(host).read_dir() {\n@@ -38,12 +38,12 @@ pub fn clean(build: &Build) {\n                 continue\n             }\n             let path = t!(entry.path().canonicalize());\n-            rm_rf(build, &path);\n+            rm_rf(&path);\n         }\n     }\n }\n \n-fn rm_rf(build: &Build, path: &Path) {\n+fn rm_rf(path: &Path) {\n     if !path.exists() {\n         return\n     }\n@@ -55,7 +55,7 @@ fn rm_rf(build: &Build, path: &Path) {\n         let file = t!(file).path();\n \n         if file.is_dir() {\n-            rm_rf(build, &file);\n+            rm_rf(&file);\n         } else {\n             // On windows we can't remove a readonly file, and git will\n             // often clone files as readonly. As a result, we have some"}, {"sha": "7820d44920829fe6e3dc1657fc9e8a5e95b361a0", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=38c53f3c2d31e73404545114f0ef42d5711c6403", "patch": "@@ -71,6 +71,7 @@\n - [repr_simd](repr-simd.md)\n - [rustc_attrs](rustc-attrs.md)\n - [rustc_diagnostic_macros](rustc-diagnostic-macros.md)\n+- [rvalue_static_promotion](rvalue-static-promotion.md)\n - [sanitizer_runtime](sanitizer-runtime.md)\n - [simd](simd.md)\n - [simd_ffi](simd-ffi.md)"}, {"sha": "2583d350ebe11d4f6df184e238a471c27334a8b4", "filename": "src/doc/unstable-book/src/rvalue-static-promotion.md", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Fdoc%2Funstable-book%2Fsrc%2Frvalue-static-promotion.md", "raw_url": "https://github.com/rust-lang/rust/raw/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Fdoc%2Funstable-book%2Fsrc%2Frvalue-static-promotion.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Frvalue-static-promotion.md?ref=38c53f3c2d31e73404545114f0ef42d5711c6403", "patch": "@@ -0,0 +1,23 @@\n+# `rvalue_static_promotion`\n+\n+The tracking issue for this feature is: [#38865]\n+\n+[#38865]: https://github.com/rust-lang/rust/issues/38865\n+\n+------------------------\n+\n+The `rvalue_static_promotion` feature allows directly creating `'static` references to\n+constant `rvalue`s, which in particular allowing for more concise code in the common case\n+in which a `'static` reference is all that's needed.\n+\n+\n+## Examples\n+\n+```rust\n+#![feature(rvalue_static_promotion)]\n+\n+fn main() {\n+    let DEFAULT_VALUE: &'static u32 = &42;\n+    assert_eq!(*DEFAULT_VALUE, 42);\n+}\n+```"}, {"sha": "653310b8cb591839a7f49691a38c3fbaff8d6569", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=38c53f3c2d31e73404545114f0ef42d5711c6403", "patch": "@@ -230,7 +230,7 @@ impl<T> [T] {\n         core_slice::SliceExt::first_mut(self)\n     }\n \n-    /// Returns the first and all the rest of the elements of a slice.\n+    /// Returns the first and all the rest of the elements of a slice, or `None` if it is empty.\n     ///\n     /// # Examples\n     ///\n@@ -248,7 +248,7 @@ impl<T> [T] {\n         core_slice::SliceExt::split_first(self)\n     }\n \n-    /// Returns the first and all the rest of the elements of a slice.\n+    /// Returns the first and all the rest of the elements of a slice, or `None` if it is empty.\n     ///\n     /// # Examples\n     ///\n@@ -268,7 +268,7 @@ impl<T> [T] {\n         core_slice::SliceExt::split_first_mut(self)\n     }\n \n-    /// Returns the last and all the rest of the elements of a slice.\n+    /// Returns the last and all the rest of the elements of a slice, or `None` if it is empty.\n     ///\n     /// # Examples\n     ///\n@@ -287,7 +287,7 @@ impl<T> [T] {\n \n     }\n \n-    /// Returns the last and all the rest of the elements of a slice.\n+    /// Returns the last and all the rest of the elements of a slice, or `None` if it is empty.\n     ///\n     /// # Examples\n     ///\n@@ -437,8 +437,8 @@ impl<T> [T] {\n     /// The caller must ensure that the slice outlives the pointer this\n     /// function returns, or else it will end up pointing to garbage.\n     ///\n-    /// Modifying the slice may cause its buffer to be reallocated, which\n-    /// would also make any pointers to it invalid.\n+    /// Modifying the container referenced by this slice may cause its buffer\n+    /// to be reallocated, which would also make any pointers to it invalid.\n     ///\n     /// # Examples\n     ///\n@@ -463,8 +463,8 @@ impl<T> [T] {\n     /// The caller must ensure that the slice outlives the pointer this\n     /// function returns, or else it will end up pointing to garbage.\n     ///\n-    /// Modifying the slice may cause its buffer to be reallocated, which\n-    /// would also make any pointers to it invalid.\n+    /// Modifying the container referenced by this slice may cause its buffer\n+    /// to be reallocated, which would also make any pointers to it invalid.\n     ///\n     /// # Examples\n     ///"}, {"sha": "0cf53826dd4274998190b0e26c2a290f24553129", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=38c53f3c2d31e73404545114f0ef42d5711c6403", "patch": "@@ -195,6 +195,21 @@ pub struct cmt_<'tcx> {\n pub type cmt<'tcx> = Rc<cmt_<'tcx>>;\n \n impl<'tcx> cmt_<'tcx> {\n+    pub fn get_def(&self) -> Option<ast::NodeId> {\n+        match self.cat {\n+            Categorization::Deref(ref cmt, ..) |\n+            Categorization::Interior(ref cmt, _) |\n+            Categorization::Downcast(ref cmt, _) => {\n+                if let Categorization::Local(nid) = cmt.cat {\n+                    Some(nid)\n+                } else {\n+                    None\n+                }\n+            }\n+            _ => None\n+        }\n+    }\n+\n     pub fn get_field(&self, name: ast::Name) -> Option<DefId> {\n         match self.cat {\n             Categorization::Deref(ref cmt, ..) |\n@@ -843,11 +858,10 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         let promotable = self.tcx().rvalue_promotable_to_static.borrow().get(&id).cloned()\n                                    .unwrap_or(false);\n \n-        // Only promote `[T; 0]` before an RFC for rvalue promotions\n-        // is accepted.\n+        // When the corresponding feature isn't toggled, only promote `[T; 0]`.\n         let promotable = match expr_ty.sty {\n             ty::TyArray(_, 0) => true,\n-            _ => promotable & false\n+            _ => promotable && self.tcx().sess.features.borrow().rvalue_static_promotion,\n         };\n \n         // Compute maximum lifetime of this rvalue. This is 'static if"}, {"sha": "20d495976b05f47a8c1ece2b23566775f8fee3bd", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=38c53f3c2d31e73404545114f0ef42d5711c6403", "patch": "@@ -662,6 +662,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n     pub fn bckerr_to_diag(&self, err: &BckError<'tcx>) -> DiagnosticBuilder<'a> {\n         let span = err.span.clone();\n         let mut immutable_field = None;\n+        let mut local_def = None;\n \n         let msg = &match err.code {\n             err_mutbl => {\n@@ -711,6 +712,14 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                 }\n                                 None\n                             });\n+                        local_def = err.cmt.get_def()\n+                            .and_then(|nid| {\n+                                if !self.tcx.hir.is_argument(nid) {\n+                                    Some(self.tcx.hir.span(nid))\n+                                } else {\n+                                    None\n+                                }\n+                            });\n \n                         format!(\"cannot borrow {} as mutable\", descr)\n                     }\n@@ -741,6 +750,11 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         if let Some((span, msg)) = immutable_field {\n             db.span_label(span, &msg);\n         }\n+        if let Some(let_span) = local_def {\n+            if let Ok(snippet) = self.tcx.sess.codemap().span_to_snippet(let_span) {\n+                db.span_label(let_span, &format!(\"consider changing this to `mut {}`\", snippet));\n+            }\n+        }\n         db\n     }\n \n@@ -1109,6 +1123,11 @@ before rustc 1.16, this temporary lived longer - see issue #39283 \\\n                     } else {\n                         db.span_label(*error_span, &format!(\"cannot borrow mutably\"));\n                     }\n+                } else if let Categorization::Interior(ref cmt, _) = err.cmt.cat {\n+                    if let mc::MutabilityCategory::McImmutable = cmt.mutbl {\n+                        db.span_label(*error_span,\n+                                      &\"cannot mutably borrow immutable field\");\n+                    }\n                 }\n             }\n         }"}, {"sha": "be905a9d0f94a904af2bed118631f52007dd7985", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=38c53f3c2d31e73404545114f0ef42d5711c6403", "patch": "@@ -23,7 +23,7 @@ use {resolve_error, resolve_struct_error, ResolutionError};\n \n use rustc::middle::cstore::LoadedMacro;\n use rustc::hir::def::*;\n-use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId};\n+use rustc::hir::def_id::{CrateNum, BUILTIN_MACROS_CRATE, CRATE_DEF_INDEX, DefId};\n use rustc::ty;\n \n use std::cell::Cell;\n@@ -496,6 +496,9 @@ impl<'a> Resolver<'a> {\n         let def_id = self.macro_defs[&expansion];\n         if let Some(id) = self.definitions.as_local_node_id(def_id) {\n             self.local_macro_def_scopes[&id]\n+        } else if def_id.krate == BUILTIN_MACROS_CRATE {\n+            // FIXME(jseyfried): This happens when `include!()`ing a `$crate::` path, c.f, #40469.\n+            self.graph_root\n         } else {\n             let module_def_id = ty::DefIdTree::parent(&*self, def_id).unwrap();\n             self.get_extern_crate_root(module_def_id.krate)"}, {"sha": "eff848be2b8b99b2d7a6f7f3ba962dcaca120dfc", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=38c53f3c2d31e73404545114f0ef42d5711c6403", "patch": "@@ -1387,7 +1387,7 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n                         decl: decl,\n                         abi: sig.abi(),\n \n-                        // trait methods canot (currently, at least) be const\n+                        // trait methods cannot (currently, at least) be const\n                         constness: hir::Constness::NotConst,\n                     })\n                 } else {"}, {"sha": "7b60d497932de84f23f57b5edeef075abb423134", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=38c53f3c2d31e73404545114f0ef42d5711c6403", "patch": "@@ -60,6 +60,7 @@ use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability;\n use rustc::hir;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n+use rustc::session::config::nightly_options::is_nightly_build;\n use rustc_data_structures::flock;\n \n use clean::{self, AttributesExt, GetDefId, SelfTy, Mutability};\n@@ -2316,9 +2317,10 @@ fn render_assoc_item(w: &mut fmt::Formatter,\n             }\n         };\n         // FIXME(#24111): remove when `const_fn` is stabilized\n-        let vis_constness = match UnstableFeatures::from_environment() {\n-            UnstableFeatures::Allow => constness,\n-            _ => hir::Constness::NotConst\n+        let vis_constness = if is_nightly_build() {\n+            constness\n+        } else {\n+            hir::Constness::NotConst\n         };\n         let prefix = format!(\"{}{}{:#}fn {}{:#}\",\n                              ConstnessSpace(vis_constness),"}, {"sha": "57332170081465d74afdbe1a1c1269d58d668c97", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=38c53f3c2d31e73404545114f0ef42d5711c6403", "patch": "@@ -222,8 +222,8 @@ const DISPLACEMENT_THRESHOLD: usize = 128;\n /// resistance against HashDoS attacks. The algorithm is randomly seeded, and a\n /// reasonable best-effort is made to generate this seed from a high quality,\n /// secure source of randomness provided by the host without blocking the\n-/// program. Because of this, the randomness of the seed is dependant on the\n-/// quality of the system's random number generator at the time it is created.\n+/// program. Because of this, the randomness of the seed depends on the output\n+/// quality of the system's random number generator when the seed is created.\n /// In particular, seeds generated when the system's entropy pool is abnormally\n /// low such as during system boot may be of a lower quality.\n ///"}, {"sha": "24e0e6f3fa659f3ec98204ecdec3ffe60588188e", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=38c53f3c2d31e73404545114f0ef42d5711c6403", "patch": "@@ -636,6 +636,7 @@ impl FromInner<c::in_addr> for Ipv4Addr {\n \n #[stable(feature = \"ip_u32\", since = \"1.1.0\")]\n impl From<Ipv4Addr> for u32 {\n+    /// It performs the conversion in network order (big-endian).\n     fn from(ip: Ipv4Addr) -> u32 {\n         let ip = ip.octets();\n         ((ip[0] as u32) << 24) + ((ip[1] as u32) << 16) + ((ip[2] as u32) << 8) + (ip[3] as u32)\n@@ -644,6 +645,7 @@ impl From<Ipv4Addr> for u32 {\n \n #[stable(feature = \"ip_u32\", since = \"1.1.0\")]\n impl From<u32> for Ipv4Addr {\n+    /// It performs the conversion in network order (big-endian).\n     fn from(ip: u32) -> Ipv4Addr {\n         Ipv4Addr::new((ip >> 24) as u8, (ip >> 16) as u8, (ip >> 8) as u8, ip as u8)\n     }"}, {"sha": "db446d88900c18a43122b64a59ff68dc73aa9f1b", "filename": "src/libstd/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=38c53f3c2d31e73404545114f0ef42d5711c6403", "patch": "@@ -1501,7 +1501,7 @@ impl Path {\n     /// assert_eq!(path.to_string_lossy(), \"foo.txt\");\n     /// ```\n     ///\n-    /// Had `os_str` contained invalid unicode, the `to_string_lossy` call might\n+    /// Had `path` contained invalid unicode, the `to_string_lossy` call might\n     /// have returned `\"fo\ufffd.txt\"`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_string_lossy(&self) -> Cow<str> {"}, {"sha": "d79be2944c9e31a956387df4c29c621de590dd51", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=38c53f3c2d31e73404545114f0ef42d5711c6403", "patch": "@@ -132,7 +132,7 @@ unsafe impl<T: ?Sized + Send> Sync for Mutex<T> { }\n /// An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n /// dropped (falls out of scope), the lock will be unlocked.\n ///\n-/// The data protected by the mutex can be access through this guard via its\n+/// The data protected by the mutex can be accessed through this guard via its\n /// [`Deref`] and [`DerefMut`] implementations.\n ///\n /// This structure is created by the [`lock`] and [`try_lock`] methods on"}, {"sha": "d07069d030a1bba4099ab2887b16dccf40c54a5f", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=38c53f3c2d31e73404545114f0ef42d5711c6403", "patch": "@@ -342,6 +342,9 @@ declare_features! (\n \n     // Allows the `catch {...}` expression\n     (active, catch_expr, \"1.17.0\", Some(31436)),\n+\n+    // See rust-lang/rfcs#1414. Allows code like `let x: &'static u32 = &42` to work.\n+    (active, rvalue_static_promotion, \"1.15.1\", Some(38865)),\n );\n \n declare_features! ("}, {"sha": "d48cf6911ed37b64bf33f8cddfc3d76a6fee02b9", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=38c53f3c2d31e73404545114f0ef42d5711c6403", "patch": "@@ -725,7 +725,7 @@ impl<'a> StringReader<'a> {\n                     base = 16;\n                     num_digits = self.scan_digits(16, 16);\n                 }\n-                '0'...'9' | '_' | '.' => {\n+                '0'...'9' | '_' | '.' | 'e' | 'E' => {\n                     num_digits = self.scan_digits(10, 10) + 1;\n                 }\n                 _ => {"}, {"sha": "f33d0a71481d2d18905dca6aa338aa4dd7cb9cdf", "filename": "src/test/compile-fail/feature-gate-rvalue_static_promotion.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Ftest%2Fcompile-fail%2Ffeature-gate-rvalue_static_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Ftest%2Fcompile-fail%2Ffeature-gate-rvalue_static_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-rvalue_static_promotion.rs?ref=38c53f3c2d31e73404545114f0ef42d5711c6403", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[allow(unused_variables)]\n+fn main() {\n+    let x: &'static u32 = &42; //~ error: does not live long enough\n+    let y: &'static Option<u32> = &None; //~ error: does not live long enough\n+}"}, {"sha": "4970bba431a8423473d27c6099ea471e41bc3693", "filename": "src/test/run-pass/auxiliary/issue_40469.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_40469.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_40469.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_40469.rs?ref=38c53f3c2d31e73404545114f0ef42d5711c6403", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! m { () => { $crate::main(); } }"}, {"sha": "7d804156576553419f09fe556c5f11c736939fe4", "filename": "src/test/run-pass/issue-34571.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Ftest%2Frun-pass%2Fissue-34571.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Ftest%2Frun-pass%2Fissue-34571.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-34571.rs?ref=38c53f3c2d31e73404545114f0ef42d5711c6403", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[repr(u8)]\n+enum Foo {\n+    Foo(u8),\n+}\n+\n+fn main() {\n+    match Foo::Foo(1) {\n+        _ => ()\n+    }\n+}"}, {"sha": "a73dc1966b4bedac35b95f606445169617a41d81", "filename": "src/test/run-pass/issue-40408.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Ftest%2Frun-pass%2Fissue-40408.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Ftest%2Frun-pass%2Fissue-40408.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-40408.rs?ref=38c53f3c2d31e73404545114f0ef42d5711c6403", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    println!(\"{}\", 0E+10);\n+    println!(\"{}\", 0e+10);\n+    println!(\"{}\", 00e+10);\n+    println!(\"{}\", 00E+10);\n+}"}, {"sha": "30055e532cd45763fa4c8e414494422bf7d92d88", "filename": "src/test/run-pass/issue-40469.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Ftest%2Frun-pass%2Fissue-40469.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Ftest%2Frun-pass%2Fissue-40469.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-40469.rs?ref=38c53f3c2d31e73404545114f0ef42d5711c6403", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-pretty issue #37195\n+\n+#![allow(dead_code)]\n+\n+include!(\"auxiliary/issue_40469.rs\");\n+fn f() { m!(); }\n+\n+fn main() {}"}, {"sha": "30643cfc3eb7d5b5c2527b847aaf3d6991d0e35e", "filename": "src/test/run-pass/rvalue-static-promotion.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Ftest%2Frun-pass%2Frvalue-static-promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Ftest%2Frun-pass%2Frvalue-static-promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frvalue-static-promotion.rs?ref=38c53f3c2d31e73404545114f0ef42d5711c6403", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rvalue_static_promotion)]\n+\n+#[allow(unused_variables)]\n+fn main() {\n+    let x: &'static u32 = &42;\n+    let y: &'static Option<u32> = &None;\n+}"}, {"sha": "380feb941d6feab4eaaa03f45ff326ba4db8606b", "filename": "src/test/rustdoc/const.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Ftest%2Frustdoc%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Ftest%2Frustdoc%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst.rs?ref=38c53f3c2d31e73404545114f0ef42d5711c6403", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type=\"lib\"]\n+\n+#![feature(const_fn)]\n+\n+pub struct Foo;\n+\n+impl Foo {\n+    // @has const/struct.Foo.html '//*[@id=\"new.v\"]//code' 'const unsafe fn new'\n+    pub const unsafe fn new() -> Foo {\n+        Foo\n+    }\n+}"}, {"sha": "7f124e6d34d354e0161ec23143d3b28050524409", "filename": "src/test/ui/did_you_mean/issue-39544.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38c53f3c2d31e73404545114f0ef42d5711c6403/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr?ref=38c53f3c2d31e73404545114f0ef42d5711c6403", "patch": "@@ -1,8 +1,10 @@\n error: cannot borrow immutable field `z.x` as mutable\n   --> $DIR/issue-39544.rs:21:18\n    |\n+20 |     let z = Z { x: X::Y };\n+   |         - consider changing this to `mut z`\n 21 |     let _ = &mut z.x;\n-   |                  ^^^\n+   |                  ^^^ cannot mutably borrow immutable field\n \n error: aborting due to previous error\n "}]}