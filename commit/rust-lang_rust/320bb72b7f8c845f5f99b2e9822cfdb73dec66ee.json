{"sha": "320bb72b7f8c845f5f99b2e9822cfdb73dec66ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMGJiNzJiN2Y4Yzg0NWY1Zjk5YjJlOTgyMmNmZGI3M2RlYzY2ZWU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-18T12:36:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-18T12:36:18Z"}, "message": "Merge #9941\n\n9941: feat: include full path in the cyclic deps error r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "b4649dbac3a702b652c34751bd8423aa0ee67925", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4649dbac3a702b652c34751bd8423aa0ee67925"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/320bb72b7f8c845f5f99b2e9822cfdb73dec66ee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhHP7CCRBK7hj4Ov3rIwAAw7UIADIwQefu9wFJPxT6gc7Q6REk\nwVgallEwwpYfg9290LeSP4jp6RsRS/pMHFJdXgZfffA1r6xAD15iasV8edO2Vou/\nkqGnunIpnb6hlyNySFVXSUDPcI8yXbjcVCrt7rXXjI747jP60M9EHQH5Tec5GNwG\nG7sxB8sU5ir1xqj0Ez13138VyexcSROEeQ9J31dUmI5RbVsyP5n4S4XpitouliLx\nk0TAguOJdUlyREi22e396G9YYqNKi4V1HLIWkq0zXNmUR61hl2HqiVgrmmIYKbyb\nlir5D/kZAQKxA6RNXI0OiiP8wDJ72he4lHRAPUO+PZWs8WcWLgNbZGfvn9bBv+A=\n=cxWj\n-----END PGP SIGNATURE-----\n", "payload": "tree b4649dbac3a702b652c34751bd8423aa0ee67925\nparent d1ba9931368c657d4739f0f238c322ace4b3e6ec\nparent 5192ddfa2e1d762af6f925568170e6bae71fee33\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1629290178 +0000\ncommitter GitHub <noreply@github.com> 1629290178 +0000\n\nMerge #9941\n\n9941: feat: include full path in the cyclic deps error r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/320bb72b7f8c845f5f99b2e9822cfdb73dec66ee", "html_url": "https://github.com/rust-lang/rust/commit/320bb72b7f8c845f5f99b2e9822cfdb73dec66ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/320bb72b7f8c845f5f99b2e9822cfdb73dec66ee/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1ba9931368c657d4739f0f238c322ace4b3e6ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1ba9931368c657d4739f0f238c322ace4b3e6ec", "html_url": "https://github.com/rust-lang/rust/commit/d1ba9931368c657d4739f0f238c322ace4b3e6ec"}, {"sha": "5192ddfa2e1d762af6f925568170e6bae71fee33", "url": "https://api.github.com/repos/rust-lang/rust/commits/5192ddfa2e1d762af6f925568170e6bae71fee33", "html_url": "https://github.com/rust-lang/rust/commit/5192ddfa2e1d762af6f925568170e6bae71fee33"}], "stats": {"total": 57, "additions": 42, "deletions": 15}, "files": [{"sha": "671039e46bcdb42a838a9cc321f9c1ee9ec77ef4", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 42, "deletions": 15, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/320bb72b7f8c845f5f99b2e9822cfdb73dec66ee/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/320bb72b7f8c845f5f99b2e9822cfdb73dec66ee/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=320bb72b7f8c845f5f99b2e9822cfdb73dec66ee", "patch": "@@ -247,12 +247,17 @@ impl CrateGraph {\n         to: CrateId,\n     ) -> Result<(), CyclicDependenciesError> {\n         let _p = profile::span(\"add_dep\");\n-        if self.dfs_find(from, to, &mut FxHashSet::default()) {\n-            return Err(CyclicDependenciesError {\n-                from: (from, self[from].display_name.clone()),\n-                to: (to, self[to].display_name.clone()),\n-            });\n+\n+        // Check if adding a dep from `from` to `to` creates a cycle. To figure\n+        // that out, look for a  path in the *opposite* direction, from `to` to\n+        // `from`.\n+        if let Some(path) = self.find_path(&mut FxHashSet::default(), to, from) {\n+            let path = path.into_iter().map(|it| (it, self[it].display_name.clone())).collect();\n+            let err = CyclicDependenciesError { path };\n+            assert!(err.from().0 == from && err.to().0 == to);\n+            return Err(err);\n         }\n+\n         self.arena.get_mut(&from).unwrap().add_dep(name, to);\n         Ok(())\n     }\n@@ -361,22 +366,29 @@ impl CrateGraph {\n         start\n     }\n \n-    fn dfs_find(&self, target: CrateId, from: CrateId, visited: &mut FxHashSet<CrateId>) -> bool {\n+    fn find_path(\n+        &self,\n+        visited: &mut FxHashSet<CrateId>,\n+        from: CrateId,\n+        to: CrateId,\n+    ) -> Option<Vec<CrateId>> {\n         if !visited.insert(from) {\n-            return false;\n+            return None;\n         }\n \n-        if target == from {\n-            return true;\n+        if from == to {\n+            return Some(vec![to]);\n         }\n \n         for dep in &self[from].dependencies {\n             let crate_id = dep.crate_id;\n-            if self.dfs_find(target, crate_id, visited) {\n-                return true;\n+            if let Some(mut path) = self.find_path(visited, crate_id, to) {\n+                path.push(from);\n+                return Some(path);\n             }\n         }\n-        false\n+\n+        None\n     }\n \n     // Work around for https://github.com/rust-analyzer/rust-analyzer/issues/6038.\n@@ -481,8 +493,16 @@ impl std::error::Error for ParseEditionError {}\n \n #[derive(Debug)]\n pub struct CyclicDependenciesError {\n-    from: (CrateId, Option<CrateDisplayName>),\n-    to: (CrateId, Option<CrateDisplayName>),\n+    path: Vec<(CrateId, Option<CrateDisplayName>)>,\n+}\n+\n+impl CyclicDependenciesError {\n+    fn from(&self) -> &(CrateId, Option<CrateDisplayName>) {\n+        self.path.first().unwrap()\n+    }\n+    fn to(&self) -> &(CrateId, Option<CrateDisplayName>) {\n+        self.path.last().unwrap()\n+    }\n }\n \n impl fmt::Display for CyclicDependenciesError {\n@@ -491,7 +511,14 @@ impl fmt::Display for CyclicDependenciesError {\n             Some(it) => format!(\"{}({:?})\", it, id),\n             None => format!(\"{:?}\", id),\n         };\n-        write!(f, \"cyclic deps: {} -> {}\", render(&self.from), render(&self.to))\n+        let path = self.path.iter().rev().map(render).collect::<Vec<String>>().join(\" -> \");\n+        write!(\n+            f,\n+            \"cyclic deps: {} -> {}, alternative path: {}\",\n+            render(&self.from()),\n+            render(&self.to()),\n+            path\n+        )\n     }\n }\n "}]}