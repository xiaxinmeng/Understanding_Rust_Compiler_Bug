{"sha": "b2bcafe6fd525d52f84088309cc5a3c307397bf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyYmNhZmU2ZmQ1MjVkNTJmODQwODgzMDljYzVhM2MzMDczOTdiZjI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-18T02:16:03Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-18T02:16:26Z"}, "message": "stdlib: Add some more ivec functions, untested as of yet", "tree": {"sha": "6e134911a6963ee3c6f0bcc62332b46c5d397b31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e134911a6963ee3c6f0bcc62332b46c5d397b31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2bcafe6fd525d52f84088309cc5a3c307397bf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2bcafe6fd525d52f84088309cc5a3c307397bf2", "html_url": "https://github.com/rust-lang/rust/commit/b2bcafe6fd525d52f84088309cc5a3c307397bf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2bcafe6fd525d52f84088309cc5a3c307397bf2/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5894e400b6b524ba464a7969b7fbb1920418c1f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5894e400b6b524ba464a7969b7fbb1920418c1f9", "html_url": "https://github.com/rust-lang/rust/commit/5894e400b6b524ba464a7969b7fbb1920418c1f9"}], "stats": {"total": 69, "additions": 66, "deletions": 3}, "files": [{"sha": "7e50d3170a0cef65e296adac809c3b5da8815295", "filename": "src/lib/ivec.rs", "status": "modified", "additions": 66, "deletions": 3, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/b2bcafe6fd525d52f84088309cc5a3c307397bf2/src%2Flib%2Fivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2bcafe6fd525d52f84088309cc5a3c307397bf2/src%2Flib%2Fivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fivec.rs?ref=b2bcafe6fd525d52f84088309cc5a3c307397bf2", "patch": "@@ -10,14 +10,14 @@ native \"rust-intrinsic\" mod rusti {\n }\n \n native \"rust\" mod rustrt {\n-    fn ivec_reserve[T](&mutable T[] v, uint n);\n+    fn ivec_reserve[T](&mutable T[mutable?] v, uint n);\n     fn ivec_on_heap[T](&T[] v) -> bool;\n     fn ivec_to_ptr[T](&T[] v) -> *T;\n-    fn ivec_copy_from_buf[T](&mutable T[] v, *T ptr, uint count);\n+    fn ivec_copy_from_buf[T](&mutable T[mutable?] v, *T ptr, uint count);\n }\n \n /// Reserves space for `n` elements in the given vector.\n-fn reserve[T](&mutable T[] v, uint n) {\n+fn reserve[T](&mutable T[mutable?] v, uint n) {\n     rustrt::ivec_reserve(v, n);\n }\n \n@@ -43,6 +43,69 @@ fn init_fn[T](&init_op[T] op, uint n_elts) -> T[] {\n     ret v;\n }\n \n+// TODO: Remove me once we have slots.\n+fn init_fn_mut[T](&init_op[T] op, uint n_elts) -> T[mutable] {\n+    auto v = ~[mutable];\n+    reserve(v, n_elts);\n+    let uint i = 0u;\n+    while (i < n_elts) { v += ~[mutable op(i)]; i += 1u; }\n+    ret v;\n+}\n+\n+fn init_elt[T](&T t, uint n_elts) -> T[] {\n+    auto v = ~[];\n+    reserve(v, n_elts);\n+    let uint i = 0u;\n+    while (i < n_elts) { v += ~[t]; i += 1u; }\n+    ret v;\n+}\n+\n+// TODO: Remove me once we have slots.\n+fn init_elt_mut[T](&T t, uint n_elts) -> T[mutable] {\n+    auto v = ~[mutable];\n+    reserve(v, n_elts);\n+    let uint i = 0u;\n+    while (i < n_elts) { v += ~[mutable t]; i += 1u; }\n+    ret v;\n+}\n+\n+\n+// Accessors\n+\n+/// Returns the last element of `v`.\n+fn last[T](&T[mutable?] v) -> option::t[T] {\n+    if (len(v) == 0u) { ret none; }\n+    ret some(v.(len(v) - 1u));\n+}\n+\n+/// Returns a copy of the elements from [`start`..`end`) from `v`.\n+fn slice[T](&T[mutable?] v, uint start, uint end) -> T[] {\n+    assert (start <= end);\n+    assert (end <= len(v));\n+    auto result = ~[];\n+    reserve(result, end - start);\n+    auto i = start;\n+    while (i < end) { result += ~[v.(i)]; i += 1u; }\n+    ret result;\n+}\n+\n+// TODO: Remove me once we have slots.\n+fn slice_mut[T](&T[mutable?] v, uint start, uint end) -> T[mutable] {\n+    assert (start <= end);\n+    assert (end <= len(v));\n+    auto result = ~[mutable];\n+    reserve(result, end - start);\n+    auto i = start;\n+    while (i < end) { result += ~[mutable v.(i)]; i += 1u; }\n+    ret result;\n+}\n+\n+\n+// Mutators\n+\n+// TODO\n+\n+\n mod unsafe {\n     fn copy_from_buf[T](&mutable T[] v, *T ptr, uint count) {\n         ret rustrt::ivec_copy_from_buf(v, ptr, count);"}]}