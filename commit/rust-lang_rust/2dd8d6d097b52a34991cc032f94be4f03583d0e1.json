{"sha": "2dd8d6d097b52a34991cc032f94be4f03583d0e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZDhkNmQwOTdiNTJhMzQ5OTFjYzAzMmY5NGJlNGYwMzU4M2QwZTE=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-05T14:12:58Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-07T00:04:06Z"}, "message": "Add Clone trait bound to write_list", "tree": {"sha": "846615e733bdd06a766e340fd65485d8b0c31c11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/846615e733bdd06a766e340fd65485d8b0c31c11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dd8d6d097b52a34991cc032f94be4f03583d0e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dd8d6d097b52a34991cc032f94be4f03583d0e1", "html_url": "https://github.com/rust-lang/rust/commit/2dd8d6d097b52a34991cc032f94be4f03583d0e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dd8d6d097b52a34991cc032f94be4f03583d0e1/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfec7ad593cb1d277d723bcb7d6199f3564638ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfec7ad593cb1d277d723bcb7d6199f3564638ba", "html_url": "https://github.com/rust-lang/rust/commit/cfec7ad593cb1d277d723bcb7d6199f3564638ba"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "1326d3c41b13f7f6fc8bc1ce3f86ebcc22ead304", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd8d6d097b52a34991cc032f94be4f03583d0e1/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd8d6d097b52a34991cc032f94be4f03583d0e1/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=2dd8d6d097b52a34991cc032f94be4f03583d0e1", "patch": "@@ -1707,7 +1707,7 @@ impl Rewrite for ast::Arm {\n             ends_with_newline: false,\n             config: context.config,\n         };\n-        let pats_str = try_opt!(write_list(items, &fmt));\n+        let pats_str = try_opt!(write_list(&items, &fmt));\n \n         let guard_shape = if pats_str.contains('\\n') {\n             shape.with_max_width(context.config)"}, {"sha": "91bba5349249e11483d5e3ae3c5c942704d1adf0", "filename": "src/items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dd8d6d097b52a34991cc032f94be4f03583d0e1/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd8d6d097b52a34991cc032f94be4f03583d0e1/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=2dd8d6d097b52a34991cc032f94be4f03583d0e1", "patch": "@@ -478,7 +478,7 @@ impl<'a> FmtVisitor<'a> {\n             config: self.config,\n         };\n \n-        let list = try_opt!(write_list(items, &fmt));\n+        let list = try_opt!(write_list(&items.collect::<Vec<_>>(), &fmt));\n         result.push_str(&list);\n         result.push('\\n');\n         Some(result)\n@@ -2539,7 +2539,7 @@ fn rewrite_where_clause_rfc_style(\n         ends_with_newline: true,\n         config: context.config,\n     };\n-    let preds_str = try_opt!(write_list(items, &fmt));\n+    let preds_str = try_opt!(write_list(&items.collect::<Vec<_>>(), &fmt));\n \n     Some(format!(\n         \"{}where\\n{}{}\","}, {"sha": "de82f2cd6243e05989975e1f2a37e9c1f8442a12", "filename": "src/lists.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd8d6d097b52a34991cc032f94be4f03583d0e1/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd8d6d097b52a34991cc032f94be4f03583d0e1/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=2dd8d6d097b52a34991cc032f94be4f03583d0e1", "patch": "@@ -157,7 +157,7 @@ where\n // TODO: add unit tests\n pub fn write_list<I, T>(items: I, formatting: &ListFormatting) -> Option<String>\n where\n-    I: IntoIterator<Item = T>,\n+    I: IntoIterator<Item = T> + Clone,\n     T: AsRef<ListItem>,\n {\n     let tactic = formatting.tactic;"}]}