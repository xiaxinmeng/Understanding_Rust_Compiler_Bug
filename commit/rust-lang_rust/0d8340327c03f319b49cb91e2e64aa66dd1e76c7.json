{"sha": "0d8340327c03f319b49cb91e2e64aa66dd1e76c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkODM0MDMyN2MwM2YzMTliNDljYjkxZTJlNjRhYTY2ZGQxZTc2Yzc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-07-30T15:53:22Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-08-04T21:02:36Z"}, "message": "syntax: Don't assume `std` exists for tests\n\nThis commit removes the injection of `std::env::args()` from `--test` expanded\ncode, relying on the test runner itself to call this funciton. This is more\nhygienic because we can't assume that `std` exists at the top layer all the\ntime, and it meaks the injected test module entirely self contained.", "tree": {"sha": "308af0af76da6c6a020ee5e8d9e5dbb40152307a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/308af0af76da6c6a020ee5e8d9e5dbb40152307a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d8340327c03f319b49cb91e2e64aa66dd1e76c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d8340327c03f319b49cb91e2e64aa66dd1e76c7", "html_url": "https://github.com/rust-lang/rust/commit/0d8340327c03f319b49cb91e2e64aa66dd1e76c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d8340327c03f319b49cb91e2e64aa66dd1e76c7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cccf3cd256420d9f32c265e83036dea1d5f94d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cccf3cd256420d9f32c265e83036dea1d5f94d8", "html_url": "https://github.com/rust-lang/rust/commit/5cccf3cd256420d9f32c265e83036dea1d5f94d8"}], "stats": {"total": 56, "additions": 23, "deletions": 33}, "files": [{"sha": "7baa7558e52d57fb9fdf9ce0c3e69a0a38f607c0", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d8340327c03f319b49cb91e2e64aa66dd1e76c7/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8340327c03f319b49cb91e2e64aa66dd1e76c7/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=0d8340327c03f319b49cb91e2e64aa66dd1e76c7", "patch": "@@ -414,11 +414,3 @@ pub mod __rand {\n // the rustdoc documentation for primitive types. Using `include!`\n // because rustdoc only looks for these modules at the crate level.\n include!(\"primitive_docs.rs\");\n-\n-// The expansion of --test has a few references to `::std::$foo` so this module\n-// is necessary to get things to compile.\n-#[cfg(test)]\n-mod std {\n-    pub use option;\n-    pub use realstd::env;\n-}"}, {"sha": "be921d9aef08cf0f5a9ee8494cef70f9dda94f31", "filename": "src/libstd/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d8340327c03f319b49cb91e2e64aa66dd1e76c7/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8340327c03f319b49cb91e2e64aa66dd1e76c7/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=0d8340327c03f319b49cb91e2e64aa66dd1e76c7", "patch": "@@ -815,7 +815,7 @@ mod tests {\n     #[cfg(target_os=\"android\")]\n     #[test]\n     fn test_inherit_env() {\n-        use std::env;\n+        use env;\n \n         let mut result = env_cmd().output().unwrap();\n         let output = String::from_utf8(result.stdout).unwrap();"}, {"sha": "67ecd4d922980f1fb5e356893ff396a1ef527566", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d8340327c03f319b49cb91e2e64aa66dd1e76c7/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8340327c03f319b49cb91e2e64aa66dd1e76c7/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=0d8340327c03f319b49cb91e2e64aa66dd1e76c7", "patch": "@@ -166,6 +166,7 @@ impl Drop for Thread {\n           not(target_os = \"netbsd\"),\n           not(target_os = \"openbsd\")))]\n pub mod guard {\n+    #[cfg(stage0)]\n     use prelude::v1::*;\n \n     pub unsafe fn current() -> Option<usize> { None }"}, {"sha": "15df5d756be545454aaac52d0e6c6bcc7a12c055", "filename": "src/libstd/sys/windows/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d8340327c03f319b49cb91e2e64aa66dd1e76c7/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8340327c03f319b49cb91e2e64aa66dd1e76c7/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs?ref=0d8340327c03f319b49cb91e2e64aa66dd1e76c7", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n use prelude::v1::*;\n \n use alloc::boxed::FnBox;\n@@ -87,6 +86,7 @@ impl Thread {\n }\n \n pub mod guard {\n+    #[cfg(stage0)]\n     use prelude::v1::*;\n \n     pub unsafe fn current() -> Option<usize> { None }"}, {"sha": "0615033736e90c5136199dfd186f43bdd1d100b1", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d8340327c03f319b49cb91e2e64aa66dd1e76c7/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8340327c03f319b49cb91e2e64aa66dd1e76c7/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=0d8340327c03f319b49cb91e2e64aa66dd1e76c7", "patch": "@@ -329,6 +329,7 @@ mod imp {\n     // Due to rust-lang/rust#18804, make sure this is not generic!\n     #[cfg(target_os = \"linux\")]\n     unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern fn(*mut u8)) {\n+        use prelude::v1::*;\n         use mem;\n         use libc;\n         use sys_common::thread_local as os;"}, {"sha": "ea99291d6c2911239d849ba084ce4afc20c1c9a5", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0d8340327c03f319b49cb91e2e64aa66dd1e76c7/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8340327c03f319b49cb91e2e64aa66dd1e76c7/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=0d8340327c03f319b49cb91e2e64aa66dd1e76c7", "patch": "@@ -450,18 +450,11 @@ fn mk_main(cx: &mut TestCtxt) -> P<ast::Item> {\n     // test::test_main_static\n     let test_main_path = ecx.path(sp, vec![token::str_to_ident(\"test\"),\n                                            token::str_to_ident(\"test_main_static\")]);\n-    // ::std::env::args\n-    let os_args_path = ecx.path_global(sp, vec![token::str_to_ident(\"std\"),\n-                                                token::str_to_ident(\"env\"),\n-                                                token::str_to_ident(\"args\")]);\n-    // ::std::env::args()\n-    let os_args_path_expr = ecx.expr_path(os_args_path);\n-    let call_os_args = ecx.expr_call(sp, os_args_path_expr, vec![]);\n     // test::test_main_static(...)\n     let test_main_path_expr = ecx.expr_path(test_main_path);\n     let tests_ident_expr = ecx.expr_ident(sp, token::str_to_ident(\"TESTS\"));\n     let call_test_main = ecx.expr_call(sp, test_main_path_expr,\n-                                       vec![call_os_args, tests_ident_expr]);\n+                                       vec![tests_ident_expr]);\n     let call_test_main = ecx.stmt_expr(call_test_main);\n     // #![main]\n     let main_meta = ecx.meta_word(sp, token::intern_and_get_ident(\"main\"));\n@@ -634,12 +627,14 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> P<ast::Expr> {\n     let fail_expr = match test.should_panic {\n         ShouldPanic::No => ecx.expr_path(should_panic_path(\"No\")),\n         ShouldPanic::Yes(ref msg) => {\n-            let path = should_panic_path(\"Yes\");\n-            let arg = match *msg {\n-                Some(ref msg) => ecx.expr_some(span, ecx.expr_str(span, msg.clone())),\n-                None => ecx.expr_none(span),\n-            };\n-            ecx.expr_call(span, ecx.expr_path(path), vec![arg])\n+            match *msg {\n+                Some(ref msg) => {\n+                    let msg = ecx.expr_str(span, msg.clone());\n+                    let path = should_panic_path(\"YesWithMessage\");\n+                    ecx.expr_call(span, ecx.expr_path(path), vec![msg])\n+                }\n+                None => ecx.expr_path(should_panic_path(\"Yes\")),\n+            }\n         }\n     };\n "}, {"sha": "7777ea51f822ed606e1b1ed51e076e9d4fa7cab1", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0d8340327c03f319b49cb91e2e64aa66dd1e76c7/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8340327c03f319b49cb91e2e64aa66dd1e76c7/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=0d8340327c03f319b49cb91e2e64aa66dd1e76c7", "patch": "@@ -197,7 +197,8 @@ pub struct Bencher {\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum ShouldPanic {\n     No,\n-    Yes(Option<&'static str>)\n+    Yes,\n+    YesWithMessage(&'static str)\n }\n \n // The definition of a single test. A test runner will run a list of\n@@ -262,8 +263,8 @@ pub fn test_main(args: &[String], tests: Vec<TestDescAndFn> ) {\n // a Vec<TestDescAndFn> is used in order to effect ownership-transfer\n // semantics into parallel test runners, which in turn requires a Vec<>\n // rather than a &[].\n-pub fn test_main_static(args: env::Args, tests: &[TestDescAndFn]) {\n-    let args = args.collect::<Vec<_>>();\n+pub fn test_main_static(tests: &[TestDescAndFn]) {\n+    let args = env::args().collect::<Vec<_>>();\n     let owned_tests = tests.iter().map(|t| {\n         match t.testfn {\n             StaticTestFn(f) => TestDescAndFn { testfn: StaticTestFn(f), desc: t.desc.clone() },\n@@ -1027,8 +1028,8 @@ pub fn run_test(opts: &TestOpts,\n fn calc_result(desc: &TestDesc, task_result: Result<(), Box<Any+Send>>) -> TestResult {\n     match (&desc.should_panic, task_result) {\n         (&ShouldPanic::No, Ok(())) |\n-        (&ShouldPanic::Yes(None), Err(_)) => TrOk,\n-        (&ShouldPanic::Yes(Some(msg)), Err(ref err))\n+        (&ShouldPanic::Yes, Err(_)) => TrOk,\n+        (&ShouldPanic::YesWithMessage(msg), Err(ref err))\n             if err.downcast_ref::<String>()\n                 .map(|e| &**e)\n                 .or_else(|| err.downcast_ref::<&'static str>().map(|e| *e))\n@@ -1276,7 +1277,7 @@ mod tests {\n             desc: TestDesc {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: false,\n-                should_panic: ShouldPanic::Yes(None)\n+                should_panic: ShouldPanic::Yes,\n             },\n             testfn: DynTestFn(Box::new(move|| f())),\n         };\n@@ -1293,7 +1294,7 @@ mod tests {\n             desc: TestDesc {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: false,\n-                should_panic: ShouldPanic::Yes(Some(\"error message\"))\n+                should_panic: ShouldPanic::YesWithMessage(\"error message\"),\n             },\n             testfn: DynTestFn(Box::new(move|| f())),\n         };\n@@ -1310,7 +1311,7 @@ mod tests {\n             desc: TestDesc {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: false,\n-                should_panic: ShouldPanic::Yes(Some(\"foobar\"))\n+                should_panic: ShouldPanic::YesWithMessage(\"foobar\"),\n             },\n             testfn: DynTestFn(Box::new(move|| f())),\n         };\n@@ -1327,7 +1328,7 @@ mod tests {\n             desc: TestDesc {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: false,\n-                should_panic: ShouldPanic::Yes(None)\n+                should_panic: ShouldPanic::Yes,\n             },\n             testfn: DynTestFn(Box::new(move|| f())),\n         };"}]}