{"sha": "247570732205fd226981082ee5c96c0abf5fed21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NzU3MDczMjIwNWZkMjI2OTgxMDgyZWU1Yzk2YzBhYmY1ZmVkMjE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-03-01T13:19:00Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-25T18:07:19Z"}, "message": "Add a \"link-guard\" to avoid accidentally linking to a wrong dylib at runtime.\n\nWe want to prevent compiling something against one version\nof a dynamic library and then, at runtime accidentally\nusing a different version of the dynamic library. With the\nold symbol-naming scheme this could not happen because every\nsymbol had the SVH in it and you'd get an error by the\ndynamic linker when using the wrong version of a dylib. With\nthe new naming scheme this isn't the case any more, so this\npatch adds the \"link-guard\" to prevent this error case.\n\nThis is implemented as follows:\n\n- In every crate that we compile, we emit a function called\n  \"__rustc_link_guard_<crate-name>_<crate-svh>\"\n- The body of this function contains calls to the\n  \"__rustc_link_guard\" functions of all dependencies.\n- An executable contains a call to it's own\n  \"__rustc_link_guard\" function.\n\nAs a consequence the \"__rustc_link_guard\" function call graph\nmirrors the crate graph and the dynamic linker will fail if a\nwrong dylib is loaded somewhere because its\n\"__rustc_link_guard\" function will contain a different SVH in\nits name.", "tree": {"sha": "bd688feb9cc055d362723d373fbc9a5bb40a0f1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd688feb9cc055d362723d373fbc9a5bb40a0f1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/247570732205fd226981082ee5c96c0abf5fed21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/247570732205fd226981082ee5c96c0abf5fed21", "html_url": "https://github.com/rust-lang/rust/commit/247570732205fd226981082ee5c96c0abf5fed21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/247570732205fd226981082ee5c96c0abf5fed21/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82b5f1d8690ec538557ce3f355add91e3809ba51", "url": "https://api.github.com/repos/rust-lang/rust/commits/82b5f1d8690ec538557ce3f355add91e3809ba51", "html_url": "https://github.com/rust-lang/rust/commit/82b5f1d8690ec538557ce3f355add91e3809ba51"}], "stats": {"total": 250, "additions": 241, "deletions": 9}, "files": [{"sha": "34af4826c3ea46318d7ed3839e0953a39a0380e7", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/247570732205fd226981082ee5c96c0abf5fed21/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247570732205fd226981082ee5c96c0abf5fed21/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=247570732205fd226981082ee5c96c0abf5fed21", "patch": "@@ -204,7 +204,11 @@ pub trait CrateStore<'tcx> : Any {\n     fn is_explicitly_linked(&self, cnum: ast::CrateNum) -> bool;\n     fn is_allocator(&self, cnum: ast::CrateNum) -> bool;\n     fn crate_attrs(&self, cnum: ast::CrateNum) -> Vec<ast::Attribute>;\n+    /// The name of the crate as it is referred to in source code of the current\n+    /// crate.\n     fn crate_name(&self, cnum: ast::CrateNum) -> InternedString;\n+    /// The name of the crate as it is stored in the crate's metadata.\n+    fn original_crate_name(&self, cnum: ast::CrateNum) -> InternedString;\n     fn crate_hash(&self, cnum: ast::CrateNum) -> Svh;\n     fn crate_disambiguator(&self, cnum: ast::CrateNum) -> InternedString;\n     fn crate_struct_field_attrs(&self, cnum: ast::CrateNum)\n@@ -385,6 +389,9 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     fn crate_attrs(&self, cnum: ast::CrateNum) -> Vec<ast::Attribute>\n         { unimplemented!() }\n     fn crate_name(&self, cnum: ast::CrateNum) -> InternedString { unimplemented!() }\n+    fn original_crate_name(&self, cnum: ast::CrateNum) -> InternedString {\n+        unimplemented!()\n+    }\n     fn crate_hash(&self, cnum: ast::CrateNum) -> Svh { unimplemented!() }\n     fn crate_disambiguator(&self, cnum: ast::CrateNum) -> InternedString { unimplemented!() }\n     fn crate_struct_field_attrs(&self, cnum: ast::CrateNum)"}, {"sha": "493994fd74a5d610c34a956bd683a28a76276fdd", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/247570732205fd226981082ee5c96c0abf5fed21/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247570732205fd226981082ee5c96c0abf5fed21/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=247570732205fd226981082ee5c96c0abf5fed21", "patch": "@@ -277,10 +277,10 @@ impl<'a> CrateReader<'a> {\n     }\n \n     fn verify_no_symbol_conflicts(&self,\n-                                  crate_name: &str,\n                                   span: Span,\n                                   metadata: &MetadataBlob) {\n         let disambiguator = decoder::get_crate_disambiguator(metadata.as_slice());\n+        let crate_name = decoder::get_crate_name(metadata.as_slice());\n \n         // Check for (potential) conflicts with the local crate\n         if self.local_crate_name == crate_name &&\n@@ -318,7 +318,7 @@ impl<'a> CrateReader<'a> {\n                       -> (ast::CrateNum, Rc<cstore::crate_metadata>,\n                           cstore::CrateSource) {\n         self.verify_rustc_version(name, span, &lib.metadata);\n-        self.verify_no_symbol_conflicts(name, span, &lib.metadata);\n+        self.verify_no_symbol_conflicts(span, &lib.metadata);\n \n         // Claim this crate number and cache it\n         let cnum = self.next_crate_num;"}, {"sha": "fb4dbbba8da49d2e6ba9effc643ee7c930eaf58c", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/247570732205fd226981082ee5c96c0abf5fed21/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247570732205fd226981082ee5c96c0abf5fed21/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=247570732205fd226981082ee5c96c0abf5fed21", "patch": "@@ -339,6 +339,11 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         token::intern_and_get_ident(&self.get_crate_data(cnum).name[..])\n     }\n \n+    fn original_crate_name(&self, cnum: ast::CrateNum) -> token::InternedString\n+    {\n+        token::intern_and_get_ident(&self.get_crate_data(cnum).name())\n+    }\n+\n     fn crate_hash(&self, cnum: ast::CrateNum) -> Svh\n     {\n         let cdata = self.get_crate_data(cnum);"}, {"sha": "17c485c73497f8c31310e28977f5fb488f1797ca", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/247570732205fd226981082ee5c96c0abf5fed21/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247570732205fd226981082ee5c96c0abf5fed21/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=247570732205fd226981082ee5c96c0abf5fed21", "patch": "@@ -248,7 +248,7 @@ impl CStore {\n \n impl crate_metadata {\n     pub fn data<'a>(&'a self) -> &'a [u8] { self.data.as_slice() }\n-    pub fn name(&self) -> String { decoder::get_crate_name(self.data()) }\n+    pub fn name(&self) -> &str { decoder::get_crate_name(self.data()) }\n     pub fn hash(&self) -> Svh { decoder::get_crate_hash(self.data()) }\n     pub fn disambiguator(&self) -> &str {\n         decoder::get_crate_disambiguator(self.data())"}, {"sha": "00810ec71abbfa963a1e9113bf0ee9930629bb3b", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/247570732205fd226981082ee5c96c0abf5fed21/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247570732205fd226981082ee5c96c0abf5fed21/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=247570732205fd226981082ee5c96c0abf5fed21", "patch": "@@ -1288,10 +1288,10 @@ pub fn get_crate_hash(data: &[u8]) -> Svh {\n     Svh::new(hashdoc.as_str_slice())\n }\n \n-pub fn maybe_get_crate_name(data: &[u8]) -> Option<String> {\n+pub fn maybe_get_crate_name(data: &[u8]) -> Option<&str> {\n     let cratedoc = rbml::Doc::new(data);\n     reader::maybe_get_doc(cratedoc, tag_crate_crate_name).map(|doc| {\n-        doc.as_str_slice().to_string()\n+        doc.as_str_slice()\n     })\n }\n \n@@ -1308,7 +1308,7 @@ pub fn get_crate_triple(data: &[u8]) -> Option<String> {\n     triple_doc.map(|s| s.as_str().to_string())\n }\n \n-pub fn get_crate_name(data: &[u8]) -> String {\n+pub fn get_crate_name(data: &[u8]) -> &str {\n     maybe_get_crate_name(data).expect(\"no crate name in crate\")\n }\n "}, {"sha": "934e0e16a9688bb01dcd3eb4fe3265b2252f069d", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/247570732205fd226981082ee5c96c0abf5fed21/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247570732205fd226981082ee5c96c0abf5fed21/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=247570732205fd226981082ee5c96c0abf5fed21", "patch": "@@ -23,6 +23,7 @@ use session::config::CrateTypeDylib;\n use session::config;\n use syntax::ast;\n use trans::CrateTranslation;\n+use trans::link_guard;\n \n /// Linker abstraction used by back::link to build up the command to invoke a\n /// linker.\n@@ -359,6 +360,26 @@ impl<'a> Linker for MsvcLinker<'a> {\n             for symbol in symbols {\n                 writeln!(f, \"  {}\", symbol)?;\n             }\n+\n+            // Add link-guard symbols\n+            {\n+                // local crate\n+                let symbol = link_guard::link_guard_name(&trans.link.crate_name[..],\n+                                                         &trans.link.crate_hash);\n+                try!(writeln!(f, \"  {}\", symbol));\n+            }\n+            // statically linked dependencies\n+            for (i, format) in formats[&CrateTypeDylib].iter().enumerate() {\n+                if *format == Linkage::Static {\n+                    let cnum = (i + 1) as ast::CrateNum;\n+                    let crate_name = cstore.original_crate_name(cnum);\n+                    let svh = cstore.crate_hash(cnum);\n+\n+                    let symbol = link_guard::link_guard_name(&crate_name[..], &svh);\n+                    try!(writeln!(f, \"  {}\", symbol));\n+                }\n+            }\n+\n             Ok(())\n         })();\n         if let Err(e) = res {"}, {"sha": "6bbf323ef5e8be19ea83b9ba6bb7b173db571cfd", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/247570732205fd226981082ee5c96c0abf5fed21/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247570732205fd226981082ee5c96c0abf5fed21/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=247570732205fd226981082ee5c96c0abf5fed21", "patch": "@@ -79,6 +79,7 @@ use trans::expr;\n use trans::glue;\n use trans::inline;\n use trans::intrinsic;\n+use trans::link_guard;\n use trans::machine;\n use trans::machine::{llalign_of_min, llsize_of, llsize_of_real};\n use trans::meth;\n@@ -2382,6 +2383,7 @@ pub fn create_entry_wrapper(ccx: &CrateContext, sp: Span, main_llfn: ValueRef) {\n         unsafe {\n             llvm::LLVMPositionBuilderAtEnd(bld, llbb);\n \n+            link_guard::insert_reference_to_link_guard(ccx, llbb);\n             debuginfo::gdb::insert_reference_to_gdb_debug_scripts_section_global(ccx);\n \n             let (start_fn, args) = if use_start_lang_item {\n@@ -2758,6 +2760,8 @@ pub fn trans_crate<'tcx>(tcx: &TyCtxt<'tcx>,\n         collector::print_collection_results(&ccx);\n     }\n \n+    emit_link_guard_if_necessary(&shared_ccx);\n+\n     for ccx in shared_ccx.iter() {\n         if ccx.sess().opts.debuginfo != NoDebugInfo {\n             debuginfo::finalize(&ccx);\n@@ -2818,6 +2822,8 @@ pub fn trans_crate<'tcx>(tcx: &TyCtxt<'tcx>,\n     if sess.entry_fn.borrow().is_some() {\n         reachable_symbols.push(\"main\".to_string());\n     }\n+    reachable_symbols.push(link_guard::link_guard_name(&link_meta.crate_name,\n+                                                       &link_meta.crate_hash));\n \n     // For the purposes of LTO, we add to the reachable set all of the upstream\n     // reachable extern fns. These functions are all part of the public ABI of\n@@ -2861,6 +2867,24 @@ pub fn trans_crate<'tcx>(tcx: &TyCtxt<'tcx>,\n     }\n }\n \n+fn emit_link_guard_if_necessary(shared_ccx: &SharedCrateContext) {\n+    let link_meta = shared_ccx.link_meta();\n+    let link_guard_name = link_guard::link_guard_name(&link_meta.crate_name,\n+                                                      &link_meta.crate_hash);\n+    let link_guard_name = CString::new(link_guard_name).unwrap();\n+\n+    // Check if the link-guard has already been emitted in a codegen unit\n+    let link_guard_already_emitted = shared_ccx.iter().any(|ccx| {\n+        let link_guard = unsafe { llvm::LLVMGetNamedValue(ccx.llmod(),\n+                                                          link_guard_name.as_ptr()) };\n+        !link_guard.is_null()\n+    });\n+\n+    if !link_guard_already_emitted {\n+        link_guard::get_or_insert_link_guard(&shared_ccx.get_ccx(0));\n+    }\n+}\n+\n /// We visit all the items in the krate and translate them.  We do\n /// this in two walks. The first walk just finds module items. It then\n /// walks the full contents of those module items and translates all"}, {"sha": "94606cafce5de25b2c319c6f757b7ebbf1de7d0c", "filename": "src/librustc_trans/trans/link_guard.rs", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/247570732205fd226981082ee5c96c0abf5fed21/src%2Flibrustc_trans%2Ftrans%2Flink_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247570732205fd226981082ee5c96c0abf5fed21/src%2Flibrustc_trans%2Ftrans%2Flink_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Flink_guard.rs?ref=247570732205fd226981082ee5c96c0abf5fed21", "patch": "@@ -0,0 +1,116 @@\n+// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use back::svh::Svh;\n+use libc::c_uint;\n+use llvm;\n+use std::ffi::CString;\n+use std::ptr;\n+use trans::attributes;\n+use trans::builder;\n+use trans::CrateContext;\n+use trans::declare;\n+use trans::type_::Type;\n+\n+const GUARD_PREFIX: &'static str = \"__rustc_link_guard_\";\n+\n+pub fn link_guard_name(crate_name: &str, crate_svh: &Svh) -> String {\n+\n+    let mut guard_name = String::new();\n+\n+    guard_name.push_str(GUARD_PREFIX);\n+    guard_name.push_str(crate_name);\n+    guard_name.push_str(\"_\");\n+    guard_name.push_str(crate_svh.as_str());\n+\n+    guard_name\n+}\n+\n+pub fn get_or_insert_link_guard<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>)\n+                                          -> llvm::ValueRef {\n+\n+    let guard_name = link_guard_name(&ccx.tcx().crate_name[..],\n+                                     &ccx.link_meta().crate_hash);\n+\n+    let guard_function = unsafe {\n+        let guard_name_c_string = CString::new(&guard_name[..]).unwrap();\n+        llvm::LLVMGetNamedValue(ccx.llmod(), guard_name_c_string.as_ptr())\n+    };\n+\n+    if guard_function != ptr::null_mut() {\n+        return guard_function;\n+    }\n+\n+    let llfty = Type::func(&[], &Type::void(ccx));\n+    let guard_function = declare::define_cfn(ccx,\n+                                             &guard_name[..],\n+                                             llfty,\n+                                             ccx.tcx().mk_nil()).unwrap_or_else(|| {\n+        ccx.sess().bug(\"Link guard already defined.\");\n+    });\n+\n+    attributes::emit_uwtable(guard_function, true);\n+    attributes::unwind(guard_function, false);\n+\n+    let bld = ccx.raw_builder();\n+    unsafe {\n+        let llbb = llvm::LLVMAppendBasicBlockInContext(ccx.llcx(),\n+                                                       guard_function,\n+                                                       \"link_guard_top\\0\".as_ptr() as *const _);\n+        llvm::LLVMPositionBuilderAtEnd(bld, llbb);\n+\n+        for crate_num in ccx.sess().cstore.crates() {\n+            if !ccx.sess().cstore.is_explicitly_linked(crate_num) {\n+                continue;\n+            }\n+\n+            let crate_name = ccx.sess().cstore.original_crate_name(crate_num);\n+            let svh = ccx.sess().cstore.crate_hash(crate_num);\n+\n+            let dependency_guard_name = link_guard_name(&crate_name[..], &svh);\n+\n+            let decl = declare::declare_cfn(ccx,\n+                                            &dependency_guard_name[..],\n+                                            llfty,\n+                                            ccx.tcx().mk_nil());\n+            attributes::unwind(decl, false);\n+\n+            llvm::LLVMPositionBuilderAtEnd(bld, llbb);\n+\n+            let args: &[llvm::ValueRef] = &[];\n+            llvm::LLVMRustBuildCall(bld,\n+                                    decl,\n+                                    args.as_ptr(),\n+                                    args.len() as c_uint,\n+                                    0 as *mut _,\n+                                    builder::noname());\n+        }\n+\n+        llvm::LLVMBuildRetVoid(bld);\n+    }\n+\n+    guard_function\n+}\n+\n+pub fn insert_reference_to_link_guard<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n+                                                llbb: llvm::BasicBlockRef) {\n+    let guard_function = get_or_insert_link_guard(ccx);\n+\n+    unsafe {\n+        llvm::LLVMPositionBuilderAtEnd(ccx.raw_builder(), llbb);\n+        let args: &[llvm::ValueRef] = &[];\n+        llvm::LLVMRustBuildCall(ccx.raw_builder(),\n+                                guard_function,\n+                                args.as_ptr(),\n+                                args.len() as c_uint,\n+                                0 as *mut _,\n+                                builder::noname());\n+    }\n+}"}, {"sha": "2e71128a1e78bd8f9e646b4d5fdfab7f837f6128", "filename": "src/librustc_trans/trans/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/247570732205fd226981082ee5c96c0abf5fed21/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247570732205fd226981082ee5c96c0abf5fed21/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmod.rs?ref=247570732205fd226981082ee5c96c0abf5fed21", "patch": "@@ -53,6 +53,7 @@ mod expr;\n mod glue;\n mod inline;\n mod intrinsic;\n+pub mod link_guard;\n mod machine;\n mod _match;\n mod meth;"}, {"sha": "38970652cb580f31acfececd009cb43416dfbe70", "filename": "src/test/run-make/link-guard/Makefile", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/247570732205fd226981082ee5c96c0abf5fed21/src%2Ftest%2Frun-make%2Flink-guard%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/247570732205fd226981082ee5c96c0abf5fed21/src%2Ftest%2Frun-make%2Flink-guard%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flink-guard%2FMakefile?ref=247570732205fd226981082ee5c96c0abf5fed21", "patch": "@@ -0,0 +1,13 @@\n+-include ../tools.mk\n+\n+all:\n+\t-mkdir -p $(TMPDIR)/good\n+\t-mkdir -p $(TMPDIR)/bad\n+\t$(BARE_RUSTC) ./good/lib.rs -C prefer-dynamic --out-dir=\"$(TMPDIR)/good\"\n+\t$(BARE_RUSTC) ./bad/lib.rs -C prefer-dynamic --out-dir=\"$(TMPDIR)/bad\"\n+\t$(BARE_RUSTC) -L \"$(TMPDIR)/good\" -C prefer-dynamic -Crpath ./main.rs --out-dir=\"$(TMPDIR)\"\n+\t# This should succeed because the correct library is in LD_LIBRARY_PATH\n+\t$(LD_LIB_PATH_ENVVAR)=\"$(TMPDIR)/good:$($(LD_LIB_PATH_ENVVAR))\" $(TMPDIR)/main\n+\t# This should fail because the wrong library is in LD_LIBRARY_PATH\n+\tOUTPUT=`$(LD_LIB_PATH_ENVVAR)=\"$(TMPDIR)/bad:$($(LD_LIB_PATH_ENVVAR))\" $(TMPDIR)/main || exit 0`\n+\tif [\"$(OUTPUT)\" == \"bad\"]; then exit 1; fi"}, {"sha": "c13c0d5e92f919fc9b71185481ed94be9fa3ec64", "filename": "src/test/run-make/link-guard/bad/lib.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/247570732205fd226981082ee5c96c0abf5fed21/src%2Ftest%2Frun-make%2Flink-guard%2Fbad%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247570732205fd226981082ee5c96c0abf5fed21/src%2Ftest%2Frun-make%2Flink-guard%2Fbad%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flink-guard%2Fbad%2Flib.rs?ref=247570732205fd226981082ee5c96c0abf5fed21", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name=\"thelibrary\"]\n+#![crate_type=\"dylib\"]\n+\n+pub fn some_library_function() {\n+    println!(\"bad\");\n+}"}, {"sha": "c13c0d5e92f919fc9b71185481ed94be9fa3ec64", "filename": "src/test/run-make/link-guard/good/lib.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/247570732205fd226981082ee5c96c0abf5fed21/src%2Ftest%2Frun-make%2Flink-guard%2Fgood%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247570732205fd226981082ee5c96c0abf5fed21/src%2Ftest%2Frun-make%2Flink-guard%2Fgood%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flink-guard%2Fgood%2Flib.rs?ref=247570732205fd226981082ee5c96c0abf5fed21", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name=\"thelibrary\"]\n+#![crate_type=\"dylib\"]\n+\n+pub fn some_library_function() {\n+    println!(\"bad\");\n+}"}, {"sha": "c422316d9183dc1c764b362093a98408942ac20b", "filename": "src/test/run-make/link-guard/main.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/247570732205fd226981082ee5c96c0abf5fed21/src%2Ftest%2Frun-make%2Flink-guard%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247570732205fd226981082ee5c96c0abf5fed21/src%2Ftest%2Frun-make%2Flink-guard%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flink-guard%2Fmain.rs?ref=247570732205fd226981082ee5c96c0abf5fed21", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate thelibrary;\n+\n+fn main() {\n+    thelibrary::some_library_function();\n+}"}, {"sha": "485ecbb4b5a59a60b0cad78692d977374face91d", "filename": "src/test/run-make/relocation-model/Makefile", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/247570732205fd226981082ee5c96c0abf5fed21/src%2Ftest%2Frun-make%2Frelocation-model%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/247570732205fd226981082ee5c96c0abf5fed21/src%2Ftest%2Frun-make%2Frelocation-model%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frelocation-model%2FMakefile?ref=247570732205fd226981082ee5c96c0abf5fed21", "patch": "@@ -7,8 +7,7 @@ all: others\n \t$(RUSTC) -C relocation-model=default foo.rs\n \t$(call RUN,foo)\n \n-\t$(RUSTC) -C relocation-model=default --crate-type=dylib foo.rs\n-\t$(RUSTC) -C relocation-model=dynamic-no-pic --crate-type=dylib foo.rs\n+\t$(RUSTC) -C relocation-model=dynamic-no-pic --crate-type=dylib foo.rs --emit=link,obj\n \n ifdef IS_MSVC\n # FIXME(#28026)\n@@ -17,5 +16,4 @@ else\n others:\n \t$(RUSTC) -C relocation-model=static foo.rs\n \t$(call RUN,foo)\n-\t$(RUSTC) -C relocation-model=static --crate-type=dylib foo.rs\n endif"}]}