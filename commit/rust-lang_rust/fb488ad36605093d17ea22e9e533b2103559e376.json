{"sha": "fb488ad36605093d17ea22e9e533b2103559e376", "node_id": "C_kwDOAAsO6NoAKGZiNDg4YWQzNjYwNTA5M2QxN2VhMjJlOWU1MzNiMjEwMzU1OWUzNzY", "commit": {"author": {"name": "Ellis Hoag", "email": "ellis.sparky.hoag@gmail.com", "date": "2022-08-30T03:22:03Z"}, "committer": {"name": "Ellis Hoag", "email": "ellis.sparky.hoag@gmail.com", "date": "2022-09-24T17:24:48Z"}, "message": "remove IntoDiagnosticArg impl for Option", "tree": {"sha": "f5051cdafceac52d5c1b47cb3195f438b7ffe6da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5051cdafceac52d5c1b47cb3195f438b7ffe6da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb488ad36605093d17ea22e9e533b2103559e376", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb488ad36605093d17ea22e9e533b2103559e376", "html_url": "https://github.com/rust-lang/rust/commit/fb488ad36605093d17ea22e9e533b2103559e376", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb488ad36605093d17ea22e9e533b2103559e376/comments", "author": {"login": "ellishg", "id": 8961915, "node_id": "MDQ6VXNlcjg5NjE5MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8961915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ellishg", "html_url": "https://github.com/ellishg", "followers_url": "https://api.github.com/users/ellishg/followers", "following_url": "https://api.github.com/users/ellishg/following{/other_user}", "gists_url": "https://api.github.com/users/ellishg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ellishg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ellishg/subscriptions", "organizations_url": "https://api.github.com/users/ellishg/orgs", "repos_url": "https://api.github.com/users/ellishg/repos", "events_url": "https://api.github.com/users/ellishg/events{/privacy}", "received_events_url": "https://api.github.com/users/ellishg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ellishg", "id": 8961915, "node_id": "MDQ6VXNlcjg5NjE5MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8961915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ellishg", "html_url": "https://github.com/ellishg", "followers_url": "https://api.github.com/users/ellishg/followers", "following_url": "https://api.github.com/users/ellishg/following{/other_user}", "gists_url": "https://api.github.com/users/ellishg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ellishg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ellishg/subscriptions", "organizations_url": "https://api.github.com/users/ellishg/orgs", "repos_url": "https://api.github.com/users/ellishg/repos", "events_url": "https://api.github.com/users/ellishg/events{/privacy}", "received_events_url": "https://api.github.com/users/ellishg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ce482adda7f5b18ff6b107351565e31056fd8f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce482adda7f5b18ff6b107351565e31056fd8f3", "html_url": "https://github.com/rust-lang/rust/commit/1ce482adda7f5b18ff6b107351565e31056fd8f3"}], "stats": {"total": 13, "additions": 2, "deletions": 11}, "files": [{"sha": "77fbb2c500e81291f0ac49a564d7704fe1ca3a98", "filename": "compiler/rustc_codegen_gcc/src/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb488ad36605093d17ea22e9e533b2103559e376/compiler%2Frustc_codegen_gcc%2Fsrc%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb488ad36605093d17ea22e9e533b2103559e376/compiler%2Frustc_codegen_gcc%2Fsrc%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Farchive.rs?ref=fb488ad36605093d17ea22e9e533b2103559e376", "patch": "@@ -183,7 +183,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n             std::process::Command::new(\"ranlib\").arg(output).status().expect(\"Couldn't run ranlib\");\n \n         if !status.success() {\n-            self.config.sess.emit_fatal(RanlibFailure { exit_code: status.code() });\n+            self.config.sess.emit_fatal(RanlibFailure { exit_code: format!(\"{:?}\", status.code()) });\n         }\n \n         any_members"}, {"sha": "01de75976a3234ec00bc53bfa501af05bd51f7a2", "filename": "compiler/rustc_codegen_gcc/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb488ad36605093d17ea22e9e533b2103559e376/compiler%2Frustc_codegen_gcc%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb488ad36605093d17ea22e9e533b2103559e376/compiler%2Frustc_codegen_gcc%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Ferrors.rs?ref=fb488ad36605093d17ea22e9e533b2103559e376", "patch": "@@ -4,7 +4,7 @@ use rustc_span::Span;\n #[derive(SessionDiagnostic)]\n #[diag(codegen_gcc::ranlib_failure)]\n pub(crate) struct RanlibFailure {\n-    pub exit_code: Option<i32>\n+    pub exit_code: String,\n }\n \n #[derive(SessionDiagnostic)]"}, {"sha": "1c440a0a07efcac6a1b40f1adc11cb604fdf99c8", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fb488ad36605093d17ea22e9e533b2103559e376/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb488ad36605093d17ea22e9e533b2103559e376/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=fb488ad36605093d17ea22e9e533b2103559e376", "patch": "@@ -114,15 +114,6 @@ impl IntoDiagnosticArg for char {\n     }\n }\n \n-impl<T: IntoDiagnosticArg> IntoDiagnosticArg for Option<T> {\n-    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        match self {\n-            Some(t) => t.into_diagnostic_arg(),\n-            None => DiagnosticArgValue::Str(Cow::Borrowed(\"None\")),\n-        }\n-    }\n-}\n-\n impl IntoDiagnosticArg for Symbol {\n     fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n         self.to_ident_string().into_diagnostic_arg()"}]}