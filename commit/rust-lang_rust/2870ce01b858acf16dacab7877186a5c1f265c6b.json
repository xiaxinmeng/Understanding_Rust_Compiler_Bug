{"sha": "2870ce01b858acf16dacab7877186a5c1f265c6b", "node_id": "C_kwDOAAsO6NoAKDI4NzBjZTAxYjg1OGFjZjE2ZGFjYWI3ODc3MTg2YTVjMWYyNjVjNmI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-09-11T12:42:43Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-27T18:56:32Z"}, "message": "Impl HashStable/Encodable/Decodable for ObligationCause.", "tree": {"sha": "c52321f92fd23952a2a67b3b603580037d6a6678", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c52321f92fd23952a2a67b3b603580037d6a6678"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2870ce01b858acf16dacab7877186a5c1f265c6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2870ce01b858acf16dacab7877186a5c1f265c6b", "html_url": "https://github.com/rust-lang/rust/commit/2870ce01b858acf16dacab7877186a5c1f265c6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2870ce01b858acf16dacab7877186a5c1f265c6b/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caefec955f1226652b734a4a2cc46a8e9d405c24", "url": "https://api.github.com/repos/rust-lang/rust/commits/caefec955f1226652b734a4a2cc46a8e9d405c24", "html_url": "https://github.com/rust-lang/rust/commit/caefec955f1226652b734a4a2cc46a8e9d405c24"}], "stats": {"total": 68, "additions": 53, "deletions": 15}, "files": [{"sha": "b688922a31130681a65d537d852638d0b82c4699", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2870ce01b858acf16dacab7877186a5c1f265c6b/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2870ce01b858acf16dacab7877186a5c1f265c6b/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=2870ce01b858acf16dacab7877186a5c1f265c6b", "patch": "@@ -2106,8 +2106,8 @@ pub enum LocalSource {\n }\n \n /// Hints at the original code for a `match _ { .. }`.\n-#[derive(Copy, Clone, PartialEq, Eq, Encodable, Hash, Debug)]\n-#[derive(HashStable_Generic)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(HashStable_Generic, Encodable, Decodable)]\n pub enum MatchSource {\n     /// A `match _ { .. }`.\n     Normal,"}, {"sha": "cf3dce48064923a0b582c25ca028827c673eecdf", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2870ce01b858acf16dacab7877186a5c1f265c6b/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2870ce01b858acf16dacab7877186a5c1f265c6b/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=2870ce01b858acf16dacab7877186a5c1f265c6b", "patch": "@@ -37,7 +37,7 @@ pub use self::chalk::{ChalkEnvironmentAndGoal, RustInterner as ChalkRustInterner\n \n /// Depending on the stage of compilation, we want projection to be\n /// more or less conservative.\n-#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, HashStable)]\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, HashStable, Encodable, Decodable)]\n pub enum Reveal {\n     /// At type-checking time, we refuse to project any associated\n     /// type that is marked `default`. Non-`default` (\"final\") types\n@@ -90,7 +90,8 @@ pub enum Reveal {\n ///\n /// We do not want to intern this as there are a lot of obligation causes which\n /// only live for a short period of time.\n-#[derive(Clone, Debug, PartialEq, Eq, Lift)]\n+#[derive(Clone, Debug, PartialEq, Eq, Lift, HashStable, TyEncodable, TyDecodable)]\n+#[derive(TypeVisitable, TypeFoldable)]\n pub struct ObligationCause<'tcx> {\n     pub span: Span,\n \n@@ -197,14 +198,16 @@ impl<'tcx> ObligationCause<'tcx> {\n     }\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq, Hash, Lift)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Lift, HashStable, TyEncodable, TyDecodable)]\n+#[derive(TypeVisitable, TypeFoldable)]\n pub struct UnifyReceiverContext<'tcx> {\n     pub assoc_item: ty::AssocItem,\n     pub param_env: ty::ParamEnv<'tcx>,\n     pub substs: SubstsRef<'tcx>,\n }\n \n-#[derive(Clone, PartialEq, Eq, Hash, Lift, Default)]\n+#[derive(Clone, PartialEq, Eq, Hash, Lift, Default, HashStable)]\n+#[derive(TypeVisitable, TypeFoldable, TyEncodable, TyDecodable)]\n pub struct InternedObligationCauseCode<'tcx> {\n     /// `None` for `ObligationCauseCode::MiscObligation` (a common case, occurs ~60% of\n     /// the time). `Some` otherwise.\n@@ -239,7 +242,8 @@ impl<'tcx> std::ops::Deref for InternedObligationCauseCode<'tcx> {\n     }\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq, Hash, Lift)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Lift, HashStable, TyEncodable, TyDecodable)]\n+#[derive(TypeVisitable, TypeFoldable)]\n pub enum ObligationCauseCode<'tcx> {\n     /// Not well classified or should be obvious from the span.\n     MiscObligation,\n@@ -447,7 +451,8 @@ pub enum ObligationCauseCode<'tcx> {\n /// This information is used to obtain an `hir::Ty`, which\n /// we can walk in order to obtain precise spans for any\n /// 'nested' types (e.g. `Foo` in `Option<Foo>`).\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, Encodable, Decodable)]\n+#[derive(TypeVisitable, TypeFoldable)]\n pub enum WellFormedLoc {\n     /// Use the type of the provided definition.\n     Ty(LocalDefId),\n@@ -464,7 +469,8 @@ pub enum WellFormedLoc {\n     },\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq, Hash, Lift)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Lift, HashStable, TyEncodable, TyDecodable)]\n+#[derive(TypeVisitable, TypeFoldable)]\n pub struct ImplDerivedObligationCause<'tcx> {\n     pub derived: DerivedObligationCause<'tcx>,\n     pub impl_def_id: DefId,\n@@ -518,7 +524,8 @@ impl<'tcx> ty::Lift<'tcx> for StatementAsExpression {\n     }\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq, Hash, Lift)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Lift, HashStable, TyEncodable, TyDecodable)]\n+#[derive(TypeVisitable, TypeFoldable)]\n pub struct MatchExpressionArmCause<'tcx> {\n     pub arm_block_id: Option<hir::HirId>,\n     pub arm_ty: Ty<'tcx>,\n@@ -534,7 +541,7 @@ pub struct MatchExpressionArmCause<'tcx> {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n-#[derive(Lift, TypeFoldable, TypeVisitable)]\n+#[derive(Lift, TypeFoldable, TypeVisitable, HashStable, TyEncodable, TyDecodable)]\n pub struct IfExpressionCause<'tcx> {\n     pub then_id: hir::HirId,\n     pub else_id: hir::HirId,\n@@ -544,7 +551,8 @@ pub struct IfExpressionCause<'tcx> {\n     pub opt_suggest_box_span: Option<Span>,\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq, Hash, Lift)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Lift, HashStable, TyEncodable, TyDecodable)]\n+#[derive(TypeVisitable, TypeFoldable)]\n pub struct DerivedObligationCause<'tcx> {\n     /// The trait predicate of the parent obligation that led to the\n     /// current obligation. Note that only trait obligations lead to"}, {"sha": "099a784511827b2ffe69250ccf2155b7200f4765", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2870ce01b858acf16dacab7877186a5c1f265c6b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2870ce01b858acf16dacab7877186a5c1f265c6b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=2870ce01b858acf16dacab7877186a5c1f265c6b", "patch": "@@ -188,7 +188,7 @@ impl<'tcx> AdtDef<'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, TyEncodable, TyDecodable)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, HashStable, TyEncodable, TyDecodable)]\n pub enum AdtKind {\n     Struct,\n     Union,"}, {"sha": "b9a1e23879cca7f9b407633698f06c8717f74401", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2870ce01b858acf16dacab7877186a5c1f265c6b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2870ce01b858acf16dacab7877186a5c1f265c6b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=2870ce01b858acf16dacab7877186a5c1f265c6b", "patch": "@@ -157,6 +157,14 @@ impl<'tcx, E: TyEncoder<I = TyCtxt<'tcx>>> Encodable<E> for AllocId {\n     }\n }\n \n+impl<'tcx, E: TyEncoder<I = TyCtxt<'tcx>>> Encodable<E> for ty::ParamEnv<'tcx> {\n+    fn encode(&self, e: &mut E) {\n+        self.caller_bounds().encode(e);\n+        self.reveal().encode(e);\n+        self.constness().encode(e);\n+    }\n+}\n+\n #[inline]\n fn decode_arena_allocable<\n     'tcx,\n@@ -280,8 +288,17 @@ impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> Decodable<D> for ty::SymbolName<'tcx>\n     }\n }\n \n+impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> Decodable<D> for ty::ParamEnv<'tcx> {\n+    fn decode(d: &mut D) -> Self {\n+        let caller_bounds = Decodable::decode(d);\n+        let reveal = Decodable::decode(d);\n+        let constness = Decodable::decode(d);\n+        ty::ParamEnv::new(caller_bounds, reveal, constness)\n+    }\n+}\n+\n macro_rules! impl_decodable_via_ref {\n-    ($($t:ty),+) => {\n+    ($($t:ty,)+) => {\n         $(impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> Decodable<D> for $t {\n             fn decode(decoder: &mut D) -> Self {\n                 RefDecodable::decode(decoder)\n@@ -373,6 +390,15 @@ impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> RefDecodable<'tcx, D> for ty::List<ty\n     }\n }\n \n+impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> RefDecodable<'tcx, D> for ty::List<ty::Predicate<'tcx>> {\n+    fn decode(decoder: &mut D) -> &'tcx Self {\n+        let len = decoder.read_usize();\n+        let predicates: Vec<_> =\n+            (0..len).map::<ty::Predicate<'tcx>, _>(|_| Decodable::decode(decoder)).collect();\n+        decoder.interner().intern_predicates(&predicates)\n+    }\n+}\n+\n impl_decodable_via_ref! {\n     &'tcx ty::TypeckResults<'tcx>,\n     &'tcx ty::List<Ty<'tcx>>,\n@@ -382,7 +408,8 @@ impl_decodable_via_ref! {\n     &'tcx mir::UnsafetyCheckResult,\n     &'tcx mir::BorrowCheckResult<'tcx>,\n     &'tcx mir::coverage::CodeRegion,\n-    &'tcx ty::List<ty::BoundVariableKind>\n+    &'tcx ty::List<ty::BoundVariableKind>,\n+    &'tcx ty::List<ty::Predicate<'tcx>>,\n }\n \n #[macro_export]\n@@ -519,6 +546,8 @@ macro_rules! impl_binder_encode_decode {\n impl_binder_encode_decode! {\n     &'tcx ty::List<Ty<'tcx>>,\n     ty::FnSig<'tcx>,\n+    ty::Predicate<'tcx>,\n+    ty::TraitPredicate<'tcx>,\n     ty::ExistentialPredicate<'tcx>,\n     ty::TraitRef<'tcx>,\n     Vec<ty::GeneratorInteriorTypeCause<'tcx>>,"}, {"sha": "16915443ba818ae22575ea196eda475ca130b424", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2870ce01b858acf16dacab7877186a5c1f265c6b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2870ce01b858acf16dacab7877186a5c1f265c6b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=2870ce01b858acf16dacab7877186a5c1f265c6b", "patch": "@@ -201,6 +201,7 @@ TrivialTypeTraversalAndLiftImpls! {\n     bool,\n     usize,\n     ::rustc_target::abi::VariantIdx,\n+    u16,\n     u32,\n     u64,\n     String,"}]}