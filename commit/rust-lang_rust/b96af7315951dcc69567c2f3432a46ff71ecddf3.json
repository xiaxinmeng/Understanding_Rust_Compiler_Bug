{"sha": "b96af7315951dcc69567c2f3432a46ff71ecddf3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5NmFmNzMxNTk1MWRjYzY5NTY3YzJmMzQzMmE0NmZmNzFlY2RkZjM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-09-20T01:50:24Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-26T23:20:24Z"}, "message": "turn ast::ident into a struct\n\nThis will help with the auto_serialize2 migration. We have to change\nident from a type alias to uint into a unique type. We need to use\na struct instead of a \"enum ident = token::str_num\" because structs\nsupport constants, but newtypes do not.", "tree": {"sha": "0f334a23fe484cb40416ba801dda37b6fe80b239", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f334a23fe484cb40416ba801dda37b6fe80b239"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b96af7315951dcc69567c2f3432a46ff71ecddf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b96af7315951dcc69567c2f3432a46ff71ecddf3", "html_url": "https://github.com/rust-lang/rust/commit/b96af7315951dcc69567c2f3432a46ff71ecddf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b96af7315951dcc69567c2f3432a46ff71ecddf3/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0b9986c8f11c85c74ee0ba64dccf4495027a645", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0b9986c8f11c85c74ee0ba64dccf4495027a645", "html_url": "https://github.com/rust-lang/rust/commit/c0b9986c8f11c85c74ee0ba64dccf4495027a645"}], "stats": {"total": 278, "additions": 154, "deletions": 124}, "files": [{"sha": "9f1cc419d1538318a93eaf43ff4d53258d242f76", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=b96af7315951dcc69567c2f3432a46ff71ecddf3", "patch": "@@ -243,7 +243,7 @@ fn check_variants_T<T: Copy>(\n   filename: &Path,\n   thing_label: ~str,\n   things: ~[T],\n-  stringifier: fn@(@T, syntax::parse::token::ident_interner) -> ~str,\n+  stringifier: fn@(@T, @syntax::parse::token::ident_interner) -> ~str,\n   replacer: fn@(ast::crate, uint, T, test_mode) -> ast::crate,\n   cx: context\n   ) {"}, {"sha": "24dc3660fafc3136e71e0c8bfe6e180e74840cc5", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b96af7315951dcc69567c2f3432a46ff71ecddf3", "patch": "@@ -38,6 +38,10 @@ macro_rules! interner_key (\n         (-3 as uint, 0u)))\n )\n \n+// FIXME(#3534): Replace with the struct-based newtype when it's been\n+// implemented.\n+struct ident { repr: uint }\n+\n fn serialize_ident<S: Serializer>(s: S, i: ident) {\n     let intr = match unsafe{\n         task::local_data::local_data_get(interner_key!())\n@@ -59,7 +63,16 @@ fn deserialize_ident<D: Deserializer>(d: D) -> ident  {\n     (*intr).intern(@d.read_str())\n }\n \n-type ident = token::str_num;\n+impl ident: cmp::Eq {\n+    pure fn eq(other: &ident) -> bool { self.repr == other.repr }\n+    pure fn ne(other: &ident) -> bool { !self.eq(other) }\n+}\n+\n+impl ident: to_bytes::IterBytes {\n+    pure fn iter_bytes(lsb0: bool, f: to_bytes::Cb) {\n+        self.repr.iter_bytes(lsb0, f)\n+    }\n+}\n \n // Functions may or may not have names.\n #[auto_serialize]"}, {"sha": "09922ade073c09527272b5fd031c06e92d65bd45", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=b96af7315951dcc69567c2f3432a46ff71ecddf3", "patch": "@@ -34,7 +34,7 @@ impl path_elt : cmp::Eq {\n type path = ~[path_elt];\n \n /* FIXMEs that say \"bad\" are as per #2543 */\n-fn path_to_str_with_sep(p: path, sep: ~str, itr: ident_interner) -> ~str {\n+fn path_to_str_with_sep(p: path, sep: ~str, itr: @ident_interner) -> ~str {\n     let strs = do vec::map(p) |e| {\n         match *e {\n           path_mod(s) => *itr.get(s),\n@@ -44,7 +44,7 @@ fn path_to_str_with_sep(p: path, sep: ~str, itr: ident_interner) -> ~str {\n     str::connect(strs, sep)\n }\n \n-fn path_ident_to_str(p: path, i: ident, itr: ident_interner) -> ~str {\n+fn path_ident_to_str(p: path, i: ident, itr: @ident_interner) -> ~str {\n     if vec::is_empty(p) {\n         //FIXME /* FIXME (#2543) */ copy *i\n         *itr.get(i)\n@@ -53,7 +53,7 @@ fn path_ident_to_str(p: path, i: ident, itr: ident_interner) -> ~str {\n     }\n }\n \n-fn path_to_str(p: path, itr: ident_interner) -> ~str {\n+fn path_to_str(p: path, itr: @ident_interner) -> ~str {\n     path_to_str_with_sep(p, ~\"::\", itr)\n }\n \n@@ -326,7 +326,7 @@ fn map_stmt(stmt: @stmt, cx: ctx, v: vt) {\n     visit::visit_stmt(stmt, cx, v);\n }\n \n-fn node_id_to_str(map: map, id: node_id, itr: ident_interner) -> ~str {\n+fn node_id_to_str(map: map, id: node_id, itr: @ident_interner) -> ~str {\n     match map.find(id) {\n       None => {\n         fmt!(\"unknown node (id=%d)\", id)"}, {"sha": "98a471bd54c4a338ce967a5750b840f76a1dab0b", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=b96af7315951dcc69567c2f3432a46ff71ecddf3", "patch": "@@ -23,7 +23,7 @@ pure fn dummy_sp() -> span { return mk_sp(0u, 0u); }\n \n \n \n-pure fn path_name_i(idents: ~[ident], intr: token::ident_interner) -> ~str {\n+pure fn path_name_i(idents: ~[ident], intr: @token::ident_interner) -> ~str {\n     // FIXME: Bad copies (#2543 -- same for everything else that says \"bad\")\n     str::connect(idents.map(|i| *intr.get(*i)), ~\"::\")\n }"}, {"sha": "b208e4f8c6f90c21a1a0c444968f77ac4c18911d", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=b96af7315951dcc69567c2f3432a46ff71ecddf3", "patch": "@@ -25,7 +25,7 @@ type tt_frame = @{\n \n type tt_reader = @{\n     sp_diag: span_handler,\n-    interner: ident_interner,\n+    interner: @ident_interner,\n     mut cur: tt_frame,\n     /* for MBE-style macro transcription */\n     interpolations: std::map::HashMap<ident, @named_match>,\n@@ -39,7 +39,7 @@ type tt_reader = @{\n /** This can do Macro-By-Example transcription. On the other hand, if\n  *  `src` contains no `tt_seq`s and `tt_nonterminal`s, `interp` can (and\n  *  should) be none. */\n-fn new_tt_reader(sp_diag: span_handler, itr: ident_interner,\n+fn new_tt_reader(sp_diag: span_handler, itr: @ident_interner,\n                  interp: Option<std::map::HashMap<ident,@named_match>>,\n                  src: ~[ast::token_tree])\n     -> tt_reader {"}, {"sha": "751b3ce62b976603e612f664a85d2a22260117b7", "filename": "src/libsyntax/parse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Flibsyntax%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Flibsyntax%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse.rs?ref=b96af7315951dcc69567c2f3432a46ff71ecddf3", "patch": "@@ -25,7 +25,7 @@ type parse_sess = @{\n     cm: codemap::codemap,\n     mut next_id: node_id,\n     span_diagnostic: span_handler,\n-    interner: ident_interner,\n+    interner: @ident_interner,\n     // these two must be kept up to date\n     mut chpos: uint,\n     mut byte_pos: uint"}, {"sha": "06fcc1cf9589fa2e0a1ae8bf8384c58849ffc5be", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=b96af7315951dcc69567c2f3432a46ff71ecddf3", "patch": "@@ -13,7 +13,7 @@ trait reader {\n     fn next_token() -> {tok: token::token, sp: span};\n     fn fatal(~str) -> !;\n     fn span_diag() -> span_handler;\n-    pure fn interner() -> token::ident_interner;\n+    pure fn interner() -> @token::ident_interner;\n     fn peek() -> {tok: token::token, sp: span};\n     fn dup() -> reader;\n }\n@@ -26,15 +26,15 @@ type string_reader = @{\n     mut curr: char,\n     mut chpos: uint,\n     filemap: codemap::filemap,\n-    interner: token::ident_interner,\n+    interner: @token::ident_interner,\n     /* cached: */\n     mut peek_tok: token::token,\n     mut peek_span: span\n };\n \n fn new_string_reader(span_diagnostic: span_handler,\n                      filemap: codemap::filemap,\n-                     itr: token::ident_interner) -> string_reader {\n+                     itr: @token::ident_interner) -> string_reader {\n     let r = new_low_level_string_reader(span_diagnostic, filemap, itr);\n     string_advance_token(r); /* fill in peek_* */\n     return r;\n@@ -43,7 +43,7 @@ fn new_string_reader(span_diagnostic: span_handler,\n /* For comments.rs, which hackily pokes into 'pos' and 'curr' */\n fn new_low_level_string_reader(span_diagnostic: span_handler,\n                                filemap: codemap::filemap,\n-                               itr: token::ident_interner)\n+                               itr: @token::ident_interner)\n     -> string_reader {\n     let r = @{span_diagnostic: span_diagnostic, src: filemap.src,\n               mut col: 0u, mut pos: 0u, mut curr: -1 as char,\n@@ -78,7 +78,7 @@ impl string_reader: reader {\n         self.span_diagnostic.span_fatal(copy self.peek_span, m)\n     }\n     fn span_diag() -> span_handler { self.span_diagnostic }\n-    pure fn interner() -> token::ident_interner { self.interner }\n+    pure fn interner() -> @token::ident_interner { self.interner }\n     fn peek() -> {tok: token::token, sp: span} {\n         {tok: self.peek_tok, sp: self.peek_span}\n     }\n@@ -100,7 +100,7 @@ impl tt_reader: reader {\n         self.sp_diag.span_fatal(copy self.cur_span, m);\n     }\n     fn span_diag() -> span_handler { self.sp_diag }\n-    pure fn interner() -> token::ident_interner { self.interner }\n+    pure fn interner() -> @token::ident_interner { self.interner }\n     fn peek() -> {tok: token::token, sp: span} {\n         { tok: self.cur_tok, sp: self.cur_span }\n     }"}, {"sha": "9d970e23f68534b1b96c271c4a88c3414fbb1a56", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b96af7315951dcc69567c2f3432a46ff71ecddf3", "patch": "@@ -237,7 +237,7 @@ struct parser {\n     mut restriction: restriction,\n     mut quote_depth: uint, // not (yet) related to the quasiquoter\n     reader: reader,\n-    interner: interner<@~str>,\n+    interner: @token::ident_interner,\n     keywords: HashMap<~str, ()>,\n     strict_keywords: HashMap<~str, ()>,\n     reserved_keywords: HashMap<~str, ()>,"}, {"sha": "a328ff1bdf6459436fddbb9d152f18f349d4e5c8", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 67, "deletions": 51, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=b96af7315951dcc69567c2f3432a46ff71ecddf3", "patch": "@@ -12,9 +12,6 @@ use std::serialization::{Serializer,\n                             serialize_bool,\n                             deserialize_bool};\n \n-#[auto_serialize]\n-type str_num = uint;\n-\n #[auto_serialize]\n enum binop {\n     PLUS,\n@@ -72,17 +69,17 @@ enum token {\n     LIT_INT(i64, ast::int_ty),\n     LIT_UINT(u64, ast::uint_ty),\n     LIT_INT_UNSUFFIXED(i64),\n-    LIT_FLOAT(str_num, ast::float_ty),\n-    LIT_STR(str_num),\n+    LIT_FLOAT(ast::ident, ast::float_ty),\n+    LIT_STR(ast::ident),\n \n     /* Name components */\n-    IDENT(str_num, bool),\n+    IDENT(ast::ident, bool),\n     UNDERSCORE,\n \n     /* For interpolation */\n     INTERPOLATED(nonterminal),\n \n-    DOC_COMMENT(str_num),\n+    DOC_COMMENT(ast::ident),\n     EOF,\n }\n \n@@ -95,7 +92,7 @@ enum nonterminal {\n     nt_pat( @ast::pat),\n     nt_expr(@ast::expr),\n     nt_ty(  @ast::ty),\n-    nt_ident(str_num, bool),\n+    nt_ident(ast::ident, bool),\n     nt_path(@ast::path),\n     nt_tt(  @ast::token_tree), //needs @ed to break a circularity\n     nt_matchers(~[ast::matcher])\n@@ -116,7 +113,7 @@ fn binop_to_str(o: binop) -> ~str {\n     }\n }\n \n-fn to_str(in: interner<@~str>, t: token) -> ~str {\n+fn to_str(in: @ident_interner, t: token) -> ~str {\n     match t {\n       EQ => ~\"=\",\n       LT => ~\"<\",\n@@ -174,7 +171,7 @@ fn to_str(in: interner<@~str>, t: token) -> ~str {\n         }\n         body + ast_util::float_ty_to_str(t)\n       }\n-      LIT_STR(s) => { ~\"\\\"\" + str::escape_default( *in.get(s)) + ~\"\\\"\" }\n+      LIT_STR(s) => { ~\"\\\"\" + str::escape_default(*in.get(s)) + ~\"\\\"\" }\n \n       /* Name components */\n       IDENT(s, _) => *in.get(s),\n@@ -281,49 +278,66 @@ pure fn is_bar(t: token) -> bool {\n mod special_idents {\n     #[legacy_exports];\n     use ast::ident;\n-    const underscore : ident = 0u;\n-    const anon : ident = 1u;\n-    const dtor : ident = 2u; // 'drop', but that's reserved\n-    const invalid : ident = 3u; // ''\n-    const unary : ident = 4u;\n-    const not_fn : ident = 5u;\n-    const idx_fn : ident = 6u;\n-    const unary_minus_fn : ident = 7u;\n-    const clownshoes_extensions : ident = 8u;\n-\n-    const self_ : ident = 9u; // 'self'\n+    const underscore : ident = ident { repr: 0u };\n+    const anon : ident = ident { repr: 1u };\n+    const dtor : ident = ident { repr: 2u }; // 'drop', but that's reserved\n+    const invalid : ident = ident { repr: 3u }; // ''\n+    const unary : ident = ident { repr: 4u };\n+    const not_fn : ident = ident { repr: 5u };\n+    const idx_fn : ident = ident { repr: 6u };\n+    const unary_minus_fn : ident = ident { repr: 7u };\n+    const clownshoes_extensions : ident = ident { repr: 8u };\n+\n+    const self_ : ident = ident { repr: 9u }; // 'self'\n \n     /* for matcher NTs */\n-    const item : ident = 10u;\n-    const block : ident = 11u;\n-    const stmt : ident = 12u;\n-    const pat : ident = 13u;\n-    const expr : ident = 14u;\n-    const ty : ident = 15u;\n-    const ident : ident = 16u;\n-    const path : ident = 17u;\n-    const tt : ident = 18u;\n-    const matchers : ident = 19u;\n-\n-    const str : ident = 20u; // for the type\n+    const item : ident = ident { repr: 10u };\n+    const block : ident = ident { repr: 11u };\n+    const stmt : ident = ident { repr: 12u };\n+    const pat : ident = ident { repr: 13u };\n+    const expr : ident = ident { repr: 14u };\n+    const ty : ident = ident { repr: 15u };\n+    const ident : ident = ident { repr: 16u };\n+    const path : ident = ident { repr: 17u };\n+    const tt : ident = ident { repr: 18u };\n+    const matchers : ident = ident { repr: 19u };\n+\n+    const str : ident = ident { repr: 20u }; // for the type\n \n     /* outside of libsyntax */\n-    const ty_visitor : ident = 21u;\n-    const arg : ident = 22u;\n-    const descrim : ident = 23u;\n-    const clownshoe_abi : ident = 24u;\n-    const clownshoe_stack_shim : ident = 25u;\n-    const tydesc : ident = 26u;\n-    const literally_dtor : ident = 27u;\n-    const main : ident = 28u;\n-    const opaque : ident = 29u;\n-    const blk : ident = 30u;\n-    const static : ident = 31u;\n-    const intrinsic : ident = 32u;\n-    const clownshoes_foreign_mod: ident = 33;\n+    const ty_visitor : ident = ident { repr: 21u };\n+    const arg : ident = ident { repr: 22u };\n+    const descrim : ident = ident { repr: 23u };\n+    const clownshoe_abi : ident = ident { repr: 24u };\n+    const clownshoe_stack_shim : ident = ident { repr: 25u };\n+    const tydesc : ident = ident { repr: 26u };\n+    const literally_dtor : ident = ident { repr: 27u };\n+    const main : ident = ident { repr: 28u };\n+    const opaque : ident = ident { repr: 29u };\n+    const blk : ident = ident { repr: 30u };\n+    const static : ident = ident { repr: 31u };\n+    const intrinsic : ident = ident { repr: 32u };\n+    const clownshoes_foreign_mod: ident = ident { repr: 33 };\n }\n \n-type ident_interner = util::interner::interner<@~str>;\n+struct ident_interner {\n+    priv interner: util::interner::interner<@~str>,\n+}\n+\n+impl ident_interner {\n+    fn intern(val: @~str) -> ast::ident {\n+        ast::ident { repr: self.interner.intern(val) }\n+    }\n+    fn gensym(val: @~str) -> ast::ident {\n+        ast::ident { repr: self.interner.gensym(val) }\n+    }\n+    pure fn get(idx: ast::ident) -> @~str {\n+        self.interner.get(idx.repr)\n+    }\n+    fn len() -> uint {\n+        self.interner.len()\n+    }\n+}\n \n /** Key for thread-local data for sneaking interner information to the\n  * serializer/deserializer. It sounds like a hack because it is one.\n@@ -335,7 +349,7 @@ macro_rules! interner_key (\n         (-3 as uint, 0u)))\n )\n \n-fn mk_ident_interner() -> ident_interner {\n+fn mk_ident_interner() -> @ident_interner {\n     /* the indices here must correspond to the numbers in special_idents */\n     let init_vec = ~[@~\"_\", @~\"anon\", @~\"drop\", @~\"\", @~\"unary\", @~\"!\",\n                      @~\"[]\", @~\"unary-\", @~\"__extensions__\", @~\"self\",\n@@ -346,7 +360,9 @@ fn mk_ident_interner() -> ident_interner {\n                      @~\"dtor\", @~\"main\", @~\"<opaque>\", @~\"blk\", @~\"static\",\n                      @~\"intrinsic\", @~\"__foreign_mod__\"];\n \n-    let rv = interner::mk_prefill::<@~str>(init_vec);\n+    let rv = @ident_interner {\n+        interner: interner::mk_prefill::<@~str>(init_vec)\n+    };\n \n     /* having multiple interners will just confuse the serializer */\n     unsafe {\n@@ -360,8 +376,8 @@ fn mk_ident_interner() -> ident_interner {\n \n /* for when we don't care about the contents; doesn't interact with TLD or\n    serialization */\n-fn mk_fake_ident_interner() -> ident_interner {\n-    interner::mk::<@~str>()\n+fn mk_fake_ident_interner() -> @ident_interner {\n+    @ident_interner { interner: interner::mk::<@~str>() }\n }\n \n /**"}, {"sha": "00652346e102d7e81a87b5c88dffaf2693c3e28e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=b96af7315951dcc69567c2f3432a46ff71ecddf3", "patch": "@@ -25,7 +25,7 @@ fn no_ann() -> pp_ann {\n type ps =\n     @{s: pp::printer,\n       cm: Option<codemap>,\n-      intr: token::ident_interner,\n+      intr: @token::ident_interner,\n       comments: Option<~[comments::cmnt]>,\n       literals: Option<~[comments::lit]>,\n       mut cur_cmnt: uint,\n@@ -43,7 +43,7 @@ fn end(s: ps) {\n     pp::end(s.s);\n }\n \n-fn rust_printer(writer: io::Writer, intr: ident_interner) -> ps {\n+fn rust_printer(writer: io::Writer, intr: @ident_interner) -> ps {\n     return @{s: pp::mk_printer(writer, default_columns),\n              cm: None::<codemap>,\n              intr: intr,\n@@ -63,7 +63,7 @@ const default_columns: uint = 78u;\n // Requires you to pass an input filename and reader so that\n // it can scan the input text for comments and literals to\n // copy forward.\n-fn print_crate(cm: codemap, intr: ident_interner,\n+fn print_crate(cm: codemap, intr: @ident_interner,\n                span_diagnostic: diagnostic::span_handler,\n                crate: @ast::crate, filename: ~str, in: io::Reader,\n                out: io::Writer, ann: pp_ann, is_expanded: bool) {\n@@ -91,40 +91,40 @@ fn print_crate_(s: ps, &&crate: @ast::crate) {\n     eof(s.s);\n }\n \n-fn ty_to_str(ty: @ast::ty, intr: ident_interner) -> ~str {\n+fn ty_to_str(ty: @ast::ty, intr: @ident_interner) -> ~str {\n     to_str(ty, print_type, intr)\n }\n \n-fn pat_to_str(pat: @ast::pat, intr: ident_interner) -> ~str {\n+fn pat_to_str(pat: @ast::pat, intr: @ident_interner) -> ~str {\n     to_str(pat, print_pat, intr)\n }\n \n-fn expr_to_str(e: @ast::expr, intr: ident_interner) -> ~str {\n+fn expr_to_str(e: @ast::expr, intr: @ident_interner) -> ~str {\n     to_str(e, print_expr, intr)\n }\n \n-fn tt_to_str(tt: ast::token_tree, intr: ident_interner) -> ~str {\n+fn tt_to_str(tt: ast::token_tree, intr: @ident_interner) -> ~str {\n     to_str(tt, print_tt, intr)\n }\n \n-fn stmt_to_str(s: ast::stmt, intr: ident_interner) -> ~str {\n+fn stmt_to_str(s: ast::stmt, intr: @ident_interner) -> ~str {\n     to_str(s, print_stmt, intr)\n }\n \n-fn item_to_str(i: @ast::item, intr: ident_interner) -> ~str {\n+fn item_to_str(i: @ast::item, intr: @ident_interner) -> ~str {\n     to_str(i, print_item, intr)\n }\n \n-fn typarams_to_str(tps: ~[ast::ty_param], intr: ident_interner) -> ~str {\n+fn typarams_to_str(tps: ~[ast::ty_param], intr: @ident_interner) -> ~str {\n     to_str(tps, print_type_params, intr)\n }\n \n-fn path_to_str(&&p: @ast::path, intr: ident_interner) -> ~str {\n+fn path_to_str(&&p: @ast::path, intr: @ident_interner) -> ~str {\n     to_str(p, |a,b| print_path(a, b, false), intr)\n }\n \n fn fun_to_str(decl: ast::fn_decl, name: ast::ident,\n-              params: ~[ast::ty_param], intr: ident_interner) -> ~str {\n+              params: ~[ast::ty_param], intr: @ident_interner) -> ~str {\n     do io::with_str_writer |wr| {\n         let s = rust_printer(wr, intr);\n         print_fn(s, decl, None, name, params, None, ast::inherited);\n@@ -147,7 +147,7 @@ fn test_fun_to_str() {\n     assert fun_to_str(decl, \"a\", ~[]) == \"fn a()\";\n }\n \n-fn block_to_str(blk: ast::blk, intr: ident_interner) -> ~str {\n+fn block_to_str(blk: ast::blk, intr: @ident_interner) -> ~str {\n     do io::with_str_writer |wr| {\n         let s = rust_printer(wr, intr);\n         // containing cbox, will be closed by print-block at }\n@@ -159,15 +159,15 @@ fn block_to_str(blk: ast::blk, intr: ident_interner) -> ~str {\n     }\n }\n \n-fn meta_item_to_str(mi: @ast::meta_item, intr: ident_interner) -> ~str {\n+fn meta_item_to_str(mi: @ast::meta_item, intr: @ident_interner) -> ~str {\n     to_str(mi, print_meta_item, intr)\n }\n \n-fn attribute_to_str(attr: ast::attribute, intr: ident_interner) -> ~str {\n+fn attribute_to_str(attr: ast::attribute, intr: @ident_interner) -> ~str {\n     to_str(attr, print_attribute, intr)\n }\n \n-fn variant_to_str(var: ast::variant, intr: ident_interner) -> ~str {\n+fn variant_to_str(var: ast::variant, intr: @ident_interner) -> ~str {\n     to_str(var, print_variant, intr)\n }\n \n@@ -2059,7 +2059,7 @@ fn print_string(s: ps, st: ~str) {\n     word(s.s, ~\"\\\"\");\n }\n \n-fn to_str<T>(t: T, f: fn@(ps, T), intr: ident_interner) -> ~str {\n+fn to_str<T>(t: T, f: fn@(ps, T), intr: @ident_interner) -> ~str {\n     do io::with_str_writer |wr| {\n         let s = rust_printer(wr, intr);\n         f(s, t);"}, {"sha": "c8f5871333fc1e877b745fb457809825b87cedd4", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=b96af7315951dcc69567c2f3432a46ff71ecddf3", "patch": "@@ -607,7 +607,7 @@ fn mangle_internal_name_by_path(ccx: @crate_ctxt, path: path) -> ~str {\n }\n \n fn mangle_internal_name_by_seq(ccx: @crate_ctxt, flav: ~str) -> ~str {\n-    return fmt!(\"%s_%u\", flav, ccx.names(flav));\n+    return fmt!(\"%s_%u\", flav, ccx.names(flav).repr);\n }\n \n // If the user wants an exe generated we need to invoke"}, {"sha": "c6c0ff2826a528a2293d25ddc24545eb4ae78db5", "filename": "src/rustc/driver/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Frustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Frustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fsession.rs?ref=b96af7315951dcc69567c2f3432a46ff71ecddf3", "patch": "@@ -243,7 +243,7 @@ impl session {\n     fn ident_of(st: ~str) -> ast::ident {\n         self.parse_sess.interner.intern(@st)\n     }\n-    fn intr() -> syntax::parse::token::ident_interner {\n+    fn intr() -> @syntax::parse::token::ident_interner {\n         self.parse_sess.interner\n     }\n }"}, {"sha": "0d19fe796e1198fc5481e900056a93aa06994b57", "filename": "src/rustc/metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Frustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Frustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcreader.rs?ref=b96af7315951dcc69567c2f3432a46ff71ecddf3", "patch": "@@ -18,7 +18,7 @@ export read_crates;\n // libraries necessary for later resolving, typechecking, linking, etc.\n fn read_crates(diag: span_handler, crate: ast::crate,\n                cstore: cstore::cstore, filesearch: filesearch,\n-               os: loader::os, static: bool, intr: ident_interner) {\n+               os: loader::os, static: bool, intr: @ident_interner) {\n     let e = @{diag: diag,\n               filesearch: filesearch,\n               cstore: cstore,\n@@ -94,7 +94,7 @@ type env = @{diag: span_handler,\n              static: bool,\n              crate_cache: DVec<cache_entry>,\n              mut next_crate_num: ast::crate_num,\n-             intr: ident_interner};\n+             intr: @ident_interner};\n \n fn visit_view_item(e: env, i: @ast::view_item) {\n     match i.node {"}, {"sha": "8a982eaf4977ec5854e2586041d178fe7dce857b", "filename": "src/rustc/metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Frustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Frustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcstore.rs?ref=b96af7315951dcc69567c2f3432a46ff71ecddf3", "patch": "@@ -58,7 +58,7 @@ type cstore_private =\n       mut used_crate_files: ~[Path],\n       mut used_libraries: ~[~str],\n       mut used_link_args: ~[~str],\n-      intr: ident_interner};\n+      intr: @ident_interner};\n \n // Map from node_id's of local use statements to crate numbers\n type use_crate_map = map::HashMap<ast::node_id, ast::crate_num>;\n@@ -68,7 +68,7 @@ pure fn p(cstore: cstore) -> cstore_private {\n     match cstore { private(p) => p }\n }\n \n-fn mk_cstore(intr: ident_interner) -> cstore {\n+fn mk_cstore(intr: @ident_interner) -> cstore {\n     let meta_cache = map::HashMap();\n     let crate_map = map::HashMap();\n     let mod_path_map = HashMap();"}, {"sha": "4a72867eb853eef3f972a2648460f977c6a595af", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=b96af7315951dcc69567c2f3432a46ff71ecddf3", "patch": "@@ -268,7 +268,7 @@ fn enum_variant_ids(item: ebml::Doc, cdata: cmd) -> ~[ast::def_id] {\n     return ids;\n }\n \n-fn item_path(intr: ident_interner, item_doc: ebml::Doc) -> ast_map::path {\n+fn item_path(intr: @ident_interner, item_doc: ebml::Doc) -> ast_map::path {\n     let path_doc = ebml::get_doc(item_doc, tag_path);\n \n     let len_doc = ebml::get_doc(path_doc, tag_path_len);\n@@ -290,7 +290,7 @@ fn item_path(intr: ident_interner, item_doc: ebml::Doc) -> ast_map::path {\n     return result;\n }\n \n-fn item_name(intr: ident_interner, item: ebml::Doc) -> ast::ident {\n+fn item_name(intr: @ident_interner, item: ebml::Doc) -> ast::ident {\n     let name = ebml::get_doc(item, tag_paths_data_name);\n     intr.intern(@str::from_bytes(ebml::doc_data(name)))\n }\n@@ -365,7 +365,7 @@ fn get_impl_traits(cdata: cmd, id: ast::node_id, tcx: ty::ctxt) -> ~[ty::t] {\n     item_impl_traits(lookup_item(id, cdata.data), tcx, cdata)\n }\n \n-fn get_impl_method(intr: ident_interner, cdata: cmd, id: ast::node_id,\n+fn get_impl_method(intr: @ident_interner, cdata: cmd, id: ast::node_id,\n                    name: ast::ident) -> ast::def_id {\n     let items = ebml::get_doc(ebml::Doc(cdata.data), tag_items);\n     let mut found = None;\n@@ -378,7 +378,7 @@ fn get_impl_method(intr: ident_interner, cdata: cmd, id: ast::node_id,\n     found.get()\n }\n \n-fn get_class_method(intr: ident_interner, cdata: cmd, id: ast::node_id,\n+fn get_class_method(intr: @ident_interner, cdata: cmd, id: ast::node_id,\n                     name: ast::ident) -> ast::def_id {\n     let items = ebml::get_doc(ebml::Doc(cdata.data), tag_items);\n     let mut found = None;\n@@ -451,7 +451,7 @@ fn path_entry(path_string: ~str, def_like: def_like) -> path_entry {\n }\n \n /// Iterates over all the paths in the given crate.\n-fn each_path(intr: ident_interner, cdata: cmd, f: fn(path_entry) -> bool) {\n+fn each_path(intr: @ident_interner, cdata: cmd, f: fn(path_entry) -> bool) {\n     let root = ebml::Doc(cdata.data);\n     let items = ebml::get_doc(root, tag_items);\n     let items_data = ebml::get_doc(items, tag_items_data);\n@@ -531,7 +531,7 @@ fn each_path(intr: ident_interner, cdata: cmd, f: fn(path_entry) -> bool) {\n     }\n }\n \n-fn get_item_path(intr: ident_interner, cdata: cmd, id: ast::node_id)\n+fn get_item_path(intr: @ident_interner, cdata: cmd, id: ast::node_id)\n     -> ast_map::path {\n     item_path(intr, lookup_item(id, cdata.data))\n }\n@@ -542,7 +542,7 @@ type decode_inlined_item = fn(\n     path: ast_map::path,\n     par_doc: ebml::Doc) -> Option<ast::inlined_item>;\n \n-fn maybe_get_item_ast(intr: ident_interner, cdata: cmd, tcx: ty::ctxt,\n+fn maybe_get_item_ast(intr: @ident_interner, cdata: cmd, tcx: ty::ctxt,\n                       id: ast::node_id,\n                       decode_inlined_item: decode_inlined_item\n                      ) -> csearch::found_ast {\n@@ -568,7 +568,7 @@ fn maybe_get_item_ast(intr: ident_interner, cdata: cmd, tcx: ty::ctxt,\n     }\n }\n \n-fn get_enum_variants(intr: ident_interner, cdata: cmd, id: ast::node_id,\n+fn get_enum_variants(intr: @ident_interner, cdata: cmd, id: ast::node_id,\n                      tcx: ty::ctxt) -> ~[ty::variant_info] {\n     let data = cdata.data;\n     let items = ebml::get_doc(ebml::Doc(data), tag_items);\n@@ -638,7 +638,7 @@ fn get_self_ty(item: ebml::Doc) -> ast::self_ty_ {\n     }\n }\n \n-fn item_impl_methods(intr: ident_interner, cdata: cmd, item: ebml::Doc,\n+fn item_impl_methods(intr: @ident_interner, cdata: cmd, item: ebml::Doc,\n                      base_tps: uint) -> ~[@method_info] {\n     let mut rslt = ~[];\n     for ebml::tagged_docs(item, tag_item_impl_method) |doc| {\n@@ -654,7 +654,7 @@ fn item_impl_methods(intr: ident_interner, cdata: cmd, item: ebml::Doc,\n     rslt\n }\n \n-fn get_impls_for_mod(intr: ident_interner, cdata: cmd,\n+fn get_impls_for_mod(intr: @ident_interner, cdata: cmd,\n                      m_id: ast::node_id, name: Option<ast::ident>,\n                      get_cdata: fn(ast::crate_num) -> cmd)\n                   -> @~[@_impl] {\n@@ -685,7 +685,7 @@ fn get_impls_for_mod(intr: ident_interner, cdata: cmd,\n }\n \n /* Works for both classes and traits */\n-fn get_trait_methods(intr: ident_interner, cdata: cmd, id: ast::node_id,\n+fn get_trait_methods(intr: @ident_interner, cdata: cmd, id: ast::node_id,\n                      tcx: ty::ctxt) -> @~[ty::method] {\n     let data = cdata.data;\n     let item = lookup_item(id, data);\n@@ -712,7 +712,7 @@ fn get_trait_methods(intr: ident_interner, cdata: cmd, id: ast::node_id,\n // If the item in question is a trait, returns its set of methods and\n // their self types. Otherwise, returns none. This overlaps in an\n // annoying way with get_trait_methods.\n-fn get_method_names_if_trait(intr: ident_interner, cdata: cmd,\n+fn get_method_names_if_trait(intr: @ident_interner, cdata: cmd,\n                              node_id: ast::node_id)\n                           -> Option<@DVec<(ast::ident, ast::self_ty_)>> {\n \n@@ -742,7 +742,7 @@ fn get_item_attrs(cdata: cmd,\n }\n \n // Helper function that gets either fields or methods\n-fn get_class_members(intr: ident_interner, cdata: cmd, id: ast::node_id,\n+fn get_class_members(intr: @ident_interner, cdata: cmd, id: ast::node_id,\n                      p: fn(Family) -> bool) -> ~[ty::field_ty] {\n     let data = cdata.data;\n     let item = lookup_item(id, data);\n@@ -769,7 +769,7 @@ pure fn family_to_visibility(family: Family) -> ast::visibility {\n     }\n }\n \n-fn get_class_fields(intr: ident_interner, cdata: cmd, id: ast::node_id)\n+fn get_class_fields(intr: @ident_interner, cdata: cmd, id: ast::node_id)\n     -> ~[ty::field_ty] {\n     get_class_members(intr, cdata, id, |f| f == PublicField\n                       || f == PrivateField || f == InheritedField)\n@@ -876,14 +876,14 @@ fn get_attributes(md: ebml::Doc) -> ~[ast::attribute] {\n     return attrs;\n }\n \n-fn list_meta_items(intr: ident_interner,\n+fn list_meta_items(intr: @ident_interner,\n                    meta_items: ebml::Doc, out: io::Writer) {\n     for get_meta_items(meta_items).each |mi| {\n         out.write_str(fmt!(\"%s\\n\", pprust::meta_item_to_str(*mi, intr)));\n     }\n }\n \n-fn list_crate_attributes(intr: ident_interner, md: ebml::Doc, hash: ~str,\n+fn list_crate_attributes(intr: @ident_interner, md: ebml::Doc, hash: ~str,\n                          out: io::Writer) {\n     out.write_str(fmt!(\"=Crate Attributes (%s)=\\n\", hash));\n \n@@ -901,7 +901,7 @@ fn get_crate_attributes(data: @~[u8]) -> ~[ast::attribute] {\n type crate_dep = {cnum: ast::crate_num, name: ast::ident,\n                   vers: ~str, hash: ~str};\n \n-fn get_crate_deps(intr: ident_interner, data: @~[u8]) -> ~[crate_dep] {\n+fn get_crate_deps(intr: @ident_interner, data: @~[u8]) -> ~[crate_dep] {\n     let mut deps: ~[crate_dep] = ~[];\n     let cratedoc = ebml::Doc(data);\n     let depsdoc = ebml::get_doc(cratedoc, tag_crate_deps);\n@@ -919,7 +919,7 @@ fn get_crate_deps(intr: ident_interner, data: @~[u8]) -> ~[crate_dep] {\n     return deps;\n }\n \n-fn list_crate_deps(intr: ident_interner, data: @~[u8], out: io::Writer) {\n+fn list_crate_deps(intr: @ident_interner, data: @~[u8], out: io::Writer) {\n     out.write_str(~\"=External Dependencies=\\n\");\n \n     for get_crate_deps(intr, data).each |dep| {\n@@ -946,7 +946,7 @@ fn get_crate_vers(data: @~[u8]) -> ~str {\n     };\n }\n \n-fn iter_crate_items(intr: ident_interner,\n+fn iter_crate_items(intr: @ident_interner,\n                     cdata: cmd, proc: fn(~str, ast::def_id)) {\n     for each_path(intr, cdata) |path_entry| {\n         match path_entry.def_like {\n@@ -958,7 +958,7 @@ fn iter_crate_items(intr: ident_interner,\n     }\n }\n \n-fn get_crate_module_paths(intr: ident_interner, cdata: cmd)\n+fn get_crate_module_paths(intr: @ident_interner, cdata: cmd)\n                                     -> ~[(ast::def_id, ~str)] {\n     fn mod_of_path(p: ~str) -> ~str {\n         str::connect(vec::init(str::split_str(p, ~\"::\")), ~\"::\")\n@@ -985,7 +985,7 @@ fn get_crate_module_paths(intr: ident_interner, cdata: cmd)\n     }\n }\n \n-fn list_crate_metadata(intr: ident_interner, bytes: @~[u8],\n+fn list_crate_metadata(intr: @ident_interner, bytes: @~[u8],\n                        out: io::Writer) {\n     let hash = get_crate_hash(bytes);\n     let md = ebml::Doc(bytes);"}, {"sha": "b2c28fafd4c3c8318a18e680cf47ce833f5b7573", "filename": "src/rustc/metadata/loader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Frustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Frustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Floader.rs?ref=b96af7315951dcc69567c2f3432a46ff71ecddf3", "patch": "@@ -35,7 +35,7 @@ type ctxt = {\n     hash: ~str,\n     os: os,\n     static: bool,\n-    intr: ident_interner\n+    intr: @ident_interner\n };\n \n fn load_library_crate(cx: ctxt) -> {ident: ~str, data: @~[u8]} {\n@@ -135,7 +135,7 @@ fn crate_name_from_metas(metas: ~[@ast::meta_item]) -> ~str {\n     }\n }\n \n-fn note_linkage_attrs(intr: ident_interner, diag: span_handler,\n+fn note_linkage_attrs(intr: @ident_interner, diag: span_handler,\n                       attrs: ~[ast::attribute]) {\n     for attr::find_linkage_metas(attrs).each |mi| {\n         diag.handler().note(fmt!(\"meta: %s\",\n@@ -226,7 +226,7 @@ fn meta_section_name(os: os) -> ~str {\n }\n \n // A diagnostic function for dumping crate metadata to an output stream\n-fn list_file_metadata(intr: ident_interner,\n+fn list_file_metadata(intr: @ident_interner,\n                       os: os, path: &Path, out: io::Writer) {\n     match get_metadata_section(os, path) {\n       option::Some(bytes) => decoder::list_crate_metadata(intr, bytes, out),"}, {"sha": "3e216c4eacc5a0fcce5595381fd63786e299d3da", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=b96af7315951dcc69567c2f3432a46ff71ecddf3", "patch": "@@ -652,14 +652,14 @@ struct PrimitiveTypeTable {\n }\n \n impl PrimitiveTypeTable {\n-    fn intern(intr: ident_interner, string: @~str,\n+    fn intern(intr: @ident_interner, string: @~str,\n               primitive_type: prim_ty) {\n         let atom = intr.intern(string);\n         self.primitive_types.insert(atom, primitive_type);\n     }\n }\n \n-fn PrimitiveTypeTable(intr: ident_interner) -> PrimitiveTypeTable {\n+fn PrimitiveTypeTable(intr: @ident_interner) -> PrimitiveTypeTable {\n     let table = PrimitiveTypeTable {\n         primitive_types: atom_hashmap()\n     };\n@@ -765,7 +765,7 @@ struct Resolver {\n     lang_items: LanguageItems,\n     crate: @crate,\n \n-    intr: ident_interner,\n+    intr: @ident_interner,\n \n     graph_root: @NameBindings,\n "}, {"sha": "fc74e5e0e4d0baf1cd2e3e97074fd114a4f2bb01", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=b96af7315951dcc69567c2f3432a46ff71ecddf3", "patch": "@@ -25,9 +25,9 @@ use syntax::parse::token::ident_interner;\n use syntax::ast::ident;\n \n type namegen = fn@(~str) -> ident;\n-fn new_namegen(intr: ident_interner) -> namegen {\n+fn new_namegen(intr: @ident_interner) -> namegen {\n     return fn@(prefix: ~str) -> ident {\n-        return intr.gensym(@fmt!(\"%s_%u\", prefix, intr.gensym(@prefix)))\n+        return intr.gensym(@fmt!(\"%s_%u\", prefix, intr.gensym(@prefix).repr))\n     };\n }\n \n@@ -1024,7 +1024,7 @@ fn C_cstr(cx: @crate_ctxt, s: ~str) -> ValueRef {\n         llvm::LLVMConstString(buf, str::len(s) as c_uint, False)\n     };\n     let g =\n-        str::as_c_str(fmt!(\"str%u\", cx.names(~\"str\")),\n+        str::as_c_str(fmt!(\"str%u\", cx.names(~\"str\").repr),\n                     |buf| llvm::LLVMAddGlobal(cx.llmod, val_ty(sc), buf));\n     llvm::LLVMSetInitializer(g, sc);\n     llvm::LLVMSetGlobalConstant(g, True);\n@@ -1086,7 +1086,8 @@ fn C_bytes_plus_null(bytes: ~[u8]) -> ValueRef unsafe {\n \n fn C_shape(ccx: @crate_ctxt, bytes: ~[u8]) -> ValueRef {\n     let llshape = C_bytes_plus_null(bytes);\n-    let llglobal = str::as_c_str(fmt!(\"shape%u\", ccx.names(~\"shape\")), |buf| {\n+    let name = fmt!(\"shape%u\", ccx.names(~\"shape\").repr);\n+    let llglobal = str::as_c_str(name, |buf| {\n         llvm::LLVMAddGlobal(ccx.llmod, val_ty(llshape), buf)\n     });\n     llvm::LLVMSetInitializer(llglobal, llshape);"}, {"sha": "26a83951c013d65de103d0221398aa8dbe8355e6", "filename": "src/rustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=b96af7315951dcc69567c2f3432a46ff71ecddf3", "patch": "@@ -90,7 +90,7 @@ type debug_ctxt = {\n     crate_file: ~str\n };\n \n-fn mk_ctxt(crate: ~str, intr: ident_interner) -> debug_ctxt {\n+fn mk_ctxt(crate: ~str, intr: @ident_interner) -> debug_ctxt {\n     {llmetadata: map::HashMap(),\n      names: new_namegen(intr),\n      crate_file: crate}"}, {"sha": "448e699fc8d08eb61ce162bbb4848d5fb8a75ca4", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96af7315951dcc69567c2f3432a46ff71ecddf3/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=b96af7315951dcc69567c2f3432a46ff71ecddf3", "patch": "@@ -21,7 +21,7 @@ fn to_str(id: ast::ident) -> ~str {\n     return *(*intr.get()).get(id);\n }\n \n-fn interner() -> syntax::parse::token::ident_interner {\n+fn interner() -> @syntax::parse::token::ident_interner {\n     return *(unsafe{ local_data_get(interner_key!()) }).get();\n }\n "}]}