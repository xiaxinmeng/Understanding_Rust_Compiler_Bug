{"sha": "166c0ac0de96d44a7823ffa2ec79119b65608ec4", "node_id": "C_kwDOAAsO6NoAKDE2NmMwYWMwZGU5NmQ0NGE3ODIzZmZhMmVjNzkxMTliNjU2MDhlYzQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-28T15:08:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-28T15:08:33Z"}, "message": "Merge #10654\n\n10654: internal: Refactor ide handling for paths in derive inputs r=Veykril a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "088f8a50b7e36bd4d81df71e510c56108dbc78eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/088f8a50b7e36bd4d81df71e510c56108dbc78eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/166c0ac0de96d44a7823ffa2ec79119b65608ec4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJherzxCRBK7hj4Ov3rIwAAcOIIADZSpEir5FOOY2Z2Ni74mV6s\ngL9aJtf2IuIFHJrgeuJSU3PEUOioCVu5OVnG+m8zry5ppEqUqvNHhJJp+ei7bQeG\nMODIV9pG8ILl/t2ZUwy3gvafPt5VfzU1eMtJL8I20IUdurZPjxhQHfZWeYol/jhW\nk85zIQT4uRZvHN5ntFikH+nFwZihgnu1JG2wKRzFI4sHjjMXuwWsMP0vQbo7ShSd\n83XPOI0gXhFY27PnDMMWU4b84gLYLfDD+pQQkZahJNddTOPCBP0sG46ZMsw4rl9P\nUu0B4wrONBcW862rtWOAJlW6kCoNwwkX2u+ISBXX62veNpca/87rB1S4+gAJGfs=\n=j+96\n-----END PGP SIGNATURE-----\n", "payload": "tree 088f8a50b7e36bd4d81df71e510c56108dbc78eb\nparent f4ba64ee2a05f3a38458a4a10dfd59eee9fd2a16\nparent 3018ffd85e6921ba57d4340f666269ec85e58902\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1635433713 +0000\ncommitter GitHub <noreply@github.com> 1635433713 +0000\n\nMerge #10654\n\n10654: internal: Refactor ide handling for paths in derive inputs r=Veykril a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/166c0ac0de96d44a7823ffa2ec79119b65608ec4", "html_url": "https://github.com/rust-lang/rust/commit/166c0ac0de96d44a7823ffa2ec79119b65608ec4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/166c0ac0de96d44a7823ffa2ec79119b65608ec4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4ba64ee2a05f3a38458a4a10dfd59eee9fd2a16", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4ba64ee2a05f3a38458a4a10dfd59eee9fd2a16", "html_url": "https://github.com/rust-lang/rust/commit/f4ba64ee2a05f3a38458a4a10dfd59eee9fd2a16"}, {"sha": "3018ffd85e6921ba57d4340f666269ec85e58902", "url": "https://api.github.com/repos/rust-lang/rust/commits/3018ffd85e6921ba57d4340f666269ec85e58902", "html_url": "https://github.com/rust-lang/rust/commit/3018ffd85e6921ba57d4340f666269ec85e58902"}], "stats": {"total": 219, "additions": 142, "deletions": 77}, "files": [{"sha": "8c47b809b90dfc2dee5bfc6db144f376da7402fc", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=166c0ac0de96d44a7823ffa2ec79119b65608ec4", "patch": "@@ -4,7 +4,7 @@ mod intra_doc_links;\n \n use either::Either;\n use pulldown_cmark::{BrokenLink, CowStr, Event, InlineStr, LinkType, Options, Parser, Tag};\n-use pulldown_cmark_to_cmark::{cmark_with_options, Options as CmarkOptions};\n+use pulldown_cmark_to_cmark::{cmark_with_options, Options as CMarkOptions};\n use stdx::format_to;\n use url::Url;\n \n@@ -65,7 +65,7 @@ pub(crate) fn rewrite_links(db: &RootDatabase, markdown: &str, definition: Defin\n         doc,\n         &mut out,\n         None,\n-        CmarkOptions { code_block_backticks: 3, ..Default::default() },\n+        CMarkOptions { code_block_backticks: 3, ..Default::default() },\n     )\n     .ok();\n     out\n@@ -103,7 +103,7 @@ pub(crate) fn remove_links(markdown: &str) -> String {\n         doc,\n         &mut out,\n         None,\n-        CmarkOptions { code_block_backticks: 3, ..Default::default() },\n+        CMarkOptions { code_block_backticks: 3, ..Default::default() },\n     )\n     .ok();\n     out"}, {"sha": "1edb17739b50bc2fb62d2c6249fa7fb5ba6cc8b0", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=166c0ac0de96d44a7823ffa2ec79119b65608ec4", "patch": "@@ -1371,6 +1371,7 @@ impl Twait for Stwuct {\n     fn goto_def_derive_input() {\n         check(\n             r#\"\n+//- minicore:derive\n #[rustc_builtin_macro]\n pub macro Copy {}\n        // ^^^^\n@@ -1380,6 +1381,7 @@ struct Foo;\n         );\n         check(\n             r#\"\n+//- minicore:derive\n mod foo {\n     #[rustc_builtin_macro]\n     pub macro Copy {}"}, {"sha": "2aa54fc33ff33cd1a703422f3218031f7d19be13", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=166c0ac0de96d44a7823ffa2ec79119b65608ec4", "patch": "@@ -3651,6 +3651,7 @@ use crate as foo$0;\n fn hover_attribute_in_macro() {\n     check(\n         r#\"\n+//- minicore:derive\n macro_rules! identity {\n     ($struct:item) => {\n         $struct\n@@ -3681,6 +3682,7 @@ identity!{\n fn hover_derive_input() {\n     check(\n         r#\"\n+//- minicore:derive\n #[rustc_builtin_macro]\n pub macro Copy {}\n #[derive(Copy$0)]\n@@ -3700,6 +3702,7 @@ struct Foo;\n     );\n     check(\n         r#\"\n+//- minicore:derive\n mod foo {\n     #[rustc_builtin_macro]\n     pub macro Copy {}"}, {"sha": "75249a959dcf0ddeabb627b45d16be05fb933f9a", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=166c0ac0de96d44a7823ffa2ec79119b65608ec4", "patch": "@@ -266,12 +266,10 @@ enum E { X(Foo) }\n     fn derives() {\n         check_all_ranges(\n             r#\"\n+//- minicore:derive\n #[rustc_builtin_macro]\n pub macro Copy {}\n         //^^^^\n-#[rustc_builtin_macro]\n-pub macro derive {}\n-        //^^^^^^\n #[derive(Copy)]\n //^^^^^^ ^^^^\n struct Hello(i32);"}, {"sha": "2bf83da4dfa0642ca88b5002a1762adfbf084317", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=166c0ac0de96d44a7823ffa2ec79119b65608ec4", "patch": "@@ -3,7 +3,7 @@\n use hir::{AsAssocItem, HasVisibility, Semantics};\n use ide_db::{\n     defs::{Definition, NameClass, NameRefClass},\n-    helpers::{try_resolve_derive_input_at, FamousDefs},\n+    helpers::{try_resolve_derive_input, FamousDefs},\n     RootDatabase, SymbolKind,\n };\n use rustc_hash::FxHashMap;\n@@ -56,8 +56,8 @@ fn token(\n             T![?] => HlTag::Operator(HlOperator::Other) | HlMod::ControlFlow,\n             IDENT if parent_matches::<ast::TokenTree>(&token) => {\n                 if let Some(attr) = token.ancestors().nth(2).and_then(ast::Attr::cast) {\n-                    match try_resolve_derive_input_at(sema, &attr, &token) {\n-                        Some(makro) => highlight_def(sema, krate, Definition::Macro(makro)),\n+                    match try_resolve_derive_input(sema, &attr, &ast::Ident::cast(token).unwrap()) {\n+                        Some(res) => highlight_def(sema, krate, Definition::from(res)),\n                         None => HlTag::None.into(),\n                     }\n                 } else {"}, {"sha": "1a10a78d2471142176ed7135a190b8635f5eab47", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=166c0ac0de96d44a7823ffa2ec79119b65608ec4", "patch": "@@ -43,15 +43,6 @@\n <pre><code><span class=\"keyword\">use</span> <span class=\"module\">inner</span><span class=\"operator\">::</span><span class=\"brace\">{</span><span class=\"self_keyword\">self</span> <span class=\"keyword\">as</span> <span class=\"module declaration\">inner_mod</span><span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n <span class=\"keyword\">mod</span> <span class=\"module declaration\">inner</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n-<span class=\"keyword\">macro</span> <span class=\"macro declaration\">Copy</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-\n-<span class=\"comment\">// Needed for function consuming vs normal</span>\n-<span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration public\">marker</span> <span class=\"brace\">{</span>\n-    <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">lang</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"copy\"</span><span class=\"attribute attribute\">]</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration public\">Copy</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-<span class=\"brace\">}</span>\n-\n <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"module attribute\">proc_macros</span><span class=\"operator attribute\">::</span><span class=\"builtin_attr attribute\">identity</span><span class=\"attribute attribute\">]</span>\n <span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration public\">ops</span> <span class=\"brace\">{</span>\n     <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">lang</span> <span class=\"operator attribute\">=</span> <span class=\"string_literal attribute\">\"fn_once\"</span><span class=\"attribute attribute\">]</span>\n@@ -95,7 +86,7 @@\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"macro attribute\">Copy</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"macro attribute\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"macro attribute default_library library\">Copy</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">FooCopy</span> <span class=\"brace\">{</span>\n     <span class=\"field declaration\">x</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u32</span><span class=\"comma\">,</span>\n <span class=\"brace\">}</span>\n@@ -135,7 +126,7 @@\n     <span class=\"value_param callable\">f</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">foobar</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"keyword\">impl</span> <span class=\"macro\">Copy</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">foobar</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"keyword\">impl</span> <span class=\"trait default_library library\">Copy</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">bar</span> <span class=\"operator\">=</span> <span class=\"function\">foobar</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>"}, {"sha": "42d34040fafb74c5d02a6e2ce60f11291c38f02a", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=166c0ac0de96d44a7823ffa2ec79119b65608ec4", "patch": "@@ -11,19 +11,11 @@ fn test_highlighting() {\n     check_highlighting(\n         r#\"\n //- proc_macros: identity, mirror\n+//- minicore: derive, copy\n //- /main.rs crate:main deps:foo\n use inner::{self as inner_mod};\n mod inner {}\n \n-#[rustc_builtin_macro]\n-macro Copy {}\n-\n-// Needed for function consuming vs normal\n-pub mod marker {\n-    #[lang = \"copy\"]\n-    pub trait Copy {}\n-}\n-\n #[proc_macros::identity]\n pub mod ops {\n     #[lang = \"fn_once\"]"}, {"sha": "c877748246e7d48ec8388ac534ab94163bc51316", "filename": "crates/ide_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=166c0ac0de96d44a7823ffa2ec79119b65608ec4", "patch": "@@ -3,7 +3,7 @@ use ide_db::helpers::{\n     insert_use::{insert_use, ImportScope},\n     mod_path_to_ast,\n };\n-use syntax::{ast, AstNode, SyntaxNode};\n+use syntax::{ast, AstNode, AstToken, SyntaxNode};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists, GroupLabel};\n \n@@ -128,9 +128,10 @@ pub(super) fn find_importable_node(ctx: &AssistContext) -> Option<(ImportAssets,\n         .find_node_at_offset_with_descend::<ast::IdentPat>()\n         .filter(ast::IdentPat::is_simple_ident)\n     {\n-        ImportAssets::for_ident_pat(&pat, &ctx.sema).zip(Some(pat.syntax().clone()))\n+        ImportAssets::for_ident_pat(&ctx.sema, &pat).zip(Some(pat.syntax().clone()))\n     } else {\n-        None\n+        let ident = ctx.find_token_at_offset()?;\n+        ImportAssets::for_derive_ident(&ctx.sema, &ident).zip(ident.syntax().parent())\n     }\n }\n "}, {"sha": "5bc8e8764f41f2ec6d4a59885b47b7841ba65e66", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=166c0ac0de96d44a7823ffa2ec79119b65608ec4", "patch": "@@ -12,10 +12,10 @@ use hir::{\n };\n use syntax::{\n     ast::{self, AstNode},\n-    match_ast, SyntaxKind, SyntaxNode, SyntaxToken,\n+    match_ast, AstToken, SyntaxKind, SyntaxNode, SyntaxToken,\n };\n \n-use crate::{helpers::try_resolve_derive_input_at, RootDatabase};\n+use crate::{helpers::try_resolve_derive_input, RootDatabase};\n \n // FIXME: a more precise name would probably be `Symbol`?\n #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]\n@@ -38,19 +38,20 @@ impl Definition {\n             Some(parent) => parent,\n             None => return Default::default(),\n         };\n-        let attr = parent\n-            .ancestors()\n-            .find_map(ast::TokenTree::cast)\n-            .and_then(|tt| tt.parent_meta())\n-            .and_then(|meta| meta.parent_attr());\n-        if let Some(attr) = attr {\n-            try_resolve_derive_input_at(&sema, &attr, &token)\n-                .map(Definition::Macro)\n-                .into_iter()\n-                .collect()\n-        } else {\n-            Self::from_node(sema, &parent)\n+        if let Some(ident) = ast::Ident::cast(token.clone()) {\n+            let attr = parent\n+                .ancestors()\n+                .find_map(ast::TokenTree::cast)\n+                .and_then(|tt| tt.parent_meta())\n+                .and_then(|meta| meta.parent_attr());\n+            if let Some(attr) = attr {\n+                return try_resolve_derive_input(&sema, &attr, &ident)\n+                    .map(Into::into)\n+                    .into_iter()\n+                    .collect();\n+            }\n         }\n+        Self::from_node(sema, &parent)\n     }\n \n     pub fn from_node(sema: &Semantics<RootDatabase>, node: &SyntaxNode) -> ArrayVec<Definition, 2> {"}, {"sha": "f6a1a5521836a8a1e41e258a217bae04301be4ed", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 54, "deletions": 26, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=166c0ac0de96d44a7823ffa2ec79119b65608ec4", "patch": "@@ -7,14 +7,16 @@ pub mod merge_imports;\n pub mod node_ext;\n pub mod rust_doc;\n \n-use std::collections::VecDeque;\n+use std::{collections::VecDeque, iter};\n \n use base_db::FileId;\n use either::Either;\n-use hir::{ItemInNs, MacroDef, ModuleDef, Name, Semantics};\n+use hir::{ItemInNs, MacroDef, ModuleDef, Name, PathResolution, Semantics};\n+use itertools::Itertools;\n use syntax::{\n-    ast::{self, make, HasLoopBody},\n-    AstNode, Direction, SyntaxElement, SyntaxKind, SyntaxToken, TokenAtOffset, WalkEvent, T,\n+    ast::{self, make, HasLoopBody, Ident},\n+    AstNode, AstToken, Direction, SyntaxElement, SyntaxKind, SyntaxToken, TokenAtOffset, WalkEvent,\n+    T,\n };\n \n use crate::RootDatabase;\n@@ -29,33 +31,59 @@ pub fn item_name(db: &RootDatabase, item: ItemInNs) -> Option<Name> {\n     }\n }\n \n-/// Resolves the path at the cursor token as a derive macro if it inside a token tree of a derive attribute.\n-pub fn try_resolve_derive_input_at(\n+/// Parses and returns the derive path at the cursor position in the given attribute, if it is a derive.\n+/// This special case is required because the derive macro is a compiler builtin that discards the input derives.\n+///\n+/// The returned path is synthesized from TokenTree tokens and as such cannot be used with the [`Semantics`].\n+pub fn get_path_in_derive_attr(\n     sema: &hir::Semantics<RootDatabase>,\n-    derive_attr: &ast::Attr,\n-    cursor: &SyntaxToken,\n-) -> Option<MacroDef> {\n-    use itertools::Itertools;\n-    if cursor.kind() != T![ident] {\n+    attr: &ast::Attr,\n+    cursor: &Ident,\n+) -> Option<ast::Path> {\n+    let cursor = cursor.syntax();\n+    let path = attr.path()?;\n+    let tt = attr.token_tree()?;\n+    if !tt.syntax().text_range().contains_range(cursor.text_range()) {\n         return None;\n     }\n-    let tt = match derive_attr.as_simple_call() {\n-        Some((name, tt))\n-            if name == \"derive\" && tt.syntax().text_range().contains_range(cursor.text_range()) =>\n-        {\n-            tt\n-        }\n-        _ => return None,\n-    };\n-    let tokens: Vec<_> = cursor\n+    let scope = sema.scope(attr.syntax());\n+    let resolved_attr = sema.resolve_path(&path)?;\n+    let derive = FamousDefs(sema, scope.krate()).core_macros_builtin_derive()?;\n+    if PathResolution::Macro(derive) != resolved_attr {\n+        return None;\n+    }\n+\n+    let first = cursor\n         .siblings_with_tokens(Direction::Prev)\n-        .flat_map(SyntaxElement::into_token)\n+        .filter_map(SyntaxElement::into_token)\n         .take_while(|tok| tok.kind() != T!['('] && tok.kind() != T![,])\n-        .collect();\n-    let path = ast::Path::parse(&tokens.into_iter().rev().join(\"\")).ok()?;\n-    sema.scope(tt.syntax())\n-        .speculative_resolve_as_mac(&path)\n-        .filter(|mac| mac.kind() == hir::MacroKind::Derive)\n+        .last()?;\n+    let path_tokens = first\n+        .siblings_with_tokens(Direction::Next)\n+        .filter_map(SyntaxElement::into_token)\n+        .take_while(|tok| tok != cursor);\n+\n+    ast::Path::parse(&path_tokens.chain(iter::once(cursor.clone())).join(\"\")).ok()\n+}\n+\n+/// Parses and resolves the path at the cursor position in the given attribute, if it is a derive.\n+/// This special case is required because the derive macro is a compiler builtin that discards the input derives.\n+pub fn try_resolve_derive_input(\n+    sema: &hir::Semantics<RootDatabase>,\n+    attr: &ast::Attr,\n+    cursor: &Ident,\n+) -> Option<PathResolution> {\n+    let path = get_path_in_derive_attr(sema, attr, cursor)?;\n+    let scope = sema.scope(attr.syntax());\n+    // FIXME: This double resolve shouldn't be necessary\n+    // It's only here so we prefer macros over other namespaces\n+    match scope.speculative_resolve_as_mac(&path) {\n+        Some(mac) if mac.kind() == hir::MacroKind::Derive => Some(PathResolution::Macro(mac)),\n+        Some(_) => return None,\n+        None => scope\n+            .speculative_resolve(&path)\n+            .filter(|res| matches!(res, PathResolution::Def(ModuleDef::Module(_)))),\n+    }\n }\n \n /// Picks the token with the highest rank returned by the passed in function."}, {"sha": "e8993d327f93b09d39dcb31795462c34a1343cb8", "filename": "crates/ide_db/src/helpers/famous_defs.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs.rs?ref=166c0ac0de96d44a7823ffa2ec79119b65608ec4", "patch": "@@ -1,5 +1,5 @@\n //! See [`FamousDefs`].\n-use hir::{Crate, Enum, Module, ScopeDef, Semantics, Trait};\n+use hir::{Crate, Enum, MacroDef, Module, ScopeDef, Semantics, Trait};\n \n use crate::RootDatabase;\n \n@@ -80,6 +80,10 @@ impl FamousDefs<'_, '_> {\n         self.find_trait(\"core:marker:Copy\")\n     }\n \n+    pub fn core_macros_builtin_derive(&self) -> Option<MacroDef> {\n+        self.find_macro(\"core:macros:builtin:derive\")\n+    }\n+\n     pub fn alloc(&self) -> Option<Crate> {\n         self.find_crate(\"alloc\")\n     }\n@@ -110,6 +114,13 @@ impl FamousDefs<'_, '_> {\n         }\n     }\n \n+    fn find_macro(&self, path: &str) -> Option<MacroDef> {\n+        match self.find_def(path)? {\n+            hir::ScopeDef::MacroDef(it) => Some(it),\n+            _ => None,\n+        }\n+    }\n+\n     fn find_enum(&self, path: &str) -> Option<Enum> {\n         match self.find_def(path)? {\n             hir::ScopeDef::ModuleDef(hir::ModuleDef::Adt(hir::Adt::Enum(it))) => Some(it),"}, {"sha": "0b3ecd095b04044e0917605f51914f42a6d541a0", "filename": "crates/ide_db/src/helpers/import_assets.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs?ref=166c0ac0de96d44a7823ffa2ec79119b65608ec4", "patch": "@@ -8,10 +8,11 @@ use rustc_hash::FxHashSet;\n use syntax::{\n     ast::{self, HasName},\n     utils::path_to_string_stripping_turbo_fish,\n-    AstNode, SyntaxNode,\n+    AstNode, AstToken, SyntaxNode,\n };\n \n use crate::{\n+    helpers::get_path_in_derive_attr,\n     items_locator::{self, AssocItemSearch, DEFAULT_QUERY_SEARCH_LIMIT},\n     RootDatabase,\n };\n@@ -119,7 +120,7 @@ impl ImportAssets {\n         })\n     }\n \n-    pub fn for_ident_pat(pat: &ast::IdentPat, sema: &Semantics<RootDatabase>) -> Option<Self> {\n+    pub fn for_ident_pat(sema: &Semantics<RootDatabase>, pat: &ast::IdentPat) -> Option<Self> {\n         if !pat.is_simple_ident() {\n             return None;\n         }\n@@ -132,6 +133,22 @@ impl ImportAssets {\n         })\n     }\n \n+    pub fn for_derive_ident(sema: &Semantics<RootDatabase>, ident: &ast::Ident) -> Option<Self> {\n+        let attr = ident.syntax().ancestors().find_map(ast::Attr::cast)?;\n+        let path = get_path_in_derive_attr(sema, &attr, ident)?;\n+\n+        if let Some(_) = path.qualifier() {\n+            return None;\n+        }\n+        let name = NameToImport::Exact(path.segment()?.name_ref()?.to_string());\n+        let candidate_node = attr.syntax().clone();\n+        Some(Self {\n+            import_candidate: ImportCandidate::Path(PathImportCandidate { qualifier: None, name }),\n+            module_with_candidate: sema.scope(&candidate_node).module()?,\n+            candidate_node,\n+        })\n+    }\n+\n     pub fn for_fuzzy_path(\n         module_with_candidate: Module,\n         qualifier: Option<ast::Path>,"}, {"sha": "ea39f799b79e00867a21878061b7e85761f53e9a", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=166c0ac0de96d44a7823ffa2ec79119b65608ec4", "patch": "@@ -673,7 +673,7 @@ pub(crate) fn location(\n     Ok(loc)\n }\n \n-/// Perefer using `location_link`, if the client has the cap.\n+/// Prefer using `location_link`, if the client has the cap.\n pub(crate) fn location_from_nav(\n     snap: &GlobalStateSnapshot,\n     nav: NavigationTarget,"}, {"sha": "30f23b9d9694dfd4000d98a00db4b8eefd3ea1d2", "filename": "crates/syntax/src/ast/generated/tokens.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs?ref=166c0ac0de96d44a7823ffa2ec79119b65608ec4", "patch": "@@ -131,3 +131,24 @@ impl AstToken for FloatNumber {\n     }\n     fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct Ident {\n+    pub(crate) syntax: SyntaxToken,\n+}\n+impl std::fmt::Display for Ident {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(&self.syntax, f)\n+    }\n+}\n+impl AstToken for Ident {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == IDENT }\n+    fn cast(syntax: SyntaxToken) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n+}"}, {"sha": "36fedd2f0bc71ff634ca6d8912809c89569e610e", "filename": "crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/166c0ac0de96d44a7823ffa2ec79119b65608ec4/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=166c0ac0de96d44a7823ffa2ec79119b65608ec4", "patch": "@@ -560,7 +560,7 @@ impl Field {\n \n fn lower(grammar: &Grammar) -> AstSrc {\n     let mut res = AstSrc {\n-        tokens: \"Whitespace Comment String ByteString IntNumber FloatNumber\"\n+        tokens: \"Whitespace Comment String ByteString IntNumber FloatNumber Ident\"\n             .split_ascii_whitespace()\n             .map(|it| it.to_string())\n             .collect::<Vec<_>>(),"}]}