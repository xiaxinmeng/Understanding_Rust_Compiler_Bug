{"sha": "0af9d1fc8aaf07bdcd7ab1e7ccad757b69e5c76f", "node_id": "C_kwDOAAsO6NoAKDBhZjlkMWZjOGFhZjA3YmRjZDdhYjFlN2NjYWQ3NTdiNjllNWM3NmY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-14T19:51:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-14T19:51:34Z"}, "message": "Merge #10546\n\n10546: feat: Implement promote_local_to_const assist r=Veykril a=Veykril\n\nFixes #7692, that is now one can invoke the `extract_variable` assist on something and then follow that up with this assist to turn it into a const.\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "ee121eaa18b33adf73a1b704fd1116367fa4a022", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee121eaa18b33adf73a1b704fd1116367fa4a022"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0af9d1fc8aaf07bdcd7ab1e7ccad757b69e5c76f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhaIpGCRBK7hj4Ov3rIwAAPmcIAISvQQ4Wt6w2VpGv3yt+Dw4d\nmMqiAFXr7AeJHeDBp0sdT1Xal37hNUd6OEsosPgGrALBM2TohZ4y6AzdZ6fArNAN\nZSDUnb80gjsv8iEgWKOBlrnMO9xKiZRPAhTBgD+3bScIwTm6WWQ6bq6/BH9iQDGm\nqrurken84s7tMiau/91gfafCo7xVIijh5AX5QxVTYt9BTIArogcBsxP47/37H6c3\nooZ3P2F1jhqQnO+s2qxU+XwsNNFhAWJxCSDSvJjYCSX8PJRXg4iENA/X5avO9nuq\nc2tSQGSpRxJGqR8nPiMReyxyGMtNRfmBYSyT+92nPKoYOX9ujR1/A2I9MgYeSCo=\n=u5cE\n-----END PGP SIGNATURE-----\n", "payload": "tree ee121eaa18b33adf73a1b704fd1116367fa4a022\nparent e52d47a3b8211c46de9321f76a59ce5e9811a8f8\nparent 06286ee90b24dcd999513fac86fd1db760f85b15\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1634241094 +0000\ncommitter GitHub <noreply@github.com> 1634241094 +0000\n\nMerge #10546\n\n10546: feat: Implement promote_local_to_const assist r=Veykril a=Veykril\n\nFixes #7692, that is now one can invoke the `extract_variable` assist on something and then follow that up with this assist to turn it into a const.\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0af9d1fc8aaf07bdcd7ab1e7ccad757b69e5c76f", "html_url": "https://github.com/rust-lang/rust/commit/0af9d1fc8aaf07bdcd7ab1e7ccad757b69e5c76f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0af9d1fc8aaf07bdcd7ab1e7ccad757b69e5c76f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e52d47a3b8211c46de9321f76a59ce5e9811a8f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e52d47a3b8211c46de9321f76a59ce5e9811a8f8", "html_url": "https://github.com/rust-lang/rust/commit/e52d47a3b8211c46de9321f76a59ce5e9811a8f8"}, {"sha": "06286ee90b24dcd999513fac86fd1db760f85b15", "url": "https://api.github.com/repos/rust-lang/rust/commits/06286ee90b24dcd999513fac86fd1db760f85b15", "html_url": "https://github.com/rust-lang/rust/commit/06286ee90b24dcd999513fac86fd1db760f85b15"}], "stats": {"total": 291, "additions": 280, "deletions": 11}, "files": [{"sha": "d79e93406c3bb0652bc1ec7b181485fad014dbc8", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0af9d1fc8aaf07bdcd7ab1e7ccad757b69e5c76f/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af9d1fc8aaf07bdcd7ab1e7ccad757b69e5c76f/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=0af9d1fc8aaf07bdcd7ab1e7ccad757b69e5c76f", "patch": "@@ -1307,6 +1307,10 @@ impl Function {\n         db.function_data(self.id).is_unsafe()\n     }\n \n+    pub fn is_const(self, db: &dyn HirDatabase) -> bool {\n+        db.function_data(self.id).is_const()\n+    }\n+\n     pub fn is_async(self, db: &dyn HirDatabase) -> bool {\n         db.function_data(self.id).is_async()\n     }"}, {"sha": "879247d37ee2fd3e8bb0337739df9ac959596b8b", "filename": "crates/ide_assists/src/handlers/promote_local_to_const.rs", "status": "added", "additions": 221, "deletions": 0, "changes": 221, "blob_url": "https://github.com/rust-lang/rust/blob/0af9d1fc8aaf07bdcd7ab1e7ccad757b69e5c76f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpromote_local_to_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af9d1fc8aaf07bdcd7ab1e7ccad757b69e5c76f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpromote_local_to_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpromote_local_to_const.rs?ref=0af9d1fc8aaf07bdcd7ab1e7ccad757b69e5c76f", "patch": "@@ -0,0 +1,221 @@\n+use hir::{HirDisplay, ModuleDef, PathResolution, Semantics};\n+use ide_db::{\n+    assists::{AssistId, AssistKind},\n+    defs::Definition,\n+    helpers::node_ext::preorder_expr,\n+    RootDatabase,\n+};\n+use stdx::to_upper_snake_case;\n+use syntax::{\n+    ast::{self, make, HasName},\n+    AstNode, WalkEvent,\n+};\n+\n+use crate::{\n+    assist_context::{AssistContext, Assists},\n+    utils::{render_snippet, Cursor},\n+};\n+\n+// Assist: promote_local_to_const\n+//\n+// Promotes a local variable to a const item changing its name to a `SCREAMING_SNAKE_CASE` variant\n+// if the local uses no non-const expressions.\n+//\n+// ```\n+// fn main() {\n+//     let foo$0 = true;\n+//\n+//     if foo {\n+//         println!(\"It's true\");\n+//     } else {\n+//         println!(\"It's false\");\n+//     }\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     const $0FOO: bool = true;\n+//\n+//     if FOO {\n+//         println!(\"It's true\");\n+//     } else {\n+//         println!(\"It's false\");\n+//     }\n+// }\n+// ```\n+pub(crate) fn promote_local_to_const(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let pat = ctx.find_node_at_offset::<ast::IdentPat>()?;\n+    let name = pat.name()?;\n+    if !pat.is_simple_ident() {\n+        cov_mark::hit!(promote_local_non_simple_ident);\n+        return None;\n+    }\n+    let let_stmt = pat.syntax().parent().and_then(ast::LetStmt::cast)?;\n+\n+    let module = ctx.sema.scope(pat.syntax()).module()?;\n+    let local = ctx.sema.to_def(&pat)?;\n+    let ty = ctx.sema.type_of_pat(&pat.into())?.original;\n+\n+    if ty.contains_unknown() || ty.is_closure() {\n+        cov_mark::hit!(promote_lcoal_not_applicable_if_ty_not_inferred);\n+        return None;\n+    }\n+    let ty = ty.display_source_code(ctx.db(), module.into()).ok()?;\n+\n+    let initializer = let_stmt.initializer()?;\n+    if !is_body_const(&ctx.sema, &initializer) {\n+        cov_mark::hit!(promote_local_non_const);\n+        return None;\n+    }\n+    let target = let_stmt.syntax().text_range();\n+    acc.add(\n+        AssistId(\"promote_local_to_const\", AssistKind::Refactor),\n+        \"Promote local to constant\",\n+        target,\n+        |builder| {\n+            let name = to_upper_snake_case(&name.to_string());\n+            let usages = Definition::Local(local).usages(&ctx.sema).all();\n+            if let Some(usages) = usages.references.get(&ctx.file_id()) {\n+                for usage in usages {\n+                    builder.replace(usage.range, &name);\n+                }\n+            }\n+\n+            let item = make::item_const(None, make::name(&name), make::ty(&ty), initializer);\n+            match ctx.config.snippet_cap.zip(item.name()) {\n+                Some((cap, name)) => builder.replace_snippet(\n+                    cap,\n+                    target,\n+                    render_snippet(cap, item.syntax(), Cursor::Before(name.syntax())),\n+                ),\n+                None => builder.replace(target, item.to_string()),\n+            }\n+        },\n+    )\n+}\n+\n+fn is_body_const(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> bool {\n+    let mut is_const = true;\n+    preorder_expr(expr, &mut |ev| {\n+        let expr = match ev {\n+            WalkEvent::Enter(_) if !is_const => return true,\n+            WalkEvent::Enter(expr) => expr,\n+            WalkEvent::Leave(_) => return false,\n+        };\n+        match expr {\n+            ast::Expr::CallExpr(call) => {\n+                if let Some(ast::Expr::PathExpr(path_expr)) = call.expr() {\n+                    if let Some(PathResolution::Def(ModuleDef::Function(func))) =\n+                        path_expr.path().and_then(|path| sema.resolve_path(&path))\n+                    {\n+                        is_const &= func.is_const(sema.db);\n+                    }\n+                }\n+            }\n+            ast::Expr::MethodCallExpr(call) => {\n+                is_const &=\n+                    sema.resolve_method_call(&call).map(|it| it.is_const(sema.db)).unwrap_or(true)\n+            }\n+            ast::Expr::BoxExpr(_)\n+            | ast::Expr::ForExpr(_)\n+            | ast::Expr::ReturnExpr(_)\n+            | ast::Expr::TryExpr(_)\n+            | ast::Expr::YieldExpr(_)\n+            | ast::Expr::AwaitExpr(_) => is_const = false,\n+            _ => (),\n+        }\n+        !is_const\n+    });\n+    is_const\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn simple() {\n+        check_assist(\n+            promote_local_to_const,\n+            r\"\n+fn foo() {\n+    let x$0 = 0;\n+    let y = x;\n+}\n+\",\n+            r\"\n+fn foo() {\n+    const $0X: i32 = 0;\n+    let y = X;\n+}\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_non_const_meth_call() {\n+        cov_mark::check!(promote_local_non_const);\n+        check_assist_not_applicable(\n+            promote_local_to_const,\n+            r\"\n+struct Foo;\n+impl Foo {\n+    fn foo(self) {}\n+}\n+fn foo() {\n+    let x$0 = Foo.foo();\n+}\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_non_const_call() {\n+        check_assist_not_applicable(\n+            promote_local_to_const,\n+            r\"\n+fn bar(self) {}\n+fn foo() {\n+    let x$0 = bar();\n+}\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_unknown_ty() {\n+        cov_mark::check!(promote_lcoal_not_applicable_if_ty_not_inferred);\n+        check_assist_not_applicable(\n+            promote_local_to_const,\n+            r\"\n+fn foo() {\n+    let x$0 = bar();\n+}\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_non_simple_ident() {\n+        cov_mark::check!(promote_local_non_simple_ident);\n+        check_assist_not_applicable(\n+            promote_local_to_const,\n+            r\"\n+fn foo() {\n+    let ref x$0 = ();\n+}\n+\",\n+        );\n+        check_assist_not_applicable(\n+            promote_local_to_const,\n+            r\"\n+fn foo() {\n+    let mut x$0 = ();\n+}\n+\",\n+        );\n+    }\n+}"}, {"sha": "41f768c3175d01ed64d0b03dd144a2bda364e4ff", "filename": "crates/ide_assists/src/handlers/raw_string.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0af9d1fc8aaf07bdcd7ab1e7ccad757b69e5c76f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af9d1fc8aaf07bdcd7ab1e7ccad757b69e5c76f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fraw_string.rs?ref=0af9d1fc8aaf07bdcd7ab1e7ccad757b69e5c76f", "patch": "@@ -168,23 +168,23 @@ fn required_hashes(s: &str) -> usize {\n     res\n }\n \n-#[test]\n-fn test_required_hashes() {\n-    assert_eq!(0, required_hashes(\"abc\"));\n-    assert_eq!(0, required_hashes(\"###\"));\n-    assert_eq!(1, required_hashes(\"\\\"\"));\n-    assert_eq!(2, required_hashes(\"\\\"#abc\"));\n-    assert_eq!(0, required_hashes(\"#abc\"));\n-    assert_eq!(3, required_hashes(\"#ab\\\"##c\"));\n-    assert_eq!(5, required_hashes(\"#ab\\\"##\\\"####c\"));\n-}\n-\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     use super::*;\n \n+    #[test]\n+    fn test_required_hashes() {\n+        assert_eq!(0, required_hashes(\"abc\"));\n+        assert_eq!(0, required_hashes(\"###\"));\n+        assert_eq!(1, required_hashes(\"\\\"\"));\n+        assert_eq!(2, required_hashes(\"\\\"#abc\"));\n+        assert_eq!(0, required_hashes(\"#abc\"));\n+        assert_eq!(3, required_hashes(\"#ab\\\"##c\"));\n+        assert_eq!(5, required_hashes(\"#ab\\\"##\\\"####c\"));\n+    }\n+\n     #[test]\n     fn make_raw_string_target() {\n         check_assist_target("}, {"sha": "ea2c19b50874f151ef86d0985589eecc1b7c00d2", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0af9d1fc8aaf07bdcd7ab1e7ccad757b69e5c76f/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af9d1fc8aaf07bdcd7ab1e7ccad757b69e5c76f/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=0af9d1fc8aaf07bdcd7ab1e7ccad757b69e5c76f", "patch": "@@ -157,6 +157,7 @@ mod handlers {\n     mod move_module_to_file;\n     mod move_to_mod_rs;\n     mod move_from_mod_rs;\n+    mod promote_local_to_const;\n     mod pull_assignment_up;\n     mod qualify_path;\n     mod raw_string;\n@@ -237,6 +238,7 @@ mod handlers {\n             move_to_mod_rs::move_to_mod_rs,\n             move_from_mod_rs::move_from_mod_rs,\n             pull_assignment_up::pull_assignment_up,\n+            promote_local_to_const::promote_local_to_const,\n             qualify_path::qualify_path,\n             raw_string::add_hash,\n             raw_string::make_usual_string,"}, {"sha": "25acd534824e17cfe9ef9919bdbc2a3c464551a5", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0af9d1fc8aaf07bdcd7ab1e7ccad757b69e5c76f/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af9d1fc8aaf07bdcd7ab1e7ccad757b69e5c76f/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=0af9d1fc8aaf07bdcd7ab1e7ccad757b69e5c76f", "patch": "@@ -1431,6 +1431,35 @@ fn t() {}\n     )\n }\n \n+#[test]\n+fn doctest_promote_local_to_const() {\n+    check_doc_test(\n+        \"promote_local_to_const\",\n+        r#####\"\n+fn main() {\n+    let foo$0 = true;\n+\n+    if foo {\n+        println!(\"It's true\");\n+    } else {\n+        println!(\"It's false\");\n+    }\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    const $0FOO: bool = true;\n+\n+    if FOO {\n+        println!(\"It's true\");\n+    } else {\n+        println!(\"It's false\");\n+    }\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_pull_assignment_up() {\n     check_doc_test("}, {"sha": "14faf9182dcd8a72d106756699d01923e1df899f", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0af9d1fc8aaf07bdcd7ab1e7ccad757b69e5c76f/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af9d1fc8aaf07bdcd7ab1e7ccad757b69e5c76f/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=0af9d1fc8aaf07bdcd7ab1e7ccad757b69e5c76f", "patch": "@@ -580,6 +580,19 @@ pub fn expr_stmt(expr: ast::Expr) -> ast::ExprStmt {\n     ast_from_text(&format!(\"fn f() {{ {}{} (); }}\", expr, semi))\n }\n \n+pub fn item_const(\n+    visibility: Option<ast::Visibility>,\n+    name: ast::Name,\n+    ty: ast::Type,\n+    expr: ast::Expr,\n+) -> ast::Const {\n+    let visibility = match visibility {\n+        None => String::new(),\n+        Some(it) => format!(\"{} \", it),\n+    };\n+    ast_from_text(&format!(\"{} const {}: {} = {};\", visibility, name, ty, expr))\n+}\n+\n pub fn param(pat: ast::Pat, ty: ast::Type) -> ast::Param {\n     ast_from_text(&format!(\"fn f({}: {}) {{ }}\", pat, ty))\n }"}]}