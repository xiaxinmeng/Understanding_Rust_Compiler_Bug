{"sha": "b0bec9553429639fc20dcc224f7525d99c325655", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwYmVjOTU1MzQyOTYzOWZjMjBkY2MyMjRmNzUyNWQ5OWMzMjU2NTU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-26T01:34:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-26T01:34:45Z"}, "message": "Rollup merge of #83486 - Aaron1011:fix/global-alloc-error, r=petrochenkov\n\nDon't ICE when using `#[global_alloc]` on a non-item statement\n\nFixes #83469\n\nWe need to return an `Annotatable::Stmt` if we were passed an\n`Annotatable::Stmt`", "tree": {"sha": "a8ab556ba4b571808891885081fc188ac277e4e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8ab556ba4b571808891885081fc188ac277e4e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0bec9553429639fc20dcc224f7525d99c325655", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgXTo2CRBK7hj4Ov3rIwAAdHIIAKRU6vCnkrLw6DWNPDcOespY\nIlLcSGpP2LZEKFTUJ9rmxEjCnagZPLV+EjmCNmt2lHod6gpiSAnJpo2yL3IpMNAP\n1jTV7F4VKK0Pw5hgnDG9KEFMosBGeaJBqVgZCFMVhY0LVfRjNsopxK6T/+FTUxyJ\nK8sJLPgYBIKUHT+zHyr24q4/21GUrsi017iU3rl2KMis57wq26RC246rvMa/sZv7\ngOZfOKWpYBfQ4r7GEWw/BNY6L8EYtvlI4uPyOVuDaZ6uQHuTifdaPxo1H7+2w0xS\nyvbqUxmXDGkvgtAsaP4c1aGtHBS9PJ5uvanFz88DoveAfBAdRLpr3cnqsoDGVpQ=\n=FlXE\n-----END PGP SIGNATURE-----\n", "payload": "tree a8ab556ba4b571808891885081fc188ac277e4e0\nparent c5edb4f28e0328096f0092957c8889850923beab\nparent 8ecd931a8eb0bb9bde2e7d35e72553b512d01c80\nauthor Dylan DPC <dylan.dpc@gmail.com> 1616722485 +0100\ncommitter GitHub <noreply@github.com> 1616722485 +0100\n\nRollup merge of #83486 - Aaron1011:fix/global-alloc-error, r=petrochenkov\n\nDon't ICE when using `#[global_alloc]` on a non-item statement\n\nFixes #83469\n\nWe need to return an `Annotatable::Stmt` if we were passed an\n`Annotatable::Stmt`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0bec9553429639fc20dcc224f7525d99c325655", "html_url": "https://github.com/rust-lang/rust/commit/b0bec9553429639fc20dcc224f7525d99c325655", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0bec9553429639fc20dcc224f7525d99c325655/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5edb4f28e0328096f0092957c8889850923beab", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5edb4f28e0328096f0092957c8889850923beab", "html_url": "https://github.com/rust-lang/rust/commit/c5edb4f28e0328096f0092957c8889850923beab"}, {"sha": "8ecd931a8eb0bb9bde2e7d35e72553b512d01c80", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ecd931a8eb0bb9bde2e7d35e72553b512d01c80", "html_url": "https://github.com/rust-lang/rust/commit/8ecd931a8eb0bb9bde2e7d35e72553b512d01c80"}], "stats": {"total": 50, "additions": 34, "deletions": 16}, "files": [{"sha": "a97cac7e514c98082c8591acaa441840ac9edacc", "filename": "compiler/rustc_builtin_macros/src/global_allocator.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b0bec9553429639fc20dcc224f7525d99c325655/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0bec9553429639fc20dcc224f7525d99c325655/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs?ref=b0bec9553429639fc20dcc224f7525d99c325655", "patch": "@@ -14,31 +14,31 @@ pub fn expand(\n     ecx: &mut ExtCtxt<'_>,\n     _span: Span,\n     meta_item: &ast::MetaItem,\n-    mut item: Annotatable,\n+    item: Annotatable,\n ) -> Vec<Annotatable> {\n     check_builtin_macro_attribute(ecx, meta_item, sym::global_allocator);\n \n-    let not_static = |item: Annotatable| {\n+    let orig_item = item.clone();\n+    let not_static = || {\n         ecx.sess.parse_sess.span_diagnostic.span_err(item.span(), \"allocators must be statics\");\n-        vec![item]\n+        vec![orig_item.clone()]\n     };\n-    let orig_item = item.clone();\n-    let mut is_stmt = false;\n \n     // Allow using `#[global_allocator]` on an item statement\n-    if let Annotatable::Stmt(stmt) = &item {\n-        if let StmtKind::Item(item_) = &stmt.kind {\n-            item = Annotatable::Item(item_.clone());\n-            is_stmt = true;\n-        }\n-    }\n-\n-    let item = match item {\n+    // FIXME - if we get deref patterns, use them to reduce duplication here\n+    let (item, is_stmt) = match &item {\n         Annotatable::Item(item) => match item.kind {\n-            ItemKind::Static(..) => item,\n-            _ => return not_static(Annotatable::Item(item)),\n+            ItemKind::Static(..) => (item, false),\n+            _ => return not_static(),\n+        },\n+        Annotatable::Stmt(stmt) => match &stmt.kind {\n+            StmtKind::Item(item_) => match item_.kind {\n+                ItemKind::Static(..) => (item_, true),\n+                _ => return not_static(),\n+            },\n+            _ => return not_static(),\n         },\n-        _ => return not_static(item),\n+        _ => return not_static(),\n     };\n \n     // Generate a bunch of new items using the AllocFnFactory"}, {"sha": "25adc5d25780b1f0e1bc6895258f85dd4cacca1d", "filename": "src/test/ui/proc-macro/issue-83469-global-alloc-invalid-stmt.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b0bec9553429639fc20dcc224f7525d99c325655/src%2Ftest%2Fui%2Fproc-macro%2Fissue-83469-global-alloc-invalid-stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0bec9553429639fc20dcc224f7525d99c325655/src%2Ftest%2Fui%2Fproc-macro%2Fissue-83469-global-alloc-invalid-stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-83469-global-alloc-invalid-stmt.rs?ref=b0bec9553429639fc20dcc224f7525d99c325655", "patch": "@@ -0,0 +1,10 @@\n+// Regression test for issue #83469\n+// Ensures that we recover from `#[global_alloc]` on an invalid\n+// stmt without an ICE\n+\n+fn outer() {\n+    #[global_allocator]\n+    fn inner() {} //~ ERROR allocators must be statics\n+}\n+\n+fn main() {}"}, {"sha": "ec0e3c4c7546f8c28f9a3f647f1e85a8d25ac733", "filename": "src/test/ui/proc-macro/issue-83469-global-alloc-invalid-stmt.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0bec9553429639fc20dcc224f7525d99c325655/src%2Ftest%2Fui%2Fproc-macro%2Fissue-83469-global-alloc-invalid-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0bec9553429639fc20dcc224f7525d99c325655/src%2Ftest%2Fui%2Fproc-macro%2Fissue-83469-global-alloc-invalid-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-83469-global-alloc-invalid-stmt.stderr?ref=b0bec9553429639fc20dcc224f7525d99c325655", "patch": "@@ -0,0 +1,8 @@\n+error: allocators must be statics\n+  --> $DIR/issue-83469-global-alloc-invalid-stmt.rs:7:5\n+   |\n+LL |     fn inner() {}\n+   |     ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}