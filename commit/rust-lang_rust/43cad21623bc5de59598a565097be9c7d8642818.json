{"sha": "43cad21623bc5de59598a565097be9c7d8642818", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzY2FkMjE2MjNiYzVkZTU5NTk4YTU2NTA5N2JlOWM3ZDg2NDI4MTg=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-24T13:36:18Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-24T14:54:20Z"}, "message": "Don't allocate common visibilities", "tree": {"sha": "5c467e4497824e0c67659311da7641ded7164a97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c467e4497824e0c67659311da7641ded7164a97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43cad21623bc5de59598a565097be9c7d8642818", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43cad21623bc5de59598a565097be9c7d8642818", "html_url": "https://github.com/rust-lang/rust/commit/43cad21623bc5de59598a565097be9c7d8642818", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43cad21623bc5de59598a565097be9c7d8642818/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16fd4dabb754b017237127e70ef1e2b409c4f9b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/16fd4dabb754b017237127e70ef1e2b409c4f9b6", "html_url": "https://github.com/rust-lang/rust/commit/16fd4dabb754b017237127e70ef1e2b409c4f9b6"}], "stats": {"total": 217, "additions": 142, "deletions": 75}, "files": [{"sha": "5ca331380ea86d48fb5c35e4a956dbae08f6987f", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43cad21623bc5de59598a565097be9c7d8642818/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43cad21623bc5de59598a565097be9c7d8642818/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=43cad21623bc5de59598a565097be9c7d8642818", "patch": "@@ -43,7 +43,7 @@ impl FunctionData {\n             attrs: item_tree.attrs(loc.id.value.into()).clone(),\n             has_self_param: func.has_self_param,\n             is_unsafe: func.is_unsafe,\n-            visibility: func.visibility.clone(),\n+            visibility: item_tree[func.visibility].clone(),\n         })\n     }\n }\n@@ -69,7 +69,7 @@ impl TypeAliasData {\n         Arc::new(TypeAliasData {\n             name: typ.name.clone(),\n             type_ref: typ.type_ref.clone(),\n-            visibility: typ.visibility.clone(),\n+            visibility: item_tree[typ.visibility].clone(),\n             bounds: typ.bounds.clone(),\n         })\n     }\n@@ -175,7 +175,7 @@ impl ConstData {\n         Arc::new(ConstData {\n             name: konst.name.clone(),\n             type_ref: konst.type_ref.clone(),\n-            visibility: konst.visibility.clone(),\n+            visibility: item_tree[konst.visibility].clone(),\n         })\n     }\n }\n@@ -197,7 +197,7 @@ impl StaticData {\n         Arc::new(StaticData {\n             name: Some(statik.name.clone()),\n             type_ref: statik.type_ref.clone(),\n-            visibility: statik.visibility.clone(),\n+            visibility: item_tree[statik.visibility].clone(),\n             mutable: statik.mutable,\n         })\n     }"}, {"sha": "bbaa7c1f6fbf89db057d981e0f65525b31eb4916", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 74, "deletions": 13, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/43cad21623bc5de59598a565097be9c7d8642818/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43cad21623bc5de59598a565097be9c7d8642818/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=43cad21623bc5de59598a565097be9c7d8642818", "patch": "@@ -29,12 +29,59 @@ use crate::{\n     attr::Attrs,\n     db::DefDatabase,\n     generics::GenericParams,\n-    path::{path, AssociatedTypeBinding, GenericArgs, ImportAlias, ModPath, Path},\n+    path::{path, AssociatedTypeBinding, GenericArgs, ImportAlias, ModPath, Path, PathKind},\n     type_ref::{Mutability, TypeBound, TypeRef},\n     visibility::RawVisibility,\n };\n use smallvec::SmallVec;\n \n+#[derive(Default, Debug, Eq, PartialEq)]\n+struct ItemVisibilities {\n+    arena: Arena<RawVisibility>,\n+}\n+\n+impl ItemVisibilities {\n+    fn alloc(&mut self, vis: RawVisibility) -> RawVisibilityId {\n+        match &vis {\n+            RawVisibility::Public => RawVisibilityId::PUB,\n+            RawVisibility::Module(path) if path.segments.is_empty() => match &path.kind {\n+                PathKind::Super(0) => RawVisibilityId::PRIV,\n+                PathKind::Crate => RawVisibilityId::PUB_CRATE,\n+                _ => RawVisibilityId(self.arena.alloc(vis).into_raw().into()),\n+            },\n+            _ => RawVisibilityId(self.arena.alloc(vis).into_raw().into()),\n+        }\n+    }\n+}\n+\n+#[derive(Copy, Clone, Eq, PartialEq)]\n+pub struct RawVisibilityId(u32);\n+\n+impl RawVisibilityId {\n+    pub const PUB: Self = RawVisibilityId(u32::max_value());\n+    pub const PRIV: Self = RawVisibilityId(u32::max_value() - 1);\n+    pub const PUB_CRATE: Self = RawVisibilityId(u32::max_value() - 2);\n+}\n+\n+impl fmt::Debug for RawVisibilityId {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let mut f = f.debug_tuple(\"RawVisibilityId\");\n+        match *self {\n+            Self::PUB => f.field(&\"pub\"),\n+            Self::PRIV => f.field(&\"pub(self)\"),\n+            Self::PUB_CRATE => f.field(&\"pub(crate)\"),\n+            _ => f.field(&self.0),\n+        };\n+        f.finish()\n+    }\n+}\n+\n+static VIS_PUB: RawVisibility = RawVisibility::Public;\n+static VIS_PRIV: RawVisibility =\n+    RawVisibility::Module(ModPath { kind: PathKind::Super(0), segments: Vec::new() });\n+static VIS_PUB_CRATE: RawVisibility =\n+    RawVisibility::Module(ModPath { kind: PathKind::Crate, segments: Vec::new() });\n+\n #[derive(Default, Debug, Eq, PartialEq)]\n struct ItemTreeData {\n     imports: Arena<Import>,\n@@ -53,6 +100,8 @@ struct ItemTreeData {\n     mods: Arena<Mod>,\n     macro_calls: Arena<MacroCall>,\n     exprs: Arena<Expr>,\n+\n+    vis: ItemVisibilities,\n }\n \n #[derive(Debug, Eq, PartialEq, Hash)]\n@@ -303,6 +352,18 @@ macro_rules! impl_index {\n \n impl_index!(fields: Field, variants: Variant, exprs: Expr);\n \n+impl Index<RawVisibilityId> for ItemTree {\n+    type Output = RawVisibility;\n+    fn index(&self, index: RawVisibilityId) -> &Self::Output {\n+        match index {\n+            RawVisibilityId::PRIV => &VIS_PRIV,\n+            RawVisibilityId::PUB => &VIS_PUB,\n+            RawVisibilityId::PUB_CRATE => &VIS_PUB_CRATE,\n+            _ => &self.data().vis.arena[Idx::from_raw(index.0.into())],\n+        }\n+    }\n+}\n+\n impl<N: ItemTreeNode> Index<FileItemTreeId<N>> for ItemTree {\n     type Output = N;\n     fn index(&self, id: FileItemTreeId<N>) -> &N {\n@@ -315,7 +376,7 @@ impl<N: ItemTreeNode> Index<FileItemTreeId<N>> for ItemTree {\n pub struct Import {\n     pub path: ModPath,\n     pub alias: Option<ImportAlias>,\n-    pub visibility: RawVisibility,\n+    pub visibility: RawVisibilityId,\n     pub is_glob: bool,\n     pub is_prelude: bool,\n     /// AST ID of the `use` or `extern crate` item this import was derived from. Note that many\n@@ -327,7 +388,7 @@ pub struct Import {\n pub struct ExternCrate {\n     pub path: ModPath,\n     pub alias: Option<ImportAlias>,\n-    pub visibility: RawVisibility,\n+    pub visibility: RawVisibilityId,\n     /// Whether this is a `#[macro_use] extern crate ...`.\n     pub is_macro_use: bool,\n     pub ast_id: FileAstId<ast::ExternCrateItem>,\n@@ -336,7 +397,7 @@ pub struct ExternCrate {\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Function {\n     pub name: Name,\n-    pub visibility: RawVisibility,\n+    pub visibility: RawVisibilityId,\n     pub generic_params: GenericParams,\n     pub has_self_param: bool,\n     pub is_unsafe: bool,\n@@ -348,7 +409,7 @@ pub struct Function {\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Struct {\n     pub name: Name,\n-    pub visibility: RawVisibility,\n+    pub visibility: RawVisibilityId,\n     pub generic_params: GenericParams,\n     pub fields: Fields,\n     pub ast_id: FileAstId<ast::StructDef>,\n@@ -368,7 +429,7 @@ pub enum StructDefKind {\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Union {\n     pub name: Name,\n-    pub visibility: RawVisibility,\n+    pub visibility: RawVisibilityId,\n     pub generic_params: GenericParams,\n     pub fields: Fields,\n     pub ast_id: FileAstId<ast::UnionDef>,\n@@ -377,7 +438,7 @@ pub struct Union {\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Enum {\n     pub name: Name,\n-    pub visibility: RawVisibility,\n+    pub visibility: RawVisibilityId,\n     pub generic_params: GenericParams,\n     pub variants: Range<Idx<Variant>>,\n     pub ast_id: FileAstId<ast::EnumDef>,\n@@ -387,15 +448,15 @@ pub struct Enum {\n pub struct Const {\n     /// const _: () = ();\n     pub name: Option<Name>,\n-    pub visibility: RawVisibility,\n+    pub visibility: RawVisibilityId,\n     pub type_ref: TypeRef,\n     pub ast_id: FileAstId<ast::ConstDef>,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Static {\n     pub name: Name,\n-    pub visibility: RawVisibility,\n+    pub visibility: RawVisibilityId,\n     pub mutable: bool,\n     pub type_ref: TypeRef,\n     pub ast_id: FileAstId<ast::StaticDef>,\n@@ -404,7 +465,7 @@ pub struct Static {\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Trait {\n     pub name: Name,\n-    pub visibility: RawVisibility,\n+    pub visibility: RawVisibilityId,\n     pub generic_params: GenericParams,\n     pub auto: bool,\n     pub items: Vec<AssocItem>,\n@@ -424,7 +485,7 @@ pub struct Impl {\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct TypeAlias {\n     pub name: Name,\n-    pub visibility: RawVisibility,\n+    pub visibility: RawVisibilityId,\n     /// Bounds on the type alias itself. Only valid in trait declarations, eg. `type Assoc: Copy;`.\n     pub bounds: Vec<TypeBound>,\n     pub generic_params: GenericParams,\n@@ -435,7 +496,7 @@ pub struct TypeAlias {\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Mod {\n     pub name: Name,\n-    pub visibility: RawVisibility,\n+    pub visibility: RawVisibilityId,\n     pub kind: ModKind,\n     pub ast_id: FileAstId<ast::Module>,\n }\n@@ -549,5 +610,5 @@ pub enum Fields {\n pub struct Field {\n     pub name: Name,\n     pub type_ref: TypeRef,\n-    pub visibility: RawVisibility,\n+    pub visibility: RawVisibilityId,\n }"}, {"sha": "73c21b9ec1171fb7dbb8973cccd93c518bf6a44d", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/43cad21623bc5de59598a565097be9c7d8642818/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43cad21623bc5de59598a565097be9c7d8642818/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=43cad21623bc5de59598a565097be9c7d8642818", "patch": "@@ -36,7 +36,7 @@ pub(super) struct Ctx {\n     source_ast_id_map: Arc<AstIdMap>,\n     body_ctx: crate::body::LowerCtx,\n     inner_items: Vec<ModItem>,\n-    forced_visibility: Option<RawVisibility>,\n+    forced_visibility: Option<RawVisibilityId>,\n }\n \n impl Ctx {\n@@ -201,7 +201,7 @@ impl Ctx {\n         start..end\n     }\n \n-    fn lower_record_field(&self, field: &ast::RecordFieldDef) -> Option<Field> {\n+    fn lower_record_field(&mut self, field: &ast::RecordFieldDef) -> Option<Field> {\n         let name = field.name()?.as_name();\n         let visibility = self.lower_visibility(field);\n         let type_ref = self.lower_type_ref(&field.ascribed_type()?);\n@@ -220,7 +220,7 @@ impl Ctx {\n         start..end\n     }\n \n-    fn lower_tuple_field(&self, idx: usize, field: &ast::TupleFieldDef) -> Option<Field> {\n+    fn lower_tuple_field(&mut self, idx: usize, field: &ast::TupleFieldDef) -> Option<Field> {\n         let name = Name::new_tuple_field(idx);\n         let visibility = self.lower_visibility(field);\n         let type_ref = self.lower_type_ref(&field.type_ref()?);\n@@ -399,7 +399,7 @@ impl Ctx {\n         let generic_params = self.lower_generic_params(GenericsOwner::Trait(trait_def), trait_def);\n         let auto = trait_def.auto_token().is_some();\n         let items = trait_def.item_list().map(|list| {\n-            self.with_inherited_visibility(visibility.clone(), |this| {\n+            self.with_inherited_visibility(visibility, |this| {\n                 list.items()\n                     .filter_map(|item| {\n                         let attrs = Attrs::new(&item, &this.hygiene);\n@@ -463,7 +463,7 @@ impl Ctx {\n                 imports.push(id(tree.imports.alloc(Import {\n                     path,\n                     alias,\n-                    visibility: visibility.clone(),\n+                    visibility,\n                     is_glob,\n                     is_prelude,\n                     ast_id,\n@@ -596,11 +596,13 @@ impl Ctx {\n         }\n     }\n \n-    fn lower_visibility(&self, item: &impl ast::VisibilityOwner) -> RawVisibility {\n-        match &self.forced_visibility {\n-            Some(vis) => vis.clone(),\n+    fn lower_visibility(&mut self, item: &impl ast::VisibilityOwner) -> RawVisibilityId {\n+        let vis = match self.forced_visibility {\n+            Some(vis) => return vis,\n             None => RawVisibility::from_ast_with_hygiene(item.visibility(), &self.hygiene),\n-        }\n+        };\n+\n+        self.data().vis.alloc(vis)\n     }\n \n     fn lower_type_ref(&self, type_ref: &ast::TypeRef) -> TypeRef {\n@@ -613,7 +615,7 @@ impl Ctx {\n     /// Forces the visibility `vis` to be used for all items lowered during execution of `f`.\n     fn with_inherited_visibility<R>(\n         &mut self,\n-        vis: RawVisibility,\n+        vis: RawVisibilityId,\n         f: impl FnOnce(&mut Self) -> R,\n     ) -> R {\n         let old = mem::replace(&mut self.forced_visibility, Some(vis));"}, {"sha": "42394a96075d805a025b32466c61a8474e1ea63f", "filename": "crates/ra_hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/43cad21623bc5de59598a565097be9c7d8642818/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43cad21623bc5de59598a565097be9c7d8642818/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=43cad21623bc5de59598a565097be9c7d8642818", "patch": "@@ -219,31 +219,31 @@ inner attrs: Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments\n \n top-level items:\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_on_use\"))] }, input: None }]) }]\n-Import { path: ModPath { kind: Plain, segments: [Name(Text(\"a\"))] }, alias: None, visibility: Module(ModPath { kind: Super(0), segments: [] }), is_glob: false, is_prelude: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::UseItem>(0) }\n+Import { path: ModPath { kind: Plain, segments: [Name(Text(\"a\"))] }, alias: None, visibility: RawVisibilityId(\"pub(self)\"), is_glob: false, is_prelude: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::UseItem>(0) }\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_on_use\"))] }, input: None }]) }]\n-Import { path: ModPath { kind: Plain, segments: [Name(Text(\"b\"))] }, alias: None, visibility: Module(ModPath { kind: Super(0), segments: [] }), is_glob: true, is_prelude: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::UseItem>(0) }\n+Import { path: ModPath { kind: Plain, segments: [Name(Text(\"b\"))] }, alias: None, visibility: RawVisibilityId(\"pub(self)\"), is_glob: true, is_prelude: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::UseItem>(0) }\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"ext_crate\"))] }, input: None }]) }]\n-ExternCrate { path: ModPath { kind: Plain, segments: [Name(Text(\"krate\"))] }, alias: None, visibility: Module(ModPath { kind: Super(0), segments: [] }), is_macro_use: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ExternCrateItem>(1) }\n+ExternCrate { path: ModPath { kind: Plain, segments: [Name(Text(\"krate\"))] }, alias: None, visibility: RawVisibilityId(\"pub(self)\"), is_macro_use: false, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ExternCrateItem>(1) }\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"on_trait\"))] }, input: None }]) }]\n-Trait { name: Name(Text(\"Tr\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 2, data: [TypeParamData { name: Some(Name(Text(\"Self\"))), default: None, provenance: TraitSelf }, TypeParamData { name: Some(Name(Text(\"U\"))), default: None, provenance: TypeParamList }] }, where_predicates: [] }, auto: false, items: [TypeAlias(Idx::<TypeAlias>(0)), Const(Idx::<Const>(0)), Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::TraitDef>(2) }\n+Trait { name: Name(Text(\"Tr\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 2, data: [TypeParamData { name: Some(Name(Text(\"Self\"))), default: None, provenance: TraitSelf }, TypeParamData { name: Some(Name(Text(\"U\"))), default: None, provenance: TypeParamList }] }, where_predicates: [] }, auto: false, items: [TypeAlias(Idx::<TypeAlias>(0)), Const(Idx::<Const>(0)), Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::TraitDef>(2) }\n > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_ty\"))] }, input: None }]) }]\n-> TypeAlias { name: Name(Text(\"AssocTy\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), bounds: [Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Tr\"))] }, generic_args: [Some(GenericArgs { args: [Type(Tuple([]))], has_self_type: false, bindings: [] })] })], generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, type_ref: None, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::TypeAliasDef>(8) }\n+> TypeAlias { name: Name(Text(\"AssocTy\")), visibility: RawVisibilityId(\"pub(self)\"), bounds: [Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Tr\"))] }, generic_args: [Some(GenericArgs { args: [Type(Tuple([]))], has_self_type: false, bindings: [] })] })], generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, type_ref: None, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::TypeAliasDef>(8) }\n > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_const\"))] }, input: None }]) }]\n-> Const { name: Some(Name(Text(\"CONST\"))), visibility: Module(ModPath { kind: Super(0), segments: [] }), type_ref: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"u8\"))] }, generic_args: [None] }), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ConstDef>(9) }\n+> Const { name: Some(Name(Text(\"CONST\"))), visibility: RawVisibilityId(\"pub(self)\"), type_ref: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"u8\"))] }, generic_args: [None] }), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ConstDef>(9) }\n > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_method\"))] }, input: None }]) }]\n-> Function { name: Name(Text(\"method\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: true, is_unsafe: false, params: [Reference(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Self\"))] }, generic_args: [None] }), Shared)], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(10) }\n+> Function { name: Name(Text(\"method\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: true, is_unsafe: false, params: [Reference(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Self\"))] }, generic_args: [None] }), Shared)], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(10) }\n > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_dfl_method\"))] }, input: None }]) }]\n-> Function { name: Name(Text(\"dfl_method\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: true, is_unsafe: false, params: [Reference(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Self\"))] }, generic_args: [None] }), Mut)], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(11) }\n+> Function { name: Name(Text(\"dfl_method\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: true, is_unsafe: false, params: [Reference(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Self\"))] }, generic_args: [None] }), Mut)], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(11) }\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"struct0\"))] }, input: None }]) }]\n-Struct { name: Name(Text(\"Struct0\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 1, data: [TypeParamData { name: Some(Name(Text(\"T\"))), default: Some(Tuple([])), provenance: TypeParamList }] }, where_predicates: [] }, fields: Unit, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(3), kind: Unit }\n+Struct { name: Name(Text(\"Struct0\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 1, data: [TypeParamData { name: Some(Name(Text(\"T\"))), default: Some(Tuple([])), provenance: TypeParamList }] }, where_predicates: [] }, fields: Unit, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(3), kind: Unit }\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"struct1\"))] }, input: None }]) }]\n-Struct { name: Name(Text(\"Struct1\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 1, data: [TypeParamData { name: Some(Name(Text(\"T\"))), default: None, provenance: TypeParamList }] }, where_predicates: [] }, fields: Tuple(Idx::<Field>(0)..Idx::<Field>(1)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(4), kind: Tuple }\n+Struct { name: Name(Text(\"Struct1\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 1, data: [TypeParamData { name: Some(Name(Text(\"T\"))), default: None, provenance: TypeParamList }] }, where_predicates: [] }, fields: Tuple(Idx::<Field>(0)..Idx::<Field>(1)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(4), kind: Tuple }\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"struct2\"))] }, input: None }]) }]\n-Struct { name: Name(Text(\"Struct2\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 1, data: [TypeParamData { name: Some(Name(Text(\"T\"))), default: None, provenance: TypeParamList }] }, where_predicates: [] }, fields: Record(Idx::<Field>(1)..Idx::<Field>(2)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(5), kind: Record }\n+Struct { name: Name(Text(\"Struct2\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 1, data: [TypeParamData { name: Some(Name(Text(\"T\"))), default: None, provenance: TypeParamList }] }, where_predicates: [] }, fields: Record(Idx::<Field>(1)..Idx::<Field>(2)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(5), kind: Record }\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"en\"))] }, input: None }]) }]\n-Enum { name: Name(Text(\"En\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, variants: Idx::<Variant>(0)..Idx::<Variant>(1), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::EnumDef>(6) }\n+Enum { name: Name(Text(\"En\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, variants: Idx::<Variant>(0)..Idx::<Variant>(1), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::EnumDef>(6) }\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"un\"))] }, input: None }]) }]\n-Union { name: Name(Text(\"Un\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, fields: Record(Idx::<Field>(3)..Idx::<Field>(4)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::UnionDef>(7) }\n+Union { name: Name(Text(\"Un\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, fields: Record(Idx::<Field>(3)..Idx::<Field>(4)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::UnionDef>(7) }\n     \"###);\n }\n \n@@ -267,12 +267,12 @@ inner attrs: Attrs { entries: None }\n \n top-level items:\n Impl { generic_params: GenericParams { types: Arena { len: 1, data: [TypeParamData { name: Some(Name(Text(\"T\"))), default: None, provenance: TypeParamList }] }, where_predicates: [WherePredicate { target: TypeRef(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"T\"))] }, generic_args: [None] })), bound: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"A\"))] }, generic_args: [None] }) }] }, target_trait: Some(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"D\"))] }, generic_args: [None] })), target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Response\"))] }, generic_args: [Some(GenericArgs { args: [Type(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"T\"))] }, generic_args: [None] }))], has_self_type: false, bindings: [] })] }), is_negative: false, items: [Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ImplDef>(0) }\n-> Function { name: Name(Text(\"foo\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n+> Function { name: Name(Text(\"foo\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n \n inner items:\n \n for AST FileAstId::<ra_syntax::ast::generated::nodes::ModuleItem>(2):\n-Function { name: Name(Text(\"end\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 1, data: [TypeParamData { name: Some(Name(Text(\"W\"))), default: None, provenance: TypeParamList }] }, where_predicates: [WherePredicate { target: TypeRef(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"W\"))] }, generic_args: [None] })), bound: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Write\"))] }, generic_args: [None] }) }] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n+Function { name: Name(Text(\"end\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 1, data: [TypeParamData { name: Some(Name(Text(\"W\"))), default: None, provenance: TypeParamList }] }, where_predicates: [WherePredicate { target: TypeRef(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"W\"))] }, generic_args: [None] })), bound: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Write\"))] }, generic_args: [None] }) }] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n \n     \"###);\n }\n@@ -296,9 +296,9 @@ inner attrs: Attrs { entries: None }\n \n top-level items:\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_a\"))] }, input: None }, Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"block_attr\"))] }, input: None }]) }]\n-Function { name: Name(Text(\"a\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n+Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_b\"))] }, input: None }, Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"block_attr\"))] }, input: None }]) }]\n-Function { name: Name(Text(\"b\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n+Function { name: Name(Text(\"b\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n     \"###);\n }\n \n@@ -321,11 +321,11 @@ inner attrs: Attrs { entries: None }\n \n top-level items:\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"trait_attr\"))] }, input: None }]) }]\n-Trait { name: Name(Text(\"Tr\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 1, data: [TypeParamData { name: Some(Name(Text(\"Self\"))), default: None, provenance: TraitSelf }] }, where_predicates: [] }, auto: false, items: [Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::TraitDef>(0) }\n+Trait { name: Name(Text(\"Tr\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 1, data: [TypeParamData { name: Some(Name(Text(\"Self\"))), default: None, provenance: TraitSelf }] }, where_predicates: [] }, auto: false, items: [Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::TraitDef>(0) }\n > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_a\"))] }, input: None }]) }]\n-> Function { name: Name(Text(\"a\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n+> Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_b\"))] }, input: None }]) }]\n-> Function { name: Name(Text(\"b\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n+> Function { name: Name(Text(\"b\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n     \"###);\n }\n \n@@ -350,9 +350,9 @@ top-level items:\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"impl_attr\"))] }, input: None }]) }]\n Impl { generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, target_trait: None, target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Ty\"))] }, generic_args: [None] }), is_negative: false, items: [Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ImplDef>(0) }\n > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_a\"))] }, input: None }]) }]\n-> Function { name: Name(Text(\"a\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n+> Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_b\"))] }, input: None }]) }]\n-> Function { name: Name(Text(\"b\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n+> Function { name: Name(Text(\"b\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n     \"###);\n }\n \n@@ -398,13 +398,13 @@ fn inner_item_attrs() {\n inner attrs: Attrs { entries: None }\n \n top-level items:\n-Function { name: Name(Text(\"foo\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(0) }\n+Function { name: Name(Text(\"foo\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(0) }\n \n inner items:\n \n for AST FileAstId::<ra_syntax::ast::generated::nodes::ModuleItem>(1):\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"on_inner\"))] }, input: None }]) }]\n-Function { name: Name(Text(\"inner\")), visibility: Module(ModPath { kind: Super(0), segments: [] }), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n+Function { name: Name(Text(\"inner\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParams { types: Arena { len: 0, data: [] }, where_predicates: [] }, has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n \n     \"###);\n }"}, {"sha": "94da700ad37cb39e08803ca7b22dcd227ce07c7d", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/43cad21623bc5de59598a565097be9c7d8642818/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43cad21623bc5de59598a565097be9c7d8642818/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=43cad21623bc5de59598a565097be9c7d8642818", "patch": "@@ -20,7 +20,9 @@ use test_utils::mark;\n use crate::{\n     attr::Attrs,\n     db::DefDatabase,\n-    item_tree::{self, ItemTree, ItemTreeId, MacroCall, Mod, ModItem, ModKind, StructDefKind},\n+    item_tree::{\n+        self, FileItemTreeId, ItemTree, ItemTreeId, MacroCall, Mod, ModItem, ModKind, StructDefKind,\n+    },\n     nameres::{\n         diagnostics::DefDiagnostic, mod_resolution::ModDir, path_resolution::ReachedFixedPoint,\n         BuiltinShadowMode, CrateDefMap, ModuleData, ModuleOrigin, ResolveMode,\n@@ -114,26 +116,28 @@ struct Import {\n     pub is_macro_use: bool,\n }\n \n-impl From<item_tree::Import> for Import {\n-    fn from(it: item_tree::Import) -> Self {\n+impl Import {\n+    fn from_use(tree: &ItemTree, id: FileItemTreeId<item_tree::Import>) -> Self {\n+        let it = &tree[id];\n+        let visibility = &tree[it.visibility];\n         Self {\n-            path: it.path,\n-            alias: it.alias,\n-            visibility: it.visibility,\n+            path: it.path.clone(),\n+            alias: it.alias.clone(),\n+            visibility: visibility.clone(),\n             is_glob: it.is_glob,\n             is_prelude: it.is_prelude,\n             is_extern_crate: false,\n             is_macro_use: false,\n         }\n     }\n-}\n \n-impl From<item_tree::ExternCrate> for Import {\n-    fn from(it: item_tree::ExternCrate) -> Self {\n+    fn from_extern_crate(tree: &ItemTree, id: FileItemTreeId<item_tree::ExternCrate>) -> Self {\n+        let it = &tree[id];\n+        let visibility = &tree[it.visibility];\n         Self {\n-            path: it.path,\n-            alias: it.alias,\n-            visibility: it.visibility,\n+            path: it.path.clone(),\n+            alias: it.alias.clone(),\n+            visibility: visibility.clone(),\n             is_glob: false,\n             is_prelude: false,\n             is_extern_crate: true,\n@@ -761,14 +765,14 @@ impl ModCollector<'_, '_> {\n                     ModItem::Import(import_id) => {\n                         self.def_collector.unresolved_imports.push(ImportDirective {\n                             module_id: self.module_id,\n-                            import: self.item_tree[import_id].clone().into(),\n+                            import: Import::from_use(&self.item_tree, import_id),\n                             status: PartialResolvedImport::Unresolved,\n                         })\n                     }\n                     ModItem::ExternCrate(import_id) => {\n                         self.def_collector.unresolved_imports.push(ImportDirective {\n                             module_id: self.module_id,\n-                            import: self.item_tree[import_id].clone().into(),\n+                            import: Import::from_extern_crate(&self.item_tree, import_id),\n                             status: PartialResolvedImport::Unresolved,\n                         })\n                     }\n@@ -795,7 +799,7 @@ impl ModCollector<'_, '_> {\n                             .intern(self.def_collector.db)\n                             .into(),\n                             name: &func.name,\n-                            visibility: &func.visibility,\n+                            visibility: &self.item_tree[func.visibility],\n                             has_constructor: false,\n                         });\n                     }\n@@ -812,7 +816,7 @@ impl ModCollector<'_, '_> {\n                                 .intern(self.def_collector.db)\n                                 .into(),\n                             name: &it.name,\n-                            visibility: &it.visibility,\n+                            visibility: &self.item_tree[it.visibility],\n                             has_constructor: it.kind != StructDefKind::Record,\n                         });\n                     }\n@@ -829,7 +833,7 @@ impl ModCollector<'_, '_> {\n                                 .intern(self.def_collector.db)\n                                 .into(),\n                             name: &it.name,\n-                            visibility: &it.visibility,\n+                            visibility: &self.item_tree[it.visibility],\n                             has_constructor: false,\n                         });\n                     }\n@@ -846,7 +850,7 @@ impl ModCollector<'_, '_> {\n                                 .intern(self.def_collector.db)\n                                 .into(),\n                             name: &it.name,\n-                            visibility: &it.visibility,\n+                            visibility: &self.item_tree[it.visibility],\n                             has_constructor: false,\n                         });\n                     }\n@@ -862,7 +866,7 @@ impl ModCollector<'_, '_> {\n                                 .intern(self.def_collector.db)\n                                 .into(),\n                                 name,\n-                                visibility: &it.visibility,\n+                                visibility: &self.item_tree[it.visibility],\n                                 has_constructor: false,\n                             });\n                         }\n@@ -875,7 +879,7 @@ impl ModCollector<'_, '_> {\n                                 .intern(self.def_collector.db)\n                                 .into(),\n                             name: &it.name,\n-                            visibility: &it.visibility,\n+                            visibility: &self.item_tree[it.visibility],\n                             has_constructor: false,\n                         });\n                     }\n@@ -887,7 +891,7 @@ impl ModCollector<'_, '_> {\n                                 .intern(self.def_collector.db)\n                                 .into(),\n                             name: &it.name,\n-                            visibility: &it.visibility,\n+                            visibility: &self.item_tree[it.visibility],\n                             has_constructor: false,\n                         });\n                     }\n@@ -902,7 +906,7 @@ impl ModCollector<'_, '_> {\n                             .intern(self.def_collector.db)\n                             .into(),\n                             name: &it.name,\n-                            visibility: &it.visibility,\n+                            visibility: &self.item_tree[it.visibility],\n                             has_constructor: false,\n                         });\n                     }\n@@ -935,7 +939,7 @@ impl ModCollector<'_, '_> {\n                     module.name.clone(),\n                     AstId::new(self.file_id, module.ast_id),\n                     None,\n-                    &module.visibility,\n+                    &self.item_tree[module.visibility],\n                 );\n \n                 ModCollector {\n@@ -965,7 +969,7 @@ impl ModCollector<'_, '_> {\n                             module.name.clone(),\n                             ast_id,\n                             Some((file_id, is_mod_rs)),\n-                            &module.visibility,\n+                            &self.item_tree[module.visibility],\n                         );\n                         let item_tree = self.def_collector.db.item_tree(file_id.into());\n                         ModCollector {"}]}