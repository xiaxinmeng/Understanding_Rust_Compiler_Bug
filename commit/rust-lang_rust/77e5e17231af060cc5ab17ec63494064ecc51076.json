{"sha": "77e5e17231af060cc5ab17ec63494064ecc51076", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZTVlMTcyMzFhZjA2MGNjNWFiMTdlYzYzNDk0MDY0ZWNjNTEwNzY=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-08-01T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-08-04T13:51:30Z"}, "message": "Prepare inbounds_gep for opaque pointers\n\nImplement inbounds_gep using LLVMBuildInBoundsGEP2 which takes an\nexplicit type argument instead of deriving it from a pointer type.", "tree": {"sha": "8d3776a005ca05916d40f18ad1576f04cd11b900", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d3776a005ca05916d40f18ad1576f04cd11b900"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77e5e17231af060cc5ab17ec63494064ecc51076", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77e5e17231af060cc5ab17ec63494064ecc51076", "html_url": "https://github.com/rust-lang/rust/commit/77e5e17231af060cc5ab17ec63494064ecc51076", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77e5e17231af060cc5ab17ec63494064ecc51076/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4013e094f59109779f1294adad96caa2eebf7e2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4013e094f59109779f1294adad96caa2eebf7e2d", "html_url": "https://github.com/rust-lang/rust/commit/4013e094f59109779f1294adad96caa2eebf7e2d"}], "stats": {"total": 83, "additions": 61, "deletions": 22}, "files": [{"sha": "d8fa7786c3780d9fbab39c71ad4fda7999b1202c", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/77e5e17231af060cc5ab17ec63494064ecc51076/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e5e17231af060cc5ab17ec63494064ecc51076/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=77e5e17231af060cc5ab17ec63494064ecc51076", "patch": "@@ -544,7 +544,11 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n             .val\n             .store(&mut body_bx, PlaceRef::new_sized_aligned(current, cg_elem.layout, align));\n \n-        let next = body_bx.inbounds_gep(current, &[self.const_usize(1)]);\n+        let next = body_bx.inbounds_gep(\n+            self.backend_type(cg_elem.layout),\n+            current,\n+            &[self.const_usize(1)],\n+        );\n         body_bx.br(header_bx.llbb());\n         header_bx.add_incoming_to_phi(current, next, body_bx.llbb());\n \n@@ -653,10 +657,16 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    fn inbounds_gep(&mut self, ptr: &'ll Value, indices: &[&'ll Value]) -> &'ll Value {\n+    fn inbounds_gep(\n+        &mut self,\n+        ty: &'ll Type,\n+        ptr: &'ll Value,\n+        indices: &[&'ll Value],\n+    ) -> &'ll Value {\n         unsafe {\n-            llvm::LLVMBuildInBoundsGEP(\n+            llvm::LLVMBuildInBoundsGEP2(\n                 self.llbuilder,\n+                ty,\n                 ptr,\n                 indices.as_ptr(),\n                 indices.len() as c_uint,"}, {"sha": "c33d35cc285d358e969904d6a3ccc246b5f078dd", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/gdb.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/77e5e17231af060cc5ab17ec63494064ecc51076/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e5e17231af060cc5ab17ec63494064ecc51076/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs?ref=77e5e17231af060cc5ab17ec63494064ecc51076", "patch": "@@ -15,12 +15,11 @@ use rustc_span::symbol::sym;\n /// .debug_gdb_scripts global is referenced, so it isn't removed by the linker.\n pub fn insert_reference_to_gdb_debug_scripts_section_global(bx: &mut Builder<'_, '_, '_>) {\n     if needs_gdb_debug_scripts_section(bx) {\n-        let gdb_debug_scripts_section = get_or_insert_gdb_debug_scripts_section_global(bx);\n+        let gdb_debug_scripts_section =\n+            bx.const_bitcast(get_or_insert_gdb_debug_scripts_section_global(bx), bx.type_i8p());\n         // Load just the first byte as that's all that's necessary to force\n         // LLVM to keep around the reference to the global.\n-        let indices = [bx.const_i32(0), bx.const_i32(0)];\n-        let element = bx.inbounds_gep(gdb_debug_scripts_section, &indices);\n-        let volative_load_instruction = bx.volatile_load(bx.type_i8(), element);\n+        let volative_load_instruction = bx.volatile_load(bx.type_i8(), gdb_debug_scripts_section);\n         unsafe {\n             llvm::LLVMSetAlignment(volative_load_instruction, 1);\n         }"}, {"sha": "56563668de6b07898e6a2195fa4c3a507566a058", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/77e5e17231af060cc5ab17ec63494064ecc51076/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e5e17231af060cc5ab17ec63494064ecc51076/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=77e5e17231af060cc5ab17ec63494064ecc51076", "patch": "@@ -686,11 +686,19 @@ fn codegen_emcc_try(\n         // create an alloca and pass a pointer to that.\n         let ptr_align = bx.tcx().data_layout.pointer_align.abi;\n         let i8_align = bx.tcx().data_layout.i8_align.abi;\n-        let catch_data =\n-            catch.alloca(bx.type_struct(&[bx.type_i8p(), bx.type_bool()], false), ptr_align);\n-        let catch_data_0 = catch.inbounds_gep(catch_data, &[bx.const_usize(0), bx.const_usize(0)]);\n+        let catch_data_type = bx.type_struct(&[bx.type_i8p(), bx.type_bool()], false);\n+        let catch_data = catch.alloca(catch_data_type, ptr_align);\n+        let catch_data_0 = catch.inbounds_gep(\n+            catch_data_type,\n+            catch_data,\n+            &[bx.const_usize(0), bx.const_usize(0)],\n+        );\n         catch.store(ptr, catch_data_0, ptr_align);\n-        let catch_data_1 = catch.inbounds_gep(catch_data, &[bx.const_usize(0), bx.const_usize(1)]);\n+        let catch_data_1 = catch.inbounds_gep(\n+            catch_data_type,\n+            catch_data,\n+            &[bx.const_usize(0), bx.const_usize(1)],\n+        );\n         catch.store(is_rust_panic, catch_data_1, i8_align);\n         let catch_data = catch.bitcast(catch_data, bx.type_i8p());\n "}, {"sha": "62d873932d428062559d23ca688746515582fad8", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77e5e17231af060cc5ab17ec63494064ecc51076/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e5e17231af060cc5ab17ec63494064ecc51076/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=77e5e17231af060cc5ab17ec63494064ecc51076", "patch": "@@ -1402,8 +1402,9 @@ extern \"C\" {\n         NumIndices: c_uint,\n         Name: *const c_char,\n     ) -> &'a Value;\n-    pub fn LLVMBuildInBoundsGEP(\n+    pub fn LLVMBuildInBoundsGEP2(\n         B: &Builder<'a>,\n+        Ty: &'a Type,\n         Pointer: &'a Value,\n         Indices: *const &'a Value,\n         NumIndices: c_uint,"}, {"sha": "c9fb09570c35ad52b4462857adff174b322c4227", "filename": "compiler/rustc_codegen_llvm/src/va_arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77e5e17231af060cc5ab17ec63494064ecc51076/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e5e17231af060cc5ab17ec63494064ecc51076/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs?ref=77e5e17231af060cc5ab17ec63494064ecc51076", "patch": "@@ -50,12 +50,12 @@ fn emit_direct_ptr_va_arg(\n \n     let aligned_size = size.align_to(slot_size).bytes() as i32;\n     let full_direct_size = bx.cx().const_i32(aligned_size);\n-    let next = bx.inbounds_gep(addr, &[full_direct_size]);\n+    let next = bx.inbounds_gep(bx.type_i8(), addr, &[full_direct_size]);\n     bx.store(next, va_list_addr, bx.tcx().data_layout.pointer_align.abi);\n \n     if size.bytes() < slot_size.bytes() && bx.tcx().sess.target.endian == Endian::Big {\n         let adjusted_size = bx.cx().const_i32((slot_size.bytes() - size.bytes()) as i32);\n-        let adjusted = bx.inbounds_gep(addr, &[adjusted_size]);\n+        let adjusted = bx.inbounds_gep(bx.type_i8(), addr, &[adjusted_size]);\n         (bx.bitcast(adjusted, bx.cx().type_ptr_to(llty)), addr_align)\n     } else {\n         (bx.bitcast(addr, bx.cx().type_ptr_to(llty)), addr_align)"}, {"sha": "b60677267849ac0bb10658537f07c4acef7ebfbc", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/77e5e17231af060cc5ab17ec63494064ecc51076/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e5e17231af060cc5ab17ec63494064ecc51076/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=77e5e17231af060cc5ab17ec63494064ecc51076", "patch": "@@ -168,8 +168,11 @@ pub fn unsized_info<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n                 let ptr_ty = cx.type_i8p();\n                 let ptr_align = cx.tcx().data_layout.pointer_align.abi;\n                 let llvtable = bx.pointercast(old_info, bx.type_ptr_to(ptr_ty));\n-                let gep =\n-                    bx.inbounds_gep(llvtable, &[bx.const_usize(u64::try_from(entry_idx).unwrap())]);\n+                let gep = bx.inbounds_gep(\n+                    ptr_ty,\n+                    llvtable,\n+                    &[bx.const_usize(u64::try_from(entry_idx).unwrap())],\n+                );\n                 let new_vptr = bx.load(ptr_ty, gep, ptr_align);\n                 bx.nonnull_metadata(new_vptr);\n                 // Vtable loads are invariant."}, {"sha": "efeec5b728413b88b54fe472890f9aab9239c30a", "filename": "compiler/rustc_codegen_ssa/src/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77e5e17231af060cc5ab17ec63494064ecc51076/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e5e17231af060cc5ab17ec63494064ecc51076/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs?ref=77e5e17231af060cc5ab17ec63494064ecc51076", "patch": "@@ -23,7 +23,7 @@ impl<'a, 'tcx> VirtualIndex {\n         let llty = bx.fn_ptr_backend_type(fn_abi);\n         let llvtable = bx.pointercast(llvtable, bx.type_ptr_to(llty));\n         let ptr_align = bx.tcx().data_layout.pointer_align.abi;\n-        let gep = bx.inbounds_gep(llvtable, &[bx.const_usize(self.0)]);\n+        let gep = bx.inbounds_gep(llty, llvtable, &[bx.const_usize(self.0)]);\n         let ptr = bx.load(llty, gep, ptr_align);\n         bx.nonnull_metadata(ptr);\n         // Vtable loads are invariant.\n@@ -42,7 +42,7 @@ impl<'a, 'tcx> VirtualIndex {\n         let llty = bx.type_isize();\n         let llvtable = bx.pointercast(llvtable, bx.type_ptr_to(llty));\n         let usize_align = bx.tcx().data_layout.pointer_align.abi;\n-        let gep = bx.inbounds_gep(llvtable, &[bx.const_usize(self.0)]);\n+        let gep = bx.inbounds_gep(llty, llvtable, &[bx.const_usize(self.0)]);\n         let ptr = bx.load(llty, gep, usize_align);\n         // Vtable loads are invariant.\n         bx.set_invariant_load(ptr);"}, {"sha": "75999225c031d2a071b7416a6c79d90f26e1f632", "filename": "compiler/rustc_codegen_ssa/src/mir/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77e5e17231af060cc5ab17ec63494064ecc51076/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e5e17231af060cc5ab17ec63494064ecc51076/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs?ref=77e5e17231af060cc5ab17ec63494064ecc51076", "patch": "@@ -116,9 +116,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 OperandRef::from_const(bx, value, ret_ty).immediate_or_packed_pair(bx)\n             }\n             sym::offset => {\n+                let ty = substs.type_at(0);\n+                let layout = bx.layout_of(ty);\n                 let ptr = args[0].immediate();\n                 let offset = args[1].immediate();\n-                bx.inbounds_gep(ptr, &[offset])\n+                bx.inbounds_gep(bx.backend_type(layout), ptr, &[offset])\n             }\n             sym::arith_offset => {\n                 let ty = substs.type_at(0);"}, {"sha": "20be46606a0aad771c585580ccfeaa0f881843a6", "filename": "compiler/rustc_codegen_ssa/src/mir/place.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77e5e17231af060cc5ab17ec63494064ecc51076/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e5e17231af060cc5ab17ec63494064ecc51076/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs?ref=77e5e17231af060cc5ab17ec63494064ecc51076", "patch": "@@ -384,7 +384,11 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n         };\n \n         PlaceRef {\n-            llval: bx.inbounds_gep(self.llval, &[bx.cx().const_usize(0), llindex]),\n+            llval: bx.inbounds_gep(\n+                bx.cx().backend_type(self.layout),\n+                self.llval,\n+                &[bx.cx().const_usize(0), llindex],\n+            ),\n             llextra: None,\n             layout,\n             align: self.align.restrict_for_offset(offset),"}, {"sha": "cbb401c63d152246e33fef5f12e40ab4281a6fc9", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/77e5e17231af060cc5ab17ec63494064ecc51076/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e5e17231af060cc5ab17ec63494064ecc51076/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=77e5e17231af060cc5ab17ec63494064ecc51076", "patch": "@@ -636,7 +636,14 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::BinOp::BitOr => bx.or(lhs, rhs),\n             mir::BinOp::BitAnd => bx.and(lhs, rhs),\n             mir::BinOp::BitXor => bx.xor(lhs, rhs),\n-            mir::BinOp::Offset => bx.inbounds_gep(lhs, &[rhs]),\n+            mir::BinOp::Offset => {\n+                let pointee_type = input_ty\n+                    .builtin_deref(true)\n+                    .unwrap_or_else(|| bug!(\"deref of non-pointer {:?}\", input_ty))\n+                    .ty;\n+                let llty = bx.cx().backend_type(bx.cx().layout_of(pointee_type));\n+                bx.inbounds_gep(llty, lhs, &[rhs])\n+            }\n             mir::BinOp::Shl => common::build_unchecked_lshift(bx, lhs, rhs),\n             mir::BinOp::Shr => common::build_unchecked_rshift(bx, input_ty, lhs, rhs),\n             mir::BinOp::Ne"}, {"sha": "f2c523148530f63cb5de677db401cbc15490bc11", "filename": "compiler/rustc_codegen_ssa/src/traits/builder.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/77e5e17231af060cc5ab17ec63494064ecc51076/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e5e17231af060cc5ab17ec63494064ecc51076/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs?ref=77e5e17231af060cc5ab17ec63494064ecc51076", "patch": "@@ -177,7 +177,12 @@ pub trait BuilderMethods<'a, 'tcx>:\n     );\n \n     fn gep(&mut self, ty: Self::Type, ptr: Self::Value, indices: &[Self::Value]) -> Self::Value;\n-    fn inbounds_gep(&mut self, ptr: Self::Value, indices: &[Self::Value]) -> Self::Value;\n+    fn inbounds_gep(\n+        &mut self,\n+        ty: Self::Type,\n+        ptr: Self::Value,\n+        indices: &[Self::Value],\n+    ) -> Self::Value;\n     fn struct_gep(&mut self, ty: Self::Type, ptr: Self::Value, idx: u64) -> Self::Value;\n \n     fn trunc(&mut self, val: Self::Value, dest_ty: Self::Type) -> Self::Value;"}]}