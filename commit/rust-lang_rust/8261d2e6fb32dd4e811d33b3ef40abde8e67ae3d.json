{"sha": "8261d2e6fb32dd4e811d33b3ef40abde8e67ae3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNjFkMmU2ZmIzMmRkNGU4MTFkMzNiM2VmNDBhYmRlOGU2N2FlM2Q=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-06T00:22:02Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-06T00:22:02Z"}, "message": "stdlib: Add filter_map to ivec", "tree": {"sha": "0bbf6755d2a7c70b490fedc2dd211855db879158", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bbf6755d2a7c70b490fedc2dd211855db879158"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8261d2e6fb32dd4e811d33b3ef40abde8e67ae3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8261d2e6fb32dd4e811d33b3ef40abde8e67ae3d", "html_url": "https://github.com/rust-lang/rust/commit/8261d2e6fb32dd4e811d33b3ef40abde8e67ae3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8261d2e6fb32dd4e811d33b3ef40abde8e67ae3d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee5d7bbc86b63015089a4907afc4c20c1c0559c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee5d7bbc86b63015089a4907afc4c20c1c0559c9", "html_url": "https://github.com/rust-lang/rust/commit/ee5d7bbc86b63015089a4907afc4c20c1c0559c9"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "14c5dda83b318ddac2b95f685da2654951f08b5f", "filename": "src/lib/ivec.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8261d2e6fb32dd4e811d33b3ef40abde8e67ae3d/src%2Flib%2Fivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8261d2e6fb32dd4e811d33b3ef40abde8e67ae3d/src%2Flib%2Fivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fivec.rs?ref=8261d2e6fb32dd4e811d33b3ef40abde8e67ae3d", "patch": "@@ -171,6 +171,18 @@ fn map[T,U](fn(&T)->U f, &T[mutable?] v) -> U[] {\n     ret result;\n }\n \n+fn filter_map[T,U](fn(&T)->option::t[U] f, &T[mutable?] v) -> U[] {\n+    auto result = ~[];\n+    for (T elem in v) {\n+        auto elem2 = elem;  // satisfies alias checker\n+        alt (f(elem2)) {\n+          case (none) { /* no-op */ }\n+          case (some(?result_elem)) { result += ~[result_elem]; }\n+        }\n+    }\n+    ret result;\n+}\n+\n fn any[T](fn(&T)->bool f, &T[] v) -> bool {\n     for (T elem in v) { if (f(elem)) { ret true; } }\n     ret false;"}, {"sha": "6949e32b5a0e2d54a4e91eace913c0471511b83f", "filename": "src/test/run-pass/lib-ivec.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8261d2e6fb32dd4e811d33b3ef40abde8e67ae3d/src%2Ftest%2Frun-pass%2Flib-ivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8261d2e6fb32dd4e811d33b3ef40abde8e67ae3d/src%2Ftest%2Frun-pass%2Flib-ivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-ivec.rs?ref=8261d2e6fb32dd4e811d33b3ef40abde8e67ae3d", "patch": "@@ -2,6 +2,7 @@\n \n use std;\n import std::ivec;\n+import std::option;\n import std::option::none;\n import std::option::some;\n \n@@ -11,6 +12,10 @@ fn square_alias(&uint n) -> uint { ret n * n; }\n \n pred is_three(&uint n) -> bool { ret n == 3u; }\n \n+fn square_if_odd(&uint n) -> option::t[uint] {\n+    ret if (n % 2u == 1u) { some(n * n) } else { none };\n+}\n+\n fn test_reserve_and_on_heap() {\n     let int[] v = ~[ 1, 2 ];\n     assert (!ivec::on_heap(v));\n@@ -188,6 +193,23 @@ fn test_map() {\n     assert (w.(4) == 25u);\n }\n \n+fn test_filter_map() {\n+    // Test on-stack filter-map.\n+    auto v = ~[ 1u, 2u, 3u ];\n+    auto w = ivec::filter_map(square_if_odd, v);\n+    assert (ivec::len(w) == 2u);\n+    assert (w.(0) == 1u);\n+    assert (w.(1) == 9u);\n+\n+    // Test on-heap filter-map.\n+    v = ~[ 1u, 2u, 3u, 4u, 5u ];\n+    w = ivec::filter_map(square_if_odd, v);\n+    assert (ivec::len(w) == 3u);\n+    assert (w.(0) == 1u);\n+    assert (w.(1) == 9u);\n+    assert (w.(2) == 25u);\n+}\n+\n fn test_any_and_all() {\n     assert (ivec::any(is_three, ~[ 1u, 2u, 3u ]));\n     assert (!ivec::any(is_three, ~[ 0u, 1u, 2u ]));\n@@ -220,6 +242,7 @@ fn main() {\n \n     // Functional utilities\n     test_map();\n+    test_filter_map();\n     test_any_and_all();\n }\n "}]}