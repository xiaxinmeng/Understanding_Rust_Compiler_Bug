{"sha": "ce0f7baf5651606c706b7014b5abdaa930cf2600", "node_id": "C_kwDOAAsO6NoAKGNlMGY3YmFmNTY1MTYwNmM3MDZiNzAxNGI1YWJkYWE5MzBjZjI2MDA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-08T07:54:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-08T07:54:30Z"}, "message": "Auto merge of #91512 - scottmcm:array-intoiter-advance, r=Mark-Simulacrum\n\nOverride `Iterator::advance(_back)_by` for `array::IntoIter`\n\nBecause I happened to notice that `nth` is currently getting codegen'd as a loop even for `Copy` types: <https://rust.godbolt.org/z/fPqv7Gvs7>\n\n<details>\n<summary>LLVM before and after</summary>\n\nRust:\n\n```rust\n#[no_mangle]\npub fn array_intoiter_nth(it: &mut std::array::IntoIter<i32, 100>, n: usize) -> Option<i32> {\n    it.nth(n)\n}\n```\n\nCurrent nightly:\n```llvmir\ndefine { i32, i32 } `@array_intoiter_nth(%\"core::array::iter::IntoIter<i32,` 100_usize>\"* noalias nocapture align 8 dereferenceable(416) %it, i64 %n) unnamed_addr #0 personality i32 (i32, i32, i64, %\"unwind::libunwind::_Unwind_Exception\"*, %\"unwind::libunwind::_Unwind_Context\"*)* `@rust_eh_personality` !dbg !6 {\nstart:\n  %_3.i.i.i4.i.i = getelementptr inbounds %\"core::array::iter::IntoIter<i32, 100_usize>\", %\"core::array::iter::IntoIter<i32, 100_usize>\"* %it, i64 0, i32 0, i32 0\n  %_4.i.i.i5.i.i = getelementptr inbounds %\"core::array::iter::IntoIter<i32, 100_usize>\", %\"core::array::iter::IntoIter<i32, 100_usize>\"* %it, i64 0, i32 0, i32 1\n  %_4.i.i.i.i.i.i = load i64, i64* %_4.i.i.i5.i.i, align 8, !alias.scope !10\n  %.not.i.i = icmp eq i64 %n, 0, !dbg !15\n  %_3.i.i.i.i.pre.i = load i64, i64* %_3.i.i.i4.i.i, align 8, !dbg !40, !alias.scope !41\n  br i1 %.not.i.i, label %bb4.i, label %bb4.preheader.i.i, !dbg !42\n\nbb4.preheader.i.i:                                ; preds = %start\n  %umax.i = tail call i64 `@llvm.umax.i64(i64` %_3.i.i.i.i.pre.i, i64 %_4.i.i.i.i.i.i) #3, !dbg !43\n  %0 = sub i64 %umax.i, %_3.i.i.i.i.pre.i, !dbg !43\n  br label %bb4.i.i, !dbg !43\n\nbb4.i.i:                                          ; preds = %bb3.i.i.i.i, %bb4.preheader.i.i\n  %_3.i.i.i.i.i.i = phi i64 [ %2, %bb3.i.i.i.i ], [ %_3.i.i.i.i.pre.i, %bb4.preheader.i.i ], !dbg !52\n  %iter.sroa.0.016.i.i = phi i64 [ %1, %bb3.i.i.i.i ], [ 0, %bb4.preheader.i.i ]\n  %1 = add nuw i64 %iter.sroa.0.016.i.i, 1, !dbg !54\n  %exitcond.not.i = icmp eq i64 %iter.sroa.0.016.i.i, %0, !dbg !52\n  br i1 %exitcond.not.i, label %core::iter::traits::iterator::Iterator::nth.exit, label %bb3.i.i.i.i, !dbg !43\n\nbb3.i.i.i.i:                                      ; preds = %bb4.i.i\n  %2 = add nuw i64 %_3.i.i.i.i.i.i, 1, !dbg !63\n  store i64 %2, i64* %_3.i.i.i4.i.i, align 8, !dbg !66, !alias.scope !75\n  %exitcond.not.i.i = icmp eq i64 %1, %n, !dbg !15\n  br i1 %exitcond.not.i.i, label %bb4.i, label %bb4.i.i, !dbg !42\n\nbb4.i:                                            ; preds = %bb3.i.i.i.i, %start\n  %_3.i.i.i.i.i = phi i64 [ %_3.i.i.i.i.pre.i, %start ], [ %2, %bb3.i.i.i.i ], !dbg !84\n  %3 = icmp ult i64 %_3.i.i.i.i.i, %_4.i.i.i.i.i.i, !dbg !84\n  br i1 %3, label %bb3.i.i.i, label %core::iter::traits::iterator::Iterator::nth.exit, !dbg !89\n\nbb3.i.i.i:                                        ; preds = %bb4.i\n  %4 = add nuw i64 %_3.i.i.i.i.i, 1, !dbg !90\n  store i64 %4, i64* %_3.i.i.i4.i.i, align 8, !dbg !93, !alias.scope !96\n  %5 = getelementptr inbounds %\"core::array::iter::IntoIter<i32, 100_usize>\", %\"core::array::iter::IntoIter<i32, 100_usize>\"* %it, i64 0, i32 1, i64 %_3.i.i.i.i.i, !dbg !105\n  %6 = load i32, i32* %5, align 4, !dbg !131, !alias.scope !141, !noalias !144\n  br label %core::iter::traits::iterator::Iterator::nth.exit, !dbg !149\n\ncore::iter::traits::iterator::Iterator::nth.exit: ; preds = %bb4.i.i, %bb4.i, %bb3.i.i.i\n  %.sroa.3.0.i = phi i32 [ %6, %bb3.i.i.i ], [ undef, %bb4.i ], [ undef, %bb4.i.i ], !dbg !40\n  %.sroa.0.0.i = phi i32 [ 1, %bb3.i.i.i ], [ 0, %bb4.i ], [ 0, %bb4.i.i ], !dbg !40\n  %7 = insertvalue { i32, i32 } undef, i32 %.sroa.0.0.i, 0, !dbg !150\n  %8 = insertvalue { i32, i32 } %7, i32 %.sroa.3.0.i, 1, !dbg !150\n  ret { i32, i32 } %8, !dbg !151\n}\n```\n\nWith this PR:\n```llvmir\ndefine { i32, i32 } `@array_intoiter_nth(%\"core::array::iter::IntoIter<i32,` 100_usize>\"* noalias nocapture align 8 dereferenceable(416) %it, i64 %n) unnamed_addr #0 personality i32 (...)* `@__CxxFrameHandler3` {\nstart:\n  %0 = getelementptr inbounds %\"core::array::iter::IntoIter<i32, 100_usize>\", %\"core::array::iter::IntoIter<i32, 100_usize>\"* %it, i64 0, i32 0, i32 1\n  %_2.i.i.i.i = load i64, i64* %0, align 8, !alias.scope !6, !noalias !13\n  %1 = getelementptr inbounds %\"core::array::iter::IntoIter<i32, 100_usize>\", %\"core::array::iter::IntoIter<i32, 100_usize>\"* %it, i64 0, i32 0, i32 0\n  %_3.i.i.i.i = load i64, i64* %1, align 8, !alias.scope !16\n  %2 = sub i64 %_2.i.i.i.i, %_3.i.i.i.i\n  %3 = icmp ult i64 %2, %n\n  %.0.sroa.speculated.i.i.i.i.i = select i1 %3, i64 %2, i64 %n\n  %_10.i.i = add i64 %.0.sroa.speculated.i.i.i.i.i, %_3.i.i.i.i\n  store i64 %_10.i.i, i64* %1, align 8, !alias.scope !16\n  %.not.i = xor i1 %3, true\n  %4 = icmp ult i64 %_10.i.i, %_2.i.i.i.i\n  %or.cond.i = select i1 %.not.i, i1 %4, i1 false\n  br i1 %or.cond.i, label %bb3.i.i.i, label %_ZN4core4iter6traits8iterator8Iterator3nth17hcbc727011e9e2a3bE.exit\n\nbb3.i.i.i:                                        ; preds = %start\n  %5 = add nuw i64 %_10.i.i, 1\n  store i64 %5, i64* %1, align 8, !alias.scope !17\n  %6 = getelementptr inbounds %\"core::array::iter::IntoIter<i32, 100_usize>\", %\"core::array::iter::IntoIter<i32, 100_usize>\"* %it, i64 0, i32 1, i64 %_10.i.i\n  %7 = load i32, i32* %6, align 4, !alias.scope !26, !noalias !29\n  br label %_ZN4core4iter6traits8iterator8Iterator3nth17hcbc727011e9e2a3bE.exit\n\n_ZN4core4iter6traits8iterator8Iterator3nth17hcbc727011e9e2a3bE.exit: ; preds = %start, %bb3.i.i.i\n  %.sroa.3.0.i = phi i32 [ undef, %start ], [ %7, %bb3.i.i.i ]\n  %.sroa.0.0.i = phi i32 [ 0, %start ], [ 1, %bb3.i.i.i ]\n  %8 = insertvalue { i32, i32 } undef, i32 %.sroa.0.0.i, 0\n  %9 = insertvalue { i32, i32 } %8, i32 %.sroa.3.0.i, 1\n  ret { i32, i32 } %9\n}\n```\n</details>", "tree": {"sha": "1061051afbbb7d1679e772f07c2a05845d445b5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1061051afbbb7d1679e772f07c2a05845d445b5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce0f7baf5651606c706b7014b5abdaa930cf2600", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce0f7baf5651606c706b7014b5abdaa930cf2600", "html_url": "https://github.com/rust-lang/rust/commit/ce0f7baf5651606c706b7014b5abdaa930cf2600", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce0f7baf5651606c706b7014b5abdaa930cf2600/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abba5edf480f8ba6be4aa8791bd343dd12efb969", "url": "https://api.github.com/repos/rust-lang/rust/commits/abba5edf480f8ba6be4aa8791bd343dd12efb969", "html_url": "https://github.com/rust-lang/rust/commit/abba5edf480f8ba6be4aa8791bd343dd12efb969"}, {"sha": "eb846dbaca87f156419724e77fd52eb91ca01161", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb846dbaca87f156419724e77fd52eb91ca01161", "html_url": "https://github.com/rust-lang/rust/commit/eb846dbaca87f156419724e77fd52eb91ca01161"}], "stats": {"total": 150, "additions": 149, "deletions": 1}, "files": [{"sha": "72a634443e8776034552e2a0decd3f03d7b6ec90", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ce0f7baf5651606c706b7014b5abdaa930cf2600/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce0f7baf5651606c706b7014b5abdaa930cf2600/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=ce0f7baf5651606c706b7014b5abdaa930cf2600", "patch": "@@ -1,7 +1,7 @@\n //! Defines the `IntoIter` owned iterator for arrays.\n \n use crate::{\n-    fmt,\n+    cmp, fmt,\n     iter::{self, ExactSizeIterator, FusedIterator, TrustedLen},\n     mem::{self, MaybeUninit},\n     ops::Range,\n@@ -281,6 +281,27 @@ impl<T, const N: usize> Iterator for IntoIter<T, N> {\n     fn last(mut self) -> Option<Self::Item> {\n         self.next_back()\n     }\n+\n+    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+        let len = self.len();\n+\n+        // The number of elements to drop.  Always in-bounds by construction.\n+        let delta = cmp::min(n, len);\n+\n+        let range_to_drop = self.alive.start..(self.alive.start + delta);\n+\n+        // Moving the start marks them as conceptually \"dropped\", so if anything\n+        // goes bad then our drop impl won't double-free them.\n+        self.alive.start += delta;\n+\n+        // SAFETY: These elements are currently initialized, so it's fine to drop them.\n+        unsafe {\n+            let slice = self.data.get_unchecked_mut(range_to_drop);\n+            ptr::drop_in_place(MaybeUninit::slice_assume_init_mut(slice));\n+        }\n+\n+        if n > len { Err(len) } else { Ok(()) }\n+    }\n }\n \n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n@@ -301,6 +322,27 @@ impl<T, const N: usize> DoubleEndedIterator for IntoIter<T, N> {\n             unsafe { self.data.get_unchecked(idx).assume_init_read() }\n         })\n     }\n+\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+        let len = self.len();\n+\n+        // The number of elements to drop.  Always in-bounds by construction.\n+        let delta = cmp::min(n, len);\n+\n+        let range_to_drop = (self.alive.end - delta)..self.alive.end;\n+\n+        // Moving the end marks them as conceptually \"dropped\", so if anything\n+        // goes bad then our drop impl won't double-free them.\n+        self.alive.end -= delta;\n+\n+        // SAFETY: These elements are currently initialized, so it's fine to drop them.\n+        unsafe {\n+            let slice = self.data.get_unchecked_mut(range_to_drop);\n+            ptr::drop_in_place(MaybeUninit::slice_assume_init_mut(slice));\n+        }\n+\n+        if n > len { Err(len) } else { Ok(()) }\n+    }\n }\n \n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]"}, {"sha": "d212a3a3a05da89594203376d7e4396e9582a3c4", "filename": "library/core/tests/array.rs", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/ce0f7baf5651606c706b7014b5abdaa930cf2600/library%2Fcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce0f7baf5651606c706b7014b5abdaa930cf2600/library%2Fcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Farray.rs?ref=ce0f7baf5651606c706b7014b5abdaa930cf2600", "patch": "@@ -474,3 +474,109 @@ fn array_split_array_mut_out_of_bounds() {\n \n     v.split_array_mut::<7>();\n }\n+\n+#[test]\n+fn array_intoiter_advance_by() {\n+    use std::cell::Cell;\n+    struct DropCounter<'a>(usize, &'a Cell<usize>);\n+    impl Drop for DropCounter<'_> {\n+        fn drop(&mut self) {\n+            let x = self.1.get();\n+            self.1.set(x + 1);\n+        }\n+    }\n+\n+    let counter = Cell::new(0);\n+    let a: [_; 100] = std::array::from_fn(|i| DropCounter(i, &counter));\n+    let mut it = IntoIterator::into_iter(a);\n+\n+    let r = it.advance_by(1);\n+    assert_eq!(r, Ok(()));\n+    assert_eq!(it.len(), 99);\n+    assert_eq!(counter.get(), 1);\n+\n+    let r = it.advance_by(0);\n+    assert_eq!(r, Ok(()));\n+    assert_eq!(it.len(), 99);\n+    assert_eq!(counter.get(), 1);\n+\n+    let r = it.advance_by(11);\n+    assert_eq!(r, Ok(()));\n+    assert_eq!(it.len(), 88);\n+    assert_eq!(counter.get(), 12);\n+\n+    let x = it.next();\n+    assert_eq!(x.as_ref().map(|x| x.0), Some(12));\n+    assert_eq!(it.len(), 87);\n+    assert_eq!(counter.get(), 12);\n+    drop(x);\n+    assert_eq!(counter.get(), 13);\n+\n+    let r = it.advance_by(123456);\n+    assert_eq!(r, Err(87));\n+    assert_eq!(it.len(), 0);\n+    assert_eq!(counter.get(), 100);\n+\n+    let r = it.advance_by(0);\n+    assert_eq!(r, Ok(()));\n+    assert_eq!(it.len(), 0);\n+    assert_eq!(counter.get(), 100);\n+\n+    let r = it.advance_by(10);\n+    assert_eq!(r, Err(0));\n+    assert_eq!(it.len(), 0);\n+    assert_eq!(counter.get(), 100);\n+}\n+\n+#[test]\n+fn array_intoiter_advance_back_by() {\n+    use std::cell::Cell;\n+    struct DropCounter<'a>(usize, &'a Cell<usize>);\n+    impl Drop for DropCounter<'_> {\n+        fn drop(&mut self) {\n+            let x = self.1.get();\n+            self.1.set(x + 1);\n+        }\n+    }\n+\n+    let counter = Cell::new(0);\n+    let a: [_; 100] = std::array::from_fn(|i| DropCounter(i, &counter));\n+    let mut it = IntoIterator::into_iter(a);\n+\n+    let r = it.advance_back_by(1);\n+    assert_eq!(r, Ok(()));\n+    assert_eq!(it.len(), 99);\n+    assert_eq!(counter.get(), 1);\n+\n+    let r = it.advance_back_by(0);\n+    assert_eq!(r, Ok(()));\n+    assert_eq!(it.len(), 99);\n+    assert_eq!(counter.get(), 1);\n+\n+    let r = it.advance_back_by(11);\n+    assert_eq!(r, Ok(()));\n+    assert_eq!(it.len(), 88);\n+    assert_eq!(counter.get(), 12);\n+\n+    let x = it.next_back();\n+    assert_eq!(x.as_ref().map(|x| x.0), Some(87));\n+    assert_eq!(it.len(), 87);\n+    assert_eq!(counter.get(), 12);\n+    drop(x);\n+    assert_eq!(counter.get(), 13);\n+\n+    let r = it.advance_back_by(123456);\n+    assert_eq!(r, Err(87));\n+    assert_eq!(it.len(), 0);\n+    assert_eq!(counter.get(), 100);\n+\n+    let r = it.advance_back_by(0);\n+    assert_eq!(r, Ok(()));\n+    assert_eq!(it.len(), 0);\n+    assert_eq!(counter.get(), 100);\n+\n+    let r = it.advance_back_by(10);\n+    assert_eq!(r, Err(0));\n+    assert_eq!(it.len(), 0);\n+    assert_eq!(counter.get(), 100);\n+}"}]}