{"sha": "d7b9e195c2df9e576abd2eba54f3fe6516619054", "node_id": "C_kwDOAAsO6NoAKGQ3YjllMTk1YzJkZjllNTc2YWJkMmViYTU0ZjNmZTY1MTY2MTkwNTQ", "commit": {"author": {"name": "Lukas Lueg", "email": "lukas.lueg@gmail.com", "date": "2022-12-17T13:16:45Z"}, "committer": {"name": "Lukas Lueg", "email": "lukas.lueg@gmail.com", "date": "2022-12-24T22:39:54Z"}, "message": "Add size_of_ref lint\n\nFixes #9995", "tree": {"sha": "752a4a4772635238132d3a2bc58960ed6f01d04b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/752a4a4772635238132d3a2bc58960ed6f01d04b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7b9e195c2df9e576abd2eba54f3fe6516619054", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7b9e195c2df9e576abd2eba54f3fe6516619054", "html_url": "https://github.com/rust-lang/rust/commit/d7b9e195c2df9e576abd2eba54f3fe6516619054", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7b9e195c2df9e576abd2eba54f3fe6516619054/comments", "author": {"login": "lukaslueg", "id": 3148704, "node_id": "MDQ6VXNlcjMxNDg3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3148704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaslueg", "html_url": "https://github.com/lukaslueg", "followers_url": "https://api.github.com/users/lukaslueg/followers", "following_url": "https://api.github.com/users/lukaslueg/following{/other_user}", "gists_url": "https://api.github.com/users/lukaslueg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaslueg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaslueg/subscriptions", "organizations_url": "https://api.github.com/users/lukaslueg/orgs", "repos_url": "https://api.github.com/users/lukaslueg/repos", "events_url": "https://api.github.com/users/lukaslueg/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaslueg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lukaslueg", "id": 3148704, "node_id": "MDQ6VXNlcjMxNDg3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3148704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaslueg", "html_url": "https://github.com/lukaslueg", "followers_url": "https://api.github.com/users/lukaslueg/followers", "following_url": "https://api.github.com/users/lukaslueg/following{/other_user}", "gists_url": "https://api.github.com/users/lukaslueg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaslueg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaslueg/subscriptions", "organizations_url": "https://api.github.com/users/lukaslueg/orgs", "repos_url": "https://api.github.com/users/lukaslueg/repos", "events_url": "https://api.github.com/users/lukaslueg/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaslueg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a09068f878334c73a5a1fbfc455931593f1564e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a09068f878334c73a5a1fbfc455931593f1564e", "html_url": "https://github.com/rust-lang/rust/commit/4a09068f878334c73a5a1fbfc455931593f1564e"}], "stats": {"total": 131, "additions": 131, "deletions": 0}, "files": [{"sha": "02f3188f8be08209dfb700b07c7ceffe2ebd7670", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7b9e195c2df9e576abd2eba54f3fe6516619054/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7b9e195c2df9e576abd2eba54f3fe6516619054/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=d7b9e195c2df9e576abd2eba54f3fe6516619054", "patch": "@@ -4547,6 +4547,7 @@ Released 2018-09-13\n [`single_match`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_match\n [`single_match_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else\n [`size_of_in_element_count`]: https://rust-lang.github.io/rust-clippy/master/index.html#size_of_in_element_count\n+[`size_of_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#size_of_ref\n [`skip_while_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#skip_while_next\n [`slow_vector_initialization`]: https://rust-lang.github.io/rust-clippy/master/index.html#slow_vector_initialization\n [`stable_sort_primitive`]: https://rust-lang.github.io/rust-clippy/master/index.html#stable_sort_primitive"}, {"sha": "2982460c9cfa49b6d2a4850eae3edd85a3daaa4f", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7b9e195c2df9e576abd2eba54f3fe6516619054/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b9e195c2df9e576abd2eba54f3fe6516619054/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=d7b9e195c2df9e576abd2eba54f3fe6516619054", "patch": "@@ -537,6 +537,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::single_char_lifetime_names::SINGLE_CHAR_LIFETIME_NAMES_INFO,\n     crate::single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS_INFO,\n     crate::size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT_INFO,\n+    crate::size_of_ref::SIZE_OF_REF_INFO,\n     crate::slow_vector_initialization::SLOW_VECTOR_INITIALIZATION_INFO,\n     crate::std_instead_of_core::ALLOC_INSTEAD_OF_CORE_INFO,\n     crate::std_instead_of_core::STD_INSTEAD_OF_ALLOC_INFO,"}, {"sha": "ccd89b77858028dc8b93ae5931e69cded7ace9e9", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b9e195c2df9e576abd2eba54f3fe6516619054/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b9e195c2df9e576abd2eba54f3fe6516619054/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=d7b9e195c2df9e576abd2eba54f3fe6516619054", "patch": "@@ -265,6 +265,7 @@ mod shadow;\n mod single_char_lifetime_names;\n mod single_component_path_imports;\n mod size_of_in_element_count;\n+mod size_of_ref;\n mod slow_vector_initialization;\n mod std_instead_of_core;\n mod strings;\n@@ -906,6 +907,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(semicolon_block::SemicolonBlock));\n     store.register_late_pass(|_| Box::new(fn_null_check::FnNullCheck));\n     store.register_late_pass(|_| Box::new(permissions_set_readonly_false::PermissionsSetReadonlyFalse));\n+    store.register_late_pass(|_| Box::new(size_of_ref::SizeOfRef));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "3fcdb4288ce6deb1cdc5f89f8f38895545d17ba1", "filename": "clippy_lints/src/size_of_ref.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/d7b9e195c2df9e576abd2eba54f3fe6516619054/clippy_lints%2Fsrc%2Fsize_of_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b9e195c2df9e576abd2eba54f3fe6516619054/clippy_lints%2Fsrc%2Fsize_of_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsize_of_ref.rs?ref=d7b9e195c2df9e576abd2eba54f3fe6516619054", "patch": "@@ -0,0 +1,73 @@\n+use clippy_utils::{diagnostics::span_lint_and_help, path_def_id, ty::peel_mid_ty_refs};\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Checks for calls to `std::mem::size_of_val()` where the argument is\n+    /// a reference to a reference.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// Calling `size_of_val()` with a reference to a reference as the argument\n+    /// yields the size of the reference-type, not the size of the value behind\n+    /// the reference.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// struct Foo {\n+    ///     buffer: [u8],\n+    /// }\n+    ///\n+    /// impl Foo {\n+    ///     fn size(&self) -> usize {\n+    ///         // Note that `&self` as an argument is a `&&Foo`: Because `self`\n+    ///         // is already a reference, `&self` is a double-reference.\n+    ///         // The return value of `size_of_val()` therefor is the\n+    ///         // size of the reference-type, not the size of `self`.\n+    ///         std::mem::size_of_val(&self)\n+    ///     }\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// struct Foo {\n+    ///     buffer: [u8],\n+    /// }\n+    ///\n+    /// impl Foo {\n+    ///     fn size(&self) -> usize {\n+    ///         // Correct\n+    ///         std::mem::size_of_val(self)\n+    ///     }\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.67.0\"]\n+    pub SIZE_OF_REF,\n+    suspicious,\n+    \"Argument to `std::mem::size_of_val()` is a double-reference, which is almost certainly unintended\"\n+}\n+declare_lint_pass!(SizeOfRef => [SIZE_OF_REF]);\n+\n+impl LateLintPass<'_> for SizeOfRef {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'_ Expr<'_>) {\n+        if let ExprKind::Call(path, [arg]) = expr.kind\n+            && let Some(def_id) = path_def_id(cx, path)\n+            && cx.tcx.is_diagnostic_item(sym::mem_size_of_val, def_id)\n+            && let arg_ty = cx.typeck_results().expr_ty(arg)\n+            && peel_mid_ty_refs(arg_ty).1 > 1\n+        {\n+            span_lint_and_help(\n+                cx,\n+                SIZE_OF_REF,\n+                expr.span,\n+                \"argument to `std::mem::size_of_val()` is a reference to a reference\",\n+                None,\n+                \"dereference the argument to `std::mem::size_of_val()` to get the size of the value instead of the size of the reference-type\",\n+            );\n+        }\n+    }\n+}"}, {"sha": "1e83ab82907d39d5416f0ca230ec3144506c9ef6", "filename": "tests/ui/size_of_ref.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d7b9e195c2df9e576abd2eba54f3fe6516619054/tests%2Fui%2Fsize_of_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b9e195c2df9e576abd2eba54f3fe6516619054/tests%2Fui%2Fsize_of_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsize_of_ref.rs?ref=d7b9e195c2df9e576abd2eba54f3fe6516619054", "patch": "@@ -0,0 +1,27 @@\n+#![allow(unused)]\n+#![warn(clippy::size_of_ref)]\n+\n+use std::mem::size_of_val;\n+\n+fn main() {\n+    let x = 5;\n+    let y = &x;\n+\n+    size_of_val(&x); // no lint\n+    size_of_val(y); // no lint\n+\n+    size_of_val(&&x);\n+    size_of_val(&y);\n+}\n+\n+struct S {\n+    field: u32,\n+    data: Vec<u8>,\n+}\n+\n+impl S {\n+    /// Get size of object including `self`, in bytes.\n+    pub fn size(&self) -> usize {\n+        std::mem::size_of_val(&self) + (std::mem::size_of::<u8>() * self.data.capacity())\n+    }\n+}"}, {"sha": "d4c13ac3290b6fc2a96b6079ce244cc70f78f3e5", "filename": "tests/ui/size_of_ref.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d7b9e195c2df9e576abd2eba54f3fe6516619054/tests%2Fui%2Fsize_of_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7b9e195c2df9e576abd2eba54f3fe6516619054/tests%2Fui%2Fsize_of_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsize_of_ref.stderr?ref=d7b9e195c2df9e576abd2eba54f3fe6516619054", "patch": "@@ -0,0 +1,27 @@\n+error: argument to `std::mem::size_of_val()` is a reference to a reference\n+  --> $DIR/size_of_ref.rs:13:5\n+   |\n+LL |     size_of_val(&&x);\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = help: dereference the argument to `std::mem::size_of_val()` to get the size of the value instead of the size of the reference-type\n+   = note: `-D clippy::size-of-ref` implied by `-D warnings`\n+\n+error: argument to `std::mem::size_of_val()` is a reference to a reference\n+  --> $DIR/size_of_ref.rs:14:5\n+   |\n+LL |     size_of_val(&y);\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = help: dereference the argument to `std::mem::size_of_val()` to get the size of the value instead of the size of the reference-type\n+\n+error: argument to `std::mem::size_of_val()` is a reference to a reference\n+  --> $DIR/size_of_ref.rs:25:9\n+   |\n+LL |         std::mem::size_of_val(&self) + (std::mem::size_of::<u8>() * self.data.capacity())\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: dereference the argument to `std::mem::size_of_val()` to get the size of the value instead of the size of the reference-type\n+\n+error: aborting due to 3 previous errors\n+"}]}