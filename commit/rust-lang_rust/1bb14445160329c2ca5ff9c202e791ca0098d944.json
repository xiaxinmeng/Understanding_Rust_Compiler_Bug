{"sha": "1bb14445160329c2ca5ff9c202e791ca0098d944", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiYjE0NDQ1MTYwMzI5YzJjYTVmZjljMjAyZTc5MWNhMDA5OGQ5NDQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-08-14T08:16:28Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-08-14T08:16:28Z"}, "message": "Get rid of the .note interpretation of rustc dylib metadata.", "tree": {"sha": "294f0d205ff532b6f27584368715551f0c9b8e91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/294f0d205ff532b6f27584368715551f0c9b8e91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bb14445160329c2ca5ff9c202e791ca0098d944", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bb14445160329c2ca5ff9c202e791ca0098d944", "html_url": "https://github.com/rust-lang/rust/commit/1bb14445160329c2ca5ff9c202e791ca0098d944", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bb14445160329c2ca5ff9c202e791ca0098d944/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02aec40dc9c0f67c60a1ec353d06a88b63387d9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/02aec40dc9c0f67c60a1ec353d06a88b63387d9b", "html_url": "https://github.com/rust-lang/rust/commit/02aec40dc9c0f67c60a1ec353d06a88b63387d9b"}], "stats": {"total": 54, "additions": 28, "deletions": 26}, "files": [{"sha": "cf1dd71a0a12acbc8477f37438d67647dd135f13", "filename": "src/librustc_metadata/loader.rs", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1bb14445160329c2ca5ff9c202e791ca0098d944/src%2Flibrustc_metadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bb14445160329c2ca5ff9c202e791ca0098d944/src%2Flibrustc_metadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Floader.rs?ref=1bb14445160329c2ca5ff9c202e791ca0098d944", "patch": "@@ -867,34 +867,29 @@ fn get_metadata_section_imp(target: &Target, flavor: CrateFlavor, filename: &Pat\n }\n \n pub fn meta_section_name(target: &Target) -> &'static str {\n+    // Historical note:\n+    //\n+    // When using link.exe it was seen that the section name `.note.rustc`\n+    // was getting shortened to `.note.ru`, and according to the PE and COFF\n+    // specification:\n+    //\n+    // > Executable images do not use a string table and do not support\n+    // > section names longer than 8\u00a0characters\n+    //\n+    // https://msdn.microsoft.com/en-us/library/windows/hardware/gg463119.aspx\n+    //\n+    // As a result, we choose a slightly shorter name! As to why\n+    // `.note.rustc` works on MinGW, that's another good question...\n+\n     if target.options.is_like_osx {\n-        \"__DATA,__note.rustc\"\n-    } else if target.options.is_like_msvc {\n-        // When using link.exe it was seen that the section name `.note.rustc`\n-        // was getting shortened to `.note.ru`, and according to the PE and COFF\n-        // specification:\n-        //\n-        // > Executable images do not use a string table and do not support\n-        // > section names longer than 8\u00a0characters\n-        //\n-        // https://msdn.microsoft.com/en-us/library/windows/hardware/gg463119.aspx\n-        //\n-        // As a result, we choose a slightly shorter name! As to why\n-        // `.note.rustc` works on MinGW, that's another good question...\n-        \".rustc\"\n+        \"__DATA,.rustc\"\n     } else {\n-        \".note.rustc\"\n+        \".rustc\"\n     }\n }\n \n-pub fn read_meta_section_name(target: &Target) -> &'static str {\n-    if target.options.is_like_osx {\n-        \"__note.rustc\"\n-    } else if target.options.is_like_msvc {\n-        \".rustc\"\n-    } else {\n-        \".note.rustc\"\n-    }\n+pub fn read_meta_section_name(_target: &Target) -> &'static str {\n+    \".rustc\"\n }\n \n // A diagnostic function for dumping crate metadata to an output stream"}, {"sha": "df893842337c47a36ff4ab851ea951d550737420", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1bb14445160329c2ca5ff9c202e791ca0098d944/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bb14445160329c2ca5ff9c202e791ca0098d944/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=1bb14445160329c2ca5ff9c202e791ca0098d944", "patch": "@@ -2250,10 +2250,17 @@ fn write_metadata(cx: &SharedCrateContext,\n     };\n     unsafe {\n         llvm::LLVMSetInitializer(llglobal, llconst);\n-        let name =\n+        let section_name =\n             cx.tcx().sess.cstore.metadata_section_name(&cx.sess().target.target);\n-        let name = CString::new(name).unwrap();\n-        llvm::LLVMSetSection(llglobal, name.as_ptr())\n+        let name = CString::new(section_name).unwrap();\n+        llvm::LLVMSetSection(llglobal, name.as_ptr());\n+\n+        // Also generate a .section directive to force no\n+        // flags, at least for ELF outputs, so that the\n+        // metadata doesn't get loaded into memory.\n+        let directive = format!(\".section {}\", section_name);\n+        let directive = CString::new(directive).unwrap();\n+        llvm::LLVMSetModuleInlineAsm(cx.metadata_llmod(), directive.as_ptr())\n     }\n     return metadata;\n }"}]}