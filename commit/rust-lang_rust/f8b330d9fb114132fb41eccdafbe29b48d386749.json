{"sha": "f8b330d9fb114132fb41eccdafbe29b48d386749", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YjMzMGQ5ZmIxMTQxMzJmYjQxZWNjZGFmYmUyOWI0OGQzODY3NDk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-09T01:39:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-09T01:39:45Z"}, "message": "Rollup merge of #72209 - Nemo157:lint-no-mangle-in-unsafe-code, r=nikomatsakis\n\nAdd checking for no_mangle to unsafe_code lint\n\nfixes #72188\n\nr? `@estebank`", "tree": {"sha": "6f5d45ca70867fe5af9d2eadd0f93f70c969f9e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f5d45ca70867fe5af9d2eadd0f93f70c969f9e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8b330d9fb114132fb41eccdafbe29b48d386749", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgIefiCRBK7hj4Ov3rIwAAdHIIAKqTK0uP4cMhjZCzoGq6cNFL\nddg0RkvA4/ixZF6M6ptrBSIIGnyannQe5Hcp7vUjCPtupkfYezqJg7m7ymh9jdV8\nM7g9R/RSc3PAAHiZFbPPFLOn3Zy9ficIrSOaxtWwuoxivVHJh1xSHVMwuEm+auxY\ndQvgOh81VAoXtZ4oEvlHkGyCzEAQ6LmaWVK8n1i2aJriRMLcynGMl3DoUFsLSTHe\nmG0cTcaoXBzojNpzVq1bCEApB/Afr1tDkbZNCbZbecVDHZs1I5LypC0ui/EtZFyg\nHponbRC3ebJAOgQPiygsZVHOMZa6PpkIv/1M8YDMAZ3DtkKujIC8bDSJ/tk1yCo=\n=4sXr\n-----END PGP SIGNATURE-----\n", "payload": "tree 6f5d45ca70867fe5af9d2eadd0f93f70c969f9e0\nparent 0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a\nparent fc8a3ad66c7026e782ee54bd3849cc860983b69a\nauthor Dylan DPC <dylan.dpc@gmail.com> 1612834785 +0100\ncommitter GitHub <noreply@github.com> 1612834785 +0100\n\nRollup merge of #72209 - Nemo157:lint-no-mangle-in-unsafe-code, r=nikomatsakis\n\nAdd checking for no_mangle to unsafe_code lint\n\nfixes #72188\n\nr? `@estebank`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8b330d9fb114132fb41eccdafbe29b48d386749", "html_url": "https://github.com/rust-lang/rust/commit/f8b330d9fb114132fb41eccdafbe29b48d386749", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8b330d9fb114132fb41eccdafbe29b48d386749/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a", "html_url": "https://github.com/rust-lang/rust/commit/0fc6756b42e0556cc2e18079f5fc6b4d58f4e81a"}, {"sha": "fc8a3ad66c7026e782ee54bd3849cc860983b69a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc8a3ad66c7026e782ee54bd3849cc860983b69a", "html_url": "https://github.com/rust-lang/rust/commit/fc8a3ad66c7026e782ee54bd3849cc860983b69a"}], "stats": {"total": 179, "additions": 159, "deletions": 20}, "files": [{"sha": "20f581625dc315cb2ab815d2892d2c6541d2a853", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f8b330d9fb114132fb41eccdafbe29b48d386749/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b330d9fb114132fb41eccdafbe29b48d386749/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=f8b330d9fb114132fb41eccdafbe29b48d386749", "patch": "@@ -328,6 +328,18 @@ impl UnsafeCode {\n \n         cx.struct_span_lint(UNSAFE_CODE, span, decorate);\n     }\n+\n+    fn report_overriden_symbol_name(&self, cx: &EarlyContext<'_>, span: Span, msg: &str) {\n+        self.report_unsafe(cx, span, |lint| {\n+            lint.build(msg)\n+                .note(\n+                    \"the linker's behavior with multiple libraries exporting duplicate symbol \\\n+                    names is undefined and Rust cannot provide guarantees when you manually \\\n+                    override them\",\n+                )\n+                .emit();\n+        })\n+    }\n }\n \n impl EarlyLintPass for UnsafeCode {\n@@ -367,6 +379,40 @@ impl EarlyLintPass for UnsafeCode {\n                     lint.build(\"implementation of an `unsafe` trait\").emit()\n                 }),\n \n+            ast::ItemKind::Fn(..) => {\n+                if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::no_mangle) {\n+                    self.report_overriden_symbol_name(\n+                        cx,\n+                        attr.span,\n+                        \"declaration of a `no_mangle` function\",\n+                    );\n+                }\n+                if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::export_name) {\n+                    self.report_overriden_symbol_name(\n+                        cx,\n+                        attr.span,\n+                        \"declaration of a function with `export_name`\",\n+                    );\n+                }\n+            }\n+\n+            ast::ItemKind::Static(..) => {\n+                if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::no_mangle) {\n+                    self.report_overriden_symbol_name(\n+                        cx,\n+                        attr.span,\n+                        \"declaration of a `no_mangle` static\",\n+                    );\n+                }\n+                if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::export_name) {\n+                    self.report_overriden_symbol_name(\n+                        cx,\n+                        attr.span,\n+                        \"declaration of a static with `export_name`\",\n+                    );\n+                }\n+            }\n+\n             _ => {}\n         }\n     }"}, {"sha": "4ac02b51f62fec0e687cab1a9d75eeec6cac2c60", "filename": "src/test/ui/lint/lint-unsafe-code.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f8b330d9fb114132fb41eccdafbe29b48d386749/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b330d9fb114132fb41eccdafbe29b48d386749/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.rs?ref=f8b330d9fb114132fb41eccdafbe29b48d386749", "patch": "@@ -12,14 +12,28 @@ mod allowed_unsafe {\n     unsafe fn also_allowed() {}\n     unsafe trait AllowedUnsafe { }\n     unsafe impl AllowedUnsafe for super::Bar {}\n+    #[no_mangle] fn allowed2() {}\n+    #[export_name = \"foo\"] fn allowed3() {}\n }\n \n macro_rules! unsafe_in_macro {\n-    () => {\n+    () => {{\n+        #[no_mangle] fn foo() {} //~ ERROR: declaration of a `no_mangle` function\n+        #[no_mangle] static FOO: u32 = 5; //~ ERROR: declaration of a `no_mangle` static\n+        #[export_name = \"bar\"] fn bar() {}\n+        //~^ ERROR: declaration of a function with `export_name`\n+        #[export_name = \"BAR\"] static BAR: u32 = 5;\n+        //~^ ERROR: declaration of a static with `export_name`\n         unsafe {} //~ ERROR: usage of an `unsafe` block\n-    }\n+    }}\n }\n \n+#[no_mangle] fn foo() {} //~ ERROR: declaration of a `no_mangle` function\n+#[no_mangle] static FOO: u32 = 5; //~ ERROR: declaration of a `no_mangle` static\n+\n+#[export_name = \"bar\"] fn bar() {} //~ ERROR: declaration of a function with `export_name`\n+#[export_name = \"BAR\"] static BAR: u32 = 5; //~ ERROR: declaration of a static with `export_name`\n+\n unsafe fn baz() {} //~ ERROR: declaration of an `unsafe` function\n unsafe trait Foo {} //~ ERROR: declaration of an `unsafe` trait\n unsafe impl Foo for Bar {} //~ ERROR: implementation of an `unsafe` trait"}, {"sha": "a8ef047e517b49569e315cf85ad71023ad179dcd", "filename": "src/test/ui/lint/lint-unsafe-code.stderr", "status": "modified", "additions": 97, "deletions": 18, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/f8b330d9fb114132fb41eccdafbe29b48d386749/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8b330d9fb114132fb41eccdafbe29b48d386749/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr?ref=f8b330d9fb114132fb41eccdafbe29b48d386749", "patch": "@@ -1,89 +1,168 @@\n-error: declaration of an `unsafe` function\n-  --> $DIR/lint-unsafe-code.rs:23:1\n+error: declaration of a `no_mangle` function\n+  --> $DIR/lint-unsafe-code.rs:31:1\n    |\n-LL | unsafe fn baz() {}\n-   | ^^^^^^^^^^^^^^^^^^\n+LL | #[no_mangle] fn foo() {}\n+   | ^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/lint-unsafe-code.rs:3:9\n    |\n LL | #![deny(unsafe_code)]\n    |         ^^^^^^^^^^^\n+   = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n+\n+error: declaration of a `no_mangle` static\n+  --> $DIR/lint-unsafe-code.rs:32:1\n+   |\n+LL | #[no_mangle] static FOO: u32 = 5;\n+   | ^^^^^^^^^^^^\n+   |\n+   = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n+\n+error: declaration of a function with `export_name`\n+  --> $DIR/lint-unsafe-code.rs:34:1\n+   |\n+LL | #[export_name = \"bar\"] fn bar() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n+\n+error: declaration of a static with `export_name`\n+  --> $DIR/lint-unsafe-code.rs:35:1\n+   |\n+LL | #[export_name = \"BAR\"] static BAR: u32 = 5;\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n+\n+error: declaration of an `unsafe` function\n+  --> $DIR/lint-unsafe-code.rs:37:1\n+   |\n+LL | unsafe fn baz() {}\n+   | ^^^^^^^^^^^^^^^^^^\n \n error: declaration of an `unsafe` trait\n-  --> $DIR/lint-unsafe-code.rs:24:1\n+  --> $DIR/lint-unsafe-code.rs:38:1\n    |\n LL | unsafe trait Foo {}\n    | ^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` trait\n-  --> $DIR/lint-unsafe-code.rs:25:1\n+  --> $DIR/lint-unsafe-code.rs:39:1\n    |\n LL | unsafe impl Foo for Bar {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: declaration of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:28:5\n+  --> $DIR/lint-unsafe-code.rs:42:5\n    |\n LL |     unsafe fn baz(&self);\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:29:5\n+  --> $DIR/lint-unsafe-code.rs:43:5\n    |\n LL |     unsafe fn provided(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:30:5\n+  --> $DIR/lint-unsafe-code.rs:44:5\n    |\n LL |     unsafe fn provided_override(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:34:5\n+  --> $DIR/lint-unsafe-code.rs:48:5\n    |\n LL |     unsafe fn baz(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:35:5\n+  --> $DIR/lint-unsafe-code.rs:49:5\n    |\n LL |     unsafe fn provided_override(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:54:5\n+  --> $DIR/lint-unsafe-code.rs:68:5\n    |\n LL |     unsafe fn provided_override(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:65:5\n+  --> $DIR/lint-unsafe-code.rs:79:5\n    |\n LL |     unsafe fn provided(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:71:5\n+  --> $DIR/lint-unsafe-code.rs:85:5\n    |\n LL |     unsafe fn provided(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:75:5\n+  --> $DIR/lint-unsafe-code.rs:89:5\n    |\n LL |     unsafe fn baz(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: usage of an `unsafe` block\n-  --> $DIR/lint-unsafe-code.rs:86:5\n+  --> $DIR/lint-unsafe-code.rs:100:5\n    |\n LL |     unsafe {}\n    |     ^^^^^^^^^\n \n+error: declaration of a `no_mangle` function\n+  --> $DIR/lint-unsafe-code.rs:21:9\n+   |\n+LL |         #[no_mangle] fn foo() {}\n+   |         ^^^^^^^^^^^^\n+...\n+LL |     unsafe_in_macro!()\n+   |     ------------------ in this macro invocation\n+   |\n+   = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: declaration of a `no_mangle` static\n+  --> $DIR/lint-unsafe-code.rs:22:9\n+   |\n+LL |         #[no_mangle] static FOO: u32 = 5;\n+   |         ^^^^^^^^^^^^\n+...\n+LL |     unsafe_in_macro!()\n+   |     ------------------ in this macro invocation\n+   |\n+   = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: declaration of a function with `export_name`\n+  --> $DIR/lint-unsafe-code.rs:23:9\n+   |\n+LL |         #[export_name = \"bar\"] fn bar() {}\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     unsafe_in_macro!()\n+   |     ------------------ in this macro invocation\n+   |\n+   = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: declaration of a static with `export_name`\n+  --> $DIR/lint-unsafe-code.rs:25:9\n+   |\n+LL |         #[export_name = \"BAR\"] static BAR: u32 = 5;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     unsafe_in_macro!()\n+   |     ------------------ in this macro invocation\n+   |\n+   = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error: usage of an `unsafe` block\n-  --> $DIR/lint-unsafe-code.rs:19:9\n+  --> $DIR/lint-unsafe-code.rs:27:9\n    |\n LL |         unsafe {}\n    |         ^^^^^^^^^\n@@ -93,5 +172,5 @@ LL |     unsafe_in_macro!()\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 22 previous errors\n "}]}