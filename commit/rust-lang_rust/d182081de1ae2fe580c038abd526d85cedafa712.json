{"sha": "d182081de1ae2fe580c038abd526d85cedafa712", "node_id": "C_kwDOAAsO6NoAKGQxODIwODFkZTFhZTJmZTU4MGMwMzhhYmQ1MjZkODVjZWRhZmE3MTI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-29T04:34:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-29T04:34:43Z"}, "message": "Rollup merge of #99027 - tmiasko:basic-blocks, r=oli-obk\n\nReplace `Body::basic_blocks()` with field access\n\nSince the refactoring in #98930, it is possible to borrow the basic blocks\nindependently from other parts of MIR by accessing the `basic_blocks` field\ndirectly.\n\nReplace unnecessary `Body::basic_blocks()` method with a direct field access,\nwhich has an additional benefit of borrowing the basic blocks only.", "tree": {"sha": "0393e811cb218b1ee3d8a2a408a25d05d3ac29c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0393e811cb218b1ee3d8a2a408a25d05d3ac29c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d182081de1ae2fe580c038abd526d85cedafa712", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjDEHjCRBK7hj4Ov3rIwAAWBkIACF6UPGIAzlzin1Lu//RT9de\n+SssVLjnLPU0AgX3UdppznsG/4ccSf1t5+5Lt31RPBG/y1Hrm8uy3nd4SbYGCgYI\nKOh+je7HbkMOA4hUXYKdEHw/exDeqAGFbuVBdHSXaFKMxHeHqqFeE27BuglkTMbq\nzsBH5eRy2kcmGWW7SshSh0fCyAwzQckpEbg6ytY4q9csaAtrHy35scXkPtiIT5Ur\nakDJbRMIRDAgkoVIMny5MidfCUiv+NJD7ZqWqwlThUV0dyalgiodQPxVGbpvumcS\nc/LbfeQjRfSOjDe4jVG2yS80FZbb92A0IYnSNLiLv79MOfaT+65mB7+s5Tt/mN0=\n=wnyo\n-----END PGP SIGNATURE-----\n", "payload": "tree 0393e811cb218b1ee3d8a2a408a25d05d3ac29c9\nparent a96b44c9e2f952282cff1b833f39d10b8cda5f66\nparent b48870b451dd9d3f3f827aa54d9becdfdd811ba3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661747683 +0200\ncommitter GitHub <noreply@github.com> 1661747683 +0200\n\nRollup merge of #99027 - tmiasko:basic-blocks, r=oli-obk\n\nReplace `Body::basic_blocks()` with field access\n\nSince the refactoring in #98930, it is possible to borrow the basic blocks\nindependently from other parts of MIR by accessing the `basic_blocks` field\ndirectly.\n\nReplace unnecessary `Body::basic_blocks()` method with a direct field access,\nwhich has an additional benefit of borrowing the basic blocks only.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d182081de1ae2fe580c038abd526d85cedafa712", "html_url": "https://github.com/rust-lang/rust/commit/d182081de1ae2fe580c038abd526d85cedafa712", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d182081de1ae2fe580c038abd526d85cedafa712/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a96b44c9e2f952282cff1b833f39d10b8cda5f66", "url": "https://api.github.com/repos/rust-lang/rust/commits/a96b44c9e2f952282cff1b833f39d10b8cda5f66", "html_url": "https://github.com/rust-lang/rust/commit/a96b44c9e2f952282cff1b833f39d10b8cda5f66"}, {"sha": "b48870b451dd9d3f3f827aa54d9becdfdd811ba3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b48870b451dd9d3f3f827aa54d9becdfdd811ba3", "html_url": "https://github.com/rust-lang/rust/commit/b48870b451dd9d3f3f827aa54d9becdfdd811ba3"}], "stats": {"total": 271, "additions": 131, "deletions": 140}, "files": [{"sha": "144fd15fc24075d4b4ba5d8e244feb9076ab035d", "filename": "compiler/rustc_borrowck/src/constraint_generation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -31,7 +31,7 @@ pub(super) fn generate_constraints<'cx, 'tcx>(\n         body,\n     };\n \n-    for (bb, data) in body.basic_blocks().iter_enumerated() {\n+    for (bb, data) in body.basic_blocks.iter_enumerated() {\n         cg.visit_basic_block_data(bb, data);\n     }\n }"}, {"sha": "816288eb50b293e35518b7af57063dc19bc688d9", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -143,7 +143,7 @@ struct OutOfScopePrecomputer<'a, 'tcx> {\n impl<'a, 'tcx> OutOfScopePrecomputer<'a, 'tcx> {\n     fn new(body: &'a Body<'tcx>, regioncx: &'a RegionInferenceContext<'tcx>) -> Self {\n         OutOfScopePrecomputer {\n-            visited: BitSet::new_empty(body.basic_blocks().len()),\n+            visited: BitSet::new_empty(body.basic_blocks.len()),\n             visit_stack: vec![],\n             body,\n             regioncx,"}, {"sha": "a6b8c6057e05ee0f9be50a4357652e4d599e2167", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -459,7 +459,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 return outmost_back_edge;\n             }\n \n-            let block = &self.body.basic_blocks()[location.block];\n+            let block = &self.body.basic_blocks[location.block];\n \n             if location.statement_index < block.statements.len() {\n                 let successor = location.successor_within_block();\n@@ -518,7 +518,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         }\n \n         if loop_head.dominates(from, &self.dominators) {\n-            let block = &self.body.basic_blocks()[from.block];\n+            let block = &self.body.basic_blocks[from.block];\n \n             if from.statement_index < block.statements.len() {\n                 let successor = from.successor_within_block();\n@@ -568,7 +568,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             UseSpans::PatUse(span)\n             | UseSpans::OtherUse(span)\n             | UseSpans::FnSelfUse { var_span: span, .. } => {\n-                let block = &self.body.basic_blocks()[location.block];\n+                let block = &self.body.basic_blocks[location.block];\n \n                 let kind = if let Some(&Statement {\n                     kind: StatementKind::FakeRead(box (FakeReadCause::ForLet(_), _)),"}, {"sha": "16c2f9ccc6aa4b8d06a122bdb85748eef3e5c285", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -88,7 +88,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 if let Some(StatementKind::Assign(box (\n                     place,\n                     Rvalue::Use(Operand::Move(move_from)),\n-                ))) = self.body.basic_blocks()[location.block]\n+                ))) = self.body.basic_blocks[location.block]\n                     .statements\n                     .get(location.statement_index)\n                     .map(|stmt| &stmt.kind)"}, {"sha": "5ca3f2f4d033c1c8dc27815369c9db4338ff6790", "filename": "compiler/rustc_borrowck/src/location.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -33,7 +33,7 @@ impl LocationTable {\n     pub(crate) fn new(body: &Body<'_>) -> Self {\n         let mut num_points = 0;\n         let statements_before_block = body\n-            .basic_blocks()\n+            .basic_blocks\n             .iter()\n             .map(|block_data| {\n                 let v = num_points;"}, {"sha": "de20a4bb465c207c6e77a6b4c47280b8c822e3d1", "filename": "compiler/rustc_borrowck/src/region_infer/values.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -25,7 +25,7 @@ impl RegionValueElements {\n     pub(crate) fn new(body: &Body<'_>) -> Self {\n         let mut num_points = 0;\n         let statements_before_block: IndexVec<BasicBlock, usize> = body\n-            .basic_blocks()\n+            .basic_blocks\n             .iter()\n             .map(|block_data| {\n                 let v = num_points;\n@@ -37,7 +37,7 @@ impl RegionValueElements {\n         debug!(\"RegionValueElements: num_points={:#?}\", num_points);\n \n         let mut basic_blocks = IndexVec::with_capacity(num_points);\n-        for (bb, bb_data) in body.basic_blocks().iter_enumerated() {\n+        for (bb, bb_data) in body.basic_blocks.iter_enumerated() {\n             basic_blocks.extend((0..=bb_data.statements.len()).map(|_| bb));\n         }\n "}, {"sha": "c1812aa4bbab65fda259c44278df2cba74debdba", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -2633,7 +2633,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             self.check_local(&body, local, local_decl);\n         }\n \n-        for (block, block_data) in body.basic_blocks().iter_enumerated() {\n+        for (block, block_data) in body.basic_blocks.iter_enumerated() {\n             let mut location = Location { block, statement_index: 0 };\n             for stmt in &block_data.statements {\n                 if !stmt.source_info.span.is_dummy() {"}, {"sha": "0cbb9f3ec2d80512d6277be4ab8463d07932e2bc", "filename": "compiler/rustc_codegen_cranelift/src/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fanalyze.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -26,7 +26,7 @@ pub(crate) fn analyze(fx: &FunctionCx<'_, '_, '_>) -> IndexVec<Local, SsaKind> {\n         })\n         .collect::<IndexVec<Local, SsaKind>>();\n \n-    for bb in fx.mir.basic_blocks().iter() {\n+    for bb in fx.mir.basic_blocks.iter() {\n         for stmt in bb.statements.iter() {\n             match &stmt.kind {\n                 Assign(place_and_rval) => match &place_and_rval.1 {"}, {"sha": "3011813c7035b56ae39bbc80fd1852fbae466154", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -73,7 +73,7 @@ pub(crate) fn codegen_fn<'tcx>(\n     // Predefine blocks\n     let start_block = bcx.create_block();\n     let block_map: IndexVec<BasicBlock, Block> =\n-        (0..mir.basic_blocks().len()).map(|_| bcx.create_block()).collect();\n+        (0..mir.basic_blocks.len()).map(|_| bcx.create_block()).collect();\n \n     // Make FunctionCx\n     let target_config = module.target_config();\n@@ -271,7 +271,7 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n     }\n     fx.tcx.sess.time(\"codegen prelude\", || crate::abi::codegen_fn_prelude(fx, start_block));\n \n-    for (bb, bb_data) in fx.mir.basic_blocks().iter_enumerated() {\n+    for (bb, bb_data) in fx.mir.basic_blocks.iter_enumerated() {\n         let block = fx.get_block(bb);\n         fx.bcx.switch_to_block(block);\n "}, {"sha": "e2b68f24a21dc699becffd75ff9afec81c8fa8ef", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -505,7 +505,7 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n                 return None;\n             }\n             let mut computed_const_val = None;\n-            for bb_data in fx.mir.basic_blocks() {\n+            for bb_data in fx.mir.basic_blocks.iter() {\n                 for stmt in &bb_data.statements {\n                     match &stmt.kind {\n                         StatementKind::Assign(local_and_rvalue) if &local_and_rvalue.0 == place => {"}, {"sha": "c7617d2e464fab1e7b867c373e3b20e23185bd47", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -266,7 +266,7 @@ pub fn cleanup_kinds(mir: &mir::Body<'_>) -> IndexVec<mir::BasicBlock, CleanupKi\n         result: &mut IndexVec<mir::BasicBlock, CleanupKind>,\n         mir: &mir::Body<'tcx>,\n     ) {\n-        for (bb, data) in mir.basic_blocks().iter_enumerated() {\n+        for (bb, data) in mir.basic_blocks.iter_enumerated() {\n             match data.terminator().kind {\n                 TerminatorKind::Goto { .. }\n                 | TerminatorKind::Resume\n@@ -296,7 +296,7 @@ pub fn cleanup_kinds(mir: &mir::Body<'_>) -> IndexVec<mir::BasicBlock, CleanupKi\n     }\n \n     fn propagate<'tcx>(result: &mut IndexVec<mir::BasicBlock, CleanupKind>, mir: &mir::Body<'tcx>) {\n-        let mut funclet_succs = IndexVec::from_elem(None, mir.basic_blocks());\n+        let mut funclet_succs = IndexVec::from_elem(None, &mir.basic_blocks);\n \n         let mut set_successor = |funclet: mir::BasicBlock, succ| match funclet_succs[funclet] {\n             ref mut s @ None => {\n@@ -359,7 +359,7 @@ pub fn cleanup_kinds(mir: &mir::Body<'_>) -> IndexVec<mir::BasicBlock, CleanupKi\n         }\n     }\n \n-    let mut result = IndexVec::from_elem(CleanupKind::NotCleanup, mir.basic_blocks());\n+    let mut result = IndexVec::from_elem(CleanupKind::NotCleanup, &mir.basic_blocks);\n \n     discover_masters(&mut result, mir);\n     propagate(&mut result, mir);"}, {"sha": "d6bbcd99234553bf3173620c5fdc8d7c0a419674", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -150,13 +150,13 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     let start_llbb = Bx::append_block(cx, llfn, \"start\");\n     let mut bx = Bx::build(cx, start_llbb);\n \n-    if mir.basic_blocks().iter().any(|bb| bb.is_cleanup) {\n+    if mir.basic_blocks.iter().any(|bb| bb.is_cleanup) {\n         bx.set_personality_fn(cx.eh_personality());\n     }\n \n     let cleanup_kinds = analyze::cleanup_kinds(&mir);\n     let cached_llbbs: IndexVec<mir::BasicBlock, Option<Bx::BasicBlock>> = mir\n-        .basic_blocks()\n+        .basic_blocks\n         .indices()\n         .map(|bb| if bb == mir::START_BLOCK { Some(start_llbb) } else { None })\n         .collect();\n@@ -172,8 +172,8 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         unreachable_block: None,\n         double_unwind_guard: None,\n         cleanup_kinds,\n-        landing_pads: IndexVec::from_elem(None, mir.basic_blocks()),\n-        funclets: IndexVec::from_fn_n(|_| None, mir.basic_blocks().len()),\n+        landing_pads: IndexVec::from_elem(None, &mir.basic_blocks),\n+        funclets: IndexVec::from_fn_n(|_| None, mir.basic_blocks.len()),\n         locals: IndexVec::new(),\n         debug_context,\n         per_local_var_debug_info: None,"}, {"sha": "2da9123b84610520d7ea7601ad1df1f98605041d", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -782,7 +782,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         assert_eq!(\n             unwinding,\n             match self.frame().loc {\n-                Ok(loc) => self.body().basic_blocks()[loc.block].is_cleanup,\n+                Ok(loc) => self.body().basic_blocks[loc.block].is_cleanup,\n                 Err(_) => true,\n             }\n         );"}, {"sha": "91f4f04251721209e177286b3363c4f215098f67", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -28,7 +28,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             let mut source_info = *frame.body.source_info(loc);\n \n             // If this is a `Call` terminator, use the `fn_span` instead.\n-            let block = &frame.body.basic_blocks()[loc.block];\n+            let block = &frame.body.basic_blocks[loc.block];\n             if loc.statement_index == block.statements.len() {\n                 debug!(\n                     \"find_closest_untracked_caller_location: got terminator {:?} ({:?})\","}, {"sha": "683e11ff7e0e50fc97448cff63ad10185b48e03c", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -53,7 +53,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             self.pop_stack_frame(/* unwinding */ true)?;\n             return Ok(true);\n         };\n-        let basic_block = &self.body().basic_blocks()[loc.block];\n+        let basic_block = &self.body().basic_blocks[loc.block];\n \n         if let Some(stmt) = basic_block.statements.get(loc.statement_index) {\n             let old_frames = self.frame_idx();"}, {"sha": "cbfdb47dd1a4072eb30b9c919873f69e38b69b32", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -135,7 +135,7 @@ impl<'mir, 'tcx> Qualifs<'mir, 'tcx> {\n         // qualifs for the return type.\n         let return_block = ccx\n             .body\n-            .basic_blocks()\n+            .basic_blocks\n             .iter_enumerated()\n             .find(|(_, block)| matches!(block.terminator().kind, TerminatorKind::Return))\n             .map(|(bb, _)| bb);"}, {"sha": "6301388d1e84091fa97f262ea76babfb0cf7c9ad", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -710,7 +710,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n     }\n \n     fn assign(&mut self, dest: Local, rvalue: Rvalue<'tcx>, span: Span) {\n-        let last = self.promoted.basic_blocks().last().unwrap();\n+        let last = self.promoted.basic_blocks.last().unwrap();\n         let data = &mut self.promoted[last];\n         data.statements.push(Statement {\n             source_info: SourceInfo::outermost(span),\n@@ -803,7 +803,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                         self.visit_operand(arg, loc);\n                     }\n \n-                    let last = self.promoted.basic_blocks().last().unwrap();\n+                    let last = self.promoted.basic_blocks.last().unwrap();\n                     let new_target = self.new_block();\n \n                     *self.promoted[last].terminator_mut() = Terminator {\n@@ -1041,7 +1041,7 @@ pub fn is_const_fn_in_array_repeat_expression<'tcx>(\n         _ => {}\n     }\n \n-    for block in body.basic_blocks() {\n+    for block in body.basic_blocks.iter() {\n         if let Some(Terminator { kind: TerminatorKind::Call { func, destination, .. }, .. }) =\n             &block.terminator\n         {"}, {"sha": "45a94972c1134b8fd2cd4523713e724fe5ccf5fc", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -140,8 +140,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         if bb == START_BLOCK {\n             self.fail(location, \"start block must not have predecessors\")\n         }\n-        if let Some(bb) = self.body.basic_blocks().get(bb) {\n-            let src = self.body.basic_blocks().get(location.block).unwrap();\n+        if let Some(bb) = self.body.basic_blocks.get(bb) {\n+            let src = self.body.basic_blocks.get(location.block).unwrap();\n             match (src.is_cleanup, bb.is_cleanup, edge_kind) {\n                 // Non-cleanup blocks can jump to non-cleanup blocks along non-unwind edges\n                 (false, false, EdgeKind::Normal)\n@@ -881,13 +881,13 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n             }\n             TerminatorKind::Resume | TerminatorKind::Abort => {\n                 let bb = location.block;\n-                if !self.body.basic_blocks()[bb].is_cleanup {\n+                if !self.body.basic_blocks[bb].is_cleanup {\n                     self.fail(location, \"Cannot `Resume` or `Abort` from non-cleanup basic block\")\n                 }\n             }\n             TerminatorKind::Return => {\n                 let bb = location.block;\n-                if self.body.basic_blocks()[bb].is_cleanup {\n+                if self.body.basic_blocks[bb].is_cleanup {\n                     self.fail(location, \"Cannot `Return` from cleanup basic block\")\n                 }\n             }"}, {"sha": "d1f3561c02c5d52c0b9bf4d72e4783fbefb25011", "filename": "compiler/rustc_middle/src/mir/generic_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graph.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -12,14 +12,14 @@ pub fn mir_fn_to_generic_graph<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'_>) -> Grap\n \n     // Nodes\n     let nodes: Vec<Node> = body\n-        .basic_blocks()\n+        .basic_blocks\n         .iter_enumerated()\n         .map(|(block, _)| bb_to_graph_node(block, body, dark_mode))\n         .collect();\n \n     // Edges\n     let mut edges = Vec::new();\n-    for (source, _) in body.basic_blocks().iter_enumerated() {\n+    for (source, _) in body.basic_blocks.iter_enumerated() {\n         let def_id = body.source.def_id();\n         let terminator = body[source].terminator();\n         let labels = terminator.kind.fmt_successor_labels();"}, {"sha": "f7a1e9b2864888b2f6b5eecfcb37fe96bf87b2f4", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -331,11 +331,6 @@ impl<'tcx> Body<'tcx> {\n         body\n     }\n \n-    #[inline]\n-    pub fn basic_blocks(&self) -> &IndexVec<BasicBlock, BasicBlockData<'tcx>> {\n-        &self.basic_blocks\n-    }\n-\n     #[inline]\n     pub fn basic_blocks_mut(&mut self) -> &mut IndexVec<BasicBlock, BasicBlockData<'tcx>> {\n         self.basic_blocks.as_mut()\n@@ -490,7 +485,7 @@ impl<'tcx> Index<BasicBlock> for Body<'tcx> {\n \n     #[inline]\n     fn index(&self, index: BasicBlock) -> &BasicBlockData<'tcx> {\n-        &self.basic_blocks()[index]\n+        &self.basic_blocks[index]\n     }\n }\n "}, {"sha": "24fe3b47256e2927f4fa0c1ceba971a94c73df80", "filename": "compiler/rustc_middle/src/mir/patch.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -19,7 +19,7 @@ pub struct MirPatch<'tcx> {\n impl<'tcx> MirPatch<'tcx> {\n     pub fn new(body: &Body<'tcx>) -> Self {\n         let mut result = MirPatch {\n-            patch_map: IndexVec::from_elem(None, body.basic_blocks()),\n+            patch_map: IndexVec::from_elem(None, &body.basic_blocks),\n             new_blocks: vec![],\n             new_statements: vec![],\n             new_locals: vec![],\n@@ -29,7 +29,7 @@ impl<'tcx> MirPatch<'tcx> {\n         };\n \n         // Check if we already have a resume block\n-        for (bb, block) in body.basic_blocks().iter_enumerated() {\n+        for (bb, block) in body.basic_blocks.iter_enumerated() {\n             if let TerminatorKind::Resume = block.terminator().kind && block.statements.is_empty() {\n                 result.resume_block = Some(bb);\n                 break;\n@@ -61,7 +61,7 @@ impl<'tcx> MirPatch<'tcx> {\n     }\n \n     pub fn terminator_loc(&self, body: &Body<'tcx>, bb: BasicBlock) -> Location {\n-        let offset = match bb.index().checked_sub(body.basic_blocks().len()) {\n+        let offset = match bb.index().checked_sub(body.basic_blocks.len()) {\n             Some(index) => self.new_blocks[index].statements.len(),\n             None => body[bb].statements.len(),\n         };\n@@ -129,7 +129,7 @@ impl<'tcx> MirPatch<'tcx> {\n         debug!(\n             \"MirPatch: {} new blocks, starting from index {}\",\n             self.new_blocks.len(),\n-            body.basic_blocks().len()\n+            body.basic_blocks.len()\n         );\n         let bbs = if self.patch_map.is_empty() && self.new_blocks.is_empty() {\n             body.basic_blocks.as_mut_preserves_cfg()\n@@ -173,7 +173,7 @@ impl<'tcx> MirPatch<'tcx> {\n     }\n \n     pub fn source_info_for_location(&self, body: &Body<'tcx>, loc: Location) -> SourceInfo {\n-        let data = match loc.block.index().checked_sub(body.basic_blocks().len()) {\n+        let data = match loc.block.index().checked_sub(body.basic_blocks.len()) {\n             Some(new) => &self.new_blocks[new],\n             None => &body[loc.block],\n         };"}, {"sha": "da6af89b09b9b9a22cee906b971b7407b0887f4c", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -318,10 +318,10 @@ where\n     F: FnMut(PassWhere, &mut dyn Write) -> io::Result<()>,\n {\n     write_mir_intro(tcx, body, w)?;\n-    for block in body.basic_blocks().indices() {\n+    for block in body.basic_blocks.indices() {\n         extra_data(PassWhere::BeforeBlock(block), w)?;\n         write_basic_block(tcx, block, body, extra_data, w)?;\n-        if block.index() + 1 != body.basic_blocks().len() {\n+        if block.index() + 1 != body.basic_blocks.len() {\n             writeln!(w)?;\n         }\n     }"}, {"sha": "6e64a3b80c1fb18beaff270d864d96235c348890", "filename": "compiler/rustc_middle/src/mir/spanview.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -105,7 +105,7 @@ where\n     }\n     let body_span = hir_body.unwrap().value.span;\n     let mut span_viewables = Vec::new();\n-    for (bb, data) in body.basic_blocks().iter_enumerated() {\n+    for (bb, data) in body.basic_blocks.iter_enumerated() {\n         match spanview {\n             MirSpanview::Statement => {\n                 for (i, statement) in data.statements.iter().enumerate() {"}, {"sha": "55b2c592795bff6eb4a18ad2ccff5e9b953e166d", "filename": "compiler/rustc_middle/src/mir/traversal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -37,7 +37,7 @@ impl<'a, 'tcx> Preorder<'a, 'tcx> {\n \n         Preorder {\n             body,\n-            visited: BitSet::new_empty(body.basic_blocks().len()),\n+            visited: BitSet::new_empty(body.basic_blocks.len()),\n             worklist,\n             root_is_start_block: root == START_BLOCK,\n         }\n@@ -71,7 +71,7 @@ impl<'a, 'tcx> Iterator for Preorder<'a, 'tcx> {\n \n     fn size_hint(&self) -> (usize, Option<usize>) {\n         // All the blocks, minus the number of blocks we've visited.\n-        let upper = self.body.basic_blocks().len() - self.visited.count();\n+        let upper = self.body.basic_blocks.len() - self.visited.count();\n \n         let lower = if self.root_is_start_block {\n             // We will visit all remaining blocks exactly once."}, {"sha": "7bd65f42e3f925a2b2d799cb681394ba2410a835", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -951,7 +951,7 @@ macro_rules! basic_blocks {\n         $body.basic_blocks.as_mut_preserves_cfg()\n     };\n     ($body:ident,) => {\n-        $body.basic_blocks()\n+        $body.basic_blocks\n     };\n }\n "}, {"sha": "684b228e87fa983ef3b778fe587c41f354fc7c3b", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -272,7 +272,7 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n         // by borrow checking.\n         debug_assert!(\n             !(body.local_decls.has_free_regions()\n-                || body.basic_blocks().has_free_regions()\n+                || body.basic_blocks.has_free_regions()\n                 || body.var_debug_info.has_free_regions()\n                 || body.yield_ty().has_free_regions()),\n             \"Unexpected free regions in MIR: {:?}\","}, {"sha": "bc75645e7c9579abc12b8df22ced1a0aa73f7861", "filename": "compiler/rustc_mir_dataflow/src/framework/engine.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -111,9 +111,9 @@ where\n         // Otherwise, compute and store the cumulative transfer function for each block.\n \n         let identity = GenKillSet::identity(analysis.bottom_value(body).domain_size());\n-        let mut trans_for_block = IndexVec::from_elem(identity, body.basic_blocks());\n+        let mut trans_for_block = IndexVec::from_elem(identity, &body.basic_blocks);\n \n-        for (block, block_data) in body.basic_blocks().iter_enumerated() {\n+        for (block, block_data) in body.basic_blocks.iter_enumerated() {\n             let trans = &mut trans_for_block[block];\n             A::Direction::gen_kill_effects_in_block(&analysis, trans, block, block_data);\n         }\n@@ -147,7 +147,7 @@ where\n         apply_trans_for_block: Option<Box<dyn Fn(BasicBlock, &mut A::Domain)>>,\n     ) -> Self {\n         let bottom_value = analysis.bottom_value(body);\n-        let mut entry_sets = IndexVec::from_elem(bottom_value.clone(), body.basic_blocks());\n+        let mut entry_sets = IndexVec::from_elem(bottom_value.clone(), &body.basic_blocks);\n         analysis.initialize_start_block(body, &mut entry_sets[mir::START_BLOCK]);\n \n         if A::Direction::IS_BACKWARD && entry_sets[mir::START_BLOCK] != bottom_value {\n@@ -200,8 +200,7 @@ where\n             ..\n         } = self;\n \n-        let mut dirty_queue: WorkQueue<BasicBlock> =\n-            WorkQueue::with_none(body.basic_blocks().len());\n+        let mut dirty_queue: WorkQueue<BasicBlock> = WorkQueue::with_none(body.basic_blocks.len());\n \n         if A::Direction::IS_FORWARD {\n             for (bb, _) in traversal::reverse_postorder(body) {"}, {"sha": "579fe68a14935573e213fe616d954825a697c4a6", "filename": "compiler/rustc_mir_dataflow/src/framework/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -108,12 +108,12 @@ where\n     type Edge = CfgEdge;\n \n     fn nodes(&self) -> dot::Nodes<'_, Self::Node> {\n-        self.body.basic_blocks().indices().collect::<Vec<_>>().into()\n+        self.body.basic_blocks.indices().collect::<Vec<_>>().into()\n     }\n \n     fn edges(&self) -> dot::Edges<'_, Self::Edge> {\n         self.body\n-            .basic_blocks()\n+            .basic_blocks\n             .indices()\n             .flat_map(|bb| dataflow_successors(self.body, bb))\n             .collect::<Vec<_>>()"}, {"sha": "17102454a88defed44db4e8abccd676594ac2958", "filename": "compiler/rustc_mir_dataflow/src/framework/tests.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -100,9 +100,9 @@ impl<D: Direction> MockAnalysis<'_, D> {\n \n     fn mock_entry_sets(&self) -> IndexVec<BasicBlock, BitSet<usize>> {\n         let empty = self.bottom_value(self.body);\n-        let mut ret = IndexVec::from_elem(empty, &self.body.basic_blocks());\n+        let mut ret = IndexVec::from_elem(empty, &self.body.basic_blocks);\n \n-        for (bb, _) in self.body.basic_blocks().iter_enumerated() {\n+        for (bb, _) in self.body.basic_blocks.iter_enumerated() {\n             ret[bb] = self.mock_entry_set(bb);\n         }\n \n@@ -169,7 +169,7 @@ impl<'tcx, D: Direction> AnalysisDomain<'tcx> for MockAnalysis<'tcx, D> {\n     const NAME: &'static str = \"mock\";\n \n     fn bottom_value(&self, body: &mir::Body<'tcx>) -> Self::Domain {\n-        BitSet::new_empty(Self::BASIC_BLOCK_OFFSET + body.basic_blocks().len())\n+        BitSet::new_empty(Self::BASIC_BLOCK_OFFSET + body.basic_blocks.len())\n     }\n \n     fn initialize_start_block(&self, _: &mir::Body<'tcx>, _: &mut Self::Domain) {\n@@ -271,9 +271,7 @@ fn test_cursor<D: Direction>(analysis: MockAnalysis<'_, D>) {\n     cursor.allow_unreachable();\n \n     let every_target = || {\n-        body.basic_blocks()\n-            .iter_enumerated()\n-            .flat_map(|(bb, _)| SeekTarget::iter_in_block(body, bb))\n+        body.basic_blocks.iter_enumerated().flat_map(|(bb, _)| SeekTarget::iter_in_block(body, bb))\n     };\n \n     let mut seek_to_target = |targ| {"}, {"sha": "c325838622399e7c32d16b2e9ca1fe49df42068c", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -243,7 +243,7 @@ pub(super) fn gather_moves<'tcx>(\n \n     builder.gather_args();\n \n-    for (bb, block) in body.basic_blocks().iter_enumerated() {\n+    for (bb, block) in body.basic_blocks.iter_enumerated() {\n         for (i, stmt) in block.statements.iter().enumerate() {\n             let source = Location { block: bb, statement_index: i };\n             builder.gather_statement(source, stmt);"}, {"sha": "b36e268cf8bf78cc0f29604bc56f36050600c121", "filename": "compiler/rustc_mir_dataflow/src/move_paths/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -217,7 +217,7 @@ where\n     fn new(body: &Body<'_>) -> Self {\n         LocationMap {\n             map: body\n-                .basic_blocks()\n+                .basic_blocks\n                 .iter()\n                 .map(|block| vec![T::default(); block.statements.len() + 1])\n                 .collect(),"}, {"sha": "7cae68efbecc3e7aec07a9316c49d933fcc8b255", "filename": "compiler/rustc_mir_dataflow/src/rustc_peek.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -101,7 +101,7 @@ pub fn sanity_check_via_rustc_peek<'tcx, A>(\n \n     let mut cursor = ResultsCursor::new(body, results);\n \n-    let peek_calls = body.basic_blocks().iter_enumerated().filter_map(|(bb, block_data)| {\n+    let peek_calls = body.basic_blocks.iter_enumerated().filter_map(|(bb, block_data)| {\n         PeekCall::from_terminator(tcx, block_data.terminator()).map(|call| (bb, block_data, call))\n     });\n "}, {"sha": "e5a0e1d312eaede55fa60815ef6efc16df7cfeec", "filename": "compiler/rustc_mir_dataflow/src/storage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -7,7 +7,7 @@ use rustc_middle::mir::{self, Local};\n pub fn always_storage_live_locals(body: &mir::Body<'_>) -> BitSet<Local> {\n     let mut always_live_locals = BitSet::new_filled(body.local_decls.len());\n \n-    for block in body.basic_blocks() {\n+    for block in &*body.basic_blocks {\n         for statement in &block.statements {\n             use mir::StatementKind::{StorageDead, StorageLive};\n             if let StorageLive(l) | StorageDead(l) = statement.kind {"}, {"sha": "d8f85d2e3798290d8a722bf8cc6daa620b5055e2", "filename": "compiler/rustc_mir_transform/src/abort_unwinding_calls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -56,7 +56,7 @@ impl<'tcx> MirPass<'tcx> for AbortUnwindingCalls {\n         // example.\n         let mut calls_to_terminate = Vec::new();\n         let mut cleanups_to_remove = Vec::new();\n-        for (id, block) in body.basic_blocks().iter_enumerated() {\n+        for (id, block) in body.basic_blocks.iter_enumerated() {\n             if block.is_cleanup {\n                 continue;\n             }"}, {"sha": "30966d22e2f6d03a092317da794cff03d335fd36", "filename": "compiler/rustc_mir_transform/src/add_call_guards.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_call_guards.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -45,7 +45,7 @@ impl AddCallGuards {\n         // We need a place to store the new blocks generated\n         let mut new_blocks = Vec::new();\n \n-        let cur_len = body.basic_blocks().len();\n+        let cur_len = body.basic_blocks.len();\n \n         for block in body.basic_blocks_mut() {\n             match block.terminator {"}, {"sha": "ffb5d8c6d95f279852bd50834478c1db71633665", "filename": "compiler/rustc_mir_transform/src/add_moves_for_packed_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_moves_for_packed_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_moves_for_packed_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_moves_for_packed_drops.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -55,7 +55,7 @@ fn add_moves_for_packed_drops_patch<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>)\n     let mut patch = MirPatch::new(body);\n     let param_env = tcx.param_env(def_id);\n \n-    for (bb, data) in body.basic_blocks().iter_enumerated() {\n+    for (bb, data) in body.basic_blocks.iter_enumerated() {\n         let loc = Location { block: bb, statement_index: data.statements.len() };\n         let terminator = data.terminator();\n "}, {"sha": "0a305a402095d758aecbe4ca5287f357f3c1a61e", "filename": "compiler/rustc_mir_transform/src/const_goto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -61,14 +61,14 @@ impl<'tcx> Visitor<'tcx> for ConstGotoOptimizationFinder<'_, 'tcx> {\n         let _: Option<_> = try {\n             let target = terminator.kind.as_goto()?;\n             // We only apply this optimization if the last statement is a const assignment\n-            let last_statement = self.body.basic_blocks()[location.block].statements.last()?;\n+            let last_statement = self.body.basic_blocks[location.block].statements.last()?;\n \n             if let (place, Rvalue::Use(Operand::Constant(_const))) =\n                 last_statement.kind.as_assign()?\n             {\n                 // We found a constant being assigned to `place`.\n                 // Now check that the target of this Goto switches on this place.\n-                let target_bb = &self.body.basic_blocks()[target];\n+                let target_bb = &self.body.basic_blocks[target];\n \n                 // The `StorageDead(..)` statement does not affect the functionality of mir.\n                 // We can move this part of the statement up to the predecessor."}, {"sha": "5c9f4f57243b7bc5cf265bf61ee965c22fc7f39c", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -131,7 +131,7 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n \n         let dummy_body = &Body::new(\n             body.source,\n-            body.basic_blocks().clone(),\n+            (*body.basic_blocks).clone(),\n             body.source_scopes.clone(),\n             body.local_decls.clone(),\n             Default::default(),"}, {"sha": "74b146833d03f27ecdfe7778ff083cca442adccd", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -105,7 +105,7 @@ impl<'tcx> MirLint<'tcx> for ConstProp {\n \n         let dummy_body = &Body::new(\n             body.source,\n-            body.basic_blocks().clone(),\n+            (*body.basic_blocks).clone(),\n             body.source_scopes.clone(),\n             body.local_decls.clone(),\n             Default::default(),\n@@ -522,7 +522,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n \n impl<'tcx> Visitor<'tcx> for ConstPropagator<'_, 'tcx> {\n     fn visit_body(&mut self, body: &Body<'tcx>) {\n-        for (bb, data) in body.basic_blocks().iter_enumerated() {\n+        for (bb, data) in body.basic_blocks.iter_enumerated() {\n             self.visit_basic_block_data(bb, data);\n         }\n     }"}, {"sha": "782129be088b68ce979b6323463ba8525a512f41", "filename": "compiler/rustc_mir_transform/src/coverage/graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -713,7 +713,7 @@ impl<\n \n         ShortCircuitPreorder {\n             body,\n-            visited: BitSet::new_empty(body.basic_blocks().len()),\n+            visited: BitSet::new_empty(body.basic_blocks.len()),\n             worklist,\n             filtered_successors,\n         }\n@@ -747,7 +747,7 @@ impl<\n     }\n \n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        let size = self.body.basic_blocks().len() - self.visited.count();\n+        let size = self.body.basic_blocks.len() - self.visited.count();\n         (size, Some(size))\n     }\n }"}, {"sha": "604810144887adda513733764f55f068a7882992", "filename": "compiler/rustc_mir_transform/src/coverage/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -80,7 +80,7 @@ impl<'tcx> MirPass<'tcx> for InstrumentCoverage {\n             return;\n         }\n \n-        match mir_body.basic_blocks()[mir::START_BLOCK].terminator().kind {\n+        match mir_body.basic_blocks[mir::START_BLOCK].terminator().kind {\n             TerminatorKind::Unreachable => {\n                 trace!(\"InstrumentCoverage skipped for unreachable `START_BLOCK`\");\n                 return;"}, {"sha": "dc1e68b253e7267b401b08472370cb7a6708c060", "filename": "compiler/rustc_mir_transform/src/coverage/query.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -84,7 +84,7 @@ impl CoverageVisitor {\n     }\n \n     fn visit_body(&mut self, body: &Body<'_>) {\n-        for bb_data in body.basic_blocks().iter() {\n+        for bb_data in body.basic_blocks.iter() {\n             for statement in bb_data.statements.iter() {\n                 if let StatementKind::Coverage(box ref coverage) = statement.kind {\n                     if is_inlined(body, statement) {\n@@ -138,7 +138,7 @@ fn coverageinfo<'tcx>(tcx: TyCtxt<'tcx>, instance_def: ty::InstanceDef<'tcx>) ->\n \n fn covered_code_regions<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Vec<&'tcx CodeRegion> {\n     let body = mir_body(tcx, def_id);\n-    body.basic_blocks()\n+    body.basic_blocks\n         .iter()\n         .flat_map(|data| {\n             data.statements.iter().filter_map(|statement| match statement.kind {"}, {"sha": "9c9ed5fa5105eda71866b54d8dd8b24f99abcda3", "filename": "compiler/rustc_mir_transform/src/coverage/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -176,7 +176,7 @@ fn debug_basic_blocks<'tcx>(mir_body: &Body<'tcx>) -> String {\n     format!(\n         \"{:?}\",\n         mir_body\n-            .basic_blocks()\n+            .basic_blocks\n             .iter_enumerated()\n             .map(|(bb, data)| {\n                 let term = &data.terminator();\n@@ -213,7 +213,7 @@ fn print_mir_graphviz(name: &str, mir_body: &Body<'_>) {\n             \"digraph {} {{\\n{}\\n}}\",\n             name,\n             mir_body\n-                .basic_blocks()\n+                .basic_blocks\n                 .iter_enumerated()\n                 .map(|(bb, data)| {\n                     format!(\n@@ -653,7 +653,7 @@ fn test_traverse_coverage_with_loops() {\n \n fn synthesize_body_span_from_terminators(mir_body: &Body<'_>) -> Span {\n     let mut some_span: Option<Span> = None;\n-    for (_, data) in mir_body.basic_blocks().iter_enumerated() {\n+    for (_, data) in mir_body.basic_blocks.iter_enumerated() {\n         let term_span = data.terminator().source_info.span;\n         if let Some(span) = some_span.as_mut() {\n             *span = span.to(term_span);"}, {"sha": "909116a77f54f73e910c9952d060e0959e48d638", "filename": "compiler/rustc_mir_transform/src/deduplicate_blocks.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduplicate_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduplicate_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduplicate_blocks.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -58,7 +58,7 @@ fn find_duplicates(body: &Body<'_>) -> FxHashMap<BasicBlock, BasicBlock> {\n     let mut duplicates = FxHashMap::default();\n \n     let bbs_to_go_through =\n-        body.basic_blocks().iter_enumerated().filter(|(_, bbd)| !bbd.is_cleanup).count();\n+        body.basic_blocks.iter_enumerated().filter(|(_, bbd)| !bbd.is_cleanup).count();\n \n     let mut same_hashes =\n         FxHashMap::with_capacity_and_hasher(bbs_to_go_through, Default::default());\n@@ -71,8 +71,7 @@ fn find_duplicates(body: &Body<'_>) -> FxHashMap<BasicBlock, BasicBlock> {\n     // When we see bb1, we see that it is a duplicate of bb3, and therefore insert it in the duplicates list\n     // with replacement bb3.\n     // When the duplicates are removed, we will end up with only bb3.\n-    for (bb, bbd) in body.basic_blocks().iter_enumerated().rev().filter(|(_, bbd)| !bbd.is_cleanup)\n-    {\n+    for (bb, bbd) in body.basic_blocks.iter_enumerated().rev().filter(|(_, bbd)| !bbd.is_cleanup) {\n         // Basic blocks can get really big, so to avoid checking for duplicates in basic blocks\n         // that are unlikely to have duplicates, we stop early. The early bail number has been\n         // found experimentally by eprintln while compiling the crates in the rustc-perf suite."}, {"sha": "da55510920e12ec6eaf3de10dd0bbfebcd2170b3", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -150,7 +150,7 @@ impl<'tcx> MirPass<'tcx> for DestinationPropagation {\n             def_id,\n             body.local_decls.len(),\n             relevant,\n-            body.basic_blocks().len()\n+            body.basic_blocks.len()\n         );\n         if relevant > MAX_LOCALS {\n             warn!(\n@@ -159,11 +159,11 @@ impl<'tcx> MirPass<'tcx> for DestinationPropagation {\n             );\n             return;\n         }\n-        if body.basic_blocks().len() > MAX_BLOCKS {\n+        if body.basic_blocks.len() > MAX_BLOCKS {\n             warn!(\n                 \"too many blocks in {:?} ({}, max is {}), not optimizing\",\n                 def_id,\n-                body.basic_blocks().len(),\n+                body.basic_blocks.len(),\n                 MAX_BLOCKS\n             );\n             return;"}, {"sha": "32e738bbcea44b108c47e2dd948cef4f242dbbdb", "filename": "compiler/rustc_mir_transform/src/early_otherwise_branch.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -104,8 +104,8 @@ impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n         let mut should_cleanup = false;\n \n         // Also consider newly generated bbs in the same pass\n-        for i in 0..body.basic_blocks().len() {\n-            let bbs = body.basic_blocks();\n+        for i in 0..body.basic_blocks.len() {\n+            let bbs = &*body.basic_blocks;\n             let parent = BasicBlock::from_usize(i);\n             let Some(opt_data) = evaluate_candidate(tcx, body, parent) else {\n                 continue\n@@ -316,7 +316,7 @@ fn evaluate_candidate<'tcx>(\n     body: &Body<'tcx>,\n     parent: BasicBlock,\n ) -> Option<OptimizationData<'tcx>> {\n-    let bbs = body.basic_blocks();\n+    let bbs = &body.basic_blocks;\n     let TerminatorKind::SwitchInt {\n         targets,\n         switch_ty: parent_ty,"}, {"sha": "61118ecc8ed51b0a89c8d2b64a11b57a8e9ac274", "filename": "compiler/rustc_mir_transform/src/elaborate_drops.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -89,13 +89,13 @@ fn find_dead_unwinds<'tcx>(\n     debug!(\"find_dead_unwinds({:?})\", body.span);\n     // We only need to do this pass once, because unwind edges can only\n     // reach cleanup blocks, which can't have unwind edges themselves.\n-    let mut dead_unwinds = BitSet::new_empty(body.basic_blocks().len());\n+    let mut dead_unwinds = BitSet::new_empty(body.basic_blocks.len());\n     let mut flow_inits = MaybeInitializedPlaces::new(tcx, body, &env)\n         .into_engine(tcx, body)\n         .pass_name(\"find_dead_unwinds\")\n         .iterate_to_fixpoint()\n         .into_results_cursor(body);\n-    for (bb, bb_data) in body.basic_blocks().iter_enumerated() {\n+    for (bb, bb_data) in body.basic_blocks.iter_enumerated() {\n         let place = match bb_data.terminator().kind {\n             TerminatorKind::Drop { ref place, unwind: Some(_), .. }\n             | TerminatorKind::DropAndReplace { ref place, unwind: Some(_), .. } => {\n@@ -303,7 +303,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n     }\n \n     fn collect_drop_flags(&mut self) {\n-        for (bb, data) in self.body.basic_blocks().iter_enumerated() {\n+        for (bb, data) in self.body.basic_blocks.iter_enumerated() {\n             let terminator = data.terminator();\n             let place = match terminator.kind {\n                 TerminatorKind::Drop { ref place, .. }\n@@ -358,7 +358,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n     }\n \n     fn elaborate_drops(&mut self) {\n-        for (bb, data) in self.body.basic_blocks().iter_enumerated() {\n+        for (bb, data) in self.body.basic_blocks.iter_enumerated() {\n             let loc = Location { block: bb, statement_index: data.statements.len() };\n             let terminator = data.terminator();\n \n@@ -515,7 +515,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n     }\n \n     fn drop_flags_for_fn_rets(&mut self) {\n-        for (bb, data) in self.body.basic_blocks().iter_enumerated() {\n+        for (bb, data) in self.body.basic_blocks.iter_enumerated() {\n             if let TerminatorKind::Call {\n                 destination, target: Some(tgt), cleanup: Some(_), ..\n             } = data.terminator().kind\n@@ -550,7 +550,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         // drop flags by themselves, to avoid the drop flags being\n         // clobbered before they are read.\n \n-        for (bb, data) in self.body.basic_blocks().iter_enumerated() {\n+        for (bb, data) in self.body.basic_blocks.iter_enumerated() {\n             debug!(\"drop_flags_for_locs({:?})\", data);\n             for i in 0..(data.statements.len() + 1) {\n                 debug!(\"drop_flag_for_locs: stmt {}\", i);"}, {"sha": "7522a50a8c6436ebf94fee1af0bf79f80cf1b41f", "filename": "compiler/rustc_mir_transform/src/ffi_unwind_calls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -65,7 +65,7 @@ fn has_ffi_unwind_calls(tcx: TyCtxt<'_>, local_def_id: LocalDefId) -> bool {\n \n     let mut tainted = false;\n \n-    for block in body.basic_blocks() {\n+    for block in body.basic_blocks.iter() {\n         if block.is_cleanup {\n             continue;\n         }"}, {"sha": "c260611b40712cd5c10d0bfd542f81a38e4f5981", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -490,12 +490,12 @@ fn locals_live_across_suspend_points<'tcx>(\n         .iterate_to_fixpoint()\n         .into_results_cursor(body_ref);\n \n-    let mut storage_liveness_map = IndexVec::from_elem(None, body.basic_blocks());\n+    let mut storage_liveness_map = IndexVec::from_elem(None, &body.basic_blocks);\n     let mut live_locals_at_suspension_points = Vec::new();\n     let mut source_info_at_suspension_points = Vec::new();\n     let mut live_locals_at_any_suspension_point = BitSet::new_empty(body.local_decls.len());\n \n-    for (block, data) in body.basic_blocks().iter_enumerated() {\n+    for (block, data) in body.basic_blocks.iter_enumerated() {\n         if let TerminatorKind::Yield { .. } = data.terminator().kind {\n             let loc = Location { block, statement_index: data.statements.len() };\n \n@@ -704,7 +704,7 @@ impl<'mir, 'tcx> rustc_mir_dataflow::ResultsVisitor<'mir, 'tcx>\n impl StorageConflictVisitor<'_, '_, '_> {\n     fn apply_state(&mut self, flow_state: &BitSet<Local>, loc: Location) {\n         // Ignore unreachable blocks.\n-        if self.body.basic_blocks()[loc.block].terminator().kind == TerminatorKind::Unreachable {\n+        if self.body.basic_blocks[loc.block].terminator().kind == TerminatorKind::Unreachable {\n             return;\n         }\n \n@@ -886,7 +886,7 @@ fn elaborate_generator_drops<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n \n     let mut elaborator = DropShimElaborator { body, patch: MirPatch::new(body), tcx, param_env };\n \n-    for (block, block_data) in body.basic_blocks().iter_enumerated() {\n+    for (block, block_data) in body.basic_blocks.iter_enumerated() {\n         let (target, unwind, source_info) = match block_data.terminator() {\n             Terminator { source_info, kind: TerminatorKind::Drop { place, target, unwind } } => {\n                 if let Some(local) = place.as_local() {\n@@ -991,7 +991,7 @@ fn insert_panic_block<'tcx>(\n     body: &mut Body<'tcx>,\n     message: AssertMessage<'tcx>,\n ) -> BasicBlock {\n-    let assert_block = BasicBlock::new(body.basic_blocks().len());\n+    let assert_block = BasicBlock::new(body.basic_blocks.len());\n     let term = TerminatorKind::Assert {\n         cond: Operand::Constant(Box::new(Constant {\n             span: body.span,\n@@ -1021,7 +1021,7 @@ fn can_return<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, param_env: ty::ParamEn\n     }\n \n     // If there's a return terminator the function may return.\n-    for block in body.basic_blocks() {\n+    for block in body.basic_blocks.iter() {\n         if let TerminatorKind::Return = block.terminator().kind {\n             return true;\n         }\n@@ -1038,7 +1038,7 @@ fn can_unwind<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) -> bool {\n     }\n \n     // Unwinds can only start at certain terminators.\n-    for block in body.basic_blocks() {\n+    for block in body.basic_blocks.iter() {\n         match block.terminator().kind {\n             // These never unwind.\n             TerminatorKind::Goto { .. }"}, {"sha": "ba00f16308eaee28770f632bfea55360ecacc472", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -95,7 +95,7 @@ fn inline<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) -> bool {\n         history: Vec::new(),\n         changed: false,\n     };\n-    let blocks = BasicBlock::new(0)..body.basic_blocks().next_index();\n+    let blocks = BasicBlock::new(0)..body.basic_blocks.next_index();\n     this.process_blocks(body, blocks);\n     this.changed\n }\n@@ -217,9 +217,9 @@ impl<'tcx> Inliner<'tcx> {\n             }\n         }\n \n-        let old_blocks = caller_body.basic_blocks().next_index();\n+        let old_blocks = caller_body.basic_blocks.next_index();\n         self.inline_call(caller_body, &callsite, callee_body);\n-        let new_blocks = old_blocks..caller_body.basic_blocks().next_index();\n+        let new_blocks = old_blocks..caller_body.basic_blocks.next_index();\n \n         Ok(new_blocks)\n     }\n@@ -409,14 +409,14 @@ impl<'tcx> Inliner<'tcx> {\n         // Give a bonus functions with a small number of blocks,\n         // We normally have two or three blocks for even\n         // very small functions.\n-        if callee_body.basic_blocks().len() <= 3 {\n+        if callee_body.basic_blocks.len() <= 3 {\n             threshold += threshold / 4;\n         }\n         debug!(\"    final inline threshold = {}\", threshold);\n \n         // FIXME: Give a bonus to functions with only a single caller\n         let diverges = matches!(\n-            callee_body.basic_blocks()[START_BLOCK].terminator().kind,\n+            callee_body.basic_blocks[START_BLOCK].terminator().kind,\n             TerminatorKind::Unreachable | TerminatorKind::Call { target: None, .. }\n         );\n         if diverges && !matches!(callee_attrs.inline, InlineAttr::Always) {\n@@ -434,13 +434,13 @@ impl<'tcx> Inliner<'tcx> {\n \n         // Traverse the MIR manually so we can account for the effects of inlining on the CFG.\n         let mut work_list = vec![START_BLOCK];\n-        let mut visited = BitSet::new_empty(callee_body.basic_blocks().len());\n+        let mut visited = BitSet::new_empty(callee_body.basic_blocks.len());\n         while let Some(bb) = work_list.pop() {\n             if !visited.insert(bb.index()) {\n                 continue;\n             }\n \n-            let blk = &callee_body.basic_blocks()[bb];\n+            let blk = &callee_body.basic_blocks[bb];\n             checker.visit_basic_block_data(bb, blk);\n \n             let term = blk.terminator();\n@@ -541,7 +541,7 @@ impl<'tcx> Inliner<'tcx> {\n                     args: &args,\n                     new_locals: Local::new(caller_body.local_decls.len())..,\n                     new_scopes: SourceScope::new(caller_body.source_scopes.len())..,\n-                    new_blocks: BasicBlock::new(caller_body.basic_blocks().len())..,\n+                    new_blocks: BasicBlock::new(caller_body.basic_blocks.len())..,\n                     destination: dest,\n                     callsite_scope: caller_body.source_scopes[callsite.source_info.scope].clone(),\n                     callsite,"}, {"sha": "b027f94925d2f303595c5bc9312839c8deea55da", "filename": "compiler/rustc_mir_transform/src/inline/cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -153,7 +153,7 @@ pub(crate) fn mir_inliner_callees<'tcx>(\n         _ => tcx.instance_mir(instance),\n     };\n     let mut calls = FxIndexSet::default();\n-    for bb_data in body.basic_blocks() {\n+    for bb_data in body.basic_blocks.iter() {\n         let terminator = bb_data.terminator();\n         if let TerminatorKind::Call { func, .. } = &terminator.kind {\n             let ty = func.ty(&body.local_decls, tcx);"}, {"sha": "3957cd92c4e3940250ebd8dfc5b945d332d810d8", "filename": "compiler/rustc_mir_transform/src/multiple_return_terminators.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fmultiple_return_terminators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fmultiple_return_terminators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fmultiple_return_terminators.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -15,7 +15,7 @@ impl<'tcx> MirPass<'tcx> for MultipleReturnTerminators {\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         // find basic blocks with no statement and a return terminator\n-        let mut bbs_simple_returns = BitSet::new_empty(body.basic_blocks().len());\n+        let mut bbs_simple_returns = BitSet::new_empty(body.basic_blocks.len());\n         let def_id = body.source.def_id();\n         let bbs = body.basic_blocks_mut();\n         for idx in bbs.indices() {"}, {"sha": "a159e61717823e5847d01641fc9f9762bae81139", "filename": "compiler/rustc_mir_transform/src/normalize_array_len.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -21,10 +21,10 @@ impl<'tcx> MirPass<'tcx> for NormalizeArrayLen {\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         // early returns for edge cases of highly unrolled functions\n-        if body.basic_blocks().len() > MAX_NUM_BLOCKS {\n+        if body.basic_blocks.len() > MAX_NUM_BLOCKS {\n             return;\n         }\n-        if body.local_decls().len() > MAX_NUM_LOCALS {\n+        if body.local_decls.len() > MAX_NUM_LOCALS {\n             return;\n         }\n         normalize_array_len_calls(tcx, body)"}, {"sha": "4291e81c78c2523144272658572fa019e9a14b4c", "filename": "compiler/rustc_mir_transform/src/nrvo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -89,7 +89,7 @@ fn local_eligible_for_nrvo(body: &mut mir::Body<'_>) -> Option<Local> {\n     }\n \n     let mut copied_to_return_place = None;\n-    for block in body.basic_blocks().indices() {\n+    for block in body.basic_blocks.indices() {\n         // Look for blocks with a `Return` terminator.\n         if !matches!(body[block].terminator().kind, mir::TerminatorKind::Return) {\n             continue;\n@@ -122,7 +122,7 @@ fn find_local_assigned_to_return_place(\n     body: &mut mir::Body<'_>,\n ) -> Option<Local> {\n     let mut block = start;\n-    let mut seen = HybridBitSet::new_empty(body.basic_blocks().len());\n+    let mut seen = HybridBitSet::new_empty(body.basic_blocks.len());\n \n     // Iterate as long as `block` has exactly one predecessor that we have not yet visited.\n     while seen.insert(block) {"}, {"sha": "41a0bfac41aed2151cf9771f906fc693d25e4951", "filename": "compiler/rustc_mir_transform/src/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -94,7 +94,7 @@ impl RemoveNoopLandingPads {\n \n         let mut jumps_folded = 0;\n         let mut landing_pads_removed = 0;\n-        let mut nop_landing_pads = BitSet::new_empty(body.basic_blocks().len());\n+        let mut nop_landing_pads = BitSet::new_empty(body.basic_blocks.len());\n \n         // This is a post-order traversal, so that if A post-dominates B\n         // then A will be visited before B."}, {"sha": "78b6f714a9b0baf7cd02c5039d4c64a20eb1fe2b", "filename": "compiler/rustc_mir_transform/src/remove_uninit_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_uninit_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_uninit_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_uninit_drops.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -35,7 +35,7 @@ impl<'tcx> MirPass<'tcx> for RemoveUninitDrops {\n             .into_results_cursor(body);\n \n         let mut to_remove = vec![];\n-        for (bb, block) in body.basic_blocks().iter_enumerated() {\n+        for (bb, block) in body.basic_blocks.iter_enumerated() {\n             let terminator = block.terminator();\n             let (TerminatorKind::Drop { place, .. } | TerminatorKind::DropAndReplace { place, .. })\n                 = &terminator.kind"}, {"sha": "190f9c1ac158c39bea8b48beb819ad5f0595e4e9", "filename": "compiler/rustc_mir_transform/src/separate_const_switch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -62,7 +62,7 @@ impl<'tcx> MirPass<'tcx> for SeparateConstSwitch {\n pub fn separate_const_switch(body: &mut Body<'_>) -> usize {\n     let mut new_blocks: SmallVec<[(BasicBlock, BasicBlock); 6]> = SmallVec::new();\n     let predecessors = body.basic_blocks.predecessors();\n-    'block_iter: for (block_id, block) in body.basic_blocks().iter_enumerated() {\n+    'block_iter: for (block_id, block) in body.basic_blocks.iter_enumerated() {\n         if let TerminatorKind::SwitchInt {\n             discr: Operand::Copy(switch_place) | Operand::Move(switch_place),\n             ..\n@@ -90,7 +90,7 @@ pub fn separate_const_switch(body: &mut Body<'_>) -> usize {\n \n                 let mut predecessors_left = predecessors[block_id].len();\n                 'predec_iter: for predecessor_id in predecessors[block_id].iter().copied() {\n-                    let predecessor = &body.basic_blocks()[predecessor_id];\n+                    let predecessor = &body.basic_blocks[predecessor_id];\n \n                     // First we make sure the predecessor jumps\n                     // in a reasonable way"}, {"sha": "bed48db959a53a2e7b9e289c975c6bb41cfcc434", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -74,7 +74,7 @@ pub struct CfgSimplifier<'a, 'tcx> {\n \n impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n     pub fn new(body: &'a mut Body<'tcx>) -> Self {\n-        let mut pred_count = IndexVec::from_elem(0u32, body.basic_blocks());\n+        let mut pred_count = IndexVec::from_elem(0u32, &body.basic_blocks);\n \n         // we can't use mir.predecessors() here because that counts\n         // dead blocks, which we don't want to.\n@@ -263,7 +263,7 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n \n pub fn remove_dead_blocks<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     let reachable = traversal::reachable_as_bitset(body);\n-    let num_blocks = body.basic_blocks().len();\n+    let num_blocks = body.basic_blocks.len();\n     if num_blocks == reachable.count() {\n         return;\n     }"}, {"sha": "321d8c63b6e028c3d7c9b68d5dd0991c1db4879d", "filename": "compiler/rustc_mir_transform/src/simplify_comparison_integral.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_comparison_integral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_comparison_integral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_comparison_integral.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -151,7 +151,7 @@ struct OptimizationFinder<'a, 'tcx> {\n impl<'tcx> OptimizationFinder<'_, 'tcx> {\n     fn find_optimizations(&self) -> Vec<OptimizationInfo<'tcx>> {\n         self.body\n-            .basic_blocks()\n+            .basic_blocks\n             .iter_enumerated()\n             .filter_map(|(bb_idx, bb)| {\n                 // find switch"}, {"sha": "baeb620ef240393d1d8678c1b305883adc532713", "filename": "compiler/rustc_mir_transform/src/simplify_try.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -596,7 +596,7 @@ struct SimplifyBranchSameOptimizationFinder<'a, 'tcx> {\n impl<'tcx> SimplifyBranchSameOptimizationFinder<'_, 'tcx> {\n     fn find(&self) -> Vec<SimplifyBranchSameOptimization> {\n         self.body\n-            .basic_blocks()\n+            .basic_blocks\n             .iter_enumerated()\n             .filter_map(|(bb_idx, bb)| {\n                 let (discr_switched_on, targets_and_values) = match &bb.terminator().kind {\n@@ -632,7 +632,7 @@ impl<'tcx> SimplifyBranchSameOptimizationFinder<'_, 'tcx> {\n \n                 let mut iter_bbs_reachable = targets_and_values\n                     .iter()\n-                    .map(|target_and_value| (target_and_value, &self.body.basic_blocks()[target_and_value.target]))\n+                    .map(|target_and_value| (target_and_value, &self.body.basic_blocks[target_and_value.target]))\n                     .filter(|(_, bb)| {\n                         // Reaching `unreachable` is UB so assume it doesn't happen.\n                         bb.terminator().kind != TerminatorKind::Unreachable"}, {"sha": "96ea15f1b80970bf59dda11d271446f88a521e01", "filename": "compiler/rustc_mir_transform/src/uninhabited_enum_branching.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Funinhabited_enum_branching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_mir_transform%2Fsrc%2Funinhabited_enum_branching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Funinhabited_enum_branching.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -79,7 +79,7 @@ fn ensure_otherwise_unreachable<'tcx>(\n     targets: &SwitchTargets,\n ) -> Option<BasicBlockData<'tcx>> {\n     let otherwise = targets.otherwise();\n-    let bb = &body.basic_blocks()[otherwise];\n+    let bb = &body.basic_blocks[otherwise];\n     if bb.terminator().kind == TerminatorKind::Unreachable\n         && bb.statements.iter().all(|s| matches!(&s.kind, StatementKind::StorageDead(_)))\n     {\n@@ -102,10 +102,10 @@ impl<'tcx> MirPass<'tcx> for UninhabitedEnumBranching {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         trace!(\"UninhabitedEnumBranching starting for {:?}\", body.source);\n \n-        for bb in body.basic_blocks().indices() {\n+        for bb in body.basic_blocks.indices() {\n             trace!(\"processing block {:?}\", bb);\n \n-            let Some(discriminant_ty) = get_switched_on_type(&body.basic_blocks()[bb], tcx, body) else {\n+            let Some(discriminant_ty) = get_switched_on_type(&body.basic_blocks[bb], tcx, body) else {\n                 continue;\n             };\n "}, {"sha": "43319dc5862e6e79372fdee53c1c995fe36861db", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -481,7 +481,7 @@ fn codegened_and_inlined_items<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> &'tcx DefIdSe\n                     continue;\n                 }\n                 let body = tcx.instance_mir(instance.def);\n-                for block in body.basic_blocks() {\n+                for block in body.basic_blocks.iter() {\n                     for statement in &block.statements {\n                         let mir::StatementKind::Coverage(_) = statement.kind else { continue };\n                         let scope = statement.source_info.scope;"}, {"sha": "acfeefb4d12d535d9d7a03477a90049cde370ac6", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -348,7 +348,7 @@ fn instance_def_size_estimate<'tcx>(\n     match instance_def {\n         InstanceDef::Item(..) | InstanceDef::DropGlue(..) => {\n             let mir = tcx.instance_mir(instance_def);\n-            mir.basic_blocks().iter().map(|bb| bb.statements.len() + 1).sum()\n+            mir.basic_blocks.iter().map(|bb| bb.statements.len() + 1).sum()\n         }\n         // Estimate the size of other compiler-generated shims to be 1.\n         _ => 1,"}, {"sha": "9fd86331ec755d8fbeafb87bce01d4f98f4786af", "filename": "src/tools/clippy/clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -105,7 +105,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n             vis.into_map(cx, maybe_storage_live_result)\n         };\n \n-        for (bb, bbdata) in mir.basic_blocks().iter_enumerated() {\n+        for (bb, bbdata) in mir.basic_blocks.iter_enumerated() {\n             let terminator = bbdata.terminator();\n \n             if terminator.source_info.span.from_expansion() {\n@@ -186,7 +186,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n                     unwrap_or_continue!(find_stmt_assigns_to(cx, mir, pred_arg, true, ps[0]));\n                 let loc = mir::Location {\n                     block: bb,\n-                    statement_index: mir.basic_blocks()[bb].statements.len(),\n+                    statement_index: mir.basic_blocks[bb].statements.len(),\n                 };\n \n                 // This can be turned into `res = move local` if `arg` and `cloned` are not borrowed\n@@ -310,7 +310,7 @@ fn find_stmt_assigns_to<'tcx>(\n     by_ref: bool,\n     bb: mir::BasicBlock,\n ) -> Option<(mir::Local, CannotMoveOut)> {\n-    let rvalue = mir.basic_blocks()[bb].statements.iter().rev().find_map(|stmt| {\n+    let rvalue = mir.basic_blocks[bb].statements.iter().rev().find_map(|stmt| {\n         if let mir::StatementKind::Assign(box (mir::Place { local, .. }, v)) = &stmt.kind {\n             return if *local == to_local { Some(v) } else { None };\n         }"}, {"sha": "74c222bbcbeb99e6bda141ed4af1033c47915b3a", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d182081de1ae2fe580c038abd526d85cedafa712/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182081de1ae2fe580c038abd526d85cedafa712/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=d182081de1ae2fe580c038abd526d85cedafa712", "patch": "@@ -55,7 +55,7 @@ pub fn is_min_const_fn<'a, 'tcx>(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, msrv:\n         body.local_decls.iter().next().unwrap().source_info.span,\n     )?;\n \n-    for bb in body.basic_blocks() {\n+    for bb in body.basic_blocks.iter() {\n         check_terminator(tcx, body, bb.terminator(), msrv)?;\n         for stmt in &bb.statements {\n             check_statement(tcx, body, def_id, stmt)?;"}]}