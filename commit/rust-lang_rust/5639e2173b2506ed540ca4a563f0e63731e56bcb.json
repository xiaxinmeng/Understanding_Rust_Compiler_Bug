{"sha": "5639e2173b2506ed540ca4a563f0e63731e56bcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MzllMjE3M2IyNTA2ZWQ1NDBjYTRhNTYzZjBlNjM3MzFlNTZiY2I=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-08-01T19:40:06Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-08-03T22:00:27Z"}, "message": "Tests for closure spans", "tree": {"sha": "c5d5f0126f22cf071e95039dc7d1ad74a81f9eae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5d5f0126f22cf071e95039dc7d1ad74a81f9eae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5639e2173b2506ed540ca4a563f0e63731e56bcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5639e2173b2506ed540ca4a563f0e63731e56bcb", "html_url": "https://github.com/rust-lang/rust/commit/5639e2173b2506ed540ca4a563f0e63731e56bcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5639e2173b2506ed540ca4a563f0e63731e56bcb/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "903851f785aaa01b5ae2e9648a2fd1256eea2ba5", "url": "https://api.github.com/repos/rust-lang/rust/commits/903851f785aaa01b5ae2e9648a2fd1256eea2ba5", "html_url": "https://github.com/rust-lang/rust/commit/903851f785aaa01b5ae2e9648a2fd1256eea2ba5"}], "stats": {"total": 666, "additions": 666, "deletions": 0}, "files": [{"sha": "b49436fabcf7487e35598f66167dcc82bca1215a", "filename": "src/test/ui/nll/closure-access-spans.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/5639e2173b2506ed540ca4a563f0e63731e56bcb/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5639e2173b2506ed540ca4a563f0e63731e56bcb/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.rs?ref=5639e2173b2506ed540ca4a563f0e63731e56bcb", "patch": "@@ -0,0 +1,68 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// check that accesses due to a closure capture give a special note\n+\n+#![feature(nll)]\n+\n+fn closure_imm_capture_conflict(mut x: i32) {\n+    let r = &mut x;\n+    || x; //~ ERROR\n+    r.use_mut();\n+}\n+\n+fn closure_mut_capture_conflict(mut x: i32) {\n+    let r = &mut x;\n+    || x = 2; //~ ERROR\n+    r.use_mut();\n+}\n+\n+fn closure_unique_capture_conflict(mut x: &mut i32) {\n+    let r = &mut x;\n+    || *x = 2; //~ ERROR\n+    r.use_mut();\n+}\n+\n+fn closure_copy_capture_conflict(mut x: i32) {\n+    let r = &mut x;\n+    move || x; //~ ERROR\n+    r.use_ref();\n+}\n+\n+fn closure_move_capture_conflict(mut x: String) {\n+    let r = &x;\n+    || x; //~ ERROR\n+    r.use_ref();\n+}\n+\n+fn closure_imm_capture_moved(mut x: String) {\n+    let r = x;\n+    || x.len(); //~ ERROR\n+}\n+\n+fn closure_mut_capture_moved(mut x: String) {\n+    let r = x;\n+    || x = String::new(); //~ ERROR\n+}\n+\n+fn closure_unique_capture_moved(x: &mut String) {\n+    let r = x;\n+    || *x = String::new(); //~ ERROR\n+}\n+\n+fn closure_move_capture_moved(x: &mut String) {\n+    let r = x;\n+    || x; //~ ERROR\n+}\n+\n+fn main() {}\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "0042b5d7d529b316050daab10ef89296ed26a403", "filename": "src/test/ui/nll/closure-access-spans.stderr", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/5639e2173b2506ed540ca4a563f0e63731e56bcb/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5639e2173b2506ed540ca4a563f0e63731e56bcb/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr?ref=5639e2173b2506ed540ca4a563f0e63731e56bcb", "patch": "@@ -0,0 +1,110 @@\n+error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n+  --> $DIR/closure-access-spans.rs:17:5\n+   |\n+LL |     let r = &mut x;\n+   |             ------ mutable borrow occurs here\n+LL |     || x; //~ ERROR\n+   |     ^^ - second borrow occurs due to use of `x` in closure\n+   |     |\n+   |     immutable borrow occurs here\n+LL |     r.use_mut();\n+   |     - borrow later used here\n+\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/closure-access-spans.rs:23:5\n+   |\n+LL |     let r = &mut x;\n+   |             ------ first mutable borrow occurs here\n+LL |     || x = 2; //~ ERROR\n+   |     ^^ - second borrow occurs due to use of `x` in closure\n+   |     |\n+   |     second mutable borrow occurs here\n+LL |     r.use_mut();\n+   |     - borrow later used here\n+\n+error[E0500]: closure requires unique access to `x` but it is already borrowed\n+  --> $DIR/closure-access-spans.rs:29:5\n+   |\n+LL |     let r = &mut x;\n+   |             ------ borrow occurs here\n+LL |     || *x = 2; //~ ERROR\n+   |     ^^  - second borrow occurs due to use of `x` in closure\n+   |     |\n+   |     closure construction occurs here\n+LL |     r.use_mut();\n+   |     - borrow later used here\n+\n+error[E0503]: cannot use `x` because it was mutably borrowed\n+  --> $DIR/closure-access-spans.rs:35:13\n+   |\n+LL |     let r = &mut x;\n+   |             ------ borrow of `x` occurs here\n+LL |     move || x; //~ ERROR\n+   |             ^ use of borrowed `x`\n+LL |     r.use_ref();\n+   |     - borrow later used here\n+\n+error[E0505]: cannot move out of `x` because it is borrowed\n+  --> $DIR/closure-access-spans.rs:41:5\n+   |\n+LL |     let r = &x;\n+   |             -- borrow of `x` occurs here\n+LL |     || x; //~ ERROR\n+   |     ^^ - move occurs due to use in closure\n+   |     |\n+   |     move out of `x` occurs here\n+LL |     r.use_ref();\n+   |     - borrow later used here\n+\n+error[E0382]: borrow of moved value: `x`\n+  --> $DIR/closure-access-spans.rs:47:5\n+   |\n+LL |     let r = x;\n+   |             - value moved here\n+LL |     || x.len(); //~ ERROR\n+   |     ^^ - borrow occurs due to use in closure\n+   |     |\n+   |     value borrowed here after move\n+   |\n+   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value: `x`\n+  --> $DIR/closure-access-spans.rs:52:5\n+   |\n+LL |     let r = x;\n+   |             - value moved here\n+LL |     || x = String::new(); //~ ERROR\n+   |     ^^ - borrow occurs due to use in closure\n+   |     |\n+   |     value borrowed here after move\n+   |\n+   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value: `x`\n+  --> $DIR/closure-access-spans.rs:57:5\n+   |\n+LL |     let r = x;\n+   |             - value moved here\n+LL |     || *x = String::new(); //~ ERROR\n+   |     ^^  - borrow occurs due to use in closure\n+   |     |\n+   |     value borrowed here after move\n+   |\n+   = note: move occurs because `x` has type `&mut std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/closure-access-spans.rs:62:5\n+   |\n+LL |     let r = x;\n+   |             - value moved here\n+LL |     || x; //~ ERROR\n+   |     ^^ - use occurs due to use in closure\n+   |     |\n+   |     value used here after move\n+   |\n+   = note: move occurs because `x` has type `&mut std::string::String`, which does not implement the `Copy` trait\n+\n+error: aborting due to 9 previous errors\n+\n+Some errors occurred: E0382, E0499, E0500, E0502, E0503, E0505.\n+For more information about an error, try `rustc --explain E0382`."}, {"sha": "d62dc27dade8f68fce82a15a6bc7d6a4b680afde", "filename": "src/test/ui/nll/closure-borrow-spans.rs", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/5639e2173b2506ed540ca4a563f0e63731e56bcb/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5639e2173b2506ed540ca4a563f0e63731e56bcb/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.rs?ref=5639e2173b2506ed540ca4a563f0e63731e56bcb", "patch": "@@ -0,0 +1,112 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// check that existing borrows due to a closure capture give a special note\n+\n+#![feature(nll)]\n+\n+fn move_while_borrowed(x: String) {\n+    let f = || x.len();\n+    let y = x; //~ ERROR\n+    f.use_ref();\n+}\n+\n+fn borrow_mut_while_borrowed(mut x: i32) {\n+    let f = || x;\n+    let y = &mut x; //~ ERROR\n+    f.use_ref();\n+}\n+\n+fn drop_while_borrowed() {\n+    let f;\n+    {\n+        let x = 1;\n+        f = || x; //~ ERROR\n+    }\n+    f.use_ref();\n+}\n+\n+fn assign_while_borrowed(mut x: i32) {\n+    let f = || x;\n+    x = 1; //~ ERROR\n+    f.use_ref();\n+}\n+\n+fn copy_while_borrowed_mut(mut x: i32) {\n+    let f = || x = 0;\n+    let y = x; //~ ERROR\n+    f.use_ref();\n+}\n+\n+fn borrow_while_borrowed_mut(mut x: i32) {\n+    let f = || x = 0;\n+    let y = &x; //~ ERROR\n+    f.use_ref();\n+}\n+\n+fn borrow_mut_while_borrowed_mut(mut x: i32) {\n+    let f = || x = 0;\n+    let y = &mut x; //~ ERROR\n+    f.use_ref();\n+}\n+\n+fn drop_while_borrowed_mut() {\n+    let f;\n+    {\n+        let mut x = 1;\n+        f = || x = 0; //~ ERROR\n+    }\n+    f.use_ref();\n+}\n+\n+fn assign_while_borrowed_mut(mut x: i32) {\n+    let f = || x = 0;\n+    x = 1; //~ ERROR\n+    f.use_ref();\n+}\n+\n+fn copy_while_borrowed_unique(x: &mut i32) {\n+    let f = || *x = 0;\n+    let y = x; //~ ERROR\n+    f.use_ref();\n+}\n+\n+fn borrow_while_borrowed_unique(x: &mut i32) {\n+    let f = || *x = 0;\n+    let y = &x; //~ ERROR\n+    f.use_ref();\n+}\n+\n+fn borrow_mut_while_borrowed_unique(mut x: &mut i32) {\n+    let f = || *x = 0;\n+    let y = &mut x; //~ ERROR\n+    f.use_ref();\n+}\n+\n+fn drop_while_borrowed_unique() {\n+    let mut z = 1;\n+    let f;\n+    {\n+        let x = &mut z;\n+        f = || *x = 0; //~ ERROR\n+    }\n+    f.use_ref();\n+}\n+\n+fn assign_while_borrowed_unique(x: &mut i32) {\n+    let f = || *x = 0;\n+    *x = 1; //~ ERROR\n+    f.use_ref();\n+}\n+\n+fn main() {}\n+\n+trait Fake { fn use_mut(&mut self) { } fn use_ref(&self) { }  }\n+impl<T> Fake for T { }"}, {"sha": "1b9420b3c0bf327749bbcbf9d3b6360d893b3d6d", "filename": "src/test/ui/nll/closure-borrow-spans.stderr", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/5639e2173b2506ed540ca4a563f0e63731e56bcb/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5639e2173b2506ed540ca4a563f0e63731e56bcb/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.stderr?ref=5639e2173b2506ed540ca4a563f0e63731e56bcb", "patch": "@@ -0,0 +1,172 @@\n+error[E0505]: cannot move out of `x` because it is borrowed\n+  --> $DIR/closure-borrow-spans.rs:17:13\n+   |\n+LL |     let f = || x.len();\n+   |             -- - borrow occurs due to use in closure\n+   |             |\n+   |             borrow of `x` occurs here\n+LL |     let y = x; //~ ERROR\n+   |             ^ move out of `x` occurs here\n+LL |     f.use_ref();\n+   |     - borrow later used here\n+\n+error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n+  --> $DIR/closure-borrow-spans.rs:23:13\n+   |\n+LL |     let f = || x;\n+   |             -- - first borrow occurs due to use of `x` in closure\n+   |             |\n+   |             immutable borrow occurs here\n+LL |     let y = &mut x; //~ ERROR\n+   |             ^^^^^^ mutable borrow occurs here\n+LL |     f.use_ref();\n+   |     - borrow later used here\n+\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/closure-borrow-spans.rs:31:16\n+   |\n+LL |         f = || x; //~ ERROR\n+   |             -- ^ borrowed value does not live long enough\n+   |             |\n+   |             value captured here\n+LL |     }\n+   |     - `x` dropped here while still borrowed\n+LL |     f.use_ref();\n+   |     - borrow later used here\n+\n+error[E0506]: cannot assign to `x` because it is borrowed\n+  --> $DIR/closure-borrow-spans.rs:38:5\n+   |\n+LL |     let f = || x;\n+   |             -- - borrow occurs due to use in closure\n+   |             |\n+   |             borrow of `x` occurs here\n+LL |     x = 1; //~ ERROR\n+   |     ^^^^^ assignment to borrowed `x` occurs here\n+LL |     f.use_ref();\n+   |     - borrow later used here\n+\n+error[E0503]: cannot use `x` because it was mutably borrowed\n+  --> $DIR/closure-borrow-spans.rs:44:13\n+   |\n+LL |     let f = || x = 0;\n+   |             -- - borrow occurs due to use of `x` in closure\n+   |             |\n+   |             borrow of `x` occurs here\n+LL |     let y = x; //~ ERROR\n+   |             ^ use of borrowed `x`\n+LL |     f.use_ref();\n+   |     - borrow later used here\n+\n+error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n+  --> $DIR/closure-borrow-spans.rs:50:13\n+   |\n+LL |     let f = || x = 0;\n+   |             -- - first borrow occurs due to use of `x` in closure\n+   |             |\n+   |             mutable borrow occurs here\n+LL |     let y = &x; //~ ERROR\n+   |             ^^ immutable borrow occurs here\n+LL |     f.use_ref();\n+   |     - borrow later used here\n+\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/closure-borrow-spans.rs:56:13\n+   |\n+LL |     let f = || x = 0;\n+   |             -- - first borrow occurs due to use of `x` in closure\n+   |             |\n+   |             first mutable borrow occurs here\n+LL |     let y = &mut x; //~ ERROR\n+   |             ^^^^^^ second mutable borrow occurs here\n+LL |     f.use_ref();\n+   |     - borrow later used here\n+\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/closure-borrow-spans.rs:64:16\n+   |\n+LL |         f = || x = 0; //~ ERROR\n+   |             -- ^ borrowed value does not live long enough\n+   |             |\n+   |             value captured here\n+LL |     }\n+   |     - `x` dropped here while still borrowed\n+LL |     f.use_ref();\n+   |     - borrow later used here\n+\n+error[E0506]: cannot assign to `x` because it is borrowed\n+  --> $DIR/closure-borrow-spans.rs:71:5\n+   |\n+LL |     let f = || x = 0;\n+   |             -- - borrow occurs due to use in closure\n+   |             |\n+   |             borrow of `x` occurs here\n+LL |     x = 1; //~ ERROR\n+   |     ^^^^^ assignment to borrowed `x` occurs here\n+LL |     f.use_ref();\n+   |     - borrow later used here\n+\n+error[E0505]: cannot move out of `x` because it is borrowed\n+  --> $DIR/closure-borrow-spans.rs:77:13\n+   |\n+LL |     let f = || *x = 0;\n+   |             --  - borrow occurs due to use in closure\n+   |             |\n+   |             borrow of `x` occurs here\n+LL |     let y = x; //~ ERROR\n+   |             ^ move out of `x` occurs here\n+LL |     f.use_ref();\n+   |     - borrow later used here\n+\n+error[E0501]: cannot borrow `x` as immutable because previous closure requires unique access\n+  --> $DIR/closure-borrow-spans.rs:83:13\n+   |\n+LL |     let f = || *x = 0;\n+   |             --  - first borrow occurs due to use of `x` in closure\n+   |             |\n+   |             closure construction occurs here\n+LL |     let y = &x; //~ ERROR\n+   |             ^^ borrow occurs here\n+LL |     f.use_ref();\n+   |     - borrow later used here\n+\n+error[E0501]: cannot borrow `x` as mutable because previous closure requires unique access\n+  --> $DIR/closure-borrow-spans.rs:89:13\n+   |\n+LL |     let f = || *x = 0;\n+   |             --  - first borrow occurs due to use of `x` in closure\n+   |             |\n+   |             closure construction occurs here\n+LL |     let y = &mut x; //~ ERROR\n+   |             ^^^^^^ borrow occurs here\n+LL |     f.use_ref();\n+   |     - borrow later used here\n+\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/closure-borrow-spans.rs:98:17\n+   |\n+LL |         f = || *x = 0; //~ ERROR\n+   |             --  ^ borrowed value does not live long enough\n+   |             |\n+   |             value captured here\n+LL |     }\n+   |     - `x` dropped here while still borrowed\n+LL |     f.use_ref();\n+   |     - borrow later used here\n+\n+error[E0506]: cannot assign to `*x` because it is borrowed\n+  --> $DIR/closure-borrow-spans.rs:105:5\n+   |\n+LL |     let f = || *x = 0;\n+   |             --  - borrow occurs due to use in closure\n+   |             |\n+   |             borrow of `*x` occurs here\n+LL |     *x = 1; //~ ERROR\n+   |     ^^^^^^ assignment to borrowed `*x` occurs here\n+LL |     f.use_ref();\n+   |     - borrow later used here\n+\n+error: aborting due to 14 previous errors\n+\n+Some errors occurred: E0499, E0501, E0502, E0503, E0505, E0506, E0597.\n+For more information about an error, try `rustc --explain E0499`."}, {"sha": "7e836275c8bff5a71b6d7222dfa8c90b3d803438", "filename": "src/test/ui/nll/closure-move-spans.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5639e2173b2506ed540ca4a563f0e63731e56bcb/src%2Ftest%2Fui%2Fnll%2Fclosure-move-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5639e2173b2506ed540ca4a563f0e63731e56bcb/src%2Ftest%2Fui%2Fnll%2Fclosure-move-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-move-spans.rs?ref=5639e2173b2506ed540ca4a563f0e63731e56bcb", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// check that moves due to a closure capture give a special note\n+\n+#![feature(nll)]\n+\n+fn move_after_move(x: String) {\n+    || x;\n+    let y = x; //~ ERROR\n+}\n+\n+fn borrow_after_move(x: String) {\n+    || x;\n+    let y = &x; //~ ERROR\n+}\n+\n+fn borrow_mut_after_move(mut x: String) {\n+    || x;\n+    let y = &mut x; //~ ERROR\n+}\n+\n+fn fn_ref<F: Fn()>(f: F) -> F { f }\n+fn fn_mut<F: FnMut()>(f: F) -> F { f }\n+\n+fn main() {}"}, {"sha": "80b7b4246a747a1add6911a671ce087a1a3d4802", "filename": "src/test/ui/nll/closure-move-spans.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5639e2173b2506ed540ca4a563f0e63731e56bcb/src%2Ftest%2Fui%2Fnll%2Fclosure-move-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5639e2173b2506ed540ca4a563f0e63731e56bcb/src%2Ftest%2Fui%2Fnll%2Fclosure-move-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-move-spans.stderr?ref=5639e2173b2506ed540ca4a563f0e63731e56bcb", "patch": "@@ -0,0 +1,39 @@\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/closure-move-spans.rs:17:13\n+   |\n+LL |     || x;\n+   |     -- - variable moved due to use in closure\n+   |     |\n+   |     value moved into closure here\n+LL |     let y = x; //~ ERROR\n+   |             ^ value used here after move\n+   |\n+   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value: `x`\n+  --> $DIR/closure-move-spans.rs:22:13\n+   |\n+LL |     || x;\n+   |     -- - variable moved due to use in closure\n+   |     |\n+   |     value moved into closure here\n+LL |     let y = &x; //~ ERROR\n+   |             ^^ value borrowed here after move\n+   |\n+   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value: `x`\n+  --> $DIR/closure-move-spans.rs:27:13\n+   |\n+LL |     || x;\n+   |     -- - variable moved due to use in closure\n+   |     |\n+   |     value moved into closure here\n+LL |     let y = &mut x; //~ ERROR\n+   |             ^^^^^^ value borrowed here after move\n+   |\n+   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "7ab382a96bbb49d53a4dd92f3d30758dfeee8b3a", "filename": "src/test/ui/nll/closure-use-spans.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5639e2173b2506ed540ca4a563f0e63731e56bcb/src%2Ftest%2Fui%2Fnll%2Fclosure-use-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5639e2173b2506ed540ca4a563f0e63731e56bcb/src%2Ftest%2Fui%2Fnll%2Fclosure-use-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-use-spans.rs?ref=5639e2173b2506ed540ca4a563f0e63731e56bcb", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// check that liveness due to a closure capture gives a special note\n+\n+#![feature(nll)]\n+\n+fn use_as_borrow_capture(mut x: i32) {\n+    let y = &x;\n+    x = 0; //~ ERROR\n+    || *y;\n+}\n+\n+fn use_as_borrow_mut_capture(mut x: i32) {\n+    let y = &mut x;\n+    x = 0; //~ ERROR\n+    || *y = 1;\n+}\n+\n+fn use_as_move_capture(mut x: i32) {\n+    let y = &x;\n+    x = 0; //~ ERROR\n+    move || *y;\n+}\n+\n+fn main() {}"}, {"sha": "7e5f9621d0955c80379c04a50cc41b127f869690", "filename": "src/test/ui/nll/closure-use-spans.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5639e2173b2506ed540ca4a563f0e63731e56bcb/src%2Ftest%2Fui%2Fnll%2Fclosure-use-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5639e2173b2506ed540ca4a563f0e63731e56bcb/src%2Ftest%2Fui%2Fnll%2Fclosure-use-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-use-spans.stderr?ref=5639e2173b2506ed540ca4a563f0e63731e56bcb", "patch": "@@ -0,0 +1,33 @@\n+error[E0506]: cannot assign to `x` because it is borrowed\n+  --> $DIR/closure-use-spans.rs:17:5\n+   |\n+LL |     let y = &x;\n+   |             -- borrow of `x` occurs here\n+LL |     x = 0; //~ ERROR\n+   |     ^^^^^ assignment to borrowed `x` occurs here\n+LL |     || *y;\n+   |         - borrow later captured here by closure\n+\n+error[E0506]: cannot assign to `x` because it is borrowed\n+  --> $DIR/closure-use-spans.rs:23:5\n+   |\n+LL |     let y = &mut x;\n+   |             ------ borrow of `x` occurs here\n+LL |     x = 0; //~ ERROR\n+   |     ^^^^^ assignment to borrowed `x` occurs here\n+LL |     || *y = 1;\n+   |         - borrow later captured here by closure\n+\n+error[E0506]: cannot assign to `x` because it is borrowed\n+  --> $DIR/closure-use-spans.rs:29:5\n+   |\n+LL |     let y = &x;\n+   |             -- borrow of `x` occurs here\n+LL |     x = 0; //~ ERROR\n+   |     ^^^^^ assignment to borrowed `x` occurs here\n+LL |     move || *y;\n+   |              - borrow later captured here by closure\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "c6113f3a9c50a1a51337491c2d3db71c004c323d", "filename": "src/test/ui/nll/closures-in-loops.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5639e2173b2506ed540ca4a563f0e63731e56bcb/src%2Ftest%2Fui%2Fnll%2Fclosures-in-loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5639e2173b2506ed540ca4a563f0e63731e56bcb/src%2Ftest%2Fui%2Fnll%2Fclosures-in-loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosures-in-loops.rs?ref=5639e2173b2506ed540ca4a563f0e63731e56bcb", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test messages where a closure capture conflicts with itself because it's in\n+// a loop.\n+\n+#![feature(nll)]\n+\n+fn repreated_move(x: String) {\n+    for i in 0..10 {\n+        || x; //~ ERROR\n+    }\n+}\n+\n+fn repreated_mut_borrow(mut x: String) {\n+    let mut v = Vec::new();\n+    for i in 0..10 {\n+        v.push(|| x = String::new()); //~ ERROR\n+    }\n+}\n+\n+fn repreated_unique_borrow(x: &mut String) {\n+    let mut v = Vec::new();\n+    for i in 0..10 {\n+        v.push(|| *x = String::new()); //~ ERROR\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "9758a803620003e2f378509c156804dd11d0288c", "filename": "src/test/ui/nll/closures-in-loops.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5639e2173b2506ed540ca4a563f0e63731e56bcb/src%2Ftest%2Fui%2Fnll%2Fclosures-in-loops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5639e2173b2506ed540ca4a563f0e63731e56bcb/src%2Ftest%2Fui%2Fnll%2Fclosures-in-loops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosures-in-loops.stderr?ref=5639e2173b2506ed540ca4a563f0e63731e56bcb", "patch": "@@ -0,0 +1,30 @@\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/closures-in-loops.rs:18:9\n+   |\n+LL |         || x; //~ ERROR\n+   |         ^^ - use occurs due to use in closure\n+   |         |\n+   |         value moved into closure here in previous iteration of loop\n+   |\n+   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/closures-in-loops.rs:25:16\n+   |\n+LL |         v.push(|| x = String::new()); //~ ERROR\n+   |                ^^ - borrows occur due to use of `x` in closure\n+   |                |\n+   |                mutable borrow starts here in previous iteration of loop\n+\n+error[E0524]: two closures require unique access to `x` at the same time\n+  --> $DIR/closures-in-loops.rs:32:16\n+   |\n+LL |         v.push(|| *x = String::new()); //~ ERROR\n+   |                ^^  - borrows occur due to use of `x` in closure\n+   |                |\n+   |                closures are constructed here in different iterations of loop\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0382, E0499, E0524.\n+For more information about an error, try `rustc --explain E0382`."}]}