{"sha": "23325caf43d16e8caf77f8d4855ff568b6d143be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMzI1Y2FmNDNkMTZlOGNhZjc3ZjhkNDg1NWZmNTY4YjZkMTQzYmU=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-03-26T20:02:46Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-04-03T18:42:54Z"}, "message": "Make rust-demangler installable\n\nAdds bootstrap rules to support installing rust-demangler.\n\nWhen compiling with `-Z instrument-coverage`, the coverage reports are\ngenerated by `llvm-cov`. `llvm-cov` includes a built-in demangler for\nC++, and an option to supply an alternate demangler. For Rust, we have\n`rust-demangler`, currently used in `rustc` coverage tests.\n\nFuchsia's toolchain for Rust is built via `./x.py install`. Fuchsia is\nadding support for Rust coverage, and we need to include the\n`rust-demangler` in the installed `bin` directory.\n\nConfigured rust-demangler as an in-tree extended tool.\n\nAdded tests to support `./x.py test rust-demangler`.\n\nInstall with extended tools by default only if `profiler = true`.", "tree": {"sha": "0e1805e4cda956aa04b993790affc559b15228c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e1805e4cda956aa04b993790affc559b15228c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23325caf43d16e8caf77f8d4855ff568b6d143be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23325caf43d16e8caf77f8d4855ff568b6d143be", "html_url": "https://github.com/rust-lang/rust/commit/23325caf43d16e8caf77f8d4855ff568b6d143be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23325caf43d16e8caf77f8d4855ff568b6d143be/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97717a561844eccbb6d6cc114adb94a8fa4e0172", "url": "https://api.github.com/repos/rust-lang/rust/commits/97717a561844eccbb6d6cc114adb94a8fa4e0172", "html_url": "https://github.com/rust-lang/rust/commit/97717a561844eccbb6d6cc114adb94a8fa4e0172"}], "stats": {"total": 372, "additions": 328, "deletions": 44}, "files": [{"sha": "d8b550d4c74234463495cc0e2fe385b643e69278", "filename": "config.toml.example", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/23325caf43d16e8caf77f8d4855ff568b6d143be/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/23325caf43d16e8caf77f8d4855ff568b6d143be/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=23325caf43d16e8caf77f8d4855ff568b6d143be", "patch": "@@ -259,10 +259,11 @@ changelog-seen = 2\n # be built if `extended = true`.\n #extended = false\n \n-# Installs chosen set of extended tools if `extended = true`. By default builds all.\n-# If chosen tool failed to build the installation fails. If `extended = false`, this\n-# option is ignored.\n-#tools = [\"cargo\", \"rls\", \"clippy\", \"rustfmt\", \"analysis\", \"src\"]\n+# Installs chosen set of extended tools if `extended = true`. By default builds\n+# all extended tools except `rust-demangler`, unless the target is also being\n+# built with `profiler = true`. If chosen tool failed to build the installation\n+# fails. If `extended = false`, this option is ignored.\n+#tools = [\"cargo\", \"rls\", \"clippy\", \"rustfmt\", \"analysis\", \"src\"] # + \"rust-demangler\" if `profiler`\n \n # Verbosity level: 0 == not verbose, 1 == verbose, 2 == very verbose\n #verbose = 0"}, {"sha": "86f594955041854a52d08683bd55b56ebee466f9", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23325caf43d16e8caf77f8d4855ff568b6d143be/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23325caf43d16e8caf77f8d4855ff568b6d143be/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=23325caf43d16e8caf77f8d4855ff568b6d143be", "patch": "@@ -420,6 +420,7 @@ impl<'a> Builder<'a> {\n                 test::Rustfmt,\n                 test::Miri,\n                 test::Clippy,\n+                test::RustDemangler,\n                 test::CompiletestTest,\n                 test::RustdocJSStd,\n                 test::RustdocJSNotStd,\n@@ -466,6 +467,7 @@ impl<'a> Builder<'a> {\n                 dist::Rls,\n                 dist::RustAnalyzer,\n                 dist::Rustfmt,\n+                dist::RustDemangler,\n                 dist::Clippy,\n                 dist::Miri,\n                 dist::LlvmTools,\n@@ -481,6 +483,7 @@ impl<'a> Builder<'a> {\n                 install::Rls,\n                 install::RustAnalyzer,\n                 install::Rustfmt,\n+                install::RustDemangler,\n                 install::Clippy,\n                 install::Miri,\n                 install::Analysis,"}, {"sha": "34243b797174b1354c9297a307a9dd19240b0d79", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/23325caf43d16e8caf77f8d4855ff568b6d143be/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23325caf43d16e8caf77f8d4855ff568b6d143be/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=23325caf43d16e8caf77f8d4855ff568b6d143be", "patch": "@@ -1246,6 +1246,50 @@ impl Step for Rustfmt {\n     }\n }\n \n+#[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct RustDemangler {\n+    pub compiler: Compiler,\n+    pub target: TargetSelection,\n+}\n+\n+impl Step for RustDemangler {\n+    type Output = GeneratedTarball;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"rust-demangler\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(RustDemangler {\n+            compiler: run.builder.compiler_for(\n+                run.builder.top_stage,\n+                run.builder.config.build,\n+                run.target,\n+            ),\n+            target: run.target,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) -> GeneratedTarball {\n+        let compiler = self.compiler;\n+        let target = self.target;\n+        assert!(builder.config.extended);\n+\n+        let rust_demangler = builder\n+            .ensure(tool::RustDemangler { compiler, target, extra_features: Vec::new() })\n+            .expect(\"rust-demangler expected to build - in-tree tool\");\n+\n+        // Prepare the image directory\n+        let mut tarball = Tarball::new(builder, \"rust-demangler\", &target.triple);\n+        tarball.set_overlay(OverlayKind::RustDemangler);\n+        tarball.is_preview(true);\n+        tarball.add_file(&rust_demangler, \"bin\", 0o755);\n+        tarball.add_legal_and_readme_to(\"share/doc/rust-demangler\");\n+        tarball.generate()\n+    }\n+}\n+\n #[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Extended {\n     stage: u32,\n@@ -1282,6 +1326,14 @@ impl Step for Extended {\n         let rustc_installer = builder.ensure(Rustc { compiler: builder.compiler(stage, target) });\n         let cargo_installer = builder.ensure(Cargo { compiler, target });\n         let rustfmt_installer = builder.ensure(Rustfmt { compiler, target });\n+        let profiler = builder.config.profiler_enabled(target);\n+        let install_rust_demangler =\n+            builder.config.tools.as_ref().map_or(profiler, |t| t.contains(\"rust-demangler\"));\n+        let rust_demangler_installer = if install_rust_demangler {\n+            Some(builder.ensure(RustDemangler { compiler, target }))\n+        } else {\n+            None\n+        };\n         let rls_installer = builder.ensure(Rls { compiler, target });\n         let rust_analyzer_installer = builder.ensure(RustAnalyzer { compiler, target });\n         let llvm_tools_installer = builder.ensure(LlvmTools { target });\n@@ -1312,6 +1364,9 @@ impl Step for Extended {\n         tarballs.push(clippy_installer);\n         tarballs.extend(miri_installer.clone());\n         tarballs.extend(rustfmt_installer.clone());\n+        if let Some(rust_demangler_installer) = rust_demangler_installer {\n+            tarballs.push(rust_demangler_installer);\n+        }\n         tarballs.extend(llvm_tools_installer);\n         if let Some(analysis_installer) = analysis_installer {\n             tarballs.push(analysis_installer);\n@@ -1413,6 +1468,9 @@ impl Step for Extended {\n             prepare(\"rust-docs\");\n             prepare(\"rust-std\");\n             prepare(\"rust-analysis\");\n+            if install_rust_demangler {\n+                prepare(\"rust-demangler\");\n+            }\n             prepare(\"clippy\");\n \n             if rls_installer.is_some() {\n@@ -1476,6 +1534,9 @@ impl Step for Extended {\n             prepare(\"rustc\");\n             prepare(\"cargo\");\n             prepare(\"rust-analysis\");\n+            if install_rust_demangler {\n+                prepare(\"rust-demangler\");\n+            }\n             prepare(\"rust-docs\");\n             prepare(\"rust-std\");\n             prepare(\"clippy\");\n@@ -1620,6 +1681,25 @@ impl Step for Extended {\n                     .arg(\"-t\")\n                     .arg(etc.join(\"msi/remove-duplicates.xsl\")),\n             );\n+            if install_rust_demangler {\n+                builder.run(\n+                    Command::new(&heat)\n+                        .current_dir(&exe)\n+                        .arg(\"dir\")\n+                        .arg(\"rust-demangler\")\n+                        .args(&heat_flags)\n+                        .arg(\"-cg\")\n+                        .arg(\"RustDemanglerGroup\")\n+                        .arg(\"-dr\")\n+                        .arg(\"RustDemangler\")\n+                        .arg(\"-var\")\n+                        .arg(\"var.RustDemanglerDir\")\n+                        .arg(\"-out\")\n+                        .arg(exe.join(\"RustDemanglerGroup.wxs\"))\n+                        .arg(\"-t\")\n+                        .arg(etc.join(\"msi/remove-duplicates.xsl\")),\n+                );\n+            }\n             if miri_installer.is_some() {\n                 builder.run(\n                     Command::new(&heat)\n@@ -1715,6 +1795,9 @@ impl Step for Extended {\n             candle(\"CargoGroup.wxs\".as_ref());\n             candle(\"StdGroup.wxs\".as_ref());\n             candle(\"ClippyGroup.wxs\".as_ref());\n+            if install_rust_demangler {\n+                candle(\"RustDemanglerGroup.wxs\".as_ref());\n+            }\n             if rls_installer.is_some() {\n                 candle(\"RlsGroup.wxs\".as_ref());\n             }\n@@ -1761,6 +1844,9 @@ impl Step for Extended {\n             if rust_analyzer_installer.is_some() {\n                 cmd.arg(\"RustAnalyzerGroup.wixobj\");\n             }\n+            if install_rust_demangler {\n+                cmd.arg(\"RustDemanglerGroup.wixobj\");\n+            }\n             if miri_installer.is_some() {\n                 cmd.arg(\"MiriGroup.wixobj\");\n             }"}, {"sha": "e034e2a2f90ec1e2929fcf6193dd12cce09a4d94", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/23325caf43d16e8caf77f8d4855ff568b6d143be/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23325caf43d16e8caf77f8d4855ff568b6d143be/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=23325caf43d16e8caf77f8d4855ff568b6d143be", "patch": "@@ -190,6 +190,26 @@ install!((self, builder, _config),\n             );\n         }\n     };\n+    RustDemangler,\n+        \"rust-demangler\",\n+        Self::should_build(_config),\n+        only_hosts: true,\n+    {\n+        let profiler = builder.config.profiler_enabled(self.target);\n+        let install_rust_demangler =\n+            builder.config.tools.as_ref().map_or(profiler, |t| t.contains(\"rust-demangler\"));\n+        if install_rust_demangler {\n+            let tarball = builder.ensure(\n+                dist::RustDemangler { compiler: self.compiler, target: self.target }\n+            );\n+            install_sh(builder, \"rust-demangler\", self.compiler.stage, Some(self.target), &tarball);\n+        } else {\n+            builder.info(\n+                &format!(\"skipping Install RustDemangler stage{} ({})\",\n+                         self.compiler.stage, self.target),\n+            );\n+        }\n+    };\n     Analysis, \"analysis\", Self::should_build(_config), only_hosts: false, {\n         let tarball = builder.ensure(dist::Analysis {\n             // Find the actual compiler (handling the full bootstrap option) which"}, {"sha": "4a5d5fbf04fa8265ba555cad1724f970a38a4de8", "filename": "src/bootstrap/tarball.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/23325caf43d16e8caf77f8d4855ff568b6d143be/src%2Fbootstrap%2Ftarball.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23325caf43d16e8caf77f8d4855ff568b6d143be/src%2Fbootstrap%2Ftarball.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftarball.rs?ref=23325caf43d16e8caf77f8d4855ff568b6d143be", "patch": "@@ -15,6 +15,7 @@ pub(crate) enum OverlayKind {\n     Clippy,\n     Miri,\n     Rustfmt,\n+    RustDemangler,\n     RLS,\n     RustAnalyzer,\n }\n@@ -47,6 +48,9 @@ impl OverlayKind {\n                 \"src/tools/rustfmt/LICENSE-APACHE\",\n                 \"src/tools/rustfmt/LICENSE-MIT\",\n             ],\n+            OverlayKind::RustDemangler => {\n+                &[\"src/tools/rust-demangler/README.md\", \"LICENSE-APACHE\", \"LICENSE-MIT\"]\n+            }\n             OverlayKind::RLS => &[\n                 \"src/tools/rls/README.md\",\n                 \"src/tools/rls/LICENSE-APACHE\",\n@@ -64,6 +68,7 @@ impl OverlayKind {\n         match self {\n             OverlayKind::Rust => builder.rust_version(),\n             OverlayKind::LLVM => builder.rust_version(),\n+            OverlayKind::RustDemangler => builder.rust_version(),\n             OverlayKind::Cargo => {\n                 builder.cargo_info.version(builder, &builder.release_num(\"cargo\"))\n             }"}, {"sha": "7425dcb52c0f4af6473669ee50fdd83c4f322ebb", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/23325caf43d16e8caf77f8d4855ff568b6d143be/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23325caf43d16e8caf77f8d4855ff568b6d143be/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=23325caf43d16e8caf77f8d4855ff568b6d143be", "patch": "@@ -351,6 +351,54 @@ impl Step for Rustfmt {\n     }\n }\n \n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct RustDemangler {\n+    stage: u32,\n+    host: TargetSelection,\n+}\n+\n+impl Step for RustDemangler {\n+    type Output = ();\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/tools/rust-demangler\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(RustDemangler { stage: run.builder.top_stage, host: run.target });\n+    }\n+\n+    /// Runs `cargo test` for rust-demangler.\n+    fn run(self, builder: &Builder<'_>) {\n+        let stage = self.stage;\n+        let host = self.host;\n+        let compiler = builder.compiler(stage, host);\n+\n+        let rust_demangler = builder\n+            .ensure(tool::RustDemangler { compiler, target: self.host, extra_features: Vec::new() })\n+            .expect(\"in-tree tool\");\n+        let mut cargo = tool::prepare_tool_cargo(\n+            builder,\n+            compiler,\n+            Mode::ToolRustc,\n+            host,\n+            \"test\",\n+            \"src/tools/rust-demangler\",\n+            SourceType::InTree,\n+            &[],\n+        );\n+\n+        let dir = testdir(builder, compiler.host);\n+        t!(fs::create_dir_all(&dir));\n+\n+        cargo.env(\"RUST_DEMANGLER_DRIVER_PATH\", rust_demangler);\n+        cargo.add_rustc_lib_path(builder, compiler);\n+\n+        builder.run(&mut cargo.into());\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Miri {\n     stage: u32,\n@@ -1126,7 +1174,10 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n         }\n \n         if mode == \"run-make\" && suite.ends_with(\"fulldeps\") {\n-            cmd.arg(\"--rust-demangler-path\").arg(builder.tool_exe(Tool::RustDemangler));\n+            let rust_demangler = builder\n+                .ensure(tool::RustDemangler { compiler, target, extra_features: Vec::new() })\n+                .expect(\"in-tree tool\");\n+            cmd.arg(\"--rust-demangler-path\").arg(rust_demangler);\n         }\n \n         cmd.arg(\"--src-base\").arg(builder.src.join(\"src/test\").join(suite));"}, {"sha": "bfb846f3b562f062bd12493568a22295a60787c1", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23325caf43d16e8caf77f8d4855ff568b6d143be/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23325caf43d16e8caf77f8d4855ff568b6d143be/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=23325caf43d16e8caf77f8d4855ff568b6d143be", "patch": "@@ -368,7 +368,6 @@ bootstrap_tool!(\n     Compiletest, \"src/tools/compiletest\", \"compiletest\", is_unstable_tool = true;\n     BuildManifest, \"src/tools/build-manifest\", \"build-manifest\";\n     RemoteTestClient, \"src/tools/remote-test-client\", \"remote-test-client\";\n-    RustDemangler, \"src/tools/rust-demangler\", \"rust-demangler\";\n     RustInstaller, \"src/tools/rust-installer\", \"fabricate\", is_external_tool = true;\n     RustdocTheme, \"src/tools/rustdoc-themes\", \"rustdoc-themes\";\n     ExpandYamlAnchors, \"src/tools/expand-yaml-anchors\", \"expand-yaml-anchors\";\n@@ -719,6 +718,7 @@ tool_extended!((self, builder),\n         });\n         self.extra_features.push(\"clippy\".to_owned());\n     };\n+    RustDemangler, rust_demangler, \"src/tools/rust-demangler\", \"rust-demangler\", stable=false, in_tree=true, {};\n     Rustfmt, rustfmt, \"src/tools/rustfmt\", \"rustfmt\", stable=true, {};\n     RustAnalyzer, rust_analyzer, \"src/tools/rust-analyzer/crates/rust-analyzer\", \"rust-analyzer\", stable=false, {};\n );"}, {"sha": "b7bc11253191b7a1a7c04370a77855656a1e2301", "filename": "src/tools/rust-demangler/Cargo.toml", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23325caf43d16e8caf77f8d4855ff568b6d143be/src%2Ftools%2Frust-demangler%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/23325caf43d16e8caf77f8d4855ff568b6d143be/src%2Ftools%2Frust-demangler%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-demangler%2FCargo.toml?ref=23325caf43d16e8caf77f8d4855ff568b6d143be", "patch": "@@ -8,6 +8,10 @@ edition = \"2018\"\n regex = \"1.0\"\n rustc-demangle = \"0.1.17\"\n \n+[lib]\n+name = \"rust_demangler\"\n+doctest = false\n+\n [[bin]]\n name = \"rust-demangler\"\n-path = \"main.rs\"\n+test = false"}, {"sha": "a45f5c457325067e93bdd9e04314ed07d7e012eb", "filename": "src/tools/rust-demangler/README.md", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/23325caf43d16e8caf77f8d4855ff568b6d143be/src%2Ftools%2Frust-demangler%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/23325caf43d16e8caf77f8d4855ff568b6d143be/src%2Ftools%2Frust-demangler%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-demangler%2FREADME.md?ref=23325caf43d16e8caf77f8d4855ff568b6d143be", "patch": "@@ -0,0 +1,29 @@\n+# rust-demangler\n+\n+Demangles rustc mangled names.\n+\n+This tool uses the [rustc-demangle](https://crates.io/crates/rustc-demangle)\n+crate to convert an input buffer of newline-separated mangled names into their\n+demangled translations.\n+\n+This tool takes a list of mangled names (one per line) on standard input, and\n+prints a corresponding list of demangled names. The tool is designed to support\n+programs that can leverage a third-party demangler, such as `llvm-cov`, via the\n+`-Xdemangler=<path-to-demangler>` option.\n+\n+To use `rust-demangler` with `llvm-cov` for example, add the `-Xdemangler=...`\n+option:\n+\n+```shell\n+$ TARGET=\"${PWD}/build/x86_64-unknown-linux-gnu\"\n+$ \"${TARGET}\"/llvm/bin/llvm-cov show \\\n+  --Xdemangler=path/to/rust-demangler \\\n+  --instr-profile=main.profdata ./main --show-line-counts-or-regions\n+```\n+\n+## License\n+\n+Rust-demangler is distributed under the terms of both the MIT license and the\n+Apache License (Version 2.0).\n+\n+See [LICENSE-APACHE](/LICENSE-APACHE) and [LICENSE-MIT](/LICENSE-MIT) for details."}, {"sha": "4d2911ee7f81a169e565f39a1f62a3fb5e284596", "filename": "src/tools/rust-demangler/src/lib.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/23325caf43d16e8caf77f8d4855ff568b6d143be/src%2Ftools%2Frust-demangler%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23325caf43d16e8caf77f8d4855ff568b6d143be/src%2Ftools%2Frust-demangler%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-demangler%2Fsrc%2Flib.rs?ref=23325caf43d16e8caf77f8d4855ff568b6d143be", "patch": "@@ -0,0 +1,22 @@\n+use regex::Regex;\n+use rustc_demangle::demangle;\n+\n+const REPLACE_COLONS: &str = \"::\";\n+\n+pub fn create_disambiguator_re() -> Regex {\n+    Regex::new(r\"\\[[a-f0-9]{5,16}\\]::\").unwrap()\n+}\n+\n+pub fn demangle_lines(buffer: &str, strip_crate_disambiguators: Option<Regex>) -> Vec<String> {\n+    let lines = buffer.lines();\n+    let mut demangled_lines = Vec::new();\n+    for mangled in lines {\n+        let mut demangled = demangle(mangled).to_string();\n+        if let Some(re) = &strip_crate_disambiguators {\n+            demangled = re.replace_all(&demangled, REPLACE_COLONS).to_string();\n+        }\n+        demangled_lines.push(demangled);\n+    }\n+    demangled_lines.push(\"\".to_string());\n+    demangled_lines\n+}"}, {"sha": "a87369d7baab4fcefc89490168c603ab24c6c998", "filename": "src/tools/rust-demangler/src/main.rs", "status": "renamed", "additions": 3, "deletions": 37, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/23325caf43d16e8caf77f8d4855ff568b6d143be/src%2Ftools%2Frust-demangler%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23325caf43d16e8caf77f8d4855ff568b6d143be/src%2Ftools%2Frust-demangler%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-demangler%2Fsrc%2Fmain.rs?ref=23325caf43d16e8caf77f8d4855ff568b6d143be", "patch": "@@ -1,27 +1,5 @@\n //! Demangles rustc mangled names.\n //!\n-//! This tool uses https://crates.io/crates/rustc-demangle to convert an input buffer of\n-//! newline-separated mangled names into their demangled translations.\n-//!\n-//! This tool can be leveraged by other applications that support third-party demanglers.\n-//! It takes a list of mangled names (one per line) on standard input, and prints a corresponding\n-//! list of demangled names. The tool is designed to support other programs that can leverage a\n-//! third-party demangler, such as `llvm-cov`, via the `-Xdemangler=<path-to-demangler>` option.\n-//!\n-//! To use `rust-demangler`, first build the tool with:\n-//!\n-//! ```shell\n-//! $ ./x.py build rust-demangler\n-//! ```\n-//!\n-//! Then, with `llvm-cov` for example, add the `-Xdemangler=...` option:\n-//!\n-//! ```shell\n-//! $ TARGET=\"${PWD}/build/x86_64-unknown-linux-gnu\"\n-//! $ \"${TARGET}\"/llvm/bin/llvm-cov show --Xdemangler=\"${TARGET}\"/stage0-tools-bin/rust-demangler \\\n-//!   --instr-profile=main.profdata ./main --show-line-counts-or-regions\n-//! ```\n-//!\n //! Note regarding crate disambiguators:\n //!\n //! Some demangled symbol paths can include \"crate disambiguator\" suffixes, represented as a large\n@@ -57,12 +35,9 @@\n //! These disambiguators seem to have more analytical value (for instance, in coverage analysis), so\n //! they are not removed.\n \n-use regex::Regex;\n-use rustc_demangle::demangle;\n+use rust_demangler::*;\n use std::io::{self, Read, Write};\n \n-const REPLACE_COLONS: &str = \"::\";\n-\n fn main() -> io::Result<()> {\n     // FIXME(richkadel): In Issue #77615 discussed updating the `rustc-demangle` library, to provide\n     // an option to generate demangled names without including crate disambiguators. If that\n@@ -82,7 +57,7 @@ fn main() -> io::Result<()> {\n     // and more than three leading zeros should be extremely unlikely. Conversely, it should be\n     // sufficient to assume the zero-based indexes for closures and anonymous scopes will never\n     // exceed the value 9999.\n-    let mut strip_crate_disambiguators = Some(Regex::new(r\"\\[[a-f0-9]{5,16}\\]::\").unwrap());\n+    let mut strip_crate_disambiguators = Some(create_disambiguator_re());\n \n     let mut args = std::env::args();\n     let progname = args.next().unwrap();\n@@ -115,16 +90,7 @@ fn main() -> io::Result<()> {\n \n     let mut buffer = String::new();\n     io::stdin().read_to_string(&mut buffer)?;\n-    let lines = buffer.lines();\n-    let mut demangled_lines = Vec::new();\n-    for mangled in lines {\n-        let mut demangled = demangle(mangled).to_string();\n-        if let Some(re) = &strip_crate_disambiguators {\n-            demangled = re.replace_all(&demangled, REPLACE_COLONS).to_string();\n-        }\n-        demangled_lines.push(demangled);\n-    }\n-    demangled_lines.push(\"\".to_string());\n+    let demangled_lines = demangle_lines(&buffer, strip_crate_disambiguators);\n     io::stdout().write_all(demangled_lines.join(\"\\n\").as_bytes())?;\n     Ok(())\n }", "previous_filename": "src/tools/rust-demangler/main.rs"}, {"sha": "8a1647601e407d318c0f1e5876dfb21fdc818739", "filename": "src/tools/rust-demangler/tests/lib.rs", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/23325caf43d16e8caf77f8d4855ff568b6d143be/src%2Ftools%2Frust-demangler%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23325caf43d16e8caf77f8d4855ff568b6d143be/src%2Ftools%2Frust-demangler%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-demangler%2Ftests%2Flib.rs?ref=23325caf43d16e8caf77f8d4855ff568b6d143be", "patch": "@@ -0,0 +1,97 @@\n+use rust_demangler::*;\n+\n+const MANGLED_LINES: &str = r\"\n+_RNvC6_123foo3bar\n+_RNqCs4fqI2P2rA04_11utf8_identsu30____7hkackfecea1cbdathfdh9hlq6y\n+_RNCNCNgCs6DXkGYLi8lr_2cc5spawn00B5_\n+_RNCINkXs25_NgCsbmNqQUJIY6D_4core5sliceINyB9_4IterhENuNgNoBb_4iter8iterator8Iterator9rpositionNCNgNpB9_6memchr7memrchrs_0E0Bb_\n+_RINbNbCskIICzLVDPPb_5alloc5alloc8box_freeDINbNiB4_5boxed5FnBoxuEp6OutputuEL_ECs1iopQbuBiw2_3std\n+INtC8arrayvec8ArrayVechKj7b_E\n+_RMCs4fqI2P2rA04_13const_genericINtB0_8UnsignedKhb_E\n+_RMCs4fqI2P2rA04_13const_genericINtB0_6SignedKs98_E\n+_RMCs4fqI2P2rA04_13const_genericINtB0_6SignedKanb_E\n+_RMCs4fqI2P2rA04_13const_genericINtB0_4BoolKb0_E\n+_RMCs4fqI2P2rA04_13const_genericINtB0_4BoolKb1_E\n+_RMCs4fqI2P2rA04_13const_genericINtB0_4CharKc76_E\n+_RMCs4fqI2P2rA04_13const_genericINtB0_4CharKca_E\n+_RMCs4fqI2P2rA04_13const_genericINtB0_4CharKc2202_E\n+_RNvNvMCs4fqI2P2rA04_13const_genericINtB4_3FooKpE3foo3FOO\n+_RC3foo.llvm.9D1C9369\n+_RC3foo.llvm.9D1C9369@@16\n+_RNvC9backtrace3foo.llvm.A5310EB9\n+_RNvNtNtNtNtCs92dm3009vxr_4rand4rngs7adapter9reseeding4fork23FORK_HANDLER_REGISTERED.0.0\n+\";\n+\n+#[test]\n+fn test_demangle_lines() {\n+    let demangled_lines = demangle_lines(MANGLED_LINES, None);\n+    let mut iter = demangled_lines.iter();\n+    assert_eq!(\"\", iter.next().unwrap());\n+    assert_eq!(\"123foo[0]::bar\", iter.next().unwrap());\n+    assert_eq!(\"utf8_idents[317d481089b8c8fe]::\u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8\", iter.next().unwrap());\n+    assert_eq!(\"cc[4d6468d6c9fd4bb3]::spawn::{closure#0}::{closure#0}\", iter.next().unwrap());\n+    assert_eq!(\n+        \"<core[846817f741e54dfd]::slice::Iter<u8> as core[846817f741e54dfd]::iter::iterator::Iterator>::rposition::<core[846817f741e54dfd]::slice::memchr::memrchr::{closure#1}>::{closure#0}\",\n+        iter.next().unwrap()\n+    );\n+    assert_eq!(\n+        \"alloc[f15a878b47eb696b]::alloc::box_free::<dyn alloc[f15a878b47eb696b]::boxed::FnBox<(), Output = ()>>\",\n+        iter.next().unwrap()\n+    );\n+    assert_eq!(\"INtC8arrayvec8ArrayVechKj7b_E\", iter.next().unwrap());\n+    assert_eq!(\"<const_generic[317d481089b8c8fe]::Unsigned<11: u8>>\", iter.next().unwrap());\n+    assert_eq!(\"<const_generic[317d481089b8c8fe]::Signed<152: i16>>\", iter.next().unwrap());\n+    assert_eq!(\"<const_generic[317d481089b8c8fe]::Signed<-11: i8>>\", iter.next().unwrap());\n+    assert_eq!(\"<const_generic[317d481089b8c8fe]::Bool<false: bool>>\", iter.next().unwrap());\n+    assert_eq!(\"<const_generic[317d481089b8c8fe]::Bool<true: bool>>\", iter.next().unwrap());\n+    assert_eq!(\"<const_generic[317d481089b8c8fe]::Char<'v': char>>\", iter.next().unwrap());\n+    assert_eq!(\"<const_generic[317d481089b8c8fe]::Char<'\\\\n': char>>\", iter.next().unwrap());\n+    assert_eq!(\"<const_generic[317d481089b8c8fe]::Char<'\u2202': char>>\", iter.next().unwrap());\n+    assert_eq!(\"<const_generic[317d481089b8c8fe]::Foo<_>>::foo::FOO\", iter.next().unwrap());\n+    assert_eq!(\"foo[0]\", iter.next().unwrap());\n+    assert_eq!(\"foo[0]\", iter.next().unwrap());\n+    assert_eq!(\"backtrace[0]::foo\", iter.next().unwrap());\n+    assert_eq!(\n+        \"rand[693ea8e72247470f]::rngs::adapter::reseeding::fork::FORK_HANDLER_REGISTERED.0.0\",\n+        iter.next().unwrap()\n+    );\n+    assert_eq!(\"\", iter.next().unwrap());\n+    assert!(iter.next().is_none());\n+}\n+\n+#[test]\n+fn test_demangle_lines_no_crate_disambiguators() {\n+    let demangled_lines = demangle_lines(MANGLED_LINES, Some(create_disambiguator_re()));\n+    let mut iter = demangled_lines.iter();\n+    assert_eq!(\"\", iter.next().unwrap());\n+    assert_eq!(\"123foo[0]::bar\", iter.next().unwrap());\n+    assert_eq!(\"utf8_idents::\u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8\", iter.next().unwrap());\n+    assert_eq!(\"cc::spawn::{closure#0}::{closure#0}\", iter.next().unwrap());\n+    assert_eq!(\n+        \"<core::slice::Iter<u8> as core::iter::iterator::Iterator>::rposition::<core::slice::memchr::memrchr::{closure#1}>::{closure#0}\",\n+        iter.next().unwrap()\n+    );\n+    assert_eq!(\n+        \"alloc::alloc::box_free::<dyn alloc::boxed::FnBox<(), Output = ()>>\",\n+        iter.next().unwrap()\n+    );\n+    assert_eq!(\"INtC8arrayvec8ArrayVechKj7b_E\", iter.next().unwrap());\n+    assert_eq!(\"<const_generic::Unsigned<11: u8>>\", iter.next().unwrap());\n+    assert_eq!(\"<const_generic::Signed<152: i16>>\", iter.next().unwrap());\n+    assert_eq!(\"<const_generic::Signed<-11: i8>>\", iter.next().unwrap());\n+    assert_eq!(\"<const_generic::Bool<false: bool>>\", iter.next().unwrap());\n+    assert_eq!(\"<const_generic::Bool<true: bool>>\", iter.next().unwrap());\n+    assert_eq!(\"<const_generic::Char<'v': char>>\", iter.next().unwrap());\n+    assert_eq!(\"<const_generic::Char<'\\\\n': char>>\", iter.next().unwrap());\n+    assert_eq!(\"<const_generic::Char<'\u2202': char>>\", iter.next().unwrap());\n+    assert_eq!(\"<const_generic::Foo<_>>::foo::FOO\", iter.next().unwrap());\n+    assert_eq!(\"foo[0]\", iter.next().unwrap());\n+    assert_eq!(\"foo[0]\", iter.next().unwrap());\n+    assert_eq!(\"backtrace[0]::foo\", iter.next().unwrap());\n+    assert_eq!(\n+        \"rand::rngs::adapter::reseeding::fork::FORK_HANDLER_REGISTERED.0.0\",\n+        iter.next().unwrap()\n+    );\n+    assert_eq!(\"\", iter.next().unwrap());\n+    assert!(iter.next().is_none());\n+}"}]}