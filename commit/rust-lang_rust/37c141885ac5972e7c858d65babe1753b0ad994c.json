{"sha": "37c141885ac5972e7c858d65babe1753b0ad994c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YzE0MTg4NWFjNTk3MmU3Yzg1OGQ2NWJhYmUxNzUzYjBhZDk5NGM=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-03T21:19:07Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-04T19:04:03Z"}, "message": "Make checked arithmetic besides division `const`\n\nCo-Authored-By: 9999years <rbt@sent.as>", "tree": {"sha": "bdb6342daf2862a4e25f4247cad47e47b82b4262", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdb6342daf2862a4e25f4247cad47e47b82b4262"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37c141885ac5972e7c858d65babe1753b0ad994c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37c141885ac5972e7c858d65babe1753b0ad994c", "html_url": "https://github.com/rust-lang/rust/commit/37c141885ac5972e7c858d65babe1753b0ad994c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37c141885ac5972e7c858d65babe1753b0ad994c/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9e3d2a5314258e2b8adc86c1ded34c4995fcd67", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9e3d2a5314258e2b8adc86c1ded34c4995fcd67", "html_url": "https://github.com/rust-lang/rust/commit/d9e3d2a5314258e2b8adc86c1ded34c4995fcd67"}], "stats": {"total": 40, "additions": 27, "deletions": 13}, "files": [{"sha": "78b1524f04f83968af6af0e9f7789b297a790e18", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37c141885ac5972e7c858d65babe1753b0ad994c/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c141885ac5972e7c858d65babe1753b0ad994c/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=37c141885ac5972e7c858d65babe1753b0ad994c", "patch": "@@ -72,6 +72,7 @@\n #![feature(concat_idents)]\n #![feature(const_alloc_layout)]\n #![feature(const_if_match)]\n+#![feature(const_int_checked)]\n #![feature(const_int_euclidean)]\n #![feature(const_panic)]\n #![feature(const_fn_union)]"}, {"sha": "91df649f121e7a277658c4a231b7a1ee3d9ced98", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/37c141885ac5972e7c858d65babe1753b0ad994c/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c141885ac5972e7c858d65babe1753b0ad994c/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=37c141885ac5972e7c858d65babe1753b0ad994c", "patch": "@@ -701,10 +701,11 @@ assert_eq!((\", stringify!($SelfT), \"::max_value() - 2).checked_add(3), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_add(self, rhs: Self) -> Option<Self> {\n+            pub const fn checked_add(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_add(rhs);\n                 if b {None} else {Some(a)}\n             }\n@@ -725,10 +726,11 @@ assert_eq!((\", stringify!($SelfT), \"::min_value() + 2).checked_sub(3), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_sub(self, rhs: Self) -> Option<Self> {\n+            pub const fn checked_sub(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_sub(rhs);\n                 if b {None} else {Some(a)}\n             }\n@@ -749,10 +751,11 @@ assert_eq!(\", stringify!($SelfT), \"::max_value().checked_mul(2), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_mul(self, rhs: Self) -> Option<Self> {\n+            pub const fn checked_mul(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_mul(rhs);\n                 if b {None} else {Some(a)}\n             }\n@@ -889,8 +892,9 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.checked_neg(), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n             #[inline]\n-            pub fn checked_neg(self) -> Option<Self> {\n+            pub const fn checked_neg(self) -> Option<Self> {\n                 let (a, b) = self.overflowing_neg();\n                 if b {None} else {Some(a)}\n             }\n@@ -910,10 +914,11 @@ assert_eq!(0x1\", stringify!($SelfT), \".checked_shl(129), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_shl(self, rhs: u32) -> Option<Self> {\n+            pub const fn checked_shl(self, rhs: u32) -> Option<Self> {\n                 let (a, b) = self.overflowing_shl(rhs);\n                 if b {None} else {Some(a)}\n             }\n@@ -933,10 +938,11 @@ assert_eq!(0x10\", stringify!($SelfT), \".checked_shr(128), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_shr(self, rhs: u32) -> Option<Self> {\n+            pub const fn checked_shr(self, rhs: u32) -> Option<Self> {\n                 let (a, b) = self.overflowing_shr(rhs);\n                 if b {None} else {Some(a)}\n             }\n@@ -958,8 +964,9 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.checked_abs(), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n             #[inline]\n-            pub fn checked_abs(self) -> Option<Self> {\n+            pub const fn checked_abs(self) -> Option<Self> {\n                 if self.is_negative() {\n                     self.checked_neg()\n                 } else {\n@@ -2855,10 +2862,11 @@ Basic usage:\n assert_eq!((\", stringify!($SelfT), \"::max_value() - 2).checked_add(3), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_add(self, rhs: Self) -> Option<Self> {\n+            pub const fn checked_add(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_add(rhs);\n                 if b {None} else {Some(a)}\n             }\n@@ -2877,10 +2885,11 @@ Basic usage:\n assert_eq!(0\", stringify!($SelfT), \".checked_sub(1), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_sub(self, rhs: Self) -> Option<Self> {\n+            pub const fn checked_sub(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_sub(rhs);\n                 if b {None} else {Some(a)}\n             }\n@@ -2899,10 +2908,11 @@ Basic usage:\n assert_eq!(\", stringify!($SelfT), \"::max_value().checked_mul(2), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_mul(self, rhs: Self) -> Option<Self> {\n+            pub const fn checked_mul(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_mul(rhs);\n                 if b {None} else {Some(a)}\n             }\n@@ -3029,8 +3039,9 @@ Basic usage:\n assert_eq!(1\", stringify!($SelfT), \".checked_neg(), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n             #[inline]\n-            pub fn checked_neg(self) -> Option<Self> {\n+            pub const fn checked_neg(self) -> Option<Self> {\n                 let (a, b) = self.overflowing_neg();\n                 if b {None} else {Some(a)}\n             }\n@@ -3049,10 +3060,11 @@ Basic usage:\n assert_eq!(0x10\", stringify!($SelfT), \".checked_shl(129), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_shl(self, rhs: u32) -> Option<Self> {\n+            pub const fn checked_shl(self, rhs: u32) -> Option<Self> {\n                 let (a, b) = self.overflowing_shl(rhs);\n                 if b {None} else {Some(a)}\n             }\n@@ -3071,10 +3083,11 @@ Basic usage:\n assert_eq!(0x10\", stringify!($SelfT), \".checked_shr(129), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_checked\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_shr(self, rhs: u32) -> Option<Self> {\n+            pub const fn checked_shr(self, rhs: u32) -> Option<Self> {\n                 let (a, b) = self.overflowing_shr(rhs);\n                 if b {None} else {Some(a)}\n             }"}]}