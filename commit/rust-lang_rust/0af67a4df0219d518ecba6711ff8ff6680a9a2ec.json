{"sha": "0af67a4df0219d518ecba6711ff8ff6680a9a2ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZjY3YTRkZjAyMTlkNTE4ZWNiYTY3MTFmZjhmZjY2ODBhOWEyZWM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-11-21T17:12:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-21T17:12:59Z"}, "message": "Rollup merge of #46052 - oli-obk:rendered_diagnostics_in_json, r=petrochenkov\n\nInclude rendered diagnostic in json\n\nr? @petrochenkov", "tree": {"sha": "850fd666fcd77c62c2cdf792282e7bd106ef8ebc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/850fd666fcd77c62c2cdf792282e7bd106ef8ebc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0af67a4df0219d518ecba6711ff8ff6680a9a2ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0af67a4df0219d518ecba6711ff8ff6680a9a2ec", "html_url": "https://github.com/rust-lang/rust/commit/0af67a4df0219d518ecba6711ff8ff6680a9a2ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0af67a4df0219d518ecba6711ff8ff6680a9a2ec/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b090a026108fab89cfe5f39bfd3492597e76ad4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b090a026108fab89cfe5f39bfd3492597e76ad4", "html_url": "https://github.com/rust-lang/rust/commit/9b090a026108fab89cfe5f39bfd3492597e76ad4"}, {"sha": "e7b2702172b91624406e8c90716a225e8ec1a299", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7b2702172b91624406e8c90716a225e8ec1a299", "html_url": "https://github.com/rust-lang/rust/commit/e7b2702172b91624406e8c90716a225e8ec1a299"}], "stats": {"total": 200, "additions": 176, "deletions": 24}, "files": [{"sha": "c2f4701999ea90aa01928079718b42487fc0ada7", "filename": "src/librustc_errors/snippet.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0af67a4df0219d518ecba6711ff8ff6680a9a2ec/src%2Flibrustc_errors%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af67a4df0219d518ecba6711ff8ff6680a9a2ec/src%2Flibrustc_errors%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fsnippet.rs?ref=0af67a4df0219d518ecba6711ff8ff6680a9a2ec", "patch": "@@ -70,7 +70,7 @@ impl MultilineAnnotation {\n \n     pub fn as_end(&self) -> Annotation {\n         Annotation {\n-            start_col: self.end_col - 1,\n+            start_col: self.end_col.saturating_sub(1),\n             end_col: self.end_col,\n             is_primary: self.is_primary,\n             label: self.label.clone(),"}, {"sha": "80ac0cb4faf7da04150a989de9915a1d2e226ffb", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0af67a4df0219d518ecba6711ff8ff6680a9a2ec/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af67a4df0219d518ecba6711ff8ff6680a9a2ec/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=0af67a4df0219d518ecba6711ff8ff6680a9a2ec", "patch": "@@ -24,11 +24,12 @@ use syntax_pos::{self, MacroBacktrace, Span, SpanLabel, MultiSpan};\n use errors::registry::Registry;\n use errors::{DiagnosticBuilder, SubDiagnostic, CodeSuggestion, CodeMapper};\n use errors::DiagnosticId;\n-use errors::emitter::Emitter;\n+use errors::emitter::{Emitter, EmitterWriter};\n \n use std::rc::Rc;\n use std::io::{self, Write};\n use std::vec;\n+use std::sync::{Arc, Mutex};\n \n use rustc_serialize::json::{as_json, as_pretty_json};\n \n@@ -95,7 +96,7 @@ struct Diagnostic {\n     spans: Vec<DiagnosticSpan>,\n     /// Associated diagnostic messages.\n     children: Vec<Diagnostic>,\n-    /// The message as rustc would render it. Currently this is always `None`\n+    /// The message as rustc would render it.\n     rendered: Option<String>,\n }\n \n@@ -170,6 +171,27 @@ impl Diagnostic {\n                 rendered: None,\n             }\n         });\n+\n+        // generate regular command line output and store it in the json\n+\n+        // A threadsafe buffer for writing.\n+        #[derive(Default, Clone)]\n+        struct BufWriter(Arc<Mutex<Vec<u8>>>);\n+\n+        impl Write for BufWriter {\n+            fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+                self.0.lock().unwrap().write(buf)\n+            }\n+            fn flush(&mut self) -> io::Result<()> {\n+                self.0.lock().unwrap().flush()\n+            }\n+        }\n+        let buf = BufWriter::default();\n+        let output = buf.clone();\n+        EmitterWriter::new(Box::new(buf), Some(je.cm.clone()), false).emit(db);\n+        let output = Arc::try_unwrap(output.0).unwrap().into_inner().unwrap();\n+        let output = String::from_utf8(output).unwrap();\n+\n         Diagnostic {\n             message: db.message(),\n             code: DiagnosticCode::map_opt_string(db.code.clone(), je),\n@@ -178,7 +200,7 @@ impl Diagnostic {\n             children: db.children.iter().map(|c| {\n                 Diagnostic::from_sub_diagnostic(c, je)\n             }).chain(sugg).collect(),\n-            rendered: None,\n+            rendered: Some(output),\n         }\n     }\n "}, {"sha": "fe113eda3dd22ce6d67330b5a5d95b6b475183eb", "filename": "src/test/ui/lint/unused_parens_json_suggestion.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0af67a4df0219d518ecba6711ff8ff6680a9a2ec/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0af67a4df0219d518ecba6711ff8ff6680a9a2ec/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr?ref=0af67a4df0219d518ecba6711ff8ff6680a9a2ec", "patch": "@@ -87,5 +87,17 @@\n       \"rendered\": null\n     }\n   ],\n-  \"rendered\": null\n+  \"rendered\": \"warning: unnecessary parentheses around assigned value\n+  --> $DIR/unused_parens_json_suggestion.rs:24:14\n+   |\n+24 |     let _a = (1 / (2 + 3));\n+   |              ^^^^^^^^^^^^^ help: remove these parentheses\n+   |\n+note: lint level defined here\n+  --> $DIR/unused_parens_json_suggestion.rs:19:9\n+   |\n+19 | #![warn(unused_parens)]\n+   |         ^^^^^^^^^^^^^\n+\n+\"\n }"}, {"sha": "846d7df445d581610b409ceb995d87c309bccfc3", "filename": "src/test/ui/lint/use_suggestion_json.stderr", "status": "modified", "additions": 123, "deletions": 15, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/0af67a4df0219d518ecba6711ff8ff6680a9a2ec/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0af67a4df0219d518ecba6711ff8ff6680a9a2ec/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr?ref=0af67a4df0219d518ecba6711ff8ff6680a9a2ec", "patch": "@@ -2,7 +2,72 @@\n   \"message\": \"cannot find type `Iter` in this scope\",\n   \"code\": {\n     \"code\": \"E0412\",\n-    \"explanation\": \"/nThe type name used is not in scope./n/nErroneous code examples:/n/n```compile_fail,E0412/nimpl Something {} // error: type name `Something` is not in scope/n/n// or:/n/ntrait Foo {/n    fn bar(N); // error: type name `N` is not in scope/n}/n/n// or:/n/nfn foo(x: T) {} // type name `T` is not in scope/n```/n/nTo fix this error, please verify you didn't misspell the type name, you did/ndeclare it or imported it into the scope. Examples:/n/n```/nstruct Something;/n/nimpl Something {} // ok!/n/n// or:/n/ntrait Foo {/n    type N;/n/n    fn bar(_: Self::N); // ok!/n}/n/n// or:/n/nfn foo<T>(x: T) {} // ok!/n```/n/nAnother case that causes this error is when a type is imported into a parent/nmodule. To fix this, you can follow the suggestion and use File directly or/n`use super::File;` which will import the types from the parent namespace. An/nexample that causes this error is below:/n/n```compile_fail,E0412/nuse std::fs::File;/n/nmod foo {/n    fn some_function(f: File) {}/n}/n```/n/n```/nuse std::fs::File;/n/nmod foo {/n    // either/n    use super::File;/n    // or/n    // use std::fs::File;/n    fn foo(f: File) {}/n}/n# fn main() {} // don't insert it for us; that'll break imports/n```/n\"\n+    \"explanation\": \"\n+The type name used is not in scope.\n+\n+Erroneous code examples:\n+\n+```compile_fail,E0412\n+impl Something {} // error: type name `Something` is not in scope\n+\n+// or:\n+\n+trait Foo {\n+    fn bar(N); // error: type name `N` is not in scope\n+}\n+\n+// or:\n+\n+fn foo(x: T) {} // type name `T` is not in scope\n+```\n+\n+To fix this error, please verify you didn't misspell the type name, you did\n+declare it or imported it into the scope. Examples:\n+\n+```\n+struct Something;\n+\n+impl Something {} // ok!\n+\n+// or:\n+\n+trait Foo {\n+    type N;\n+\n+    fn bar(_: Self::N); // ok!\n+}\n+\n+// or:\n+\n+fn foo<T>(x: T) {} // ok!\n+```\n+\n+Another case that causes this error is when a type is imported into a parent\n+module. To fix this, you can follow the suggestion and use File directly or\n+`use super::File;` which will import the types from the parent namespace. An\n+example that causes this error is below:\n+\n+```compile_fail,E0412\n+use std::fs::File;\n+\n+mod foo {\n+    fn some_function(f: File) {}\n+}\n+```\n+\n+```\n+use std::fs::File;\n+\n+mod foo {\n+    // either\n+    use super::File;\n+    // or\n+    // use std::fs::File;\n+    fn foo(f: File) {}\n+}\n+# fn main() {} // don't insert it for us; that'll break imports\n+```\n+\"\n   },\n   \"level\": \"error\",\n   \"spans\": [\n@@ -50,7 +115,9 @@\n             }\n           ],\n           \"label\": null,\n-          \"suggested_replacement\": \"use std::collections::binary_heap::Iter;/n/n\",\n+          \"suggested_replacement\": \"use std::collections::binary_heap::Iter;\n+\n+\",\n           \"expansion\": null\n         },\n         {\n@@ -70,7 +137,9 @@\n             }\n           ],\n           \"label\": null,\n-          \"suggested_replacement\": \"use std::collections::btree_map::Iter;/n/n\",\n+          \"suggested_replacement\": \"use std::collections::btree_map::Iter;\n+\n+\",\n           \"expansion\": null\n         },\n         {\n@@ -90,7 +159,9 @@\n             }\n           ],\n           \"label\": null,\n-          \"suggested_replacement\": \"use std::collections::btree_set::Iter;/n/n\",\n+          \"suggested_replacement\": \"use std::collections::btree_set::Iter;\n+\n+\",\n           \"expansion\": null\n         },\n         {\n@@ -110,7 +181,9 @@\n             }\n           ],\n           \"label\": null,\n-          \"suggested_replacement\": \"use std::collections::hash_map::Iter;/n/n\",\n+          \"suggested_replacement\": \"use std::collections::hash_map::Iter;\n+\n+\",\n           \"expansion\": null\n         },\n         {\n@@ -130,7 +203,9 @@\n             }\n           ],\n           \"label\": null,\n-          \"suggested_replacement\": \"use std::collections::hash_set::Iter;/n/n\",\n+          \"suggested_replacement\": \"use std::collections::hash_set::Iter;\n+\n+\",\n           \"expansion\": null\n         },\n         {\n@@ -150,7 +225,9 @@\n             }\n           ],\n           \"label\": null,\n-          \"suggested_replacement\": \"use std::collections::linked_list::Iter;/n/n\",\n+          \"suggested_replacement\": \"use std::collections::linked_list::Iter;\n+\n+\",\n           \"expansion\": null\n         },\n         {\n@@ -170,7 +247,9 @@\n             }\n           ],\n           \"label\": null,\n-          \"suggested_replacement\": \"use std::collections::vec_deque::Iter;/n/n\",\n+          \"suggested_replacement\": \"use std::collections::vec_deque::Iter;\n+\n+\",\n           \"expansion\": null\n         },\n         {\n@@ -190,7 +269,9 @@\n             }\n           ],\n           \"label\": null,\n-          \"suggested_replacement\": \"use std::option::Iter;/n/n\",\n+          \"suggested_replacement\": \"use std::option::Iter;\n+\n+\",\n           \"expansion\": null\n         },\n         {\n@@ -210,7 +291,9 @@\n             }\n           ],\n           \"label\": null,\n-          \"suggested_replacement\": \"use std::path::Iter;/n/n\",\n+          \"suggested_replacement\": \"use std::path::Iter;\n+\n+\",\n           \"expansion\": null\n         },\n         {\n@@ -230,7 +313,9 @@\n             }\n           ],\n           \"label\": null,\n-          \"suggested_replacement\": \"use std::result::Iter;/n/n\",\n+          \"suggested_replacement\": \"use std::result::Iter;\n+\n+\",\n           \"expansion\": null\n         },\n         {\n@@ -250,7 +335,9 @@\n             }\n           ],\n           \"label\": null,\n-          \"suggested_replacement\": \"use std::slice::Iter;/n/n\",\n+          \"suggested_replacement\": \"use std::slice::Iter;\n+\n+\",\n           \"expansion\": null\n         },\n         {\n@@ -270,21 +357,42 @@\n             }\n           ],\n           \"label\": null,\n-          \"suggested_replacement\": \"use std::sync::mpsc::Iter;/n/n\",\n+          \"suggested_replacement\": \"use std::sync::mpsc::Iter;\n+\n+\",\n           \"expansion\": null\n         }\n       ],\n       \"children\": [],\n       \"rendered\": null\n     }\n   ],\n-  \"rendered\": null\n+  \"rendered\": \"error[E0412]: cannot find type `Iter` in this scope\n+  --> $DIR/use_suggestion_json.rs:20:12\n+   |\n+20 |     let x: Iter;\n+   |            ^^^^ not found in this scope\n+help: possible candidates are found in other modules, you can import them into scope\n+   |\n+19 | use std::collections::binary_heap::Iter;\n+   |\n+19 | use std::collections::btree_map::Iter;\n+   |\n+19 | use std::collections::btree_set::Iter;\n+   |\n+19 | use std::collections::hash_map::Iter;\n+   |\n+and 8 other candidates\n+\n+\"\n }\n {\n   \"message\": \"aborting due to previous error\",\n   \"code\": null,\n   \"level\": \"error\",\n   \"spans\": [],\n   \"children\": [],\n-  \"rendered\": null\n+  \"rendered\": \"error: aborting due to previous error\n+\n+\"\n }"}, {"sha": "1fd48881ba23613c8dbd2bef03b81edc1081bf50", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0af67a4df0219d518ecba6711ff8ff6680a9a2ec/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af67a4df0219d518ecba6711ff8ff6680a9a2ec/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=0af67a4df0219d518ecba6711ff8ff6680a9a2ec", "patch": "@@ -2424,15 +2424,25 @@ actual:\\n\\\n     fn normalize_output(&self, output: &str, custom_rules: &[(String, String)]) -> String {\n         let parent_dir = self.testpaths.file.parent().unwrap();\n         let cflags = self.props.compile_flags.join(\" \");\n-        let parent_dir_str = if cflags.contains(\"--error-format json\")\n-                             || cflags.contains(\"--error-format pretty-json\") {\n+        let json = cflags.contains(\"--error-format json\") ||\n+                   cflags.contains(\"--error-format pretty-json\");\n+        let parent_dir_str = if json {\n             parent_dir.display().to_string().replace(\"\\\\\", \"\\\\\\\\\")\n         } else {\n             parent_dir.display().to_string()\n         };\n \n-        let mut normalized = output.replace(&parent_dir_str, \"$DIR\")\n-              .replace(\"\\\\\\\\\", \"\\\\\") // denormalize for paths on windows\n+        let mut normalized = output.replace(&parent_dir_str, \"$DIR\");\n+\n+        if json {\n+            // escaped newlines in json strings should be readable\n+            // in the stderr files. There's no point int being correct,\n+            // since only humans process the stderr files.\n+            // Thus we just turn escaped newlines back into newlines.\n+            normalized = normalized.replace(\"\\\\n\", \"\\n\");\n+        }\n+\n+        normalized = normalized.replace(\"\\\\\\\\\", \"\\\\\") // denormalize for paths on windows\n               .replace(\"\\\\\", \"/\") // normalize for paths on windows\n               .replace(\"\\r\\n\", \"\\n\") // normalize for linebreaks on windows\n               .replace(\"\\t\", \"\\\\t\"); // makes tabs visible"}]}