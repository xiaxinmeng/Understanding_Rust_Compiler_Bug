{"sha": "368275062fb655c1f36e0398f88b15379a1f3c93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ODI3NTA2MmZiNjU1YzFmMzZlMDM5OGY4OGIxNTM3OWExZjNjOTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-02T20:27:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-02T20:27:09Z"}, "message": "Auto merge of #81541 - Aaron1011:early-lint-async-fn, r=petrochenkov\n\nFix early lints inside an async desugaring\n\nFixes #81531\n\nWhen we buffer an early lint for a macro invocation,\nwe need to determine which NodeId to take the lint level from.\nCurrently, we use the NodeId of the closest def parent. However, if\nthe macro invocation is inside the desugared closure from an `async fn`\nor async closure, that NodeId does not actually exist in the AST.\n\nThis commit uses the parent of a desugared closure when computing\n`lint_node_id`, which is something that actually exists in the AST (an\n`async fn` or async closure).", "tree": {"sha": "aabedb920e5ac89256e0ed99865c1dc5f8f0968d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aabedb920e5ac89256e0ed99865c1dc5f8f0968d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/368275062fb655c1f36e0398f88b15379a1f3c93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/368275062fb655c1f36e0398f88b15379a1f3c93", "html_url": "https://github.com/rust-lang/rust/commit/368275062fb655c1f36e0398f88b15379a1f3c93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/368275062fb655c1f36e0398f88b15379a1f3c93/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3182375e064b8fa90437aee1465bccafd8187d89", "url": "https://api.github.com/repos/rust-lang/rust/commits/3182375e064b8fa90437aee1465bccafd8187d89", "html_url": "https://github.com/rust-lang/rust/commit/3182375e064b8fa90437aee1465bccafd8187d89"}, {"sha": "a74b2fb946f649d5020a5e1803bb6abb039a1a22", "url": "https://api.github.com/repos/rust-lang/rust/commits/a74b2fb946f649d5020a5e1803bb6abb039a1a22", "html_url": "https://github.com/rust-lang/rust/commit/a74b2fb946f649d5020a5e1803bb6abb039a1a22"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "c02465f59795040ce419eed46187c406b83e2aac", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/368275062fb655c1f36e0398f88b15379a1f3c93/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/368275062fb655c1f36e0398f88b15379a1f3c93/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=368275062fb655c1f36e0398f88b15379a1f3c93", "patch": "@@ -143,6 +143,14 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         run_early_pass!(self, check_fn, fk, span, id);\n         self.check_id(id);\n         ast_visit::walk_fn(self, fk, span);\n+\n+        // Explicitly check for lints associated with 'closure_id', since\n+        // it does not have a corresponding AST node\n+        if let ast_visit::FnKind::Fn(_, _, sig, _, _) = fk {\n+            if let ast::Async::Yes { closure_id, .. } = sig.header.asyncness {\n+                self.check_id(closure_id);\n+            }\n+        }\n         run_early_pass!(self, check_fn_post, fk, span, id);\n     }\n \n@@ -208,6 +216,14 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n \n     fn visit_expr_post(&mut self, e: &'a ast::Expr) {\n         run_early_pass!(self, check_expr_post, e);\n+\n+        // Explicitly check for lints associated with 'closure_id', since\n+        // it does not have a corresponding AST node\n+        if let ast::ExprKind::Closure(_, asyncness, ..) = e.kind {\n+            if let ast::Async::Yes { closure_id, .. } = asyncness {\n+                self.check_id(closure_id);\n+            }\n+        }\n     }\n \n     fn visit_generic_arg(&mut self, arg: &'a ast::GenericArg) {"}, {"sha": "4f39d088b1282a8e1e60ad4a5e8646eee91b9683", "filename": "src/test/ui/lint/semicolon-in-expressions-from-macros/semicolon-in-expressions-from-macros.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/368275062fb655c1f36e0398f88b15379a1f3c93/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/368275062fb655c1f36e0398f88b15379a1f3c93/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.rs?ref=368275062fb655c1f36e0398f88b15379a1f3c93", "patch": "@@ -1,4 +1,5 @@\n // check-pass\n+// edition:2018\n #![warn(semicolon_in_expressions_from_macros)]\n \n #[allow(dead_code)]\n@@ -11,6 +12,11 @@ macro_rules! foo {\n     }\n }\n \n+#[allow(semicolon_in_expressions_from_macros)]\n+async fn bar() {\n+    foo!(first);\n+}\n+\n fn main() {\n     // This `allow` doesn't work\n     #[allow(semicolon_in_expressions_from_macros)]"}, {"sha": "bfdce732e029d102ad1f8fa8c1da777f1233b0a0", "filename": "src/test/ui/lint/semicolon-in-expressions-from-macros/semicolon-in-expressions-from-macros.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/368275062fb655c1f36e0398f88b15379a1f3c93/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/368275062fb655c1f36e0398f88b15379a1f3c93/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.stderr?ref=368275062fb655c1f36e0398f88b15379a1f3c93", "patch": "@@ -1,5 +1,5 @@\n warning: trailing semicolon in macro used in expression position\n-  --> $DIR/semicolon-in-expressions-from-macros.rs:7:13\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:8:13\n    |\n LL |         true;\n    |             ^\n@@ -8,7 +8,7 @@ LL |         foo!(first)\n    |         ----------- in this macro invocation\n    |\n note: the lint level is defined here\n-  --> $DIR/semicolon-in-expressions-from-macros.rs:2:9\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:3:9\n    |\n LL | #![warn(semicolon_in_expressions_from_macros)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL | #![warn(semicolon_in_expressions_from_macros)]\n    = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: trailing semicolon in macro used in expression position\n-  --> $DIR/semicolon-in-expressions-from-macros.rs:7:13\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:8:13\n    |\n LL |         true;\n    |             ^"}]}