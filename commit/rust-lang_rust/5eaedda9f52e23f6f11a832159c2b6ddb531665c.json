{"sha": "5eaedda9f52e23f6f11a832159c2b6ddb531665c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYWVkZGE5ZjUyZTIzZjZmMTFhODMyMTU5YzJiNmRkYjUzMTY2NWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-24T16:32:52Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-24T16:32:52Z"}, "message": "Address review comments.", "tree": {"sha": "dd01eaf862036c7460bb2a136bb466a2abff59f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd01eaf862036c7460bb2a136bb466a2abff59f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5eaedda9f52e23f6f11a832159c2b6ddb531665c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5eaedda9f52e23f6f11a832159c2b6ddb531665c", "html_url": "https://github.com/rust-lang/rust/commit/5eaedda9f52e23f6f11a832159c2b6ddb531665c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5eaedda9f52e23f6f11a832159c2b6ddb531665c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5baac07d4bad3bde857d70338a8cabf28bcf0b64", "url": "https://api.github.com/repos/rust-lang/rust/commits/5baac07d4bad3bde857d70338a8cabf28bcf0b64", "html_url": "https://github.com/rust-lang/rust/commit/5baac07d4bad3bde857d70338a8cabf28bcf0b64"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "c1f874c079cb53a25f34816842bcc4a9d3064c18", "filename": "src/test/ui/lint/lint-type-overflow2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5eaedda9f52e23f6f11a832159c2b6ddb531665c/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eaedda9f52e23f6f11a832159c2b6ddb531665c/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.rs?ref=5eaedda9f52e23f6f11a832159c2b6ddb531665c", "patch": "@@ -2,7 +2,6 @@\n \n #![deny(overflowing_literals)]\n #![deny(const_err)]\n-#![allow(unused_variables)]\n \n fn main() {\n     let x2: i8 = --128; //~ ERROR literal out of range for `i8`"}, {"sha": "e950f7d62d6453908062eb13755ec7650b0b330b", "filename": "src/test/ui/proc-macro/auxiliary/generate-mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5eaedda9f52e23f6f11a832159c2b6ddb531665c/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fgenerate-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eaedda9f52e23f6f11a832159c2b6ddb531665c/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fgenerate-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fgenerate-mod.rs?ref=5eaedda9f52e23f6f11a832159c2b6ddb531665c", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // force-host\n // no-prefer-dynamic\n+// ignore-pass\n \n #![crate_type = \"proc-macro\"]\n "}, {"sha": "ebc2717499843c28255eb685654310f5ff02b61a", "filename": "src/test/ui/save-analysis/emit-notifications.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5eaedda9f52e23f6f11a832159c2b6ddb531665c/src%2Ftest%2Fui%2Fsave-analysis%2Femit-notifications.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eaedda9f52e23f6f11a832159c2b6ddb531665c/src%2Ftest%2Fui%2Fsave-analysis%2Femit-notifications.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Femit-notifications.rs?ref=5eaedda9f52e23f6f11a832159c2b6ddb531665c", "patch": "@@ -1,4 +1,7 @@\n // compile-pass\n // compile-flags: -Zsave-analysis -Zemit-artifact-notifications\n // compile-flags: --crate-type rlib --error-format=json\n+// ignore-pass\n+// ^-- needed because otherwise, the .stderr file changes with --pass check\n+\n pub fn foo() {}"}, {"sha": "52f777db2daa681aa2f149a348075b9a1da617d1", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5eaedda9f52e23f6f11a832159c2b6ddb531665c/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eaedda9f52e23f6f11a832159c2b6ddb531665c/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=5eaedda9f52e23f6f11a832159c2b6ddb531665c", "patch": "@@ -350,9 +350,9 @@ pub struct TestProps {\n     // arguments. (In particular, it propagates to the aux-builds.)\n     pub incremental_dir: Option<PathBuf>,\n     // How far should the test proceed while still passing.\n-    pub pass_mode: Option<PassMode>,\n+    pass_mode: Option<PassMode>,\n     // Ignore `--pass` overrides from the command line for this test.\n-    pub ignore_pass: bool,\n+    ignore_pass: bool,\n     // rustdoc will test the output of the `--test` option\n     pub check_test_line_numbers_match: bool,\n     // Do not pass `-Z ui-testing` to UI tests\n@@ -608,6 +608,15 @@ impl TestProps {\n             (_, None) => {}\n         }\n     }\n+\n+    pub fn pass_mode(&self, config: &Config) -> Option<PassMode> {\n+        if !self.ignore_pass {\n+            if let (mode @ Some(_), Some(_)) = (config.force_pass_mode, self.pass_mode) {\n+                return mode;\n+            }\n+        }\n+        self.pass_mode\n+    }\n }\n \n fn iter_header(testfile: &Path, cfg: Option<&str>, it: &mut dyn FnMut(&str)) {"}, {"sha": "597fdf2d95e3097b7fcd5214703c53fba5674473", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5eaedda9f52e23f6f11a832159c2b6ddb531665c/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eaedda9f52e23f6f11a832159c2b6ddb531665c/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=5eaedda9f52e23f6f11a832159c2b6ddb531665c", "patch": "@@ -328,7 +328,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         filter_exact: matches.opt_present(\"exact\"),\n         force_pass_mode: matches.opt_str(\"pass\").map(|mode|\n             mode.parse::<PassMode>()\n-                .unwrap_or_else(|_| panic!(\"unknown `--pass` option `{}` given.\", mode))\n+                .unwrap_or_else(|_| panic!(\"unknown `--pass` option `{}` given\", mode))\n         ),\n         logfile: matches.opt_str(\"logfile\").map(|s| PathBuf::from(&s)),\n         runtool: matches.opt_str(\"runtool\"),"}, {"sha": "cb5866324266979923f6657c28205f87b76bc6dc", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5eaedda9f52e23f6f11a832159c2b6ddb531665c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eaedda9f52e23f6f11a832159c2b6ddb531665c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=5eaedda9f52e23f6f11a832159c2b6ddb531665c", "patch": "@@ -211,7 +211,6 @@ pub fn run(config: Config, testpaths: &TestPaths, revision: Option<&str>) {\n         props: &props,\n         testpaths,\n         revision: revision,\n-        is_aux: false,\n     };\n     create_dir_all(&cx.output_base_dir()).unwrap();\n \n@@ -230,7 +229,6 @@ pub fn run(config: Config, testpaths: &TestPaths, revision: Option<&str>) {\n                 props: &revision_props,\n                 testpaths,\n                 revision: Some(revision),\n-                is_aux: false,\n             };\n             rev_cx.run_revision();\n         }\n@@ -262,7 +260,7 @@ pub fn compute_stamp_hash(config: &Config) -> String {\n         env::var_os(\"PYTHONPATH\").hash(&mut hash);\n     }\n \n-    if let Ui | RunPass = config.mode {\n+    if let Ui | RunPass | Incremental = config.mode {\n         config.force_pass_mode.hash(&mut hash);\n     }\n \n@@ -274,7 +272,6 @@ struct TestCx<'test> {\n     props: &'test TestProps,\n     testpaths: &'test TestPaths,\n     revision: Option<&'test str>,\n-    is_aux: bool,\n }\n \n struct DebuggerCommands {\n@@ -316,18 +313,13 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n-    fn effective_pass_mode(&self) -> Option<PassMode> {\n-        if !self.props.ignore_pass {\n-            if let (mode @ Some(_), Some(_)) = (self.config.force_pass_mode, self.props.pass_mode) {\n-                return mode;\n-            }\n-        }\n-        self.props.pass_mode\n+    fn pass_mode(&self) -> Option<PassMode> {\n+        self.props.pass_mode(self.config)\n     }\n \n     fn should_run_successfully(&self) -> bool {\n         match self.config.mode {\n-            RunPass | Ui => self.effective_pass_mode() == Some(PassMode::Run),\n+            RunPass | Ui => self.pass_mode() == Some(PassMode::Run),\n             mode => panic!(\"unimplemented for mode {:?}\", mode),\n         }\n     }\n@@ -337,15 +329,15 @@ impl<'test> TestCx<'test> {\n             CompileFail => false,\n             RunPass => true,\n             JsDocTest => true,\n-            Ui => self.props.pass_mode.is_some(),\n+            Ui => self.pass_mode().is_some(),\n             Incremental => {\n                 let revision = self.revision\n                     .expect(\"incremental tests require a list of revisions\");\n                 if revision.starts_with(\"rpass\") || revision.starts_with(\"rfail\") {\n                     true\n                 } else if revision.starts_with(\"cfail\") {\n                     // FIXME: would be nice if incremental revs could start with \"cpass\"\n-                    self.props.pass_mode.is_some()\n+                    self.pass_mode().is_some()\n                 } else {\n                     panic!(\"revision name must begin with rpass, rfail, or cfail\");\n                 }\n@@ -1356,7 +1348,7 @@ impl<'test> TestCx<'test> {\n     fn check_error_patterns(&self, output_to_check: &str, proc_res: &ProcRes) {\n         debug!(\"check_error_patterns\");\n         if self.props.error_patterns.is_empty() {\n-            if self.props.pass_mode.is_some() {\n+            if self.pass_mode().is_some() {\n                 return;\n             } else {\n                 self.fatal(&format!(\n@@ -1578,7 +1570,6 @@ impl<'test> TestCx<'test> {\n                     props: &aux_props,\n                     testpaths: &aux_testpaths,\n                     revision: self.revision,\n-                    is_aux: true,\n                 };\n                 // Create the directory for the stdout/stderr files.\n                 create_dir_all(aux_cx.output_base_dir()).unwrap();\n@@ -1748,7 +1739,6 @@ impl<'test> TestCx<'test> {\n                 props: &aux_props,\n                 testpaths: &aux_testpaths,\n                 revision: self.revision,\n-                is_aux: true,\n             };\n             // Create the directory for the stdout/stderr files.\n             create_dir_all(aux_cx.output_base_dir()).unwrap();\n@@ -1989,8 +1979,7 @@ impl<'test> TestCx<'test> {\n             }\n         }\n \n-        let pass_mode = if self.is_aux { self.props.pass_mode } else { self.effective_pass_mode() };\n-        if let Some(PassMode::Check) = pass_mode {\n+        if let Some(PassMode::Check) = self.pass_mode() {\n             rustc.args(&[\"--emit\", \"metadata\"]);\n         }\n \n@@ -2728,7 +2717,6 @@ impl<'test> TestCx<'test> {\n             props: &revision_props,\n             testpaths: self.testpaths,\n             revision: self.revision,\n-            is_aux: false,\n         };\n \n         if self.config.verbose {"}]}