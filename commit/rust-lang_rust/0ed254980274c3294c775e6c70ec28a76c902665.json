{"sha": "0ed254980274c3294c775e6c70ec28a76c902665", "node_id": "C_kwDOAAsO6NoAKDBlZDI1NDk4MDI3NGMzMjk0Yzc3NWU2YzcwZWMyOGE3NmM5MDI2NjU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-17T19:21:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-17T19:21:27Z"}, "message": "Rollup merge of #106889 - scottmcm:windows-mut, r=cuviper\n\nMention the lack of `windows_mut` in `windows`\n\nThis is a common request, going back to at least 2015 (#23783), so mention in the docs that it can't be done and offer a workaround using <https://doc.rust-lang.org/std/cell/struct.Cell.html#method.as_slice_of_cells>.\n\n(See also URLO threads like <https://internals.rust-lang.org/t/a-windows-mut-method-on-slice/16941/10?u=scottmcm>.)", "tree": {"sha": "3c36b2481efbd89b0098d49218481be6fd06f5c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c36b2481efbd89b0098d49218481be6fd06f5c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ed254980274c3294c775e6c70ec28a76c902665", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjxvU3CRBK7hj4Ov3rIwAAjPcIADjYacgHgJgapXSG4GGSmEHn\n0NuBNk5V/jM2YrYB3oxqIQuXLuPGHcVGhiniP7XTCWjVCJK0y02zUAiHwLQGd5rS\n6LuVzR0os/gIIxfA3Jkj5g++0TVzrQxPC+GWZqHDeACOIk3R+K3weZjbSVS4SzRB\n9ew+TkG2vhtA6pGR57nlO/XafaCWz7JvRpC4YMUCq2qMnWyJZp8Rnj5BXxg6lKaT\nyX519JsCkUIEh0+Rux87OwNHkK4oUI7a5rEo1ZZ8Sgaz5PgluL8ispyngHUOh32L\nHCmxB/BeTG/1KTRpU21CYmtG/rmm+YSDcukLXHw0ZIpILnNheSN1tCf6XFBDgHM=\n=RDVC\n-----END PGP SIGNATURE-----\n", "payload": "tree 3c36b2481efbd89b0098d49218481be6fd06f5c0\nparent fc9e2c1081354753346ab63ceebb3f44c7e384ae\nparent 38917ee9e91452aca1f433e47931ee35bb0283f4\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1673983287 +0100\ncommitter GitHub <noreply@github.com> 1673983287 +0100\n\nRollup merge of #106889 - scottmcm:windows-mut, r=cuviper\n\nMention the lack of `windows_mut` in `windows`\n\nThis is a common request, going back to at least 2015 (#23783), so mention in the docs that it can't be done and offer a workaround using <https://doc.rust-lang.org/std/cell/struct.Cell.html#method.as_slice_of_cells>.\n\n(See also URLO threads like <https://internals.rust-lang.org/t/a-windows-mut-method-on-slice/16941/10?u=scottmcm>.)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ed254980274c3294c775e6c70ec28a76c902665", "html_url": "https://github.com/rust-lang/rust/commit/0ed254980274c3294c775e6c70ec28a76c902665", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ed254980274c3294c775e6c70ec28a76c902665/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc9e2c1081354753346ab63ceebb3f44c7e384ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc9e2c1081354753346ab63ceebb3f44c7e384ae", "html_url": "https://github.com/rust-lang/rust/commit/fc9e2c1081354753346ab63ceebb3f44c7e384ae"}, {"sha": "38917ee9e91452aca1f433e47931ee35bb0283f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/38917ee9e91452aca1f433e47931ee35bb0283f4", "html_url": "https://github.com/rust-lang/rust/commit/38917ee9e91452aca1f433e47931ee35bb0283f4"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "c32caa144594b6ad1326898c73ffaeeb42ea61d0", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0ed254980274c3294c775e6c70ec28a76c902665/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed254980274c3294c775e6c70ec28a76c902665/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=0ed254980274c3294c775e6c70ec28a76c902665", "patch": "@@ -781,6 +781,22 @@ impl<T> [T] {\n     /// let mut iter = slice.windows(4);\n     /// assert!(iter.next().is_none());\n     /// ```\n+    ///\n+    /// There's no `windows_mut`, as that existing would let safe code violate the\n+    /// \"only one `&mut` at a time to the same thing\" rule.  However, you can sometimes\n+    /// use [`Cell::as_slice_of_cells`](crate::cell::Cell::as_slice_of_cells) in\n+    /// conjunction with `windows` to accomplish something similar:\n+    /// ```\n+    /// use std::cell::Cell;\n+    ///\n+    /// let mut array = ['R', 'u', 's', 't', ' ', '2', '0', '1', '5'];\n+    /// let slice = &mut array[..];\n+    /// let slice_of_cells: &[Cell<char>] = Cell::from_mut(slice).as_slice_of_cells();\n+    /// for w in slice_of_cells.windows(3) {\n+    ///     Cell::swap(&w[0], &w[2]);\n+    /// }\n+    /// assert_eq!(array, ['s', 't', ' ', '2', '0', '1', '5', 'u', 'R']);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn windows(&self, size: usize) -> Windows<'_, T> {"}]}