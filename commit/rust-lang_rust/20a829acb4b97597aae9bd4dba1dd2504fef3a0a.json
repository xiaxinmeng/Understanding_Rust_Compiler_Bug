{"sha": "20a829acb4b97597aae9bd4dba1dd2504fef3a0a", "node_id": "C_kwDOAAsO6NoAKDIwYTgyOWFjYjRiOTc1OTdhYWU5YmQ0ZGJhMWRkMjUwNGZlZjNhMGE", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-13T18:01:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-13T18:01:01Z"}, "message": "Merge pull request #1339 from bjorn3/better_compiler_management\n\nMany build system improvements", "tree": {"sha": "31bb25766dd11e09b08aa36d901bcd1b86fa6ef5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31bb25766dd11e09b08aa36d901bcd1b86fa6ef5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20a829acb4b97597aae9bd4dba1dd2504fef3a0a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjwZxdCRBK7hj4Ov3rIwAAj3MIAEJ2KC3kIfSPEjC1fAzxiEAB\nJjCtd3m80ggrmDo2JSaeHggMlC0ibS+VJOrZsd4DwM07qA82d+hxDSEDc8uRfuH+\nJiSUHjFzcyz9TYzcveHiWuGfSfMv2jfGZ2JIiqUHhuPob/hZ7goREKOi0wk40YCE\n4e+ew5MVClwlUZBpHF4w7IIlAHe18lgYBnhqWPuwJk3IGrp6I8bXhckRMoC6ZK6f\nLoFvrR2TAYHicdMJSvsfwev0Hiyfk++K5QUMajujaHa1azR0TQk4cMFvMZ6bY95R\njZafOPyuM6yaNSgrqa1HLg7sf0R4WHqg1wyb4x9npFNq8nokHXnztSo8o9q/oDQ=\n=xArX\n-----END PGP SIGNATURE-----\n", "payload": "tree 31bb25766dd11e09b08aa36d901bcd1b86fa6ef5\nparent cf22470de71180e54defc35e71edfd8558685fb4\nparent bdcbf47df3b2f4e7dc12930a861c689b75a66c3f\nauthor bjorn3 <17426603+bjorn3@users.noreply.github.com> 1673632861 +0100\ncommitter GitHub <noreply@github.com> 1673632861 +0100\n\nMerge pull request #1339 from bjorn3/better_compiler_management\n\nMany build system improvements"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20a829acb4b97597aae9bd4dba1dd2504fef3a0a", "html_url": "https://github.com/rust-lang/rust/commit/20a829acb4b97597aae9bd4dba1dd2504fef3a0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf22470de71180e54defc35e71edfd8558685fb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf22470de71180e54defc35e71edfd8558685fb4", "html_url": "https://github.com/rust-lang/rust/commit/cf22470de71180e54defc35e71edfd8558685fb4"}, {"sha": "bdcbf47df3b2f4e7dc12930a861c689b75a66c3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdcbf47df3b2f4e7dc12930a861c689b75a66c3f", "html_url": "https://github.com/rust-lang/rust/commit/bdcbf47df3b2f4e7dc12930a861c689b75a66c3f"}], "stats": {"total": 845, "additions": 367, "deletions": 478}, "files": [{"sha": "f1badb792cd13c595f13f8f6d51ff8ec74ddb1fd", "filename": ".github/workflows/main.yml", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/.github%2Fworkflows%2Fmain.yml", "raw_url": "https://github.com/rust-lang/rust/raw/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/.github%2Fworkflows%2Fmain.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fmain.yml?ref=20a829acb4b97597aae9bd4dba1dd2504fef3a0a", "patch": "@@ -62,14 +62,6 @@ jobs:\n     steps:\n     - uses: actions/checkout@v3\n \n-    - name: Cache cargo registry and index\n-      uses: actions/cache@v3\n-      with:\n-        path: |\n-            ~/.cargo/registry\n-            ~/.cargo/git\n-        key: ${{ runner.os }}-${{ matrix.env.TARGET_TRIPLE }}-cargo-registry-and-index-${{ hashFiles('**/Cargo.lock') }}\n-\n     - name: Cache cargo target dir\n       uses: actions/cache@v3\n       with:\n@@ -99,9 +91,12 @@ jobs:\n         sudo apt-get update\n         sudo apt-get install -y gcc-s390x-linux-gnu qemu-user\n \n-    - name: Windows setup\n-      if: matrix.os == 'windows-latest'\n-      run: git config --global core.autocrlf false\n+    - name: Use sparse cargo registry\n+      run: |\n+        cat >> ~/.cargo/config.toml <<EOF\n+        [unstable]\n+        sparse-registry = true\n+        EOF\n \n     - name: Prepare dependencies\n       run: ./y.rs prepare"}, {"sha": "c3dd7445fd8b98048efac2a49a632b3606ab6332", "filename": ".github/workflows/nightly-cranelift.yml", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/.github%2Fworkflows%2Fnightly-cranelift.yml", "raw_url": "https://github.com/rust-lang/rust/raw/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/.github%2Fworkflows%2Fnightly-cranelift.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fnightly-cranelift.yml?ref=20a829acb4b97597aae9bd4dba1dd2504fef3a0a", "patch": "@@ -13,11 +13,15 @@ jobs:\n     steps:\n     - uses: actions/checkout@v3\n \n-    - name: Prepare dependencies\n+    - name: Use sparse cargo registry\n       run: |\n-        git config --global user.email \"user@example.com\"\n-        git config --global user.name \"User\"\n-        ./y.rs prepare\n+        cat >> ~/.cargo/config.toml <<EOF\n+        [unstable]\n+        sparse-registry = true\n+        EOF\n+\n+    - name: Prepare dependencies\n+      run: ./y.rs prepare\n \n     - name: Patch Cranelift\n       run: |\n@@ -32,6 +36,8 @@ jobs:\n \n         cat Cargo.toml\n \n+        cargo fetch\n+\n     - name: Build without unstable features\n       # This is the config rust-lang/rust uses for builds\n       run: ./y.rs build --no-unstable-features"}, {"sha": "5faa8f0540451b848506fadd139fc6333429b230", "filename": ".github/workflows/rustc.yml", "status": "modified", "additions": 16, "deletions": 24, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/.github%2Fworkflows%2Frustc.yml", "raw_url": "https://github.com/rust-lang/rust/raw/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/.github%2Fworkflows%2Frustc.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Frustc.yml?ref=20a829acb4b97597aae9bd4dba1dd2504fef3a0a", "patch": "@@ -10,25 +10,21 @@ jobs:\n     steps:\n     - uses: actions/checkout@v3\n \n-    - name: Cache cargo registry and index\n-      uses: actions/cache@v3\n-      with:\n-        path: |\n-            ~/.cargo/registry\n-            ~/.cargo/git\n-        key: ${{ runner.os }}-cargo-registry-and-index-${{ hashFiles('**/Cargo.lock') }}\n-\n     - name: Cache cargo target dir\n       uses: actions/cache@v3\n       with:\n         path: build/cg_clif\n         key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('rust-toolchain', '**/Cargo.lock') }}\n \n-    - name: Prepare dependencies\n+    - name: Use sparse cargo registry\n       run: |\n-        git config --global user.email \"user@example.com\"\n-        git config --global user.name \"User\"\n-        ./y.rs prepare\n+        cat >> ~/.cargo/config.toml <<EOF\n+        [unstable]\n+        sparse-registry = true\n+        EOF\n+\n+    - name: Prepare dependencies\n+      run: ./y.rs prepare\n \n     - name: Test\n       run: ./scripts/test_bootstrap.sh\n@@ -38,25 +34,21 @@ jobs:\n     steps:\n     - uses: actions/checkout@v3\n \n-    - name: Cache cargo registry and index\n-      uses: actions/cache@v3\n-      with:\n-        path: |\n-            ~/.cargo/registry\n-            ~/.cargo/git\n-        key: ${{ runner.os }}-cargo-registry-and-index-${{ hashFiles('**/Cargo.lock') }}\n-\n     - name: Cache cargo target dir\n       uses: actions/cache@v3\n       with:\n         path: build/cg_clif\n         key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('rust-toolchain', '**/Cargo.lock') }}\n \n-    - name: Prepare dependencies\n+    - name: Use sparse cargo registry\n       run: |\n-        git config --global user.email \"user@example.com\"\n-        git config --global user.name \"User\"\n-        ./y.rs prepare\n+        cat >> ~/.cargo/config.toml <<EOF\n+        [unstable]\n+        sparse-registry = true\n+        EOF\n+\n+    - name: Prepare dependencies\n+      run: ./y.rs prepare\n \n     - name: Test\n       run: ./scripts/test_rustc_tests.sh"}, {"sha": "7c8703cba505c6e221910aabcef2a5ea4f712a41", "filename": ".vscode/settings.json", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/.vscode%2Fsettings.json", "raw_url": "https://github.com/rust-lang/rust/raw/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/.vscode%2Fsettings.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.vscode%2Fsettings.json?ref=20a829acb4b97597aae9bd4dba1dd2504fef3a0a", "patch": "@@ -1,4 +1,6 @@\n {\n+    \"editor.formatOnSave\": true,\n+\n     // source for rustc_* is not included in the rust-src component; disable the errors about this\n     \"rust-analyzer.diagnostics.disabled\": [\"unresolved-extern-crate\", \"unresolved-macro-call\"],\n     \"rust-analyzer.imports.granularity.enforce\": true,"}, {"sha": "b87a9dc51e8d0f3f956e5fc69acb701a2c8e1ad3", "filename": "Readme.md", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/Readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/Readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Readme.md?ref=20a829acb4b97597aae9bd4dba1dd2504fef3a0a", "patch": "@@ -8,9 +8,9 @@ If not please open an issue.\n ## Building and testing\n \n ```bash\n-$ git clone https://github.com/bjorn3/rustc_codegen_cranelift.git\n+$ git clone https://github.com/bjorn3/rustc_codegen_cranelift\n $ cd rustc_codegen_cranelift\n-$ ./y.rs prepare # download and patch sysroot src and install hyperfine for benchmarking\n+$ ./y.rs prepare\n $ ./y.rs build\n ```\n \n@@ -20,13 +20,12 @@ To run the test suite replace the last command with:\n $ ./test.sh\n ```\n \n-This will implicitly build cg_clif too. Both `y.rs build` and `test.sh` accept a `--debug` argument to\n-build in debug mode.\n+For more docs on how to build and test see [build_system/usage.txt](build_system/usage.txt) or the help message of `./y.rs`.\n \n-Alternatively you can download a pre built version from [GHA]. It is listed in the artifacts section\n+Alternatively you can download a pre built version from [Github Actions]. It is listed in the artifacts section\n of workflow runs. Unfortunately due to GHA restrictions you need to be logged in to access it.\n \n-[GHA]: https://github.com/bjorn3/rustc_codegen_cranelift/actions?query=branch%3Amaster+event%3Apush+is%3Asuccess\n+[Github Actions]: https://github.com/bjorn3/rustc_codegen_cranelift/actions?query=branch%3Amaster+event%3Apush+is%3Asuccess\n \n ## Usage\n "}, {"sha": "63f2efd8e1ef78456b013a6b16e7b87936f3a163", "filename": "build_system/abi_cafe.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/build_system%2Fabi_cafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/build_system%2Fabi_cafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fabi_cafe.rs?ref=20a829acb4b97597aae9bd4dba1dd2504fef3a0a", "patch": "@@ -10,41 +10,36 @@ use super::SysrootKind;\n pub(crate) static ABI_CAFE_REPO: GitRepo =\n     GitRepo::github(\"Gankra\", \"abi-cafe\", \"4c6dc8c9c687e2b3a760ff2176ce236872b37212\", \"abi-cafe\");\n \n-static ABI_CAFE: CargoProject = CargoProject::new(&ABI_CAFE_REPO.source_dir(), \"abi_cafe\");\n+pub(crate) static ABI_CAFE: CargoProject =\n+    CargoProject::new(&ABI_CAFE_REPO.source_dir(), \"abi_cafe\");\n \n pub(crate) fn run(\n     channel: &str,\n     sysroot_kind: SysrootKind,\n     dirs: &Dirs,\n     cg_clif_dylib: &Path,\n-    host_triple: &str,\n-    target_triple: &str,\n+    host_compiler: &Compiler,\n ) {\n     if !config::get_bool(\"testsuite.abi-cafe\") {\n         eprintln!(\"[SKIP] abi-cafe\");\n         return;\n     }\n \n-    if host_triple != target_triple {\n-        eprintln!(\"[SKIP] abi-cafe (cross-compilation not supported)\");\n-        return;\n-    }\n-\n     eprintln!(\"Building sysroot for abi-cafe\");\n     build_sysroot::build_sysroot(\n         dirs,\n         channel,\n         sysroot_kind,\n         cg_clif_dylib,\n-        host_triple,\n-        target_triple,\n+        host_compiler,\n+        &host_compiler.triple,\n     );\n \n     eprintln!(\"Running abi-cafe\");\n \n     let pairs = [\"rustc_calls_cgclif\", \"cgclif_calls_rustc\", \"cgclif_calls_cc\", \"cc_calls_cgclif\"];\n \n-    let mut cmd = ABI_CAFE.run(&Compiler::host(), dirs);\n+    let mut cmd = ABI_CAFE.run(host_compiler, dirs);\n     cmd.arg(\"--\");\n     cmd.arg(\"--pairs\");\n     cmd.args(pairs);"}, {"sha": "f5c5d92cb328679b7fe9ae53c01e4f5b772706e0", "filename": "build_system/bench.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/build_system%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/build_system%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbench.rs?ref=20a829acb4b97597aae9bd4dba1dd2504fef3a0a", "patch": "@@ -21,20 +21,19 @@ pub(crate) static SIMPLE_RAYTRACER_LLVM: CargoProject =\n pub(crate) static SIMPLE_RAYTRACER: CargoProject =\n     CargoProject::new(&SIMPLE_RAYTRACER_REPO.source_dir(), \"simple_raytracer\");\n \n-pub(crate) fn benchmark(dirs: &Dirs) {\n-    benchmark_simple_raytracer(dirs);\n+pub(crate) fn benchmark(dirs: &Dirs, host_compiler: &Compiler) {\n+    benchmark_simple_raytracer(dirs, host_compiler);\n }\n \n-fn benchmark_simple_raytracer(dirs: &Dirs) {\n+fn benchmark_simple_raytracer(dirs: &Dirs, host_compiler: &Compiler) {\n     if std::process::Command::new(\"hyperfine\").output().is_err() {\n         eprintln!(\"Hyperfine not installed\");\n         eprintln!(\"Hint: Try `cargo install hyperfine` to install hyperfine\");\n         std::process::exit(1);\n     }\n \n     eprintln!(\"[LLVM BUILD] simple-raytracer\");\n-    let host_compiler = Compiler::host();\n-    let build_cmd = SIMPLE_RAYTRACER_LLVM.build(&host_compiler, dirs);\n+    let build_cmd = SIMPLE_RAYTRACER_LLVM.build(host_compiler, dirs);\n     spawn_and_wait(build_cmd);\n     fs::copy(\n         SIMPLE_RAYTRACER_LLVM"}, {"sha": "6ab39e48f214f11febd63b3c0a94e3981c3690e8", "filename": "build_system/build_backend.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/build_system%2Fbuild_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/build_system%2Fbuild_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_backend.rs?ref=20a829acb4b97597aae9bd4dba1dd2504fef3a0a", "patch": "@@ -5,15 +5,15 @@ use super::path::{Dirs, RelPath};\n use super::rustc_info::get_file_name;\n use super::utils::{is_ci, CargoProject, Compiler};\n \n-static CG_CLIF: CargoProject = CargoProject::new(&RelPath::SOURCE, \"cg_clif\");\n+pub(crate) static CG_CLIF: CargoProject = CargoProject::new(&RelPath::SOURCE, \"cg_clif\");\n \n pub(crate) fn build_backend(\n     dirs: &Dirs,\n     channel: &str,\n-    host_triple: &str,\n+    host_compiler: &Compiler,\n     use_unstable_features: bool,\n ) -> PathBuf {\n-    let mut cmd = CG_CLIF.build(&Compiler::host(), dirs);\n+    let mut cmd = CG_CLIF.build(&host_compiler, dirs);\n \n     cmd.env(\"CARGO_BUILD_INCREMENTAL\", \"true\"); // Force incr comp even in release mode\n \n@@ -48,7 +48,7 @@ pub(crate) fn build_backend(\n \n     CG_CLIF\n         .target_dir(dirs)\n-        .join(host_triple)\n+        .join(&host_compiler.triple)\n         .join(channel)\n         .join(get_file_name(\"rustc_codegen_cranelift\", \"dylib\"))\n }"}, {"sha": "b7228968f631307ab0d90157cc4ac57c941aaa58", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=20a829acb4b97597aae9bd4dba1dd2504fef3a0a", "patch": "@@ -17,7 +17,7 @@ pub(crate) fn build_sysroot(\n     channel: &str,\n     sysroot_kind: SysrootKind,\n     cg_clif_dylib_src: &Path,\n-    host_triple: &str,\n+    host_compiler: &Compiler,\n     target_triple: &str,\n ) {\n     eprintln!(\"[BUILD] sysroot {:?}\", sysroot_kind);\n@@ -53,7 +53,7 @@ pub(crate) fn build_sysroot(\n \n     let default_sysroot = super::rustc_info::get_default_sysroot();\n \n-    let host_rustlib_lib = RUSTLIB_DIR.to_path(dirs).join(host_triple).join(\"lib\");\n+    let host_rustlib_lib = RUSTLIB_DIR.to_path(dirs).join(&host_compiler.triple).join(\"lib\");\n     let target_rustlib_lib = RUSTLIB_DIR.to_path(dirs).join(target_triple).join(\"lib\");\n     fs::create_dir_all(&host_rustlib_lib).unwrap();\n     fs::create_dir_all(&target_rustlib_lib).unwrap();\n@@ -83,7 +83,7 @@ pub(crate) fn build_sysroot(\n         SysrootKind::None => {} // Nothing to do\n         SysrootKind::Llvm => {\n             for file in fs::read_dir(\n-                default_sysroot.join(\"lib\").join(\"rustlib\").join(host_triple).join(\"lib\"),\n+                default_sysroot.join(\"lib\").join(\"rustlib\").join(&host_compiler.triple).join(\"lib\"),\n             )\n             .unwrap()\n             {\n@@ -103,7 +103,7 @@ pub(crate) fn build_sysroot(\n                 try_hard_link(&file, host_rustlib_lib.join(file.file_name().unwrap()));\n             }\n \n-            if target_triple != host_triple {\n+            if target_triple != host_compiler.triple {\n                 for file in fs::read_dir(\n                     default_sysroot.join(\"lib\").join(\"rustlib\").join(target_triple).join(\"lib\"),\n                 )\n@@ -115,21 +115,24 @@ pub(crate) fn build_sysroot(\n             }\n         }\n         SysrootKind::Clif => {\n-            build_clif_sysroot_for_triple(dirs, channel, host_triple, &cg_clif_dylib_path, None);\n-\n-            if host_triple != target_triple {\n-                // When cross-compiling it is often necessary to manually pick the right linker\n-                let linker = match target_triple {\n-                    \"aarch64-unknown-linux-gnu\" => Some(\"aarch64-linux-gnu-gcc\"),\n-                    \"s390x-unknown-linux-gnu\" => Some(\"s390x-linux-gnu-gcc\"),\n-                    _ => None,\n-                };\n+            build_clif_sysroot_for_triple(\n+                dirs,\n+                channel,\n+                host_compiler.clone(),\n+                &cg_clif_dylib_path,\n+            );\n+\n+            if host_compiler.triple != target_triple {\n                 build_clif_sysroot_for_triple(\n                     dirs,\n                     channel,\n-                    target_triple,\n+                    {\n+                        let mut target_compiler = host_compiler.clone();\n+                        target_compiler.triple = target_triple.to_owned();\n+                        target_compiler.set_cross_linker_and_runner();\n+                        target_compiler\n+                    },\n                     &cg_clif_dylib_path,\n-                    linker,\n                 );\n             }\n \n@@ -150,14 +153,14 @@ pub(crate) static ORIG_BUILD_SYSROOT: RelPath = RelPath::SOURCE.join(\"build_sysr\n pub(crate) static BUILD_SYSROOT: RelPath = RelPath::DOWNLOAD.join(\"sysroot\");\n pub(crate) static SYSROOT_RUSTC_VERSION: RelPath = BUILD_SYSROOT.join(\"rustc_version\");\n pub(crate) static SYSROOT_SRC: RelPath = BUILD_SYSROOT.join(\"sysroot_src\");\n-static STANDARD_LIBRARY: CargoProject = CargoProject::new(&BUILD_SYSROOT, \"build_sysroot\");\n+pub(crate) static STANDARD_LIBRARY: CargoProject =\n+    CargoProject::new(&BUILD_SYSROOT, \"build_sysroot\");\n \n fn build_clif_sysroot_for_triple(\n     dirs: &Dirs,\n     channel: &str,\n-    triple: &str,\n+    mut compiler: Compiler,\n     cg_clif_dylib_path: &Path,\n-    linker: Option<&str>,\n ) {\n     match fs::read_to_string(SYSROOT_RUSTC_VERSION.to_path(dirs)) {\n         Err(e) => {\n@@ -177,7 +180,7 @@ fn build_clif_sysroot_for_triple(\n         }\n     }\n \n-    let build_dir = STANDARD_LIBRARY.target_dir(dirs).join(triple).join(channel);\n+    let build_dir = STANDARD_LIBRARY.target_dir(dirs).join(&compiler.triple).join(channel);\n \n     if !super::config::get_bool(\"keep_sysroot\") {\n         // Cleanup the deps dir, but keep build scripts and the incremental cache for faster\n@@ -188,18 +191,13 @@ fn build_clif_sysroot_for_triple(\n     }\n \n     // Build sysroot\n-    let mut rustflags = \"-Zforce-unstable-if-unmarked -Cpanic=abort\".to_string();\n+    let mut rustflags = \" -Zforce-unstable-if-unmarked -Cpanic=abort\".to_string();\n     rustflags.push_str(&format!(\" -Zcodegen-backend={}\", cg_clif_dylib_path.to_str().unwrap()));\n     rustflags.push_str(&format!(\" --sysroot={}\", DIST_DIR.to_path(dirs).to_str().unwrap()));\n     if channel == \"release\" {\n         rustflags.push_str(\" -Zmir-opt-level=3\");\n     }\n-    if let Some(linker) = linker {\n-        use std::fmt::Write;\n-        write!(rustflags, \" -Clinker={}\", linker).unwrap();\n-    }\n-    let mut compiler = Compiler::with_triple(triple.to_owned());\n-    compiler.rustflags = rustflags;\n+    compiler.rustflags += &rustflags;\n     let mut build_cmd = STANDARD_LIBRARY.build(&compiler, dirs);\n     if channel == \"release\" {\n         build_cmd.arg(\"--release\");\n@@ -219,7 +217,7 @@ fn build_clif_sysroot_for_triple(\n         };\n         try_hard_link(\n             entry.path(),\n-            RUSTLIB_DIR.to_path(dirs).join(triple).join(\"lib\").join(entry.file_name()),\n+            RUSTLIB_DIR.to_path(dirs).join(&compiler.triple).join(\"lib\").join(entry.file_name()),\n         );\n     }\n }"}, {"sha": "d1932549ee675c5cae550c5363c17fe9f83b4998", "filename": "build_system/mod.rs", "status": "modified", "additions": 23, "deletions": 57, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/build_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/build_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmod.rs?ref=20a829acb4b97597aae9bd4dba1dd2504fef3a0a", "patch": "@@ -2,7 +2,7 @@ use std::env;\n use std::path::PathBuf;\n use std::process;\n \n-use self::utils::is_ci;\n+use self::utils::{is_ci, Compiler};\n \n mod abi_cafe;\n mod bench;\n@@ -15,32 +15,8 @@ mod rustc_info;\n mod tests;\n mod utils;\n \n-const USAGE: &str = r#\"The build system of cg_clif.\n-\n-USAGE:\n-    ./y.rs prepare [--out-dir DIR]\n-    ./y.rs build [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--no-unstable-features]\n-    ./y.rs test [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--no-unstable-features]\n-    ./y.rs bench [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--no-unstable-features]\n-\n-OPTIONS:\n-    --sysroot none|clif|llvm\n-            Which sysroot libraries to use:\n-            `none` will not include any standard library in the sysroot.\n-            `clif` will build the standard library using Cranelift.\n-            `llvm` will use the pre-compiled standard library of rustc which is compiled with LLVM.\n-\n-    --out-dir DIR\n-            Specify the directory in which the download, build and dist directories are stored.\n-            By default this is the working directory.\n-\n-    --no-unstable-features\n-            fSome features are not yet ready for production usage. This option will disable these\n-            features. This includes the JIT mode and inline assembly support.\n-\"#;\n-\n fn usage() {\n-    eprintln!(\"{USAGE}\");\n+    eprintln!(\"{}\", include_str!(\"usage.txt\"));\n }\n \n macro_rules! arg_error {\n@@ -121,24 +97,16 @@ pub fn main() {\n         }\n     }\n \n-    let host_triple = if let Ok(host_triple) = std::env::var(\"HOST_TRIPLE\") {\n-        host_triple\n-    } else if let Some(host_triple) = config::get_value(\"host\") {\n-        host_triple\n-    } else {\n-        rustc_info::get_host_triple()\n-    };\n-    let target_triple = if let Ok(target_triple) = std::env::var(\"TARGET_TRIPLE\") {\n-        if target_triple != \"\" {\n-            target_triple\n-        } else {\n-            host_triple.clone() // Empty target triple can happen on GHA\n-        }\n-    } else if let Some(target_triple) = config::get_value(\"target\") {\n-        target_triple\n-    } else {\n-        host_triple.clone()\n-    };\n+    let host_compiler = Compiler::llvm_with_triple(\n+        std::env::var(\"HOST_TRIPLE\")\n+            .ok()\n+            .or_else(|| config::get_value(\"host\"))\n+            .unwrap_or_else(|| rustc_info::get_host_triple()),\n+    );\n+    let target_triple = std::env::var(\"TARGET_TRIPLE\")\n+        .ok()\n+        .or_else(|| config::get_value(\"target\"))\n+        .unwrap_or_else(|| host_compiler.triple.clone());\n \n     // FIXME allow changing the location of these dirs using cli arguments\n     let current_dir = std::env::current_dir().unwrap();\n@@ -167,7 +135,7 @@ pub fn main() {\n     }\n \n     let cg_clif_dylib =\n-        build_backend::build_backend(&dirs, channel, &host_triple, use_unstable_features);\n+        build_backend::build_backend(&dirs, channel, &host_compiler, use_unstable_features);\n     match command {\n         Command::Prepare => {\n             // Handled above\n@@ -178,26 +146,24 @@ pub fn main() {\n                 channel,\n                 sysroot_kind,\n                 &cg_clif_dylib,\n-                &host_triple,\n+                &host_compiler,\n                 &target_triple,\n             );\n \n-            abi_cafe::run(\n-                channel,\n-                sysroot_kind,\n-                &dirs,\n-                &cg_clif_dylib,\n-                &host_triple,\n-                &target_triple,\n-            );\n+            if host_compiler.triple == target_triple {\n+                abi_cafe::run(channel, sysroot_kind, &dirs, &cg_clif_dylib, &host_compiler);\n+            } else {\n+                eprintln!(\"[SKIP] abi-cafe (cross-compilation not supported)\");\n+                return;\n+            }\n         }\n         Command::Build => {\n             build_sysroot::build_sysroot(\n                 &dirs,\n                 channel,\n                 sysroot_kind,\n                 &cg_clif_dylib,\n-                &host_triple,\n+                &host_compiler,\n                 &target_triple,\n             );\n         }\n@@ -207,10 +173,10 @@ pub fn main() {\n                 channel,\n                 sysroot_kind,\n                 &cg_clif_dylib,\n-                &host_triple,\n+                &host_compiler,\n                 &target_triple,\n             );\n-            bench::benchmark(&dirs);\n+            bench::benchmark(&dirs, &host_compiler);\n         }\n     }\n }"}, {"sha": "4e898b30b7cce6a0e4ae3463dcf019da99cd85d0", "filename": "build_system/prepare.rs", "status": "modified", "additions": 24, "deletions": 31, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=20a829acb4b97597aae9bd4dba1dd2504fef3a0a", "patch": "@@ -8,21 +8,30 @@ use crate::build_system::rustc_info::get_default_sysroot;\n use super::build_sysroot::{BUILD_SYSROOT, ORIG_BUILD_SYSROOT, SYSROOT_RUSTC_VERSION, SYSROOT_SRC};\n use super::path::{Dirs, RelPath};\n use super::rustc_info::get_rustc_version;\n-use super::utils::{copy_dir_recursively, retry_spawn_and_wait, spawn_and_wait};\n+use super::utils::{copy_dir_recursively, git_command, retry_spawn_and_wait, spawn_and_wait};\n \n pub(crate) fn prepare(dirs: &Dirs) {\n     if RelPath::DOWNLOAD.to_path(dirs).exists() {\n         std::fs::remove_dir_all(RelPath::DOWNLOAD.to_path(dirs)).unwrap();\n     }\n     std::fs::create_dir_all(RelPath::DOWNLOAD.to_path(dirs)).unwrap();\n \n+    spawn_and_wait(super::build_backend::CG_CLIF.fetch(\"cargo\", dirs));\n+\n     prepare_sysroot(dirs);\n+    spawn_and_wait(super::build_sysroot::STANDARD_LIBRARY.fetch(\"cargo\", dirs));\n+    spawn_and_wait(super::tests::LIBCORE_TESTS.fetch(\"cargo\", dirs));\n \n     super::abi_cafe::ABI_CAFE_REPO.fetch(dirs);\n+    spawn_and_wait(super::abi_cafe::ABI_CAFE.fetch(\"cargo\", dirs));\n     super::tests::RAND_REPO.fetch(dirs);\n+    spawn_and_wait(super::tests::RAND.fetch(\"cargo\", dirs));\n     super::tests::REGEX_REPO.fetch(dirs);\n+    spawn_and_wait(super::tests::REGEX.fetch(\"cargo\", dirs));\n     super::tests::PORTABLE_SIMD_REPO.fetch(dirs);\n+    spawn_and_wait(super::tests::PORTABLE_SIMD.fetch(\"cargo\", dirs));\n     super::bench::SIMPLE_RAYTRACER_REPO.fetch(dirs);\n+    spawn_and_wait(super::bench::SIMPLE_RAYTRACER.fetch(\"cargo\", dirs));\n }\n \n fn prepare_sysroot(dirs: &Dirs) {\n@@ -31,6 +40,7 @@ fn prepare_sysroot(dirs: &Dirs) {\n \n     eprintln!(\"[COPY] sysroot src\");\n \n+    // FIXME ensure builds error out or update the copy if any of the files copied here change\n     BUILD_SYSROOT.ensure_fresh(dirs);\n     copy_dir_recursively(&ORIG_BUILD_SYSROOT.to_path(dirs), &BUILD_SYSROOT.to_path(dirs));\n \n@@ -95,14 +105,14 @@ impl GitRepo {\n fn clone_repo(download_dir: &Path, repo: &str, rev: &str) {\n     eprintln!(\"[CLONE] {}\", repo);\n     // Ignore exit code as the repo may already have been checked out\n-    Command::new(\"git\").arg(\"clone\").arg(repo).arg(&download_dir).spawn().unwrap().wait().unwrap();\n+    git_command(None, \"clone\").arg(repo).arg(download_dir).spawn().unwrap().wait().unwrap();\n \n-    let mut clean_cmd = Command::new(\"git\");\n-    clean_cmd.arg(\"checkout\").arg(\"--\").arg(\".\").current_dir(&download_dir);\n+    let mut clean_cmd = git_command(download_dir, \"checkout\");\n+    clean_cmd.arg(\"--\").arg(\".\");\n     spawn_and_wait(clean_cmd);\n \n-    let mut checkout_cmd = Command::new(\"git\");\n-    checkout_cmd.arg(\"checkout\").arg(\"-q\").arg(rev).current_dir(download_dir);\n+    let mut checkout_cmd = git_command(download_dir, \"checkout\");\n+    checkout_cmd.arg(\"-q\").arg(rev);\n     spawn_and_wait(checkout_cmd);\n }\n \n@@ -158,25 +168,16 @@ fn clone_repo_shallow_github(dirs: &Dirs, download_dir: &Path, user: &str, repo:\n }\n \n fn init_git_repo(repo_dir: &Path) {\n-    let mut git_init_cmd = Command::new(\"git\");\n-    git_init_cmd.arg(\"init\").arg(\"-q\").current_dir(repo_dir);\n+    let mut git_init_cmd = git_command(repo_dir, \"init\");\n+    git_init_cmd.arg(\"-q\");\n     spawn_and_wait(git_init_cmd);\n \n-    let mut git_add_cmd = Command::new(\"git\");\n-    git_add_cmd.arg(\"add\").arg(\".\").current_dir(repo_dir);\n+    let mut git_add_cmd = git_command(repo_dir, \"add\");\n+    git_add_cmd.arg(\".\");\n     spawn_and_wait(git_add_cmd);\n \n-    let mut git_commit_cmd = Command::new(\"git\");\n-    git_commit_cmd\n-        .arg(\"-c\")\n-        .arg(\"user.name=Dummy\")\n-        .arg(\"-c\")\n-        .arg(\"user.email=dummy@example.com\")\n-        .arg(\"commit\")\n-        .arg(\"-m\")\n-        .arg(\"Initial commit\")\n-        .arg(\"-q\")\n-        .current_dir(repo_dir);\n+    let mut git_commit_cmd = git_command(repo_dir, \"commit\");\n+    git_commit_cmd.arg(\"-m\").arg(\"Initial commit\").arg(\"-q\");\n     spawn_and_wait(git_commit_cmd);\n }\n \n@@ -211,16 +212,8 @@ fn apply_patches(dirs: &Dirs, crate_name: &str, target_dir: &Path) {\n             target_dir.file_name().unwrap(),\n             patch.file_name().unwrap()\n         );\n-        let mut apply_patch_cmd = Command::new(\"git\");\n-        apply_patch_cmd\n-            .arg(\"-c\")\n-            .arg(\"user.name=Dummy\")\n-            .arg(\"-c\")\n-            .arg(\"user.email=dummy@example.com\")\n-            .arg(\"am\")\n-            .arg(patch)\n-            .arg(\"-q\")\n-            .current_dir(target_dir);\n+        let mut apply_patch_cmd = git_command(target_dir, \"am\");\n+        apply_patch_cmd.arg(patch).arg(\"-q\");\n         spawn_and_wait(apply_patch_cmd);\n     }\n }"}, {"sha": "4d638a4eced108f3cf5a372a003682201669f449", "filename": "build_system/tests.rs", "status": "modified", "additions": 150, "deletions": 279, "changes": 429, "blob_url": "https://github.com/rust-lang/rust/blob/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=20a829acb4b97597aae9bd4dba1dd2504fef3a0a", "patch": "@@ -15,229 +15,94 @@ static BUILD_EXAMPLE_OUT_DIR: RelPath = RelPath::BUILD.join(\"example\");\n \n struct TestCase {\n     config: &'static str,\n-    func: &'static dyn Fn(&TestRunner),\n+    cmd: TestCaseCmd,\n+}\n+\n+enum TestCaseCmd {\n+    Custom { func: &'static dyn Fn(&TestRunner) },\n+    BuildLib { source: &'static str, crate_types: &'static str },\n+    BuildBinAndRun { source: &'static str, args: &'static [&'static str] },\n+    JitBin { source: &'static str, args: &'static str },\n }\n \n impl TestCase {\n-    const fn new(config: &'static str, func: &'static dyn Fn(&TestRunner)) -> Self {\n-        Self { config, func }\n+    // FIXME reduce usage of custom test case commands\n+    const fn custom(config: &'static str, func: &'static dyn Fn(&TestRunner)) -> Self {\n+        Self { config, cmd: TestCaseCmd::Custom { func } }\n+    }\n+\n+    const fn build_lib(\n+        config: &'static str,\n+        source: &'static str,\n+        crate_types: &'static str,\n+    ) -> Self {\n+        Self { config, cmd: TestCaseCmd::BuildLib { source, crate_types } }\n+    }\n+\n+    const fn build_bin_and_run(\n+        config: &'static str,\n+        source: &'static str,\n+        args: &'static [&'static str],\n+    ) -> Self {\n+        Self { config, cmd: TestCaseCmd::BuildBinAndRun { source, args } }\n+    }\n+\n+    const fn jit_bin(config: &'static str, source: &'static str, args: &'static str) -> Self {\n+        Self { config, cmd: TestCaseCmd::JitBin { source, args } }\n     }\n }\n \n const NO_SYSROOT_SUITE: &[TestCase] = &[\n-    TestCase::new(\"build.mini_core\", &|runner| {\n-        runner.run_rustc([\n-            \"example/mini_core.rs\",\n-            \"--crate-name\",\n-            \"mini_core\",\n-            \"--crate-type\",\n-            \"lib,dylib\",\n-            \"--target\",\n-            &runner.target_compiler.triple,\n-        ]);\n-    }),\n-    TestCase::new(\"build.example\", &|runner| {\n-        runner.run_rustc([\n-            \"example/example.rs\",\n-            \"--crate-type\",\n-            \"lib\",\n-            \"--target\",\n-            &runner.target_compiler.triple,\n-        ]);\n-    }),\n-    TestCase::new(\"jit.mini_core_hello_world\", &|runner| {\n-        let mut jit_cmd = runner.rustc_command([\n-            \"-Zunstable-options\",\n-            \"-Cllvm-args=mode=jit\",\n-            \"-Cprefer-dynamic\",\n-            \"example/mini_core_hello_world.rs\",\n-            \"--cfg\",\n-            \"jit\",\n-            \"--target\",\n-            &runner.target_compiler.triple,\n-        ]);\n-        jit_cmd.env(\"CG_CLIF_JIT_ARGS\", \"abc bcd\");\n-        spawn_and_wait(jit_cmd);\n-\n-        eprintln!(\"[JIT-lazy] mini_core_hello_world\");\n-        let mut jit_cmd = runner.rustc_command([\n-            \"-Zunstable-options\",\n-            \"-Cllvm-args=mode=jit-lazy\",\n-            \"-Cprefer-dynamic\",\n-            \"example/mini_core_hello_world.rs\",\n-            \"--cfg\",\n-            \"jit\",\n-            \"--target\",\n-            &runner.target_compiler.triple,\n-        ]);\n-        jit_cmd.env(\"CG_CLIF_JIT_ARGS\", \"abc bcd\");\n-        spawn_and_wait(jit_cmd);\n-    }),\n-    TestCase::new(\"aot.mini_core_hello_world\", &|runner| {\n-        runner.run_rustc([\n-            \"example/mini_core_hello_world.rs\",\n-            \"--crate-name\",\n-            \"mini_core_hello_world\",\n-            \"--crate-type\",\n-            \"bin\",\n-            \"-g\",\n-            \"--target\",\n-            &runner.target_compiler.triple,\n-        ]);\n-        runner.run_out_command(\"mini_core_hello_world\", [\"abc\", \"bcd\"]);\n-    }),\n+    TestCase::build_lib(\"build.mini_core\", \"example/mini_core.rs\", \"lib,dylib\"),\n+    TestCase::build_lib(\"build.example\", \"example/example.rs\", \"lib\"),\n+    TestCase::jit_bin(\"jit.mini_core_hello_world\", \"example/mini_core_hello_world.rs\", \"abc bcd\"),\n+    TestCase::build_bin_and_run(\n+        \"aot.mini_core_hello_world\",\n+        \"example/mini_core_hello_world.rs\",\n+        &[\"abc\", \"bcd\"],\n+    ),\n ];\n \n const BASE_SYSROOT_SUITE: &[TestCase] = &[\n-    TestCase::new(\"aot.arbitrary_self_types_pointers_and_wrappers\", &|runner| {\n-        runner.run_rustc([\n-            \"example/arbitrary_self_types_pointers_and_wrappers.rs\",\n-            \"--crate-name\",\n-            \"arbitrary_self_types_pointers_and_wrappers\",\n-            \"--crate-type\",\n-            \"bin\",\n-            \"--target\",\n-            &runner.target_compiler.triple,\n-        ]);\n-        runner.run_out_command(\"arbitrary_self_types_pointers_and_wrappers\", []);\n-    }),\n-    TestCase::new(\"aot.issue_91827_extern_types\", &|runner| {\n-        runner.run_rustc([\n-            \"example/issue-91827-extern-types.rs\",\n-            \"--crate-name\",\n-            \"issue_91827_extern_types\",\n-            \"--crate-type\",\n-            \"bin\",\n-            \"--target\",\n-            &runner.target_compiler.triple,\n-        ]);\n-        runner.run_out_command(\"issue_91827_extern_types\", []);\n-    }),\n-    TestCase::new(\"build.alloc_system\", &|runner| {\n-        runner.run_rustc([\n-            \"example/alloc_system.rs\",\n-            \"--crate-type\",\n-            \"lib\",\n-            \"--target\",\n-            &runner.target_compiler.triple,\n-        ]);\n-    }),\n-    TestCase::new(\"aot.alloc_example\", &|runner| {\n-        runner.run_rustc([\n-            \"example/alloc_example.rs\",\n-            \"--crate-type\",\n-            \"bin\",\n-            \"--target\",\n-            &runner.target_compiler.triple,\n-        ]);\n-        runner.run_out_command(\"alloc_example\", []);\n-    }),\n-    TestCase::new(\"jit.std_example\", &|runner| {\n-        runner.run_rustc([\n-            \"-Zunstable-options\",\n-            \"-Cllvm-args=mode=jit\",\n-            \"-Cprefer-dynamic\",\n-            \"example/std_example.rs\",\n-            \"--target\",\n-            &runner.target_compiler.triple,\n-        ]);\n-\n-        eprintln!(\"[JIT-lazy] std_example\");\n-        runner.run_rustc([\n-            \"-Zunstable-options\",\n-            \"-Cllvm-args=mode=jit-lazy\",\n-            \"-Cprefer-dynamic\",\n-            \"example/std_example.rs\",\n-            \"--target\",\n-            &runner.target_compiler.triple,\n-        ]);\n-    }),\n-    TestCase::new(\"aot.std_example\", &|runner| {\n-        runner.run_rustc([\n-            \"example/std_example.rs\",\n-            \"--crate-type\",\n-            \"bin\",\n-            \"--target\",\n-            &runner.target_compiler.triple,\n-        ]);\n-        runner.run_out_command(\"std_example\", [\"arg\"]);\n-    }),\n-    TestCase::new(\"aot.dst_field_align\", &|runner| {\n-        runner.run_rustc([\n-            \"example/dst-field-align.rs\",\n-            \"--crate-name\",\n-            \"dst_field_align\",\n-            \"--crate-type\",\n-            \"bin\",\n-            \"--target\",\n-            &runner.target_compiler.triple,\n-        ]);\n-        runner.run_out_command(\"dst_field_align\", []);\n-    }),\n-    TestCase::new(\"aot.subslice-patterns-const-eval\", &|runner| {\n-        runner.run_rustc([\n-            \"example/subslice-patterns-const-eval.rs\",\n-            \"--crate-type\",\n-            \"bin\",\n-            \"-Cpanic=abort\",\n-            \"--target\",\n-            &runner.target_compiler.triple,\n-        ]);\n-        runner.run_out_command(\"subslice-patterns-const-eval\", []);\n-    }),\n-    TestCase::new(\"aot.track-caller-attribute\", &|runner| {\n-        runner.run_rustc([\n-            \"example/track-caller-attribute.rs\",\n-            \"--crate-type\",\n-            \"bin\",\n-            \"-Cpanic=abort\",\n-            \"--target\",\n-            &runner.target_compiler.triple,\n-        ]);\n-        runner.run_out_command(\"track-caller-attribute\", []);\n-    }),\n-    TestCase::new(\"aot.float-minmax-pass\", &|runner| {\n-        runner.run_rustc([\n-            \"example/float-minmax-pass.rs\",\n-            \"--crate-type\",\n-            \"bin\",\n-            \"-Cpanic=abort\",\n-            \"--target\",\n-            &runner.target_compiler.triple,\n-        ]);\n-        runner.run_out_command(\"float-minmax-pass\", []);\n-    }),\n-    TestCase::new(\"aot.mod_bench\", &|runner| {\n-        runner.run_rustc([\n-            \"example/mod_bench.rs\",\n-            \"--crate-type\",\n-            \"bin\",\n-            \"--target\",\n-            &runner.target_compiler.triple,\n-        ]);\n-        runner.run_out_command(\"mod_bench\", []);\n-    }),\n-    TestCase::new(\"aot.issue-72793\", &|runner| {\n-        runner.run_rustc([\n-            \"example/issue-72793.rs\",\n-            \"--crate-type\",\n-            \"bin\",\n-            \"--target\",\n-            &runner.target_compiler.triple,\n-        ]);\n-        runner.run_out_command(\"issue-72793\", []);\n-    }),\n+    TestCase::build_bin_and_run(\n+        \"aot.arbitrary_self_types_pointers_and_wrappers\",\n+        \"example/arbitrary_self_types_pointers_and_wrappers.rs\",\n+        &[],\n+    ),\n+    TestCase::build_bin_and_run(\n+        \"aot.issue_91827_extern_types\",\n+        \"example/issue-91827-extern-types.rs\",\n+        &[],\n+    ),\n+    TestCase::build_lib(\"build.alloc_system\", \"example/alloc_system.rs\", \"lib\"),\n+    TestCase::build_bin_and_run(\"aot.alloc_example\", \"example/alloc_example.rs\", &[]),\n+    TestCase::jit_bin(\"jit.std_example\", \"example/std_example.rs\", \"\"),\n+    TestCase::build_bin_and_run(\"aot.std_example\", \"example/std_example.rs\", &[\"arg\"]),\n+    TestCase::build_bin_and_run(\"aot.dst_field_align\", \"example/dst-field-align.rs\", &[]),\n+    TestCase::build_bin_and_run(\n+        \"aot.subslice-patterns-const-eval\",\n+        \"example/subslice-patterns-const-eval.rs\",\n+        &[],\n+    ),\n+    TestCase::build_bin_and_run(\n+        \"aot.track-caller-attribute\",\n+        \"example/track-caller-attribute.rs\",\n+        &[],\n+    ),\n+    TestCase::build_bin_and_run(\"aot.float-minmax-pass\", \"example/float-minmax-pass.rs\", &[]),\n+    TestCase::build_bin_and_run(\"aot.mod_bench\", \"example/mod_bench.rs\", &[]),\n+    TestCase::build_bin_and_run(\"aot.issue-72793\", \"example/issue-72793.rs\", &[]),\n ];\n \n pub(crate) static RAND_REPO: GitRepo =\n     GitRepo::github(\"rust-random\", \"rand\", \"0f933f9c7176e53b2a3c7952ded484e1783f0bf1\", \"rand\");\n \n-static RAND: CargoProject = CargoProject::new(&RAND_REPO.source_dir(), \"rand\");\n+pub(crate) static RAND: CargoProject = CargoProject::new(&RAND_REPO.source_dir(), \"rand\");\n \n pub(crate) static REGEX_REPO: GitRepo =\n     GitRepo::github(\"rust-lang\", \"regex\", \"341f207c1071f7290e3f228c710817c280c8dca1\", \"regex\");\n \n-static REGEX: CargoProject = CargoProject::new(&REGEX_REPO.source_dir(), \"regex\");\n+pub(crate) static REGEX: CargoProject = CargoProject::new(&REGEX_REPO.source_dir(), \"regex\");\n \n pub(crate) static PORTABLE_SIMD_REPO: GitRepo = GitRepo::github(\n     \"rust-lang\",\n@@ -246,14 +111,14 @@ pub(crate) static PORTABLE_SIMD_REPO: GitRepo = GitRepo::github(\n     \"portable-simd\",\n );\n \n-static PORTABLE_SIMD: CargoProject =\n+pub(crate) static PORTABLE_SIMD: CargoProject =\n     CargoProject::new(&PORTABLE_SIMD_REPO.source_dir(), \"portable_simd\");\n \n-static LIBCORE_TESTS: CargoProject =\n+pub(crate) static LIBCORE_TESTS: CargoProject =\n     CargoProject::new(&SYSROOT_SRC.join(\"library/core/tests\"), \"core_tests\");\n \n const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n-    TestCase::new(\"test.rust-random/rand\", &|runner| {\n+    TestCase::custom(\"test.rust-random/rand\", &|runner| {\n         spawn_and_wait(RAND.clean(&runner.target_compiler.cargo, &runner.dirs));\n \n         if runner.is_native {\n@@ -268,11 +133,11 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n             spawn_and_wait(build_cmd);\n         }\n     }),\n-    TestCase::new(\"test.simple-raytracer\", &|runner| {\n+    TestCase::custom(\"test.simple-raytracer\", &|runner| {\n         spawn_and_wait(SIMPLE_RAYTRACER.clean(&runner.host_compiler.cargo, &runner.dirs));\n         spawn_and_wait(SIMPLE_RAYTRACER.build(&runner.target_compiler, &runner.dirs));\n     }),\n-    TestCase::new(\"test.libcore\", &|runner| {\n+    TestCase::custom(\"test.libcore\", &|runner| {\n         spawn_and_wait(LIBCORE_TESTS.clean(&runner.host_compiler.cargo, &runner.dirs));\n \n         if runner.is_native {\n@@ -284,7 +149,7 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n             spawn_and_wait(build_cmd);\n         }\n     }),\n-    TestCase::new(\"test.regex-shootout-regex-dna\", &|runner| {\n+    TestCase::custom(\"test.regex-shootout-regex-dna\", &|runner| {\n         spawn_and_wait(REGEX.clean(&runner.target_compiler.cargo, &runner.dirs));\n \n         // newer aho_corasick versions throw a deprecation warning\n@@ -304,9 +169,10 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n                 REGEX.source_dir(&runner.dirs).join(\"examples\").join(\"regexdna-input.txt\"),\n             )\n             .unwrap();\n-            let expected_path =\n-                REGEX.source_dir(&runner.dirs).join(\"examples\").join(\"regexdna-output.txt\");\n-            let expected = fs::read_to_string(&expected_path).unwrap();\n+            let expected = fs::read_to_string(\n+                REGEX.source_dir(&runner.dirs).join(\"examples\").join(\"regexdna-output.txt\"),\n+            )\n+            .unwrap();\n \n             let output = spawn_and_wait_with_input(run_cmd, input);\n             // Make sure `[codegen mono items] start` doesn't poison the diff\n@@ -319,26 +185,15 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n \n             let output_matches = expected.lines().eq(output.lines());\n             if !output_matches {\n-                let res_path = REGEX.source_dir(&runner.dirs).join(\"res.txt\");\n-                fs::write(&res_path, &output).unwrap();\n-\n-                if cfg!(windows) {\n-                    println!(\"Output files don't match!\");\n-                    println!(\"Expected Output:\\n{}\", expected);\n-                    println!(\"Actual Output:\\n{}\", output);\n-                } else {\n-                    let mut diff = Command::new(\"diff\");\n-                    diff.arg(\"-u\");\n-                    diff.arg(res_path);\n-                    diff.arg(expected_path);\n-                    spawn_and_wait(diff);\n-                }\n+                println!(\"Output files don't match!\");\n+                println!(\"Expected Output:\\n{}\", expected);\n+                println!(\"Actual Output:\\n{}\", output);\n \n                 std::process::exit(1);\n             }\n         }\n     }),\n-    TestCase::new(\"test.regex\", &|runner| {\n+    TestCase::custom(\"test.regex\", &|runner| {\n         spawn_and_wait(REGEX.clean(&runner.host_compiler.cargo, &runner.dirs));\n \n         // newer aho_corasick versions throw a deprecation warning\n@@ -365,7 +220,7 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n             spawn_and_wait(build_cmd);\n         }\n     }),\n-    TestCase::new(\"test.portable-simd\", &|runner| {\n+    TestCase::custom(\"test.portable-simd\", &|runner| {\n         spawn_and_wait(PORTABLE_SIMD.clean(&runner.host_compiler.cargo, &runner.dirs));\n \n         let mut build_cmd = PORTABLE_SIMD.build(&runner.target_compiler, &runner.dirs);\n@@ -385,18 +240,19 @@ pub(crate) fn run_tests(\n     channel: &str,\n     sysroot_kind: SysrootKind,\n     cg_clif_dylib: &Path,\n-    host_triple: &str,\n+    host_compiler: &Compiler,\n     target_triple: &str,\n ) {\n-    let runner = TestRunner::new(dirs.clone(), host_triple.to_string(), target_triple.to_string());\n+    let runner =\n+        TestRunner::new(dirs.clone(), host_compiler.triple.clone(), target_triple.to_string());\n \n     if config::get_bool(\"testsuite.no_sysroot\") {\n         build_sysroot::build_sysroot(\n             dirs,\n             channel,\n             SysrootKind::None,\n             cg_clif_dylib,\n-            &host_triple,\n+            host_compiler,\n             &target_triple,\n         );\n \n@@ -415,7 +271,7 @@ pub(crate) fn run_tests(\n             channel,\n             sysroot_kind,\n             cg_clif_dylib,\n-            &host_triple,\n+            host_compiler,\n             &target_triple,\n         );\n     }\n@@ -445,58 +301,33 @@ impl TestRunner {\n     pub fn new(dirs: Dirs, host_triple: String, target_triple: String) -> Self {\n         let is_native = host_triple == target_triple;\n         let jit_supported =\n-            target_triple.contains(\"x86_64\") && is_native && !host_triple.contains(\"windows\");\n+            is_native && host_triple.contains(\"x86_64\") && !host_triple.contains(\"windows\");\n \n-        let mut rustflags = env::var(\"RUSTFLAGS\").ok().unwrap_or(\"\".to_string());\n-        let mut runner = vec![];\n+        let host_compiler = Compiler::clif_with_triple(&dirs, host_triple);\n \n+        let mut target_compiler = Compiler::clif_with_triple(&dirs, target_triple);\n         if !is_native {\n-            match target_triple.as_str() {\n-                \"aarch64-unknown-linux-gnu\" => {\n-                    // We are cross-compiling for aarch64. Use the correct linker and run tests in qemu.\n-                    rustflags = format!(\"-Clinker=aarch64-linux-gnu-gcc{}\", rustflags);\n-                    runner = vec![\n-                        \"qemu-aarch64\".to_owned(),\n-                        \"-L\".to_owned(),\n-                        \"/usr/aarch64-linux-gnu\".to_owned(),\n-                    ];\n-                }\n-                \"s390x-unknown-linux-gnu\" => {\n-                    // We are cross-compiling for s390x. Use the correct linker and run tests in qemu.\n-                    rustflags = format!(\"-Clinker=s390x-linux-gnu-gcc{}\", rustflags);\n-                    runner = vec![\n-                        \"qemu-s390x\".to_owned(),\n-                        \"-L\".to_owned(),\n-                        \"/usr/s390x-linux-gnu\".to_owned(),\n-                    ];\n-                }\n-                \"x86_64-pc-windows-gnu\" => {\n-                    // We are cross-compiling for Windows. Run tests in wine.\n-                    runner = vec![\"wine\".to_owned()];\n-                }\n-                _ => {\n-                    println!(\"Unknown non-native platform\");\n-                }\n-            }\n+            target_compiler.set_cross_linker_and_runner();\n+        }\n+        if let Ok(rustflags) = env::var(\"RUSTFLAGS\") {\n+            target_compiler.rustflags.push(' ');\n+            target_compiler.rustflags.push_str(&rustflags);\n+        }\n+        if let Ok(rustdocflags) = env::var(\"RUSTDOCFLAGS\") {\n+            target_compiler.rustdocflags.push(' ');\n+            target_compiler.rustdocflags.push_str(&rustdocflags);\n         }\n \n         // FIXME fix `#[linkage = \"extern_weak\"]` without this\n-        if target_triple.contains(\"darwin\") {\n-            rustflags = format!(\"{} -Clink-arg=-undefined -Clink-arg=dynamic_lookup\", rustflags);\n+        if target_compiler.triple.contains(\"darwin\") {\n+            target_compiler.rustflags.push_str(\" -Clink-arg=-undefined -Clink-arg=dynamic_lookup\");\n         }\n \n-        let host_compiler = Compiler::clif_with_triple(&dirs, host_triple);\n-\n-        let mut target_compiler = Compiler::clif_with_triple(&dirs, target_triple);\n-        target_compiler.rustflags = rustflags.clone();\n-        target_compiler.rustdocflags = rustflags;\n-        target_compiler.runner = runner;\n-\n         Self { is_native, jit_supported, dirs, host_compiler, target_compiler }\n     }\n \n     pub fn run_testsuite(&self, tests: &[TestCase]) {\n-        for &TestCase { config, func } in tests {\n+        for TestCase { config, cmd } in tests {\n             let (tag, testname) = config.split_once('.').unwrap();\n             let tag = tag.to_uppercase();\n             let is_jit_test = tag == \"JIT\";\n@@ -508,7 +339,47 @@ impl TestRunner {\n                 eprintln!(\"[{tag}] {testname}\");\n             }\n \n-            func(self);\n+            match *cmd {\n+                TestCaseCmd::Custom { func } => func(self),\n+                TestCaseCmd::BuildLib { source, crate_types } => {\n+                    self.run_rustc([source, \"--crate-type\", crate_types]);\n+                }\n+                TestCaseCmd::BuildBinAndRun { source, args } => {\n+                    self.run_rustc([source]);\n+                    self.run_out_command(\n+                        source.split('/').last().unwrap().split('.').next().unwrap(),\n+                        args,\n+                    );\n+                }\n+                TestCaseCmd::JitBin { source, args } => {\n+                    let mut jit_cmd = self.rustc_command([\n+                        \"-Zunstable-options\",\n+                        \"-Cllvm-args=mode=jit\",\n+                        \"-Cprefer-dynamic\",\n+                        source,\n+                        \"--cfg\",\n+                        \"jit\",\n+                    ]);\n+                    if !args.is_empty() {\n+                        jit_cmd.env(\"CG_CLIF_JIT_ARGS\", args);\n+                    }\n+                    spawn_and_wait(jit_cmd);\n+\n+                    eprintln!(\"[JIT-lazy] {testname}\");\n+                    let mut jit_cmd = self.rustc_command([\n+                        \"-Zunstable-options\",\n+                        \"-Cllvm-args=mode=jit-lazy\",\n+                        \"-Cprefer-dynamic\",\n+                        source,\n+                        \"--cfg\",\n+                        \"jit\",\n+                    ]);\n+                    if !args.is_empty() {\n+                        jit_cmd.env(\"CG_CLIF_JIT_ARGS\", args);\n+                    }\n+                    spawn_and_wait(jit_cmd);\n+                }\n+            }\n         }\n     }\n \n@@ -525,6 +396,9 @@ impl TestRunner {\n         cmd.arg(\"--out-dir\");\n         cmd.arg(format!(\"{}\", BUILD_EXAMPLE_OUT_DIR.to_path(&self.dirs).display()));\n         cmd.arg(\"-Cdebuginfo=2\");\n+        cmd.arg(\"--target\");\n+        cmd.arg(&self.target_compiler.triple);\n+        cmd.arg(\"-Cpanic=abort\");\n         cmd.args(args);\n         cmd\n     }\n@@ -537,10 +411,7 @@ impl TestRunner {\n         spawn_and_wait(self.rustc_command(args));\n     }\n \n-    fn run_out_command<'a, I>(&self, name: &str, args: I)\n-    where\n-        I: IntoIterator<Item = &'a str>,\n-    {\n+    fn run_out_command<'a>(&self, name: &str, args: &[&str]) {\n         let mut full_cmd = vec![];\n \n         // Prepend the RUN_WRAPPER's\n@@ -552,7 +423,7 @@ impl TestRunner {\n             BUILD_EXAMPLE_OUT_DIR.to_path(&self.dirs).join(name).to_str().unwrap().to_string(),\n         );\n \n-        for arg in args.into_iter() {\n+        for arg in args {\n             full_cmd.push(arg.to_string());\n         }\n "}, {"sha": "9185255155426790001802a0034374e20a9450bf", "filename": "build_system/usage.txt", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/build_system%2Fusage.txt", "raw_url": "https://github.com/rust-lang/rust/raw/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/build_system%2Fusage.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fusage.txt?ref=20a829acb4b97597aae9bd4dba1dd2504fef3a0a", "patch": "@@ -0,0 +1,34 @@\n+The build system of cg_clif.\n+\n+USAGE:\n+    ./y.rs prepare [--out-dir DIR]\n+    ./y.rs build [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--no-unstable-features]\n+    ./y.rs test [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--no-unstable-features]\n+    ./y.rs bench [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--no-unstable-features]\n+\n+OPTIONS:\n+    --debug\n+            Build cg_clif and the standard library in debug mode rather than release mode.\n+            Warning: An unoptimized cg_clif is very slow.\n+\n+    --sysroot none|clif|llvm\n+            Which sysroot libraries to use:\n+            `none` will not include any standard library in the sysroot.\n+            `clif` will build the standard library using Cranelift.\n+            `llvm` will use the pre-compiled standard library of rustc which is compiled with LLVM.\n+\n+    --out-dir DIR\n+            Specify the directory in which the download, build and dist directories are stored.\n+            By default this is the working directory.\n+\n+    --no-unstable-features\n+            Some features are not yet ready for production usage. This option will disable these\n+            features. This includes the JIT mode and inline assembly support.\n+\n+REQUIREMENTS:\n+    * Rustup: The build system has a hard coded dependency on rustup to install the right nightly\n+      version and make sure it is used where necessary.\n+    * Git: `./y.rs prepare` uses git for applying patches and on Windows for downloading test repos.\n+    * Curl and tar (non-Windows only): Used by `./y.rs prepare` to download a single commit for\n+      repos. Git will be used to clone the whole repo when using Windows.\n+    * [Hyperfine](https://github.com/sharkdp/hyperfine/): Used for benchmarking with `./y.rs bench`."}, {"sha": "f2b1fecedc16ba1febb0dc9acec939bae5db62a4", "filename": "build_system/utils.rs", "status": "modified", "additions": 56, "deletions": 17, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/build_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/build_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Futils.rs?ref=20a829acb4b97597aae9bd4dba1dd2504fef3a0a", "patch": "@@ -5,10 +5,9 @@ use std::path::{Path, PathBuf};\n use std::process::{self, Command, Stdio};\n \n use super::path::{Dirs, RelPath};\n-use super::rustc_info::{\n-    get_cargo_path, get_host_triple, get_rustc_path, get_rustdoc_path, get_wrapper_file_name,\n-};\n+use super::rustc_info::{get_cargo_path, get_rustc_path, get_rustdoc_path, get_wrapper_file_name};\n \n+#[derive(Clone, Debug)]\n pub(crate) struct Compiler {\n     pub(crate) cargo: PathBuf,\n     pub(crate) rustc: PathBuf,\n@@ -20,19 +19,7 @@ pub(crate) struct Compiler {\n }\n \n impl Compiler {\n-    pub(crate) fn host() -> Compiler {\n-        Compiler {\n-            cargo: get_cargo_path(),\n-            rustc: get_rustc_path(),\n-            rustdoc: get_rustdoc_path(),\n-            rustflags: String::new(),\n-            rustdocflags: String::new(),\n-            triple: get_host_triple(),\n-            runner: vec![],\n-        }\n-    }\n-\n-    pub(crate) fn with_triple(triple: String) -> Compiler {\n+    pub(crate) fn llvm_with_triple(triple: String) -> Compiler {\n         Compiler {\n             cargo: get_cargo_path(),\n             rustc: get_rustc_path(),\n@@ -60,6 +47,38 @@ impl Compiler {\n             runner: vec![],\n         }\n     }\n+\n+    pub(crate) fn set_cross_linker_and_runner(&mut self) {\n+        match self.triple.as_str() {\n+            \"aarch64-unknown-linux-gnu\" => {\n+                // We are cross-compiling for aarch64. Use the correct linker and run tests in qemu.\n+                self.rustflags += \" -Clinker=aarch64-linux-gnu-gcc\";\n+                self.rustdocflags += \" -Clinker=aarch64-linux-gnu-gcc\";\n+                self.runner = vec![\n+                    \"qemu-aarch64\".to_owned(),\n+                    \"-L\".to_owned(),\n+                    \"/usr/aarch64-linux-gnu\".to_owned(),\n+                ];\n+            }\n+            \"s390x-unknown-linux-gnu\" => {\n+                // We are cross-compiling for s390x. Use the correct linker and run tests in qemu.\n+                self.rustflags += \" -Clinker=s390x-linux-gnu-gcc\";\n+                self.rustdocflags += \" -Clinker=s390x-linux-gnu-gcc\";\n+                self.runner = vec![\n+                    \"qemu-s390x\".to_owned(),\n+                    \"-L\".to_owned(),\n+                    \"/usr/s390x-linux-gnu\".to_owned(),\n+                ];\n+            }\n+            \"x86_64-pc-windows-gnu\" => {\n+                // We are cross-compiling for Windows. Run tests in wine.\n+                self.runner = vec![\"wine\".to_owned()];\n+            }\n+            _ => {\n+                println!(\"Unknown non-native platform\");\n+            }\n+        }\n+    }\n }\n \n pub(crate) struct CargoProject {\n@@ -84,18 +103,21 @@ impl CargoProject {\n         RelPath::BUILD.join(self.target).to_path(dirs)\n     }\n \n+    #[must_use]\n     fn base_cmd(&self, command: &str, cargo: &Path, dirs: &Dirs) -> Command {\n         let mut cmd = Command::new(cargo);\n \n         cmd.arg(command)\n             .arg(\"--manifest-path\")\n             .arg(self.manifest_path(dirs))\n             .arg(\"--target-dir\")\n-            .arg(self.target_dir(dirs));\n+            .arg(self.target_dir(dirs))\n+            .arg(\"--frozen\");\n \n         cmd\n     }\n \n+    #[must_use]\n     fn build_cmd(&self, command: &str, compiler: &Compiler, dirs: &Dirs) -> Command {\n         let mut cmd = self.base_cmd(command, &compiler.cargo, dirs);\n \n@@ -172,6 +194,23 @@ pub(crate) fn hyperfine_command(\n     bench\n }\n \n+#[must_use]\n+pub(crate) fn git_command<'a>(repo_dir: impl Into<Option<&'a Path>>, cmd: &str) -> Command {\n+    let mut git_cmd = Command::new(\"git\");\n+    git_cmd\n+        .arg(\"-c\")\n+        .arg(\"user.name=Dummy\")\n+        .arg(\"-c\")\n+        .arg(\"user.email=dummy@example.com\")\n+        .arg(\"-c\")\n+        .arg(\"core.autocrlf=false\")\n+        .arg(cmd);\n+    if let Some(repo_dir) = repo_dir.into() {\n+        git_cmd.current_dir(repo_dir);\n+    }\n+    git_cmd\n+}\n+\n #[track_caller]\n pub(crate) fn try_hard_link(src: impl AsRef<Path>, dst: impl AsRef<Path>) {\n     let src = src.as_ref();"}, {"sha": "ce0d7e9fe07da03f9e6684a1a8ed210783c2efe9", "filename": "scripts/setup_rust_fork.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/scripts%2Fsetup_rust_fork.sh", "raw_url": "https://github.com/rust-lang/rust/raw/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/scripts%2Fsetup_rust_fork.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fsetup_rust_fork.sh?ref=20a829acb4b97597aae9bd4dba1dd2504fef3a0a", "patch": "@@ -10,7 +10,7 @@ git fetch\n git checkout -- .\n git checkout \"$(rustc -V | cut -d' ' -f3 | tr -d '(')\"\n \n-git am ../patches/*-sysroot-*.patch\n+git -c user.name=Dummy -c user.email=dummy@example.com am ../patches/*-sysroot-*.patch\n \n git apply - <<EOF\n diff --git a/library/alloc/Cargo.toml b/library/alloc/Cargo.toml"}, {"sha": "fd825d02e355c0bfd3f58a6a8e99a33806ab33be", "filename": "y.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/y.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a829acb4b97597aae9bd4dba1dd2504fef3a0a/y.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/y.rs?ref=20a829acb4b97597aae9bd4dba1dd2504fef3a0a", "patch": "@@ -3,7 +3,7 @@\n # This block is ignored by rustc\n set -e\n echo \"[BUILD] y.rs\" 1>&2\n-rustc $0 -o ${0/.rs/.bin} -Cdebuginfo=1 --edition 2021\n+rustc $0 -o ${0/.rs/.bin} -Cdebuginfo=1 --edition 2021 -Cpanic=abort\n exec ${0/.rs/.bin} $@\n */\n "}]}