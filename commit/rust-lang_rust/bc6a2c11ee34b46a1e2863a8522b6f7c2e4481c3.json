{"sha": "bc6a2c11ee34b46a1e2863a8522b6f7c2e4481c3", "node_id": "C_kwDOAAsO6NoAKGJjNmEyYzExZWUzNGI0NmExZTI4NjNhODUyMmI2ZjdjMmU0NDgxYzM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-06T07:02:24Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-19T20:32:43Z"}, "message": "Leave the responsibility to create `Fresh` lifetimes to lowering.", "tree": {"sha": "6191c3f54a7ab547ecefe5ab5e1dfabffe58fdfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6191c3f54a7ab547ecefe5ab5e1dfabffe58fdfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc6a2c11ee34b46a1e2863a8522b6f7c2e4481c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc6a2c11ee34b46a1e2863a8522b6f7c2e4481c3", "html_url": "https://github.com/rust-lang/rust/commit/bc6a2c11ee34b46a1e2863a8522b6f7c2e4481c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc6a2c11ee34b46a1e2863a8522b6f7c2e4481c3/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc614b90ca9580eb9efd680648af28dce10e58a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc614b90ca9580eb9efd680648af28dce10e58a4", "html_url": "https://github.com/rust-lang/rust/commit/dc614b90ca9580eb9efd680648af28dce10e58a4"}], "stats": {"total": 64, "additions": 34, "deletions": 30}, "files": [{"sha": "0ef213716945c88fee80e0c041b83b574a3368f0", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bc6a2c11ee34b46a1e2863a8522b6f7c2e4481c3/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc6a2c11ee34b46a1e2863a8522b6f7c2e4481c3/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=bc6a2c11ee34b46a1e2863a8522b6f7c2e4481c3", "patch": "@@ -1386,16 +1386,19 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let mut params: SmallVec<[hir::GenericParam<'hir>; 4]> =\n             self.lower_generic_params_mut(&generics.params).collect();\n+\n+        // Introduce extra lifetimes if late resolution tells us to.\n+        let extra_lifetimes = self.resolver.take_extra_lifetime_params(parent_node_id);\n+        params.extend(extra_lifetimes.into_iter().filter_map(|(ident, node_id, res)| {\n+            self.lifetime_res_to_generic_param(ident, node_id, res)\n+        }));\n+\n         let has_where_clause_predicates = !generics.where_clause.predicates.is_empty();\n         let where_clause_span = self.lower_span(generics.where_clause.span);\n         let span = self.lower_span(generics.span);\n         let res = f(self);\n \n-        let extra_lifetimes = self.resolver.take_extra_lifetime_params(parent_node_id);\n         let impl_trait_defs = std::mem::take(&mut self.impl_trait_defs);\n-        params.extend(extra_lifetimes.into_iter().filter_map(|(ident, node_id, res)| {\n-            self.lifetime_res_to_generic_param(ident, node_id, res)\n-        }));\n         params.extend(impl_trait_defs.into_iter());\n \n         let impl_trait_bounds = std::mem::take(&mut self.impl_trait_bounds);"}, {"sha": "271ead78c5b9b77dbe8b3e95ecdf2f05fc5a9aa0", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bc6a2c11ee34b46a1e2863a8522b6f7c2e4481c3/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc6a2c11ee34b46a1e2863a8522b6f7c2e4481c3/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=bc6a2c11ee34b46a1e2863a8522b6f7c2e4481c3", "patch": "@@ -731,7 +731,17 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             LifetimeRes::Param { .. } => {\n                 (hir::ParamName::Plain(ident), hir::LifetimeParamKind::Explicit)\n             }\n-            LifetimeRes::Fresh { .. } => (hir::ParamName::Fresh, hir::LifetimeParamKind::Elided),\n+            LifetimeRes::Fresh { param, .. } => {\n+                // Late resolution delegates to us the creation of the `LocalDefId`.\n+                let _def_id = self.create_def(\n+                    self.current_hir_id_owner,\n+                    param,\n+                    DefPathData::LifetimeNs(kw::UnderscoreLifetime),\n+                );\n+                debug!(?_def_id);\n+\n+                (hir::ParamName::Fresh, hir::LifetimeParamKind::Elided)\n+            }\n             LifetimeRes::Static | LifetimeRes::Error => return None,\n             res => panic!(\n                 \"Unexpected lifetime resolution {:?} for {:?} at {:?}\",\n@@ -1814,8 +1824,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 }\n                 hir::LifetimeName::Param(param, p_name)\n             }\n-            LifetimeRes::Fresh { mut param, binder } => {\n+            LifetimeRes::Fresh { param, binder } => {\n                 debug_assert_eq!(ident.name, kw::UnderscoreLifetime);\n+                let mut param = self.local_def_id(param);\n                 if let Some(mut captured_lifetimes) = self.captured_lifetimes.take() {\n                     if !captured_lifetimes.binders_to_ignore.contains(&binder) {\n                         match captured_lifetimes.captures.entry(param) {"}, {"sha": "a111355c528d2012dc053b1a22ded3fbc18e2533", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc6a2c11ee34b46a1e2863a8522b6f7c2e4481c3/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc6a2c11ee34b46a1e2863a8522b6f7c2e4481c3/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=bc6a2c11ee34b46a1e2863a8522b6f7c2e4481c3", "patch": "@@ -732,7 +732,9 @@ pub enum LifetimeRes {\n     /// Created a generic parameter for an anonymous lifetime.\n     Fresh {\n         /// Id of the generic parameter that introduced it.\n-        param: LocalDefId,\n+        ///\n+        /// Creating the associated `LocalDefId` is the responsibility of lowering.\n+        param: NodeId,\n         /// Id of the introducing place. See `Param`.\n         binder: NodeId,\n     },"}, {"sha": "abccb94a9062da92da2aa0aefabc5c2fe0a12a5f", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bc6a2c11ee34b46a1e2863a8522b6f7c2e4481c3/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc6a2c11ee34b46a1e2863a8522b6f7c2e4481c3/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=bc6a2c11ee34b46a1e2863a8522b6f7c2e4481c3", "patch": "@@ -20,7 +20,6 @@ use rustc_errors::DiagnosticId;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, DefKind, LifetimeRes, PartialRes, PerNS};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID};\n-use rustc_hir::definitions::DefPathData;\n use rustc_hir::{PrimTy, TraitCandidate};\n use rustc_index::vec::Idx;\n use rustc_middle::ty::DefIdTree;\n@@ -1418,31 +1417,20 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     }\n \n     #[tracing::instrument(level = \"debug\", skip(self))]\n-    fn create_fresh_lifetime(\n-        &mut self,\n-        id: NodeId,\n-        ident: Ident,\n-        item_node_id: NodeId,\n-    ) -> LifetimeRes {\n+    fn create_fresh_lifetime(&mut self, id: NodeId, ident: Ident, binder: NodeId) -> LifetimeRes {\n         debug_assert_eq!(ident.name, kw::UnderscoreLifetime);\n         debug!(?ident.span);\n-        let item_def_id = self.r.local_def_id(item_node_id);\n-        let def_node_id = self.r.next_node_id();\n-        let def_id = self.r.create_def(\n-            item_def_id,\n-            def_node_id,\n-            DefPathData::LifetimeNs(kw::UnderscoreLifetime),\n-            self.parent_scope.expansion.to_expn_id(),\n-            ident.span,\n-        );\n-        debug!(?def_id);\n \n-        let res = LifetimeRes::Fresh { param: def_id, binder: item_node_id };\n-        self.r.extra_lifetime_params_map.entry(item_node_id).or_insert_with(Vec::new).push((\n-            ident,\n-            def_node_id,\n-            res,\n-        ));\n+        // Leave the responsibility to create the `LocalDefId` to lowering.\n+        let param = self.r.next_node_id();\n+        let res = LifetimeRes::Fresh { param, binder };\n+\n+        // Record the created lifetime parameter so lowering can pick it up and add it to HIR.\n+        self.r\n+            .extra_lifetime_params_map\n+            .entry(binder)\n+            .or_insert_with(Vec::new)\n+            .push((ident, param, res));\n         res\n     }\n "}]}