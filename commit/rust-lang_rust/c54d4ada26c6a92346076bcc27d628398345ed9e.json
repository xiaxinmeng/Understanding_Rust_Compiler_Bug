{"sha": "c54d4ada26c6a92346076bcc27d628398345ed9e", "node_id": "C_kwDOAAsO6NoAKGM1NGQ0YWRhMjZjNmE5MjM0NjA3NmJjYzI3ZDYyODM5ODM0NWVkOWU", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-07-16T19:09:20Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-07-16T19:09:20Z"}, "message": "avoid some `Symbol` to `String` conversions", "tree": {"sha": "4bcd11a6083b09b5ebc410b77898a27f0290466b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bcd11a6083b09b5ebc410b77898a27f0290466b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c54d4ada26c6a92346076bcc27d628398345ed9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c54d4ada26c6a92346076bcc27d628398345ed9e", "html_url": "https://github.com/rust-lang/rust/commit/c54d4ada26c6a92346076bcc27d628398345ed9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c54d4ada26c6a92346076bcc27d628398345ed9e/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95e77648e466c780a9adce2fa3d3eb5e423dc04e", "url": "https://api.github.com/repos/rust-lang/rust/commits/95e77648e466c780a9adce2fa3d3eb5e423dc04e", "html_url": "https://github.com/rust-lang/rust/commit/95e77648e466c780a9adce2fa3d3eb5e423dc04e"}], "stats": {"total": 109, "additions": 50, "deletions": 59}, "files": [{"sha": "146f86e5a1149477bf4945765e21afd9cad86425", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=c54d4ada26c6a92346076bcc27d628398345ed9e", "patch": "@@ -23,7 +23,7 @@ use rustc_middle::ty::{\n use rustc_mir_dataflow::move_paths::{InitKind, MoveOutIndex, MovePathIndex};\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::symbol::sym;\n-use rustc_span::{BytePos, Span};\n+use rustc_span::{BytePos, Span, Symbol};\n use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits::TraitEngineExt as _;\n \n@@ -1227,8 +1227,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     from_closure: false,\n                     region_name:\n                         RegionName {\n-                            source:\n-                                RegionNameSource::AnonRegionFromUpvar(upvar_span, ref upvar_name),\n+                            source: RegionNameSource::AnonRegionFromUpvar(upvar_span, upvar_name),\n                             ..\n                         },\n                     span,\n@@ -1702,7 +1701,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         borrow_span: Span,\n         name: &Option<String>,\n         upvar_span: Span,\n-        upvar_name: &str,\n+        upvar_name: Symbol,\n         escape_span: Span,\n     ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         let tcx = self.infcx.tcx;"}, {"sha": "72aee0267ac1e14f4bb125f53a96f34d664786cb", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=c54d4ada26c6a92346076bcc27d628398345ed9e", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::{self, RegionVid, TyCtxt};\n-use rustc_span::symbol::Symbol;\n+use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{sym, DesugaringKind, Span};\n \n use crate::region_infer::BlameConstraint;\n@@ -282,7 +282,7 @@ impl<'tcx> BorrowExplanation<'tcx> {\n     ) {\n         if let ConstraintCategory::OpaqueType = category {\n             let suggestable_name =\n-                if region_name.was_named() { region_name.to_string() } else { \"'_\".to_string() };\n+                if region_name.was_named() { region_name.name } else { kw::UnderscoreLifetime };\n \n             let msg = format!(\n                 \"you can add a bound to the {}to make it last less than `'static` and match `{}`\","}, {"sha": "7b2f771288fff43f9489142eb8b9145e83a38a09", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=c54d4ada26c6a92346076bcc27d628398345ed9e", "patch": "@@ -19,8 +19,7 @@ use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::Region;\n use rustc_middle::ty::TypeVisitor;\n use rustc_middle::ty::{self, RegionVid, Ty};\n-use rustc_span::symbol::sym;\n-use rustc_span::symbol::Ident;\n+use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Span;\n \n use crate::borrowck_errors;\n@@ -758,7 +757,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 return;\n             };\n \n-            let lifetime = if f.has_name() { fr_name.to_string() } else { \"'_\".to_string() };\n+            let lifetime = if f.has_name() { fr_name.name } else { kw::UnderscoreLifetime };\n \n             let arg = match param.param.pat.simple_ident() {\n                 Some(simple_ident) => format!(\"argument `{}`\", simple_ident),\n@@ -770,7 +769,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 self.infcx.tcx,\n                 diag,\n                 fn_returns,\n-                lifetime,\n+                lifetime.to_string(),\n                 Some(arg),\n                 captures,\n                 Some((param.param_ty_span, param.param_ty.to_string())),"}, {"sha": "49f8218b222fbca5c82fe679b4cc3ffe67d16b15", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=c54d4ada26c6a92346076bcc27d628398345ed9e", "patch": "@@ -34,13 +34,13 @@ pub(crate) enum RegionNameSource {\n     /// The `'static` region.\n     Static,\n     /// The free region corresponding to the environment of a closure.\n-    SynthesizedFreeEnvRegion(Span, String),\n+    SynthesizedFreeEnvRegion(Span, &'static str),\n     /// The region corresponding to an argument.\n     AnonRegionFromArgument(RegionNameHighlight),\n     /// The region corresponding to a closure upvar.\n-    AnonRegionFromUpvar(Span, String),\n+    AnonRegionFromUpvar(Span, Symbol),\n     /// The region corresponding to the return type of a closure.\n-    AnonRegionFromOutput(RegionNameHighlight, String),\n+    AnonRegionFromOutput(RegionNameHighlight, &'static str),\n     /// The region from a type yielded by a generator.\n     AnonRegionFromYieldTy(Span, String),\n     /// An anonymous region from an async fn.\n@@ -110,7 +110,7 @@ impl RegionName {\n             }\n             RegionNameSource::SynthesizedFreeEnvRegion(span, note) => {\n                 diag.span_label(*span, format!(\"lifetime `{self}` represents this closure's body\"));\n-                diag.note(note);\n+                diag.note(*note);\n             }\n             RegionNameSource::AnonRegionFromArgument(RegionNameHighlight::CannotMatchHirTy(\n                 span,\n@@ -350,10 +350,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n \n                     Some(RegionName {\n                         name: region_name,\n-                        source: RegionNameSource::SynthesizedFreeEnvRegion(\n-                            fn_decl_span,\n-                            note.to_string(),\n-                        ),\n+                        source: RegionNameSource::SynthesizedFreeEnvRegion(fn_decl_span, note),\n                     })\n                 }\n \n@@ -678,7 +675,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n \n         Some(RegionName {\n             name: region_name,\n-            source: RegionNameSource::AnonRegionFromUpvar(upvar_span, upvar_name.to_string()),\n+            source: RegionNameSource::AnonRegionFromUpvar(upvar_span, upvar_name),\n         })\n     }\n \n@@ -756,7 +753,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n \n         Some(RegionName {\n             name: self.synthesize_region_name(),\n-            source: RegionNameSource::AnonRegionFromOutput(highlight, mir_description.to_string()),\n+            source: RegionNameSource::AnonRegionFromOutput(highlight, mir_description),\n         })\n     }\n "}, {"sha": "449aaac2c7bf04ee21ef78382045a9f24bf2454a", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=c54d4ada26c6a92346076bcc27d628398345ed9e", "patch": "@@ -496,7 +496,7 @@ impl Diagnostic {\n         self\n     }\n \n-    pub fn note_trait_signature(&mut self, name: String, signature: String) -> &mut Self {\n+    pub fn note_trait_signature(&mut self, name: Symbol, signature: String) -> &mut Self {\n         self.highlighted_note(vec![\n             (format!(\"`{}` from trait: `\", name), Style::NoStyle),\n             (signature, Style::Highlight),"}, {"sha": "0315d11634c6b6b16afa213008c1c8e84ea4e30d", "filename": "compiler/rustc_expand/src/module.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs?ref=c54d4ada26c6a92346076bcc27d628398345ed9e", "patch": "@@ -218,10 +218,9 @@ pub fn default_submod_path<'a>(\n         \"\"\n     };\n \n-    let mod_name = ident.name.to_string();\n-    let default_path_str = format!(\"{}{}.rs\", relative_prefix, mod_name);\n+    let default_path_str = format!(\"{}{}.rs\", relative_prefix, ident.name);\n     let secondary_path_str =\n-        format!(\"{}{}{}mod.rs\", relative_prefix, mod_name, path::MAIN_SEPARATOR);\n+        format!(\"{}{}{}mod.rs\", relative_prefix, ident.name, path::MAIN_SEPARATOR);\n     let default_path = dir_path.join(&default_path_str);\n     let secondary_path = dir_path.join(&secondary_path_str);\n     let default_exists = sess.source_map().file_exists(&default_path);"}, {"sha": "a8e71673c2171d0b8a5f41796470448f22427071", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=c54d4ada26c6a92346076bcc27d628398345ed9e", "patch": "@@ -138,7 +138,7 @@ fn fmt_printer<'a, 'tcx>(infcx: &'a InferCtxt<'_, 'tcx>, ns: Namespace) -> FmtPr\n         if let TypeVariableOriginKind::TypeParameterDefinition(name, _) =\n             infcx.inner.borrow_mut().type_variables().var_origin(ty_vid).kind\n         {\n-            Some(name.to_string())\n+            Some(name)\n         } else {\n             None\n         }\n@@ -151,7 +151,7 @@ fn fmt_printer<'a, 'tcx>(infcx: &'a InferCtxt<'_, 'tcx>, ns: Namespace) -> FmtPr\n         if let ConstVariableOriginKind::ConstParameterDefinition(name, _) =\n             infcx.inner.borrow_mut().const_unification_table().probe_value(ct_vid).origin.kind\n         {\n-            return Some(name.to_string());\n+            return Some(name);\n         } else {\n             None\n         }"}, {"sha": "a009f143198b361620e629ccba7541c643d711ba", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=c54d4ada26c6a92346076bcc27d628398345ed9e", "patch": "@@ -1958,7 +1958,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                         min_size = field_end;\n                     }\n                     FieldInfo {\n-                        name: name.to_string(),\n+                        name,\n                         offset: offset.bytes(),\n                         size: field_layout.size.bytes(),\n                         align: field_layout.align.abi.bytes(),\n@@ -1967,7 +1967,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 .collect();\n \n             VariantInfo {\n-                name: n.map(|n| n.to_string()),\n+                name: n,\n                 kind: if layout.is_unsized() { SizeKind::Min } else { SizeKind::Exact },\n                 align: layout.align.abi.bytes(),\n                 size: if min_size.bytes() == 0 { layout.size.bytes() } else { min_size.bytes() },"}, {"sha": "14eb7c89b74df7e9e739dea969def5c70078a087", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=c54d4ada26c6a92346076bcc27d628398345ed9e", "patch": "@@ -1030,11 +1030,11 @@ pub trait PrettyPrinter<'tcx>:\n         }\n     }\n \n-    fn ty_infer_name(&self, _: ty::TyVid) -> Option<String> {\n+    fn ty_infer_name(&self, _: ty::TyVid) -> Option<Symbol> {\n         None\n     }\n \n-    fn const_infer_name(&self, _: ty::ConstVid<'tcx>) -> Option<String> {\n+    fn const_infer_name(&self, _: ty::ConstVid<'tcx>) -> Option<Symbol> {\n         None\n     }\n \n@@ -1550,8 +1550,8 @@ pub struct FmtPrinterData<'a, 'tcx> {\n \n     pub region_highlight_mode: RegionHighlightMode<'tcx>,\n \n-    pub ty_infer_name_resolver: Option<Box<dyn Fn(ty::TyVid) -> Option<String> + 'a>>,\n-    pub const_infer_name_resolver: Option<Box<dyn Fn(ty::ConstVid<'tcx>) -> Option<String> + 'a>>,\n+    pub ty_infer_name_resolver: Option<Box<dyn Fn(ty::TyVid) -> Option<Symbol> + 'a>>,\n+    pub const_infer_name_resolver: Option<Box<dyn Fn(ty::ConstVid<'tcx>) -> Option<Symbol> + 'a>>,\n }\n \n impl<'a, 'tcx> Deref for FmtPrinter<'a, 'tcx> {\n@@ -1841,11 +1841,11 @@ impl<'tcx> Printer<'tcx> for FmtPrinter<'_, 'tcx> {\n }\n \n impl<'tcx> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx> {\n-    fn ty_infer_name(&self, id: ty::TyVid) -> Option<String> {\n+    fn ty_infer_name(&self, id: ty::TyVid) -> Option<Symbol> {\n         self.0.ty_infer_name_resolver.as_ref().and_then(|func| func(id))\n     }\n \n-    fn const_infer_name(&self, id: ty::ConstVid<'tcx>) -> Option<String> {\n+    fn const_infer_name(&self, id: ty::ConstVid<'tcx>) -> Option<Symbol> {\n         self.0.const_infer_name_resolver.as_ref().and_then(|func| func(id))\n     }\n "}, {"sha": "eede4d16ea378b268a91e6d8e8f50c09ac1026d8", "filename": "compiler/rustc_session/src/code_stats.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs?ref=c54d4ada26c6a92346076bcc27d628398345ed9e", "patch": "@@ -1,11 +1,12 @@\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lock;\n+use rustc_span::Symbol;\n use rustc_target::abi::{Align, Size};\n use std::cmp::{self, Ordering};\n \n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub struct VariantInfo {\n-    pub name: Option<String>,\n+    pub name: Option<Symbol>,\n     pub kind: SizeKind,\n     pub size: u64,\n     pub align: u64,\n@@ -20,7 +21,7 @@ pub enum SizeKind {\n \n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub struct FieldInfo {\n-    pub name: String,\n+    pub name: Symbol,\n     pub offset: u64,\n     pub size: u64,\n     pub align: u64,\n@@ -119,7 +120,7 @@ impl CodeStats {\n                 let VariantInfo { ref name, kind: _, align: _, size, ref fields } = *variant_info;\n                 let indent = if !struct_like {\n                     let name = match name.as_ref() {\n-                        Some(name) => name.to_owned(),\n+                        Some(name) => name.to_string(),\n                         None => i.to_string(),\n                     };\n                     println!("}, {"sha": "a2ade1d273194f942f041b190b372e471c6c72ff", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=c54d4ada26c6a92346076bcc27d628398345ed9e", "patch": "@@ -2489,7 +2489,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                         concrete type's name `{type_name}` instead if you want to \\\n                                         specify its type parameters\"\n                                     ),\n-                                    type_name.to_string(),\n+                                    type_name,\n                                     Applicability::MaybeIncorrect,\n                                 );\n                             }"}, {"sha": "940163a299840cfd9ee2b47a9c4c66dfb286d996", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=c54d4ada26c6a92346076bcc27d628398345ed9e", "patch": "@@ -546,7 +546,7 @@ fn compare_self_type<'tcx>(\n             if let Some(span) = tcx.hir().span_if_local(trait_m.def_id) {\n                 err.span_label(span, format!(\"trait method declared without `{self_descr}`\"));\n             } else {\n-                err.note_trait_signature(trait_m.name.to_string(), trait_m.signature(tcx));\n+                err.note_trait_signature(trait_m.name, trait_m.signature(tcx));\n             }\n             let reported = err.emit();\n             return Err(reported);\n@@ -566,7 +566,7 @@ fn compare_self_type<'tcx>(\n             if let Some(span) = tcx.hir().span_if_local(trait_m.def_id) {\n                 err.span_label(span, format!(\"`{self_descr}` used in trait\"));\n             } else {\n-                err.note_trait_signature(trait_m.name.to_string(), trait_m.signature(tcx));\n+                err.note_trait_signature(trait_m.name, trait_m.signature(tcx));\n             }\n             let reported = err.emit();\n             return Err(reported);\n@@ -805,7 +805,7 @@ fn compare_number_of_method_arguments<'tcx>(\n                 ),\n             );\n         } else {\n-            err.note_trait_signature(trait_m.name.to_string(), trait_m.signature(tcx));\n+            err.note_trait_signature(trait_m.name, trait_m.signature(tcx));\n         }\n         err.span_label(\n             impl_span,"}, {"sha": "6dccb4ae8d648af858e27b56bc6c74662817d94e", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=c54d4ada26c6a92346076bcc27d628398345ed9e", "patch": "@@ -1873,7 +1873,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let remaining_private_fields_len = remaining_private_fields.len();\n             let names = match &remaining_private_fields\n                 .iter()\n-                .map(|(name, _, _)| name.to_string())\n+                .map(|(name, _, _)| name)\n                 .collect::<Vec<_>>()[..]\n             {\n                 _ if remaining_private_fields_len > 6 => String::new(),"}, {"sha": "7f96e421a9ae366cbec4ebdbb0ec11c7c029a173", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=c54d4ada26c6a92346076bcc27d628398345ed9e", "patch": "@@ -19,6 +19,7 @@ use rustc_middle::ty::print::with_crate_prefix;\n use rustc_middle::ty::ToPolyTraitRef;\n use rustc_middle::ty::{self, DefIdTree, ToPredicate, Ty, TyCtxt, TypeVisitable};\n use rustc_span::symbol::{kw, sym, Ident};\n+use rustc_span::Symbol;\n use rustc_span::{lev_distance, source_map, ExpnKind, FileName, MacroKind, Span};\n use rustc_trait_selection::traits::error_reporting::on_unimplemented::InferCtxtExt as _;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt as _;\n@@ -1548,7 +1549,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             Option<ObligationCause<'tcx>>,\n         )],\n     ) {\n-        let mut derives = Vec::<(String, Span, String)>::new();\n+        let mut derives = Vec::<(String, Span, Symbol)>::new();\n         let mut traits = Vec::<Span>::new();\n         for (pred, _, _) in unsatisfied_predicates {\n             let ty::PredicateKind::Trait(trait_pred) = pred.kind().skip_binder() else { continue };\n@@ -1581,12 +1582,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 derives.push((\n                                     self_name.clone(),\n                                     self_span,\n-                                    parent_diagnostic_name.to_string(),\n+                                    parent_diagnostic_name,\n                                 ));\n                             }\n                         }\n                     }\n-                    derives.push((self_name, self_span, diagnostic_name.to_string()));\n+                    derives.push((self_name, self_span, diagnostic_name));\n                 } else {\n                     traits.push(self.tcx.def_span(trait_pred.def_id()));\n                 }\n@@ -1609,7 +1610,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     continue;\n                 }\n             }\n-            derives_grouped.push((self_name, self_span, trait_name));\n+            derives_grouped.push((self_name, self_span, trait_name.to_string()));\n         }\n \n         let len = traits.len();"}, {"sha": "8c26c96816d9bbab16dec6c22ad260a88bacb360", "filename": "compiler/rustc_typeck/src/impl_wf_check.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54d4ada26c6a92346076bcc27d628398345ed9e/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs?ref=c54d4ada26c6a92346076bcc27d628398345ed9e", "patch": "@@ -17,7 +17,7 @@ use rustc_hir::def::DefKind;\n use rustc_hir::def_id::LocalDefId;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeVisitable};\n-use rustc_span::Span;\n+use rustc_span::{Span, Symbol};\n \n use std::collections::hash_map::Entry::{Occupied, Vacant};\n \n@@ -123,12 +123,7 @@ fn enforce_impl_params_are_constrained(tcx: TyCtxt<'_>, impl_def_id: LocalDefId)\n             ty::GenericParamDefKind::Type { .. } => {\n                 let param_ty = ty::ParamTy::for_def(param);\n                 if !input_parameters.contains(&cgp::Parameter::from(param_ty)) {\n-                    report_unused_parameter(\n-                        tcx,\n-                        tcx.def_span(param.def_id),\n-                        \"type\",\n-                        &param_ty.to_string(),\n-                    );\n+                    report_unused_parameter(tcx, tcx.def_span(param.def_id), \"type\", param_ty.name);\n                 }\n             }\n             ty::GenericParamDefKind::Lifetime => {\n@@ -140,7 +135,7 @@ fn enforce_impl_params_are_constrained(tcx: TyCtxt<'_>, impl_def_id: LocalDefId)\n                         tcx,\n                         tcx.def_span(param.def_id),\n                         \"lifetime\",\n-                        &param.name.to_string(),\n+                        param.name,\n                     );\n                 }\n             }\n@@ -151,7 +146,7 @@ fn enforce_impl_params_are_constrained(tcx: TyCtxt<'_>, impl_def_id: LocalDefId)\n                         tcx,\n                         tcx.def_span(param.def_id),\n                         \"const\",\n-                        &param_ct.to_string(),\n+                        param_ct.name,\n                     );\n                 }\n             }\n@@ -178,7 +173,7 @@ fn enforce_impl_params_are_constrained(tcx: TyCtxt<'_>, impl_def_id: LocalDefId)\n     // used elsewhere are not projected back out.\n }\n \n-fn report_unused_parameter(tcx: TyCtxt<'_>, span: Span, kind: &str, name: &str) {\n+fn report_unused_parameter(tcx: TyCtxt<'_>, span: Span, kind: &str, name: Symbol) {\n     let mut err = struct_span_err!(\n         tcx.sess,\n         span,"}, {"sha": "0aa085fc71bfe4b03c8faafd97f049e87274e640", "filename": "src/tools/clippy/clippy_lints/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c54d4ada26c6a92346076bcc27d628398345ed9e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54d4ada26c6a92346076bcc27d628398345ed9e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat.rs?ref=c54d4ada26c6a92346076bcc27d628398345ed9e", "patch": "@@ -82,7 +82,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessFormat {\n                 then {\n                     let is_new_string = match value.kind {\n                         ExprKind::Binary(..) => true,\n-                        ExprKind::MethodCall(path, ..) => path.ident.name.as_str() == \"to_string\",\n+                        ExprKind::MethodCall(path, ..) => path.ident.name == sym::to_string,\n                         _ => false,\n                     };\n                     let sugg = if format_args.format_string_span.contains(value.span) {"}, {"sha": "694f646c707cc2590e99ffd5bf16308e98aba06b", "filename": "src/tools/clippy/clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c54d4ada26c6a92346076bcc27d628398345ed9e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54d4ada26c6a92346076bcc27d628398345ed9e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_to_string.rs?ref=c54d4ada26c6a92346076bcc27d628398345ed9e", "patch": "@@ -98,7 +98,7 @@ impl<'tcx> LateLintPass<'tcx> for InherentToString {\n         if_chain! {\n             // Check if item is a method, called to_string and has a parameter 'self'\n             if let ImplItemKind::Fn(ref signature, _) = impl_item.kind;\n-            if impl_item.ident.name.as_str() == \"to_string\";\n+            if impl_item.ident.name == sym::to_string;\n             let decl = &signature.decl;\n             if decl.implicit_self.has_implicit_self();\n             if decl.inputs.len() == 1;"}, {"sha": "b3276f1394ed2f7bcb0f4bcd3ad5bea8322717ce", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c54d4ada26c6a92346076bcc27d628398345ed9e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54d4ada26c6a92346076bcc27d628398345ed9e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=c54d4ada26c6a92346076bcc27d628398345ed9e", "patch": "@@ -427,5 +427,5 @@ fn is_cow_into_owned(cx: &LateContext<'_>, method_name: Symbol, method_def_id: D\n \n /// Returns true if the named method is `ToString::to_string`.\n fn is_to_string(cx: &LateContext<'_>, method_name: Symbol, method_def_id: DefId) -> bool {\n-    method_name.as_str() == \"to_string\" && is_diag_trait_item(cx, method_def_id, sym::ToString)\n+    method_name == sym::to_string && is_diag_trait_item(cx, method_def_id, sym::ToString)\n }"}]}