{"sha": "4f659ed507761563748e1ee286adc2aea685923c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNjU5ZWQ1MDc3NjE1NjM3NDhlMWVlMjg2YWRjMmFlYTY4NTkyM2M=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-23T13:13:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-23T13:13:16Z"}, "message": "fix for infallible allocation", "tree": {"sha": "f8a88324aa6caf97dcb10f7c3ea812237722a3f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8a88324aa6caf97dcb10f7c3ea812237722a3f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f659ed507761563748e1ee286adc2aea685923c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f659ed507761563748e1ee286adc2aea685923c", "html_url": "https://github.com/rust-lang/rust/commit/4f659ed507761563748e1ee286adc2aea685923c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f659ed507761563748e1ee286adc2aea685923c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd12f95305c9193fa95c8089cb5b6eefaf375b81", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd12f95305c9193fa95c8089cb5b6eefaf375b81", "html_url": "https://github.com/rust-lang/rust/commit/fd12f95305c9193fa95c8089cb5b6eefaf375b81"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "0f5429518239978446750fc62448f6e263959da0", "filename": "src/fn_call.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f659ed507761563748e1ee286adc2aea685923c/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f659ed507761563748e1ee286adc2aea685923c/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=4f659ed507761563748e1ee286adc2aea685923c", "patch": "@@ -84,7 +84,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                     this.write_null(dest)?;\n                 } else {\n                     let align = this.tcx.data_layout.pointer_align.abi;\n-                    let ptr = this.memory_mut().allocate(Size::from_bytes(size), align, MiriMemoryKind::C.into())?;\n+                    let ptr = this.memory_mut().allocate(Size::from_bytes(size), align, MiriMemoryKind::C.into());\n                     this.write_scalar(Scalar::Ptr(ptr.with_default_tag()), dest)?;\n                 }\n             }\n@@ -114,7 +114,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                         Size::from_bytes(size),\n                         Align::from_bytes(align).unwrap(),\n                         MiriMemoryKind::Rust.into()\n-                    )?\n+                    )\n                     .with_default_tag();\n                 this.write_scalar(Scalar::Ptr(ptr), dest)?;\n             }\n@@ -132,7 +132,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                         Size::from_bytes(size),\n                         Align::from_bytes(align).unwrap(),\n                         MiriMemoryKind::Rust.into()\n-                    )?\n+                    )\n                     .with_default_tag();\n                 this.memory_mut()\n                     .get_mut(ptr.alloc_id)?\n@@ -358,7 +358,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                         Size::from_bytes((value.len() + 1) as u64),\n                         Align::from_bytes(1).unwrap(),\n                         MiriMemoryKind::Env.into(),\n-                    )?.with_default_tag();\n+                    ).with_default_tag();\n                     {\n                         let alloc = this.memory_mut().get_mut(value_copy.alloc_id)?;\n                         alloc.write_bytes(tcx, value_copy, &value)?;"}, {"sha": "7643f93fdc2cf63ad34c4a1a8064e02062e2a352", "filename": "src/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4f659ed507761563748e1ee286adc2aea685923c/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f659ed507761563748e1ee286adc2aea685923c/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=4f659ed507761563748e1ee286adc2aea685923c", "patch": "@@ -101,7 +101,7 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n \n     // Return value (in static memory so that it does not count as leak)\n     let ret = ecx.layout_of(start_mir.return_ty())?;\n-    let ret_ptr = ecx.allocate(ret, MiriMemoryKind::MutStatic.into())?;\n+    let ret_ptr = ecx.allocate(ret, MiriMemoryKind::MutStatic.into());\n \n     // Push our stack frame\n     ecx.push_stack_frame(\n@@ -125,7 +125,7 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n     ecx.write_scalar(argc, dest)?;\n     // Store argc for macOS _NSGetArgc\n     {\n-        let argc_place = ecx.allocate(dest.layout, MiriMemoryKind::Env.into())?;\n+        let argc_place = ecx.allocate(dest.layout, MiriMemoryKind::Env.into());\n         ecx.write_scalar(argc, argc_place.into())?;\n         ecx.machine.argc = Some(argc_place.ptr.to_ptr()?);\n     }\n@@ -136,14 +136,14 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n     let dest = ecx.eval_place(&mir::Place::Local(args.next().unwrap()))?;\n     let cmd = ecx.memory_mut().allocate_static_bytes(CMD.as_bytes()).with_default_tag();\n     let raw_str_layout = ecx.layout_of(ecx.tcx.mk_imm_ptr(ecx.tcx.types.u8))?;\n-    let cmd_place = ecx.allocate(raw_str_layout, MiriMemoryKind::Env.into())?;\n+    let cmd_place = ecx.allocate(raw_str_layout, MiriMemoryKind::Env.into());\n     ecx.write_scalar(Scalar::Ptr(cmd), cmd_place.into())?;\n     ecx.memory_mut().mark_immutable(cmd_place.to_ptr()?.alloc_id)?;\n     // Store argv for macOS _NSGetArgv\n     {\n         let argv = cmd_place.ptr;\n         ecx.write_scalar(argv, dest)?;\n-        let argv_place = ecx.allocate(dest.layout, MiriMemoryKind::Env.into())?;\n+        let argv_place = ecx.allocate(dest.layout, MiriMemoryKind::Env.into());\n         ecx.write_scalar(argv, argv_place.into())?;\n         ecx.machine.argv = Some(argv_place.ptr.to_ptr()?);\n     }\n@@ -155,7 +155,7 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n             Size::from_bytes(cmd_utf16.len() as u64 * 2),\n             Align::from_bytes(2).unwrap(),\n             MiriMemoryKind::Env.into(),\n-        )?.with_default_tag();\n+        ).with_default_tag();\n         ecx.machine.cmd_line = Some(cmd_ptr);\n         // store the UTF-16 string\n         let char_size = Size::from_bytes(2);\n@@ -516,13 +516,13 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n         ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n         ptr: Pointer,\n         kind: MemoryKind<Self::MemoryKinds>,\n-    ) -> EvalResult<'tcx, Pointer<Borrow>> {\n+    ) -> Pointer<Borrow> {\n         if !ecx.machine.validate {\n             // No tracking\n-            Ok(ptr.with_default_tag())\n+            ptr.with_default_tag()\n         } else {\n             let tag = ecx.tag_new_allocation(ptr.alloc_id, kind);\n-            Ok(Pointer::new_with_tag(ptr.alloc_id, ptr.offset, tag))\n+            Pointer::new_with_tag(ptr.alloc_id, ptr.offset, tag)\n         }\n     }\n "}]}