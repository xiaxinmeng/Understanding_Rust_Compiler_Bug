{"sha": "8c506f9dae5664fb04bf070f1422df5308d90cb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNTA2ZjlkYWU1NjY0ZmIwNGJmMDcwZjE0MjJkZjUzMDhkOTBjYjY=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-02-09T20:40:23Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-02-11T00:37:42Z"}, "message": "Implement excluding a build-step via --exclude", "tree": {"sha": "8942bf1fac17f51e19219856d3b9486328717937", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8942bf1fac17f51e19219856d3b9486328717937"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c506f9dae5664fb04bf070f1422df5308d90cb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c506f9dae5664fb04bf070f1422df5308d90cb6", "html_url": "https://github.com/rust-lang/rust/commit/8c506f9dae5664fb04bf070f1422df5308d90cb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c506f9dae5664fb04bf070f1422df5308d90cb6/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45fba43b3d5b4d1944268cf973099bfacb11bf4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/45fba43b3d5b4d1944268cf973099bfacb11bf4c", "html_url": "https://github.com/rust-lang/rust/commit/45fba43b3d5b4d1944268cf973099bfacb11bf4c"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "b65c20e398e8ce21006891249a11df968546d99e", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8c506f9dae5664fb04bf070f1422df5308d90cb6/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c506f9dae5664fb04bf070f1422df5308d90cb6/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=8c506f9dae5664fb04bf070f1422df5308d90cb6", "patch": "@@ -119,7 +119,28 @@ impl StepDescription {\n         }\n     }\n \n-    fn maybe_run(&self, builder: &Builder, path: Option<&Path>) {\n+    fn maybe_run(&self, builder: &Builder, should_run: &ShouldRun, path: Option<&Path>) {\n+        if let Some(path) = path {\n+            if builder.config.exclude.iter().any(|e| e == path) {\n+                eprintln!(\"Skipping {:?} because this path is excluded\", path);\n+                return;\n+            } else if !builder.config.exclude.is_empty() {\n+                eprintln!(\"{:?} not skipped -- not in {:?}\", path, builder.config.exclude);\n+            }\n+        } else {\n+            if !should_run.paths.is_empty() {\n+                if should_run.paths.iter().all(|p| builder.config.exclude.contains(&p)) {\n+                    eprintln!(\"Skipping because all of its paths ({:?}) are excluded\",\n+                        should_run.paths);\n+                    return;\n+                } else if should_run.paths.len() > 1 {\n+                    for path in &should_run.paths {\n+                        self.maybe_run(builder, should_run, Some(path));\n+                    }\n+                    return;\n+                }\n+            }\n+        }\n         let build = builder.build;\n         let hosts = if self.only_build_targets || self.only_build {\n             build.build_triple()\n@@ -160,7 +181,7 @@ impl StepDescription {\n         if paths.is_empty() {\n             for (desc, should_run) in v.iter().zip(should_runs) {\n                 if desc.default && should_run.is_really_default {\n-                    desc.maybe_run(builder, None);\n+                    desc.maybe_run(builder, &should_run, None);\n                 }\n             }\n         } else {\n@@ -169,7 +190,7 @@ impl StepDescription {\n                 for (desc, should_run) in v.iter().zip(&should_runs) {\n                     if should_run.run(path) {\n                         attempted_run = true;\n-                        desc.maybe_run(builder, Some(path));\n+                        desc.maybe_run(builder, &should_run, Some(path));\n                     }\n                 }\n \n@@ -208,13 +229,13 @@ impl<'a> ShouldRun<'a> {\n \n     pub fn krate(mut self, name: &str) -> Self {\n         for (_, krate_path) in self.builder.crates(name) {\n-            self.paths.insert(PathBuf::from(krate_path));\n+            self.paths.insert(t!(env::current_dir()).join(krate_path));\n         }\n         self\n     }\n \n     pub fn path(mut self, path: &str) -> Self {\n-        self.paths.insert(PathBuf::from(path));\n+        self.paths.insert(t!(env::current_dir()).join(path));\n         self\n     }\n "}, {"sha": "812ca6d64fb6a792545749b84857175a6c36db92", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c506f9dae5664fb04bf070f1422df5308d90cb6/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c506f9dae5664fb04bf070f1422df5308d90cb6/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=8c506f9dae5664fb04bf070f1422df5308d90cb6", "patch": "@@ -56,6 +56,7 @@ pub struct Config {\n     pub sanitizers: bool,\n     pub profiler: bool,\n     pub ignore_git: bool,\n+    pub exclude: Vec<PathBuf>,\n \n     pub run_host_only: bool,\n \n@@ -311,6 +312,7 @@ impl Config {\n         let flags = Flags::parse(&args);\n         let file = flags.config.clone();\n         let mut config = Config::default();\n+        config.exclude = flags.exclude;\n         config.llvm_enabled = true;\n         config.llvm_optimize = true;\n         config.llvm_version_check = true;"}, {"sha": "465ebf846d3dd7bb4c6b8defbb5e6dd1e45051c4", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8c506f9dae5664fb04bf070f1422df5308d90cb6/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c506f9dae5664fb04bf070f1422df5308d90cb6/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=8c506f9dae5664fb04bf070f1422df5308d90cb6", "patch": "@@ -42,6 +42,7 @@ pub struct Flags {\n     pub jobs: Option<u32>,\n     pub cmd: Subcommand,\n     pub incremental: bool,\n+    pub exclude: Vec<PathBuf>,\n }\n \n pub enum Subcommand {\n@@ -109,6 +110,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\");\n         opts.optopt(\"\", \"build\", \"build target of the stage0 compiler\", \"BUILD\");\n         opts.optmulti(\"\", \"host\", \"host targets to build\", \"HOST\");\n         opts.optmulti(\"\", \"target\", \"target targets to build\", \"TARGET\");\n+        opts.optmulti(\"\", \"exclude\", \"build paths to exclude\", \"PATH\");\n         opts.optopt(\"\", \"on-fail\", \"command to run on failure\", \"CMD\");\n         opts.optopt(\"\", \"stage\", \"stage to build\", \"N\");\n         opts.optopt(\"\", \"keep-stage\", \"stage to keep without recompiling\", \"N\");\n@@ -358,10 +360,9 @@ Arguments:\n             stage = Some(1);\n         }\n \n-        let cwd = t!(env::current_dir());\n         let src = matches.opt_str(\"src\").map(PathBuf::from)\n             .or_else(|| env::var_os(\"SRC\").map(PathBuf::from))\n-            .unwrap_or(cwd);\n+            .unwrap_or(cwd.clone());\n \n         Flags {\n             verbose: matches.opt_count(\"verbose\"),\n@@ -378,6 +379,8 @@ Arguments:\n             jobs: matches.opt_str(\"jobs\").map(|j| j.parse().unwrap()),\n             cmd,\n             incremental: matches.opt_present(\"incremental\"),\n+            exclude: split(matches.opt_strs(\"exclude\"))\n+                .into_iter().map(|p| cwd.join(p)).collect::<Vec<_>>(),\n         }\n     }\n }"}]}