{"sha": "6e07b17f692a1639e94687aadfcfea567236bf04", "node_id": "C_kwDOAAsO6NoAKDZlMDdiMTdmNjkyYTE2MzllOTQ2ODdhYWRmY2ZlYTU2NzIzNmJmMDQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-17T08:45:19Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-17T08:45:19Z"}, "message": "Introduce NameRefKind for completions", "tree": {"sha": "e8f761f612eb532dd549881e148c86466588452f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8f761f612eb532dd549881e148c86466588452f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e07b17f692a1639e94687aadfcfea567236bf04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e07b17f692a1639e94687aadfcfea567236bf04", "html_url": "https://github.com/rust-lang/rust/commit/6e07b17f692a1639e94687aadfcfea567236bf04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e07b17f692a1639e94687aadfcfea567236bf04/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7322a982f99e41cc2a025d1ae3b11a5acd4a771e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7322a982f99e41cc2a025d1ae3b11a5acd4a771e", "html_url": "https://github.com/rust-lang/rust/commit/7322a982f99e41cc2a025d1ae3b11a5acd4a771e"}], "stats": {"total": 229, "additions": 134, "deletions": 95}, "files": [{"sha": "ade57bed958ec06745eb01bd3130fcd1242d00d3", "filename": "crates/ide-completion/src/completions/dot.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e07b17f692a1639e94687aadfcfea567236bf04/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e07b17f692a1639e94687aadfcfea567236bf04/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=6e07b17f692a1639e94687aadfcfea567236bf04", "patch": "@@ -4,7 +4,8 @@ use ide_db::FxHashSet;\n \n use crate::{\n     context::{\n-        CompletionContext, DotAccess, DotAccessKind, NameRefContext, PathCompletionCtx, PathKind,\n+        CompletionContext, DotAccess, DotAccessKind, NameRefContext, NameRefKind,\n+        PathCompletionCtx, PathKind,\n     },\n     CompletionItem, CompletionItemKind, Completions,\n };\n@@ -13,7 +14,8 @@ use crate::{\n pub(crate) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n     let (dot_access, receiver_ty) = match ctx.nameref_ctx() {\n         Some(NameRefContext {\n-            dot_access: Some(access @ DotAccess { receiver_ty: Some(receiver_ty), .. }),\n+            kind:\n+                Some(NameRefKind::DotAccess(access @ DotAccess { receiver_ty: Some(receiver_ty), .. })),\n             ..\n         }) => (access, &receiver_ty.original),\n         _ => return complete_undotted_self(acc, ctx),"}, {"sha": "3d92a0cceffe4afd2aa7080f9f6287ddd530a7f7", "filename": "crates/ide-completion/src/completions/expr.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6e07b17f692a1639e94687aadfcfea567236bf04/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e07b17f692a1639e94687aadfcfea567236bf04/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs?ref=6e07b17f692a1639e94687aadfcfea567236bf04", "patch": "@@ -5,7 +5,7 @@ use ide_db::FxHashSet;\n use syntax::T;\n \n use crate::{\n-    context::{NameRefContext, PathCompletionCtx, PathKind, PathQualifierCtx},\n+    context::{NameRefContext, NameRefKind, PathCompletionCtx, PathKind, PathQualifierCtx},\n     CompletionContext, Completions,\n };\n \n@@ -21,24 +21,29 @@ pub(crate) fn complete_expr_path(acc: &mut Completions, ctx: &CompletionContext)\n         after_if_expr,\n         wants_mut_token,\n     ) = match ctx.nameref_ctx() {\n-        Some(NameRefContext {\n-            path_ctx:\n-                Some(PathCompletionCtx {\n+        Some(&NameRefContext {\n+            kind:\n+                Some(NameRefKind::Path(PathCompletionCtx {\n                     kind:\n-                        PathKind::Expr { in_block_expr, in_loop_body, after_if_expr, ref_expr_parent },\n+                        PathKind::Expr {\n+                            in_block_expr,\n+                            in_loop_body,\n+                            after_if_expr,\n+                            ref ref_expr_parent,\n+                            ref is_func_update,\n+                        },\n                     is_absolute_path,\n-                    qualifier,\n+                    ref qualifier,\n                     ..\n-                }),\n-            record_expr,\n+                })),\n             ..\n         }) if ctx.qualifier_ctx.none() => (\n-            *is_absolute_path,\n+            is_absolute_path,\n             qualifier,\n-            *in_block_expr,\n-            *in_loop_body,\n-            record_expr.as_ref().map_or(false, |&(_, it)| it),\n-            *after_if_expr,\n+            in_block_expr,\n+            in_loop_body,\n+            is_func_update.is_some(),\n+            after_if_expr,\n             ref_expr_parent.as_ref().map(|it| it.mut_token().is_none()).unwrap_or(false),\n         ),\n         _ => return,"}, {"sha": "bddfc1de1af35f91918816b77aa50a839c57f184", "filename": "crates/ide-completion/src/completions/field.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6e07b17f692a1639e94687aadfcfea567236bf04/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e07b17f692a1639e94687aadfcfea567236bf04/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs?ref=6e07b17f692a1639e94687aadfcfea567236bf04", "patch": "@@ -1,24 +1,27 @@\n //! Completion of field list position.\n \n use crate::{\n-    context::{IdentContext, NameContext, NameKind, NameRefContext, PathCompletionCtx, PathKind},\n+    context::{\n+        IdentContext, NameContext, NameKind, NameRefContext, NameRefKind, PathCompletionCtx,\n+        PathKind,\n+    },\n     CompletionContext, Completions,\n };\n \n pub(crate) fn complete_field_list(acc: &mut Completions, ctx: &CompletionContext) {\n     match &ctx.ident_ctx {\n         IdentContext::Name(NameContext { kind: NameKind::RecordField, .. })\n         | IdentContext::NameRef(NameRefContext {\n-            path_ctx:\n-                Some(PathCompletionCtx {\n+            kind:\n+                Some(NameRefKind::Path(PathCompletionCtx {\n                     has_macro_bang: false,\n                     is_absolute_path: false,\n                     qualifier: None,\n                     parent: None,\n                     kind: PathKind::Type { in_tuple_struct: true },\n                     has_type_args: false,\n                     ..\n-                }),\n+                })),\n             ..\n         }) => {\n             if ctx.qualifier_ctx.vis_node.is_none() {"}, {"sha": "b724f3cc51e20ccc4914e48fb6d31b3aedcf4165", "filename": "crates/ide-completion/src/completions/flyimport.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6e07b17f692a1639e94687aadfcfea567236bf04/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e07b17f692a1639e94687aadfcfea567236bf04/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=6e07b17f692a1639e94687aadfcfea567236bf04", "patch": "@@ -8,7 +8,9 @@ use itertools::Itertools;\n use syntax::{AstNode, SyntaxNode, T};\n \n use crate::{\n-    context::{CompletionContext, NameRefContext, PathCompletionCtx, PathKind, PatternContext},\n+    context::{\n+        CompletionContext, NameRefContext, NameRefKind, PathCompletionCtx, PathKind, PatternContext,\n+    },\n     patterns::ImmediateLocation,\n     render::{render_resolution_with_import, RenderContext},\n };\n@@ -110,20 +112,21 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n     if !ctx.config.enable_imports_on_the_fly {\n         return None;\n     }\n-    let path_kind = match ctx.nameref_ctx() {\n-        Some(NameRefContext { path_ctx: Some(PathCompletionCtx { kind, .. }), .. })\n-            if matches!(\n-                kind,\n-                PathKind::Expr { .. }\n-                    | PathKind::Type { .. }\n-                    | PathKind::Attr { .. }\n-                    | PathKind::Derive\n-                    | PathKind::Pat\n-            ) =>\n-        {\n-            Some(kind)\n-        }\n-        Some(NameRefContext { dot_access: Some(_), .. }) => None,\n+    let path_kind = match dbg!(ctx.nameref_ctx()) {\n+        Some(NameRefContext {\n+            kind:\n+                Some(NameRefKind::Path(PathCompletionCtx {\n+                    kind:\n+                        kind @ (PathKind::Expr { .. }\n+                        | PathKind::Type { .. }\n+                        | PathKind::Attr { .. }\n+                        | PathKind::Derive\n+                        | PathKind::Pat),\n+                    ..\n+                })),\n+            ..\n+        }) => Some(kind),\n+        Some(NameRefContext { kind: Some(NameRefKind::DotAccess(_)), .. }) => None,\n         None if matches!(ctx.pattern_ctx, Some(PatternContext { record_pat: None, .. })) => {\n             Some(&PathKind::Pat)\n         }"}, {"sha": "846d5f090287e38f5f0c5c3d5fdffd139a10ba97", "filename": "crates/ide-completion/src/completions/item_list/trait_impl.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6e07b17f692a1639e94687aadfcfea567236bf04/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e07b17f692a1639e94687aadfcfea567236bf04/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs?ref=6e07b17f692a1639e94687aadfcfea567236bf04", "patch": "@@ -44,8 +44,8 @@ use text_edit::TextEdit;\n \n use crate::{\n     context::{\n-        IdentContext, ItemListKind, NameContext, NameKind, NameRefContext, PathCompletionCtx,\n-        PathKind,\n+        IdentContext, ItemListKind, NameContext, NameKind, NameRefContext, NameRefKind,\n+        PathCompletionCtx, PathKind,\n     },\n     CompletionContext, CompletionItem, CompletionItemKind, CompletionRelevance, Completions,\n };\n@@ -106,14 +106,13 @@ fn completion_match(ctx: &CompletionContext) -> Option<(ImplCompletionKind, Text\n         }\n         IdentContext::NameRef(NameRefContext {\n             nameref,\n-            path_ctx:\n-                Some(\n+            kind:\n+                Some(NameRefKind::Path(\n                     path_ctx @ PathCompletionCtx {\n                         kind: PathKind::Item { kind: ItemListKind::TraitImpl },\n                         ..\n                     },\n-                ),\n-            ..\n+                )),\n         }) if path_ctx.is_trivial_path() => Some((\n             ImplCompletionKind::All,\n             match nameref {"}, {"sha": "2e266b7714c8d3d6f4889617531322ed671a5974", "filename": "crates/ide-completion/src/completions/keyword.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6e07b17f692a1639e94687aadfcfea567236bf04/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e07b17f692a1639e94687aadfcfea567236bf04/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=6e07b17f692a1639e94687aadfcfea567236bf04", "patch": "@@ -4,11 +4,14 @@\n \n use syntax::ast::Item;\n \n-use crate::{context::NameRefContext, CompletionContext, Completions};\n+use crate::{\n+    context::{NameRefContext, NameRefKind},\n+    CompletionContext, Completions,\n+};\n \n pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionContext) {\n     let item = match ctx.nameref_ctx() {\n-        Some(NameRefContext { keyword: Some(item), record_expr: None, .. }) => item,\n+        Some(NameRefContext { kind: Some(NameRefKind::Keyword(item)), .. }) => item,\n         _ => return,\n     };\n "}, {"sha": "888b8f34884f1d2fc91ea4cc4bc9584f6e6fdf0b", "filename": "crates/ide-completion/src/completions/postfix.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6e07b17f692a1639e94687aadfcfea567236bf04/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e07b17f692a1639e94687aadfcfea567236bf04/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=6e07b17f692a1639e94687aadfcfea567236bf04", "patch": "@@ -13,7 +13,7 @@ use text_edit::TextEdit;\n \n use crate::{\n     completions::postfix::format_like::add_format_like_completions,\n-    context::{CompletionContext, DotAccess, DotAccessKind, NameRefContext},\n+    context::{CompletionContext, DotAccess, DotAccessKind, NameRefContext, NameRefKind},\n     item::{Builder, CompletionRelevancePostfixMatch},\n     CompletionItem, CompletionItemKind, CompletionRelevance, Completions, SnippetScope,\n };\n@@ -25,7 +25,13 @@ pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n \n     let (dot_receiver, receiver_ty, receiver_is_ambiguous_float_literal) = match ctx.nameref_ctx() {\n         Some(NameRefContext {\n-            dot_access: Some(DotAccess { receiver_ty: Some(ty), receiver: Some(it), kind, .. }),\n+            kind:\n+                Some(NameRefKind::DotAccess(DotAccess {\n+                    receiver_ty: Some(ty),\n+                    receiver: Some(it),\n+                    kind,\n+                    ..\n+                })),\n             ..\n         }) => (\n             it,"}, {"sha": "d74ae260b5dfa771d0936aa07c5a269a01b086a4", "filename": "crates/ide-completion/src/completions/record.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6e07b17f692a1639e94687aadfcfea567236bf04/crates%2Fide-completion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e07b17f692a1639e94687aadfcfea567236bf04/crates%2Fide-completion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Frecord.rs?ref=6e07b17f692a1639e94687aadfcfea567236bf04", "patch": "@@ -3,7 +3,7 @@ use ide_db::SymbolKind;\n use syntax::{ast::Expr, T};\n \n use crate::{\n-    context::{NameRefContext, PatternContext},\n+    context::{NameRefContext, NameRefKind, PathCompletionCtx, PathKind, PatternContext},\n     CompletionContext, CompletionItem, CompletionItemKind, CompletionRelevance,\n     CompletionRelevancePostfixMatch, Completions,\n };\n@@ -13,8 +13,18 @@ pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) ->\n         &ctx.pattern_ctx\n     {\n         ctx.sema.record_pattern_missing_fields(record_pat)\n-    } else if let Some(NameRefContext { record_expr: Some((record_expr, _)), .. }) =\n-        ctx.nameref_ctx()\n+    } else if let Some(NameRefContext {\n+        kind:\n+            Some(\n+                NameRefKind::RecordExpr(record_expr)\n+                | NameRefKind::Path(PathCompletionCtx {\n+                    kind: PathKind::Expr { is_func_update: Some(record_expr), .. },\n+                    qualifier: None,\n+                    ..\n+                }),\n+            ),\n+        ..\n+    }) = ctx.nameref_ctx()\n     {\n         let ty = ctx.sema.type_of_expr(&Expr::RecordExpr(record_expr.clone()));\n \n@@ -39,7 +49,7 @@ pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) ->\n                     ty.original.impls_trait(ctx.db, default_trait, &[])\n                 });\n \n-            if impl_default_trait && !missing_fields.is_empty() && ctx.path_qual().is_none() {\n+            if impl_default_trait && !missing_fields.is_empty() {\n                 let completion_text = \"..Default::default()\";\n                 let mut item =\n                     CompletionItem::new(SymbolKind::Field, ctx.source_range(), completion_text);"}, {"sha": "5d062098d7d623f9f98ac334d34706041d794cc8", "filename": "crates/ide-completion/src/completions/use_.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6e07b17f692a1639e94687aadfcfea567236bf04/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e07b17f692a1639e94687aadfcfea567236bf04/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs?ref=6e07b17f692a1639e94687aadfcfea567236bf04", "patch": "@@ -5,16 +5,24 @@ use ide_db::{FxHashSet, SymbolKind};\n use syntax::{ast, AstNode};\n \n use crate::{\n-    context::{CompletionContext, NameRefContext, PathCompletionCtx, PathKind, PathQualifierCtx},\n+    context::{\n+        CompletionContext, NameRefContext, NameRefKind, PathCompletionCtx, PathKind,\n+        PathQualifierCtx,\n+    },\n     item::Builder,\n     CompletionItem, CompletionItemKind, CompletionRelevance, Completions,\n };\n \n pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext) {\n     let (&is_absolute_path, qualifier, name_ref) = match ctx.nameref_ctx() {\n         Some(NameRefContext {\n-            path_ctx:\n-                Some(PathCompletionCtx { kind: PathKind::Use, is_absolute_path, qualifier, .. }),\n+            kind:\n+                Some(NameRefKind::Path(PathCompletionCtx {\n+                    kind: PathKind::Use,\n+                    is_absolute_path,\n+                    qualifier,\n+                    ..\n+                })),\n             nameref,\n             ..\n         }) => (is_absolute_path, qualifier, nameref),"}, {"sha": "f790aa56ebf7a7b901b4d644758d3851f7b96694", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 38, "deletions": 39, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/6e07b17f692a1639e94687aadfcfea567236bf04/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e07b17f692a1639e94687aadfcfea567236bf04/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=6e07b17f692a1639e94687aadfcfea567236bf04", "patch": "@@ -50,6 +50,7 @@ pub(super) enum PathKind {\n         in_loop_body: bool,\n         after_if_expr: bool,\n         ref_expr_parent: Option<ast::RefExpr>,\n+        is_func_update: Option<ast::RecordExpr>,\n     },\n     Type {\n         in_tuple_struct: bool,\n@@ -199,13 +200,17 @@ pub(super) enum NameKind {\n pub(super) struct NameRefContext {\n     /// NameRef syntax in the original file\n     pub(super) nameref: Option<ast::NameRef>,\n-    // FIXME: these fields are actually disjoint -> enum\n-    pub(super) dot_access: Option<DotAccess>,\n-    pub(super) path_ctx: Option<PathCompletionCtx>,\n+    pub(super) kind: Option<NameRefKind>,\n+}\n+\n+#[derive(Debug)]\n+pub(super) enum NameRefKind {\n+    Path(PathCompletionCtx),\n+    DotAccess(DotAccess),\n     /// Position where we are only interested in keyword completions\n-    pub(super) keyword: Option<ast::Item>,\n+    Keyword(ast::Item),\n     /// The record expression this nameref is a field of\n-    pub(super) record_expr: Option<(ast::RecordExpr, bool)>,\n+    RecordExpr(ast::RecordExpr),\n }\n \n #[derive(Debug)]\n@@ -341,9 +346,10 @@ impl<'a> CompletionContext<'a> {\n \n     pub(crate) fn dot_receiver(&self) -> Option<&ast::Expr> {\n         match self.nameref_ctx() {\n-            Some(NameRefContext { dot_access: Some(DotAccess { receiver, .. }), .. }) => {\n-                receiver.as_ref()\n-            }\n+            Some(NameRefContext {\n+                kind: Some(NameRefKind::DotAccess(DotAccess { receiver, .. })),\n+                ..\n+            }) => receiver.as_ref(),\n             _ => None,\n         }\n     }\n@@ -358,7 +364,10 @@ impl<'a> CompletionContext<'a> {\n     }\n \n     pub(crate) fn path_context(&self) -> Option<&PathCompletionCtx> {\n-        self.nameref_ctx().and_then(|ctx| ctx.path_ctx.as_ref())\n+        self.nameref_ctx().and_then(|ctx| match &ctx.kind {\n+            Some(NameRefKind::Path(path)) => Some(path),\n+            _ => None,\n+        })\n     }\n \n     pub(crate) fn path_qual(&self) -> Option<&ast::Path> {\n@@ -857,7 +866,7 @@ impl<'a> CompletionContext<'a> {\n                 let parent = name_ref.syntax().parent()?;\n                 let (mut nameref_ctx, _, _) =\n                     Self::classify_name_ref(&self.sema, &original_file, name_ref, parent);\n-                if let Some(path_ctx) = &mut nameref_ctx.path_ctx {\n+                if let Some(NameRefKind::Path(path_ctx)) = &mut nameref_ctx.kind {\n                     path_ctx.kind = PathKind::Derive;\n                 }\n                 self.ident_ctx = IdentContext::NameRef(nameref_ctx);\n@@ -1026,23 +1035,13 @@ impl<'a> CompletionContext<'a> {\n     ) -> (NameRefContext, Option<PatternContext>, QualifierCtx) {\n         let nameref = find_node_at_offset(&original_file, name_ref.syntax().text_range().start());\n \n-        let mut res = (\n-            NameRefContext {\n-                dot_access: None,\n-                path_ctx: None,\n-                nameref,\n-                record_expr: None,\n-                keyword: None,\n-            },\n-            None,\n-            QualifierCtx::default(),\n-        );\n+        let mut res = (NameRefContext { nameref, kind: None }, None, QualifierCtx::default());\n         let (nameref_ctx, pattern_ctx, qualifier_ctx) = &mut res;\n \n         if let Some(record_field) = ast::RecordExprField::for_field_name(&name_ref) {\n-            nameref_ctx.record_expr =\n+            nameref_ctx.kind =\n                 find_node_in_file_compensated(original_file, &record_field.parent_record_lit())\n-                    .zip(Some(false));\n+                    .map(NameRefKind::RecordExpr);\n             return res;\n         }\n         if let Some(record_field) = ast::RecordPatField::for_field_name_ref(&name_ref) {\n@@ -1075,20 +1074,20 @@ impl<'a> CompletionContext<'a> {\n                         },\n                         _ => false,\n                     };\n-                    nameref_ctx.dot_access = Some(DotAccess {\n+                    nameref_ctx.kind = Some(NameRefKind::DotAccess(DotAccess {\n                         receiver_ty: receiver.as_ref().and_then(|it| sema.type_of_expr(it)),\n                         kind: DotAccessKind::Field { receiver_is_ambiguous_float_literal },\n                         receiver\n-                    });\n+                    }));\n                     return res;\n                 },\n                 ast::MethodCallExpr(method) => {\n                     let receiver = find_in_original_file(method.receiver(), original_file);\n-                    nameref_ctx.dot_access = Some(DotAccess {\n+                    nameref_ctx.kind = Some(NameRefKind::DotAccess(DotAccess {\n                         receiver_ty: receiver.as_ref().and_then(|it| sema.type_of_expr(it)),\n                         kind: DotAccessKind::Method { has_parens: method.arg_list().map_or(false, |it| it.l_paren_token().is_some()) },\n                         receiver\n-                    });\n+                    }));\n                     return res;\n                 },\n                 _ => return res,\n@@ -1113,10 +1112,11 @@ impl<'a> CompletionContext<'a> {\n                 })\n                 .unwrap_or(false)\n         };\n-        let mut fill_record_expr = |syn: &SyntaxNode| {\n+        let func_update_record = |syn: &SyntaxNode| {\n             if let Some(record_expr) = syn.ancestors().nth(2).and_then(ast::RecordExpr::cast) {\n-                nameref_ctx.record_expr =\n-                    find_node_in_file_compensated(original_file, &record_expr).zip(Some(true));\n+                find_node_in_file_compensated(original_file, &record_expr)\n+            } else {\n+                None\n             }\n         };\n         let after_if_expr = |node: SyntaxNode| {\n@@ -1172,22 +1172,21 @@ impl<'a> CompletionContext<'a> {\n                         if let Some(p) = it.syntax().parent() {\n                             if ast::ExprStmt::can_cast(p.kind()) {\n                                 if let Some(kind) = inbetween_body_and_decl_check(p) {\n-                                    nameref_ctx.keyword = Some(kind);\n+                                    nameref_ctx.kind = Some(NameRefKind::Keyword(kind));\n                                     return None;\n                                 }\n                             }\n                         }\n \n-                        fill_record_expr(it.syntax());\n-\n-                        path_ctx.has_call_parens = it.syntax().parent().map_or(false, |it| ast::CallExpr::can_cast(it.kind()));\n+                                                path_ctx.has_call_parens = it.syntax().parent().map_or(false, |it| ast::CallExpr::can_cast(it.kind()));\n                         let in_block_expr = is_in_block(it.syntax());\n                         let in_loop_body = is_in_loop_body(it.syntax());\n                         let after_if_expr = after_if_expr(it.syntax().clone());\n                         let ref_expr_parent = path.as_single_name_ref()\n                             .and_then(|_| it.syntax().parent()).and_then(ast::RefExpr::cast);\n+                        let is_func_update = func_update_record(it.syntax());\n \n-                        Some(PathKind::Expr { in_block_expr, in_loop_body, after_if_expr, ref_expr_parent })\n+                        Some(PathKind::Expr { in_block_expr, in_loop_body, after_if_expr, ref_expr_parent, is_func_update })\n                     },\n                     ast::TupleStructPat(it) => {\n                         path_ctx.has_call_parens = true;\n@@ -1205,7 +1204,7 @@ impl<'a> CompletionContext<'a> {\n                     },\n                     ast::MacroCall(it) => {\n                         if let Some(kind) = inbetween_body_and_decl_check(it.syntax().clone()) {\n-                            nameref_ctx.keyword = Some(kind);\n+                            nameref_ctx.kind = Some(NameRefKind::Keyword(kind));\n                             return None;\n                         }\n \n@@ -1236,10 +1235,10 @@ impl<'a> CompletionContext<'a> {\n                                     let in_loop_body = is_in_loop_body(it.syntax());\n                                     let in_block_expr = is_in_block(it.syntax());\n                                     let after_if_expr = after_if_expr(it.syntax().clone());\n-                                    fill_record_expr(it.syntax());\n                                     let ref_expr_parent = path.as_single_name_ref()\n                                         .and_then(|_| it.syntax().parent()).and_then(ast::RefExpr::cast);\n-                                    PathKind::Expr { in_block_expr, in_loop_body, after_if_expr, ref_expr_parent }\n+                                    let is_func_update = func_update_record(it.syntax());\n+                                    PathKind::Expr { in_block_expr, in_loop_body, after_if_expr, ref_expr_parent, is_func_update }\n                                 });\n                             },\n                         }\n@@ -1365,7 +1364,7 @@ impl<'a> CompletionContext<'a> {\n                 }\n             }\n         }\n-        nameref_ctx.path_ctx = Some(path_ctx);\n+        nameref_ctx.kind = Some(NameRefKind::Path(path_ctx));\n         res\n     }\n }"}, {"sha": "566eaa575d49dd0c6e1ff9d00d5f327bb767b4ae", "filename": "crates/ide-completion/src/render/function.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e07b17f692a1639e94687aadfcfea567236bf04/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e07b17f692a1639e94687aadfcfea567236bf04/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs?ref=6e07b17f692a1639e94687aadfcfea567236bf04", "patch": "@@ -8,7 +8,8 @@ use syntax::SmolStr;\n \n use crate::{\n     context::{\n-        CompletionContext, DotAccess, DotAccessKind, NameRefContext, PathCompletionCtx, PathKind,\n+        CompletionContext, DotAccess, DotAccessKind, NameRefContext, NameRefKind,\n+        PathCompletionCtx, PathKind,\n     },\n     item::{Builder, CompletionItem, CompletionItemKind, CompletionRelevance},\n     render::{compute_exact_name_match, compute_ref_match, compute_type_match, RenderContext},\n@@ -212,7 +213,10 @@ fn should_add_parens(ctx: &CompletionContext) -> bool {\n     if matches!(\n         ctx.nameref_ctx(),\n         Some(NameRefContext {\n-            dot_access: Some(DotAccess { kind: DotAccessKind::Method { has_parens: true }, .. }),\n+            kind: Some(NameRefKind::DotAccess(DotAccess {\n+                kind: DotAccessKind::Method { has_parens: true },\n+                ..\n+            })),\n             ..\n         })\n     ) {"}, {"sha": "c7514e1b578739487e50fce351b93a2812984aea", "filename": "crates/ide-completion/src/tests/record.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e07b17f692a1639e94687aadfcfea567236bf04/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e07b17f692a1639e94687aadfcfea567236bf04/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs?ref=6e07b17f692a1639e94687aadfcfea567236bf04", "patch": "@@ -105,7 +105,6 @@ fn foo(f: Struct) {\n #[test]\n fn functional_update() {\n     // FIXME: This should filter out all completions that do not have the type `Foo`\n-    // FIXME: Fields should not show up after `.`\n     check(\n         r#\"\n //- minicore:default\n@@ -192,8 +191,6 @@ fn main() {\n }\n \"#,\n         expect![[r#\"\n-            fd foo1                   u32\n-            fd foo2                   u32\n             fn default() (as Default) fn() -> Self\n         \"#]],\n     );"}]}