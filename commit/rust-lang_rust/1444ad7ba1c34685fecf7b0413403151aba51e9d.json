{"sha": "1444ad7ba1c34685fecf7b0413403151aba51e9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NDRhZDdiYTFjMzQ2ODVmZWNmN2IwNDEzNDAzMTUxYWJhNTFlOWQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-10-05T13:24:04Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-10-05T16:35:26Z"}, "message": "rustc_target: Further simplify loading of built-in targets\n\nusing the fact that it is infallible.\n\nJSON roundtrip check on every rustc run is also removed, it's already performed by unit tests.", "tree": {"sha": "fafae164199562565d58d08a13087939cad07527", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fafae164199562565d58d08a13087939cad07527"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1444ad7ba1c34685fecf7b0413403151aba51e9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1444ad7ba1c34685fecf7b0413403151aba51e9d", "html_url": "https://github.com/rust-lang/rust/commit/1444ad7ba1c34685fecf7b0413403151aba51e9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1444ad7ba1c34685fecf7b0413403151aba51e9d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "021fcbd90cebe83bb2f0298f2e7001605b5a97d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/021fcbd90cebe83bb2f0298f2e7001605b5a97d7", "html_url": "https://github.com/rust-lang/rust/commit/021fcbd90cebe83bb2f0298f2e7001605b5a97d7"}], "stats": {"total": 54, "additions": 15, "deletions": 39}, "files": [{"sha": "23ed3918c8b208fc1653328621a7168b6b60ee28", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1444ad7ba1c34685fecf7b0413403151aba51e9d/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1444ad7ba1c34685fecf7b0413403151aba51e9d/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=1444ad7ba1c34685fecf7b0413403151aba51e9d", "patch": "@@ -672,7 +672,8 @@ impl RustcDefaultCalls {\n         for req in &sess.opts.prints {\n             match *req {\n                 TargetList => {\n-                    let mut targets = rustc_target::spec::get_targets().collect::<Vec<String>>();\n+                    let mut targets =\n+                        rustc_target::spec::TARGETS.iter().copied().collect::<Vec<_>>();\n                     targets.sort();\n                     println!(\"{}\", targets.join(\"\\n\"));\n                 }"}, {"sha": "f4f4b45c7ee83391e232d4c500f49d6a4118a1ec", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 13, "deletions": 38, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1444ad7ba1c34685fecf7b0413403151aba51e9d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1444ad7ba1c34685fecf7b0413403151aba51e9d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=1444ad7ba1c34685fecf7b0413403151aba51e9d", "patch": "@@ -430,46 +430,23 @@ impl fmt::Display for LinkOutputKind {\n     }\n }\n \n-pub enum LoadTargetError {\n-    BuiltinTargetNotFound(String),\n-    Other(String),\n-}\n-\n pub type LinkArgs = BTreeMap<LinkerFlavor, Vec<String>>;\n \n macro_rules! supported_targets {\n     ( $(($( $triple:literal, )+ $module:ident ),)+ ) => {\n         $(mod $module;)+\n \n         /// List of supported targets\n-        const TARGETS: &[&str] = &[$($($triple),+),+];\n-\n-        fn load_specific(target: &str) -> Result<Target, LoadTargetError> {\n-            match target {\n-                $(\n-                    $($triple)|+ => {\n-                        let mut t = $module::target();\n-                        t.options.is_builtin = true;\n-\n-                        // round-trip through the JSON parser to ensure at\n-                        // run-time that the parser works correctly\n-                        t = Target::from_json(t.to_json())\n-                            .map_err(LoadTargetError::Other)?;\n-                        debug!(\"got builtin target: {:?}\", t);\n-                        Ok(t)\n-                    },\n-                )+\n-                    _ => Err(LoadTargetError::BuiltinTargetNotFound(\n-                        format!(\"Unable to find target: {}\", target)))\n-            }\n-        }\n-\n-        pub fn get_targets() -> impl Iterator<Item = String> {\n-            TARGETS.iter().filter_map(|t| -> Option<String> {\n-                load_specific(t)\n-                    .and(Ok(t.to_string()))\n-                    .ok()\n-            })\n+        pub const TARGETS: &[&str] = &[$($($triple),+),+];\n+\n+        fn load_builtin(target: &str) -> Option<Target> {\n+            let mut t = match target {\n+                $( $($triple)|+ => $module::target(), )+\n+                _ => return None,\n+            };\n+            t.options.is_builtin = true;\n+            debug!(\"got builtin target: {:?}\", t);\n+            Some(t)\n         }\n \n         #[cfg(test)]\n@@ -1529,11 +1506,9 @@ impl Target {\n \n         match *target_triple {\n             TargetTriple::TargetTriple(ref target_triple) => {\n-                // check if triple is in list of supported targets\n-                match load_specific(target_triple) {\n-                    Ok(t) => return Ok(t),\n-                    Err(LoadTargetError::BuiltinTargetNotFound(_)) => (),\n-                    Err(LoadTargetError::Other(e)) => return Err(e),\n+                // check if triple is in list of built-in targets\n+                if let Some(t) = load_builtin(target_triple) {\n+                    return Ok(t);\n                 }\n \n                 // search for a file named `target_triple`.json in RUST_TARGET_PATH"}]}