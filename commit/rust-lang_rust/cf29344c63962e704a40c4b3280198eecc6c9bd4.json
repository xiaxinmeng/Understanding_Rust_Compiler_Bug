{"sha": "cf29344c63962e704a40c4b3280198eecc6c9bd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMjkzNDRjNjM5NjJlNzA0YTQwYzRiMzI4MDE5OGVlY2M2YzliZDQ=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-03-03T23:05:31Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-03-03T23:16:23Z"}, "message": "truncate i8-s to i1-s when loading constants\n\nFixes #30891", "tree": {"sha": "7b76d2d297045eac7e2f4da977890fff2c2bb756", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b76d2d297045eac7e2f4da977890fff2c2bb756"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf29344c63962e704a40c4b3280198eecc6c9bd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf29344c63962e704a40c4b3280198eecc6c9bd4", "html_url": "https://github.com/rust-lang/rust/commit/cf29344c63962e704a40c4b3280198eecc6c9bd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf29344c63962e704a40c4b3280198eecc6c9bd4/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9e61c9f403e89415a3787fae90fef5aad8ee477", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9e61c9f403e89415a3787fae90fef5aad8ee477", "html_url": "https://github.com/rust-lang/rust/commit/b9e61c9f403e89415a3787fae90fef5aad8ee477"}], "stats": {"total": 45, "additions": 36, "deletions": 9}, "files": [{"sha": "20da15834966e4d22acb98c1bfdcdf74c22a8f4f", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cf29344c63962e704a40c4b3280198eecc6c9bd4/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf29344c63962e704a40c4b3280198eecc6c9bd4/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=cf29344c63962e704a40c4b3280198eecc6c9bd4", "patch": "@@ -161,13 +161,17 @@ pub fn addr_of(ccx: &CrateContext,\n     gv\n }\n \n-fn const_deref_ptr(cx: &CrateContext, v: ValueRef) -> ValueRef {\n+/// Deref a constant pointer\n+fn load_const(cx: &CrateContext, v: ValueRef, t: Ty) -> ValueRef {\n     let v = match cx.const_unsized().borrow().get(&v) {\n         Some(&v) => v,\n         None => v\n     };\n-    unsafe {\n-        llvm::LLVMGetInitializer(v)\n+    let d = unsafe { llvm::LLVMGetInitializer(v) };\n+    if t.is_bool() {\n+        unsafe { llvm::LLVMConstTrunc(d, Type::i1(cx).to_ref()) }\n+    } else {\n+        d\n     }\n }\n \n@@ -178,7 +182,7 @@ fn const_deref<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     match ty.builtin_deref(true, ty::NoPreference) {\n         Some(mt) => {\n             if type_is_sized(cx.tcx(), mt.ty) {\n-                (const_deref_ptr(cx, v), mt.ty)\n+                (load_const(cx, v, mt.ty), mt.ty)\n             } else {\n                 // Derefing a fat pointer does not change the representation,\n                 // just the type to the unsized contents.\n@@ -588,7 +592,10 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             let is_float = ty.is_fp();\n             let signed = ty.is_signed();\n \n-            let (te2, _) = try!(const_expr(cx, &e2, param_substs, fn_args, trueconst));\n+            let (te2, ty2) = try!(const_expr(cx, &e2, param_substs, fn_args, trueconst));\n+            debug!(\"const_expr_unadjusted: te2={}, ty={:?}\",\n+                   cx.tn().val_to_string(te2),\n+                   ty2);\n \n             try!(check_binary_expr_validity(cx, e, ty, te1, te2, trueconst));\n \n@@ -671,13 +678,13 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             };\n             let (arr, len) = match bt.sty {\n                 ty::TyArray(_, u) => (bv, C_uint(cx, u)),\n-                ty::TySlice(_) | ty::TyStr => {\n+                ty::TySlice(..) | ty::TyStr => {\n                     let e1 = const_get_elt(cx, bv, &[0]);\n-                    (const_deref_ptr(cx, e1), const_get_elt(cx, bv, &[1]))\n+                    (load_const(cx, e1, bt), const_get_elt(cx, bv, &[1]))\n                 },\n                 ty::TyRef(_, mt) => match mt.ty.sty {\n                     ty::TyArray(_, u) => {\n-                        (const_deref_ptr(cx, bv), C_uint(cx, u))\n+                        (load_const(cx, bv, mt.ty), C_uint(cx, u))\n                     },\n                     _ => cx.sess().span_bug(base.span,\n                                             &format!(\"index-expr base must be a vector \\\n@@ -891,7 +898,8 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                     expr::trans_def_fn_unadjusted(cx, e, def, param_substs).val\n                 }\n                 Def::Const(def_id) | Def::AssociatedConst(def_id) => {\n-                    const_deref_ptr(cx, try!(get_const_val(cx, def_id, e, param_substs)))\n+                    load_const(cx, try!(get_const_val(cx, def_id, e, param_substs)),\n+                               ety)\n                 }\n                 Def::Variant(enum_did, variant_did) => {\n                     let vinfo = cx.tcx().lookup_adt_def(enum_did).variant_with_id(variant_did);"}, {"sha": "622e5fa544ec90120f38324c63c88a0b59e2beb2", "filename": "src/test/run-pass/issue-30891.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cf29344c63962e704a40c4b3280198eecc6c9bd4/src%2Ftest%2Frun-pass%2Fissue-30891.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf29344c63962e704a40c4b3280198eecc6c9bd4/src%2Ftest%2Frun-pass%2Fissue-30891.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-30891.rs?ref=cf29344c63962e704a40c4b3280198eecc6c9bd4", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const ERROR_CONST: bool = true;\n+\n+fn get() -> bool {\n+    false || ERROR_CONST\n+}\n+\n+pub fn main() {\n+    assert_eq!(get(), true);\n+}"}]}