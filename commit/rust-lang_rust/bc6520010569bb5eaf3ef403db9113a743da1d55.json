{"sha": "bc6520010569bb5eaf3ef403db9113a743da1d55", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNjUyMDAxMDU2OWJiNWVhZjNlZjQwM2RiOTExM2E3NDNkYTFkNTU=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-10-23T15:18:41Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-10-24T16:25:23Z"}, "message": "Fix indentation of inserted use statements", "tree": {"sha": "16e6e12fb249bf46ff5e8ba4ee07a8d757970cc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16e6e12fb249bf46ff5e8ba4ee07a8d757970cc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc6520010569bb5eaf3ef403db9113a743da1d55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc6520010569bb5eaf3ef403db9113a743da1d55", "html_url": "https://github.com/rust-lang/rust/commit/bc6520010569bb5eaf3ef403db9113a743da1d55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc6520010569bb5eaf3ef403db9113a743da1d55/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4105378dc7479a3dbd39a4afb3eba67d083bd7f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4105378dc7479a3dbd39a4afb3eba67d083bd7f8", "html_url": "https://github.com/rust-lang/rust/commit/4105378dc7479a3dbd39a4afb3eba67d083bd7f8"}], "stats": {"total": 172, "additions": 135, "deletions": 37}, "files": [{"sha": "033fbcedce68aa086e71eb6c7241e744ea4beb12", "filename": "crates/assists/src/utils/insert_use.rs", "status": "modified", "additions": 132, "deletions": 34, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/bc6520010569bb5eaf3ef403db9113a743da1d55/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc6520010569bb5eaf3ef403db9113a743da1d55/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs?ref=bc6520010569bb5eaf3ef403db9113a743da1d55", "patch": "@@ -14,6 +14,7 @@ use syntax::{\n     },\n     InsertPosition, SyntaxElement, SyntaxNode,\n };\n+use test_utils::mark;\n \n #[derive(Debug)]\n pub enum ImportScope {\n@@ -109,6 +110,12 @@ pub(crate) fn insert_use(\n     // so look for the place we have to insert to\n     let (insert_position, add_blank) = find_insert_position(scope, path);\n \n+    let indent = if let ident_level @ 1..=usize::MAX = scope.indent_level().0 as usize {\n+        Some(make::tokens::whitespace(&\" \".repeat(4 * ident_level)).into())\n+    } else {\n+        None\n+    };\n+\n     let to_insert: Vec<SyntaxElement> = {\n         let mut buf = Vec::new();\n \n@@ -120,9 +127,13 @@ pub(crate) fn insert_use(\n             _ => (),\n         }\n \n-        if let ident_level @ 1..=usize::MAX = scope.indent_level().0 as usize {\n-            buf.push(make::tokens::whitespace(&\" \".repeat(4 * ident_level)).into());\n+        if add_blank.has_before() {\n+            if let Some(indent) = indent.clone() {\n+                mark::hit!(insert_use_indent_before);\n+                buf.push(indent);\n+            }\n         }\n+\n         buf.push(use_item.syntax().clone().into());\n \n         match add_blank {\n@@ -133,6 +144,16 @@ pub(crate) fn insert_use(\n             _ => (),\n         }\n \n+        // only add indentation *after* our stuff if there's another node directly after it\n+        if add_blank.has_after() && matches!(insert_position, InsertPosition::Before(_)) {\n+            if let Some(indent) = indent {\n+                mark::hit!(insert_use_indent_after);\n+                buf.push(indent);\n+            }\n+        } else if add_blank.has_after() && matches!(insert_position, InsertPosition::After(_)) {\n+            mark::hit!(insert_use_no_indent_after);\n+        }\n+\n         buf\n     };\n \n@@ -470,6 +491,15 @@ enum AddBlankLine {\n     AfterTwice,\n }\n \n+impl AddBlankLine {\n+    fn has_before(&self) -> bool {\n+        matches!(self, AddBlankLine::Before | AddBlankLine::BeforeTwice | AddBlankLine::Around)\n+    }\n+    fn has_after(&self) -> bool {\n+        matches!(self, AddBlankLine::After | AddBlankLine::AfterTwice | AddBlankLine::Around)\n+    }\n+}\n+\n fn find_insert_position(\n     scope: &ImportScope,\n     insert_path: ast::Path,\n@@ -561,6 +591,21 @@ use std::bar::G;\",\n         )\n     }\n \n+    #[test]\n+    fn insert_start_indent() {\n+        mark::check!(insert_use_indent_after);\n+        check_none(\n+            \"std::bar::AA\",\n+            r\"\n+    use std::bar::B;\n+    use std::bar::D;\",\n+            r\"\n+    use std::bar::AA;\n+    use std::bar::B;\n+    use std::bar::D;\",\n+        )\n+    }\n+\n     #[test]\n     fn insert_middle() {\n         check_none(\n@@ -579,6 +624,24 @@ use std::bar::G;\",\n         )\n     }\n \n+    #[test]\n+    fn insert_middle_indent() {\n+        check_none(\n+            \"std::bar::EE\",\n+            r\"\n+    use std::bar::A;\n+    use std::bar::D;\n+    use std::bar::F;\n+    use std::bar::G;\",\n+            r\"\n+    use std::bar::A;\n+    use std::bar::D;\n+    use std::bar::EE;\n+    use std::bar::F;\n+    use std::bar::G;\",\n+        )\n+    }\n+\n     #[test]\n     fn insert_end() {\n         check_none(\n@@ -597,6 +660,25 @@ use std::bar::ZZ;\",\n         )\n     }\n \n+    #[test]\n+    fn insert_end_indent() {\n+        mark::check!(insert_use_indent_before);\n+        check_none(\n+            \"std::bar::ZZ\",\n+            r\"\n+    use std::bar::A;\n+    use std::bar::D;\n+    use std::bar::F;\n+    use std::bar::G;\",\n+            r\"\n+    use std::bar::A;\n+    use std::bar::D;\n+    use std::bar::F;\n+    use std::bar::G;\n+    use std::bar::ZZ;\",\n+        )\n+    }\n+\n     #[test]\n     fn insert_middle_nested() {\n         check_none(\n@@ -620,18 +702,18 @@ use std::bar::G;\",\n         check_none(\n             \"foo::bar::GG\",\n             r\"\n-use std::bar::A;\n-use std::bar::D;\n+    use std::bar::A;\n+    use std::bar::D;\n \n-use foo::bar::F;\n-use foo::bar::H;\",\n+    use foo::bar::F;\n+    use foo::bar::H;\",\n             r\"\n-use std::bar::A;\n-use std::bar::D;\n+    use std::bar::A;\n+    use std::bar::D;\n \n-use foo::bar::F;\n-use foo::bar::GG;\n-use foo::bar::H;\",\n+    use foo::bar::F;\n+    use foo::bar::GG;\n+    use foo::bar::H;\",\n         )\n     }\n \n@@ -640,22 +722,22 @@ use foo::bar::H;\",\n         check_none(\n             \"foo::bar::GG\",\n             r\"\n-use foo::bar::A;\n-use foo::bar::D;\n+    use foo::bar::A;\n+    use foo::bar::D;\n \n-use std;\n+    use std;\n \n-use foo::bar::F;\n-use foo::bar::H;\",\n+    use foo::bar::F;\n+    use foo::bar::H;\",\n             r\"\n-use foo::bar::A;\n-use foo::bar::D;\n-use foo::bar::GG;\n+    use foo::bar::A;\n+    use foo::bar::D;\n+    use foo::bar::GG;\n \n-use std;\n+    use std;\n \n-use foo::bar::F;\n-use foo::bar::H;\",\n+    use foo::bar::F;\n+    use foo::bar::H;\",\n         )\n     }\n \n@@ -664,13 +746,13 @@ use foo::bar::H;\",\n         check_none(\n             \"std::fmt\",\n             r\"\n-use foo::bar::A;\n-use foo::bar::D;\",\n+    use foo::bar::A;\n+    use foo::bar::D;\",\n             r\"\n-use std::fmt;\n+    use std::fmt;\n \n-use foo::bar::A;\n-use foo::bar::D;\",\n+    use foo::bar::A;\n+    use foo::bar::D;\",\n         )\n     }\n \n@@ -713,6 +795,20 @@ fn main() {}\",\n         )\n     }\n \n+    #[test]\n+    fn insert_empty_module() {\n+        mark::check!(insert_use_no_indent_after);\n+        check(\n+            \"foo::bar\",\n+            \"mod x {}\",\n+            r\"{\n+    use foo::bar;\n+}\",\n+            None,\n+            true,\n+        )\n+    }\n+\n     #[test]\n     fn insert_after_inner_attr() {\n         check_full(\n@@ -991,11 +1087,13 @@ use foo::bar::baz::Qux;\",\n         ra_fixture_before: &str,\n         ra_fixture_after: &str,\n         mb: Option<MergeBehaviour>,\n+        module: bool,\n     ) {\n-        let file = super::ImportScope::from(\n-            ast::SourceFile::parse(ra_fixture_before).tree().syntax().clone(),\n-        )\n-        .unwrap();\n+        let mut syntax = ast::SourceFile::parse(ra_fixture_before).tree().syntax().clone();\n+        if module {\n+            syntax = syntax.descendants().find_map(ast::Module::cast).unwrap().syntax().clone();\n+        }\n+        let file = super::ImportScope::from(syntax).unwrap();\n         let path = ast::SourceFile::parse(&format!(\"use {};\", path))\n             .tree()\n             .syntax()\n@@ -1008,15 +1106,15 @@ use foo::bar::baz::Qux;\",\n     }\n \n     fn check_full(path: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n-        check(path, ra_fixture_before, ra_fixture_after, Some(MergeBehaviour::Full))\n+        check(path, ra_fixture_before, ra_fixture_after, Some(MergeBehaviour::Full), false)\n     }\n \n     fn check_last(path: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n-        check(path, ra_fixture_before, ra_fixture_after, Some(MergeBehaviour::Last))\n+        check(path, ra_fixture_before, ra_fixture_after, Some(MergeBehaviour::Last), false)\n     }\n \n     fn check_none(path: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n-        check(path, ra_fixture_before, ra_fixture_after, None)\n+        check(path, ra_fixture_before, ra_fixture_after, None, false)\n     }\n \n     fn check_merge_only_fail(ra_fixture0: &str, ra_fixture1: &str, mb: MergeBehaviour) {"}, {"sha": "a49be4602dc862fcc6c9ab7fb9bc30fd6dfc3c64", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc6520010569bb5eaf3ef403db9113a743da1d55/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc6520010569bb5eaf3ef403db9113a743da1d55/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=bc6520010569bb5eaf3ef403db9113a743da1d55", "patch": "@@ -43,12 +43,12 @@ macro_rules! assert_eq_text {\n         let right = $right;\n         if left != right {\n             if left.trim() == right.trim() {\n-                eprintln!(\"Left:\\n{:?}\\n\\nRight:\\n{:?}\\n\\nWhitespace difference\\n\", left, right);\n+                std::eprintln!(\"Left:\\n{:?}\\n\\nRight:\\n{:?}\\n\\nWhitespace difference\\n\", left, right);\n             } else {\n                 let changeset = $crate::__Changeset::new(left, right, \"\\n\");\n-                eprintln!(\"Left:\\n{}\\n\\nRight:\\n{}\\n\\nDiff:\\n{}\\n\", left, right, changeset);\n+                std::eprintln!(\"Left:\\n{}\\n\\nRight:\\n{}\\n\\nDiff:\\n{}\\n\", left, right, changeset);\n             }\n-            eprintln!($($tt)*);\n+            std::eprintln!($($tt)*);\n             panic!(\"text differs\");\n         }\n     }};"}]}