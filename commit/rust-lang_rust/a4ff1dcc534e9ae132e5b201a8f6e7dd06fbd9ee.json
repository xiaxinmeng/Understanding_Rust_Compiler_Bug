{"sha": "a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZmYxZGNjNTM0ZTlhZTEzMmU1YjIwMWE4ZjZlN2RkMDZmYmQ5ZWU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-01-20T05:51:54Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-01-20T05:51:54Z"}, "message": "Mark incorrect recovered `char` literals as `TyErr` to avoid type errors", "tree": {"sha": "b0a215286a480d863d5d9ac6b295f52b0386bc58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0a215286a480d863d5d9ac6b295f52b0386bc58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee", "html_url": "https://github.com/rust-lang/rust/commit/a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9af312932baee90d260b41711f7ea95ad51bc07", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9af312932baee90d260b41711f7ea95ad51bc07", "html_url": "https://github.com/rust-lang/rust/commit/e9af312932baee90d260b41711f7ea95ad51bc07"}], "stats": {"total": 30, "additions": 26, "deletions": 4}, "files": [{"sha": "ef113b8424d2aefd262acd423f8e4d1fe6bd84bd", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee", "patch": "@@ -164,6 +164,7 @@ impl_stable_hash_for!(enum ::syntax::ast::LitIntType {\n impl_stable_hash_for_spanned!(::syntax::ast::LitKind);\n impl_stable_hash_for!(enum ::syntax::ast::LitKind {\n     Str(value, style),\n+    Err(value),\n     ByteStr(value),\n     Byte(value),\n     Char(value),"}, {"sha": "f63c3e2ff61420a4eba75b24a8fa2ae8c1266e42", "filename": "src/librustc_mir/hair/constant.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fconstant.rs?ref=a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee", "patch": "@@ -37,6 +37,14 @@ crate fn lit_to_const<'a, 'gcx, 'tcx>(\n             let id = tcx.allocate_bytes(s.as_bytes());\n             ConstValue::new_slice(Scalar::Ptr(id.into()), s.len() as u64, &tcx)\n         },\n+        LitKind::Err(ref s) => {\n+            let s = s.as_str();\n+            let id = tcx.allocate_bytes(s.as_bytes());\n+            return Ok(ty::Const {\n+                val: ConstValue::new_slice(Scalar::Ptr(id.into()), s.len() as u64, &tcx),\n+                ty: tcx.types.err,\n+            });\n+        },\n         LitKind::ByteStr(ref data) => {\n             let id = tcx.allocate_bytes(data);\n             ConstValue::Scalar(Scalar::Ptr(id.into()))"}, {"sha": "6c228670ff6ab44645c091620208fda060457097", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee", "patch": "@@ -3121,7 +3121,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 opt_ty.unwrap_or_else(\n                     || tcx.mk_float_var(self.next_float_var_id()))\n             }\n-            ast::LitKind::Bool(_) => tcx.types.bool\n+            ast::LitKind::Bool(_) => tcx.types.bool,\n+            ast::LitKind::Err(_) => tcx.types.err,\n         }\n     }\n "}, {"sha": "1180c8c8c1c2bdf1b787699af8144a65bb2818cc", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee", "patch": "@@ -1285,6 +1285,8 @@ pub enum LitKind {\n     FloatUnsuffixed(Symbol),\n     /// A boolean literal.\n     Bool(bool),\n+    /// A recovered character literal that contains mutliple `char`s, most likely a typo.\n+    Err(Symbol),\n }\n \n impl LitKind {\n@@ -1321,6 +1323,7 @@ impl LitKind {\n             | LitKind::ByteStr(..)\n             | LitKind::Byte(..)\n             | LitKind::Char(..)\n+            | LitKind::Err(..)\n             | LitKind::Int(_, LitIntType::Unsuffixed)\n             | LitKind::FloatUnsuffixed(..)\n             | LitKind::Bool(..) => true,"}, {"sha": "9c3ee0a3b023a86c576e07b4a4bd9d50c1497264", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee", "patch": "@@ -661,6 +661,7 @@ impl LitKind {\n             } else {\n                 \"false\"\n             })), false),\n+            LitKind::Err(val) => Token::Literal(token::Lit::Err(val), None),\n         }\n     }\n "}, {"sha": "9e55f359b5ec2b88edd379b0564d77b38a1193e9", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee", "patch": "@@ -466,7 +466,7 @@ crate fn lit_token(lit: token::Lit, suf: Option<Symbol>, diag: Option<(Span, &Ha\n     match lit {\n        token::Byte(i) => (true, Some(LitKind::Byte(byte_lit(&i.as_str()).0))),\n        token::Char(i) => (true, Some(LitKind::Char(char_lit(&i.as_str(), diag).0))),\n-       token::Err(i) => (true, Some(LitKind::Char(char_lit(&i.as_str(), diag).0))),\n+       token::Err(i) => (true, Some(LitKind::Err(i))),\n \n         // There are some valid suffixes for integer and float literals,\n         // so all the handling is done internally."}, {"sha": "f06e975a6d95acd436b6a9325d2442e48205379f", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee", "patch": "@@ -473,8 +473,7 @@ impl Token {\n \n             Le | EqEq | Ne | Ge | AndAnd | OrOr | Tilde | BinOpEq(..) | At | DotDotDot |\n             DotDotEq | Comma | Semi | ModSep | RArrow | LArrow | FatArrow | Pound | Dollar |\n-            Question | OpenDelim(..) | CloseDelim(..) => return None,\n-\n+            Question | OpenDelim(..) | CloseDelim(..) |\n             Literal(..) | Ident(..) | Lifetime(..) | Interpolated(..) | DocComment(..) |\n             Whitespace | Comment | Shebang(..) | Eof => return None,\n         })"}, {"sha": "383baffa266dde9e02daee5925fe5fd95d5b14d8", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee", "patch": "@@ -604,6 +604,14 @@ pub trait PrintState<'a> {\n         }\n         match lit.node {\n             ast::LitKind::Str(st, style) => self.print_string(&st.as_str(), style),\n+            ast::LitKind::Err(st) => {\n+                let st = st.as_str().escape_debug();\n+                let mut res = String::with_capacity(st.len() + 2);\n+                res.push('\\'');\n+                res.push_str(&st);\n+                res.push('\\'');\n+                self.writer().word(res)\n+            }\n             ast::LitKind::Byte(byte) => {\n                 let mut res = String::from(\"b'\");\n                 res.extend(ascii::escape_default(byte).map(|c| c as char));"}, {"sha": "f148f8e003df39eea6af5fd0574cca267292a24b", "filename": "src/libsyntax_ext/concat.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee/src%2Flibsyntax_ext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee/src%2Flibsyntax_ext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat.rs?ref=a4ff1dcc534e9ae132e5b201a8f6e7dd06fbd9ee", "patch": "@@ -23,6 +23,7 @@ pub fn expand_syntax_ext(\n         match e.node {\n             ast::ExprKind::Lit(ref lit) => match lit.node {\n                 ast::LitKind::Str(ref s, _)\n+                | ast::LitKind::Err(ref s)\n                 | ast::LitKind::Float(ref s, _)\n                 | ast::LitKind::FloatUnsuffixed(ref s) => {\n                     accumulator.push_str(&s.as_str());"}]}