{"sha": "3c5cfdf2e7e53967eb330928aaeedfbb8ea1db4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNWNmZGYyZTdlNTM5NjdlYjMzMDkyOGFhZWVkZmJiOGVhMWRiNGQ=", "commit": {"author": {"name": "Philipp Br\u00fcschweiler", "email": "blei42@gmail.com", "date": "2013-07-04T17:51:11Z"}, "committer": {"name": "Philipp Br\u00fcschweiler", "email": "blei42@gmail.com", "date": "2013-07-04T17:51:11Z"}, "message": "libsyntax: fix infinite loop when recursively including modules\n\nFixes #7276", "tree": {"sha": "93c967b5fc92afe2c322d6ffe0f367f88a634a83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93c967b5fc92afe2c322d6ffe0f367f88a634a83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c5cfdf2e7e53967eb330928aaeedfbb8ea1db4d", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c5cfdf2e7e53967eb330928aaeedfbb8ea1db4d", "html_url": "https://github.com/rust-lang/rust/commit/3c5cfdf2e7e53967eb330928aaeedfbb8ea1db4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c5cfdf2e7e53967eb330928aaeedfbb8ea1db4d/comments", "author": {"login": "Blei", "id": 52674, "node_id": "MDQ6VXNlcjUyNjc0", "avatar_url": "https://avatars.githubusercontent.com/u/52674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blei", "html_url": "https://github.com/Blei", "followers_url": "https://api.github.com/users/Blei/followers", "following_url": "https://api.github.com/users/Blei/following{/other_user}", "gists_url": "https://api.github.com/users/Blei/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blei/subscriptions", "organizations_url": "https://api.github.com/users/Blei/orgs", "repos_url": "https://api.github.com/users/Blei/repos", "events_url": "https://api.github.com/users/Blei/events{/privacy}", "received_events_url": "https://api.github.com/users/Blei/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Blei", "id": 52674, "node_id": "MDQ6VXNlcjUyNjc0", "avatar_url": "https://avatars.githubusercontent.com/u/52674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blei", "html_url": "https://github.com/Blei", "followers_url": "https://api.github.com/users/Blei/followers", "following_url": "https://api.github.com/users/Blei/following{/other_user}", "gists_url": "https://api.github.com/users/Blei/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blei/subscriptions", "organizations_url": "https://api.github.com/users/Blei/orgs", "repos_url": "https://api.github.com/users/Blei/repos", "events_url": "https://api.github.com/users/Blei/events{/privacy}", "received_events_url": "https://api.github.com/users/Blei/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd4f6bb2a2e0fe4f2f417b99301b44d12567c243", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd4f6bb2a2e0fe4f2f417b99301b44d12567c243", "html_url": "https://github.com/rust-lang/rust/commit/dd4f6bb2a2e0fe4f2f417b99301b44d12567c243"}], "stats": {"total": 62, "additions": 60, "deletions": 2}, "files": [{"sha": "67ae695508bc1923fb883f5cd35a87a5ca7bb785", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c5cfdf2e7e53967eb330928aaeedfbb8ea1db4d/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c5cfdf2e7e53967eb330928aaeedfbb8ea1db4d/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=3c5cfdf2e7e53967eb330928aaeedfbb8ea1db4d", "patch": "@@ -44,6 +44,8 @@ pub struct ParseSess {\n     cm: @codemap::CodeMap, // better be the same as the one in the reader!\n     next_id: node_id,\n     span_diagnostic: @span_handler, // better be the same as the one in the reader!\n+    /// Used to determine and report recursive mod inclusions\n+    included_mod_stack: ~[Path],\n }\n \n pub fn new_parse_sess(demitter: Option<Emitter>) -> @mut ParseSess {\n@@ -52,6 +54,7 @@ pub fn new_parse_sess(demitter: Option<Emitter>) -> @mut ParseSess {\n         cm: cm,\n         next_id: 1,\n         span_diagnostic: mk_span_handler(mk_handler(demitter), cm),\n+        included_mod_stack: ~[],\n     }\n }\n \n@@ -62,6 +65,7 @@ pub fn new_parse_sess_special_handler(sh: @span_handler,\n         cm: cm,\n         next_id: 1,\n         span_diagnostic: sh,\n+        included_mod_stack: ~[],\n     }\n }\n "}, {"sha": "611d58f852d9e800c245907df09b7329191b9799", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3c5cfdf2e7e53967eb330928aaeedfbb8ea1db4d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c5cfdf2e7e53967eb330928aaeedfbb8ea1db4d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3c5cfdf2e7e53967eb330928aaeedfbb8ea1db4d", "patch": "@@ -264,7 +264,6 @@ pub struct Parser {\n     obsolete_set: @mut HashSet<ObsoleteSyntax>,\n     /// Used to determine the path to externally loaded source files\n     mod_path_stack: @mut ~[@str],\n-\n }\n \n #[unsafe_destructor]\n@@ -3834,7 +3833,7 @@ impl Parser {\n         (id, item_static(ty, m, e), None)\n     }\n \n-    // parse a mod { ...}  item\n+    // parse a `mod <foo> { ... }` or `mod <foo>;` item\n     fn parse_item_mod(&self, outer_attrs: ~[ast::attribute]) -> item_info {\n         let id_span = *self.span;\n         let id = self.parse_ident();\n@@ -3907,13 +3906,31 @@ impl Parser {\n             prefix.push_many(path.components)\n         };\n         let full_path = full_path.normalize();\n+\n+        let maybe_i = do self.sess.included_mod_stack.iter().position_ |&p| { p == full_path };\n+        match maybe_i {\n+            Some(i) => {\n+                let stack = &self.sess.included_mod_stack;\n+                let mut err = ~\"circular modules: \";\n+                for stack.slice(i, stack.len()).iter().advance |p| {\n+                    err.push_str(p.to_str());\n+                    err.push_str(\" -> \");\n+                }\n+                err.push_str(full_path.to_str());\n+                self.span_fatal(id_sp, err);\n+            }\n+            None => ()\n+        }\n+        self.sess.included_mod_stack.push(full_path.clone());\n+\n         let p0 =\n             new_sub_parser_from_file(self.sess, copy self.cfg,\n                                      &full_path, id_sp);\n         let (inner, next) = p0.parse_inner_attrs_and_next();\n         let mod_attrs = vec::append(outer_attrs, inner);\n         let first_item_outer_attrs = next;\n         let m0 = p0.parse_mod_items(token::EOF, first_item_outer_attrs);\n+        self.sess.included_mod_stack.pop();\n         return (ast::item_mod(m0), mod_attrs);\n \n         fn cdir_path_opt(default: @str, attrs: ~[ast::attribute]) -> @str {"}, {"sha": "261fa489f610160ad0fac82864d368bd5ac8628c", "filename": "src/test/compile-fail/circular_modules_hello.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3c5cfdf2e7e53967eb330928aaeedfbb8ea1db4d/src%2Ftest%2Fcompile-fail%2Fcircular_modules_hello.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c5cfdf2e7e53967eb330928aaeedfbb8ea1db4d/src%2Ftest%2Fcompile-fail%2Fcircular_modules_hello.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcircular_modules_hello.rs?ref=3c5cfdf2e7e53967eb330928aaeedfbb8ea1db4d", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-test: this is an auxiliary file for circular-modules-main.rs\n+\n+mod circular_modules_main;\n+\n+pub fn say_hello() {\n+  println(circular_modules_main::hi_str());\n+}"}, {"sha": "06b5854f42c824f18c439cb6147188a13a72aa5a", "filename": "src/test/compile-fail/circular_modules_main.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3c5cfdf2e7e53967eb330928aaeedfbb8ea1db4d/src%2Ftest%2Fcompile-fail%2Fcircular_modules_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c5cfdf2e7e53967eb330928aaeedfbb8ea1db4d/src%2Ftest%2Fcompile-fail%2Fcircular_modules_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcircular_modules_main.rs?ref=3c5cfdf2e7e53967eb330928aaeedfbb8ea1db4d", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+mod circular_modules_hello; //~ERROR: circular modules\n+\n+pub fn hi_str() -> ~str {\n+  ~\"Hi!\"\n+}\n+\n+fn main() {\n+    circular_modules_hello::say_hello();\n+}"}]}