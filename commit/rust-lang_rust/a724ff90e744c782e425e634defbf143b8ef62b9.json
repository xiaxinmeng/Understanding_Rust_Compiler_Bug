{"sha": "a724ff90e744c782e425e634defbf143b8ef62b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MjRmZjkwZTc0NGM3ODJlNDI1ZTYzNGRlZmJmMTQzYjhlZjYyYjk=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-04-20T20:36:23Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-04-21T04:16:31Z"}, "message": "Remove BinaryHeap::{push_pop,replace}\n\n[unstable, deprecated since 1.13.0]", "tree": {"sha": "9931fcae027926f145b784074046876d5db5fc96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9931fcae027926f145b784074046876d5db5fc96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a724ff90e744c782e425e634defbf143b8ef62b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a724ff90e744c782e425e634defbf143b8ef62b9", "html_url": "https://github.com/rust-lang/rust/commit/a724ff90e744c782e425e634defbf143b8ef62b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a724ff90e744c782e425e634defbf143b8ef62b9/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a76274e533969c8458c4471fbfc1b84ba44137e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a76274e533969c8458c4471fbfc1b84ba44137e0", "html_url": "https://github.com/rust-lang/rust/commit/a76274e533969c8458c4471fbfc1b84ba44137e0"}], "stats": {"total": 124, "additions": 0, "deletions": 124}, "files": [{"sha": "4951ff7965a898890a3234fa3d292e649e0e7a27", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a724ff90e744c782e425e634defbf143b8ef62b9/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/a724ff90e744c782e425e634defbf143b8ef62b9/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=a724ff90e744c782e425e634defbf143b8ef62b9", "patch": "@@ -103,7 +103,6 @@\n     - [as_c_str](library-features/as-c-str.md)\n     - [as_unsafe_cell](library-features/as-unsafe-cell.md)\n     - [ascii_ctype](library-features/ascii-ctype.md)\n-    - [binary_heap_extras](library-features/binary-heap-extras.md)\n     - [binary_heap_peek_mut_pop](library-features/binary-heap-peek-mut-pop.md)\n     - [borrow_state](library-features/borrow-state.md)\n     - [box_heap](library-features/box-heap.md)"}, {"sha": "aa535f3b67840cd51a80aec11c38d9648be17cbd", "filename": "src/doc/unstable-book/src/library-features/binary-heap-extras.md", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a76274e533969c8458c4471fbfc1b84ba44137e0/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fbinary-heap-extras.md", "raw_url": "https://github.com/rust-lang/rust/raw/a76274e533969c8458c4471fbfc1b84ba44137e0/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fbinary-heap-extras.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fbinary-heap-extras.md?ref=a76274e533969c8458c4471fbfc1b84ba44137e0", "patch": "@@ -1,7 +0,0 @@\n-# `binary_heap_extras`\n-\n-The tracking issue for this feature is: [#28147]\n-\n-[#28147]: https://github.com/rust-lang/rust/issues/28147\n-\n-------------------------"}, {"sha": "e61d5b3169607122b149e3d554c2960b92497eed", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/a724ff90e744c782e425e634defbf143b8ef62b9/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a724ff90e744c782e425e634defbf143b8ef62b9/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=a724ff90e744c782e425e634defbf143b8ef62b9", "patch": "@@ -555,82 +555,6 @@ impl<T: Ord> BinaryHeap<T> {\n         self.sift_up(0, old_len);\n     }\n \n-    /// Pushes an item onto the binary heap, then pops the greatest item off the queue in\n-    /// an optimized fashion.\n-    ///\n-    /// # Examples\n-    ///\n-    /// Basic usage:\n-    ///\n-    /// ```\n-    /// #![feature(binary_heap_extras)]\n-    /// #![allow(deprecated)]\n-    ///\n-    /// use std::collections::BinaryHeap;\n-    /// let mut heap = BinaryHeap::new();\n-    /// heap.push(1);\n-    /// heap.push(5);\n-    ///\n-    /// assert_eq!(heap.push_pop(3), 5);\n-    /// assert_eq!(heap.push_pop(9), 9);\n-    /// assert_eq!(heap.len(), 2);\n-    /// assert_eq!(heap.peek(), Some(&3));\n-    /// ```\n-    #[unstable(feature = \"binary_heap_extras\",\n-               reason = \"needs to be audited\",\n-               issue = \"28147\")]\n-    #[rustc_deprecated(since = \"1.13.0\", reason = \"use `peek_mut` instead\")]\n-    pub fn push_pop(&mut self, mut item: T) -> T {\n-        match self.data.get_mut(0) {\n-            None => return item,\n-            Some(top) => {\n-                if *top > item {\n-                    swap(&mut item, top);\n-                } else {\n-                    return item;\n-                }\n-            }\n-        }\n-\n-        self.sift_down(0);\n-        item\n-    }\n-\n-    /// Pops the greatest item off the binary heap, then pushes an item onto the queue in\n-    /// an optimized fashion. The push is done regardless of whether the binary heap\n-    /// was empty.\n-    ///\n-    /// # Examples\n-    ///\n-    /// Basic usage:\n-    ///\n-    /// ```\n-    /// #![feature(binary_heap_extras)]\n-    /// #![allow(deprecated)]\n-    ///\n-    /// use std::collections::BinaryHeap;\n-    /// let mut heap = BinaryHeap::new();\n-    ///\n-    /// assert_eq!(heap.replace(1), None);\n-    /// assert_eq!(heap.replace(3), Some(1));\n-    /// assert_eq!(heap.len(), 1);\n-    /// assert_eq!(heap.peek(), Some(&3));\n-    /// ```\n-    #[unstable(feature = \"binary_heap_extras\",\n-               reason = \"needs to be audited\",\n-               issue = \"28147\")]\n-    #[rustc_deprecated(since = \"1.13.0\", reason = \"use `peek_mut` instead\")]\n-    pub fn replace(&mut self, mut item: T) -> Option<T> {\n-        if !self.is_empty() {\n-            swap(&mut item, &mut self.data[0]);\n-            self.sift_down(0);\n-            Some(item)\n-        } else {\n-            self.push(item);\n-            None\n-        }\n-    }\n-\n     /// Consumes the `BinaryHeap` and returns the underlying vector\n     /// in arbitrary order.\n     ///"}, {"sha": "af18cddaddb013050ce91c6c98e32e06c6ba2ebe", "filename": "src/libcollections/tests/binary_heap.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a724ff90e744c782e425e634defbf143b8ef62b9/src%2Flibcollections%2Ftests%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a724ff90e744c782e425e634defbf143b8ef62b9/src%2Flibcollections%2Ftests%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Fbinary_heap.rs?ref=a724ff90e744c782e425e634defbf143b8ef62b9", "patch": "@@ -152,36 +152,6 @@ fn test_push_unique() {\n     assert!(*heap.peek().unwrap() == box 103);\n }\n \n-#[test]\n-#[allow(deprecated)]\n-fn test_push_pop() {\n-    let mut heap = BinaryHeap::from(vec![5, 5, 2, 1, 3]);\n-    assert_eq!(heap.len(), 5);\n-    assert_eq!(heap.push_pop(6), 6);\n-    assert_eq!(heap.len(), 5);\n-    assert_eq!(heap.push_pop(0), 5);\n-    assert_eq!(heap.len(), 5);\n-    assert_eq!(heap.push_pop(4), 5);\n-    assert_eq!(heap.len(), 5);\n-    assert_eq!(heap.push_pop(1), 4);\n-    assert_eq!(heap.len(), 5);\n-}\n-\n-#[test]\n-#[allow(deprecated)]\n-fn test_replace() {\n-    let mut heap = BinaryHeap::from(vec![5, 5, 2, 1, 3]);\n-    assert_eq!(heap.len(), 5);\n-    assert_eq!(heap.replace(6).unwrap(), 5);\n-    assert_eq!(heap.len(), 5);\n-    assert_eq!(heap.replace(0).unwrap(), 6);\n-    assert_eq!(heap.len(), 5);\n-    assert_eq!(heap.replace(4).unwrap(), 5);\n-    assert_eq!(heap.len(), 5);\n-    assert_eq!(heap.replace(1).unwrap(), 4);\n-    assert_eq!(heap.len(), 5);\n-}\n-\n fn check_to_vec(mut data: Vec<i32>) {\n     let heap = BinaryHeap::from(data.clone());\n     let mut v = heap.clone().into_vec();\n@@ -227,13 +197,6 @@ fn test_empty_peek_mut() {\n     assert!(empty.peek_mut().is_none());\n }\n \n-#[test]\n-#[allow(deprecated)]\n-fn test_empty_replace() {\n-    let mut heap = BinaryHeap::new();\n-    assert!(heap.replace(5).is_none());\n-}\n-\n #[test]\n fn test_from_iter() {\n     let xs = vec![9, 8, 7, 6, 5, 4, 3, 2, 1];"}, {"sha": "9c6e31d70a541c12ac1d460ee28475aebdfab769", "filename": "src/libcollections/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a724ff90e744c782e425e634defbf143b8ef62b9/src%2Flibcollections%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a724ff90e744c782e425e634defbf143b8ef62b9/src%2Flibcollections%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Flib.rs?ref=a724ff90e744c782e425e634defbf143b8ef62b9", "patch": "@@ -10,7 +10,6 @@\n \n #![deny(warnings)]\n \n-#![feature(binary_heap_extras)]\n #![feature(binary_heap_peek_mut_pop)]\n #![feature(box_syntax)]\n #![feature(inclusive_range_syntax)]"}, {"sha": "aed6986c5fe5d380b71a1fefc1fff776e0186ebe", "filename": "src/test/run-pass/while-let.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a724ff90e744c782e425e634defbf143b8ef62b9/src%2Ftest%2Frun-pass%2Fwhile-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a724ff90e744c782e425e634defbf143b8ef62b9/src%2Ftest%2Frun-pass%2Fwhile-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-let.rs?ref=a724ff90e744c782e425e634defbf143b8ef62b9", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-#![feature(binary_heap_extras)]\n-\n use std::collections::BinaryHeap;\n \n fn make_pq() -> BinaryHeap<isize> {"}]}