{"sha": "af45d8a5bb4909e6908c4d7bba80eedcdcd7f961", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNDVkOGE1YmI0OTA5ZTY5MDhjNGQ3YmJhODBlZWRjZGNkN2Y5NjE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-13T19:08:32Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-17T00:36:55Z"}, "message": "Suggest new type param on single char ident\n\nSuggest new type parameter on single char uppercase ident even if it\ndoesn't appear in a field's type parameter.\n\nAddress comment in #72641.", "tree": {"sha": "40105e5401f40a50683d17ec752289e7cda8fcf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40105e5401f40a50683d17ec752289e7cda8fcf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af45d8a5bb4909e6908c4d7bba80eedcdcd7f961", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af45d8a5bb4909e6908c4d7bba80eedcdcd7f961", "html_url": "https://github.com/rust-lang/rust/commit/af45d8a5bb4909e6908c4d7bba80eedcdcd7f961", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af45d8a5bb4909e6908c4d7bba80eedcdcd7f961/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4606168dd508007fb1014b6ab12b27e320e07038", "url": "https://api.github.com/repos/rust-lang/rust/commits/4606168dd508007fb1014b6ab12b27e320e07038", "html_url": "https://github.com/rust-lang/rust/commit/4606168dd508007fb1014b6ab12b27e320e07038"}], "stats": {"total": 76, "additions": 61, "deletions": 15}, "files": [{"sha": "694e2ac2a36a995a85c2eeb0cb85633f6d2dc4fa", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/af45d8a5bb4909e6908c4d7bba80eedcdcd7f961/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af45d8a5bb4909e6908c4d7bba80eedcdcd7f961/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=af45d8a5bb4909e6908c4d7bba80eedcdcd7f961", "patch": "@@ -919,20 +919,45 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n         &self,\n         path: &[Segment],\n     ) -> Option<(Span, &'static str, String, Applicability)> {\n-        let ident = match path {\n-            [segment] if !segment.has_args => segment.ident,\n+        let (ident, span) = match path {\n+            [segment] if !segment.has_args => (segment.ident.to_string(), segment.ident.span),\n             _ => return None,\n         };\n-        match (\n-            self.diagnostic_metadata.current_item,\n-            self.diagnostic_metadata.currently_processing_generics,\n-        ) {\n-            (Some(Item { kind: ItemKind::Fn(..), ident, .. }), true) if ident.name == sym::main => {\n+        let mut iter = ident.chars().map(|c| c.is_uppercase());\n+        let single_uppercase_char =\n+            matches!(iter.next(), Some(true)) && matches!(iter.next(), None);\n+        if !self.diagnostic_metadata.currently_processing_generics && !single_uppercase_char {\n+            return None;\n+        }\n+        match (self.diagnostic_metadata.current_item, single_uppercase_char) {\n+            (Some(Item { kind: ItemKind::Fn(..), ident, .. }), _) if ident.name == sym::main => {\n                 // Ignore `fn main()` as we don't want to suggest `fn main<T>()`\n             }\n-            (Some(Item { kind, .. }), true) => {\n+            (\n+                Some(Item {\n+                    kind:\n+                        kind @ ItemKind::Fn(..)\n+                        | kind @ ItemKind::Enum(..)\n+                        | kind @ ItemKind::Struct(..)\n+                        | kind @ ItemKind::Union(..),\n+                    ..\n+                }),\n+                true,\n+            )\n+            | (Some(Item { kind, .. }), false) => {\n                 // Likely missing type parameter.\n                 if let Some(generics) = kind.generics() {\n+                    if span.overlaps(generics.span) {\n+                        // Avoid the following:\n+                        // error[E0405]: cannot find trait `A` in this scope\n+                        //  --> $DIR/typo-suggestion-named-underscore.rs:CC:LL\n+                        //   |\n+                        // L | fn foo<T: A>(x: T) {} // Shouldn't suggest underscore\n+                        //   |           ^- help: you might be missing a type parameter: `, A`\n+                        //   |           |\n+                        //   |           not found in this scope\n+                        return None;\n+                    }\n                     let msg = \"you might be missing a type parameter\";\n                     let (span, sugg) = if let [.., param] = &generics.params[..] {\n                         let span = if let [.., bound] = &param.bounds[..] {"}, {"sha": "53a45cf4e4f4db2763635182c1f60372cdfa9bab", "filename": "src/test/ui/associated-types/associated-types-eq-1.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/af45d8a5bb4909e6908c4d7bba80eedcdcd7f961/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af45d8a5bb4909e6908c4d7bba80eedcdcd7f961/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-1.stderr?ref=af45d8a5bb4909e6908c4d7bba80eedcdcd7f961", "patch": "@@ -4,7 +4,16 @@ error[E0412]: cannot find type `A` in this scope\n LL | fn foo2<I: Foo>(x: I) {\n    |         - similarly named type parameter `I` defined here\n LL |     let _: A = x.boo();\n-   |            ^ help: a type parameter with a similar name exists: `I`\n+   |            ^\n+   |\n+help: a type parameter with a similar name exists\n+   |\n+LL |     let _: I = x.boo();\n+   |            ^\n+help: you might be missing a type parameter\n+   |\n+LL | fn foo2<I: Foo, A>(x: I) {\n+   |               ^^^\n \n error: aborting due to previous error\n "}, {"sha": "4cbfe58d357038ac3e4d6157ea6d60c1cb41df2b", "filename": "src/test/ui/suggestions/type-not-found-in-adt-field.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af45d8a5bb4909e6908c4d7bba80eedcdcd7f961/src%2Ftest%2Fui%2Fsuggestions%2Ftype-not-found-in-adt-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af45d8a5bb4909e6908c4d7bba80eedcdcd7f961/src%2Ftest%2Fui%2Fsuggestions%2Ftype-not-found-in-adt-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-not-found-in-adt-field.rs?ref=af45d8a5bb4909e6908c4d7bba80eedcdcd7f961", "patch": "@@ -1,5 +1,9 @@\n-struct S {\n-    m: Vec<Hashmap<String, ()>>, //~ ERROR cannot find type `Hashmap` in this scope\n+struct Struct {\n+    m: Vec<Someunknownname<String, ()>>, //~ ERROR cannot find type `Someunknownname` in this scope\n+    //~^ NOTE not found in this scope\n+}\n+struct OtherStruct { //~ HELP you might be missing a type parameter\n+    m: K, //~ ERROR cannot find type `K` in this scope\n     //~^ NOTE not found in this scope\n }\n fn main() {}"}, {"sha": "e990fb5ba12107c67dbe22e3abdc2259a99cddb5", "filename": "src/test/ui/suggestions/type-not-found-in-adt-field.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/af45d8a5bb4909e6908c4d7bba80eedcdcd7f961/src%2Ftest%2Fui%2Fsuggestions%2Ftype-not-found-in-adt-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af45d8a5bb4909e6908c4d7bba80eedcdcd7f961/src%2Ftest%2Fui%2Fsuggestions%2Ftype-not-found-in-adt-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-not-found-in-adt-field.stderr?ref=af45d8a5bb4909e6908c4d7bba80eedcdcd7f961", "patch": "@@ -1,9 +1,17 @@\n-error[E0412]: cannot find type `Hashmap` in this scope\n+error[E0412]: cannot find type `Someunknownname` in this scope\n   --> $DIR/type-not-found-in-adt-field.rs:2:12\n    |\n-LL |     m: Vec<Hashmap<String, ()>>,\n-   |            ^^^^^^^ not found in this scope\n+LL |     m: Vec<Someunknownname<String, ()>>,\n+   |            ^^^^^^^^^^^^^^^ not found in this scope\n \n-error: aborting due to previous error\n+error[E0412]: cannot find type `K` in this scope\n+  --> $DIR/type-not-found-in-adt-field.rs:6:8\n+   |\n+LL | struct OtherStruct {\n+   |                   - help: you might be missing a type parameter: `<K>`\n+LL |     m: K,\n+   |        ^ not found in this scope\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0412`."}]}