{"sha": "a3d6905053ad60e836717976e6e4d38de67888f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZDY5MDUwNTNhZDYwZTgzNjcxNzk3NmU2ZTRkMzhkZTY3ODg4Zjk=", "commit": {"author": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-06-04T12:37:20Z"}, "committer": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-06-30T09:18:33Z"}, "message": "Force warnings even when can_emit_warnings == false", "tree": {"sha": "449121ebebeb9cf0593c2fc3e883d18b337a9e6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/449121ebebeb9cf0593c2fc3e883d18b337a9e6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3d6905053ad60e836717976e6e4d38de67888f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3d6905053ad60e836717976e6e4d38de67888f9", "html_url": "https://github.com/rust-lang/rust/commit/a3d6905053ad60e836717976e6e4d38de67888f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3d6905053ad60e836717976e6e4d38de67888f9/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e98897e5dc9898707bf4331c43b2e76ab7e282fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/e98897e5dc9898707bf4331c43b2e76ab7e282fe", "html_url": "https://github.com/rust-lang/rust/commit/e98897e5dc9898707bf4331c43b2e76ab7e282fe"}], "stats": {"total": 62, "additions": 54, "deletions": 8}, "files": [{"sha": "2253007ce30276928bd9a74db9ee4a6621436dd6", "filename": "compiler/rustc_errors/src/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a3d6905053ad60e836717976e6e4d38de67888f9/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d6905053ad60e836717976e6e4d38de67888f9/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs?ref=a3d6905053ad60e836717976e6e4d38de67888f9", "patch": "@@ -145,8 +145,9 @@ impl AnnotateSnippetEmitterWriter {\n                 title: Some(Annotation {\n                     label: Some(&message),\n                     id: code.as_ref().map(|c| match c {\n-                        DiagnosticId::Error(val)\n-                        | DiagnosticId::Lint { name: val, has_future_breakage: _ } => val.as_str(),\n+                        DiagnosticId::Error(val) | DiagnosticId::Lint { name: val, .. } => {\n+                            val.as_str()\n+                        }\n                     }),\n                     annotation_type: annotation_type_for_level(*level),\n                 }),"}, {"sha": "45661ac15623f8bc61f6e632887a73c098c123d7", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a3d6905053ad60e836717976e6e4d38de67888f9/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d6905053ad60e836717976e6e4d38de67888f9/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=a3d6905053ad60e836717976e6e4d38de67888f9", "patch": "@@ -29,7 +29,7 @@ pub struct Diagnostic {\n #[derive(Clone, Debug, PartialEq, Eq, Hash, Encodable, Decodable)]\n pub enum DiagnosticId {\n     Error(String),\n-    Lint { name: String, has_future_breakage: bool },\n+    Lint { name: String, has_future_breakage: bool, is_force_warn: bool },\n }\n \n /// A \"sub\"-diagnostic attached to a parent diagnostic.\n@@ -109,6 +109,13 @@ impl Diagnostic {\n         }\n     }\n \n+    pub fn is_force_warn(&self) -> bool {\n+        match self.code {\n+            Some(DiagnosticId::Lint { is_force_warn, .. }) => is_force_warn,\n+            _ => false,\n+        }\n+    }\n+\n     /// Cancel the diagnostic (a structured diagnostic must either be emitted or\n     /// canceled or it will panic when dropped).\n     pub fn cancel(&mut self) {"}, {"sha": "485e7564587ea62925f834e6626cf5a8c476ecab", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3d6905053ad60e836717976e6e4d38de67888f9/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d6905053ad60e836717976e6e4d38de67888f9/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=a3d6905053ad60e836717976e6e4d38de67888f9", "patch": "@@ -559,7 +559,7 @@ impl DiagnosticCode {\n         s.map(|s| {\n             let s = match s {\n                 DiagnosticId::Error(s) => s,\n-                DiagnosticId::Lint { name, has_future_breakage: _ } => name,\n+                DiagnosticId::Lint { name, .. } => name,\n             };\n             let je_result =\n                 je.registry.as_ref().map(|registry| registry.try_find_description(&s)).unwrap();"}, {"sha": "c5399282a1e1a0f4f6860b774855438b47a944ff", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3d6905053ad60e836717976e6e4d38de67888f9/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d6905053ad60e836717976e6e4d38de67888f9/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=a3d6905053ad60e836717976e6e4d38de67888f9", "patch": "@@ -802,7 +802,10 @@ impl HandlerInner {\n             self.future_breakage_diagnostics.push(diagnostic.clone());\n         }\n \n-        if diagnostic.level == Warning && !self.flags.can_emit_warnings {\n+        if diagnostic.level == Warning\n+            && !self.flags.can_emit_warnings\n+            && !diagnostic.is_force_warn()\n+        {\n             if diagnostic.has_future_breakage() {\n                 (*TRACK_DIAGNOSTICS)(diagnostic);\n             }\n@@ -874,7 +877,7 @@ impl HandlerInner {\n \n         match (errors.len(), warnings.len()) {\n             (0, 0) => return,\n-            (0, _) => self.emit_diagnostic(&Diagnostic::new(Level::Warning, &warnings)),\n+            (0, _) => self.emitter.emit_diagnostic(&Diagnostic::new(Level::Warning, &warnings)),\n             (_, 0) => {\n                 let _ = self.fatal(&errors);\n             }"}, {"sha": "71cf5b2249c385b308178669b13c466b7f529e1e", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a3d6905053ad60e836717976e6e4d38de67888f9/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d6905053ad60e836717976e6e4d38de67888f9/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=a3d6905053ad60e836717976e6e4d38de67888f9", "patch": "@@ -246,6 +246,9 @@ pub fn struct_lint_level<'s, 'd>(\n         let has_future_breakage =\n             future_incompatible.map_or(false, |incompat| incompat.future_breakage.is_some());\n \n+        let is_force_warn = matches!(level, Level::ForceWarn)\n+            || matches!(src, LintLevelSource::CommandLine(_, Level::ForceWarn));\n+\n         let mut err = match (level, span) {\n             (Level::Allow, span) => {\n                 if has_future_breakage {\n@@ -254,6 +257,16 @@ pub fn struct_lint_level<'s, 'd>(\n                     } else {\n                         sess.struct_allow(\"\")\n                     }\n+                } else if is_force_warn {\n+                    let mut err = if let Some(span) = span {\n+                        sess.struct_span_warn(span, \"\")\n+                    } else {\n+                        sess.struct_warn(\"\")\n+                    };\n+                    // Ensure force-warn warns even if the diagnostic has\n+                    // been canceled for reasons like `--cap-lints`\n+                    err.level = rustc_errors::Level::Warning;\n+                    err\n                 } else {\n                     return;\n                 }\n@@ -349,7 +362,7 @@ pub fn struct_lint_level<'s, 'd>(\n             }\n         }\n \n-        err.code(DiagnosticId::Lint { name, has_future_breakage });\n+        err.code(DiagnosticId::Lint { name, has_future_breakage, is_force_warn });\n \n         if let Some(future_incompatible) = future_incompatible {\n             let explanation = if lint_id == LintId::of(builtin::UNSTABLE_NAME_COLLISIONS) {"}, {"sha": "2bcb7c94d535075429853ae60f83baa61bc5db71", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3d6905053ad60e836717976e6e4d38de67888f9/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d6905053ad60e836717976e6e4d38de67888f9/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=a3d6905053ad60e836717976e6e4d38de67888f9", "patch": "@@ -323,7 +323,7 @@ impl Session {\n             .into_iter()\n             .map(|diag| {\n                 let lint_name = match &diag.code {\n-                    Some(DiagnosticId::Lint { name, has_future_breakage: true }) => name,\n+                    Some(DiagnosticId::Lint { name, has_future_breakage: true, .. }) => name,\n                     _ => panic!(\"Unexpected code in diagnostic {:?}\", diag),\n                 };\n                 let lint = lint_store.name_to_lint(&lint_name);"}, {"sha": "e364897ec4ecb3e30328f39ebedc99a482cb9dd2", "filename": "src/test/ui/lint/force-warn/force-warns-cap-lints.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a3d6905053ad60e836717976e6e4d38de67888f9/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warns-cap-lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d6905053ad60e836717976e6e4d38de67888f9/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warns-cap-lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warns-cap-lints.rs?ref=a3d6905053ad60e836717976e6e4d38de67888f9", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: --cap-lints allow  --force-warns bare_trait_objects -Zunstable-options\n+// check-pass\n+\n+pub trait SomeTrait {}\n+\n+pub fn function(_x: Box<SomeTrait>) {}\n+//~^ WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this is accepted in the current edition\n+\n+fn main() {}"}, {"sha": "73971e9d4e505ccd4ef1e515514c955c2927d464", "filename": "src/test/ui/lint/force-warn/force-warns-cap-lints.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a3d6905053ad60e836717976e6e4d38de67888f9/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warns-cap-lints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3d6905053ad60e836717976e6e4d38de67888f9/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warns-cap-lints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warns-cap-lints.stderr?ref=a3d6905053ad60e836717976e6e4d38de67888f9", "patch": "@@ -0,0 +1,12 @@\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/force-warns-cap-lints.rs:6:25\n+   |\n+LL | pub fn function(_x: Box<SomeTrait>) {}\n+   |                         ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n+   |\n+   = note: requested on the command line with `--force-warns bare-trait-objects`\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+\n+warning: 1 warning emitted\n+"}]}