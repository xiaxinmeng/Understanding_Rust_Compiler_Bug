{"sha": "9e966ad3dc4d9223db9683b524f43d084909e0c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllOTY2YWQzZGM0ZDkyMjNkYjk2ODNiNTI0ZjQzZDA4NDkwOWUwYzY=", "commit": {"author": {"name": "Florian Hartwig", "email": "florian.j.hartwig@gmail.com", "date": "2017-10-29T14:40:09Z"}, "committer": {"name": "Florian Hartwig", "email": "florian.j.hartwig@gmail.com", "date": "2017-10-29T14:40:09Z"}, "message": "Fix references to zero_memory and copy_memory in ptr docs", "tree": {"sha": "7112f1c75f38a721cb77023d0510a42a16c99aef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7112f1c75f38a721cb77023d0510a42a16c99aef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e966ad3dc4d9223db9683b524f43d084909e0c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e966ad3dc4d9223db9683b524f43d084909e0c6", "html_url": "https://github.com/rust-lang/rust/commit/9e966ad3dc4d9223db9683b524f43d084909e0c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e966ad3dc4d9223db9683b524f43d084909e0c6/comments", "author": {"login": "fhartwig", "id": 83271, "node_id": "MDQ6VXNlcjgzMjcx", "avatar_url": "https://avatars.githubusercontent.com/u/83271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhartwig", "html_url": "https://github.com/fhartwig", "followers_url": "https://api.github.com/users/fhartwig/followers", "following_url": "https://api.github.com/users/fhartwig/following{/other_user}", "gists_url": "https://api.github.com/users/fhartwig/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhartwig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhartwig/subscriptions", "organizations_url": "https://api.github.com/users/fhartwig/orgs", "repos_url": "https://api.github.com/users/fhartwig/repos", "events_url": "https://api.github.com/users/fhartwig/events{/privacy}", "received_events_url": "https://api.github.com/users/fhartwig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhartwig", "id": 83271, "node_id": "MDQ6VXNlcjgzMjcx", "avatar_url": "https://avatars.githubusercontent.com/u/83271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhartwig", "html_url": "https://github.com/fhartwig", "followers_url": "https://api.github.com/users/fhartwig/followers", "following_url": "https://api.github.com/users/fhartwig/following{/other_user}", "gists_url": "https://api.github.com/users/fhartwig/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhartwig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhartwig/subscriptions", "organizations_url": "https://api.github.com/users/fhartwig/orgs", "repos_url": "https://api.github.com/users/fhartwig/repos", "events_url": "https://api.github.com/users/fhartwig/events{/privacy}", "received_events_url": "https://api.github.com/users/fhartwig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d475a28dfa5399600c9b4121193fa57786ab88b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d475a28dfa5399600c9b4121193fa57786ab88b", "html_url": "https://github.com/rust-lang/rust/commit/7d475a28dfa5399600c9b4121193fa57786ab88b"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "5cd672b03ffc9d1901364eae4246ad76789547cf", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9e966ad3dc4d9223db9683b524f43d084909e0c6/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e966ad3dc4d9223db9683b524f43d084909e0c6/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=9e966ad3dc4d9223db9683b524f43d084909e0c6", "patch": "@@ -228,7 +228,7 @@ pub unsafe fn replace<T>(dest: *mut T, mut src: T) -> T {\n /// moves the value out of `src` without preventing further usage of `src`.\n /// If `T` is not `Copy`, then care must be taken to ensure that the value at\n /// `src` is not used before the data is overwritten again (e.g. with `write`,\n-/// `zero_memory`, or `copy_memory`). Note that `*src = foo` counts as a use\n+/// `write_bytes`, or `copy`). Note that `*src = foo` counts as a use\n /// because it will attempt to drop the value previously at `*src`.\n ///\n /// The pointer must be aligned; use `read_unaligned` if that is not the case.\n@@ -264,7 +264,7 @@ pub unsafe fn read<T>(src: *const T) -> T {\n /// moves the value out of `src` without preventing further usage of `src`.\n /// If `T` is not `Copy`, then care must be taken to ensure that the value at\n /// `src` is not used before the data is overwritten again (e.g. with `write`,\n-/// `zero_memory`, or `copy_memory`). Note that `*src = foo` counts as a use\n+/// `write_bytes`, or `copy`). Note that `*src = foo` counts as a use\n /// because it will attempt to drop the value previously at `*src`.\n ///\n /// # Examples\n@@ -397,7 +397,7 @@ pub unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n /// moves the value out of `src` without preventing further usage of `src`.\n /// If `T` is not `Copy`, then care must be taken to ensure that the value at\n /// `src` is not used before the data is overwritten again (e.g. with `write`,\n-/// `zero_memory`, or `copy_memory`). Note that `*src = foo` counts as a use\n+/// `write_bytes`, or `copy`). Note that `*src = foo` counts as a use\n /// because it will attempt to drop the value previously at `*src`.\n ///\n /// # Examples\n@@ -871,7 +871,7 @@ impl<T: ?Sized> *const T {\n     /// moves the value out of `self` without preventing further usage of `self`.\n     /// If `T` is not `Copy`, then care must be taken to ensure that the value at\n     /// `self` is not used before the data is overwritten again (e.g. with `write`,\n-    /// `zero_memory`, or `copy_memory`). Note that `*self = foo` counts as a use\n+    /// `write_bytes`, or `copy`). Note that `*self = foo` counts as a use\n     /// because it will attempt to drop the value previously at `*self`.\n     ///\n     /// The pointer must be aligned; use `read_unaligned` if that is not the case.\n@@ -925,7 +925,7 @@ impl<T: ?Sized> *const T {\n     /// moves the value out of `self` without preventing further usage of `self`.\n     /// If `T` is not `Copy`, then care must be taken to ensure that the value at\n     /// `self` is not used before the data is overwritten again (e.g. with `write`,\n-    /// `zero_memory`, or `copy_memory`). Note that `*self = foo` counts as a use\n+    /// `write_bytes`, or `copy`). Note that `*self = foo` counts as a use\n     /// because it will attempt to drop the value previously at `*self`.\n     ///\n     /// # Examples\n@@ -961,7 +961,7 @@ impl<T: ?Sized> *const T {\n     /// moves the value out of `self` without preventing further usage of `self`.\n     /// If `T` is not `Copy`, then care must be taken to ensure that the value at\n     /// `self` is not used before the data is overwritten again (e.g. with `write`,\n-    /// `zero_memory`, or `copy_memory`). Note that `*self = foo` counts as a use\n+    /// `write_bytes`, or `copy`). Note that `*self = foo` counts as a use\n     /// because it will attempt to drop the value previously at `*self`.\n     ///\n     /// # Examples\n@@ -1569,7 +1569,7 @@ impl<T: ?Sized> *mut T {\n     /// moves the value out of `self` without preventing further usage of `self`.\n     /// If `T` is not `Copy`, then care must be taken to ensure that the value at\n     /// `self` is not used before the data is overwritten again (e.g. with `write`,\n-    /// `zero_memory`, or `copy_memory`). Note that `*self = foo` counts as a use\n+    /// `write_bytes`, or `copy`). Note that `*self = foo` counts as a use\n     /// because it will attempt to drop the value previously at `*self`.\n     ///\n     /// The pointer must be aligned; use `read_unaligned` if that is not the case.\n@@ -1623,7 +1623,7 @@ impl<T: ?Sized> *mut T {\n     /// moves the value out of `self` without preventing further usage of `self`.\n     /// If `T` is not `Copy`, then care must be taken to ensure that the value at\n     /// `src` is not used before the data is overwritten again (e.g. with `write`,\n-    /// `zero_memory`, or `copy_memory`). Note that `*self = foo` counts as a use\n+    /// `write_bytes`, or `copy`). Note that `*self = foo` counts as a use\n     /// because it will attempt to drop the value previously at `*self`.\n     ///\n     /// # Examples\n@@ -1659,7 +1659,7 @@ impl<T: ?Sized> *mut T {\n     /// moves the value out of `self` without preventing further usage of `self`.\n     /// If `T` is not `Copy`, then care must be taken to ensure that the value at\n     /// `self` is not used before the data is overwritten again (e.g. with `write`,\n-    /// `zero_memory`, or `copy_memory`). Note that `*self = foo` counts as a use\n+    /// `write_bytes`, or `copy`). Note that `*self = foo` counts as a use\n     /// because it will attempt to drop the value previously at `*self`.\n     ///\n     /// # Examples"}]}