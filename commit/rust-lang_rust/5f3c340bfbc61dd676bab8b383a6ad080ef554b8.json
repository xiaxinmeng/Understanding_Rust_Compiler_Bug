{"sha": "5f3c340bfbc61dd676bab8b383a6ad080ef554b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmM2MzNDBiZmJjNjFkZDY3NmJhYjhiMzgzYTZhZDA4MGVmNTU0Yjg=", "commit": {"author": {"name": "Ryan Cumming", "email": "etaoins@gmail.com", "date": "2018-01-17T09:41:24Z"}, "committer": {"name": "Ryan Cumming", "email": "etaoins@gmail.com", "date": "2018-01-18T09:01:24Z"}, "message": "Lint for trait methods without bodies\n\nAs discussed in rust-lang/rust#47475 the #[inline] attribute is\ncurrently allowed on trait methods without bodies (i.e. without a\ndefault implementation). This is misleading as it could be interpreted\nas affecting the implementations of the trait method. Add a lint for any\nuse of #[inline] on a trait method without a body.\n\nFixes rust-lang/rust#47475", "tree": {"sha": "8b23ecd12923dfcda2a2f8e9fb307ec3f3140ddc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b23ecd12923dfcda2a2f8e9fb307ec3f3140ddc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f3c340bfbc61dd676bab8b383a6ad080ef554b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f3c340bfbc61dd676bab8b383a6ad080ef554b8", "html_url": "https://github.com/rust-lang/rust/commit/5f3c340bfbc61dd676bab8b383a6ad080ef554b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f3c340bfbc61dd676bab8b383a6ad080ef554b8/comments", "author": {"login": "etaoins", "id": 687534, "node_id": "MDQ6VXNlcjY4NzUzNA==", "avatar_url": "https://avatars.githubusercontent.com/u/687534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/etaoins", "html_url": "https://github.com/etaoins", "followers_url": "https://api.github.com/users/etaoins/followers", "following_url": "https://api.github.com/users/etaoins/following{/other_user}", "gists_url": "https://api.github.com/users/etaoins/gists{/gist_id}", "starred_url": "https://api.github.com/users/etaoins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/etaoins/subscriptions", "organizations_url": "https://api.github.com/users/etaoins/orgs", "repos_url": "https://api.github.com/users/etaoins/repos", "events_url": "https://api.github.com/users/etaoins/events{/privacy}", "received_events_url": "https://api.github.com/users/etaoins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "etaoins", "id": 687534, "node_id": "MDQ6VXNlcjY4NzUzNA==", "avatar_url": "https://avatars.githubusercontent.com/u/687534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/etaoins", "html_url": "https://github.com/etaoins", "followers_url": "https://api.github.com/users/etaoins/followers", "following_url": "https://api.github.com/users/etaoins/following{/other_user}", "gists_url": "https://api.github.com/users/etaoins/gists{/gist_id}", "starred_url": "https://api.github.com/users/etaoins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/etaoins/subscriptions", "organizations_url": "https://api.github.com/users/etaoins/orgs", "repos_url": "https://api.github.com/users/etaoins/repos", "events_url": "https://api.github.com/users/etaoins/events{/privacy}", "received_events_url": "https://api.github.com/users/etaoins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a5f25aab3976f73f4a092295da626b30e3c7445", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a5f25aab3976f73f4a092295da626b30e3c7445", "html_url": "https://github.com/rust-lang/rust/commit/9a5f25aab3976f73f4a092295da626b30e3c7445"}], "stats": {"total": 97, "additions": 97, "deletions": 0}, "files": [{"sha": "7af39eda8ec10291c0e03feb8fcfe54030687c9e", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f3c340bfbc61dd676bab8b383a6ad080ef554b8/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/5f3c340bfbc61dd676bab8b383a6ad080ef554b8/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=5f3c340bfbc61dd676bab8b383a6ad080ef554b8", "patch": "@@ -583,6 +583,7 @@ All notable changes to this project will be documented in this file.\n [`ineffective_bit_mask`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#ineffective_bit_mask\n [`infinite_iter`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#infinite_iter\n [`inline_always`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#inline_always\n+[`inline_fn_without_body`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#inline_fn_without_body\n [`int_plus_one`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#int_plus_one\n [`integer_arithmetic`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#integer_arithmetic\n [`invalid_ref`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#invalid_ref"}, {"sha": "f2b7560867499c8444997b815e5f41fbc7d76567", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/5f3c340bfbc61dd676bab8b383a6ad080ef554b8/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3c340bfbc61dd676bab8b383a6ad080ef554b8/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=5f3c340bfbc61dd676bab8b383a6ad080ef554b8", "patch": "@@ -0,0 +1,61 @@\n+//! checks for `#[inline]` on trait methods without bodies\n+\n+use rustc::lint::*;\n+use rustc::hir::*;\n+use syntax::ast::{Attribute, Name};\n+use utils::span_lint;\n+\n+/// **What it does:** Checks for `#[inline]` on trait methods without bodies\n+///\n+/// **Why is this bad?** Only implementations of trait methods may be inlined.\n+/// The inline attribute is ignored for trait methods without bodies.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// trait Animal {\n+///     #[inline]\n+///     fn name(&self) -> &'static str;\n+/// }\n+/// ```\n+declare_lint! {\n+    pub INLINE_FN_WITHOUT_BODY,\n+    Warn,\n+    \"use of `#[inline]` on trait methods without bodies\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct Pass;\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(INLINE_FN_WITHOUT_BODY)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem) {\n+        match item.node {\n+            TraitItemKind::Method(_, TraitMethod::Required(_)) => {\n+                check_attrs(cx, &item.name, &item.attrs);\n+            },\n+            _ => {},\n+        }\n+    }\n+}\n+\n+fn check_attrs(cx: &LateContext, name: &Name, attrs: &[Attribute]) {\n+    for attr in attrs {\n+        if attr.name().map_or(true, |n| n != \"inline\") {\n+            continue;\n+        }\n+\n+        span_lint(\n+            cx,\n+            INLINE_FN_WITHOUT_BODY,\n+            attr.span,\n+            &format!(\"use of `#[inline]` on trait method `{}` which has no body\", name),\n+        );\n+    }\n+}"}, {"sha": "68ef021e76dc8e5cdf84bca49ca9c4256d5f63f5", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f3c340bfbc61dd676bab8b383a6ad080ef554b8/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3c340bfbc61dd676bab8b383a6ad080ef554b8/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=5f3c340bfbc61dd676bab8b383a6ad080ef554b8", "patch": "@@ -109,6 +109,7 @@ pub mod identity_op;\n pub mod if_let_redundant_pattern_matching;\n pub mod if_not_else;\n pub mod infinite_iter;\n+pub mod inline_fn_without_body;\n pub mod int_plus_one;\n pub mod invalid_ref;\n pub mod is_unit_expr;\n@@ -359,6 +360,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box use_self::UseSelf);\n     reg.register_late_lint_pass(box bytecount::ByteCount);\n     reg.register_late_lint_pass(box infinite_iter::Pass);\n+    reg.register_late_lint_pass(box inline_fn_without_body::Pass);\n     reg.register_late_lint_pass(box invalid_ref::InvalidRef);\n     reg.register_late_lint_pass(box identity_conversion::IdentityConversion::default());\n     reg.register_late_lint_pass(box types::ImplicitHasher);\n@@ -477,6 +479,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         identity_op::IDENTITY_OP,\n         if_let_redundant_pattern_matching::IF_LET_REDUNDANT_PATTERN_MATCHING,\n         infinite_iter::INFINITE_ITER,\n+        inline_fn_without_body::INLINE_FN_WITHOUT_BODY,\n         invalid_ref::INVALID_REF,\n         is_unit_expr::UNIT_EXPR,\n         large_enum_variant::LARGE_ENUM_VARIANT,"}, {"sha": "c5f9f914d330b3c6b79f628870eb5a91bc944bcb", "filename": "main", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5f3c340bfbc61dd676bab8b383a6ad080ef554b8/main", "raw_url": "https://github.com/rust-lang/rust/raw/5f3c340bfbc61dd676bab8b383a6ad080ef554b8/main", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/main?ref=5f3c340bfbc61dd676bab8b383a6ad080ef554b8"}, {"sha": "aa50d7c96c6f593c352a880f596c4e8454d97bfe", "filename": "tests/ui/inline_fn_without_body.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5f3c340bfbc61dd676bab8b383a6ad080ef554b8/tests%2Fui%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3c340bfbc61dd676bab8b383a6ad080ef554b8/tests%2Fui%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finline_fn_without_body.rs?ref=5f3c340bfbc61dd676bab8b383a6ad080ef554b8", "patch": "@@ -0,0 +1,18 @@\n+\n+\n+\n+#![warn(inline_fn_without_body)]\n+#![allow(inline_always)]\n+trait Foo {\n+    #[inline]\n+    fn default_inline();\n+\n+    #[inline(always)]\n+    fn always_inline();\n+\n+    #[inline]\n+    fn has_body() {\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "1f4b4afb264694cb3f4104af240c60fb79b003f5", "filename": "tests/ui/inline_fn_without_body.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5f3c340bfbc61dd676bab8b383a6ad080ef554b8/tests%2Fui%2Finline_fn_without_body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f3c340bfbc61dd676bab8b383a6ad080ef554b8/tests%2Fui%2Finline_fn_without_body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finline_fn_without_body.stderr?ref=5f3c340bfbc61dd676bab8b383a6ad080ef554b8", "patch": "@@ -0,0 +1,14 @@\n+error: use of `#[inline]` on trait method `default_inline` which has no body\n+ --> $DIR/inline_fn_without_body.rs:7:5\n+  |\n+7 |     #[inline]\n+  |     ^^^^^^^^^\n+  |\n+  = note: `-D inline-fn-without-body` implied by `-D warnings`\n+\n+error: use of `#[inline]` on trait method `always_inline` which has no body\n+  --> $DIR/inline_fn_without_body.rs:10:5\n+   |\n+10 |     #[inline(always)]\n+   |     ^^^^^^^^^^^^^^^^^\n+"}]}