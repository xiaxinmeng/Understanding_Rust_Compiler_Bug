{"sha": "ce289c6c9911c7ea55b7f30b125d3c38ed359da4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMjg5YzZjOTkxMWM3ZWE1NWI3ZjMwYjEyNWQzYzM4ZWQzNTlkYTQ=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2019-01-18T22:37:52Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2019-01-25T17:20:38Z"}, "message": "Resolve breakage", "tree": {"sha": "f69e5e7e9233b1afb5cd865009d14ff62a4ab9ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f69e5e7e9233b1afb5cd865009d14ff62a4ab9ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce289c6c9911c7ea55b7f30b125d3c38ed359da4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce289c6c9911c7ea55b7f30b125d3c38ed359da4", "html_url": "https://github.com/rust-lang/rust/commit/ce289c6c9911c7ea55b7f30b125d3c38ed359da4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce289c6c9911c7ea55b7f30b125d3c38ed359da4/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89e34d3e32bcb8bc52f3b9deeae7034d7f045388", "url": "https://api.github.com/repos/rust-lang/rust/commits/89e34d3e32bcb8bc52f3b9deeae7034d7f045388", "html_url": "https://github.com/rust-lang/rust/commit/89e34d3e32bcb8bc52f3b9deeae7034d7f045388"}], "stats": {"total": 107, "additions": 46, "deletions": 61}, "files": [{"sha": "e6bc7bca46bc94f0e77166935e53f6e710bf7692", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ce289c6c9911c7ea55b7f30b125d3c38ed359da4/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce289c6c9911c7ea55b7f30b125d3c38ed359da4/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=ce289c6c9911c7ea55b7f30b125d3c38ed359da4", "patch": "@@ -144,6 +144,28 @@ pub fn non_lazy_bind(sess: &Session, llfn: &'ll Value) {\n     }\n }\n \n+pub(crate) fn default_optimisation_attrs(sess: &Session, llfn: &'ll Value) {\n+    match sess.opts.optimize {\n+        OptLevel::Size => {\n+            llvm::Attribute::MinSize.unapply_llfn(Function, llfn);\n+            llvm::Attribute::OptimizeForSize.apply_llfn(Function, llfn);\n+            llvm::Attribute::OptimizeNone.unapply_llfn(Function, llfn);\n+        },\n+        OptLevel::SizeMin => {\n+            llvm::Attribute::MinSize.apply_llfn(Function, llfn);\n+            llvm::Attribute::OptimizeForSize.apply_llfn(Function, llfn);\n+            llvm::Attribute::OptimizeNone.unapply_llfn(Function, llfn);\n+        }\n+        OptLevel::No => {\n+            llvm::Attribute::MinSize.unapply_llfn(Function, llfn);\n+            llvm::Attribute::OptimizeForSize.unapply_llfn(Function, llfn);\n+            llvm::Attribute::OptimizeNone.unapply_llfn(Function, llfn);\n+        }\n+        _ => {}\n+    }\n+}\n+\n+\n /// Composite function which sets LLVM attributes for function depending on its AST (`#[attribute]`)\n /// attributes.\n pub fn from_fn_attrs(\n@@ -157,24 +179,7 @@ pub fn from_fn_attrs(\n \n     match codegen_fn_attrs.optimize {\n         OptimizeAttr::None => {\n-            match cx.tcx.sess.opts.optimize {\n-                OptLevel::Size => {\n-                    llvm::Attribute::MinSize.unapply_llfn(Function, llfn);\n-                    llvm::Attribute::OptimizeForSize.apply_llfn(Function, llfn);\n-                    llvm::Attribute::OptimizeNone.unapply_llfn(Function, llfn);\n-                },\n-                OptLevel::SizeMin => {\n-                    llvm::Attribute::MinSize.apply_llfn(Function, llfn);\n-                    llvm::Attribute::OptimizeForSize.apply_llfn(Function, llfn);\n-                    llvm::Attribute::OptimizeNone.unapply_llfn(Function, llfn);\n-                }\n-                OptLevel::No => {\n-                    llvm::Attribute::MinSize.unapply_llfn(Function, llfn);\n-                    llvm::Attribute::OptimizeForSize.unapply_llfn(Function, llfn);\n-                    llvm::Attribute::OptimizeNone.unapply_llfn(Function, llfn);\n-                }\n-                _ => {}\n-            }\n+            default_optimisation_attrs(cx.tcx.sess, llfn);\n         }\n         OptimizeAttr::Speed => {\n             llvm::Attribute::MinSize.unapply_llfn(Function, llfn);"}, {"sha": "6b7ee16cb71b40e061a80022551f4f34dc79c8bf", "filename": "src/librustc_codegen_llvm/declare.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ce289c6c9911c7ea55b7f30b125d3c38ed359da4/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce289c6c9911c7ea55b7f30b125d3c38ed359da4/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdeclare.rs?ref=ce289c6c9911c7ea55b7f30b125d3c38ed359da4", "patch": "@@ -15,7 +15,7 @@ use llvm;\n use llvm::AttributePlace::Function;\n use rustc::ty::{self, PolyFnSig};\n use rustc::ty::layout::LayoutOf;\n-use rustc::session::config::{Sanitizer, OptLevel};\n+use rustc::session::config::Sanitizer;\n use rustc_data_structures::small_c_str::SmallCStr;\n use abi::{FnType, FnTypeExt};\n use attributes;\n@@ -65,28 +65,8 @@ fn declare_raw_fn(\n         }\n     }\n \n-    // FIXME(opt): this is kinda duplicated with similar code in attributes::from_fn_attrs\u2026\n-    match cx.tcx.sess.opts.optimize {\n-        OptLevel::Size => {\n-            llvm::Attribute::MinSize.unapply_llfn(Function, llfn);\n-            llvm::Attribute::OptimizeForSize.apply_llfn(Function, llfn);\n-            llvm::Attribute::OptimizeNone.unapply_llfn(Function, llfn);\n-        },\n-        OptLevel::SizeMin => {\n-            llvm::Attribute::MinSize.apply_llfn(Function, llfn);\n-            llvm::Attribute::OptimizeForSize.apply_llfn(Function, llfn);\n-            llvm::Attribute::OptimizeNone.unapply_llfn(Function, llfn);\n-        }\n-        OptLevel::No => {\n-            llvm::Attribute::MinSize.unapply_llfn(Function, llfn);\n-            llvm::Attribute::OptimizeForSize.unapply_llfn(Function, llfn);\n-            llvm::Attribute::OptimizeNone.unapply_llfn(Function, llfn);\n-        }\n-        _ => {}\n-    }\n-\n+    attributes::default_optimisation_attrs(cx.tcx.sess, llfn);\n     attributes::non_lazy_bind(cx.sess(), llfn);\n-\n     llfn\n }\n "}, {"sha": "ade84faae8dbd864bc0eb7c0ad4b15199336896b", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce289c6c9911c7ea55b7f30b125d3c38ed359da4/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce289c6c9911c7ea55b7f30b125d3c38ed359da4/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ce289c6c9911c7ea55b7f30b125d3c38ed359da4", "patch": "@@ -2379,7 +2379,7 @@ fn codegen_fn_attrs<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefId) -> Codegen\n         if attr.path != \"optimize\" {\n             return ia;\n         }\n-        let err = |sp, s| span_err!(tcx.sess.diagnostic(), sp, E0720, \"{}\", s);\n+        let err = |sp, s| span_err!(tcx.sess.diagnostic(), sp, E0722, \"{}\", s);\n         match attr.meta().map(|i| i.node) {\n             Some(MetaItemKind::Word) => {\n                 err(attr.span, \"expected one argument\");"}, {"sha": "e02111bf2bf3b61fb167a752deaf935de3b70f89", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce289c6c9911c7ea55b7f30b125d3c38ed359da4/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce289c6c9911c7ea55b7f30b125d3c38ed359da4/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=ce289c6c9911c7ea55b7f30b125d3c38ed359da4", "patch": "@@ -4719,5 +4719,5 @@ register_diagnostics! {\n     E0645, // trait aliases not finished\n     E0698, // type inside generator must be known in this context\n     E0719, // duplicate values for associated type binding\n-    E0720, // Malformed #[optimize] attribute\n+    E0722, // Malformed #[optimize] attribute\n }"}, {"sha": "adc5affedc8c3eab533cc0199af05a82acc66b92", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce289c6c9911c7ea55b7f30b125d3c38ed359da4/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce289c6c9911c7ea55b7f30b125d3c38ed359da4/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=ce289c6c9911c7ea55b7f30b125d3c38ed359da4", "patch": "@@ -1219,7 +1219,7 @@ pub const BUILTIN_ATTRIBUTES: &[(&str, AttributeType, AttributeTemplate, Attribu\n                            cfg_fn!(alloc_error_handler))),\n \n     // RFC 2412\n-    (\"optimize\", Whitelisted, Gated(Stability::Unstable,\n+    (\"optimize\", Whitelisted, template!(List: \"size|speed\"), Gated(Stability::Unstable,\n                                \"optimize_attribute\",\n                                \"#[optimize] attribute is an unstable feature\",\n                                cfg_fn!(optimize_attribute))),"}, {"sha": "c1f751001418767eb5d13dc85172f9e975500af3", "filename": "src/test/ui/feature-gate-optimize_attribute.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ce289c6c9911c7ea55b7f30b125d3c38ed359da4/src%2Ftest%2Fui%2Ffeature-gate-optimize_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce289c6c9911c7ea55b7f30b125d3c38ed359da4/src%2Ftest%2Fui%2Ffeature-gate-optimize_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-optimize_attribute.rs?ref=ce289c6c9911c7ea55b7f30b125d3c38ed359da4", "patch": "@@ -1,12 +1,3 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n #![crate_type=\"rlib\"]\n #![optimize(speed)] //~ ERROR #54882\n \n@@ -19,7 +10,9 @@ fn size() {}\n #[optimize(speed)] //~ ERROR #54882\n fn speed() {}\n \n-#[optimize(banana)] //~ ERROR #54882\n+#[optimize(banana)]\n+//~^ ERROR #54882\n+//~| ERROR E0722\n fn not_known() {}\n \n }"}, {"sha": "ddd4c457d731b669f17c300784fe1911a3b98edb", "filename": "src/test/ui/feature-gate-optimize_attribute.stderr", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ce289c6c9911c7ea55b7f30b125d3c38ed359da4/src%2Ftest%2Fui%2Ffeature-gate-optimize_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce289c6c9911c7ea55b7f30b125d3c38ed359da4/src%2Ftest%2Fui%2Ffeature-gate-optimize_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-optimize_attribute.stderr?ref=ce289c6c9911c7ea55b7f30b125d3c38ed359da4", "patch": "@@ -1,43 +1,50 @@\n error[E0658]: #[optimize] attribute is an unstable feature (see issue #54882)\n-  --> $DIR/feature-gate-optimize_attribute.rs:16:1\n+  --> $DIR/feature-gate-optimize_attribute.rs:7:1\n    |\n LL | #[optimize(size)] //~ ERROR #54882\n    | ^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(optimize_attribute)] to the crate attributes to enable\n \n error[E0658]: #[optimize] attribute is an unstable feature (see issue #54882)\n-  --> $DIR/feature-gate-optimize_attribute.rs:19:1\n+  --> $DIR/feature-gate-optimize_attribute.rs:10:1\n    |\n LL | #[optimize(speed)] //~ ERROR #54882\n    | ^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(optimize_attribute)] to the crate attributes to enable\n \n error[E0658]: #[optimize] attribute is an unstable feature (see issue #54882)\n-  --> $DIR/feature-gate-optimize_attribute.rs:22:1\n+  --> $DIR/feature-gate-optimize_attribute.rs:13:1\n    |\n-LL | #[optimize(banana)] //~ ERROR #54882\n+LL | #[optimize(banana)]\n    | ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(optimize_attribute)] to the crate attributes to enable\n \n error[E0658]: #[optimize] attribute is an unstable feature (see issue #54882)\n-  --> $DIR/feature-gate-optimize_attribute.rs:13:1\n+  --> $DIR/feature-gate-optimize_attribute.rs:4:1\n    |\n LL | #[optimize(size)] //~ ERROR #54882\n    | ^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(optimize_attribute)] to the crate attributes to enable\n \n error[E0658]: #[optimize] attribute is an unstable feature (see issue #54882)\n-  --> $DIR/feature-gate-optimize_attribute.rs:11:1\n+  --> $DIR/feature-gate-optimize_attribute.rs:2:1\n    |\n LL | #![optimize(speed)] //~ ERROR #54882\n    | ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(optimize_attribute)] to the crate attributes to enable\n \n-error: aborting due to 5 previous errors\n+error[E0722]: invalid argument\n+  --> $DIR/feature-gate-optimize_attribute.rs:13:12\n+   |\n+LL | #[optimize(banana)]\n+   |            ^^^^^^\n+\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors occurred: E0658, E0722.\n+For more information about an error, try `rustc --explain E0658`."}]}