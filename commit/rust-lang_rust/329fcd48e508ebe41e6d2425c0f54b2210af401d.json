{"sha": "329fcd48e508ebe41e6d2425c0f54b2210af401d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyOWZjZDQ4ZTUwOGViZTQxZTZkMjQyNWMwZjU0YjIyMTBhZjQwMWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-23T23:37:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-23T23:37:05Z"}, "message": "auto merge of #12338 : edwardw/rust/hygienic-break-continue, r=cmr\n\nMakes labelled loops hygiene by performing renaming of the labels defined in e.g. `'x: loop { ... }` and then used in break and continue statements within loop body so that they act hygienically when used with macros.\r\n    \r\nCloses #12262.", "tree": {"sha": "b5297ad96ec683968e1b5dee486710be4a7c8ab3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5297ad96ec683968e1b5dee486710be4a7c8ab3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/329fcd48e508ebe41e6d2425c0f54b2210af401d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/329fcd48e508ebe41e6d2425c0f54b2210af401d", "html_url": "https://github.com/rust-lang/rust/commit/329fcd48e508ebe41e6d2425c0f54b2210af401d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/329fcd48e508ebe41e6d2425c0f54b2210af401d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbed3321f5bbe4375819dd82193bd4299fabafb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbed3321f5bbe4375819dd82193bd4299fabafb9", "html_url": "https://github.com/rust-lang/rust/commit/cbed3321f5bbe4375819dd82193bd4299fabafb9"}, {"sha": "386db05df8aa8349857ad6f5486db0bdcc79f3cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/386db05df8aa8349857ad6f5486db0bdcc79f3cd", "html_url": "https://github.com/rust-lang/rust/commit/386db05df8aa8349857ad6f5486db0bdcc79f3cd"}], "stats": {"total": 290, "additions": 262, "deletions": 28}, "files": [{"sha": "d575c94942105c7a6df80d701318725c00d5a257", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=329fcd48e508ebe41e6d2425c0f54b2210af401d", "patch": "@@ -490,7 +490,7 @@ impl CFGBuilder {\n \n     fn find_scope(&self,\n                   expr: @ast::Expr,\n-                  label: Option<ast::Name>) -> LoopScope {\n+                  label: Option<ast::Ident>) -> LoopScope {\n         match label {\n             None => {\n                 return *self.loop_scopes.last().unwrap();"}, {"sha": "e71079b6dd0f3cc75ccddb556a872be20365f23c", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=329fcd48e508ebe41e6d2425c0f54b2210af401d", "patch": "@@ -770,7 +770,7 @@ impl<'a, O:DataFlowOperator> PropagationContext<'a, O> {\n \n     fn find_scope<'a>(&self,\n                       expr: &ast::Expr,\n-                      label: Option<ast::Name>,\n+                      label: Option<ast::Ident>,\n                       loop_scopes: &'a mut ~[LoopScope]) -> &'a mut LoopScope {\n         let index = match label {\n             None => {"}, {"sha": "3b9f81adbac262485c4de0949398c6829657e78a", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=329fcd48e508ebe41e6d2425c0f54b2210af401d", "patch": "@@ -747,7 +747,7 @@ impl Liveness {\n     }\n \n     pub fn find_loop_scope(&self,\n-                           opt_label: Option<Name>,\n+                           opt_label: Option<Ident>,\n                            id: NodeId,\n                            sp: Span)\n                            -> NodeId {"}, {"sha": "975daff56f1193dee7bf27829dc9e1814661b7b1", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=329fcd48e508ebe41e6d2425c0f54b2210af401d", "patch": "@@ -5206,13 +5206,13 @@ impl Resolver {\n             ExprLoop(_, Some(label)) => {\n                 self.with_label_rib(|this| {\n                     let def_like = DlDef(DefLabel(expr.id));\n-                    // plain insert (no renaming)\n                     {\n                         let mut label_ribs = this.label_ribs.borrow_mut();\n                         let rib = label_ribs.get()[label_ribs.get().len() -\n                                                    1];\n                         let mut bindings = rib.bindings.borrow_mut();\n-                        bindings.get().insert(label.name, def_like);\n+                        let renamed = mtwt_resolve(label);\n+                        bindings.get().insert(renamed, def_like);\n                     }\n \n                     visit::walk_expr(this, expr, ());\n@@ -5223,11 +5223,12 @@ impl Resolver {\n \n             ExprBreak(Some(label)) | ExprAgain(Some(label)) => {\n                 let mut label_ribs = self.label_ribs.borrow_mut();\n-                match self.search_ribs(label_ribs.get(), label, expr.span) {\n+                let renamed = mtwt_resolve(label);\n+                match self.search_ribs(label_ribs.get(), renamed, expr.span) {\n                     None =>\n                         self.resolve_error(expr.span,\n                                               format!(\"use of undeclared label `{}`\",\n-                                                   token::get_name(label))),\n+                                                   token::get_ident(label))),\n                     Some(DlDef(def @ DefLabel(_))) => {\n                         // Since this def is a label, it is never read.\n                         self.record_def(expr.id, (def, LastMod(AllPublic)))"}, {"sha": "ad575eb0effcb078777f5868bb6940146d134fc0", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=329fcd48e508ebe41e6d2425c0f54b2210af401d", "patch": "@@ -25,7 +25,7 @@ use util::ppaux::Repr;\n use middle::trans::type_::Type;\n \n use syntax::ast;\n-use syntax::ast::Name;\n+use syntax::ast::Ident;\n use syntax::ast_util;\n use syntax::codemap::Span;\n use syntax::parse::token::InternedString;\n@@ -260,7 +260,7 @@ pub fn trans_loop<'a>(bcx:&'a Block<'a>,\n \n pub fn trans_break_cont<'a>(bcx: &'a Block<'a>,\n                             expr_id: ast::NodeId,\n-                            opt_label: Option<Name>,\n+                            opt_label: Option<Ident>,\n                             exit: uint)\n                             -> &'a Block<'a> {\n     let _icx = push_ctxt(\"trans_break_cont\");\n@@ -293,14 +293,14 @@ pub fn trans_break_cont<'a>(bcx: &'a Block<'a>,\n \n pub fn trans_break<'a>(bcx: &'a Block<'a>,\n                        expr_id: ast::NodeId,\n-                       label_opt: Option<Name>)\n+                       label_opt: Option<Ident>)\n                        -> &'a Block<'a> {\n     return trans_break_cont(bcx, expr_id, label_opt, cleanup::EXIT_BREAK);\n }\n \n pub fn trans_cont<'a>(bcx: &'a Block<'a>,\n                       expr_id: ast::NodeId,\n-                      label_opt: Option<Name>)\n+                      label_opt: Option<Ident>)\n                       -> &'a Block<'a> {\n     return trans_break_cont(bcx, expr_id, label_opt, cleanup::EXIT_LOOP);\n }"}, {"sha": "4e43592ec5c2f909ccb843be0c580d2446c67f6b", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=329fcd48e508ebe41e6d2425c0f54b2210af401d", "patch": "@@ -58,8 +58,13 @@ impl Eq for Ident {\n             // if it should be non-hygienic (most things are), just compare the\n             // 'name' fields of the idents. Or, even better, replace the idents\n             // with Name's.\n-            fail!(\"not allowed to compare these idents: {:?}, {:?}.\n-                    Probably related to issue \\\\#6993\", self, other);\n+            //\n+            // On the other hand, if the comparison does need to be hygienic,\n+            // one example and its non-hygienic counterpart would be:\n+            //      syntax::parse::token::mtwt_token_eq\n+            //      syntax::ext::tt::macro_parser::token_name_eq\n+            fail!(\"not allowed to compare these idents: {:?}, {:?}. \\\n+                   Probably related to issue \\\\#6993\", self, other);\n         }\n     }\n     fn ne(&self, other: &Ident) -> bool {\n@@ -564,8 +569,8 @@ pub enum Expr_ {\n     ExprPath(Path),\n \n     ExprAddrOf(Mutability, @Expr),\n-    ExprBreak(Option<Name>),\n-    ExprAgain(Option<Name>),\n+    ExprBreak(Option<Ident>),\n+    ExprAgain(Option<Ident>),\n     ExprRet(Option<@Expr>),\n \n     /// Gets the log level for the enclosing module"}, {"sha": "b49f9fb3a384d22155f6ae87dfecb7c2778d43c8", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=329fcd48e508ebe41e6d2425c0f54b2210af401d", "patch": "@@ -139,6 +139,8 @@ pub fn expand_expr(e: @ast::Expr, fld: &mut MacroExpander) -> @ast::Expr {\n             // Expand any interior macros etc.\n             // NB: we don't fold pats yet. Curious.\n             let src_expr = fld.fold_expr(src_expr).clone();\n+            // Rename label before expansion.\n+            let (opt_ident, src_loop_block) = rename_loop_label(opt_ident, src_loop_block, fld);\n             let src_loop_block = fld.fold_block(src_loop_block);\n \n             let span = e.span;\n@@ -165,8 +167,7 @@ pub fn expand_expr(e: @ast::Expr, fld: &mut MacroExpander) -> @ast::Expr {\n \n             // `None => break ['<ident>];`\n             let none_arm = {\n-                // FIXME #6993: this map goes away:\n-                let break_expr = fld.cx.expr(span, ast::ExprBreak(opt_ident.map(|x| x.name)));\n+                let break_expr = fld.cx.expr(span, ast::ExprBreak(opt_ident));\n                 let none_pat = fld.cx.pat_ident(span, none_ident);\n                 fld.cx.arm(span, ~[none_pat], break_expr)\n             };\n@@ -199,10 +200,36 @@ pub fn expand_expr(e: @ast::Expr, fld: &mut MacroExpander) -> @ast::Expr {\n             fld.cx.expr_match(span, discrim, ~[arm])\n         }\n \n+        ast::ExprLoop(loop_block, opt_ident) => {\n+            let (opt_ident, loop_block) =\n+                rename_loop_label(opt_ident, loop_block, fld);\n+            let loop_block = fld.fold_block(loop_block);\n+            fld.cx.expr(e.span, ast::ExprLoop(loop_block, opt_ident))\n+        }\n+\n         _ => noop_fold_expr(e, fld)\n     }\n }\n \n+// Rename loop label and its all occurrences inside the loop body\n+fn rename_loop_label(opt_ident: Option<Ident>,\n+                     loop_block: P<Block>,\n+                     fld: &mut MacroExpander) -> (Option<Ident>, P<Block>) {\n+    match opt_ident {\n+        Some(label) => {\n+            // Generate fresh label and add to the existing pending renames\n+            let new_label = fresh_name(&label);\n+            let rename = (label, new_label);\n+            fld.extsbox.info().pending_renames.push(rename);\n+            let mut pending_renames = ~[rename];\n+            let mut rename_fld = renames_to_fold(&mut pending_renames);\n+            (Some(rename_fld.fold_ident(label)),\n+             rename_fld.fold_block(loop_block))\n+        }\n+        None => (None, loop_block)\n+    }\n+}\n+\n // eval $e with a new exts frame:\n macro_rules! with_exts_frame (\n     ($extsboxexpr:expr,$macros_escape:expr,$e:expr) =>"}, {"sha": "edd875a57a749cbfab7dc533eee8ffca04389c64", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=329fcd48e508ebe41e6d2425c0f54b2210af401d", "patch": "@@ -218,8 +218,9 @@ pub fn parse_or_else<R: Reader>(sess: @ParseSess,\n // perform a token equality check, ignoring syntax context (that is, an unhygienic comparison)\n pub fn token_name_eq(t1 : &Token, t2 : &Token) -> bool {\n     match (t1,t2) {\n-        (&token::IDENT(id1,_),&token::IDENT(id2,_)) =>\n-        id1.name == id2.name,\n+        (&token::IDENT(id1,_),&token::IDENT(id2,_))\n+        | (&token::LIFETIME(id1),&token::LIFETIME(id2)) =>\n+            id1.name == id2.name,\n         _ => *t1 == *t2\n     }\n }"}, {"sha": "5f6eb86c3c80cf1ffec8cacbef94379720b0d298", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=329fcd48e508ebe41e6d2425c0f54b2210af401d", "patch": "@@ -353,6 +353,23 @@ fn fold_arg_<T: Folder>(a: &Arg, fld: &mut T) -> Arg {\n \n // build a new vector of tts by appling the Folder's fold_ident to\n // all of the identifiers in the token trees.\n+//\n+// This is part of hygiene magic. As far as hygiene is concerned, there\n+// are three types of let pattern bindings or loop labels:\n+//      - those defined and used in non-macro part of the program\n+//      - those used as part of macro invocation arguments\n+//      - those defined and used inside macro definitions\n+// Lexically, type 1 and 2 are in one group and type 3 the other. If they\n+// clash, in order for let and loop label to work hygienically, one group\n+// or the other needs to be renamed. The problem is that type 2 and 3 are\n+// parsed together (inside the macro expand function). After being parsed and\n+// AST being constructed, they can no longer be distinguished from each other.\n+//\n+// For that reason, type 2 let bindings and loop labels are actually renamed\n+// in the form of tokens instead of AST nodes, here. There are wasted effort\n+// since many token::IDENT are not necessary part of let bindings and most\n+// token::LIFETIME are certainly not loop labels. But we can't tell in their\n+// token form. So this is less ideal and hacky but it works.\n pub fn fold_tts<T: Folder>(tts: &[TokenTree], fld: &mut T) -> ~[TokenTree] {\n     tts.map(|tt| {\n         match *tt {\n@@ -376,6 +393,7 @@ fn maybe_fold_ident<T: Folder>(t: &token::Token, fld: &mut T) -> token::Token {\n         token::IDENT(id, followed_by_colons) => {\n             token::IDENT(fld.fold_ident(id), followed_by_colons)\n         }\n+        token::LIFETIME(id) => token::LIFETIME(fld.fold_ident(id)),\n         _ => (*t).clone()\n     }\n }\n@@ -802,8 +820,8 @@ pub fn noop_fold_expr<T: Folder>(e: @Expr, folder: &mut T) -> @Expr {\n         }\n         ExprPath(ref pth) => ExprPath(folder.fold_path(pth)),\n         ExprLogLevel => ExprLogLevel,\n-        ExprBreak(opt_ident) => ExprBreak(opt_ident),\n-        ExprAgain(opt_ident) => ExprAgain(opt_ident),\n+        ExprBreak(opt_ident) => ExprBreak(opt_ident.map(|x| folder.fold_ident(x))),\n+        ExprAgain(opt_ident) => ExprAgain(opt_ident.map(|x| folder.fold_ident(x))),\n         ExprRet(ref e) => {\n             ExprRet(e.map(|x| folder.fold_expr(x)))\n         }"}, {"sha": "31e16cd8c7d4d79e998062105d4750143ae5d173", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=329fcd48e508ebe41e6d2425c0f54b2210af401d", "patch": "@@ -1822,7 +1822,7 @@ impl Parser {\n             let ex = if Parser::token_is_lifetime(&self.token) {\n                 let lifetime = self.get_lifetime();\n                 self.bump();\n-                ExprAgain(Some(lifetime.name))\n+                ExprAgain(Some(lifetime))\n             } else {\n                 ExprAgain(None)\n             };\n@@ -1885,7 +1885,7 @@ impl Parser {\n             if Parser::token_is_lifetime(&self.token) {\n                 let lifetime = self.get_lifetime();\n                 self.bump();\n-                ex = ExprBreak(Some(lifetime.name));\n+                ex = ExprBreak(Some(lifetime));\n             } else {\n                 ex = ExprBreak(None);\n             }\n@@ -2579,7 +2579,7 @@ impl Parser {\n             let ex = if Parser::token_is_lifetime(&self.token) {\n                 let lifetime = self.get_lifetime();\n                 self.bump();\n-                ExprAgain(Some(lifetime.name))\n+                ExprAgain(Some(lifetime))\n             } else {\n                 ExprAgain(None)\n             };"}, {"sha": "528eb7d54f3737da32381d7de5a248348b52746f", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=329fcd48e508ebe41e6d2425c0f54b2210af401d", "patch": "@@ -704,8 +704,8 @@ pub fn is_reserved_keyword(tok: &Token) -> bool {\n \n pub fn mtwt_token_eq(t1 : &Token, t2 : &Token) -> bool {\n     match (t1,t2) {\n-        (&IDENT(id1,_),&IDENT(id2,_)) =>\n-        ast_util::mtwt_resolve(id1) == ast_util::mtwt_resolve(id2),\n+        (&IDENT(id1,_),&IDENT(id2,_)) | (&LIFETIME(id1),&LIFETIME(id2)) =>\n+            ast_util::mtwt_resolve(id1) == ast_util::mtwt_resolve(id2),\n         _ => *t1 == *t2\n     }\n }"}, {"sha": "8fb813407d093af83f270c0c8ef3b8e6812e3d35", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=329fcd48e508ebe41e6d2425c0f54b2210af401d", "patch": "@@ -1471,7 +1471,7 @@ pub fn print_expr(s: &mut State, expr: &ast::Expr) -> io::IoResult<()> {\n         try!(space(&mut s.s));\n         for ident in opt_ident.iter() {\n             try!(word(&mut s.s, \"'\"));\n-            try!(print_name(s, *ident));\n+            try!(print_ident(s, *ident));\n             try!(space(&mut s.s));\n         }\n       }\n@@ -1480,7 +1480,7 @@ pub fn print_expr(s: &mut State, expr: &ast::Expr) -> io::IoResult<()> {\n         try!(space(&mut s.s));\n         for ident in opt_ident.iter() {\n             try!(word(&mut s.s, \"'\"));\n-            try!(print_name(s, *ident));\n+            try!(print_ident(s, *ident));\n             try!(space(&mut s.s))\n         }\n       }"}, {"sha": "d2720bc4570504f5edc5710d1452c6d2709a17c3", "filename": "src/test/compile-fail/hygienic-label-1.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Ftest%2Fcompile-fail%2Fhygienic-label-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Ftest%2Fcompile-fail%2Fhygienic-label-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhygienic-label-1.rs?ref=329fcd48e508ebe41e6d2425c0f54b2210af401d", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[feature(macro_rules)];\n+\n+macro_rules! foo {\n+    () => { break 'x; }\n+}\n+\n+pub fn main() {\n+    'x: loop { foo!() } //~ ERROR use of undeclared label `x`\n+}"}, {"sha": "c97317217fc5b1425e125a06313a8005ae86697f", "filename": "src/test/compile-fail/hygienic-label-2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Ftest%2Fcompile-fail%2Fhygienic-label-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Ftest%2Fcompile-fail%2Fhygienic-label-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhygienic-label-2.rs?ref=329fcd48e508ebe41e6d2425c0f54b2210af401d", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[feature(macro_rules)];\n+\n+macro_rules! foo {\n+    ($e: expr) => { 'x: loop { $e } }\n+}\n+\n+pub fn main() {\n+    foo!(break 'x); //~ ERROR use of undeclared label `x`\n+}"}, {"sha": "d5284f5766e0e4b5d694dfa70e1432de36abd97a", "filename": "src/test/compile-fail/hygienic-label-3.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Ftest%2Fcompile-fail%2Fhygienic-label-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Ftest%2Fcompile-fail%2Fhygienic-label-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhygienic-label-3.rs?ref=329fcd48e508ebe41e6d2425c0f54b2210af401d", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[feature(macro_rules)];\n+\n+macro_rules! foo {\n+    () => { break 'x; }\n+}\n+\n+pub fn main() {\n+    'x: for _ in range(0,1) {\n+        foo!() //~ ERROR use of undeclared label `x`\n+    };\n+}"}, {"sha": "79ac46ac59ab49307a70fa772ec65c7d89277a55", "filename": "src/test/compile-fail/hygienic-label-4.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Ftest%2Fcompile-fail%2Fhygienic-label-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Ftest%2Fcompile-fail%2Fhygienic-label-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhygienic-label-4.rs?ref=329fcd48e508ebe41e6d2425c0f54b2210af401d", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[feature(macro_rules)];\n+\n+macro_rules! foo {\n+    ($e: expr) => { 'x: for _ in range(0,1) { $e } }\n+}\n+\n+pub fn main() {\n+    foo!(break 'x); //~ ERROR use of undeclared label `x`\n+}"}, {"sha": "125160c368511545db684c5bb6633bd0c0af2d73", "filename": "src/test/run-pass/hygienic-labels-in-let.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Ftest%2Frun-pass%2Fhygienic-labels-in-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Ftest%2Frun-pass%2Fhygienic-labels-in-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygienic-labels-in-let.rs?ref=329fcd48e508ebe41e6d2425c0f54b2210af401d", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[feature(macro_rules)];\n+\n+macro_rules! loop_x {\n+    ($e: expr) => {\n+        // $e shouldn't be able to interact with this 'x\n+        'x: loop { $e }\n+    }\n+}\n+\n+macro_rules! run_once {\n+    ($e: expr) => {\n+        // ditto\n+        'x: for _ in range(0, 1) { $e }\n+    }\n+}\n+\n+pub fn main() {\n+    let mut i = 0i;\n+\n+    let j = {\n+        'x: loop {\n+            // this 'x should refer to the outer loop, lexically\n+            loop_x!(break 'x);\n+            i += 1;\n+        }\n+        i + 1\n+    };\n+    assert_eq!(j, 1i);\n+\n+    let k = {\n+        'x: for _ in range(0, 1) {\n+            // ditto\n+            loop_x!(break 'x);\n+            i += 1;\n+        }\n+        i + 1\n+    };\n+    assert_eq!(k, 1i);\n+\n+    let n = {\n+        'x: for _ in range(0, 1) {\n+            // ditto\n+            run_once!(continue 'x);\n+            i += 1;\n+        }\n+        i + 1\n+    };\n+    assert_eq!(n, 1i);\n+}"}, {"sha": "7d341a67623587126377b341210ca4ce995cc227", "filename": "src/test/run-pass/hygienic-labels.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Ftest%2Frun-pass%2Fhygienic-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329fcd48e508ebe41e6d2425c0f54b2210af401d/src%2Ftest%2Frun-pass%2Fhygienic-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygienic-labels.rs?ref=329fcd48e508ebe41e6d2425c0f54b2210af401d", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[feature(macro_rules)];\n+\n+macro_rules! loop_x {\n+    ($e: expr) => {\n+        // $e shouldn't be able to interact with this 'x\n+        'x: loop { $e }\n+    }\n+}\n+\n+macro_rules! run_once {\n+    ($e: expr) => {\n+        // ditto\n+        'x: for _ in range(0, 1) { $e }\n+    }\n+}\n+\n+pub fn main() {\n+    'x: for _ in range(0, 1) {\n+        // this 'x should refer to the outer loop, lexically\n+        loop_x!(break 'x);\n+        fail!(\"break doesn't act hygienically inside for loop\");\n+    }\n+\n+    'x: loop {\n+        // ditto\n+        loop_x!(break 'x);\n+        fail!(\"break doesn't act hygienically inside infinite loop\");\n+    }\n+\n+    'x: for _ in range(0, 1) {\n+        // ditto\n+        run_once!(continue 'x);\n+        fail!(\"continue doesn't act hygienically inside for loop\");\n+    }\n+}"}]}