{"sha": "b3734bd78f566dc9c6ddf977fb290c847cccdc9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNzM0YmQ3OGY1NjZkYzljNmRkZjk3N2ZiMjkwYzg0N2NjY2RjOWM=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-05-17T19:51:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-17T19:51:21Z"}, "message": "Rollup merge of #50610 - estebank:fmt-str, r=Kimundi\n\nImprove format string errors\n\nPoint at format string position inside the formatting string:\n```\nerror: invalid format string: unmatched `}` found\n  --> $DIR/format-string-error.rs:21:22\n   |\nLL |     let _ = format!(\"}\");\n   |                      ^ unmatched `}` in format string\n```\n\nExplain that argument names can't start with an underscore:\n```\nerror: invalid format string: invalid argument name `_foo`\n  --> $DIR/format-string-error.rs:15:23\n   |\nLL |     let _ = format!(\"{_foo}\", _foo = 6usize);\n   |                       ^^^^ invalid argument name in format string\n   |\n   = note: argument names cannot start with an underscore\n```\n\nFix #23476.\n\nThe more accurate spans will only be seen when using `format!` directly, when using `println!` the diagnostics machinery makes the span be the entire statement.", "tree": {"sha": "da37d9467374f84dcf56d0b214f1befd21a1f110", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da37d9467374f84dcf56d0b214f1befd21a1f110"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3734bd78f566dc9c6ddf977fb290c847cccdc9c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa/d05CRBK7hj4Ov3rIwAAdHIIADMESc1bGZwweZkO5x2n7Qx6\n0j1DaBgmH9PMMd5b5TVpwde/j+uxW7U1LI++UR6BTTSF5VAfDvQOJyWdRO2tCeRb\nbJvIjrtpSxsYQEzJQagbGZGinU197dIfM6tWYkFSss45z533C7AdV/6md1a1MGIE\nZ8Bn95GDKcXx8vKsM0akXcsgG1n5lfFr65H9n3RgJfuIpBcJgUy5K6Ezr93NzowL\ngE0mXVMlsaIAsZllqJX/HaEQbrUtsmOQRV6nN369YsobdoMclWvyDK4p4zI1ntY9\nvbYD+vXXIoz2XkYLQeFEAVaHG9xpIpYIuYyKASxQmnf6l0abnPXm1N1RywVeydQ=\n=YDik\n-----END PGP SIGNATURE-----\n", "payload": "tree da37d9467374f84dcf56d0b214f1befd21a1f110\nparent 0c0bb18a5b0675f2d7c64efb334ff564104174f4\nparent 3f6b3bbace466f4be1311192f335c4c7792a83d2\nauthor Mark Simulacrum <mark.simulacrum@gmail.com> 1526586681 -0600\ncommitter GitHub <noreply@github.com> 1526586681 -0600\n\nRollup merge of #50610 - estebank:fmt-str, r=Kimundi\n\nImprove format string errors\n\nPoint at format string position inside the formatting string:\n```\nerror: invalid format string: unmatched `}` found\n  --> $DIR/format-string-error.rs:21:22\n   |\nLL |     let _ = format!(\"}\");\n   |                      ^ unmatched `}` in format string\n```\n\nExplain that argument names can't start with an underscore:\n```\nerror: invalid format string: invalid argument name `_foo`\n  --> $DIR/format-string-error.rs:15:23\n   |\nLL |     let _ = format!(\"{_foo}\", _foo = 6usize);\n   |                       ^^^^ invalid argument name in format string\n   |\n   = note: argument names cannot start with an underscore\n```\n\nFix #23476.\n\nThe more accurate spans will only be seen when using `format!` directly, when using `println!` the diagnostics machinery makes the span be the entire statement.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3734bd78f566dc9c6ddf977fb290c847cccdc9c", "html_url": "https://github.com/rust-lang/rust/commit/b3734bd78f566dc9c6ddf977fb290c847cccdc9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3734bd78f566dc9c6ddf977fb290c847cccdc9c/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c0bb18a5b0675f2d7c64efb334ff564104174f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c0bb18a5b0675f2d7c64efb334ff564104174f4", "html_url": "https://github.com/rust-lang/rust/commit/0c0bb18a5b0675f2d7c64efb334ff564104174f4"}, {"sha": "3f6b3bbace466f4be1311192f335c4c7792a83d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f6b3bbace466f4be1311192f335c4c7792a83d2", "html_url": "https://github.com/rust-lang/rust/commit/3f6b3bbace466f4be1311192f335c4c7792a83d2"}], "stats": {"total": 153, "additions": 132, "deletions": 21}, "files": [{"sha": "a77751d65d08c3c7f164526688356acd35fd82ce", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 68, "deletions": 14, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/b3734bd78f566dc9c6ddf977fb290c847cccdc9c/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3734bd78f566dc9c6ddf977fb290c847cccdc9c/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=b3734bd78f566dc9c6ddf977fb290c847cccdc9c", "patch": "@@ -127,6 +127,14 @@ pub enum Count<'a> {\n     CountImplied,\n }\n \n+pub struct ParseError {\n+    pub description: string::String,\n+    pub note: Option<string::String>,\n+    pub label: string::String,\n+    pub start: usize,\n+    pub end: usize,\n+}\n+\n /// The parser structure for interpreting the input format string. This is\n /// modeled as an iterator over `Piece` structures to form a stream of tokens\n /// being output.\n@@ -137,7 +145,7 @@ pub struct Parser<'a> {\n     input: &'a str,\n     cur: iter::Peekable<str::CharIndices<'a>>,\n     /// Error messages accumulated during parsing\n-    pub errors: Vec<(string::String, Option<string::String>)>,\n+    pub errors: Vec<ParseError>,\n     /// Current position of implicit positional argument pointer\n     curarg: usize,\n }\n@@ -160,12 +168,17 @@ impl<'a> Iterator for Parser<'a> {\n                 }\n                 '}' => {\n                     self.cur.next();\n+                    let pos = pos + 1;\n                     if self.consume('}') {\n-                        Some(String(self.string(pos + 1)))\n+                        Some(String(self.string(pos)))\n                     } else {\n-                        self.err_with_note(\"unmatched `}` found\",\n-                                           \"if you intended to print `}`, \\\n-                                           you can escape it using `}}`\");\n+                        self.err_with_note(\n+                            \"unmatched `}` found\",\n+                            \"unmatched `}`\",\n+                            \"if you intended to print `}`, you can escape it using `}}`\",\n+                            pos,\n+                            pos,\n+                        );\n                         None\n                     }\n                 }\n@@ -191,15 +204,40 @@ impl<'a> Parser<'a> {\n     /// Notifies of an error. The message doesn't actually need to be of type\n     /// String, but I think it does when this eventually uses conditions so it\n     /// might as well start using it now.\n-    fn err(&mut self, msg: &str) {\n-        self.errors.push((msg.to_owned(), None));\n+    fn err<S1: Into<string::String>, S2: Into<string::String>>(\n+        &mut self,\n+        description: S1,\n+        label: S2,\n+        start: usize,\n+        end: usize,\n+    ) {\n+        self.errors.push(ParseError {\n+            description: description.into(),\n+            note: None,\n+            label: label.into(),\n+            start,\n+            end,\n+        });\n     }\n \n     /// Notifies of an error. The message doesn't actually need to be of type\n     /// String, but I think it does when this eventually uses conditions so it\n     /// might as well start using it now.\n-    fn err_with_note(&mut self, msg: &str, note: &str) {\n-        self.errors.push((msg.to_owned(), Some(note.to_owned())));\n+    fn err_with_note<S1: Into<string::String>, S2: Into<string::String>, S3: Into<string::String>>(\n+        &mut self,\n+        description: S1,\n+        label: S2,\n+        note: S3,\n+        start: usize,\n+        end: usize,\n+    ) {\n+        self.errors.push(ParseError {\n+            description: description.into(),\n+            note: Some(note.into()),\n+            label: label.into(),\n+            start,\n+            end,\n+        });\n     }\n \n     /// Optionally consumes the specified character. If the character is not at\n@@ -222,19 +260,26 @@ impl<'a> Parser<'a> {\n     /// found, an error is emitted.\n     fn must_consume(&mut self, c: char) {\n         self.ws();\n-        if let Some(&(_, maybe)) = self.cur.peek() {\n+        if let Some(&(pos, maybe)) = self.cur.peek() {\n             if c == maybe {\n                 self.cur.next();\n             } else {\n-                self.err(&format!(\"expected `{:?}`, found `{:?}`\", c, maybe));\n+                self.err(format!(\"expected `{:?}`, found `{:?}`\", c, maybe),\n+                         format!(\"expected `{}`\", c),\n+                         pos + 1,\n+                         pos + 1);\n             }\n         } else {\n-            let msg = &format!(\"expected `{:?}` but string was terminated\", c);\n+            let msg = format!(\"expected `{:?}` but string was terminated\", c);\n+            let pos = self.input.len() + 1; // point at closing `\"`\n             if c == '}' {\n                 self.err_with_note(msg,\n-                                   \"if you intended to print `{`, you can escape it using `{{`\");\n+                                   format!(\"expected `{:?}`\", c),\n+                                   \"if you intended to print `{`, you can escape it using `{{`\",\n+                                   pos,\n+                                   pos);\n             } else {\n-                self.err(msg);\n+                self.err(msg, format!(\"expected `{:?}`\", c), pos, pos);\n             }\n         }\n     }\n@@ -300,6 +345,15 @@ impl<'a> Parser<'a> {\n         } else {\n             match self.cur.peek() {\n                 Some(&(_, c)) if c.is_alphabetic() => Some(ArgumentNamed(self.word())),\n+                Some(&(pos, c)) if c == '_' => {\n+                    let invalid_name = self.string(pos);\n+                    self.err_with_note(format!(\"invalid argument name `{}`\", invalid_name),\n+                                       \"invalid argument name\",\n+                                       \"argument names cannot start with an underscore\",\n+                                       pos + 1, // add 1 to account for leading `{`\n+                                       pos + 1 + invalid_name.len());\n+                    Some(ArgumentNamed(invalid_name))\n+                },\n \n                 // This is an `ArgumentNext`.\n                 // Record the fact and do the resolution after parsing the"}, {"sha": "b22098408a332f06623bc2e29aeede2c28b3fa8e", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b3734bd78f566dc9c6ddf977fb290c847cccdc9c/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3734bd78f566dc9c6ddf977fb290c847cccdc9c/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=b3734bd78f566dc9c6ddf977fb290c847cccdc9c", "patch": "@@ -767,9 +767,12 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n     }\n \n     if !parser.errors.is_empty() {\n-        let (err, note) = parser.errors.remove(0);\n-        let mut e = cx.ecx.struct_span_err(cx.fmtsp, &format!(\"invalid format string: {}\", err));\n-        if let Some(note) = note {\n+        let err = parser.errors.remove(0);\n+        let sp = cx.fmtsp.from_inner_byte_pos(err.start, err.end);\n+        let mut e = cx.ecx.struct_span_err(sp, &format!(\"invalid format string: {}\",\n+                                                        err.description));\n+        e.span_label(sp, err.label + \" in format string\");\n+        if let Some(note) = err.note {\n             e.note(&note);\n         }\n         e.emit();"}, {"sha": "bc9a14e8ff97beccb286815a68d9991fac0bd790", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b3734bd78f566dc9c6ddf977fb290c847cccdc9c/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3734bd78f566dc9c6ddf977fb290c847cccdc9c/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=b3734bd78f566dc9c6ddf977fb290c847cccdc9c", "patch": "@@ -428,6 +428,13 @@ impl Span {\n         )\n     }\n \n+    pub fn from_inner_byte_pos(self, start: usize, end: usize) -> Span {\n+        let span = self.data();\n+        Span::new(span.lo + BytePos::from_usize(start),\n+                  span.lo + BytePos::from_usize(end),\n+                  span.ctxt)\n+    }\n+\n     #[inline]\n     pub fn apply_mark(self, mark: Mark) -> Span {\n         let span = self.data();"}, {"sha": "5b13686240e7c0de46e71ec8a31c981b6f55782d", "filename": "src/test/ui/fmt/format-string-error.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b3734bd78f566dc9c6ddf977fb290c847cccdc9c/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3734bd78f566dc9c6ddf977fb290c847cccdc9c/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.rs?ref=b3734bd78f566dc9c6ddf977fb290c847cccdc9c", "patch": "@@ -12,5 +12,14 @@ fn main() {\n     println!(\"{\");\n     println!(\"{{}}\");\n     println!(\"}\");\n+    let _ = format!(\"{_foo}\", _foo = 6usize);\n+    //~^ ERROR invalid format string: invalid argument name `_foo`\n+    let _ = format!(\"{_}\", _ = 6usize);\n+    //~^ ERROR invalid format string: invalid argument name `_`\n+    let _ = format!(\"{\");\n+    //~^ ERROR invalid format string: expected `'}'` but string was terminated\n+    let _ = format!(\"}\");\n+    //~^ ERROR invalid format string: unmatched `}` found\n+    let _ = format!(\"{\\\\}\");\n+    //~^ ERROR invalid format string: expected `'}'`, found `'\\\\'`\n }\n-"}, {"sha": "ff766ddc8fa67ad132d1d1e137e4fc7ca427760a", "filename": "src/test/ui/fmt/format-string-error.stderr", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b3734bd78f566dc9c6ddf977fb290c847cccdc9c/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3734bd78f566dc9c6ddf977fb290c847cccdc9c/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr?ref=b3734bd78f566dc9c6ddf977fb290c847cccdc9c", "patch": "@@ -2,7 +2,7 @@ error: invalid format string: expected `'}'` but string was terminated\n   --> $DIR/format-string-error.rs:12:5\n    |\n LL |     println!(\"{\");\n-   |     ^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^ expected `'}'` in format string\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n@@ -11,10 +11,48 @@ error: invalid format string: unmatched `}` found\n   --> $DIR/format-string-error.rs:14:5\n    |\n LL |     println!(\"}\");\n-   |     ^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^ unmatched `}` in format string\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: aborting due to 2 previous errors\n+error: invalid format string: invalid argument name `_foo`\n+  --> $DIR/format-string-error.rs:15:23\n+   |\n+LL |     let _ = format!(\"{_foo}\", _foo = 6usize);\n+   |                       ^^^^ invalid argument name in format string\n+   |\n+   = note: argument names cannot start with an underscore\n+\n+error: invalid format string: invalid argument name `_`\n+  --> $DIR/format-string-error.rs:17:23\n+   |\n+LL |     let _ = format!(\"{_}\", _ = 6usize);\n+   |                       ^ invalid argument name in format string\n+   |\n+   = note: argument names cannot start with an underscore\n+\n+error: invalid format string: expected `'}'` but string was terminated\n+  --> $DIR/format-string-error.rs:19:23\n+   |\n+LL |     let _ = format!(\"{\");\n+   |                       ^ expected `'}'` in format string\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+\n+error: invalid format string: unmatched `}` found\n+  --> $DIR/format-string-error.rs:21:22\n+   |\n+LL |     let _ = format!(\"}\");\n+   |                      ^ unmatched `}` in format string\n+   |\n+   = note: if you intended to print `}`, you can escape it using `}}`\n+\n+error: invalid format string: expected `'}'`, found `'/'`\n+  --> $DIR/format-string-error.rs:23:23\n+   |\n+LL |     let _ = format!(\"{/}\");\n+   |                       ^ expected `}` in format string\n+\n+error: aborting due to 7 previous errors\n "}]}