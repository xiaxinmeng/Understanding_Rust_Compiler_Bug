{"sha": "359e70d1b20402ca9cc8731909daecfab598e55d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1OWU3MGQxYjIwNDAyY2E5Y2M4NzMxOTA5ZGFlY2ZhYjU5OGU1NWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-27T12:03:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-27T12:03:18Z"}, "message": "support literal suffixes", "tree": {"sha": "7c0cfa82de89b62597bdb897c9484f9d5b02cd90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c0cfa82de89b62597bdb897c9484f9d5b02cd90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/359e70d1b20402ca9cc8731909daecfab598e55d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/359e70d1b20402ca9cc8731909daecfab598e55d", "html_url": "https://github.com/rust-lang/rust/commit/359e70d1b20402ca9cc8731909daecfab598e55d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/359e70d1b20402ca9cc8731909daecfab598e55d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73ded3c63ca2522b7bb6ca8eb7834c5adc1a3511", "url": "https://api.github.com/repos/rust-lang/rust/commits/73ded3c63ca2522b7bb6ca8eb7834c5adc1a3511", "html_url": "https://github.com/rust-lang/rust/commit/73ded3c63ca2522b7bb6ca8eb7834c5adc1a3511"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "14c6015c2a9168d1e245a84c05587b4a6a3b586a", "filename": "crates/ra_syntax/src/string_lexing/parser.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/359e70d1b20402ca9cc8731909daecfab598e55d/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359e70d1b20402ca9cc8731909daecfab598e55d/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fparser.rs?ref=359e70d1b20402ca9cc8731909daecfab598e55d", "patch": "@@ -139,6 +139,16 @@ impl<'a> Parser<'a> {\n             ))\n         }\n     }\n+\n+    pub fn parse_suffix(&mut self) -> Option<TextRange> {\n+        let start = self.get_pos();\n+        let _ = self.peek()?;\n+        while let Some(_) = self.peek() {\n+            self.advance();\n+        }\n+        let end = self.get_pos();\n+        Some(TextRange::from_to(start, end))\n+    }\n }\n \n #[derive(Debug, Eq, PartialEq, Clone)]"}, {"sha": "064f085447fef857552f03c9a6b204295dd5c74c", "filename": "crates/ra_syntax/src/string_lexing/string.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/359e70d1b20402ca9cc8731909daecfab598e55d/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359e70d1b20402ca9cc8731909daecfab598e55d/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fstring.rs?ref=359e70d1b20402ca9cc8731909daecfab598e55d", "patch": "@@ -1,12 +1,15 @@\n-use crate::string_lexing::{\n+use crate::{\n+    TextRange,\n+    string_lexing::{\n     parser::Parser,\n     StringComponent,\n-};\n+}};\n \n pub fn parse_string_literal(src: &str) -> StringComponentIterator {\n     StringComponentIterator {\n         parser: Parser::new(src, b'\"'),\n         has_closing_quote: false,\n+        suffix: None,\n         prefix: None,\n         quote: b'\"',\n     }\n@@ -16,6 +19,7 @@ pub fn parse_byte_string_literal(src: &str) -> StringComponentIterator {\n     StringComponentIterator {\n         parser: Parser::new(src, b'\"'),\n         has_closing_quote: false,\n+        suffix: None,\n         prefix: Some(b'b'),\n         quote: b'\"',\n     }\n@@ -25,6 +29,7 @@ pub fn parse_char_literal(src: &str) -> StringComponentIterator {\n     StringComponentIterator {\n         parser: Parser::new(src, b'\\''),\n         has_closing_quote: false,\n+        suffix: None,\n         prefix: None,\n         quote: b'\\'',\n     }\n@@ -34,6 +39,7 @@ pub fn parse_byte_literal(src: &str) -> StringComponentIterator {\n     StringComponentIterator {\n         parser: Parser::new(src, b'\\''),\n         has_closing_quote: false,\n+        suffix: None,\n         prefix: Some(b'b'),\n         quote: b'\\'',\n     }\n@@ -42,6 +48,7 @@ pub fn parse_byte_literal(src: &str) -> StringComponentIterator {\n pub struct StringComponentIterator<'a> {\n     parser: Parser<'a>,\n     pub has_closing_quote: bool,\n+    pub suffix: Option<TextRange>,\n     prefix: Option<u8>,\n     quote: u8,\n }\n@@ -72,6 +79,9 @@ impl<'a> Iterator for StringComponentIterator<'a> {\n         if self.parser.peek() == Some(self.quote as char) {\n             self.parser.advance();\n             self.has_closing_quote = true;\n+            if let Some(range) = self.parser.parse_suffix() {\n+                self.suffix = Some(range);\n+            }\n         }\n \n         assert!("}, {"sha": "2f9b7fac7db541bbac8d5c9bb267dfbeed3cfc97", "filename": "crates/ra_syntax/src/validation/byte.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/359e70d1b20402ca9cc8731909daecfab598e55d/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fbyte.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359e70d1b20402ca9cc8731909daecfab598e55d/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fbyte.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fbyte.rs?ref=359e70d1b20402ca9cc8731909daecfab598e55d", "patch": "@@ -27,6 +27,10 @@ pub(super) fn validate_byte_node(node: ast::Byte, errors: &mut Vec<SyntaxError>)\n         errors.push(SyntaxError::new(UnclosedByte, literal_range));\n     }\n \n+    if let Some(range) = components.suffix {\n+        errors.push(SyntaxError::new(InvalidSuffix, range));\n+    }\n+\n     if len == 0 {\n         errors.push(SyntaxError::new(EmptyByte, literal_range));\n     }"}, {"sha": "bf4c934a7e7d34b137fe09547522fba86950a786", "filename": "crates/ra_syntax/src/validation/byte_string.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/359e70d1b20402ca9cc8731909daecfab598e55d/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fbyte_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359e70d1b20402ca9cc8731909daecfab598e55d/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fbyte_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fbyte_string.rs?ref=359e70d1b20402ca9cc8731909daecfab598e55d", "patch": "@@ -32,6 +32,10 @@ pub(crate) fn validate_byte_string_node(node: ast::ByteString, errors: &mut Vec<\n     if !components.has_closing_quote {\n         errors.push(SyntaxError::new(UnclosedString, literal_range));\n     }\n+\n+    if let Some(range) = components.suffix {\n+        errors.push(SyntaxError::new(InvalidSuffix, range));\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "50184aaf8151d1667032b3cd323c66e8ccc75552", "filename": "crates/ra_syntax/src/validation/char.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/359e70d1b20402ca9cc8731909daecfab598e55d/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359e70d1b20402ca9cc8731909daecfab598e55d/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fchar.rs?ref=359e70d1b20402ca9cc8731909daecfab598e55d", "patch": "@@ -30,6 +30,10 @@ pub(super) fn validate_char_node(node: ast::Char, errors: &mut Vec<SyntaxError>)\n         errors.push(SyntaxError::new(UnclosedChar, literal_range));\n     }\n \n+    if let Some(range) = components.suffix {\n+        errors.push(SyntaxError::new(InvalidSuffix, range));\n+    }\n+\n     if len == 0 {\n         errors.push(SyntaxError::new(EmptyChar, literal_range));\n     }"}, {"sha": "ff1fb6edc4e621996030967ece896cbe9233e4c3", "filename": "crates/ra_syntax/src/validation/string.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/359e70d1b20402ca9cc8731909daecfab598e55d/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359e70d1b20402ca9cc8731909daecfab598e55d/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fstring.rs?ref=359e70d1b20402ca9cc8731909daecfab598e55d", "patch": "@@ -27,6 +27,10 @@ pub(crate) fn validate_string_node(node: ast::String, errors: &mut Vec<SyntaxErr\n     if !components.has_closing_quote {\n         errors.push(SyntaxError::new(UnclosedString, literal_range));\n     }\n+\n+    if let Some(range) = components.suffix {\n+        errors.push(SyntaxError::new(InvalidSuffix, range));\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "534f3511e3f05a022fbdcb67cee75932dafd9f35", "filename": "crates/ra_syntax/src/yellow/syntax_error.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/359e70d1b20402ca9cc8731909daecfab598e55d/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fsyntax_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359e70d1b20402ca9cc8731909daecfab598e55d/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fsyntax_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fsyntax_error.rs?ref=359e70d1b20402ca9cc8731909daecfab598e55d", "patch": "@@ -93,6 +93,7 @@ pub enum SyntaxErrorKind {\n     OverlongUnicodeEscape,\n     UnicodeEscapeOutOfRange,\n     UnclosedString,\n+    InvalidSuffix,\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -134,6 +135,7 @@ impl fmt::Display for SyntaxErrorKind {\n             }\n             UnicodeEscapeOutOfRange => write!(f, \"Unicode escape code should be at most 0x10FFFF\"),\n             UnclosedString => write!(f, \"Unclosed string literal\"),\n+            InvalidSuffix => write!(f, \"Invalid literal suffix\"),\n             ParseError(msg) => write!(f, \"{}\", msg.0),\n         }\n     }"}]}