{"sha": "b0115fb996b8cee2202ca379efd209d74ce0f751", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMTE1ZmI5OTZiOGNlZTIyMDJjYTM3OWVmZDIwOWQ3NGNlMGY3NTE=", "commit": {"author": {"name": "CrazyRoka", "email": "RokaRostuk@gmail.com", "date": "2020-04-24T21:52:02Z"}, "committer": {"name": "CrazyRoka", "email": "RokaRostuk@gmail.com", "date": "2020-04-24T21:52:02Z"}, "message": "Removed unnecessary code, added support for vector references", "tree": {"sha": "5df46a3f8ee01e9f7b85dd92497c76f216c741f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5df46a3f8ee01e9f7b85dd92497c76f216c741f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0115fb996b8cee2202ca379efd209d74ce0f751", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0115fb996b8cee2202ca379efd209d74ce0f751", "html_url": "https://github.com/rust-lang/rust/commit/b0115fb996b8cee2202ca379efd209d74ce0f751", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0115fb996b8cee2202ca379efd209d74ce0f751/comments", "author": {"login": "CrazyRoka", "id": 19844144, "node_id": "MDQ6VXNlcjE5ODQ0MTQ0", "avatar_url": "https://avatars.githubusercontent.com/u/19844144?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CrazyRoka", "html_url": "https://github.com/CrazyRoka", "followers_url": "https://api.github.com/users/CrazyRoka/followers", "following_url": "https://api.github.com/users/CrazyRoka/following{/other_user}", "gists_url": "https://api.github.com/users/CrazyRoka/gists{/gist_id}", "starred_url": "https://api.github.com/users/CrazyRoka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CrazyRoka/subscriptions", "organizations_url": "https://api.github.com/users/CrazyRoka/orgs", "repos_url": "https://api.github.com/users/CrazyRoka/repos", "events_url": "https://api.github.com/users/CrazyRoka/events{/privacy}", "received_events_url": "https://api.github.com/users/CrazyRoka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CrazyRoka", "id": 19844144, "node_id": "MDQ6VXNlcjE5ODQ0MTQ0", "avatar_url": "https://avatars.githubusercontent.com/u/19844144?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CrazyRoka", "html_url": "https://github.com/CrazyRoka", "followers_url": "https://api.github.com/users/CrazyRoka/followers", "following_url": "https://api.github.com/users/CrazyRoka/following{/other_user}", "gists_url": "https://api.github.com/users/CrazyRoka/gists{/gist_id}", "starred_url": "https://api.github.com/users/CrazyRoka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CrazyRoka/subscriptions", "organizations_url": "https://api.github.com/users/CrazyRoka/orgs", "repos_url": "https://api.github.com/users/CrazyRoka/repos", "events_url": "https://api.github.com/users/CrazyRoka/events{/privacy}", "received_events_url": "https://api.github.com/users/CrazyRoka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96e2bc80f556e54b95ae224dc2f59cfa47397a38", "url": "https://api.github.com/repos/rust-lang/rust/commits/96e2bc80f556e54b95ae224dc2f59cfa47397a38", "html_url": "https://github.com/rust-lang/rust/commit/96e2bc80f556e54b95ae224dc2f59cfa47397a38"}], "stats": {"total": 165, "additions": 94, "deletions": 71}, "files": [{"sha": "81ddc8c0067c7184dd0e35af2bd5129724e2e7d2", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0115fb996b8cee2202ca379efd209d74ce0f751/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0115fb996b8cee2202ca379efd209d74ce0f751/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=b0115fb996b8cee2202ca379efd209d74ce0f751", "patch": "@@ -358,9 +358,9 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n             },\n             (Some(Constant::Vec(vec)), _) => {\n                 if !vec.is_empty() && vec.iter().all(|x| *x == vec[0]) {\n-                    match vec[0] {\n-                        Constant::F32(x) => Some(Constant::F32(x)),\n-                        Constant::F64(x) => Some(Constant::F64(x)),\n+                    match vec.get(0) {\n+                        Some(Constant::F32(x)) => Some(Constant::F32(*x)),\n+                        Some(Constant::F64(x)) => Some(Constant::F64(*x)),\n                         _ => None,\n                     }\n                 } else {"}, {"sha": "07121dedefe291673535123d6822eba76ac07a2f", "filename": "clippy_lints/src/match_vec_item.rs", "status": "modified", "additions": 22, "deletions": 45, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/b0115fb996b8cee2202ca379efd209d74ce0f751/clippy_lints%2Fsrc%2Fmatch_vec_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0115fb996b8cee2202ca379efd209d74ce0f751/clippy_lints%2Fsrc%2Fmatch_vec_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatch_vec_item.rs?ref=b0115fb996b8cee2202ca379efd209d74ce0f751", "patch": "@@ -1,9 +1,9 @@\n-use crate::utils::{is_wild, span_lint_and_help};\n+use crate::utils::{is_type_diagnostic_item, snippet_with_applicability, span_lint_and_sugg, walk_ptrs_ty};\n use if_chain::if_chain;\n-use rustc_hir::{Arm, Expr, ExprKind, MatchSource};\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind, MatchSource};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{self, AdtDef};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -48,64 +48,41 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MatchVecItem {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'tcx>) {\n         if_chain! {\n             if !in_external_macro(cx.sess(), expr.span);\n-            if let ExprKind::Match(ref ex, ref arms, MatchSource::Normal) = expr.kind;\n-            if contains_wild_arm(arms);\n-            if is_vec_indexing(cx, ex);\n+            if let ExprKind::Match(ref match_expr, _, MatchSource::Normal) = expr.kind;\n+            if let Some(idx_expr) = is_vec_indexing(cx, match_expr);\n+            if let ExprKind::Index(vec, idx) = idx_expr.kind;\n \n             then {\n-                span_lint_and_help(\n+                let mut applicability = Applicability::MaybeIncorrect;\n+                span_lint_and_sugg(\n                     cx,\n                     MATCH_VEC_ITEM,\n-                    expr.span,\n-                    \"indexing vector may panic\",\n-                    None,\n-                    \"consider using `get(..)` instead.\",\n+                    match_expr.span,\n+                    \"indexing vector may panic. Consider using `get`\",\n+                    \"try this\",\n+                    format!(\n+                        \"{}.get({})\",\n+                        snippet_with_applicability(cx, vec.span, \"..\", &mut applicability),\n+                        snippet_with_applicability(cx, idx.span, \"..\", &mut applicability)\n+                    ),\n+                    applicability\n                 );\n             }\n         }\n     }\n }\n \n-fn contains_wild_arm(arms: &[Arm<'_>]) -> bool {\n-    arms.iter().any(|arm| is_wild(&arm.pat) && is_unit_expr(arm.body))\n-}\n-\n-fn is_vec_indexing<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'tcx>) -> bool {\n+fn is_vec_indexing<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'tcx>) -> Option<&'tcx Expr<'tcx>> {\n     if_chain! {\n         if let ExprKind::Index(ref array, _) = expr.kind;\n         let ty = cx.tables.expr_ty(array);\n-        if let ty::Adt(def, _) = ty.kind;\n-        if is_vec(cx, def);\n+        let ty = walk_ptrs_ty(ty);\n+        if is_type_diagnostic_item(cx, ty, sym!(vec_type));\n \n         then {\n-            return true;\n+            return Some(expr);\n         }\n     }\n \n-    false\n-}\n-\n-fn is_vec<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, def: &'a AdtDef) -> bool {\n-    if_chain! {\n-        let def_path = cx.tcx.def_path(def.did);\n-        if def_path.data.len() == 2;\n-        if let Some(module) = def_path.data.get(0);\n-        if module.data.as_symbol() == sym!(vec);\n-        if let Some(name) = def_path.data.get(1);\n-        if name.data.as_symbol() == sym!(Vec);\n-\n-        then {\n-            return true;\n-        }\n-    }\n-\n-    false\n-}\n-\n-fn is_unit_expr(expr: &Expr<'_>) -> bool {\n-    match expr.kind {\n-        ExprKind::Tup(ref v) if v.is_empty() => true,\n-        ExprKind::Block(ref b, _) if b.stmts.is_empty() && b.expr.is_none() => true,\n-        _ => false,\n-    }\n+    None\n }"}, {"sha": "d00d0bc2fe5304c44881429eb2888c1155b55d37", "filename": "tests/ui/match_vec_item.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b0115fb996b8cee2202ca379efd209d74ce0f751/tests%2Fui%2Fmatch_vec_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0115fb996b8cee2202ca379efd209d74ce0f751/tests%2Fui%2Fmatch_vec_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_vec_item.rs?ref=b0115fb996b8cee2202ca379efd209d74ce0f751", "patch": "@@ -4,6 +4,7 @@ fn main() {\n     match_with_wildcard();\n     match_without_wildcard();\n     match_wildcard_and_action();\n+    match_vec_ref();\n     match_with_get();\n     match_with_array();\n }\n@@ -33,14 +34,14 @@ fn match_without_wildcard() {\n     let range = 1..3;\n     let idx = 2;\n \n-    // Ok\n+    // Lint, may panic\n     match arr[idx] {\n         0 => println!(\"0\"),\n         1 => println!(\"1\"),\n         num => {},\n     }\n \n-    // Ok\n+    // Lint, may panic\n     match arr[range] {\n         [0, 1] => println!(\"0 1\"),\n         [1, 2] => println!(\"1 2\"),\n@@ -53,21 +54,41 @@ fn match_wildcard_and_action() {\n     let range = 1..3;\n     let idx = 3;\n \n-    // Ok\n+    // Lint, may panic\n     match arr[idx] {\n         0 => println!(\"0\"),\n         1 => println!(\"1\"),\n         _ => println!(\"Hello, World!\"),\n     }\n \n-    // Ok\n+    // Lint, may panic\n     match arr[range] {\n         [0, 1] => println!(\"0 1\"),\n         [1, 2] => println!(\"1 2\"),\n         _ => println!(\"Hello, World!\"),\n     }\n }\n \n+fn match_vec_ref() {\n+    let arr = &vec![0, 1, 2, 3];\n+    let range = 1..3;\n+    let idx = 3;\n+\n+    // Lint, may panic\n+    match arr[idx] {\n+        0 => println!(\"0\"),\n+        1 => println!(\"1\"),\n+        _ => {},\n+    }\n+\n+    // Lint, may panic\n+    match arr[range] {\n+        [0, 1] => println!(\"0 1\"),\n+        [1, 2] => println!(\"1 2\"),\n+        _ => {},\n+    }\n+}\n+\n fn match_with_get() {\n     let arr = vec![0, 1, 2, 3];\n     let range = 1..3;"}, {"sha": "2da2eaeee9b11ccd92296e2949a20945527ffdc2", "filename": "tests/ui/match_vec_item.stderr", "status": "modified", "additions": 44, "deletions": 19, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/b0115fb996b8cee2202ca379efd209d74ce0f751/tests%2Fui%2Fmatch_vec_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0115fb996b8cee2202ca379efd209d74ce0f751/tests%2Fui%2Fmatch_vec_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_vec_item.stderr?ref=b0115fb996b8cee2202ca379efd209d74ce0f751", "patch": "@@ -1,27 +1,52 @@\n-error: indexing vector may panic\n-  --> $DIR/match_vec_item.rs:17:5\n+error: indexing vector may panic. Consider using `get`\n+  --> $DIR/match_vec_item.rs:18:11\n    |\n-LL | /     match arr[idx] {\n-LL | |         0 => println!(\"0\"),\n-LL | |         1 => println!(\"1\"),\n-LL | |         _ => {},\n-LL | |     }\n-   | |_____^\n+LL |     match arr[idx] {\n+   |           ^^^^^^^^ help: try this: `arr.get(idx)`\n    |\n    = note: `-D clippy::match-vec-item` implied by `-D warnings`\n-   = help: consider using `get(..)` instead.\n \n-error: indexing vector may panic\n-  --> $DIR/match_vec_item.rs:24:5\n+error: indexing vector may panic. Consider using `get`\n+  --> $DIR/match_vec_item.rs:25:11\n    |\n-LL | /     match arr[range] {\n-LL | |         [0, 1] => println!(\"0 1\"),\n-LL | |         [1, 2] => println!(\"1 2\"),\n-LL | |         _ => {},\n-LL | |     }\n-   | |_____^\n+LL |     match arr[range] {\n+   |           ^^^^^^^^^^ help: try this: `arr.get(range)`\n+\n+error: indexing vector may panic. Consider using `get`\n+  --> $DIR/match_vec_item.rs:38:11\n+   |\n+LL |     match arr[idx] {\n+   |           ^^^^^^^^ help: try this: `arr.get(idx)`\n+\n+error: indexing vector may panic. Consider using `get`\n+  --> $DIR/match_vec_item.rs:45:11\n+   |\n+LL |     match arr[range] {\n+   |           ^^^^^^^^^^ help: try this: `arr.get(range)`\n+\n+error: indexing vector may panic. Consider using `get`\n+  --> $DIR/match_vec_item.rs:58:11\n+   |\n+LL |     match arr[idx] {\n+   |           ^^^^^^^^ help: try this: `arr.get(idx)`\n+\n+error: indexing vector may panic. Consider using `get`\n+  --> $DIR/match_vec_item.rs:65:11\n+   |\n+LL |     match arr[range] {\n+   |           ^^^^^^^^^^ help: try this: `arr.get(range)`\n+\n+error: indexing vector may panic. Consider using `get`\n+  --> $DIR/match_vec_item.rs:78:11\n+   |\n+LL |     match arr[idx] {\n+   |           ^^^^^^^^ help: try this: `arr.get(idx)`\n+\n+error: indexing vector may panic. Consider using `get`\n+  --> $DIR/match_vec_item.rs:85:11\n    |\n-   = help: consider using `get(..)` instead.\n+LL |     match arr[range] {\n+   |           ^^^^^^^^^^ help: try this: `arr.get(range)`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 8 previous errors\n "}]}