{"sha": "f52082f54321e56fa4dbd9194c1cfd61089e2729", "node_id": "C_kwDOAAsO6NoAKGY1MjA4MmY1NDMyMWU1NmZhNGRiZDkxOTRjMWNmZDYxMDg5ZTI3Mjk", "commit": {"author": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2022-09-10T10:29:16Z"}, "committer": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2022-09-10T11:13:54Z"}, "message": "Update documentation", "tree": {"sha": "24a0adc8d9372d26e1c4d5e1b3bfaf0bc5094b30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24a0adc8d9372d26e1c4d5e1b3bfaf0bc5094b30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f52082f54321e56fa4dbd9194c1cfd61089e2729", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f52082f54321e56fa4dbd9194c1cfd61089e2729", "html_url": "https://github.com/rust-lang/rust/commit/f52082f54321e56fa4dbd9194c1cfd61089e2729", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f52082f54321e56fa4dbd9194c1cfd61089e2729/comments", "author": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f81b07e9470728a311a5d816616762e37b00f29f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f81b07e9470728a311a5d816616762e37b00f29f", "html_url": "https://github.com/rust-lang/rust/commit/f81b07e9470728a311a5d816616762e37b00f29f"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "83ed3d915a2917c5df85ccd2f697f4e86c72fc0a", "filename": "library/alloc/src/vec/in_place_collect.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f52082f54321e56fa4dbd9194c1cfd61089e2729/library%2Falloc%2Fsrc%2Fvec%2Fin_place_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52082f54321e56fa4dbd9194c1cfd61089e2729/library%2Falloc%2Fsrc%2Fvec%2Fin_place_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fin_place_collect.rs?ref=f52082f54321e56fa4dbd9194c1cfd61089e2729", "patch": "@@ -55,6 +55,9 @@\n //! This is handled by the [`InPlaceDrop`] guard for sink items (`U`) and by\n //! [`vec::IntoIter::forget_allocation_drop_remaining()`] for remaining source items (`T`).\n //!\n+//! If dropping any remaining source item (`T`) panics then [`InPlaceDstBufDrop`] will handle dropping\n+//! the already collected sink items (`U`) and freeing the allocation.\n+//!\n //! [`vec::IntoIter::forget_allocation_drop_remaining()`]: super::IntoIter::forget_allocation_drop_remaining()\n //!\n //! # O(1) collect\n@@ -194,8 +197,8 @@ where\n         // Drop any remaining values at the tail of the source but prevent drop of the allocation\n         // itself once IntoIter goes out of scope.\n         // If the drop panics then we also try to drop the destination buffer and its elements.\n-        // This is safe because `forget_allocation_drop_remaining` forgets the allocation *before*\n-        // trying to drop the remaining elements.\n+        // This is safe because `forget_allocation_drop_remaining` immediately forgets the allocation\n+        // and won't panic before that.\n         //\n         // Note: This access to the source wouldn't be allowed by the TrustedRandomIteratorNoCoerce\n         // contract (used by SpecInPlaceCollect below). But see the \"O(1) collect\" section in the"}, {"sha": "b5a03392a1797698fa6522d96f3917b5307d1f63", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f52082f54321e56fa4dbd9194c1cfd61089e2729/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52082f54321e56fa4dbd9194c1cfd61089e2729/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=f52082f54321e56fa4dbd9194c1cfd61089e2729", "patch": "@@ -96,13 +96,16 @@ impl<T, A: Allocator> IntoIter<T, A> {\n     }\n \n     /// Drops remaining elements and relinquishes the backing allocation.\n+    /// This method guarantees it won't panic before relinquishing\n+    /// the backing allocation.\n     ///\n     /// This is roughly equivalent to the following, but more efficient\n     ///\n     /// ```\n     /// # let mut into_iter = Vec::<u8>::with_capacity(10).into_iter();\n+    /// let mut into_iter = std::mem::replace(&mut into_iter, Vec::new().into_iter());\n     /// (&mut into_iter).for_each(core::mem::drop);\n-    /// unsafe { core::ptr::write(&mut into_iter, Vec::new().into_iter()); }\n+    /// std::mem::forget(into_iter);\n     /// ```\n     ///\n     /// This method is used by in-place iteration, refer to the vec::in_place_collect\n@@ -119,6 +122,8 @@ impl<T, A: Allocator> IntoIter<T, A> {\n         self.ptr = self.buf.as_ptr();\n         self.end = self.buf.as_ptr();\n \n+        // Dropping the remaining elements can panic, so this needs to be\n+        // done only after updating the other fields.\n         unsafe {\n             ptr::drop_in_place(remaining);\n         }"}]}