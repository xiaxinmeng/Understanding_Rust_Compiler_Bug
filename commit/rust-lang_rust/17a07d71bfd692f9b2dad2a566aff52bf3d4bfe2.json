{"sha": "17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YTA3ZDcxYmZkNjkyZjliMmRhZDJhNTY2YWZmNTJiZjNkNGJmZTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-10T16:44:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-10T16:44:04Z"}, "message": "Auto merge of #76570 - cratelyn:implement-rfc-2945-c-unwind-abi, r=Amanieu\n\nImplement RFC 2945: \"C-unwind\" ABI\n\n## Implement RFC 2945: \"C-unwind\" ABI\n\nThis branch implements [RFC 2945]. The tracking issue for this RFC is #74990.\n\nThe feature gate for the issue is `#![feature(c_unwind)]`.\n\nThis RFC was created as part of the ffi-unwind project group tracked at rust-lang/lang-team#19.\n\n### Changes\n\nFurther details will be provided in commit messages, but a high-level overview\nof the changes follows:\n\n* A boolean `unwind` payload is added to the `C`, `System`, `Stdcall`,\nand `Thiscall` variants, marking whether unwinding across FFI boundaries is\nacceptable. The cases where each of these variants' `unwind` member is true\ncorrespond with the `C-unwind`, `system-unwind`, `stdcall-unwind`, and\n`thiscall-unwind` ABI strings introduced in RFC 2945 [3].\n\n* This commit adds a `c_unwind` feature gate for the new ABI strings.\nTests for this feature gate are included in `src/test/ui/c-unwind/`, which\nensure that this feature gate works correctly for each of the new ABIs.\nA new language features entry in the unstable book is added as well.\n\n* We adjust the `rustc_middle::ty::layout::fn_can_unwind` function,\nused to compute whether or not a `FnAbi` object represents a function that\nshould be able to unwind when `panic=unwind` is in use.\n\n* Changes are also made to\n`rustc_mir_build::build::should_abort_on_panic` so that the function ABI is\nused to determind whether it should abort, assuming that the `panic=unwind`\nstrategy is being used, and no explicit unwind attribute was provided.\n\n[RFC 2945]: https://github.com/rust-lang/rfcs/blob/master/text/2945-c-unwind-abi.md", "tree": {"sha": "43c603cd0c9c6476ec1905969a4f283404834c21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43c603cd0c9c6476ec1905969a4f283404834c21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "html_url": "https://github.com/rust-lang/rust/commit/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fe790e3c40710ecb95ddaadb98b59a3bb4f8326", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe790e3c40710ecb95ddaadb98b59a3bb4f8326", "html_url": "https://github.com/rust-lang/rust/commit/5fe790e3c40710ecb95ddaadb98b59a3bb4f8326"}, {"sha": "05bf037fecfad619e140877769379a1d24952bad", "url": "https://api.github.com/repos/rust-lang/rust/commits/05bf037fecfad619e140877769379a1d24952bad", "html_url": "https://github.com/rust-lang/rust/commit/05bf037fecfad619e140877769379a1d24952bad"}], "stats": {"total": 731, "additions": 661, "deletions": 70}, "files": [{"sha": "f656325f68181cf8150c43c375969147e66068c8", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -319,10 +319,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             },\n             ItemKind::ForeignMod(ref fm) => {\n                 if fm.abi.is_none() {\n-                    self.maybe_lint_missing_abi(span, id, abi::Abi::C);\n+                    self.maybe_lint_missing_abi(span, id, abi::Abi::C { unwind: false });\n                 }\n                 hir::ItemKind::ForeignMod {\n-                    abi: fm.abi.map_or(abi::Abi::C, |abi| self.lower_abi(abi)),\n+                    abi: fm.abi.map_or(abi::Abi::C { unwind: false }, |abi| self.lower_abi(abi)),\n                     items: self\n                         .arena\n                         .alloc_from_iter(fm.items.iter().map(|x| self.lower_foreign_item_ref(x))),\n@@ -1334,8 +1334,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         match ext {\n             Extern::None => abi::Abi::Rust,\n             Extern::Implicit => {\n-                self.maybe_lint_missing_abi(span, id, abi::Abi::C);\n-                abi::Abi::C\n+                self.maybe_lint_missing_abi(span, id, abi::Abi::C { unwind: false });\n+                abi::Abi::C { unwind: false }\n             }\n             Extern::Explicit(abi) => self.lower_abi(abi),\n         }"}, {"sha": "8a17ac90a023d1f962fbc2bbd9857ff563358c77", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -164,6 +164,38 @@ impl<'a> PostExpansionVisitor<'a> {\n                     \"C-cmse-nonsecure-call ABI is experimental and subject to change\"\n                 );\n             }\n+            \"C-unwind\" => {\n+                gate_feature_post!(\n+                    &self,\n+                    c_unwind,\n+                    span,\n+                    \"C-unwind ABI is experimental and subject to change\"\n+                );\n+            }\n+            \"stdcall-unwind\" => {\n+                gate_feature_post!(\n+                    &self,\n+                    c_unwind,\n+                    span,\n+                    \"stdcall-unwind ABI is experimental and subject to change\"\n+                );\n+            }\n+            \"system-unwind\" => {\n+                gate_feature_post!(\n+                    &self,\n+                    c_unwind,\n+                    span,\n+                    \"system-unwind ABI is experimental and subject to change\"\n+                );\n+            }\n+            \"thiscall-unwind\" => {\n+                gate_feature_post!(\n+                    &self,\n+                    c_unwind,\n+                    span,\n+                    \"thiscall-unwind ABI is experimental and subject to change\"\n+                );\n+            }\n             abi => self\n                 .sess\n                 .parse_sess"}, {"sha": "b158d73f3a1a89cbcc566dbfd2f2d75f7569792b", "filename": "compiler/rustc_codegen_cranelift/src/abi/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -476,8 +476,11 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n \n     // FIXME find a cleaner way to support varargs\n     if fn_sig.c_variadic {\n-        if fn_sig.abi != Abi::C {\n-            fx.tcx.sess.span_fatal(span, &format!(\"Variadic call for non-C abi {:?}\", fn_sig.abi));\n+        if !matches!(fn_sig.abi, Abi::C { .. }) {\n+            fx.tcx.sess.span_fatal(\n+                span,\n+                &format!(\"Variadic call for non-C abi {:?}\", fn_sig.abi),\n+            );\n         }\n         let sig_ref = fx.bcx.func.dfg.call_signature(call_inst).unwrap();\n         let abi_params = call_args"}, {"sha": "ee2fce34b0b0df24bfd53c05530d41cf2aa0251b", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -641,6 +641,9 @@ declare_features! (\n     /// Allows associated types in inherent impls.\n     (active, inherent_associated_types, \"1.52.0\", Some(8995), None),\n \n+    /// Allows `extern \"C-unwind\" fn` to enable unwinding across ABI boundaries.\n+    (active, c_unwind, \"1.52.0\", Some(74990), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "814581a6cf171f4718590d0947ddb63719a7470f", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 39, "deletions": 16, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -2562,6 +2562,7 @@ fn fn_can_unwind(\n     panic_strategy: PanicStrategy,\n     codegen_fn_attr_flags: CodegenFnAttrFlags,\n     call_conv: Conv,\n+    abi: SpecAbi,\n ) -> bool {\n     if panic_strategy != PanicStrategy::Unwind {\n         // In panic=abort mode we assume nothing can unwind anywhere, so\n@@ -2586,17 +2587,34 @@ fn fn_can_unwind(\n             //\n             //  2. A Rust item using a non-Rust ABI (like `extern \"C\" fn foo() { ... }`).\n             //\n-            // Foreign items (case 1) are assumed to not unwind; it is\n-            // UB otherwise. (At least for now; see also\n-            // rust-lang/rust#63909 and Rust RFC 2753.)\n-            //\n-            // Items defined in Rust with non-Rust ABIs (case 2) are also\n-            // not supposed to unwind. Whether this should be enforced\n-            // (versus stating it is UB) and *how* it would be enforced\n-            // is currently under discussion; see rust-lang/rust#58794.\n-            //\n-            // In either case, we mark item as explicitly nounwind.\n-            false\n+            // In both of these cases, we should refer to the ABI to determine whether or not we\n+            // should unwind. See Rust RFC 2945 for more information on this behavior, here:\n+            // https://github.com/rust-lang/rfcs/blob/master/text/2945-c-unwind-abi.md\n+            use SpecAbi::*;\n+            match abi {\n+                C { unwind } | Stdcall { unwind } | System { unwind } | Thiscall { unwind } => {\n+                    unwind\n+                }\n+                Cdecl\n+                | Fastcall\n+                | Vectorcall\n+                | Aapcs\n+                | Win64\n+                | SysV64\n+                | PtxKernel\n+                | Msp430Interrupt\n+                | X86Interrupt\n+                | AmdGpuKernel\n+                | EfiApi\n+                | AvrInterrupt\n+                | AvrNonBlockingInterrupt\n+                | CCmseNonSecureCall\n+                | RustIntrinsic\n+                | PlatformIntrinsic\n+                | Unadjusted => false,\n+                // In the `if` above, we checked for functions with the Rust calling convention.\n+                Rust | RustCall => unreachable!(),\n+            }\n         }\n     }\n }\n@@ -2654,14 +2672,14 @@ where\n             RustIntrinsic | PlatformIntrinsic | Rust | RustCall => Conv::Rust,\n \n             // It's the ABI's job to select this, not ours.\n-            System => bug!(\"system abi should be selected elsewhere\"),\n+            System { .. } => bug!(\"system abi should be selected elsewhere\"),\n             EfiApi => bug!(\"eficall abi should be selected elsewhere\"),\n \n-            Stdcall => Conv::X86Stdcall,\n+            Stdcall { .. } => Conv::X86Stdcall,\n             Fastcall => Conv::X86Fastcall,\n             Vectorcall => Conv::X86VectorCall,\n-            Thiscall => Conv::X86ThisCall,\n-            C => Conv::C,\n+            Thiscall { .. } => Conv::X86ThisCall,\n+            C { .. } => Conv::C,\n             Unadjusted => Conv::C,\n             Win64 => Conv::X86_64Win64,\n             SysV64 => Conv::X86_64SysV,\n@@ -2823,7 +2841,12 @@ where\n             c_variadic: sig.c_variadic,\n             fixed_count: inputs.len(),\n             conv,\n-            can_unwind: fn_can_unwind(cx.tcx().sess.panic_strategy(), codegen_fn_attr_flags, conv),\n+            can_unwind: fn_can_unwind(\n+                cx.tcx().sess.panic_strategy(),\n+                codegen_fn_attr_flags,\n+                conv,\n+                sig.abi,\n+            ),\n         };\n         fn_abi.adjust_for_abi(cx, sig.abi);\n         debug!(\"FnAbi::new_internal = {:?}\", fn_abi);"}, {"sha": "4aa1360d535391830c24fa6e0aeb820a6ad63048", "filename": "compiler/rustc_mir/src/interpret/terminator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -248,9 +248,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             };\n             if normalize_abi(caller_abi) != normalize_abi(callee_abi) {\n                 throw_ub_format!(\n-                    \"calling a function with ABI {:?} using caller ABI {:?}\",\n-                    callee_abi,\n-                    caller_abi\n+                    \"calling a function with ABI {} using caller ABI {}\",\n+                    callee_abi.name(),\n+                    caller_abi.name()\n                 )\n             }\n         }"}, {"sha": "3ac9c631d031e91237470061e70c50bc2b4aa0d2", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -548,7 +548,7 @@ macro_rules! unpack {\n     }};\n }\n \n-fn should_abort_on_panic(tcx: TyCtxt<'_>, fn_def_id: LocalDefId, _abi: Abi) -> bool {\n+fn should_abort_on_panic(tcx: TyCtxt<'_>, fn_def_id: LocalDefId, abi: Abi) -> bool {\n     // Validate `#[unwind]` syntax regardless of platform-specific panic strategy.\n     let attrs = &tcx.get_attrs(fn_def_id.to_def_id());\n     let unwind_attr = attr::find_unwind_attr(&tcx.sess, attrs);\n@@ -558,12 +558,42 @@ fn should_abort_on_panic(tcx: TyCtxt<'_>, fn_def_id: LocalDefId, _abi: Abi) -> b\n         return false;\n     }\n \n-    // This is a special case: some functions have a C abi but are meant to\n-    // unwind anyway. Don't stop them.\n     match unwind_attr {\n-        None => false, // FIXME(#58794); should be `!(abi == Abi::Rust || abi == Abi::RustCall)`\n+        // If an `#[unwind]` attribute was found, we should adhere to it.\n         Some(UnwindAttr::Allowed) => false,\n         Some(UnwindAttr::Aborts) => true,\n+        // If no attribute was found and the panic strategy is `unwind`, then we should examine\n+        // the function's ABI string to determine whether it should abort upon panic.\n+        None => {\n+            use Abi::*;\n+            match abi {\n+                // In the case of ABI's that have an `-unwind` equivalent, check whether the ABI\n+                // permits unwinding. If so, we should not abort. Otherwise, we should.\n+                C { unwind } | Stdcall { unwind } | System { unwind } | Thiscall { unwind } => {\n+                    !unwind\n+                }\n+                // Rust and `rust-call` functions are allowed to unwind, and should not abort.\n+                Rust | RustCall => false,\n+                // Other ABI's should abort.\n+                Cdecl\n+                | Fastcall\n+                | Vectorcall\n+                | Aapcs\n+                | Win64\n+                | SysV64\n+                | PtxKernel\n+                | Msp430Interrupt\n+                | X86Interrupt\n+                | AmdGpuKernel\n+                | EfiApi\n+                | AvrInterrupt\n+                | AvrNonBlockingInterrupt\n+                | CCmseNonSecureCall\n+                | RustIntrinsic\n+                | PlatformIntrinsic\n+                | Unadjusted => true,\n+            }\n+        }\n     }\n }\n "}, {"sha": "90c5fd422cd518839d1aa79224975536df8986cd", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -330,6 +330,7 @@ symbols! {\n         bridge,\n         bswap,\n         c_str,\n+        c_unwind,\n         c_variadic,\n         call,\n         call_mut,"}, {"sha": "12c0a147990fa35191582f2a33f7527b63143daa", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -440,7 +440,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n                     }\n                     match sig.abi {\n                         Abi::Rust => {}\n-                        Abi::C => cx.push(\"KC\"),\n+                        Abi::C { unwind: false } => cx.push(\"KC\"),\n                         abi => {\n                             cx.push(\"K\");\n                             let name = abi.name();"}, {"sha": "17eb33b8f2eaa77a3de4390aacf021518e973810", "filename": "compiler/rustc_target/src/spec/abi.rs", "status": "modified", "additions": 62, "deletions": 14, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -8,24 +8,21 @@ mod tests;\n #[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Clone, Copy, Debug)]\n #[derive(HashStable_Generic, Encodable, Decodable)]\n pub enum Abi {\n-    // N.B., this ordering MUST match the AbiDatas array below.\n-    // (This is ensured by the test indices_are_correct().)\n-\n     // Multiplatform / generic ABIs\n     //\n     // These ABIs come first because every time we add a new ABI, we\n     // have to re-bless all the hashing tests. These are used in many\n     // places, so giving them stable values reduces test churn. The\n     // specific values are meaningless.\n-    Rust = 0,\n-    C = 1,\n+    Rust,\n+    C { unwind: bool },\n \n     // Single platform ABIs\n     Cdecl,\n-    Stdcall,\n+    Stdcall { unwind: bool },\n     Fastcall,\n     Vectorcall,\n-    Thiscall,\n+    Thiscall { unwind: bool },\n     Aapcs,\n     Win64,\n     SysV64,\n@@ -39,7 +36,7 @@ pub enum Abi {\n     CCmseNonSecureCall,\n \n     // Multiplatform / generic ABIs\n-    System,\n+    System { unwind: bool },\n     RustIntrinsic,\n     RustCall,\n     PlatformIntrinsic,\n@@ -61,13 +58,16 @@ pub struct AbiData {\n const AbiDatas: &[AbiData] = &[\n     // Cross-platform ABIs\n     AbiData { abi: Abi::Rust, name: \"Rust\", generic: true },\n-    AbiData { abi: Abi::C, name: \"C\", generic: true },\n+    AbiData { abi: Abi::C { unwind: false }, name: \"C\", generic: true },\n+    AbiData { abi: Abi::C { unwind: true }, name: \"C-unwind\", generic: true },\n     // Platform-specific ABIs\n     AbiData { abi: Abi::Cdecl, name: \"cdecl\", generic: false },\n-    AbiData { abi: Abi::Stdcall, name: \"stdcall\", generic: false },\n+    AbiData { abi: Abi::Stdcall { unwind: false }, name: \"stdcall\", generic: false },\n+    AbiData { abi: Abi::Stdcall { unwind: true }, name: \"stdcall-unwind\", generic: false },\n     AbiData { abi: Abi::Fastcall, name: \"fastcall\", generic: false },\n     AbiData { abi: Abi::Vectorcall, name: \"vectorcall\", generic: false },\n-    AbiData { abi: Abi::Thiscall, name: \"thiscall\", generic: false },\n+    AbiData { abi: Abi::Thiscall { unwind: false }, name: \"thiscall\", generic: false },\n+    AbiData { abi: Abi::Thiscall { unwind: true }, name: \"thiscall-unwind\", generic: false },\n     AbiData { abi: Abi::Aapcs, name: \"aapcs\", generic: false },\n     AbiData { abi: Abi::Win64, name: \"win64\", generic: false },\n     AbiData { abi: Abi::SysV64, name: \"sysv64\", generic: false },\n@@ -84,7 +84,8 @@ const AbiDatas: &[AbiData] = &[\n     },\n     AbiData { abi: Abi::CCmseNonSecureCall, name: \"C-cmse-nonsecure-call\", generic: false },\n     // Cross-platform ABIs\n-    AbiData { abi: Abi::System, name: \"system\", generic: true },\n+    AbiData { abi: Abi::System { unwind: false }, name: \"system\", generic: true },\n+    AbiData { abi: Abi::System { unwind: true }, name: \"system-unwind\", generic: true },\n     AbiData { abi: Abi::RustIntrinsic, name: \"rust-intrinsic\", generic: true },\n     AbiData { abi: Abi::RustCall, name: \"rust-call\", generic: true },\n     AbiData { abi: Abi::PlatformIntrinsic, name: \"platform-intrinsic\", generic: true },\n@@ -103,7 +104,52 @@ pub fn all_names() -> Vec<&'static str> {\n impl Abi {\n     #[inline]\n     pub fn index(self) -> usize {\n-        self as usize\n+        // N.B., this ordering MUST match the AbiDatas array above.\n+        // (This is ensured by the test indices_are_correct().)\n+        use Abi::*;\n+        let i = match self {\n+            // Cross-platform ABIs\n+            Rust => 0,\n+            C { unwind: false } => 1,\n+            C { unwind: true } => 2,\n+            // Platform-specific ABIs\n+            Cdecl => 3,\n+            Stdcall { unwind: false } => 4,\n+            Stdcall { unwind: true } => 5,\n+            Fastcall => 6,\n+            Vectorcall => 7,\n+            Thiscall { unwind: false } => 8,\n+            Thiscall { unwind: true } => 9,\n+            Aapcs => 10,\n+            Win64 => 11,\n+            SysV64 => 12,\n+            PtxKernel => 13,\n+            Msp430Interrupt => 14,\n+            X86Interrupt => 15,\n+            AmdGpuKernel => 16,\n+            EfiApi => 17,\n+            AvrInterrupt => 18,\n+            AvrNonBlockingInterrupt => 19,\n+            CCmseNonSecureCall => 20,\n+            // Cross-platform ABIs\n+            System { unwind: false } => 21,\n+            System { unwind: true } => 22,\n+            RustIntrinsic => 23,\n+            RustCall => 24,\n+            PlatformIntrinsic => 25,\n+            Unadjusted => 26,\n+        };\n+        debug_assert!(\n+            AbiDatas\n+                .iter()\n+                .enumerate()\n+                .find(|(_, AbiData { abi, .. })| *abi == self)\n+                .map(|(index, _)| index)\n+                .expect(\"abi variant has associated data\")\n+                == i,\n+            \"Abi index did not match `AbiDatas` ordering\"\n+        );\n+        i\n     }\n \n     #[inline]\n@@ -122,6 +168,8 @@ impl Abi {\n \n impl fmt::Display for Abi {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"\\\"{}\\\"\", self.name())\n+        match self {\n+            abi => write!(f, \"\\\"{}\\\"\", abi.name()),\n+        }\n     }\n }"}, {"sha": "01f573313c97fb85401ae0982077ac0fa5dc8743", "filename": "compiler/rustc_target/src/spec/arm_base.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_base.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -2,5 +2,14 @@ use crate::spec::abi::Abi;\n \n // All the calling conventions trigger an assertion(Unsupported calling convention) in llvm on arm\n pub fn unsupported_abis() -> Vec<Abi> {\n-    vec![Abi::Stdcall, Abi::Fastcall, Abi::Vectorcall, Abi::Thiscall, Abi::Win64, Abi::SysV64]\n+    vec![\n+        Abi::Stdcall { unwind: false },\n+        Abi::Stdcall { unwind: true },\n+        Abi::Fastcall,\n+        Abi::Vectorcall,\n+        Abi::Thiscall { unwind: false },\n+        Abi::Thiscall { unwind: true },\n+        Abi::Win64,\n+        Abi::SysV64,\n+    ]\n }"}, {"sha": "110c8dd80ea77e57f2632cd5a18f3cb08d96a57b", "filename": "compiler/rustc_target/src/spec/mipsel_unknown_none.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -23,10 +23,12 @@ pub fn target() -> Target {\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,\n             unsupported_abis: vec![\n-                Abi::Stdcall,\n+                Abi::Stdcall { unwind: false },\n+                Abi::Stdcall { unwind: true },\n                 Abi::Fastcall,\n                 Abi::Vectorcall,\n-                Abi::Thiscall,\n+                Abi::Thiscall { unwind: false },\n+                Abi::Thiscall { unwind: true },\n                 Abi::Win64,\n                 Abi::SysV64,\n             ],"}, {"sha": "c9fffd213d768fd0fb4cea12e3c324beb6ce4425", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -1284,24 +1284,31 @@ impl Target {\n     /// Given a function ABI, turn it into the correct ABI for this target.\n     pub fn adjust_abi(&self, abi: Abi) -> Abi {\n         match abi {\n-            Abi::System => {\n+            Abi::System { unwind } => {\n                 if self.is_like_windows && self.arch == \"x86\" {\n-                    Abi::Stdcall\n+                    Abi::Stdcall { unwind }\n                 } else {\n-                    Abi::C\n+                    Abi::C { unwind }\n                 }\n             }\n             // These ABI kinds are ignored on non-x86 Windows targets.\n             // See https://docs.microsoft.com/en-us/cpp/cpp/argument-passing-and-naming-conventions\n             // and the individual pages for __stdcall et al.\n-            Abi::Stdcall | Abi::Fastcall | Abi::Vectorcall | Abi::Thiscall => {\n-                if self.is_like_windows && self.arch != \"x86\" { Abi::C } else { abi }\n+            Abi::Stdcall { unwind } | Abi::Thiscall { unwind } => {\n+                if self.is_like_windows && self.arch != \"x86\" { Abi::C { unwind } } else { abi }\n+            }\n+            Abi::Fastcall | Abi::Vectorcall => {\n+                if self.is_like_windows && self.arch != \"x86\" {\n+                    Abi::C { unwind: false }\n+                } else {\n+                    abi\n+                }\n             }\n             Abi::EfiApi => {\n                 if self.arch == \"x86_64\" {\n                     Abi::Win64\n                 } else {\n-                    Abi::C\n+                    Abi::C { unwind: false }\n                 }\n             }\n             abi => abi,"}, {"sha": "15d8e4843f976167d271a301c892ad1c7f023359", "filename": "compiler/rustc_target/src/spec/nvptx64_nvidia_cuda.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -49,10 +49,12 @@ pub fn target() -> Target {\n             // create the tests for this.\n             unsupported_abis: vec![\n                 Abi::Cdecl,\n-                Abi::Stdcall,\n+                Abi::Stdcall { unwind: false },\n+                Abi::Stdcall { unwind: true },\n                 Abi::Fastcall,\n                 Abi::Vectorcall,\n-                Abi::Thiscall,\n+                Abi::Thiscall { unwind: false },\n+                Abi::Thiscall { unwind: true },\n                 Abi::Aapcs,\n                 Abi::Win64,\n                 Abi::SysV64,"}, {"sha": "5bcbb2e621bd005ad33c768f857296b04b79cf70", "filename": "compiler/rustc_target/src/spec/riscv_base.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv_base.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -5,10 +5,12 @@ use crate::spec::abi::Abi;\n pub fn unsupported_abis() -> Vec<Abi> {\n     vec![\n         Abi::Cdecl,\n-        Abi::Stdcall,\n+        Abi::Stdcall { unwind: false },\n+        Abi::Stdcall { unwind: true },\n         Abi::Fastcall,\n         Abi::Vectorcall,\n-        Abi::Thiscall,\n+        Abi::Thiscall { unwind: false },\n+        Abi::Thiscall { unwind: true },\n         Abi::Aapcs,\n         Abi::Win64,\n         Abi::SysV64,"}, {"sha": "a175da3270638ddba6a16d75de2f7e17703798e7", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -2666,7 +2666,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n         } else if tcx.sess.check_name(attr, sym::used) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::USED;\n         } else if tcx.sess.check_name(attr, sym::cmse_nonsecure_entry) {\n-            if tcx.fn_sig(id).abi() != abi::Abi::C {\n+            if !matches!(tcx.fn_sig(id).abi(), abi::Abi::C { .. }) {\n                 struct_span_err!(\n                     tcx.sess,\n                     attr.span,"}, {"sha": "29d9df61906c7d90c04a0a7513667080f91897f2", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -118,14 +118,19 @@ use astconv::AstConv;\n use bounds::Bounds;\n \n fn require_c_abi_if_c_variadic(tcx: TyCtxt<'_>, decl: &hir::FnDecl<'_>, abi: Abi, span: Span) {\n-    if decl.c_variadic && !(abi == Abi::C || abi == Abi::Cdecl) {\n-        let mut err = struct_span_err!(\n-            tcx.sess,\n-            span,\n-            E0045,\n-            \"C-variadic function must have C or cdecl calling convention\"\n-        );\n-        err.span_label(span, \"C-variadics require C or cdecl calling convention\").emit();\n+    match (decl.c_variadic, abi) {\n+        // The function has the correct calling convention, or isn't a \"C-variadic\" function.\n+        (false, _) | (true, Abi::C { .. }) | (true, Abi::Cdecl) => {}\n+        // The function is a \"C-variadic\" function with an incorrect calling convention.\n+        (true, _) => {\n+            let mut err = struct_span_err!(\n+                tcx.sess,\n+                span,\n+                E0045,\n+                \"C-variadic function must have C or cdecl calling convention\"\n+            );\n+            err.span_label(span, \"C-variadics require C or cdecl calling convention\").emit();\n+        }\n     }\n }\n "}, {"sha": "2801d9b5e7778314a4e1c59a43d99053093ec84b", "filename": "src/doc/unstable-book/src/language-features/c-unwind.md", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fc-unwind.md", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fc-unwind.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fc-unwind.md?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -0,0 +1,15 @@\n+# `c_unwind`\n+\n+The tracking issue for this feature is: [#74990]\n+\n+[#74990]: https://github.com/rust-lang/rust/issues/74990\n+\n+------------------------\n+\n+Introduces four new ABI strings: \"C-unwind\", \"stdcall-unwind\",\n+\"thiscall-unwind\", and \"system-unwind\". These enable unwinding from other\n+languages (such as C++) into Rust frames and from Rust into other languages.\n+\n+See [RFC 2945] for more information.\n+\n+[RFC 2945]: https://github.com/rust-lang/rfcs/blob/master/text/2945-c-unwind-abi.md"}, {"sha": "afd65ff6741a654e62669b7a148fe6a28d40a4eb", "filename": "src/test/codegen/unwind-abis/c-unwind-abi-panic-abort.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fcodegen%2Funwind-abis%2Fc-unwind-abi-panic-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fcodegen%2Funwind-abis%2Fc-unwind-abi-panic-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Fc-unwind-abi-panic-abort.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -0,0 +1,18 @@\n+// compile-flags: -C panic=abort -C opt-level=0\n+\n+// Test that `nounwind` atributes are applied to `C-unwind` extern functions when the\n+// code is compiled with `panic=abort`.  We disable optimizations above to prevent LLVM from\n+// inferring the attribute.\n+\n+#![crate_type = \"lib\"]\n+#![feature(c_unwind)]\n+\n+// CHECK: @rust_item_that_can_unwind() unnamed_addr #0 {\n+#[no_mangle]\n+pub extern \"C-unwind\" fn rust_item_that_can_unwind() {\n+}\n+\n+// Now, make sure that the LLVM attributes for this functions are correct.  First, make\n+// sure that the first item is correctly marked with the `nounwind` attribute:\n+//\n+// CHECK: attributes #0 = { {{.*}}nounwind{{.*}} }"}, {"sha": "f15765367532261eca351376d3d45337b642e023", "filename": "src/test/codegen/unwind-abis/c-unwind-abi.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fcodegen%2Funwind-abis%2Fc-unwind-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fcodegen%2Funwind-abis%2Fc-unwind-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Fc-unwind-abi.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -0,0 +1,29 @@\n+// compile-flags: -C opt-level=0\n+\n+// Test that `nounwind` atributes are correctly applied to exported `C` and `C-unwind` extern\n+// functions. `C-unwind` functions MUST NOT have this attribute. We disable optimizations above\n+// to prevent LLVM from inferring the attribute.\n+\n+#![crate_type = \"lib\"]\n+#![feature(c_unwind)]\n+\n+// CHECK: @rust_item_that_cannot_unwind() unnamed_addr #0 {\n+#[no_mangle]\n+pub extern \"C\" fn rust_item_that_cannot_unwind() {\n+}\n+\n+// CHECK: @rust_item_that_can_unwind() unnamed_addr #1 {\n+#[no_mangle]\n+pub extern \"C-unwind\" fn rust_item_that_can_unwind() {\n+}\n+\n+// Now, make some assertions that the LLVM attributes for these functions are correct.  First, make\n+// sure that the first item is correctly marked with the `nounwind` attribute:\n+//\n+// CHECK: attributes #0 = { {{.*}}nounwind{{.*}} }\n+//\n+// Next, let's assert that the second item, which CAN unwind, does not have this attribute.\n+//\n+// CHECK: attributes #1 = {\n+// CHECK-NOT: nounwind\n+// CHECK: }"}, {"sha": "ed804ca278d2de5e4120eae497a325668919d105", "filename": "src/test/codegen/unwind-abis/stdcall-unwind-abi.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fcodegen%2Funwind-abis%2Fstdcall-unwind-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fcodegen%2Funwind-abis%2Fstdcall-unwind-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Fstdcall-unwind-abi.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -0,0 +1,32 @@\n+// compile-flags: -C opt-level=0\n+// ignore-arm stdcall isn't supported\n+// ignore-aarch64 stdcall isn't supported\n+// ignore-riscv64 stdcall isn't supported\n+\n+// Test that `nounwind` atributes are correctly applied to exported `stdcall` and `stdcall-unwind`\n+// extern functions. `stdcall-unwind` functions MUST NOT have this attribute. We disable\n+// optimizations above to prevent LLVM from inferring the attribute.\n+\n+#![crate_type = \"lib\"]\n+#![feature(c_unwind)]\n+\n+// CHECK: @rust_item_that_cannot_unwind() unnamed_addr #0 {\n+#[no_mangle]\n+pub extern \"stdcall\" fn rust_item_that_cannot_unwind() {\n+}\n+\n+// CHECK: @rust_item_that_can_unwind() unnamed_addr #1 {\n+#[no_mangle]\n+pub extern \"stdcall-unwind\" fn rust_item_that_can_unwind() {\n+}\n+\n+// Now, make some assertions that the LLVM attributes for these functions are correct.  First, make\n+// sure that the first item is correctly marked with the `nounwind` attribute:\n+//\n+// CHECK: attributes #0 = { {{.*}}nounwind{{.*}} }\n+//\n+// Next, let's assert that the second item, which CAN unwind, does not have this attribute.\n+//\n+// CHECK: attributes #1 = {\n+// CHECK-NOT: nounwind\n+// CHECK: }"}, {"sha": "c4d51328352c06ca138f792ad2734913258244e3", "filename": "src/test/codegen/unwind-abis/system-unwind-abi.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fcodegen%2Funwind-abis%2Fsystem-unwind-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fcodegen%2Funwind-abis%2Fsystem-unwind-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Fsystem-unwind-abi.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -0,0 +1,29 @@\n+// compile-flags: -C opt-level=0\n+\n+// Test that `nounwind` atributes are correctly applied to exported `system` and `system-unwind`\n+// extern functions. `system-unwind` functions MUST NOT have this attribute. We disable\n+// optimizations above to prevent LLVM from inferring the attribute.\n+\n+#![crate_type = \"lib\"]\n+#![feature(c_unwind)]\n+\n+// CHECK: @rust_item_that_cannot_unwind() unnamed_addr #0 {\n+#[no_mangle]\n+pub extern \"system\" fn rust_item_that_cannot_unwind() {\n+}\n+\n+// CHECK: @rust_item_that_can_unwind() unnamed_addr #1 {\n+#[no_mangle]\n+pub extern \"system-unwind\" fn rust_item_that_can_unwind() {\n+}\n+\n+// Now, make some assertions that the LLVM attributes for these functions are correct.  First, make\n+// sure that the first item is correctly marked with the `nounwind` attribute:\n+//\n+// CHECK: attributes #0 = { {{.*}}nounwind{{.*}} }\n+//\n+// Next, let's assert that the second item, which CAN unwind, does not have this attribute.\n+//\n+// CHECK: attributes #1 = {\n+// CHECK-NOT: nounwind\n+// CHECK: }"}, {"sha": "aaa63ae55c3acc756e0ecad00db8815128fac75c", "filename": "src/test/codegen/unwind-abis/thiscall-unwind-abi.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fcodegen%2Funwind-abis%2Fthiscall-unwind-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fcodegen%2Funwind-abis%2Fthiscall-unwind-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Fthiscall-unwind-abi.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -0,0 +1,33 @@\n+// compile-flags: -C opt-level=0\n+// ignore-arm thiscall isn't supported\n+// ignore-aarch64 thiscall isn't supported\n+// ignore-riscv64 thiscall isn't supported\n+\n+// Test that `nounwind` atributes are correctly applied to exported `thiscall` and\n+// `thiscall-unwind` extern functions. `thiscall-unwind` functions MUST NOT have this attribute. We\n+// disable optimizations above to prevent LLVM from inferring the attribute.\n+\n+#![crate_type = \"lib\"]\n+#![feature(abi_thiscall)]\n+#![feature(c_unwind)]\n+\n+// CHECK: @rust_item_that_cannot_unwind() unnamed_addr #0 {\n+#[no_mangle]\n+pub extern \"thiscall\" fn rust_item_that_cannot_unwind() {\n+}\n+\n+// CHECK: @rust_item_that_can_unwind() unnamed_addr #1 {\n+#[no_mangle]\n+pub extern \"thiscall-unwind\" fn rust_item_that_can_unwind() {\n+}\n+\n+// Now, make some assertions that the LLVM attributes for these functions are correct.  First, make\n+// sure that the first item is correctly marked with the `nounwind` attribute:\n+//\n+// CHECK: attributes #0 = { {{.*}}nounwind{{.*}} }\n+//\n+// Next, let's assert that the second item, which CAN unwind, does not have this attribute.\n+//\n+// CHECK: attributes #1 = {\n+// CHECK-NOT: nounwind\n+// CHECK: }"}, {"sha": "a8515c533af57024cdd60d6082be08f848edd250", "filename": "src/test/run-make-fulldeps/c-unwind-abi-catch-lib-panic/Makefile", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-lib-panic%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-lib-panic%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-lib-panic%2FMakefile?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -0,0 +1,30 @@\n+-include ../tools.mk\n+\n+all: archive\n+\t# Compile `main.rs`, which will link into our library, and run it.\n+\t$(RUSTC) main.rs\n+\t$(call RUN,main)\n+\n+ifdef IS_MSVC\n+archive: add.o panic.o\n+\t# Now, create an archive using these two objects.\n+\t$(AR) crus $(TMPDIR)/add.lib $(TMPDIR)/add.o $(TMPDIR)/panic.o\n+else\n+archive: add.o panic.o\n+\t# Now, create an archive using these two objects.\n+\t$(AR) crus $(TMPDIR)/libadd.a $(TMPDIR)/add.o $(TMPDIR)/panic.o\n+endif\n+\n+# Compile `panic.rs` into an object file.\n+#\n+# Note that we invoke `rustc` directly, so we may emit an object rather\n+# than an archive. We'll do that later.\n+panic.o:\n+\t$(BARE_RUSTC) $(RUSTFLAGS)  \\\n+\t\t--out-dir $(TMPDIR) \\\n+\t\t--emit=obj panic.rs\n+\n+# Compile `add.c` into an object file.\n+add.o:\n+\t$(call COMPILE_OBJ,$(TMPDIR)/add.o,add.c)\n+"}, {"sha": "444359451f6ecd0ff95756a737a0007e30414f53", "filename": "src/test/run-make-fulldeps/c-unwind-abi-catch-lib-panic/add.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-lib-panic%2Fadd.c", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-lib-panic%2Fadd.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-lib-panic%2Fadd.c?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -0,0 +1,12 @@\n+#ifdef _WIN32\n+__declspec(dllexport)\n+#endif\n+\n+// An external function, defined in Rust.\n+extern void panic_if_greater_than_10(unsigned x);\n+\n+unsigned add_small_numbers(unsigned a, unsigned b) {\n+    unsigned c = a + b;\n+    panic_if_greater_than_10(c);\n+    return c;\n+}"}, {"sha": "78a71219c7811d5d74cd3018bf39387b645cb6f8", "filename": "src/test/run-make-fulldeps/c-unwind-abi-catch-lib-panic/main.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-lib-panic%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-lib-panic%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-lib-panic%2Fmain.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -0,0 +1,35 @@\n+//! A test for calling `C-unwind` functions across foreign function boundaries.\n+//!\n+//! This test triggers a panic in a Rust library that our foreign function invokes. This shows\n+//! that we can unwind through the C code in that library, and catch the underlying panic.\n+#![feature(c_unwind)]\n+\n+use std::panic::{catch_unwind, AssertUnwindSafe};\n+\n+fn main() {\n+    // Call `add_small_numbers`, passing arguments that will NOT trigger a panic.\n+    let (a, b) = (9, 1);\n+    let c = unsafe { add_small_numbers(a, b) };\n+    assert_eq!(c, 10);\n+\n+    // Call `add_small_numbers`, passing arguments that will trigger a panic, and catch it.\n+    let caught_unwind = catch_unwind(AssertUnwindSafe(|| {\n+        let (a, b) = (10, 1);\n+        let _c = unsafe { add_small_numbers(a, b) };\n+        unreachable!(\"should have unwound instead of returned\");\n+    }));\n+\n+    // Assert that we did indeed panic, then unwrap and downcast the panic into the sum.\n+    assert!(caught_unwind.is_err());\n+    let panic_obj = caught_unwind.unwrap_err();\n+    let msg = panic_obj.downcast_ref::<String>().unwrap();\n+    assert_eq!(msg, \"11\");\n+}\n+\n+#[link(name = \"add\", kind = \"static\")]\n+extern \"C-unwind\" {\n+    /// An external function, defined in C.\n+    ///\n+    /// Returns the sum of two numbers, or panics if the sum is greater than 10.\n+    fn add_small_numbers(a: u32, b: u32) -> u32;\n+}"}, {"sha": "a99a04d5c6f4b1df2866279648bd87e709b68875", "filename": "src/test/run-make-fulldeps/c-unwind-abi-catch-lib-panic/panic.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-lib-panic%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-lib-panic%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-lib-panic%2Fpanic.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -0,0 +1,12 @@\n+#![crate_type = \"staticlib\"]\n+#![feature(c_unwind)]\n+\n+/// This function will panic if `x` is greater than 10.\n+///\n+/// This function is called by `add_small_numbers`.\n+#[no_mangle]\n+pub extern \"C-unwind\" fn panic_if_greater_than_10(x: u32) {\n+    if x > 10 {\n+        panic!(\"{}\", x); // That is too big!\n+    }\n+}"}, {"sha": "9553b7aeeb983d95bd033da64fb9dca70c358915", "filename": "src/test/run-make-fulldeps/c-unwind-abi-catch-panic/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-panic%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-panic%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-panic%2FMakefile?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -0,0 +1,5 @@\n+-include ../tools.mk\n+\n+all: $(call NATIVE_STATICLIB,add)\n+\t$(RUSTC) main.rs\n+\t$(call RUN,main) || exit 1"}, {"sha": "444359451f6ecd0ff95756a737a0007e30414f53", "filename": "src/test/run-make-fulldeps/c-unwind-abi-catch-panic/add.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-panic%2Fadd.c", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-panic%2Fadd.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-panic%2Fadd.c?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -0,0 +1,12 @@\n+#ifdef _WIN32\n+__declspec(dllexport)\n+#endif\n+\n+// An external function, defined in Rust.\n+extern void panic_if_greater_than_10(unsigned x);\n+\n+unsigned add_small_numbers(unsigned a, unsigned b) {\n+    unsigned c = a + b;\n+    panic_if_greater_than_10(c);\n+    return c;\n+}"}, {"sha": "15d38d72160583c407c2b82547021a1ed3585068", "filename": "src/test/run-make-fulldeps/c-unwind-abi-catch-panic/main.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-panic%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-panic%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-panic%2Fmain.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -0,0 +1,44 @@\n+//! A test for calling `C-unwind` functions across foreign function boundaries.\n+//!\n+//! This test triggers a panic when calling a foreign function that calls *back* into Rust.\n+#![feature(c_unwind)]\n+\n+use std::panic::{catch_unwind, AssertUnwindSafe};\n+\n+fn main() {\n+    // Call `add_small_numbers`, passing arguments that will NOT trigger a panic.\n+    let (a, b) = (9, 1);\n+    let c = unsafe { add_small_numbers(a, b) };\n+    assert_eq!(c, 10);\n+\n+    // Call `add_small_numbers`, passing arguments that will trigger a panic, and catch it.\n+    let caught_unwind = catch_unwind(AssertUnwindSafe(|| {\n+        let (a, b) = (10, 1);\n+        let _c = unsafe { add_small_numbers(a, b) };\n+        unreachable!(\"should have unwound instead of returned\");\n+    }));\n+\n+    // Assert that we did indeed panic, then unwrap and downcast the panic into the sum.\n+    assert!(caught_unwind.is_err());\n+    let panic_obj = caught_unwind.unwrap_err();\n+    let msg = panic_obj.downcast_ref::<String>().unwrap();\n+    assert_eq!(msg, \"11\");\n+}\n+\n+#[link(name = \"add\", kind = \"static\")]\n+extern \"C-unwind\" {\n+    /// An external function, defined in C.\n+    ///\n+    /// Returns the sum of two numbers, or panics if the sum is greater than 10.\n+    fn add_small_numbers(a: u32, b: u32) -> u32;\n+}\n+\n+/// This function will panic if `x` is greater than 10.\n+///\n+/// This function is called by `add_small_numbers`.\n+#[no_mangle]\n+pub extern \"C-unwind\" fn panic_if_greater_than_10(x: u32) {\n+    if x > 10 {\n+        panic!(\"{}\", x); // That is too big!\n+    }\n+}"}, {"sha": "c9b4abbfd3fd3da70de7d7755909adcb979bb5a4", "filename": "src/test/ui/allocator/no_std-alloc-error-handler-custom.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -7,7 +7,7 @@\n // compile-flags:-C panic=abort\n // aux-build:helper.rs\n \n-#![feature(start, rustc_private, new_uninit, panic_info_message)]\n+#![feature(start, rustc_private, new_uninit, panic_info_message, lang_items)]\n #![feature(alloc_error_handler)]\n #![no_std]\n \n@@ -84,6 +84,13 @@ fn panic(panic_info: &core::panic::PanicInfo) -> ! {\n     }\n }\n \n+// Because we are compiling this code with `-C panic=abort`, this wouldn't normally be needed.\n+// However, `core` and `alloc` are both compiled with `-C panic=unwind`, which means that functions\n+// in these libaries will refer to `rust_eh_personality` if LLVM can not *prove* the contents won't\n+// unwind. So, for this test case we will define the symbol.\n+#[lang = \"eh_personality\"]\n+extern fn rust_eh_personality() {}\n+\n #[derive(Debug)]\n struct Page([[u64; 32]; 16]);\n "}, {"sha": "d6cd4a6af855fecd6b44f6dc5e600364303c1beb", "filename": "src/test/ui/allocator/no_std-alloc-error-handler-default.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-default.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -8,7 +8,7 @@\n // aux-build:helper.rs\n // gate-test-default_alloc_error_handler\n \n-#![feature(start, rustc_private, new_uninit, panic_info_message)]\n+#![feature(start, rustc_private, new_uninit, panic_info_message, lang_items)]\n #![feature(default_alloc_error_handler)]\n #![no_std]\n \n@@ -71,6 +71,13 @@ fn panic(panic_info: &core::panic::PanicInfo) -> ! {\n     }\n }\n \n+// Because we are compiling this code with `-C panic=abort`, this wouldn't normally be needed.\n+// However, `core` and `alloc` are both compiled with `-C panic=unwind`, which means that functions\n+// in these libaries will refer to `rust_eh_personality` if LLVM can not *prove* the contents won't\n+// unwind. So, for this test case we will define the symbol.\n+#[lang = \"eh_personality\"]\n+extern fn rust_eh_personality() {}\n+\n #[derive(Debug)]\n struct Page([[u64; 32]; 16]);\n "}, {"sha": "b7ba4fa46d92b72012b3e192ef86714e1294cb4d", "filename": "src/test/ui/codemap_tests/unicode.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -4,7 +4,7 @@ error[E0703]: invalid ABI: found `\u8def\u6feb\u72fc\u00e1\u0301\u0301`\n LL | extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {}\n    |        ^^^^^^^^^ invalid ABI\n    |\n-   = help: valid ABIs: Rust, C, cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, avr-interrupt, avr-non-blocking-interrupt, C-cmse-nonsecure-call, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n+   = help: valid ABIs: Rust, C, C-unwind, cdecl, stdcall, stdcall-unwind, fastcall, vectorcall, thiscall, thiscall-unwind, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, avr-interrupt, avr-non-blocking-interrupt, C-cmse-nonsecure-call, system, system-unwind, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n \n error: aborting due to previous error\n "}, {"sha": "85e2b77d867b9f87bf2f95c60e5ac194d1bc7a46", "filename": "src/test/ui/parser/issue-8537.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fui%2Fparser%2Fissue-8537.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fui%2Fparser%2Fissue-8537.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-8537.stderr?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -4,7 +4,7 @@ error[E0703]: invalid ABI: found `invalid-ab_isize`\n LL |   \"invalid-ab_isize\"\n    |   ^^^^^^^^^^^^^^^^^^ invalid ABI\n    |\n-   = help: valid ABIs: Rust, C, cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, avr-interrupt, avr-non-blocking-interrupt, C-cmse-nonsecure-call, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n+   = help: valid ABIs: Rust, C, C-unwind, cdecl, stdcall, stdcall-unwind, fastcall, vectorcall, thiscall, thiscall-unwind, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, avr-interrupt, avr-non-blocking-interrupt, C-cmse-nonsecure-call, system, system-unwind, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n \n error: aborting due to previous error\n "}, {"sha": "6ff5dbda2d5604ff9e47b887dd44f023267414c5", "filename": "src/test/ui/unwind-abis/feature-gate-c-unwind-enabled.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind-enabled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind-enabled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind-enabled.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -0,0 +1,12 @@\n+// Test that the \"C-unwind\" ABI is feature-gated, and *can* be used when the\n+// `c_unwind` feature gate is enabled.\n+\n+// check-pass\n+\n+#![feature(c_unwind)]\n+\n+extern \"C-unwind\" fn f() {}\n+\n+fn main() {\n+    f();\n+}"}, {"sha": "f02a368d4e0973cfe8debef5f784d8fd96ee900b", "filename": "src/test/ui/unwind-abis/feature-gate-c-unwind.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -0,0 +1,9 @@\n+// Test that the \"C-unwind\" ABI is feature-gated, and cannot be used when the\n+// `c_unwind` feature gate is not used.\n+\n+extern \"C-unwind\" fn f() {}\n+//~^ ERROR C-unwind ABI is experimental and subject to change [E0658]\n+\n+fn main() {\n+    f();\n+}"}, {"sha": "f4c785a235f67a7c902875a426c659e45b83af3e", "filename": "src/test/ui/unwind-abis/feature-gate-c-unwind.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind.stderr?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: C-unwind ABI is experimental and subject to change\n+  --> $DIR/feature-gate-c-unwind.rs:4:8\n+   |\n+LL | extern \"C-unwind\" fn f() {}\n+   |        ^^^^^^^^^^\n+   |\n+   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n+   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "7d4dc8c9343f1c5af01b1dba7e98c68ed5597d84", "filename": "src/test/ui/unwind-abis/feature-gate-stdcall-unwind.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-stdcall-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-stdcall-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-stdcall-unwind.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -0,0 +1,13 @@\n+// ignore-arm stdcall isn't supported\n+// ignore-aarch64 stdcall isn't supported\n+// ignore-riscv64 stdcall isn't supported\n+\n+// Test that the \"stdcall-unwind\" ABI is feature-gated, and cannot be used when\n+// the `c_unwind` feature gate is not used.\n+\n+extern \"stdcall-unwind\" fn f() {}\n+//~^ ERROR stdcall-unwind ABI is experimental and subject to change [E0658]\n+\n+fn main() {\n+    f();\n+}"}, {"sha": "e3d569f464f8791abcf46fd2d2e33edbb461d93c", "filename": "src/test/ui/unwind-abis/feature-gate-stdcall-unwind.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-stdcall-unwind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-stdcall-unwind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-stdcall-unwind.stderr?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: stdcall-unwind ABI is experimental and subject to change\n+  --> $DIR/feature-gate-stdcall-unwind.rs:8:8\n+   |\n+LL | extern \"stdcall-unwind\" fn f() {}\n+   |        ^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n+   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "26c2de4e81767754051d0d3de620776ac966c5f6", "filename": "src/test/ui/unwind-abis/feature-gate-system-unwind.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-system-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-system-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-system-unwind.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -0,0 +1,9 @@\n+// Test that the \"system-unwind\" ABI is feature-gated, and cannot be used when\n+// the `c_unwind` feature gate is not used.\n+\n+extern \"system-unwind\" fn f() {}\n+//~^ ERROR system-unwind ABI is experimental and subject to change [E0658]\n+\n+fn main() {\n+    f();\n+}"}, {"sha": "87877336475b43bb6de53203b12b1b7bf81f8e40", "filename": "src/test/ui/unwind-abis/feature-gate-system-unwind.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-system-unwind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-system-unwind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-system-unwind.stderr?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: system-unwind ABI is experimental and subject to change\n+  --> $DIR/feature-gate-system-unwind.rs:4:8\n+   |\n+LL | extern \"system-unwind\" fn f() {}\n+   |        ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n+   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "2f4cefccc19672314f1e6e207daadd1fb5572824", "filename": "src/test/ui/unwind-abis/feature-gate-thiscall-unwind.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-thiscall-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-thiscall-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-thiscall-unwind.rs?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -0,0 +1,13 @@\n+// ignore-arm thiscall isn't supported\n+// ignore-aarch64 thiscall isn't supported\n+// ignore-riscv64 thiscall isn't supported\n+\n+// Test that the \"thiscall-unwind\" ABI is feature-gated, and cannot be used when\n+// the `c_unwind` feature gate is not used.\n+\n+extern \"thiscall-unwind\" fn f() {}\n+//~^ ERROR thiscall-unwind ABI is experimental and subject to change [E0658]\n+\n+fn main() {\n+    f();\n+}"}, {"sha": "b103bb8d565850ff422bbb958762082459587b11", "filename": "src/test/ui/unwind-abis/feature-gate-thiscall-unwind.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-thiscall-unwind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-thiscall-unwind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-thiscall-unwind.stderr?ref=17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: thiscall-unwind ABI is experimental and subject to change\n+  --> $DIR/feature-gate-thiscall-unwind.rs:8:8\n+   |\n+LL | extern \"thiscall-unwind\" fn f() {}\n+   |        ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n+   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}]}