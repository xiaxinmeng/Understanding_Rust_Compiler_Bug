{"sha": "314b485c9c480c4a7f47c28716e629d642e2d412", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNGI0ODVjOWM0ODBjNGE3ZjQ3YzI4NzE2ZTYyOWQ2NDJlMmQ0MTI=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-07T04:35:01Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-07T09:16:03Z"}, "message": "Fix order of methods", "tree": {"sha": "9d26c0e7ae83ca854f6453e5efe99dc0227a4f57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d26c0e7ae83ca854f6453e5efe99dc0227a4f57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/314b485c9c480c4a7f47c28716e629d642e2d412", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/314b485c9c480c4a7f47c28716e629d642e2d412", "html_url": "https://github.com/rust-lang/rust/commit/314b485c9c480c4a7f47c28716e629d642e2d412", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/314b485c9c480c4a7f47c28716e629d642e2d412/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06c5e7f383405094ab95229da7854aa61bb9df7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/06c5e7f383405094ab95229da7854aa61bb9df7f", "html_url": "https://github.com/rust-lang/rust/commit/06c5e7f383405094ab95229da7854aa61bb9df7f"}], "stats": {"total": 50, "additions": 26, "deletions": 24}, "files": [{"sha": "580a612aebb4830cea97d6254d16a52f45d89ca7", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/314b485c9c480c4a7f47c28716e629d642e2d412/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314b485c9c480c4a7f47c28716e629d642e2d412/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=314b485c9c480c4a7f47c28716e629d642e2d412", "patch": "@@ -551,9 +551,22 @@ impl Float for f32 {\n     #[inline(always)]\n     fn neg_zero() -> f32 { -0.0 }\n \n+    /// Returns `true` if the number is NaN\n     #[inline(always)]\n     fn is_NaN(&self) -> bool { *self != *self }\n \n+    /// Returns `true` if the number is infinite\n+    #[inline(always)]\n+    fn is_infinite(&self) -> bool {\n+        *self == Float::infinity() || *self == Float::neg_infinity()\n+    }\n+\n+    /// Returns `true` if the number is not infinite or NaN\n+    #[inline(always)]\n+    fn is_finite(&self) -> bool {\n+        !(self.is_NaN() || self.is_infinite())\n+    }\n+\n     #[inline(always)]\n     fn mantissa_digits() -> uint { 24 }\n \n@@ -575,18 +588,6 @@ impl Float for f32 {\n     #[inline(always)]\n     fn max_10_exp() -> int { 38 }\n \n-    /// Returns `true` if the number is infinite\n-    #[inline(always)]\n-    fn is_infinite(&self) -> bool {\n-        *self == Float::infinity() || *self == Float::neg_infinity()\n-    }\n-\n-    /// Returns `true` if the number is finite\n-    #[inline(always)]\n-    fn is_finite(&self) -> bool {\n-        !(self.is_NaN() || self.is_infinite())\n-    }\n-\n     ///\n     /// Returns the exponential of the number, minus `1`, in a way that is accurate\n     /// even if the number is close to zero"}, {"sha": "95f3a76b800840b02f57f5fc1bf6a3c26ba5ca84", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/314b485c9c480c4a7f47c28716e629d642e2d412/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314b485c9c480c4a7f47c28716e629d642e2d412/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=314b485c9c480c4a7f47c28716e629d642e2d412", "patch": "@@ -784,9 +784,22 @@ impl Float for float {\n     #[inline(always)]\n     fn neg_zero() -> float { -0.0 }\n \n+    /// Returns `true` if the number is NaN\n     #[inline(always)]\n     fn is_NaN(&self) -> bool { *self != *self }\n \n+    /// Returns `true` if the number is infinite\n+    #[inline(always)]\n+    fn is_infinite(&self) -> bool {\n+        *self == Float::infinity() || *self == Float::neg_infinity()\n+    }\n+\n+    /// Returns `true` if the number is not infinite or NaN\n+    #[inline(always)]\n+    fn is_finite(&self) -> bool {\n+        !(self.is_NaN() || self.is_infinite())\n+    }\n+\n     #[inline(always)]\n     fn mantissa_digits() -> uint { Float::mantissa_digits::<f64>() }\n \n@@ -808,18 +821,6 @@ impl Float for float {\n     #[inline(always)]\n     fn max_10_exp() -> int { Float::max_10_exp::<f64>() }\n \n-    /// Returns `true` if the number is infinite\n-    #[inline(always)]\n-    fn is_infinite(&self) -> bool {\n-        *self == Float::infinity() || *self == Float::neg_infinity()\n-    }\n-\n-    /// Returns `true` if the number is finite\n-    #[inline(always)]\n-    fn is_finite(&self) -> bool {\n-        !(self.is_NaN() || self.is_infinite())\n-    }\n-\n     ///\n     /// Returns the exponential of the number, minus `1`, in a way that is accurate\n     /// even if the number is close to zero"}]}