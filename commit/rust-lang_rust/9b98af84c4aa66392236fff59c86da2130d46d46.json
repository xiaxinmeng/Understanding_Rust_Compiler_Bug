{"sha": "9b98af84c4aa66392236fff59c86da2130d46d46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliOThhZjg0YzRhYTY2MzkyMjM2ZmZmNTljODZkYTIxMzBkNDZkNDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-22T19:30:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-22T19:30:57Z"}, "message": "Auto merge of #67532 - Centril:rollup-3duj42d, r=Centril\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #66877 (Add simpler entry points to const eval for common usages.)\n - #67299 (Add `ImmTy::try_from_(u)int` methods)\n - #67487 (Rustdoc mutability removal)\n - #67499 (Misc MIR building cleanups)\n - #67506 (Remove iter_private.rs)\n - #67508 (Fix typo in path parser name)\n - #67519 (Document why Any is not an unsafe trait)\n - #67525 (Utilize rust-lang/rust commit hashes in toolstate)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "963faec2cc41a9ad3ac9b844c7f421793ec81e1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/963faec2cc41a9ad3ac9b844c7f421793ec81e1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b98af84c4aa66392236fff59c86da2130d46d46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b98af84c4aa66392236fff59c86da2130d46d46", "html_url": "https://github.com/rust-lang/rust/commit/9b98af84c4aa66392236fff59c86da2130d46d46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b98af84c4aa66392236fff59c86da2130d46d46/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d2817a439c2ad9fe343f6347eb6d90947893363", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d2817a439c2ad9fe343f6347eb6d90947893363", "html_url": "https://github.com/rust-lang/rust/commit/0d2817a439c2ad9fe343f6347eb6d90947893363"}, {"sha": "9c5b73e9a4d1833f67da69ab41f4cc80300097fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c5b73e9a4d1833f67da69ab41f4cc80300097fc", "html_url": "https://github.com/rust-lang/rust/commit/9c5b73e9a4d1833f67da69ab41f4cc80300097fc"}], "stats": {"total": 748, "additions": 320, "deletions": 428}, "files": [{"sha": "4c047069571bd4ad02ca00aa6f231b31540d43f0", "filename": "src/ci/publish_toolstate.sh", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Fci%2Fpublish_toolstate.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Fci%2Fpublish_toolstate.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fpublish_toolstate.sh?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -14,12 +14,15 @@ printf 'https://%s:x-oauth-basic@github.com\\n' \"$TOOLSTATE_REPO_ACCESS_TOKEN\" \\\n     > \"$HOME/.git-credentials\"\n git clone --depth=1 $TOOLSTATE_REPO\n \n+GIT_COMMIT=\"$(git rev-parse HEAD)\"\n+GIT_COMMIT_MSG=\"$(git log --format=%s -n1 HEAD)\"\n+\n cd rust-toolstate\n FAILURE=1\n for RETRY_COUNT in 1 2 3 4 5; do\n     #  The purpose is to publish the new \"current\" toolstate in the toolstate repo.\n-    \"$BUILD_SOURCESDIRECTORY/src/tools/publish_toolstate.py\" \"$(git rev-parse HEAD)\" \\\n-        \"$(git log --format=%s -n1 HEAD)\" \\\n+    \"$BUILD_SOURCESDIRECTORY/src/tools/publish_toolstate.py\" \"$GIT_COMMIT\" \\\n+        \"$GIT_COMMIT_MSG\" \\\n         \"$MESSAGE_FILE\" \\\n         \"$TOOLSTATE_REPO_ACCESS_TOKEN\"\n     # `git commit` failing means nothing to commit."}, {"sha": "5126fe01a3f006ec805e076be8430ad0ecd3ee12", "filename": "src/libcore/any.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -74,6 +74,16 @@ use crate::intrinsics;\n /// See the [module-level documentation][mod] for more details.\n ///\n /// [mod]: index.html\n+// This trait is not unsafe, though we rely on the specifics of it's sole impl's\n+// `type_id` function in unsafe code (e.g., `downcast`). Normally, that would be\n+// a problem, but because the only impl of `Any` is a blanket implementation, no\n+// other code can implement `Any`.\n+//\n+// We could plausibly make this trait unsafe -- it would not cause breakage,\n+// since we control all the implementations -- but we choose not to as that's\n+// both not really necessary and may confuse users about the distinction of\n+// unsafe traits and unsafe methods (i.e., `type_id` would still be safe to call,\n+// but we would likely want to indicate as such in documentation).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Any: 'static {\n     /// Gets the `TypeId` of `self`."}, {"sha": "890db47b1970091d58b468bf2dedefd2fbf9c01a", "filename": "src/libcore/iter_private.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0d2817a439c2ad9fe343f6347eb6d90947893363/src%2Flibcore%2Fiter_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d2817a439c2ad9fe343f6347eb6d90947893363/src%2Flibcore%2Fiter_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter_private.rs?ref=0d2817a439c2ad9fe343f6347eb6d90947893363", "patch": "@@ -1,17 +0,0 @@\n-/// An iterator whose items are random accessible efficiently\n-///\n-/// # Safety\n-///\n-/// The iterator's .len() and size_hint() must be exact.\n-/// `.len()` must be cheap to call.\n-///\n-/// .get_unchecked() must return distinct mutable references for distinct\n-/// indices (if applicable), and must return a valid reference if index is in\n-/// 0..self.len().\n-#[doc(hidden)]\n-pub unsafe trait TrustedRandomAccess : ExactSizeIterator {\n-    unsafe fn get_unchecked(&mut self, i: usize) -> Self::Item;\n-    /// Returns `true` if getting an iterator element may have\n-    /// side effects. Remember to take inner iterators into account.\n-    fn may_have_side_effect() -> bool;\n-}"}, {"sha": "80bac92d003548f441435d0a51f134e1027ed0bd", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -101,6 +101,7 @@ mod error;\n mod value;\n mod allocation;\n mod pointer;\n+mod queries;\n \n pub use self::error::{\n     InterpErrorInfo, InterpResult, InterpError, AssertMessage, ConstEvalErr, struct_error,\n@@ -116,9 +117,10 @@ pub use self::pointer::{Pointer, PointerArithmetic, CheckInAllocMsg};\n \n use crate::mir;\n use crate::hir::def_id::DefId;\n-use crate::ty::{self, TyCtxt, Instance, subst::GenericArgKind};\n+use crate::ty::{self, TyCtxt, Instance};\n use crate::ty::codec::TyDecoder;\n use crate::ty::layout::{self, Size};\n+use crate::ty::subst::GenericArgKind;\n use std::io;\n use std::fmt;\n use std::num::NonZeroU32;"}, {"sha": "5fd49a056d22c6233d47dd2578799a340412add6", "filename": "src/librustc/mir/interpret/queries.rs", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fqueries.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -0,0 +1,89 @@\n+use super::{ConstEvalResult, ErrorHandled, GlobalId};\n+\n+use crate::mir;\n+use crate::hir::def_id::DefId;\n+use crate::ty::{self, TyCtxt};\n+use crate::ty::subst::{InternalSubsts, SubstsRef};\n+use syntax_pos::Span;\n+\n+\n+impl<'tcx> TyCtxt<'tcx> {\n+\n+    /// Evaluates a constant without providing any substitutions. This is useful to evaluate consts\n+    /// that can't take any generic arguments like statics, const items or enum discriminants. If a\n+    /// generic parameter is used within the constant `ErrorHandled::ToGeneric` will be returned.\n+    pub fn const_eval_poly(self, def_id: DefId) -> ConstEvalResult<'tcx> {\n+        // In some situations def_id will have substitutions within scope, but they aren't allowed\n+        // to be used. So we can't use `Instance::mono`, instead we feed unresolved substitutions\n+        // into `const_eval` which will return `ErrorHandled::ToGeneric` if any og them are\n+        // encountered.\n+        let substs = InternalSubsts::identity_for_item(self, def_id);\n+        let instance = ty::Instance::new(def_id, substs);\n+        let cid = GlobalId {\n+            instance,\n+            promoted: None,\n+        };\n+        let param_env = self.param_env(def_id);\n+        self.const_eval_validated(param_env.and(cid))\n+    }\n+\n+    /// Resolves and evaluates a constant.\n+    ///\n+    /// The constant can be located on a trait like `<A as B>::C`, in which case the given\n+    /// substitutions and environment are used to resolve the constant. Alternatively if the\n+    /// constant has generic parameters in scope the substitutions are used to evaluate the value of\n+    /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count\n+    /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still\n+    /// too generic for the constant to be evaluated then `Err(ErrorHandled::TooGeneric)` is\n+    /// returned.\n+    pub fn const_eval_resolve(\n+        self,\n+        param_env: ty::ParamEnv<'tcx>,\n+        def_id: DefId,\n+        substs: SubstsRef<'tcx>,\n+        span: Option<Span>\n+    ) -> ConstEvalResult<'tcx> {\n+        let instance = ty::Instance::resolve(\n+            self,\n+            param_env,\n+            def_id,\n+            substs,\n+        );\n+        if let Some(instance) = instance {\n+            self.const_eval_instance(param_env, instance, span)\n+        } else {\n+            Err(ErrorHandled::TooGeneric)\n+        }\n+    }\n+\n+    pub fn const_eval_instance(\n+        self,\n+        param_env: ty::ParamEnv<'tcx>,\n+        instance: ty::Instance<'tcx>,\n+        span: Option<Span>\n+    ) -> ConstEvalResult<'tcx> {\n+        let cid = GlobalId {\n+            instance,\n+            promoted: None,\n+        };\n+        if let Some(span) = span {\n+            self.at(span).const_eval_validated(param_env.and(cid))\n+        } else {\n+            self.const_eval_validated(param_env.and(cid))\n+        }\n+    }\n+\n+    /// Evaluate a promoted constant.\n+    pub fn const_eval_promoted(\n+        self,\n+        instance: ty::Instance<'tcx>,\n+        promoted: mir::Promoted\n+    ) -> ConstEvalResult<'tcx> {\n+        let cid = GlobalId {\n+            instance,\n+            promoted: Some(promoted),\n+        };\n+        let param_env = ty::ParamEnv::reveal_all();\n+        self.const_eval_validated(param_env.and(cid))\n+    }\n+}"}, {"sha": "f48d22291c6a4308ecc12aa41934e21d2186fe59", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -236,14 +236,22 @@ impl<'tcx, Tag> Scalar<Tag> {\n         Scalar::Raw { data: c as u128, size: 4 }\n     }\n \n+    #[inline]\n+    pub fn try_from_uint(i: impl Into<u128>, size: Size) -> Option<Self> {\n+        let i = i.into();\n+        if truncate(i, size) == i {\n+            Some(Scalar::Raw { data: i, size: size.bytes() as u8 })\n+        } else {\n+            None\n+        }\n+    }\n+\n     #[inline]\n     pub fn from_uint(i: impl Into<u128>, size: Size) -> Self {\n         let i = i.into();\n-        assert_eq!(\n-            truncate(i, size), i,\n-            \"Unsigned value {:#x} does not fit in {} bits\", i, size.bits()\n-        );\n-        Scalar::Raw { data: i, size: size.bytes() as u8 }\n+        Self::try_from_uint(i, size).unwrap_or_else(|| {\n+            bug!(\"Unsigned value {:#x} does not fit in {} bits\", i, size.bits())\n+        })\n     }\n \n     #[inline]\n@@ -267,15 +275,23 @@ impl<'tcx, Tag> Scalar<Tag> {\n     }\n \n     #[inline]\n-    pub fn from_int(i: impl Into<i128>, size: Size) -> Self {\n+    pub fn try_from_int(i: impl Into<i128>, size: Size) -> Option<Self> {\n         let i = i.into();\n         // `into` performed sign extension, we have to truncate\n         let truncated = truncate(i as u128, size);\n-        assert_eq!(\n-            sign_extend(truncated, size) as i128, i,\n-            \"Signed value {:#x} does not fit in {} bits\", i, size.bits()\n-        );\n-        Scalar::Raw { data: truncated, size: size.bytes() as u8 }\n+        if sign_extend(truncated, size) as i128 == i {\n+            Some(Scalar::Raw { data: truncated, size: size.bytes() as u8 })\n+        } else {\n+            None\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn from_int(i: impl Into<i128>, size: Size) -> Self {\n+        let i = i.into();\n+        Self::try_from_int(i, size).unwrap_or_else(|| {\n+            bug!(\"Signed value {:#x} does not fit in {} bits\", i, size.bits())\n+        })\n     }\n \n     #[inline]"}, {"sha": "a9dd856e75857442f3f84fec3059b91609a63b0a", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -448,7 +448,8 @@ rustc_queries! {\n         ///\n         /// **Do not use this** outside const eval. Const eval uses this to break query cycles\n         /// during validation. Please add a comment to every use site explaining why using\n-        /// `const_eval` isn't sufficient.\n+        /// `const_eval_validated` isn't sufficient. The returned constant also isn't in a suitable\n+        /// form to be used outside of const eval.\n         query const_eval_raw(key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n             -> ConstEvalRawResult<'tcx> {\n             no_force\n@@ -460,7 +461,13 @@ rustc_queries! {\n \n         /// Results of evaluating const items or constants embedded in\n         /// other items (such as enum variant explicit discriminants).\n-        query const_eval(key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n+        ///\n+        /// In contrast to `const_eval_raw` this performs some validation on the constant, and\n+        /// returns a proper constant that is usable by the rest of the compiler.\n+        ///\n+        /// **Do not use this** directly, use one of the following wrappers: `tcx.const_eval_poly`,\n+        /// `tcx.const_eval_resolve`, `tcx.const_eval_instance`, or `tcx.const_eval_promoted`.\n+        query const_eval_validated(key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n             -> ConstEvalResult<'tcx> {\n             no_force\n             desc { |tcx|"}, {"sha": "3fd2415c83c0c9e793e96a8905367ddad38dbbf0", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -1,5 +1,4 @@\n use crate::infer::{InferCtxt, ShallowResolver};\n-use crate::mir::interpret::{GlobalId, ErrorHandled};\n use crate::ty::{self, Ty, TypeFoldable, ToPolyTraitRef};\n use crate::ty::error::ExpectedFound;\n use rustc_data_structures::obligation_forest::{DoCompleted, Error, ForestObligation};\n@@ -501,27 +500,13 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                         ProcessResult::Unchanged\n                 } else {\n                     if !substs.has_local_value() {\n-                        let instance = ty::Instance::resolve(\n-                            self.selcx.tcx(),\n-                            obligation.param_env,\n-                            def_id,\n-                            substs,\n-                        );\n-                        if let Some(instance) = instance {\n-                            let cid = GlobalId {\n-                                instance,\n-                                promoted: None,\n-                            };\n-                            match self.selcx.tcx().at(obligation.cause.span)\n-                                                    .const_eval(obligation.param_env.and(cid)) {\n-                                Ok(_) => ProcessResult::Changed(vec![]),\n-                                Err(err) => ProcessResult::Error(\n-                                    CodeSelectionError(ConstEvalFailure(err)))\n-                            }\n-                        } else {\n-                            ProcessResult::Error(CodeSelectionError(\n-                                ConstEvalFailure(ErrorHandled::TooGeneric)\n-                            ))\n+                        match self.selcx.tcx().const_eval_resolve(obligation.param_env,\n+                                                                  def_id,\n+                                                                  substs,\n+                                                                  Some(obligation.cause.span)) {\n+                            Ok(_) => ProcessResult::Changed(vec![]),\n+                            Err(err) => ProcessResult::Error(\n+                                CodeSelectionError(ConstEvalFailure(err)))\n                         }\n                     } else {\n                         pending_obligation.stalled_on ="}, {"sha": "afc8a4d9e1415decfcd049a405da092b0e3a4a26", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -33,7 +33,6 @@ use crate::dep_graph::{DepKind, DepNodeIndex};\n use crate::hir::def_id::DefId;\n use crate::infer::{CombinedSnapshot, InferCtxt, InferOk, PlaceholderMap, TypeFreshener};\n use crate::middle::lang_items;\n-use crate::mir::interpret::GlobalId;\n use crate::ty::fast_reject;\n use crate::ty::relate::TypeRelation;\n use crate::ty::subst::{Subst, SubstsRef};\n@@ -820,22 +819,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             ty::Predicate::ConstEvaluatable(def_id, substs) => {\n-                let tcx = self.tcx();\n                 if !(obligation.param_env, substs).has_local_value() {\n-                    let param_env = obligation.param_env;\n-                    let instance =\n-                        ty::Instance::resolve(tcx, param_env, def_id, substs);\n-                    if let Some(instance) = instance {\n-                        let cid = GlobalId {\n-                            instance,\n-                            promoted: None,\n-                        };\n-                        match self.tcx().const_eval(param_env.and(cid)) {\n-                            Ok(_) => Ok(EvaluatedToOk),\n-                            Err(_) => Ok(EvaluatedToErr),\n-                        }\n-                    } else {\n-                        Ok(EvaluatedToErr)\n+                    match self.tcx().const_eval_resolve(obligation.param_env,\n+                                                        def_id,\n+                                                        substs,\n+                                                        None) {\n+                        Ok(_) => Ok(EvaluatedToOk),\n+                        Err(_) => Ok(EvaluatedToErr),\n                     }\n                 } else {\n                     // Inference variables still left in param_env or substs."}, {"sha": "30356d59a7ce653412f035757fa2b2e60bfeae18", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -19,7 +19,7 @@ use crate::middle::cstore::CrateStoreDyn;\n use crate::middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n use crate::middle::resolve_lifetime::ObjectLifetimeDefault;\n use crate::mir::ReadOnlyBodyAndCache;\n-use crate::mir::interpret::{GlobalId, ErrorHandled};\n+use crate::mir::interpret::ErrorHandled;\n use crate::mir::GeneratorLayout;\n use crate::session::CrateDisambiguator;\n use crate::traits::{self, Reveal};\n@@ -2344,13 +2344,7 @@ impl<'tcx> AdtDef {\n     pub fn eval_explicit_discr(&self, tcx: TyCtxt<'tcx>, expr_did: DefId) -> Option<Discr<'tcx>> {\n         let param_env = tcx.param_env(expr_did);\n         let repr_type = self.repr.discr_type();\n-        let substs = InternalSubsts::identity_for_item(tcx, expr_did);\n-        let instance = ty::Instance::new(expr_did, substs);\n-        let cid = GlobalId {\n-            instance,\n-            promoted: None\n-        };\n-        match tcx.const_eval(param_env.and(cid)) {\n+        match tcx.const_eval_poly(expr_did) {\n             Ok(val) => {\n                 // FIXME: Find the right type and use it instead of `val.ty` here\n                 if let Some(b) = val.try_eval_bits(tcx, param_env, val.ty) {"}, {"sha": "604dc03ea17bca31638af7f7eebdd0a3d0cc2e7f", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -15,7 +15,7 @@ use crate::ty::{self, AdtDef, Discr, DefIdTree, TypeFlags, Ty, TyCtxt, TypeFolda\n use crate::ty::{List, TyS, ParamEnvAnd, ParamEnv};\n use crate::ty::layout::VariantIdx;\n use crate::util::captures::Captures;\n-use crate::mir::interpret::{Scalar, GlobalId};\n+use crate::mir::interpret::Scalar;\n \n use polonius_engine::Atom;\n use rustc_index::vec::Idx;\n@@ -2340,13 +2340,9 @@ impl<'tcx> Const<'tcx> {\n \n             let (param_env, substs) = param_env_and_substs.into_parts();\n \n-            // try to resolve e.g. associated constants to their definition on an impl\n-            let instance = ty::Instance::resolve(tcx, param_env, did, substs)?;\n-            let gid = GlobalId {\n-                instance,\n-                promoted: None,\n-            };\n-            tcx.const_eval(param_env.and(gid)).ok()\n+            // try to resolve e.g. associated constants to their definition on an impl, and then\n+            // evaluate the const.\n+            tcx.const_eval_resolve(param_env, did, substs, None).ok()\n         };\n \n         match self.val {"}, {"sha": "78a86d33a145b0466febb2ad8904de21ba3e38eb", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -8,7 +8,7 @@ use crate::value::Value;\n use libc::c_uint;\n use rustc::hir::def_id::DefId;\n use rustc::mir::interpret::{ConstValue, Allocation, read_target_uint,\n-    Pointer, ErrorHandled, GlobalId};\n+    Pointer, ErrorHandled};\n use rustc::mir::mono::MonoItem;\n use rustc::hir::Node;\n use rustc_target::abi::HasDataLayout;\n@@ -81,13 +81,7 @@ pub fn codegen_static_initializer(\n     cx: &CodegenCx<'ll, 'tcx>,\n     def_id: DefId,\n ) -> Result<(&'ll Value, &'tcx Allocation), ErrorHandled> {\n-    let instance = ty::Instance::mono(cx.tcx, def_id);\n-    let cid = GlobalId {\n-        instance,\n-        promoted: None,\n-    };\n-    let param_env = ty::ParamEnv::reveal_all();\n-    let static_ = cx.tcx.const_eval(param_env.and(cid))?;\n+    let static_ = cx.tcx.const_eval_poly(def_id)?;\n \n     let alloc = match static_.val {\n         ty::ConstKind::Value(ConstValue::ByRef {"}, {"sha": "e5a7583a8cc7049749b818cbce582c3a6a3696dc", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -14,7 +14,6 @@ use rustc_codegen_ssa::glue;\n use rustc_codegen_ssa::base::{to_immediate, wants_msvc_seh, compare_simd_types};\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::{self, FnAbiExt, LayoutOf, HasTyCtxt, Primitive};\n-use rustc::mir::interpret::GlobalId;\n use rustc_codegen_ssa::common::{IntPredicate, TypeKind};\n use rustc::hir;\n use rustc_target::abi::HasDataLayout;\n@@ -202,11 +201,9 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             \"needs_drop\" |\n             \"type_id\" |\n             \"type_name\" => {\n-                let gid = GlobalId {\n-                    instance,\n-                    promoted: None,\n-                };\n-                let ty_name = self.tcx.const_eval(ty::ParamEnv::reveal_all().and(gid)).unwrap();\n+                let ty_name = self.tcx\n+                    .const_eval_instance(ty::ParamEnv::reveal_all(), instance, None)\n+                    .unwrap();\n                 OperandRef::from_const(self, ty_name).immediate_or_packed_pair(self)\n             }\n             \"init\" => {"}, {"sha": "a532c23a6e0a25c25414daf15b327b572bf5235f", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -638,12 +638,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                 projection: &[],\n                             } = place.as_ref()\n                             {\n-                                let param_env = ty::ParamEnv::reveal_all();\n-                                let cid = mir::interpret::GlobalId {\n-                                    instance: self.instance,\n-                                    promoted: Some(promoted),\n-                                };\n-                                let c = bx.tcx().const_eval(param_env.and(cid));\n+                                let c = bx.tcx().const_eval_promoted(self.instance, promoted);\n                                 let (llval, ty) = self.simd_shuffle_indices(\n                                     &bx,\n                                     terminator.source_info.span,"}, {"sha": "fc17e2c0c71b7a282b9802e9520d4816bcf7aaa5", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -43,17 +43,14 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         match constant.literal.val {\n             ty::ConstKind::Unevaluated(def_id, substs) => {\n                 let substs = self.monomorphize(&substs);\n-                let instance = ty::Instance::resolve(\n-                    self.cx.tcx(), ty::ParamEnv::reveal_all(), def_id, substs,\n-                ).unwrap();\n-                let cid = mir::interpret::GlobalId {\n-                    instance,\n-                    promoted: None,\n-                };\n-                self.cx.tcx().const_eval(ty::ParamEnv::reveal_all().and(cid)).map_err(|err| {\n-                    self.cx.tcx().sess.span_err(constant.span, \"erroneous constant encountered\");\n-                    err\n-                })\n+                self.cx.tcx()\n+                    .const_eval_resolve(ty::ParamEnv::reveal_all(), def_id, substs, None)\n+                    .map_err(|err| {\n+                        self.cx.tcx().sess.span_err(\n+                            constant.span,\n+                            \"erroneous constant encountered\");\n+                        err\n+                    })\n             },\n             _ => Ok(self.monomorphize(&constant.literal)),\n         }"}, {"sha": "98d239d353d3a53163ff368e8c4b703fe9c08af8", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -473,14 +473,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 }),\n                 projection: [],\n             } => {\n-                let param_env = ty::ParamEnv::reveal_all();\n                 let instance = Instance::new(*def_id, self.monomorphize(substs));\n-                let cid = mir::interpret::GlobalId {\n-                    instance: instance,\n-                    promoted: Some(*promoted),\n-                };\n                 let layout = cx.layout_of(self.monomorphize(&ty));\n-                match bx.tcx().const_eval(param_env.and(cid)) {\n+                match bx.tcx().const_eval_promoted(instance, *promoted) {\n                     Ok(val) => match val.val {\n                         ty::ConstKind::Value(mir::interpret::ConstValue::ByRef {\n                             alloc, offset"}, {"sha": "340af64adad56c5b003ffe6ae0ab735374c271f2", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -1147,19 +1147,9 @@ declare_lint_pass!(\n \n fn check_const(cx: &LateContext<'_, '_>, body_id: hir::BodyId) {\n     let def_id = cx.tcx.hir().body_owner_def_id(body_id);\n-    let param_env = if cx.tcx.is_static(def_id) {\n-        // Use the same param_env as `codegen_static_initializer`, to reuse the cache.\n-        ty::ParamEnv::reveal_all()\n-    } else {\n-        cx.tcx.param_env(def_id)\n-    };\n-    let cid = ::rustc::mir::interpret::GlobalId {\n-        instance: ty::Instance::mono(cx.tcx, def_id),\n-        promoted: None\n-    };\n     // trigger the query once for all constants since that will already report the errors\n     // FIXME: Use ensure here\n-    let _ = cx.tcx.const_eval(param_env.and(cid));\n+    let _ = cx.tcx.const_eval_poly(def_id);\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedBrokenConst {"}, {"sha": "aceed09757e7e4e123058dc1bf9ea580ea2fcf3c", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -33,8 +33,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             this.ast_block_stmts(destination, block, span, stmts, expr,\n                                                  safety_mode)\n                         });\n-                    this.cfg.terminate(unpack!(block_exit), source_info,\n-                                       TerminatorKind::Goto { target: exit_block });\n+                    this.cfg.goto(unpack!(block_exit), source_info, exit_block);\n                     exit_block.unit()\n                 } else {\n                     this.ast_block_stmts(destination, block, span, stmts, expr,"}, {"sha": "0e685486c3f996ad5d60a03fa926d39af07ea257", "filename": "src/librustc_mir/build/cfg.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -85,4 +85,9 @@ impl<'tcx> CFG<'tcx> {\n             kind,\n         });\n     }\n+\n+    /// In the `origin` block, push a `goto -> target` terminator.\n+    pub fn goto(&mut self, origin: BasicBlock, source_info: SourceInfo, target: BasicBlock) {\n+        self.terminate(origin, source_info, TerminatorKind::Goto { target })\n+    }\n }"}, {"sha": "a9fa7cfa04a89de7461d1ec5ac1ef8973cac7bc4", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -140,17 +140,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     },\n                 );\n \n-                this.cfg.terminate(\n-                    true_block,\n-                    source_info,\n-                    TerminatorKind::Goto { target: join_block },\n-                );\n-                this.cfg.terminate(\n-                    false_block,\n-                    source_info,\n-                    TerminatorKind::Goto { target: join_block },\n-                );\n-\n+                // Link up both branches:\n+                this.cfg.goto(true_block, source_info, join_block);\n+                this.cfg.goto(false_block, source_info, join_block);\n                 join_block.unit()\n             }\n             ExprKind::Loop { body } => {\n@@ -167,12 +159,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let loop_block = this.cfg.start_new_block();\n                 let exit_block = this.cfg.start_new_block();\n \n-                // start the loop\n-                this.cfg.terminate(\n-                    block,\n-                    source_info,\n-                    TerminatorKind::Goto { target: loop_block },\n-                );\n+                // Start the loop.\n+                this.cfg.goto(block, source_info, loop_block);\n \n                 this.in_breakable_scope(\n                     Some(loop_block),\n@@ -196,11 +184,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         let tmp = this.get_unit_temp();\n                         // Execute the body, branching back to the test.\n                         let body_block_end = unpack!(this.into(&tmp, body_block, body));\n-                        this.cfg.terminate(\n-                            body_block_end,\n-                            source_info,\n-                            TerminatorKind::Goto { target: loop_block },\n-                        );\n+                        this.cfg.goto(body_block_end, source_info, loop_block);\n                     },\n                 );\n                 exit_block.unit()"}, {"sha": "6869930509cbeacd86e27a7e9446ad412d6a87bb", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 26, "deletions": 51, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -26,6 +26,7 @@ mod simplify;\n mod test;\n mod util;\n \n+use itertools::Itertools;\n use std::convert::TryFrom;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n@@ -258,11 +259,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             scrutinee_span,\n                             match_scope,\n                         );\n-                        this.cfg.terminate(\n-                            binding_end,\n-                            source_info,\n-                            TerminatorKind::Goto { target: arm_block },\n-                        );\n+                        this.cfg.goto(binding_end, source_info, arm_block);\n                     }\n                 }\n \n@@ -278,11 +275,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let end_block = self.cfg.start_new_block();\n \n         for arm_block in arm_end_blocks {\n-            self.cfg.terminate(\n-                unpack!(arm_block),\n-                outer_source_info,\n-                TerminatorKind::Goto { target: end_block },\n-            );\n+            self.cfg.goto(unpack!(arm_block), outer_source_info, end_block);\n         }\n \n         self.source_scope = outer_source_info.scope;\n@@ -822,45 +815,34 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         );\n         let (matched_candidates, unmatched_candidates) = candidates.split_at_mut(fully_matched);\n \n-        let block: BasicBlock;\n-\n-        if !matched_candidates.is_empty() {\n+        let block: BasicBlock = if !matched_candidates.is_empty() {\n             let otherwise_block = self.select_matched_candidates(\n                 matched_candidates,\n                 start_block,\n                 fake_borrows,\n             );\n \n             if let Some(last_otherwise_block) = otherwise_block {\n-                block = last_otherwise_block\n+                last_otherwise_block\n             } else {\n                 // Any remaining candidates are unreachable.\n                 if unmatched_candidates.is_empty() {\n                     return;\n                 }\n-                block = self.cfg.start_new_block();\n-            };\n+                self.cfg.start_new_block()\n+            }\n         } else {\n-            block = *start_block.get_or_insert_with(|| self.cfg.start_new_block());\n-        }\n+            *start_block.get_or_insert_with(|| self.cfg.start_new_block())\n+        };\n \n         // If there are no candidates that still need testing, we're\n         // done. Since all matches are exhaustive, execution should\n         // never reach this point.\n         if unmatched_candidates.is_empty() {\n             let source_info = self.source_info(span);\n-            if let Some(otherwise) = otherwise_block {\n-                self.cfg.terminate(\n-                    block,\n-                    source_info,\n-                    TerminatorKind::Goto { target: otherwise },\n-                );\n-            } else {\n-                self.cfg.terminate(\n-                    block,\n-                    source_info,\n-                    TerminatorKind::Unreachable,\n-                )\n+            match otherwise_block {\n+                Some(otherwise) => self.cfg.goto(block, source_info, otherwise),\n+                None => self.cfg.terminate(block, source_info, TerminatorKind::Unreachable),\n             }\n             return;\n         }\n@@ -885,7 +867,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// ...\n     ///\n     /// We generate real edges from:\n-    /// * `block` to the prebinding_block of the first pattern,\n+    /// * `start_block` to the `prebinding_block` of the first pattern,\n     /// * the otherwise block of the first pattern to the second pattern,\n     /// * the otherwise block of the third pattern to the a block with an\n     ///   Unreachable terminator.\n@@ -948,32 +930,25 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let first_candidate = &reachable_candidates[0];\n         let first_prebinding_block = first_candidate.pre_binding_block;\n \n+        // `goto -> first_prebinding_block` from the `start_block` if there is one.\n         if let Some(start_block) = *start_block {\n             let source_info = self.source_info(first_candidate.span);\n-            self.cfg.terminate(\n-                start_block,\n-                source_info,\n-                TerminatorKind::Goto { target: first_prebinding_block },\n-            );\n+            self.cfg.goto(start_block, source_info, first_prebinding_block);\n         } else {\n             *start_block = Some(first_prebinding_block);\n         }\n \n-        for window in reachable_candidates.windows(2) {\n-            if let [first_candidate, second_candidate] = window {\n-                let source_info = self.source_info(first_candidate.span);\n-                if let Some(otherwise_block) = first_candidate.otherwise_block {\n-                    self.false_edges(\n-                        otherwise_block,\n-                        second_candidate.pre_binding_block,\n-                        first_candidate.next_candidate_pre_binding_block,\n-                        source_info,\n-                    );\n-                } else {\n-                    bug!(\"candidate other than the last has no guard\");\n-                }\n+        for (first_candidate, second_candidate) in reachable_candidates.iter().tuple_windows() {\n+            let source_info = self.source_info(first_candidate.span);\n+            if let Some(otherwise_block) = first_candidate.otherwise_block {\n+                self.false_edges(\n+                    otherwise_block,\n+                    second_candidate.pre_binding_block,\n+                    first_candidate.next_candidate_pre_binding_block,\n+                    source_info,\n+                );\n             } else {\n-                bug!(\"<[_]>::windows returned incorrectly sized window\");\n+                bug!(\"candidate other than the last has no guard\");\n             }\n         }\n \n@@ -992,8 +967,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n         }\n \n-        let last_candidate = reachable_candidates.last().unwrap();\n \n+        let last_candidate = reachable_candidates.last().unwrap();\n         if let Some(otherwise) = last_candidate.otherwise_block {\n             let source_info = self.source_info(last_candidate.span);\n             let block = self.cfg.start_new_block();"}, {"sha": "bdc1bdd5b98552a71ba1fd74db1b766ee7ec79c6", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -30,7 +30,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 Test {\n                     span: match_pair.pattern.span,\n                     kind: TestKind::Switch {\n-                        adt_def: adt_def.clone(),\n+                        adt_def,\n                         variants: BitSet::new_empty(adt_def.variants.len()),\n                     },\n                 }"}, {"sha": "87481d1d69bc7eb80e2ca27cc0238a5d3ec1bd63", "filename": "src/librustc_mir/build/matches/util.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -109,15 +109,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     },\n                 );\n             }\n-            _ => {\n-                self.cfg.terminate(\n-                    from_block,\n-                    source_info,\n-                    TerminatorKind::Goto {\n-                        target: real_target\n-                    }\n-                );\n-            }\n+            _ => self.cfg.goto(from_block, source_info, real_target),\n         }\n     }\n }"}, {"sha": "3b85a5d3c911bd10245080ee3e5c45bc2943b834", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -606,14 +606,11 @@ where\n         let fn_end = span.shrink_to_hi();\n         let source_info = builder.source_info(fn_end);\n         let return_block = builder.return_block();\n-        builder.cfg.terminate(block, source_info,\n-                              TerminatorKind::Goto { target: return_block });\n-        builder.cfg.terminate(return_block, source_info,\n-                              TerminatorKind::Return);\n+        builder.cfg.goto(block, source_info, return_block);\n+        builder.cfg.terminate(return_block, source_info, TerminatorKind::Return);\n         // Attribute any unreachable codepaths to the function's closing brace\n         if let Some(unreachable_block) = builder.cached_unreachable_block {\n-            builder.cfg.terminate(unreachable_block, source_info,\n-                                  TerminatorKind::Unreachable);\n+            builder.cfg.terminate(unreachable_block, source_info, TerminatorKind::Unreachable);\n         }\n         return_block.unit()\n     }));"}, {"sha": "9c5966263dfc0694c471e608c83dc693d5ed05ab", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -564,14 +564,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let source_info = scope.source_info(span);\n             block = match scope.cached_exits.entry((target, region_scope)) {\n                 Entry::Occupied(e) => {\n-                    self.cfg.terminate(block, source_info,\n-                                    TerminatorKind::Goto { target: *e.get() });\n+                    self.cfg.goto(block, source_info, *e.get());\n                     return;\n                 }\n                 Entry::Vacant(v) => {\n                     let b = self.cfg.start_new_block();\n-                    self.cfg.terminate(block, source_info,\n-                                    TerminatorKind::Goto { target: b });\n+                    self.cfg.goto(block, source_info, b);\n                     v.insert(b);\n                     b\n                 }\n@@ -596,8 +594,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             scope = next_scope;\n         }\n \n-        let source_info = self.scopes.source_info(scope_count, span);\n-        self.cfg.terminate(block, source_info, TerminatorKind::Goto { target });\n+        self.cfg.goto(block, self.scopes.source_info(scope_count, span), target);\n     }\n \n     /// Creates a path that performs all required cleanup for dropping a generator.\n@@ -616,14 +613,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n         while let Some(scope) = scopes.next() {\n             block = if let Some(b) = scope.cached_generator_drop {\n-                self.cfg.terminate(block, src_info,\n-                                   TerminatorKind::Goto { target: b });\n+                self.cfg.goto(block, src_info, b);\n                 return Some(result);\n             } else {\n                 let b = self.cfg.start_new_block();\n                 scope.cached_generator_drop = Some(b);\n-                self.cfg.terminate(block, src_info,\n-                                   TerminatorKind::Goto { target: b });\n+                self.cfg.goto(block, src_info, b);\n                 b\n             };\n \n@@ -1243,8 +1238,7 @@ fn build_diverge_scope<'tcx>(cfg: &mut CFG<'tcx>,\n                     // block for our StorageDead statements.\n                     let block = cfg.start_new_cleanup_block();\n                     let source_info = SourceInfo { span: DUMMY_SP, scope: source_scope };\n-                    cfg.terminate(block, source_info,\n-                                    TerminatorKind::Goto { target: target });\n+                    cfg.goto(block, source_info, target);\n                     target = block;\n                     target_built_by_us = true;\n                 }"}, {"sha": "a2f066bee08d1ca54887bf79f4b3a95cee710781", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -652,15 +652,15 @@ fn validate_and_turn_into_const<'tcx>(\n     })\n }\n \n-pub fn const_eval_provider<'tcx>(\n+pub fn const_eval_validated_provider<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc::mir::interpret::ConstEvalResult<'tcx> {\n     // see comment in const_eval_raw_provider for what we're doing here\n     if key.param_env.reveal == Reveal::All {\n         let mut key = key.clone();\n         key.param_env.reveal = Reveal::UserFacing;\n-        match tcx.const_eval(key) {\n+        match tcx.const_eval_validated(key) {\n             // try again with reveal all as requested\n             Err(ErrorHandled::TooGeneric) => {\n                 // Promoteds should never be \"too generic\" when getting evaluated."}, {"sha": "589016a2ca253153c0264460e7eab6a66e9e50e0", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -5,7 +5,7 @@ use crate::hair::cx::to_ref::ToRef;\n use crate::hair::util::UserAnnotatedTyHelpers;\n use rustc_index::vec::Idx;\n use rustc::hir::def::{CtorOf, Res, DefKind, CtorKind};\n-use rustc::mir::interpret::{GlobalId, ErrorHandled, Scalar};\n+use rustc::mir::interpret::{ErrorHandled, Scalar};\n use rustc::ty::{self, AdtKind, Ty};\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow, AutoBorrowMutability, PointerCast};\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n@@ -511,21 +511,15 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n         hir::ExprKind::Repeat(ref v, ref count) => {\n             let def_id = cx.tcx.hir().local_def_id(count.hir_id);\n             let substs = InternalSubsts::identity_for_item(cx.tcx, def_id);\n-            let instance = ty::Instance::resolve(\n-                cx.tcx,\n-                cx.param_env,\n-                def_id,\n-                substs,\n-            ).unwrap();\n-            let global_id = GlobalId {\n-                instance,\n-                promoted: None\n-            };\n             let span = cx.tcx.def_span(def_id);\n-            let count = match cx.tcx.at(span).const_eval(cx.param_env.and(global_id)) {\n+            let count = match cx.tcx.const_eval_resolve(cx.param_env,\n+                                                        def_id,\n+                                                        substs,\n+                                                        Some(span)) {\n                 Ok(cv) => cv.eval_usize(cx.tcx, cx.param_env),\n                 Err(ErrorHandled::Reported) => 0,\n                 Err(ErrorHandled::TooGeneric) => {\n+                    let span = cx.tcx.def_span(def_id);\n                     cx.tcx.sess.span_err(span, \"array lengths can't depend on generic parameters\");\n                     0\n                 },"}, {"sha": "fdef6633925daa4a57f3347f2b1cf20aa8173bbf", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 34, "deletions": 47, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -11,7 +11,7 @@ use crate::hair::constant::*;\n \n use rustc::mir::{Field, BorrowKind, Mutability};\n use rustc::mir::{UserTypeProjection};\n-use rustc::mir::interpret::{GlobalId, ConstValue, get_slice_bytes, sign_extend};\n+use rustc::mir::interpret::{ConstValue, ErrorHandled, get_slice_bytes, sign_extend};\n use rustc::ty::{self, Region, TyCtxt, AdtDef, Ty, UserType, DefIdTree};\n use rustc::ty::{CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations};\n use rustc::ty::subst::{SubstsRef, GenericArg};\n@@ -771,64 +771,51 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         let kind = match res {\n             Res::Def(DefKind::Const, def_id) | Res::Def(DefKind::AssocConst, def_id) => {\n                 let substs = self.tables.node_substs(id);\n-                match ty::Instance::resolve(\n-                    self.tcx,\n-                    self.param_env,\n-                    def_id,\n-                    substs,\n-                ) {\n-                    Some(instance) => {\n-                        let cid = GlobalId {\n-                            instance,\n-                            promoted: None,\n-                        };\n-                        match self.tcx.at(span).const_eval(self.param_env.and(cid)) {\n-                            Ok(value) => {\n-                                let pattern = self.const_to_pat(value, id, span);\n-                                if !is_associated_const {\n-                                    return pattern;\n-                                }\n+                match self.tcx.const_eval_resolve(self.param_env, def_id, substs, Some(span)) {\n+                    Ok(value) => {\n+                        let pattern = self.const_to_pat(value, id, span);\n+                        if !is_associated_const {\n+                            return pattern;\n+                        }\n \n-                                let user_provided_types = self.tables().user_provided_types();\n-                                return if let Some(u_ty) = user_provided_types.get(id) {\n-                                    let user_ty = PatTyProj::from_user_type(*u_ty);\n-                                    Pat {\n-                                        span,\n-                                        kind: Box::new(\n-                                            PatKind::AscribeUserType {\n-                                                subpattern: pattern,\n-                                                ascription: Ascription {\n-                                                    /// Note that use `Contravariant` here. See the\n-                                                    /// `variance` field documentation for details.\n-                                                    variance: ty::Variance::Contravariant,\n-                                                    user_ty,\n-                                                    user_ty_span: span,\n-                                                },\n-                                            }\n-                                        ),\n-                                        ty: value.ty,\n+                        let user_provided_types = self.tables().user_provided_types();\n+                        return if let Some(u_ty) = user_provided_types.get(id) {\n+                            let user_ty = PatTyProj::from_user_type(*u_ty);\n+                            Pat {\n+                                span,\n+                                kind: Box::new(\n+                                    PatKind::AscribeUserType {\n+                                        subpattern: pattern,\n+                                        ascription: Ascription {\n+                                            /// Note that use `Contravariant` here. See the\n+                                            /// `variance` field documentation for details.\n+                                            variance: ty::Variance::Contravariant,\n+                                            user_ty,\n+                                            user_ty_span: span,\n+                                        },\n                                     }\n-                                } else {\n-                                    pattern\n-                                }\n-                            },\n-                            Err(_) => {\n-                                self.tcx.sess.span_err(\n-                                    span,\n-                                    \"could not evaluate constant pattern\",\n-                                );\n-                                PatKind::Wild\n+                                ),\n+                                ty: value.ty,\n                             }\n+                        } else {\n+                            pattern\n                         }\n                     },\n-                    None => {\n+                    Err(ErrorHandled::TooGeneric) => {\n                         self.errors.push(if is_associated_const {\n                             PatternError::AssocConstInPattern(span)\n                         } else {\n                             PatternError::StaticInPattern(span)\n                         });\n                         PatKind::Wild\n                     },\n+                    Err(_) => {\n+                        self.tcx.sess.span_err(\n+                            span,\n+                            \"could not evaluate constant pattern\",\n+                        );\n+                        PatKind::Wild\n+                    }\n                 }\n             }\n             _ => self.lower_variant_or_leaf(res, id, span, ty, vec![]),"}, {"sha": "46782ef0a806b051196c7fb55477f2880088faef", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -11,7 +11,7 @@ use rustc::hir::def_id::DefId;\n use rustc::ty::TyCtxt;\n use rustc::mir::{\n     self, BinOp,\n-    interpret::{InterpResult, Scalar, GlobalId, ConstValue}\n+    interpret::{InterpResult, Scalar, ConstValue}\n };\n \n use super::{\n@@ -123,11 +123,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             sym::size_of |\n             sym::type_id |\n             sym::type_name => {\n-                let gid = GlobalId {\n-                    instance,\n-                    promoted: None,\n-                };\n-                let val = self.tcx.const_eval(self.param_env.and(gid))?;\n+                let val = self.tcx.const_eval_instance(self.param_env,\n+                                                       instance,\n+                                                       Some(self.tcx.span))?;\n                 let val = self.eval_const_to_op(val, None)?;\n                 self.copy_op(val, dest)?;\n             }"}, {"sha": "0af203079b153dcc820b69ac2da9589765350373", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -218,11 +218,20 @@ impl<'tcx, Tag: Copy> ImmTy<'tcx, Tag> {\n         ImmTy { imm: val.into(), layout }\n     }\n \n+    #[inline]\n+    pub fn try_from_uint(i: impl Into<u128>, layout: TyLayout<'tcx>) -> Option<Self> {\n+        Some(Self::from_scalar(Scalar::try_from_uint(i, layout.size)?, layout))\n+    }\n     #[inline]\n     pub fn from_uint(i: impl Into<u128>, layout: TyLayout<'tcx>) -> Self {\n         Self::from_scalar(Scalar::from_uint(i, layout.size), layout)\n     }\n \n+    #[inline]\n+    pub fn try_from_int(i: impl Into<i128>, layout: TyLayout<'tcx>) -> Option<Self> {\n+        Some(Self::from_scalar(Scalar::try_from_int(i, layout.size)?, layout))\n+    }\n+\n     #[inline]\n     pub fn from_int(i: impl Into<i128>, layout: TyLayout<'tcx>) -> Self {\n         Self::from_scalar(Scalar::from_int(i, layout.size), layout)"}, {"sha": "a1e6eb69b9d0d371cd7fe9da294cc26fdf9f2dd0", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -626,11 +626,6 @@ where\n                 let ty = place_static.ty;\n                 assert!(!ty.needs_subst());\n                 let layout = self.layout_of(ty)?;\n-                let instance = ty::Instance::mono(*self.tcx, place_static.def_id);\n-                let cid = GlobalId {\n-                    instance,\n-                    promoted: None\n-                };\n                 // Just create a lazy reference, so we can support recursive statics.\n                 // tcx takes care of assigning every static one and only one unique AllocId.\n                 // When the data here is ever actually used, memory will notice,\n@@ -646,7 +641,7 @@ where\n                 // Notice that statics have *two* AllocIds: the lazy one, and the resolved\n                 // one.  Here we make sure that the interpreted program never sees the\n                 // resolved ID.  Also see the doc comment of `Memory::get_static_alloc`.\n-                let alloc_id = self.tcx.alloc_map.lock().create_static_alloc(cid.instance.def_id());\n+                let alloc_id = self.tcx.alloc_map.lock().create_static_alloc(place_static.def_id);\n                 let ptr = self.tag_static_base_pointer(Pointer::from(alloc_id));\n                 MPlaceTy::from_aligned_ptr(ptr, layout)\n             }"}, {"sha": "cf54530317c4337d94c755134469b2d26510fa12", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -56,7 +56,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     shim::provide(providers);\n     transform::provide(providers);\n     monomorphize::partitioning::provide(providers);\n-    providers.const_eval = const_eval::const_eval_provider;\n+    providers.const_eval_validated = const_eval::const_eval_validated_provider;\n     providers.const_eval_raw = const_eval::const_eval_raw_provider;\n     providers.check_match = hair::pattern::check_match;\n     providers.const_caller_location = const_eval::const_caller_location;"}, {"sha": "ac627d32392b8162603db67be574bb93ce2822dc", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 6, "deletions": 32, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -189,7 +189,7 @@ use rustc::session::config::EntryFnType;\n use rustc::mir::{self, Location, PlaceBase, Static, StaticKind};\n use rustc::mir::visit::Visitor as MirVisitor;\n use rustc::mir::mono::{MonoItem, InstantiationMode};\n-use rustc::mir::interpret::{Scalar, GlobalId, GlobalAlloc, ErrorHandled};\n+use rustc::mir::interpret::{Scalar, GlobalAlloc, ErrorHandled};\n use rustc::util::nodemap::{FxHashSet, FxHashMap, DefIdMap};\n use rustc::util::common::time;\n \n@@ -379,13 +379,7 @@ fn collect_items_rec<'tcx>(\n \n             recursion_depth_reset = None;\n \n-            let cid = GlobalId {\n-                instance,\n-                promoted: None,\n-            };\n-            let param_env = ty::ParamEnv::reveal_all();\n-\n-            if let Ok(val) = tcx.const_eval(param_env.and(cid)) {\n+            if let Ok(val) = tcx.const_eval_poly(def_id) {\n                 collect_const(tcx, val, InternalSubsts::empty(), &mut neighbors);\n             }\n         }\n@@ -681,12 +675,8 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 def_id,\n                 ..\n             }) => {\n-                let param_env = ty::ParamEnv::reveal_all();\n-                let cid = GlobalId {\n-                    instance: Instance::new(*def_id, substs.subst(self.tcx, self.param_substs)),\n-                    promoted: Some(*promoted),\n-                };\n-                match self.tcx.const_eval(param_env.and(cid)) {\n+                let instance = Instance::new(*def_id, substs.subst(self.tcx, self.param_substs));\n+                match self.tcx.const_eval_promoted(instance, *promoted) {\n                     Ok(val) => collect_const(self.tcx, val, substs, self.output),\n                     Err(ErrorHandled::Reported) => {},\n                     Err(ErrorHandled::TooGeneric) => {\n@@ -1041,14 +1031,7 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n                 // but even just declaring them must collect the items they refer to\n                 let def_id = self.tcx.hir().local_def_id(item.hir_id);\n \n-                let instance = Instance::mono(self.tcx, def_id);\n-                let cid = GlobalId {\n-                    instance,\n-                    promoted: None,\n-                };\n-                let param_env = ty::ParamEnv::reveal_all();\n-\n-                if let Ok(val) = self.tcx.const_eval(param_env.and(cid)) {\n+                if let Ok(val) = self.tcx.const_eval_poly(def_id) {\n                     collect_const(self.tcx, val, InternalSubsts::empty(), &mut self.output);\n                 }\n             }\n@@ -1288,16 +1271,7 @@ fn collect_const<'tcx>(\n             }\n         }\n         ty::ConstKind::Unevaluated(def_id, substs) => {\n-            let instance = ty::Instance::resolve(tcx,\n-                                                param_env,\n-                                                def_id,\n-                                                substs).unwrap();\n-\n-            let cid = GlobalId {\n-                instance,\n-                promoted: None,\n-            };\n-            match tcx.const_eval(param_env.and(cid)) {\n+            match tcx.const_eval_resolve(param_env, def_id, substs, None) {\n                 Ok(val) => collect_const(tcx, val, param_substs, output),\n                 Err(ErrorHandled::Reported) => {},\n                 Err(ErrorHandled::TooGeneric) => span_bug!("}, {"sha": "a768fdc779ed9a01ae7fe843fd0fbf8fb045757a", "filename": "src/librustc_parse/parser/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpath.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -173,7 +173,7 @@ impl<'a> Parser<'a> {\n             let args = if self.eat_lt() {\n                 // `<'a, T, A = U>`\n                 let (args, constraints) =\n-                    self.parse_generic_args_with_leaning_angle_bracket_recovery(style, lo)?;\n+                    self.parse_generic_args_with_leading_angle_bracket_recovery(style, lo)?;\n                 self.expect_gt()?;\n                 let span = lo.to(self.prev_span);\n                 AngleBracketedArgs { args, constraints, span }.into()\n@@ -212,7 +212,7 @@ impl<'a> Parser<'a> {\n     /// bar::<<<<T as Foo>::Output>();\n     ///      ^^ help: remove extra angle brackets\n     /// ```\n-    fn parse_generic_args_with_leaning_angle_bracket_recovery(\n+    fn parse_generic_args_with_leading_angle_bracket_recovery(\n         &mut self,\n         style: PathStyle,\n         lo: Span,"}, {"sha": "a6ae10b3dea399ae687d63d6054eb012b21967ea", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -31,15 +31,13 @@ use rustc::hir::ptr::P;\n use rustc::infer;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::middle::lang_items;\n-use rustc::mir::interpret::GlobalId;\n use rustc::ty;\n use rustc::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability,\n };\n use rustc::ty::{AdtKind, Visibility};\n use rustc::ty::Ty;\n use rustc::ty::TypeFoldable;\n-use rustc::ty::subst::InternalSubsts;\n use rustc::traits::{self, ObligationCauseCode};\n \n use rustc_error_codes::*;\n@@ -1023,20 +1021,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let count = if self.const_param_def_id(count).is_some() {\n             Ok(self.to_const(count, tcx.type_of(count_def_id)))\n         } else {\n-            let param_env = ty::ParamEnv::empty();\n-            let substs = InternalSubsts::identity_for_item(tcx, count_def_id);\n-            let instance = ty::Instance::resolve(\n-                tcx,\n-                param_env,\n-                count_def_id,\n-                substs,\n-            ).unwrap();\n-            let global_id = GlobalId {\n-                instance,\n-                promoted: None\n-            };\n-\n-            tcx.const_eval(param_env.and(global_id))\n+            tcx.const_eval_poly(count_def_id)\n         };\n \n         let uty = match expected {"}, {"sha": "ea295103982b04b4852a1ded9cbe36e22980bfd7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -106,7 +106,7 @@ use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::infer::error_reporting::TypeAnnotationNeeded::E0282;\n use rustc::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc::middle::region;\n-use rustc::mir::interpret::{ConstValue, GlobalId};\n+use rustc::mir::interpret::ConstValue;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, TraitEngine};\n use rustc::ty::{\n     self, AdtKind, CanonicalUserType, Ty, TyCtxt, Const, GenericParamDefKind,\n@@ -1836,13 +1836,7 @@ fn maybe_check_static_with_link_section(tcx: TyCtxt<'_>, id: DefId, span: Span)\n     // `#[link_section]` may contain arbitrary, or even undefined bytes, but it is\n     // the consumer's responsibility to ensure all bytes that have been read\n     // have defined values.\n-    let instance = ty::Instance::mono(tcx, id);\n-    let cid = GlobalId {\n-        instance,\n-        promoted: None\n-    };\n-    let param_env = ty::ParamEnv::reveal_all();\n-    if let Ok(static_) = tcx.const_eval(param_env.and(cid)) {\n+    if let Ok(static_) = tcx.const_eval_poly(id) {\n         let alloc = if let ty::ConstKind::Value(ConstValue::ByRef { alloc, .. }) = static_.val {\n             alloc\n         } else {"}, {"sha": "b7e01708fbfcfee0fd89d755bc382150f93f0e13", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -7,7 +7,7 @@ use syntax::symbol::sym;\n use syntax_pos::hygiene::MacroKind;\n use syntax_pos::Span;\n \n-use rustc::hir;\n+use rustc::hir::{self, Mutability};\n use rustc::hir::def::{Res, DefKind, CtorKind};\n use rustc::hir::def_id::DefId;\n use rustc_metadata::creader::LoadedMacro;\n@@ -472,7 +472,7 @@ fn build_const(cx: &DocContext<'_>, did: DefId) -> clean::Constant {\n fn build_static(cx: &DocContext<'_>, did: DefId, mutable: bool) -> clean::Static {\n     clean::Static {\n         type_: cx.tcx.type_of(did).clean(cx),\n-        mutability: if mutable {clean::Mutable} else {clean::Immutable},\n+        mutability: if mutable { Mutability::Mut } else { Mutability::Not },\n         expr: \"\\n\\n\\n\".to_string(), // trigger the \"[definition]\" links\n     }\n }"}, {"sha": "4afa0be55a64c692521786ce9c42391fc55aa06c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 35, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -15,7 +15,6 @@ use rustc::infer::region_constraints::{RegionConstraintData, Constraint};\n use rustc::middle::resolve_lifetime as rl;\n use rustc::middle::lang_items;\n use rustc::middle::stability;\n-use rustc::mir::interpret::GlobalId;\n use rustc::hir;\n use rustc::hir::def::{CtorKind, DefKind, Res};\n use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n@@ -46,7 +45,6 @@ pub use utils::{get_auto_trait_and_blanket_impls, krate, register_res};\n \n pub use self::types::*;\n pub use self::types::Type::*;\n-pub use self::types::Mutability::*;\n pub use self::types::ItemEnum::*;\n pub use self::types::SelfTy::*;\n pub use self::types::FunctionRetTy::*;\n@@ -1328,26 +1326,19 @@ impl Clean<Type> for hir::Ty {\n \n         match self.kind {\n             TyKind::Never => Never,\n-            TyKind::Ptr(ref m) => RawPointer(m.mutbl.clean(cx), box m.ty.clean(cx)),\n+            TyKind::Ptr(ref m) => RawPointer(m.mutbl, box m.ty.clean(cx)),\n             TyKind::Rptr(ref l, ref m) => {\n                 let lifetime = if l.is_elided() {\n                     None\n                 } else {\n                     Some(l.clean(cx))\n                 };\n-                BorrowedRef {lifetime, mutability: m.mutbl.clean(cx),\n-                             type_: box m.ty.clean(cx)}\n+                BorrowedRef {lifetime, mutability: m.mutbl, type_: box m.ty.clean(cx)}\n             }\n             TyKind::Slice(ref ty) => Slice(box ty.clean(cx)),\n             TyKind::Array(ref ty, ref length) => {\n                 let def_id = cx.tcx.hir().local_def_id(length.hir_id);\n-                let param_env = cx.tcx.param_env(def_id);\n-                let substs = InternalSubsts::identity_for_item(cx.tcx, def_id);\n-                let cid = GlobalId {\n-                    instance: ty::Instance::new(def_id, substs),\n-                    promoted: None\n-                };\n-                let length = match cx.tcx.const_eval(param_env.and(cid)) {\n+                let length = match cx.tcx.const_eval_poly(def_id) {\n                     Ok(length) => print_const(cx, length),\n                     Err(_) => cx.sess()\n                                 .source_map()\n@@ -1541,23 +1532,14 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n             ty::Slice(ty) => Slice(box ty.clean(cx)),\n             ty::Array(ty, n) => {\n                 let mut n = cx.tcx.lift(&n).expect(\"array lift failed\");\n-                if let ty::ConstKind::Unevaluated(def_id, substs) = n.val {\n-                    let param_env = cx.tcx.param_env(def_id);\n-                    let cid = GlobalId {\n-                        instance: ty::Instance::new(def_id, substs),\n-                        promoted: None\n-                    };\n-                    if let Ok(new_n) = cx.tcx.const_eval(param_env.and(cid)) {\n-                        n = new_n;\n-                    }\n-                };\n+                n = n.eval(cx.tcx, ty::ParamEnv::reveal_all());\n                 let n = print_const(cx, n);\n                 Array(box ty.clean(cx), n)\n             }\n-            ty::RawPtr(mt) => RawPointer(mt.mutbl.clean(cx), box mt.ty.clean(cx)),\n+            ty::RawPtr(mt) => RawPointer(mt.mutbl, box mt.ty.clean(cx)),\n             ty::Ref(r, ty, mutbl) => BorrowedRef {\n                 lifetime: r.clean(cx),\n-                mutability: mutbl.clean(cx),\n+                mutability: mutbl,\n                 type_: box ty.clean(cx),\n             },\n             ty::FnDef(..) |\n@@ -2080,7 +2062,7 @@ impl Clean<Item> for doctree::Static<'_> {\n             deprecation: cx.deprecation(self.id).clean(cx),\n             inner: StaticItem(Static {\n                 type_: self.type_.clean(cx),\n-                mutability: self.mutability.clean(cx),\n+                mutability: self.mutability,\n                 expr: print_const_expr(cx, self.expr),\n             }),\n         }\n@@ -2105,15 +2087,6 @@ impl Clean<Item> for doctree::Constant<'_> {\n     }\n }\n \n-impl Clean<Mutability> for hir::Mutability {\n-    fn clean(&self, _: &DocContext<'_>) -> Mutability {\n-        match self {\n-            &hir::Mutability::Mut => Mutable,\n-            &hir::Mutability::Not => Immutable,\n-        }\n-    }\n-}\n-\n impl Clean<ImplPolarity> for ty::ImplPolarity {\n     fn clean(&self, _: &DocContext<'_>) -> ImplPolarity {\n         match self {\n@@ -2303,7 +2276,7 @@ impl Clean<Item> for doctree::ForeignItem<'_> {\n             hir::ForeignItemKind::Static(ref ty, mutbl) => {\n                 ForeignStaticItem(Static {\n                     type_: ty.clean(cx),\n-                    mutability: mutbl.clean(cx),\n+                    mutability: *mutbl,\n                     expr: String::new(),\n                 })\n             }"}, {"sha": "706aef720310f5f266e1c67f29f898630da951e8", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -10,7 +10,7 @@ use std::sync::Arc;\n \n use rustc::middle::lang_items;\n use rustc::middle::stability;\n-use rustc::hir;\n+use rustc::hir::{self, Mutability};\n use rustc::hir::def::Res;\n use rustc::hir::def_id::{CrateNum, DefId};\n use rustc::ty::layout::VariantIdx;\n@@ -1450,12 +1450,6 @@ pub struct Constant {\n     pub expr: String,\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq, Copy, Hash)]\n-pub enum Mutability {\n-    Mutable,\n-    Immutable,\n-}\n-\n #[derive(Clone, PartialEq, Debug)]\n pub enum ImplPolarity {\n     Positive,"}, {"sha": "501147ed4593ba6748c724eba77a70016a42a8ff", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -670,8 +670,8 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter<'_>, use_absolute: bool) ->\n         clean::Never => primitive_link(f, PrimitiveType::Never, \"!\"),\n         clean::RawPointer(m, ref t) => {\n             let m = match m {\n-                clean::Immutable => \"const\",\n-                clean::Mutable => \"mut\",\n+                hir::Mutability::Mut => \"mut\",\n+                hir::Mutability::Not => \"const\",\n             };\n             match **t {\n                 clean::Generic(_) | clean::ResolvedPath {is_generic: true, ..} => {\n@@ -1082,6 +1082,15 @@ impl PrintWithSpace for hir::IsAsync {\n     }\n }\n \n+impl PrintWithSpace for hir::Mutability {\n+    fn print_with_space(&self) -> &str {\n+        match self {\n+            hir::Mutability::Not => \"\",\n+            hir::Mutability::Mut => \"mut \",\n+        }\n+    }\n+}\n+\n impl clean::Import {\n     crate fn print(&self) -> impl fmt::Display + '_ {\n         display_fn(move |f| {\n@@ -1151,15 +1160,6 @@ impl clean::TypeBinding {\n     }\n }\n \n-impl clean::Mutability {\n-    crate fn print_with_space(&self) -> &str {\n-        match self {\n-            clean::Immutable => \"\",\n-            clean::Mutable => \"mut \",\n-        }\n-    }\n-}\n-\n crate fn print_abi_with_space(abi: Abi) -> impl fmt::Display {\n     display_fn(move |f| {\n         let quot = if f.alternate() { \"\\\"\" } else { \"&quot;\" };"}, {"sha": "100aed1af193a227da168a05b0847ab6190272d5", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98af84c4aa66392236fff59c86da2130d46d46/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=9b98af84c4aa66392236fff59c86da2130d46d46", "patch": "@@ -54,12 +54,12 @@ use syntax_pos::hygiene::MacroKind;\n use rustc::hir::def_id::DefId;\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability;\n-use rustc::hir;\n+use rustc::hir::{self, Mutability};\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::flock;\n use rustc_feature::UnstableFeatures;\n \n-use crate::clean::{self, AttributesExt, Deprecation, GetDefId, SelfTy, Mutability};\n+use crate::clean::{self, AttributesExt, Deprecation, GetDefId, SelfTy};\n use crate::config::RenderOptions;\n use crate::docfs::{DocFS, ErrorStorage, PathError};\n use crate::doctree;\n@@ -3298,7 +3298,7 @@ fn should_render_item(item: &clean::Item, deref_mut_: bool) -> bool {\n         let (by_mut_ref, by_box, by_value) = match self_ty {\n             SelfTy::SelfBorrowed(_, mutability) |\n             SelfTy::SelfExplicit(clean::BorrowedRef { mutability, .. }) => {\n-                (mutability == Mutability::Mutable, false, false)\n+                (mutability == Mutability::Mut, false, false)\n             },\n             SelfTy::SelfExplicit(clean::ResolvedPath { did, .. }) => {\n                 (false, Some(did) == cache().owned_box_did, false)"}]}