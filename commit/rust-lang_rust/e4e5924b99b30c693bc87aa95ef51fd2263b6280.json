{"sha": "e4e5924b99b30c693bc87aa95ef51fd2263b6280", "node_id": "C_kwDOAAsO6NoAKGU0ZTU5MjRiOTliMzBjNjkzYmM4N2FhOTVlZjUxZmQyMjYzYjYyODA", "commit": {"author": {"name": "Samuel Tardieu", "email": "sam@rfc1149.net", "date": "2023-02-14T13:50:08Z"}, "committer": {"name": "Samuel Tardieu", "email": "sam@rfc1149.net", "date": "2023-02-14T14:37:48Z"}, "message": "Do not base map_entry lint suggestion on expanded code", "tree": {"sha": "7cb29fe6c77a769fedf6e7b7ed295e3cd4fb930d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cb29fe6c77a769fedf6e7b7ed295e3cd4fb930d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4e5924b99b30c693bc87aa95ef51fd2263b6280", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4e5924b99b30c693bc87aa95ef51fd2263b6280", "html_url": "https://github.com/rust-lang/rust/commit/e4e5924b99b30c693bc87aa95ef51fd2263b6280", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4e5924b99b30c693bc87aa95ef51fd2263b6280/comments", "author": {"login": "samueltardieu", "id": 44656, "node_id": "MDQ6VXNlcjQ0NjU2", "avatar_url": "https://avatars.githubusercontent.com/u/44656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samueltardieu", "html_url": "https://github.com/samueltardieu", "followers_url": "https://api.github.com/users/samueltardieu/followers", "following_url": "https://api.github.com/users/samueltardieu/following{/other_user}", "gists_url": "https://api.github.com/users/samueltardieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/samueltardieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samueltardieu/subscriptions", "organizations_url": "https://api.github.com/users/samueltardieu/orgs", "repos_url": "https://api.github.com/users/samueltardieu/repos", "events_url": "https://api.github.com/users/samueltardieu/events{/privacy}", "received_events_url": "https://api.github.com/users/samueltardieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "samueltardieu", "id": 44656, "node_id": "MDQ6VXNlcjQ0NjU2", "avatar_url": "https://avatars.githubusercontent.com/u/44656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samueltardieu", "html_url": "https://github.com/samueltardieu", "followers_url": "https://api.github.com/users/samueltardieu/followers", "following_url": "https://api.github.com/users/samueltardieu/following{/other_user}", "gists_url": "https://api.github.com/users/samueltardieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/samueltardieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samueltardieu/subscriptions", "organizations_url": "https://api.github.com/users/samueltardieu/orgs", "repos_url": "https://api.github.com/users/samueltardieu/repos", "events_url": "https://api.github.com/users/samueltardieu/events{/privacy}", "received_events_url": "https://api.github.com/users/samueltardieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63562a6854f1ec95f5e53936b5cec65a58aca1da", "url": "https://api.github.com/repos/rust-lang/rust/commits/63562a6854f1ec95f5e53936b5cec65a58aca1da", "html_url": "https://github.com/rust-lang/rust/commit/63562a6854f1ec95f5e53936b5cec65a58aca1da"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "ed9d94cdec3c5ba5546d5457114aa1a72b31a392", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5924b99b30c693bc87aa95ef51fd2263b6280/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5924b99b30c693bc87aa95ef51fd2263b6280/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=e4e5924b99b30c693bc87aa95ef51fd2263b6280", "patch": "@@ -65,6 +65,10 @@ declare_lint_pass!(HashMapPass => [MAP_ENTRY]);\n impl<'tcx> LateLintPass<'tcx> for HashMapPass {\n     #[expect(clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if expr.span.from_expansion() {\n+            return;\n+        }\n+\n         let Some(higher::If { cond: cond_expr, then: then_expr, r#else: else_expr }) = higher::If::hir(expr) else {\n             return\n         };"}, {"sha": "dbe09e0ff3c694778e9777fdfd499232e8aa05d8", "filename": "tests/ui/entry.fixed", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5924b99b30c693bc87aa95ef51fd2263b6280/tests%2Fui%2Fentry.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5924b99b30c693bc87aa95ef51fd2263b6280/tests%2Fui%2Fentry.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry.fixed?ref=e4e5924b99b30c693bc87aa95ef51fd2263b6280", "patch": "@@ -152,4 +152,18 @@ fn hash_map<K: Eq + Hash + Copy, V: Copy>(m: &mut HashMap<K, V>, m2: &mut HashMa\n     });\n }\n \n+// Issue 10331\n+// do not suggest a bad expansion because the compiler unrolls the first\n+// occurrence of the loop\n+pub fn issue_10331() {\n+    let mut m = HashMap::new();\n+    let mut i = 0;\n+    let mut x = 0;\n+    while !m.contains_key(&x) {\n+        m.insert(x, i);\n+        i += 1;\n+        x += 1;\n+    }\n+}\n+\n fn main() {}"}, {"sha": "30fed34fc5de22391ec6e2971e8ba08d6e5ad393", "filename": "tests/ui/entry.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5924b99b30c693bc87aa95ef51fd2263b6280/tests%2Fui%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5924b99b30c693bc87aa95ef51fd2263b6280/tests%2Fui%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry.rs?ref=e4e5924b99b30c693bc87aa95ef51fd2263b6280", "patch": "@@ -156,4 +156,18 @@ fn hash_map<K: Eq + Hash + Copy, V: Copy>(m: &mut HashMap<K, V>, m2: &mut HashMa\n     }\n }\n \n+// Issue 10331\n+// do not suggest a bad expansion because the compiler unrolls the first\n+// occurrence of the loop\n+pub fn issue_10331() {\n+    let mut m = HashMap::new();\n+    let mut i = 0;\n+    let mut x = 0;\n+    while !m.contains_key(&x) {\n+        m.insert(x, i);\n+        i += 1;\n+        x += 1;\n+    }\n+}\n+\n fn main() {}"}]}