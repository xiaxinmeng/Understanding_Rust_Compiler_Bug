{"sha": "1a496f33796d848609e06604445e28056954f412", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNDk2ZjMzNzk2ZDg0ODYwOWUwNjYwNDQ0NWUyODA1Njk1NGY0MTI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-12-01T14:07:38Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-12-02T18:56:34Z"}, "message": "syntax: Use `ast::MacArgs` for attributes", "tree": {"sha": "61ca861e561df083e18384de6c89504d94d9ad39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61ca861e561df083e18384de6c89504d94d9ad39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a496f33796d848609e06604445e28056954f412", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a496f33796d848609e06604445e28056954f412", "html_url": "https://github.com/rust-lang/rust/commit/1a496f33796d848609e06604445e28056954f412", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a496f33796d848609e06604445e28056954f412/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fac56717a1bce4e362d91d8f4e71d65676d49a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fac56717a1bce4e362d91d8f4e71d65676d49a3", "html_url": "https://github.com/rust-lang/rust/commit/0fac56717a1bce4e362d91d8f4e71d65676d49a3"}], "stats": {"total": 211, "additions": 102, "deletions": 109}, "files": [{"sha": "e13f6cabb5296296b8d3106e73ae17b20094fb55", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1a496f33796d848609e06604445e28056954f412/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a496f33796d848609e06604445e28056954f412/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=1a496f33796d848609e06604445e28056954f412", "patch": "@@ -1003,7 +1003,7 @@ impl<'a> LoweringContext<'a> {\n             AttrKind::Normal(ref item) => {\n                 AttrKind::Normal(AttrItem {\n                     path: item.path.clone(),\n-                    tokens: self.lower_token_stream(item.tokens.clone()),\n+                    args: self.lower_mac_args(&item.args),\n                 })\n             }\n             AttrKind::DocComment(comment) => AttrKind::DocComment(comment)\n@@ -1017,6 +1017,16 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n+    fn lower_mac_args(&mut self, args: &MacArgs) -> MacArgs {\n+        match *args {\n+            MacArgs::Empty => MacArgs::Empty,\n+            MacArgs::Delimited(dspan, delim, ref tokens) =>\n+                MacArgs::Delimited(dspan, delim, self.lower_token_stream(tokens.clone())),\n+            MacArgs::Eq(eq_span, ref tokens) =>\n+                MacArgs::Eq(eq_span, self.lower_token_stream(tokens.clone())),\n+        }\n+    }\n+\n     fn lower_token_stream(&mut self, tokens: TokenStream) -> TokenStream {\n         tokens\n             .into_trees()"}, {"sha": "1bf6e9ecbc060ec8868bd2bff9134b71c8ef8817", "filename": "src/librustc_parse/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a496f33796d848609e06604445e28056954f412/src%2Flibrustc_parse%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a496f33796d848609e06604445e28056954f412/src%2Flibrustc_parse%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fconfig.rs?ref=1a496f33796d848609e06604445e28056954f412", "patch": "@@ -101,7 +101,7 @@ impl<'a> StripUnconfigured<'a> {\n         if !attr.has_name(sym::cfg_attr) {\n             return vec![attr];\n         }\n-        if attr.get_normal_item().tokens.is_empty() {\n+        if let ast::MacArgs::Empty = attr.get_normal_item().args {\n             self.sess.span_diagnostic\n                 .struct_span_err(\n                     attr.span,"}, {"sha": "3924da5ca67d7bae85ea1227ae3469a23648721b", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a496f33796d848609e06604445e28056954f412/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a496f33796d848609e06604445e28056954f412/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=1a496f33796d848609e06604445e28056954f412", "patch": "@@ -277,7 +277,7 @@ pub fn parse_in_attr<'a, T>(\n ) -> PResult<'a, T> {\n     let mut parser = Parser::new(\n         sess,\n-        attr.get_normal_item().tokens.clone(),\n+        attr.get_normal_item().args.outer_tokens(),\n         None,\n         false,\n         false,\n@@ -409,7 +409,7 @@ fn prepend_attrs(\n             brackets.push(stream);\n         }\n \n-        brackets.push(item.tokens.clone());\n+        brackets.push(item.args.outer_tokens());\n \n         // The span we list here for `#` and for `[ ... ]` are both wrong in\n         // that it encompasses more than each token, but it hopefully is \"good"}, {"sha": "c7261404f54efda0dede24beb4e011e53703b1df", "filename": "src/librustc_parse/parser/attr.rs", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1a496f33796d848609e06604445e28056954f412/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a496f33796d848609e06604445e28056954f412/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fattr.rs?ref=1a496f33796d848609e06604445e28056954f412", "patch": "@@ -2,8 +2,7 @@ use super::{SeqSep, Parser, TokenType, PathStyle};\n use syntax::attr;\n use syntax::ast;\n use syntax::util::comments;\n-use syntax::token::{self, Nonterminal, DelimToken};\n-use syntax::tokenstream::{TokenStream, TokenTree};\n+use syntax::token::{self, Nonterminal};\n use syntax_pos::{Span, Symbol};\n use errors::PResult;\n \n@@ -181,31 +180,8 @@ impl<'a> Parser<'a> {\n             item\n         } else {\n             let path = self.parse_path(PathStyle::Mod)?;\n-            let tokens = if self.check(&token::OpenDelim(DelimToken::Paren)) ||\n-               self.check(&token::OpenDelim(DelimToken::Bracket)) ||\n-               self.check(&token::OpenDelim(DelimToken::Brace)) {\n-                   self.parse_token_tree().into()\n-            } else if self.eat(&token::Eq) {\n-                let eq = TokenTree::token(token::Eq, self.prev_span);\n-                let mut is_interpolated_expr = false;\n-                if let token::Interpolated(nt) = &self.token.kind {\n-                    if let token::NtExpr(..) = **nt {\n-                        is_interpolated_expr = true;\n-                    }\n-                }\n-                let token_tree = if is_interpolated_expr {\n-                    // We need to accept arbitrary interpolated expressions to continue\n-                    // supporting things like `doc = $expr` that work on stable.\n-                    // Non-literal interpolated expressions are rejected after expansion.\n-                    self.parse_token_tree()\n-                } else {\n-                    self.parse_unsuffixed_lit()?.token_tree()\n-                };\n-                TokenStream::new(vec![eq.into(), token_tree.into()])\n-            } else {\n-                TokenStream::default()\n-            };\n-            ast::AttrItem { path, tokens }\n+            let args = self.parse_attr_args()?;\n+            ast::AttrItem { path, args }\n         })\n     }\n "}, {"sha": "a5cacc110ce31d03a46e610ae1ece0e44fbcba8e", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a496f33796d848609e06604445e28056954f412/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a496f33796d848609e06604445e28056954f412/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=1a496f33796d848609e06604445e28056954f412", "patch": "@@ -1011,16 +1011,15 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {\n-        self.parse_mac_args_common(true)\n+        self.parse_mac_args_common(true).map(P)\n     }\n \n-    #[allow(dead_code)]\n-    fn parse_attr_args(&mut self) -> PResult<'a, P<MacArgs>> {\n+    fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {\n         self.parse_mac_args_common(false)\n     }\n \n-    fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, P<MacArgs>> {\n-        Ok(P(if self.check(&token::OpenDelim(DelimToken::Paren)) ||\n+    fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {\n+        Ok(if self.check(&token::OpenDelim(DelimToken::Paren)) ||\n                        self.check(&token::OpenDelim(DelimToken::Bracket)) ||\n                        self.check(&token::OpenDelim(DelimToken::Brace)) {\n             match self.parse_token_tree() {\n@@ -1052,7 +1051,7 @@ impl<'a> Parser<'a> {\n             }\n         } else {\n             return self.unexpected();\n-        }))\n+        })\n     }\n \n     fn parse_or_use_outer_attributes("}, {"sha": "75bb67d47bc48cfc96044828e932866802387416", "filename": "src/librustc_parse/parser/path.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a496f33796d848609e06604445e28056954f412/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a496f33796d848609e06604445e28056954f412/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpath.rs?ref=1a496f33796d848609e06604445e28056954f412", "patch": "@@ -2,6 +2,7 @@ use super::{Parser, TokenType};\n use crate::maybe_whole;\n use syntax::ast::{self, QSelf, Path, PathSegment, Ident, ParenthesizedArgs, AngleBracketedArgs};\n use syntax::ast::{AnonConst, GenericArg, AssocTyConstraint, AssocTyConstraintKind, BlockCheckMode};\n+use syntax::ast::MacArgs;\n use syntax::ThinVec;\n use syntax::token::{self, Token};\n use syntax::source_map::{Span, BytePos};\n@@ -114,9 +115,9 @@ impl<'a> Parser<'a> {\n     fn parse_path_allowing_meta(&mut self, style: PathStyle) -> PResult<'a, Path> {\n         let meta_ident = match self.token.kind {\n             token::Interpolated(ref nt) => match **nt {\n-                token::NtMeta(ref item) => match item.tokens.is_empty() {\n-                    true => Some(item.path.clone()),\n-                    false => None,\n+                token::NtMeta(ref item) => match item.args {\n+                    MacArgs::Empty => Some(item.path.clone()),\n+                    _ => None,\n                 },\n                 _ => None,\n             },"}, {"sha": "0fb348efece58e2f477e44b1e19457fa7035b264", "filename": "src/librustc_parse/validate_attr.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1a496f33796d848609e06604445e28056954f412/src%2Flibrustc_parse%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a496f33796d848609e06604445e28056954f412/src%2Flibrustc_parse%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fvalidate_attr.rs?ref=1a496f33796d848609e06604445e28056954f412", "patch": "@@ -2,11 +2,9 @@\n \n use errors::{PResult, Applicability};\n use rustc_feature::{AttributeTemplate, BUILTIN_ATTRIBUTE_MAP};\n-use syntax::ast::{self, Attribute, AttrKind, Ident, MetaItem, MetaItemKind};\n+use syntax::ast::{self, Attribute, AttrKind, Ident, MacArgs, MetaItem, MetaItemKind};\n use syntax::attr::mk_name_value_item_str;\n use syntax::early_buffered_lints::BufferedEarlyLintId;\n-use syntax::token;\n-use syntax::tokenstream::TokenTree;\n use syntax::sess::ParseSess;\n use syntax_pos::{Symbol, sym};\n \n@@ -19,11 +17,9 @@ pub fn check_meta(sess: &ParseSess, attr: &Attribute) {\n         // `rustc_dummy` doesn't have any restrictions specific to built-in attributes.\n         Some((name, _, template, _)) if name != sym::rustc_dummy =>\n             check_builtin_attribute(sess, attr, name, template),\n-        _ => if let Some(TokenTree::Token(token)) = attr.get_normal_item().tokens.trees().next() {\n-            if token == token::Eq {\n-                // All key-value attributes are restricted to meta-item syntax.\n-                parse_meta(sess, attr).map_err(|mut err| err.emit()).ok();\n-            }\n+        _ => if let MacArgs::Eq(..) = attr.get_normal_item().args {\n+            // All key-value attributes are restricted to meta-item syntax.\n+            parse_meta(sess, attr).map_err(|mut err| err.emit()).ok();\n         }\n     }\n }"}, {"sha": "045b66b1734e3fd7e230157533ec7112e42f9fc3", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a496f33796d848609e06604445e28056954f412/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a496f33796d848609e06604445e28056954f412/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1a496f33796d848609e06604445e28056954f412", "patch": "@@ -1389,7 +1389,7 @@ impl Mac {\n }\n \n /// Arguments passed to an attribute or a function-like macro.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum MacArgs {\n     /// No arguments - `#[attr]`.\n     Empty,\n@@ -1427,7 +1427,7 @@ impl MacArgs {\n     }\n \n     /// Tokens together with the delimiters or `=`.\n-    /// Use of this functions generally means that something suspicious or hacky is happening.\n+    /// Use of this functions generally means that something suboptimal or hacky is happening.\n     pub fn outer_tokens(&self) -> TokenStream {\n         match *self {\n             MacArgs::Empty => TokenStream::default(),\n@@ -1445,7 +1445,7 @@ impl MacArgs {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum MacDelimiter {\n     Parenthesis,\n     Bracket,\n@@ -2384,7 +2384,7 @@ impl rustc_serialize::Decodable for AttrId {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct AttrItem {\n     pub path: Path,\n-    pub tokens: TokenStream,\n+    pub args: MacArgs,\n }\n \n /// Metadata associated with an item."}, {"sha": "080c7209d6bb2400899753c5c646347a34885cc6", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1a496f33796d848609e06604445e28056954f412/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a496f33796d848609e06604445e28056954f412/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=1a496f33796d848609e06604445e28056954f412", "patch": "@@ -10,7 +10,7 @@ pub use crate::ast::Attribute;\n \n use crate::ast;\n use crate::ast::{AttrItem, AttrId, AttrKind, AttrStyle, Name, Ident, Path, PathSegment};\n-use crate::ast::{MetaItem, MetaItemKind, NestedMetaItem};\n+use crate::ast::{MacArgs, MacDelimiter, MetaItem, MetaItemKind, NestedMetaItem};\n use crate::ast::{Lit, LitKind, Expr, Item, Local, Stmt, StmtKind, GenericParam};\n use crate::mut_visit::visit_clobber;\n use crate::source_map::{BytePos, Spanned};\n@@ -198,7 +198,7 @@ impl Attribute {\n \n     pub fn is_word(&self) -> bool {\n         if let AttrKind::Normal(item) = &self.kind {\n-            item.tokens.is_empty()\n+            matches!(item.args, MacArgs::Empty)\n         } else {\n             false\n         }\n@@ -278,7 +278,7 @@ impl MetaItem {\n \n impl AttrItem {\n     pub fn meta(&self, span: Span) -> Option<MetaItem> {\n-        let mut tokens = self.tokens.trees().peekable();\n+        let mut tokens = self.args.outer_tokens().trees().peekable();\n         Some(MetaItem {\n             path: self.path.clone(),\n             kind: if let Some(kind) = MetaItemKind::from_tokens(&mut tokens) {\n@@ -362,8 +362,8 @@ crate fn mk_attr_id() -> AttrId {\n     AttrId(id)\n }\n \n-pub fn mk_attr(style: AttrStyle, path: Path, tokens: TokenStream, span: Span) -> Attribute {\n-    mk_attr_from_item(style, AttrItem { path, tokens }, span)\n+pub fn mk_attr(style: AttrStyle, path: Path, args: MacArgs, span: Span) -> Attribute {\n+    mk_attr_from_item(style, AttrItem { path, args }, span)\n }\n \n pub fn mk_attr_from_item(style: AttrStyle, item: AttrItem, span: Span) -> Attribute {\n@@ -377,12 +377,12 @@ pub fn mk_attr_from_item(style: AttrStyle, item: AttrItem, span: Span) -> Attrib\n \n /// Returns an inner attribute with the given value and span.\n pub fn mk_attr_inner(item: MetaItem) -> Attribute {\n-    mk_attr(AttrStyle::Inner, item.path, item.kind.tokens(item.span), item.span)\n+    mk_attr(AttrStyle::Inner, item.path, item.kind.mac_args(item.span), item.span)\n }\n \n /// Returns an outer attribute with the given value and span.\n pub fn mk_attr_outer(item: MetaItem) -> Attribute {\n-    mk_attr(AttrStyle::Outer, item.path, item.kind.tokens(item.span), item.span)\n+    mk_attr(AttrStyle::Outer, item.path, item.kind.mac_args(item.span), item.span)\n }\n \n pub fn mk_doc_comment(style: AttrStyle, comment: Symbol, span: Span) -> Attribute {\n@@ -520,7 +520,26 @@ impl MetaItem {\n }\n \n impl MetaItemKind {\n-    pub fn token_trees_and_joints(&self, span: Span) -> Vec<TreeAndJoint> {\n+    pub fn mac_args(&self, span: Span) -> MacArgs {\n+        match self {\n+            MetaItemKind::Word => MacArgs::Empty,\n+            MetaItemKind::NameValue(lit) => MacArgs::Eq(span, lit.token_tree().into()),\n+            MetaItemKind::List(list) => {\n+                let mut tts = Vec::new();\n+                for (i, item) in list.iter().enumerate() {\n+                    if i > 0 {\n+                        tts.push(TokenTree::token(token::Comma, span).into());\n+                    }\n+                    tts.extend(item.token_trees_and_joints())\n+                }\n+                MacArgs::Delimited(\n+                    DelimSpan::from_single(span), MacDelimiter::Parenthesis, TokenStream::new(tts)\n+                )\n+            }\n+        }\n+    }\n+\n+    fn token_trees_and_joints(&self, span: Span) -> Vec<TreeAndJoint> {\n         match *self {\n             MetaItemKind::Word => vec![],\n             MetaItemKind::NameValue(ref lit) => {\n@@ -548,13 +567,6 @@ impl MetaItemKind {\n         }\n     }\n \n-    // Premature conversions of `TokenTree`s to `TokenStream`s can hurt\n-    // performance. Do not use this function if `token_trees_and_joints()` can\n-    // be used instead.\n-    pub fn tokens(&self, span: Span) -> TokenStream {\n-        TokenStream::new(self.token_trees_and_joints(span))\n-    }\n-\n     fn from_tokens<I>(tokens: &mut iter::Peekable<I>) -> Option<MetaItemKind>\n         where I: Iterator<Item = TokenTree>,\n     {"}, {"sha": "8d345ee883df83fd78247516e0fcc7888d29f86f", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a496f33796d848609e06604445e28056954f412/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a496f33796d848609e06604445e28056954f412/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=1a496f33796d848609e06604445e28056954f412", "patch": "@@ -570,9 +570,9 @@ pub fn noop_visit_local<T: MutVisitor>(local: &mut P<Local>, vis: &mut T) {\n pub fn noop_visit_attribute<T: MutVisitor>(attr: &mut Attribute, vis: &mut T) {\n     let Attribute { kind, id: _, style: _, span } = attr;\n     match kind {\n-        AttrKind::Normal(AttrItem { path, tokens }) => {\n+        AttrKind::Normal(AttrItem { path, args }) => {\n             vis.visit_path(path);\n-            vis.visit_tts(tokens);\n+            visit_mac_args(args, vis);\n         }\n         AttrKind::DocComment(_) => {}\n     }\n@@ -701,9 +701,9 @@ pub fn noop_visit_interpolated<T: MutVisitor>(nt: &mut token::Nonterminal, vis:\n         token::NtIdent(ident, _is_raw) => vis.visit_ident(ident),\n         token::NtLifetime(ident) => vis.visit_ident(ident),\n         token::NtLiteral(expr) => vis.visit_expr(expr),\n-        token::NtMeta(AttrItem { path, tokens }) => {\n+        token::NtMeta(AttrItem { path, args }) => {\n             vis.visit_path(path);\n-            vis.visit_tts(tokens);\n+            visit_mac_args(args, vis);\n         }\n         token::NtPath(path) => vis.visit_path(path),\n         token::NtTT(tt) => vis.visit_tt(tt),"}, {"sha": "5ffe593a8b5c0022bedeb7e576c2c7a555a093e0", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1a496f33796d848609e06604445e28056954f412/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a496f33796d848609e06604445e28056954f412/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=1a496f33796d848609e06604445e28056954f412", "patch": "@@ -1,6 +1,6 @@\n use crate::ast::{self, BlockCheckMode, PatKind, RangeEnd, RangeSyntax};\n use crate::ast::{SelfKind, GenericBound, TraitBoundModifier};\n-use crate::ast::{Attribute, GenericArg};\n+use crate::ast::{Attribute, GenericArg, MacArgs};\n use crate::util::parser::{self, AssocOp, Fixity};\n use crate::util::comments;\n use crate::attr;\n@@ -639,17 +639,22 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n \n     fn print_attr_item(&mut self, item: &ast::AttrItem, span: Span) {\n         self.ibox(0);\n-        match item.tokens.trees().next() {\n-            Some(TokenTree::Delimited(_, delim, tts)) => {\n-                self.print_mac_common(\n-                    Some(MacHeader::Path(&item.path)), false, None, delim, tts, true, span\n-                );\n-            }\n-            tree => {\n+        match &item.args {\n+            MacArgs::Delimited(_, delim, tokens) => self.print_mac_common(\n+                Some(MacHeader::Path(&item.path)),\n+                false,\n+                None,\n+                delim.to_token(),\n+                tokens.clone(),\n+                true,\n+                span,\n+            ),\n+            MacArgs::Empty | MacArgs::Eq(..) => {\n                 self.print_path(&item.path, false, 0);\n-                if tree.is_some() {\n+                if let MacArgs::Eq(_, tokens) = &item.args {\n                     self.space();\n-                    self.print_tts(item.tokens.clone(), true);\n+                    self.word_space(\"=\");\n+                    self.print_tts(tokens.clone(), true);\n                 }\n             }\n         }"}, {"sha": "4ee09b4b87afac146575b0d9ee10bb7f4fda96a5", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1a496f33796d848609e06604445e28056954f412/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a496f33796d848609e06604445e28056954f412/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=1a496f33796d848609e06604445e28056954f412", "patch": "@@ -841,11 +841,19 @@ pub fn walk_vis<'a, V: Visitor<'a>>(visitor: &mut V, vis: &'a Visibility) {\n \n pub fn walk_attribute<'a, V: Visitor<'a>>(visitor: &mut V, attr: &'a Attribute) {\n     match attr.kind {\n-        AttrKind::Normal(ref item) => visitor.visit_tts(item.tokens.clone()),\n+        AttrKind::Normal(ref item) => walk_mac_args(visitor, &item.args),\n         AttrKind::DocComment(_) => {}\n     }\n }\n \n+pub fn walk_mac_args<'a, V: Visitor<'a>>(visitor: &mut V, args: &'a MacArgs) {\n+    match args {\n+        MacArgs::Empty => {}\n+        MacArgs::Delimited(_dspan, _delim, tokens) => visitor.visit_tts(tokens.clone()),\n+        MacArgs::Eq(_eq_span, tokens) => visitor.visit_tts(tokens.clone()),\n+    }\n+}\n+\n pub fn walk_tt<'a, V: Visitor<'a>>(visitor: &mut V, tt: TokenTree) {\n     match tt {\n         TokenTree::Token(token) => visitor.visit_token(token),"}, {"sha": "9bfedb3b6174edf5eca8b32bb38dfa50a5e75af1", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1a496f33796d848609e06604445e28056954f412/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a496f33796d848609e06604445e28056954f412/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=1a496f33796d848609e06604445e28056954f412", "patch": "@@ -11,7 +11,7 @@ use rustc_parse::DirectoryOwnership;\n use rustc_parse::parser::Parser;\n use rustc_parse::validate_attr;\n use syntax::ast::{self, AttrItem, Block, Ident, LitKind, NodeId, PatKind, Path};\n-use syntax::ast::{MacStmtStyle, StmtKind, ItemKind};\n+use syntax::ast::{MacArgs, MacStmtStyle, StmtKind, ItemKind};\n use syntax::attr::{self, HasAttrs, is_builtin_attr};\n use syntax::source_map::respan;\n use syntax::feature_gate::{self, feature_err};\n@@ -642,8 +642,11 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                             => panic!(\"unexpected annotatable\"),\n                     })), DUMMY_SP).into();\n                     let item = attr.unwrap_normal_item();\n-                    let input = self.extract_proc_macro_attr_input(item.tokens, span);\n-                    let tok_result = expander.expand(self.cx, span, input, item_tok);\n+                    if let MacArgs::Eq(..) = item.args {\n+                        self.cx.span_err(span, \"key-value macro attributes are not supported\");\n+                    }\n+                    let tok_result =\n+                        expander.expand(self.cx, span, item.args.inner_tokens(), item_tok);\n                     self.parse_ast_fragment(tok_result, fragment_kind, &item.path, span)\n                 }\n                 SyntaxExtensionKind::LegacyAttr(expander) => {\n@@ -687,23 +690,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         }\n     }\n \n-    fn extract_proc_macro_attr_input(&self, tokens: TokenStream, span: Span) -> TokenStream {\n-        let mut trees = tokens.trees();\n-        match trees.next() {\n-            Some(TokenTree::Delimited(_, _, tts)) => {\n-                if trees.next().is_none() {\n-                    return tts.into()\n-                }\n-            }\n-            Some(TokenTree::Token(..)) => {}\n-            None => return TokenStream::default(),\n-        }\n-        self.cx.span_err(span, \"custom attribute invocations must be \\\n-            of the form `#[foo]` or `#[foo(..)]`, the macro name must only be \\\n-            followed by a delimiter token\");\n-        TokenStream::default()\n-    }\n-\n     fn gate_proc_macro_attr_item(&self, span: Span, item: &Annotatable) {\n         let kind = match item {\n             Annotatable::Item(item) => match &item.kind {\n@@ -1560,7 +1546,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             let meta = attr::mk_list_item(Ident::with_dummy_span(sym::doc), items);\n             *at = attr::Attribute {\n                 kind: ast::AttrKind::Normal(\n-                    AttrItem { path: meta.path, tokens: meta.kind.tokens(meta.span) },\n+                    AttrItem { path: meta.path, args: meta.kind.mac_args(meta.span) },\n                 ),\n                 span: at.span,\n                 id: at.id,"}, {"sha": "8e56e2bb00b4b19b0b4be46370a197e5bdc23b6f", "filename": "src/libsyntax_expand/proc_macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a496f33796d848609e06604445e28056954f412/src%2Flibsyntax_expand%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a496f33796d848609e06604445e28056954f412/src%2Flibsyntax_expand%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fproc_macro.rs?ref=1a496f33796d848609e06604445e28056954f412", "patch": "@@ -1,7 +1,7 @@\n use crate::base::{self, *};\n use crate::proc_macro_server;\n \n-use syntax::ast::{self, ItemKind};\n+use syntax::ast::{self, ItemKind, MacArgs};\n use syntax::errors::{Applicability, FatalError};\n use syntax::symbol::sym;\n use syntax::token;\n@@ -183,7 +183,7 @@ crate fn collect_derives(cx: &mut ExtCtxt<'_>, attrs: &mut Vec<ast::Attribute>)\n         }\n \n         let parse_derive_paths = |attr: &ast::Attribute| {\n-            if attr.get_normal_item().tokens.is_empty() {\n+            if let MacArgs::Empty = attr.get_normal_item().args {\n                 return Ok(Vec::new());\n             }\n             rustc_parse::parse_in_attr(cx.parse_sess, attr, |p| p.parse_derive_paths())"}, {"sha": "98cf8a34742e57c140f2f330587b8a9c6fabf198", "filename": "src/libsyntax_ext/cmdline_attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a496f33796d848609e06604445e28056954f412/src%2Flibsyntax_ext%2Fcmdline_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a496f33796d848609e06604445e28056954f412/src%2Flibsyntax_ext%2Fcmdline_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcmdline_attrs.rs?ref=1a496f33796d848609e06604445e28056954f412", "patch": "@@ -16,15 +16,15 @@ pub fn inject(mut krate: ast::Crate, parse_sess: &ParseSess, attrs: &[String]) -\n         );\n \n         let start_span = parser.token.span;\n-        let AttrItem { path, tokens } = panictry!(parser.parse_attr_item());\n+        let AttrItem { path, args } = panictry!(parser.parse_attr_item());\n         let end_span = parser.token.span;\n         if parser.token != token::Eof {\n             parse_sess.span_diagnostic\n                 .span_err(start_span.to(end_span), \"invalid crate attribute\");\n             continue;\n         }\n \n-        krate.attrs.push(mk_attr(AttrStyle::Inner, path, tokens, start_span.to(end_span)));\n+        krate.attrs.push(mk_attr(AttrStyle::Inner, path, args, start_span.to(end_span)));\n     }\n \n     krate"}, {"sha": "591c1e039bd7579b8406ed0bf2f5bba7aafb1eea", "filename": "src/test/ui/proc-macro/proc-macro-gates.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a496f33796d848609e06604445e28056954f412/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a496f33796d848609e06604445e28056954f412/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.rs?ref=1a496f33796d848609e06604445e28056954f412", "patch": "@@ -18,7 +18,7 @@ mod _test2_inner {\n           //~| ERROR: non-builtin inner attributes are unstable\n }\n \n-#[empty_attr = \"y\"] //~ ERROR: must only be followed by a delimiter token\n+#[empty_attr = \"y\"] //~ ERROR: key-value macro attributes are not supported\n fn _test3() {}\n \n fn attrs() {"}, {"sha": "e939434243b6a1d6c31c1feec1e440cbe614ff49", "filename": "src/test/ui/proc-macro/proc-macro-gates.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a496f33796d848609e06604445e28056954f412/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a496f33796d848609e06604445e28056954f412/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.stderr?ref=1a496f33796d848609e06604445e28056954f412", "patch": "@@ -34,7 +34,7 @@ LL |     #![empty_attr]\n    = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n-error: custom attribute invocations must be of the form `#[foo]` or `#[foo(..)]`, the macro name must only be followed by a delimiter token\n+error: key-value macro attributes are not supported\n   --> $DIR/proc-macro-gates.rs:21:1\n    |\n LL | #[empty_attr = \"y\"]"}]}