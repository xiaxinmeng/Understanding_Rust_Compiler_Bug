{"sha": "b183ef2068cf18ff43e119cfbbdafb14268dddb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxODNlZjIwNjhjZjE4ZmY0M2UxMTljZmJiZGFmYjE0MjY4ZGRkYjE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-16T00:10:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-16T00:10:15Z"}, "message": "Rollup merge of #77648 - fusion-engineering-forks:static-mutex, r=dtolnay\n\nStatic mutex is static\n\nStaticMutex is only ever used with as a static (as the name already suggests). So it doesn't have to be generic over a lifetime, but can simply assume 'static.\n\nThis 'static lifetime guarantees the object is never moved, so this is no longer a manually checked requirement for unsafe calls to lock().\n\n@rustbot modify labels: +T-libs +A-concurrency +C-cleanup", "tree": {"sha": "510f93259fbc9e909da03da847479e0de2a31c3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/510f93259fbc9e909da03da847479e0de2a31c3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b183ef2068cf18ff43e119cfbbdafb14268dddb1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfiOToCRBK7hj4Ov3rIwAAdHIIAIjz/knb7yYAq2/YJcLZyuxM\nSWxb+fGJeaRNjMGlQBy6a0LCeAfIGSQ8/XWsLVWeqOPNabbNS/xXR8urLNtUacpM\nIkB7atRErOO2LpogHDOfKdkNHEwM+/gcALFFDEVopsq5Hr0HD2nV/6rUDTDvXmVA\nwNyyZTsON+IsvpQj0+KxpW3eVN9UAwmXwGQplTQ0m2kjlcGFq03Be/tEFiePpwoz\njmKkHXJe31wZzQJI4SCqQ8nZ07sylgvARRFH5UQNSNhOpzcn7tXwTmgAlCNwLAl3\nKLl8MJXVKv73Ud0mCJwmQkSf2QbDvQ5hDxkXqaZapz8RIqsSYOex6s++VBF8ULY=\n=rMKY\n-----END PGP SIGNATURE-----\n", "payload": "tree 510f93259fbc9e909da03da847479e0de2a31c3f\nparent 085399f48155cff204aa913343651208131c7398\nparent 44a2af32ccc4c71c5e8bc9cb79c9042c6e608ce8\nauthor Dylan DPC <dylan.dpc@gmail.com> 1602807015 +0200\ncommitter GitHub <noreply@github.com> 1602807015 +0200\n\nRollup merge of #77648 - fusion-engineering-forks:static-mutex, r=dtolnay\n\nStatic mutex is static\n\nStaticMutex is only ever used with as a static (as the name already suggests). So it doesn't have to be generic over a lifetime, but can simply assume 'static.\n\nThis 'static lifetime guarantees the object is never moved, so this is no longer a manually checked requirement for unsafe calls to lock().\n\n@rustbot modify labels: +T-libs +A-concurrency +C-cleanup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b183ef2068cf18ff43e119cfbbdafb14268dddb1", "html_url": "https://github.com/rust-lang/rust/commit/b183ef2068cf18ff43e119cfbbdafb14268dddb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b183ef2068cf18ff43e119cfbbdafb14268dddb1/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "085399f48155cff204aa913343651208131c7398", "url": "https://api.github.com/repos/rust-lang/rust/commits/085399f48155cff204aa913343651208131c7398", "html_url": "https://github.com/rust-lang/rust/commit/085399f48155cff204aa913343651208131c7398"}, {"sha": "44a2af32ccc4c71c5e8bc9cb79c9042c6e608ce8", "url": "https://api.github.com/repos/rust-lang/rust/commits/44a2af32ccc4c71c5e8bc9cb79c9042c6e608ce8", "html_url": "https://github.com/rust-lang/rust/commit/44a2af32ccc4c71c5e8bc9cb79c9042c6e608ce8"}], "stats": {"total": 22, "additions": 8, "deletions": 14}, "files": [{"sha": "2392238d0a1943a9cc57b860465fab6d6d642b69", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b183ef2068cf18ff43e119cfbbdafb14268dddb1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b183ef2068cf18ff43e119cfbbdafb14268dddb1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=b183ef2068cf18ff43e119cfbbdafb14268dddb1", "patch": "@@ -470,7 +470,7 @@ pub unsafe fn environ() -> *mut *const *const c_char {\n     &mut environ\n }\n \n-pub unsafe fn env_lock() -> StaticMutexGuard<'static> {\n+pub unsafe fn env_lock() -> StaticMutexGuard {\n     // It is UB to attempt to acquire this mutex reentrantly!\n     static ENV_LOCK: StaticMutex = StaticMutex::new();\n     ENV_LOCK.lock()"}, {"sha": "6eaec6f1e50df3054c6edf27313940285f6e9eca", "filename": "library/std/src/sys/vxworks/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b183ef2068cf18ff43e119cfbbdafb14268dddb1/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b183ef2068cf18ff43e119cfbbdafb14268dddb1/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fos.rs?ref=b183ef2068cf18ff43e119cfbbdafb14268dddb1", "patch": "@@ -212,7 +212,7 @@ pub unsafe fn environ() -> *mut *const *const c_char {\n     &mut environ\n }\n \n-pub unsafe fn env_lock() -> StaticMutexGuard<'static> {\n+pub unsafe fn env_lock() -> StaticMutexGuard {\n     // It is UB to attempt to acquire this mutex reentrantly!\n     static ENV_LOCK: StaticMutex = StaticMutex::new();\n     ENV_LOCK.lock()"}, {"sha": "f3e7efb955a2fd65a9ba1906e53e848f10c9df4b", "filename": "library/std/src/sys_common/mutex.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b183ef2068cf18ff43e119cfbbdafb14268dddb1/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b183ef2068cf18ff43e119cfbbdafb14268dddb1/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs?ref=b183ef2068cf18ff43e119cfbbdafb14268dddb1", "patch": "@@ -3,8 +3,7 @@ use crate::sys::mutex as imp;\n /// An OS-based mutual exclusion lock, meant for use in static variables.\n ///\n /// This mutex has a const constructor ([`StaticMutex::new`]), does not\n-/// implement `Drop` to cleanup resources, and causes UB when moved or used\n-/// reentrantly.\n+/// implement `Drop` to cleanup resources, and causes UB when used reentrantly.\n ///\n /// This mutex does not implement poisoning.\n ///\n@@ -16,31 +15,26 @@ unsafe impl Sync for StaticMutex {}\n \n impl StaticMutex {\n     /// Creates a new mutex for use.\n-    ///\n-    /// Behavior is undefined if the mutex is moved after it is\n-    /// first used with any of the functions below.\n-    /// Also, the behavior is undefined if this mutex is ever used reentrantly,\n-    /// i.e., `lock` is called by the thread currently holding the lock.\n     pub const fn new() -> Self {\n         Self(imp::Mutex::new())\n     }\n \n     /// Calls raw_lock() and then returns an RAII guard to guarantee the mutex\n     /// will be unlocked.\n     ///\n-    /// It is undefined behaviour to call this function while locked, or if the\n-    /// mutex has been moved since the last time this was called.\n+    /// It is undefined behaviour to call this function while locked by the\n+    /// same thread.\n     #[inline]\n-    pub unsafe fn lock(&self) -> StaticMutexGuard<'_> {\n+    pub unsafe fn lock(&'static self) -> StaticMutexGuard {\n         self.0.lock();\n         StaticMutexGuard(&self.0)\n     }\n }\n \n #[must_use]\n-pub struct StaticMutexGuard<'a>(&'a imp::Mutex);\n+pub struct StaticMutexGuard(&'static imp::Mutex);\n \n-impl Drop for StaticMutexGuard<'_> {\n+impl Drop for StaticMutexGuard {\n     #[inline]\n     fn drop(&mut self) {\n         unsafe {"}]}