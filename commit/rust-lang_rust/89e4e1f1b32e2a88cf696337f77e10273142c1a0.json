{"sha": "89e4e1f1b32e2a88cf696337f77e10273142c1a0", "node_id": "C_kwDOAAsO6NoAKDg5ZTRlMWYxYjMyZTJhODhjZjY5NjMzN2Y3N2UxMDI3MzE0MmMxYTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-22T15:18:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-22T15:18:35Z"}, "message": "Auto merge of #102139 - Dylan-DPC:rollup-ljlipt8, r=Dylan-DPC\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #101598 (Update rustc's information on Android's sanitizers)\n - #102036 (Remove use of `io::ErrorKind::Other` in std)\n - #102037 (Make cycle errors recoverable)\n - #102069 (Skip `Equate` relation in `handle_opaque_type`)\n - #102076 (rustc_transmute: fix big-endian discriminants)\n - #102107 (Add missing space between notable trait tooltip and where clause)\n - #102119 (Fix a typo \u201cpararmeter\u201d in error message)\n - #102131 (Added which number is computed in compute_float.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "0ff27603efa5eb928260cbd699d1da6d520fd7cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ff27603efa5eb928260cbd699d1da6d520fd7cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89e4e1f1b32e2a88cf696337f77e10273142c1a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89e4e1f1b32e2a88cf696337f77e10273142c1a0", "html_url": "https://github.com/rust-lang/rust/commit/89e4e1f1b32e2a88cf696337f77e10273142c1a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89e4e1f1b32e2a88cf696337f77e10273142c1a0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ab71ab59fd17a1c51d23b68eced935b92431b70", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ab71ab59fd17a1c51d23b68eced935b92431b70", "html_url": "https://github.com/rust-lang/rust/commit/8ab71ab59fd17a1c51d23b68eced935b92431b70"}, {"sha": "33b7ff128fcae9fd06beef64926ce59e47b10229", "url": "https://api.github.com/repos/rust-lang/rust/commits/33b7ff128fcae9fd06beef64926ce59e47b10229", "html_url": "https://github.com/rust-lang/rust/commit/33b7ff128fcae9fd06beef64926ce59e47b10229"}], "stats": {"total": 189, "additions": 126, "deletions": 63}, "files": [{"sha": "bb57fca74a21ecf06172febdaa438322c272bc21", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=89e4e1f1b32e2a88cf696337f77e10273142c1a0", "patch": "@@ -1090,11 +1090,12 @@ fn add_sanitizer_libraries(sess: &Session, crate_type: CrateType, linker: &mut d\n     // both executables and dynamic shared objects. Everywhere else the runtimes\n     // are currently distributed as static libraries which should be linked to\n     // executables only.\n-    let needs_runtime = match crate_type {\n-        CrateType::Executable => true,\n-        CrateType::Dylib | CrateType::Cdylib | CrateType::ProcMacro => sess.target.is_like_osx,\n-        CrateType::Rlib | CrateType::Staticlib => false,\n-    };\n+    let needs_runtime = !sess.target.is_like_android\n+        && match crate_type {\n+            CrateType::Executable => true,\n+            CrateType::Dylib | CrateType::Cdylib | CrateType::ProcMacro => sess.target.is_like_osx,\n+            CrateType::Rlib | CrateType::Staticlib => false,\n+        };\n \n     if !needs_runtime {\n         return;"}, {"sha": "10e673cd9297bda67fddcec349af9f5657a7eaf5", "filename": "compiler/rustc_data_structures/src/obligation_forest/mod.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs?ref=89e4e1f1b32e2a88cf696337f77e10273142c1a0", "patch": "@@ -95,6 +95,10 @@ pub trait ForestObligation: Clone + Debug {\n pub trait ObligationProcessor {\n     type Obligation: ForestObligation;\n     type Error: Debug;\n+    type OUT: OutcomeTrait<\n+        Obligation = Self::Obligation,\n+        Error = Error<Self::Obligation, Self::Error>,\n+    >;\n \n     fn needs_process_obligation(&self, obligation: &Self::Obligation) -> bool;\n \n@@ -111,7 +115,11 @@ pub trait ObligationProcessor {\n     /// In other words, if we had O1 which required O2 which required\n     /// O3 which required O1, we would give an iterator yielding O1,\n     /// O2, O3 (O1 is not yielded twice).\n-    fn process_backedge<'c, I>(&mut self, cycle: I, _marker: PhantomData<&'c Self::Obligation>)\n+    fn process_backedge<'c, I>(\n+        &mut self,\n+        cycle: I,\n+        _marker: PhantomData<&'c Self::Obligation>,\n+    ) -> Result<(), Self::Error>\n     where\n         I: Clone + Iterator<Item = &'c Self::Obligation>;\n }\n@@ -402,12 +410,11 @@ impl<O: ForestObligation> ObligationForest<O> {\n \n     /// Performs a fixpoint computation over the obligation list.\n     #[inline(never)]\n-    pub fn process_obligations<P, OUT>(&mut self, processor: &mut P) -> OUT\n+    pub fn process_obligations<P>(&mut self, processor: &mut P) -> P::OUT\n     where\n         P: ObligationProcessor<Obligation = O>,\n-        OUT: OutcomeTrait<Obligation = O, Error = Error<O, P::Error>>,\n     {\n-        let mut outcome = OUT::new();\n+        let mut outcome = P::OUT::new();\n \n         // Fixpoint computation: we repeat until the inner loop stalls.\n         loop {\n@@ -473,7 +480,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n             }\n \n             self.mark_successes();\n-            self.process_cycles(processor);\n+            self.process_cycles(processor, &mut outcome);\n             self.compress(|obl| outcome.record_completed(obl));\n         }\n \n@@ -558,7 +565,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n \n     /// Report cycles between all `Success` nodes, and convert all `Success`\n     /// nodes to `Done`. This must be called after `mark_successes`.\n-    fn process_cycles<P>(&mut self, processor: &mut P)\n+    fn process_cycles<P>(&mut self, processor: &mut P, outcome: &mut P::OUT)\n     where\n         P: ObligationProcessor<Obligation = O>,\n     {\n@@ -568,16 +575,21 @@ impl<O: ForestObligation> ObligationForest<O> {\n             // to handle the no-op cases immediately to avoid the cost of the\n             // function call.\n             if node.state.get() == NodeState::Success {\n-                self.find_cycles_from_node(&mut stack, processor, index);\n+                self.find_cycles_from_node(&mut stack, processor, index, outcome);\n             }\n         }\n \n         debug_assert!(stack.is_empty());\n         self.reused_node_vec = stack;\n     }\n \n-    fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)\n-    where\n+    fn find_cycles_from_node<P>(\n+        &self,\n+        stack: &mut Vec<usize>,\n+        processor: &mut P,\n+        index: usize,\n+        outcome: &mut P::OUT,\n+    ) where\n         P: ObligationProcessor<Obligation = O>,\n     {\n         let node = &self.nodes[index];\n@@ -586,17 +598,20 @@ impl<O: ForestObligation> ObligationForest<O> {\n                 None => {\n                     stack.push(index);\n                     for &dep_index in node.dependents.iter() {\n-                        self.find_cycles_from_node(stack, processor, dep_index);\n+                        self.find_cycles_from_node(stack, processor, dep_index, outcome);\n                     }\n                     stack.pop();\n                     node.state.set(NodeState::Done);\n                 }\n                 Some(rpos) => {\n                     // Cycle detected.\n-                    processor.process_backedge(\n+                    let result = processor.process_backedge(\n                         stack[rpos..].iter().map(|&i| &self.nodes[i].obligation),\n                         PhantomData,\n                     );\n+                    if let Err(err) = result {\n+                        outcome.record_error(Error { error: err, backtrace: self.error_at(index) });\n+                    }\n                 }\n             }\n         }"}, {"sha": "bc252f772a1683afe5df1a9a7febe086623727b6", "filename": "compiler/rustc_data_structures/src/obligation_forest/tests.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Ftests.rs?ref=89e4e1f1b32e2a88cf696337f77e10273142c1a0", "patch": "@@ -64,6 +64,7 @@ where\n {\n     type Obligation = O;\n     type Error = E;\n+    type OUT = TestOutcome<O, E>;\n \n     fn needs_process_obligation(&self, _obligation: &Self::Obligation) -> bool {\n         true\n@@ -76,10 +77,15 @@ where\n         (self.process_obligation)(obligation)\n     }\n \n-    fn process_backedge<'c, I>(&mut self, _cycle: I, _marker: PhantomData<&'c Self::Obligation>)\n+    fn process_backedge<'c, I>(\n+        &mut self,\n+        _cycle: I,\n+        _marker: PhantomData<&'c Self::Obligation>,\n+    ) -> Result<(), Self::Error>\n     where\n         I: Clone + Iterator<Item = &'c Self::Obligation>,\n     {\n+        Ok(())\n     }\n }\n "}, {"sha": "76c340a5efae04fa233283fd3851ca78178b4df7", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=89e4e1f1b32e2a88cf696337f77e10273142c1a0", "patch": "@@ -7,6 +7,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::vec_map::VecMap;\n use rustc_hir as hir;\n use rustc_middle::traits::ObligationCause;\n+use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::GenericArgKind;\n use rustc_middle::ty::{\n@@ -176,16 +177,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         } else if let Some(res) = process(b, a) {\n             res\n         } else {\n-            // Rerun equality check, but this time error out due to\n-            // different types.\n-            match self.at(cause, param_env).define_opaque_types(false).eq(a, b) {\n-                Ok(_) => span_bug!(\n-                    cause.span,\n-                    \"opaque types are never equal to anything but themselves: {:#?}\",\n-                    (a.kind(), b.kind())\n-                ),\n-                Err(e) => Err(e),\n-            }\n+            let (a, b) = self.resolve_vars_if_possible((a, b));\n+            Err(TypeError::Sorts(ExpectedFound::new(true, a, b)))\n         }\n     }\n "}, {"sha": "c8600ded987e5d4d921c32a20a3a507d3781c673", "filename": "compiler/rustc_infer/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs?ref=89e4e1f1b32e2a88cf696337f77e10273142c1a0", "patch": "@@ -113,6 +113,8 @@ pub struct FulfillmentError<'tcx> {\n \n #[derive(Clone)]\n pub enum FulfillmentErrorCode<'tcx> {\n+    /// Inherently impossible to fulfill; this trait is implemented if and only if it is already implemented.\n+    CodeCycle(Vec<Obligation<'tcx, ty::Predicate<'tcx>>>),\n     CodeSelectionError(SelectionError<'tcx>),\n     CodeProjectionError(MismatchedProjectionTypes<'tcx>),\n     CodeSubtypeError(ExpectedFound<Ty<'tcx>>, TypeError<'tcx>), // always comes from a SubtypePredicate"}, {"sha": "1c6ab6a082b99ce7279d425bedb0fc04f984a2c5", "filename": "compiler/rustc_infer/src/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=89e4e1f1b32e2a88cf696337f77e10273142c1a0", "patch": "@@ -47,6 +47,7 @@ impl<'tcx> fmt::Debug for traits::FulfillmentErrorCode<'tcx> {\n                 write!(f, \"CodeConstEquateError({:?}, {:?})\", a, b)\n             }\n             super::CodeAmbiguity => write!(f, \"Ambiguity\"),\n+            super::CodeCycle(ref cycle) => write!(f, \"Cycle({:?})\", cycle),\n         }\n     }\n }"}, {"sha": "3c276a9ada97b7f253a412ec0e284e5f31a90af2", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=89e4e1f1b32e2a88cf696337f77e10273142c1a0", "patch": "@@ -173,7 +173,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 span,\n                 span_label: match res {\n                     Res::Def(kind, def_id) if kind == DefKind::TyParam => {\n-                        self.def_span(def_id).map(|span| (span, \"found this type pararmeter\"))\n+                        self.def_span(def_id).map(|span| (span, \"found this type parameter\"))\n                     }\n                     _ => None,\n                 },"}, {"sha": "9c1df1a06778e9fd12eb2f0d900d032ad89c954f", "filename": "compiler/rustc_target/src/spec/android_base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs?ref=89e4e1f1b32e2a88cf696337f77e10273142c1a0", "patch": "@@ -1,10 +1,12 @@\n-use crate::spec::TargetOptions;\n+use crate::spec::{SanitizerSet, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let mut base = super::linux_base::opts();\n     base.os = \"android\".into();\n+    base.is_like_android = true;\n     base.default_dwarf_version = 2;\n     base.has_thread_local = false;\n+    base.supported_sanitizers = SanitizerSet::ADDRESS;\n     // This is for backward compatibility, see https://github.com/rust-lang/rust/issues/49867\n     // for context. (At that time, there was no `-C force-unwind-tables`, so the only solution\n     // was to always emit `uwtable`)."}, {"sha": "f62029c90673b65627aa46565cc7709c0bd94971", "filename": "compiler/rustc_target/src/spec/i686_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs?ref=89e4e1f1b32e2a88cf696337f77e10273142c1a0", "patch": "@@ -1,9 +1,10 @@\n-use crate::spec::{LinkerFlavor, StackProbeType, Target};\n+use crate::spec::{LinkerFlavor, SanitizerSet, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n+    base.supported_sanitizers = SanitizerSet::ADDRESS;\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\"]);\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;"}, {"sha": "35b4cce50a02ef54dcf1b4561f17ae4302fc41dd", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=89e4e1f1b32e2a88cf696337f77e10273142c1a0", "patch": "@@ -1381,6 +1381,8 @@ pub struct TargetOptions {\n     pub is_like_msvc: bool,\n     /// Whether a target toolchain is like WASM.\n     pub is_like_wasm: bool,\n+    /// Whether a target toolchain is like Android, implying a Linux kernel and a Bionic libc\n+    pub is_like_android: bool,\n     /// Default supported version of DWARF on this platform.\n     /// Useful because some platforms (osx, bsd) only want up to DWARF2.\n     pub default_dwarf_version: u32,\n@@ -1673,6 +1675,7 @@ impl Default for TargetOptions {\n             is_like_windows: false,\n             is_like_msvc: false,\n             is_like_wasm: false,\n+            is_like_android: false,\n             default_dwarf_version: 4,\n             allows_weak_linkage: true,\n             has_rpath: false,\n@@ -2320,6 +2323,7 @@ impl Target {\n         key!(is_like_windows, bool);\n         key!(is_like_msvc, bool);\n         key!(is_like_wasm, bool);\n+        key!(is_like_android, bool);\n         key!(default_dwarf_version, u32);\n         key!(allows_weak_linkage, bool);\n         key!(has_rpath, bool);\n@@ -2570,6 +2574,7 @@ impl ToJson for Target {\n         target_option_val!(is_like_windows);\n         target_option_val!(is_like_msvc);\n         target_option_val!(is_like_wasm);\n+        target_option_val!(is_like_android);\n         target_option_val!(default_dwarf_version);\n         target_option_val!(allows_weak_linkage);\n         target_option_val!(has_rpath);"}, {"sha": "0155798c8b6d70c61b8319ad59814f5a2499dc8b", "filename": "compiler/rustc_trait_selection/src/traits/codegen.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs?ref=89e4e1f1b32e2a88cf696337f77e10273142c1a0", "patch": "@@ -4,10 +4,12 @@\n // general routines.\n \n use crate::infer::{DefiningAnchor, TyCtxtInferExt};\n+use crate::traits::error_reporting::InferCtxtExt;\n use crate::traits::{\n     ImplSource, Obligation, ObligationCause, SelectionContext, TraitEngine, TraitEngineExt,\n     Unimplemented,\n };\n+use rustc_infer::traits::FulfillmentErrorCode;\n use rustc_middle::traits::CodegenObligationError;\n use rustc_middle::ty::{self, TyCtxt};\n \n@@ -62,6 +64,14 @@ pub fn codegen_select_candidate<'tcx>(\n         // optimization to stop iterating early.\n         let errors = fulfill_cx.select_all_or_error(&infcx);\n         if !errors.is_empty() {\n+            // `rustc_monomorphize::collector` assumes there are no type errors.\n+            // Cycle errors are the only post-monomorphization errors possible; emit them now so\n+            // `rustc_ty_utils::resolve_associated_item` doesn't return `None` post-monomorphization.\n+            for err in errors {\n+                if let FulfillmentErrorCode::CodeCycle(cycle) = err.code {\n+                    infcx.report_overflow_error_cycle(&cycle);\n+                }\n+            }\n             return Err(CodegenObligationError::FulfillmentError);\n         }\n "}, {"sha": "d62b399c1b5624f0f350ab9957f6c5f3af3202fa", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=89e4e1f1b32e2a88cf696337f77e10273142c1a0", "patch": "@@ -1540,6 +1540,9 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                 }\n                 diag.emit();\n             }\n+            FulfillmentErrorCode::CodeCycle(ref cycle) => {\n+                self.report_overflow_error_cycle(cycle);\n+            }\n         }\n     }\n "}, {"sha": "6f3a9412dde7a80dbfc52075d51094e9620ccea7", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=89e4e1f1b32e2a88cf696337f77e10273142c1a0", "patch": "@@ -25,10 +25,9 @@ use super::Unimplemented;\n use super::{FulfillmentError, FulfillmentErrorCode};\n use super::{ObligationCause, PredicateObligation};\n \n-use crate::traits::error_reporting::InferCtxtExt as _;\n use crate::traits::project::PolyProjectionObligation;\n use crate::traits::project::ProjectionCacheKeyExt as _;\n-use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n+use crate::traits::query::evaluate_obligation::InferCtxtExt;\n \n impl<'tcx> ForestObligation for PendingPredicateObligation<'tcx> {\n     /// Note that we include both the `ParamEnv` and the `Predicate`,\n@@ -224,6 +223,7 @@ fn mk_pending(os: Vec<PredicateObligation<'_>>) -> Vec<PendingPredicateObligatio\n impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n     type Obligation = PendingPredicateObligation<'tcx>;\n     type Error = FulfillmentErrorCode<'tcx>;\n+    type OUT = Outcome<Self::Obligation, Self::Error>;\n \n     /// Identifies whether a predicate obligation needs processing.\n     ///\n@@ -594,14 +594,16 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n         &mut self,\n         cycle: I,\n         _marker: PhantomData<&'c PendingPredicateObligation<'tcx>>,\n-    ) where\n+    ) -> Result<(), FulfillmentErrorCode<'tcx>>\n+    where\n         I: Clone + Iterator<Item = &'c PendingPredicateObligation<'tcx>>,\n     {\n         if self.selcx.coinductive_match(cycle.clone().map(|s| s.obligation.predicate)) {\n             debug!(\"process_child_obligations: coinductive match\");\n+            Ok(())\n         } else {\n             let cycle: Vec<_> = cycle.map(|c| c.obligation.clone()).collect();\n-            self.selcx.infcx().report_overflow_error_cycle(&cycle);\n+            Err(FulfillmentErrorCode::CodeCycle(cycle))\n         }\n     }\n }"}, {"sha": "5e32a27cdb1daf238f1a80f4fb7bf6e3b5269355", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=89e4e1f1b32e2a88cf696337f77e10273142c1a0", "patch": "@@ -226,27 +226,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     }\n \n     pub fn intercrate(infcx: &'cx InferCtxt<'cx, 'tcx>) -> SelectionContext<'cx, 'tcx> {\n-        SelectionContext {\n-            infcx,\n-            freshener: infcx.freshener_keep_static(),\n-            intercrate: true,\n-            intercrate_ambiguity_causes: None,\n-            query_mode: TraitQueryMode::Standard,\n-        }\n+        SelectionContext { intercrate: true, ..SelectionContext::new(infcx) }\n     }\n \n     pub fn with_query_mode(\n         infcx: &'cx InferCtxt<'cx, 'tcx>,\n         query_mode: TraitQueryMode,\n     ) -> SelectionContext<'cx, 'tcx> {\n         debug!(?query_mode, \"with_query_mode\");\n-        SelectionContext {\n-            infcx,\n-            freshener: infcx.freshener_keep_static(),\n-            intercrate: false,\n-            intercrate_ambiguity_causes: None,\n-            query_mode,\n-        }\n+        SelectionContext { query_mode, ..SelectionContext::new(infcx) }\n     }\n \n     /// Enables tracking of intercrate ambiguity causes. See"}, {"sha": "acd4fa63d7823ac83c1ca4749525b578f90abe6d", "filename": "compiler/rustc_transmute/src/layout/tree.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e4e1f1b32e2a88cf696337f77e10273142c1a0/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs?ref=89e4e1f1b32e2a88cf696337f77e10273142c1a0", "patch": "@@ -404,7 +404,7 @@ pub(crate) mod rustc {\n                 .unwrap();\n                 trace!(?discr_layout, \"computed discriminant layout\");\n                 variant_layout = variant_layout.extend(discr_layout).unwrap().0;\n-                tree = tree.then(Self::from_disr(discr, tcx, layout_summary.discriminant_size));\n+                tree = tree.then(Self::from_discr(discr, tcx, layout_summary.discriminant_size));\n             }\n \n             // Next come fields.\n@@ -444,11 +444,21 @@ pub(crate) mod rustc {\n             Ok(tree)\n         }\n \n-        pub fn from_disr(discr: Discr<'tcx>, tcx: TyCtxt<'tcx>, size: usize) -> Self {\n-            // FIXME(@jswrenn): I'm certain this is missing needed endian nuance.\n-            let bytes = discr.val.to_ne_bytes();\n-            let bytes = &bytes[..size];\n-            Self::Seq(bytes.into_iter().copied().map(|b| Self::from_bits(b)).collect())\n+        pub fn from_discr(discr: Discr<'tcx>, tcx: TyCtxt<'tcx>, size: usize) -> Self {\n+            use rustc_target::abi::Endian;\n+\n+            let bytes: [u8; 16];\n+            let bytes = match tcx.data_layout.endian {\n+                Endian::Little => {\n+                    bytes = discr.val.to_le_bytes();\n+                    &bytes[..size]\n+                }\n+                Endian::Big => {\n+                    bytes = discr.val.to_be_bytes();\n+                    &bytes[bytes.len() - size..]\n+                }\n+            };\n+            Self::Seq(bytes.iter().map(|&b| Self::from_bits(b)).collect())\n         }\n     }\n "}, {"sha": "b8b0a1d3d7e2e560834cc637d74ee67130372f3a", "filename": "library/core/src/num/dec2flt/lemire.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89e4e1f1b32e2a88cf696337f77e10273142c1a0/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Flemire.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e4e1f1b32e2a88cf696337f77e10273142c1a0/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Flemire.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Flemire.rs?ref=89e4e1f1b32e2a88cf696337f77e10273142c1a0", "patch": "@@ -6,7 +6,7 @@ use crate::num::dec2flt::table::{\n     LARGEST_POWER_OF_FIVE, POWER_OF_FIVE_128, SMALLEST_POWER_OF_FIVE,\n };\n \n-/// Compute a float using an extended-precision representation.\n+/// Compute w * 10^q using an extended-precision float representation.\n ///\n /// Fast conversion of a the significant digits and decimal exponent\n /// a float to an extended representation with a binary float. This"}, {"sha": "2ff8e600f7c52fc3d987ca06fcb0bb3eca127224", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89e4e1f1b32e2a88cf696337f77e10273142c1a0/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e4e1f1b32e2a88cf696337f77e10273142c1a0/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=89e4e1f1b32e2a88cf696337f77e10273142c1a0", "patch": "@@ -822,14 +822,14 @@ impl crate::os::linux::process::ChildExt for crate::process::Child {\n         self.handle\n             .pidfd\n             .as_ref()\n-            .ok_or_else(|| Error::new(ErrorKind::Other, \"No pidfd was created.\"))\n+            .ok_or_else(|| Error::new(ErrorKind::Uncategorized, \"No pidfd was created.\"))\n     }\n \n     fn take_pidfd(&mut self) -> io::Result<PidFd> {\n         self.handle\n             .pidfd\n             .take()\n-            .ok_or_else(|| Error::new(ErrorKind::Other, \"No pidfd was created.\"))\n+            .ok_or_else(|| Error::new(ErrorKind::Uncategorized, \"No pidfd was created.\"))\n     }\n }\n "}, {"sha": "b499e186cc046ddea624484a290b2b3802642a82", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89e4e1f1b32e2a88cf696337f77e10273142c1a0/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e4e1f1b32e2a88cf696337f77e10273142c1a0/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=89e4e1f1b32e2a88cf696337f77e10273142c1a0", "patch": "@@ -371,7 +371,7 @@ pub(crate) fn print_where_clause<'a, 'tcx: 'a>(\n                     format!(\"<br><span class=\\\"where\\\">where{where_preds}</span>\")\n                 } else {\n                     let mut clause = br_with_padding;\n-                    clause.truncate(clause.len() - 5 * \"&nbsp;\".len());\n+                    clause.truncate(clause.len() - 4 * \"&nbsp;\".len());\n                     write!(clause, \"<span class=\\\"where\\\">where{where_preds}</span>\")?;\n                     clause\n                 }"}, {"sha": "1ed9ac6bc34ac06878d8970806a3878e341f7d5c", "filename": "src/test/rustdoc-ui/normalize-cycle.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/89e4e1f1b32e2a88cf696337f77e10273142c1a0/src%2Ftest%2Frustdoc-ui%2Fnormalize-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e4e1f1b32e2a88cf696337f77e10273142c1a0/src%2Ftest%2Frustdoc-ui%2Fnormalize-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fnormalize-cycle.rs?ref=89e4e1f1b32e2a88cf696337f77e10273142c1a0", "patch": "@@ -1,4 +1,5 @@\n // check-pass\n+// compile-flags: -Znormalize-docs\n // Regression test for <https://github.com/rust-lang/rust/issues/79459>.\n pub trait Query {}\n "}, {"sha": "24ab77703d107514a41ef2122b75b7565a3a62bf", "filename": "src/test/rustdoc/where.SWhere_TraitWhere_item-decl.html", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/89e4e1f1b32e2a88cf696337f77e10273142c1a0/src%2Ftest%2Frustdoc%2Fwhere.SWhere_TraitWhere_item-decl.html", "raw_url": "https://github.com/rust-lang/rust/raw/89e4e1f1b32e2a88cf696337f77e10273142c1a0/src%2Ftest%2Frustdoc%2Fwhere.SWhere_TraitWhere_item-decl.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fwhere.SWhere_TraitWhere_item-decl.html?ref=89e4e1f1b32e2a88cf696337f77e10273142c1a0", "patch": "@@ -1,3 +1,8 @@\n <div class=\"item-decl\"><pre class=\"rust trait\"><code>pub trait TraitWhere {\n-    type <a href=\"#associatedtype.Item\" class=\"associatedtype\">Item</a>&lt;'a&gt;<br />&#160;&#160;&#160;<span class=\"where\">where<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self: 'a</span>;\n+    type <a href=\"#associatedtype.Item\" class=\"associatedtype\">Item</a>&lt;'a&gt;<br />&#160;&#160;&#160;&#160;<span class=\"where\">where<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self: 'a</span>;\n+\n+    fn <a href=\"#method.func\" class=\"fnname\">func</a>(self)<br />&#160;&#160;&#160;&#160;<span class=\"where\">where<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self: <a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a></span>,\n+    { ... }\n+<span class=\"item-spacer\" />    fn <a href=\"#method.lines\" class=\"fnname\">lines</a>(self) -&gt; <a class=\"struct\" href=\"{{channel}}/std/io/struct.Lines.html\" title=\"struct std::io::Lines\">Lines</a>&lt;Self&gt;<br />&#160;&#160;&#160;&#160;<span class=\"where\">where<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self: <a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a></span>,\n+    { ... }\n }</code></pre></div>\n\\ No newline at end of file"}, {"sha": "68a146bfa55b8e7401945869c01b4a221f79e02d", "filename": "src/test/rustdoc/where.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/89e4e1f1b32e2a88cf696337f77e10273142c1a0/src%2Ftest%2Frustdoc%2Fwhere.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e4e1f1b32e2a88cf696337f77e10273142c1a0/src%2Ftest%2Frustdoc%2Fwhere.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fwhere.rs?ref=89e4e1f1b32e2a88cf696337f77e10273142c1a0", "patch": "@@ -1,5 +1,7 @@\n #![crate_name = \"foo\"]\n \n+use std::io::Lines;\n+\n pub trait MyTrait { fn dummy(&self) { } }\n \n // @has foo/struct.Alpha.html '//pre' \"pub struct Alpha<A>(_)where A: MyTrait\"\n@@ -29,6 +31,16 @@ where\n // @snapshot SWhere_TraitWhere_item-decl - '//div[@class=\"item-decl\"]'\n pub trait TraitWhere {\n     type Item<'a> where Self: 'a;\n+\n+    fn func(self)\n+    where\n+        Self: Sized\n+    {}\n+\n+    fn lines(self) -> Lines<Self>\n+    where\n+        Self: Sized,\n+    { todo!() }\n }\n \n // @has foo/struct.Echo.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\"}, {"sha": "c3e2f8e1646f12dd9c0e6956e46001c9fa599020", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-69654.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89e4e1f1b32e2a88cf696337f77e10273142c1a0/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89e4e1f1b32e2a88cf696337f77e10273142c1a0/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.stderr?ref=89e4e1f1b32e2a88cf696337f77e10273142c1a0", "patch": "@@ -4,7 +4,7 @@ error[E0423]: expected value, found type parameter `T`\n LL | impl<T> Bar<T> for [u8; T] {}\n    |      -                  ^ not a value\n    |      |\n-   |      found this type pararmeter\n+   |      found this type parameter\n \n error[E0599]: the function or associated item `foo` exists for struct `Foo<_>`, but its trait bounds were not satisfied\n   --> $DIR/issue-69654.rs:17:10"}, {"sha": "08e4be2c0c352feea06994084d2281dcc7e5ee43", "filename": "src/test/ui/lexical-scopes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89e4e1f1b32e2a88cf696337f77e10273142c1a0/src%2Ftest%2Fui%2Flexical-scopes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89e4e1f1b32e2a88cf696337f77e10273142c1a0/src%2Ftest%2Fui%2Flexical-scopes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexical-scopes.stderr?ref=89e4e1f1b32e2a88cf696337f77e10273142c1a0", "patch": "@@ -2,7 +2,7 @@ error[E0574]: expected struct, variant or union type, found type parameter `T`\n   --> $DIR/lexical-scopes.rs:3:13\n    |\n LL | fn f<T>() {\n-   |      - found this type pararmeter\n+   |      - found this type parameter\n LL |     let t = T { i: 0 };\n    |             ^ not a struct, variant or union type\n "}, {"sha": "af9f4612ab342b9cdecc38cbbaf27e5e15dd7fb3", "filename": "src/test/ui/resolve/point-at-type-parameter-shadowing-another-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89e4e1f1b32e2a88cf696337f77e10273142c1a0/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89e4e1f1b32e2a88cf696337f77e10273142c1a0/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.stderr?ref=89e4e1f1b32e2a88cf696337f77e10273142c1a0", "patch": "@@ -2,7 +2,7 @@ error[E0574]: expected struct, variant or union type, found type parameter `Baz`\n   --> $DIR/point-at-type-parameter-shadowing-another-type.rs:16:13\n    |\n LL | impl<Baz> Foo<Baz> for Bar {\n-   |      --- found this type pararmeter\n+   |      --- found this type parameter\n ...\n LL |             Baz { num } => num,\n    |             ^^^ not a struct, variant or union type"}, {"sha": "d8fddc8007f502edd109ccb3a8c84258ac027d4c", "filename": "src/test/ui/span/issue-35987.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89e4e1f1b32e2a88cf696337f77e10273142c1a0/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89e4e1f1b32e2a88cf696337f77e10273142c1a0/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr?ref=89e4e1f1b32e2a88cf696337f77e10273142c1a0", "patch": "@@ -4,7 +4,7 @@ error[E0404]: expected trait, found type parameter `Add`\n LL | impl<T: Clone, Add> Add for Foo<T> {\n    |                ---  ^^^ not a trait\n    |                |\n-   |                found this type pararmeter\n+   |                found this type parameter\n    |\n help: consider importing this trait instead\n    |"}, {"sha": "e5ff0906be8a59005d8191651a72a8d961e06bf2", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89e4e1f1b32e2a88cf696337f77e10273142c1a0/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e4e1f1b32e2a88cf696337f77e10273142c1a0/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=89e4e1f1b32e2a88cf696337f77e10273142c1a0", "patch": "@@ -11,9 +11,15 @@ mod tests;\n pub const ASAN_SUPPORTED_TARGETS: &[&str] = &[\n     \"aarch64-apple-darwin\",\n     \"aarch64-fuchsia\",\n+    \"aarch64-linux-android\",\n     \"aarch64-unknown-linux-gnu\",\n+    \"arm-linux-androideabi\",\n+    \"armv7-linux-androideabi\",\n+    \"i686-linux-android\",\n+    \"i686-unknown-linux-gnu\",\n     \"x86_64-apple-darwin\",\n     \"x86_64-fuchsia\",\n+    \"x86_64-linux-android\",\n     \"x86_64-unknown-freebsd\",\n     \"x86_64-unknown-linux-gnu\",\n ];"}]}