{"sha": "750ab54573908774d81be82979bc1d328c43c35e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MGFiNTQ1NzM5MDg3NzRkODFiZTgyOTc5YmMxZDMyOGM0M2MzNWU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-10-26T14:40:08Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-10-26T15:03:37Z"}, "message": "Do insertion lookahead in algo::diff", "tree": {"sha": "7538a2bc2b547c8348eb87956d2e69d6bb9005e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7538a2bc2b547c8348eb87956d2e69d6bb9005e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/750ab54573908774d81be82979bc1d328c43c35e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/750ab54573908774d81be82979bc1d328c43c35e", "html_url": "https://github.com/rust-lang/rust/commit/750ab54573908774d81be82979bc1d328c43c35e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/750ab54573908774d81be82979bc1d328c43c35e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a84cadc88e23fead7435384bfd986dc08081509", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a84cadc88e23fead7435384bfd986dc08081509", "html_url": "https://github.com/rust-lang/rust/commit/1a84cadc88e23fead7435384bfd986dc08081509"}], "stats": {"total": 162, "additions": 121, "deletions": 41}, "files": [{"sha": "1c7f0276321fdc338f100ebe9f1b2639d48e27a7", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/750ab54573908774d81be82979bc1d328c43c35e/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750ab54573908774d81be82979bc1d328c43c35e/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=750ab54573908774d81be82979bc1d328c43c35e", "patch": "@@ -613,7 +613,7 @@ fn main() {\n pub struct Foo { pub a: i32, pub b: i32 }\n \"#,\n             r#\"\n-fn some(, b: ()} {}\n+fn some(, b: ()) {}\n fn items() {}\n fn here() {}\n "}, {"sha": "9dc7182bdb90ac700a18594b0eb53c0aef4e328d", "filename": "crates/syntax/src/algo.rs", "status": "modified", "additions": 120, "deletions": 40, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/750ab54573908774d81be82979bc1d328c43c35e/crates%2Fsyntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750ab54573908774d81be82979bc1d328c43c35e/crates%2Fsyntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Falgo.rs?ref=750ab54573908774d81be82979bc1d328c43c35e", "patch": "@@ -137,7 +137,7 @@ impl TreeDiff {\n     }\n }\n \n-/// Finds minimal the diff, which, applied to `from`, will result in `to`.\n+/// Finds a (potentially minimal) diff, which, applied to `from`, will result in `to`.\n ///\n /// Specifically, returns a structure that consists of a replacements, insertions and deletions\n /// such that applying this map on `from` will result in `to`.\n@@ -151,7 +151,6 @@ pub fn diff(from: &SyntaxNode, to: &SyntaxNode) -> TreeDiff {\n     };\n     let (from, to) = (from.clone().into(), to.clone().into());\n \n-    // FIXME: this is horrible inefficient. I bet there's a cool algorithm to diff trees properly.\n     if !syntax_element_eq(&from, &to) {\n         go(&mut diff, from, to);\n     }\n@@ -169,6 +168,7 @@ pub fn diff(from: &SyntaxNode, to: &SyntaxNode) -> TreeDiff {\n             }\n     }\n \n+    // FIXME: this is horrible inefficient. I bet there's a cool algorithm to diff trees properly.\n     fn go(diff: &mut TreeDiff, lhs: SyntaxElement, rhs: SyntaxElement) {\n         let (lhs, rhs) = match lhs.as_node().zip(rhs.as_node()) {\n             Some((lhs, rhs)) => (lhs, rhs),\n@@ -179,6 +179,8 @@ pub fn diff(from: &SyntaxNode, to: &SyntaxNode) -> TreeDiff {\n             }\n         };\n \n+        let mut look_ahead_scratch = Vec::default();\n+\n         let mut rhs_children = rhs.children_with_tokens();\n         let mut lhs_children = lhs.children_with_tokens();\n         let mut last_lhs = None;\n@@ -204,7 +206,31 @@ pub fn diff(from: &SyntaxNode, to: &SyntaxNode) -> TreeDiff {\n                     diff.deletions.push(element);\n                 }\n                 (Some(ref lhs_ele), Some(ref rhs_ele)) if syntax_element_eq(lhs_ele, rhs_ele) => {}\n-                (Some(lhs_ele), Some(rhs_ele)) => go(diff, lhs_ele, rhs_ele),\n+                (Some(lhs_ele), Some(rhs_ele)) => {\n+                    // nodes differ, look for lhs_ele in rhs, if its found we can mark everything up\n+                    // until that element as insertions. This is important to keep the diff minimal\n+                    // in regards to insertions that have been actually done, this is important for\n+                    // use insertions as we do not want to replace the entire module node.\n+                    look_ahead_scratch.push(rhs_ele.clone());\n+                    let mut rhs_children_clone = rhs_children.clone();\n+                    let mut insert = false;\n+                    while let Some(rhs_child) = rhs_children_clone.next() {\n+                        if syntax_element_eq(&lhs_ele, &rhs_child) {\n+                            mark::hit!(diff_insertions);\n+                            insert = true;\n+                            break;\n+                        } else {\n+                            look_ahead_scratch.push(rhs_child);\n+                        }\n+                    }\n+                    let drain = look_ahead_scratch.drain(..);\n+                    if let Some(prev) = last_lhs.clone().filter(|_| insert) {\n+                        diff.insertions.entry(prev).or_insert_with(Vec::new).extend(drain);\n+                        rhs_children = rhs_children_clone;\n+                    } else {\n+                        go(diff, lhs_ele, rhs_ele)\n+                    }\n+                }\n             }\n             last_lhs = lhs_child.or(last_lhs);\n         }\n@@ -292,7 +318,6 @@ fn _replace_children(\n #[derive(Debug, PartialEq, Eq, Hash)]\n enum InsertPos {\n     FirstChildOf(SyntaxNode),\n-    // Before(SyntaxElement),\n     After(SyntaxElement),\n }\n \n@@ -603,18 +628,44 @@ mod tests {\n     }\n \n     #[test]\n-    fn insert() {\n+    fn replace_parent() {\n+        mark::check!(diff_replace_parent);\n+        check_diff(\n+            r#\"\"#,\n+            r#\"use foo::bar;\"#,\n+            expect![[r#\"\n+                insertions:\n+\n+\n+\n+                replacements:\n+\n+                Line 0: Node(SOURCE_FILE@0..0) -> use foo::bar;\n+\n+                deletions:\n+\n+\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn insert_last() {\n         mark::check!(diff_insert);\n         check_diff(\n-            r#\"use foo;\"#,\n-            r#\"use foo;\n+            r#\"\n+use foo;\n use bar;\"#,\n+            r#\"\n+use foo;\n+use bar;\n+use baz;\"#,\n             expect![[r#\"\n                 insertions:\n \n-                Line 0: Node(USE@0..8)\n+                Line 2: Node(USE@10..18)\n                 -> \"\\n\"\n-                -> use bar;\n+                -> use baz;\n \n                 replacements:\n \n@@ -628,29 +679,63 @@ use bar;\"#,\n     }\n \n     #[test]\n-    fn replace_parent() {\n-        mark::check!(diff_replace_parent);\n+    fn insert_middle() {\n         check_diff(\n-            r#\"\"#,\n-            r#\"use foo::bar;\"#,\n+            r#\"\n+use foo;\n+use baz;\"#,\n+            r#\"\n+use foo;\n+use bar;\n+use baz;\"#,\n             expect![[r#\"\n                 insertions:\n \n+                Line 2: Token(WHITESPACE@9..10 \"\\n\")\n+                -> use bar;\n+                -> \"\\n\"\n+\n+                replacements:\n+\n+\n+\n+                deletions:\n+\n+\n+            \"#]],\n+        )\n+    }\n+\n+    #[test]\n+    fn insert_first() {\n+        check_diff(\n+            r#\"\n+use bar;\n+use baz;\"#,\n+            r#\"\n+use foo;\n+use bar;\n+use baz;\"#,\n+            expect![[r#\"\n+                insertions:\n \n+                Line 0: Token(WHITESPACE@0..1 \"\\n\")\n+                -> use foo;\n+                -> \"\\n\"\n \n                 replacements:\n \n-                Line 0: Node(SOURCE_FILE@0..0) -> use foo::bar;\n+\n \n                 deletions:\n \n \n             \"#]],\n-        );\n+        )\n     }\n \n     #[test]\n-    fn delete() {\n+    fn delete_last() {\n         mark::check!(diff_delete);\n         check_diff(\n             r#\"use foo;\n@@ -674,52 +759,50 @@ use bar;\"#,\n     }\n \n     #[test]\n-    fn insert_use() {\n+    fn delete_middle() {\n+        mark::check!(diff_insertions);\n         check_diff(\n             r#\"\n use expect_test::{expect, Expect};\n+use text_edit::TextEdit;\n \n use crate::AstNode;\n \"#,\n             r#\"\n use expect_test::{expect, Expect};\n-use text_edit::TextEdit;\n \n use crate::AstNode;\n \"#,\n             expect![[r#\"\n                 insertions:\n \n-                Line 4: Token(WHITESPACE@56..57 \"\\n\")\n+                Line 1: Node(USE@1..35)\n+                -> \"\\n\\n\"\n                 -> use crate::AstNode;\n-                -> \"\\n\"\n \n                 replacements:\n \n-                Line 2: Token(WHITESPACE@35..37 \"\\n\\n\") -> \"\\n\"\n-                Line 4: Token(CRATE_KW@41..46 \"crate\") -> text_edit\n-                Line 4: Token(IDENT@48..55 \"AstNode\") -> TextEdit\n-                Line 4: Token(WHITESPACE@56..57 \"\\n\") -> \"\\n\\n\"\n \n-                deletions:\n \n+                deletions:\n \n+                Line 2: use text_edit::TextEdit;\n+                Line 3: \"\\n\\n\"\n+                Line 4: use crate::AstNode;\n+                Line 5: \"\\n\"\n             \"#]],\n         )\n     }\n \n     #[test]\n-    fn remove_use() {\n+    fn delete_first() {\n         check_diff(\n             r#\"\n-use expect_test::{expect, Expect};\n use text_edit::TextEdit;\n \n use crate::AstNode;\n \"#,\n             r#\"\n-use expect_test::{expect, Expect};\n-\n use crate::AstNode;\n \"#,\n             expect![[r#\"\n@@ -729,15 +812,14 @@ use crate::AstNode;\n \n                 replacements:\n \n-                Line 2: Token(WHITESPACE@35..36 \"\\n\") -> \"\\n\\n\"\n-                Line 3: Node(NAME_REF@40..49) -> crate\n-                Line 3: Token(IDENT@51..59 \"TextEdit\") -> AstNode\n-                Line 3: Token(WHITESPACE@60..62 \"\\n\\n\") -> \"\\n\"\n+                Line 2: Node(NAME_REF@5..14) -> crate\n+                Line 2: Token(IDENT@16..24 \"TextEdit\") -> AstNode\n+                Line 2: Token(WHITESPACE@25..27 \"\\n\\n\") -> \"\\n\"\n \n                 deletions:\n \n-                Line 4: use crate::AstNode;\n-                Line 5: \"\\n\"\n+                Line 3: use crate::AstNode;\n+                Line 4: \"\\n\"\n             \"#]],\n         )\n     }\n@@ -814,17 +896,15 @@ fn main() {\n                         _ => return,\n                     }\n                 -> ;\n-                Line 5: Token(R_CURLY@64..65 \"}\")\n-                -> \"\\n\"\n-                -> }\n+                Line 3: Node(IF_EXPR@17..63)\n+                -> \"\\n    \"\n+                -> foo(x);\n \n                 replacements:\n \n                 Line 3: Token(IF_KW@17..19 \"if\") -> let\n                 Line 3: Token(LET_KW@20..23 \"let\") -> x\n                 Line 3: Node(BLOCK_EXPR@40..63) -> =\n-                Line 5: Token(WHITESPACE@63..64 \"\\n\") -> \"\\n    \"\n-                Line 5: Token(R_CURLY@64..65 \"}\") -> foo(x);\n \n                 deletions:\n "}]}