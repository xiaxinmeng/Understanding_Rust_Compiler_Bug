{"sha": "80ed61fbd64936ed676c2050e7e660b5ad78c9f2", "node_id": "C_kwDOAAsO6NoAKDgwZWQ2MWZiZDY0OTM2ZWQ2NzZjMjA1MGU3ZTY2MGI1YWQ3OGM5ZjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-15T03:09:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-15T03:09:20Z"}, "message": "Auto merge of #96350 - austinabell:skip_optimization, r=Mark-Simulacrum\n\nfix(iter::skip): Optimize `next` and `nth` implementations of `Skip`\n\nThis avoids calling nth/next or nth/nth to first skip elements and then get the next one (unless necessary due to usize overflow).", "tree": {"sha": "5d633ac89d5a5ede1545bb4d7689e6dc4883ceb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d633ac89d5a5ede1545bb4d7689e6dc4883ceb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80ed61fbd64936ed676c2050e7e660b5ad78c9f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80ed61fbd64936ed676c2050e7e660b5ad78c9f2", "html_url": "https://github.com/rust-lang/rust/commit/80ed61fbd64936ed676c2050e7e660b5ad78c9f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80ed61fbd64936ed676c2050e7e660b5ad78c9f2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76c427d6e20c2942716de9932be4215771aeb4b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/76c427d6e20c2942716de9932be4215771aeb4b1", "html_url": "https://github.com/rust-lang/rust/commit/76c427d6e20c2942716de9932be4215771aeb4b1"}, {"sha": "00bc9e8ac4cc6fba98eef558554e7fcd747e49c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/00bc9e8ac4cc6fba98eef558554e7fcd747e49c1", "html_url": "https://github.com/rust-lang/rust/commit/00bc9e8ac4cc6fba98eef558554e7fcd747e49c1"}], "stats": {"total": 58, "additions": 50, "deletions": 8}, "files": [{"sha": "dbf0ae9eca3eb7492b7afbc9d71dbf87ec2b0f49", "filename": "library/core/src/iter/adapters/skip.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/80ed61fbd64936ed676c2050e7e660b5ad78c9f2/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80ed61fbd64936ed676c2050e7e660b5ad78c9f2/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs?ref=80ed61fbd64936ed676c2050e7e660b5ad78c9f2", "patch": "@@ -33,21 +33,32 @@ where\n     #[inline]\n     fn next(&mut self) -> Option<I::Item> {\n         if unlikely(self.n > 0) {\n-            self.iter.nth(crate::mem::take(&mut self.n) - 1)?;\n+            self.iter.nth(crate::mem::take(&mut self.n))\n+        } else {\n+            self.iter.next()\n         }\n-        self.iter.next()\n     }\n \n     #[inline]\n     fn nth(&mut self, n: usize) -> Option<I::Item> {\n-        // Can't just add n + self.n due to overflow.\n         if self.n > 0 {\n-            let to_skip = self.n;\n-            self.n = 0;\n-            // nth(n) skips n+1\n-            self.iter.nth(to_skip - 1)?;\n+            let skip: usize = crate::mem::take(&mut self.n);\n+            // Checked add to handle overflow case.\n+            let n = match skip.checked_add(n) {\n+                Some(nth) => nth,\n+                None => {\n+                    // In case of overflow, load skip value, before loading `n`.\n+                    // Because the amount of elements to iterate is beyond `usize::MAX`, this\n+                    // is split into two `nth` calls where the `skip` `nth` call is discarded.\n+                    self.iter.nth(skip - 1)?;\n+                    n\n+                }\n+            };\n+            // Load nth element including skip.\n+            self.iter.nth(n)\n+        } else {\n+            self.iter.nth(n)\n         }\n-        self.iter.nth(n)\n     }\n \n     #[inline]"}, {"sha": "754641834e803a6871ce5b4f13086f3e6ebdd2e4", "filename": "library/core/tests/iter/adapters/skip.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/80ed61fbd64936ed676c2050e7e660b5ad78c9f2/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80ed61fbd64936ed676c2050e7e660b5ad78c9f2/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fskip.rs?ref=80ed61fbd64936ed676c2050e7e660b5ad78c9f2", "patch": "@@ -201,3 +201,34 @@ fn test_skip_non_fused() {\n     // advance it further. `Unfuse` tests that this doesn't happen by panicking in that scenario.\n     let _ = non_fused.skip(20).next();\n }\n+\n+#[test]\n+fn test_skip_non_fused_nth_overflow() {\n+    let non_fused = Unfuse::new(0..10);\n+\n+    // Ensures that calling skip and `nth` where the sum would overflow does not fail for non-fused\n+    // iterators.\n+    let _ = non_fused.skip(20).nth(usize::MAX);\n+}\n+\n+#[test]\n+fn test_skip_overflow_wrapping() {\n+    // Test to ensure even on overflowing on `skip+nth` the correct amount of elements are yielded.\n+    struct WrappingIterator(usize);\n+\n+    impl Iterator for WrappingIterator {\n+        type Item = usize;\n+\n+        fn next(&mut self) -> core::option::Option<Self::Item> {\n+            <Self as Iterator>::nth(self, 0)\n+        }\n+\n+        fn nth(&mut self, nth: usize) -> core::option::Option<Self::Item> {\n+            self.0 = self.0.wrapping_add(nth.wrapping_add(1));\n+            Some(self.0)\n+        }\n+    }\n+\n+    let wrap = WrappingIterator(0);\n+    assert_eq!(wrap.skip(20).nth(usize::MAX), Some(20));\n+}"}]}