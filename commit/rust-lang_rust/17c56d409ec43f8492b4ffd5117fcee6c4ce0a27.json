{"sha": "17c56d409ec43f8492b4ffd5117fcee6c4ce0a27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YzU2ZDQwOWVjNDNmODQ5MmI0ZmZkNTExN2ZjZWU2YzRjZTBhMjc=", "commit": {"author": {"name": "Roman Stoliar", "email": "rizakrko@rambler.ru", "date": "2018-05-11T12:14:23Z"}, "committer": {"name": "Roman Stoliar", "email": "rizakrko@rambler.ru", "date": "2018-05-11T12:14:23Z"}, "message": "resolved merge conflict", "tree": {"sha": "dd584378885abb86d364a01c43c9cfd642da08a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd584378885abb86d364a01c43c9cfd642da08a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17c56d409ec43f8492b4ffd5117fcee6c4ce0a27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17c56d409ec43f8492b4ffd5117fcee6c4ce0a27", "html_url": "https://github.com/rust-lang/rust/commit/17c56d409ec43f8492b4ffd5117fcee6c4ce0a27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17c56d409ec43f8492b4ffd5117fcee6c4ce0a27/comments", "author": {"login": "rizakrko", "id": 18172179, "node_id": "MDQ6VXNlcjE4MTcyMTc5", "avatar_url": "https://avatars.githubusercontent.com/u/18172179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rizakrko", "html_url": "https://github.com/rizakrko", "followers_url": "https://api.github.com/users/rizakrko/followers", "following_url": "https://api.github.com/users/rizakrko/following{/other_user}", "gists_url": "https://api.github.com/users/rizakrko/gists{/gist_id}", "starred_url": "https://api.github.com/users/rizakrko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rizakrko/subscriptions", "organizations_url": "https://api.github.com/users/rizakrko/orgs", "repos_url": "https://api.github.com/users/rizakrko/repos", "events_url": "https://api.github.com/users/rizakrko/events{/privacy}", "received_events_url": "https://api.github.com/users/rizakrko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rizakrko", "id": 18172179, "node_id": "MDQ6VXNlcjE4MTcyMTc5", "avatar_url": "https://avatars.githubusercontent.com/u/18172179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rizakrko", "html_url": "https://github.com/rizakrko", "followers_url": "https://api.github.com/users/rizakrko/followers", "following_url": "https://api.github.com/users/rizakrko/following{/other_user}", "gists_url": "https://api.github.com/users/rizakrko/gists{/gist_id}", "starred_url": "https://api.github.com/users/rizakrko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rizakrko/subscriptions", "organizations_url": "https://api.github.com/users/rizakrko/orgs", "repos_url": "https://api.github.com/users/rizakrko/repos", "events_url": "https://api.github.com/users/rizakrko/events{/privacy}", "received_events_url": "https://api.github.com/users/rizakrko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9b71d215677145bad8dd3ea8abb2114a3c9231e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9b71d215677145bad8dd3ea8abb2114a3c9231e", "html_url": "https://github.com/rust-lang/rust/commit/d9b71d215677145bad8dd3ea8abb2114a3c9231e"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "23081b87d2651e4f7ec1bfc1143d9b7d90f0aa7c", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/17c56d409ec43f8492b4ffd5117fcee6c4ce0a27/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17c56d409ec43f8492b4ffd5117fcee6c4ce0a27/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=17c56d409ec43f8492b4ffd5117fcee6c4ce0a27", "patch": "@@ -258,25 +258,25 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                     format!(\"cannot use `{}=` on type `{}`\",\n                                     op.node.as_str(), lhs_ty));\n                             let mut suggested_deref = false;\n-                            if let TyRef(_, mut ty_mut) = lhs_ty.sty {\n+                            if let TyRef(_, mut rty, _) = lhs_ty.sty {\n                                 if {\n                                     !self.infcx.type_moves_by_default(self.param_env,\n-                                                                        ty_mut.ty,\n+                                                                        rty,\n                                                                         lhs_expr.span) &&\n-                                        self.lookup_op_method(ty_mut.ty,\n-                                                                &[rhs_ty],\n-                                                                Op::Binary(op, is_assign))\n+                                        self.lookup_op_method(rty,\n+                                                              &[rhs_ty],\n+                                                              Op::Binary(op, is_assign))\n                                             .is_ok()\n                                 } {\n                                     if let Ok(lstring) = codemap.span_to_snippet(lhs_expr.span) {\n-                                        while let TyRef(_, ty_mut_inner) = ty_mut.ty.sty{\n-                                            ty_mut = ty_mut_inner;\n+                                        while let TyRef(_, rty_inner, _) = rty.sty {\n+                                            rty = rty_inner;\n                                         }\n                                         let msg = &format!(\n                                                 \"`{}=` can be used on '{}', you can \\\n                                                 dereference `{2}`: `*{2}`\",\n                                                 op.node.as_str(),\n-                                                ty_mut.ty,\n+                                                rty,\n                                                 lstring\n                                         );\n                                         err.help(msg);\n@@ -326,25 +326,25 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                             op.node.as_str(),\n                                             lhs_ty);\n                             let mut suggested_deref = false;\n-                            if let TyRef(_, mut ty_mut) = lhs_ty.sty {\n+                            if let TyRef(_, mut rty, _) = lhs_ty.sty {\n                                 if {\n                                     !self.infcx.type_moves_by_default(self.param_env,\n-                                                                        ty_mut.ty,\n+                                                                        rty,\n                                                                         lhs_expr.span) &&\n-                                        self.lookup_op_method(ty_mut.ty,\n-                                                                &[rhs_ty],\n-                                                                Op::Binary(op, is_assign))\n+                                        self.lookup_op_method(rty,\n+                                                              &[rhs_ty],\n+                                                              Op::Binary(op, is_assign))\n                                             .is_ok()\n                                 } {\n                                     if let Ok(lstring) = codemap.span_to_snippet(lhs_expr.span) {\n-                                        while let TyRef(_, ty_mut_inner) = ty_mut.ty.sty{\n-                                            ty_mut = ty_mut_inner;\n+                                        while let TyRef(_, rty_inner, _) = rty.sty {\n+                                            rty = rty_inner;\n                                         }\n                                         let msg = &format!(\n                                                 \"`{}` can be used on '{}', you can \\\n                                                 dereference `{2}`: `*{2}`\",\n                                                 op.node.as_str(),\n-                                                ty_mut.ty,\n+                                                rty,\n                                                 lstring\n                                         );\n                                         err.help(msg);\n@@ -478,7 +478,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             err.note(&format!(\"unsigned values cannot be negated\"));\n                         },\n                         TyStr | TyNever | TyChar | TyTuple(_) | TyArray(_,_) => {},\n-                        TyRef(_, ref lty) if lty.ty.sty == TyStr => {},\n+                        TyRef(_, ref lty, _) if lty.sty == TyStr => {},\n                         _ => {\n                             let missing_trait = match op {\n                                 hir::UnNeg => \"std::ops::Neg\","}]}