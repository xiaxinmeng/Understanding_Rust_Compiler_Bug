{"sha": "5d0ca74c753d72bf5b6dcfa532001cdd07aa0365", "node_id": "C_kwDOAAsO6NoAKDVkMGNhNzRjNzUzZDcyYmY1YjZkY2ZhNTMyMDAxY2RkMDdhYTAzNjU", "commit": {"author": {"name": "tamaron", "email": "tamaron1203@gmail.com", "date": "2022-04-29T09:34:58Z"}, "committer": {"name": "tamaron", "email": "tamaron1203@gmail.com", "date": "2022-05-06T15:05:45Z"}, "message": "Resolved conflicts", "tree": {"sha": "dbf87c811725f01eea98f60488d881e5c79d4ac2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbf87c811725f01eea98f60488d881e5c79d4ac2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d0ca74c753d72bf5b6dcfa532001cdd07aa0365", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d0ca74c753d72bf5b6dcfa532001cdd07aa0365", "html_url": "https://github.com/rust-lang/rust/commit/5d0ca74c753d72bf5b6dcfa532001cdd07aa0365", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d0ca74c753d72bf5b6dcfa532001cdd07aa0365/comments", "author": {"login": "tamaroning", "id": 20992019, "node_id": "MDQ6VXNlcjIwOTkyMDE5", "avatar_url": "https://avatars.githubusercontent.com/u/20992019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamaroning", "html_url": "https://github.com/tamaroning", "followers_url": "https://api.github.com/users/tamaroning/followers", "following_url": "https://api.github.com/users/tamaroning/following{/other_user}", "gists_url": "https://api.github.com/users/tamaroning/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamaroning/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamaroning/subscriptions", "organizations_url": "https://api.github.com/users/tamaroning/orgs", "repos_url": "https://api.github.com/users/tamaroning/repos", "events_url": "https://api.github.com/users/tamaroning/events{/privacy}", "received_events_url": "https://api.github.com/users/tamaroning/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamaroning", "id": 20992019, "node_id": "MDQ6VXNlcjIwOTkyMDE5", "avatar_url": "https://avatars.githubusercontent.com/u/20992019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamaroning", "html_url": "https://github.com/tamaroning", "followers_url": "https://api.github.com/users/tamaroning/followers", "following_url": "https://api.github.com/users/tamaroning/following{/other_user}", "gists_url": "https://api.github.com/users/tamaroning/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamaroning/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamaroning/subscriptions", "organizations_url": "https://api.github.com/users/tamaroning/orgs", "repos_url": "https://api.github.com/users/tamaroning/repos", "events_url": "https://api.github.com/users/tamaroning/events{/privacy}", "received_events_url": "https://api.github.com/users/tamaroning/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1594e986ea76c53290f1d85118b65ba03137df8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1594e986ea76c53290f1d85118b65ba03137df8c", "html_url": "https://github.com/rust-lang/rust/commit/1594e986ea76c53290f1d85118b65ba03137df8c"}], "stats": {"total": 215, "additions": 212, "deletions": 3}, "files": [{"sha": "63652dba398099bd5ec79d43d4bd01ef8ee6e106", "filename": "clippy_lints/src/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 63, "deletions": 1, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/5d0ca74c753d72bf5b6dcfa532001cdd07aa0365/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d0ca74c753d72bf5b6dcfa532001cdd07aa0365/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs?ref=5d0ca74c753d72bf5b6dcfa532001cdd07aa0365", "patch": "@@ -2,12 +2,14 @@ use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::is_lint_allowed;\n use clippy_utils::source::walk_span_to_context;\n use rustc_data_structures::sync::Lrc;\n+use rustc_hir as hir;\n use rustc_hir::{Block, BlockCheckMode, UnsafeSource};\n use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::{BytePos, Pos, SyntaxContext};\n+use rustc_span::{BytePos, Pos, Span, SyntaxContext};\n+use std::rc::Rc;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -86,6 +88,66 @@ impl LateLintPass<'_> for UndocumentedUnsafeBlocks {\n             );\n         }\n     }\n+\n+    fn check_mod(&mut self, cx: &LateContext<'_>, module: &'_ hir::Mod<'_>, mod_span: Span, hir_id: hir::HirId) {\n+        let source_map = cx.sess().source_map();\n+        let mut item_and_spans: Vec<(&hir::Item<'_>, Span)> = Vec::new(); // (start, end, item)\n+\n+        // Collect all items and their spans\n+        for item_id in module.item_ids {\n+            let item = cx.tcx.hir().item(*item_id);\n+            item_and_spans.push((item, item.span));\n+        }\n+        // Sort items by start position\n+        item_and_spans.sort_by_key(|e| e.1.lo());\n+\n+        for (idx, (item, item_span)) in item_and_spans.iter().enumerate() {\n+            if let hir::ItemKind::Impl(imple) = &item.kind\n+                && imple.unsafety == hir::Unsafety::Unsafe\n+                && !item_span.from_expansion()\n+                && !is_lint_allowed(cx, UNDOCUMENTED_UNSAFE_BLOCKS, hir_id)\n+            {\n+                // Checks if the lines immediately preceding the impl contain a safety comment.\n+                let impl_has_safety_comment = {\n+                    let span_before_impl = if idx == 0 {\n+                        // mod A { /* comment */ unsafe impl T {} }\n+                        // ^--------------------^\n+                        todo!();\n+                        //mod_span.until(module.spans)\n+                    } else {\n+                        // unsafe impl S {} /* comment */ unsafe impl T {}\n+                        //                 ^-------------^\n+                        item_and_spans[idx - 1].1.between(*item_span)\n+                    };\n+\n+                    if let Ok(start) = source_map.lookup_line(span_before_impl.lo())\n+                        && let Ok(end) = source_map.lookup_line(span_before_impl.hi())\n+                        && let Some(src) = start.sf.src.as_deref()\n+                    {\n+                        start.line < end.line && text_has_safety_comment(\n+                            src,\n+                            &start.sf.lines[start.line + 1 ..= end.line],\n+                            start.sf.start_pos.to_usize()\n+                        )\n+                    } else {\n+                        // Problem getting source text. Pretend a comment was found.\n+                        true\n+                    }\n+                };\n+\n+                if !impl_has_safety_comment {\n+                    span_lint_and_help(\n+                        cx,\n+                        UNDOCUMENTED_UNSAFE_BLOCKS,\n+                        *item_span,\n+                        \"unsafe impl missing a safety comment\",\n+                        None,\n+                        \"consider adding a safety comment on the preceding line\",\n+                    );\n+                }\n+            }\n+        }\n+    }\n }\n \n fn is_unsafe_from_proc_macro(cx: &LateContext<'_>, block: &Block<'_>) -> bool {"}, {"sha": "3044a92cbd04e12dfe50c947884a00b7cbab8a72", "filename": "tests/ui/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 100, "deletions": 1, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/5d0ca74c753d72bf5b6dcfa532001cdd07aa0365/tests%2Fui%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d0ca74c753d72bf5b6dcfa532001cdd07aa0365/tests%2Fui%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fundocumented_unsafe_blocks.rs?ref=5d0ca74c753d72bf5b6dcfa532001cdd07aa0365", "patch": "@@ -1,7 +1,7 @@\n // aux-build:proc_macro_unsafe.rs\n \n #![warn(clippy::undocumented_unsafe_blocks)]\n-#![allow(clippy::let_unit_value)]\n+#![allow(clippy::let_unit_value, clippy::missing_safety_doc)]\n \n extern crate proc_macro_unsafe;\n \n@@ -334,4 +334,103 @@ pub fn print_binary_tree() {\n     println!(\"{}\", unsafe { String::from_utf8_unchecked(vec![]) });\n }\n \n+mod unsafe_impl_smoke_test {\n+    unsafe trait A {}\n+\n+    // error: no safety comment\n+    unsafe impl A for () {}\n+\n+    // Safety: ok\n+    unsafe impl A for (i32) {}\n+\n+    mod sub_mod {\n+        // error: also works for the first item\n+        unsafe impl B for (u32) {}\n+        unsafe trait B {}\n+    }\n+\n+    #[rustfmt::skip]\n+    mod sub_mod2 {\n+        // \n+        // SAFETY: ok\n+        // \n+\n+        unsafe impl B for (u32) {}\n+        unsafe trait B {}\n+    }\n+}\n+\n+mod unsafe_impl_from_macro {\n+    unsafe trait T {}\n+\n+    macro_rules! unsafe_impl {\n+        ($t:ty) => {\n+            unsafe impl T for $t {}\n+        };\n+    }\n+    // ok: from macro expanision\n+    unsafe_impl!(());\n+    // ok: from macro expansion\n+    unsafe_impl!(i32);\n+}\n+\n+#[rustfmt::skip]\n+mod unsafe_impl_valid_comment {\n+    unsafe trait SaFety {}\n+    // SaFety:\n+    unsafe impl SaFety for () {}\n+\n+    unsafe trait MultiLineComment {}\n+    // The following impl is safe\n+    // ...\n+    // Safety: reason\n+    unsafe impl MultiLineComment for () {}\n+\n+    unsafe trait NoAscii {}\n+    // \u5b89\u5168 SAFETY: \u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306f\u5b89\u5168\u3067\u3059\n+    unsafe impl NoAscii for () {}\n+\n+    unsafe trait InlineAndPrecedingComment {}\n+    // SAFETY:\n+    /* comment */ unsafe impl InlineAndPrecedingComment for () {}\n+\n+    unsafe trait BuriedSafety {}\n+    // Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n+    // incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation\n+    // ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n+    // reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint\n+    // occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est\n+    // laborum. Safety:\n+    // Tellus elementum sagittis vitae et leo duis ut diam quam. Sit amet nulla facilisi\n+    // morbi tempus iaculis urna. Amet luctus venenatis lectus magna. At quis risus sed vulputate odio\n+    // ut. Luctus venenatis lectus magna fringilla urna. Tortor id aliquet lectus proin nibh nisl\n+    // condimentum id venenatis. Vulputate dignissim suspendisse in est ante in nibh mauris cursus.\n+    unsafe impl BuriedSafety for () {}\n+\n+    unsafe trait MultiLineBlockComment {}\n+    /* This is a description\n+     * Safety: */\n+    unsafe impl MultiLineBlockComment for () {}\n+}\n+\n+#[rustfmt::skip]\n+mod unsafe_impl_invalid_comment {\n+    unsafe trait NoComment {}\n+\n+    unsafe impl NoComment for () {}\n+\n+    unsafe trait InlineComment {}\n+\n+    /* SAFETY: */ unsafe impl InlineComment for () {}\n+\n+    unsafe trait TrailingComment {}\n+\n+    unsafe impl TrailingComment for () {} // SAFETY:\n+\n+    unsafe trait Interference {}\n+    // SAFETY:\n+    const BIG_NUMBER: i32 = 1000000;\n+    unsafe impl Interference for () {}\n+}\n+\n fn main() {}"}, {"sha": "80d68a038087d76f332cbaeae3cdffc20f9d10f6", "filename": "tests/ui/undocumented_unsafe_blocks.stderr", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5d0ca74c753d72bf5b6dcfa532001cdd07aa0365/tests%2Fui%2Fundocumented_unsafe_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d0ca74c753d72bf5b6dcfa532001cdd07aa0365/tests%2Fui%2Fundocumented_unsafe_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fundocumented_unsafe_blocks.stderr?ref=5d0ca74c753d72bf5b6dcfa532001cdd07aa0365", "patch": "@@ -147,5 +147,53 @@ LL |     println!(\"{}\", unsafe { String::from_utf8_unchecked(vec![]) });\n    |\n    = help: consider adding a safety comment on the preceding line\n \n-error: aborting due to 18 previous errors\n+error: unsafe impl missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:341:5\n+   |\n+LL |     unsafe impl A for () {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a safety comment on the preceding line\n+\n+error: unsafe impl missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:348:9\n+   |\n+LL |         unsafe impl B for (u32) {}\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a safety comment on the preceding line\n+\n+error: unsafe impl missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:420:5\n+   |\n+LL |     unsafe impl NoComment for () {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a safety comment on the preceding line\n+\n+error: unsafe impl missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:424:19\n+   |\n+LL |     /* SAFETY: */ unsafe impl InlineComment for () {}\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a safety comment on the preceding line\n+\n+error: unsafe impl missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:428:5\n+   |\n+LL |     unsafe impl TrailingComment for () {} // SAFETY:\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a safety comment on the preceding line\n+\n+error: unsafe impl missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:433:5\n+   |\n+LL |     unsafe impl Interference for () {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a safety comment on the preceding line\n+\n+error: aborting due to 24 previous errors\n "}]}