{"sha": "6f7c5589abfc93fbdfc071cc2716d1ea7b527e2e", "node_id": "C_kwDOAAsO6NoAKDZmN2M1NTg5YWJmYzkzZmJkZmMwNzFjYzI3MTZkMWVhN2I1MjdlMmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-01T19:23:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-01T19:23:22Z"}, "message": "Auto merge of #12443 - Veykril:fmtfix, r=Veykril\n\nminor: Fix rustfmt failing on main_loop.rs", "tree": {"sha": "9702a7af211ded4386d4a3d8057ad85c6851f0dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9702a7af211ded4386d4a3d8057ad85c6851f0dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f7c5589abfc93fbdfc071cc2716d1ea7b527e2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f7c5589abfc93fbdfc071cc2716d1ea7b527e2e", "html_url": "https://github.com/rust-lang/rust/commit/6f7c5589abfc93fbdfc071cc2716d1ea7b527e2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f7c5589abfc93fbdfc071cc2716d1ea7b527e2e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf10a1ee3e7474e67683da20502f897eebcbbbc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf10a1ee3e7474e67683da20502f897eebcbbbc4", "html_url": "https://github.com/rust-lang/rust/commit/cf10a1ee3e7474e67683da20502f897eebcbbbc4"}, {"sha": "343562c54d70b9ad6bc186d6fa15f2bc4a1734bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/343562c54d70b9ad6bc186d6fa15f2bc4a1734bf", "html_url": "https://github.com/rust-lang/rust/commit/343562c54d70b9ad6bc186d6fa15f2bc4a1734bf"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "babcbb478281846f116484b5970ced7205987b9c", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f7c5589abfc93fbdfc071cc2716d1ea7b527e2e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7c5589abfc93fbdfc071cc2716d1ea7b527e2e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=6f7c5589abfc93fbdfc071cc2716d1ea7b527e2e", "patch": "@@ -665,11 +665,11 @@ impl GlobalState {\n             })?\n             .on::<lsp_types::notification::DidOpenTextDocument>(|this, params| {\n                 if let Ok(path) = from_proto::vfs_path(&params.text_document.uri) {\n-                    if this\n+                    let already_exists = this\n                         .mem_docs\n                         .insert(path.clone(), DocumentData::new(params.text_document.version))\n-                        .is_err()\n-                    {\n+                        .is_err();\n+                    if already_exists {\n                         tracing::error!(\"duplicate DidOpenTextDocument: {}\", path)\n                     }\n                     this.vfs\n@@ -688,7 +688,7 @@ impl GlobalState {\n                             doc.version = params.text_document.version;\n                         }\n                         None => {\n-                            tracing::error!(\"unexpected DidChangeTextDocument: {}; send DidOpenTextDocument first\", path);\n+                            tracing::error!(\"unexpected DidChangeTextDocument: {}\", path);\n                             return Ok(());\n                         }\n                     };\n@@ -722,7 +722,8 @@ impl GlobalState {\n                 }\n                 if let Ok(abs_path) = from_proto::abs_path(&params.text_document.uri) {\n                     if reload::should_refresh_for_change(&abs_path, ChangeKind::Modify) {\n-                        this.fetch_workspaces_queue.request_op(format!(\"DidSaveTextDocument {}\", abs_path.display()));\n+                        this.fetch_workspaces_queue\n+                            .request_op(format!(\"DidSaveTextDocument {}\", abs_path.display()));\n                     }\n                 }\n                 Ok(())\n@@ -751,7 +752,10 @@ impl GlobalState {\n                                     // provide a configuration. This is handled in Config::update below.\n                                     let mut config = Config::clone(&*this.config);\n                                     if let Err(error) = config.update(json.take()) {\n-                                        this.show_message(lsp_types::MessageType::WARNING, error.to_string());\n+                                        this.show_message(\n+                                            lsp_types::MessageType::WARNING,\n+                                            error.to_string(),\n+                                        );\n                                     }\n                                     this.update_configuration(config);\n                                 }"}]}