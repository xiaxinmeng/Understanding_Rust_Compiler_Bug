{"sha": "670bc53c0350b461b0d9bdb9451261c0d805ecef", "node_id": "C_kwDOAAsO6NoAKDY3MGJjNTNjMDM1MGI0NjFiMGQ5YmRiOTQ1MTI2MWMwZDgwNWVjZWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-09T00:02:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-09T00:02:55Z"}, "message": "Auto merge of #95542 - xFrednet:rfc-2383-expect-query, r=wesleywiser\n\nSupport tool lints with the `#[expect]` attribute (RFC 2383)\n\nThis PR fixes the ICE https://github.com/rust-lang/rust/issues/94953 by making the assert for converted expectation IDs conditional.\n\nAdditionally, it moves the lint expectation check into a separate query to support rustdoc and other tools. On the way, I've also added some tests to ensure that the attribute works for Clippy and rustdoc lints.\n\nThe number of changes comes from the long test file. This may look like a monster PR, this may smell like a monster PR and this may be a monster PR, but it's a harmless monster. :sauropod:\n\n---\n\nCloses: https://github.com/rust-lang/rust/issues/94953\n\ncc: https://github.com/rust-lang/rust/issues/85549\n\nr? `@wesleywiser`\n\ncc: `@rust-lang/rustdoc`", "tree": {"sha": "be6f177126b88da770b1748c3ca371f6fb330bd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be6f177126b88da770b1748c3ca371f6fb330bd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/670bc53c0350b461b0d9bdb9451261c0d805ecef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/670bc53c0350b461b0d9bdb9451261c0d805ecef", "html_url": "https://github.com/rust-lang/rust/commit/670bc53c0350b461b0d9bdb9451261c0d805ecef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/670bc53c0350b461b0d9bdb9451261c0d805ecef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d018ce47ce8ee6047ca6f92b89fb5b97b2ee5eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d018ce47ce8ee6047ca6f92b89fb5b97b2ee5eb", "html_url": "https://github.com/rust-lang/rust/commit/1d018ce47ce8ee6047ca6f92b89fb5b97b2ee5eb"}, {"sha": "21e4765e58b0f92bc266c5370ecec270c0b2206c", "url": "https://api.github.com/repos/rust-lang/rust/commits/21e4765e58b0f92bc266c5370ecec270c0b2206c", "html_url": "https://github.com/rust-lang/rust/commit/21e4765e58b0f92bc266c5370ecec270c0b2206c"}], "stats": {"total": 182, "additions": 182, "deletions": 0}, "files": [{"sha": "28b37f96e9118138918ce22f36a59e1eabe7c972", "filename": "tests/ui/expect_tool_lint_rfc_2383.rs", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/670bc53c0350b461b0d9bdb9451261c0d805ecef/tests%2Fui%2Fexpect_tool_lint_rfc_2383.rs", "raw_url": "https://github.com/rust-lang/rust/raw/670bc53c0350b461b0d9bdb9451261c0d805ecef/tests%2Fui%2Fexpect_tool_lint_rfc_2383.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_tool_lint_rfc_2383.rs?ref=670bc53c0350b461b0d9bdb9451261c0d805ecef", "patch": "@@ -0,0 +1,142 @@\n+// check-pass\n+#![feature(lint_reasons)]\n+//! This file tests the `#[expect]` attribute implementation for tool lints. The same\n+//! file is used to test clippy and rustdoc. Any changes to this file should be synced\n+//! to the other test files as well.\n+//!\n+//! Expectations:\n+//! * rustc: only rustc lint expectations are emitted\n+//! * clippy: rustc and Clippy's expectations are emitted\n+//! * rustdoc: only rustdoc lint expectations are emitted\n+//!\n+//! This test can't cover every lint from Clippy, rustdoc and potentially other\n+//! tools that will be developed. This therefore only tests a small subset of lints\n+#![expect(rustdoc::missing_crate_level_docs)]\n+\n+mod rustc_ok {\n+    //! See <https://doc.rust-lang.org/rustc/lints/index.html>\n+\n+    #[expect(dead_code)]\n+    pub fn rustc_lints() {\n+        let x = 42.0;\n+\n+        #[expect(illegal_floating_point_literal_pattern)]\n+        match x {\n+            5.0 => {}\n+            6.0 => {}\n+            _ => {}\n+        }\n+    }\n+}\n+\n+mod rustc_warn {\n+    //! See <https://doc.rust-lang.org/rustc/lints/index.html>\n+\n+    #[expect(dead_code)]\n+    pub fn rustc_lints() {\n+        let x = 42;\n+\n+        #[expect(illegal_floating_point_literal_pattern)]\n+        match x {\n+            5 => {}\n+            6 => {}\n+            _ => {}\n+        }\n+    }\n+}\n+\n+pub mod rustdoc_ok {\n+    //! See <https://doc.rust-lang.org/rustdoc/lints.html>\n+\n+    #[expect(rustdoc::broken_intra_doc_links)]\n+    /// I want to link to [`Nonexistent`] but it doesn't exist!\n+    pub fn foo() {}\n+\n+    #[expect(rustdoc::invalid_html_tags)]\n+    /// <h1>\n+    pub fn bar() {}\n+\n+    #[expect(rustdoc::bare_urls)]\n+    /// http://example.org\n+    pub fn baz() {}\n+}\n+\n+pub mod rustdoc_warn {\n+    //! See <https://doc.rust-lang.org/rustdoc/lints.html>\n+\n+    #[expect(rustdoc::broken_intra_doc_links)]\n+    /// I want to link to [`bar`] but it doesn't exist!\n+    pub fn foo() {}\n+\n+    #[expect(rustdoc::invalid_html_tags)]\n+    /// <h1></h1>\n+    pub fn bar() {}\n+\n+    #[expect(rustdoc::bare_urls)]\n+    /// <http://example.org>\n+    pub fn baz() {}\n+}\n+\n+mod clippy_ok {\n+    //! See <https://rust-lang.github.io/rust-clippy/master/index.html>\n+\n+    #[expect(clippy::almost_swapped)]\n+    fn foo() {\n+        let mut a = 0;\n+        let mut b = 9;\n+        a = b;\n+        b = a;\n+    }\n+\n+    #[expect(clippy::bytes_nth)]\n+    fn bar() {\n+        let _ = \"Hello\".bytes().nth(3);\n+    }\n+\n+    #[expect(clippy::if_same_then_else)]\n+    fn baz() {\n+        let _ = if true { 42 } else { 42 };\n+    }\n+\n+    #[expect(clippy::logic_bug)]\n+    fn burger() {\n+        let a = false;\n+        let b = true;\n+\n+        if a && b || a {}\n+    }\n+}\n+\n+mod clippy_warn {\n+    //! See <https://rust-lang.github.io/rust-clippy/master/index.html>\n+\n+    #[expect(clippy::almost_swapped)]\n+    fn foo() {\n+        let mut a = 0;\n+        let mut b = 9;\n+        a = b;\n+    }\n+\n+    #[expect(clippy::bytes_nth)]\n+    fn bar() {\n+        let _ = \"Hello\".as_bytes().get(3);\n+    }\n+\n+    #[expect(clippy::if_same_then_else)]\n+    fn baz() {\n+        let _ = if true { 33 } else { 42 };\n+    }\n+\n+    #[expect(clippy::logic_bug)]\n+    fn burger() {\n+        let a = false;\n+        let b = true;\n+        let c = false;\n+\n+        if a && b || c {}\n+    }\n+}\n+\n+fn main() {\n+    rustc_warn::rustc_lints();\n+}"}, {"sha": "db29e85a82191abf6529511704d4fb83f6725fb6", "filename": "tests/ui/expect_tool_lint_rfc_2383.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/670bc53c0350b461b0d9bdb9451261c0d805ecef/tests%2Fui%2Fexpect_tool_lint_rfc_2383.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/670bc53c0350b461b0d9bdb9451261c0d805ecef/tests%2Fui%2Fexpect_tool_lint_rfc_2383.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_tool_lint_rfc_2383.stderr?ref=670bc53c0350b461b0d9bdb9451261c0d805ecef", "patch": "@@ -0,0 +1,40 @@\n+error: this lint expectation is unfulfilled\n+  --> $DIR/expect_tool_lint_rfc_2383.rs:35:14\n+   |\n+LL |     #[expect(dead_code)]\n+   |              ^^^^^^^^^\n+   |\n+   = note: `-D unfulfilled-lint-expectations` implied by `-D warnings`\n+\n+error: this lint expectation is unfulfilled\n+  --> $DIR/expect_tool_lint_rfc_2383.rs:39:18\n+   |\n+LL |         #[expect(illegal_floating_point_literal_pattern)]\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this lint expectation is unfulfilled\n+  --> $DIR/expect_tool_lint_rfc_2383.rs:113:14\n+   |\n+LL |     #[expect(clippy::almost_swapped)]\n+   |              ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this lint expectation is unfulfilled\n+  --> $DIR/expect_tool_lint_rfc_2383.rs:120:14\n+   |\n+LL |     #[expect(clippy::bytes_nth)]\n+   |              ^^^^^^^^^^^^^^^^^\n+\n+error: this lint expectation is unfulfilled\n+  --> $DIR/expect_tool_lint_rfc_2383.rs:125:14\n+   |\n+LL |     #[expect(clippy::if_same_then_else)]\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this lint expectation is unfulfilled\n+  --> $DIR/expect_tool_lint_rfc_2383.rs:130:14\n+   |\n+LL |     #[expect(clippy::logic_bug)]\n+   |              ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}]}