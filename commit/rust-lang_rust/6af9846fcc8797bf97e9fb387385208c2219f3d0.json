{"sha": "6af9846fcc8797bf97e9fb387385208c2219f3d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhZjk4NDZmY2M4Nzk3YmY5N2U5ZmIzODczODUyMDhjMjIxOWYzZDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-17T14:44:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-17T14:44:51Z"}, "message": "Auto merge of #77124 - spastorino:const-exprs-rfc-2920, r=oli-obk\n\nImplement const expressions and patterns (RFC 2920)\n\ncc `@ecstatic-morse` `@lcnr` `@oli-obk` `@petrochenkov`", "tree": {"sha": "527522b82ce55cd2bcc37b14096e6c1de63660bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/527522b82ce55cd2bcc37b14096e6c1de63660bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6af9846fcc8797bf97e9fb387385208c2219f3d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6af9846fcc8797bf97e9fb387385208c2219f3d0", "html_url": "https://github.com/rust-lang/rust/commit/6af9846fcc8797bf97e9fb387385208c2219f3d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6af9846fcc8797bf97e9fb387385208c2219f3d0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dda2b5e3e260c14b868c494008af1c8981eaa5a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dda2b5e3e260c14b868c494008af1c8981eaa5a8", "html_url": "https://github.com/rust-lang/rust/commit/dda2b5e3e260c14b868c494008af1c8981eaa5a8"}, {"sha": "03321b8cca91cd5d1f9c82a447add69329e52cea", "url": "https://api.github.com/repos/rust-lang/rust/commits/03321b8cca91cd5d1f9c82a447add69329e52cea", "html_url": "https://github.com/rust-lang/rust/commit/03321b8cca91cd5d1f9c82a447add69329e52cea"}], "stats": {"total": 331, "additions": 298, "deletions": 33}, "files": [{"sha": "ea84fc0095f766671190c0d9bc1e36064e1c6061", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -1152,6 +1152,7 @@ impl Expr {\n         match self.kind {\n             ExprKind::Box(_) => ExprPrecedence::Box,\n             ExprKind::Array(_) => ExprPrecedence::Array,\n+            ExprKind::ConstBlock(_) => ExprPrecedence::ConstBlock,\n             ExprKind::Call(..) => ExprPrecedence::Call,\n             ExprKind::MethodCall(..) => ExprPrecedence::MethodCall,\n             ExprKind::Tup(_) => ExprPrecedence::Tup,\n@@ -1207,6 +1208,8 @@ pub enum ExprKind {\n     Box(P<Expr>),\n     /// An array (`[a, b, c, d]`)\n     Array(Vec<P<Expr>>),\n+    /// Allow anonymous constants from an inline `const` block\n+    ConstBlock(AnonConst),\n     /// A function call\n     ///\n     /// The first field resolves to the function itself,"}, {"sha": "382003c834ec91875056c2e31c10bb9d08d7aa7c", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -1106,6 +1106,9 @@ pub fn noop_visit_expr<T: MutVisitor>(\n     match kind {\n         ExprKind::Box(expr) => vis.visit_expr(expr),\n         ExprKind::Array(exprs) => visit_exprs(exprs, vis),\n+        ExprKind::ConstBlock(anon_const) => {\n+            vis.visit_anon_const(anon_const);\n+        }\n         ExprKind::Repeat(expr, count) => {\n             vis.visit_expr(expr);\n             vis.visit_anon_const(count);"}, {"sha": "d991027cb45733d51cba7fcc6a2e42abc231c98c", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -153,6 +153,7 @@ pub fn ident_can_begin_expr(name: Symbol, span: Span, is_raw: bool) -> bool {\n             kw::Do,\n             kw::Box,\n             kw::Break,\n+            kw::Const,\n             kw::Continue,\n             kw::False,\n             kw::For,"}, {"sha": "078dd4bd6e60232ed7a118db39e4601d04faa702", "filename": "compiler/rustc_ast/src/util/parser.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -282,6 +282,7 @@ pub enum ExprPrecedence {\n     ForLoop,\n     Loop,\n     Match,\n+    ConstBlock,\n     Block,\n     TryBlock,\n     Struct,\n@@ -346,6 +347,7 @@ impl ExprPrecedence {\n             ExprPrecedence::ForLoop |\n             ExprPrecedence::Loop |\n             ExprPrecedence::Match |\n+            ExprPrecedence::ConstBlock |\n             ExprPrecedence::Block |\n             ExprPrecedence::TryBlock |\n             ExprPrecedence::Async |"}, {"sha": "507b49616ea0ff5461f237bb646c178f2b440dd2", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -200,11 +200,7 @@ pub trait Visitor<'ast>: Sized {\n         walk_generic_args(self, path_span, generic_args)\n     }\n     fn visit_generic_arg(&mut self, generic_arg: &'ast GenericArg) {\n-        match generic_arg {\n-            GenericArg::Lifetime(lt) => self.visit_lifetime(lt),\n-            GenericArg::Type(ty) => self.visit_ty(ty),\n-            GenericArg::Const(ct) => self.visit_anon_const(ct),\n-        }\n+        walk_generic_arg(self, generic_arg)\n     }\n     fn visit_assoc_ty_constraint(&mut self, constraint: &'ast AssocTyConstraint) {\n         walk_assoc_ty_constraint(self, constraint)\n@@ -486,6 +482,17 @@ where\n     }\n }\n \n+pub fn walk_generic_arg<'a, V>(visitor: &mut V, generic_arg: &'a GenericArg)\n+where\n+    V: Visitor<'a>,\n+{\n+    match generic_arg {\n+        GenericArg::Lifetime(lt) => visitor.visit_lifetime(lt),\n+        GenericArg::Type(ty) => visitor.visit_ty(ty),\n+        GenericArg::Const(ct) => visitor.visit_anon_const(ct),\n+    }\n+}\n+\n pub fn walk_assoc_ty_constraint<'a, V: Visitor<'a>>(\n     visitor: &mut V,\n     constraint: &'a AssocTyConstraint,\n@@ -717,6 +724,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         ExprKind::Array(ref subexpressions) => {\n             walk_list!(visitor, visit_expr, subexpressions);\n         }\n+        ExprKind::ConstBlock(ref anon_const) => visitor.visit_anon_const(anon_const),\n         ExprKind::Repeat(ref element, ref count) => {\n             visitor.visit_expr(element);\n             visitor.visit_anon_const(count)"}, {"sha": "0995231c639887f4177dc5eae542d263026ab8d4", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -30,6 +30,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             let kind = match e.kind {\n                 ExprKind::Box(ref inner) => hir::ExprKind::Box(self.lower_expr(inner)),\n                 ExprKind::Array(ref exprs) => hir::ExprKind::Array(self.lower_exprs(exprs)),\n+                ExprKind::ConstBlock(ref anon_const) => {\n+                    let anon_const = self.lower_anon_const(anon_const);\n+                    hir::ExprKind::ConstBlock(anon_const)\n+                }\n                 ExprKind::Repeat(ref expr, ref count) => {\n                     let expr = self.lower_expr(expr);\n                     let count = self.lower_anon_const(count);"}, {"sha": "b1c8e0ee727303106296980b918ab8131e42f815", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -287,7 +287,7 @@ impl<'a> AstValidator<'a> {\n     // ```\n     fn check_expr_within_pat(&self, expr: &Expr, allow_paths: bool) {\n         match expr.kind {\n-            ExprKind::Lit(..) | ExprKind::Err => {}\n+            ExprKind::Lit(..) | ExprKind::ConstBlock(..) | ExprKind::Err => {}\n             ExprKind::Path(..) if allow_paths => {}\n             ExprKind::Unary(UnOp::Neg, ref inner) if matches!(inner.kind, ExprKind::Lit(_)) => {}\n             _ => self.err_handler().span_err("}, {"sha": "f20084497671f3941da94154c440aed824daa665", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -629,6 +629,7 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(const_trait_bound_opt_out, \"`?const` on trait bounds is experimental\");\n     gate_all!(const_trait_impl, \"const trait impls are experimental\");\n     gate_all!(half_open_range_patterns, \"half-open range patterns are unstable\");\n+    gate_all!(inline_const, \"inline-const is experimental\");\n \n     // All uses of `gate_all!` below this point were added in #65742,\n     // and subsequently disabled (with the non-early gating readded)."}, {"sha": "af8f813278047ffcbd778a7ea28d3096b9ee4868", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -1714,6 +1714,14 @@ impl<'a> State<'a> {\n         self.end();\n     }\n \n+    fn print_expr_anon_const(&mut self, expr: &ast::AnonConst, attrs: &[ast::Attribute]) {\n+        self.ibox(INDENT_UNIT);\n+        self.s.word(\"const\");\n+        self.print_inner_attributes_inline(attrs);\n+        self.print_expr(&expr.value);\n+        self.end();\n+    }\n+\n     fn print_expr_repeat(\n         &mut self,\n         element: &ast::Expr,\n@@ -1890,6 +1898,9 @@ impl<'a> State<'a> {\n             ast::ExprKind::Array(ref exprs) => {\n                 self.print_expr_vec(&exprs[..], attrs);\n             }\n+            ast::ExprKind::ConstBlock(ref anon_const) => {\n+                self.print_expr_anon_const(anon_const, attrs);\n+            }\n             ast::ExprKind::Repeat(ref element, ref count) => {\n                 self.print_expr_repeat(element, count, attrs);\n             }"}, {"sha": "c13fe2ae2806b9c675cbc2898a2870b26ee03dc1", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -598,6 +598,9 @@ declare_features! (\n     /// Allows `#[instruction_set(_)]` attribute\n     (active, isa_attribute, \"1.48.0\", Some(74727), None),\n \n+    /// Allow anonymous constants from an inline `const` block\n+    (active, inline_const, \"1.49.0\", Some(76001), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------\n@@ -618,6 +621,7 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::const_trait_bound_opt_out,\n     sym::lazy_normalization_consts,\n     sym::specialization,\n+    sym::inline_const,\n ];\n \n /// Some features are not allowed to be used together at the same time, if"}, {"sha": "0ebed5c34806db8eef8bb260e5f8d51f8c81f1f4", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -1361,6 +1361,7 @@ impl Expr<'_> {\n     pub fn precedence(&self) -> ExprPrecedence {\n         match self.kind {\n             ExprKind::Box(_) => ExprPrecedence::Box,\n+            ExprKind::ConstBlock(_) => ExprPrecedence::ConstBlock,\n             ExprKind::Array(_) => ExprPrecedence::Array,\n             ExprKind::Call(..) => ExprPrecedence::Call,\n             ExprKind::MethodCall(..) => ExprPrecedence::MethodCall,\n@@ -1446,6 +1447,7 @@ impl Expr<'_> {\n             | ExprKind::LlvmInlineAsm(..)\n             | ExprKind::AssignOp(..)\n             | ExprKind::Lit(_)\n+            | ExprKind::ConstBlock(..)\n             | ExprKind::Unary(..)\n             | ExprKind::Box(..)\n             | ExprKind::AddrOf(..)\n@@ -1501,6 +1503,8 @@ pub fn is_range_literal(expr: &Expr<'_>) -> bool {\n pub enum ExprKind<'hir> {\n     /// A `box x` expression.\n     Box(&'hir Expr<'hir>),\n+    /// Allow anonymous constants from an inline `const` block\n+    ConstBlock(AnonConst),\n     /// An array (e.g., `[a, b, c, d]`).\n     Array(&'hir [Expr<'hir>]),\n     /// A function call."}, {"sha": "35615af0fc7dfeb3153b532cfa097c1747738360", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -1068,6 +1068,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n         ExprKind::Array(subexpressions) => {\n             walk_list!(visitor, visit_expr, subexpressions);\n         }\n+        ExprKind::ConstBlock(ref anon_const) => visitor.visit_anon_const(anon_const),\n         ExprKind::Repeat(ref element, ref count) => {\n             visitor.visit_expr(element);\n             visitor.visit_anon_const(count)"}, {"sha": "4686b4989ae527b135f4de05fce7cc00b787a367", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -1135,6 +1135,15 @@ impl<'a> State<'a> {\n         self.end()\n     }\n \n+    fn print_expr_anon_const(&mut self, anon_const: &hir::AnonConst) {\n+        self.ibox(INDENT_UNIT);\n+        self.s.word_space(\"const\");\n+        self.s.word(\"{\");\n+        self.print_anon_const(anon_const);\n+        self.s.word(\"}\");\n+        self.end()\n+    }\n+\n     fn print_expr_repeat(&mut self, element: &hir::Expr<'_>, count: &hir::AnonConst) {\n         self.ibox(INDENT_UNIT);\n         self.s.word(\"[\");\n@@ -1287,6 +1296,9 @@ impl<'a> State<'a> {\n             hir::ExprKind::Array(ref exprs) => {\n                 self.print_expr_vec(exprs);\n             }\n+            hir::ExprKind::ConstBlock(ref anon_const) => {\n+                self.print_expr_anon_const(anon_const);\n+            }\n             hir::ExprKind::Repeat(ref element, ref count) => {\n                 self.print_expr_repeat(&element, count);\n             }"}, {"sha": "4c8baa49edf615c8b01bc996590870e8095f881a", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -195,6 +195,11 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         run_early_pass!(self, check_expr_post, e);\n     }\n \n+    fn visit_generic_arg(&mut self, arg: &'a ast::GenericArg) {\n+        run_early_pass!(self, check_generic_arg, arg);\n+        ast_visit::walk_generic_arg(self, arg);\n+    }\n+\n     fn visit_generic_param(&mut self, param: &'a ast::GenericParam) {\n         run_early_pass!(self, check_generic_param, param);\n         ast_visit::walk_generic_param(self, param);"}, {"sha": "828f283d2a95a71f7f5d7686d95a5072410c075e", "filename": "compiler/rustc_lint/src/passes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -33,6 +33,7 @@ macro_rules! late_lint_methods {\n             fn check_expr(a: &$hir hir::Expr<$hir>);\n             fn check_expr_post(a: &$hir hir::Expr<$hir>);\n             fn check_ty(a: &$hir hir::Ty<$hir>);\n+            fn check_generic_arg(a: &$hir hir::GenericArg<$hir>);\n             fn check_generic_param(a: &$hir hir::GenericParam<$hir>);\n             fn check_generics(a: &$hir hir::Generics<$hir>);\n             fn check_where_predicate(a: &$hir hir::WherePredicate<$hir>);\n@@ -176,6 +177,7 @@ macro_rules! early_lint_methods {\n             fn check_expr(a: &ast::Expr);\n             fn check_expr_post(a: &ast::Expr);\n             fn check_ty(a: &ast::Ty);\n+            fn check_generic_arg(a: &ast::GenericArg);\n             fn check_generic_param(a: &ast::GenericParam);\n             fn check_generics(a: &ast::Generics);\n             fn check_where_predicate(a: &ast::WherePredicate);"}, {"sha": "4bff7f317cbc924c1e8614b3826f63c6d094d50d", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 53, "deletions": 18, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -839,10 +839,6 @@ impl EarlyLintPass for UnusedParens {\n         }\n     }\n \n-    fn check_anon_const(&mut self, cx: &EarlyContext<'_>, c: &ast::AnonConst) {\n-        self.check_unused_delims_expr(cx, &c.value, UnusedDelimsCtx::AnonConst, false, None, None);\n-    }\n-\n     fn check_stmt(&mut self, cx: &EarlyContext<'_>, s: &ast::Stmt) {\n         if let StmtKind::Local(ref local) = s.kind {\n             self.check_unused_parens_pat(cx, &local.pat, false, false);\n@@ -965,13 +961,6 @@ impl UnusedDelimLint for UnusedBraces {\n                         if !Self::is_expr_delims_necessary(expr, followed_by_block)\n                             && (ctx != UnusedDelimsCtx::AnonConst\n                                 || matches!(expr.kind, ast::ExprKind::Lit(_)))\n-                            // array length expressions are checked during `check_anon_const` and `check_ty`,\n-                            // once as `ArrayLenExpr` and once as `AnonConst`.\n-                            //\n-                            // As we do not want to lint this twice, we do not emit an error for\n-                            // `ArrayLenExpr` if `AnonConst` would do the same.\n-                            && (ctx != UnusedDelimsCtx::ArrayLenExpr\n-                                || !matches!(expr.kind, ast::ExprKind::Lit(_)))\n                             && !cx.sess().source_map().is_multiline(value.span)\n                             && value.attrs.is_empty()\n                             && !value.span.from_expansion()\n@@ -999,21 +988,54 @@ impl UnusedDelimLint for UnusedBraces {\n }\n \n impl EarlyLintPass for UnusedBraces {\n+    fn check_stmt(&mut self, cx: &EarlyContext<'_>, s: &ast::Stmt) {\n+        <Self as UnusedDelimLint>::check_stmt(self, cx, s)\n+    }\n+\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n-        <Self as UnusedDelimLint>::check_expr(self, cx, e)\n+        <Self as UnusedDelimLint>::check_expr(self, cx, e);\n+\n+        if let ExprKind::Repeat(_, ref anon_const) = e.kind {\n+            self.check_unused_delims_expr(\n+                cx,\n+                &anon_const.value,\n+                UnusedDelimsCtx::AnonConst,\n+                false,\n+                None,\n+                None,\n+            );\n+        }\n     }\n \n-    fn check_anon_const(&mut self, cx: &EarlyContext<'_>, c: &ast::AnonConst) {\n-        self.check_unused_delims_expr(cx, &c.value, UnusedDelimsCtx::AnonConst, false, None, None);\n+    fn check_generic_arg(&mut self, cx: &EarlyContext<'_>, arg: &ast::GenericArg) {\n+        if let ast::GenericArg::Const(ct) = arg {\n+            self.check_unused_delims_expr(\n+                cx,\n+                &ct.value,\n+                UnusedDelimsCtx::AnonConst,\n+                false,\n+                None,\n+                None,\n+            );\n+        }\n     }\n \n-    fn check_stmt(&mut self, cx: &EarlyContext<'_>, s: &ast::Stmt) {\n-        <Self as UnusedDelimLint>::check_stmt(self, cx, s)\n+    fn check_variant(&mut self, cx: &EarlyContext<'_>, v: &ast::Variant) {\n+        if let Some(anon_const) = &v.disr_expr {\n+            self.check_unused_delims_expr(\n+                cx,\n+                &anon_const.value,\n+                UnusedDelimsCtx::AnonConst,\n+                false,\n+                None,\n+                None,\n+            );\n+        }\n     }\n \n     fn check_ty(&mut self, cx: &EarlyContext<'_>, ty: &ast::Ty) {\n-        if let &ast::TyKind::Paren(ref r) = &ty.kind {\n-            if let ast::TyKind::Array(_, ref len) = r.kind {\n+        match ty.kind {\n+            ast::TyKind::Array(_, ref len) => {\n                 self.check_unused_delims_expr(\n                     cx,\n                     &len.value,\n@@ -1023,6 +1045,19 @@ impl EarlyLintPass for UnusedBraces {\n                     None,\n                 );\n             }\n+\n+            ast::TyKind::Typeof(ref anon_const) => {\n+                self.check_unused_delims_expr(\n+                    cx,\n+                    &anon_const.value,\n+                    UnusedDelimsCtx::AnonConst,\n+                    false,\n+                    None,\n+                    None,\n+                );\n+            }\n+\n+            _ => {}\n         }\n     }\n "}, {"sha": "3a36ad590c506faa0842a51e55a2b2d3ced1645d", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -33,6 +33,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 Constant { span, user_ty, literal }\n             }\n             ExprKind::StaticRef { literal, .. } => Constant { span, user_ty: None, literal },\n+            ExprKind::ConstBlock { value } => Constant { span, user_ty: None, literal: value },\n             _ => span_bug!(span, \"expression is not a valid constant {:?}\", kind),\n         }\n     }"}, {"sha": "443025c4f84581dbd2becaad2a4d962faf084ffd", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -254,6 +254,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::Continue { .. }\n             | ExprKind::Return { .. }\n             | ExprKind::Literal { .. }\n+            | ExprKind::ConstBlock { .. }\n             | ExprKind::StaticRef { .. }\n             | ExprKind::InlineAsm { .. }\n             | ExprKind::LlvmInlineAsm { .. }"}, {"sha": "4033cc6cf46c4ed673f1d5ddfee1508d378d3dfa", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -234,6 +234,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             ExprKind::Yield { .. }\n             | ExprKind::Literal { .. }\n+            | ExprKind::ConstBlock { .. }\n             | ExprKind::StaticRef { .. }\n             | ExprKind::Block { .. }\n             | ExprKind::Match { .. }"}, {"sha": "ac5cf187aa01bced7ceaf74bc114a1f4d72798bd", "filename": "compiler/rustc_mir_build/src/build/expr/category.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fcategory.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -68,7 +68,9 @@ impl Category {\n             | ExprKind::ThreadLocalRef(_)\n             | ExprKind::LlvmInlineAsm { .. } => Some(Category::Rvalue(RvalueFunc::AsRvalue)),\n \n-            ExprKind::Literal { .. } | ExprKind::StaticRef { .. } => Some(Category::Constant),\n+            ExprKind::ConstBlock { .. } | ExprKind::Literal { .. } | ExprKind::StaticRef { .. } => {\n+                Some(Category::Constant)\n+            }\n \n             ExprKind::Loop { .. }\n             | ExprKind::Block { .. }"}, {"sha": "a268b0b46ff51980017c5798c7004d78912cd98c", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -454,6 +454,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::Array { .. }\n             | ExprKind::Tuple { .. }\n             | ExprKind::Closure { .. }\n+            | ExprKind::ConstBlock { .. }\n             | ExprKind::Literal { .. }\n             | ExprKind::ThreadLocalRef(_)\n             | ExprKind::StaticRef { .. } => {"}, {"sha": "731bd954246cecf8cdc3cbb54bb244d546d432e8", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -511,6 +511,12 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n             inputs: asm.inputs_exprs.to_ref(),\n         },\n \n+        hir::ExprKind::ConstBlock(ref anon_const) => {\n+            let anon_const_def_id = cx.tcx.hir().local_def_id(anon_const.hir_id);\n+            let value = ty::Const::from_anon_const(cx.tcx, anon_const_def_id);\n+\n+            ExprKind::ConstBlock { value }\n+        }\n         // Now comes the rote stuff:\n         hir::ExprKind::Repeat(ref v, ref count) => {\n             let count_def_id = cx.tcx.hir().local_def_id(count.hir_id);"}, {"sha": "f2a2ef0d8f2bcf5ae8d44ea4eabc05f13c53fdf8", "filename": "compiler/rustc_mir_build/src/thir/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -232,6 +232,9 @@ crate enum ExprKind<'tcx> {\n     Return {\n         value: Option<ExprRef<'tcx>>,\n     },\n+    ConstBlock {\n+        value: &'tcx Const<'tcx>,\n+    },\n     Repeat {\n         value: ExprRef<'tcx>,\n         count: &'tcx Const<'tcx>,"}, {"sha": "b05ddb3b46452d9f6d749e111b182c9897a564d5", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -856,6 +856,11 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n             *self.lower_path(qpath, expr.hir_id, expr.span).kind\n         } else {\n             let (lit, neg) = match expr.kind {\n+                hir::ExprKind::ConstBlock(ref anon_const) => {\n+                    let anon_const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);\n+                    let value = ty::Const::from_anon_const(self.tcx, anon_const_def_id);\n+                    return *self.const_to_pat(value, expr.hir_id, expr.span, false).kind;\n+                }\n                 hir::ExprKind::Lit(ref lit) => (lit, false),\n                 hir::ExprKind::Unary(hir::UnOp::UnNeg, ref expr) => {\n                     let lit = match expr.kind {"}, {"sha": "fb05f8791a505e4d82cadfe2666a257843e822c9", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -1060,6 +1060,8 @@ impl<'a> Parser<'a> {\n             })\n         } else if self.eat_keyword(kw::Unsafe) {\n             self.parse_block_expr(None, lo, BlockCheckMode::Unsafe(ast::UserProvided), attrs)\n+        } else if self.check_inline_const() {\n+            self.parse_const_expr(lo.to(self.token.span))\n         } else if self.is_do_catch_block() {\n             self.recover_do_catch(attrs)\n         } else if self.is_try_block() {"}, {"sha": "7970ad36456d1d5cf7af984b8bac290e04bc3c3f", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -18,8 +18,9 @@ use rustc_ast::ptr::P;\n use rustc_ast::token::{self, DelimToken, Token, TokenKind};\n use rustc_ast::tokenstream::{self, DelimSpan, TokenStream, TokenTree, TreeAndSpacing};\n use rustc_ast::DUMMY_NODE_ID;\n-use rustc_ast::{self as ast, AttrStyle, AttrVec, Const, CrateSugar, Extern, Unsafe};\n-use rustc_ast::{Async, MacArgs, MacDelimiter, Mutability, StrLit, Visibility, VisibilityKind};\n+use rustc_ast::{self as ast, AnonConst, AttrStyle, AttrVec, Const, CrateSugar, Extern, Unsafe};\n+use rustc_ast::{Async, Expr, ExprKind, MacArgs, MacDelimiter, Mutability, StrLit};\n+use rustc_ast::{Visibility, VisibilityKind};\n use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, FatalError, PResult};\n use rustc_session::parse::ParseSess;\n@@ -545,6 +546,11 @@ impl<'a> Parser<'a> {\n         self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)\n     }\n \n+    fn check_inline_const(&mut self) -> bool {\n+        self.check_keyword(kw::Const)\n+            && self.look_ahead(1, |t| t == &token::OpenDelim(DelimToken::Brace))\n+    }\n+\n     /// Checks to see if the next token is either `+` or `+=`.\n     /// Otherwise returns `false`.\n     fn check_plus(&mut self) -> bool {\n@@ -864,13 +870,28 @@ impl<'a> Parser<'a> {\n \n     /// Parses constness: `const` or nothing.\n     fn parse_constness(&mut self) -> Const {\n-        if self.eat_keyword(kw::Const) {\n+        // Avoid const blocks to be parsed as const items\n+        if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))\n+            && self.eat_keyword(kw::Const)\n+        {\n             Const::Yes(self.prev_token.uninterpolated_span())\n         } else {\n             Const::No\n         }\n     }\n \n+    /// Parses inline const expressions.\n+    fn parse_const_expr(&mut self, span: Span) -> PResult<'a, P<Expr>> {\n+        self.sess.gated_spans.gate(sym::inline_const, span);\n+        self.eat_keyword(kw::Const);\n+        let blk = self.parse_block()?;\n+        let anon_const = AnonConst {\n+            id: DUMMY_NODE_ID,\n+            value: self.mk_expr(blk.span, ExprKind::Block(blk, None), AttrVec::new()),\n+        };\n+        Ok(self.mk_expr(span, ExprKind::ConstBlock(anon_const), AttrVec::new()))\n+    }\n+\n     /// Parses mutability (`mut` or nothing).\n     fn parse_mutability(&mut self) -> Mutability {\n         if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }"}, {"sha": "15db2066a30537611e7f2e84822cbbf49031de12", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -313,6 +313,9 @@ impl<'a> Parser<'a> {\n             let pat = self.parse_pat_with_range_pat(false, None)?;\n             self.sess.gated_spans.gate(sym::box_patterns, lo.to(self.prev_token.span));\n             PatKind::Box(pat)\n+        } else if self.check_inline_const() {\n+            // Parse `const pat`\n+            PatKind::Lit(self.parse_const_expr(lo.to(self.token.span))?)\n         } else if self.can_be_ident_pat() {\n             // Parse `ident @ pat`\n             // This can give false positives and parse nullary enums,"}, {"sha": "ae810b9e79a5f85569db03f8a96d3ca218274c7e", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -432,6 +432,7 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n             | hir::ExprKind::Break(..)\n             | hir::ExprKind::Continue(_)\n             | hir::ExprKind::Lit(_)\n+            | hir::ExprKind::ConstBlock(..)\n             | hir::ExprKind::Ret(..)\n             | hir::ExprKind::Block(..)\n             | hir::ExprKind::Assign(..)\n@@ -1232,6 +1233,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             }\n \n             hir::ExprKind::Lit(..)\n+            | hir::ExprKind::ConstBlock(..)\n             | hir::ExprKind::Err\n             | hir::ExprKind::Path(hir::QPath::TypeRelative(..))\n             | hir::ExprKind::Path(hir::QPath::LangItem(..)) => succ,\n@@ -1478,6 +1480,7 @@ fn check_expr<'tcx>(this: &mut Liveness<'_, 'tcx>, expr: &'tcx Expr<'tcx>) {\n         | hir::ExprKind::Break(..)\n         | hir::ExprKind::Continue(..)\n         | hir::ExprKind::Lit(_)\n+        | hir::ExprKind::ConstBlock(..)\n         | hir::ExprKind::Block(..)\n         | hir::ExprKind::AddrOf(..)\n         | hir::ExprKind::Struct(..)"}, {"sha": "9cf530d57c0b1486c01402455745cc1dc339c2b0", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -593,6 +593,7 @@ symbols! {\n         infer_static_outlives_requirements,\n         inlateout,\n         inline,\n+        inline_const,\n         inout,\n         instruction_set,\n         intel,"}, {"sha": "9990f86a36b1374e97b1eb046ffd44e18f2bc538", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -286,6 +286,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             ExprKind::DropTemps(ref e) => self.check_expr_with_expectation(e, expected),\n             ExprKind::Array(ref args) => self.check_expr_array(args, expected, expr),\n+            ExprKind::ConstBlock(ref anon_const) => self.to_const(anon_const).ty,\n             ExprKind::Repeat(ref element, ref count) => {\n                 self.check_expr_repeat(element, count, expected, expr)\n             }"}, {"sha": "169ad0df3a5c963fe572faefddef6ad8704cae0b", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -111,6 +111,7 @@ use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{HirIdMap, Node};\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::Idx;\n+use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::GenericArgKind;\n@@ -528,7 +529,20 @@ fn typeck_with_fallback<'tcx>(\n                     hir::TyKind::Infer => Some(AstConv::ast_ty_to_ty(&fcx, ty)),\n                     _ => None,\n                 })\n-                .unwrap_or_else(fallback);\n+                .unwrap_or_else(|| match tcx.hir().get(id) {\n+                    Node::AnonConst(_) => match tcx.hir().get(tcx.hir().get_parent_node(id)) {\n+                        Node::Expr(&hir::Expr {\n+                            kind: hir::ExprKind::ConstBlock(ref anon_const),\n+                            ..\n+                        }) if anon_const.hir_id == id => fcx.next_ty_var(TypeVariableOrigin {\n+                            kind: TypeVariableOriginKind::TypeInference,\n+                            span,\n+                        }),\n+                        _ => fallback(),\n+                    },\n+                    _ => fallback(),\n+                });\n+\n             let expected_type = fcx.normalize_associated_types_in(body.value.span, &expected_type);\n             fcx.require_type_is_sized(expected_type, body.value.span, traits::ConstSized);\n "}, {"sha": "5e8c621140834f21ada8018b6d3c2e4ae919e84b", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -309,6 +309,12 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     tcx.types.usize\n                 }\n \n+                Node::Expr(&Expr { kind: ExprKind::ConstBlock(ref anon_const), .. })\n+                    if anon_const.hir_id == hir_id =>\n+                {\n+                    tcx.typeck(def_id).node_type(anon_const.hir_id)\n+                }\n+\n                 Node::Variant(Variant { disr_expr: Some(ref e), .. }) if e.hir_id == hir_id => tcx\n                     .adt_def(tcx.hir().get_parent_did(hir_id).to_def_id())\n                     .repr"}, {"sha": "471909a092f7b0243709a716f6e373a720255991", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -258,7 +258,10 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 self.consume_exprs(&ia.inputs_exprs);\n             }\n \n-            hir::ExprKind::Continue(..) | hir::ExprKind::Lit(..) | hir::ExprKind::Err => {}\n+            hir::ExprKind::Continue(..)\n+            | hir::ExprKind::Lit(..)\n+            | hir::ExprKind::ConstBlock(..)\n+            | hir::ExprKind::Err => {}\n \n             hir::ExprKind::Loop(ref blk, _, _) => {\n                 self.walk_block(blk);"}, {"sha": "f6ac7aa9155fec3710df3008e2a71736a9ef45ea", "filename": "compiler/rustc_typeck/src/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -370,6 +370,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             | hir::ExprKind::Loop(..)\n             | hir::ExprKind::Match(..)\n             | hir::ExprKind::Lit(..)\n+            | hir::ExprKind::ConstBlock(..)\n             | hir::ExprKind::Break(..)\n             | hir::ExprKind::Continue(..)\n             | hir::ExprKind::Struct(..)"}, {"sha": "43ff90d234cb7e86266667297e188623cbf425b6", "filename": "src/test/ui/feature-gate-inline_const.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftest%2Fui%2Ffeature-gate-inline_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftest%2Fui%2Ffeature-gate-inline_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-inline_const.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let _ = const {\n+        //~^ ERROR inline-const is experimental [E0658]\n+        true\n+    };\n+}"}, {"sha": "be2f567155c3dc290c95dbddbc101b54b181fb7f", "filename": "src/test/ui/feature-gate-inline_const.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftest%2Fui%2Ffeature-gate-inline_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftest%2Fui%2Ffeature-gate-inline_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-inline_const.stderr?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: inline-const is experimental\n+  --> $DIR/feature-gate-inline_const.rs:2:13\n+   |\n+LL |     let _ = const {\n+   |             ^^^^^\n+   |\n+   = note: see issue #76001 <https://github.com/rust-lang/rust/issues/76001> for more information\n+   = help: add `#![feature(inline_const)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "8bb5dab1fa00d27a2cea3f7e415f505bca1a1dcf", "filename": "src/test/ui/inline-const/const-expr-array-init.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-array-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-array-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-array-init.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -0,0 +1,10 @@\n+// build-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(inline_const)]\n+\n+use std::cell::Cell;\n+\n+fn main() {\n+    let _x = [const { Cell::new(0) }; 20];\n+}"}, {"sha": "9254c96a1e7a60ac6d75629f9579ae348d42b2fd", "filename": "src/test/ui/inline-const/const-expr-basic.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-basic.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -0,0 +1,14 @@\n+// run-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(inline_const)]\n+fn foo() -> i32 {\n+    const {\n+        let x = 5 + 10;\n+        x / 3\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(5, foo());\n+}"}, {"sha": "747f14e4bd0aa4cf7503d41875a84322b551d6dd", "filename": "src/test/ui/inline-const/const-expr-reference.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-reference.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -0,0 +1,15 @@\n+// run-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(inline_const)]\n+\n+const fn bar() -> i32 {\n+    const {\n+        2 + 3\n+    }\n+}\n+\n+fn main() {\n+    let x: &'static i32 = &const{bar()};\n+    assert_eq!(&5, x);\n+}"}, {"sha": "c0dc90d971a4902eb0aca407acfa166cd9477348", "filename": "src/test/ui/inline-const/const-match-pat.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -0,0 +1,21 @@\n+// run-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(inline_const)]\n+const MMIO_BIT1: u8 = 4;\n+const MMIO_BIT2: u8 = 5;\n+\n+fn main() {\n+    let s = match read_mmio() {\n+        0 => \"FOO\",\n+        const { 1 << MMIO_BIT1 } => \"BAR\",\n+        const { 1 << MMIO_BIT2 } => \"BAZ\",\n+        _ => unreachable!(),\n+    };\n+\n+    assert_eq!(\"BAZ\", s);\n+}\n+\n+fn read_mmio() -> i32 {\n+    1 << 5\n+}"}, {"sha": "7b95bc775ba9170dc2c4f5cce47aad478963f9b6", "filename": "src/test/ui/parser/issue-66357-unexpected-unreachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftest%2Fui%2Fparser%2Fissue-66357-unexpected-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftest%2Fui%2Fparser%2Fissue-66357-unexpected-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-66357-unexpected-unreachable.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -13,4 +13,4 @@\n \n fn f() { |[](* }\n //~^ ERROR expected one of `,` or `:`, found `(`\n-//~| ERROR expected one of `&`, `(`, `)`, `-`, `...`, `..=`, `..`, `[`, `_`, `box`, `mut`, `ref`, `|`, identifier, or path, found `*`\n+//~| ERROR expected one of `&`, `(`, `)`, `-`, `...`, `..=`, `..`, `[`, `_`, `box`, `const`, `mut`, `ref`, `|`, identifier, or path, found `*`"}, {"sha": "5549f73920d4f5fca1f11c9bfce1cbf3dfafc1f9", "filename": "src/test/ui/parser/issue-66357-unexpected-unreachable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftest%2Fui%2Fparser%2Fissue-66357-unexpected-unreachable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftest%2Fui%2Fparser%2Fissue-66357-unexpected-unreachable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-66357-unexpected-unreachable.stderr?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -4,7 +4,7 @@ error: expected one of `,` or `:`, found `(`\n LL | fn f() { |[](* }\n    |             ^ expected one of `,` or `:`\n \n-error: expected one of `&`, `(`, `)`, `-`, `...`, `..=`, `..`, `[`, `_`, `box`, `mut`, `ref`, `|`, identifier, or path, found `*`\n+error: expected one of `&`, `(`, `)`, `-`, `...`, `..=`, `..`, `[`, `_`, `box`, `const`, `mut`, `ref`, `|`, identifier, or path, found `*`\n   --> $DIR/issue-66357-unexpected-unreachable.rs:14:14\n    |\n LL | fn f() { |[](* }"}, {"sha": "4fdcaca8f60390717bd55f0c71c5102a61c19dd2", "filename": "src/tools/clippy/clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -742,6 +742,7 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n         | ExprKind::Closure(_, _, _, _, _)\n         | ExprKind::LlvmInlineAsm(_)\n         | ExprKind::Path(_)\n+        | ExprKind::ConstBlock(_)\n         | ExprKind::Lit(_)\n         | ExprKind::Err => NeverLoopResult::Otherwise,\n     }"}, {"sha": "89425437eeead505ef765a955b15f50cefd21938", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -506,6 +506,11 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 println!(\"    if {}.len() == {};\", fields_pat, fields.len());\n                 println!(\"    // unimplemented: field checks\");\n             },\n+            ExprKind::ConstBlock(_) => {\n+                let value_pat = self.next(\"value\");\n+                println!(\"Const({})\", value_pat);\n+                self.current = value_pat;\n+            },\n             // FIXME: compute length (needs type info)\n             ExprKind::Repeat(ref value, _) => {\n                 let value_pat = self.next(\"value\");"}, {"sha": "27e9567740d17cb33cdc09f414f62318a1de5125", "filename": "src/tools/clippy/clippy_lints/src/utils/eager_or_lazy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Feager_or_lazy.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -23,7 +23,7 @@ use rustc_middle::hir::map::Map;\n /// This function is named so to stress that it isn't exhaustive and returns FNs.\n fn identify_some_pure_patterns(expr: &Expr<'_>) -> bool {\n     match expr.kind {\n-        ExprKind::Lit(..) | ExprKind::Path(..) | ExprKind::Field(..) => true,\n+        ExprKind::Lit(..) | ExprKind::ConstBlock(..) | ExprKind::Path(..) | ExprKind::Field(..) => true,\n         ExprKind::AddrOf(_, _, addr_of_expr) => identify_some_pure_patterns(addr_of_expr),\n         ExprKind::Tup(tup_exprs) => tup_exprs.iter().all(|expr| identify_some_pure_patterns(expr)),\n         ExprKind::Struct(_, fields, expr) => {"}, {"sha": "c9e639e8728fd40a69ac4a0dd63985bce6c5b9d1", "filename": "src/tools/clippy/clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -559,6 +559,9 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_name(path.ident.name);\n                 self.hash_exprs(args);\n             },\n+            ExprKind::ConstBlock(ref l_id) => {\n+                self.hash_body(l_id.body);\n+            },\n             ExprKind::Repeat(ref e, ref l_id) => {\n                 self.hash_expr(e);\n                 self.hash_body(l_id.body);"}, {"sha": "93bd82994466a82e5f82ec04d4144bbbfd4ae213", "filename": "src/tools/clippy/clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -338,6 +338,11 @@ fn print_expr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, indent: usize) {\n                 print_expr(cx, base, indent + 1);\n             }\n         },\n+        hir::ExprKind::ConstBlock(ref anon_const) => {\n+            println!(\"{}ConstBlock\", ind);\n+            println!(\"{}anon_const:\", ind);\n+            print_expr(cx, &cx.tcx.hir().body(anon_const.body).value, indent + 1);\n+        },\n         hir::ExprKind::Repeat(ref val, ref anon_const) => {\n             println!(\"{}Repeat\", ind);\n             println!(\"{}value:\", ind);"}, {"sha": "a2a1d109c9ac8dba9b86ef17cfc532aa55bf7912", "filename": "src/tools/clippy/clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -110,6 +110,7 @@ impl<'a> Sugg<'a> {\n             | hir::ExprKind::Index(..)\n             | hir::ExprKind::InlineAsm(..)\n             | hir::ExprKind::LlvmInlineAsm(..)\n+            | hir::ExprKind::ConstBlock(..)\n             | hir::ExprKind::Lit(..)\n             | hir::ExprKind::Loop(..)\n             | hir::ExprKind::MethodCall(..)\n@@ -157,6 +158,7 @@ impl<'a> Sugg<'a> {\n             | ast::ExprKind::Index(..)\n             | ast::ExprKind::InlineAsm(..)\n             | ast::ExprKind::LlvmInlineAsm(..)\n+            | ast::ExprKind::ConstBlock(..)\n             | ast::ExprKind::Lit(..)\n             | ast::ExprKind::Loop(..)\n             | ast::ExprKind::MacCall(..)"}]}