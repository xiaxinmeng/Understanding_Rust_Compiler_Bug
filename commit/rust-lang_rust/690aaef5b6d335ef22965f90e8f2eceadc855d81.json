{"sha": "690aaef5b6d335ef22965f90e8f2eceadc855d81", "node_id": "C_kwDOAAsO6NoAKDY5MGFhZWY1YjZkMzM1ZWYyMjk2NWY5MGU4ZjJlY2VhZGM4NTVkODE", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-09-18T19:55:38Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-09-18T19:55:38Z"}, "message": "Add another example for `uN::carrying_mul`\n\nThe prose talked about doing this, so might as well add a simple code example of it too.", "tree": {"sha": "d4d07bc5c260664bfbb0890d0579a860a9b96db4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4d07bc5c260664bfbb0890d0579a860a9b96db4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/690aaef5b6d335ef22965f90e8f2eceadc855d81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/690aaef5b6d335ef22965f90e8f2eceadc855d81", "html_url": "https://github.com/rust-lang/rust/commit/690aaef5b6d335ef22965f90e8f2eceadc855d81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/690aaef5b6d335ef22965f90e8f2eceadc855d81/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c773c134c949661874d76313280e76cc3dd60975", "url": "https://api.github.com/repos/rust-lang/rust/commits/c773c134c949661874d76313280e76cc3dd60975", "html_url": "https://github.com/rust-lang/rust/commit/c773c134c949661874d76313280e76cc3dd60975"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "dd4409198e39b8025b53b3c8a430eaa367c1508a", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/690aaef5b6d335ef22965f90e8f2eceadc855d81/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/690aaef5b6d335ef22965f90e8f2eceadc855d81/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=690aaef5b6d335ef22965f90e8f2eceadc855d81", "patch": "@@ -113,6 +113,9 @@ macro_rules! widening_impl {\n         /// This returns the low-order (wrapping) bits and the high-order (overflow) bits\n         /// of the result as two separate values, in that order.\n         ///\n+        /// If you also need to add a carry to the wide result, then you want\n+        /// [`Self::carrying_mul`] instead.\n+        ///\n         /// # Examples\n         ///\n         /// Basic usage:\n@@ -148,6 +151,8 @@ macro_rules! widening_impl {\n         /// additional amount of overflow. This allows for chaining together multiple\n         /// multiplications to create \"big integers\" which represent larger values.\n         ///\n+        /// If you don't need the `carry`, then you can use [`Self::widening_mul`] instead.\n+        ///\n         /// # Examples\n         ///\n         /// Basic usage:\n@@ -167,6 +172,31 @@ macro_rules! widening_impl {\n         )]\n         /// ```\n         ///\n+        /// This is the core operation needed for scalar multiplication when\n+        /// implementing it for wider-than-native types.\n+        ///\n+        /// ```\n+        /// #![feature(bigint_helper_methods)]\n+        /// fn scalar_mul_eq(little_endian_digits: &mut Vec<u16>, multiplicand: u16) {\n+        ///     let mut carry = 0;\n+        ///     for d in little_endian_digits.iter_mut() {\n+        ///         (*d, carry) = d.carrying_mul(multiplicand, carry);\n+        ///     }\n+        ///     if carry != 0 {\n+        ///         little_endian_digits.push(carry);\n+        ///     }\n+        /// }\n+        ///\n+        /// let mut v = vec![10, 20];\n+        /// scalar_mul_eq(&mut v, 3);\n+        /// assert_eq!(v, [30, 60]);\n+        ///\n+        /// assert_eq!(0x87654321_u64 * 0xFEED, 0x86D3D159E38D);\n+        /// let mut v = vec![0x4321, 0x8765];\n+        /// scalar_mul_eq(&mut v, 0xFEED);\n+        /// assert_eq!(v, [0xE38D, 0xD159, 0x86D3]);\n+        /// ```\n+        ///\n         /// If `carry` is zero, this is similar to [`overflowing_mul`](Self::overflowing_mul),\n         /// except that it gives the value of the overflow instead of just whether one happened:\n         ///"}]}