{"sha": "324b4bcb3caaaa70476d65c86e8d399f09145bab", "node_id": "C_kwDOAAsO6NoAKDMyNGI0YmNiM2NhYWFhNzA0NzZkNjVjODZlOGQzOTlmMDkxNDViYWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-26T15:02:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-26T15:02:23Z"}, "message": "Rollup merge of #91169 - RDambrosio016:master, r=bjorn3\n\nChange cg_ssa's get_param to borrow the builder mutably\n\nThis is a small change to make `get_param` more flexible for codegens that may need to modify things when retrieving function parameters.\n\nThis will currently only be used by [rustc_codegen_nvvm](https://github.com/Rust-GPU/Rust-CUDA) (my own project), but may be useful to more codegens in the future.\n\nThis is needed because cg_nvvm needs to remap certain types to libnvvm-friendly types, such as `i128` -> `<2 x i64>`. Because cg_ssa does not give mutable access to the builder, i resorted to using a mutex:\n```rs\n    fn get_param(&self, index: usize) -> Self::Value {\n        let val = llvm::get_param(self.llfn(), index as c_uint);\n        trace!(\"Get param `{:?}`\", val);\n        unsafe {\n            let llfnty = LLVMRustGetFunctionType(self.llfn());\n            let map = self.remapped_integer_args.borrow();\n            if let Some((_, key)) = map.get(llfnty) {\n                if let Some((_, new_ty)) = key.iter().find(|t| t.0 == index) {\n                    trace!(\"Casting irregular param {:?} to {:?}\", val, new_ty);\n                    return transmute_llval(\n                        *self.llbuilder.lock().unwrap(),\n                        &self.cx,\n                        val,\n                        *new_ty,\n                    );\n                }\n            }\n            val\n        }\n    }\n```\nHowever, i predict this is pretty bad for performance, considering how much builders are called during codegen, so i would greatly appreciate having a more flexible API for this.", "tree": {"sha": "9c4962cfd0cdb8997b2c402e734da1254e1e80e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c4962cfd0cdb8997b2c402e734da1254e1e80e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/324b4bcb3caaaa70476d65c86e8d399f09145bab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhoPb/CRBK7hj4Ov3rIwAAgFYIAGf5afUm75GoX8MQapxpACEg\nWMzrjPyfOra5XQWd7UnzQzV+5EKSvpBptQoQ1ovep2Xg8wipasf7j3B6NgSzCwXO\nMaUB/0ju408p8sS0cZAcQJ1YsWG09AR/AWOwNSdafwcURsDR4PBj20KR3dhyoPGN\noDRfVXlGnfmZYNplXe2dtJXR1rEVFqMGrHOrB9n4ipy8TuXPclSFJunzvtQixXT1\nwJYG/9YQUoMzDkGIMnUbaSzX8CeIf3GVbeVd2HmeXmQN9vLA4krwLrqbo/NlXa+v\n0e5S8xrB5c1BXkSqBgtLoBlax1DX4W16njf0cZS5IBPNb4tIgBFHa6XrH3KqoD0=\n=hSAg\n-----END PGP SIGNATURE-----\n", "payload": "tree 9c4962cfd0cdb8997b2c402e734da1254e1e80e5\nparent 1e79d79dac11ce121b972fbaa0db9b0d1756b991\nparent 870b8311c17fb51139d5cc95fc592bcea85ee6ac\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1637938943 +0100\ncommitter GitHub <noreply@github.com> 1637938943 +0100\n\nRollup merge of #91169 - RDambrosio016:master, r=bjorn3\n\nChange cg_ssa's get_param to borrow the builder mutably\n\nThis is a small change to make `get_param` more flexible for codegens that may need to modify things when retrieving function parameters.\n\nThis will currently only be used by [rustc_codegen_nvvm](https://github.com/Rust-GPU/Rust-CUDA) (my own project), but may be useful to more codegens in the future.\n\nThis is needed because cg_nvvm needs to remap certain types to libnvvm-friendly types, such as `i128` -> `<2 x i64>`. Because cg_ssa does not give mutable access to the builder, i resorted to using a mutex:\n```rs\n    fn get_param(&self, index: usize) -> Self::Value {\n        let val = llvm::get_param(self.llfn(), index as c_uint);\n        trace!(\"Get param `{:?}`\", val);\n        unsafe {\n            let llfnty = LLVMRustGetFunctionType(self.llfn());\n            let map = self.remapped_integer_args.borrow();\n            if let Some((_, key)) = map.get(llfnty) {\n                if let Some((_, new_ty)) = key.iter().find(|t| t.0 == index) {\n                    trace!(\"Casting irregular param {:?} to {:?}\", val, new_ty);\n                    return transmute_llval(\n                        *self.llbuilder.lock().unwrap(),\n                        &self.cx,\n                        val,\n                        *new_ty,\n                    );\n                }\n            }\n            val\n        }\n    }\n```\nHowever, i predict this is pretty bad for performance, considering how much builders are called during codegen, so i would greatly appreciate having a more flexible API for this.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/324b4bcb3caaaa70476d65c86e8d399f09145bab", "html_url": "https://github.com/rust-lang/rust/commit/324b4bcb3caaaa70476d65c86e8d399f09145bab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/324b4bcb3caaaa70476d65c86e8d399f09145bab/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e79d79dac11ce121b972fbaa0db9b0d1756b991", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e79d79dac11ce121b972fbaa0db9b0d1756b991", "html_url": "https://github.com/rust-lang/rust/commit/1e79d79dac11ce121b972fbaa0db9b0d1756b991"}, {"sha": "870b8311c17fb51139d5cc95fc592bcea85ee6ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/870b8311c17fb51139d5cc95fc592bcea85ee6ac", "html_url": "https://github.com/rust-lang/rust/commit/870b8311c17fb51139d5cc95fc592bcea85ee6ac"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "2bbb199c8998285a06d689753102c0be6a0bb4e6", "filename": "compiler/rustc_codegen_gcc/src/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/324b4bcb3caaaa70476d65c86e8d399f09145bab/compiler%2Frustc_codegen_gcc%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/324b4bcb3caaaa70476d65c86e8d399f09145bab/compiler%2Frustc_codegen_gcc%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fabi.rs?ref=324b4bcb3caaaa70476d65c86e8d399f09145bab", "patch": "@@ -14,7 +14,7 @@ impl<'a, 'gcc, 'tcx> AbiBuilderMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n         // TODO(antoyo)\n     }\n \n-    fn get_param(&self, index: usize) -> Self::Value {\n+    fn get_param(&mut self, index: usize) -> Self::Value {\n         self.cx.current_func.borrow().expect(\"current func\")\n             .get_param(index as i32)\n             .to_rvalue()"}, {"sha": "07adfff0901a1963af2da03b8349c7dc72785088", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/324b4bcb3caaaa70476d65c86e8d399f09145bab/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/324b4bcb3caaaa70476d65c86e8d399f09145bab/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=324b4bcb3caaaa70476d65c86e8d399f09145bab", "patch": "@@ -607,7 +607,7 @@ impl AbiBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         fn_abi.apply_attrs_callsite(self, callsite)\n     }\n \n-    fn get_param(&self, index: usize) -> Self::Value {\n+    fn get_param(&mut self, index: usize) -> Self::Value {\n         llvm::get_param(self.llfn(), index as c_uint)\n     }\n }"}, {"sha": "a00d78daf4dcbd0c58a2429a4917c0a2e088aca1", "filename": "compiler/rustc_codegen_ssa/src/traits/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/324b4bcb3caaaa70476d65c86e8d399f09145bab/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/324b4bcb3caaaa70476d65c86e8d399f09145bab/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fabi.rs?ref=324b4bcb3caaaa70476d65c86e8d399f09145bab", "patch": "@@ -4,5 +4,5 @@ use rustc_target::abi::call::FnAbi;\n \n pub trait AbiBuilderMethods<'tcx>: BackendTypes {\n     fn apply_attrs_callsite(&mut self, fn_abi: &FnAbi<'tcx, Ty<'tcx>>, callsite: Self::Value);\n-    fn get_param(&self, index: usize) -> Self::Value;\n+    fn get_param(&mut self, index: usize) -> Self::Value;\n }"}]}