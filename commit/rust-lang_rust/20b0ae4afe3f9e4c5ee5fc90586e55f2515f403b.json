{"sha": "20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b", "node_id": "C_kwDOAAsO6NoAKDIwYjBhZTRhZmUzZjllNGM1ZWU1ZmM5MDU4NmU1NWYyNTE1ZjQwM2I", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-30T21:48:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-30T21:48:23Z"}, "message": "Auto merge of #13857 - WaffleLapkin:yeet, r=Veykril\n\nfeat: Implement yeeting\n\nSee tracking issue: https://github.com/rust-lang/rust/issues/96373\n\nBefore:\n![2022-12-29_03-19](https://user-images.githubusercontent.com/38225716/209884634-e34e98fb-615d-4954-9614-7f9ce6291678.png)\nAfter:\n![2022-12-29_03-21](https://user-images.githubusercontent.com/38225716/209884633-4bba5eba-6dcc-4714-86cb-5c0d1f358364.png)", "tree": {"sha": "7b278d229bd11e6ba45a3747fbf732b2e9f0e67a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b278d229bd11e6ba45a3747fbf732b2e9f0e67a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b", "html_url": "https://github.com/rust-lang/rust/commit/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea8897c9be9e63e5d67ccac47287e5dd7bb0d934", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea8897c9be9e63e5d67ccac47287e5dd7bb0d934", "html_url": "https://github.com/rust-lang/rust/commit/ea8897c9be9e63e5d67ccac47287e5dd7bb0d934"}, {"sha": "346bf5fb5b9ce94b7fa24d466ba82ec709f95286", "url": "https://api.github.com/repos/rust-lang/rust/commits/346bf5fb5b9ce94b7fa24d466ba82ec709f95286", "html_url": "https://github.com/rust-lang/rust/commit/346bf5fb5b9ce94b7fa24d466ba82ec709f95286"}], "stats": {"total": 154, "additions": 145, "deletions": 9}, "files": [{"sha": "e8da24e3addaa535748931aa642eda49cbe67e35", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b", "patch": "@@ -371,6 +371,10 @@ impl ExprCollector<'_> {\n                 let expr = e.expr().map(|e| self.collect_expr(e));\n                 self.alloc_expr(Expr::Yield { expr }, syntax_ptr)\n             }\n+            ast::Expr::YeetExpr(e) => {\n+                let expr = e.expr().map(|e| self.collect_expr(e));\n+                self.alloc_expr(Expr::Yeet { expr }, syntax_ptr)\n+            }\n             ast::Expr::RecordExpr(e) => {\n                 let path =\n                     e.path().and_then(|path| self.expander.parse_path(self.db, path)).map(Box::new);"}, {"sha": "10b9b26bbeaa1bb84dea58feb611034d0df9af2b", "filename": "crates/hir-def/src/body/pretty.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs?ref=20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b", "patch": "@@ -247,6 +247,15 @@ impl<'a> Printer<'a> {\n                     self.print_expr(*expr);\n                 }\n             }\n+            Expr::Yeet { expr } => {\n+                w!(self, \"do\");\n+                self.whitespace();\n+                w!(self, \"yeet\");\n+                if let Some(expr) = expr {\n+                    self.whitespace();\n+                    self.print_expr(*expr);\n+                }\n+            }\n             Expr::RecordLit { path, fields, spread, ellipsis, is_assignee_expr: _ } => {\n                 match path {\n                     Some(path) => self.print_path(path),"}, {"sha": "3066213ace8e71f196b49f4fdf70924d18c648d0", "filename": "crates/hir-def/src/expr.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fhir-def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fhir-def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fexpr.rs?ref=20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b", "patch": "@@ -137,6 +137,9 @@ pub enum Expr {\n     Yield {\n         expr: Option<ExprId>,\n     },\n+    Yeet {\n+        expr: Option<ExprId>,\n+    },\n     RecordLit {\n         path: Option<Box<Path>>,\n         fields: Box<[RecordLitField]>,\n@@ -313,7 +316,10 @@ impl Expr {\n                 arms.iter().map(|arm| arm.expr).for_each(f);\n             }\n             Expr::Continue { .. } => {}\n-            Expr::Break { expr, .. } | Expr::Return { expr } | Expr::Yield { expr } => {\n+            Expr::Break { expr, .. }\n+            | Expr::Return { expr }\n+            | Expr::Yield { expr }\n+            | Expr::Yeet { expr } => {\n                 if let &Some(expr) = expr {\n                     f(expr);\n                 }"}, {"sha": "53fc7a5949d0baa3d452cc3a65efa0515e5ddae0", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b", "patch": "@@ -474,6 +474,12 @@ impl<'a> InferenceContext<'a> {\n                     TyKind::Error.intern(Interner)\n                 }\n             }\n+            Expr::Yeet { expr } => {\n+                if let &Some(expr) = expr {\n+                    self.infer_expr_inner(expr, &Expectation::None);\n+                }\n+                TyKind::Never.intern(Interner)\n+            }\n             Expr::RecordLit { path, fields, spread, .. } => {\n                 let (ty, def_id) = self.resolve_variant(path.as_deref(), false);\n                 if let Some(variant) = def_id {"}, {"sha": "347e87ce9720cafe9e1ab8693e8cf02c3a6ea9cd", "filename": "crates/ide-db/src/syntax_helpers/node_ext.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs?ref=20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b", "patch": "@@ -328,7 +328,8 @@ pub fn for_each_tail_expr(expr: &ast::Expr, cb: &mut dyn FnMut(&ast::Expr)) {\n         | ast::Expr::WhileExpr(_)\n         | ast::Expr::LetExpr(_)\n         | ast::Expr::UnderscoreExpr(_)\n-        | ast::Expr::YieldExpr(_) => cb(expr),\n+        | ast::Expr::YieldExpr(_)\n+        | ast::Expr::YeetExpr(_) => cb(expr),\n     }\n }\n "}, {"sha": "f807ba30f40a3046c4548d6f50d55322b5247169", "filename": "crates/ide/src/signature_help.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fide%2Fsrc%2Fsignature_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fide%2Fsrc%2Fsignature_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsignature_help.rs?ref=20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b", "patch": "@@ -646,7 +646,7 @@ pub fn add_one(x: i32) -> i32 {\n     x + 1\n }\n \n-pub fn do() {\n+pub fn r#do() {\n     add_one($0\n }\"#,\n             expect![[r##\""}, {"sha": "a06c6abf286e2dfa14344b368055f2bcc9fd813e", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b", "patch": "@@ -174,6 +174,7 @@ fn keyword(\n         | T![return]\n         | T![while]\n         | T![yield] => h | HlMod::ControlFlow,\n+        T![do] | T![yeet] if parent_matches::<ast::YeetExpr>(&token) => h | HlMod::ControlFlow,\n         T![for] if parent_matches::<ast::ForExpr>(&token) => h | HlMod::ControlFlow,\n         T![unsafe] => h | HlMod::Unsafe,\n         T![true] | T![false] => HlTag::BoolLiteral.into(),"}, {"sha": "efa3997353bf885c4884aae465790084624ec8e7", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b", "patch": "@@ -48,6 +48,7 @@ pub(super) const ATOM_EXPR_FIRST: TokenSet =\n         T![unsafe],\n         T![return],\n         T![yield],\n+        T![do],\n         T![break],\n         T![continue],\n         T![async],\n@@ -93,6 +94,7 @@ pub(super) fn atom_expr(\n         T![match] => match_expr(p),\n         T![return] => return_expr(p),\n         T![yield] => yield_expr(p),\n+        T![do] if p.nth_at_contextual_kw(1, T![yeet]) => yeet_expr(p),\n         T![continue] => continue_expr(p),\n         T![break] => break_expr(p, r),\n \n@@ -533,6 +535,7 @@ fn return_expr(p: &mut Parser<'_>) -> CompletedMarker {\n     }\n     m.complete(p, RETURN_EXPR)\n }\n+\n // test yield_expr\n // fn foo() {\n //     yield;\n@@ -548,6 +551,23 @@ fn yield_expr(p: &mut Parser<'_>) -> CompletedMarker {\n     m.complete(p, YIELD_EXPR)\n }\n \n+// test yeet_expr\n+// fn foo() {\n+//     do yeet;\n+//     do yeet 1\n+// }\n+fn yeet_expr(p: &mut Parser<'_>) -> CompletedMarker {\n+    assert!(p.at(T![do]));\n+    assert!(p.nth_at_contextual_kw(1, T![yeet]));\n+    let m = p.start();\n+    p.bump(T![do]);\n+    p.bump_remap(T![yeet]);\n+    if p.at_ts(EXPR_FIRST) {\n+        expr(p);\n+    }\n+    m.complete(p, YEET_EXPR)\n+}\n+\n // test continue_expr\n // fn foo() {\n //     loop {"}, {"sha": "48aecb35be128dc48757107bb102d61cbe433df2", "filename": "crates/parser/src/parser.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fparser%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fparser%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fparser.rs?ref=20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b", "patch": "@@ -148,11 +148,16 @@ impl<'t> Parser<'t> {\n         kinds.contains(self.current())\n     }\n \n-    /// Checks if the current token is contextual keyword with text `t`.\n+    /// Checks if the current token is contextual keyword `kw`.\n     pub(crate) fn at_contextual_kw(&self, kw: SyntaxKind) -> bool {\n         self.inp.contextual_kind(self.pos) == kw\n     }\n \n+    /// Checks if the nth token is contextual keyword `kw`.\n+    pub(crate) fn nth_at_contextual_kw(&self, n: usize, kw: SyntaxKind) -> bool {\n+        self.inp.contextual_kind(self.pos + n) == kw\n+    }\n+\n     /// Starts a new node in the syntax tree. All nodes and tokens\n     /// consumed between the `start` and the corresponding `Marker::complete`\n     /// belong to the same node."}, {"sha": "52b3fc23d59ca6b56aa2acabd8f49db266f7b51d", "filename": "crates/parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b", "patch": "@@ -69,6 +69,7 @@ pub enum SyntaxKind {\n     CONST_KW,\n     CONTINUE_KW,\n     CRATE_KW,\n+    DO_KW,\n     DYN_KW,\n     ELSE_KW,\n     ENUM_KW,\n@@ -109,6 +110,7 @@ pub enum SyntaxKind {\n     UNION_KW,\n     RAW_KW,\n     MACRO_RULES_KW,\n+    YEET_KW,\n     INT_NUMBER,\n     FLOAT_NUMBER,\n     CHAR,\n@@ -188,6 +190,7 @@ pub enum SyntaxKind {\n     STMT_LIST,\n     RETURN_EXPR,\n     YIELD_EXPR,\n+    YEET_EXPR,\n     LET_EXPR,\n     UNDERSCORE_EXPR,\n     MACRO_EXPR,\n@@ -272,6 +275,7 @@ impl SyntaxKind {\n                 | CONST_KW\n                 | CONTINUE_KW\n                 | CRATE_KW\n+                | DO_KW\n                 | DYN_KW\n                 | ELSE_KW\n                 | ENUM_KW\n@@ -312,6 +316,7 @@ impl SyntaxKind {\n                 | UNION_KW\n                 | RAW_KW\n                 | MACRO_RULES_KW\n+                | YEET_KW\n         )\n     }\n     pub fn is_punct(self) -> bool {\n@@ -384,6 +389,7 @@ impl SyntaxKind {\n             \"const\" => CONST_KW,\n             \"continue\" => CONTINUE_KW,\n             \"crate\" => CRATE_KW,\n+            \"do\" => DO_KW,\n             \"dyn\" => DYN_KW,\n             \"else\" => ELSE_KW,\n             \"enum\" => ENUM_KW,\n@@ -430,6 +436,7 @@ impl SyntaxKind {\n             \"union\" => UNION_KW,\n             \"raw\" => RAW_KW,\n             \"macro_rules\" => MACRO_RULES_KW,\n+            \"yeet\" => YEET_KW,\n             _ => return None,\n         };\n         Some(kw)\n@@ -470,5 +477,5 @@ impl SyntaxKind {\n     }\n }\n #[macro_export]\n-macro_rules ! T { [;] => { $ crate :: SyntaxKind :: SEMICOLON } ; [,] => { $ crate :: SyntaxKind :: COMMA } ; ['('] => { $ crate :: SyntaxKind :: L_PAREN } ; [')'] => { $ crate :: SyntaxKind :: R_PAREN } ; ['{'] => { $ crate :: SyntaxKind :: L_CURLY } ; ['}'] => { $ crate :: SyntaxKind :: R_CURLY } ; ['['] => { $ crate :: SyntaxKind :: L_BRACK } ; [']'] => { $ crate :: SyntaxKind :: R_BRACK } ; [<] => { $ crate :: SyntaxKind :: L_ANGLE } ; [>] => { $ crate :: SyntaxKind :: R_ANGLE } ; [@] => { $ crate :: SyntaxKind :: AT } ; [#] => { $ crate :: SyntaxKind :: POUND } ; [~] => { $ crate :: SyntaxKind :: TILDE } ; [?] => { $ crate :: SyntaxKind :: QUESTION } ; [$] => { $ crate :: SyntaxKind :: DOLLAR } ; [&] => { $ crate :: SyntaxKind :: AMP } ; [|] => { $ crate :: SyntaxKind :: PIPE } ; [+] => { $ crate :: SyntaxKind :: PLUS } ; [*] => { $ crate :: SyntaxKind :: STAR } ; [/] => { $ crate :: SyntaxKind :: SLASH } ; [^] => { $ crate :: SyntaxKind :: CARET } ; [%] => { $ crate :: SyntaxKind :: PERCENT } ; [_] => { $ crate :: SyntaxKind :: UNDERSCORE } ; [.] => { $ crate :: SyntaxKind :: DOT } ; [..] => { $ crate :: SyntaxKind :: DOT2 } ; [...] => { $ crate :: SyntaxKind :: DOT3 } ; [..=] => { $ crate :: SyntaxKind :: DOT2EQ } ; [:] => { $ crate :: SyntaxKind :: COLON } ; [::] => { $ crate :: SyntaxKind :: COLON2 } ; [=] => { $ crate :: SyntaxKind :: EQ } ; [==] => { $ crate :: SyntaxKind :: EQ2 } ; [=>] => { $ crate :: SyntaxKind :: FAT_ARROW } ; [!] => { $ crate :: SyntaxKind :: BANG } ; [!=] => { $ crate :: SyntaxKind :: NEQ } ; [-] => { $ crate :: SyntaxKind :: MINUS } ; [->] => { $ crate :: SyntaxKind :: THIN_ARROW } ; [<=] => { $ crate :: SyntaxKind :: LTEQ } ; [>=] => { $ crate :: SyntaxKind :: GTEQ } ; [+=] => { $ crate :: SyntaxKind :: PLUSEQ } ; [-=] => { $ crate :: SyntaxKind :: MINUSEQ } ; [|=] => { $ crate :: SyntaxKind :: PIPEEQ } ; [&=] => { $ crate :: SyntaxKind :: AMPEQ } ; [^=] => { $ crate :: SyntaxKind :: CARETEQ } ; [/=] => { $ crate :: SyntaxKind :: SLASHEQ } ; [*=] => { $ crate :: SyntaxKind :: STAREQ } ; [%=] => { $ crate :: SyntaxKind :: PERCENTEQ } ; [&&] => { $ crate :: SyntaxKind :: AMP2 } ; [||] => { $ crate :: SyntaxKind :: PIPE2 } ; [<<] => { $ crate :: SyntaxKind :: SHL } ; [>>] => { $ crate :: SyntaxKind :: SHR } ; [<<=] => { $ crate :: SyntaxKind :: SHLEQ } ; [>>=] => { $ crate :: SyntaxKind :: SHREQ } ; [as] => { $ crate :: SyntaxKind :: AS_KW } ; [async] => { $ crate :: SyntaxKind :: ASYNC_KW } ; [await] => { $ crate :: SyntaxKind :: AWAIT_KW } ; [box] => { $ crate :: SyntaxKind :: BOX_KW } ; [break] => { $ crate :: SyntaxKind :: BREAK_KW } ; [const] => { $ crate :: SyntaxKind :: CONST_KW } ; [continue] => { $ crate :: SyntaxKind :: CONTINUE_KW } ; [crate] => { $ crate :: SyntaxKind :: CRATE_KW } ; [dyn] => { $ crate :: SyntaxKind :: DYN_KW } ; [else] => { $ crate :: SyntaxKind :: ELSE_KW } ; [enum] => { $ crate :: SyntaxKind :: ENUM_KW } ; [extern] => { $ crate :: SyntaxKind :: EXTERN_KW } ; [false] => { $ crate :: SyntaxKind :: FALSE_KW } ; [fn] => { $ crate :: SyntaxKind :: FN_KW } ; [for] => { $ crate :: SyntaxKind :: FOR_KW } ; [if] => { $ crate :: SyntaxKind :: IF_KW } ; [impl] => { $ crate :: SyntaxKind :: IMPL_KW } ; [in] => { $ crate :: SyntaxKind :: IN_KW } ; [let] => { $ crate :: SyntaxKind :: LET_KW } ; [loop] => { $ crate :: SyntaxKind :: LOOP_KW } ; [macro] => { $ crate :: SyntaxKind :: MACRO_KW } ; [match] => { $ crate :: SyntaxKind :: MATCH_KW } ; [mod] => { $ crate :: SyntaxKind :: MOD_KW } ; [move] => { $ crate :: SyntaxKind :: MOVE_KW } ; [mut] => { $ crate :: SyntaxKind :: MUT_KW } ; [pub] => { $ crate :: SyntaxKind :: PUB_KW } ; [ref] => { $ crate :: SyntaxKind :: REF_KW } ; [return] => { $ crate :: SyntaxKind :: RETURN_KW } ; [self] => { $ crate :: SyntaxKind :: SELF_KW } ; [Self] => { $ crate :: SyntaxKind :: SELF_TYPE_KW } ; [static] => { $ crate :: SyntaxKind :: STATIC_KW } ; [struct] => { $ crate :: SyntaxKind :: STRUCT_KW } ; [super] => { $ crate :: SyntaxKind :: SUPER_KW } ; [trait] => { $ crate :: SyntaxKind :: TRAIT_KW } ; [true] => { $ crate :: SyntaxKind :: TRUE_KW } ; [try] => { $ crate :: SyntaxKind :: TRY_KW } ; [type] => { $ crate :: SyntaxKind :: TYPE_KW } ; [unsafe] => { $ crate :: SyntaxKind :: UNSAFE_KW } ; [use] => { $ crate :: SyntaxKind :: USE_KW } ; [where] => { $ crate :: SyntaxKind :: WHERE_KW } ; [while] => { $ crate :: SyntaxKind :: WHILE_KW } ; [yield] => { $ crate :: SyntaxKind :: YIELD_KW } ; [auto] => { $ crate :: SyntaxKind :: AUTO_KW } ; [default] => { $ crate :: SyntaxKind :: DEFAULT_KW } ; [existential] => { $ crate :: SyntaxKind :: EXISTENTIAL_KW } ; [union] => { $ crate :: SyntaxKind :: UNION_KW } ; [raw] => { $ crate :: SyntaxKind :: RAW_KW } ; [macro_rules] => { $ crate :: SyntaxKind :: MACRO_RULES_KW } ; [lifetime_ident] => { $ crate :: SyntaxKind :: LIFETIME_IDENT } ; [ident] => { $ crate :: SyntaxKind :: IDENT } ; [shebang] => { $ crate :: SyntaxKind :: SHEBANG } ; }\n+macro_rules ! T { [;] => { $ crate :: SyntaxKind :: SEMICOLON } ; [,] => { $ crate :: SyntaxKind :: COMMA } ; ['('] => { $ crate :: SyntaxKind :: L_PAREN } ; [')'] => { $ crate :: SyntaxKind :: R_PAREN } ; ['{'] => { $ crate :: SyntaxKind :: L_CURLY } ; ['}'] => { $ crate :: SyntaxKind :: R_CURLY } ; ['['] => { $ crate :: SyntaxKind :: L_BRACK } ; [']'] => { $ crate :: SyntaxKind :: R_BRACK } ; [<] => { $ crate :: SyntaxKind :: L_ANGLE } ; [>] => { $ crate :: SyntaxKind :: R_ANGLE } ; [@] => { $ crate :: SyntaxKind :: AT } ; [#] => { $ crate :: SyntaxKind :: POUND } ; [~] => { $ crate :: SyntaxKind :: TILDE } ; [?] => { $ crate :: SyntaxKind :: QUESTION } ; [$] => { $ crate :: SyntaxKind :: DOLLAR } ; [&] => { $ crate :: SyntaxKind :: AMP } ; [|] => { $ crate :: SyntaxKind :: PIPE } ; [+] => { $ crate :: SyntaxKind :: PLUS } ; [*] => { $ crate :: SyntaxKind :: STAR } ; [/] => { $ crate :: SyntaxKind :: SLASH } ; [^] => { $ crate :: SyntaxKind :: CARET } ; [%] => { $ crate :: SyntaxKind :: PERCENT } ; [_] => { $ crate :: SyntaxKind :: UNDERSCORE } ; [.] => { $ crate :: SyntaxKind :: DOT } ; [..] => { $ crate :: SyntaxKind :: DOT2 } ; [...] => { $ crate :: SyntaxKind :: DOT3 } ; [..=] => { $ crate :: SyntaxKind :: DOT2EQ } ; [:] => { $ crate :: SyntaxKind :: COLON } ; [::] => { $ crate :: SyntaxKind :: COLON2 } ; [=] => { $ crate :: SyntaxKind :: EQ } ; [==] => { $ crate :: SyntaxKind :: EQ2 } ; [=>] => { $ crate :: SyntaxKind :: FAT_ARROW } ; [!] => { $ crate :: SyntaxKind :: BANG } ; [!=] => { $ crate :: SyntaxKind :: NEQ } ; [-] => { $ crate :: SyntaxKind :: MINUS } ; [->] => { $ crate :: SyntaxKind :: THIN_ARROW } ; [<=] => { $ crate :: SyntaxKind :: LTEQ } ; [>=] => { $ crate :: SyntaxKind :: GTEQ } ; [+=] => { $ crate :: SyntaxKind :: PLUSEQ } ; [-=] => { $ crate :: SyntaxKind :: MINUSEQ } ; [|=] => { $ crate :: SyntaxKind :: PIPEEQ } ; [&=] => { $ crate :: SyntaxKind :: AMPEQ } ; [^=] => { $ crate :: SyntaxKind :: CARETEQ } ; [/=] => { $ crate :: SyntaxKind :: SLASHEQ } ; [*=] => { $ crate :: SyntaxKind :: STAREQ } ; [%=] => { $ crate :: SyntaxKind :: PERCENTEQ } ; [&&] => { $ crate :: SyntaxKind :: AMP2 } ; [||] => { $ crate :: SyntaxKind :: PIPE2 } ; [<<] => { $ crate :: SyntaxKind :: SHL } ; [>>] => { $ crate :: SyntaxKind :: SHR } ; [<<=] => { $ crate :: SyntaxKind :: SHLEQ } ; [>>=] => { $ crate :: SyntaxKind :: SHREQ } ; [as] => { $ crate :: SyntaxKind :: AS_KW } ; [async] => { $ crate :: SyntaxKind :: ASYNC_KW } ; [await] => { $ crate :: SyntaxKind :: AWAIT_KW } ; [box] => { $ crate :: SyntaxKind :: BOX_KW } ; [break] => { $ crate :: SyntaxKind :: BREAK_KW } ; [const] => { $ crate :: SyntaxKind :: CONST_KW } ; [continue] => { $ crate :: SyntaxKind :: CONTINUE_KW } ; [crate] => { $ crate :: SyntaxKind :: CRATE_KW } ; [do] => { $ crate :: SyntaxKind :: DO_KW } ; [dyn] => { $ crate :: SyntaxKind :: DYN_KW } ; [else] => { $ crate :: SyntaxKind :: ELSE_KW } ; [enum] => { $ crate :: SyntaxKind :: ENUM_KW } ; [extern] => { $ crate :: SyntaxKind :: EXTERN_KW } ; [false] => { $ crate :: SyntaxKind :: FALSE_KW } ; [fn] => { $ crate :: SyntaxKind :: FN_KW } ; [for] => { $ crate :: SyntaxKind :: FOR_KW } ; [if] => { $ crate :: SyntaxKind :: IF_KW } ; [impl] => { $ crate :: SyntaxKind :: IMPL_KW } ; [in] => { $ crate :: SyntaxKind :: IN_KW } ; [let] => { $ crate :: SyntaxKind :: LET_KW } ; [loop] => { $ crate :: SyntaxKind :: LOOP_KW } ; [macro] => { $ crate :: SyntaxKind :: MACRO_KW } ; [match] => { $ crate :: SyntaxKind :: MATCH_KW } ; [mod] => { $ crate :: SyntaxKind :: MOD_KW } ; [move] => { $ crate :: SyntaxKind :: MOVE_KW } ; [mut] => { $ crate :: SyntaxKind :: MUT_KW } ; [pub] => { $ crate :: SyntaxKind :: PUB_KW } ; [ref] => { $ crate :: SyntaxKind :: REF_KW } ; [return] => { $ crate :: SyntaxKind :: RETURN_KW } ; [self] => { $ crate :: SyntaxKind :: SELF_KW } ; [Self] => { $ crate :: SyntaxKind :: SELF_TYPE_KW } ; [static] => { $ crate :: SyntaxKind :: STATIC_KW } ; [struct] => { $ crate :: SyntaxKind :: STRUCT_KW } ; [super] => { $ crate :: SyntaxKind :: SUPER_KW } ; [trait] => { $ crate :: SyntaxKind :: TRAIT_KW } ; [true] => { $ crate :: SyntaxKind :: TRUE_KW } ; [try] => { $ crate :: SyntaxKind :: TRY_KW } ; [type] => { $ crate :: SyntaxKind :: TYPE_KW } ; [unsafe] => { $ crate :: SyntaxKind :: UNSAFE_KW } ; [use] => { $ crate :: SyntaxKind :: USE_KW } ; [where] => { $ crate :: SyntaxKind :: WHERE_KW } ; [while] => { $ crate :: SyntaxKind :: WHILE_KW } ; [yield] => { $ crate :: SyntaxKind :: YIELD_KW } ; [auto] => { $ crate :: SyntaxKind :: AUTO_KW } ; [default] => { $ crate :: SyntaxKind :: DEFAULT_KW } ; [existential] => { $ crate :: SyntaxKind :: EXISTENTIAL_KW } ; [union] => { $ crate :: SyntaxKind :: UNION_KW } ; [raw] => { $ crate :: SyntaxKind :: RAW_KW } ; [macro_rules] => { $ crate :: SyntaxKind :: MACRO_RULES_KW } ; [yeet] => { $ crate :: SyntaxKind :: YEET_KW } ; [lifetime_ident] => { $ crate :: SyntaxKind :: LIFETIME_IDENT } ; [ident] => { $ crate :: SyntaxKind :: IDENT } ; [shebang] => { $ crate :: SyntaxKind :: SHEBANG } ; }\n pub use T;"}, {"sha": "24931bfcd7cd31016b0b58570b4fa4ff4464a3bb", "filename": "crates/parser/test_data/parser/inline/ok/0204_yeet_expr.rast", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0204_yeet_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0204_yeet_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0204_yeet_expr.rast?ref=20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b", "patch": "@@ -0,0 +1,31 @@\n+SOURCE_FILE\n+  FN\n+    FN_KW \"fn\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"foo\"\n+    PARAM_LIST\n+      L_PAREN \"(\"\n+      R_PAREN \")\"\n+    WHITESPACE \" \"\n+    BLOCK_EXPR\n+      STMT_LIST\n+        L_CURLY \"{\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          YEET_EXPR\n+            DO_KW \"do\"\n+            WHITESPACE \" \"\n+            YEET_KW \"yeet\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        YEET_EXPR\n+          DO_KW \"do\"\n+          WHITESPACE \" \"\n+          YEET_KW \"yeet\"\n+          WHITESPACE \" \"\n+          LITERAL\n+            INT_NUMBER \"1\"\n+        WHITESPACE \"\\n\"\n+        R_CURLY \"}\"\n+  WHITESPACE \"\\n\""}, {"sha": "624f86c9dc0da4a1b8ed4614216d839fd8afef39", "filename": "crates/parser/test_data/parser/inline/ok/0204_yeet_expr.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0204_yeet_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0204_yeet_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0204_yeet_expr.rs?ref=20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b", "patch": "@@ -0,0 +1,4 @@\n+fn foo() {\n+    do yeet;\n+    do yeet 1\n+}"}, {"sha": "2c67586a3905da43c02cdb4bea90cad620ae0680", "filename": "crates/syntax/rust.ungram", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fsyntax%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fsyntax%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Frust.ungram?ref=20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b", "patch": "@@ -359,6 +359,7 @@ Expr =\n | TupleExpr\n | WhileExpr\n | YieldExpr\n+| YeetExpr\n | LetExpr\n | UnderscoreExpr\n \n@@ -503,6 +504,9 @@ ReturnExpr =\n YieldExpr =\n   Attr* 'yield' Expr?\n \n+YeetExpr =\n+  Attr* 'do' 'yeet' Expr?\n+\n LetExpr =\n   Attr* 'let' Pat '=' Expr\n "}, {"sha": "86d222723d50bdd40b7a0a4cf39c8f4326266e39", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b", "patch": "@@ -1063,6 +1063,17 @@ impl YieldExpr {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct YeetExpr {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ast::HasAttrs for YeetExpr {}\n+impl YeetExpr {\n+    pub fn do_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![do]) }\n+    pub fn yeet_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![yeet]) }\n+    pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct LetExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -1541,6 +1552,7 @@ pub enum Expr {\n     TupleExpr(TupleExpr),\n     WhileExpr(WhileExpr),\n     YieldExpr(YieldExpr),\n+    YeetExpr(YeetExpr),\n     LetExpr(LetExpr),\n     UnderscoreExpr(UnderscoreExpr),\n }\n@@ -2694,6 +2706,17 @@ impl AstNode for YieldExpr {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for YeetExpr {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == YEET_EXPR }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for LetExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == LET_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3382,6 +3405,9 @@ impl From<WhileExpr> for Expr {\n impl From<YieldExpr> for Expr {\n     fn from(node: YieldExpr) -> Expr { Expr::YieldExpr(node) }\n }\n+impl From<YeetExpr> for Expr {\n+    fn from(node: YeetExpr) -> Expr { Expr::YeetExpr(node) }\n+}\n impl From<LetExpr> for Expr {\n     fn from(node: LetExpr) -> Expr { Expr::LetExpr(node) }\n }\n@@ -3422,6 +3448,7 @@ impl AstNode for Expr {\n                 | TUPLE_EXPR\n                 | WHILE_EXPR\n                 | YIELD_EXPR\n+                | YEET_EXPR\n                 | LET_EXPR\n                 | UNDERSCORE_EXPR\n         )\n@@ -3458,6 +3485,7 @@ impl AstNode for Expr {\n             TUPLE_EXPR => Expr::TupleExpr(TupleExpr { syntax }),\n             WHILE_EXPR => Expr::WhileExpr(WhileExpr { syntax }),\n             YIELD_EXPR => Expr::YieldExpr(YieldExpr { syntax }),\n+            YEET_EXPR => Expr::YeetExpr(YeetExpr { syntax }),\n             LET_EXPR => Expr::LetExpr(LetExpr { syntax }),\n             UNDERSCORE_EXPR => Expr::UnderscoreExpr(UnderscoreExpr { syntax }),\n             _ => return None,\n@@ -3496,6 +3524,7 @@ impl AstNode for Expr {\n             Expr::TupleExpr(it) => &it.syntax,\n             Expr::WhileExpr(it) => &it.syntax,\n             Expr::YieldExpr(it) => &it.syntax,\n+            Expr::YeetExpr(it) => &it.syntax,\n             Expr::LetExpr(it) => &it.syntax,\n             Expr::UnderscoreExpr(it) => &it.syntax,\n         }\n@@ -3963,6 +3992,7 @@ impl AstNode for AnyHasAttrs {\n                 | TUPLE_EXPR\n                 | WHILE_EXPR\n                 | YIELD_EXPR\n+                | YEET_EXPR\n                 | LET_EXPR\n                 | UNDERSCORE_EXPR\n                 | STMT_LIST\n@@ -4655,6 +4685,11 @@ impl std::fmt::Display for YieldExpr {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for YeetExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for LetExpr {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "4ec388914e604d8aa4d71092557784681a3034a5", "filename": "crates/syntax/src/ast/prec.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fsyntax%2Fsrc%2Fast%2Fprec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fsyntax%2Fsrc%2Fast%2Fprec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fprec.rs?ref=20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b", "patch": "@@ -130,7 +130,7 @@ impl Expr {\n             //\n             ContinueExpr(_) => (0, 0),\n \n-            ClosureExpr(_) | ReturnExpr(_) | YieldExpr(_) | BreakExpr(_) => (0, 1),\n+            ClosureExpr(_) | ReturnExpr(_) | YieldExpr(_) | YeetExpr(_) | BreakExpr(_) => (0, 1),\n \n             RangeExpr(_) => (5, 5),\n \n@@ -291,6 +291,7 @@ impl Expr {\n                 ReturnExpr(e) => e.return_token(),\n                 TryExpr(e) => e.question_mark_token(),\n                 YieldExpr(e) => e.yield_token(),\n+                YeetExpr(e) => e.do_token(),\n                 LetExpr(e) => e.let_token(),\n \n                 ArrayExpr(_) | TupleExpr(_) | Literal(_) | PathExpr(_) | ParenExpr(_)\n@@ -313,7 +314,8 @@ impl Expr {\n \n             // For BinExpr and RangeExpr this is technically wrong -- the child can be on the left...\n             BinExpr(_) | RangeExpr(_) | BoxExpr(_) | BreakExpr(_) | ContinueExpr(_)\n-            | PrefixExpr(_) | RefExpr(_) | ReturnExpr(_) | YieldExpr(_) | LetExpr(_) => self\n+            | PrefixExpr(_) | RefExpr(_) | ReturnExpr(_) | YieldExpr(_) | YeetExpr(_)\n+            | LetExpr(_) => self\n                 .syntax()\n                 .parent()\n                 .and_then(Expr::cast)"}, {"sha": "3ff6e03006b5a1aeb938c63634b7578bef9a5a6c", "filename": "crates/syntax/src/tests/ast_src.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs?ref=20b0ae4afe3f9e4c5ee5fc90586e55f2515f403b", "patch": "@@ -65,12 +65,12 @@ pub(crate) const KINDS_SRC: KindsSrc<'_> = KindsSrc {\n         (\">>=\", \"SHREQ\"),\n     ],\n     keywords: &[\n-        \"as\", \"async\", \"await\", \"box\", \"break\", \"const\", \"continue\", \"crate\", \"dyn\", \"else\",\n+        \"as\", \"async\", \"await\", \"box\", \"break\", \"const\", \"continue\", \"crate\", \"do\", \"dyn\", \"else\",\n         \"enum\", \"extern\", \"false\", \"fn\", \"for\", \"if\", \"impl\", \"in\", \"let\", \"loop\", \"macro\",\n         \"match\", \"mod\", \"move\", \"mut\", \"pub\", \"ref\", \"return\", \"self\", \"Self\", \"static\", \"struct\",\n         \"super\", \"trait\", \"true\", \"try\", \"type\", \"unsafe\", \"use\", \"where\", \"while\", \"yield\",\n     ],\n-    contextual_keywords: &[\"auto\", \"default\", \"existential\", \"union\", \"raw\", \"macro_rules\"],\n+    contextual_keywords: &[\"auto\", \"default\", \"existential\", \"union\", \"raw\", \"macro_rules\", \"yeet\"],\n     literals: &[\"INT_NUMBER\", \"FLOAT_NUMBER\", \"CHAR\", \"BYTE\", \"STRING\", \"BYTE_STRING\"],\n     tokens: &[\"ERROR\", \"IDENT\", \"WHITESPACE\", \"LIFETIME_IDENT\", \"COMMENT\", \"SHEBANG\"],\n     nodes: &[\n@@ -142,6 +142,7 @@ pub(crate) const KINDS_SRC: KindsSrc<'_> = KindsSrc {\n         \"STMT_LIST\",\n         \"RETURN_EXPR\",\n         \"YIELD_EXPR\",\n+        \"YEET_EXPR\",\n         \"LET_EXPR\",\n         \"UNDERSCORE_EXPR\",\n         \"MACRO_EXPR\","}]}