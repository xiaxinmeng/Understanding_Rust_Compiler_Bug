{"sha": "645a7b77b6e2eae08e0db3b2cb29ca1040c8a9d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NWE3Yjc3YjZlMmVhZTA4ZTBkYjNiMmNiMjljYTEwNDBjOGE5ZDg=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-17T08:56:36Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-17T08:56:36Z"}, "message": "Merge #1158\n\n1158: cleanup cancellation r=matklad a=matklad\n\nNow that we explicitelly exit the reading loop on exit notification,\r\nwe can assume that the sender is always alive\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "6018c66b0b56449b4a2114612d71776549ee3ab1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6018c66b0b56449b4a2114612d71776549ee3ab1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/645a7b77b6e2eae08e0db3b2cb29ca1040c8a9d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/645a7b77b6e2eae08e0db3b2cb29ca1040c8a9d8", "html_url": "https://github.com/rust-lang/rust/commit/645a7b77b6e2eae08e0db3b2cb29ca1040c8a9d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/645a7b77b6e2eae08e0db3b2cb29ca1040c8a9d8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "d3afb1b3782683c3e800b38b4c24b7581918fb7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3afb1b3782683c3e800b38b4c24b7581918fb7f", "html_url": "https://github.com/rust-lang/rust/commit/d3afb1b3782683c3e800b38b4c24b7581918fb7f"}, {"sha": "f75feb67244c279e75a4e8c9996a72eed729d321", "url": "https://api.github.com/repos/rust-lang/rust/commits/f75feb67244c279e75a4e8c9996a72eed729d321", "html_url": "https://github.com/rust-lang/rust/commit/f75feb67244c279e75a4e8c9996a72eed729d321"}], "stats": {"total": 19, "additions": 6, "deletions": 13}, "files": [{"sha": "2d6418400a36bb4aff0b17b43e7cf8c882f22bb5", "filename": "crates/gen_lsp_server/src/stdio.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/645a7b77b6e2eae08e0db3b2cb29ca1040c8a9d8/crates%2Fgen_lsp_server%2Fsrc%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645a7b77b6e2eae08e0db3b2cb29ca1040c8a9d8/crates%2Fgen_lsp_server%2Fsrc%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fsrc%2Fstdio.rs?ref=645a7b77b6e2eae08e0db3b2cb29ca1040c8a9d8", "patch": "@@ -27,9 +27,7 @@ pub fn stdio_transport() -> (Receiver<RawMessage>, Sender<RawMessage>, Threads)\n                 _ => false,\n             };\n \n-            if let Err(_) = reader_sender.send(msg) {\n-                break;\n-            }\n+            reader_sender.send(msg).unwrap();\n \n             if is_exit {\n                 break;"}, {"sha": "d68182174b34e18f0627c5fbf7f0c1b233c59094", "filename": "crates/ra_lsp_server/tests/heavy_tests/support.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/645a7b77b6e2eae08e0db3b2cb29ca1040c8a9d8/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645a7b77b6e2eae08e0db3b2cb29ca1040c8a9d8/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=645a7b77b6e2eae08e0db3b2cb29ca1040c8a9d8", "patch": "@@ -77,7 +77,7 @@ pub struct Server {\n     req_id: Cell<u64>,\n     messages: RefCell<Vec<RawMessage>>,\n     dir: TempDir,\n-    worker: Option<Worker<RawMessage, RawMessage>>,\n+    worker: Worker<RawMessage, RawMessage>,\n }\n \n impl Server {\n@@ -99,12 +99,7 @@ impl Server {\n                 .unwrap()\n             },\n         );\n-        let res = Server {\n-            req_id: Cell::new(1),\n-            dir,\n-            messages: Default::default(),\n-            worker: Some(worker),\n-        };\n+        let res = Server { req_id: Cell::new(1), dir, messages: Default::default(), worker };\n \n         for (path, text) in files {\n             res.send_notification(RawNotification::new::<DidOpenTextDocument>(\n@@ -157,7 +152,7 @@ impl Server {\n     }\n     fn send_request_(&self, r: RawRequest) -> Value {\n         let id = r.id;\n-        self.worker.as_ref().unwrap().sender().send(RawMessage::Request(r)).unwrap();\n+        self.worker.sender().send(RawMessage::Request(r)).unwrap();\n         while let Some(msg) = self.recv() {\n             match msg {\n                 RawMessage::Request(req) => panic!(\"unexpected request: {:?}\", req),\n@@ -197,13 +192,13 @@ impl Server {\n         }\n     }\n     fn recv(&self) -> Option<RawMessage> {\n-        recv_timeout(&self.worker.as_ref().unwrap().receiver()).map(|msg| {\n+        recv_timeout(&self.worker.receiver()).map(|msg| {\n             self.messages.borrow_mut().push(msg.clone());\n             msg\n         })\n     }\n     fn send_notification(&self, not: RawNotification) {\n-        self.worker.as_ref().unwrap().sender().send(RawMessage::Notification(not)).unwrap();\n+        self.worker.sender().send(RawMessage::Notification(not)).unwrap();\n     }\n \n     pub fn path(&self) -> &Path {"}]}