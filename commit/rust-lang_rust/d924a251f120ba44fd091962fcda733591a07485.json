{"sha": "d924a251f120ba44fd091962fcda733591a07485", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MjRhMjUxZjEyMGJhNDRmZDA5MTk2MmZjZGE3MzM1OTFhMDc0ODU=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-17T18:04:06Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-19T15:03:22Z"}, "message": "Use a constructor function per dep node instead of an enum and a single function", "tree": {"sha": "56e29c508093e2b050f30330a528c150614d3ec9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56e29c508093e2b050f30330a528c150614d3ec9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d924a251f120ba44fd091962fcda733591a07485", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d924a251f120ba44fd091962fcda733591a07485", "html_url": "https://github.com/rust-lang/rust/commit/d924a251f120ba44fd091962fcda733591a07485", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d924a251f120ba44fd091962fcda733591a07485/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b248767a0740b2031500ad62078f79d9eeb652aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/b248767a0740b2031500ad62078f79d9eeb652aa", "html_url": "https://github.com/rust-lang/rust/commit/b248767a0740b2031500ad62078f79d9eeb652aa"}], "stats": {"total": 98, "additions": 41, "deletions": 57}, "files": [{"sha": "eb7e2871bfcd8371b6c1c3414559fe1b2c89c269", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 36, "deletions": 50, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/d924a251f120ba44fd091962fcda733591a07485/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d924a251f120ba44fd091962fcda733591a07485/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=d924a251f120ba44fd091962fcda733591a07485", "patch": "@@ -76,10 +76,6 @@ macro_rules! erase {\n     ($x:tt) => {{}};\n }\n \n-macro_rules! replace {\n-    ($x:tt with $($y:tt)*) => ($($y)*)\n-}\n-\n macro_rules! is_anon_attr {\n     (anon) => {\n         true\n@@ -175,10 +171,43 @@ macro_rules! define_dep_nodes {\n             }\n         }\n \n-        pub enum DepConstructor<$tcx> {\n+        pub struct DepConstructor;\n+\n+        impl DepConstructor {\n             $(\n-                $variant $(( $tuple_arg_ty ))*\n-            ),*\n+                #[inline(always)]\n+                #[allow(unreachable_code, non_snake_case)]\n+                pub fn $variant<'tcx>(_tcx: TyCtxt<'tcx>, $(arg: $tuple_arg_ty)*) -> DepNode {\n+                    // tuple args\n+                    $({\n+                        erase!($tuple_arg_ty);\n+                        let hash = DepNodeParams::to_fingerprint(&arg, _tcx);\n+                        let dep_node = DepNode {\n+                            kind: DepKind::$variant,\n+                            hash\n+                        };\n+\n+                        #[cfg(debug_assertions)]\n+                        {\n+                            if !dep_node.kind.can_reconstruct_query_key() &&\n+                            (_tcx.sess.opts.debugging_opts.incremental_info ||\n+                                _tcx.sess.opts.debugging_opts.query_dep_graph)\n+                            {\n+                                _tcx.dep_graph.register_dep_node_debug_str(dep_node, || {\n+                                    arg.to_debug_str(_tcx)\n+                                });\n+                            }\n+                        }\n+\n+                        return dep_node;\n+                    })*\n+\n+                    DepNode {\n+                        kind: DepKind::$variant,\n+                        hash: Fingerprint::ZERO,\n+                    }\n+                }\n+            )*\n         }\n \n         #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash,\n@@ -189,49 +218,6 @@ macro_rules! define_dep_nodes {\n         }\n \n         impl DepNode {\n-            #[allow(unreachable_code, non_snake_case)]\n-            pub fn new<'tcx>(tcx: TyCtxt<'tcx>,\n-                                       dep: DepConstructor<'tcx>)\n-                                       -> DepNode\n-            {\n-                match dep {\n-                    $(\n-                        DepConstructor :: $variant $(( replace!(($tuple_arg_ty) with arg) ))*\n-                            =>\n-                        {\n-                            // tuple args\n-                            $({\n-                                erase!($tuple_arg_ty);\n-                                let hash = DepNodeParams::to_fingerprint(&arg, tcx);\n-                                let dep_node = DepNode {\n-                                    kind: DepKind::$variant,\n-                                    hash\n-                                };\n-\n-                                #[cfg(debug_assertions)]\n-                                {\n-                                    if !dep_node.kind.can_reconstruct_query_key() &&\n-                                    (tcx.sess.opts.debugging_opts.incremental_info ||\n-                                        tcx.sess.opts.debugging_opts.query_dep_graph)\n-                                    {\n-                                        tcx.dep_graph.register_dep_node_debug_str(dep_node, || {\n-                                            arg.to_debug_str(tcx)\n-                                        });\n-                                    }\n-                                }\n-\n-                                return dep_node;\n-                            })*\n-\n-                            DepNode {\n-                                kind: DepKind::$variant,\n-                                hash: Fingerprint::ZERO,\n-                            }\n-                        }\n-                    )*\n-                }\n-            }\n-\n             /// Construct a DepNode from the given DepKind and DefPathHash. This\n             /// method will assert that the given DepKind actually requires a\n             /// single DefId/DefPathHash parameter."}, {"sha": "9a3ddfb0e82c9f583cf75c3357eec00379651a1b", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d924a251f120ba44fd091962fcda733591a07485/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d924a251f120ba44fd091962fcda733591a07485/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=d924a251f120ba44fd091962fcda733591a07485", "patch": "@@ -362,7 +362,7 @@ impl<'tcx> CodegenUnit<'tcx> {\n     }\n \n     pub fn codegen_dep_node(&self, tcx: TyCtxt<'tcx>) -> DepNode {\n-        DepNode::new(tcx, DepConstructor::CompileCodegenUnit(self.name()))\n+        DepConstructor::CompileCodegenUnit(tcx, self.name())\n     }\n }\n "}, {"sha": "e59738d8886081f581e93a2153b157fc3c372b93", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d924a251f120ba44fd091962fcda733591a07485/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d924a251f120ba44fd091962fcda733591a07485/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=d924a251f120ba44fd091962fcda733591a07485", "patch": "@@ -2,7 +2,7 @@\n \n use crate::arena::Arena;\n use crate::dep_graph::DepGraph;\n-use crate::dep_graph::{self, DepConstructor, DepNode};\n+use crate::dep_graph::{self, DepConstructor};\n use crate::hir::exports::Export;\n use crate::hir::map as hir_map;\n use crate::hir::map::DefPathHash;\n@@ -1347,7 +1347,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         // We cannot use the query versions of crates() and crate_hash(), since\n         // those would need the DepNodes that we are allocating here.\n         for cnum in self.cstore.crates_untracked() {\n-            let dep_node = DepNode::new(self, DepConstructor::CrateMetadata(cnum));\n+            let dep_node = DepConstructor::CrateMetadata(self, cnum);\n             let crate_hash = self.cstore.crate_hash_untracked(cnum);\n             self.dep_graph.with_task(\n                 dep_node,"}, {"sha": "381a7b1f03ff73388bdd0cb5b7be41acac3cfdf8", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d924a251f120ba44fd091962fcda733591a07485/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d924a251f120ba44fd091962fcda733591a07485/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=d924a251f120ba44fd091962fcda733591a07485", "patch": "@@ -1,4 +1,4 @@\n-use crate::dep_graph::{self, DepNode};\n+use crate::dep_graph::{self, DepConstructor, DepNode};\n use crate::hir::exports::Export;\n use crate::infer::canonical::{self, Canonical};\n use crate::lint::LintLevelMap;"}, {"sha": "a61256b9fcbbc82652c873c20ef15ebd62c17d2e", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d924a251f120ba44fd091962fcda733591a07485/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d924a251f120ba44fd091962fcda733591a07485/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=d924a251f120ba44fd091962fcda733591a07485", "patch": "@@ -987,9 +987,7 @@ macro_rules! define_queries_inner {\n             #[allow(unused)]\n             #[inline(always)]\n             fn to_dep_node(tcx: TyCtxt<$tcx>, key: &Self::Key) -> DepNode {\n-                use crate::dep_graph::DepConstructor::*;\n-\n-                DepNode::new(tcx, $node(*key))\n+                DepConstructor::$node(tcx, *key)\n             }\n \n             #[inline(always)]"}]}