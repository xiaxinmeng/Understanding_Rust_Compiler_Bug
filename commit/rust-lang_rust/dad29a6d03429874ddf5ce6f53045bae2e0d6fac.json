{"sha": "dad29a6d03429874ddf5ce6f53045bae2e0d6fac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZDI5YTZkMDM0Mjk4NzRkZGY1Y2U2ZjUzMDQ1YmFlMmUwZDZmYWM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-07-24T14:07:06Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-07-24T14:07:06Z"}, "message": "Add missing links", "tree": {"sha": "ffbe264656b1ed6cc1e6af37fb81f933478580ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffbe264656b1ed6cc1e6af37fb81f933478580ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dad29a6d03429874ddf5ce6f53045bae2e0d6fac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dad29a6d03429874ddf5ce6f53045bae2e0d6fac", "html_url": "https://github.com/rust-lang/rust/commit/dad29a6d03429874ddf5ce6f53045bae2e0d6fac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dad29a6d03429874ddf5ce6f53045bae2e0d6fac/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c50f4e484d1c871538ee99032ec2986177b8062", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c50f4e484d1c871538ee99032ec2986177b8062", "html_url": "https://github.com/rust-lang/rust/commit/2c50f4e484d1c871538ee99032ec2986177b8062"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "d1453b05a791dc850534b7ee65798604b18fc350", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/dad29a6d03429874ddf5ce6f53045bae2e0d6fac/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad29a6d03429874ddf5ce6f53045bae2e0d6fac/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=dad29a6d03429874ddf5ce6f53045bae2e0d6fac", "patch": "@@ -58,28 +58,37 @@ pub struct File {\n \n /// Metadata information about a file.\n ///\n-/// This structure is returned from the `metadata` function or method and\n+/// This structure is returned from the [`metadata`] function or method and\n /// represents known metadata about a file such as its permissions, size,\n /// modification times, etc.\n+///\n+/// [`metadata`]: fn.metadata.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct Metadata(fs_imp::FileAttr);\n \n /// Iterator over the entries in a directory.\n ///\n-/// This iterator is returned from the `read_dir` function of this module and\n-/// will yield instances of `io::Result<DirEntry>`. Through a `DirEntry`\n+/// This iterator is returned from the [`read_dir`] function of this module and\n+/// will yield instances of `io::Result<DirEntry>`. Through a [`DirEntry`]\n /// information like the entry's path and possibly other metadata can be\n /// learned.\n ///\n+/// [`read_dir`]: fn.read_dir.html\n+/// [`DirEntry`]: struct.DirEntry.html\n+///\n /// # Errors\n ///\n-/// This `io::Result` will be an `Err` if there's some sort of intermittent\n+/// This [`io::Result`] will be an `Err` if there's some sort of intermittent\n /// IO error during iteration.\n+///\n+/// [`io::Result`]: ../io/type.Result.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ReadDir(fs_imp::ReadDir);\n \n-/// Entries returned by the `ReadDir` iterator.\n+/// Entries returned by the [`ReadDir`] iterator.\n+///\n+/// [`ReadDir`]: struct.ReadDir.html\n ///\n /// An instance of `DirEntry` represents an entry inside of a directory on the\n /// filesystem. Each entry can be inspected via methods to learn about the full\n@@ -89,17 +98,23 @@ pub struct DirEntry(fs_imp::DirEntry);\n \n /// Options and flags which can be used to configure how a file is opened.\n ///\n-/// This builder exposes the ability to configure how a `File` is opened and\n-/// what operations are permitted on the open file. The `File::open` and\n-/// `File::create` methods are aliases for commonly used options using this\n+/// This builder exposes the ability to configure how a [`File`] is opened and\n+/// what operations are permitted on the open file. The [`File::open`] and\n+/// [`File::create`] methods are aliases for commonly used options using this\n /// builder.\n ///\n-/// Generally speaking, when using `OpenOptions`, you'll first call `new()`,\n-/// then chain calls to methods to set each option, then call `open()`, passing\n-/// the path of the file you're trying to open. This will give you a\n+/// [`File`]: struct.File.html\n+/// [`File::open`]: struct.File.html#method.open\n+/// [`File::create`]: struct.File.html#method.create\n+///\n+/// Generally speaking, when using `OpenOptions`, you'll first call [`new()`],\n+/// then chain calls to methods to set each option, then call [`open()`],\n+/// passing the path of the file you're trying to open. This will give you a\n /// [`io::Result`][result] with a [`File`][file] inside that you can further\n /// operate on.\n ///\n+/// [`new()`]: struct.OpenOptions.html#method.new\n+/// [`open()`]: struct.OpenOptions.html#method.open\n /// [result]: ../io/type.Result.html\n /// [file]: struct.File.html\n ///\n@@ -131,10 +146,12 @@ pub struct OpenOptions(fs_imp::OpenOptions);\n \n /// Representation of the various permissions on a file.\n ///\n-/// This module only currently provides one bit of information, `readonly`,\n+/// This module only currently provides one bit of information, [`readonly`],\n /// which is exposed on all currently supported platforms. Unix-specific\n /// functionality, such as mode bits, is available through the\n /// `os::unix::PermissionsExt` trait.\n+///\n+/// [`readonly`]: struct.Permissions.html#method.readonly\n #[derive(Clone, PartialEq, Eq, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Permissions(fs_imp::FilePermissions);"}]}