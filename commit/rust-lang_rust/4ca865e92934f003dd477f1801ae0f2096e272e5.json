{"sha": "4ca865e92934f003dd477f1801ae0f2096e272e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjYTg2NWU5MjkzNGYwMDNkZDQ3N2YxODAxYWUwZjIwOTZlMjcyZTU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-25T07:01:35Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-25T07:01:35Z"}, "message": "heading # Unsafety => # Safety in stdlib docs.", "tree": {"sha": "1ba131990f7329db2c64ac364037772d4ee86918", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ba131990f7329db2c64ac364037772d4ee86918"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ca865e92934f003dd477f1801ae0f2096e272e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ca865e92934f003dd477f1801ae0f2096e272e5", "html_url": "https://github.com/rust-lang/rust/commit/4ca865e92934f003dd477f1801ae0f2096e272e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ca865e92934f003dd477f1801ae0f2096e272e5/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1911babed0364ede7dedc646dbca63fac03d5c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1911babed0364ede7dedc646dbca63fac03d5c5", "html_url": "https://github.com/rust-lang/rust/commit/c1911babed0364ede7dedc646dbca63fac03d5c5"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "e842020561d35a9c4aeb47783208259fe18d8e33", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ca865e92934f003dd477f1801ae0f2096e272e5/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca865e92934f003dd477f1801ae0f2096e272e5/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=4ca865e92934f003dd477f1801ae0f2096e272e5", "patch": "@@ -420,7 +420,7 @@ impl fmt::Display for CannotReallocInPlace {\n /// }\n /// ```\n ///\n-/// # Unsafety\n+/// # Safety\n ///\n /// The `GlobalAlloc` trait is an `unsafe` trait for a number of reasons, and\n /// implementors must ensure that they adhere to these contracts:\n@@ -643,7 +643,7 @@ pub unsafe trait GlobalAlloc {\n ///    currently allocated via an allocator `a`, then it is legal to\n ///    use that layout to deallocate it, i.e., `a.dealloc(ptr, k);`.\n ///\n-/// # Unsafety\n+/// # Safety\n ///\n /// The `Alloc` trait is an `unsafe` trait for a number of reasons, and\n /// implementors must ensure that they adhere to these contracts:"}, {"sha": "f41d293e80ad3da86b45c6a069734d50eff5a892", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ca865e92934f003dd477f1801ae0f2096e272e5/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca865e92934f003dd477f1801ae0f2096e272e5/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=4ca865e92934f003dd477f1801ae0f2096e272e5", "patch": "@@ -1173,7 +1173,7 @@ impl<T> MaybeUninit<T> {\n     /// to ensure that the data will get dropped, because the resulting `T` is\n     /// subject to the usual drop handling.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// It is up to the caller to guarantee that the `MaybeUninit` really is in an initialized\n     /// state. Calling this when the content is not yet fully initialized causes undefined\n@@ -1187,7 +1187,7 @@ impl<T> MaybeUninit<T> {\n \n     /// Gets a reference to the contained value.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// It is up to the caller to guarantee that the `MaybeUninit` really is in an initialized\n     /// state. Calling this when the content is not yet fully initialized causes undefined\n@@ -1200,7 +1200,7 @@ impl<T> MaybeUninit<T> {\n \n     /// Gets a mutable reference to the contained value.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// It is up to the caller to guarantee that the `MaybeUninit` really is in an initialized\n     /// state. Calling this when the content is not yet fully initialized causes undefined"}, {"sha": "2063f8ffaf65a8c5a5a826672815e08ca45aabac", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ca865e92934f003dd477f1801ae0f2096e272e5/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca865e92934f003dd477f1801ae0f2096e272e5/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=4ca865e92934f003dd477f1801ae0f2096e272e5", "patch": "@@ -2158,7 +2158,7 @@ impl<T> [T] {\n     /// This method has no purpose when either input element `T` or output element `U` are\n     /// zero-sized and will return the original slice without splitting anything.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This method is essentially a `transmute` with respect to the elements in the returned\n     /// middle slice, so all the usual caveats pertaining to `transmute::<T, U>` also apply here.\n@@ -2211,7 +2211,7 @@ impl<T> [T] {\n     /// This method has no purpose when either input element `T` or output element `U` are\n     /// zero-sized and will return the original slice without splitting anything.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This method is essentially a `transmute` with respect to the elements in the returned\n     /// middle slice, so all the usual caveats pertaining to `transmute::<T, U>` also apply here."}]}