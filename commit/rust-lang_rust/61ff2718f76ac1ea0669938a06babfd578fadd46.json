{"sha": "61ff2718f76ac1ea0669938a06babfd578fadd46", "node_id": "C_kwDOAAsO6NoAKDYxZmYyNzE4Zjc2YWMxZWEwNjY5OTM4YTA2YmFiZmQ1NzhmYWRkNDY", "commit": {"author": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-03-29T20:18:20Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-05-10T17:36:02Z"}, "message": "Adjust tests for new drop and forget lints", "tree": {"sha": "7d90536b4173c04ece9cc0a94c45a9a278b10782", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d90536b4173c04ece9cc0a94c45a9a278b10782"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61ff2718f76ac1ea0669938a06babfd578fadd46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61ff2718f76ac1ea0669938a06babfd578fadd46", "html_url": "https://github.com/rust-lang/rust/commit/61ff2718f76ac1ea0669938a06babfd578fadd46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61ff2718f76ac1ea0669938a06babfd578fadd46/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f81b6b8a20378dcb507bf3f6d9afc76494d7933", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f81b6b8a20378dcb507bf3f6d9afc76494d7933", "html_url": "https://github.com/rust-lang/rust/commit/3f81b6b8a20378dcb507bf3f6d9afc76494d7933"}], "stats": {"total": 209, "additions": 145, "deletions": 64}, "files": [{"sha": "bf4204c61fd726747b237fbc65581a3fdd3774f6", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_write2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,3 +1,5 @@\n+#![allow(drop_ref)]\n+\n fn main() {\n     let target = &mut 42;\n     let target2 = target as *mut _;"}, {"sha": "c084dea20bd838fae91a7a75e5dc0073e4cb9332", "filename": "src/tools/miri/tests/fail/uninit_buffer.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,5 +1,7 @@\n //@error-pattern: memory is uninitialized at [0x4..0x10]\n \n+#![allow(drop_copy)]\n+\n use std::alloc::{alloc, dealloc, Layout};\n use std::slice::from_raw_parts;\n "}, {"sha": "1eccc48361247ed1c11c2223820938569b1b719f", "filename": "src/tools/miri/tests/fail/uninit_buffer_with_provenance.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -2,6 +2,8 @@\n //@normalize-stderr-test: \"a[0-9]+\" -> \"ALLOC\"\n #![feature(strict_provenance)]\n \n+#![allow(drop_copy)]\n+\n // Test printing allocations that contain single-byte provenance.\n \n use std::alloc::{alloc, dealloc, Layout};"}, {"sha": "9f743f0b56656070cd3d60431461777c947f646b", "filename": "src/tools/miri/tests/pass/stacked-borrows/zst-field-retagging-terminates.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fzst-field-retagging-terminates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fzst-field-retagging-terminates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fzst-field-retagging-terminates.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,5 +1,8 @@\n //@compile-flags: -Zmiri-retag-fields\n // Checks that the test does not run forever (which relies on a fast path).\n+\n+#![allow(drop_copy)]\n+\n fn main() {\n     let array = [(); usize::MAX];\n     drop(array); // Pass the array to a function, retagging its fields"}, {"sha": "7d6d26003f60efef13ad7154a62c50970f3cf56f", "filename": "tests/ui/associated-inherent-types/inference.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fassociated-inherent-types%2Finference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fassociated-inherent-types%2Finference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Finference.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -3,6 +3,7 @@\n \n #![feature(inherent_associated_types)]\n #![allow(incomplete_features)]\n+#![allow(drop_copy)]\n \n use std::convert::identity;\n "}, {"sha": "7375cb6d3a0dd9681c9432772737b7efb989d4e2", "filename": "tests/ui/async-await/multiple-lifetimes/partial-relation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fpartial-relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fpartial-relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fpartial-relation.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -4,7 +4,7 @@\n async fn lotsa_lifetimes<'a, 'b, 'c>(a: &'a u32, b: &'b u32, c: &'c u32) -> (&'a u32, &'b u32)\n     where 'b: 'a\n {\n-    drop((a, c));\n+    let _ = (a, c);\n     (b, b)\n }\n "}, {"sha": "9163c8ed6fb2c0711fbc11ad002730463b8702c0", "filename": "tests/ui/borrowck/borrowck-closures-slice-patterns-ok.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns-ok.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,6 +1,7 @@\n // Check that closure captures for slice patterns are inferred correctly\n \n #![allow(unused_variables)]\n+#![allow(drop_ref)]\n \n // run-pass\n "}, {"sha": "a88b323e0bf1ec2c33e140bf5ff122141e130fc3", "filename": "tests/ui/borrowck/borrowck-field-sensitivity-rpass.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fborrowck%2Fborrowck-field-sensitivity-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fborrowck%2Fborrowck-field-sensitivity-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-field-sensitivity-rpass.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n #![allow(unused_mut)]\n #![allow(unused_variables)]\n+#![allow(drop_copy)]\n // pretty-expanded FIXME #23616\n \n struct A { a: isize, b: Box<isize> }"}, {"sha": "40c6bfeeb434b0bc12d63a7ccb825cf5fe08ef67", "filename": "tests/ui/borrowck/borrowck-use-mut-borrow-rpass.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow-rpass.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n+#![allow(drop_copy)]\n+\n struct A { a: isize, b: Box<isize> }\n \n fn field_copy_after_field_borrow() {"}, {"sha": "bc7295a0826f15c1088450d44d22fba7e76213cb", "filename": "tests/ui/closures/2229_closure_analysis/migrations/issue-78720.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n \n #![warn(rust_2021_incompatible_closure_captures)]\n+#![allow(drop_ref, drop_copy)]\n \n fn main() {\n     if let a = \"\" {"}, {"sha": "2609e2951ec5487ba42ca5f1b4fb8e8bee87cc22", "filename": "tests/ui/closures/2229_closure_analysis/migrations/issue-78720.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.stderr?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,5 +1,5 @@\n warning: irrefutable `if let` pattern\n-  --> $DIR/issue-78720.rs:6:8\n+  --> $DIR/issue-78720.rs:7:8\n    |\n LL |     if let a = \"\" {\n    |        ^^^^^^^^^^"}, {"sha": "0f15f664e757e8e86e11d69f4cb968914b1e39db", "filename": "tests/ui/closures/2229_closure_analysis/optimization/edge_case_run_pass.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Foptimization%2Fedge_case_run_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Foptimization%2Fedge_case_run_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Foptimization%2Fedge_case_run_pass.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -3,6 +3,7 @@\n \n #![allow(unused)]\n #![allow(dead_code)]\n+#![allow(drop_ref)]\n \n struct Int(i32);\n struct B<'a>(&'a i32);"}, {"sha": "a097424a02172cb2ba5597bf272ece9f000dc858", "filename": "tests/ui/closures/2229_closure_analysis/run_pass/drop_then_use_fake_reads.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdrop_then_use_fake_reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdrop_then_use_fake_reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdrop_then_use_fake_reads.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,6 +1,8 @@\n // edition:2021\n // check-pass\n+\n #![feature(rustc_attrs)]\n+#![allow(drop_ref)]\n \n fn main() {\n     let mut x = 1;"}, {"sha": "acdd6a54cf4ecd33ba5f6a737c6b52cbc1eaf380", "filename": "tests/ui/consts/const_forget.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fconsts%2Fconst_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fconsts%2Fconst_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_forget.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n \n+#![allow(forget_copy)]\n+\n use std::mem::forget;\n \n const _: () = forget(0i32);"}, {"sha": "b3821f467b617cdaff6f4a8c2a8340b7ac645049", "filename": "tests/ui/consts/issue-104155.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fconsts%2Fissue-104155.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fconsts%2Fissue-104155.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-104155.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,4 +1,7 @@\n // check-pass\n+\n+#![allow(forget_copy)]\n+\n const _: () = core::mem::forget(Box::<u32>::default);\n const _: () = core::mem::forget(|| Box::<u32>::default());\n "}, {"sha": "8d1d0b4fcdf02e8dfa5e5c0577308e989c29802c", "filename": "tests/ui/crate-leading-sep.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fcrate-leading-sep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fcrate-leading-sep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate-leading-sep.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n+#![allow(drop_copy)]\n+\n fn main() {\n     use ::std::mem;\n     mem::drop(2_usize);"}, {"sha": "659d35db6575ae6940d185a25aaab5bd8c29d109", "filename": "tests/ui/drop/repeat-drop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fdrop%2Frepeat-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fdrop%2Frepeat-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop%2Frepeat-drop.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n // needs-unwind\n \n+#![allow(drop_ref, drop_copy)]\n+\n static mut CHECK: usize = 0;\n \n struct DropChecker(usize);"}, {"sha": "0bc4feed329d36edf1a0cba9dd710ffb9c3ef846", "filename": "tests/ui/explicit/explicit-call-to-supertrait-dtor.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.fixed?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,4 +1,7 @@\n // run-rustfix\n+\n+#![allow(drop_ref)]\n+\n struct Foo {\n     x: isize\n }"}, {"sha": "26ae6698d669dfaefb6e8a9d12ee846f377a0356", "filename": "tests/ui/explicit/explicit-call-to-supertrait-dtor.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,4 +1,7 @@\n // run-rustfix\n+\n+#![allow(drop_ref)]\n+\n struct Foo {\n     x: isize\n }"}, {"sha": "c70671173491e7b589067dc52f6b5a653cbde6e8", "filename": "tests/ui/explicit/explicit-call-to-supertrait-dtor.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.stderr?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,5 +1,5 @@\n error[E0040]: explicit use of destructor method\n-  --> $DIR/explicit-call-to-supertrait-dtor.rs:19:14\n+  --> $DIR/explicit-call-to-supertrait-dtor.rs:22:14\n    |\n LL |         self.drop();\n    |         -----^^^^--"}, {"sha": "dce94c9eab27588696793927d037032ecf0c52d4", "filename": "tests/ui/feature-gates/feature-gate-unsafe_pin_internals.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_pin_internals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_pin_internals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_pin_internals.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -13,5 +13,4 @@ fn non_unsafe_pin_new_unchecked<T>(pointer: &mut T) -> Pin<&mut T> {\n fn main() {\n     let mut self_referential = PhantomPinned;\n     let _: Pin<&mut PhantomPinned> = non_unsafe_pin_new_unchecked(&mut self_referential);\n-    core::mem::forget(self_referential); // move and disable drop glue!\n }"}, {"sha": "cb46953dac3c8c9ab176eec03c278b805d7b07a6", "filename": "tests/ui/generator/drop-env.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fgenerator%2Fdrop-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fgenerator%2Fdrop-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fdrop-env.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -4,6 +4,7 @@\n //[nomiropt]compile-flags: -Z mir-opt-level=0\n \n #![feature(generators, generator_trait)]\n+#![allow(drop_copy)]\n \n use std::ops::Generator;\n use std::pin::Pin;"}, {"sha": "f7b8e198cc4bfbf798fc5e1cd8e282aef29f4a50", "filename": "tests/ui/generator/issue-57017.no_drop_tracking.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fgenerator%2Fissue-57017.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fgenerator%2Fissue-57017.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-57017.no_drop_tracking.stderr?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,5 +1,5 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:31:25\n+  --> $DIR/issue-57017.rs:32:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -15,7 +15,7 @@ LL | |     );\n    |\n    = help: the trait `Sync` is not implemented for `copy::unsync::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:29:28\n+  --> $DIR/issue-57017.rs:30:28\n    |\n LL |               let g = move || match drop(&$name::unsync::Client::default()) {\n    |                                          --------------------------------- has type `&copy::unsync::Client` which is not `Send`\n@@ -33,14 +33,14 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:51:19\n+  --> $DIR/issue-57017.rs:52:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:43:25\n+  --> $DIR/issue-57017.rs:44:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -54,9 +54,9 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n    |\n-   = help: within `[generator@$DIR/issue-57017.rs:40:21: 40:28]`, the trait `Send` is not implemented for `copy::unsend::Client`\n+   = help: within `[generator@$DIR/issue-57017.rs:41:21: 41:28]`, the trait `Send` is not implemented for `copy::unsend::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:41:28\n+  --> $DIR/issue-57017.rs:42:28\n    |\n LL |               let g = move || match drop($name::unsend::Client::default()) {\n    |                                          -------------------------------- has type `copy::unsend::Client` which is not `Send`\n@@ -74,14 +74,14 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:51:19\n+  --> $DIR/issue-57017.rs:52:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:31:25\n+  --> $DIR/issue-57017.rs:32:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -97,7 +97,7 @@ LL | |     );\n    |\n    = help: the trait `Sync` is not implemented for `derived_drop::unsync::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:29:28\n+  --> $DIR/issue-57017.rs:30:28\n    |\n LL |               let g = move || match drop(&$name::unsync::Client::default()) {\n    |                                          --------------------------------- has type `&derived_drop::unsync::Client` which is not `Send`\n@@ -115,14 +115,14 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:51:19\n+  --> $DIR/issue-57017.rs:52:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:43:25\n+  --> $DIR/issue-57017.rs:44:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -136,9 +136,9 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n    |\n-   = help: within `[generator@$DIR/issue-57017.rs:40:21: 40:28]`, the trait `Send` is not implemented for `derived_drop::unsend::Client`\n+   = help: within `[generator@$DIR/issue-57017.rs:41:21: 41:28]`, the trait `Send` is not implemented for `derived_drop::unsend::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:41:28\n+  --> $DIR/issue-57017.rs:42:28\n    |\n LL |               let g = move || match drop($name::unsend::Client::default()) {\n    |                                          -------------------------------- has type `derived_drop::unsend::Client` which is not `Send`\n@@ -156,14 +156,14 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:51:19\n+  --> $DIR/issue-57017.rs:52:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:31:25\n+  --> $DIR/issue-57017.rs:32:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -179,7 +179,7 @@ LL | |     );\n    |\n    = help: the trait `Sync` is not implemented for `significant_drop::unsync::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:29:28\n+  --> $DIR/issue-57017.rs:30:28\n    |\n LL |               let g = move || match drop(&$name::unsync::Client::default()) {\n    |                                          --------------------------------- has type `&significant_drop::unsync::Client` which is not `Send`\n@@ -197,14 +197,14 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:51:19\n+  --> $DIR/issue-57017.rs:52:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:43:25\n+  --> $DIR/issue-57017.rs:44:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -218,9 +218,9 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n    |\n-   = help: within `[generator@$DIR/issue-57017.rs:40:21: 40:28]`, the trait `Send` is not implemented for `significant_drop::unsend::Client`\n+   = help: within `[generator@$DIR/issue-57017.rs:41:21: 41:28]`, the trait `Send` is not implemented for `significant_drop::unsend::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:41:28\n+  --> $DIR/issue-57017.rs:42:28\n    |\n LL |               let g = move || match drop($name::unsend::Client::default()) {\n    |                                          -------------------------------- has type `significant_drop::unsend::Client` which is not `Send`\n@@ -238,7 +238,7 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:51:19\n+  --> $DIR/issue-57017.rs:52:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`"}, {"sha": "918d233bf4ee6436de8fb60304290379bebbe9a1", "filename": "tests/ui/generator/issue-57017.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fgenerator%2Fissue-57017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fgenerator%2Fissue-57017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-57017.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -5,6 +5,7 @@\n // [drop_tracking_mir] build-pass\n \n #![feature(generators, negative_impls)]\n+#![allow(drop_ref, drop_copy)]\n \n macro_rules! type_combinations {\n     ("}, {"sha": "adba800e25aeb98687e892904c9edd8d90afdcbf", "filename": "tests/ui/generator/non-static-is-unpin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fgenerator%2Fnon-static-is-unpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fgenerator%2Fnon-static-is-unpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fnon-static-is-unpin.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -3,6 +3,7 @@\n // run-pass\n \n #![feature(generators, generator_trait)]\n+#![allow(drop_copy)]\n \n use std::marker::{PhantomPinned, Unpin};\n "}, {"sha": "19618f8d0aa551187f6e08ae0b9ccaf0f71b577e", "filename": "tests/ui/generator/resume-arg-size.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fgenerator%2Fresume-arg-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fgenerator%2Fresume-arg-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fresume-arg-size.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,4 +1,5 @@\n #![feature(generators)]\n+#![allow(drop_copy)]\n \n // run-pass\n "}, {"sha": "214267372bf87aa739a2ddf1eb23a45401a5fffd", "filename": "tests/ui/hygiene/stdlib-prelude-from-opaque-late.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fhygiene%2Fstdlib-prelude-from-opaque-late.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fhygiene%2Fstdlib-prelude-from-opaque-late.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fstdlib-prelude-from-opaque-late.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,6 +1,7 @@\n // check-pass\n \n #![feature(decl_macro)]\n+#![allow(drop_copy)]\n \n macro mac() {\n     mod m {"}, {"sha": "8783682dec47d31fe96d3ee1ec163889fa5cfa20", "filename": "tests/ui/illegal-ufcs-drop.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fillegal-ufcs-drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fillegal-ufcs-drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fillegal-ufcs-drop.fixed?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,4 +1,7 @@\n // run-rustfix\n+\n+#![allow(drop_ref)]\n+\n struct Foo;\n \n impl Drop for Foo {"}, {"sha": "29774306ec6f513ffed8715aa96782bd61f3c4e6", "filename": "tests/ui/illegal-ufcs-drop.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fillegal-ufcs-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fillegal-ufcs-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fillegal-ufcs-drop.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,4 +1,7 @@\n // run-rustfix\n+\n+#![allow(drop_ref)]\n+\n struct Foo;\n \n impl Drop for Foo {"}, {"sha": "7a5c0612c07eb425290fdc1ea65c90af0bbc309e", "filename": "tests/ui/illegal-ufcs-drop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fillegal-ufcs-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fillegal-ufcs-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fillegal-ufcs-drop.stderr?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,5 +1,5 @@\n error[E0040]: explicit use of destructor method\n-  --> $DIR/illegal-ufcs-drop.rs:9:5\n+  --> $DIR/illegal-ufcs-drop.rs:12:5\n    |\n LL |     Drop::drop(&mut Foo)\n    |     ^^^^^^^^^^"}, {"sha": "8ef6ab1b6ff4500cfa57a598c20c350a3db373ab", "filename": "tests/ui/liveness/liveness-unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fliveness%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fliveness%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliveness%2Fliveness-unused.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,7 +1,7 @@\n #![warn(unused)]\n #![deny(unused_variables)]\n #![deny(unused_assignments)]\n-#![allow(dead_code, non_camel_case_types, trivial_numeric_casts)]\n+#![allow(dead_code, non_camel_case_types, trivial_numeric_casts, drop_copy)]\n \n use std::ops::AddAssign;\n "}, {"sha": "c50dfdf0116a253f1c2e88b7b69a386179404953", "filename": "tests/ui/macros/parse-complex-macro-invoc-op.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fmacros%2Fparse-complex-macro-invoc-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fmacros%2Fparse-complex-macro-invoc-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fparse-complex-macro-invoc-op.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -4,6 +4,7 @@\n #![allow(unused_assignments)]\n #![allow(unused_variables)]\n #![allow(stable_features)]\n+#![allow(drop_copy)]\n \n // Test parsing binary operators after macro invocations.\n "}, {"sha": "e95a992d7804cc5ed0288f682ac5834360ceae60", "filename": "tests/ui/never_type/never-assign-dead-code.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fnever_type%2Fnever-assign-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fnever_type%2Fnever-assign-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Fnever-assign-dead-code.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -3,6 +3,7 @@\n // check-pass\n \n #![feature(never_type)]\n+#![allow(drop_copy)]\n #![warn(unused)]\n \n fn main() {"}, {"sha": "5660bde5c279bac4d6637e6481266c7f47c2faf5", "filename": "tests/ui/never_type/never-assign-dead-code.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fnever_type%2Fnever-assign-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fnever_type%2Fnever-assign-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Fnever-assign-dead-code.stderr?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,28 +1,28 @@\n warning: unreachable statement\n-  --> $DIR/never-assign-dead-code.rs:10:5\n+  --> $DIR/never-assign-dead-code.rs:11:5\n    |\n LL |     let x: ! = panic!(\"aah\");\n    |                ------------- any code following this expression is unreachable\n LL |     drop(x);\n    |     ^^^^^^^^ unreachable statement\n    |\n note: the lint level is defined here\n-  --> $DIR/never-assign-dead-code.rs:6:9\n+  --> $DIR/never-assign-dead-code.rs:7:9\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unreachable_code)]` implied by `#[warn(unused)]`\n \n warning: unreachable call\n-  --> $DIR/never-assign-dead-code.rs:10:5\n+  --> $DIR/never-assign-dead-code.rs:11:5\n    |\n LL |     drop(x);\n    |     ^^^^ - any code following this expression is unreachable\n    |     |\n    |     unreachable call\n \n warning: unused variable: `x`\n-  --> $DIR/never-assign-dead-code.rs:9:9\n+  --> $DIR/never-assign-dead-code.rs:10:9\n    |\n LL |     let x: ! = panic!(\"aah\");\n    |         ^ help: if this is intentional, prefix it with an underscore: `_x`"}, {"sha": "73ceaeeb875726cadd4834232314d8d9aabe2ee9", "filename": "tests/ui/nll/relate_tys/hr-fn-aba-as-aaa.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aba-as-aaa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aba-as-aaa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aba-as-aaa.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -5,6 +5,8 @@\n // check-pass\n // compile-flags:-Zno-leak-check\n \n+#![allow(drop_copy)]\n+\n fn make_it() -> for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32 {\n     panic!()\n }"}, {"sha": "bff9058a507b1c08f7c73dda9c2434e56838e563", "filename": "tests/ui/nll/ty-outlives/projection-body.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-body.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -3,6 +3,8 @@\n //\n // check-pass\n \n+#![allow(drop_ref)]\n+\n trait MyTrait<'a> {\n     type Output;\n }"}, {"sha": "c138d99d303280d835635f208bcc84b0a5035fb4", "filename": "tests/ui/or-patterns/or-patterns-default-binding-modes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2For-patterns%2For-patterns-default-binding-modes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2For-patterns%2For-patterns-default-binding-modes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For-patterns%2For-patterns-default-binding-modes.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -3,6 +3,8 @@\n // check-pass\n \n #![allow(irrefutable_let_patterns)]\n+#![allow(drop_copy)]\n+#![allow(drop_ref)]\n \n fn main() {\n     // A regression test for a mistake we made at one point:"}, {"sha": "965204bf240e38b96df6e5adbd29c32c705d7b86", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-at-and-box-pass.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -2,6 +2,9 @@\n \n // Test `@` patterns combined with `box` patterns.\n \n+#![allow(drop_ref)]\n+#![allow(drop_copy)]\n+\n #![feature(box_patterns)]\n \n #[derive(Copy, Clone)]"}, {"sha": "3eb5d2cbf5466dadb5e0fa9a0af1413fe2049cd7", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-by-copy-bindings-in-at.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -2,6 +2,8 @@\n \n // Test `Copy` bindings in the rhs of `@` patterns.\n \n+#![allow(drop_copy)]\n+\n #[derive(Copy, Clone)]\n struct C;\n "}, {"sha": "0550238549ef3fd2ee55ad1e2deb1cc4496f3cd2", "filename": "tests/ui/pattern/move-ref-patterns/borrowck-move-ref-pattern-pass.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern-pass.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n \n+#![allow(drop_ref)]\n+\n fn main() {}\n \n struct U;"}, {"sha": "788975d960aa932f1a9c6e34a11763119d334224", "filename": "tests/ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-pass.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n \n+#![allow(drop_ref)]\n+\n fn main() {\n     struct U;\n     fn accept_fn_once(_: impl FnOnce()) {}"}, {"sha": "c73268dc46a72c28e1e2c037cbc98a486b908fa7", "filename": "tests/ui/print_type_sizes/async.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fprint_type_sizes%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fprint_type_sizes%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_type_sizes%2Fasync.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -3,6 +3,8 @@\n // build-pass\n // ignore-pass\n \n+#![allow(drop_copy)]\n+\n async fn wait() {}\n \n pub async fn test(arg: [u8; 8192]) {"}, {"sha": "873def9031aaa863914304112d7ebb33cf4f2bcb", "filename": "tests/ui/print_type_sizes/async.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fprint_type_sizes%2Fasync.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fprint_type_sizes%2Fasync.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_type_sizes%2Fasync.stdout?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,4 +1,4 @@\n-print-type-size type: `[async fn body@$DIR/async.rs:8:36: 11:2]`: 16386 bytes, alignment: 1 bytes\n+print-type-size type: `[async fn body@$DIR/async.rs:10:36: 13:2]`: 16386 bytes, alignment: 1 bytes\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `Unresumed`: 8192 bytes\n print-type-size         upvar `.arg`: 8192 bytes\n@@ -16,14 +16,14 @@ print-type-size type: `std::mem::MaybeUninit<[u8; 8192]>`: 8192 bytes, alignment\n print-type-size     variant `MaybeUninit`: 8192 bytes\n print-type-size         field `.uninit`: 0 bytes\n print-type-size         field `.value`: 8192 bytes\n-print-type-size type: `[async fn body@$DIR/async.rs:6:17: 6:19]`: 1 bytes, alignment: 1 bytes\n+print-type-size type: `[async fn body@$DIR/async.rs:8:17: 8:19]`: 1 bytes, alignment: 1 bytes\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `Unresumed`: 0 bytes\n print-type-size     variant `Returned`: 0 bytes\n print-type-size     variant `Panicked`: 0 bytes\n-print-type-size type: `std::mem::ManuallyDrop<[async fn body@$DIR/async.rs:6:17: 6:19]>`: 1 bytes, alignment: 1 bytes\n+print-type-size type: `std::mem::ManuallyDrop<[async fn body@$DIR/async.rs:8:17: 8:19]>`: 1 bytes, alignment: 1 bytes\n print-type-size     field `.value`: 1 bytes\n-print-type-size type: `std::mem::MaybeUninit<[async fn body@$DIR/async.rs:6:17: 6:19]>`: 1 bytes, alignment: 1 bytes\n+print-type-size type: `std::mem::MaybeUninit<[async fn body@$DIR/async.rs:8:17: 8:19]>`: 1 bytes, alignment: 1 bytes\n print-type-size     variant `MaybeUninit`: 1 bytes\n print-type-size         field `.uninit`: 0 bytes\n print-type-size         field `.value`: 1 bytes"}, {"sha": "a77a03f0a8ae43a67ce80f266b39be081a19a14e", "filename": "tests/ui/print_type_sizes/generator_discr_placement.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -6,6 +6,7 @@\n \n // Avoid emitting panic handlers, like the rest of these tests...\n #![feature(generators)]\n+#![allow(drop_copy)]\n \n pub fn foo() {\n     let a = || {"}, {"sha": "fe0022cf5f4c9863fddef8081684819562bd808b", "filename": "tests/ui/print_type_sizes/generator_discr_placement.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.stdout?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,4 +1,4 @@\n-print-type-size type: `[generator@$DIR/generator_discr_placement.rs:11:13: 11:15]`: 8 bytes, alignment: 4 bytes\n+print-type-size type: `[generator@$DIR/generator_discr_placement.rs:12:13: 12:15]`: 8 bytes, alignment: 4 bytes\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `Unresumed`: 0 bytes\n print-type-size     variant `Suspend0`: 7 bytes"}, {"sha": "5ae5ebb450e84332bf012ddcb400d4312d20c8d3", "filename": "tests/ui/regions/type-param-outlives-reempty-issue-74429-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429-2.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -55,11 +55,11 @@ where\n }\n \n pub fn x<T: Copy>(a: Array<T>) {\n-    // drop just avoids a must_use warning\n-    drop((0..1).filter(|_| true));\n+    // _ just avoids a must_use warning\n+    let _ = (0..1).filter(|_| true);\n     let y = a.index_axis();\n     a.axis_iter().for_each(|_| {\n-        drop(y);\n+        let _ = y;\n     });\n }\n "}, {"sha": "af2bb09805ac6ccd50d6d362d78dfe48f66823e6", "filename": "tests/ui/regions/type-param-outlives-reempty-issue-74429.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -3,6 +3,8 @@\n \n // check-pass\n \n+#![allow(drop_copy)]\n+\n use std::marker::PhantomData;\n \n fn apply<T, F: FnOnce(T)>(_: T, _: F) {}"}, {"sha": "8f45b989f136381be65713d69d90dc27a0237513", "filename": "tests/ui/rfc-2008-non-exhaustive/borrowck-exhaustive.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-exhaustive.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -3,6 +3,8 @@\n \n // check-pass\n \n+#![allow(drop_ref)]\n+\n // aux-build:monovariants.rs\n extern crate monovariants;\n "}, {"sha": "4c1562790d5f474dc9b2034d9ff5c8598399a8ff", "filename": "tests/ui/rfc-2361-dbg-macro/dbg-macro-expected-behavior.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -4,6 +4,8 @@\n // Tests ensuring that `dbg!(expr)` has the expected run-time behavior.\n // as well as some compile time properties we expect.\n \n+#![allow(drop_copy)]\n+\n #[derive(Copy, Clone, Debug)]\n struct Unit;\n "}, {"sha": "a20a6062c13b6ff011bd1702c57a843bdf5c10cf", "filename": "tests/ui/rfc-2361-dbg-macro/dbg-macro-expected-behavior.run.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.run.stderr?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,28 +1,28 @@\n-[$DIR/dbg-macro-expected-behavior.rs:20] Unit = Unit\n-[$DIR/dbg-macro-expected-behavior.rs:21] a = Unit\n-[$DIR/dbg-macro-expected-behavior.rs:27] Point { x: 42, y: 24 } = Point {\n+[$DIR/dbg-macro-expected-behavior.rs:22] Unit = Unit\n+[$DIR/dbg-macro-expected-behavior.rs:23] a = Unit\n+[$DIR/dbg-macro-expected-behavior.rs:29] Point { x: 42, y: 24 } = Point {\n     x: 42,\n     y: 24,\n }\n-[$DIR/dbg-macro-expected-behavior.rs:28] b = Point {\n+[$DIR/dbg-macro-expected-behavior.rs:30] b = Point {\n     x: 42,\n     y: 24,\n }\n-[$DIR/dbg-macro-expected-behavior.rs:36]\n-[$DIR/dbg-macro-expected-behavior.rs:40] &a = NoCopy(\n+[$DIR/dbg-macro-expected-behavior.rs:38]\n+[$DIR/dbg-macro-expected-behavior.rs:42] &a = NoCopy(\n     1337,\n )\n-[$DIR/dbg-macro-expected-behavior.rs:40] dbg!(& a) = NoCopy(\n+[$DIR/dbg-macro-expected-behavior.rs:42] dbg!(& a) = NoCopy(\n     1337,\n )\n-[$DIR/dbg-macro-expected-behavior.rs:45] f(&42) = 42\n+[$DIR/dbg-macro-expected-behavior.rs:47] f(&42) = 42\n before\n-[$DIR/dbg-macro-expected-behavior.rs:50] { foo += 1; eprintln!(\"before\"); 7331 } = 7331\n-[$DIR/dbg-macro-expected-behavior.rs:58] (\"Yeah\",) = (\n+[$DIR/dbg-macro-expected-behavior.rs:52] { foo += 1; eprintln!(\"before\"); 7331 } = 7331\n+[$DIR/dbg-macro-expected-behavior.rs:60] (\"Yeah\",) = (\n     \"Yeah\",\n )\n-[$DIR/dbg-macro-expected-behavior.rs:61] 1 = 1\n-[$DIR/dbg-macro-expected-behavior.rs:61] 2 = 2\n-[$DIR/dbg-macro-expected-behavior.rs:65] 1u8 = 1\n-[$DIR/dbg-macro-expected-behavior.rs:65] 2u32 = 2\n-[$DIR/dbg-macro-expected-behavior.rs:65] \"Yeah\" = \"Yeah\"\n+[$DIR/dbg-macro-expected-behavior.rs:63] 1 = 1\n+[$DIR/dbg-macro-expected-behavior.rs:63] 2 = 2\n+[$DIR/dbg-macro-expected-behavior.rs:67] 1u8 = 1\n+[$DIR/dbg-macro-expected-behavior.rs:67] 2u32 = 2\n+[$DIR/dbg-macro-expected-behavior.rs:67] \"Yeah\" = \"Yeah\""}, {"sha": "4ed4d610025fae05bc9c0af062d6f56ad6f004da", "filename": "tests/ui/rust-2018/remove-extern-crate.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Frust-2018%2Fremove-extern-crate.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Frust-2018%2Fremove-extern-crate.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fremove-extern-crate.fixed?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -5,6 +5,7 @@\n // compile-flags:--extern remove_extern_crate\n \n #![warn(rust_2018_idioms)]\n+#![allow(drop_copy)]\n \n  //~ WARNING unused extern crate\n // Shouldn't suggest changing to `use`, as `another_name`"}, {"sha": "5dafdb2b7b7742ce6db03c3fdce88d1e7f3a1952", "filename": "tests/ui/rust-2018/remove-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Frust-2018%2Fremove-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Frust-2018%2Fremove-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fremove-extern-crate.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -5,6 +5,7 @@\n // compile-flags:--extern remove_extern_crate\n \n #![warn(rust_2018_idioms)]\n+#![allow(drop_copy)]\n \n extern crate core; //~ WARNING unused extern crate\n // Shouldn't suggest changing to `use`, as `another_name`"}, {"sha": "f752cac8ed63064a4ae9929823c9f5c664468d28", "filename": "tests/ui/rust-2018/remove-extern-crate.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Frust-2018%2Fremove-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Frust-2018%2Fremove-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fremove-extern-crate.stderr?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,5 +1,5 @@\n warning: unused extern crate\n-  --> $DIR/remove-extern-crate.rs:9:1\n+  --> $DIR/remove-extern-crate.rs:10:1\n    |\n LL | extern crate core;\n    | ^^^^^^^^^^^^^^^^^^ help: remove it\n@@ -12,7 +12,7 @@ LL | #![warn(rust_2018_idioms)]\n    = note: `#[warn(unused_extern_crates)]` implied by `#[warn(rust_2018_idioms)]`\n \n warning: `extern crate` is not idiomatic in the new edition\n-  --> $DIR/remove-extern-crate.rs:33:5\n+  --> $DIR/remove-extern-crate.rs:34:5\n    |\n LL |     extern crate core;\n    |     ^^^^^^^^^^^^^^^^^^\n@@ -23,7 +23,7 @@ LL |     use core;\n    |     ~~~\n \n warning: `extern crate` is not idiomatic in the new edition\n-  --> $DIR/remove-extern-crate.rs:43:5\n+  --> $DIR/remove-extern-crate.rs:44:5\n    |\n LL |     pub extern crate core;\n    |     ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "f59bcf0b8033902518a1f093a5e1d1c89e16d140", "filename": "tests/ui/statics/issue-91050-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fstatics%2Fissue-91050-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Fstatics%2Fissue-91050-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstatics%2Fissue-91050-1.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -12,6 +12,8 @@\n //\n // In regular builds, the bad cast was UB, like \"Invalid LLVMRustVisibility value!\"\n \n+#![allow(drop_copy)]\n+\n pub mod before {\n     #[no_mangle]\n     pub static GLOBAL1: [u8; 1] = [1];"}, {"sha": "558303c2e40bc90e2585dcdc79abd882cfc90dd2", "filename": "tests/ui/traits/copy-guessing.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Ftraits%2Fcopy-guessing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Ftraits%2Fcopy-guessing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fcopy-guessing.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,5 +1,8 @@\n // run-pass\n+\n #![allow(dead_code)]\n+#![allow(drop_copy)]\n+\n // \"guessing\" in trait selection can affect `copy_or_move`. Check that this\n // is correctly handled. I am not sure what is the \"correct\" behaviour,\n // but we should at least not ICE."}, {"sha": "256ce992eefc49c8eea35719e0e2168eb893a846", "filename": "tests/ui/traits/impl-evaluation-order.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Ftraits%2Fimpl-evaluation-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Ftraits%2Fimpl-evaluation-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fimpl-evaluation-order.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -6,6 +6,8 @@\n \n // check-pass\n \n+#![allow(drop_copy)]\n+\n trait A {\n     type B;\n }"}, {"sha": "4aefdd6bb073579e1495c8955246a221ec9ed6e9", "filename": "tests/ui/traits/new-solver/auto-with-drop_tracking_mir.fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.fail.stderr?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `impl Future<Output = ()>` cannot be sent between threads safely\n-  --> $DIR/auto-with-drop_tracking_mir.rs:24:13\n+  --> $DIR/auto-with-drop_tracking_mir.rs:25:13\n    |\n LL |     is_send(foo());\n    |     ------- ^^^^^ `impl Future<Output = ()>` cannot be sent between threads safely\n@@ -8,7 +8,7 @@ LL |     is_send(foo());\n    |\n    = help: the trait `Send` is not implemented for `impl Future<Output = ()>`\n note: required by a bound in `is_send`\n-  --> $DIR/auto-with-drop_tracking_mir.rs:23:24\n+  --> $DIR/auto-with-drop_tracking_mir.rs:24:24\n    |\n LL |     fn is_send(_: impl Send) {}\n    |                        ^^^^ required by this bound in `is_send`"}, {"sha": "f115e1433182cad6088b4635ea98551ced874aa0", "filename": "tests/ui/traits/new-solver/auto-with-drop_tracking_mir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -14,6 +14,7 @@ async fn foo() {\n     #[cfg(fail)]\n     let x = &NotSync;\n     bar().await;\n+    #[allow(drop_ref)]\n     drop(x);\n }\n "}, {"sha": "c6c11a1a1de182e6eefe20a21ddec36e8c45c30a", "filename": "tests/ui/traits/new-solver/temporary-ambiguity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Ftraits%2Fnew-solver%2Ftemporary-ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Ftraits%2Fnew-solver%2Ftemporary-ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Ftemporary-ambiguity.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -18,5 +18,5 @@ fn main() {\n     let w = Wrapper(x);\n     needs_foo(w);\n     x = 1;\n-    drop(x);\n+    let _ = x;\n }"}, {"sha": "6ed7667115a0db8b3fe86b86ee42f8c14a2e6329", "filename": "tests/ui/trivial-bounds/trivial-bounds-inconsistent-copy.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.rs?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,6 +1,8 @@\n // check-pass\n // Check tautalogically false `Copy` bounds\n+\n #![feature(trivial_bounds)]\n+#![allow(drop_ref, drop_copy)]\n \n fn copy_string(t: String) -> String where String: Copy { //~ WARNING trivial_bounds\n     is_copy(&t);"}, {"sha": "deeb352a2a851f5fa1d13cb9629fcd9042319a94", "filename": "tests/ui/trivial-bounds/trivial-bounds-inconsistent-copy.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61ff2718f76ac1ea0669938a06babfd578fadd46/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.stderr?ref=61ff2718f76ac1ea0669938a06babfd578fadd46", "patch": "@@ -1,25 +1,25 @@\n warning: trait bound String: Copy does not depend on any type or lifetime parameters\n-  --> $DIR/trivial-bounds-inconsistent-copy.rs:5:51\n+  --> $DIR/trivial-bounds-inconsistent-copy.rs:7:51\n    |\n LL | fn copy_string(t: String) -> String where String: Copy {\n    |                                                   ^^^^\n    |\n    = note: `#[warn(trivial_bounds)]` on by default\n \n warning: trait bound String: Copy does not depend on any type or lifetime parameters\n-  --> $DIR/trivial-bounds-inconsistent-copy.rs:12:56\n+  --> $DIR/trivial-bounds-inconsistent-copy.rs:14:56\n    |\n LL | fn copy_out_string(t: &String) -> String where String: Copy {\n    |                                                        ^^^^\n \n warning: trait bound String: Copy does not depend on any type or lifetime parameters\n-  --> $DIR/trivial-bounds-inconsistent-copy.rs:16:55\n+  --> $DIR/trivial-bounds-inconsistent-copy.rs:18:55\n    |\n LL | fn copy_string_with_param<T>(x: String) where String: Copy {\n    |                                                       ^^^^\n \n warning: trait bound for<'b> &'b mut i32: Copy does not depend on any type or lifetime parameters\n-  --> $DIR/trivial-bounds-inconsistent-copy.rs:22:76\n+  --> $DIR/trivial-bounds-inconsistent-copy.rs:24:76\n    |\n LL | fn copy_mut<'a>(t: &&'a mut i32) -> &'a mut i32 where for<'b> &'b mut i32: Copy {\n    |                                                                            ^^^^"}]}