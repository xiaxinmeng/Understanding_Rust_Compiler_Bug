{"sha": "75f72c0de141573eef56f13fd48a3af12deaee4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZjcyYzBkZTE0MTU3M2VlZjU2ZjEzZmQ0OGEzYWYxMmRlYWVlNGY=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-02-08T23:40:27Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-02-14T01:34:26Z"}, "message": "Make nested impl Trait a hard error", "tree": {"sha": "95077d9f4c90323f469213386175b706daa40a93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95077d9f4c90323f469213386175b706daa40a93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75f72c0de141573eef56f13fd48a3af12deaee4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75f72c0de141573eef56f13fd48a3af12deaee4f", "html_url": "https://github.com/rust-lang/rust/commit/75f72c0de141573eef56f13fd48a3af12deaee4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75f72c0de141573eef56f13fd48a3af12deaee4f/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d2d3fc5dadf894a8ad709a5860a549f2c0b1032", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d2d3fc5dadf894a8ad709a5860a549f2c0b1032", "html_url": "https://github.com/rust-lang/rust/commit/4d2d3fc5dadf894a8ad709a5860a549f2c0b1032"}], "stats": {"total": 221, "additions": 138, "deletions": 83}, "files": [{"sha": "826f27c2ddbf4e4d05a2ce7b5e422d720499c417", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/75f72c0de141573eef56f13fd48a3af12deaee4f/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75f72c0de141573eef56f13fd48a3af12deaee4f/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=75f72c0de141573eef56f13fd48a3af12deaee4f", "patch": "@@ -420,6 +420,75 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n }\n \n+// Bans nested `impl Trait`, e.g. `impl Into<impl Debug>`.\n+// Nested `impl Trait` _is_ allowed in associated type position,\n+// e.g `impl Iterator<Item=impl Debug>`\n+struct NestedImplTraitVisitor<'a> {\n+    session: &'a Session,\n+    outer_impl_trait: Option<Span>,\n+}\n+\n+impl<'a> NestedImplTraitVisitor<'a> {\n+    fn with_impl_trait<F>(&mut self, outer_impl_trait: Option<Span>, f: F)\n+        where F: FnOnce(&mut NestedImplTraitVisitor<'a>)\n+    {\n+        let old_outer_impl_trait = self.outer_impl_trait;\n+        self.outer_impl_trait = outer_impl_trait;\n+        f(self);\n+        self.outer_impl_trait = old_outer_impl_trait;\n+    }\n+}\n+\n+\n+impl<'a> Visitor<'a> for NestedImplTraitVisitor<'a> {\n+    fn visit_ty(&mut self, t: &'a Ty) {\n+        if let TyKind::ImplTrait(_) = t.node {\n+            if let Some(outer_impl_trait) = self.outer_impl_trait {\n+                struct_span_err!(self.session, t.span, E0666,\n+                                 \"nested `impl Trait` is not allowed\")\n+                    .span_label(outer_impl_trait, \"outer `impl Trait`\")\n+                    .span_label(t.span, \"devilishly nested `impl Trait` here\")\n+                    .emit();\n+\n+            }\n+            self.with_impl_trait(Some(t.span), |this| visit::walk_ty(this, t));\n+        } else {\n+            visit::walk_ty(self, t);\n+        }\n+    }\n+    fn visit_path_parameters(&mut self, _: Span, path_parameters: &'a PathParameters) {\n+        match *path_parameters {\n+            PathParameters::AngleBracketed(ref params) => {\n+                for type_ in &params.types {\n+                    self.visit_ty(type_);\n+                }\n+                for type_binding in &params.bindings {\n+                    // Type bindings such as `Item=impl Debug` in `Iterator<Item=Debug>`\n+                    // are allowed to contain nested `impl Trait`.\n+                    self.with_impl_trait(None, |this| visit::walk_ty(this, &type_binding.ty));\n+                }\n+            }\n+            PathParameters::Parenthesized(ref params) => {\n+                for type_ in &params.inputs {\n+                    self.visit_ty(type_);\n+                }\n+                if let Some(ref type_) = params.output {\n+                    // `-> Foo` syntax is essentially an associated type binding,\n+                    // so it is also allowed to contain nested `impl Trait`.\n+                    self.with_impl_trait(None, |this| visit::walk_ty(this, type_));\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+\n pub fn check_crate(session: &Session, krate: &Crate) {\n+    visit::walk_crate(\n+        &mut NestedImplTraitVisitor {\n+            session,\n+            outer_impl_trait: None,\n+        }, krate);\n+\n     visit::walk_crate(&mut AstValidator { session: session }, krate)\n }"}, {"sha": "6dfc52f842e16b8a36232fbbf147e76b8225cd8e", "filename": "src/librustc_passes/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75f72c0de141573eef56f13fd48a3af12deaee4f/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75f72c0de141573eef56f13fd48a3af12deaee4f/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=75f72c0de141573eef56f13fd48a3af12deaee4f", "patch": "@@ -320,4 +320,5 @@ register_diagnostics! {\n     E0567, // auto traits can not have generic parameters\n     E0568, // auto traits can not have super traits\n     E0642, // patterns aren't allowed in methods without bodies\n+    E0666, // nested `impl Trait` is illegal\n }"}, {"sha": "a3eba63706cb049f496a42e488a2340eafd28dec", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 69, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/75f72c0de141573eef56f13fd48a3af12deaee4f/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75f72c0de141573eef56f13fd48a3af12deaee4f/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=75f72c0de141573eef56f13fd48a3af12deaee4f", "patch": "@@ -432,9 +432,6 @@ declare_features! (\n     // `foo.rs` as an alternative to `foo/mod.rs`\n     (active, non_modrs_mods, \"1.24.0\", Some(44660)),\n \n-    // Nested `impl Trait`\n-    (active, nested_impl_trait, \"1.24.0\", Some(34511)),\n-\n     // Termination trait in main (RFC 1937)\n     (active, termination_trait, \"1.24.0\", Some(43301)),\n \n@@ -1352,73 +1349,8 @@ fn contains_novel_literal(item: &ast::MetaItem) -> bool {\n     }\n }\n \n-// Bans nested `impl Trait`, e.g. `impl Into<impl Debug>`.\n-// Nested `impl Trait` _is_ allowed in associated type position,\n-// e.g `impl Iterator<Item=impl Debug>`\n-struct NestedImplTraitVisitor<'a> {\n-    context: &'a Context<'a>,\n-    is_in_impl_trait: bool,\n-}\n-\n-impl<'a> NestedImplTraitVisitor<'a> {\n-    fn with_impl_trait<F>(&mut self, is_in_impl_trait: bool, f: F)\n-        where F: FnOnce(&mut NestedImplTraitVisitor<'a>)\n-    {\n-        let old_is_in_impl_trait = self.is_in_impl_trait;\n-        self.is_in_impl_trait = is_in_impl_trait;\n-        f(self);\n-        self.is_in_impl_trait = old_is_in_impl_trait;\n-    }\n-}\n-\n-\n-impl<'a> Visitor<'a> for NestedImplTraitVisitor<'a> {\n-    fn visit_ty(&mut self, t: &'a ast::Ty) {\n-        if let ast::TyKind::ImplTrait(_) = t.node {\n-            if self.is_in_impl_trait {\n-                gate_feature_post!(&self, nested_impl_trait, t.span,\n-                    \"nested `impl Trait` is experimental\"\n-                );\n-            }\n-            self.with_impl_trait(true, |this| visit::walk_ty(this, t));\n-        } else {\n-            visit::walk_ty(self, t);\n-        }\n-    }\n-    fn visit_path_parameters(&mut self, _: Span, path_parameters: &'a ast::PathParameters) {\n-        match *path_parameters {\n-            ast::PathParameters::AngleBracketed(ref params) => {\n-                for type_ in &params.types {\n-                    self.visit_ty(type_);\n-                }\n-                for type_binding in &params.bindings {\n-                    // Type bindings such as `Item=impl Debug` in `Iterator<Item=Debug>`\n-                    // are allowed to contain nested `impl Trait`.\n-                    self.with_impl_trait(false, |this| visit::walk_ty(this, &type_binding.ty));\n-                }\n-            }\n-            ast::PathParameters::Parenthesized(ref params) => {\n-                for type_ in &params.inputs {\n-                    self.visit_ty(type_);\n-                }\n-                if let Some(ref type_) = params.output {\n-                    // `-> Foo` syntax is essentially an associated type binding,\n-                    // so it is also allowed to contain nested `impl Trait`.\n-                    self.with_impl_trait(false, |this| visit::walk_ty(this, type_));\n-                }\n-            }\n-        }\n-    }\n-}\n-\n impl<'a> PostExpansionVisitor<'a> {\n-    fn whole_crate_feature_gates(&mut self, krate: &ast::Crate) {\n-        visit::walk_crate(\n-            &mut NestedImplTraitVisitor {\n-                context: self.context,\n-                is_in_impl_trait: false,\n-            }, krate);\n-\n+    fn whole_crate_feature_gates(&mut self, _krate: &ast::Crate) {\n         for &(ident, span) in &*self.context.parse_sess.non_modrs_mods.borrow() {\n             if !span.allows_unstable() {\n                 let cx = &self.context;"}, {"sha": "52c5471681df300eef53c500bc6cb6a07df7b90e", "filename": "src/test/compile-fail/impl-trait/where-allowed.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75f72c0de141573eef56f13fd48a3af12deaee4f/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fwhere-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75f72c0de141573eef56f13fd48a3af12deaee4f/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fwhere-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fwhere-allowed.rs?ref=75f72c0de141573eef56f13fd48a3af12deaee4f", "patch": "@@ -10,7 +10,7 @@\n \n //! A simple test for testing many permutations of allowedness of\n //! impl Trait\n-#![feature(conservative_impl_trait, nested_impl_trait, universal_impl_trait, dyn_trait)]\n+#![feature(conservative_impl_trait, universal_impl_trait, dyn_trait)]\n use std::fmt::Debug;\n \n // Allowed\n@@ -60,6 +60,7 @@ fn in_dyn_Fn_return_in_return() -> &'static dyn Fn() -> impl Debug { panic!() }\n // Disallowed\n fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^^ ERROR nested `impl Trait` is not allowed\n \n // Disallowed\n fn in_impl_Fn_return_in_parameters(_: &impl Fn() -> impl Debug) { panic!() }\n@@ -68,6 +69,7 @@ fn in_impl_Fn_return_in_parameters(_: &impl Fn() -> impl Debug) { panic!() }\n // Disallowed\n fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^^ ERROR nested `impl Trait` is not allowed\n \n // Disallowed\n fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }"}, {"sha": "4d40e707ddcb9f8f2018c1ce216e1b1193bf6711", "filename": "src/test/run-pass/impl-trait/lifetimes.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/75f72c0de141573eef56f13fd48a3af12deaee4f/src%2Ftest%2Frun-pass%2Fimpl-trait%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75f72c0de141573eef56f13fd48a3af12deaee4f/src%2Ftest%2Frun-pass%2Fimpl-trait%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Flifetimes.rs?ref=75f72c0de141573eef56f13fd48a3af12deaee4f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(conservative_impl_trait, underscore_lifetimes, universal_impl_trait, nested_impl_trait)]\n+#![feature(conservative_impl_trait, underscore_lifetimes, universal_impl_trait)]\n #![allow(warnings)]\n \n use std::fmt::Debug;\n@@ -55,12 +55,11 @@ fn pass_through_elision_with_fn_ptr(x: &fn(&u32) -> &u32) -> impl Into<&fn(&u32)\n \n fn pass_through_elision_with_fn_path<T: Fn(&u32) -> &u32>(\n     x: &T\n-) -> impl Into<&impl Fn(&u32) -> &u32> { x }\n+) -> &impl Fn(&u32) -> &u32 { x }\n \n-fn foo(x: &impl Debug) -> impl Into<&impl Debug> { x }\n-fn foo_explicit_lifetime<'a>(x: &'a impl Debug) -> impl Into<&'a impl Debug> { x }\n-fn foo_no_outer_impl(x: &impl Debug) -> &impl Debug { x }\n-fn foo_explicit_arg<T: Debug>(x: &T) -> impl Into<&impl Debug> { x }\n+fn foo(x: &impl Debug) -> &impl Debug { x }\n+fn foo_explicit_lifetime<'a>(x: &'a impl Debug) -> &'a impl Debug { x }\n+fn foo_explicit_arg<T: Debug>(x: &T) -> &impl Debug { x }\n \n fn mixed_lifetimes<'a>() -> impl for<'b: 'a> Fn(&'b u32) { |_| () }\n fn mixed_as_static() -> impl Fn(&'static u32) { mixed_lifetimes() }"}, {"sha": "31b3acd86ef555b25070599d051d8a46ab388eb0", "filename": "src/test/ui/error-codes/E0657.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75f72c0de141573eef56f13fd48a3af12deaee4f/src%2Ftest%2Fui%2Ferror-codes%2FE0657.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75f72c0de141573eef56f13fd48a3af12deaee4f/src%2Ftest%2Fui%2Ferror-codes%2FE0657.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0657.rs?ref=75f72c0de141573eef56f13fd48a3af12deaee4f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n #![allow(warnings)]\n-#![feature(conservative_impl_trait, nested_impl_trait)]\n+#![feature(conservative_impl_trait)]\n \n trait Id<T> {}\n trait Lt<'a> {}\n@@ -17,7 +17,7 @@ impl<'a> Lt<'a> for () {}\n impl<T> Id<T> for T {}\n \n fn free_fn_capture_hrtb_in_impl_trait()\n-    -> impl for<'a> Id<impl Lt<'a>>\n+    -> Box<for<'a> Id<impl Lt<'a>>>\n         //~^ ERROR `impl Trait` can only capture lifetimes bound at the fn or impl level [E0657]\n {\n     ()\n@@ -26,7 +26,7 @@ fn free_fn_capture_hrtb_in_impl_trait()\n struct Foo;\n impl Foo {\n     fn impl_fn_capture_hrtb_in_impl_trait()\n-        -> impl for<'a> Id<impl Lt<'a>>\n+        -> Box<for<'a> Id<impl Lt<'a>>>\n             //~^ ERROR `impl Trait` can only capture lifetimes bound at the fn or impl level\n     {\n         ()"}, {"sha": "f6302c0f3b3e2f0e1b43fe00db886ae30a2e2bac", "filename": "src/test/ui/nested_impl_trait.rs", "status": "renamed", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75f72c0de141573eef56f13fd48a3af12deaee4f/src%2Ftest%2Fui%2Fnested_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75f72c0de141573eef56f13fd48a3af12deaee4f/src%2Ftest%2Fui%2Fnested_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnested_impl_trait.rs?ref=75f72c0de141573eef56f13fd48a3af12deaee4f", "patch": "@@ -14,25 +14,27 @@ use std::fmt::Debug;\n fn fine(x: impl Into<u32>) -> impl Into<u32> { x }\n \n fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n-//~^ ERROR nested `impl Trait` is experimental\n+//~^ ERROR nested `impl Trait` is not allowed\n \n fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n-//~^ ERROR nested `impl Trait` is experimental\n+//~^ ERROR nested `impl Trait` is not allowed\n+//~^^ `impl Trait` not allowed\n \n fn bad_in_arg_position(_: impl Into<impl Debug>) { }\n-//~^ ERROR nested `impl Trait` is experimental\n+//~^ ERROR nested `impl Trait` is not allowed\n \n struct X;\n impl X {\n     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n-    //~^ ERROR nested `impl Trait` is experimental\n+    //~^ ERROR nested `impl Trait` is not allowed\n }\n \n fn allowed_in_assoc_type() -> impl Iterator<Item=impl Fn()> {\n     vec![|| println!(\"woot\")].into_iter()\n }\n \n fn allowed_in_ret_type() -> impl Fn() -> impl Into<u32> {\n+//~^ `impl Trait` not allowed\n     || 5\n }\n ", "previous_filename": "src/test/compile-fail/feature-gate-nested_impl_trait.rs"}, {"sha": "6649f9ab99cc101d2bdbc526c421637d96e0065c", "filename": "src/test/ui/nested_impl_trait.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/75f72c0de141573eef56f13fd48a3af12deaee4f/src%2Ftest%2Fui%2Fnested_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75f72c0de141573eef56f13fd48a3af12deaee4f/src%2Ftest%2Fui%2Fnested_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnested_impl_trait.stderr?ref=75f72c0de141573eef56f13fd48a3af12deaee4f", "patch": "@@ -0,0 +1,50 @@\n+error[E0666]: nested `impl Trait` is not allowed\n+  --> $DIR/nested_impl_trait.rs:16:56\n+   |\n+16 | fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n+   |                                              ----------^^^^^^^^^^-\n+   |                                              |         |\n+   |                                              |         devilishly nested `impl Trait` here\n+   |                                              outer `impl Trait`\n+\n+error[E0666]: nested `impl Trait` is not allowed\n+  --> $DIR/nested_impl_trait.rs:19:42\n+   |\n+19 | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n+   |                                ----------^^^^^^^^^^-\n+   |                                |         |\n+   |                                |         devilishly nested `impl Trait` here\n+   |                                outer `impl Trait`\n+\n+error[E0666]: nested `impl Trait` is not allowed\n+  --> $DIR/nested_impl_trait.rs:23:37\n+   |\n+23 | fn bad_in_arg_position(_: impl Into<impl Debug>) { }\n+   |                           ----------^^^^^^^^^^-\n+   |                           |         |\n+   |                           |         devilishly nested `impl Trait` here\n+   |                           outer `impl Trait`\n+\n+error[E0666]: nested `impl Trait` is not allowed\n+  --> $DIR/nested_impl_trait.rs:28:44\n+   |\n+28 |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n+   |                                  ----------^^^^^^^^^^-\n+   |                                  |         |\n+   |                                  |         devilishly nested `impl Trait` here\n+   |                                  outer `impl Trait`\n+\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+  --> $DIR/nested_impl_trait.rs:19:32\n+   |\n+19 | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+  --> $DIR/nested_impl_trait.rs:36:42\n+   |\n+36 | fn allowed_in_ret_type() -> impl Fn() -> impl Into<u32> {\n+   |                                          ^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}]}