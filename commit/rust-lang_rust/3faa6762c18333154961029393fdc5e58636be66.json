{"sha": "3faa6762c18333154961029393fdc5e58636be66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmYWE2NzYyYzE4MzMzMTU0OTYxMDI5MzkzZmRjNWU1ODYzNmJlNjY=", "commit": {"author": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-05-26T00:12:43Z"}, "committer": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-05-30T16:55:41Z"}, "message": "lib{std,core,debug,rustuv,collections,native,regex}: Fix snake_case errors.\n\nA number of functions/methods have been moved or renamed to align\nbetter with rust standard conventions.\n\nstd::reflect::MovePtrAdaptor => MovePtrAdaptor::new\ndebug::reflect::MovePtrAdaptor => MovePtrAdaptor::new\nstd::repr::ReprVisitor => ReprVisitor::new\ndebug::repr::ReprVisitor => ReprVisitor::new\nrustuv::homing::HomingIO.go_to_IO_home => go_to_io_home\n\n[breaking-change]", "tree": {"sha": "f69e69c10c5510624c42fc5d212ae2e5dad2085a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f69e69c10c5510624c42fc5d212ae2e5dad2085a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3faa6762c18333154961029393fdc5e58636be66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3faa6762c18333154961029393fdc5e58636be66", "html_url": "https://github.com/rust-lang/rust/commit/3faa6762c18333154961029393fdc5e58636be66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3faa6762c18333154961029393fdc5e58636be66/comments", "author": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556", "url": "https://api.github.com/repos/rust-lang/rust/commits/190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556", "html_url": "https://github.com/rust-lang/rust/commit/190d8bdbc6df078e2dc65ccdb8ab17a99a4a6556"}], "stats": {"total": 123, "additions": 54, "deletions": 69}, "files": [{"sha": "932011baa56f153c73447dfa40de939c83b64d32", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3faa6762c18333154961029393fdc5e58636be66/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3faa6762c18333154961029393fdc5e58636be66/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=3faa6762c18333154961029393fdc5e58636be66", "patch": "@@ -296,20 +296,20 @@ mod test_map {\n \n         // given a new key, initialize it with this new count,\n         // given an existing key, add more to its count\n-        fn addMoreToCount(_k: uint, v0: uint, v1: uint) -> uint {\n+        fn add_more_to_count(_k: uint, v0: uint, v1: uint) -> uint {\n             v0 + v1\n         }\n \n-        fn addMoreToCount_simple(v0: uint, v1: uint) -> uint {\n+        fn add_more_to_count_simple(v0: uint, v1: uint) -> uint {\n             v0 + v1\n         }\n \n         // count integers\n-        map.update(3, 1, addMoreToCount_simple);\n-        map.update_with_key(9, 1, addMoreToCount);\n-        map.update(3, 7, addMoreToCount_simple);\n-        map.update_with_key(5, 3, addMoreToCount);\n-        map.update_with_key(3, 2, addMoreToCount);\n+        map.update(3, 1, add_more_to_count_simple);\n+        map.update_with_key(9, 1, add_more_to_count);\n+        map.update(3, 7, add_more_to_count_simple);\n+        map.update_with_key(5, 3, add_more_to_count);\n+        map.update_with_key(3, 2, add_more_to_count);\n \n         // check the total counts\n         assert_eq!(map.find(&3).unwrap(), &10);"}, {"sha": "6b0f0b705612ed22934879a7b8bf15f690f9d85f", "filename": "src/libcore/char.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3faa6762c18333154961029393fdc5e58636be66/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3faa6762c18333154961029393fdc5e58636be66/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=3faa6762c18333154961029393fdc5e58636be66", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -23,6 +23,7 @@\n //! however the converse is not always true due to the above range limits\n //! and, as such, should be performed via the `from_u32` function..\n \n+#![allow(non_snake_case_functions)]\n \n use mem::transmute;\n use option::{None, Option, Some};"}, {"sha": "c6fc5f16ed142afbbaa95c0705fc9be57bf3a644", "filename": "src/libcore/unicode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3faa6762c18333154961029393fdc5e58636be66/src%2Flibcore%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3faa6762c18333154961029393fdc5e58636be66/src%2Flibcore%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode.rs?ref=3faa6762c18333154961029393fdc5e58636be66", "patch": "@@ -10,7 +10,7 @@\n \n // NOTE: The following code was generated by \"src/etc/unicode.py\", do not edit directly\n \n-#![allow(missing_doc, non_uppercase_statics)]\n+#![allow(missing_doc, non_uppercase_statics, non_snake_case_functions)]\n \n \n fn bsearch_range_table(c: char, r: &'static [(char,char)]) -> bool {"}, {"sha": "997d3427122e8daf373b2b6660d231b70147c850", "filename": "src/libdebug/reflect.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3faa6762c18333154961029393fdc5e58636be66/src%2Flibdebug%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3faa6762c18333154961029393fdc5e58636be66/src%2Flibdebug%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Freflect.rs?ref=3faa6762c18333154961029393fdc5e58636be66", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -42,11 +42,12 @@ pub fn align(size: uint, align: uint) -> uint {\n pub struct MovePtrAdaptor<V> {\n     inner: V\n }\n-pub fn MovePtrAdaptor<V:TyVisitor + MovePtr>(v: V) -> MovePtrAdaptor<V> {\n-    MovePtrAdaptor { inner: v }\n-}\n \n impl<V:TyVisitor + MovePtr> MovePtrAdaptor<V> {\n+    pub fn new(v: V) -> MovePtrAdaptor<V> {\n+        MovePtrAdaptor { inner: v }\n+    }\n+\n     #[inline]\n     pub fn bump(&mut self, sz: uint) {\n         self.inner.move_ptr(|p| ((p as uint) + sz) as *u8)"}, {"sha": "e6cc9785b44e72b4576b65028acd769aaaf85e94", "filename": "src/libdebug/repr.rs", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3faa6762c18333154961029393fdc5e58636be66/src%2Flibdebug%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3faa6762c18333154961029393fdc5e58636be66/src%2Flibdebug%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Frepr.rs?ref=3faa6762c18333154961029393fdc5e58636be66", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -99,17 +99,6 @@ pub struct ReprVisitor<'a> {\n     last_err: Option<io::IoError>,\n }\n \n-pub fn ReprVisitor<'a>(ptr: *u8,\n-                       writer: &'a mut io::Writer) -> ReprVisitor<'a> {\n-    ReprVisitor {\n-        ptr: ptr,\n-        ptr_stk: vec!(),\n-        var_stk: vec!(),\n-        writer: writer,\n-        last_err: None,\n-    }\n-}\n-\n impl<'a> MovePtr for ReprVisitor<'a> {\n     #[inline]\n     fn move_ptr(&mut self, adjustment: |*u8| -> *u8) {\n@@ -125,6 +114,15 @@ impl<'a> MovePtr for ReprVisitor<'a> {\n \n impl<'a> ReprVisitor<'a> {\n     // Various helpers for the TyVisitor impl\n+    pub fn new(ptr: *u8, writer: &'a mut io::Writer) -> ReprVisitor<'a> {\n+        ReprVisitor {\n+            ptr: ptr,\n+            ptr_stk: vec!(),\n+            var_stk: vec!(),\n+            writer: writer,\n+            last_err: None,\n+        }\n+    }\n \n     #[inline]\n     pub fn get<T>(&mut self, f: |&mut ReprVisitor, &T| -> bool) -> bool {\n@@ -141,16 +139,8 @@ impl<'a> ReprVisitor<'a> {\n     #[inline]\n     pub fn visit_ptr_inner(&mut self, ptr: *u8, inner: *TyDesc) -> bool {\n         unsafe {\n-            // This should call the constructor up above, but due to limiting\n-            // issues we have to recreate it here.\n-            let u = ReprVisitor {\n-                ptr: ptr,\n-                ptr_stk: vec!(),\n-                var_stk: vec!(),\n-                writer: mem::transmute_copy(&self.writer),\n-                last_err: None,\n-            };\n-            let mut v = reflect::MovePtrAdaptor(u);\n+            let u = ReprVisitor::new(ptr, mem::transmute_copy(&self.writer));\n+            let mut v = reflect::MovePtrAdaptor::new(u);\n             // Obviously this should not be a thing, but blame #8401 for now\n             visit_tydesc(inner, &mut v as &mut TyVisitor);\n             match v.unwrap().last_err {\n@@ -584,8 +574,8 @@ pub fn write_repr<T>(writer: &mut io::Writer, object: &T) -> io::IoResult<()> {\n     unsafe {\n         let ptr = object as *T as *u8;\n         let tydesc = get_tydesc::<T>();\n-        let u = ReprVisitor(ptr, writer);\n-        let mut v = reflect::MovePtrAdaptor(u);\n+        let u = ReprVisitor::new(ptr, writer);\n+        let mut v = reflect::MovePtrAdaptor::new(u);\n         visit_tydesc(tydesc, &mut v as &mut TyVisitor);\n         match v.unwrap().last_err {\n             Some(e) => Err(e),"}, {"sha": "cddae53fa42f62d6ff4bbae74b0f00adf8d2b3c0", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3faa6762c18333154961029393fdc5e58636be66/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3faa6762c18333154961029393fdc5e58636be66/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=3faa6762c18333154961029393fdc5e58636be66", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -758,6 +758,7 @@ fn free_handle(_handle: *()) {\n \n #[cfg(unix)]\n fn translate_status(status: c_int) -> p::ProcessExit {\n+    #![allow(non_snake_case_functions)]\n     #[cfg(target_os = \"linux\")]\n     #[cfg(target_os = \"android\")]\n     mod imp {"}, {"sha": "0e4581a401e9056bad45ebe6856a48dfd46aedff", "filename": "src/libregex/test/bench.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3faa6762c18333154961029393fdc5e58636be66/src%2Flibregex%2Ftest%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3faa6762c18333154961029393fdc5e58636be66/src%2Flibregex%2Ftest%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Ftest%2Fbench.rs?ref=3faa6762c18333154961029393fdc5e58636be66", "patch": "@@ -7,6 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+#![allow(non_snake_case_functions)]\n \n use std::rand::{Rng, task_rng};\n use std::str;"}, {"sha": "5bb9c70f04795b38b8994badb1b3a7fa012dafe3", "filename": "src/librustuv/homing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3faa6762c18333154961029393fdc5e58636be66/src%2Flibrustuv%2Fhoming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3faa6762c18333154961029393fdc5e58636be66/src%2Flibrustuv%2Fhoming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fhoming.rs?ref=3faa6762c18333154961029393fdc5e58636be66", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -88,7 +88,7 @@ pub trait HomingIO {\n     /// This function will move tasks to run on their home I/O scheduler. Note\n     /// that this function does *not* pin the task to the I/O scheduler, but\n     /// rather it simply moves it to running on the I/O scheduler.\n-    fn go_to_IO_home(&mut self) -> uint {\n+    fn go_to_io_home(&mut self) -> uint {\n         let _f = ForbidUnwind::new(\"going home\");\n \n         let cur_loop_id = local_id();\n@@ -118,7 +118,7 @@ pub trait HomingIO {\n     /// move the local task to its I/O scheduler and then return an RAII wrapper\n     /// which will return the task home.\n     fn fire_homing_missile(&mut self) -> HomingMissile {\n-        HomingMissile { io_home: self.go_to_IO_home() }\n+        HomingMissile { io_home: self.go_to_io_home() }\n     }\n }\n "}, {"sha": "f21dcdf2a469006afbf91457166dfb79049ab2d0", "filename": "src/libstd/reflect.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3faa6762c18333154961029393fdc5e58636be66/src%2Flibstd%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3faa6762c18333154961029393fdc5e58636be66/src%2Flibstd%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freflect.rs?ref=3faa6762c18333154961029393fdc5e58636be66", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -42,11 +42,12 @@ pub fn align(size: uint, align: uint) -> uint {\n pub struct MovePtrAdaptor<V> {\n     inner: V\n }\n-pub fn MovePtrAdaptor<V:TyVisitor + MovePtr>(v: V) -> MovePtrAdaptor<V> {\n-    MovePtrAdaptor { inner: v }\n-}\n \n impl<V:TyVisitor + MovePtr> MovePtrAdaptor<V> {\n+    pub fn new(v: V) -> MovePtrAdaptor<V> {\n+        MovePtrAdaptor { inner: v }\n+    }\n+\n     #[inline]\n     pub fn bump(&mut self, sz: uint) {\n         self.inner.move_ptr(|p| ((p as uint) + sz) as *u8)"}, {"sha": "0621cbf35fe22e78181b2287e2dd41f4caf094c2", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3faa6762c18333154961029393fdc5e58636be66/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3faa6762c18333154961029393fdc5e58636be66/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=3faa6762c18333154961029393fdc5e58636be66", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -110,17 +110,6 @@ pub struct ReprVisitor<'a> {\n     last_err: Option<io::IoError>,\n }\n \n-pub fn ReprVisitor<'a>(ptr: *u8,\n-                       writer: &'a mut io::Writer) -> ReprVisitor<'a> {\n-    ReprVisitor {\n-        ptr: ptr,\n-        ptr_stk: vec!(),\n-        var_stk: vec!(),\n-        writer: writer,\n-        last_err: None,\n-    }\n-}\n-\n impl<'a> MovePtr for ReprVisitor<'a> {\n     #[inline]\n     fn move_ptr(&mut self, adjustment: |*u8| -> *u8) {\n@@ -136,6 +125,15 @@ impl<'a> MovePtr for ReprVisitor<'a> {\n \n impl<'a> ReprVisitor<'a> {\n     // Various helpers for the TyVisitor impl\n+    pub fn new(ptr: *u8, writer: &'a mut io::Writer) -> ReprVisitor<'a> {\n+        ReprVisitor {\n+            ptr: ptr,\n+            ptr_stk: vec!(),\n+            var_stk: vec!(),\n+            writer: writer,\n+            last_err: None,\n+        }\n+    }\n \n     #[inline]\n     pub fn get<T>(&mut self, f: |&mut ReprVisitor, &T| -> bool) -> bool {\n@@ -152,16 +150,8 @@ impl<'a> ReprVisitor<'a> {\n     #[inline]\n     pub fn visit_ptr_inner(&mut self, ptr: *u8, inner: *TyDesc) -> bool {\n         unsafe {\n-            // This should call the constructor up above, but due to limiting\n-            // issues we have to recreate it here.\n-            let u = ReprVisitor {\n-                ptr: ptr,\n-                ptr_stk: vec!(),\n-                var_stk: vec!(),\n-                writer: ::mem::transmute_copy(&self.writer),\n-                last_err: None,\n-            };\n-            let mut v = reflect::MovePtrAdaptor(u);\n+            let u = ReprVisitor::new(ptr, ::mem::transmute_copy(&self.writer));\n+            let mut v = reflect::MovePtrAdaptor::new(u);\n             // Obviously this should not be a thing, but blame #8401 for now\n             visit_tydesc(inner, &mut v as &mut TyVisitor);\n             match v.unwrap().last_err {\n@@ -592,8 +582,8 @@ pub fn write_repr<T>(writer: &mut io::Writer, object: &T) -> io::IoResult<()> {\n     unsafe {\n         let ptr = object as *T as *u8;\n         let tydesc = get_tydesc::<T>();\n-        let u = ReprVisitor(ptr, writer);\n-        let mut v = reflect::MovePtrAdaptor(u);\n+        let u = ReprVisitor::new(ptr, writer);\n+        let mut v = reflect::MovePtrAdaptor::new(u);\n         visit_tydesc(tydesc, &mut v as &mut TyVisitor);\n         match v.unwrap().last_err {\n             Some(e) => Err(e),"}]}