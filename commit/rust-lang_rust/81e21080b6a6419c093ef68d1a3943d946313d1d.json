{"sha": "81e21080b6a6419c093ef68d1a3943d946313d1d", "node_id": "C_kwDOAAsO6NoAKDgxZTIxMDgwYjZhNjQxOWMwOTNlZjY4ZDFhMzk0M2Q5NDYzMTNkMWQ", "commit": {"author": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2022-05-20T01:58:55Z"}, "committer": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2022-05-20T01:58:55Z"}, "message": "OsString: Consolidate all documentation about capacity in top-level docs", "tree": {"sha": "7818d6166bd6556dc2ac50b77874a73d91b0034e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7818d6166bd6556dc2ac50b77874a73d91b0034e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81e21080b6a6419c093ef68d1a3943d946313d1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81e21080b6a6419c093ef68d1a3943d946313d1d", "html_url": "https://github.com/rust-lang/rust/commit/81e21080b6a6419c093ef68d1a3943d946313d1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81e21080b6a6419c093ef68d1a3943d946313d1d/comments", "author": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6506df7f65835c7215873f51f26740dc9fa6db0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6506df7f65835c7215873f51f26740dc9fa6db0f", "html_url": "https://github.com/rust-lang/rust/commit/6506df7f65835c7215873f51f26740dc9fa6db0f"}], "stats": {"total": 40, "additions": 12, "deletions": 28}, "files": [{"sha": "ab02c424f6e5584e643e388885dda3accff950a4", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 12, "deletions": 28, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/81e21080b6a6419c093ef68d1a3943d946313d1d/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e21080b6a6419c093ef68d1a3943d946313d1d/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=81e21080b6a6419c093ef68d1a3943d946313d1d", "patch": "@@ -191,12 +191,7 @@ impl OsString {\n     /// OS strings without reallocating. If `capacity` is 0, the string will not\n     /// allocate.\n     ///\n-    /// See main `OsString` documentation information about encoding.\n-    ///\n-    /// # Notes\n-    ///\n-    /// Capacity means UTF-8 byte size for OS strings which created from\n-    /// valid unicode, and not otherwise specified for other contents.\n+    /// See the main `OsString` documentation information about encoding and capacity units.\n     ///\n     /// # Examples\n     ///\n@@ -239,12 +234,7 @@ impl OsString {\n \n     /// Returns the capacity this `OsString` can hold without reallocating.\n     ///\n-    /// See `OsString` introduction for information about encoding.\n-    ///\n-    /// # Notes\n-    ///\n-    /// Capacity means UTF-8 byte size for OS strings which created from\n-    /// valid unicode, and not otherwise specified for other contents.\n+    /// See the main `OsString` documentation information about encoding and capacity units.\n     ///\n     /// # Examples\n     ///\n@@ -266,6 +256,8 @@ impl OsString {\n     ///\n     /// The collection may reserve more space to avoid frequent reallocations.\n     ///\n+    /// See the main `OsString` documentation information about encoding and capacity units.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -287,10 +279,7 @@ impl OsString {\n     /// greater than or equal to `self.len() + additional`. Does nothing if\n     /// capacity is already sufficient.\n     ///\n-    /// # Notes\n-    ///\n-    /// Capacity means UTF-8 byte size for OS strings which created from\n-    /// valid unicode, and not otherwise specified for other contents.\n+    /// See the main `OsString` documentation information about encoding and capacity units.\n     ///\n     /// # Errors\n     ///\n@@ -333,10 +322,7 @@ impl OsString {\n     ///\n     /// [`reserve`]: OsString::reserve\n     ///\n-    /// # Notes\n-    ///\n-    /// Capacity means UTF-8 byte size for OS strings which created from\n-    /// valid unicode, and not otherwise specified for other contents.\n+    /// See the main `OsString` documentation information about encoding and capacity units.\n     ///\n     /// # Examples\n     ///\n@@ -365,10 +351,7 @@ impl OsString {\n     ///\n     /// [`try_reserve`]: OsString::try_reserve\n     ///\n-    /// # Notes\n-    ///\n-    /// Capacity means UTF-8 byte size for OS strings which created from\n-    /// valid unicode, and not otherwise specified for other contents.\n+    /// See the main `OsString` documentation information about encoding and capacity units.\n     ///\n     /// # Errors\n     ///\n@@ -403,6 +386,8 @@ impl OsString {\n \n     /// Shrinks the capacity of the `OsString` to match its length.\n     ///\n+    /// See the main `OsString` documentation information about encoding and capacity units.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -429,10 +414,7 @@ impl OsString {\n     ///\n     /// If the current capacity is less than the lower limit, this is a no-op.\n     ///\n-    /// # Notes\n-    ///\n-    /// Capacity means UTF-8 byte size for OS strings which created from\n-    /// valid unicode, and not otherwise specified for other contents.\n+    /// See the main `OsString` documentation information about encoding and capacity units.\n     ///\n     /// # Examples\n     ///\n@@ -808,6 +790,8 @@ impl OsStr {\n     /// This number is simply useful for passing to other methods, like\n     /// [`OsString::with_capacity`] to avoid reallocations.\n     ///\n+    /// See the main `OsString` documentation information about encoding and capacity units.\n+    ///\n     /// # Examples\n     ///\n     /// ```"}]}