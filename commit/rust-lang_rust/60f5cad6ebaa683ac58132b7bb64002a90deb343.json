{"sha": "60f5cad6ebaa683ac58132b7bb64002a90deb343", "node_id": "C_kwDOAAsO6NoAKDYwZjVjYWQ2ZWJhYTY4M2FjNTgxMzJiN2JiNjQwMDJhOTBkZWIzNDM", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2022-02-18T22:06:48Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-03-07T17:43:25Z"}, "message": "try to fix issue 57017, but not quite there yet\n\nCo-authored-by: Eric Holk <eric@theincredibleholk.org>", "tree": {"sha": "cccf8f23ab91e6ccb71b327a92da8c2c966acd8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cccf8f23ab91e6ccb71b327a92da8c2c966acd8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60f5cad6ebaa683ac58132b7bb64002a90deb343", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60f5cad6ebaa683ac58132b7bb64002a90deb343", "html_url": "https://github.com/rust-lang/rust/commit/60f5cad6ebaa683ac58132b7bb64002a90deb343", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60f5cad6ebaa683ac58132b7bb64002a90deb343/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d137c3a7bd3b180317044f8ccb9a8b4b3bb07db3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d137c3a7bd3b180317044f8ccb9a8b4b3bb07db3", "html_url": "https://github.com/rust-lang/rust/commit/d137c3a7bd3b180317044f8ccb9a8b4b3bb07db3"}], "stats": {"total": 79, "additions": 70, "deletions": 9}, "files": [{"sha": "30469e2ec7bbdf58ebd6cd7591e59ea9e206eb5c", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/60f5cad6ebaa683ac58132b7bb64002a90deb343/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f5cad6ebaa683ac58132b7bb64002a90deb343/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=60f5cad6ebaa683ac58132b7bb64002a90deb343", "patch": "@@ -13,7 +13,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::hir_id::HirIdSet;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Arm, Expr, ExprKind, Guard, HirId, Pat, PatKind};\n-use rustc_middle::middle::region::{self, YieldData};\n+use rustc_middle::middle::region::{self, Scope, ScopeData, YieldData};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n@@ -369,7 +369,17 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n \n         self.expr_count += 1;\n \n-        let scope = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);\n+        debug!(\"is_borrowed_temporary: {:?}\", self.drop_ranges.is_borrowed_temporary(expr));\n+\n+        let scope = if self.drop_ranges.is_borrowed_temporary(expr) {\n+            self.region_scope_tree.temporary_scope(expr.hir_id.local_id)\n+        } else {\n+            debug!(\"parent_node: {:?}\", self.fcx.tcx.hir().find_parent_node(expr.hir_id));\n+            match self.fcx.tcx.hir().find_parent_node(expr.hir_id) {\n+                Some(parent) => Some(Scope { id: parent.local_id, data: ScopeData::Node }),\n+                None => self.region_scope_tree.temporary_scope(expr.hir_id.local_id),\n+            }\n+        };\n \n         // If there are adjustments, then record the final type --\n         // this is the actual value that is being produced."}, {"sha": "4fa7ed82c6a8456891c77c42ff8a224685e8c724", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/60f5cad6ebaa683ac58132b7bb64002a90deb343/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f5cad6ebaa683ac58132b7bb64002a90deb343/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs?ref=60f5cad6ebaa683ac58132b7bb64002a90deb343", "patch": "@@ -18,6 +18,7 @@ use crate::check::FnCtxt;\n use hir::def_id::DefId;\n use hir::{Body, HirId, HirIdMap, Node};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::stable_set::FxHashSet;\n use rustc_hir as hir;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n@@ -41,7 +42,7 @@ pub fn compute_drop_ranges<'a, 'tcx>(\n         let consumed_borrowed_places = find_consumed_and_borrowed(fcx, def_id, body);\n \n         let num_exprs = fcx.tcx.region_scope_tree(def_id).body_expr_count(body.id()).unwrap_or(0);\n-        let mut drop_ranges = build_control_flow_graph(\n+        let (mut drop_ranges, borrowed_temporaries) = build_control_flow_graph(\n             fcx.tcx.hir(),\n             fcx.tcx,\n             &fcx.typeck_results.borrow(),\n@@ -52,11 +53,20 @@ pub fn compute_drop_ranges<'a, 'tcx>(\n \n         drop_ranges.propagate_to_fixpoint();\n \n-        DropRanges { tracked_value_map: drop_ranges.tracked_value_map, nodes: drop_ranges.nodes }\n+        debug!(\"borrowed_temporaries = {borrowed_temporaries:?}\");\n+        DropRanges {\n+            tracked_value_map: drop_ranges.tracked_value_map,\n+            nodes: drop_ranges.nodes,\n+            borrowed_temporaries: Some(borrowed_temporaries),\n+        }\n     } else {\n         // If drop range tracking is not enabled, skip all the analysis and produce an\n         // empty set of DropRanges.\n-        DropRanges { tracked_value_map: FxHashMap::default(), nodes: IndexVec::new() }\n+        DropRanges {\n+            tracked_value_map: FxHashMap::default(),\n+            nodes: IndexVec::new(),\n+            borrowed_temporaries: None,\n+        }\n     }\n }\n \n@@ -161,6 +171,7 @@ impl TryFrom<&PlaceWithHirId<'_>> for TrackedValue {\n pub struct DropRanges {\n     tracked_value_map: FxHashMap<TrackedValue, TrackedValueIndex>,\n     nodes: IndexVec<PostOrderId, NodeInfo>,\n+    borrowed_temporaries: Option<FxHashSet<HirId>>,\n }\n \n impl DropRanges {\n@@ -174,6 +185,10 @@ impl DropRanges {\n             })\n     }\n \n+    pub fn is_borrowed_temporary(&self, expr: &hir::Expr<'_>) -> bool {\n+        if let Some(b) = &self.borrowed_temporaries { b.contains(&expr.hir_id) } else { true }\n+    }\n+\n     /// Returns a reference to the NodeInfo for a node, panicking if it does not exist\n     fn expect_node(&self, id: PostOrderId) -> &NodeInfo {\n         &self.nodes[id]"}, {"sha": "f4dd4cc010d3c82f2a2b96518ba4557af37d5fd9", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60f5cad6ebaa683ac58132b7bb64002a90deb343/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f5cad6ebaa683ac58132b7bb64002a90deb343/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=60f5cad6ebaa683ac58132b7bb64002a90deb343", "patch": "@@ -6,7 +6,7 @@ use hir::{\n     intravisit::{self, Visitor},\n     Body, Expr, ExprKind, Guard, HirId, LoopIdError,\n };\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::{fx::FxHashMap, stable_set::FxHashSet};\n use rustc_hir as hir;\n use rustc_index::vec::IndexVec;\n use rustc_middle::{\n@@ -27,14 +27,14 @@ pub(super) fn build_control_flow_graph<'tcx>(\n     consumed_borrowed_places: ConsumedAndBorrowedPlaces,\n     body: &'tcx Body<'tcx>,\n     num_exprs: usize,\n-) -> DropRangesBuilder {\n+) -> (DropRangesBuilder, FxHashSet<HirId>) {\n     let mut drop_range_visitor =\n         DropRangeVisitor::new(hir, tcx, typeck_results, consumed_borrowed_places, num_exprs);\n     intravisit::walk_body(&mut drop_range_visitor, body);\n \n     drop_range_visitor.drop_ranges.process_deferred_edges();\n \n-    drop_range_visitor.drop_ranges\n+    (drop_range_visitor.drop_ranges, drop_range_visitor.places.borrowed_temporaries)\n }\n \n /// This struct is used to gather the information for `DropRanges` to determine the regions of the"}, {"sha": "a66f4b4558e14ba6605cc8574fc1da62b46ad58f", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/record_consumed_borrow.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/60f5cad6ebaa683ac58132b7bb64002a90deb343/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f5cad6ebaa683ac58132b7bb64002a90deb343/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs?ref=60f5cad6ebaa683ac58132b7bb64002a90deb343", "patch": "@@ -6,6 +6,7 @@ use crate::{\n use hir::{def_id::DefId, Body, HirId, HirIdMap};\n use rustc_data_structures::stable_set::FxHashSet;\n use rustc_hir as hir;\n+use rustc_middle::hir::place::PlaceBase;\n use rustc_middle::ty::{ParamEnv, TyCtxt};\n \n pub(super) fn find_consumed_and_borrowed<'a, 'tcx>(\n@@ -27,8 +28,12 @@ pub(super) struct ConsumedAndBorrowedPlaces {\n     /// Note that this set excludes \"partial drops\" -- for example, a statement like `drop(x.y)` is\n     /// not considered a drop of `x`, although it would be a drop of `x.y`.\n     pub(super) consumed: HirIdMap<FxHashSet<TrackedValue>>,\n+\n     /// A set of hir-ids of values or variables that are borrowed at some point within the body.\n     pub(super) borrowed: FxHashSet<TrackedValue>,\n+\n+    /// A set of hir-ids of values or variables that are borrowed at some point within the body.\n+    pub(super) borrowed_temporaries: FxHashSet<HirId>,\n }\n \n /// Works with ExprUseVisitor to find interesting values for the drop range analysis.\n@@ -49,6 +54,7 @@ impl<'tcx> ExprUseDelegate<'tcx> {\n             places: ConsumedAndBorrowedPlaces {\n                 consumed: <_>::default(),\n                 borrowed: <_>::default(),\n+                borrowed_temporaries: <_>::default(),\n             },\n         }\n     }\n@@ -98,10 +104,19 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n         diag_expr_id: HirId,\n         _bk: rustc_middle::ty::BorrowKind,\n     ) {\n-        debug!(\"borrow {:?}; diag_expr_id={:?}\", place_with_id, diag_expr_id);\n+        debug!(\"borrow: place_with_id = {place_with_id:?}, diag_expr_id={diag_expr_id:?}\");\n+\n         self.places\n             .borrowed\n             .insert(TrackedValue::from_place_with_projections_allowed(place_with_id));\n+\n+        // XXX -- we need to distinguish \"consuming a copy\" from other borrows\n+        //\n+        // XXX -- we need to distinguish `&*E` where `E: &T` which is not creating a temporary\n+        // even though the place-base E is an rvalue\n+        if let PlaceBase::Rvalue = place_with_id.place.base {\n+            self.places.borrowed_temporaries.insert(place_with_id.hir_id);\n+        }\n     }\n \n     fn mutate("}, {"sha": "e91ca1a0dd66a6667e1901b0604aa2947bdd85a4", "filename": "foo.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/60f5cad6ebaa683ac58132b7bb64002a90deb343/foo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f5cad6ebaa683ac58132b7bb64002a90deb343/foo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/foo.rs?ref=60f5cad6ebaa683ac58132b7bb64002a90deb343", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+#![feature(generators, negative_impls)]\n+\n+struct Client;\n+\n+impl !Sync for Client {}\n+\n+fn status(_client_status: &Client) -> i16 {\n+    200\n+}\n+\n+fn assert_send<T: Send>(_thing: T) {}\n+\n+// This is the same bug as issue 57017, but using yield instead of await\n+fn main() {\n+    let client = Client;\n+    let g = move || match status(&client) {\n+        _status => yield,\n+    };\n+    assert_send(g);\n+}"}]}