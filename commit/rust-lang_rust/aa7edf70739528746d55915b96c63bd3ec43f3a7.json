{"sha": "aa7edf70739528746d55915b96c63bd3ec43f3a7", "node_id": "C_kwDOAAsO6NoAKGFhN2VkZjcwNzM5NTI4NzQ2ZDU1OTE1Yjk2YzYzYmQzZWM0M2YzYTc", "commit": {"author": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "me@fmease.dev", "date": "2023-02-17T17:41:24Z"}, "committer": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "me@fmease.dev", "date": "2023-02-19T17:35:34Z"}, "message": "Use the correct ParamEnv", "tree": {"sha": "1802a97fbe004026225cac14c6e77365756e6667", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1802a97fbe004026225cac14c6e77365756e6667"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa7edf70739528746d55915b96c63bd3ec43f3a7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXSQFaHGAjVoD5I3F0XoHIV9o5xMFAmPyXeYACgkQ0XoHIV9o\n5xP53w/+Lu5H0DPTvv/YuXCagLPLIKwiYQl9T8KPadFj7eIE/wc2RqNtD9dUDoSA\n08qu1wzjywRGfG6XT3FczntimJkmri8enY/U7Ovk0Tx/ie/HyAoIuwZkO1XCRjx/\noZcL6stufDxQTLU5zgkh9kGJE/j2iVthgzpDbU44Tu9MnzytW2fy0ujNDoKZV0Ei\n+8HGj9UCI2cUHEOu5fiPTWQtdZ0lUhynBSEp0g+UqNGQbDrJy7eQBo8vJ4NxY/3E\nXmVSDwkxCqVtz94FbQfBGkUcN1xz6xhWGIKEidS7+LTdtHW25qyYVen29Atwu+37\nGg1t4kaPZQnYLiBF/lYjVvcNWCsH54VzgPd4Xth2MCsmAM4J3EojFAzw3LI64Q4+\nOOj+3hRNzGlT7Ii74IoR0zjmQ2f0Gli8SaBn1WknCUtZsvtn67aE1h57JgTSqQPM\noVnHKawPjdicMeU/ZAlmKA4qwMEnF1nD5JICrtdM5/JFsUV+OooYsFc73kvj6QaL\nbUXAOfs7ChaG+1fc8Lq+1zqYmGWh8BgJu84rE4yUKCpiGMHTGzL2chyuiPFzfvF+\n2bnk7OgZDnoNvp407ZkSgTEE2n0N9/ibm4rtd/QDyhNO9PRw08UtEmV6OGxWXf/K\nS+5jbz+UE0MaIAzn+9x53k1jYblge9A1WaLuqw8uS/QvieE+iTo=\n=e4xQ\n-----END PGP SIGNATURE-----", "payload": "tree 1802a97fbe004026225cac14c6e77365756e6667\nparent 488d0c9efd355f712db4ea34856ddbeea26a7049\nauthor Le\u00f3n Orell Valerian Liehr <me@fmease.dev> 1676655684 +0100\ncommitter Le\u00f3n Orell Valerian Liehr <me@fmease.dev> 1676828134 +0100\n\nUse the correct ParamEnv\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa7edf70739528746d55915b96c63bd3ec43f3a7", "html_url": "https://github.com/rust-lang/rust/commit/aa7edf70739528746d55915b96c63bd3ec43f3a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa7edf70739528746d55915b96c63bd3ec43f3a7/comments", "author": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "488d0c9efd355f712db4ea34856ddbeea26a7049", "url": "https://api.github.com/repos/rust-lang/rust/commits/488d0c9efd355f712db4ea34856ddbeea26a7049", "html_url": "https://github.com/rust-lang/rust/commit/488d0c9efd355f712db4ea34856ddbeea26a7049"}], "stats": {"total": 44, "additions": 41, "deletions": 3}, "files": [{"sha": "f0dd4a5d5ace2a781466dabc6ca86cdd30643ef8", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa7edf70739528746d55915b96c63bd3ec43f3a7/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7edf70739528746d55915b96c63bd3ec43f3a7/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=aa7edf70739528746d55915b96c63bd3ec43f3a7", "patch": "@@ -2219,12 +2219,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             return Ok(None);\n         }\n \n+        let param_env = tcx.param_env(block.owner.to_def_id());\n         let cause = ObligationCause::misc(span, block.owner.def_id);\n         let mut unsatisfied_predicates = Vec::new();\n \n         for &(impl_, (assoc_item, def_scope)) in &candidates {\n             let infcx = tcx.infer_ctxt().ignoring_regions().build();\n-            let param_env = tcx.param_env(impl_);\n \n             let impl_ty = tcx.type_of(impl_);\n             let impl_substs = self.fresh_item_substs(impl_, &infcx);"}, {"sha": "f10386bd9f964b7b1f4f3ae4b51784a8e961c821", "filename": "tests/ui/associated-inherent-types/dispatch-on-self-type-0.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa7edf70739528746d55915b96c63bd3ec43f3a7/tests%2Fui%2Fassociated-inherent-types%2Fdispatch-on-self-type-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7edf70739528746d55915b96c63bd3ec43f3a7/tests%2Fui%2Fassociated-inherent-types%2Fdispatch-on-self-type-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fdispatch-on-self-type-0.rs?ref=aa7edf70739528746d55915b96c63bd3ec43f3a7", "patch": "@@ -33,3 +33,9 @@ fn main() {\n     let _: Choose<NonCopy>::Result = ();\n     let _: Choose<&str>::Result = vec![\"...\"];\n }\n+\n+// Test if we use the correct `ParamEnv` when proving obligations.\n+\n+pub fn parameterized<T: Copy>(x: T) {\n+    let _: Choose<T>::Result = vec![x];\n+}"}, {"sha": "b00830fa1c15c6d2edd9aa2881f90e97195737f0", "filename": "tests/ui/associated-inherent-types/not-found-unsatisfied-bounds-0.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/aa7edf70739528746d55915b96c63bd3ec43f3a7/tests%2Fui%2Fassociated-inherent-types%2Fnot-found-unsatisfied-bounds-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7edf70739528746d55915b96c63bd3ec43f3a7/tests%2Fui%2Fassociated-inherent-types%2Fnot-found-unsatisfied-bounds-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fnot-found-unsatisfied-bounds-0.rs?ref=aa7edf70739528746d55915b96c63bd3ec43f3a7", "previous_filename": "tests/ui/associated-inherent-types/not-found-unsatisfied-bounds.rs"}, {"sha": "736579067615a7338268fb4ae341d96688e8759f", "filename": "tests/ui/associated-inherent-types/not-found-unsatisfied-bounds-0.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa7edf70739528746d55915b96c63bd3ec43f3a7/tests%2Fui%2Fassociated-inherent-types%2Fnot-found-unsatisfied-bounds-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa7edf70739528746d55915b96c63bd3ec43f3a7/tests%2Fui%2Fassociated-inherent-types%2Fnot-found-unsatisfied-bounds-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fnot-found-unsatisfied-bounds-0.stderr?ref=aa7edf70739528746d55915b96c63bd3ec43f3a7", "patch": "@@ -1,5 +1,5 @@\n error: the associated type `Yield` exists for `Container<[u8]>`, but its trait bounds were not satisfied\n-  --> $DIR/not-found-unsatisfied-bounds.rs:19:29\n+  --> $DIR/not-found-unsatisfied-bounds-0.rs:19:29\n    |\n LL | struct Container<T: ?Sized>(T);\n    | --------------------------- associated item `Yield` not found for this struct\n@@ -11,7 +11,7 @@ LL |     let _: Container<[u8]>::Yield = 1;\n            `[u8]: Sized`\n \n error: the associated type `Combination` exists for `Duple<String, Rc<str>>`, but its trait bounds were not satisfied\n-  --> $DIR/not-found-unsatisfied-bounds.rs:20:45\n+  --> $DIR/not-found-unsatisfied-bounds-0.rs:20:45\n    |\n LL | struct Duple<T, U>(T, U);\n    | ------------------ associated item `Combination` not found for this struct", "previous_filename": "tests/ui/associated-inherent-types/not-found-unsatisfied-bounds.stderr"}, {"sha": "c80b1364ae3b8a24c7cf1c4c7c70eda674697ff4", "filename": "tests/ui/associated-inherent-types/not-found-unsatisfied-bounds-1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aa7edf70739528746d55915b96c63bd3ec43f3a7/tests%2Fui%2Fassociated-inherent-types%2Fnot-found-unsatisfied-bounds-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7edf70739528746d55915b96c63bd3ec43f3a7/tests%2Fui%2Fassociated-inherent-types%2Fnot-found-unsatisfied-bounds-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fnot-found-unsatisfied-bounds-1.rs?ref=aa7edf70739528746d55915b96c63bd3ec43f3a7", "patch": "@@ -0,0 +1,18 @@\n+// fail-check\n+\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+// Test if we use the correct `ParamEnv` when proving obligations.\n+\n+fn parameterized<T>() {\n+    let _: Container<T>::Proj = String::new(); //~ ERROR the associated type `Proj` exists for `Container<T>`, but its trait bounds were not satisfied\n+}\n+\n+struct Container<T>(T);\n+\n+impl<T: Clone> Container<T> {\n+    type Proj = String;\n+}\n+\n+fn main() {}"}, {"sha": "230bfa538b4f32148c02556715f17d9bd0f72732", "filename": "tests/ui/associated-inherent-types/not-found-unsatisfied-bounds-1.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aa7edf70739528746d55915b96c63bd3ec43f3a7/tests%2Fui%2Fassociated-inherent-types%2Fnot-found-unsatisfied-bounds-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa7edf70739528746d55915b96c63bd3ec43f3a7/tests%2Fui%2Fassociated-inherent-types%2Fnot-found-unsatisfied-bounds-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fnot-found-unsatisfied-bounds-1.stderr?ref=aa7edf70739528746d55915b96c63bd3ec43f3a7", "patch": "@@ -0,0 +1,14 @@\n+error: the associated type `Proj` exists for `Container<T>`, but its trait bounds were not satisfied\n+  --> $DIR/not-found-unsatisfied-bounds-1.rs:9:26\n+   |\n+LL |     let _: Container<T>::Proj = String::new();\n+   |                          ^^^^ associated type cannot be referenced on `Container<T>` due to unsatisfied trait bounds\n+...\n+LL | struct Container<T>(T);\n+   | ------------------- associated item `Proj` not found for this struct\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `T: Clone`\n+\n+error: aborting due to previous error\n+"}]}