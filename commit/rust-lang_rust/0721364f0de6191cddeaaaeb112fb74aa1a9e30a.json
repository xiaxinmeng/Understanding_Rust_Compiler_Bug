{"sha": "0721364f0de6191cddeaaaeb112fb74aa1a9e30a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MjEzNjRmMGRlNjE5MWNkZGVhYWFlYjExMmZiNzRhYTFhOWUzMGE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-29T09:18:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-29T09:18:07Z"}, "message": "Rollup merge of #61755 - Centril:compiletest-force-check, r=petrochenkov\n\nAdd `--pass $mode` to compiletest through `./x.py`\n\nAdds a flag `--pass $mode` to compiletest, which is exposed through `./x.py`.\n\nWhen `--pass $mode` is passed, `{check,build,compile,run}-pass` tests will be forced to run under the given `$mode` unless the directive `// ignore-pass` exists in the test file.\n\nThe modes are explained in https://github.com/rust-lang/rust/pull/61778:\n- `check` has the same effect as `cargo check`\n- `build` or `compile` have the same effect as `cargo build`\n- `run` has the same effect as `cargo run`\n\nOn my machine, `./x.py -i test src/test/run-pass --stage 1 --pass check` takes 38 seconds whereas it takes 2 min 7 seconds without `--pass check`.\n\ncc https://github.com/rust-lang/rust/issues/61712\n\nr? @petrochenkov", "tree": {"sha": "97d7e70fbfd8a91d0f13e1d35241283112684621", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97d7e70fbfd8a91d0f13e1d35241283112684621"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0721364f0de6191cddeaaaeb112fb74aa1a9e30a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdFyzPCRBK7hj4Ov3rIwAAdHIIAENjpsAV00258wO+u7FlMhD1\nJldejKxw9KgJQLWvEMSAd3ei30ABrvyb+kPBNsA3AirxPpc55+kKj3X+kdsTrdPK\nUbjb7ORRgvOMfk301IDLfasxwnGkPK3Y+G4+lgmnNIMzEeFG5l3wfehSIhmKXxzp\nc8Jy3WpHID3UO+aIyX4+nDo0Ob5vP1cS+XAau+GB+DWAJHqDh+cMjLtbgyh3ARMb\n569vd3wemdUv2jjD6qBZ1K702DxfKkByQ4WI4WaWcI2KhO5zpJNf57sOwN09YCWY\nxsQZH8FU36fOjhHWYnjR78l6V0UiaINgfLzXQBk03nbFaO39lxEQt2GOfvKn33g=\n=r7b0\n-----END PGP SIGNATURE-----\n", "payload": "tree 97d7e70fbfd8a91d0f13e1d35241283112684621\nparent 6c0ab739fb77c67d00ba5b5fa357deec404f9bce\nparent 93077f3f3922817a70013c403831bf1db4a30114\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1561799887 +0200\ncommitter GitHub <noreply@github.com> 1561799887 +0200\n\nRollup merge of #61755 - Centril:compiletest-force-check, r=petrochenkov\n\nAdd `--pass $mode` to compiletest through `./x.py`\n\nAdds a flag `--pass $mode` to compiletest, which is exposed through `./x.py`.\n\nWhen `--pass $mode` is passed, `{check,build,compile,run}-pass` tests will be forced to run under the given `$mode` unless the directive `// ignore-pass` exists in the test file.\n\nThe modes are explained in https://github.com/rust-lang/rust/pull/61778:\n- `check` has the same effect as `cargo check`\n- `build` or `compile` have the same effect as `cargo build`\n- `run` has the same effect as `cargo run`\n\nOn my machine, `./x.py -i test src/test/run-pass --stage 1 --pass check` takes 38 seconds whereas it takes 2 min 7 seconds without `--pass check`.\n\ncc https://github.com/rust-lang/rust/issues/61712\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0721364f0de6191cddeaaaeb112fb74aa1a9e30a", "html_url": "https://github.com/rust-lang/rust/commit/0721364f0de6191cddeaaaeb112fb74aa1a9e30a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c0ab739fb77c67d00ba5b5fa357deec404f9bce", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c0ab739fb77c67d00ba5b5fa357deec404f9bce", "html_url": "https://github.com/rust-lang/rust/commit/6c0ab739fb77c67d00ba5b5fa357deec404f9bce"}, {"sha": "93077f3f3922817a70013c403831bf1db4a30114", "url": "https://api.github.com/repos/rust-lang/rust/commits/93077f3f3922817a70013c403831bf1db4a30114", "html_url": "https://github.com/rust-lang/rust/commit/93077f3f3922817a70013c403831bf1db4a30114"}], "stats": {"total": 282, "additions": 194, "deletions": 88}, "files": [{"sha": "cab7443bf3fe87cf9aa6f921a21de25501b592ac", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=0721364f0de6191cddeaaaeb112fb74aa1a9e30a", "patch": "@@ -598,6 +598,7 @@ fn test_with_no_doc_stage0() {\n         bless: false,\n         compare_mode: None,\n         rustfix_coverage: false,\n+        pass: None,\n     };\n \n     let build = Build::new(config);\n@@ -640,6 +641,7 @@ fn test_exclude() {\n         bless: false,\n         compare_mode: None,\n         rustfix_coverage: false,\n+        pass: None,\n     };\n \n     let build = Build::new(config);"}, {"sha": "179accda0c8b249034899efc1171e1aa255a9e4a", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=0721364f0de6191cddeaaaeb112fb74aa1a9e30a", "patch": "@@ -58,6 +58,7 @@ pub enum Subcommand {\n         /// Whether to automatically update stderr/stdout files\n         bless: bool,\n         compare_mode: Option<String>,\n+        pass: Option<String>,\n         test_args: Vec<String>,\n         rustc_args: Vec<String>,\n         fail_fast: bool,\n@@ -199,6 +200,12 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\"\n                     \"mode describing what file the actual ui output will be compared to\",\n                     \"COMPARE MODE\",\n                 );\n+                opts.optopt(\n+                    \"\",\n+                    \"pass\",\n+                    \"force {check,build,run}-pass tests to this mode.\",\n+                    \"check | build | run\"\n+                );\n                 opts.optflag(\n                     \"\",\n                     \"rustfix-coverage\",\n@@ -401,6 +408,7 @@ Arguments:\n                 paths,\n                 bless: matches.opt_present(\"bless\"),\n                 compare_mode: matches.opt_str(\"compare-mode\"),\n+                pass: matches.opt_str(\"pass\"),\n                 test_args: matches.opt_strs(\"test-args\"),\n                 rustc_args: matches.opt_strs(\"rustc-args\"),\n                 fail_fast: !matches.opt_present(\"no-fail-fast\"),\n@@ -524,6 +532,15 @@ impl Subcommand {\n             _ => None,\n         }\n     }\n+\n+    pub fn pass(&self) -> Option<&str> {\n+        match *self {\n+            Subcommand::Test {\n+                ref pass, ..\n+            } => pass.as_ref().map(|s| &s[..]),\n+            _ => None,\n+        }\n+    }\n }\n \n fn split(s: &[String]) -> Vec<String> {"}, {"sha": "1d54ca16a315bd22194f145c861672c6c5ba7200", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=0721364f0de6191cddeaaaeb112fb74aa1a9e30a", "patch": "@@ -1065,6 +1065,11 @@ impl Step for Compiletest {\n             }\n         });\n \n+        if let Some(ref pass) = builder.config.cmd.pass() {\n+            cmd.arg(\"--pass\");\n+            cmd.arg(pass);\n+        }\n+\n         if let Some(ref nodejs) = builder.config.nodejs {\n             cmd.arg(\"--nodejs\").arg(nodejs);\n         }"}, {"sha": "fa8859cbb3bb652282ed7d1ac8cd4182420a62cc", "filename": "src/test/ui/consts/const-eval/promoted_errors.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs?ref=0721364f0de6191cddeaaaeb112fb74aa1a9e30a", "patch": "@@ -1,19 +1,23 @@\n-#![warn(const_err)]\n-\n-// compile-pass\n // compile-flags: -O\n+\n+#![deny(const_err)]\n+\n fn main() {\n     println!(\"{}\", 0u32 - 1);\n     let _x = 0u32 - 1;\n-    //~^ WARN const_err\n+    //~^ ERROR this expression will panic at runtime [const_err]\n     println!(\"{}\", 1/(1-1));\n-    //~^ WARN const_err\n+    //~^ ERROR this expression will panic at runtime [const_err]\n+    //~| ERROR attempt to divide by zero [const_err]\n+    //~| ERROR reaching this expression at runtime will panic or abort [const_err]\n     let _x = 1/(1-1);\n-    //~^ WARN const_err\n-    //~| WARN const_err\n+    //~^ ERROR const_err\n+    //~| ERROR const_err\n     println!(\"{}\", 1/(false as u32));\n-    //~^ WARN const_err\n+    //~^ ERROR this expression will panic at runtime [const_err]\n+    //~| ERROR attempt to divide by zero [const_err]\n+    //~| ERROR reaching this expression at runtime will panic or abort [const_err]\n     let _x = 1/(false as u32);\n-    //~^ WARN const_err\n-    //~| WARN const_err\n+    //~^ ERROR const_err\n+    //~| ERROR const_err\n }"}, {"sha": "12407accf096f0ee5b01c1d03301317b4a81044c", "filename": "src/test/ui/consts/const-eval/promoted_errors.stderr", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr?ref=0721364f0de6191cddeaaaeb112fb74aa1a9e30a", "patch": "@@ -1,72 +1,74 @@\n-warning: this expression will panic at runtime\n+error: this expression will panic at runtime\n   --> $DIR/promoted_errors.rs:7:14\n    |\n LL |     let _x = 0u32 - 1;\n    |              ^^^^^^^^ attempt to subtract with overflow\n    |\n note: lint level defined here\n-  --> $DIR/promoted_errors.rs:1:9\n+  --> $DIR/promoted_errors.rs:3:9\n    |\n-LL | #![warn(const_err)]\n+LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n-warning: attempt to divide by zero\n+error: attempt to divide by zero\n   --> $DIR/promoted_errors.rs:9:20\n    |\n LL |     println!(\"{}\", 1/(1-1));\n    |                    ^^^^^^^\n \n-warning: this expression will panic at runtime\n+error: this expression will panic at runtime\n   --> $DIR/promoted_errors.rs:9:20\n    |\n LL |     println!(\"{}\", 1/(1-1));\n    |                    ^^^^^^^ attempt to divide by zero\n \n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:11:14\n+error: attempt to divide by zero\n+  --> $DIR/promoted_errors.rs:13:14\n    |\n LL |     let _x = 1/(1-1);\n    |              ^^^^^^^\n \n-warning: this expression will panic at runtime\n-  --> $DIR/promoted_errors.rs:11:14\n+error: this expression will panic at runtime\n+  --> $DIR/promoted_errors.rs:13:14\n    |\n LL |     let _x = 1/(1-1);\n    |              ^^^^^^^ attempt to divide by zero\n \n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:14:20\n+error: attempt to divide by zero\n+  --> $DIR/promoted_errors.rs:16:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));\n    |                    ^^^^^^^^^^^^^^^^\n \n-warning: this expression will panic at runtime\n-  --> $DIR/promoted_errors.rs:14:20\n+error: this expression will panic at runtime\n+  --> $DIR/promoted_errors.rs:16:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));\n    |                    ^^^^^^^^^^^^^^^^ attempt to divide by zero\n \n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:16:14\n+error: attempt to divide by zero\n+  --> $DIR/promoted_errors.rs:20:14\n    |\n LL |     let _x = 1/(false as u32);\n    |              ^^^^^^^^^^^^^^^^\n \n-warning: this expression will panic at runtime\n-  --> $DIR/promoted_errors.rs:16:14\n+error: this expression will panic at runtime\n+  --> $DIR/promoted_errors.rs:20:14\n    |\n LL |     let _x = 1/(false as u32);\n    |              ^^^^^^^^^^^^^^^^ attempt to divide by zero\n \n-warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:14:20\n+error: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors.rs:16:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));\n    |                    ^^^^^^^^^^^^^^^^ attempt to divide by zero\n \n-warning: reaching this expression at runtime will panic or abort\n+error: reaching this expression at runtime will panic or abort\n   --> $DIR/promoted_errors.rs:9:20\n    |\n LL |     println!(\"{}\", 1/(1-1));\n    |                    ^^^^^^^ attempt to divide by zero\n \n+error: aborting due to 11 previous errors\n+"}, {"sha": "2f17f95b7a3beffb5ddbdf99a76c529400edeae9", "filename": "src/test/ui/emit-artifact-notifications.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftest%2Fui%2Femit-artifact-notifications.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftest%2Fui%2Femit-artifact-notifications.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Femit-artifact-notifications.rs?ref=0721364f0de6191cddeaaaeb112fb74aa1a9e30a", "patch": "@@ -1,5 +1,7 @@\n // compile-flags:--emit=metadata --error-format=json -Z emit-artifact-notifications\n // compile-pass\n+// ignore-pass\n+// ^-- needed because `--pass check` does not emit the output needed.\n \n // A very basic test for the emission of artifact notifications in JSON output.\n "}, {"sha": "c1f874c079cb53a25f34816842bcc4a9d3064c18", "filename": "src/test/ui/lint/lint-type-overflow2.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.rs?ref=0721364f0de6191cddeaaaeb112fb74aa1a9e30a", "patch": "@@ -1,15 +1,13 @@\n // compile-flags: -O\n-#![warn(overflowing_literals)]\n-#![warn(const_err)]\n-// compile-pass\n \n-#[allow(unused_variables)]\n+#![deny(overflowing_literals)]\n+#![deny(const_err)]\n \n fn main() {\n-    let x2: i8 = --128; //~ warn: literal out of range for i8\n+    let x2: i8 = --128; //~ ERROR literal out of range for `i8`\n \n-    let x = -3.40282357e+38_f32; //~ warn: literal out of range for f32\n-    let x =  3.40282357e+38_f32; //~ warn: literal out of range for f32\n-    let x = -1.7976931348623159e+308_f64; //~ warn: literal out of range for f64\n-    let x =  1.7976931348623159e+308_f64; //~ warn: literal out of range for f64\n+    let x = -3.40282357e+38_f32; //~ ERROR literal out of range for `f32`\n+    let x =  3.40282357e+38_f32; //~ ERROR literal out of range for `f32`\n+    let x = -1.7976931348623159e+308_f64; //~ ERROR literal out of range for `f64`\n+    let x =  1.7976931348623159e+308_f64; //~ ERROR literal out of range for `f64`\n }"}, {"sha": "761b095464fe84574a9fb4f0a256130a5ecf5462", "filename": "src/test/ui/lint/lint-type-overflow2.stderr", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.stderr?ref=0721364f0de6191cddeaaaeb112fb74aa1a9e30a", "patch": "@@ -1,48 +1,38 @@\n-warning: literal out of range for `i8`\n-  --> $DIR/lint-type-overflow2.rs:9:20\n+error: literal out of range for `i8`\n+  --> $DIR/lint-type-overflow2.rs:7:20\n    |\n LL |     let x2: i8 = --128;\n    |                    ^^^\n    |\n note: lint level defined here\n-  --> $DIR/lint-type-overflow2.rs:2:9\n+  --> $DIR/lint-type-overflow2.rs:3:9\n    |\n-LL | #![warn(overflowing_literals)]\n+LL | #![deny(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-warning: literal out of range for `f32`\n-  --> $DIR/lint-type-overflow2.rs:11:14\n+error: literal out of range for `f32`\n+  --> $DIR/lint-type-overflow2.rs:9:14\n    |\n LL |     let x = -3.40282357e+38_f32;\n    |              ^^^^^^^^^^^^^^^^^^\n \n-warning: literal out of range for `f32`\n-  --> $DIR/lint-type-overflow2.rs:12:14\n+error: literal out of range for `f32`\n+  --> $DIR/lint-type-overflow2.rs:10:14\n    |\n LL |     let x =  3.40282357e+38_f32;\n    |              ^^^^^^^^^^^^^^^^^^\n \n-warning: literal out of range for `f64`\n-  --> $DIR/lint-type-overflow2.rs:13:14\n+error: literal out of range for `f64`\n+  --> $DIR/lint-type-overflow2.rs:11:14\n    |\n LL |     let x = -1.7976931348623159e+308_f64;\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: literal out of range for `f64`\n-  --> $DIR/lint-type-overflow2.rs:14:14\n+error: literal out of range for `f64`\n+  --> $DIR/lint-type-overflow2.rs:12:14\n    |\n LL |     let x =  1.7976931348623159e+308_f64;\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: this expression will panic at runtime\n-  --> $DIR/lint-type-overflow2.rs:9:18\n-   |\n-LL |     let x2: i8 = --128;\n-   |                  ^^^^^ attempt to negate with overflow\n-   |\n-note: lint level defined here\n-  --> $DIR/lint-type-overflow2.rs:3:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n+error: aborting due to 5 previous errors\n "}, {"sha": "ecfc03717db463694abc51b029672de0cc67ee07", "filename": "src/test/ui/print_type_sizes/generics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.rs?ref=0721364f0de6191cddeaaaeb112fb74aa1a9e30a", "patch": "@@ -1,5 +1,8 @@\n // compile-flags: -Z print-type-sizes\n // compile-pass\n+// ignore-pass\n+// ^-- needed because `--pass check` does not emit the output needed.\n+//     FIXME: consider using an attribute instead of side-effects.\n \n // This file illustrates how generics are handled: types have to be\n // monomorphized, in the MIR of the original function in which they"}, {"sha": "98b506b1f0db1d8deaf7475b7757b9dfeec0c67d", "filename": "src/test/ui/print_type_sizes/niche-filling.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs?ref=0721364f0de6191cddeaaaeb112fb74aa1a9e30a", "patch": "@@ -1,5 +1,8 @@\n // compile-flags: -Z print-type-sizes\n // compile-pass\n+// ignore-pass\n+// ^-- needed because `--pass check` does not emit the output needed.\n+//     FIXME: consider using an attribute instead of side-effects.\n \n // This file illustrates how niche-filling enums are handled,\n // modelled after cases like `Option<&u32>`, `Option<bool>` and such."}, {"sha": "f1b8a28ae304b942a4a3e68c959766c10d039f5a", "filename": "src/test/ui/print_type_sizes/no_duplicates.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.rs?ref=0721364f0de6191cddeaaaeb112fb74aa1a9e30a", "patch": "@@ -1,5 +1,8 @@\n // compile-flags: -Z print-type-sizes\n // compile-pass\n+// ignore-pass\n+// ^-- needed because `--pass check` does not emit the output needed.\n+//     FIXME: consider using an attribute instead of side-effects.\n \n // This file illustrates that when the same type occurs repeatedly\n // (even if multiple functions), it is only printed once in the"}, {"sha": "a8d409a91a240b467aa0e066dec95a3bc1bcf7db", "filename": "src/test/ui/print_type_sizes/packed.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs?ref=0721364f0de6191cddeaaaeb112fb74aa1a9e30a", "patch": "@@ -1,5 +1,8 @@\n // compile-flags: -Z print-type-sizes\n // compile-pass\n+// ignore-pass\n+// ^-- needed because `--pass check` does not emit the output needed.\n+//     FIXME: consider using an attribute instead of side-effects.\n \n // This file illustrates how packing is handled; it should cause\n // the elimination of padding that would normally be introduced"}, {"sha": "3b5248b6f7ebb26149c40b34c4aff91f07ef37a8", "filename": "src/test/ui/print_type_sizes/repr-align.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.rs?ref=0721364f0de6191cddeaaaeb112fb74aa1a9e30a", "patch": "@@ -1,5 +1,8 @@\n // compile-flags: -Z print-type-sizes\n // compile-pass\n+// ignore-pass\n+// ^-- needed because `--pass check` does not emit the output needed.\n+//     FIXME: consider using an attribute instead of side-effects.\n \n // This file illustrates how padding is handled: alignment\n // requirements can lead to the introduction of padding, either before"}, {"sha": "c33965c4f53eaa2e6cf6e76ffba9047678e92d68", "filename": "src/test/ui/print_type_sizes/uninhabited.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs?ref=0721364f0de6191cddeaaaeb112fb74aa1a9e30a", "patch": "@@ -1,5 +1,8 @@\n // compile-flags: -Z print-type-sizes\n // compile-pass\n+// ignore-pass\n+// ^-- needed because `--pass check` does not emit the output needed.\n+//     FIXME: consider using an attribute instead of side-effects.\n \n #![feature(never_type)]\n #![feature(start)]"}, {"sha": "e950f7d62d6453908062eb13755ec7650b0b330b", "filename": "src/test/ui/proc-macro/auxiliary/generate-mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fgenerate-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fgenerate-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fgenerate-mod.rs?ref=0721364f0de6191cddeaaaeb112fb74aa1a9e30a", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // force-host\n // no-prefer-dynamic\n+// ignore-pass\n \n #![crate_type = \"proc-macro\"]\n "}, {"sha": "ebc2717499843c28255eb685654310f5ff02b61a", "filename": "src/test/ui/save-analysis/emit-notifications.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftest%2Fui%2Fsave-analysis%2Femit-notifications.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftest%2Fui%2Fsave-analysis%2Femit-notifications.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Femit-notifications.rs?ref=0721364f0de6191cddeaaaeb112fb74aa1a9e30a", "patch": "@@ -1,4 +1,7 @@\n // compile-pass\n // compile-flags: -Zsave-analysis -Zemit-artifact-notifications\n // compile-flags: --crate-type rlib --error-format=json\n+// ignore-pass\n+// ^-- needed because otherwise, the .stderr file changes with --pass check\n+\n pub fn foo() {}"}, {"sha": "a75d9f0b0bb9bba12f4e75d05b7a6d9d874816f7", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=0721364f0de6191cddeaaaeb112fb74aa1a9e30a", "patch": "@@ -99,6 +99,36 @@ impl fmt::Display for Mode {\n     }\n }\n \n+#[derive(Clone, Copy, PartialEq, Debug, Hash)]\n+pub enum PassMode {\n+    Check,\n+    Build,\n+    Run,\n+}\n+\n+impl FromStr for PassMode {\n+    type Err = ();\n+    fn from_str(s: &str) -> Result<Self, ()> {\n+        match s {\n+            \"check\" => Ok(PassMode::Check),\n+            \"build\" => Ok(PassMode::Build),\n+            \"run\" => Ok(PassMode::Run),\n+            _ => Err(()),\n+        }\n+    }\n+}\n+\n+impl fmt::Display for PassMode {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let s = match *self {\n+            PassMode::Check => \"check\",\n+            PassMode::Build => \"build\",\n+            PassMode::Run => \"run\",\n+        };\n+        fmt::Display::fmt(s, f)\n+    }\n+}\n+\n #[derive(Clone, Debug, PartialEq)]\n pub enum CompareMode {\n     Nll,\n@@ -184,6 +214,9 @@ pub struct Config {\n     /// Exactly match the filter, rather than a substring\n     pub filter_exact: bool,\n \n+    /// Force the pass mode of a check/build/run-pass test to this mode.\n+    pub force_pass_mode: Option<PassMode>,\n+\n     /// Write out a parseable log of tests that were run\n     pub logfile: Option<PathBuf>,\n "}, {"sha": "52f777db2daa681aa2f149a348075b9a1da617d1", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=0721364f0de6191cddeaaaeb112fb74aa1a9e30a", "patch": "@@ -6,7 +6,7 @@ use std::path::{Path, PathBuf};\n \n use log::*;\n \n-use crate::common::{self, CompareMode, Config, Mode};\n+use crate::common::{self, CompareMode, Config, Mode, PassMode};\n use crate::util;\n \n use crate::extract_gdb_version;\n@@ -290,13 +290,6 @@ impl EarlyProps {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Debug)]\n-pub enum PassMode {\n-    Check,\n-    Build,\n-    Run,\n-}\n-\n #[derive(Clone, Debug)]\n pub struct TestProps {\n     // Lines that should be expected, in order, on standard out\n@@ -357,7 +350,9 @@ pub struct TestProps {\n     // arguments. (In particular, it propagates to the aux-builds.)\n     pub incremental_dir: Option<PathBuf>,\n     // How far should the test proceed while still passing.\n-    pub pass_mode: Option<PassMode>,\n+    pass_mode: Option<PassMode>,\n+    // Ignore `--pass` overrides from the command line for this test.\n+    ignore_pass: bool,\n     // rustdoc will test the output of the `--test` option\n     pub check_test_line_numbers_match: bool,\n     // Do not pass `-Z ui-testing` to UI tests\n@@ -400,6 +395,7 @@ impl TestProps {\n             forbid_output: vec![],\n             incremental_dir: None,\n             pass_mode: None,\n+            ignore_pass: false,\n             check_test_line_numbers_match: false,\n             disable_ui_testing_normalization: false,\n             normalize_stdout: vec![],\n@@ -528,6 +524,10 @@ impl TestProps {\n \n             self.update_pass_mode(ln, cfg, config);\n \n+            if !self.ignore_pass {\n+                self.ignore_pass = config.parse_ignore_pass(ln);\n+            }\n+\n             if !self.disable_ui_testing_normalization {\n                 self.disable_ui_testing_normalization =\n                     config.parse_disable_ui_testing_normalization(ln);\n@@ -608,6 +608,15 @@ impl TestProps {\n             (_, None) => {}\n         }\n     }\n+\n+    pub fn pass_mode(&self, config: &Config) -> Option<PassMode> {\n+        if !self.ignore_pass {\n+            if let (mode @ Some(_), Some(_)) = (config.force_pass_mode, self.pass_mode) {\n+                return mode;\n+            }\n+        }\n+        self.pass_mode\n+    }\n }\n \n fn iter_header(testfile: &Path, cfg: Option<&str>, it: &mut dyn FnMut(&str)) {\n@@ -743,6 +752,10 @@ impl Config {\n         self.parse_name_directive(line, \"check-test-line-numbers-match\")\n     }\n \n+    fn parse_ignore_pass(&self, line: &str) -> bool {\n+        self.parse_name_directive(line, \"ignore-pass\")\n+    }\n+\n     fn parse_assembly_output(&self, line: &str) -> Option<String> {\n         self.parse_name_value_directive(line, \"assembly-output\")\n             .map(|r| r.trim().to_string())"}, {"sha": "597fdf2d95e3097b7fcd5214703c53fba5674473", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=0721364f0de6191cddeaaaeb112fb74aa1a9e30a", "patch": "@@ -5,7 +5,7 @@\n \n extern crate test;\n \n-use crate::common::CompareMode;\n+use crate::common::{CompareMode, PassMode};\n use crate::common::{expected_output_path, output_base_dir, output_relative_path, UI_EXTENSIONS};\n use crate::common::{Config, TestPaths};\n use crate::common::{DebugInfoCdb, DebugInfoGdbLldb, DebugInfoGdb, DebugInfoLldb, Mode, Pretty};\n@@ -128,6 +128,12 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             \"(compile-fail|run-fail|run-pass|\\\n              run-pass-valgrind|pretty|debug-info|incremental|mir-opt)\",\n         )\n+        .optopt(\n+            \"\",\n+            \"pass\",\n+            \"force {check,build,run}-pass tests to this mode.\",\n+            \"check | build | run\"\n+        )\n         .optflag(\"\", \"ignored\", \"run tests marked as ignored\")\n         .optflag(\"\", \"exact\", \"filters match exactly\")\n         .optopt(\n@@ -320,6 +326,10 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         run_ignored,\n         filter: matches.free.first().cloned(),\n         filter_exact: matches.opt_present(\"exact\"),\n+        force_pass_mode: matches.opt_str(\"pass\").map(|mode|\n+            mode.parse::<PassMode>()\n+                .unwrap_or_else(|_| panic!(\"unknown `--pass` option `{}` given\", mode))\n+        ),\n         logfile: matches.opt_str(\"logfile\").map(|s| PathBuf::from(&s)),\n         runtool: matches.opt_str(\"runtool\"),\n         host_rustcflags: matches.opt_str(\"host-rustcflags\"),\n@@ -382,6 +392,10 @@ pub fn log_config(config: &Config) {\n         ),\n     );\n     logv(c, format!(\"filter_exact: {}\", config.filter_exact));\n+    logv(c, format!(\n+        \"force_pass_mode: {}\",\n+        opt_str(&config.force_pass_mode.map(|m| format!(\"{}\", m))),\n+    ));\n     logv(c, format!(\"runtool: {}\", opt_str(&config.runtool)));\n     logv(\n         c,"}, {"sha": "35caf82dd71287fcf65e17d335cdd2329dc71150", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0721364f0de6191cddeaaaeb112fb74aa1a9e30a/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=0721364f0de6191cddeaaaeb112fb74aa1a9e30a", "patch": "@@ -1,6 +1,6 @@\n // ignore-tidy-filelength\n \n-use crate::common::CompareMode;\n+use crate::common::{CompareMode, PassMode};\n use crate::common::{expected_output_path, UI_EXTENSIONS, UI_FIXED, UI_STDERR, UI_STDOUT};\n use crate::common::{output_base_dir, output_base_name, output_testname_unique};\n use crate::common::{Codegen, CodegenUnits, Rustdoc};\n@@ -10,7 +10,7 @@ use crate::common::{Config, TestPaths};\n use crate::common::{Incremental, MirOpt, RunMake, Ui, JsDocTest, Assembly};\n use diff;\n use crate::errors::{self, Error, ErrorKind};\n-use crate::header::{TestProps, PassMode};\n+use crate::header::TestProps;\n use crate::json;\n use regex::{Captures, Regex};\n use rustfix::{apply_suggestions, get_suggestions_from_json, Filter};\n@@ -260,6 +260,10 @@ pub fn compute_stamp_hash(config: &Config) -> String {\n         env::var_os(\"PYTHONPATH\").hash(&mut hash);\n     }\n \n+    if let Ui | RunPass | Incremental | Pretty = config.mode {\n+        config.force_pass_mode.hash(&mut hash);\n+    }\n+\n     format!(\"{:x}\", hash.finish())\n }\n \n@@ -309,10 +313,13 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n+    fn pass_mode(&self) -> Option<PassMode> {\n+        self.props.pass_mode(self.config)\n+    }\n+\n     fn should_run_successfully(&self) -> bool {\n         match self.config.mode {\n-            RunPass => true,\n-            Ui => self.props.pass_mode == Some(PassMode::Run),\n+            RunPass | Ui => self.pass_mode() == Some(PassMode::Run),\n             mode => panic!(\"unimplemented for mode {:?}\", mode),\n         }\n     }\n@@ -322,15 +329,15 @@ impl<'test> TestCx<'test> {\n             CompileFail => false,\n             RunPass => true,\n             JsDocTest => true,\n-            Ui => self.props.pass_mode.is_some(),\n+            Ui => self.pass_mode().is_some(),\n             Incremental => {\n                 let revision = self.revision\n                     .expect(\"incremental tests require a list of revisions\");\n                 if revision.starts_with(\"rpass\") || revision.starts_with(\"rfail\") {\n                     true\n                 } else if revision.starts_with(\"cfail\") {\n                     // FIXME: would be nice if incremental revs could start with \"cpass\"\n-                    self.props.pass_mode.is_some()\n+                    self.pass_mode().is_some()\n                 } else {\n                     panic!(\"revision name must begin with rpass, rfail, or cfail\");\n                 }\n@@ -1341,7 +1348,7 @@ impl<'test> TestCx<'test> {\n     fn check_error_patterns(&self, output_to_check: &str, proc_res: &ProcRes) {\n         debug!(\"check_error_patterns\");\n         if self.props.error_patterns.is_empty() {\n-            if self.props.pass_mode.is_some() {\n+            if self.pass_mode().is_some() {\n                 return;\n             } else {\n                 self.fatal(&format!(\n@@ -1871,7 +1878,11 @@ impl<'test> TestCx<'test> {\n         result\n     }\n \n-    fn make_compile_args(&self, input_file: &Path, output_file: TargetLocation) -> Command {\n+    fn make_compile_args(\n+        &self,\n+        input_file: &Path,\n+        output_file: TargetLocation,\n+    ) -> Command {\n         let is_rustdoc = self.config.src_base.ends_with(\"rustdoc-ui\") ||\n                          self.config.src_base.ends_with(\"rustdoc-js\");\n         let mut rustc = if !is_rustdoc {\n@@ -1968,14 +1979,7 @@ impl<'test> TestCx<'test> {\n             }\n         }\n \n-        if self.props.pass_mode == Some(PassMode::Check) {\n-            assert!(\n-                !self\n-                    .props\n-                    .compile_flags\n-                    .iter()\n-                    .any(|s| s.starts_with(\"--emit\"))\n-            );\n+        if let Some(PassMode::Check) = self.pass_mode() {\n             rustc.args(&[\"--emit\", \"metadata\"]);\n         }\n "}]}