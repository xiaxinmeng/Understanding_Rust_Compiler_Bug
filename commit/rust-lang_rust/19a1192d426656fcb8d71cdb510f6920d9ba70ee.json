{"sha": "19a1192d426656fcb8d71cdb510f6920d9ba70ee", "node_id": "C_kwDOAAsO6NoAKDE5YTExOTJkNDI2NjU2ZmNiOGQ3MWNkYjUxMGY2OTIwZDliYTcwZWU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-17T11:55:27Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-21T20:32:41Z"}, "message": "Add a helper for replacing the self type in trait refs", "tree": {"sha": "d2e9d33af7c1148b1769110c8d1ac2c66fb0a864", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2e9d33af7c1148b1769110c8d1ac2c66fb0a864"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19a1192d426656fcb8d71cdb510f6920d9ba70ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19a1192d426656fcb8d71cdb510f6920d9ba70ee", "html_url": "https://github.com/rust-lang/rust/commit/19a1192d426656fcb8d71cdb510f6920d9ba70ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19a1192d426656fcb8d71cdb510f6920d9ba70ee/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f77c97b386f05083f039f0130146addf99eefd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f77c97b386f05083f039f0130146addf99eefd9", "html_url": "https://github.com/rust-lang/rust/commit/6f77c97b386f05083f039f0130146addf99eefd9"}], "stats": {"total": 44, "additions": 15, "deletions": 29}, "files": [{"sha": "7d081bac3bda6fc285b8f7b6240081fa0d2216da", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19a1192d426656fcb8d71cdb510f6920d9ba70ee/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a1192d426656fcb8d71cdb510f6920d9ba70ee/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=19a1192d426656fcb8d71cdb510f6920d9ba70ee", "patch": "@@ -539,11 +539,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         .subst_iter_copied(self.tcx, substs)\n                     {\n                         let pred = pred.kind().rebind(match pred.kind().skip_binder() {\n-                            ty::PredicateKind::Trait(mut trait_pred) => {\n+                            ty::PredicateKind::Trait(trait_pred) => {\n                                 assert_eq!(trait_pred.trait_ref.self_ty(), opaque_ty);\n-                                trait_pred.trait_ref.substs =\n-                                    self.tcx.mk_substs_trait(ty, &trait_pred.trait_ref.substs[1..]);\n-                                ty::PredicateKind::Trait(trait_pred)\n+                                ty::PredicateKind::Trait(trait_pred.with_self_type(self.tcx, ty))\n                             }\n                             ty::PredicateKind::Projection(mut proj_pred) => {\n                                 assert_eq!(proj_pred.projection_ty.self_ty(), opaque_ty);"}, {"sha": "8bac76d559f24756d6479def82227dfb03d3d47f", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19a1192d426656fcb8d71cdb510f6920d9ba70ee/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a1192d426656fcb8d71cdb510f6920d9ba70ee/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=19a1192d426656fcb8d71cdb510f6920d9ba70ee", "patch": "@@ -852,6 +852,10 @@ impl<'tcx> TraitPredicate<'tcx> {\n         }\n     }\n \n+    pub fn with_self_type(self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> Self {\n+        Self { trait_ref: self.trait_ref.with_self_type(tcx, self_ty), ..self }\n+    }\n+\n     pub fn def_id(self) -> DefId {\n         self.trait_ref.def_id\n     }"}, {"sha": "47cdabb5f8195be3d84b34fd1483c5d9d93e1794", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19a1192d426656fcb8d71cdb510f6920d9ba70ee/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a1192d426656fcb8d71cdb510f6920d9ba70ee/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=19a1192d426656fcb8d71cdb510f6920d9ba70ee", "patch": "@@ -811,6 +811,10 @@ impl<'tcx> TraitRef<'tcx> {\n         TraitRef { def_id, substs }\n     }\n \n+    pub fn with_self_type(self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> Self {\n+        tcx.mk_trait_ref(self.def_id, self_ty, &self.substs[1..])\n+    }\n+\n     /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`\n     /// are the parameters defined on trait.\n     pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {"}, {"sha": "cb9902bed546b7a6e500ddea4b7bf8fb34fe2cd1", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/19a1192d426656fcb8d71cdb510f6920d9ba70ee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a1192d426656fcb8d71cdb510f6920d9ba70ee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=19a1192d426656fcb8d71cdb510f6920d9ba70ee", "patch": "@@ -998,13 +998,8 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         if trait_predicate.skip_binder().self_ty().is_never()\n                             && self.fallback_has_occurred\n                         {\n-                            let predicate = trait_predicate.map_bound(|mut trait_pred| {\n-                                trait_pred.trait_ref = self.tcx.mk_trait_ref(\n-                                    trait_pred.trait_ref.def_id,\n-                                    self.tcx.mk_unit(),\n-                                    &trait_pred.trait_ref.substs[1..],\n-                                );\n-                                trait_pred\n+                            let predicate = trait_predicate.map_bound(|trait_pred| {\n+                                trait_pred.with_self_type(self.tcx, self.tcx.mk_unit())\n                             });\n                             let unit_obligation = obligation.with(tcx, predicate);\n                             if self.predicate_may_hold(&unit_obligation) {\n@@ -2026,14 +2021,8 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         trait_ref_and_ty: ty::Binder<'tcx, (ty::TraitPredicate<'tcx>, Ty<'tcx>)>,\n     ) -> PredicateObligation<'tcx> {\n-        let trait_pred = trait_ref_and_ty.map_bound_ref(|(tr, new_self_ty)| ty::TraitPredicate {\n-            trait_ref: self.tcx.mk_trait_ref(\n-                tr.trait_ref.def_id,\n-                *new_self_ty,\n-                &tr.trait_ref.substs[1..],\n-            ),\n-            ..*tr\n-        });\n+        let trait_pred = trait_ref_and_ty\n+            .map_bound(|(tr, new_self_ty)| tr.with_self_type(self.tcx, new_self_ty));\n \n         Obligation::new(self.tcx, ObligationCause::dummy(), param_env, trait_pred)\n     }"}, {"sha": "f844da500328efafa678598aea9f69019317c55b", "filename": "compiler/rustc_trait_selection/src/traits/relationships.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/19a1192d426656fcb8d71cdb510f6920d9ba70ee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a1192d426656fcb8d71cdb510f6920d9ba70ee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs?ref=19a1192d426656fcb8d71cdb510f6920d9ba70ee", "patch": "@@ -18,11 +18,6 @@ pub(crate) fn update<'tcx, T>(\n     {\n         let new_self_ty = infcx.tcx.types.unit;\n \n-        let trait_ref = infcx.tcx.mk_trait_ref(\n-            tpred.trait_ref.def_id,\n-            new_self_ty, &tpred.trait_ref.substs[1..],\n-        );\n-\n         // Then construct a new obligation with Self = () added\n         // to the ParamEnv, and see if it holds.\n         let o = obligation.with(infcx.tcx,\n@@ -31,11 +26,7 @@ pub(crate) fn update<'tcx, T>(\n                 .kind()\n                 .rebind(\n                     // (*) binder moved here\n-                    ty::PredicateKind::Trait(ty::TraitPredicate {\n-                        trait_ref,\n-                        constness: tpred.constness,\n-                        polarity: tpred.polarity,\n-                    })\n+                    ty::PredicateKind::Trait(tpred.with_self_type(infcx.tcx, new_self_ty))\n                 ),\n         );\n         // Don't report overflow errors. Otherwise equivalent to may_hold."}]}