{"sha": "6cc96a45acfc2bf0af1942439c00adebf64c0ac5", "node_id": "C_kwDOAAsO6NoAKDZjYzk2YTQ1YWNmYzJiZjBhZjE5NDI0MzljMDBhZGViZjY0YzBhYzU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-18T18:15:48Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-19T14:41:41Z"}, "message": "Add asyncness table.", "tree": {"sha": "429ebfefcfcf4e81a3bf7cd0c93cc3b3c604995e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/429ebfefcfcf4e81a3bf7cd0c93cc3b3c604995e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cc96a45acfc2bf0af1942439c00adebf64c0ac5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cc96a45acfc2bf0af1942439c00adebf64c0ac5", "html_url": "https://github.com/rust-lang/rust/commit/6cc96a45acfc2bf0af1942439c00adebf64c0ac5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cc96a45acfc2bf0af1942439c00adebf64c0ac5/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bacdb760f18265b3a5d05406bf2cabb1d33bb5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bacdb760f18265b3a5d05406bf2cabb1d33bb5a", "html_url": "https://github.com/rust-lang/rust/commit/7bacdb760f18265b3a5d05406bf2cabb1d33bb5a"}], "stats": {"total": 26, "additions": 7, "deletions": 19}, "files": [{"sha": "dc4909bbf5c8c4936e343af9ddfc38e1d5b81f23", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6cc96a45acfc2bf0af1942439c00adebf64c0ac5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc96a45acfc2bf0af1942439c00adebf64c0ac5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=6cc96a45acfc2bf0af1942439c00adebf64c0ac5", "patch": "@@ -1431,15 +1431,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         constness == hir::Constness::Const\n     }\n \n-    fn asyncness(self, id: DefIndex) -> hir::IsAsync {\n-        match self.kind(id) {\n-            EntryKind::Fn(data) => data.decode(self).asyncness,\n-            EntryKind::AssocFn(data) => data.decode(self).fn_data.asyncness,\n-            EntryKind::ForeignFn(data) => data.decode(self).asyncness,\n-            _ => bug!(\"asyncness: expected function kind\"),\n-        }\n-    }\n-\n     fn is_foreign_item(self, id: DefIndex) -> bool {\n         match self.kind(id) {\n             EntryKind::ForeignImmStatic | EntryKind::ForeignMutStatic | EntryKind::ForeignFn(_) => {"}, {"sha": "240792a939b26abc2718c8e9b94f6eaf6da76288", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cc96a45acfc2bf0af1942439c00adebf64c0ac5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc96a45acfc2bf0af1942439c00adebf64c0ac5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=6cc96a45acfc2bf0af1942439c00adebf64c0ac5", "patch": "@@ -138,6 +138,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     coerce_unsized_info => { table }\n     mir_const_qualif => { table }\n     rendered_const => { table }\n+    asyncness => { table }\n \n     trait_def => { cdata.get_trait_def(def_id.index, tcx.sess) }\n     adt_def => { cdata.get_adt_def(def_id.index, tcx) }\n@@ -149,7 +150,6 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     associated_item => { cdata.get_associated_item(def_id.index) }\n     inherent_impls => { cdata.get_inherent_implementations_for_type(tcx, def_id.index) }\n     is_const_fn_raw => { cdata.is_const_fn_raw(def_id.index) }\n-    asyncness => { cdata.asyncness(def_id.index) }\n     is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n     static_mutability => { cdata.static_mutability(def_id.index) }\n     generator_kind => { cdata.generator_kind(def_id.index) }"}, {"sha": "7142242aac7d03032bbdcd2ea2842f8abe7b8f3f", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6cc96a45acfc2bf0af1942439c00adebf64c0ac5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc96a45acfc2bf0af1942439c00adebf64c0ac5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=6cc96a45acfc2bf0af1942439c00adebf64c0ac5", "patch": "@@ -1199,11 +1199,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                         hir::TraitFn::Required(ref names) => self.encode_fn_param_names(names),\n                         hir::TraitFn::Provided(body) => self.encode_fn_param_names_for_body(body),\n                     };\n-                    FnData {\n-                        asyncness: m_sig.header.asyncness,\n-                        constness: hir::Constness::NotConst,\n-                        param_names,\n-                    }\n+                    record!(self.tables.asyncness[def_id] <- m_sig.header.asyncness);\n+                    FnData { constness: hir::Constness::NotConst, param_names }\n                 } else {\n                     bug!()\n                 };\n@@ -1264,8 +1261,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             }\n             ty::AssocKind::Fn => {\n                 let fn_data = if let hir::ImplItemKind::Fn(ref sig, body) = ast_item.kind {\n+                    record!(self.tables.asyncness[def_id] <- sig.header.asyncness);\n                     FnData {\n-                        asyncness: sig.header.asyncness,\n                         // Can be inside `impl const Trait`, so using sig.header.constness is not reliable\n                         constness: if self.tcx.is_const_fn_raw(def_id) {\n                             hir::Constness::Const\n@@ -1407,8 +1404,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 EntryKind::Const\n             }\n             hir::ItemKind::Fn(ref sig, .., body) => {\n+                record!(self.tables.asyncness[def_id] <- sig.header.asyncness);\n                 let data = FnData {\n-                    asyncness: sig.header.asyncness,\n                     constness: sig.header.constness,\n                     param_names: self.encode_fn_param_names_for_body(body),\n                 };\n@@ -1876,8 +1873,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         match nitem.kind {\n             hir::ForeignItemKind::Fn(_, ref names, _) => {\n+                record!(self.tables.asyncness[def_id] <- hir::IsAsync::NotAsync);\n                 let data = FnData {\n-                    asyncness: hir::IsAsync::NotAsync,\n                     constness: if self.tcx.is_const_fn_raw(def_id) {\n                         hir::Constness::Const\n                     } else {"}, {"sha": "d3d3fc61e4cd285dbf2254647c550aa60041389a", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cc96a45acfc2bf0af1942439c00adebf64c0ac5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc96a45acfc2bf0af1942439c00adebf64c0ac5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=6cc96a45acfc2bf0af1942439c00adebf64c0ac5", "patch": "@@ -310,6 +310,7 @@ define_tables! {\n     coerce_unsized_info: Table<DefIndex, Lazy!(ty::adjustment::CoerceUnsizedInfo)>,\n     mir_const_qualif: Table<DefIndex, Lazy!(mir::ConstQualifs)>,\n     rendered_const: Table<DefIndex, Lazy!(String)>,\n+    asyncness: Table<DefIndex, Lazy!(hir::IsAsync)>,\n \n     trait_item_def_id: Table<DefIndex, Lazy<DefId>>,\n     inherent_impls: Table<DefIndex, Lazy<[DefIndex]>>,\n@@ -361,7 +362,6 @@ enum EntryKind {\n \n #[derive(MetadataEncodable, MetadataDecodable)]\n struct FnData {\n-    asyncness: hir::IsAsync,\n     constness: hir::Constness,\n     param_names: Lazy<[Ident]>,\n }"}]}