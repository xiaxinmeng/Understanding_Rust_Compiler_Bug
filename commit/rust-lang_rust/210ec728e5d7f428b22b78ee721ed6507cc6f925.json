{"sha": "210ec728e5d7f428b22b78ee721ed6507cc6f925", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMGVjNzI4ZTVkN2Y0MjhiMjJiNzhlZTcyMWVkNjUwN2NjNmY5MjU=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-05-11T18:23:52Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-05-12T15:31:00Z"}, "message": "Metadata collection monster searching for configurations", "tree": {"sha": "4e47ff7f5ecd6182f8d6b1c56f502c84a5a089b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e47ff7f5ecd6182f8d6b1c56f502c84a5a089b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/210ec728e5d7f428b22b78ee721ed6507cc6f925", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/210ec728e5d7f428b22b78ee721ed6507cc6f925", "html_url": "https://github.com/rust-lang/rust/commit/210ec728e5d7f428b22b78ee721ed6507cc6f925", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/210ec728e5d7f428b22b78ee721ed6507cc6f925/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa15a5442a975180a367373e563b7f8c626b5344", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa15a5442a975180a367373e563b7f8c626b5344", "html_url": "https://github.com/rust-lang/rust/commit/aa15a5442a975180a367373e563b7f8c626b5344"}], "stats": {"total": 114, "additions": 109, "deletions": 5}, "files": [{"sha": "f0fae6ee1c76b30198b83f1eaba1ddb95d071541", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/210ec728e5d7f428b22b78ee721ed6507cc6f925/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ec728e5d7f428b22b78ee721ed6507cc6f925/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=210ec728e5d7f428b22b78ee721ed6507cc6f925", "patch": "@@ -1009,7 +1009,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     #[cfg(feature = \"metadata-collector-lint\")]\n     {\n         if std::env::var(\"ENABLE_METADATA_COLLECTION\").eq(&Ok(\"1\".to_string())) {\n-            store.register_late_pass(|| box utils::internal_lints::metadata_collector::MetadataCollector::default());\n+            store.register_late_pass(|| box utils::internal_lints::metadata_collector::MetadataCollector::new());\n         }\n     }\n "}, {"sha": "98b86f73a1f6b1c5e5a2243d527a48d91a3c5286", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/210ec728e5d7f428b22b78ee721ed6507cc6f925/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ec728e5d7f428b22b78ee721ed6507cc6f925/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=210ec728e5d7f428b22b78ee721ed6507cc6f925", "patch": "@@ -26,13 +26,13 @@ impl TryConf {\n \n macro_rules! define_Conf {\n     ($(\n-        #[$doc:meta]\n+        #[doc = $doc:literal]\n         $(#[conf_deprecated($dep:literal)])?\n         ($name:ident: $ty:ty = $default:expr),\n     )*) => {\n         /// Clippy lint configuration\n         pub struct Conf {\n-            $(#[$doc] pub $name: $ty,)*\n+            $(#[doc = $doc] pub $name: $ty,)*\n         }\n \n         mod defaults {\n@@ -89,6 +89,24 @@ macro_rules! define_Conf {\n                 Ok(TryConf { conf, errors })\n             }\n         }\n+\n+        #[cfg(feature = \"metadata-collector-lint\")]\n+        pub mod metadata {\n+            use crate::utils::internal_lints::metadata_collector::ClippyConfigurationBasicInfo;\n+\n+            pub(crate) fn get_configuration_metadata() -> Vec<ClippyConfigurationBasicInfo> {\n+                vec![\n+                    $(\n+                        ClippyConfigurationBasicInfo {\n+                            name: stringify!($name),\n+                            config_type: stringify!($ty),\n+                            default: stringify!($default),\n+                            doc_comment: $doc,\n+                        },\n+                    )+\n+                ]\n+            }\n+        }\n     };\n }\n \n@@ -100,7 +118,7 @@ define_Conf! {\n     (blacklisted_names: Vec<String> = [\"foo\", \"baz\", \"quux\"].iter().map(ToString::to_string).collect()),\n     /// Lint: COGNITIVE_COMPLEXITY. The maximum cognitive complexity a function can have\n     (cognitive_complexity_threshold: u64 = 25),\n-    /// DEPRECATED LINT: CYCLOMATIC_COMPLEXITY. Use the Cognitive Complexity lint instead.\n+    /// Lint: CYCLOMATIC_COMPLEXITY. Use the Cognitive Complexity lint instead.\n     #[conf_deprecated(\"Please use `cognitive-complexity-threshold` instead\")]\n     (cyclomatic_complexity_threshold: Option<u64> = None),\n     /// Lint: DOC_MARKDOWN. The list of words this lint should not consider as identifiers needing ticks"}, {"sha": "308f61beec3a7e4d8d16cb82a413c00e207a5dd4", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 87, "deletions": 1, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/210ec728e5d7f428b22b78ee721ed6507cc6f925/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ec728e5d7f428b22b78ee721ed6507cc6f925/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=210ec728e5d7f428b22b78ee721ed6507cc6f925", "patch": "@@ -102,13 +102,24 @@ declare_clippy_lint! {\n impl_lint_pass!(MetadataCollector => [INTERNAL_METADATA_COLLECTOR]);\n \n #[allow(clippy::module_name_repetitions)]\n-#[derive(Debug, Clone, Default)]\n+#[derive(Debug, Clone)]\n pub struct MetadataCollector {\n     /// All collected lints\n     ///\n     /// We use a Heap here to have the lints added in alphabetic order in the export\n     lints: BinaryHeap<LintMetadata>,\n     applicability_info: FxHashMap<String, ApplicabilityInfo>,\n+    config: Vec<ClippyConfiguration>,\n+}\n+\n+impl MetadataCollector {\n+    pub fn new() -> Self {\n+        Self {\n+            lints: BinaryHeap::<LintMetadata>::default(),\n+            applicability_info: FxHashMap::<String, ApplicabilityInfo>::default(),\n+            config: collect_configs(),\n+        }\n+    }\n }\n \n impl Drop for MetadataCollector {\n@@ -214,6 +225,81 @@ impl Serialize for ApplicabilityInfo {\n     }\n }\n \n+#[derive(Debug)]\n+pub(crate) struct ClippyConfigurationBasicInfo {\n+    pub name: &'static str,\n+    pub config_type: &'static str,\n+    pub default: &'static str,\n+    pub doc_comment: &'static str,\n+}\n+\n+#[derive(Debug, Clone, Default)]\n+struct ClippyConfiguration {\n+    name: String,\n+    lints: Vec<String>,\n+    doc: String,\n+    config_type: &'static str,\n+    default: String,\n+}\n+\n+// ==================================================================\n+// Configuration\n+// ==================================================================\n+fn collect_configs() -> Vec<ClippyConfiguration> {\n+    let cons = crate::utils::conf::metadata::get_configuration_metadata();\n+    cons.iter()\n+        .map(move |x| {\n+            let (lints, doc) = parse_config_field_doc(x.doc_comment)\n+                .unwrap_or_else(|| (vec![], \"[ERROR] MALFORMED DOC COMMENT\".to_string()));\n+\n+            ClippyConfiguration {\n+                name: to_kebab(x.name),\n+                lints,\n+                doc,\n+                config_type: x.config_type,\n+                default: x.default.to_string(),\n+            }\n+        })\n+        .collect()\n+}\n+\n+/// This parses the field documentation of the config struct.\n+///\n+/// ```rust, ignore\n+/// parse_config_field_doc(cx, \"Lint: LINT_NAME_1, LINT_NAME_2. Papa penguin, papa penguin\")\n+/// ```\n+///\n+/// Would yield:\n+/// ```rust, ignore\n+/// Some([\"lint_name_1\", \"lint_name_2\"], \"Papa penguin, papa penguin\")\n+/// ```\n+fn parse_config_field_doc(doc_comment: &str) -> Option<(Vec<String>, String)> {\n+    const DOC_START: &str = \" Lint: \";\n+    if_chain! {\n+        if doc_comment.starts_with(DOC_START);\n+        if let Some(split_pos) = doc_comment.find('.');\n+        then {\n+            let mut doc_comment = doc_comment.to_string();\n+            let documentation = doc_comment.split_off(split_pos);\n+\n+            doc_comment.make_ascii_lowercase();\n+            let lints: Vec<String> = doc_comment.split_off(DOC_START.len()).split(\", \").map(str::to_string).collect();\n+\n+            Some((lints, documentation))\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+/// Transforms a given `snake_case_string` to a tasty `kebab-case-string`\n+fn to_kebab(config_name: &str) -> String {\n+    config_name.replace('_', \"-\")\n+}\n+\n+// ==================================================================\n+// Lint pass\n+// ==================================================================\n impl<'hir> LateLintPass<'hir> for MetadataCollector {\n     /// Collecting lint declarations like:\n     /// ```rust, ignore"}]}