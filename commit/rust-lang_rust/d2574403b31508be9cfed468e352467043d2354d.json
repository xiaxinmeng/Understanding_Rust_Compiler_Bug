{"sha": "d2574403b31508be9cfed468e352467043d2354d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNTc0NDAzYjMxNTA4YmU5Y2ZlZDQ2OGUzNTI0NjcwNDNkMjM1NGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-08T01:15:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-08T01:15:50Z"}, "message": "Auto merge of #64882 - ehuss:stabilize-bare-extern, r=eddyb\n\nStabilize --extern flag without a path.\n\nThis stabilizes the `--extern` flag without a path, implemented in #54116.\n\nThis flag is used to add a crate that may be found in the search path to the extern prelude. The intent of stabilizing this now is to change Cargo to emit this flag for `proc_macro` when building a proc-macro crate. This will allow the ability to elide `extern crate proc_macro;` for proc-macros, one of the few places where it is still necessary.\n\nIt is intended that Cargo may also use this flag for other cases in the future as part of the [std-aware work](https://github.com/rust-lang/wg-cargo-std-aware/). There will likely be some kind of syntax where users may declare dependencies on other crates (such as `alloc`), and Cargo will use this flag so that they may be used like any other crate. At this time there are no short-term plans to use it for anything other than proc-macro.\n\nThis will not help for non-proc-macro crates that use `proc_macro`, which I believe is not too common?\n\nAn alternate approach for proc-macro is to use the `meta` crate, but from my inquiries there doesn't appear to be anyone interested in pushing that forward. The `meta` crate also doesn't help with things like `alloc` or `test`.\n\ncc #57288", "tree": {"sha": "7a38c5553a3ae0102ab6c304260076c696d73b1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a38c5553a3ae0102ab6c304260076c696d73b1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2574403b31508be9cfed468e352467043d2354d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2574403b31508be9cfed468e352467043d2354d", "html_url": "https://github.com/rust-lang/rust/commit/d2574403b31508be9cfed468e352467043d2354d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2574403b31508be9cfed468e352467043d2354d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1", "html_url": "https://github.com/rust-lang/rust/commit/e8f43b72eb2596f360004f6cdf9cdde4b9e789e1"}, {"sha": "ee459c6200c6384ac83ffd7f33de12f123134c30", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee459c6200c6384ac83ffd7f33de12f123134c30", "html_url": "https://github.com/rust-lang/rust/commit/ee459c6200c6384ac83ffd7f33de12f123134c30"}], "stats": {"total": 130, "additions": 101, "deletions": 29}, "files": [{"sha": "0dc81378e05b2508ac2675577a7417ef03b539f9", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2574403b31508be9cfed468e352467043d2354d/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/d2574403b31508be9cfed468e352467043d2354d/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=d2574403b31508be9cfed468e352467043d2354d", "patch": "@@ -197,7 +197,11 @@ in software.\n ## prefer-dynamic\n \n By default, `rustc` prefers to statically link dependencies. This option will\n-make it use dynamic linking instead.\n+indicate that dynamic linking should be used if possible if both a static and\n+dynamic versions of a library are available. There is an internal algorithm\n+for determining whether or not it is possible to statically or dynamically\n+link with a dependency. For example, `cdylib` crate types may only use static\n+linkage.\n \n ## no-integrated-as\n "}, {"sha": "577d03d1038f8a874fec87dd366fd96b27005e98", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d2574403b31508be9cfed468e352467043d2354d/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/d2574403b31508be9cfed468e352467043d2354d/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=d2574403b31508be9cfed468e352467043d2354d", "patch": "@@ -21,8 +21,7 @@ to `#[cfg(verbose)]` and `#[cfg(feature = \"serde\")]` respectively.\n <a id=\"option-l-search-path\"></a>\n ## `-L`: add a directory to the library search path\n \n-When looking for external crates or libraries, a directory passed to this flag\n-will be searched.\n+The `-L` flag adds a path to search for external crates and libraries.\n \n The kind of search path can optionally be specified with the form `-L\n KIND=PATH` where `KIND` may be one of:\n@@ -262,9 +261,30 @@ This flag, when combined with other flags, makes them produce extra output.\n <a id=\"option-extern\"></a>\n ## `--extern`: specify where an external library is located\n \n-This flag allows you to pass the name and location of an external crate that\n-will be linked into the crate you are building. This flag may be specified\n-multiple times. The format of the value should be `CRATENAME=PATH`.\n+This flag allows you to pass the name and location for an external crate of a\n+direct dependency. Indirect dependencies (dependencies of dependencies) are\n+located using the [`-L` flag](#option-l-search-path). The given crate name is\n+added to the [extern prelude], which is the same as specifying `extern crate`\n+within the root module. The given crate name does not need to match the name\n+the library was built with.\n+\n+This flag may be specified multiple times. This flag takes an argument with\n+either of the following formats:\n+\n+* `CRATENAME=PATH` \u2014\u00a0Indicates the given crate is found at the given path.\n+* `CRATENAME` \u2014\u00a0Indicates the given crate may be found in the search path,\n+  such as within the sysroot or via the `-L` flag.\n+\n+The same crate name may be specified multiple times for different crate types.\n+If both an `rlib` and `dylib` are found, an internal algorithm is used to\n+decide which to use for linking. The [`-C prefer-dynamic`\n+flag][prefer-dynamic] may be used to influence which is used.\n+\n+If the same crate name is specified with and without a path, the one with the\n+path is used and the pathless flag has no effect.\n+\n+[extern prelude]: ../reference/items/extern-crates.html#extern-prelude\n+[prefer-dynamic]: codegen-options/index.md#prefer-dynamic\n \n <a id=\"option-sysroot\"></a>\n ## `--sysroot`: Override the system root"}, {"sha": "eb5654e80a82c4e8343759ecb87e55e21f000b48", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d2574403b31508be9cfed468e352467043d2354d/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2574403b31508be9cfed468e352467043d2354d/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=d2574403b31508be9cfed468e352467043d2354d", "patch": "@@ -1800,7 +1800,7 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n             \"\",\n             \"extern\",\n             \"Specify where an external rust library is located\",\n-            \"NAME=PATH\",\n+            \"NAME[=PATH]\",\n         ),\n         opt::multi_s(\n             \"\",\n@@ -2164,7 +2164,6 @@ fn collect_print_requests(\n     cg: &mut CodegenOptions,\n     dopts: &mut DebuggingOptions,\n     matches: &getopts::Matches,\n-    is_unstable_enabled: bool,\n     error_format: ErrorOutputType,\n ) -> Vec<PrintRequest> {\n     let mut prints = Vec::<PrintRequest>::new();\n@@ -2206,7 +2205,7 @@ fn collect_print_requests(\n         \"tls-models\" => PrintRequest::TlsModels,\n         \"native-static-libs\" => PrintRequest::NativeStaticLibs,\n         \"target-spec-json\" => {\n-            if is_unstable_enabled {\n+            if dopts.unstable_options {\n                 PrintRequest::TargetSpec\n             } else {\n                 early_error(\n@@ -2370,7 +2369,6 @@ fn parse_externs(\n     matches: &getopts::Matches,\n     debugging_opts: &DebuggingOptions,\n     error_format: ErrorOutputType,\n-    is_unstable_enabled: bool,\n ) -> Externs {\n     if matches.opt_present(\"extern-private\") && !debugging_opts.unstable_options {\n         early_error(\n@@ -2392,13 +2390,6 @@ fn parse_externs(\n         let name = parts.next().unwrap_or_else(||\n             early_error(error_format, \"--extern value must not be empty\"));\n         let location = parts.next().map(|s| s.to_string());\n-        if location.is_none() && !is_unstable_enabled {\n-            early_error(\n-                error_format,\n-                \"the `-Z unstable-options` flag must also be passed to \\\n-                 enable `--extern crate_name` without `=path`\",\n-            );\n-        };\n \n         let entry = externs\n             .entry(name.to_owned())\n@@ -2483,12 +2474,10 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         );\n     }\n \n-    let is_unstable_enabled = nightly_options::is_unstable_enabled(matches);\n     let prints = collect_print_requests(\n         &mut cg,\n         &mut debugging_opts,\n         matches,\n-        is_unstable_enabled,\n         error_format,\n     );\n \n@@ -2521,7 +2510,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         );\n     }\n \n-    let externs = parse_externs(matches, &debugging_opts, error_format, is_unstable_enabled);\n+    let externs = parse_externs(matches, &debugging_opts, error_format);\n \n     let crate_name = matches.opt_str(\"crate-name\");\n "}, {"sha": "255d5f9f35dbf02941b7bf48f518c6bfecbab2ee", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2574403b31508be9cfed468e352467043d2354d/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2574403b31508be9cfed468e352467043d2354d/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=d2574403b31508be9cfed468e352467043d2354d", "patch": "@@ -615,10 +615,6 @@ fn parse_externs(matches: &getopts::Matches) -> Result<Externs, String> {\n         let mut parts = arg.splitn(2, '=');\n         let name = parts.next().ok_or(\"--extern value must not be empty\".to_string())?;\n         let location = parts.next().map(|s| s.to_string());\n-        if location.is_none() && !nightly_options::is_unstable_enabled(matches) {\n-            return Err(\"the `-Z unstable-options` flag must also be passed to \\\n-                        enable `--extern crate_name` without `=path`\".to_string());\n-        }\n         let name = name.to_string();\n         // For Rustdoc purposes, we can treat all externs as public\n         externs.entry(name)"}, {"sha": "13b8809e23e40cf35bac4a205421fb59767a82c8", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2574403b31508be9cfed468e352467043d2354d/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2574403b31508be9cfed468e352467043d2354d/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=d2574403b31508be9cfed468e352467043d2354d", "patch": "@@ -140,7 +140,7 @@ fn opts() -> Vec<RustcOptGroup> {\n         }),\n         stable(\"cfg\", |o| o.optmulti(\"\", \"cfg\", \"pass a --cfg to rustc\", \"\")),\n         stable(\"extern\", |o| {\n-            o.optmulti(\"\", \"extern\", \"pass an --extern to rustc\", \"NAME=PATH\")\n+            o.optmulti(\"\", \"extern\", \"pass an --extern to rustc\", \"NAME[=PATH]\")\n         }),\n         unstable(\"extern-html-root-url\", |o| {\n             o.optmulti(\"\", \"extern-html-root-url\","}, {"sha": "38d1d5bb8488afe464953764de55ff0787e42fdb", "filename": "src/test/run-make-fulldeps/extern-flag-fun/Makefile", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2574403b31508be9cfed468e352467043d2354d/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-fun%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d2574403b31508be9cfed468e352467043d2354d/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-fun%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-fun%2FMakefile?ref=d2574403b31508be9cfed468e352467043d2354d", "patch": "@@ -4,7 +4,6 @@ all:\n \t$(RUSTC) bar.rs --crate-type=rlib\n \t$(RUSTC) bar.rs --crate-type=rlib -C extra-filename=-a\n \t$(RUSTC) bar-alt.rs --crate-type=rlib\n-\t$(RUSTC) foo.rs --extern hello && exit 1 || exit 0\n \t$(RUSTC) foo.rs --extern bar=no-exist && exit 1 || exit 0\n \t$(RUSTC) foo.rs --extern bar=foo.rs && exit 1 || exit 0\n \t$(RUSTC) foo.rs \\\n@@ -15,3 +14,6 @@ all:\n \t\t--extern bar=$(TMPDIR)/libbar.rlib \\\n \t\t--extern bar=$(TMPDIR)/libbar-a.rlib\n \t$(RUSTC) foo.rs --extern bar=$(TMPDIR)/libbar.rlib\n+\t# Try to be sneaky and load a private crate from with a non-private name.\n+\t$(RUSTC) rustc.rs -Zforce-unstable-if-unmarked --crate-type=rlib\n+\t$(RUSTC) gated_unstable.rs --extern alloc=$(TMPDIR)/librustc.rlib 2>&1 | $(CGREP) 'rustc_private'"}, {"sha": "03600c830fff6e53672d531ee063e85ffc297a63", "filename": "src/test/run-make-fulldeps/extern-flag-fun/gated_unstable.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d2574403b31508be9cfed468e352467043d2354d/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-fun%2Fgated_unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2574403b31508be9cfed468e352467043d2354d/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-fun%2Fgated_unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-fun%2Fgated_unstable.rs?ref=d2574403b31508be9cfed468e352467043d2354d", "patch": "@@ -0,0 +1,3 @@\n+extern crate alloc;\n+\n+fn main() {}"}, {"sha": "b76b4321d62aa8e066b24d213c79ccc8230b8d7b", "filename": "src/test/run-make-fulldeps/extern-flag-fun/rustc.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2574403b31508be9cfed468e352467043d2354d/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-fun%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2574403b31508be9cfed468e352467043d2354d/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-fun%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-fun%2Frustc.rs?ref=d2574403b31508be9cfed468e352467043d2354d", "patch": "@@ -0,0 +1 @@\n+pub fn foo() {}"}, {"sha": "4849fc62f4a951144c0a66e32ed2dacddf06ed25", "filename": "src/test/run-make-fulldeps/extern-flag-pathless/Makefile", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d2574403b31508be9cfed468e352467043d2354d/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-pathless%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d2574403b31508be9cfed468e352467043d2354d/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-pathless%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-pathless%2FMakefile?ref=d2574403b31508be9cfed468e352467043d2354d", "patch": "@@ -0,0 +1,18 @@\n+-include ../tools.mk\n+\n+# Test mixing pathless --extern with paths.\n+\n+all:\n+\t$(RUSTC) bar-static.rs --crate-name=bar --crate-type=rlib\n+\t$(RUSTC) bar-dynamic.rs --crate-name=bar --crate-type=dylib -C prefer-dynamic\n+\t# rlib preferred over dylib\n+\t$(RUSTC) foo.rs --extern bar\n+\t$(call RUN,foo) | $(CGREP) 'static'\n+\t$(RUSTC) foo.rs --extern bar=$(TMPDIR)/libbar.rlib --extern bar\n+\t$(call RUN,foo) | $(CGREP) 'static'\n+\t# explicit --extern overrides pathless\n+\t$(RUSTC) foo.rs --extern bar=$(call DYLIB,bar) --extern bar\n+\t$(call RUN,foo) | $(CGREP) 'dynamic'\n+\t# prefer-dynamic does what it says\n+\t$(RUSTC) foo.rs --extern bar -C prefer-dynamic\n+\t$(call RUN,foo) | $(CGREP) 'dynamic'"}, {"sha": "e2d68d517ff9729fdabdc5149c1c86636b438f68", "filename": "src/test/run-make-fulldeps/extern-flag-pathless/bar-dynamic.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d2574403b31508be9cfed468e352467043d2354d/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-pathless%2Fbar-dynamic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2574403b31508be9cfed468e352467043d2354d/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-pathless%2Fbar-dynamic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-pathless%2Fbar-dynamic.rs?ref=d2574403b31508be9cfed468e352467043d2354d", "patch": "@@ -0,0 +1,3 @@\n+pub fn f() {\n+    println!(\"dynamic\");\n+}"}, {"sha": "240d8bde4d186761401f23b82dcaf7c2e540f50c", "filename": "src/test/run-make-fulldeps/extern-flag-pathless/bar-static.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d2574403b31508be9cfed468e352467043d2354d/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-pathless%2Fbar-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2574403b31508be9cfed468e352467043d2354d/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-pathless%2Fbar-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-pathless%2Fbar-static.rs?ref=d2574403b31508be9cfed468e352467043d2354d", "patch": "@@ -0,0 +1,3 @@\n+pub fn f() {\n+    println!(\"static\");\n+}"}, {"sha": "1ea64da7dad26a6b7c04068e5080b0411a164000", "filename": "src/test/run-make-fulldeps/extern-flag-pathless/foo.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d2574403b31508be9cfed468e352467043d2354d/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-pathless%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2574403b31508be9cfed468e352467043d2354d/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-pathless%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-pathless%2Ffoo.rs?ref=d2574403b31508be9cfed468e352467043d2354d", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    bar::f();\n+}"}, {"sha": "36288c4b870e7b8b0f35dcdc9c7adda78e38442e", "filename": "src/test/run-make-fulldeps/save-analysis-rfc2126/Makefile", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d2574403b31508be9cfed468e352467043d2354d/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d2574403b31508be9cfed468e352467043d2354d/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2FMakefile?ref=d2574403b31508be9cfed468e352467043d2354d", "patch": "@@ -1,8 +1,7 @@\n -include ../tools.mk\n \n all: extern_absolute_paths.rs krate2\n-\t$(RUSTC) extern_absolute_paths.rs -Zsave-analysis --edition=2018 \\\n-\t\t-Z unstable-options --extern krate2\n+\t$(RUSTC) extern_absolute_paths.rs -Zsave-analysis --edition=2018 --extern krate2\n \tcat $(TMPDIR)/save-analysis/extern_absolute_paths.json | \"$(PYTHON)\" validate_json.py\n \n krate2: krate2.rs"}, {"sha": "00e0f041c56fe69ef43ef6c1d6b37ed84dd8b1ca", "filename": "src/test/rustdoc/inline_cross/use_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2574403b31508be9cfed468e352467043d2354d/src%2Ftest%2Frustdoc%2Finline_cross%2Fuse_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2574403b31508be9cfed468e352467043d2354d/src%2Ftest%2Frustdoc%2Finline_cross%2Fuse_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fuse_crate.rs?ref=d2574403b31508be9cfed468e352467043d2354d", "patch": "@@ -2,7 +2,7 @@\n // aux-build:use_crate_2.rs\n // build-aux-docs\n // edition:2018\n-// compile-flags:--extern use_crate --extern use_crate_2 -Z unstable-options\n+// compile-flags:--extern use_crate --extern use_crate_2\n \n // During the buildup to Rust 2018, rustdoc would eagerly inline `pub use some_crate;` as if it\n // were a module, so we changed it to make `pub use`ing crate roots remain as a `pub use` statement"}, {"sha": "00b3ec5409ff02b026299877ad0f300f2d13d261", "filename": "src/test/ui-fulldeps/pathless-extern-unstable.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d2574403b31508be9cfed468e352467043d2354d/src%2Ftest%2Fui-fulldeps%2Fpathless-extern-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2574403b31508be9cfed468e352467043d2354d/src%2Ftest%2Fui-fulldeps%2Fpathless-extern-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpathless-extern-unstable.rs?ref=d2574403b31508be9cfed468e352467043d2354d", "patch": "@@ -0,0 +1,10 @@\n+// ignore-stage1\n+// edition:2018\n+// compile-flags:--extern rustc\n+\n+// Test that `--extern rustc` fails with `rustc_private`.\n+\n+pub use rustc;\n+//~^ ERROR use of unstable library feature 'rustc_private'\n+\n+fn main() {}"}, {"sha": "edc3b1c58be226bf8457580a98f987067966c846", "filename": "src/test/ui-fulldeps/pathless-extern-unstable.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d2574403b31508be9cfed468e352467043d2354d/src%2Ftest%2Fui-fulldeps%2Fpathless-extern-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2574403b31508be9cfed468e352467043d2354d/src%2Ftest%2Fui-fulldeps%2Fpathless-extern-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpathless-extern-unstable.stderr?ref=d2574403b31508be9cfed468e352467043d2354d", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: use of unstable library feature 'rustc_private': this crate is being loaded from the sysroot, an unstable location; did you mean to load this crate from crates.io via `Cargo.toml` instead?\n+  --> $DIR/pathless-extern-unstable.rs:7:9\n+   |\n+LL | pub use rustc;\n+   |         ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/27812\n+   = help: add `#![feature(rustc_private)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "0ffa5eb894040977d0ac92345e835d8ef6f72c33", "filename": "src/test/ui/pathless-extern-ok.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d2574403b31508be9cfed468e352467043d2354d/src%2Ftest%2Fui%2Fpathless-extern-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2574403b31508be9cfed468e352467043d2354d/src%2Ftest%2Fui%2Fpathless-extern-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpathless-extern-ok.rs?ref=d2574403b31508be9cfed468e352467043d2354d", "patch": "@@ -0,0 +1,9 @@\n+// edition:2018\n+// compile-flags:--extern alloc\n+// build-pass\n+\n+// Test that `--extern alloc` will load from the sysroot without error.\n+\n+fn main() {\n+    let _: Vec<i32> = alloc::vec::Vec::new();\n+}"}]}