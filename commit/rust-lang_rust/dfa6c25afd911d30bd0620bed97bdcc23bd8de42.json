{"sha": "dfa6c25afd911d30bd0620bed97bdcc23bd8de42", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYTZjMjVhZmQ5MTFkMzBiZDA2MjBiZWQ5N2JkY2MyM2JkOGRlNDI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-11-28T07:07:44Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-11-29T02:59:12Z"}, "message": "Fix hygiene bug.", "tree": {"sha": "93c2ae5c2b8831429ecc7a9a5ff872b9ca6797bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93c2ae5c2b8831429ecc7a9a5ff872b9ca6797bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfa6c25afd911d30bd0620bed97bdcc23bd8de42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfa6c25afd911d30bd0620bed97bdcc23bd8de42", "html_url": "https://github.com/rust-lang/rust/commit/dfa6c25afd911d30bd0620bed97bdcc23bd8de42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfa6c25afd911d30bd0620bed97bdcc23bd8de42/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "560a5da9f1cc7f67d2fc372925aef18c96c82629", "url": "https://api.github.com/repos/rust-lang/rust/commits/560a5da9f1cc7f67d2fc372925aef18c96c82629", "html_url": "https://github.com/rust-lang/rust/commit/560a5da9f1cc7f67d2fc372925aef18c96c82629"}], "stats": {"total": 97, "additions": 89, "deletions": 8}, "files": [{"sha": "4a6841aedca1299a33bce3f8ede40a90e5025850", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfa6c25afd911d30bd0620bed97bdcc23bd8de42/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa6c25afd911d30bd0620bed97bdcc23bd8de42/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=dfa6c25afd911d30bd0620bed97bdcc23bd8de42", "patch": "@@ -95,7 +95,7 @@ impl FromStr for TokenStream {\n             // notify the expansion info that it is unhygienic\n             let mark = Mark::fresh(mark);\n             mark.set_expn_info(expn_info);\n-            let span = call_site.with_ctxt(SyntaxContext::empty().apply_mark(mark));\n+            let span = call_site.with_ctxt(call_site.ctxt().apply_mark(mark));\n             let stream = parse::parse_stream_from_source_str(name, src, sess, Some(span));\n             Ok(__internal::token_stream_wrap(stream))\n         })"}, {"sha": "7c2f0bc3cef8440b09f2b289f11dc3e8f0f6b927", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfa6c25afd911d30bd0620bed97bdcc23bd8de42/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa6c25afd911d30bd0620bed97bdcc23bd8de42/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=dfa6c25afd911d30bd0620bed97bdcc23bd8de42", "patch": "@@ -575,7 +575,8 @@ impl Definitions {\n             self.node_to_def_index.insert(node_id, index);\n         }\n \n-        if expansion.is_modern() {\n+        let expansion = expansion.modern();\n+        if expansion != Mark::root() {\n             self.expansions.insert(index, expansion);\n         }\n "}, {"sha": "85e2144f6cd79423393e03fe06223f596398cf48", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dfa6c25afd911d30bd0620bed97bdcc23bd8de42/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa6c25afd911d30bd0620bed97bdcc23bd8de42/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=dfa6c25afd911d30bd0620bed97bdcc23bd8de42", "patch": "@@ -1560,6 +1560,15 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n+    fn macro_def(&self, mut ctxt: SyntaxContext) -> DefId {\n+        loop {\n+            match self.macro_defs.get(&ctxt.outer()) {\n+                Some(&def_id) => return def_id,\n+                None => ctxt.remove_mark(),\n+            };\n+        }\n+    }\n+\n     /// Entry point to crate resolution.\n     pub fn resolve_crate(&mut self, krate: &Crate) {\n         ImportResolver { resolver: self }.finalize_imports();\n@@ -1663,7 +1672,7 @@ impl<'a> Resolver<'a> {\n \n             module = match self.ribs[ns][i].kind {\n                 ModuleRibKind(module) => module,\n-                MacroDefinition(def) if def == self.macro_defs[&ident.ctxt.outer()] => {\n+                MacroDefinition(def) if def == self.macro_def(ident.ctxt) => {\n                     // If an invocation of this macro created `ident`, give up on `ident`\n                     // and switch to `ident`'s source from the macro definition.\n                     ident.ctxt.remove_mark();\n@@ -1830,7 +1839,7 @@ impl<'a> Resolver<'a> {\n                 // If an invocation of this macro created `ident`, give up on `ident`\n                 // and switch to `ident`'s source from the macro definition.\n                 MacroDefinition(def) => {\n-                    if def == self.macro_defs[&ident.ctxt.outer()] {\n+                    if def == self.macro_def(ident.ctxt) {\n                         ident.ctxt.remove_mark();\n                     }\n                 }"}, {"sha": "6f20104dda5d78ee06f67d6221b60ef4dfb00dbd", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dfa6c25afd911d30bd0620bed97bdcc23bd8de42/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa6c25afd911d30bd0620bed97bdcc23bd8de42/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=dfa6c25afd911d30bd0620bed97bdcc23bd8de42", "patch": "@@ -73,6 +73,13 @@ impl<'a> StringReader<'a> {\n     fn mk_sp(&self, lo: BytePos, hi: BytePos) -> Span {\n         unwrap_or!(self.override_span, Span::new(lo, hi, NO_EXPANSION))\n     }\n+    fn mk_ident(&self, string: &str) -> Ident {\n+        let mut ident = Ident::from_str(string);\n+        if let Some(span) = self.override_span {\n+            ident.ctxt = span.ctxt();\n+        }\n+        ident\n+    }\n \n     fn next_token(&mut self) -> TokenAndSpan where Self: Sized {\n         let res = self.try_next_token();\n@@ -1103,7 +1110,7 @@ impl<'a> StringReader<'a> {\n                     token::Underscore\n                 } else {\n                     // FIXME: perform NFKC normalization here. (Issue #2253)\n-                    token::Ident(Ident::from_str(string))\n+                    token::Ident(self.mk_ident(string))\n                 }\n             }));\n         }\n@@ -1286,13 +1293,13 @@ impl<'a> StringReader<'a> {\n                     // expansion purposes. See #12512 for the gory details of why\n                     // this is necessary.\n                     let ident = self.with_str_from(start, |lifetime_name| {\n-                        Ident::from_str(&format!(\"'{}\", lifetime_name))\n+                        self.mk_ident(&format!(\"'{}\", lifetime_name))\n                     });\n \n                     // Conjure up a \"keyword checking ident\" to make sure that\n                     // the lifetime name is not a keyword.\n                     let keyword_checking_ident = self.with_str_from(start, |lifetime_name| {\n-                        Ident::from_str(lifetime_name)\n+                        self.mk_ident(lifetime_name)\n                     });\n                     let keyword_checking_token = &token::Ident(keyword_checking_ident);\n                     let last_bpos = self.pos;"}, {"sha": "773b16b945f072ff359804c9d5e2c46d6e2be952", "filename": "src/test/compile-fail-fulldeps/proc-macro/lints_in_proc_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfa6c25afd911d30bd0620bed97bdcc23bd8de42/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Flints_in_proc_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa6c25afd911d30bd0620bed97bdcc23bd8de42/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Flints_in_proc_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Flints_in_proc_macros.rs?ref=dfa6c25afd911d30bd0620bed97bdcc23bd8de42", "patch": "@@ -23,5 +23,5 @@ fn main() {\n     bang_proc_macro2!();\n     //~^ ERROR cannot find value `foobar2` in this scope\n     //~^^ did you mean `foobar`?\n-    println!(\"{}\", x);\n+    println!(\"{}\", x); //~ ERROR cannot find value `x` in this scope\n }"}, {"sha": "58b4b2a5293b375a27c272de52613e7dc716fa6b", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/issue-42708.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dfa6c25afd911d30bd0620bed97bdcc23bd8de42/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-42708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa6c25afd911d30bd0620bed97bdcc23bd8de42/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-42708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-42708.rs?ref=dfa6c25afd911d30bd0620bed97bdcc23bd8de42", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro)]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_derive(Test)]\n+pub fn derive(_input: TokenStream) -> TokenStream {\n+    \"fn f(s: S) { s.x }\".parse().unwrap()\n+}\n+\n+#[proc_macro_attribute]\n+pub fn attr_test(_attr: TokenStream, input: TokenStream) -> TokenStream {\n+    input\n+}"}, {"sha": "e53e94ae475b25f44dc378bfbf667da7315f9c99", "filename": "src/test/run-pass-fulldeps/proc-macro/issue-42708.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/dfa6c25afd911d30bd0620bed97bdcc23bd8de42/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fissue-42708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa6c25afd911d30bd0620bed97bdcc23bd8de42/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fissue-42708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fissue-42708.rs?ref=dfa6c25afd911d30bd0620bed97bdcc23bd8de42", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-42708.rs\n+// ignore-stage1\n+\n+#![feature(decl_macro, proc_macro)]\n+#![allow(unused)]\n+\n+extern crate issue_42708;\n+\n+macro m() {\n+    #[derive(issue_42708::Test)]\n+    struct S { x: () }\n+\n+    #[issue_42708::attr_test]\n+    struct S2 { x: () }\n+\n+    #[derive(Clone)]\n+    struct S3 { x: () }\n+\n+    fn g(s: S, s2: S2, s3: S3) {\n+        (s.x, s2.x, s3.x);\n+    }\n+}\n+\n+m!();\n+\n+fn main() {}"}]}