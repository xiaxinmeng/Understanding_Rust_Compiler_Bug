{"sha": "5c7a0ba06e21e9b8b22b8bdc27c16e10c6c1a2ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjN2EwYmEwNmUyMWU5YjhiMjJiOGJkYzI3YzE2ZTEwYzZjMWEyY2U=", "commit": {"author": {"name": "Ricardo Martins", "email": "ricardo@scarybox.net", "date": "2015-04-18T11:02:37Z"}, "committer": {"name": "Ricardo Martins", "email": "ricardo@scarybox.net", "date": "2015-04-18T23:36:59Z"}, "message": "Add long diagnostics for E0133.", "tree": {"sha": "b854785eda973f37c97f661f3ce5004511bf8389", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b854785eda973f37c97f661f3ce5004511bf8389"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c7a0ba06e21e9b8b22b8bdc27c16e10c6c1a2ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c7a0ba06e21e9b8b22b8bdc27c16e10c6c1a2ce", "html_url": "https://github.com/rust-lang/rust/commit/5c7a0ba06e21e9b8b22b8bdc27c16e10c6c1a2ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c7a0ba06e21e9b8b22b8bdc27c16e10c6c1a2ce/comments", "author": {"login": "meqif", "id": 1706, "node_id": "MDQ6VXNlcjE3MDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1706?v=4", "gravatar_id": "", "url": "https://api.github.com/users/meqif", "html_url": "https://github.com/meqif", "followers_url": "https://api.github.com/users/meqif/followers", "following_url": "https://api.github.com/users/meqif/following{/other_user}", "gists_url": "https://api.github.com/users/meqif/gists{/gist_id}", "starred_url": "https://api.github.com/users/meqif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/meqif/subscriptions", "organizations_url": "https://api.github.com/users/meqif/orgs", "repos_url": "https://api.github.com/users/meqif/repos", "events_url": "https://api.github.com/users/meqif/events{/privacy}", "received_events_url": "https://api.github.com/users/meqif/received_events", "type": "User", "site_admin": false}, "committer": {"login": "meqif", "id": 1706, "node_id": "MDQ6VXNlcjE3MDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1706?v=4", "gravatar_id": "", "url": "https://api.github.com/users/meqif", "html_url": "https://github.com/meqif", "followers_url": "https://api.github.com/users/meqif/followers", "following_url": "https://api.github.com/users/meqif/following{/other_user}", "gists_url": "https://api.github.com/users/meqif/gists{/gist_id}", "starred_url": "https://api.github.com/users/meqif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/meqif/subscriptions", "organizations_url": "https://api.github.com/users/meqif/orgs", "repos_url": "https://api.github.com/users/meqif/repos", "events_url": "https://api.github.com/users/meqif/events{/privacy}", "received_events_url": "https://api.github.com/users/meqif/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a16640051dc24d151f432e12a85b70d68d757753", "url": "https://api.github.com/repos/rust-lang/rust/commits/a16640051dc24d151f432e12a85b70d68d757753", "html_url": "https://github.com/rust-lang/rust/commit/a16640051dc24d151f432e12a85b70d68d757753"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "1a71bab4ff021556d7ab5964e14d726c70c08e83", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5c7a0ba06e21e9b8b22b8bdc27c16e10c6c1a2ce/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c7a0ba06e21e9b8b22b8bdc27c16e10c6c1a2ce/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=5c7a0ba06e21e9b8b22b8bdc27c16e10c6c1a2ce", "patch": "@@ -173,6 +173,21 @@ This error indicates that an attempt was made to divide by zero (or take the\n remainder of a zero divisor) in a static or constant expression.\n \"##,\n \n+E0133: r##\"\n+Using unsafe functionality, such as dereferencing raw pointers and calling\n+functions via FFI or marked as unsafe, is potentially dangerous and disallowed\n+by safety checks. As such, those safety checks can be temporarily relaxed by\n+wrapping the unsafe instructions inside an `unsafe` block. For instance:\n+\n+unsafe fn f() { return; }\n+\n+fn main() {\n+    unsafe { f(); }\n+}\n+\n+See also http://doc.rust-lang.org/book/unsafe-code.html\n+\"##,\n+\n E0152: r##\"\n Lang items are already implemented in the standard library. Unless you are\n writing a free-standing application (e.g. a kernel), you do not need to provide\n@@ -405,7 +420,6 @@ register_diagnostics! {\n     E0080, // enum variant: constant evaluation error\n     E0109,\n     E0110,\n-    E0133,\n     E0134,\n     E0135,\n     E0136,"}]}