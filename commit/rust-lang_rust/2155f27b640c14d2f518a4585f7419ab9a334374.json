{"sha": "2155f27b640c14d2f518a4585f7419ab9a334374", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNTVmMjdiNjQwYzE0ZDJmNTE4YTQ1ODVmNzQxOWFiOWEzMzQzNzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-05T15:32:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-05T15:32:19Z"}, "message": "Auto merge of #54741 - oli-obk:impl_trait_hierarchy, r=cramertj\n\nNest the `impl Trait` existential item inside the return type\n\nfixes #54045\n\nr? @cramertj", "tree": {"sha": "0a3db7316c6b2ec28e1c7f08ae674d1f8d11d30a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a3db7316c6b2ec28e1c7f08ae674d1f8d11d30a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2155f27b640c14d2f518a4585f7419ab9a334374", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2155f27b640c14d2f518a4585f7419ab9a334374", "html_url": "https://github.com/rust-lang/rust/commit/2155f27b640c14d2f518a4585f7419ab9a334374", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2155f27b640c14d2f518a4585f7419ab9a334374/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60c846046ec26c9e5c1216a6e118cc2e69a2956c", "url": "https://api.github.com/repos/rust-lang/rust/commits/60c846046ec26c9e5c1216a6e118cc2e69a2956c", "html_url": "https://github.com/rust-lang/rust/commit/60c846046ec26c9e5c1216a6e118cc2e69a2956c"}, {"sha": "c3151c65c6a353080fbe8e901c7b540547d3d11a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3151c65c6a353080fbe8e901c7b540547d3d11a", "html_url": "https://github.com/rust-lang/rust/commit/c3151c65c6a353080fbe8e901c7b540547d3d11a"}], "stats": {"total": 333, "additions": 152, "deletions": 181}, "files": [{"sha": "942f1cbd6651b63c2c6df2cd6482270bb83a218a", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2155f27b640c14d2f518a4585f7419ab9a334374/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2155f27b640c14d2f518a4585f7419ab9a334374/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=2155f27b640c14d2f518a4585f7419ab9a334374", "patch": "@@ -603,6 +603,10 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n         TyKind::Path(ref qpath) => {\n             visitor.visit_qpath(qpath, typ.hir_id, typ.span);\n         }\n+        TyKind::Def(item_id, ref lifetimes) => {\n+            visitor.visit_nested_item(item_id);\n+            walk_list!(visitor, visit_generic_arg, lifetimes);\n+        }\n         TyKind::Array(ref ty, ref length) => {\n             visitor.visit_ty(ty);\n             visitor.visit_anon_const(length)"}, {"sha": "c8b7f3aa97b7e7ab377347a7df3833b702201da9", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 45, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2155f27b640c14d2f518a4585f7419ab9a334374/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2155f27b640c14d2f518a4585f7419ab9a334374/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=2155f27b640c14d2f518a4585f7419ab9a334374", "patch": "@@ -1378,20 +1378,7 @@ impl<'a> LoweringContext<'a> {\n             lctx.items.insert(exist_ty_id.node_id, exist_ty_item);\n \n             // `impl Trait` now just becomes `Foo<'a, 'b, ..>`\n-            let path = P(hir::Path {\n-                span: exist_ty_span,\n-                def: Def::Existential(DefId::local(exist_ty_def_index)),\n-                segments: hir_vec![hir::PathSegment {\n-                    infer_types: false,\n-                    ident: Ident::new(keywords::Invalid.name(), exist_ty_span),\n-                    args: Some(P(hir::GenericArgs {\n-                        parenthesized: false,\n-                        bindings: HirVec::new(),\n-                        args: lifetimes,\n-                    }))\n-                }],\n-            });\n-            hir::TyKind::Path(hir::QPath::Resolved(None, path))\n+            hir::TyKind::Def(hir::ItemId { id: exist_ty_id.node_id }, lifetimes)\n         })\n     }\n \n@@ -3262,23 +3249,6 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    /// Lowers `impl Trait` items for a function and appends them to the list\n-    fn lower_fn_impl_trait_ids(\n-        &mut self,\n-        decl: &FnDecl,\n-        header: &FnHeader,\n-        ids: &mut SmallVec<[hir::ItemId; 1]>,\n-    ) {\n-        if let Some(id) = header.asyncness.opt_return_id() {\n-            ids.push(hir::ItemId { id });\n-        }\n-        let mut visitor = ImplTraitTypeIdVisitor { ids };\n-        match decl.output {\n-            FunctionRetTy::Default(_) => {},\n-            FunctionRetTy::Ty(ref ty) => visitor.visit_ty(ty),\n-        }\n-    }\n-\n     fn lower_item_id(&mut self, i: &Item) -> SmallVec<[hir::ItemId; 1]> {\n         match i.node {\n             ItemKind::Use(ref use_tree) => {\n@@ -3287,20 +3257,8 @@ impl<'a> LoweringContext<'a> {\n                 vec\n             }\n             ItemKind::MacroDef(..) => SmallVec::new(),\n-            ItemKind::Fn(ref decl, ref header, ..) => {\n-                let mut ids = smallvec![hir::ItemId { id: i.id }];\n-                self.lower_fn_impl_trait_ids(decl, header, &mut ids);\n-                ids\n-            },\n-            ItemKind::Impl(.., None, _, ref items) => {\n-                let mut ids = smallvec![hir::ItemId { id: i.id }];\n-                for item in items {\n-                    if let ImplItemKind::Method(ref sig, _) = item.node {\n-                        self.lower_fn_impl_trait_ids(&sig.decl, &sig.header, &mut ids);\n-                    }\n-                }\n-                ids\n-            },\n+            ItemKind::Fn(..) |\n+            ItemKind::Impl(.., None, _, _) => smallvec![hir::ItemId { id: i.id }],\n             ItemKind::Static(ref ty, ..) => {\n                 let mut ids = smallvec![hir::ItemId { id: i.id }];\n                 if self.sess.features_untracked().impl_trait_in_bindings {"}, {"sha": "f3f0fe4374756f8eb99511ab627dfe9f4512e975", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2155f27b640c14d2f518a4585f7419ab9a334374/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2155f27b640c14d2f518a4585f7419ab9a334374/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=2155f27b640c14d2f518a4585f7419ab9a334374", "patch": "@@ -1789,6 +1789,12 @@ pub enum TyKind {\n     ///\n     /// Type parameters may be stored in each `PathSegment`.\n     Path(QPath),\n+    /// A type definition itself. This is currently only used for the `existential type`\n+    /// item that `impl Trait` in return position desugars to.\n+    ///\n+    /// The generic arg list are the lifetimes (and in the future possibly parameters) that are\n+    /// actually bound on the `impl Trait`.\n+    Def(ItemId, HirVec<GenericArg>),\n     /// A trait object type `Bound1 + Bound2 + Bound3`\n     /// where `Bound` is a trait or a lifetime.\n     TraitObject(HirVec<PolyTraitRef>, Lifetime),"}, {"sha": "08d46793d97bf60da9beb59ad3717b378deb98bb", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2155f27b640c14d2f518a4585f7419ab9a334374/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2155f27b640c14d2f518a4585f7419ab9a334374/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=2155f27b640c14d2f518a4585f7419ab9a334374", "patch": "@@ -401,6 +401,7 @@ impl<'a> State<'a> {\n                 self.print_ty_fn(f.abi, f.unsafety, &f.decl, None, &f.generic_params,\n                                  &f.arg_names[..])?;\n             }\n+            hir::TyKind::Def(..) => {},\n             hir::TyKind::Path(ref qpath) => {\n                 self.print_qpath(qpath, false)?\n             }"}, {"sha": "da9604702dfa38ac91545a898231deb40b08a95c", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2155f27b640c14d2f518a4585f7419ab9a334374/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2155f27b640c14d2f518a4585f7419ab9a334374/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=2155f27b640c14d2f518a4585f7419ab9a334374", "patch": "@@ -345,6 +345,7 @@ impl_stable_hash_for!(enum hir::TyKind {\n     Never,\n     Tup(ts),\n     Path(qpath),\n+    Def(it, lt),\n     TraitObject(trait_refs, lifetime),\n     Typeof(body_id),\n     Err,"}, {"sha": "c41c6f3cbe596496985c1c4549aa8683817bd263", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 103, "deletions": 108, "changes": 211, "blob_url": "https://github.com/rust-lang/rust/blob/2155f27b640c14d2f518a4585f7419ab9a334374/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2155f27b640c14d2f518a4585f7419ab9a334374/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=2155f27b640c14d2f518a4585f7419ab9a334374", "patch": "@@ -621,140 +621,135 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 };\n                 self.with(scope, |_, this| this.visit_ty(&mt.ty));\n             }\n-            hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) => {\n-                if let Def::Existential(exist_ty_did) = path.def {\n-                    let id = self.tcx.hir.as_local_node_id(exist_ty_did).unwrap();\n-\n-                    // Resolve the lifetimes in the bounds to the lifetime defs in the generics.\n-                    // `fn foo<'a>() -> impl MyTrait<'a> { ... }` desugars to\n-                    // `abstract type MyAnonTy<'b>: MyTrait<'b>;`\n-                    //                          ^            ^ this gets resolved in the scope of\n-                    //                                         the exist_ty generics\n-                    let (generics, bounds) = match self.tcx.hir.expect_item(id).node {\n-                        // named existential types don't need these hacks\n-                        hir::ItemKind::Existential(hir::ExistTy{ impl_trait_fn: None, .. }) => {\n-                            intravisit::walk_ty(self, ty);\n-                            return;\n-                        },\n-                        hir::ItemKind::Existential(hir::ExistTy{\n-                            ref generics,\n-                            ref bounds,\n-                            ..\n-                        }) => (\n-                            generics,\n-                            bounds,\n-                        ),\n-                        ref i => bug!(\"impl Trait pointed to non-existential type?? {:#?}\", i),\n-                    };\n+            hir::TyKind::Def(item_id, ref lifetimes) => {\n+                // Resolve the lifetimes in the bounds to the lifetime defs in the generics.\n+                // `fn foo<'a>() -> impl MyTrait<'a> { ... }` desugars to\n+                // `abstract type MyAnonTy<'b>: MyTrait<'b>;`\n+                //                          ^            ^ this gets resolved in the scope of\n+                //                                         the exist_ty generics\n+                let (generics, bounds) = match self.tcx.hir.expect_item(item_id.id).node {\n+                    // named existential types are reached via TyKind::Path\n+                    // this arm is for `impl Trait` in the types of statics, constants and locals\n+                    hir::ItemKind::Existential(hir::ExistTy{ impl_trait_fn: None, .. }) => {\n+                        intravisit::walk_ty(self, ty);\n+                        return;\n+                    },\n+                    // RPIT (return position impl trait)\n+                    hir::ItemKind::Existential(hir::ExistTy{\n+                        ref generics,\n+                        ref bounds,\n+                        ..\n+                    }) => (\n+                        generics,\n+                        bounds,\n+                    ),\n+                    ref i => bug!(\"impl Trait pointed to non-existential type?? {:#?}\", i),\n+                };\n+\n+                // Resolve the lifetimes that are applied to the existential type.\n+                // These are resolved in the current scope.\n+                // `fn foo<'a>() -> impl MyTrait<'a> { ... }` desugars to\n+                // `fn foo<'a>() -> MyAnonTy<'a> { ... }`\n+                //          ^                 ^this gets resolved in the current scope\n+                for lifetime in lifetimes {\n+                    if let hir::GenericArg::Lifetime(lifetime) = lifetime {\n+                        self.visit_lifetime(lifetime);\n \n-                    assert!(exist_ty_did.is_local());\n-                    // Resolve the lifetimes that are applied to the existential type.\n-                    // These are resolved in the current scope.\n-                    // `fn foo<'a>() -> impl MyTrait<'a> { ... }` desugars to\n-                    // `fn foo<'a>() -> MyAnonTy<'a> { ... }`\n-                    //          ^                 ^this gets resolved in the current scope\n-                    for lifetime in &path.segments[0].args.as_ref().unwrap().args {\n-                        if let hir::GenericArg::Lifetime(lifetime) = lifetime {\n-                            self.visit_lifetime(lifetime);\n-\n-                            // Check for predicates like `impl for<'a> Trait<impl OtherTrait<'a>>`\n-                            // and ban them. Type variables instantiated inside binders aren't\n-                            // well-supported at the moment, so this doesn't work.\n-                            // In the future, this should be fixed and this error should be removed.\n-                            let def = self.map.defs.get(&lifetime.id).cloned();\n-                            if let Some(Region::LateBound(_, def_id, _)) = def {\n-                                if let Some(node_id) = self.tcx.hir.as_local_node_id(def_id) {\n-                                    // Ensure that the parent of the def is an item, not HRTB\n-                                    let parent_id = self.tcx.hir.get_parent_node(node_id);\n-                                    let parent_impl_id = hir::ImplItemId { node_id: parent_id };\n-                                    let parent_trait_id = hir::TraitItemId { node_id: parent_id };\n-                                    let krate = self.tcx.hir.forest.krate();\n-                                    if !(krate.items.contains_key(&parent_id)\n-                                        || krate.impl_items.contains_key(&parent_impl_id)\n-                                        || krate.trait_items.contains_key(&parent_trait_id))\n-                                    {\n-                                        span_err!(\n-                                            self.tcx.sess,\n-                                            lifetime.span,\n-                                            E0657,\n-                                            \"`impl Trait` can only capture lifetimes \\\n-                                            bound at the fn or impl level\"\n-                                        );\n-                                        self.uninsert_lifetime_on_error(lifetime, def.unwrap());\n-                                    }\n+                        // Check for predicates like `impl for<'a> Trait<impl OtherTrait<'a>>`\n+                        // and ban them. Type variables instantiated inside binders aren't\n+                        // well-supported at the moment, so this doesn't work.\n+                        // In the future, this should be fixed and this error should be removed.\n+                        let def = self.map.defs.get(&lifetime.id).cloned();\n+                        if let Some(Region::LateBound(_, def_id, _)) = def {\n+                            if let Some(node_id) = self.tcx.hir.as_local_node_id(def_id) {\n+                                // Ensure that the parent of the def is an item, not HRTB\n+                                let parent_id = self.tcx.hir.get_parent_node(node_id);\n+                                let parent_impl_id = hir::ImplItemId { node_id: parent_id };\n+                                let parent_trait_id = hir::TraitItemId { node_id: parent_id };\n+                                let krate = self.tcx.hir.forest.krate();\n+                                if !(krate.items.contains_key(&parent_id)\n+                                    || krate.impl_items.contains_key(&parent_impl_id)\n+                                    || krate.trait_items.contains_key(&parent_trait_id))\n+                                {\n+                                    span_err!(\n+                                        self.tcx.sess,\n+                                        lifetime.span,\n+                                        E0657,\n+                                        \"`impl Trait` can only capture lifetimes \\\n+                                        bound at the fn or impl level\"\n+                                    );\n+                                    self.uninsert_lifetime_on_error(lifetime, def.unwrap());\n                                 }\n                             }\n                         }\n                     }\n+                }\n \n-                    // We want to start our early-bound indices at the end of the parent scope,\n-                    // not including any parent `impl Trait`s.\n-                    let mut index = self.next_early_index_for_abstract_type();\n-                    debug!(\"visit_ty: index = {}\", index);\n+                // We want to start our early-bound indices at the end of the parent scope,\n+                // not including any parent `impl Trait`s.\n+                let mut index = self.next_early_index_for_abstract_type();\n+                debug!(\"visit_ty: index = {}\", index);\n \n-                    let mut elision = None;\n-                    let mut lifetimes = FxHashMap();\n-                    let mut type_count = 0;\n-                    for param in &generics.params {\n-                        match param.kind {\n-                            GenericParamKind::Lifetime { .. } => {\n-                                let (name, reg) = Region::early(&self.tcx.hir, &mut index, &param);\n-                                if let hir::ParamName::Plain(param_name) = name {\n-                                    if param_name.name == keywords::UnderscoreLifetime.name() {\n-                                        // Pick the elided lifetime \"definition\" if one exists\n-                                        // and use it to make an elision scope.\n-                                        elision = Some(reg);\n-                                    } else {\n-                                        lifetimes.insert(name, reg);\n-                                    }\n+                let mut elision = None;\n+                let mut lifetimes = FxHashMap();\n+                let mut type_count = 0;\n+                for param in &generics.params {\n+                    match param.kind {\n+                        GenericParamKind::Lifetime { .. } => {\n+                            let (name, reg) = Region::early(&self.tcx.hir, &mut index, &param);\n+                            if let hir::ParamName::Plain(param_name) = name {\n+                                if param_name.name == keywords::UnderscoreLifetime.name() {\n+                                    // Pick the elided lifetime \"definition\" if one exists\n+                                    // and use it to make an elision scope.\n+                                    elision = Some(reg);\n                                 } else {\n                                     lifetimes.insert(name, reg);\n                                 }\n-                            }\n-                            GenericParamKind::Type { .. } => {\n-                                type_count += 1;\n+                            } else {\n+                                lifetimes.insert(name, reg);\n                             }\n                         }\n+                        GenericParamKind::Type { .. } => {\n+                            type_count += 1;\n+                        }\n                     }\n-                    let next_early_index = index + type_count;\n+                }\n+                let next_early_index = index + type_count;\n \n-                    if let Some(elision_region) = elision {\n-                        let scope = Scope::Elision {\n-                            elide: Elide::Exact(elision_region),\n-                            s: self.scope,\n-                        };\n-                        self.with(scope, |_old_scope, this| {\n-                            let scope = Scope::Binder {\n-                                lifetimes,\n-                                next_early_index,\n-                                s: this.scope,\n-                                track_lifetime_uses: true,\n-                                abstract_type_parent: false,\n-                            };\n-                            this.with(scope, |_old_scope, this| {\n-                                this.visit_generics(generics);\n-                                for bound in bounds {\n-                                    this.visit_param_bound(bound);\n-                                }\n-                            });\n-                        });\n-                    } else {\n+                if let Some(elision_region) = elision {\n+                    let scope = Scope::Elision {\n+                        elide: Elide::Exact(elision_region),\n+                        s: self.scope,\n+                    };\n+                    self.with(scope, |_old_scope, this| {\n                         let scope = Scope::Binder {\n                             lifetimes,\n                             next_early_index,\n-                            s: self.scope,\n+                            s: this.scope,\n                             track_lifetime_uses: true,\n                             abstract_type_parent: false,\n                         };\n-                        self.with(scope, |_old_scope, this| {\n+                        this.with(scope, |_old_scope, this| {\n                             this.visit_generics(generics);\n                             for bound in bounds {\n                                 this.visit_param_bound(bound);\n                             }\n                         });\n-                    }\n+                    });\n                 } else {\n-                    intravisit::walk_ty(self, ty)\n+                    let scope = Scope::Binder {\n+                        lifetimes,\n+                        next_early_index,\n+                        s: self.scope,\n+                        track_lifetime_uses: true,\n+                        abstract_type_parent: false,\n+                    };\n+                    self.with(scope, |_old_scope, this| {\n+                        this.visit_generics(generics);\n+                        for bound in bounds {\n+                            this.visit_param_bound(bound);\n+                        }\n+                    });\n                 }\n             }\n             _ => intravisit::walk_ty(self, ty),"}, {"sha": "28d2ae413de6d2375694cdf125c28ac7f9c8a2f5", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2155f27b640c14d2f518a4585f7419ab9a334374/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2155f27b640c14d2f518a4585f7419ab9a334374/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=2155f27b640c14d2f518a4585f7419ab9a334374", "patch": "@@ -1338,10 +1338,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n         match path.def {\n             Def::Existential(did) => {\n                 // check for desugared impl trait\n-                if ty::is_impl_trait_defn(tcx, did).is_some() {\n-                    let lifetimes = &path.segments[0].args.as_ref().unwrap().args;\n-                    return self.impl_trait_ty_to_ty(did, lifetimes);\n-                }\n+                assert!(ty::is_impl_trait_defn(tcx, did).is_none());\n                 let item_segment = path.segments.split_last().unwrap();\n                 self.prohibit_generics(item_segment.1);\n                 let substs = self.ast_path_substs_for_ty(span, did, item_segment.0);\n@@ -1462,6 +1459,10 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                 });\n                 self.def_to_ty(opt_self_ty, path, false)\n             }\n+            hir::TyKind::Def(item_id, ref lifetimes) => {\n+                let did = tcx.hir.local_def_id(item_id.id);\n+                self.impl_trait_ty_to_ty(did, lifetimes)\n+            },\n             hir::TyKind::Path(hir::QPath::TypeRelative(ref qself, ref segment)) => {\n                 debug!(\"ast_ty_to_ty: qself={:?} segment={:?}\", qself, segment);\n                 let ty = self.ast_ty_to_ty(qself);"}, {"sha": "ddabef96c7c5e5e2031db9d70515457c943bbd85", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2155f27b640c14d2f518a4585f7419ab9a334374/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2155f27b640c14d2f518a4585f7419ab9a334374/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2155f27b640c14d2f518a4585f7419ab9a334374", "patch": "@@ -2416,6 +2416,14 @@ impl Clean<Type> for hir::Ty {\n                 Array(box ty.clean(cx), length)\n             },\n             TyKind::Tup(ref tys) => Tuple(tys.clean(cx)),\n+            TyKind::Def(item_id, _) => {\n+                let item = cx.tcx.hir.expect_item(item_id.id);\n+                if let hir::ItemKind::Existential(ref ty) = item.node {\n+                    ImplTrait(ty.bounds.clean(cx))\n+                } else {\n+                    unreachable!()\n+                }\n+            }\n             TyKind::Path(hir::QPath::Resolved(None, ref path)) => {\n                 if let Some(new_ty) = cx.ty_substs.borrow().get(&path.def).cloned() {\n                     return new_ty;\n@@ -2425,14 +2433,6 @@ impl Clean<Type> for hir::Ty {\n                     if let Some(bounds) = cx.impl_trait_bounds.borrow_mut().remove(&did) {\n                         return ImplTrait(bounds);\n                     }\n-                } else if let Def::Existential(did) = path.def {\n-                    // This block is for returned impl trait only.\n-                    if let Some(node_id) = cx.tcx.hir.as_local_node_id(did) {\n-                        let item = cx.tcx.hir.expect_item(node_id);\n-                        if let hir::ItemKind::Existential(ref ty) = item.node {\n-                            return ImplTrait(ty.bounds.clean(cx));\n-                        }\n-                    }\n                 }\n \n                 let mut alias = None;"}, {"sha": "dd9f5fd4647e0f5eb137a86ee7476e20a9fd58d7", "filename": "src/test/ui/impl-trait/deprecated_annotation.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2155f27b640c14d2f518a4585f7419ab9a334374/src%2Ftest%2Fui%2Fimpl-trait%2Fdeprecated_annotation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2155f27b640c14d2f518a4585f7419ab9a334374/src%2Ftest%2Fui%2Fimpl-trait%2Fdeprecated_annotation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdeprecated_annotation.rs?ref=2155f27b640c14d2f518a4585f7419ab9a334374", "patch": "@@ -0,0 +1,19 @@\n+// compile-pass\n+\n+#![deny(warnings)]\n+\n+#[deprecated]\n+trait Deprecated {}\n+\n+#[deprecated]\n+struct DeprecatedTy;\n+\n+#[allow(deprecated)]\n+impl Deprecated for DeprecatedTy {}\n+\n+#[allow(deprecated)]\n+fn foo() -> impl Deprecated { DeprecatedTy }\n+\n+fn main() {\n+    foo();\n+}"}, {"sha": "1842790a1405faef0c81ebe26214e07f98beee46", "filename": "src/test/ui/privacy/private-type-in-interface.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2155f27b640c14d2f518a4585f7419ab9a334374/src%2Ftest%2Fui%2Fprivacy%2Fprivate-type-in-interface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2155f27b640c14d2f518a4585f7419ab9a334374/src%2Ftest%2Fui%2Fprivacy%2Fprivate-type-in-interface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-type-in-interface.rs?ref=2155f27b640c14d2f518a4585f7419ab9a334374", "patch": "@@ -35,8 +35,6 @@ type A = <m::Alias as m::Trait>::X; //~ ERROR type `m::Priv` is private\n trait Tr2<T> {}\n impl<T> Tr2<T> for u8 {}\n fn g() -> impl Tr2<m::Alias> { 0 } //~ ERROR type `m::Priv` is private\n-//~^ ERROR type `m::Priv` is private\n fn g_ext() -> impl Tr2<ext::Alias> { 0 } //~ ERROR type `ext::Priv` is private\n-//~^ ERROR type `ext::Priv` is private\n \n fn main() {}"}, {"sha": "38c21a77211b2aead4a73eb6c21e8e773528b2f4", "filename": "src/test/ui/privacy/private-type-in-interface.stderr", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2155f27b640c14d2f518a4585f7419ab9a334374/src%2Ftest%2Fui%2Fprivacy%2Fprivate-type-in-interface.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2155f27b640c14d2f518a4585f7419ab9a334374/src%2Ftest%2Fui%2Fprivacy%2Fprivate-type-in-interface.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-type-in-interface.stderr?ref=2155f27b640c14d2f518a4585f7419ab9a334374", "patch": "@@ -46,23 +46,11 @@ error: type `m::Priv` is private\n LL | fn g() -> impl Tr2<m::Alias> { 0 } //~ ERROR type `m::Priv` is private\n    |           ^^^^^^^^^^^^^^^^^^\n \n-error: type `m::Priv` is private\n-  --> $DIR/private-type-in-interface.rs:37:16\n-   |\n-LL | fn g() -> impl Tr2<m::Alias> { 0 } //~ ERROR type `m::Priv` is private\n-   |                ^^^^^^^^^^^^^\n-\n error: type `ext::Priv` is private\n-  --> $DIR/private-type-in-interface.rs:39:15\n+  --> $DIR/private-type-in-interface.rs:38:15\n    |\n LL | fn g_ext() -> impl Tr2<ext::Alias> { 0 } //~ ERROR type `ext::Priv` is private\n    |               ^^^^^^^^^^^^^^^^^^^^\n \n-error: type `ext::Priv` is private\n-  --> $DIR/private-type-in-interface.rs:39:20\n-   |\n-LL | fn g_ext() -> impl Tr2<ext::Alias> { 0 } //~ ERROR type `ext::Priv` is private\n-   |                    ^^^^^^^^^^^^^^^\n-\n-error: aborting due to 11 previous errors\n+error: aborting due to 9 previous errors\n "}]}