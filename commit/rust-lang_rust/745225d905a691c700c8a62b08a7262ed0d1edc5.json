{"sha": "745225d905a691c700c8a62b08a7262ed0d1edc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NTIyNWQ5MDVhNjkxYzcwMGM4YTYyYjA4YTcyNjJlZDBkMWVkYzU=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-09T22:00:29Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:48Z"}, "message": "libtest: use unboxed closures", "tree": {"sha": "d1b70ae0cd013ada87054ed57c28447779575869", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1b70ae0cd013ada87054ed57c28447779575869"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/745225d905a691c700c8a62b08a7262ed0d1edc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/745225d905a691c700c8a62b08a7262ed0d1edc5", "html_url": "https://github.com/rust-lang/rust/commit/745225d905a691c700c8a62b08a7262ed0d1edc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/745225d905a691c700c8a62b08a7262ed0d1edc5/comments", "author": null, "committer": null, "parents": [{"sha": "015c0fcee5779c62a6676106ccec00e2c82fefa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/015c0fcee5779c62a6676106ccec00e2c82fefa5", "html_url": "https://github.com/rust-lang/rust/commit/015c0fcee5779c62a6676106ccec00e2c82fefa5"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "7436a8af30765d17ad1d47132cb9ab566a72608d", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/745225d905a691c700c8a62b08a7262ed0d1edc5/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/745225d905a691c700c8a62b08a7262ed0d1edc5/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=745225d905a691c700c8a62b08a7262ed0d1edc5", "patch": "@@ -32,6 +32,7 @@\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n #![feature(asm, macro_rules, phase, globs, slicing_syntax)]\n+#![feature(unboxed_closures)]\n \n extern crate getopts;\n extern crate regex;\n@@ -978,9 +979,11 @@ enum TestEvent {\n \n pub type MonitorMsg = (TestDesc, TestResult, Vec<u8> );\n \n-fn run_tests(opts: &TestOpts,\n-             tests: Vec<TestDescAndFn> ,\n-             callback: |e: TestEvent| -> io::IoResult<()>) -> io::IoResult<()> {\n+fn run_tests<F>(opts: &TestOpts,\n+                tests: Vec<TestDescAndFn> ,\n+                mut callback: F) -> io::IoResult<()> where\n+    F: FnMut(TestEvent) -> io::IoResult<()>,\n+{\n     let filtered_tests = filter_tests(opts, tests);\n     let filtered_descs = filtered_tests.iter()\n                                        .map(|t| t.desc.clone())\n@@ -1339,7 +1342,7 @@ pub fn black_box<T>(dummy: T) {\n \n impl Bencher {\n     /// Callback for benchmark functions to run in their body.\n-    pub fn iter<T>(&mut self, inner: || -> T) {\n+    pub fn iter<T, F>(&mut self, mut inner: F) where F: FnMut() -> T {\n         self.dur = Duration::span(|| {\n             let k = self.iterations;\n             for _ in range(0u64, k) {\n@@ -1360,14 +1363,13 @@ impl Bencher {\n         }\n     }\n \n-    pub fn bench_n(&mut self, n: u64, f: |&mut Bencher|) {\n+    pub fn bench_n<F>(&mut self, n: u64, f: F) where F: FnOnce(&mut Bencher) {\n         self.iterations = n;\n         f(self);\n     }\n \n     // This is a more statistics-driven benchmark algorithm\n-    pub fn auto_bench(&mut self, f: |&mut Bencher|) -> stats::Summary<f64> {\n-\n+    pub fn auto_bench<F>(&mut self, mut f: F) -> stats::Summary<f64> where F: FnMut(&mut Bencher) {\n         // Initial bench run to get ballpark figure.\n         let mut n = 1_u64;\n         self.bench_n(n, |x| f(x));\n@@ -1437,7 +1439,7 @@ pub mod bench {\n     use std::time::Duration;\n     use super::{Bencher, BenchSamples};\n \n-    pub fn benchmark(f: |&mut Bencher|) -> BenchSamples {\n+    pub fn benchmark<F>(f: F) -> BenchSamples where F: FnMut(&mut Bencher) {\n         let mut bs = Bencher {\n             iterations: 0,\n             dur: Duration::nanoseconds(0),"}]}