{"sha": "6d8cffa9918d4a28ca852c47cb48875e29bbe6bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkOGNmZmE5OTE4ZDRhMjhjYTg1MmM0N2NiNDg4NzVlMjliYmU2YmM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-22T00:29:00Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-22T00:29:00Z"}, "message": "std: Make timer tests more reliable under valgrind", "tree": {"sha": "0bdc2a1df08773163026a55585c80de5ad52d657", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bdc2a1df08773163026a55585c80de5ad52d657"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d8cffa9918d4a28ca852c47cb48875e29bbe6bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d8cffa9918d4a28ca852c47cb48875e29bbe6bc", "html_url": "https://github.com/rust-lang/rust/commit/6d8cffa9918d4a28ca852c47cb48875e29bbe6bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d8cffa9918d4a28ca852c47cb48875e29bbe6bc/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "248e439638dbabf822bf9017eb99b44f0e1a0370", "url": "https://api.github.com/repos/rust-lang/rust/commits/248e439638dbabf822bf9017eb99b44f0e1a0370", "html_url": "https://github.com/rust-lang/rust/commit/248e439638dbabf822bf9017eb99b44f0e1a0370"}], "stats": {"total": 68, "additions": 43, "deletions": 25}, "files": [{"sha": "524accf6f1a9c7e7eaba07d84ed68836cb77b8df", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 43, "deletions": 25, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/6d8cffa9918d4a28ca852c47cb48875e29bbe6bc/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8cffa9918d4a28ca852c47cb48875e29bbe6bc/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=6d8cffa9918d4a28ca852c47cb48875e29bbe6bc", "patch": "@@ -182,40 +182,58 @@ mod test {\n         }\n     }\n \n+    // Because valgrind serializes multithreaded programs it can\n+    // make timing-sensitive tests fail in wierd ways. In these\n+    // next test we run them many times and expect them to pass\n+    // the majority of tries.\n+\n     #[test]\n     fn test_gl_timer_recv_timeout_before_time_passes() {\n-        let expected = rand::rng().gen_str(16u);\n-        let test_po = comm::port::<str>();\n-        let test_ch = comm::chan(test_po);\n+        let times = 100;\n+        let mut successes = 0;\n+        let mut failures = 0;\n \n-        task::spawn() {||\n-            delayed_send(1u, test_ch, expected);\n-        };\n+        iter::repeat(times as uint) {||\n+            task::yield();\n \n-        let actual = alt recv_timeout(1000u, test_po) {\n-          some(val) { val }\n-          _ { fail \"test_timer_recv_timeout_before_time_passes:\"+\n-                    \" didn't receive result before timeout\"; }\n-        };\n-        assert actual == expected;\n+            let expected = rand::rng().gen_str(16u);\n+            let test_po = comm::port::<str>();\n+            let test_ch = comm::chan(test_po);\n+\n+            task::spawn() {||\n+                delayed_send(1u, test_ch, expected);\n+            };\n+\n+            alt recv_timeout(10u, test_po) {\n+              some(val) { assert val == expected; successes += 1; }\n+              _ { failures += 1; }\n+            };\n+        }\n+\n+        assert successes > times / 2;\n     }\n \n     #[test]\n     fn test_gl_timer_recv_timeout_after_time_passes() {\n-        let expected = rand::rng().gen_str(16u);\n-        let fail_msg = rand::rng().gen_str(16u);\n-        let test_po = comm::port::<str>();\n-        let test_ch = comm::chan(test_po);\n+        let times = 100;\n+        let mut successes = 0;\n+        let mut failures = 0;\n \n-        task::spawn() {||\n-            delayed_send(1000u, test_ch, expected);\n-        };\n+        iter::repeat(times as uint) {||\n+            let expected = rand::rng().gen_str(16u);\n+            let test_po = comm::port::<str>();\n+            let test_ch = comm::chan(test_po);\n \n-        let actual = alt recv_timeout(1u, test_po) {\n-          none { fail_msg }\n-          _ { fail \"test_timer_recv_timeout_before_time_passes:\"+\n-                    \" didn't receive result before timeout\"; }\n-        };\n-        assert actual == fail_msg;\n+            task::spawn() {||\n+                delayed_send(1000u, test_ch, expected);\n+            };\n+\n+            let actual = alt recv_timeout(1u, test_po) {\n+              none { successes += 1; }\n+              _ { failures += 1; }\n+            };\n+        }\n+\n+        assert successes > times / 2;\n     }\n }"}]}