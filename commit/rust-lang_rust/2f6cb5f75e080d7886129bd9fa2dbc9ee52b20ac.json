{"sha": "2f6cb5f75e080d7886129bd9fa2dbc9ee52b20ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNmNiNWY3NWUwODBkNzg4NjEyOWJkOWZhMmRiYzllZTUyYjIwYWM=", "commit": {"author": {"name": "Nathan", "email": "nathan.whitaker01@gmail.com", "date": "2019-07-30T17:48:39Z"}, "committer": {"name": "nathanwhit", "email": "nathan.whitaker01@gmail.com", "date": "2019-08-12T14:14:07Z"}, "message": "Add lint for excess trailing semicolons", "tree": {"sha": "26ef95268cacd059711ac0adb805141a8ba23af3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26ef95268cacd059711ac0adb805141a8ba23af3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f6cb5f75e080d7886129bd9fa2dbc9ee52b20ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f6cb5f75e080d7886129bd9fa2dbc9ee52b20ac", "html_url": "https://github.com/rust-lang/rust/commit/2f6cb5f75e080d7886129bd9fa2dbc9ee52b20ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f6cb5f75e080d7886129bd9fa2dbc9ee52b20ac/comments", "author": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71415ef9bd697a49db34742172aacb792ce8d116", "url": "https://api.github.com/repos/rust-lang/rust/commits/71415ef9bd697a49db34742172aacb792ce8d116", "html_url": "https://github.com/rust-lang/rust/commit/71415ef9bd697a49db34742172aacb792ce8d116"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "fc416be8eeb504a6a7a582e15f9fe1d0c28d46e6", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f6cb5f75e080d7886129bd9fa2dbc9ee52b20ac/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6cb5f75e080d7886129bd9fa2dbc9ee52b20ac/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=2f6cb5f75e080d7886129bd9fa2dbc9ee52b20ac", "patch": "@@ -24,6 +24,7 @@ extern crate rustc;\n \n mod error_codes;\n mod nonstandard_style;\n+mod redundant_semicolon;\n pub mod builtin;\n mod types;\n mod unused;\n@@ -55,6 +56,7 @@ use session::Session;\n use lint::LintId;\n use lint::FutureIncompatibleInfo;\n \n+use redundant_semicolon::*;\n use nonstandard_style::*;\n use builtin::*;\n use types::*;\n@@ -98,6 +100,7 @@ macro_rules! early_lint_passes {\n             WhileTrue: WhileTrue,\n             NonAsciiIdents: NonAsciiIdents,\n             IncompleteFeatures: IncompleteFeatures,\n+            RedundantSemicolon: RedundantSemicolon,\n         ]);\n     )\n }"}, {"sha": "7c9df3578b59cd22a168821e94261d6eb8003bb1", "filename": "src/librustc_lint/redundant_semicolon.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2f6cb5f75e080d7886129bd9fa2dbc9ee52b20ac/src%2Flibrustc_lint%2Fredundant_semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6cb5f75e080d7886129bd9fa2dbc9ee52b20ac/src%2Flibrustc_lint%2Fredundant_semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fredundant_semicolon.rs?ref=2f6cb5f75e080d7886129bd9fa2dbc9ee52b20ac", "patch": "@@ -0,0 +1,52 @@\n+use crate::lint::{EarlyLintPass, LintPass, EarlyContext, LintArray, LintContext};\n+use syntax::ast::{Stmt, StmtKind, ExprKind};\n+use syntax::errors::Applicability;\n+\n+declare_lint! {\n+    pub REDUNDANT_SEMICOLON,\n+    Warn,\n+    \"detects unnecessary trailing semicolons\"\n+}\n+\n+declare_lint_pass!(RedundantSemicolon => [REDUNDANT_SEMICOLON]);\n+\n+impl EarlyLintPass for RedundantSemicolon {\n+    fn check_stmt(&mut self, cx: &EarlyContext<'_>, stmt: &Stmt) {\n+        if let StmtKind::Semi(expr) = &stmt.node {\n+            if let ExprKind::Tup(ref v) = &expr.node {\n+                if v.is_empty() {\n+                    // Strings of excess semicolons are encoded as empty tuple expressions\n+                    // during the parsing stage, so we check for empty tuple expressions\n+                    // which span only semicolons\n+                    if let Ok(source_str) = cx.sess().source_map().span_to_snippet(stmt.span) {\n+                        if source_str.chars().all(|c| c == ';') {\n+                            let multiple = (stmt.span.hi() - stmt.span.lo()).0 > 1;\n+                            let msg = if multiple {\n+                                \"unnecessary trailing semicolons\"\n+                            } else {\n+                                \"unnecessary trailing semicolon\"\n+                            };\n+                            let mut err = cx.struct_span_lint(\n+                                REDUNDANT_SEMICOLON,\n+                                stmt.span,\n+                                &msg\n+                            );\n+                            let suggest_msg = if multiple {\n+                                \"remove these semicolons\"\n+                            } else {\n+                                \"remove this semicolon\"\n+                            };\n+                            err.span_suggestion(\n+                                stmt.span,\n+                                &suggest_msg,\n+                                String::new(),\n+                                Applicability::MaybeIncorrect\n+                            );\n+                            err.emit();\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}]}