{"sha": "e22b7a3eef962b1314d344ba7b2f27c986320b32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyMmI3YTNlZWY5NjJiMTMxNGQzNDRiYTdiMmYyN2M5ODYzMjBiMzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-03T22:05:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-03T22:05:55Z"}, "message": "Auto merge of #59148 - lcnr:unchecked_maths, r=eddyb\n\nadd support for unchecked math\n\nadd compiler support for\n```rust\n/// Returns the result of an unchecked addition, resulting in\n/// undefined behavior when `x + y > T::max_value()` or `x + y < T::min_value()`.\npub fn unchecked_add<T>(x: T, y: T) -> T;\n\n/// Returns the result of an unchecked substraction, resulting in\n/// undefined behavior when `x - y > T::max_value()` or `x - y < T::min_value()`.\npub fn unchecked_sub<T>(x: T, y: T) -> T;\n\n/// Returns the result of an unchecked multiplication, resulting in\n/// undefined behavior when `x * y > T::max_value()` or `x * y < T::min_value()`.\npub fn unchecked_mul<T>(x: T, y: T) -> T;\n```\n\ncc https://github.com/rust-lang/rfcs/issues/2508", "tree": {"sha": "b7b72745a3356825989af17c2dc079a7d378304f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7b72745a3356825989af17c2dc079a7d378304f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e22b7a3eef962b1314d344ba7b2f27c986320b32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e22b7a3eef962b1314d344ba7b2f27c986320b32", "html_url": "https://github.com/rust-lang/rust/commit/e22b7a3eef962b1314d344ba7b2f27c986320b32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e22b7a3eef962b1314d344ba7b2f27c986320b32/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ffb8f53ee1cb0903f9df7d2fdb37ad06d748566", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ffb8f53ee1cb0903f9df7d2fdb37ad06d748566", "html_url": "https://github.com/rust-lang/rust/commit/6ffb8f53ee1cb0903f9df7d2fdb37ad06d748566"}, {"sha": "d7e0834c5f173c9ee58ccc1858e3ecff021c9f33", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7e0834c5f173c9ee58ccc1858e3ecff021c9f33", "html_url": "https://github.com/rust-lang/rust/commit/d7e0834c5f173c9ee58ccc1858e3ecff021c9f33"}], "stats": {"total": 200, "additions": 198, "deletions": 2}, "files": [{"sha": "31a4e380a3d9b647103a0dd1b653860c1dd3ddfc", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e22b7a3eef962b1314d344ba7b2f27c986320b32/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22b7a3eef962b1314d344ba7b2f27c986320b32/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=e22b7a3eef962b1314d344ba7b2f27c986320b32", "patch": "@@ -1240,6 +1240,21 @@ extern \"rust-intrinsic\" {\n     /// y < 0 or y >= N, where N is the width of T in bits.\n     pub fn unchecked_shr<T>(x: T, y: T) -> T;\n \n+    /// Returns the result of an unchecked addition, resulting in\n+    /// undefined behavior when `x + y > T::max_value()` or `x + y < T::min_value()`.\n+    #[cfg(not(stage0))]\n+    pub fn unchecked_add<T>(x: T, y: T) -> T;\n+\n+    /// Returns the result of an unchecked substraction, resulting in\n+    /// undefined behavior when `x - y > T::max_value()` or `x - y < T::min_value()`.\n+    #[cfg(not(stage0))]\n+    pub fn unchecked_sub<T>(x: T, y: T) -> T;\n+\n+    /// Returns the result of an unchecked multiplication, resulting in\n+    /// undefined behavior when `x * y > T::max_value()` or `x * y < T::min_value()`.\n+    #[cfg(not(stage0))]\n+    pub fn unchecked_mul<T>(x: T, y: T) -> T;\n+\n     /// Performs rotate left.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `rotate_left` method. For example,"}, {"sha": "102e9e38612e065e227f73d36588be9a2249fcf7", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e22b7a3eef962b1314d344ba7b2f27c986320b32/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22b7a3eef962b1314d344ba7b2f27c986320b32/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=e22b7a3eef962b1314d344ba7b2f27c986320b32", "patch": "@@ -265,6 +265,12 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         neg(x) => LLVMBuildNeg,\n         fneg(x) => LLVMBuildFNeg,\n         not(x) => LLVMBuildNot,\n+        unchecked_sadd(x, y) => LLVMBuildNSWAdd,\n+        unchecked_uadd(x, y) => LLVMBuildNUWAdd,\n+        unchecked_ssub(x, y) => LLVMBuildNSWSub,\n+        unchecked_usub(x, y) => LLVMBuildNUWSub,\n+        unchecked_smul(x, y) => LLVMBuildNSWMul,\n+        unchecked_umul(x, y) => LLVMBuildNUWMul,\n     }\n \n     fn fadd_fast(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {"}, {"sha": "42aa9989346fca3a4547ada64084dcf1d1860ded", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e22b7a3eef962b1314d344ba7b2f27c986320b32/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22b7a3eef962b1314d344ba7b2f27c986320b32/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=e22b7a3eef962b1314d344ba7b2f27c986320b32", "patch": "@@ -334,7 +334,8 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             \"ctlz\" | \"ctlz_nonzero\" | \"cttz\" | \"cttz_nonzero\" | \"ctpop\" | \"bswap\" |\n             \"bitreverse\" | \"add_with_overflow\" | \"sub_with_overflow\" |\n             \"mul_with_overflow\" | \"overflowing_add\" | \"overflowing_sub\" | \"overflowing_mul\" |\n-            \"unchecked_div\" | \"unchecked_rem\" | \"unchecked_shl\" | \"unchecked_shr\" | \"exact_div\" |\n+            \"unchecked_div\" | \"unchecked_rem\" | \"unchecked_shl\" | \"unchecked_shr\" |\n+            \"unchecked_add\" | \"unchecked_sub\" | \"unchecked_mul\" | \"exact_div\" |\n             \"rotate_left\" | \"rotate_right\" | \"saturating_add\" | \"saturating_sub\" => {\n                 let ty = arg_tys[0];\n                 match int_type_width_signed(ty, self) {\n@@ -430,6 +431,27 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                                 } else {\n                                     self.lshr(args[0].immediate(), args[1].immediate())\n                                 },\n+                            \"unchecked_add\" => {\n+                                if signed {\n+                                    self.unchecked_sadd(args[0].immediate(), args[1].immediate())\n+                                } else {\n+                                    self.unchecked_uadd(args[0].immediate(), args[1].immediate())\n+                                }\n+                            },\n+                            \"unchecked_sub\" => {\n+                                if signed {\n+                                    self.unchecked_ssub(args[0].immediate(), args[1].immediate())\n+                                } else {\n+                                    self.unchecked_usub(args[0].immediate(), args[1].immediate())\n+                                }\n+                            },\n+                            \"unchecked_mul\" => {\n+                                if signed {\n+                                    self.unchecked_smul(args[0].immediate(), args[1].immediate())\n+                                } else {\n+                                    self.unchecked_umul(args[0].immediate(), args[1].immediate())\n+                                }\n+                            },\n                             \"rotate_left\" | \"rotate_right\" => {\n                                 let is_left = name == \"rotate_left\";\n                                 let val = args[0].immediate();"}, {"sha": "a71243c7c826b9e6361814f376de9bcb7f377269", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e22b7a3eef962b1314d344ba7b2f27c986320b32/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22b7a3eef962b1314d344ba7b2f27c986320b32/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=e22b7a3eef962b1314d344ba7b2f27c986320b32", "patch": "@@ -1002,6 +1002,36 @@ extern \"C\" {\n                          RHS: &'a Value,\n                          Name: *const c_char)\n                          -> &'a Value;\n+    pub fn LLVMBuildNSWAdd(B: &Builder<'a>,\n+                           LHS: &'a Value,\n+                           RHS: &'a Value,\n+                           Name: *const c_char)\n+                           -> &'a Value;\n+    pub fn LLVMBuildNUWAdd(B: &Builder<'a>,\n+                           LHS: &'a Value,\n+                           RHS: &'a Value,\n+                           Name: *const c_char)\n+                           -> &'a Value;\n+    pub fn LLVMBuildNSWSub(B: &Builder<'a>,\n+                           LHS: &'a Value,\n+                           RHS: &'a Value,\n+                           Name: *const c_char)\n+                           -> &'a Value;\n+    pub fn LLVMBuildNUWSub(B: &Builder<'a>,\n+                           LHS: &'a Value,\n+                           RHS: &'a Value,\n+                           Name: *const c_char)\n+                           -> &'a Value;\n+    pub fn LLVMBuildNSWMul(B: &Builder<'a>,\n+                           LHS: &'a Value,\n+                           RHS: &'a Value,\n+                           Name: *const c_char)\n+                           -> &'a Value;\n+    pub fn LLVMBuildNUWMul(B: &Builder<'a>,\n+                           LHS: &'a Value,\n+                           RHS: &'a Value,\n+                           Name: *const c_char)\n+                           -> &'a Value;\n     pub fn LLVMBuildAnd(B: &Builder<'a>,\n                         LHS: &'a Value,\n                         RHS: &'a Value,"}, {"sha": "a11d1ba9231cc52dbd72949656b8db240cbe7ca9", "filename": "src/librustc_codegen_ssa/traits/builder.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e22b7a3eef962b1314d344ba7b2f27c986320b32/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22b7a3eef962b1314d344ba7b2f27c986320b32/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs?ref=e22b7a3eef962b1314d344ba7b2f27c986320b32", "patch": "@@ -88,6 +88,12 @@ pub trait BuilderMethods<'a, 'tcx: 'a>:\n     fn shl(&mut self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n     fn lshr(&mut self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n     fn ashr(&mut self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n+    fn unchecked_sadd(&mut self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n+    fn unchecked_uadd(&mut self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n+    fn unchecked_ssub(&mut self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n+    fn unchecked_usub(&mut self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n+    fn unchecked_smul(&mut self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n+    fn unchecked_umul(&mut self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n     fn and(&mut self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n     fn or(&mut self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n     fn xor(&mut self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;"}, {"sha": "0b14ff1db59d460d580c21b49e387ac4e1bce1ae", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e22b7a3eef962b1314d344ba7b2f27c986320b32/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22b7a3eef962b1314d344ba7b2f27c986320b32/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=e22b7a3eef962b1314d344ba7b2f27c986320b32", "patch": "@@ -305,7 +305,8 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             \"unchecked_shl\" | \"unchecked_shr\" |\n             \"rotate_left\" | \"rotate_right\" =>\n                 (1, vec![param(0), param(0)], param(0)),\n-\n+            \"unchecked_add\" | \"unchecked_sub\" | \"unchecked_mul\" =>\n+                (1, vec![param(0), param(0)], param(0)),\n             \"overflowing_add\" | \"overflowing_sub\" | \"overflowing_mul\" =>\n                 (1, vec![param(0), param(0)], param(0)),\n             \"saturating_add\" | \"saturating_sub\" =>"}, {"sha": "419c120ede9eccdb1ac12cf8b90d25c2bf282991", "filename": "src/test/codegen/unchecked_math.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e22b7a3eef962b1314d344ba7b2f27c986320b32/src%2Ftest%2Fcodegen%2Funchecked_math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22b7a3eef962b1314d344ba7b2f27c986320b32/src%2Ftest%2Fcodegen%2Funchecked_math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funchecked_math.rs?ref=e22b7a3eef962b1314d344ba7b2f27c986320b32", "patch": "@@ -0,0 +1,46 @@\n+#![crate_type = \"lib\"]\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics::*;\n+\n+// CHECK-LABEL: @unchecked_add_signed\n+#[no_mangle]\n+pub unsafe fn unchecked_add_signed(a: i32, b: i32) -> i32 {\n+    // CHECK: add nsw\n+    unchecked_add(a, b)\n+}\n+\n+// CHECK-LABEL: @unchecked_add_unsigned\n+#[no_mangle]\n+pub unsafe fn unchecked_add_unsigned(a: u32, b: u32) -> u32 {\n+    // CHECK: add nuw\n+    unchecked_add(a, b)\n+}\n+\n+// CHECK-LABEL: @unchecked_sub_signed\n+#[no_mangle]\n+pub unsafe fn unchecked_sub_signed(a: i32, b: i32) -> i32 {\n+    // CHECK: sub nsw\n+    unchecked_sub(a, b)\n+}\n+\n+// CHECK-LABEL: @unchecked_sub_unsigned\n+#[no_mangle]\n+pub unsafe fn unchecked_sub_unsigned(a: u32, b: u32) -> u32 {\n+    // CHECK: sub nuw\n+    unchecked_sub(a, b)\n+}\n+\n+// CHECK-LABEL: @unchecked_mul_signed\n+#[no_mangle]\n+pub unsafe fn unchecked_mul_signed(a: i32, b: i32) -> i32 {\n+    // CHECK: mul nsw\n+    unchecked_mul(a, b)\n+}\n+\n+// CHECK-LABEL: @unchecked_mul_unsigned\n+#[no_mangle]\n+pub unsafe fn unchecked_mul_unsigned(a: u32, b: u32) -> u32 {\n+    // CHECK: mul nuw\n+    unchecked_mul(a, b)\n+}"}, {"sha": "a034b45f5308c8a2d5e1ff98bb8f5949d7e833ed", "filename": "src/test/ui/intrinsics/unchecked_math_unsafe.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e22b7a3eef962b1314d344ba7b2f27c986320b32/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22b7a3eef962b1314d344ba7b2f27c986320b32/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.rs?ref=e22b7a3eef962b1314d344ba7b2f27c986320b32", "patch": "@@ -0,0 +1,8 @@\n+#![feature(core_intrinsics)]\n+\n+fn main() {\n+    let (x, y) = (1u32, 2u32);\n+    let add = std::intrinsics::unchecked_add(x, y); //~ ERROR call to unsafe function\n+    let sub = std::intrinsics::unchecked_sub(x, y); //~ ERROR call to unsafe function\n+    let mul = std::intrinsics::unchecked_mul(x, y); //~ ERROR call to unsafe function\n+}"}, {"sha": "4066cf8efb8c18a72be91ecbb640387f3485065e", "filename": "src/test/ui/intrinsics/unchecked_math_unsafe.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e22b7a3eef962b1314d344ba7b2f27c986320b32/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e22b7a3eef962b1314d344ba7b2f27c986320b32/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.stderr?ref=e22b7a3eef962b1314d344ba7b2f27c986320b32", "patch": "@@ -0,0 +1,27 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/unchecked_math_unsafe.rs:5:15\n+   |\n+LL |     let add = std::intrinsics::unchecked_add(x, y);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/unchecked_math_unsafe.rs:6:15\n+   |\n+LL |     let sub = std::intrinsics::unchecked_sub(x, y);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/unchecked_math_unsafe.rs:7:15\n+   |\n+LL |     let mul = std::intrinsics::unchecked_mul(x, y);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "8869063d1cc3d9cd6ae8dc7b460fc13233c549c0", "filename": "src/test/ui/intrinsics/unchecked_math_unstable.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e22b7a3eef962b1314d344ba7b2f27c986320b32/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22b7a3eef962b1314d344ba7b2f27c986320b32/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unstable.rs?ref=e22b7a3eef962b1314d344ba7b2f27c986320b32", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let (x, y) = (1u32, 2u32);\n+    unsafe {\n+        let add = std::intrinsics::unchecked_add(x, y); //~ ERROR use of unstable library feature\n+        let sub = std::intrinsics::unchecked_sub(x, y); //~ ERROR use of unstable library feature\n+        let mul = std::intrinsics::unchecked_mul(x, y); //~ ERROR use of unstable library feature\n+    }\n+}"}, {"sha": "6f5429127c690ee7b2bbaea4724eb013e546f624", "filename": "src/test/ui/intrinsics/unchecked_math_unstable.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e22b7a3eef962b1314d344ba7b2f27c986320b32/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e22b7a3eef962b1314d344ba7b2f27c986320b32/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unstable.stderr?ref=e22b7a3eef962b1314d344ba7b2f27c986320b32", "patch": "@@ -0,0 +1,27 @@\n+error[E0658]: use of unstable library feature 'core_intrinsics': intrinsics are unlikely to ever be stabilized, instead they should be used through stabilized interfaces in the rest of the standard library\n+  --> $DIR/unchecked_math_unstable.rs:4:19\n+   |\n+LL |         let add = std::intrinsics::unchecked_add(x, y);\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(core_intrinsics)] to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'core_intrinsics': intrinsics are unlikely to ever be stabilized, instead they should be used through stabilized interfaces in the rest of the standard library\n+  --> $DIR/unchecked_math_unstable.rs:5:19\n+   |\n+LL |         let sub = std::intrinsics::unchecked_sub(x, y);\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(core_intrinsics)] to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'core_intrinsics': intrinsics are unlikely to ever be stabilized, instead they should be used through stabilized interfaces in the rest of the standard library\n+  --> $DIR/unchecked_math_unstable.rs:6:19\n+   |\n+LL |         let mul = std::intrinsics::unchecked_mul(x, y);\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(core_intrinsics)] to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}]}