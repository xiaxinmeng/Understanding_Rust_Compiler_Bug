{"sha": "212707ce8440205d5f49b0a274caf629bf118de0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMjcwN2NlODQ0MDIwNWQ1ZjQ5YjBhMjc0Y2FmNjI5YmYxMThkZTA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-10-11T21:52:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-12T21:39:34Z"}, "message": "make native functions markable as unsafe and incorporate that\ninto the type check", "tree": {"sha": "329d516a27e9975b7036835bbf4826ee9e40124b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/329d516a27e9975b7036835bbf4826ee9e40124b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/212707ce8440205d5f49b0a274caf629bf118de0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/212707ce8440205d5f49b0a274caf629bf118de0", "html_url": "https://github.com/rust-lang/rust/commit/212707ce8440205d5f49b0a274caf629bf118de0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/212707ce8440205d5f49b0a274caf629bf118de0/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24b201fa48558832f13c41f1307d824ee26915eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/24b201fa48558832f13c41f1307d824ee26915eb", "html_url": "https://github.com/rust-lang/rust/commit/24b201fa48558832f13c41f1307d824ee26915eb"}], "stats": {"total": 46, "additions": 30, "deletions": 16}, "files": [{"sha": "4a103d357558a4e4dcecb0ff71622ecaa1db946e", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/212707ce8440205d5f49b0a274caf629bf118de0/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212707ce8440205d5f49b0a274caf629bf118de0/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=212707ce8440205d5f49b0a274caf629bf118de0", "patch": "@@ -178,7 +178,9 @@ fn lookup_def(cnum: ast::crate_num, data: @[u8], did_: ast::def_id) ->\n           'u' { ast::def_fn(did, ast::unsafe_fn) }\n           'f' { ast::def_fn(did, ast::impure_fn) }\n           'p' { ast::def_fn(did, ast::pure_fn) }\n-          'F' { ast::def_native_fn(did) }\n+          'U' { ast::def_native_fn(did, ast::unsafe_fn) }\n+          'F' { ast::def_native_fn(did, ast::impure_fn) }\n+          'P' { ast::def_native_fn(did, ast::pure_fn) }\n           'y' { ast::def_ty(did) }\n           'T' { ast::def_native_ty(did) }\n           't' { ast::def_ty(did) }"}, {"sha": "3617005a400aba884c38f22c938e6d671554d58d", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/212707ce8440205d5f49b0a274caf629bf118de0/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212707ce8440205d5f49b0a274caf629bf118de0/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=212707ce8440205d5f49b0a274caf629bf118de0", "patch": "@@ -350,9 +350,15 @@ fn encode_info_for_native_item(ecx: @encode_ctxt, ebml_w: ebml::writer,\n         encode_type(ecx, ebml_w,\n                     ty::mk_native(ecx.ccx.tcx, local_def(nitem.id)));\n       }\n-      native_item_fn(_, _, tps) {\n+      native_item_fn(_, fn_decl, tps) {\n+        let letter =\n+            alt fn_decl.purity {\n+              unsafe_fn. { 'U' }\n+              pure_fn. { 'P' }   // this is currently impossible, but hey.\n+              impure_fn. { 'F' }\n+            } as u8;\n         encode_def_id(ebml_w, local_def(nitem.id));\n-        encode_family(ebml_w, 'F' as u8);\n+        encode_family(ebml_w, letter);\n         encode_type_param_kinds(ebml_w, tps);\n         encode_type(ecx, ebml_w, node_id_to_monotype(ecx.ccx.tcx, nitem.id));\n         encode_symbol(ecx, ebml_w, nitem.id);"}, {"sha": "b9d520b66c539d0abcd576f3f04d54581da3966e", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/212707ce8440205d5f49b0a274caf629bf118de0/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212707ce8440205d5f49b0a274caf629bf118de0/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=212707ce8440205d5f49b0a274caf629bf118de0", "patch": "@@ -1059,9 +1059,11 @@ fn lookup_in_mie(e: env, mie: mod_index_entry, ns: namespace) ->\n                 ret some(ast::def_native_ty(local_def(native_item.id)));\n             }\n           }\n-          ast::native_item_fn(_, _, _) {\n+          ast::native_item_fn(_, decl, _) {\n             if ns == ns_value {\n-                ret some(ast::def_native_fn(local_def(native_item.id)));\n+                ret some(ast::def_native_fn(\n+                    local_def(native_item.id),\n+                    decl.purity));\n             }\n           }\n         }\n@@ -1163,7 +1165,7 @@ fn ns_for_def(d: def) -> namespace {\n           ast::def_binding(_) { ns_type }\n           ast::def_use(_) { ns_module }\n           ast::def_native_ty(_) { ns_type }\n-          ast::def_native_fn(_) { ns_value }\n+          ast::def_native_fn(_, _) { ns_value }\n         };\n }\n "}, {"sha": "ded401ae796d2fce7fd1bbff6eeac0f07a1c034b", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/212707ce8440205d5f49b0a274caf629bf118de0/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212707ce8440205d5f49b0a274caf629bf118de0/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=212707ce8440205d5f49b0a274caf629bf118de0", "patch": "@@ -3096,7 +3096,7 @@ fn trans_var(cx: @block_ctxt, sp: span, def: ast::def, id: ast::node_id)\n     -> lval_maybe_callee {\n     let ccx = bcx_ccx(cx);\n     alt def {\n-      ast::def_fn(did, _) | ast::def_native_fn(did) {\n+      ast::def_fn(did, _) | ast::def_native_fn(did, _) {\n         let tyt = ty::lookup_item_type(ccx.tcx, did);\n         ret lval_static_fn(cx, tyt, did, id);\n       }"}, {"sha": "3a4d852f2adec09ca49c2880c480279eacf1ea5c", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/212707ce8440205d5f49b0a274caf629bf118de0/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212707ce8440205d5f49b0a274caf629bf118de0/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=212707ce8440205d5f49b0a274caf629bf118de0", "patch": "@@ -2602,7 +2602,7 @@ fn def_has_ty_params(def: ast::def) -> bool {\n       ast::def_binding(_) { ret false; }\n       ast::def_use(_) { ret false; }\n       ast::def_native_ty(_) { ret false; }\n-      ast::def_native_fn(_) { ret true; }\n+      ast::def_native_fn(_, _) { ret true; }\n     }\n }\n "}, {"sha": "f848cf638f8b83e626a6155c8b03828c4418e896", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/212707ce8440205d5f49b0a274caf629bf118de0/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212707ce8440205d5f49b0a274caf629bf118de0/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=212707ce8440205d5f49b0a274caf629bf118de0", "patch": "@@ -103,7 +103,7 @@ fn ty_param_kinds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n         ret {kinds: no_kinds, ty: typ};\n       }\n       ast::def_fn(id, _) { ret ty::lookup_item_type(fcx.ccx.tcx, id); }\n-      ast::def_native_fn(id) { ret ty::lookup_item_type(fcx.ccx.tcx, id); }\n+      ast::def_native_fn(id, _) { ret ty::lookup_item_type(fcx.ccx.tcx, id); }\n       ast::def_const(id) { ret ty::lookup_item_type(fcx.ccx.tcx, id); }\n       ast::def_variant(_, vid) { ret ty::lookup_item_type(fcx.ccx.tcx, vid); }\n       ast::def_binding(id) {\n@@ -1560,7 +1560,7 @@ fn require_pure_call(ccx: @crate_ctxt, caller_purity: ast::purity,\n                     \"safe function calls function marked unsafe\");\n             }\n           }\n-          some(ast::def_native_fn(_)) {\n+          some(ast::def_native_fn(_, ast::unsafe_fn.)) {\n             if sess.get_opts().check_unsafe {\n                 ccx.tcx.sess.span_fatal(\n                     sp,\n@@ -1893,6 +1893,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n       }\n       ast::expr_path(pth) {\n         let defn = lookup_def(fcx, pth.span, id);\n+\n         let tpt = ty_param_kinds_and_ty_for_def(fcx, expr.span, defn);\n         if ty::def_has_ty_params(defn) {\n             let path_tpot = instantiate_path(fcx, pth, tpt, expr.span);"}, {"sha": "a837dbdac247678b119bd21a340605db626a2714", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/212707ce8440205d5f49b0a274caf629bf118de0/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212707ce8440205d5f49b0a274caf629bf118de0/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=212707ce8440205d5f49b0a274caf629bf118de0", "patch": "@@ -41,7 +41,7 @@ tag def {\n     def_binding(def_id);\n     def_use(def_id);\n     def_native_ty(def_id);\n-    def_native_fn(def_id);\n+    def_native_fn(def_id, purity);\n     def_upvar(def_id, @def, /* writable */bool);\n }\n "}, {"sha": "db9cdc2f1a13e85fe7f86198f000fa5bb9809c8f", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/212707ce8440205d5f49b0a274caf629bf118de0/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212707ce8440205d5f49b0a274caf629bf118de0/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=212707ce8440205d5f49b0a274caf629bf118de0", "patch": "@@ -37,7 +37,7 @@ fn def_id_of_def(d: def) -> def_id {\n       def_binding(id) { ret id; }\n       def_use(id) { ret id; }\n       def_native_ty(id) { ret id; }\n-      def_native_fn(id) { ret id; }\n+      def_native_fn(id, _) { ret id; }\n       def_upvar(id, _, _) { ret id; }\n     }\n }"}, {"sha": "7a1e61f27ba07a7ec4062689d79fda209d6f2130", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/212707ce8440205d5f49b0a274caf629bf118de0/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212707ce8440205d5f49b0a274caf629bf118de0/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=212707ce8440205d5f49b0a274caf629bf118de0", "patch": "@@ -1972,11 +1972,11 @@ fn parse_item_native_type(p: parser, attrs: [ast::attribute]) ->\n           span: ast_util::mk_sp(t.lo, hi)};\n }\n \n-fn parse_item_native_fn(p: parser, attrs: [ast::attribute]) ->\n-   @ast::native_item {\n+fn parse_item_native_fn(p: parser, attrs: [ast::attribute],\n+                        purity: ast::purity) -> @ast::native_item {\n     let lo = p.get_last_lo_pos();\n     let t = parse_fn_header(p);\n-    let decl = parse_fn_decl(p, ast::impure_fn, ast::il_normal);\n+    let decl = parse_fn_decl(p, purity, ast::il_normal);\n     let link_name = none;\n     if p.peek() == token::EQ { p.bump(); link_name = some(parse_str(p)); }\n     let hi = p.get_hi_pos();\n@@ -1993,7 +1993,10 @@ fn parse_native_item(p: parser, attrs: [ast::attribute]) ->\n     if eat_word(p, \"type\") {\n         ret parse_item_native_type(p, attrs);\n     } else if eat_word(p, \"fn\") {\n-        ret parse_item_native_fn(p, attrs);\n+        ret parse_item_native_fn(p, attrs, ast::impure_fn);\n+    } else if eat_word(p, \"unsafe\") {\n+        expect_word(p, \"fn\");\n+        ret parse_item_native_fn(p, attrs, ast::unsafe_fn);\n     } else { unexpected(p, p.peek()); }\n }\n "}]}