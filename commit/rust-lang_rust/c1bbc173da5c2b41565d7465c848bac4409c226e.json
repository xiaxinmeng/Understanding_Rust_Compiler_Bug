{"sha": "c1bbc173da5c2b41565d7465c848bac4409c226e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYmJjMTczZGE1YzJiNDE1NjVkNzQ2NWM4NDhiYWM0NDA5YzIyNmU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-03-29T11:41:53Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-03-29T11:41:53Z"}, "message": "Address review comments", "tree": {"sha": "09b93d17a5406be8f9f008b949b620aceefa5b4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09b93d17a5406be8f9f008b949b620aceefa5b4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1bbc173da5c2b41565d7465c848bac4409c226e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCgBKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAlq80QEsHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MASs\n6A/9FPwhKEGFAR99PSyG8Ho/nW8Rwx5zpdzUTqFF0nfH5FvVqNNqkU0Z9n14Qpgy\nM6jCfNArnIjmR8HXPqKC1aN5mxiG2nIoyuIXwMA50ewOTqiAPfbNbyLYTYYyGS3R\nuRWDRgPOB4s2MiT16tZk0/FJKUVQ6Be+8FLRFZuv2KDtT6wcLIv7zt0gwZJ8+Ukq\nTI4o9tVkTr2yx/oPWZ9dPxNtjHycrZQYnK1/VS0owRTxUUOxzfJkhY06ps9IOcBT\nUjg3wCTFvRtS/mJCAF9TVmcqzmTTfvOx03vvwTzxKegq3i38/mliVlfCobdyQMyu\nTNfc6Vp3wR1BwqHv3S3aP2KA57DDN5w+GZ4j7aabdvTdjTu6rojsS8gFzzXTagzR\nVYqrREu6SmWpvLZxyKIclfm+mNwetETYfjtGfs/T1P3dd2WBbqh2k3ZTsuLmal56\nSHGik4Bnj6o6GKXIIglQzXdHGhU7KAbPsmCZLfrVnt/hOvDUDE0keAWN6D7zoqOZ\nKnpPGh+Apo3Irw/IDxO9KcDBHNlMqlVnTE+oKgrGMyGqUHCx0LxMWhug+cMYAX/T\nMRQcszKgqhCbOCaUwmKY7V8FRyrMVIinyRggeizCvUOfozR+YSVTK5uNPyykW3Mw\nsUWGNKTw6RWN+vkhr0PNSyQExqH+PNASfPnFCqdR6ih6lEo=\n=mQU3\n-----END PGP SIGNATURE-----", "payload": "tree 09b93d17a5406be8f9f008b949b620aceefa5b4a\nparent 82e771d7dcabc86434c47e1ee461c62d30d91289\nauthor Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1522323713 +0200\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1522323713 +0200\n\nAddress review comments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1bbc173da5c2b41565d7465c848bac4409c226e", "html_url": "https://github.com/rust-lang/rust/commit/c1bbc173da5c2b41565d7465c848bac4409c226e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1bbc173da5c2b41565d7465c848bac4409c226e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82e771d7dcabc86434c47e1ee461c62d30d91289", "url": "https://api.github.com/repos/rust-lang/rust/commits/82e771d7dcabc86434c47e1ee461c62d30d91289", "html_url": "https://github.com/rust-lang/rust/commit/82e771d7dcabc86434c47e1ee461c62d30d91289"}], "stats": {"total": 105, "additions": 54, "deletions": 51}, "files": [{"sha": "1ab13a825da0cf5e60e6a8fc8daa498daa330d20", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1bbc173da5c2b41565d7465c848bac4409c226e/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bbc173da5c2b41565d7465c848bac4409c226e/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=c1bbc173da5c2b41565d7465c848bac4409c226e", "patch": "@@ -63,7 +63,7 @@ declare_clippy_lint! {\n /// ```\n declare_clippy_lint! {\n     pub POSSIBLE_MISSING_COMMA,\n-    style,\n+    correctness,\n     \"possible missing comma in array\"\n }\n "}, {"sha": "cb359daba441477a9d0236474df0ab0f23725ebb", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1bbc173da5c2b41565d7465c848bac4409c226e/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bbc173da5c2b41565d7465c848bac4409c226e/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=c1bbc173da5c2b41565d7465c848bac4409c226e", "patch": "@@ -24,7 +24,7 @@ use utils::{iter_input_pats, span_lint, type_is_unsafe_function};\n /// ```\n declare_clippy_lint! {\n     pub TOO_MANY_ARGUMENTS,\n-    style,\n+    complexity,\n     \"functions with too many arguments\"\n }\n "}, {"sha": "af7de542a91d80d3e25abfe86fa57062c4df7511", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1bbc173da5c2b41565d7465c848bac4409c226e/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bbc173da5c2b41565d7465c848bac4409c226e/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=c1bbc173da5c2b41565d7465c848bac4409c226e", "patch": "@@ -22,7 +22,7 @@ use utils::sugg::DiagnosticBuilderExt;\n /// ```\n declare_clippy_lint! {\n     pub INLINE_FN_WITHOUT_BODY,\n-    complexity,\n+    correctness,\n     \"use of `#[inline]` on trait methods without bodies\"\n }\n "}, {"sha": "187b1fcee82e5cd714ad1f77219fc9e3867301dc", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c1bbc173da5c2b41565d7465c848bac4409c226e/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bbc173da5c2b41565d7465c848bac4409c226e/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c1bbc173da5c2b41565d7465c848bac4409c226e", "patch": "@@ -85,6 +85,9 @@ macro_rules! declare_clippy_lint {\n     { pub $name:tt, internal, $description:tt } => {\n         declare_lint! { pub $name, Allow, $description }\n     };\n+    { pub $name:tt, internal_warn, $description:tt } => {\n+        declare_lint! { pub $name, Warn, $description }\n+    };\n }\n \n pub mod consts;\n@@ -443,7 +446,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         misc::USED_UNDERSCORE_BINDING,\n         misc_early::UNSEPARATED_LITERAL_SUFFIX,\n         mut_mut::MUT_MUT,\n-        mutex_atomic::MUTEX_INTEGER,\n         needless_continue::NEEDLESS_CONTINUE,\n         non_expressive_names::SIMILAR_NAMES,\n         replace_consts::REPLACE_CONSTS,\n@@ -674,10 +676,8 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         enum_variants::MODULE_INCEPTION,\n         eq_op::OP_REF,\n         eta_reduction::REDUNDANT_CLOSURE,\n-        formatting::POSSIBLE_MISSING_COMMA,\n         formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,\n         formatting::SUSPICIOUS_ELSE_FORMATTING,\n-        functions::TOO_MANY_ARGUMENTS,\n         if_let_redundant_pattern_matching::IF_LET_REDUNDANT_PATTERN_MATCHING,\n         len_zero::LEN_WITHOUT_IS_EMPTY,\n         len_zero::LEN_ZERO,\n@@ -686,15 +686,10 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         literal_representation::LARGE_DIGIT_GROUPS,\n         literal_representation::UNREADABLE_LITERAL,\n         loops::EMPTY_LOOP,\n-        loops::EXPLICIT_COUNTER_LOOP,\n         loops::EXPLICIT_INTO_ITER_LOOP,\n         loops::EXPLICIT_ITER_LOOP,\n         loops::FOR_KV_MAP,\n-        loops::MANUAL_MEMCPY,\n         loops::NEEDLESS_RANGE_LOOP,\n-        loops::NEVER_LOOP,\n-        loops::UNUSED_COLLECT,\n-        loops::WHILE_LET_LOOP,\n         loops::WHILE_LET_ON_ITERATOR,\n         map_clone::MAP_CLONE,\n         matches::MATCH_BOOL,\n@@ -703,16 +698,12 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         matches::MATCH_WILD_ERR_ARM,\n         matches::SINGLE_MATCH,\n         methods::CHARS_LAST_CMP,\n-        methods::CHARS_NEXT_CMP,\n-        methods::FILTER_NEXT,\n         methods::GET_UNWRAP,\n         methods::ITER_CLONED_COLLECT,\n         methods::ITER_SKIP_NEXT,\n         methods::NEW_RET_NO_SELF,\n         methods::OK_EXPECT,\n         methods::OPTION_MAP_OR_NONE,\n-        methods::OR_FUN_CALL,\n-        methods::SEARCH_IS_SOME,\n         methods::SHOULD_IMPLEMENT_TRAIT,\n         methods::STRING_EXTEND_CHARS,\n         methods::UNNECESSARY_FOLD,\n@@ -724,10 +715,8 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         misc_early::DOUBLE_NEG,\n         misc_early::DUPLICATE_UNDERSCORE_ARGUMENT,\n         misc_early::MIXED_CASE_HEX_LITERALS,\n-        misc_early::REDUNDANT_CLOSURE_CALL,\n         misc_early::UNNEEDED_FIELD_PATTERN,\n         mut_reference::UNNECESSARY_MUT_PASSED,\n-        needless_bool::BOOL_COMPARISON,\n         needless_pass_by_value::NEEDLESS_PASS_BY_VALUE,\n         neg_multiply::NEG_MULTIPLY,\n         new_without_default::NEW_WITHOUT_DEFAULT,\n@@ -763,22 +752,25 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         eval_order_dependence::EVAL_ORDER_DEPENDENCE,\n         explicit_write::EXPLICIT_WRITE,\n         format::USELESS_FORMAT,\n+        functions::TOO_MANY_ARGUMENTS,\n         identity_conversion::IDENTITY_CONVERSION,\n         identity_op::IDENTITY_OP,\n-        inline_fn_without_body::INLINE_FN_WITHOUT_BODY,\n         int_plus_one::INT_PLUS_ONE,\n         lifetimes::NEEDLESS_LIFETIMES,\n         lifetimes::UNUSED_LIFETIMES,\n-        loops::FOR_LOOP_OVER_OPTION,\n-        loops::FOR_LOOP_OVER_RESULT,\n-        loops::ITER_NEXT_LOOP,\n+        loops::EXPLICIT_COUNTER_LOOP,\n         loops::MUT_RANGE_BOUND,\n+        loops::WHILE_LET_LOOP,\n         matches::MATCH_AS_REF,\n+        methods::CHARS_NEXT_CMP,\n         methods::CLONE_ON_COPY,\n+        methods::FILTER_NEXT,\n+        methods::SEARCH_IS_SOME,\n         methods::USELESS_ASREF,\n-        misc::FLOAT_CMP,\n         misc::SHORT_CIRCUIT_STATEMENT,\n+        misc_early::REDUNDANT_CLOSURE_CALL,\n         misc_early::ZERO_PREFIXED_LITERAL,\n+        needless_bool::BOOL_COMPARISON,\n         needless_bool::NEEDLESS_BOOL,\n         needless_borrow::NEEDLESS_BORROW,\n         needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE,\n@@ -801,7 +793,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         transmute::TRANSMUTE_PTR_TO_REF,\n         transmute::USELESS_TRANSMUTE,\n         types::BORROWED_BOX,\n-        types::BOX_VEC,\n         types::CAST_LOSSLESS,\n         types::CHAR_LIT_AS_U8,\n         types::OPTION_OPTION,\n@@ -830,15 +821,22 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT,\n         eq_op::EQ_OP,\n         erasing_op::ERASING_OP,\n+        formatting::POSSIBLE_MISSING_COMMA,\n         functions::NOT_UNSAFE_PTR_ARG_DEREF,\n         infinite_iter::INFINITE_ITER,\n+        inline_fn_without_body::INLINE_FN_WITHOUT_BODY,\n         invalid_ref::INVALID_REF,\n+        loops::FOR_LOOP_OVER_OPTION,\n+        loops::FOR_LOOP_OVER_RESULT,\n+        loops::ITER_NEXT_LOOP,\n+        loops::NEVER_LOOP,\n         loops::REVERSE_RANGE_LOOP,\n         loops::WHILE_IMMUTABLE_CONDITION,\n         methods::CLONE_DOUBLE_REF,\n         methods::TEMPORARY_CSTRING_AS_PTR,\n         minmax::MIN_MAX,\n         misc::CMP_NAN,\n+        misc::FLOAT_CMP,\n         misc::MODULO_ONE,\n         open_options::NONSENSICAL_OPEN_OPTIONS,\n         ptr::MUT_FROM_REF,\n@@ -860,15 +858,20 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         entry::MAP_ENTRY,\n         escape::BOXED_LOCAL,\n         large_enum_variant::LARGE_ENUM_VARIANT,\n+        loops::MANUAL_MEMCPY,\n+        loops::UNUSED_COLLECT,\n         methods::ITER_NTH,\n+        methods::OR_FUN_CALL,\n         methods::SINGLE_CHAR_PATTERN,\n         misc::CMP_OWNED,\n         mutex_atomic::MUTEX_ATOMIC,\n+        types::BOX_VEC,\n         vec::USELESS_VEC,\n     ]);\n \n     reg.register_lint_group(\"clippy_nursery\", vec![\n         fallible_impl_from::FALLIBLE_IMPL_FROM,\n+        mutex_atomic::MUTEX_INTEGER,\n         ranges::RANGE_PLUS_ONE,\n     ]);\n }"}, {"sha": "6f04940ae31cb4805be7a2b2753c1ffe6639647e", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c1bbc173da5c2b41565d7465c848bac4409c226e/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bbc173da5c2b41565d7465c848bac4409c226e/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=c1bbc173da5c2b41565d7465c848bac4409c226e", "patch": "@@ -40,7 +40,7 @@ use utils::paths;\n /// ```\n declare_clippy_lint! {\n     pub MANUAL_MEMCPY,\n-    style,\n+    perf,\n     \"manually copying items between slices\"\n }\n \n@@ -119,7 +119,7 @@ declare_clippy_lint! {\n /// ```\n declare_clippy_lint! {\n     pub ITER_NEXT_LOOP,\n-    complexity,\n+    correctness,\n     \"for-looping over `_.next()` which is probably not intended\"\n }\n \n@@ -141,7 +141,7 @@ declare_clippy_lint! {\n /// ```\n declare_clippy_lint! {\n     pub FOR_LOOP_OVER_OPTION,\n-    complexity,\n+    correctness,\n     \"for-looping over an `Option`, which is more clearly expressed as an `if let`\"\n }\n \n@@ -163,7 +163,7 @@ declare_clippy_lint! {\n /// ```\n declare_clippy_lint! {\n     pub FOR_LOOP_OVER_RESULT,\n-    complexity,\n+    correctness,\n     \"for-looping over a `Result`, which is more clearly expressed as an `if let`\"\n }\n \n@@ -191,7 +191,7 @@ declare_clippy_lint! {\n /// ```\n declare_clippy_lint! {\n     pub WHILE_LET_LOOP,\n-    style,\n+    complexity,\n     \"`loop { if let { ... } else break }`, which can be written as a `while let` loop\"\n }\n \n@@ -209,7 +209,7 @@ declare_clippy_lint! {\n /// ```\n declare_clippy_lint! {\n     pub UNUSED_COLLECT,\n-    style,\n+    perf,\n     \"`collect()`ing an iterator without using the result; this is usually better \\\n      written as a for loop\"\n }\n@@ -252,7 +252,7 @@ declare_clippy_lint! {\n /// ```\n declare_clippy_lint! {\n     pub EXPLICIT_COUNTER_LOOP,\n-    style,\n+    complexity,\n     \"for-looping with an explicit counter when `_.enumerate()` would do\"\n }\n \n@@ -329,7 +329,7 @@ declare_clippy_lint! {\n /// ```\n declare_clippy_lint! {\n     pub NEVER_LOOP,\n-    style,\n+    correctness,\n     \"any loop that will always `break` or `return`\"\n }\n "}, {"sha": "50de299ca7d18958be97840782ed2451575c3db4", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c1bbc173da5c2b41565d7465c848bac4409c226e/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bbc173da5c2b41565d7465c848bac4409c226e/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=c1bbc173da5c2b41565d7465c848bac4409c226e", "patch": "@@ -160,7 +160,7 @@ declare_clippy_lint! {\n /// **Why is this bad?** Readability, this can be written more concisely as\n /// `_.map_or(_, _)`.\n ///\n-/// **Known problems:** None.\n+/// **Known problems:** The order of the arguments is not in execution order\n ///\n /// **Example:**\n /// ```rust\n@@ -178,7 +178,7 @@ declare_clippy_lint! {\n /// **Why is this bad?** Readability, this can be written more concisely as\n /// `_.map_or_else(_, _)`.\n ///\n-/// **Known problems:** None.\n+/// **Known problems:** The order of the arguments is not in execution order.\n ///\n /// **Example:**\n /// ```rust\n@@ -214,7 +214,7 @@ declare_clippy_lint! {\n /// **Why is this bad?** Readability, this can be written more concisely as\n /// `_.and_then(_)`.\n ///\n-/// **Known problems:** None.\n+/// **Known problems:** The order of the arguments is not in execution order.\n ///\n /// **Example:**\n /// ```rust\n@@ -240,7 +240,7 @@ declare_clippy_lint! {\n /// ```\n declare_clippy_lint! {\n     pub FILTER_NEXT,\n-    style,\n+    complexity,\n     \"using `filter(p).next()`, which is more succinctly expressed as `.find(p)`\"\n }\n \n@@ -278,7 +278,7 @@ declare_clippy_lint! {\n /// ```\n declare_clippy_lint! {\n     pub SEARCH_IS_SOME,\n-    style,\n+    complexity,\n     \"using an iterator search followed by `is_some()`, which is more succinctly \\\n      expressed as a call to `any()`\"\n }\n@@ -297,7 +297,7 @@ declare_clippy_lint! {\n /// ```\n declare_clippy_lint! {\n     pub CHARS_NEXT_CMP,\n-    style,\n+    complexity,\n     \"using `.chars().next()` to check if a string starts with a char\"\n }\n \n@@ -325,7 +325,7 @@ declare_clippy_lint! {\n /// ```\n declare_clippy_lint! {\n     pub OR_FUN_CALL,\n-    style,\n+    perf,\n     \"using any `*or` method with a function call, which suggests `*or_else`\"\n }\n \n@@ -347,8 +347,8 @@ declare_clippy_lint! {\n }\n \n /// **What it does:** Checks for usage of `.clone()` on a ref-counted pointer,\n-/// (Rc, Arc, rc::Weak, or sync::Weak), and suggests calling Clone on\n-/// the corresponding trait instead.\n+/// (`Rc`, `Arc`, `rc::Weak`, or `sync::Weak`), and suggests calling Clone via unified\n+/// function syntax instead (e.g. `Rc::clone(foo)`).\n ///\n /// **Why is this bad?**: Calling '.clone()' on an Rc, Arc, or Weak\n /// can obscure the fact that only the pointer is being cloned, not the underlying"}, {"sha": "e9b6865f0c9964d5d837ea77497810bab20b30b9", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1bbc173da5c2b41565d7465c848bac4409c226e/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bbc173da5c2b41565d7465c848bac4409c226e/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=c1bbc173da5c2b41565d7465c848bac4409c226e", "patch": "@@ -72,7 +72,7 @@ declare_clippy_lint! {\n /// ```\n declare_clippy_lint! {\n     pub FLOAT_CMP,\n-    complexity,\n+    correctness,\n     \"using `==` or `!=` on float values instead of comparing difference with an epsilon\"\n }\n "}, {"sha": "3f3ba6487ded2a7ac76a072d35903fa67fd3df83", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1bbc173da5c2b41565d7465c848bac4409c226e/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bbc173da5c2b41565d7465c848bac4409c226e/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=c1bbc173da5c2b41565d7465c848bac4409c226e", "patch": "@@ -54,7 +54,7 @@ declare_clippy_lint! {\n /// ```\n declare_clippy_lint! {\n     pub REDUNDANT_CLOSURE_CALL,\n-    style,\n+    complexity,\n     \"throwaway closures called in the expression they are defined\"\n }\n "}, {"sha": "b879d76e65cedcc9cd601ce12a8a0bddf2bc8df4", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1bbc173da5c2b41565d7465c848bac4409c226e/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bbc173da5c2b41565d7465c848bac4409c226e/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=c1bbc173da5c2b41565d7465c848bac4409c226e", "patch": "@@ -44,7 +44,7 @@ declare_clippy_lint! {\n /// ```\n declare_clippy_lint! {\n     pub MUTEX_INTEGER,\n-    pedantic,\n+    nursery,\n     \"using a mutex for an integer type\"\n }\n "}, {"sha": "e88d76656ebaf228c28268609b05293323b6804f", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1bbc173da5c2b41565d7465c848bac4409c226e/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bbc173da5c2b41565d7465c848bac4409c226e/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=c1bbc173da5c2b41565d7465c848bac4409c226e", "patch": "@@ -44,7 +44,7 @@ declare_clippy_lint! {\n /// ```\n declare_clippy_lint! {\n     pub BOOL_COMPARISON,\n-    style,\n+    complexity,\n     \"comparing a variable to a boolean, e.g. `if x == true`\"\n }\n "}, {"sha": "6d9880e1335198754ff2c0840a1e402ce18542cd", "filename": "clippy_lints/src/print.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1bbc173da5c2b41565d7465c848bac4409c226e/clippy_lints%2Fsrc%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bbc173da5c2b41565d7465c848bac4409c226e/clippy_lints%2Fsrc%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprint.rs?ref=c1bbc173da5c2b41565d7465c848bac4409c226e", "patch": "@@ -8,7 +8,7 @@ use syntax_pos::Span;\n use utils::{is_expn_of, match_def_path, match_path, resolve_node, span_lint, span_lint_and_sugg};\n use utils::{opt_def_id, paths};\n \n-/// **What it does:** This lint warns when you using `println!(\"\")` to\n+/// **What it does:** This lint warns when you use `println!(\"\")` to\n /// print a newline.\n ///\n /// **Why is this bad?** You should use `println!()`, which is simpler.\n@@ -22,10 +22,10 @@ use utils::{opt_def_id, paths};\n declare_clippy_lint! {\n     pub PRINTLN_EMPTY_STRING,\n     style,\n-    \"using `print!()` with a format string that ends in a newline\"\n+    \"using `println!(\\\"\\\")` with an empty string\"\n }\n \n-/// **What it does:** This lint warns when you using `print!()` with a format\n+/// **What it does:** This lint warns when you use `print!()` with a format\n /// string that\n /// ends in a newline.\n ///"}, {"sha": "16a1142efb7ae207b9a20fc7a475047380c797a3", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1bbc173da5c2b41565d7465c848bac4409c226e/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bbc173da5c2b41565d7465c848bac4409c226e/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=c1bbc173da5c2b41565d7465c848bac4409c226e", "patch": "@@ -46,7 +46,7 @@ pub struct TypePass;\n /// ```\n declare_clippy_lint! {\n     pub BOX_VEC,\n-    complexity,\n+    perf,\n     \"usage of `Box<Vec<T>>`, vector elements are already on the heap\"\n }\n "}, {"sha": "192d6671bcba7975b4fbbde58248b097406f214b", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1bbc173da5c2b41565d7465c848bac4409c226e/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bbc173da5c2b41565d7465c848bac4409c226e/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=c1bbc173da5c2b41565d7465c848bac4409c226e", "patch": "@@ -40,7 +40,7 @@ use std::collections::HashMap;\n /// ```\n declare_clippy_lint! {\n     pub LINT_AUTHOR,\n-    style, // ok, this is not a style lint, but it's also a noop without the appropriate attribute\n+    internal_warn,\n     \"helper for writing lints\"\n }\n "}, {"sha": "e8d07fbed0d3cca5f70d0072265ed0e3cd03c92b", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1bbc173da5c2b41565d7465c848bac4409c226e/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bbc173da5c2b41565d7465c848bac4409c226e/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=c1bbc173da5c2b41565d7465c848bac4409c226e", "patch": "@@ -26,7 +26,7 @@ use syntax::attr;\n /// ```\n declare_clippy_lint! {\n     pub DEEP_CODE_INSPECTION,\n-    style, // not a style lint, but essentially a noop without the appropriate attribute\n+    internal_warn,\n     \"helper to dump info about code\"\n }\n "}, {"sha": "664be379e357942ae9ab36e34d2b4cfe2662d5f8", "filename": "tests/ui/never_loop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1bbc173da5c2b41565d7465c848bac4409c226e/tests%2Fui%2Fnever_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1bbc173da5c2b41565d7465c848bac4409c226e/tests%2Fui%2Fnever_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_loop.stderr?ref=c1bbc173da5c2b41565d7465c848bac4409c226e", "patch": "@@ -10,7 +10,7 @@ error: this loop never actually loops\n 13 | |     }\n    | |_____^\n    |\n-   = note: `-D never-loop` implied by `-D warnings`\n+   = note: #[deny(never_loop)] on by default\n \n error: this loop never actually loops\n   --> $DIR/never_loop.rs:28:5"}]}