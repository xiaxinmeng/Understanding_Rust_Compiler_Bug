{"sha": "9e92106d457abd14f82adc29e7f2496861e07916", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllOTIxMDZkNDU3YWJkMTRmODJhZGMyOWU3ZjI0OTY4NjFlMDc5MTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-22T16:30:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-22T16:30:36Z"}, "message": "Auto merge of #74642 - Manishearth:rollup-148kz52, r=Manishearth\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #73655 (va_args implementation for AAPCS.)\n - #73893 (Stabilize control-flow-guard codegen option)\n - #74237 (compiletest: Rewrite extract_*_version functions)\n - #74454 (small coherence cleanup)\n - #74528 (refactor and reword intra-doc link errors)\n - #74568 (Apply #66379 to `*mut T` `as_ref`)\n - #74570 (Use forge links for prioritization procedure)\n - #74589 (Update books)\n - #74635 (Fix tooltip position if the documentation starts with a code block)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "2d3854674532fa3fcc201ba6d1dea0c8c68ef1f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d3854674532fa3fcc201ba6d1dea0c8c68ef1f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e92106d457abd14f82adc29e7f2496861e07916", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e92106d457abd14f82adc29e7f2496861e07916", "html_url": "https://github.com/rust-lang/rust/commit/9e92106d457abd14f82adc29e7f2496861e07916", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e92106d457abd14f82adc29e7f2496861e07916/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69d68f90964a46e479eec02a4d9c45aaaa45b411", "url": "https://api.github.com/repos/rust-lang/rust/commits/69d68f90964a46e479eec02a4d9c45aaaa45b411", "html_url": "https://github.com/rust-lang/rust/commit/69d68f90964a46e479eec02a4d9c45aaaa45b411"}, {"sha": "05a24661a33555c4cd46cee5ef304f1f55f5186b", "url": "https://api.github.com/repos/rust-lang/rust/commits/05a24661a33555c4cd46cee5ef304f1f55f5186b", "html_url": "https://github.com/rust-lang/rust/commit/05a24661a33555c4cd46cee5ef304f1f55f5186b"}], "stats": {"total": 1386, "additions": 751, "deletions": 635}, "files": [{"sha": "c1e56347ab1e0111ed0ff5d0bd71f1c88aead816", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -1239,7 +1239,7 @@ impl<'a> Builder<'a> {\n             && self.config.control_flow_guard\n             && compiler.stage >= 1\n         {\n-            rustflags.arg(\"-Zcontrol-flow-guard\");\n+            rustflags.arg(\"-Ccontrol-flow-guard\");\n         }\n \n         // For `cargo doc` invocations, make rustdoc print the Rust version into the docs"}, {"sha": "a914f2c7e5cdb771fa465de142381a51c53b580e", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -1 +1 @@\n-Subproject commit 84a31397b34f9d405df44f2899ff17a4828dba18\n+Subproject commit a914f2c7e5cdb771fa465de142381a51c53b580e"}, {"sha": "bd6e4a9f59c5c1545f572266af77f5c7a5bad6d1", "filename": "src/doc/edition-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fedition-guide?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -1 +1 @@\n-Subproject commit 82bec5877c77cfad530ca11095db4456d757f668\n+Subproject commit bd6e4a9f59c5c1545f572266af77f5c7a5bad6d1"}, {"sha": "b329ce37424874ad4db94f829a55807c6e21d2cb", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -1 +1 @@\n-Subproject commit 0ea7bc494f1289234d8800bb9185021e0ad946f0\n+Subproject commit b329ce37424874ad4db94f829a55807c6e21d2cb"}, {"sha": "35904e15d3feeaa596f58772a70bcd92fb1cd848", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -42,6 +42,18 @@ generated code, but may be slower to compile.\n The default value, if not specified, is 16 for non-incremental builds. For\n incremental builds the default is 256 which allows caching to be more granular.\n \n+## control-flow-guard\n+\n+This flag controls whether LLVM enables the Windows [Control Flow \n+Guard](https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard) \n+platform security feature. This flag is currently ignored for non-Windows targets. \n+It takes one of the following values:\n+\n+* `y`, `yes`, `on`, `checks`, or no value: enable Control Flow Guard.\n+* `nochecks`: emit Control Flow Guard metadata without runtime enforcement checks (this \n+should only be used for testing purposes as it does not provide security enforcement).\n+* `n`, `no`, `off`: do not enable Control Flow Guard (the default).\n+\n ## debug-assertions\n \n This flag lets you turn `cfg(debug_assertions)` [conditional"}, {"sha": "915dc3e45f6445274af2ba29a3ab5e18a43436ca", "filename": "src/libcore/ptr/mut_ptr.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmut_ptr.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -47,17 +47,22 @@ impl<T: ?Sized> *mut T {\n     /// operation because the returned value could be pointing to invalid\n     /// memory.\n     ///\n-    /// When calling this method, you have to ensure that if the pointer is\n-    /// non-NULL, then it is properly aligned, dereferenceable (for the whole\n-    /// size of `T`) and points to an initialized instance of `T`. This applies\n-    /// even if the result of this method is unused!\n+    /// When calling this method, you have to ensure that *either* the pointer is NULL *or*\n+    /// all of the following is true:\n+    /// - it is properly aligned\n+    /// - it must point to an initialized instance of T; in particular, the pointer must be\n+    ///   \"dereferencable\" in the sense defined [here].\n+    ///\n+    /// This applies even if the result of this method is unused!\n     /// (The part about being initialized is not yet fully decided, but until\n     /// it is, the only safe approach is to ensure that they are indeed initialized.)\n     ///\n     /// Additionally, the lifetime `'a` returned is arbitrarily chosen and does\n-    /// not necessarily reflect the actual lifetime of the data. It is up to the\n-    /// caller to ensure that for the duration of this lifetime, the memory this\n-    /// pointer points to does not get written to outside of `UnsafeCell<U>`.\n+    /// not necessarily reflect the actual lifetime of the data. *You* must enforce\n+    /// Rust's aliasing rules. In particular, for the duration of this lifetime,\n+    /// the memory the pointer points to must not get mutated (except inside `UnsafeCell`).\n+    ///\n+    /// [here]: crate::ptr#safety\n     ///\n     /// # Examples\n     ///"}, {"sha": "8a1bb258d4274480afd58fa175e64fd129fcdd8a", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -1330,7 +1330,12 @@ impl Builder<'a, 'll, 'tcx> {\n         self.call(lifetime_intrinsic, &[self.cx.const_u64(size), ptr], None);\n     }\n \n-    fn phi(&mut self, ty: &'ll Type, vals: &[&'ll Value], bbs: &[&'ll BasicBlock]) -> &'ll Value {\n+    pub(crate) fn phi(\n+        &mut self,\n+        ty: &'ll Type,\n+        vals: &[&'ll Value],\n+        bbs: &[&'ll BasicBlock],\n+    ) -> &'ll Value {\n         assert_eq!(vals.len(), bbs.len());\n         let phi = unsafe { llvm::LLVMBuildPhi(self.llbuilder, ty, UNNAMED) };\n         unsafe {"}, {"sha": "a07f6c64edcb188e2853b56220ea291df892368a", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -190,7 +190,7 @@ pub unsafe fn create_module(\n \n     // Control Flow Guard is currently only supported by the MSVC linker on Windows.\n     if sess.target.target.options.is_like_msvc {\n-        match sess.opts.debugging_opts.control_flow_guard {\n+        match sess.opts.cg.control_flow_guard {\n             CFGuard::Disabled => {}\n             CFGuard::NoChecks => {\n                 // Set `cfguard=1` module flag to emit metadata only."}, {"sha": "54efa05aee81e315ea619eebb3b2bc827603f15d", "filename": "src/librustc_codegen_llvm/va_arg.rs", "status": "modified", "additions": 79, "deletions": 2, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Flibrustc_codegen_llvm%2Fva_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Flibrustc_codegen_llvm%2Fva_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fva_arg.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -3,8 +3,9 @@ use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n use rustc_codegen_ssa::mir::operand::OperandRef;\n-use rustc_codegen_ssa::traits::{\n-    BaseTypeMethods, BuilderMethods, ConstMethods, DerivedTypeMethods,\n+use rustc_codegen_ssa::{\n+    common::IntPredicate,\n+    traits::{BaseTypeMethods, BuilderMethods, ConstMethods, DerivedTypeMethods},\n };\n use rustc_middle::ty::layout::HasTyCtxt;\n use rustc_middle::ty::Ty;\n@@ -89,6 +90,81 @@ fn emit_ptr_va_arg(\n     }\n }\n \n+fn emit_aapcs_va_arg(\n+    bx: &mut Builder<'a, 'll, 'tcx>,\n+    list: OperandRef<'tcx, &'ll Value>,\n+    target_ty: Ty<'tcx>,\n+) -> &'ll Value {\n+    // Implementation of the AAPCS64 calling convention for va_args see\n+    // https://github.com/ARM-software/abi-aa/blob/master/aapcs64/aapcs64.rst\n+    let va_list_addr = list.immediate();\n+    let layout = bx.cx.layout_of(target_ty);\n+\n+    let mut maybe_reg = bx.build_sibling_block(\"va_arg.maybe_reg\");\n+    let mut in_reg = bx.build_sibling_block(\"va_arg.in_reg\");\n+    let mut on_stack = bx.build_sibling_block(\"va_arg.on_stack\");\n+    let mut end = bx.build_sibling_block(\"va_arg.end\");\n+    let zero = bx.const_i32(0);\n+    let offset_align = Align::from_bytes(4).unwrap();\n+    assert!(&*bx.tcx().sess.target.target.target_endian == \"little\");\n+\n+    let gr_type = target_ty.is_any_ptr() || target_ty.is_integral();\n+    let (reg_off, reg_top_index, slot_size) = if gr_type {\n+        let gr_offs = bx.struct_gep(va_list_addr, 7);\n+        let nreg = (layout.size.bytes() + 7) / 8;\n+        (gr_offs, 3, nreg * 8)\n+    } else {\n+        let vr_off = bx.struct_gep(va_list_addr, 9);\n+        let nreg = (layout.size.bytes() + 15) / 16;\n+        (vr_off, 5, nreg * 16)\n+    };\n+\n+    // if the offset >= 0 then the value will be on the stack\n+    let mut reg_off_v = bx.load(reg_off, offset_align);\n+    let use_stack = bx.icmp(IntPredicate::IntSGE, reg_off_v, zero);\n+    bx.cond_br(use_stack, &on_stack.llbb(), &maybe_reg.llbb());\n+\n+    // The value at this point might be in a register, but there is a chance that\n+    // it could be on the stack so we have to update the offset and then check\n+    // the offset again.\n+\n+    if gr_type && layout.align.abi.bytes() > 8 {\n+        reg_off_v = maybe_reg.add(reg_off_v, bx.const_i32(15));\n+        reg_off_v = maybe_reg.and(reg_off_v, bx.const_i32(-16));\n+    }\n+    let new_reg_off_v = maybe_reg.add(reg_off_v, bx.const_i32(slot_size as i32));\n+\n+    maybe_reg.store(new_reg_off_v, reg_off, offset_align);\n+\n+    // Check to see if we have overflowed the registers as a result of this.\n+    // If we have then we need to use the stack for this value\n+    let use_stack = maybe_reg.icmp(IntPredicate::IntSGT, new_reg_off_v, zero);\n+    maybe_reg.cond_br(use_stack, &on_stack.llbb(), &in_reg.llbb());\n+\n+    let top = in_reg.struct_gep(va_list_addr, reg_top_index);\n+    let top = in_reg.load(top, bx.tcx().data_layout.pointer_align.abi);\n+\n+    // reg_value = *(@top + reg_off_v);\n+    let top = in_reg.gep(top, &[reg_off_v]);\n+    let top = in_reg.bitcast(top, bx.cx.type_ptr_to(layout.llvm_type(bx)));\n+    let reg_value = in_reg.load(top, layout.align.abi);\n+    in_reg.br(&end.llbb());\n+\n+    // On Stack block\n+    let stack_value =\n+        emit_ptr_va_arg(&mut on_stack, list, target_ty, false, Align::from_bytes(8).unwrap(), true);\n+    on_stack.br(&end.llbb());\n+\n+    let val = end.phi(\n+        layout.immediate_llvm_type(bx),\n+        &[reg_value, stack_value],\n+        &[&in_reg.llbb(), &on_stack.llbb()],\n+    );\n+\n+    *bx = end;\n+    val\n+}\n+\n pub(super) fn emit_va_arg(\n     bx: &mut Builder<'a, 'll, 'tcx>,\n     addr: OperandRef<'tcx, &'ll Value>,\n@@ -115,6 +191,7 @@ pub(super) fn emit_va_arg(\n         (\"aarch64\", _) if target.target_os == \"ios\" => {\n             emit_ptr_va_arg(bx, addr, target_ty, false, Align::from_bytes(8).unwrap(), true)\n         }\n+        (\"aarch64\", _) => emit_aapcs_va_arg(bx, addr, target_ty),\n         // Windows x86_64\n         (\"x86_64\", true) => {\n             let target_ty_size = bx.cx.size_of(target_ty).bytes();"}, {"sha": "7c153ba0d60cb59e6f45eb55eba4b6f496eb72dc", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -1700,7 +1700,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     }\n \n     // OBJECT-FILES-NO, AUDIT-ORDER\n-    if sess.opts.debugging_opts.control_flow_guard != CFGuard::Disabled {\n+    if sess.opts.cg.control_flow_guard != CFGuard::Disabled {\n         cmd.control_flow_guard();\n     }\n "}, {"sha": "22197a66530ddddb7d1eaba67444109707e5ba2f", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -420,6 +420,7 @@ fn test_codegen_options_tracking_hash() {\n     // Make sure that changing a [TRACKED] option changes the hash.\n     // This list is in alphabetical order.\n     tracked!(code_model, Some(CodeModel::Large));\n+    tracked!(control_flow_guard, CFGuard::Checks);\n     tracked!(debug_assertions, Some(true));\n     tracked!(debuginfo, 0xdeadbeef);\n     tracked!(embed_bitcode, false);\n@@ -537,7 +538,6 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(binary_dep_depinfo, true);\n     tracked!(chalk, true);\n     tracked!(codegen_backend, Some(\"abc\".to_string()));\n-    tracked!(control_flow_guard, CFGuard::Checks);\n     tracked!(crate_attr, vec![\"abc\".to_string()]);\n     tracked!(debug_macros, true);\n     tracked!(dep_info_omit_d_target, true);"}, {"sha": "620a04b45b0e4c457823af78a21d1bc9abf2b38b", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -103,7 +103,7 @@ pub enum Strip {\n     Symbols,\n }\n \n-/// The different settings that the `-Z control-flow-guard` flag can have.\n+/// The different settings that the `-C control-flow-guard` flag can have.\n #[derive(Clone, Copy, PartialEq, Hash, Debug)]\n pub enum CFGuard {\n     /// Do not emit Control Flow Guard metadata or checks."}, {"sha": "099d11264225e9a19c5a300394b64f4c5fdc5090", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -692,6 +692,8 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"choose the code model to use (`rustc --print code-models` for details)\"),\n     codegen_units: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n         \"divide crate into N units to optimize in parallel\"),\n+    control_flow_guard: CFGuard = (CFGuard::Disabled, parse_cfguard, [TRACKED],\n+        \"use Windows Control Flow Guard (default: no)\"),\n     debug_assertions: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"explicitly enable the `cfg(debug_assertions)` directive\"),\n     debuginfo: usize = (0, parse_uint, [TRACKED],\n@@ -809,8 +811,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"enable the experimental Chalk-based trait solving engine\"),\n     codegen_backend: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"the backend to use\"),\n-    control_flow_guard: CFGuard = (CFGuard::Disabled, parse_cfguard, [TRACKED],\n-        \"use Windows Control Flow Guard (default: no)\"),\n     crate_attr: Vec<String> = (Vec::new(), parse_string_push, [TRACKED],\n         \"inject the given attribute in the crate\"),\n     debug_macros: bool = (false, parse_bool, [TRACKED],"}, {"sha": "b06cf4411d053188e80f90188b4ea1c5125a526f", "filename": "src/librustc_trait_selection/traits/coherence.rs", "status": "modified", "additions": 47, "deletions": 52, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Flibrustc_trait_selection%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Flibrustc_trait_selection%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fcoherence.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -289,11 +289,11 @@ pub fn orphan_check(tcx: TyCtxt<'_>, impl_def_id: DefId) -> Result<(), OrphanChe\n ///     - but (knowing that `Vec<T>` is non-fundamental, and assuming it's\n ///       not local), `Vec<LocalType>` is bad, because `Vec<->` is between\n ///       the local type and the type parameter.\n-/// 3. Every type parameter before the local key parameter is fully known in C.\n-///     - e.g., `impl<T> T: Trait<LocalType>` is bad, because `T` might be\n-///       an unknown type.\n-///     - but `impl<T> LocalType: Trait<T>` is OK, because `LocalType`\n-///       occurs before `T`.\n+/// 3. Before this local type, no generic type parameter of the impl must\n+///    be reachable through fundamental types.\n+///     - e.g. `impl<T> Trait<LocalType> for Vec<T>` is fine, as `Vec` is not fundamental.\n+///     - while `impl<T> Trait<LocalType for Box<T>` results in an error, as `T` is\n+///       reachable through the fundamental type `Box`.\n /// 4. Every type in the local key parameter not known in C, going\n ///    through the parameter's type tree, must appear only as a subtree of\n ///    a type local to C, with only fundamental types between the type\n@@ -387,9 +387,9 @@ fn orphan_check_trait_ref<'tcx>(\n         ty: Ty<'tcx>,\n         in_crate: InCrate,\n     ) -> Vec<Ty<'tcx>> {\n-        // FIXME(eddyb) figure out if this is redundant with `ty_is_non_local`,\n-        // or maybe if this should be calling `ty_is_non_local_constructor`.\n-        if ty_is_non_local(tcx, ty, in_crate).is_some() {\n+        // FIXME: this is currently somewhat overly complicated,\n+        // but fixing this requires a more complicated refactor.\n+        if !contained_non_local_types(tcx, ty, in_crate).is_empty() {\n             if let Some(inner_tys) = fundamental_ty_inner_tys(tcx, ty) {\n                 return inner_tys\n                     .flat_map(|ty| uncover_fundamental_ty(tcx, ty, in_crate))\n@@ -408,8 +408,8 @@ fn orphan_check_trait_ref<'tcx>(\n         .enumerate()\n     {\n         debug!(\"orphan_check_trait_ref: check ty `{:?}`\", input_ty);\n-        let non_local_tys = ty_is_non_local(tcx, input_ty, in_crate);\n-        if non_local_tys.is_none() {\n+        let non_local_tys = contained_non_local_types(tcx, input_ty, in_crate);\n+        if non_local_tys.is_empty() {\n             debug!(\"orphan_check_trait_ref: ty_is_local `{:?}`\", input_ty);\n             return Ok(());\n         } else if let ty::Param(_) = input_ty.kind {\n@@ -418,37 +418,45 @@ fn orphan_check_trait_ref<'tcx>(\n                 .substs\n                 .types()\n                 .flat_map(|ty| uncover_fundamental_ty(tcx, ty, in_crate))\n-                .find(|ty| ty_is_non_local_constructor(ty, in_crate).is_none());\n+                .find(|ty| ty_is_local_constructor(ty, in_crate));\n \n             debug!(\"orphan_check_trait_ref: uncovered ty local_type: `{:?}`\", local_type);\n \n             return Err(OrphanCheckErr::UncoveredTy(input_ty, local_type));\n         }\n-        if let Some(non_local_tys) = non_local_tys {\n-            for input_ty in non_local_tys {\n-                non_local_spans.push((input_ty, i == 0));\n-            }\n+\n+        for input_ty in non_local_tys {\n+            non_local_spans.push((input_ty, i == 0));\n         }\n     }\n     // If we exit above loop, never found a local type.\n     debug!(\"orphan_check_trait_ref: no local type\");\n     Err(OrphanCheckErr::NonLocalInputType(non_local_spans))\n }\n \n-fn ty_is_non_local(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, in_crate: InCrate) -> Option<Vec<Ty<'tcx>>> {\n-    match ty_is_non_local_constructor(ty, in_crate) {\n-        Some(ty) => {\n-            if let Some(inner_tys) = fundamental_ty_inner_tys(tcx, ty) {\n-                let tys: Vec<_> = inner_tys\n-                    .filter_map(|ty| ty_is_non_local(tcx, ty, in_crate))\n-                    .flatten()\n-                    .collect();\n-                if tys.is_empty() { None } else { Some(tys) }\n-            } else {\n-                Some(vec![ty])\n+/// Returns a list of relevant non-local types for `ty`.\n+///\n+/// This is just `ty` itself unless `ty` is `#[fundamental]`,\n+/// in which case we recursively look into this type.\n+///\n+/// If `ty` is local itself, this method returns an empty `Vec`.\n+///\n+/// # Examples\n+///\n+/// - `u32` is not local, so this returns `[u32]`.\n+/// - for `Foo<u32>`, where `Foo` is a local type, this returns `[]`.\n+/// - `&mut u32` returns `[u32]`, as `&mut` is a fundamental type, similar to `Box`.\n+/// - `Box<Foo<u32>>` returns `[]`, as `Box` is a fundamental type and `Foo` is local.\n+fn contained_non_local_types(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, in_crate: InCrate) -> Vec<Ty<'tcx>> {\n+    if ty_is_local_constructor(ty, in_crate) {\n+        Vec::new()\n+    } else {\n+        match fundamental_ty_inner_tys(tcx, ty) {\n+            Some(inner_tys) => {\n+                inner_tys.flat_map(|ty| contained_non_local_types(tcx, ty, in_crate)).collect()\n             }\n+            None => vec![ty],\n         }\n-        None => None,\n     }\n }\n \n@@ -493,9 +501,8 @@ fn def_id_is_local(def_id: DefId, in_crate: InCrate) -> bool {\n     }\n }\n \n-// FIXME(eddyb) this can just return `bool` as it always returns `Some(ty)` or `None`.\n-fn ty_is_non_local_constructor(ty: Ty<'_>, in_crate: InCrate) -> Option<Ty<'_>> {\n-    debug!(\"ty_is_non_local_constructor({:?})\", ty);\n+fn ty_is_local_constructor(ty: Ty<'_>, in_crate: InCrate) -> bool {\n+    debug!(\"ty_is_local_constructor({:?})\", ty);\n \n     match ty.kind {\n         ty::Bool\n@@ -513,29 +520,17 @@ fn ty_is_non_local_constructor(ty: Ty<'_>, in_crate: InCrate) -> Option<Ty<'_>>\n         | ty::Never\n         | ty::Tuple(..)\n         | ty::Param(..)\n-        | ty::Projection(..) => Some(ty),\n+        | ty::Projection(..) => false,\n \n         ty::Placeholder(..) | ty::Bound(..) | ty::Infer(..) => match in_crate {\n-            InCrate::Local => Some(ty),\n+            InCrate::Local => false,\n             // The inference variable might be unified with a local\n             // type in that remote crate.\n-            InCrate::Remote => None,\n+            InCrate::Remote => true,\n         },\n \n-        ty::Adt(def, _) => {\n-            if def_id_is_local(def.did, in_crate) {\n-                None\n-            } else {\n-                Some(ty)\n-            }\n-        }\n-        ty::Foreign(did) => {\n-            if def_id_is_local(did, in_crate) {\n-                None\n-            } else {\n-                Some(ty)\n-            }\n-        }\n+        ty::Adt(def, _) => def_id_is_local(def.did, in_crate),\n+        ty::Foreign(did) => def_id_is_local(did, in_crate),\n         ty::Opaque(..) => {\n             // This merits some explanation.\n             // Normally, opaque types are not involed when performing\n@@ -553,7 +548,7 @@ fn ty_is_non_local_constructor(ty: Ty<'_>, in_crate: InCrate) -> Option<Ty<'_>>\n             // the underlying type *within the same crate*. When an\n             // opaque type is used from outside the module\n             // where it is declared, it should be impossible to observe\n-            // anyything about it other than the traits that it implements.\n+            // anything about it other than the traits that it implements.\n             //\n             // The alternative would be to look at the underlying type\n             // to determine whether or not the opaque type itself should\n@@ -562,18 +557,18 @@ fn ty_is_non_local_constructor(ty: Ty<'_>, in_crate: InCrate) -> Option<Ty<'_>>\n             // to a remote type. This would violate the rule that opaque\n             // types should be completely opaque apart from the traits\n             // that they implement, so we don't use this behavior.\n-            Some(ty)\n+            false\n         }\n \n         ty::Dynamic(ref tt, ..) => {\n             if let Some(principal) = tt.principal() {\n-                if def_id_is_local(principal.def_id(), in_crate) { None } else { Some(ty) }\n+                def_id_is_local(principal.def_id(), in_crate)\n             } else {\n-                Some(ty)\n+                false\n             }\n         }\n \n-        ty::Error(_) => None,\n+        ty::Error(_) => true,\n \n         ty::Closure(..) | ty::Generator(..) | ty::GeneratorWitness(..) => {\n             bug!(\"ty_is_local invoked on unexpected type: {:?}\", ty)"}, {"sha": "d0312d77a7c5d5867e5c027b76ae27957b910454", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -1291,6 +1291,16 @@ h4 > .important-traits {\n \n /* Media Queries */\n \n+@media (min-width: 701px) {\n+\t/* In case there is no documentation before a code block, we need to add some margin at the top\n+\tto prevent an overlay between the \"collapse toggle\" and the information tooltip.\n+\tHowever, it's needed needed with smaller screen width because the doc/code block is always put\n+\t\"one line\" below. */\n+\t.information:first-child > .tooltip {\n+\t\tmargin-top: 16px;\n+\t}\n+}\n+\n @media (max-width: 700px) {\n \tbody {\n \t\tpadding-top: 0px;"}, {"sha": "6f221da1168c63c5022837209d842423f625a0c9", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 173, "deletions": 181, "changes": 354, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -1,5 +1,5 @@\n use rustc_ast::ast;\n-use rustc_errors::Applicability;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_expand::base::SyntaxExtensionKind;\n use rustc_feature::UnstableFeatures;\n use rustc_hir as hir;\n@@ -45,7 +45,17 @@ pub fn collect_intra_doc_links(krate: Crate, cx: &DocContext<'_>) -> Crate {\n \n enum ErrorKind {\n     ResolutionFailure,\n-    AnchorFailure(&'static str),\n+    AnchorFailure(AnchorFailure),\n+}\n+\n+enum AnchorFailure {\n+    MultipleAnchors,\n+    Primitive,\n+    Variant,\n+    AssocConstant,\n+    AssocType,\n+    Field,\n+    Method,\n }\n \n struct LinkCollector<'a, 'tcx> {\n@@ -197,9 +207,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                     // Not a trait item; just return what we found.\n                     Res::PrimTy(..) => {\n                         if extra_fragment.is_some() {\n-                            return Err(ErrorKind::AnchorFailure(\n-                                \"primitive types cannot be followed by anchors\",\n-                            ));\n+                            return Err(ErrorKind::AnchorFailure(AnchorFailure::Primitive));\n                         }\n                         return Ok((res, Some(path_str.to_owned())));\n                     }\n@@ -209,9 +217,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                         if disambiguator == Some(\"type\") {\n                             if let Some(prim) = is_primitive(path_str, ns) {\n                                 if extra_fragment.is_some() {\n-                                    return Err(ErrorKind::AnchorFailure(\n-                                        \"primitive types cannot be followed by anchors\",\n-                                    ));\n+                                    return Err(ErrorKind::AnchorFailure(AnchorFailure::Primitive));\n                                 }\n                                 return Ok((prim, Some(path_str.to_owned())));\n                             }\n@@ -228,9 +234,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 }\n             } else if let Some(prim) = is_primitive(path_str, ns) {\n                 if extra_fragment.is_some() {\n-                    return Err(ErrorKind::AnchorFailure(\n-                        \"primitive types cannot be followed by anchors\",\n-                    ));\n+                    return Err(ErrorKind::AnchorFailure(AnchorFailure::Primitive));\n                 }\n                 return Ok((prim, Some(path_str.to_owned())));\n             } else {\n@@ -338,9 +342,9 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                         };\n                         if extra_fragment.is_some() {\n                             Err(ErrorKind::AnchorFailure(if item.kind == ty::AssocKind::Fn {\n-                                \"methods cannot be followed by anchors\"\n+                                AnchorFailure::Method\n                             } else {\n-                                \"associated constants cannot be followed by anchors\"\n+                                AnchorFailure::AssocConstant\n                             }))\n                         } else {\n                             Ok((ty_res, Some(format!(\"{}.{}\", out, item_name))))\n@@ -358,9 +362,9 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                                 } {\n                                     if extra_fragment.is_some() {\n                                         Err(ErrorKind::AnchorFailure(if def.is_enum() {\n-                                            \"enum variants cannot be followed by anchors\"\n+                                            AnchorFailure::Variant\n                                         } else {\n-                                            \"struct fields cannot be followed by anchors\"\n+                                            AnchorFailure::Field\n                                         }))\n                                     } else {\n                                         Ok((\n@@ -404,11 +408,11 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n \n                         if extra_fragment.is_some() {\n                             Err(ErrorKind::AnchorFailure(if item.kind == ty::AssocKind::Const {\n-                                \"associated constants cannot be followed by anchors\"\n+                                AnchorFailure::AssocConstant\n                             } else if item.kind == ty::AssocKind::Type {\n-                                \"associated types cannot be followed by anchors\"\n+                                AnchorFailure::AssocType\n                             } else {\n-                                \"methods cannot be followed by anchors\"\n+                                AnchorFailure::Method\n                             }))\n                         } else {\n                             Ok((ty_res, Some(format!(\"{}.{}\", kind, item_name))))\n@@ -559,16 +563,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n             let link = ori_link.replace(\"`\", \"\");\n             let parts = link.split('#').collect::<Vec<_>>();\n             let (link, extra_fragment) = if parts.len() > 2 {\n-                build_diagnostic(\n-                    cx,\n-                    &item,\n-                    &link,\n-                    &dox,\n-                    link_range,\n-                    \"has an issue with the link anchor.\",\n-                    \"only one `#` is allowed in a link\",\n-                    None,\n-                );\n+                anchor_failure(cx, &item, &link, &dox, link_range, AnchorFailure::MultipleAnchors);\n                 continue;\n             } else if parts.len() == 2 {\n                 if parts[0].trim().is_empty() {\n@@ -803,21 +798,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                         && (item.visibility == Visibility::Public)\n                         && !self.cx.render_options.document_private\n                     {\n-                        let item_name = item.name.as_deref().unwrap_or(\"<unknown>\");\n-                        let err_msg = format!(\n-                            \"public documentation for `{}` links to a private item\",\n-                            item_name\n-                        );\n-                        build_diagnostic(\n-                            cx,\n-                            &item,\n-                            path_str,\n-                            &dox,\n-                            link_range,\n-                            &err_msg,\n-                            \"this item is private\",\n-                            None,\n-                        );\n+                        privacy_error(cx, &item, &path_str, &dox, link_range);\n                         continue;\n                     }\n                 }\n@@ -851,24 +832,33 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n     }\n }\n \n-fn build_diagnostic(\n+/// Reports a diagnostic for an intra-doc link.\n+///\n+/// If no link range is provided, or the source span of the link cannot be determined, the span of\n+/// the entire documentation block is used for the lint. If a range is provided but the span\n+/// calculation fails, a note is added to the diagnostic pointing to the link in the markdown.\n+///\n+/// The `decorate` callback is invoked in all cases to allow further customization of the\n+/// diagnostic before emission. If the span of the link was able to be determined, the second\n+/// parameter of the callback will contain it, and the primary span of the diagnostic will be set\n+/// to it.\n+fn report_diagnostic(\n     cx: &DocContext<'_>,\n+    msg: &str,\n     item: &Item,\n-    path_str: &str,\n     dox: &str,\n     link_range: Option<Range<usize>>,\n-    err_msg: &str,\n-    short_err_msg: &str,\n-    help_msg: Option<&str>,\n+    decorate: impl FnOnce(&mut DiagnosticBuilder<'_>, Option<rustc_span::Span>),\n ) {\n     let hir_id = match cx.as_local_hir_id(item.def_id) {\n         Some(hir_id) => hir_id,\n         None => {\n             // If non-local, no need to check anything.\n-            info!(\"ignoring warning from parent crate: {}\", err_msg);\n+            info!(\"ignoring warning from parent crate: {}\", msg);\n             return;\n         }\n     };\n+\n     let attrs = &item.attrs;\n     let sp = span_of_attrs(attrs).unwrap_or(item.source.span());\n \n@@ -877,12 +867,15 @@ fn build_diagnostic(\n         hir_id,\n         sp,\n         |lint| {\n-            let mut diag = lint.build(&format!(\"`[{}]` {}\", path_str, err_msg));\n+            let mut diag = lint.build(msg);\n+\n+            let span = link_range\n+                .as_ref()\n+                .and_then(|range| super::source_span_for_markdown_range(cx, dox, range, attrs));\n+\n             if let Some(link_range) = link_range {\n-                if let Some(sp) = super::source_span_for_markdown_range(cx, dox, &link_range, attrs)\n-                {\n+                if let Some(sp) = span {\n                     diag.set_span(sp);\n-                    diag.span_label(sp, short_err_msg);\n                 } else {\n                     // blah blah blah\\nblah\\nblah [blah] blah blah\\nblah blah\n                     //                       ^     ~~~~\n@@ -902,36 +895,35 @@ fn build_diagnostic(\n                         found = link_range.len(),\n                     ));\n                 }\n-            };\n-            if let Some(help_msg) = help_msg {\n-                diag.help(help_msg);\n             }\n+\n+            decorate(&mut diag, span);\n+\n             diag.emit();\n         },\n     );\n }\n \n-/// Reports a resolution failure diagnostic.\n-///\n-/// If we cannot find the exact source span of the resolution failure, we use the span of the\n-/// documentation attributes themselves. This is a little heavy-handed, so we display the markdown\n-/// line containing the failure as a note as well.\n fn resolution_failure(\n     cx: &DocContext<'_>,\n     item: &Item,\n     path_str: &str,\n     dox: &str,\n     link_range: Option<Range<usize>>,\n ) {\n-    build_diagnostic(\n+    report_diagnostic(\n         cx,\n+        &format!(\"unresolved link to `{}`\", path_str),\n         item,\n-        path_str,\n         dox,\n         link_range,\n-        \"cannot be resolved, ignoring it.\",\n-        \"cannot be resolved, ignoring\",\n-        Some(\"to escape `[` and `]` characters, just add '\\\\' before them like `\\\\[` or `\\\\]`\"),\n+        |diag, sp| {\n+            if let Some(sp) = sp {\n+                diag.span_label(sp, \"unresolved link\");\n+            }\n+\n+            diag.help(r#\"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\"#);\n+        },\n     );\n }\n \n@@ -941,18 +933,39 @@ fn anchor_failure(\n     path_str: &str,\n     dox: &str,\n     link_range: Option<Range<usize>>,\n-    msg: &str,\n+    failure: AnchorFailure,\n ) {\n-    build_diagnostic(\n-        cx,\n-        item,\n-        path_str,\n-        dox,\n-        link_range,\n-        \"has an issue with the link anchor.\",\n-        msg,\n-        None,\n-    );\n+    let msg = match failure {\n+        AnchorFailure::MultipleAnchors => format!(\"`{}` contains multiple anchors\", path_str),\n+        AnchorFailure::Primitive\n+        | AnchorFailure::Variant\n+        | AnchorFailure::AssocConstant\n+        | AnchorFailure::AssocType\n+        | AnchorFailure::Field\n+        | AnchorFailure::Method => {\n+            let kind = match failure {\n+                AnchorFailure::Primitive => \"primitive type\",\n+                AnchorFailure::Variant => \"enum variant\",\n+                AnchorFailure::AssocConstant => \"associated constant\",\n+                AnchorFailure::AssocType => \"associated type\",\n+                AnchorFailure::Field => \"struct field\",\n+                AnchorFailure::Method => \"method\",\n+                AnchorFailure::MultipleAnchors => unreachable!(\"should be handled already\"),\n+            };\n+\n+            format!(\n+                \"`{}` contains an anchor, but links to {kind}s are already anchored\",\n+                path_str,\n+                kind = kind\n+            )\n+        }\n+    };\n+\n+    report_diagnostic(cx, &msg, item, dox, link_range, |diag, sp| {\n+        if let Some(sp) = sp {\n+            diag.span_label(sp, \"contains invalid anchor\");\n+        }\n+    });\n }\n \n fn ambiguity_error(\n@@ -963,121 +976,100 @@ fn ambiguity_error(\n     link_range: Option<Range<usize>>,\n     candidates: PerNS<Option<Res>>,\n ) {\n-    let hir_id = match cx.as_local_hir_id(item.def_id) {\n-        Some(hir_id) => hir_id,\n-        None => {\n-            // If non-local, no need to check anything.\n-            return;\n+    let mut msg = format!(\"`{}` is \", path_str);\n+\n+    let candidates = [TypeNS, ValueNS, MacroNS]\n+        .iter()\n+        .filter_map(|&ns| candidates[ns].map(|res| (res, ns)))\n+        .collect::<Vec<_>>();\n+    match candidates.as_slice() {\n+        [(first_def, _), (second_def, _)] => {\n+            msg += &format!(\n+                \"both {} {} and {} {}\",\n+                first_def.article(),\n+                first_def.descr(),\n+                second_def.article(),\n+                second_def.descr(),\n+            );\n         }\n-    };\n-    let attrs = &item.attrs;\n-    let sp = span_of_attrs(attrs).unwrap_or(item.source.span());\n-\n-    cx.tcx.struct_span_lint_hir(\n-        lint::builtin::INTRA_DOC_LINK_RESOLUTION_FAILURE,\n-        hir_id,\n-        sp,\n-        |lint| {\n-            let mut msg = format!(\"`{}` is \", path_str);\n-\n-            let candidates = [TypeNS, ValueNS, MacroNS]\n-                .iter()\n-                .filter_map(|&ns| candidates[ns].map(|res| (res, ns)))\n-                .collect::<Vec<_>>();\n-            match candidates.as_slice() {\n-                [(first_def, _), (second_def, _)] => {\n-                    msg += &format!(\n-                        \"both {} {} and {} {}\",\n-                        first_def.article(),\n-                        first_def.descr(),\n-                        second_def.article(),\n-                        second_def.descr(),\n-                    );\n-                }\n-                _ => {\n-                    let mut candidates = candidates.iter().peekable();\n-                    while let Some((res, _)) = candidates.next() {\n-                        if candidates.peek().is_some() {\n-                            msg += &format!(\"{} {}, \", res.article(), res.descr());\n-                        } else {\n-                            msg += &format!(\"and {} {}\", res.article(), res.descr());\n-                        }\n-                    }\n+        _ => {\n+            let mut candidates = candidates.iter().peekable();\n+            while let Some((res, _)) = candidates.next() {\n+                if candidates.peek().is_some() {\n+                    msg += &format!(\"{} {}, \", res.article(), res.descr());\n+                } else {\n+                    msg += &format!(\"and {} {}\", res.article(), res.descr());\n                 }\n             }\n+        }\n+    }\n \n-            let mut diag = lint.build(&msg);\n+    report_diagnostic(cx, &msg, item, dox, link_range.clone(), |diag, sp| {\n+        if let Some(sp) = sp {\n+            diag.span_label(sp, \"ambiguous link\");\n \n-            if let Some(link_range) = link_range {\n-                if let Some(sp) = super::source_span_for_markdown_range(cx, dox, &link_range, attrs)\n-                {\n-                    diag.set_span(sp);\n-                    diag.span_label(sp, \"ambiguous link\");\n+            let link_range = link_range.expect(\"must have a link range if we have a span\");\n \n-                    for (res, ns) in candidates {\n-                        let (action, mut suggestion) = match res {\n-                            Res::Def(DefKind::AssocFn | DefKind::Fn, _) => {\n-                                (\"add parentheses\", format!(\"{}()\", path_str))\n-                            }\n-                            Res::Def(DefKind::Macro(MacroKind::Bang), _) => {\n-                                (\"add an exclamation mark\", format!(\"{}!\", path_str))\n-                            }\n-                            _ => {\n-                                let type_ = match (res, ns) {\n-                                    (Res::Def(DefKind::Const, _), _) => \"const\",\n-                                    (Res::Def(DefKind::Static, _), _) => \"static\",\n-                                    (Res::Def(DefKind::Struct, _), _) => \"struct\",\n-                                    (Res::Def(DefKind::Enum, _), _) => \"enum\",\n-                                    (Res::Def(DefKind::Union, _), _) => \"union\",\n-                                    (Res::Def(DefKind::Trait, _), _) => \"trait\",\n-                                    (Res::Def(DefKind::Mod, _), _) => \"module\",\n-                                    (_, TypeNS) => \"type\",\n-                                    (_, ValueNS) => \"value\",\n-                                    (Res::Def(DefKind::Macro(MacroKind::Derive), _), MacroNS) => {\n-                                        \"derive\"\n-                                    }\n-                                    (_, MacroNS) => \"macro\",\n-                                };\n-\n-                                // FIXME: if this is an implied shortcut link, it's bad style to suggest `@`\n-                                (\"prefix with the item type\", format!(\"{}@{}\", type_, path_str))\n-                            }\n+            for (res, ns) in candidates {\n+                let (action, mut suggestion) = match res {\n+                    Res::Def(DefKind::AssocFn | DefKind::Fn, _) => {\n+                        (\"add parentheses\", format!(\"{}()\", path_str))\n+                    }\n+                    Res::Def(DefKind::Macro(MacroKind::Bang), _) => {\n+                        (\"add an exclamation mark\", format!(\"{}!\", path_str))\n+                    }\n+                    _ => {\n+                        let type_ = match (res, ns) {\n+                            (Res::Def(DefKind::Const, _), _) => \"const\",\n+                            (Res::Def(DefKind::Static, _), _) => \"static\",\n+                            (Res::Def(DefKind::Struct, _), _) => \"struct\",\n+                            (Res::Def(DefKind::Enum, _), _) => \"enum\",\n+                            (Res::Def(DefKind::Union, _), _) => \"union\",\n+                            (Res::Def(DefKind::Trait, _), _) => \"trait\",\n+                            (Res::Def(DefKind::Mod, _), _) => \"module\",\n+                            (_, TypeNS) => \"type\",\n+                            (_, ValueNS) => \"value\",\n+                            (Res::Def(DefKind::Macro(MacroKind::Derive), _), MacroNS) => \"derive\",\n+                            (_, MacroNS) => \"macro\",\n                         };\n \n-                        if dox.bytes().nth(link_range.start) == Some(b'`') {\n-                            suggestion = format!(\"`{}`\", suggestion);\n-                        }\n-\n-                        diag.span_suggestion(\n-                            sp,\n-                            &format!(\"to link to the {}, {}\", res.descr(), action),\n-                            suggestion,\n-                            Applicability::MaybeIncorrect,\n-                        );\n+                        // FIXME: if this is an implied shortcut link, it's bad style to suggest `@`\n+                        (\"prefix with the item type\", format!(\"{}@{}\", type_, path_str))\n                     }\n-                } else {\n-                    // blah blah blah\\nblah\\nblah [blah] blah blah\\nblah blah\n-                    //                       ^     ~~~~\n-                    //                       |     link_range\n-                    //                       last_new_line_offset\n-                    let last_new_line_offset =\n-                        dox[..link_range.start].rfind('\\n').map_or(0, |n| n + 1);\n-                    let line = dox[last_new_line_offset..].lines().next().unwrap_or(\"\");\n+                };\n \n-                    // Print the line containing the `link_range` and manually mark it with '^'s.\n-                    diag.note(&format!(\n-                        \"the link appears in this line:\\n\\n{line}\\n\\\n-                         {indicator: <before$}{indicator:^<found$}\",\n-                        line = line,\n-                        indicator = \"\",\n-                        before = link_range.start - last_new_line_offset,\n-                        found = link_range.len(),\n-                    ));\n+                if dox.bytes().nth(link_range.start) == Some(b'`') {\n+                    suggestion = format!(\"`{}`\", suggestion);\n                 }\n+\n+                // FIXME: Create a version of this suggestion for when we don't have the span.\n+                diag.span_suggestion(\n+                    sp,\n+                    &format!(\"to link to the {}, {}\", res.descr(), action),\n+                    suggestion,\n+                    Applicability::MaybeIncorrect,\n+                );\n             }\n-            diag.emit();\n-        },\n-    );\n+        }\n+    });\n+}\n+\n+fn privacy_error(\n+    cx: &DocContext<'_>,\n+    item: &Item,\n+    path_str: &str,\n+    dox: &str,\n+    link_range: Option<Range<usize>>,\n+) {\n+    let item_name = item.name.as_deref().unwrap_or(\"<unknown>\");\n+    let msg =\n+        format!(\"public documentation for `{}` links to private item `{}`\", item_name, path_str);\n+\n+    report_diagnostic(cx, &msg, item, dox, link_range, |diag, sp| {\n+        if let Some(sp) = sp {\n+            diag.span_label(sp, \"this item is private\");\n+        }\n+    });\n }\n \n /// Given an enum variant's res, return the res of its enum and the associated fragment.\n@@ -1089,7 +1081,7 @@ fn handle_variant(\n     use rustc_middle::ty::DefIdTree;\n \n     if extra_fragment.is_some() {\n-        return Err(ErrorKind::AnchorFailure(\"variants cannot be followed by anchors\"));\n+        return Err(ErrorKind::AnchorFailure(AnchorFailure::Variant));\n     }\n     let parent = if let Some(parent) = cx.tcx.parent(res.def_id()) {\n         parent"}, {"sha": "7c61b7809901f81c7f67d1d7c0b45ee5489fffe4", "filename": "src/test/codegen/abi-efiapi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -2,7 +2,7 @@\n \n // revisions:x86_64 i686 arm\n \n-// min-llvm-version 9.0\n+// min-llvm-version: 9.0\n \n //[x86_64] compile-flags: --target x86_64-unknown-uefi\n //[i686] compile-flags: --target i686-unknown-linux-musl"}, {"sha": "571a2654bcbfd2f6d7f6543479d009f6abe3cad7", "filename": "src/test/codegen/cfguard-checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Fcodegen%2Fcfguard-checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Fcodegen%2Fcfguard-checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcfguard-checks.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z control-flow-guard=checks\n+// compile-flags: -C control-flow-guard=checks\n // only-msvc\n \n #![crate_type = \"lib\"]"}, {"sha": "c3f8f4116819ce2bf420dce85a50b7c7926dc24c", "filename": "src/test/codegen/cfguard-disabled.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Fcodegen%2Fcfguard-disabled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Fcodegen%2Fcfguard-disabled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcfguard-disabled.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z control-flow-guard=no\n+// compile-flags: -C control-flow-guard=no\n // only-msvc\n \n #![crate_type = \"lib\"]"}, {"sha": "3847c3e81ed7a6d78f2e3e6b50741fb549c68431", "filename": "src/test/codegen/cfguard-nochecks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Fcodegen%2Fcfguard-nochecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Fcodegen%2Fcfguard-nochecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcfguard-nochecks.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z control-flow-guard=nochecks\n+// compile-flags: -C control-flow-guard=nochecks\n // only-msvc\n \n #![crate_type = \"lib\"]"}, {"sha": "6278a951e35f1565151946520f4919088e9b20eb", "filename": "src/test/codegen/cfguard-non-msvc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Fcodegen%2Fcfguard-non-msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Fcodegen%2Fcfguard-non-msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcfguard-non-msvc.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z control-flow-guard\n+// compile-flags: -C control-flow-guard\n // ignore-msvc\n \n #![crate_type = \"lib\"]"}, {"sha": "eba4a7469f9308d2ade0946fdaa1d916cc82e6e0", "filename": "src/test/codegen/force-unwind-tables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Fcodegen%2Fforce-unwind-tables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Fcodegen%2Fforce-unwind-tables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fforce-unwind-tables.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -1,4 +1,4 @@\n-// min-llvm-version 8.0\n+// min-llvm-version: 8.0\n // compile-flags: -C no-prepopulate-passes -C force-unwind-tables=y\n \n #![crate_type=\"lib\"]"}, {"sha": "a5d5942b539539861978d420ba2bd61630c7a591", "filename": "src/test/debuginfo/function-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Fdebuginfo%2Ffunction-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Fdebuginfo%2Ffunction-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-call.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -1,5 +1,5 @@\n // This test does not passed with gdb < 8.0. See #53497.\n-// min-gdb-version 8.0\n+// min-gdb-version: 8.0\n \n // compile-flags:-g\n "}, {"sha": "cbd2278f7e27c863f3dd5211e5022f82afc5f0a3", "filename": "src/test/debuginfo/pretty-huge-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Fdebuginfo%2Fpretty-huge-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Fdebuginfo%2Fpretty-huge-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-huge-vec.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -2,7 +2,7 @@\n // ignore-freebsd: gdb package too new\n // ignore-android: FIXME(#10381)\n // compile-flags:-g\n-// min-gdb-version 8.1\n+// min-gdb-version: 8.1\n // min-lldb-version: 310\n \n // === GDB TESTS ==================================================================================="}, {"sha": "a4fbff5725c97aa20bbf0694a219199d597384c4", "filename": "src/test/debuginfo/pretty-std-collections.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -6,7 +6,7 @@\n \n // The pretty printers being tested here require the patch from\n // https://sourceware.org/bugzilla/show_bug.cgi?id=21763\n-// min-gdb-version 8.1\n+// min-gdb-version: 8.1\n \n // min-lldb-version: 310\n "}, {"sha": "7ae82d522b09dc37dfe588b52b7da46a4d428501", "filename": "src/test/debuginfo/pretty-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -2,7 +2,7 @@\n // only-cdb // \"Temporarily\" ignored on GDB/LLDB due to debuginfo tests being disabled, see PR 47155\n // ignore-android: FIXME(#10381)\n // compile-flags:-g\n-// min-gdb-version 7.7\n+// min-gdb-version: 7.7\n // min-lldb-version: 310\n \n // === GDB TESTS ==================================================================================="}, {"sha": "61791f48f4db76683adde4dcbacbed0038a72015", "filename": "src/test/debuginfo/pretty-uninitialized-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Fdebuginfo%2Fpretty-uninitialized-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Fdebuginfo%2Fpretty-uninitialized-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-uninitialized-vec.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -2,7 +2,7 @@\n // ignore-freebsd: gdb package too new\n // ignore-android: FIXME(#10381)\n // compile-flags:-g\n-// min-gdb-version 8.1\n+// min-gdb-version: 8.1\n // min-lldb-version: 310\n \n // === GDB TESTS ==================================================================================="}, {"sha": "5830ef033d38990198300d15843d721b42b41d29", "filename": "src/test/run-make-fulldeps/c-link-to-rust-va-list-fn/checkrust.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Fcheckrust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Fcheckrust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Fcheckrust.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -91,3 +91,58 @@ pub unsafe extern \"C\" fn check_varargs_1(_: c_int, mut ap: ...) -> usize {\n pub unsafe extern \"C\" fn check_varargs_2(_: c_int, _ap: ...) -> usize {\n     0\n }\n+\n+#[no_mangle]\n+pub unsafe extern \"C\" fn check_varargs_3(_: c_int, mut ap: ...) -> usize {\n+    continue_if!(ap.arg::<c_int>() == 1);\n+    continue_if!(ap.arg::<c_int>() == 2);\n+    continue_if!(ap.arg::<c_int>() == 3);\n+    continue_if!(ap.arg::<c_int>() == 4);\n+    continue_if!(ap.arg::<c_int>() == 5);\n+    continue_if!(ap.arg::<c_int>() == 6);\n+    continue_if!(ap.arg::<c_int>() == 7);\n+    continue_if!(ap.arg::<c_int>() == 8);\n+    continue_if!(ap.arg::<c_int>() == 9);\n+    continue_if!(ap.arg::<c_int>() == 10);\n+    0\n+}\n+\n+#[no_mangle]\n+pub unsafe extern \"C\" fn check_varargs_4(_: c_double, mut ap: ...) -> usize {\n+    continue_if!(ap.arg::<c_double>() == 1.0);\n+    continue_if!(ap.arg::<c_double>() == 2.0);\n+    continue_if!(ap.arg::<c_double>() == 3.0);\n+    continue_if!(ap.arg::<c_double>() == 4.0);\n+    continue_if!(ap.arg::<c_double>() == 5.0);\n+    continue_if!(ap.arg::<c_double>() == 6.0);\n+    continue_if!(ap.arg::<c_double>() == 7.0);\n+    continue_if!(ap.arg::<c_double>() == 8.0);\n+    continue_if!(ap.arg::<c_double>() == 9.0);\n+    continue_if!(ap.arg::<c_double>() == 10.0);\n+    0\n+}\n+\n+#[no_mangle]\n+pub unsafe extern \"C\" fn check_varargs_5(_: c_int, mut ap: ...) -> usize {\n+    continue_if!(ap.arg::<c_double>() == 1.0);\n+    continue_if!(ap.arg::<c_int>() == 1);\n+    continue_if!(ap.arg::<c_double>() == 2.0);\n+    continue_if!(ap.arg::<c_int>() == 2);\n+    continue_if!(ap.arg::<c_double>() == 3.0);\n+    continue_if!(ap.arg::<c_int>() == 3);\n+    continue_if!(ap.arg::<c_double>() == 4.0);\n+    continue_if!(ap.arg::<c_int>() == 4);\n+    continue_if!(ap.arg::<c_int>() == 5);\n+    continue_if!(ap.arg::<c_double>() == 5.0);\n+    continue_if!(ap.arg::<c_int>() == 6);\n+    continue_if!(ap.arg::<c_double>() == 6.0);\n+    continue_if!(ap.arg::<c_int>() == 7);\n+    continue_if!(ap.arg::<c_double>() == 7.0);\n+    continue_if!(ap.arg::<c_int>() == 8);\n+    continue_if!(ap.arg::<c_double>() == 8.0);\n+    continue_if!(ap.arg::<c_int>() == 9);\n+    continue_if!(ap.arg::<c_double>() == 9.0);\n+    continue_if!(ap.arg::<c_int>() == 10);\n+    continue_if!(ap.arg::<c_double>() == 10.0);\n+    0\n+}"}, {"sha": "5bdb51680a6562ec25d03597146de4bdf4cbb417", "filename": "src/test/run-make-fulldeps/c-link-to-rust-va-list-fn/test.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Ftest.c?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -11,6 +11,9 @@ extern size_t check_list_copy_0(va_list ap);\n extern size_t check_varargs_0(int fixed, ...);\n extern size_t check_varargs_1(int fixed, ...);\n extern size_t check_varargs_2(int fixed, ...);\n+extern size_t check_varargs_3(int fixed, ...);\n+extern size_t check_varargs_4(double fixed, ...);\n+extern size_t check_varargs_5(int fixed, ...);\n \n int test_rust(size_t (*fn)(va_list), ...) {\n     size_t ret = 0;\n@@ -36,5 +39,12 @@ int main(int argc, char* argv[]) {\n \n     assert(check_varargs_2(0, \"All\", \"of\", \"these\", \"are\", \"ignored\", \".\") == 0);\n \n+    assert(check_varargs_3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) == 0);\n+\n+    assert(check_varargs_4(0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0) == 0);\n+\n+    assert(check_varargs_5(0, 1.0, 1, 2.0, 2, 3.0, 3, 4.0, 4, 5, 5.0, 6, 6.0, 7, 7.0, 8, 8.0,\n+                           9, 9.0, 10, 10.0) == 0);\n+\n     return 0;\n }"}, {"sha": "894518faa31686f810052fad43a2f3790da9c8e0", "filename": "src/test/rustdoc-ui/deny-intra-link-resolution-failure.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.stderr?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -1,15 +1,15 @@\n-error: `[v2]` cannot be resolved, ignoring it.\n+error: unresolved link to `v2`\n   --> $DIR/deny-intra-link-resolution-failure.rs:3:6\n    |\n LL | /// [v2]\n-   |      ^^ cannot be resolved, ignoring\n+   |      ^^ unresolved link\n    |\n note: the lint level is defined here\n   --> $DIR/deny-intra-link-resolution-failure.rs:1:9\n    |\n LL | #![deny(intra_doc_link_resolution_failure)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: aborting due to previous error\n "}, {"sha": "d2b2b90a4e50d69a7222f0e377c840ad8c302762", "filename": "src/test/rustdoc-ui/intra-doc-alias-ice.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.stderr?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -1,15 +1,15 @@\n-error: `[TypeAlias::hoge]` cannot be resolved, ignoring it.\n+error: unresolved link to `TypeAlias::hoge`\n   --> $DIR/intra-doc-alias-ice.rs:5:30\n    |\n LL | /// [broken cross-reference](TypeAlias::hoge)\n-   |                              ^^^^^^^^^^^^^^^ cannot be resolved, ignoring\n+   |                              ^^^^^^^^^^^^^^^ unresolved link\n    |\n note: the lint level is defined here\n   --> $DIR/intra-doc-alias-ice.rs:1:9\n    |\n LL | #![deny(intra_doc_link_resolution_failure)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: aborting due to previous error\n "}, {"sha": "95388003f84704a79b8f01637e386c0430987eb4", "filename": "src/test/rustdoc-ui/intra-link-span-ice-55723.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -7,7 +7,7 @@\n /// ## For example:\n ///\n /// \uff08arr[i]\uff09\n-//~^ ERROR `[i]` cannot be resolved, ignoring it.\n+//~^ ERROR `i`\n pub fn test_ice() {\n     unimplemented!();\n }"}, {"sha": "156e214a79ff05258fb811d0bbb3d7f1d6bc2555", "filename": "src/test/rustdoc-ui/intra-link-span-ice-55723.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.stderr?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -1,15 +1,15 @@\n-error: `[i]` cannot be resolved, ignoring it.\n+error: unresolved link to `i`\n   --> $DIR/intra-link-span-ice-55723.rs:9:10\n    |\n LL | /// \uff08arr[i]\uff09\n-   |           ^ cannot be resolved, ignoring\n+   |           ^ unresolved link\n    |\n note: the lint level is defined here\n   --> $DIR/intra-link-span-ice-55723.rs:1:9\n    |\n LL | #![deny(intra_doc_link_resolution_failure)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: aborting due to previous error\n "}, {"sha": "7e61bd725359a4c57422264bce630bc1244096d7", "filename": "src/test/rustdoc-ui/intra-links-anchors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Fintra-links-anchors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Fintra-links-anchors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-anchors.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -23,23 +23,23 @@ pub enum Enum {\n /// Like [Foo#hola].\n ///\n /// Or maybe [Foo::f#hola].\n-//~^ ERROR `[Foo::f#hola]` has an issue with the link anchor.\n+//~^ ERROR `Foo::f#hola` contains an anchor\n pub fn foo() {}\n \n /// Empty.\n ///\n /// Another anchor error: [hello#people#!].\n-//~^ ERROR `[hello#people#!]` has an issue with the link anchor.\n+//~^ ERROR `hello#people#!` contains multiple anchors\n pub fn bar() {}\n \n /// Empty?\n ///\n /// Damn enum's variants: [Enum::A#whatever].\n-//~^ ERROR `[Enum::A#whatever]` has an issue with the link anchor.\n+//~^ ERROR `Enum::A#whatever` contains an anchor\n pub fn enum_link() {}\n \n /// Primitives?\n ///\n /// [u32#hello]\n-//~^ ERROR `[u32#hello]` has an issue with the link anchor.\n+//~^ ERROR `u32#hello` contains an anchor\n pub fn x() {}"}, {"sha": "ef33d8f3e06fefbee4a4c1c0c3987ac6de8345e5", "filename": "src/test/rustdoc-ui/intra-links-anchors.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Fintra-links-anchors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Fintra-links-anchors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-anchors.stderr?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -1,32 +1,32 @@\n-error: `[Foo::f#hola]` has an issue with the link anchor.\n+error: `Foo::f#hola` contains an anchor, but links to struct fields are already anchored\n   --> $DIR/intra-links-anchors.rs:25:15\n    |\n LL | /// Or maybe [Foo::f#hola].\n-   |               ^^^^^^^^^^^ struct fields cannot be followed by anchors\n+   |               ^^^^^^^^^^^ contains invalid anchor\n    |\n note: the lint level is defined here\n   --> $DIR/intra-links-anchors.rs:1:9\n    |\n LL | #![deny(intra_doc_link_resolution_failure)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: `[hello#people#!]` has an issue with the link anchor.\n+error: `hello#people#!` contains multiple anchors\n   --> $DIR/intra-links-anchors.rs:31:28\n    |\n LL | /// Another anchor error: [hello#people#!].\n-   |                            ^^^^^^^^^^^^^^ only one `#` is allowed in a link\n+   |                            ^^^^^^^^^^^^^^ contains invalid anchor\n \n-error: `[Enum::A#whatever]` has an issue with the link anchor.\n+error: `Enum::A#whatever` contains an anchor, but links to enum variants are already anchored\n   --> $DIR/intra-links-anchors.rs:37:28\n    |\n LL | /// Damn enum's variants: [Enum::A#whatever].\n-   |                            ^^^^^^^^^^^^^^^^ variants cannot be followed by anchors\n+   |                            ^^^^^^^^^^^^^^^^ contains invalid anchor\n \n-error: `[u32#hello]` has an issue with the link anchor.\n+error: `u32#hello` contains an anchor, but links to primitive types are already anchored\n   --> $DIR/intra-links-anchors.rs:43:6\n    |\n LL | /// [u32#hello]\n-   |      ^^^^^^^^^ primitive types cannot be followed by anchors\n+   |      ^^^^^^^^^ contains invalid anchor\n \n error: aborting due to 4 previous errors\n "}, {"sha": "a124435b08a99940fdd6f20f54ae61ad0157c538", "filename": "src/test/rustdoc-ui/intra-links-private.public.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.public.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.public.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.public.stderr?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -1,4 +1,4 @@\n-warning: `[DontDocMe]` public documentation for `DocMe` links to a private item\n+warning: public documentation for `DocMe` links to private item `DontDocMe`\n   --> $DIR/intra-links-private.rs:6:11\n    |\n LL | /// docs [DontDocMe]"}, {"sha": "1b97f6e61bd2369df84cf09f229cafaebb9692db", "filename": "src/test/rustdoc-ui/intra-links-private.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -4,7 +4,7 @@\n #![cfg_attr(private, deny(intra_doc_link_resolution_failure))]\n \n /// docs [DontDocMe]\n-//[public]~^ WARNING `[DontDocMe]` public documentation for `DocMe` links to a private item\n+//[public]~^ WARNING public documentation for `DocMe` links to private item `DontDocMe`\n // FIXME: for [private] we should also make sure the link was actually generated\n pub struct DocMe;\n struct DontDocMe;"}, {"sha": "a19c33b53be09673b8f24197a2ab001812800f13", "filename": "src/test/rustdoc-ui/intra-links-warning-crlf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -6,21 +6,21 @@\n \n /// [error]\n pub struct A;\n-//~^^ WARNING `[error]` cannot be resolved\n+//~^^ WARNING `error`\n \n ///\n /// docs [error1]\n-//~^ WARNING `[error1]` cannot be resolved\n+//~^ WARNING `error1`\n \n /// docs [error2]\n ///\n pub struct B;\n-//~^^^ WARNING `[error2]` cannot be resolved\n+//~^^^ WARNING `error2`\n \n /**\n  * This is a multi-line comment.\n  *\n  * It also has an [error].\n  */\n pub struct C;\n-//~^^^ WARNING `[error]` cannot be resolved\n+//~^^^ WARNING `error`"}, {"sha": "bc31264c170eaf3bed48c3bd07eda0fdd4d891f5", "filename": "src/test/rustdoc-ui/intra-links-warning-crlf.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.stderr?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -1,35 +1,35 @@\n-warning: `[error]` cannot be resolved, ignoring it.\n+warning: unresolved link to `error`\n   --> $DIR/intra-links-warning-crlf.rs:7:6\n    |\n LL | /// [error]\n-   |      ^^^^^ cannot be resolved, ignoring\n+   |      ^^^^^ unresolved link\n    |\n    = note: `#[warn(intra_doc_link_resolution_failure)]` on by default\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[error1]` cannot be resolved, ignoring it.\n+warning: unresolved link to `error1`\n   --> $DIR/intra-links-warning-crlf.rs:12:11\n    |\n LL | /// docs [error1]\n-   |           ^^^^^^ cannot be resolved, ignoring\n+   |           ^^^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[error2]` cannot be resolved, ignoring it.\n+warning: unresolved link to `error2`\n   --> $DIR/intra-links-warning-crlf.rs:15:11\n    |\n LL | /// docs [error2]\n-   |           ^^^^^^ cannot be resolved, ignoring\n+   |           ^^^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[error]` cannot be resolved, ignoring it.\n+warning: unresolved link to `error`\n   --> $DIR/intra-links-warning-crlf.rs:23:20\n    |\n LL |  * It also has an [error].\n-   |                    ^^^^^ cannot be resolved, ignoring\n+   |                    ^^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: 4 warnings emitted\n "}, {"sha": "eab1f03480460b2d05d9c722a44aaa41085805bc", "filename": "src/test/rustdoc-ui/intra-links-warning.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -1,37 +1,37 @@\n // check-pass\n \n        //! Test with [Foo::baz], [Bar::foo], ...\n-//~^ WARNING `[Foo::baz]` cannot be resolved\n-//~| WARNING `[Bar::foo]` cannot be resolved\n+//~^ WARNING `Foo::baz`\n+//~| WARNING `Bar::foo`\n      //! , [Uniooon::X] and [Qux::Z].\n-//~^ WARNING `[Uniooon::X]` cannot be resolved\n-//~| WARNING `[Qux::Z]` cannot be resolved\n+//~^ WARNING `Uniooon::X`\n+//~| WARNING `Qux::Z`\n        //!\n       //! , [Uniooon::X] and [Qux::Z].\n-//~^ WARNING `[Uniooon::X]` cannot be resolved\n-//~| WARNING `[Qux::Z]` cannot be resolved\n+//~^ WARNING `Uniooon::X`\n+//~| WARNING `Qux::Z`\n \n        /// [Qux:Y]\n-//~^ WARNING `[Qux:Y]` cannot be resolved\n+//~^ WARNING `Qux:Y`\n pub struct Foo {\n     pub bar: usize,\n }\n \n /// Foo\n-/// bar [BarA] bar //~ WARNING `[BarA]` cannot be resolved\n+/// bar [BarA] bar //~ WARNING `BarA`\n /// baz\n pub fn a() {}\n \n /**\n  * Foo\n- * bar [BarB] bar //~ WARNING `[BarB]` cannot be resolved\n+ * bar [BarB] bar //~ WARNING `BarB`\n  * baz\n  */\n pub fn b() {}\n \n /** Foo\n \n-bar [BarC] bar //~ WARNING `[BarC]` cannot be resolved\n+bar [BarC] bar //~ WARNING `BarC`\n baz\n \n     let bar_c_1 = 0;\n@@ -42,43 +42,43 @@ baz\n */\n pub fn c() {}\n \n-#[doc = \"Foo\\nbar [BarD] bar\\nbaz\"] //~ WARNING `[BarD]` cannot be resolved\n+#[doc = \"Foo\\nbar [BarD] bar\\nbaz\"] //~ WARNING `BarD`\n pub fn d() {}\n \n macro_rules! f {\n     ($f:expr) => {\n-        #[doc = $f] //~ WARNING `[BarF]` cannot be resolved\n+        #[doc = $f] //~ WARNING `BarF`\n         pub fn f() {}\n     }\n }\n f!(\"Foo\\nbar [BarF] bar\\nbaz\");\n \n /** # for example,\n  *\n- * time to introduce a link [error]*/ //~ WARNING `[error]` cannot be resolved\n+ * time to introduce a link [error]*/ //~ WARNING `error`\n pub struct A;\n \n /**\n  * # for example,\n  *\n- * time to introduce a link [error] //~ WARNING `[error]` cannot be resolved\n+ * time to introduce a link [error] //~ WARNING `error`\n  */\n pub struct B;\n \n-#[doc = \"single line [error]\"] //~ WARNING `[error]` cannot be resolved\n+#[doc = \"single line [error]\"] //~ WARNING `error`\n pub struct C;\n \n-#[doc = \"single line with \\\"escaping\\\" [error]\"] //~ WARNING `[error]` cannot be resolved\n+#[doc = \"single line with \\\"escaping\\\" [error]\"] //~ WARNING `error`\n pub struct D;\n \n-/// Item docs. //~ WARNING `[error]` cannot be resolved\n+/// Item docs. //~ WARNING `error`\n #[doc=\"Hello there!\"]\n /// [error]\n pub struct E;\n \n ///\n-/// docs [error1] //~ WARNING `[error1]` cannot be resolved\n+/// docs [error1] //~ WARNING `error1`\n \n-/// docs [error2] //~ WARNING `[error2]` cannot be resolved\n+/// docs [error2] //~ WARNING `error2`\n ///\n pub struct F;"}, {"sha": "81931399c240a87f29cfa8a5b7aaf658be4c95f9", "filename": "src/test/rustdoc-ui/intra-links-warning.stderr", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -1,77 +1,77 @@\n-warning: `[Foo::baz]` cannot be resolved, ignoring it.\n+warning: unresolved link to `Foo::baz`\n   --> $DIR/intra-links-warning.rs:3:23\n    |\n LL |        //! Test with [Foo::baz], [Bar::foo], ...\n-   |                       ^^^^^^^^ cannot be resolved, ignoring\n+   |                       ^^^^^^^^ unresolved link\n    |\n    = note: `#[warn(intra_doc_link_resolution_failure)]` on by default\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[Bar::foo]` cannot be resolved, ignoring it.\n+warning: unresolved link to `Bar::foo`\n   --> $DIR/intra-links-warning.rs:3:35\n    |\n LL |        //! Test with [Foo::baz], [Bar::foo], ...\n-   |                                   ^^^^^^^^ cannot be resolved, ignoring\n+   |                                   ^^^^^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[Uniooon::X]` cannot be resolved, ignoring it.\n+warning: unresolved link to `Uniooon::X`\n   --> $DIR/intra-links-warning.rs:6:13\n    |\n LL |      //! , [Uniooon::X] and [Qux::Z].\n-   |             ^^^^^^^^^^ cannot be resolved, ignoring\n+   |             ^^^^^^^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[Qux::Z]` cannot be resolved, ignoring it.\n+warning: unresolved link to `Qux::Z`\n   --> $DIR/intra-links-warning.rs:6:30\n    |\n LL |      //! , [Uniooon::X] and [Qux::Z].\n-   |                              ^^^^^^ cannot be resolved, ignoring\n+   |                              ^^^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[Uniooon::X]` cannot be resolved, ignoring it.\n+warning: unresolved link to `Uniooon::X`\n   --> $DIR/intra-links-warning.rs:10:14\n    |\n LL |       //! , [Uniooon::X] and [Qux::Z].\n-   |              ^^^^^^^^^^ cannot be resolved, ignoring\n+   |              ^^^^^^^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[Qux::Z]` cannot be resolved, ignoring it.\n+warning: unresolved link to `Qux::Z`\n   --> $DIR/intra-links-warning.rs:10:31\n    |\n LL |       //! , [Uniooon::X] and [Qux::Z].\n-   |                               ^^^^^^ cannot be resolved, ignoring\n+   |                               ^^^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[Qux:Y]` cannot be resolved, ignoring it.\n+warning: unresolved link to `Qux:Y`\n   --> $DIR/intra-links-warning.rs:14:13\n    |\n LL |        /// [Qux:Y]\n-   |             ^^^^^ cannot be resolved, ignoring\n+   |             ^^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[error]` cannot be resolved, ignoring it.\n+warning: unresolved link to `error`\n   --> $DIR/intra-links-warning.rs:58:30\n    |\n LL |  * time to introduce a link [error]*/\n-   |                              ^^^^^ cannot be resolved, ignoring\n+   |                              ^^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[error]` cannot be resolved, ignoring it.\n+warning: unresolved link to `error`\n   --> $DIR/intra-links-warning.rs:64:30\n    |\n LL |  * time to introduce a link [error]\n-   |                              ^^^^^ cannot be resolved, ignoring\n+   |                              ^^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[error]` cannot be resolved, ignoring it.\n+warning: unresolved link to `error`\n   --> $DIR/intra-links-warning.rs:68:1\n    |\n LL | #[doc = \"single line [error]\"]\n@@ -81,9 +81,9 @@ LL | #[doc = \"single line [error]\"]\n            \n            single line [error]\n                         ^^^^^\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[error]` cannot be resolved, ignoring it.\n+warning: unresolved link to `error`\n   --> $DIR/intra-links-warning.rs:71:1\n    |\n LL | #[doc = \"single line with \\\"escaping\\\" [error]\"]\n@@ -93,9 +93,9 @@ LL | #[doc = \"single line with \\\"escaping\\\" [error]\"]\n            \n            single line with \"escaping\" [error]\n                                         ^^^^^\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[error]` cannot be resolved, ignoring it.\n+warning: unresolved link to `error`\n   --> $DIR/intra-links-warning.rs:74:1\n    |\n LL | / /// Item docs.\n@@ -107,49 +107,49 @@ LL | | /// [error]\n            \n            [error]\n             ^^^^^\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[error1]` cannot be resolved, ignoring it.\n+warning: unresolved link to `error1`\n   --> $DIR/intra-links-warning.rs:80:11\n    |\n LL | /// docs [error1]\n-   |           ^^^^^^ cannot be resolved, ignoring\n+   |           ^^^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[error2]` cannot be resolved, ignoring it.\n+warning: unresolved link to `error2`\n   --> $DIR/intra-links-warning.rs:82:11\n    |\n LL | /// docs [error2]\n-   |           ^^^^^^ cannot be resolved, ignoring\n+   |           ^^^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[BarA]` cannot be resolved, ignoring it.\n+warning: unresolved link to `BarA`\n   --> $DIR/intra-links-warning.rs:21:10\n    |\n LL | /// bar [BarA] bar\n-   |          ^^^^ cannot be resolved, ignoring\n+   |          ^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[BarB]` cannot be resolved, ignoring it.\n+warning: unresolved link to `BarB`\n   --> $DIR/intra-links-warning.rs:27:9\n    |\n LL |  * bar [BarB] bar\n-   |         ^^^^ cannot be resolved, ignoring\n+   |         ^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[BarC]` cannot be resolved, ignoring it.\n+warning: unresolved link to `BarC`\n   --> $DIR/intra-links-warning.rs:34:6\n    |\n LL | bar [BarC] bar\n-   |      ^^^^ cannot be resolved, ignoring\n+   |      ^^^^ unresolved link\n    |\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[BarD]` cannot be resolved, ignoring it.\n+warning: unresolved link to `BarD`\n   --> $DIR/intra-links-warning.rs:45:1\n    |\n LL | #[doc = \"Foo\\nbar [BarD] bar\\nbaz\"]\n@@ -159,9 +159,9 @@ LL | #[doc = \"Foo\\nbar [BarD] bar\\nbaz\"]\n            \n            bar [BarD] bar\n                 ^^^^\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-warning: `[BarF]` cannot be resolved, ignoring it.\n+warning: unresolved link to `BarF`\n   --> $DIR/intra-links-warning.rs:50:9\n    |\n LL |         #[doc = $f]\n@@ -174,7 +174,7 @@ LL | f!(\"Foo\\nbar [BarF] bar\\nbaz\");\n            \n            bar [BarF] bar\n                 ^^^^\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n    = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: 19 warnings emitted"}, {"sha": "3c41f7e63e637386cad7cb9c0107572fff2d1054", "filename": "src/test/rustdoc-ui/issue-74134.public.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Fissue-74134.public.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Fissue-74134.public.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-74134.public.stderr?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -1,4 +1,4 @@\n-warning: `[PrivateType]` public documentation for `public_item` links to a private item\n+warning: public documentation for `public_item` links to private item `PrivateType`\n   --> $DIR/issue-74134.rs:19:10\n    |\n LL |     /// [`PrivateType`]"}, {"sha": "fe484b43fb6fce0726ed17097de87f6a4a3f9d83", "filename": "src/test/rustdoc-ui/issue-74134.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Fissue-74134.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Fissue-74134.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-74134.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -17,7 +17,7 @@ pub struct PublicType;\n pub struct Public {\n     /// [`PublicType`]\n     /// [`PrivateType`]\n-    //[public]~^ WARNING public documentation for `public_item` links to a private\n+    //[public]~^ WARNING public documentation for `public_item` links to private item `PrivateType`\n     pub public_item: u32,\n \n     /// [`PublicType`]"}, {"sha": "e58c8b12f68cb8550ef9bd0c43bbe40f54554175", "filename": "src/test/rustdoc-ui/lint-group.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Flint-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Flint-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-group.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -11,7 +11,7 @@\n /// ```\n /// println!(\"sup\");\n /// ```\n-pub fn link_error() {} //~^^^^^ ERROR cannot be resolved, ignoring it\n+pub fn link_error() {} //~^^^^^ ERROR unresolved link to `error`\n \n /// wait, this doesn't have a doctest?\n pub fn no_doctest() {} //~^ ERROR missing code example in this documentation"}, {"sha": "14d72e9aad3ba8cfaa9a21db2ab5dd41fccc9569", "filename": "src/test/rustdoc-ui/lint-group.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -15,19 +15,19 @@ LL | #![deny(rustdoc)]\n    |         ^^^^^^^\n    = note: `#[deny(private_doc_tests)]` implied by `#[deny(rustdoc)]`\n \n-error: `[error]` cannot be resolved, ignoring it.\n+error: unresolved link to `error`\n   --> $DIR/lint-group.rs:9:29\n    |\n LL | /// what up, let's make an [error]\n-   |                             ^^^^^ cannot be resolved, ignoring\n+   |                             ^^^^^ unresolved link\n    |\n note: the lint level is defined here\n   --> $DIR/lint-group.rs:7:9\n    |\n LL | #![deny(rustdoc)]\n    |         ^^^^^^^\n    = note: `#[deny(intra_doc_link_resolution_failure)]` implied by `#[deny(rustdoc)]`\n-   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: missing code example in this documentation\n   --> $DIR/lint-group.rs:16:1"}, {"sha": "3c4f9a1f5ee2c3c0a433022517176f4abc0b7c56", "filename": "src/test/ui/cfguard-run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Fui%2Fcfguard-run.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Fui%2Fcfguard-run.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfguard-run.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// compile-flags: -Z control-flow-guard\n+// compile-flags: -C control-flow-guard\n \n pub fn main() {\n     println!(\"hello, world\");"}, {"sha": "9439df266d59bbe6c7da7b1d0a822e3462f55917", "filename": "src/test/ui/sanitize/new-llvm-pass-manager-thin-lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Fui%2Fsanitize%2Fnew-llvm-pass-manager-thin-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftest%2Fui%2Fsanitize%2Fnew-llvm-pass-manager-thin-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fnew-llvm-pass-manager-thin-lto.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -2,7 +2,7 @@\n // being run when compiling with new LLVM pass manager and ThinLTO.\n // Note: The issue occurred only on non-zero opt-level.\n //\n-// min-llvm-version 9.0\n+// min-llvm-version: 9.0\n // needs-sanitizer-support\n // needs-sanitizer-address\n //"}, {"sha": "9269a63b41aab9d29f3904c534b6538e213cd4bc", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -271,13 +271,13 @@ pub struct Config {\n     pub gdb_native_rust: bool,\n \n     /// Version of LLDB\n-    pub lldb_version: Option<String>,\n+    pub lldb_version: Option<u32>,\n \n     /// Whether LLDB has native rust support\n     pub lldb_native_rust: bool,\n \n     /// Version of LLVM\n-    pub llvm_version: Option<String>,\n+    pub llvm_version: Option<u32>,\n \n     /// Is LLVM a system LLVM\n     pub system_llvm: bool,"}, {"sha": "2ab764eb9207c4fc96680aa20e99a1caac67e39d", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 88, "deletions": 105, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -132,72 +132,46 @@ impl EarlyProps {\n \n         fn ignore_gdb(config: &Config, line: &str) -> bool {\n             if let Some(actual_version) = config.gdb_version {\n-                if line.starts_with(\"min-gdb-version\") {\n-                    let (start_ver, end_ver) = extract_gdb_version_range(line);\n+                if let Some(rest) = line.strip_prefix(\"min-gdb-version:\").map(str::trim) {\n+                    let (start_ver, end_ver) = extract_version_range(rest, extract_gdb_version)\n+                        .unwrap_or_else(|| {\n+                            panic!(\"couldn't parse version range: {:?}\", rest);\n+                        });\n \n                     if start_ver != end_ver {\n                         panic!(\"Expected single GDB version\")\n                     }\n                     // Ignore if actual version is smaller the minimum required\n                     // version\n-                    actual_version < start_ver\n-                } else if line.starts_with(\"ignore-gdb-version\") {\n-                    let (min_version, max_version) = extract_gdb_version_range(line);\n+                    return actual_version < start_ver;\n+                } else if let Some(rest) = line.strip_prefix(\"ignore-gdb-version:\").map(str::trim) {\n+                    let (min_version, max_version) =\n+                        extract_version_range(rest, extract_gdb_version).unwrap_or_else(|| {\n+                            panic!(\"couldn't parse version range: {:?}\", rest);\n+                        });\n \n                     if max_version < min_version {\n                         panic!(\"Malformed GDB version range: max < min\")\n                     }\n \n-                    actual_version >= min_version && actual_version <= max_version\n-                } else {\n-                    false\n-                }\n-            } else {\n-                false\n-            }\n-        }\n-\n-        // Takes a directive of the form \"ignore-gdb-version <version1> [- <version2>]\",\n-        // returns the numeric representation of <version1> and <version2> as\n-        // tuple: (<version1> as u32, <version2> as u32)\n-        // If the <version2> part is omitted, the second component of the tuple\n-        // is the same as <version1>.\n-        fn extract_gdb_version_range(line: &str) -> (u32, u32) {\n-            const ERROR_MESSAGE: &'static str = \"Malformed GDB version directive\";\n-\n-            let range_components = line\n-                .split(&[' ', '-'][..])\n-                .filter(|word| !word.is_empty())\n-                .map(extract_gdb_version)\n-                .skip_while(Option::is_none)\n-                .take(3) // 3 or more = invalid, so take at most 3.\n-                .collect::<Vec<Option<u32>>>();\n-\n-            match range_components.len() {\n-                1 => {\n-                    let v = range_components[0].unwrap();\n-                    (v, v)\n-                }\n-                2 => {\n-                    let v_min = range_components[0].unwrap();\n-                    let v_max = range_components[1].expect(ERROR_MESSAGE);\n-                    (v_min, v_max)\n+                    return actual_version >= min_version && actual_version <= max_version;\n                 }\n-                _ => panic!(ERROR_MESSAGE),\n             }\n+            false\n         }\n \n         fn ignore_lldb(config: &Config, line: &str) -> bool {\n-            if let Some(ref actual_version) = config.lldb_version {\n-                if line.starts_with(\"min-lldb-version\") {\n-                    let min_version = line\n-                        .trim_end()\n-                        .rsplit(' ')\n-                        .next()\n-                        .expect(\"Malformed lldb version directive\");\n+            if let Some(actual_version) = config.lldb_version {\n+                if let Some(min_version) = line.strip_prefix(\"min-lldb-version:\").map(str::trim) {\n+                    let min_version = min_version.parse().unwrap_or_else(|e| {\n+                        panic!(\n+                            \"Unexpected format of LLDB version string: {}\\n{:?}\",\n+                            min_version, e\n+                        );\n+                    });\n                     // Ignore if actual version is smaller the minimum required\n                     // version\n-                    lldb_version_to_int(actual_version) < lldb_version_to_int(min_version)\n+                    actual_version < min_version\n                 } else if line.starts_with(\"rust-lldb\") && !config.lldb_native_rust {\n                     true\n                 } else {\n@@ -212,69 +186,38 @@ impl EarlyProps {\n             if config.system_llvm && line.starts_with(\"no-system-llvm\") {\n                 return true;\n             }\n-            if let Some(ref actual_version) = config.llvm_version {\n-                let actual_version = version_to_int(actual_version);\n-                if line.starts_with(\"min-llvm-version\") {\n-                    let min_version = line\n-                        .trim_end()\n-                        .rsplit(' ')\n-                        .next()\n-                        .expect(\"Malformed llvm version directive\");\n+            if let Some(actual_version) = config.llvm_version {\n+                if let Some(rest) = line.strip_prefix(\"min-llvm-version:\").map(str::trim) {\n+                    let min_version = extract_llvm_version(rest).unwrap();\n                     // Ignore if actual version is smaller the minimum required\n                     // version\n-                    actual_version < version_to_int(min_version)\n-                } else if line.starts_with(\"min-system-llvm-version\") {\n-                    let min_version = line\n-                        .trim_end()\n-                        .rsplit(' ')\n-                        .next()\n-                        .expect(\"Malformed llvm version directive\");\n+                    actual_version < min_version\n+                } else if let Some(rest) =\n+                    line.strip_prefix(\"min-system-llvm-version:\").map(str::trim)\n+                {\n+                    let min_version = extract_llvm_version(rest).unwrap();\n                     // Ignore if using system LLVM and actual version\n                     // is smaller the minimum required version\n-                    config.system_llvm && actual_version < version_to_int(min_version)\n-                } else if line.starts_with(\"ignore-llvm-version\") {\n-                    // Syntax is: \"ignore-llvm-version <version1> [- <version2>]\"\n-                    let range_components = line\n-                        .split(' ')\n-                        .skip(1) // Skip the directive.\n-                        .map(|s| s.trim())\n-                        .filter(|word| !word.is_empty() && word != &\"-\")\n-                        .take(3) // 3 or more = invalid, so take at most 3.\n-                        .collect::<Vec<&str>>();\n-                    match range_components.len() {\n-                        1 => actual_version == version_to_int(range_components[0]),\n-                        2 => {\n-                            let v_min = version_to_int(range_components[0]);\n-                            let v_max = version_to_int(range_components[1]);\n-                            if v_max < v_min {\n-                                panic!(\"Malformed LLVM version range: max < min\")\n-                            }\n-                            // Ignore if version lies inside of range.\n-                            actual_version >= v_min && actual_version <= v_max\n-                        }\n-                        _ => panic!(\"Malformed LLVM version directive\"),\n+                    config.system_llvm && actual_version < min_version\n+                } else if let Some(rest) = line.strip_prefix(\"ignore-llvm-version:\").map(str::trim)\n+                {\n+                    // Syntax is: \"ignore-llvm-version: <version1> [- <version2>]\"\n+                    let (v_min, v_max) = extract_version_range(rest, extract_llvm_version)\n+                        .unwrap_or_else(|| {\n+                            panic!(\"couldn't parse version range: {:?}\", rest);\n+                        });\n+                    if v_max < v_min {\n+                        panic!(\"Malformed LLVM version range: max < min\")\n                     }\n+                    // Ignore if version lies inside of range.\n+                    actual_version >= v_min && actual_version <= v_max\n                 } else {\n                     false\n                 }\n             } else {\n                 false\n             }\n         }\n-\n-        fn version_to_int(version: &str) -> u32 {\n-            let version_without_suffix = version.trim_end_matches(\"git\").split('-').next().unwrap();\n-            let components: Vec<u32> = version_without_suffix\n-                .split('.')\n-                .map(|s| s.parse().expect(\"Malformed version component\"))\n-                .collect();\n-            match components.len() {\n-                1 => components[0] * 10000,\n-                2 => components[0] * 10000 + components[1] * 100,\n-                3 => components[0] * 10000 + components[1] * 100 + components[2],\n-                _ => panic!(\"Malformed version\"),\n-            }\n-        }\n     }\n }\n \n@@ -944,12 +887,6 @@ impl Config {\n     }\n }\n \n-pub fn lldb_version_to_int(version_string: &str) -> isize {\n-    let error_string =\n-        format!(\"Encountered LLDB version string with unexpected format: {}\", version_string);\n-    version_string.parse().expect(&error_string)\n-}\n-\n fn expand_variables(mut value: String, config: &Config) -> String {\n     const CWD: &'static str = \"{{cwd}}\";\n     const SRC_BASE: &'static str = \"{{src-base}}\";\n@@ -990,3 +927,49 @@ fn parse_normalization_string(line: &mut &str) -> Option<String> {\n     *line = &line[end + 1..];\n     Some(result)\n }\n+\n+pub fn extract_llvm_version(version: &str) -> Option<u32> {\n+    let version_without_suffix = version.trim_end_matches(\"git\").split('-').next().unwrap();\n+    let components: Vec<u32> = version_without_suffix\n+        .split('.')\n+        .map(|s| s.parse().expect(\"Malformed version component\"))\n+        .collect();\n+    let version = match *components {\n+        [a] => a * 10_000,\n+        [a, b] => a * 10_000 + b * 100,\n+        [a, b, c] => a * 10_000 + b * 100 + c,\n+        _ => panic!(\"Malformed version\"),\n+    };\n+    Some(version)\n+}\n+\n+// Takes a directive of the form \"<version1> [- <version2>]\",\n+// returns the numeric representation of <version1> and <version2> as\n+// tuple: (<version1> as u32, <version2> as u32)\n+// If the <version2> part is omitted, the second component of the tuple\n+// is the same as <version1>.\n+fn extract_version_range<F>(line: &str, parse: F) -> Option<(u32, u32)>\n+where\n+    F: Fn(&str) -> Option<u32>,\n+{\n+    let mut splits = line.splitn(2, \"- \").map(str::trim);\n+    let min = splits.next().unwrap();\n+    if min.ends_with('-') {\n+        return None;\n+    }\n+\n+    let max = splits.next();\n+\n+    if min.is_empty() {\n+        return None;\n+    }\n+\n+    let min = parse(min)?;\n+    let max = match max {\n+        Some(max) if max.is_empty() => return None,\n+        Some(max) => parse(max)?,\n+        _ => min,\n+    };\n+\n+    Some((min, max))\n+}"}, {"sha": "1f82b137ee6cf1fb312375882c9fbc4e64678157", "filename": "src/tools/compiletest/src/header/tests.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -119,17 +119,17 @@ fn no_system_llvm() {\n fn llvm_version() {\n     let mut config = config();\n \n-    config.llvm_version = Some(\"8.1.2-rust\".to_owned());\n-    assert!(parse_rs(&config, \"// min-llvm-version 9.0\").ignore);\n+    config.llvm_version = Some(80102);\n+    assert!(parse_rs(&config, \"// min-llvm-version: 9.0\").ignore);\n \n-    config.llvm_version = Some(\"9.0.1-rust-1.43.0-dev\".to_owned());\n-    assert!(parse_rs(&config, \"// min-llvm-version 9.2\").ignore);\n+    config.llvm_version = Some(90001);\n+    assert!(parse_rs(&config, \"// min-llvm-version: 9.2\").ignore);\n \n-    config.llvm_version = Some(\"9.3.1-rust-1.43.0-dev\".to_owned());\n-    assert!(!parse_rs(&config, \"// min-llvm-version 9.2\").ignore);\n+    config.llvm_version = Some(90301);\n+    assert!(!parse_rs(&config, \"// min-llvm-version: 9.2\").ignore);\n \n-    config.llvm_version = Some(\"10.0.0-rust\".to_owned());\n-    assert!(!parse_rs(&config, \"// min-llvm-version 9.0\").ignore);\n+    config.llvm_version = Some(100000);\n+    assert!(!parse_rs(&config, \"// min-llvm-version: 9.0\").ignore);\n }\n \n #[test]\n@@ -220,3 +220,18 @@ fn sanitizers() {\n     assert!(parse_rs(&config, \"// needs-sanitizer-memory\").ignore);\n     assert!(parse_rs(&config, \"// needs-sanitizer-thread\").ignore);\n }\n+\n+#[test]\n+fn test_extract_version_range() {\n+    use super::{extract_llvm_version, extract_version_range};\n+\n+    assert_eq!(extract_version_range(\"1.2.3 - 4.5.6\", extract_llvm_version), Some((10203, 40506)));\n+    assert_eq!(extract_version_range(\"0   - 4.5.6\", extract_llvm_version), Some((0, 40506)));\n+    assert_eq!(extract_version_range(\"1.2.3 -\", extract_llvm_version), None);\n+    assert_eq!(extract_version_range(\"1.2.3 - \", extract_llvm_version), None);\n+    assert_eq!(extract_version_range(\"- 4.5.6\", extract_llvm_version), None);\n+    assert_eq!(extract_version_range(\"-\", extract_llvm_version), None);\n+    assert_eq!(extract_version_range(\" - 4.5.6\", extract_llvm_version), None);\n+    assert_eq!(extract_version_range(\"   - 4.5.6\", extract_llvm_version), None);\n+    assert_eq!(extract_version_range(\"0  -\", extract_llvm_version), None);\n+}"}, {"sha": "bf3510ea0894bfeb74b01b7de1a5fb731dbdc61d", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 66, "deletions": 129, "changes": 195, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -166,14 +166,20 @@ pub fn parse_config(args: Vec<String>) -> Config {\n     let cdb = analyze_cdb(matches.opt_str(\"cdb\"), &target);\n     let (gdb, gdb_version, gdb_native_rust) =\n         analyze_gdb(matches.opt_str(\"gdb\"), &target, &android_cross_path);\n-    let (lldb_version, lldb_native_rust) = extract_lldb_version(matches.opt_str(\"lldb-version\"));\n-\n-    let color = match matches.opt_str(\"color\").as_ref().map(|x| &**x) {\n+    let (lldb_version, lldb_native_rust) = matches\n+        .opt_str(\"lldb-version\")\n+        .as_deref()\n+        .and_then(extract_lldb_version)\n+        .map(|(v, b)| (Some(v), b))\n+        .unwrap_or((None, false));\n+    let color = match matches.opt_str(\"color\").as_deref() {\n         Some(\"auto\") | None => ColorConfig::AutoColor,\n         Some(\"always\") => ColorConfig::AlwaysColor,\n         Some(\"never\") => ColorConfig::NeverColor,\n         Some(x) => panic!(\"argument for --color must be auto, always, or never, but found `{}`\", x),\n     };\n+    let llvm_version =\n+        matches.opt_str(\"llvm-version\").as_deref().and_then(header::extract_llvm_version);\n \n     let src_base = opt_path(matches, \"src-base\");\n     let run_ignored = matches.opt_present(\"ignored\");\n@@ -215,7 +221,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         gdb_native_rust,\n         lldb_version,\n         lldb_native_rust,\n-        llvm_version: matches.opt_str(\"llvm-version\"),\n+        llvm_version,\n         system_llvm: matches.opt_present(\"system-llvm\"),\n         android_cross_path,\n         adb_path: opt_str2(matches.opt_str(\"adb-path\")),\n@@ -254,7 +260,7 @@ pub fn log_config(config: &Config) {\n     logv(c, format!(\"stage_id: {}\", config.stage_id));\n     logv(c, format!(\"mode: {}\", config.mode));\n     logv(c, format!(\"run_ignored: {}\", config.run_ignored));\n-    logv(c, format!(\"filter: {}\", opt_str(&config.filter.as_ref().map(|re| re.to_owned()))));\n+    logv(c, format!(\"filter: {}\", opt_str(&config.filter)));\n     logv(c, format!(\"filter_exact: {}\", config.filter_exact));\n     logv(\n         c,\n@@ -403,17 +409,14 @@ fn configure_lldb(config: &Config) -> Option<Config> {\n         return None;\n     }\n \n-    if let Some(lldb_version) = config.lldb_version.as_ref() {\n-        if lldb_version == \"350\" {\n-            println!(\n-                \"WARNING: The used version of LLDB ({}) has a \\\n-                 known issue that breaks debuginfo tests. See \\\n-                 issue #32520 for more information. Skipping all \\\n-                 LLDB-based tests!\",\n-                lldb_version\n-            );\n-            return None;\n-        }\n+    if let Some(350) = config.lldb_version {\n+        println!(\n+            \"WARNING: The used version of LLDB (350) has a \\\n+             known issue that breaks debuginfo tests. See \\\n+             issue #32520 for more information. Skipping all \\\n+             LLDB-based tests!\",\n+        );\n+        return None;\n     }\n \n     // Some older versions of LLDB seem to have problems with multiple\n@@ -727,9 +730,7 @@ fn make_test_closure(\n     let config = config.clone();\n     let testpaths = testpaths.clone();\n     let revision = revision.cloned();\n-    test::DynTestFn(Box::new(move || {\n-        runtest::run(config, &testpaths, revision.as_ref().map(|s| s.as_str()))\n-    }))\n+    test::DynTestFn(Box::new(move || runtest::run(config, &testpaths, revision.as_deref())))\n }\n \n /// Returns `true` if the given target is an Android target for the\n@@ -845,75 +846,40 @@ fn extract_gdb_version(full_version_line: &str) -> Option<u32> {\n     // This particular form is documented in the GNU coding standards:\n     // https://www.gnu.org/prep/standards/html_node/_002d_002dversion.html#g_t_002d_002dversion\n \n-    // don't start parsing in the middle of a number\n-    let mut prev_was_digit = false;\n-    let mut in_parens = false;\n-    for (pos, c) in full_version_line.char_indices() {\n-        if in_parens {\n-            if c == ')' {\n-                in_parens = false;\n-            }\n-            continue;\n-        } else if c == '(' {\n-            in_parens = true;\n-            continue;\n-        }\n-\n-        if prev_was_digit || !c.is_digit(10) {\n-            prev_was_digit = c.is_digit(10);\n-            continue;\n+    let mut splits = full_version_line.rsplit(' ');\n+    let version_string = splits.next().unwrap();\n+\n+    let mut splits = version_string.split('.');\n+    let major = splits.next().unwrap();\n+    let minor = splits.next().unwrap();\n+    let patch = splits.next();\n+\n+    let major: u32 = major.parse().unwrap();\n+    let (minor, patch): (u32, u32) = match minor.find(not_a_digit) {\n+        None => {\n+            let minor = minor.parse().unwrap();\n+            let patch: u32 = match patch {\n+                Some(patch) => match patch.find(not_a_digit) {\n+                    None => patch.parse().unwrap(),\n+                    Some(idx) if idx > 3 => 0,\n+                    Some(idx) => patch[..idx].parse().unwrap(),\n+                },\n+                None => 0,\n+            };\n+            (minor, patch)\n         }\n-\n-        prev_was_digit = true;\n-\n-        let line = &full_version_line[pos..];\n-\n-        let next_split = match line.find(|c: char| !c.is_digit(10)) {\n-            Some(idx) => idx,\n-            None => continue, // no minor version\n-        };\n-\n-        if line.as_bytes()[next_split] != b'.' {\n-            continue; // no minor version\n+        // There is no patch version after minor-date (e.g. \"4-2012\").\n+        Some(idx) => {\n+            let minor = minor[..idx].parse().unwrap();\n+            (minor, 0)\n         }\n+    };\n \n-        let major = &line[..next_split];\n-        let line = &line[next_split + 1..];\n-\n-        let (minor, patch) = match line.find(|c: char| !c.is_digit(10)) {\n-            Some(idx) => {\n-                if line.as_bytes()[idx] == b'.' {\n-                    let patch = &line[idx + 1..];\n-\n-                    let patch_len =\n-                        patch.find(|c: char| !c.is_digit(10)).unwrap_or_else(|| patch.len());\n-                    let patch = &patch[..patch_len];\n-                    let patch = if patch_len > 3 || patch_len == 0 { None } else { Some(patch) };\n-\n-                    (&line[..idx], patch)\n-                } else {\n-                    (&line[..idx], None)\n-                }\n-            }\n-            None => (line, None),\n-        };\n-\n-        if minor.is_empty() {\n-            continue;\n-        }\n-\n-        let major: u32 = major.parse().unwrap();\n-        let minor: u32 = minor.parse().unwrap();\n-        let patch: u32 = patch.unwrap_or(\"0\").parse().unwrap();\n-\n-        return Some(((major * 1000) + minor) * 1000 + patch);\n-    }\n-\n-    None\n+    Some(((major * 1000) + minor) * 1000 + patch)\n }\n \n /// Returns (LLDB version, LLDB is rust-enabled)\n-fn extract_lldb_version(full_version_line: Option<String>) -> (Option<String>, bool) {\n+fn extract_lldb_version(full_version_line: &str) -> Option<(u32, bool)> {\n     // Extract the major LLDB version from the given version string.\n     // LLDB version strings are different for Apple and non-Apple platforms.\n     // The Apple variant looks like this:\n@@ -922,7 +888,7 @@ fn extract_lldb_version(full_version_line: Option<String>) -> (Option<String>, b\n     // lldb-300.2.51 (new versions)\n     //\n     // We are only interested in the major version number, so this function\n-    // will return `Some(\"179\")` and `Some(\"300\")` respectively.\n+    // will return `Some(179)` and `Some(300)` respectively.\n     //\n     // Upstream versions look like:\n     // lldb version 6.0.1\n@@ -934,53 +900,24 @@ fn extract_lldb_version(full_version_line: Option<String>) -> (Option<String>, b\n     // normally fine because the only non-Apple version we test is\n     // rust-enabled.\n \n-    if let Some(ref full_version_line) = full_version_line {\n-        if !full_version_line.trim().is_empty() {\n-            let full_version_line = full_version_line.trim();\n-\n-            for (pos, l) in full_version_line.char_indices() {\n-                if l != 'l' && l != 'L' {\n-                    continue;\n-                }\n-                if pos + 5 >= full_version_line.len() {\n-                    continue;\n-                }\n-                let l = full_version_line[pos + 1..].chars().next().unwrap();\n-                if l != 'l' && l != 'L' {\n-                    continue;\n-                }\n-                let d = full_version_line[pos + 2..].chars().next().unwrap();\n-                if d != 'd' && d != 'D' {\n-                    continue;\n-                }\n-                let b = full_version_line[pos + 3..].chars().next().unwrap();\n-                if b != 'b' && b != 'B' {\n-                    continue;\n-                }\n-                let dash = full_version_line[pos + 4..].chars().next().unwrap();\n-                if dash != '-' {\n-                    continue;\n-                }\n-\n-                let vers = full_version_line[pos + 5..]\n-                    .chars()\n-                    .take_while(|c| c.is_digit(10))\n-                    .collect::<String>();\n-                if !vers.is_empty() {\n-                    return (Some(vers), full_version_line.contains(\"rust-enabled\"));\n-                }\n-            }\n+    let full_version_line = full_version_line.trim();\n \n-            if full_version_line.starts_with(\"lldb version \") {\n-                let vers = full_version_line[13..]\n-                    .chars()\n-                    .take_while(|c| c.is_digit(10))\n-                    .collect::<String>();\n-                if !vers.is_empty() {\n-                    return (Some(vers + \"00\"), full_version_line.contains(\"rust-enabled\"));\n-                }\n-            }\n+    if let Some(apple_ver) =\n+        full_version_line.strip_prefix(\"LLDB-\").or_else(|| full_version_line.strip_prefix(\"lldb-\"))\n+    {\n+        if let Some(idx) = apple_ver.find(not_a_digit) {\n+            let version: u32 = apple_ver[..idx].parse().unwrap();\n+            return Some((version, full_version_line.contains(\"rust-enabled\")));\n+        }\n+    } else if let Some(lldb_ver) = full_version_line.strip_prefix(\"lldb version \") {\n+        if let Some(idx) = lldb_ver.find(not_a_digit) {\n+            let version: u32 = lldb_ver[..idx].parse().unwrap();\n+            return Some((version * 100, full_version_line.contains(\"rust-enabled\")));\n         }\n     }\n-    (None, false)\n+    None\n+}\n+\n+fn not_a_digit(c: char) -> bool {\n+    !c.is_digit(10)\n }"}, {"sha": "ea9bc1c1a5b7f5a7413c26b0939db1bec0767d98", "filename": "src/tools/compiletest/src/tests.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftools%2Fcompiletest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/src%2Ftools%2Fcompiletest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Ftests.rs?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -1,8 +1,9 @@\n+use super::header::extract_llvm_version;\n use super::*;\n \n #[test]\n fn test_extract_gdb_version() {\n-    macro_rules! test { ($($expectation:tt: $input:tt,)*) => {{$(\n+    macro_rules! test { ($($expectation:literal: $input:literal,)*) => {{$(\n         assert_eq!(extract_gdb_version($input), Some($expectation));\n     )*}}}\n \n@@ -41,6 +42,17 @@ fn test_extract_gdb_version() {\n     }\n }\n \n+#[test]\n+fn test_extract_lldb_version() {\n+    // Apple variants\n+    assert_eq!(extract_lldb_version(\"LLDB-179.5\"), Some((179, false)));\n+    assert_eq!(extract_lldb_version(\"lldb-300.2.51\"), Some((300, false)));\n+\n+    // Upstream versions\n+    assert_eq!(extract_lldb_version(\"lldb version 6.0.1\"), Some((600, false)));\n+    assert_eq!(extract_lldb_version(\"lldb version 9.0.0\"), Some((900, false)));\n+}\n+\n #[test]\n fn is_test_test() {\n     assert_eq!(true, is_test(&OsString::from(\"a_test.rs\")));\n@@ -49,3 +61,11 @@ fn is_test_test() {\n     assert_eq!(false, is_test(&OsString::from(\"#a_dog_gif\")));\n     assert_eq!(false, is_test(&OsString::from(\"~a_temp_file\")));\n }\n+\n+#[test]\n+fn test_extract_llvm_version() {\n+    assert_eq!(extract_llvm_version(\"8.1.2-rust\"), Some(80102));\n+    assert_eq!(extract_llvm_version(\"9.0.1-rust-1.43.0-dev\"), Some(90001));\n+    assert_eq!(extract_llvm_version(\"9.3.1-rust-1.43.0-dev\"), Some(90301));\n+    assert_eq!(extract_llvm_version(\"10.0.0-rust\"), Some(100000));\n+}"}, {"sha": "ce4ea895400acdd6dde24a8ec104cc559d538f88", "filename": "triagebot.toml", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9e92106d457abd14f82adc29e7f2496861e07916/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=9e92106d457abd14f82adc29e7f2496861e07916", "patch": "@@ -81,7 +81,7 @@ topic = \"I-prioritize #{number} {title}\"\n message_on_add = \"\"\"\\\n @*WG-prioritization/alerts* issue #{number} has been requested for prioritization.\n \n-# [Procedure](https://hackmd.io/WJ0G17DHTHGgv0OW9I2PxA?view#Unprioritized-I-prioritize)\n+# [Procedure](https://forge.rust-lang.org/compiler/prioritization/procedure.html#assign-priority-to-unprioritized-issues-with-i-prioritize-label)\n - Priority?\n - Regression?\n - Notify people/groups?\n@@ -96,7 +96,7 @@ topic = \"I-nominated #{number} {title}\"\n message_on_add = \"\"\"\\\n @*WG-prioritization/alerts* #{number} has been nominated for discussion in `T-compiler` meeting.\n \n-# [Procedure](https://hackmd.io/WJ0G17DHTHGgv0OW9I2PxA?view#I-nominated)\n+# [Procedure](https://forge.rust-lang.org/compiler/prioritization/procedure.html#summarize-i-nominated-issues)\n - Already discussed?\n - Worth the meeting time?\n - Add agenda entry:\n@@ -113,7 +113,7 @@ topic = \"Backport #{number} {title}\"\n message_on_add = \"\"\"\\\n @*WG-prioritization/alerts* PR #{number} has been requested for beta backport.\n \n-# [Procedure](https://hackmd.io/WJ0G17DHTHGgv0OW9I2PxA?view#StableBeta-nominations)\n+# [Procedure](https://forge.rust-lang.org/compiler/prioritization/procedure.html#summarize-stablebeta-nominations)\n Prepare agenda entry:\n - Why nominated?\n - Author, assignee?\n@@ -127,7 +127,7 @@ topic = \"Backport #{number} {title}\"\n message_on_add = \"\"\"\\\n @*WG-prioritization/alerts* PR #{number} has been requested for stable backport.\n \n-# [Procedure](https://hackmd.io/WJ0G17DHTHGgv0OW9I2PxA?view#StableBeta-nominations)\n+# [Procedure](https://forge.rust-lang.org/compiler/prioritization/procedure.html#summarize-stablebeta-nominations)\n Prepare agenda entry:\n - Why nominated?\n - Author, assignee?\n@@ -142,7 +142,7 @@ topic = \"S-waiting-on-team #{number} {title}\"\n message_on_add = \"\"\"\\\n @*WG-prioritization/alerts* PR #{number} is waiting on `T-compiler`.\n \n-# [Procedure](https://hackmd.io/WJ0G17DHTHGgv0OW9I2PxA?view#PR%E2%80%99s-waiting-on-team)\n+# [Procedure](https://forge.rust-lang.org/compiler/prioritization/procedure.html#summarize-prs-waiting-on-team)\n - Prepare agenda entry:\n   - What is it waiting for?\n   - Important details?\n@@ -156,7 +156,7 @@ topic = \"P-critical #{number} {title}\"\n message_on_add = \"\"\"\\\n @*WG-prioritization/alerts* issue #{number} has been assigned `P-critical`.\n \n-# [Procedure](https://hackmd.io/WJ0G17DHTHGgv0OW9I2PxA?view#P-critical-and-Unassigned-P-high-regressions)\n+# [Procedure](https://forge.rust-lang.org/compiler/prioritization/procedure.html#summarize-p-critical-and-unassigned-p-high-regressions)\n - Notify people/groups?\n - Assign if possible?\n - Add to agenda:\n@@ -172,7 +172,7 @@ topic = \"P-high regression #{number} {title}\"\n message_on_add = \"\"\"\\\n @*WG-prioritization/alerts* issue #{number} has been assigned `P-high` and is a regression.\n \n-# [Procedure](https://hackmd.io/WJ0G17DHTHGgv0OW9I2PxA?view#P-critical-and-Unassigned-P-high-regressions)\n+# [Procedure](https://forge.rust-lang.org/compiler/prioritization/procedure.html#summarize-p-critical-and-unassigned-p-high-regressions)\n Is issue assigned? If not:\n - Try to find an assignee?\n - Otherwise add to agenda:"}]}