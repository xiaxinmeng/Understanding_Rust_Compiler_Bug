{"sha": "017944c5a7236bcc3ed553d49dd1f43e73733966", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNzk0NGM1YTcyMzZiY2MzZWQ1NTNkNDlkZDFmNDNlNzM3MzM5NjY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-28T03:38:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-28T03:38:00Z"}, "message": "Rollup merge of #64859 - Centril:const-def-here-new-var, r=estebank\n\ncheck_match: improve diagnostics for `let A = 2;` with `const A: i32 = 3`\n\nFor example:\n\n```\nerror[E0005]: refutable pattern in local binding: `std::i32::MIN..=1i32` and `3i32..=std::i32::MAX` not covered\n  --> $DIR/const-pat-non-exaustive-let-new-var.rs:2:9\n   |\nLL |     let A = 3;\n   |         ^\n   |         |\n   |         interpreted as a constant pattern, not a new variable\n   |         help: introduce a variable instead: `a_var`\n...\nLL |     const A: i32 = 2;\n   |     ----------------- constant defined here\n```\n\nr? @estebank\ncc @matthiaskrgr @rpjohnst", "tree": {"sha": "ab96a1cde1bbd285fa578cdd476bc4e30fec5fad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab96a1cde1bbd285fa578cdd476bc4e30fec5fad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/017944c5a7236bcc3ed553d49dd1f43e73733966", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdjtWYCRBK7hj4Ov3rIwAAdHIIADogNxSO8riZ0hNVgWCMUcOT\n/zEXde+HY6NyEnorbUB17lw6wF4iWlJNVGD+I67gReBIzZDGGoQbJDFhUSQzrQiR\nL5iLwZFM8vNW5kAAMifF14TCXQyxDCiEtOL8z/IAXldXxmCagMB6R904t4oEFknp\n6+k8Onzh/3Z9NiU/CRBclzWdVdkoy6C8cKhw5/WIX1A4wQB9mswCOup1HBw72dYF\nyl8hrl3szrGxG54T1GtszcodS78z0Ze+utZr6wqbv3Q6M2QTicelNNRDde2zF7yy\nwcpw88jj3gHOwU2OqfFZ/Sg/FV3oPa8usURHLUrQ27J3ENGX7siYu1SgHtr9EmM=\n=NXlr\n-----END PGP SIGNATURE-----\n", "payload": "tree ab96a1cde1bbd285fa578cdd476bc4e30fec5fad\nparent f1a5bc57aad3c74ca0e0db15bbedbf87eeb4b693\nparent aa03f1f5e3791f1ff07d414ba003f395ad6538d8\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1569641880 +0200\ncommitter GitHub <noreply@github.com> 1569641880 +0200\n\nRollup merge of #64859 - Centril:const-def-here-new-var, r=estebank\n\ncheck_match: improve diagnostics for `let A = 2;` with `const A: i32 = 3`\n\nFor example:\n\n```\nerror[E0005]: refutable pattern in local binding: `std::i32::MIN..=1i32` and `3i32..=std::i32::MAX` not covered\n  --> $DIR/const-pat-non-exaustive-let-new-var.rs:2:9\n   |\nLL |     let A = 3;\n   |         ^\n   |         |\n   |         interpreted as a constant pattern, not a new variable\n   |         help: introduce a variable instead: `a_var`\n...\nLL |     const A: i32 = 2;\n   |     ----------------- constant defined here\n```\n\nr? @estebank\ncc @matthiaskrgr @rpjohnst\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/017944c5a7236bcc3ed553d49dd1f43e73733966", "html_url": "https://github.com/rust-lang/rust/commit/017944c5a7236bcc3ed553d49dd1f43e73733966", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/017944c5a7236bcc3ed553d49dd1f43e73733966/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1a5bc57aad3c74ca0e0db15bbedbf87eeb4b693", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1a5bc57aad3c74ca0e0db15bbedbf87eeb4b693", "html_url": "https://github.com/rust-lang/rust/commit/f1a5bc57aad3c74ca0e0db15bbedbf87eeb4b693"}, {"sha": "aa03f1f5e3791f1ff07d414ba003f395ad6538d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa03f1f5e3791f1ff07d414ba003f395ad6538d8", "html_url": "https://github.com/rust-lang/rust/commit/aa03f1f5e3791f1ff07d414ba003f395ad6538d8"}], "stats": {"total": 122, "additions": 96, "deletions": 26}, "files": [{"sha": "42a4a9909f8a94e0c433aa8a7c9b3b284360ee13", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/017944c5a7236bcc3ed553d49dd1f43e73733966/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017944c5a7236bcc3ed553d49dd1f43e73733966/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=017944c5a7236bcc3ed553d49dd1f43e73733966", "patch": "@@ -1083,6 +1083,14 @@ impl<'hir> Map<'hir> {\n         self.as_local_hir_id(id).map(|id| self.span(id))\n     }\n \n+    pub fn res_span(&self, res: Res) -> Option<Span> {\n+        match res {\n+            Res::Err => None,\n+            Res::Local(id) => Some(self.span(id)),\n+            res => self.span_if_local(res.opt_def_id()?),\n+        }\n+    }\n+\n     pub fn node_to_string(&self, id: HirId) -> String {\n         hir_id_to_string(self, id, true)\n     }"}, {"sha": "c521b7352214bdf47841a5e7235179361206dd9d", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/017944c5a7236bcc3ed553d49dd1f43e73733966/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017944c5a7236bcc3ed553d49dd1f43e73733966/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=017944c5a7236bcc3ed553d49dd1f43e73733966", "patch": "@@ -266,20 +266,51 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n                 \"refutable pattern in {}: {} not covered\",\n                 origin, joined_patterns\n             );\n-            err.span_label(pat.span, match &pat.kind {\n+            match &pat.kind {\n                 hir::PatKind::Path(hir::QPath::Resolved(None, path))\n-                    if path.segments.len() == 1 && path.segments[0].args.is_none() => {\n-                    format!(\"interpreted as {} {} pattern, not new variable\",\n-                            path.res.article(), path.res.descr())\n+                    if path.segments.len() == 1 && path.segments[0].args.is_none() =>\n+                {\n+                    const_not_var(&mut err, cx.tcx, pat, path);\n                 }\n-                _ => pattern_not_convered_label(&witnesses, &joined_patterns),\n-            });\n+                _ => {\n+                    err.span_label(\n+                        pat.span,\n+                        pattern_not_covered_label(&witnesses, &joined_patterns),\n+                    );\n+                }\n+            }\n+\n             adt_defined_here(cx, &mut err, pattern_ty, &witnesses);\n             err.emit();\n         });\n     }\n }\n \n+/// A path pattern was interpreted as a constant, not a new variable.\n+/// This caused an irrefutable match failure in e.g. `let`.\n+fn const_not_var(err: &mut DiagnosticBuilder<'_>, tcx: TyCtxt<'_>, pat: &Pat, path: &hir::Path) {\n+    let descr = path.res.descr();\n+    err.span_label(pat.span, format!(\n+        \"interpreted as {} {} pattern, not a new variable\",\n+        path.res.article(),\n+        descr,\n+    ));\n+\n+    err.span_suggestion(\n+        pat.span,\n+        \"introduce a variable instead\",\n+        format!(\"{}_var\", path.segments[0].ident).to_lowercase(),\n+        // Cannot use `MachineApplicable` as it's not really *always* correct\n+        // because there may be such an identifier in scope or the user maybe\n+        // really wanted to match against the constant. This is quite unlikely however.\n+        Applicability::MaybeIncorrect,\n+    );\n+\n+    if let Some(span) = tcx.hir().res_span(path.res) {\n+        err.span_label(span, format!(\"{} defined here\", descr));\n+    }\n+}\n+\n fn check_for_bindings_named_same_as_variants(cx: &MatchVisitor<'_, '_>, pat: &Pat) {\n     pat.walk(|p| {\n         if let hir::PatKind::Binding(_, _, ident, None) = p.kind {\n@@ -445,7 +476,7 @@ fn check_exhaustive<'tcx>(\n         cx.tcx.sess, sp,\n         format!(\"non-exhaustive patterns: {} not covered\", joined_patterns),\n     );\n-    err.span_label(sp, pattern_not_convered_label(&witnesses, &joined_patterns));\n+    err.span_label(sp, pattern_not_covered_label(&witnesses, &joined_patterns));\n     adt_defined_here(cx, &mut err, scrut_ty, &witnesses);\n     err.help(\n         \"ensure that all possible cases are being handled, \\\n@@ -471,7 +502,7 @@ fn joined_uncovered_patterns(witnesses: &[super::Pat<'_>]) -> String {\n     }\n }\n \n-fn pattern_not_convered_label(witnesses: &[super::Pat<'_>], joined_patterns: &str) -> String {\n+fn pattern_not_covered_label(witnesses: &[super::Pat<'_>], joined_patterns: &str) -> String {\n     format!(\"pattern{} {} not covered\", rustc_errors::pluralise!(witnesses.len()), joined_patterns)\n }\n "}, {"sha": "5ab2ca280d5cdf742a1974b364c4419d9e52d8ac", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/017944c5a7236bcc3ed553d49dd1f43e73733966/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017944c5a7236bcc3ed553d49dd1f43e73733966/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=017944c5a7236bcc3ed553d49dd1f43e73733966", "patch": "@@ -1368,11 +1368,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     span,\n                     format!(\"associated type `{}` must be specified\", assoc_item.ident),\n                 );\n-                if item_def_id.is_local() {\n-                    err.span_label(\n-                        tcx.def_span(*item_def_id),\n-                        format!(\"`{}` defined here\", assoc_item.ident),\n-                    );\n+                if let Some(sp) = tcx.hir().span_if_local(*item_def_id) {\n+                    err.span_label(sp, format!(\"`{}` defined here\", assoc_item.ident));\n                 }\n                 if suggest {\n                     if let Ok(snippet) = tcx.sess.source_map().span_to_snippet("}, {"sha": "7e0a3e781883e43ac7a2c18914dff992c75843d3", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/017944c5a7236bcc3ed553d49dd1f43e73733966/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017944c5a7236bcc3ed553d49dd1f43e73733966/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=017944c5a7236bcc3ed553d49dd1f43e73733966", "patch": "@@ -351,16 +351,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                     err.span_label(call_expr.span, \"call expression requires function\");\n \n-                    let def_span = match def {\n-                        Res::Err => None,\n-                        Res::Local(id) => {\n-                            Some(self.tcx.hir().span(id))\n-                        },\n-                        _ => def\n-                            .opt_def_id()\n-                            .and_then(|did| self.tcx.hir().span_if_local(did)),\n-                    };\n-                    if let Some(span) = def_span {\n+                    if let Some(span) = self.tcx.hir().res_span(def) {\n                         let label = match (unit_variant, inner_callee_path) {\n                             (Some(path), _) => format!(\"`{}` defined here\", path),\n                             (_, Some(hir::QPath::Resolved(_, path))) => format!("}, {"sha": "4814aa9a5b2cadc4f76de28b051a10a8f022f67e", "filename": "src/test/ui/consts/const-pattern-irrefutable.stderr", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/017944c5a7236bcc3ed553d49dd1f43e73733966/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-irrefutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/017944c5a7236bcc3ed553d49dd1f43e73733966/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-irrefutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-irrefutable.stderr?ref=017944c5a7236bcc3ed553d49dd1f43e73733966", "patch": "@@ -1,20 +1,38 @@\n error[E0005]: refutable pattern in local binding: `0u8..=1u8` and `3u8..=std::u8::MAX` not covered\n   --> $DIR/const-pattern-irrefutable.rs:12:9\n    |\n+LL | const a: u8 = 2;\n+   | ---------------- constant defined here\n+...\n LL |     let a = 4;\n-   |         ^ interpreted as a constant pattern, not new variable\n+   |         ^\n+   |         |\n+   |         interpreted as a constant pattern, not a new variable\n+   |         help: introduce a variable instead: `a_var`\n \n error[E0005]: refutable pattern in local binding: `0u8..=1u8` and `3u8..=std::u8::MAX` not covered\n   --> $DIR/const-pattern-irrefutable.rs:13:9\n    |\n+LL |     pub const b: u8 = 2;\n+   |     -------------------- constant defined here\n+...\n LL |     let c = 4;\n-   |         ^ interpreted as a constant pattern, not new variable\n+   |         ^\n+   |         |\n+   |         interpreted as a constant pattern, not a new variable\n+   |         help: introduce a variable instead: `c_var`\n \n error[E0005]: refutable pattern in local binding: `0u8..=1u8` and `3u8..=std::u8::MAX` not covered\n   --> $DIR/const-pattern-irrefutable.rs:14:9\n    |\n+LL |     pub const d: u8 = 2;\n+   |     -------------------- constant defined here\n+...\n LL |     let d = 4;\n-   |         ^ interpreted as a constant pattern, not new variable\n+   |         ^\n+   |         |\n+   |         interpreted as a constant pattern, not a new variable\n+   |         help: introduce a variable instead: `d_var`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "2a11871db8e679dcf69c6387a69c83108d46d092", "filename": "src/test/ui/suggestions/const-pat-non-exaustive-let-new-var.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/017944c5a7236bcc3ed553d49dd1f43e73733966/src%2Ftest%2Fui%2Fsuggestions%2Fconst-pat-non-exaustive-let-new-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017944c5a7236bcc3ed553d49dd1f43e73733966/src%2Ftest%2Fui%2Fsuggestions%2Fconst-pat-non-exaustive-let-new-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconst-pat-non-exaustive-let-new-var.rs?ref=017944c5a7236bcc3ed553d49dd1f43e73733966", "patch": "@@ -0,0 +1,10 @@\n+fn main() {\n+    let A = 3;\n+    //~^ ERROR refutable pattern in local binding: `std::i32::MIN..=1i32` and\n+    //~| interpreted as a constant pattern, not a new variable\n+    //~| HELP introduce a variable instead\n+    //~| SUGGESTION a_var\n+\n+    const A: i32 = 2;\n+    //~^ constant defined here\n+}"}, {"sha": "fc17199bf91d4ac3363ffc31410836d70a275b15", "filename": "src/test/ui/suggestions/const-pat-non-exaustive-let-new-var.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/017944c5a7236bcc3ed553d49dd1f43e73733966/src%2Ftest%2Fui%2Fsuggestions%2Fconst-pat-non-exaustive-let-new-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/017944c5a7236bcc3ed553d49dd1f43e73733966/src%2Ftest%2Fui%2Fsuggestions%2Fconst-pat-non-exaustive-let-new-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconst-pat-non-exaustive-let-new-var.stderr?ref=017944c5a7236bcc3ed553d49dd1f43e73733966", "patch": "@@ -0,0 +1,15 @@\n+error[E0005]: refutable pattern in local binding: `std::i32::MIN..=1i32` and `3i32..=std::i32::MAX` not covered\n+  --> $DIR/const-pat-non-exaustive-let-new-var.rs:2:9\n+   |\n+LL |     let A = 3;\n+   |         ^\n+   |         |\n+   |         interpreted as a constant pattern, not a new variable\n+   |         help: introduce a variable instead: `a_var`\n+...\n+LL |     const A: i32 = 2;\n+   |     ----------------- constant defined here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0005`."}]}