{"sha": "baca9a6240115996d35336f5bb7d78e60babd722", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhY2E5YTYyNDAxMTU5OTZkMzUzMzZmNWJiN2Q3OGU2MGJhYmQ3MjI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-12T16:04:24Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-17T16:41:43Z"}, "message": "rustc: Use reachablility through a query\n\nTurns out this was already set up as a query, just wasn't using it yet!", "tree": {"sha": "09e90cd1e3533e31b3ef3ee4bae901412dabc5ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09e90cd1e3533e31b3ef3ee4bae901412dabc5ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/baca9a6240115996d35336f5bb7d78e60babd722", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/baca9a6240115996d35336f5bb7d78e60babd722", "html_url": "https://github.com/rust-lang/rust/commit/baca9a6240115996d35336f5bb7d78e60babd722", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/baca9a6240115996d35336f5bb7d78e60babd722/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a97ad6ae50e8ce02acaa3153312d0448e98b7d2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a97ad6ae50e8ce02acaa3153312d0448e98b7d2f", "html_url": "https://github.com/rust-lang/rust/commit/a97ad6ae50e8ce02acaa3153312d0448e98b7d2f"}], "stats": {"total": 25, "additions": 5, "deletions": 20}, "files": [{"sha": "a04ecefce0f36789f92a812e52689b020626d348", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/baca9a6240115996d35336f5bb7d78e60babd722/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baca9a6240115996d35336f5bb7d78e60babd722/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=baca9a6240115996d35336f5bb7d78e60babd722", "patch": "@@ -369,10 +369,6 @@ impl<'a, 'tcx: 'a> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a,\n     }\n }\n \n-pub fn find_reachable<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Rc<NodeSet> {\n-    tcx.reachable_set(LOCAL_CRATE)\n-}\n-\n fn reachable_set<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum) -> Rc<NodeSet> {\n     debug_assert!(crate_num == LOCAL_CRATE);\n "}, {"sha": "e2df963f80fad9c085a10f78a9a61413c27e1767", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/baca9a6240115996d35336f5bb7d78e60babd722/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baca9a6240115996d35336f5bb7d78e60babd722/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=baca9a6240115996d35336f5bb7d78e60babd722", "patch": "@@ -121,7 +121,6 @@ mod sty;\n #[derive(Clone)]\n pub struct CrateAnalysis {\n     pub access_levels: Rc<AccessLevels>,\n-    pub reachable: Rc<NodeSet>,\n     pub name: String,\n     pub glob_map: Option<hir::GlobMap>,\n }"}, {"sha": "b01179c43111b161df9d5755564c2cbed918d26c", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/baca9a6240115996d35336f5bb7d78e60babd722/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baca9a6240115996d35336f5bb7d78e60babd722/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=baca9a6240115996d35336f5bb7d78e60babd722", "patch": "@@ -28,7 +28,6 @@ use rustc::mir::transform::{MIR_CONST, MIR_VALIDATED, MIR_OPTIMIZED, Passes};\n use rustc::ty::{self, TyCtxt, Resolutions, GlobalArenas};\n use rustc::traits;\n use rustc::util::common::{ErrorReported, time};\n-use rustc::util::nodemap::NodeSet;\n use rustc_allocator as allocator;\n use rustc_borrowck as borrowck;\n use rustc_incremental::{self, IncrementalHashesMap};\n@@ -243,7 +242,7 @@ pub fn compile_input(sess: &Session,\n                 tcx.print_debug_stats();\n             }\n \n-            let trans = phase_4_translate_to_llvm(tcx, analysis, incremental_hashes_map,\n+            let trans = phase_4_translate_to_llvm(tcx, incremental_hashes_map,\n                                                   &outputs);\n \n             if log_enabled!(::log::LogLevel::Info) {\n@@ -885,7 +884,6 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n         defs: resolver.definitions,\n         analysis: ty::CrateAnalysis {\n             access_levels: Rc::new(AccessLevels::default()),\n-            reachable: Rc::new(NodeSet()),\n             name: crate_name.to_string(),\n             glob_map: if resolver.make_glob_map { Some(resolver.glob_map) } else { None },\n         },\n@@ -1103,11 +1101,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n             return Ok(f(tcx, analysis, incremental_hashes_map, sess.compile_status()));\n         }\n \n-        analysis.reachable =\n-            time(time_passes,\n-                 \"reachability checking\",\n-                 || reachable::find_reachable(tcx));\n-\n         time(time_passes, \"death checking\", || middle::dead::check_crate(tcx));\n \n         time(time_passes, \"unused lib feature checking\", || {\n@@ -1123,7 +1116,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n /// Run the translation phase to LLVM, after which the AST and analysis can\n /// be discarded.\n pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                           analysis: ty::CrateAnalysis,\n                                            incremental_hashes_map: IncrementalHashesMap,\n                                            output_filenames: &OutputFilenames)\n                                            -> write::OngoingCrateTranslation {\n@@ -1136,7 +1128,7 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let translation =\n         time(time_passes,\n              \"translation\",\n-             move || trans::trans_crate(tcx, analysis, incremental_hashes_map, output_filenames));\n+             move || trans::trans_crate(tcx, incremental_hashes_map, output_filenames));\n \n     if tcx.sess.profile_queries() {\n         profile::dump(\"profile_queries\".to_string())"}, {"sha": "1ea38eadb759cfec89adf2e17d9605d511d88f9d", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/baca9a6240115996d35336f5bb7d78e60babd722/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baca9a6240115996d35336f5bb7d78e60babd722/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=baca9a6240115996d35336f5bb7d78e60babd722", "patch": "@@ -886,8 +886,8 @@ fn iter_globals(llmod: llvm::ModuleRef) -> ValueIter {\n ///\n /// This list is later used by linkers to determine the set of symbols needed to\n /// be exposed from a dynamic library and it's also encoded into the metadata.\n-pub fn find_exported_symbols(tcx: TyCtxt, reachable: &NodeSet) -> NodeSet {\n-    reachable.iter().cloned().filter(|&id| {\n+pub fn find_exported_symbols(tcx: TyCtxt) -> NodeSet {\n+    tcx.reachable_set(LOCAL_CRATE).iter().cloned().filter(|&id| {\n         // Next, we want to ignore some FFI functions that are not exposed from\n         // this crate. Reachable FFI functions can be lumped into two\n         // categories:\n@@ -929,7 +929,6 @@ pub fn find_exported_symbols(tcx: TyCtxt, reachable: &NodeSet) -> NodeSet {\n }\n \n pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                             analysis: ty::CrateAnalysis,\n                              incremental_hashes_map: IncrementalHashesMap,\n                              output_filenames: &OutputFilenames)\n                              -> OngoingCrateTranslation {\n@@ -940,10 +939,9 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // `TransCrate`, you need to be careful to register \"reads\" of the\n     // particular items that will be processed.\n     let krate = tcx.hir.krate();\n-    let ty::CrateAnalysis { reachable, .. } = analysis;\n     let check_overflow = tcx.sess.overflow_checks();\n     let link_meta = link::build_link_meta(&incremental_hashes_map);\n-    let exported_symbol_node_ids = find_exported_symbols(tcx, &reachable);\n+    let exported_symbol_node_ids = find_exported_symbols(tcx);\n \n     let shared_ccx = SharedCrateContext::new(tcx,\n                                              check_overflow,"}]}