{"sha": "d368b663bdb8a6239d4a487112d4246e76d2c542", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNjhiNjYzYmRiOGE2MjM5ZDRhNDg3MTEyZDQyNDZlNzZkMmM1NDI=", "commit": {"author": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2021-06-21T19:14:08Z"}, "committer": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2021-06-21T19:34:32Z"}, "message": "Set explicit target directory to avoid cargo deadlock", "tree": {"sha": "1bcd1c0311c869f787c14cb9f8aaa817c61505cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bcd1c0311c869f787c14cb9f8aaa817c61505cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d368b663bdb8a6239d4a487112d4246e76d2c542", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAmDQ6cgACgkQztOS3gxI\nPQA/CQ//QDnbBqV4d3MP1ztPgVO6n/6xr87WC2n6CkJUhcqFMlhvOvanBk4IMihx\n4hadH3dlT6pY1NEj2kEdI+WscI771ijBTwxEKP78YaMlcbd93sOZ0bcXJs9f8XLn\n7ZgbBsEeUUkR2HJDG34GBNANXP+mIYxa/nWQYxptks48z7EWL/r3L0XVf3y6ZjwS\nbgYnUwWszOeTaGR7/VXhTGNG33eWVResguNmYRGt87527iushcmdFBRBifcV96fC\nsvlCf5iTI95/hyTutm3qDpcdGmffNA+t9bwrjVSZGx8qJfpRerM2CbuG4GwdWOKl\nd7Vf3pS1U6XQSBG3We6Z73aYLt454jkIN/LPR9fdAXtByKesPtqkphlMh4NWjss1\ncatqDjd/P0VZ3w4QUFC+Deml9s0yElGcl0nj4j0Nmhn5xF9/viwDvhro+6aBRwz9\nCTXIZ+eGXtf4K5OXYwk4ISYqeQ6n2zKuM9I0pqZZ7MpgWpU7LB7+rY4C0E+QYIKv\n/2AB8p17t1fL5kfq6nmP9fW52K0ABuHU+bkuWcacfGmu+qWegCejjm0V1qRi3MBE\nU97NDhu5zwMHas3KX6jEZmyfgTJsZuZD5GRd4C+BdUMAz6Dx6EAAaxrpP6b1C/vJ\nqi2m9JJgISVIEDbEhOUcktrknEgXCMwBG2XNZr/hBNg2wE9OadM=\n=q7YG\n-----END PGP SIGNATURE-----", "payload": "tree 1bcd1c0311c869f787c14cb9f8aaa817c61505cd\nparent 1b05dbba39d5a4d46f321dc962df99038cddbf21\nauthor oxalica <oxalicc@pm.me> 1624302848 +0800\ncommitter oxalica <oxalicc@pm.me> 1624304072 +0800\n\nSet explicit target directory to avoid cargo deadlock\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d368b663bdb8a6239d4a487112d4246e76d2c542", "html_url": "https://github.com/rust-lang/rust/commit/d368b663bdb8a6239d4a487112d4246e76d2c542", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d368b663bdb8a6239d4a487112d4246e76d2c542/comments", "author": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b05dbba39d5a4d46f321dc962df99038cddbf21", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b05dbba39d5a4d46f321dc962df99038cddbf21", "html_url": "https://github.com/rust-lang/rust/commit/1b05dbba39d5a4d46f321dc962df99038cddbf21"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "1e7aa026fa5f6b8213e508195199153832ac7898", "filename": "crates/proc_macro_test/build.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d368b663bdb8a6239d4a487112d4246e76d2c542/crates%2Fproc_macro_test%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d368b663bdb8a6239d4a487112d4246e76d2c542/crates%2Fproc_macro_test%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_test%2Fbuild.rs?ref=d368b663bdb8a6239d4a487112d4246e76d2c542", "patch": "@@ -17,9 +17,16 @@ fn main() {\n \n     let name = \"proc_macro_test_impl\";\n     let version = \"0.0.0\";\n+    let target_dir = out_dir.join(\"target\");\n     let output = Command::new(toolchain::cargo())\n         .current_dir(\"imp\")\n         .args(&[\"build\", \"-p\", \"proc_macro_test_impl\", \"--message-format\", \"json\"])\n+        // Explicit override the target directory to avoid using the same one which the parent\n+        // cargo is using, or we'll deadlock.\n+        // This can happen when `CARGO_TARGET_DIR` is set or global config forces all cargo\n+        // instance to use the same target directory.\n+        .arg(\"--target-dir\")\n+        .arg(&target_dir)\n         .output()\n         .unwrap();\n     assert!(output.status.success());\n@@ -39,10 +46,9 @@ fn main() {\n         }\n     }\n \n-    let src_path = artifact_path.expect(\"no dylib for proc_macro_test_impl found\");\n-    let dest_path = out_dir.join(src_path.file_name().unwrap());\n-    fs::copy(src_path, &dest_path).unwrap();\n+    // This file is under `target_dir` and is already under `OUT_DIR`.\n+    let artifact_path = artifact_path.expect(\"no dylib for proc_macro_test_impl found\");\n \n     let info_path = out_dir.join(\"proc_macro_test_location.txt\");\n-    fs::write(info_path, dest_path.to_str().unwrap()).unwrap();\n+    fs::write(info_path, artifact_path.to_str().unwrap()).unwrap();\n }"}]}