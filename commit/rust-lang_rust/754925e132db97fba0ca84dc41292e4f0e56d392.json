{"sha": "754925e132db97fba0ca84dc41292e4f0e56d392", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NDkyNWUxMzJkYjk3ZmJhMGNhODRkYzQxMjkyZTRmMGU1NmQzOTI=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2015-10-19T18:20:29Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2015-10-19T18:20:29Z"}, "message": "Merge pull request #484 from marcusklaas/patternz\n\nFormat some patterns", "tree": {"sha": "584abf25401585172e9a96adaa178cba1f8fde4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/584abf25401585172e9a96adaa178cba1f8fde4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/754925e132db97fba0ca84dc41292e4f0e56d392", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/754925e132db97fba0ca84dc41292e4f0e56d392", "html_url": "https://github.com/rust-lang/rust/commit/754925e132db97fba0ca84dc41292e4f0e56d392", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/754925e132db97fba0ca84dc41292e4f0e56d392/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c719d680787a1ffec76f8923db3a68f6775dda83", "url": "https://api.github.com/repos/rust-lang/rust/commits/c719d680787a1ffec76f8923db3a68f6775dda83", "html_url": "https://github.com/rust-lang/rust/commit/c719d680787a1ffec76f8923db3a68f6775dda83"}, {"sha": "ca023ba9b702ec9d453e917ffac54263ab4ef965", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca023ba9b702ec9d453e917ffac54263ab4ef965", "html_url": "https://github.com/rust-lang/rust/commit/ca023ba9b702ec9d453e917ffac54263ab4ef965"}], "stats": {"total": 324, "additions": 236, "deletions": 88}, "files": [{"sha": "b69989aa761dcd04de527282c7c09c8364b35bb9", "filename": "src/expr.rs", "status": "modified", "additions": 16, "deletions": 25, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/754925e132db97fba0ca84dc41292e4f0e56d392/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754925e132db97fba0ca84dc41292e4f0e56d392/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=754925e132db97fba0ca84dc41292e4f0e56d392", "patch": "@@ -12,7 +12,7 @@ use std::cmp::Ordering;\n use std::borrow::Borrow;\n use std::mem::swap;\n \n-use Indent;\n+use {Indent, Spanned};\n use rewrite::{Rewrite, RewriteContext};\n use lists::{write_list, itemize_list, ListFormatting, SeparatorTactic, ListTactic,\n             DefinitiveListTactic, definitive_tactic, ListItem, format_fn_args};\n@@ -76,7 +76,7 @@ impl Rewrite for ast::Expr {\n                                    offset)\n             }\n             ast::Expr_::ExprTup(ref items) => {\n-                rewrite_tuple_lit(context, items, self.span, width, offset)\n+                rewrite_tuple(context, items, self.span, width, offset)\n             }\n             ast::Expr_::ExprWhile(ref cond, ref block, label) => {\n                 Loop::new_while(None, cond, block, label).rewrite(context, width, offset)\n@@ -479,13 +479,6 @@ impl Rewrite for ast::Block {\n     }\n }\n \n-// FIXME(#18): implement pattern formatting\n-impl Rewrite for ast::Pat {\n-    fn rewrite(&self, context: &RewriteContext, _: usize, _: Indent) -> Option<String> {\n-        Some(context.snippet(self.span))\n-    }\n-}\n-\n // Abstraction over for, while and loop expressions\n struct Loop<'a> {\n     cond: Option<&'a ast::Expr>,\n@@ -849,11 +842,7 @@ impl Rewrite for ast::Arm {\n         // 5 = ` => {`\n         let pat_budget = try_opt!(width.checked_sub(5));\n         let pat_strs = try_opt!(pats.iter()\n-                                    .map(|p| {\n-                                        p.rewrite(context,\n-                                                  pat_budget,\n-                                                  offset.block_indent(context.config))\n-                                    })\n+                                    .map(|p| p.rewrite(context, pat_budget, offset))\n                                     .collect::<Option<Vec<_>>>());\n \n         let mut total_width = pat_strs.iter().fold(0, |a, p| a + p.len());\n@@ -1187,7 +1176,9 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n     // Replace the stub with the full overflowing last argument if the rewrite\n     // succeeded and its first line fits with the other arguments.\n     match (overflow_last, tactic, placeholder) {\n-        (true, DefinitiveListTactic::Horizontal, placeholder @ Some(..)) => {\n+        (true,\n+         DefinitiveListTactic::Horizontal,\n+         placeholder @ Some(..)) => {\n             item_vec[arg_count - 1].item = placeholder;\n         }\n         (true, _, _) => {\n@@ -1206,8 +1197,6 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n         config: context.config,\n     };\n \n-    // format_fn_args(items, remaining_width, offset, context.config)\n-\n     let list_str = match write_list(&item_vec, &fmt) {\n         Some(str) => str,\n         None => return Err(Ordering::Less),\n@@ -1382,12 +1371,14 @@ fn rewrite_field(context: &RewriteContext,\n     expr.map(|s| format!(\"{}: {}\", name, s))\n }\n \n-fn rewrite_tuple_lit(context: &RewriteContext,\n-                     items: &[ptr::P<ast::Expr>],\n-                     span: Span,\n-                     width: usize,\n-                     offset: Indent)\n-                     -> Option<String> {\n+pub fn rewrite_tuple<'a, R>(context: &RewriteContext,\n+                            items: &'a [ptr::P<R>],\n+                            span: Span,\n+                            width: usize,\n+                            offset: Indent)\n+                            -> Option<String>\n+    where R: Rewrite + Spanned + 'a\n+{\n     debug!(\"rewrite_tuple_lit: width: {}, offset: {:?}\", width, offset);\n     let indent = offset + 1;\n     // In case of length 1, need a trailing comma\n@@ -1400,8 +1391,8 @@ fn rewrite_tuple_lit(context: &RewriteContext,\n     let items = itemize_list(context.codemap,\n                              items.iter(),\n                              \")\",\n-                             |item| item.span.lo,\n-                             |item| item.span.hi,\n+                             |item| item.span().lo,\n+                             |item| item.span().hi,\n                              |item| {\n                                  let inner_width = context.config.max_width - indent.width() - 1;\n                                  item.rewrite(context, inner_width, indent)"}, {"sha": "6c1c6da2bbde2fe48192949ff94c68c9e30e3633", "filename": "src/items.rs", "status": "modified", "additions": 35, "deletions": 30, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/754925e132db97fba0ca84dc41292e4f0e56d392/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754925e132db97fba0ca84dc41292e4f0e56d392/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=754925e132db97fba0ca84dc41292e4f0e56d392", "patch": "@@ -29,41 +29,16 @@ impl<'a> FmtVisitor<'a> {\n     pub fn visit_let(&mut self, local: &ast::Local, span: Span) {\n         self.format_missing_with_indent(span.lo);\n \n-        // String that is placed within the assignment pattern and expression.\n-        let infix = {\n-            let mut infix = String::new();\n-\n-            if let Some(ref ty) = local.ty {\n-                // 2 = \": \".len()\n-                let offset = self.block_indent + 2;\n-                let width = self.config.max_width - offset.width();\n-                let rewrite = ty.rewrite(&self.get_context(), width, offset);\n-\n-                match rewrite {\n-                    Some(result) => {\n-                        infix.push_str(\": \");\n-                        infix.push_str(&result);\n-                    }\n-                    None => return,\n-                }\n-            }\n-\n-            if local.init.is_some() {\n-                infix.push_str(\" =\");\n-            }\n-\n-            infix\n-        };\n-\n         // New scope so we drop the borrow of self (context) in time to mutably\n         // borrow self to mutate its buffer.\n         let result = {\n             let context = self.get_context();\n             let mut result = \"let \".to_owned();\n-            let pattern_offset = self.block_indent + result.len() + infix.len();\n+            let pattern_offset = self.block_indent + result.len();\n             // 1 = ;\n-            let pattern_width = self.config.max_width.checked_sub(pattern_offset.width() + 1);\n-            let pattern_width = match pattern_width {\n+            let pattern_width = match self.config\n+                                          .max_width\n+                                          .checked_sub(pattern_offset.width() + 1) {\n                 Some(width) => width,\n                 None => return,\n             };\n@@ -73,6 +48,36 @@ impl<'a> FmtVisitor<'a> {\n                 None => return,\n             }\n \n+            // String that is placed within the assignment pattern and expression.\n+            let infix = {\n+                let mut infix = String::new();\n+\n+                if let Some(ref ty) = local.ty {\n+                    // 2 = \": \".len()\n+                    // 1 = ;\n+                    let offset = self.block_indent + result.len() + 2;\n+                    let width = match self.config.max_width.checked_sub(offset.width() + 1) {\n+                        Some(w) => w,\n+                        None => return,\n+                    };\n+                    let rewrite = ty.rewrite(&self.get_context(), width, offset);\n+\n+                    match rewrite {\n+                        Some(result) => {\n+                            infix.push_str(\": \");\n+                            infix.push_str(&result);\n+                        }\n+                        None => return,\n+                    }\n+                }\n+\n+                if local.init.is_some() {\n+                    infix.push_str(\" =\");\n+                }\n+\n+                infix\n+            };\n+\n             result.push_str(&infix);\n \n             if let Some(ref ex) = local.init {\n@@ -86,7 +91,7 @@ impl<'a> FmtVisitor<'a> {\n                 let rhs = rewrite_assign_rhs(&context, result, ex, max_width, context.block_indent);\n \n                 match rhs {\n-                    Some(result) => result,\n+                    Some(s) => s,\n                     None => return,\n                 }\n             } else {"}, {"sha": "03422a20c36d31ef268f2c608734db9ae0971f03", "filename": "src/lib.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/754925e132db97fba0ca84dc41292e4f0e56d392/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754925e132db97fba0ca84dc41292e4f0e56d392/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=754925e132db97fba0ca84dc41292e4f0e56d392", "patch": "@@ -41,7 +41,7 @@ use rustc::session::config::Input;\n use rustc_driver::{driver, CompilerCalls, Compilation};\n \n use syntax::ast;\n-use syntax::codemap::CodeMap;\n+use syntax::codemap::{CodeMap, Span};\n use syntax::diagnostics;\n \n use std::ops::{Add, Sub};\n@@ -76,11 +76,34 @@ mod modules;\n pub mod rustfmt_diff;\n mod chains;\n mod macros;\n+mod patterns;\n \n const MIN_STRING: usize = 10;\n // When we get scoped annotations, we should have rustfmt::skip.\n const SKIP_ANNOTATION: &'static str = \"rustfmt_skip\";\n \n+pub trait Spanned {\n+    fn span(&self) -> Span;\n+}\n+\n+impl Spanned for ast::Expr {\n+    fn span(&self) -> Span {\n+        self.span\n+    }\n+}\n+\n+impl Spanned for ast::Pat {\n+    fn span(&self) -> Span {\n+        self.span\n+    }\n+}\n+\n+impl Spanned for ast::Ty {\n+    fn span(&self) -> Span {\n+        self.span\n+    }\n+}\n+\n #[derive(Copy, Clone, Debug)]\n pub struct Indent {\n     // Width of the block indent, in characters. Must be a multiple of"}, {"sha": "2e90f719853fa58ad11a4f0e385dca0c29e781d4", "filename": "src/patterns.rs", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/754925e132db97fba0ca84dc41292e4f0e56d392/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754925e132db97fba0ca84dc41292e4f0e56d392/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=754925e132db97fba0ca84dc41292e4f0e56d392", "patch": "@@ -0,0 +1,95 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use Indent;\n+use rewrite::{Rewrite, RewriteContext};\n+use utils::{wrap_str, format_mutability, span_after};\n+use lists::{format_item_list, itemize_list};\n+use expr::{rewrite_unary_prefix, rewrite_pair, rewrite_tuple};\n+use types::rewrite_path;\n+\n+use syntax::ast::{PatWildKind, BindingMode, Pat, Pat_};\n+\n+// FIXME(#18): implement pattern formatting.\n+impl Rewrite for Pat {\n+    fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n+        match self.node {\n+            Pat_::PatBox(ref pat) => {\n+                rewrite_unary_prefix(context, \"box \", &**pat, width, offset)\n+            }\n+            Pat_::PatIdent(binding_mode, ident, None) => {\n+                let (prefix, mutability) = match binding_mode {\n+                    BindingMode::BindByRef(mutability) => (\"ref \", mutability),\n+                    BindingMode::BindByValue(mutability) => (\"\", mutability),\n+                };\n+                let mut_infix = format_mutability(mutability);\n+                let result = format!(\"{}{}{}\", prefix, mut_infix, ident.node);\n+                wrap_str(result, context.config.max_width, width, offset)\n+            }\n+            Pat_::PatWild(kind) => {\n+                let result = match kind {\n+                    PatWildKind::PatWildSingle => \"_\",\n+                    PatWildKind::PatWildMulti => \"..\",\n+                };\n+                if result.len() <= width {\n+                    Some(result.to_owned())\n+                } else {\n+                    None\n+                }\n+            }\n+            Pat_::PatQPath(ref q_self, ref path) => {\n+                rewrite_path(context, Some(q_self), path, width, offset)\n+            }\n+            Pat_::PatRange(ref lhs, ref rhs) => {\n+                rewrite_pair(&**lhs, &**rhs, \"\", \"...\", \"\", context, width, offset)\n+            }\n+            Pat_::PatRegion(ref pat, mutability) => {\n+                let prefix = format!(\"&{}\", format_mutability(mutability));\n+                rewrite_unary_prefix(context, &prefix, &**pat, width, offset)\n+            }\n+            Pat_::PatTup(ref items) => {\n+                rewrite_tuple(context, items, self.span, width, offset)\n+            }\n+            Pat_::PatEnum(ref path, Some(ref pat_vec)) => {\n+                let path_str = try_opt!(::types::rewrite_path(context, None, path, width, offset));\n+\n+                if pat_vec.is_empty() {\n+                    Some(path_str)\n+                } else {\n+                    let width = try_opt!(width.checked_sub(path_str.len()));\n+                    let offset = offset + path_str.len();\n+                    let items = itemize_list(context.codemap,\n+                                             pat_vec.iter(),\n+                                             \")\",\n+                                             |item| item.span.lo,\n+                                             |item| item.span.hi,\n+                                             |item| item.rewrite(context, width, offset),\n+                                             span_after(self.span, \"(\", context.codemap),\n+                                             self.span.hi);\n+                    Some(format!(\"{}({})\",\n+                                 path_str,\n+                                 try_opt!(format_item_list(items, width, offset, context.config))))\n+                }\n+            }\n+            Pat_::PatLit(ref expr) => expr.rewrite(context, width, offset),\n+            // FIXME(#8): format remaining pattern variants.\n+            Pat_::PatIdent(_, _, Some(..)) |\n+            Pat_::PatEnum(_, None) |\n+            Pat_::PatStruct(..) |\n+            Pat_::PatVec(..) |\n+            Pat_::PatMac(..) => {\n+                wrap_str(context.snippet(self.span),\n+                         context.config.max_width,\n+                         width,\n+                         offset)\n+            }\n+        }\n+    }\n+}"}, {"sha": "d8170e2f917595010a4003ec94ba79d1e55da740", "filename": "src/types.rs", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/754925e132db97fba0ca84dc41292e4f0e56d392/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754925e132db97fba0ca84dc41292e4f0e56d392/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=754925e132db97fba0ca84dc41292e4f0e56d392", "patch": "@@ -13,10 +13,10 @@ use syntax::print::pprust;\n use syntax::codemap::{self, Span, BytePos, CodeMap};\n \n use Indent;\n-use lists::{format_item_list, itemize_list, format_fn_args, list_helper, ListTactic};\n+use lists::{format_item_list, itemize_list, format_fn_args};\n use rewrite::{Rewrite, RewriteContext};\n use utils::{extra_offset, span_after, format_mutability, wrap_str};\n-use expr::{rewrite_unary_prefix, rewrite_pair};\n+use expr::{rewrite_unary_prefix, rewrite_pair, rewrite_tuple};\n \n impl Rewrite for ast::Path {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n@@ -491,28 +491,8 @@ impl Rewrite for ast::Ty {\n                 let budget = try_opt!(width.checked_sub(2));\n                 ty.rewrite(context, budget, offset + 1).map(|ty_str| format!(\"[{}]\", ty_str))\n             }\n-            ast::TyTup(ref tup_ret) => {\n-                if tup_ret.is_empty() {\n-                    Some(\"()\".to_owned())\n-                } else if let [ref item] = &**tup_ret {\n-                    let budget = try_opt!(width.checked_sub(3));\n-                    let inner = try_opt!(item.rewrite(context, budget, offset + 1));\n-                    let ret = format!(\"({},)\", inner);\n-                    wrap_str(ret, context.config.max_width, budget, offset + 1)\n-                } else {\n-                    let budget = try_opt!(width.checked_sub(2));\n-                    let items = itemize_list(context.codemap,\n-                                             tup_ret.iter(),\n-                                             \")\",\n-                                             |item| item.span.lo,\n-                                             |item| item.span.hi,\n-                                             |item| item.rewrite(context, budget, offset + 1),\n-                                             span_after(self.span, \"(\", context.codemap),\n-                                             self.span.hi);\n-\n-                    list_helper(items, budget, offset + 1, context.config, ListTactic::Mixed)\n-                        .map(|s| format!(\"({})\", s))\n-                }\n+            ast::TyTup(ref items) => {\n+                rewrite_tuple(context, items, self.span, width, offset)\n             }\n             ast::TyPolyTraitRef(ref trait_ref) => trait_ref.rewrite(context, width, offset),\n             ast::TyPath(ref q_self, ref path) => {"}, {"sha": "992d0d98bf89fd825f7c17ed3558dabc735719a8", "filename": "tests/source/match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/754925e132db97fba0ca84dc41292e4f0e56d392/tests%2Fsource%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754925e132db97fba0ca84dc41292e4f0e56d392/tests%2Fsource%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmatch.rs?ref=754925e132db97fba0ca84dc41292e4f0e56d392", "patch": "@@ -88,6 +88,7 @@ fn main() {\n \n fn matches() {\n     match 1 {\n+        -1 => 10,\n         1 => 1, // foo\n         2 => 2,\n         // bar"}, {"sha": "4192d5210851d047132d449b54b564be5aac6505", "filename": "tests/source/pattern.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/754925e132db97fba0ca84dc41292e4f0e56d392/tests%2Fsource%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754925e132db97fba0ca84dc41292e4f0e56d392/tests%2Fsource%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fpattern.rs?ref=754925e132db97fba0ca84dc41292e4f0e56d392", "patch": "@@ -0,0 +1,14 @@\n+fn main() {\n+    let z = match x {\n+        \"pat1\" => 1,\n+        ( ref  x, ref  mut  y /*comment*/) => 2,\n+    };\n+\n+    if let <  T as  Trait   > :: CONST = ident {\n+        do_smth();\n+    }\n+\n+    let Some ( ref   xyz  /*   comment!   */) = opt;\n+\n+    if let  None  =   opt2 { panic!(\"oh noes\"); }\n+}"}, {"sha": "71822bd668dc0504bb7c8ad56c6a7f8039a9915f", "filename": "tests/source/type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/754925e132db97fba0ca84dc41292e4f0e56d392/tests%2Fsource%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754925e132db97fba0ca84dc41292e4f0e56d392/tests%2Fsource%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ftype.rs?ref=754925e132db97fba0ca84dc41292e4f0e56d392", "patch": "@@ -2,4 +2,5 @@ fn types() {\n     let x: [ Vec   < _ > ] = [];\n     let y:  * mut [ SomeType ; konst_funk() ] = expr();\n     let z: (/*#digits*/ usize, /*exp*/ i16) = funk();\n+    let z: ( usize  /*#digits*/ , i16 /*exp*/ ) = funk();\n }"}, {"sha": "479a279e43b3d7eb348a33fbc2b5ad50c47c5d5f", "filename": "tests/target/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/754925e132db97fba0ca84dc41292e4f0e56d392/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754925e132db97fba0ca84dc41292e4f0e56d392/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=754925e132db97fba0ca84dc41292e4f0e56d392", "patch": "@@ -57,8 +57,8 @@ fn foo() -> bool {\n             tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1111 +\n                                                                                          2222 {}\n \n-    if let (some_very_large, tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) =\n-           1 + 2 + 3 {\n+    if let (some_very_large,\n+            tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1 + 2 + 3 {\n     }\n \n     let test = if true {"}, {"sha": "211552181116d31aebacfa250abce9b560e8be12", "filename": "tests/target/hard-tabs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/754925e132db97fba0ca84dc41292e4f0e56d392/tests%2Ftarget%2Fhard-tabs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754925e132db97fba0ca84dc41292e4f0e56d392/tests%2Ftarget%2Fhard-tabs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fhard-tabs.rs?ref=754925e132db97fba0ca84dc41292e4f0e56d392", "patch": "@@ -28,8 +28,8 @@ fn main() {\n \tlet str = \"AAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAA\\\n \t           AAAAAAAAAAAAaAa\";\n \n-\tif let (some_very_large, tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) =\n-\t       1 + 2 + 3 {\n+\tif let (some_very_large,\n+\t        tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1 + 2 + 3 {\n \t}\n \n \tif cond() {"}, {"sha": "6c498014aa1b5dded47c175aa8bc2381de997c59", "filename": "tests/target/match.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/754925e132db97fba0ca84dc41292e4f0e56d392/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754925e132db97fba0ca84dc41292e4f0e56d392/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=754925e132db97fba0ca84dc41292e4f0e56d392", "patch": "@@ -32,7 +32,16 @@ fn foo() {\n             meh,\n \n         // Test that earlier patterns can take the guard space\n-        (aaaa, bbbbb, ccccccc, aaaaa, bbbbbbbb, cccccc, aaaa, bbbbbbbb, cccccc, dddddd) |\n+        (aaaa,\n+         bbbbb,\n+         ccccccc,\n+         aaaaa,\n+         bbbbbbbb,\n+         cccccc,\n+         aaaa,\n+         bbbbbbbb,\n+         cccccc,\n+         dddddd) |\n         Patternnnnnnnnnnnnnnnnnnnnnnnnn if loooooooooooooooooooooooooooooooooooooooooong_guard => {}\n \n         _ => {}\n@@ -83,6 +92,7 @@ fn main() {\n \n fn matches() {\n     match 1 {\n+        -1 => 10,\n         1 => 1, // foo\n         2 => 2,\n         // bar"}, {"sha": "3c17eb779245636be7dcc5aa436e29c301558f34", "filename": "tests/target/multiple.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/754925e132db97fba0ca84dc41292e4f0e56d392/tests%2Ftarget%2Fmultiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754925e132db97fba0ca84dc41292e4f0e56d392/tests%2Ftarget%2Fmultiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmultiple.rs?ref=754925e132db97fba0ca84dc41292e4f0e56d392", "patch": "@@ -143,12 +143,20 @@ fn main() {\n }\n \n fn deconstruct()\n-    -> (SocketAddr, Method, Headers, RequestUri, HttpVersion,\n+    -> (SocketAddr,\n+        Method,\n+        Headers,\n+        RequestUri,\n+        HttpVersion,\n         AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)\n {\n }\n \n fn deconstruct(foo: Bar)\n-               -> (SocketAddr, Method, Headers, RequestUri, HttpVersion,\n+               -> (SocketAddr,\n+                   Method,\n+                   Headers,\n+                   RequestUri,\n+                   HttpVersion,\n                    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) {\n }"}, {"sha": "38ebe675a40875c5a87cde241237c341382f821c", "filename": "tests/target/pattern.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/754925e132db97fba0ca84dc41292e4f0e56d392/tests%2Ftarget%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754925e132db97fba0ca84dc41292e4f0e56d392/tests%2Ftarget%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fpattern.rs?ref=754925e132db97fba0ca84dc41292e4f0e56d392", "patch": "@@ -0,0 +1,16 @@\n+fn main() {\n+    let z = match x {\n+        \"pat1\" => 1,\n+        (ref x, ref mut y /* comment */) => 2,\n+    };\n+\n+    if let <T as Trait>::CONST = ident {\n+        do_smth();\n+    }\n+\n+    let Some(ref xyz /* comment! */) = opt;\n+\n+    if let None = opt2 {\n+        panic!(\"oh noes\");\n+    }\n+}"}, {"sha": "a8a5e028aa5cc5d5386364d9f1df6ef8acab7be3", "filename": "tests/target/type.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/754925e132db97fba0ca84dc41292e4f0e56d392/tests%2Ftarget%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754925e132db97fba0ca84dc41292e4f0e56d392/tests%2Ftarget%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftype.rs?ref=754925e132db97fba0ca84dc41292e4f0e56d392", "patch": "@@ -1,5 +1,9 @@\n fn types() {\n     let x: [Vec<_>] = [];\n     let y: *mut [SomeType; konst_funk()] = expr();\n-    let z: (/* #digits */ usize, /* exp */ i16) = funk();\n+    let z: (// #digits\n+            usize,\n+            // exp\n+            i16) = funk();\n+    let z: (usize /* #digits */, i16 /* exp */) = funk();\n }"}]}