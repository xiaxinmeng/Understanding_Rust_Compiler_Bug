{"sha": "9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c", "node_id": "C_kwDOAAsO6NoAKDllMGNlMTQ3MDAwNzBhNWNmNjFlYmRiNTQyY2VmZDcwYTFkZDliMGM", "commit": {"author": {"name": "Serial", "email": "69764315+Serial-ATA@users.noreply.github.com", "date": "2021-10-12T00:19:34Z"}, "committer": {"name": "Serial", "email": "69764315+Serial-ATA@users.noreply.github.com", "date": "2021-10-12T00:19:34Z"}, "message": "Add match_str_case_mismatch lint", "tree": {"sha": "fc85aa6be548957cd61ea83a0e9802366bc96f6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc85aa6be548957cd61ea83a0e9802366bc96f6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c", "html_url": "https://github.com/rust-lang/rust/commit/9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c/comments", "author": {"login": "Serial-ATA", "id": 69764315, "node_id": "MDQ6VXNlcjY5NzY0MzE1", "avatar_url": "https://avatars.githubusercontent.com/u/69764315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Serial-ATA", "html_url": "https://github.com/Serial-ATA", "followers_url": "https://api.github.com/users/Serial-ATA/followers", "following_url": "https://api.github.com/users/Serial-ATA/following{/other_user}", "gists_url": "https://api.github.com/users/Serial-ATA/gists{/gist_id}", "starred_url": "https://api.github.com/users/Serial-ATA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Serial-ATA/subscriptions", "organizations_url": "https://api.github.com/users/Serial-ATA/orgs", "repos_url": "https://api.github.com/users/Serial-ATA/repos", "events_url": "https://api.github.com/users/Serial-ATA/events{/privacy}", "received_events_url": "https://api.github.com/users/Serial-ATA/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Serial-ATA", "id": 69764315, "node_id": "MDQ6VXNlcjY5NzY0MzE1", "avatar_url": "https://avatars.githubusercontent.com/u/69764315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Serial-ATA", "html_url": "https://github.com/Serial-ATA", "followers_url": "https://api.github.com/users/Serial-ATA/followers", "following_url": "https://api.github.com/users/Serial-ATA/following{/other_user}", "gists_url": "https://api.github.com/users/Serial-ATA/gists{/gist_id}", "starred_url": "https://api.github.com/users/Serial-ATA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Serial-ATA/subscriptions", "organizations_url": "https://api.github.com/users/Serial-ATA/orgs", "repos_url": "https://api.github.com/users/Serial-ATA/repos", "events_url": "https://api.github.com/users/Serial-ATA/events{/privacy}", "received_events_url": "https://api.github.com/users/Serial-ATA/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72723663a385fadba0614a2e79be4955e2fffbb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/72723663a385fadba0614a2e79be4955e2fffbb5", "html_url": "https://github.com/rust-lang/rust/commit/72723663a385fadba0614a2e79be4955e2fffbb5"}], "stats": {"total": 323, "additions": 323, "deletions": 0}, "files": [{"sha": "1f79d9e73db560633418439abf96879b9c148396", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c", "patch": "@@ -2837,6 +2837,7 @@ Released 2018-09-13\n [`match_result_ok`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_result_ok\n [`match_same_arms`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms\n [`match_single_binding`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_single_binding\n+[`match_str_case_mismatch`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_str_case_mismatch\n [`match_wild_err_arm`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_wild_err_arm\n [`match_wildcard_for_single_variants`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_wildcard_for_single_variants\n [`maybe_infinite_iter`]: https://rust-lang.github.io/rust-clippy/master/index.html#maybe_infinite_iter"}, {"sha": "e544c6607e8d148a07b905bd59a230e29cdfe130", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c", "patch": "@@ -118,6 +118,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(map_unit_fn::OPTION_MAP_UNIT_FN),\n     LintId::of(map_unit_fn::RESULT_MAP_UNIT_FN),\n     LintId::of(match_result_ok::MATCH_RESULT_OK),\n+    LintId::of(match_str_case_mismatch::MATCH_STR_CASE_MISMATCH),\n     LintId::of(matches::INFALLIBLE_DESTRUCTURING_MATCH),\n     LintId::of(matches::MATCH_AS_REF),\n     LintId::of(matches::MATCH_LIKE_MATCHES_MACRO),"}, {"sha": "1c2441d1af251b282cd6a1f90f78617bba906aa2", "filename": "clippy_lints/src/lib.register_correctness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_correctness.rs?ref=9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c", "patch": "@@ -36,6 +36,7 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(loops::ITER_NEXT_LOOP),\n     LintId::of(loops::NEVER_LOOP),\n     LintId::of(loops::WHILE_IMMUTABLE_CONDITION),\n+    LintId::of(match_str_case_mismatch::MATCH_STR_CASE_MISMATCH),\n     LintId::of(mem_discriminant::MEM_DISCRIMINANT_NON_ENUM),\n     LintId::of(mem_replace::MEM_REPLACE_WITH_UNINIT),\n     LintId::of(methods::CLONE_DOUBLE_REF),"}, {"sha": "d5673ad2c7cebc62becb7b99c0cd838c54642b09", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c", "patch": "@@ -226,6 +226,7 @@ store.register_lints(&[\n     map_unit_fn::RESULT_MAP_UNIT_FN,\n     match_on_vec_items::MATCH_ON_VEC_ITEMS,\n     match_result_ok::MATCH_RESULT_OK,\n+    match_str_case_mismatch::MATCH_STR_CASE_MISMATCH,\n     matches::INFALLIBLE_DESTRUCTURING_MATCH,\n     matches::MATCH_AS_REF,\n     matches::MATCH_BOOL,"}, {"sha": "73d21eb5b52f8ca9a660d33e9cbbd1c45c12c7a2", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c", "patch": "@@ -265,6 +265,7 @@ mod map_err_ignore;\n mod map_unit_fn;\n mod match_on_vec_items;\n mod match_result_ok;\n+mod match_str_case_mismatch;\n mod matches;\n mod mem_discriminant;\n mod mem_forget;\n@@ -771,6 +772,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let enable_raw_pointer_heuristic_for_send = conf.enable_raw_pointer_heuristic_for_send;\n     store.register_late_pass(move || Box::new(non_send_fields_in_send_ty::NonSendFieldInSendTy::new(enable_raw_pointer_heuristic_for_send)));\n     store.register_late_pass(move || Box::new(undocumented_unsafe_blocks::UndocumentedUnsafeBlocks::default()));\n+    store.register_late_pass(|| Box::new(match_str_case_mismatch::MatchStrCaseMismatch));\n }\n \n #[rustfmt::skip]"}, {"sha": "dd8b5cb4a21a23e2fa35829e1bd7f36d5cea96ca", "filename": "clippy_lints/src/match_str_case_mismatch.rs", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c/clippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c/clippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs?ref=9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c", "patch": "@@ -0,0 +1,166 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use rustc_ast::ast::LitKind;\n+use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::{Arm, Expr, ExprKind, MatchSource, PatKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::map::Map;\n+use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::{sym, Span};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `match` expressions modifying the case of a string with non-compliant arms\n+    ///\n+    /// ### Why is this bad?\n+    /// The arm is unreachable, which is likely a mistake\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// match &*text.to_ascii_lowercase() {\n+    ///     \"foo\" => {},\n+    ///     \"Bar\" => {},\n+    ///     _ => {},\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// match &*text.to_ascii_lowercase() {\n+    ///     \"foo\" => {},\n+    ///     \"bar\" => {},\n+    ///     _ => {},\n+    /// }\n+    /// ```\n+    pub MATCH_STR_CASE_MISMATCH,\n+    correctness,\n+    \"creation of a case altering match expression with non-compliant arms\"\n+}\n+\n+declare_lint_pass!(MatchStrCaseMismatch => [MATCH_STR_CASE_MISMATCH]);\n+\n+#[derive(Debug)]\n+enum CaseMethod {\n+    LowerCase,\n+    AsciiLowerCase,\n+    UpperCase,\n+    AsciiUppercase,\n+}\n+\n+impl LateLintPass<'_> for MatchStrCaseMismatch {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if_chain! {\n+            if !in_external_macro(cx.tcx.sess, expr.span);\n+            if let ExprKind::Match(match_expr, arms, MatchSource::Normal) = expr.kind;\n+            if let ty::Ref(_, ty, _) = cx.typeck_results().expr_ty(match_expr).kind();\n+            if let ty::Str = ty.kind();\n+            then {\n+                let mut visitor = MatchExprVisitor {\n+                    cx,\n+                    case_method: None,\n+                };\n+\n+                visitor.visit_expr(match_expr);\n+\n+                if let Some(case_method) = visitor.case_method {\n+                    if let Some(bad_case) = verify_case(&case_method, arms) {\n+                        lint(cx, expr.span, &case_method, bad_case);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+struct MatchExprVisitor<'a, 'tcx> {\n+    cx: &'a LateContext<'tcx>,\n+    case_method: Option<CaseMethod>,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for MatchExprVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+\n+    fn visit_expr(&mut self, ex: &'tcx Expr<'_>) {\n+        match ex.kind {\n+            ExprKind::MethodCall(segment, _, [receiver], _)\n+                if self.case_altered(&*segment.ident.as_str(), receiver) => {},\n+            _ => walk_expr(self, ex),\n+        }\n+    }\n+}\n+\n+impl<'a, 'tcx> MatchExprVisitor<'a, 'tcx> {\n+    fn case_altered(&mut self, segment_ident: &str, receiver: &Expr<'_>) -> bool {\n+        if let Some(case_method) = get_case_method(segment_ident) {\n+            let ty = self.cx.typeck_results().expr_ty(receiver).peel_refs();\n+\n+            if is_type_diagnostic_item(self.cx, ty, sym::String) || ty.kind() == &ty::Str {\n+                self.case_method = Some(case_method);\n+                return true;\n+            }\n+        }\n+\n+        false\n+    }\n+}\n+\n+fn get_case_method(segment_ident_str: &str) -> Option<CaseMethod> {\n+    match segment_ident_str {\n+        \"to_lowercase\" => Some(CaseMethod::LowerCase),\n+        \"to_ascii_lowercase\" => Some(CaseMethod::AsciiLowerCase),\n+        \"to_uppercase\" => Some(CaseMethod::UpperCase),\n+        \"to_ascii_uppercase\" => Some(CaseMethod::AsciiUppercase),\n+        _ => None,\n+    }\n+}\n+\n+fn verify_case(case_method: &CaseMethod, arms: &'_ [Arm<'_>]) -> Option<Span> {\n+    let mut bad_case = None;\n+\n+    let case_check = match case_method {\n+        CaseMethod::LowerCase => |input: &str| -> bool { input.chars().all(char::is_lowercase) },\n+        CaseMethod::AsciiLowerCase => |input: &str| -> bool { input.chars().all(|c| matches!(c, 'a'..='z')) },\n+        CaseMethod::UpperCase => |input: &str| -> bool { input.chars().all(char::is_uppercase) },\n+        CaseMethod::AsciiUppercase => |input: &str| -> bool { input.chars().all(|c| matches!(c, 'A'..='Z')) },\n+    };\n+\n+    for arm in arms {\n+        if_chain! {\n+            if let PatKind::Lit(Expr {\n+                                kind: ExprKind::Lit(lit),\n+                                ..\n+                            }) = arm.pat.kind;\n+            if let LitKind::Str(symbol, _) = lit.node;\n+            if !case_check(&symbol.as_str());\n+            then {\n+                bad_case = Some(lit.span);\n+                break;\n+            }\n+        }\n+    }\n+\n+    bad_case\n+}\n+\n+fn lint(cx: &LateContext<'_>, expr_span: Span, case_method: &CaseMethod, bad_case_span: Span) {\n+    let method_str = match case_method {\n+        CaseMethod::LowerCase => \"to_lower_case\",\n+        CaseMethod::AsciiLowerCase => \"to_ascii_lowercase\",\n+        CaseMethod::UpperCase => \"to_uppercase\",\n+        CaseMethod::AsciiUppercase => \"to_ascii_uppercase\",\n+    };\n+\n+    span_lint_and_help(\n+        cx,\n+        MATCH_STR_CASE_MISMATCH,\n+        expr_span,\n+        \"this `match` expression alters case, but has non-compliant arms\",\n+        Some(bad_case_span),\n+        &*format!(\"consider changing the case of this arm to respect `{}`\", method_str),\n+    );\n+}"}, {"sha": "208a4bba3d23c40d5cf2cbe4a2f650c18ba584b5", "filename": "tests/ui/match_str_case_mismatch.rs", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c/tests%2Fui%2Fmatch_str_case_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c/tests%2Fui%2Fmatch_str_case_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_str_case_mismatch.rs?ref=9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c", "patch": "@@ -0,0 +1,98 @@\n+#![warn(clippy::match_str_case_mismatch)]\n+\n+// Valid\n+\n+fn as_str_match() {\n+    let var = \"BAR\";\n+\n+    match var.to_ascii_lowercase().as_str() {\n+        \"foo\" => {},\n+        \"bar\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn addrof_unary_match() {\n+    let var = \"BAR\";\n+\n+    match &*var.to_ascii_lowercase() {\n+        \"foo\" => {},\n+        \"bar\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn alternating_chain() {\n+    let var = \"BAR\";\n+\n+    match &*var\n+        .to_ascii_lowercase()\n+        .to_uppercase()\n+        .to_lowercase()\n+        .to_ascii_uppercase()\n+    {\n+        \"FOO\" => {},\n+        \"BAR\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn unrelated_method() {\n+    struct Item {\n+        a: String,\n+    }\n+\n+    impl Item {\n+        #[allow(clippy::wrong_self_convention)]\n+        fn to_lowercase(self) -> String {\n+            self.a\n+        }\n+    }\n+\n+    let item = Item { a: String::from(\"BAR\") };\n+\n+    match &*item.to_lowercase() {\n+        \"FOO\" => {},\n+        \"BAR\" => {},\n+        _ => {},\n+    }\n+}\n+\n+// Invalid\n+\n+fn as_str_match_mismatch() {\n+    let var = \"BAR\";\n+\n+    match var.to_ascii_lowercase().as_str() {\n+        \"foo\" => {},\n+        \"Bar\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn addrof_unary_match_mismatch() {\n+    let var = \"BAR\";\n+\n+    match &*var.to_ascii_lowercase() {\n+        \"foo\" => {},\n+        \"Bar\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn alternating_chain_mismatch() {\n+    let var = \"BAR\";\n+\n+    match &*var\n+        .to_ascii_lowercase()\n+        .to_uppercase()\n+        .to_lowercase()\n+        .to_ascii_uppercase()\n+    {\n+        \"FOO\" => {},\n+        \"bAR\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a5eab1f72f39f5ce73176df0667146f311055d0b", "filename": "tests/ui/match_str_case_mismatch.stderr", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c/tests%2Fui%2Fmatch_str_case_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c/tests%2Fui%2Fmatch_str_case_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_str_case_mismatch.stderr?ref=9e0ce14700070a5cf61ebdb542cefd70a1dd9b0c", "patch": "@@ -0,0 +1,53 @@\n+error: this `match` expression alters case, but has non-compliant arms\n+  --> $DIR/match_str_case_mismatch.rs:66:5\n+   |\n+LL | /     match var.to_ascii_lowercase().as_str() {\n+LL | |         \"foo\" => {},\n+LL | |         \"Bar\" => {},\n+LL | |         _ => {},\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: `-D clippy::match-str-case-mismatch` implied by `-D warnings`\n+help: consider changing the case of this arm to respect `to_ascii_lowercase`\n+  --> $DIR/match_str_case_mismatch.rs:68:9\n+   |\n+LL |         \"Bar\" => {},\n+   |         ^^^^^\n+\n+error: this `match` expression alters case, but has non-compliant arms\n+  --> $DIR/match_str_case_mismatch.rs:76:5\n+   |\n+LL | /     match &*var.to_ascii_lowercase() {\n+LL | |         \"foo\" => {},\n+LL | |         \"Bar\" => {},\n+LL | |         _ => {},\n+LL | |     }\n+   | |_____^\n+   |\n+help: consider changing the case of this arm to respect `to_ascii_lowercase`\n+  --> $DIR/match_str_case_mismatch.rs:78:9\n+   |\n+LL |         \"Bar\" => {},\n+   |         ^^^^^\n+\n+error: this `match` expression alters case, but has non-compliant arms\n+  --> $DIR/match_str_case_mismatch.rs:86:5\n+   |\n+LL | /     match &*var\n+LL | |         .to_ascii_lowercase()\n+LL | |         .to_uppercase()\n+LL | |         .to_lowercase()\n+...  |\n+LL | |         _ => {},\n+LL | |     }\n+   | |_____^\n+   |\n+help: consider changing the case of this arm to respect `to_ascii_uppercase`\n+  --> $DIR/match_str_case_mismatch.rs:93:9\n+   |\n+LL |         \"bAR\" => {},\n+   |         ^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}]}