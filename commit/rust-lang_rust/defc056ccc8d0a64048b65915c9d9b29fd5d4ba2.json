{"sha": "defc056ccc8d0a64048b65915c9d9b29fd5d4ba2", "node_id": "C_kwDOAAsO6NoAKGRlZmMwNTZjY2M4ZDBhNjQwNDhiNjU5MTVjOWQ5YjI5ZmQ1ZDRiYTI", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-02-18T11:00:16Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-03-02T16:46:12Z"}, "message": "Address review comments", "tree": {"sha": "0baea5405b7a0ffb4f8ccfad2fcd88b84dde21b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0baea5405b7a0ffb4f8ccfad2fcd88b84dde21b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/defc056ccc8d0a64048b65915c9d9b29fd5d4ba2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEsfZNmu/fmIv8KDcv/Ny/Ka9k1gEFAmIfn1QACgkQ/Ny/Ka9k\n1gHItRAAqvqLFKy1ESQh7PDavzPBlZ/aTcZbuiv8DLdn2EYpkXs5YL89jqJAlKda\nfav30+/9WZmL7J0azJuyyEFq4T1M7JAeylFnraJbJ2TTAZLWcoLKtE5FIdwDI8th\n4Hr22R+1g+Y2svh9vOG0hI94L2/AFsQ3DZQm3nr9B7GAyND7I3sFyh5qF26I+UBA\n8ByAwJTofK4K3rXSHAoHtRu+Jr/2JlSZtkNusTOK+wC44QJVRJ1DHG+lxeJupG5w\nuT7GIqIXomF1oUm2ZyMbXJlEkvlpI+/Xknz47SQQMg0dy+FLP7UT6SvPjE8SqStf\nTqK6vAyTmC5dgJXewYMtn4pJF+CzFN13giQpkxm08UFxKCJ3q/8gS+M3+L6cWjDr\nMWcapF1aKD2Q5OU3jMjLsjKGIvOP4p74PUqoeys6LgQfpeDkdkynbWa50a04fYL3\nokOwYejp4OFCuG9xscCBzEYooEwaS4wZ3C0qszNPWg5lRH5KjOWib+dst3nHwqHX\nPtzAPVg+odGcj71acyTAm1Brl8ieMTWT6068ftyMrhBGXj2a41L1w17XgaEoNqMi\nNiGvI4CrCOGLWo25xx+wT6ohusSo0jl1c5fo07BW9hyjetsNoKn2J3oDoB3cNexG\n0nZnZoG+AJdJAFDeJrAoUmiy6dwwy1l2HxY+buAwd7sBHCo2ov8=\n=puIz\n-----END PGP SIGNATURE-----", "payload": "tree 0baea5405b7a0ffb4f8ccfad2fcd88b84dde21b2\nparent 4887eb7b2d0e427a0dbf07bfade329101389e32a\nauthor xFrednet <xFrednet@gmail.com> 1645182016 +0100\ncommitter xFrednet <xFrednet@gmail.com> 1646239572 +0100\n\nAddress review comments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/defc056ccc8d0a64048b65915c9d9b29fd5d4ba2", "html_url": "https://github.com/rust-lang/rust/commit/defc056ccc8d0a64048b65915c9d9b29fd5d4ba2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/defc056ccc8d0a64048b65915c9d9b29fd5d4ba2/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4887eb7b2d0e427a0dbf07bfade329101389e32a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4887eb7b2d0e427a0dbf07bfade329101389e32a", "html_url": "https://github.com/rust-lang/rust/commit/4887eb7b2d0e427a0dbf07bfade329101389e32a"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "5a9b89d31d12f9acd16201cbc4426945209af532", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/defc056ccc8d0a64048b65915c9d9b29fd5d4ba2/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defc056ccc8d0a64048b65915c9d9b29fd5d4ba2/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=defc056ccc8d0a64048b65915c9d9b29fd5d4ba2", "patch": "@@ -947,8 +947,8 @@ impl Handler {\n                 .get_expectation_id()\n                 .expect(\"all diagnostics inside `unstable_expect_diagnostics` must have a `LintExpectationId`\");\n \n-            // The unstable to stable map only maps the unstable it to a stable id\n-            // the lint index is manually transferred here.\n+            // The unstable to stable map only maps the unstable `AttrId` to a stable `HirId` with an attribute index.\n+            // The lint index inside the attribute is manually transferred here.\n             let lint_index = unstable_id.get_lint_index();\n             unstable_id.set_lint_index(None);\n             let mut stable_id = *unstable_to_stable\n@@ -966,6 +966,10 @@ impl Handler {\n     /// This methods steals all [`LintExpectationId`]s that are stored inside\n     /// [`HandlerInner`] and indicate that the linked expectation has been fulfilled.\n     pub fn steal_fulfilled_expectation_ids(&self) -> FxHashSet<LintExpectationId> {\n+        assert!(\n+            self.inner.borrow().unstable_expect_diagnostics.is_empty(),\n+            \"`HandlerInner::unstable_expect_diagnostics` should be empty at this point\",\n+        );\n         std::mem::take(&mut self.inner.borrow_mut().fulfilled_expectations)\n     }\n }"}, {"sha": "c78428765bb8984e7e7964f0aa41d6f1046702e5", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/defc056ccc8d0a64048b65915c9d9b29fd5d4ba2/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defc056ccc8d0a64048b65915c9d9b29fd5d4ba2/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=defc056ccc8d0a64048b65915c9d9b29fd5d4ba2", "patch": "@@ -142,12 +142,12 @@ impl<HCX: rustc_hir::HashStableContext> ToStableHashKey<HCX> for LintExpectation\n pub enum Level {\n     /// The `allow` level will not issue any message.\n     Allow,\n-    /// The `expect` level will suppress the lint message but intern produce a message\n+    /// The `expect` level will suppress the lint message but in turn produce a message\n     /// if the lint wasn't issued in the expected scope. `Expect` should not be used as\n     /// an initial level for a lint.\n     ///\n     /// Note that this still means that the lint is enabled in this position and should\n-    /// be emitted, this will intern fulfill the expectation and suppress the lint.\n+    /// be emitted, this will in turn fulfill the expectation and suppress the lint.\n     ///\n     /// See RFC 2383.\n     ///"}, {"sha": "cc99e4dfac96d51fbfa0a0cb29d4e4cc5a5cb44a", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/defc056ccc8d0a64048b65915c9d9b29fd5d4ba2/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defc056ccc8d0a64048b65915c9d9b29fd5d4ba2/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=defc056ccc8d0a64048b65915c9d9b29fd5d4ba2", "patch": "@@ -387,7 +387,7 @@ pub fn struct_lint_level<'s, 'd>(\n \n         // Lint diagnostics that are covered by the expect level will not be emitted outside\n         // the compiler. It is therefore not necessary to add any information for the user.\n-        // This will therefore directly call the decorate function which will intern emit\n+        // This will therefore directly call the decorate function which will in turn emit\n         // the `Diagnostic`.\n         if let Level::Expect(_) = level {\n             let name = lint.name_lower();"}]}