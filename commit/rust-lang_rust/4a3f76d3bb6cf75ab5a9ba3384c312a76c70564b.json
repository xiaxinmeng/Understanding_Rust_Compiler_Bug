{"sha": "4a3f76d3bb6cf75ab5a9ba3384c312a76c70564b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhM2Y3NmQzYmI2Y2Y3NWFiNWE5YmEzMzg0YzMxMmE3NmM3MDU2NGI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-01T18:17:52Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-01T19:15:35Z"}, "message": "wip", "tree": {"sha": "574999b6faed298abef814cdd494e002002aa31c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/574999b6faed298abef814cdd494e002002aa31c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a3f76d3bb6cf75ab5a9ba3384c312a76c70564b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a3f76d3bb6cf75ab5a9ba3384c312a76c70564b", "html_url": "https://github.com/rust-lang/rust/commit/4a3f76d3bb6cf75ab5a9ba3384c312a76c70564b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a3f76d3bb6cf75ab5a9ba3384c312a76c70564b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8d419ee898053777f9b615e122bd7e31142e2fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8d419ee898053777f9b615e122bd7e31142e2fe", "html_url": "https://github.com/rust-lang/rust/commit/f8d419ee898053777f9b615e122bd7e31142e2fe"}], "stats": {"total": 96, "additions": 49, "deletions": 47}, "files": [{"sha": "27a76a293c45353d437f303eaf77a773c50feec8", "filename": "crates/ra_hir/src/module/nameres.rs", "status": "modified", "additions": 45, "deletions": 44, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/4a3f76d3bb6cf75ab5a9ba3384c312a76c70564b/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3f76d3bb6cf75ab5a9ba3384c312a76c70564b/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs?ref=4a3f76d3bb6cf75ab5a9ba3384c312a76c70564b", "patch": "@@ -25,13 +25,12 @@ use ra_syntax::{\n use ra_db::SourceRootId;\n \n use crate::{\n-    Cancelable, FileId,\n+    Cancelable, MFileId, FileId,\n     DefId, DefLoc, DefKind,\n     SourceItemId, SourceFileItemId, SourceFileItems,\n     Path, PathKind,\n     HirDatabase, Crate,\n     Name, AsName,\n-    macros::MacroCallLoc,\n     module::{Module, ModuleId, ModuleTree},\n };\n \n@@ -71,7 +70,7 @@ pub struct InputModuleItems {\n \n #[derive(Debug, PartialEq, Eq)]\n struct ModuleItem {\n-    id: SourceFileItemId,\n+    id: SourceItemId,\n     name: Name,\n     kind: SyntaxKind,\n     vis: Vis,\n@@ -210,34 +209,44 @@ impl<T> PerNs<T> {\n }\n \n impl InputModuleItems {\n-    pub(crate) fn new<'a>(\n+    pub(crate) fn add_item(\n+        &mut self,\n+        mfile_id: MFileId,\n         file_items: &SourceFileItems,\n-        items: impl Iterator<Item = ast::ModuleItem<'a>>,\n-    ) -> InputModuleItems {\n-        let mut res = InputModuleItems::default();\n-        for item in items {\n-            res.add_item(file_items, item);\n-        }\n-        res\n-    }\n-\n-    fn add_item(&mut self, file_items: &SourceFileItems, item: ast::ModuleItem) -> Option<()> {\n+        item: ast::ModuleItem,\n+    ) -> Option<()> {\n         match item {\n-            ast::ModuleItem::StructDef(it) => self.items.push(ModuleItem::new(file_items, it)?),\n-            ast::ModuleItem::EnumDef(it) => self.items.push(ModuleItem::new(file_items, it)?),\n-            ast::ModuleItem::FnDef(it) => self.items.push(ModuleItem::new(file_items, it)?),\n-            ast::ModuleItem::TraitDef(it) => self.items.push(ModuleItem::new(file_items, it)?),\n-            ast::ModuleItem::TypeDef(it) => self.items.push(ModuleItem::new(file_items, it)?),\n+            ast::ModuleItem::StructDef(it) => {\n+                self.items.push(ModuleItem::new(mfile_id, file_items, it)?)\n+            }\n+            ast::ModuleItem::EnumDef(it) => {\n+                self.items.push(ModuleItem::new(mfile_id, file_items, it)?)\n+            }\n+            ast::ModuleItem::FnDef(it) => {\n+                self.items.push(ModuleItem::new(mfile_id, file_items, it)?)\n+            }\n+            ast::ModuleItem::TraitDef(it) => {\n+                self.items.push(ModuleItem::new(mfile_id, file_items, it)?)\n+            }\n+            ast::ModuleItem::TypeDef(it) => {\n+                self.items.push(ModuleItem::new(mfile_id, file_items, it)?)\n+            }\n             ast::ModuleItem::ImplItem(_) => {\n                 // impls don't define items\n             }\n             ast::ModuleItem::UseItem(it) => self.add_use_item(file_items, it),\n             ast::ModuleItem::ExternCrateItem(_) => {\n                 // TODO\n             }\n-            ast::ModuleItem::ConstDef(it) => self.items.push(ModuleItem::new(file_items, it)?),\n-            ast::ModuleItem::StaticDef(it) => self.items.push(ModuleItem::new(file_items, it)?),\n-            ast::ModuleItem::Module(it) => self.items.push(ModuleItem::new(file_items, it)?),\n+            ast::ModuleItem::ConstDef(it) => {\n+                self.items.push(ModuleItem::new(mfile_id, file_items, it)?)\n+            }\n+            ast::ModuleItem::StaticDef(it) => {\n+                self.items.push(ModuleItem::new(mfile_id, file_items, it)?)\n+            }\n+            ast::ModuleItem::Module(it) => {\n+                self.items.push(ModuleItem::new(mfile_id, file_items, it)?)\n+            }\n         }\n         Some(())\n     }\n@@ -259,11 +268,16 @@ impl InputModuleItems {\n }\n \n impl ModuleItem {\n-    fn new<'a>(file_items: &SourceFileItems, item: impl ast::NameOwner<'a>) -> Option<ModuleItem> {\n+    fn new<'a>(\n+        mfile_id: MFileId,\n+        file_items: &SourceFileItems,\n+        item: impl ast::NameOwner<'a>,\n+    ) -> Option<ModuleItem> {\n         let name = item.name()?.as_name();\n         let kind = item.syntax().kind();\n         let vis = Vis::Other;\n-        let id = file_items.id_of_unchecked(item.syntax());\n+        let item_id = Some(file_items.id_of_unchecked(item.syntax()));\n+        let id = SourceItemId { mfile_id, item_id };\n         let res = ModuleItem {\n             id,\n             name,\n@@ -303,7 +317,7 @@ where\n \n     pub(crate) fn resolve(mut self) -> Cancelable<ItemMap> {\n         for (&module_id, items) in self.input.iter() {\n-            self.populate_module(module_id, items)?;\n+            self.populate_module(module_id, Arc::clone(items))?;\n         }\n \n         for &module_id in self.input.keys() {\n@@ -313,9 +327,11 @@ where\n         Ok(self.result)\n     }\n \n-    fn populate_module(&mut self, module_id: ModuleId, input: &InputModuleItems) -> Cancelable<()> {\n-        let file_id = module_id.source(&self.module_tree).file_id();\n-\n+    fn populate_module(\n+        &mut self,\n+        module_id: ModuleId,\n+        input: Arc<InputModuleItems>,\n+    ) -> Cancelable<()> {\n         let mut module_items = ModuleScope::default();\n \n         // Populate extern crates prelude\n@@ -355,18 +371,6 @@ where\n             if item.kind == MODULE {\n                 continue;\n             }\n-            if item.kind == MACRO_CALL {\n-                let loc = MacroCallLoc {\n-                    source_root_id: self.source_root,\n-                    module_id,\n-                    source_item_id: SourceItemId {\n-                        mfile_id: file_id.into(),\n-                        item_id: Some(item.id),\n-                    },\n-                };\n-                let id = loc.id(self.db);\n-                continue;\n-            }\n             // depending on the item kind, the location can define something in\n             // the values namespace, the types namespace, or both\n             let kind = DefKind::for_syntax_kind(item.kind);\n@@ -375,10 +379,7 @@ where\n                     kind: k,\n                     source_root_id: self.source_root,\n                     module_id,\n-                    source_item_id: SourceItemId {\n-                        mfile_id: file_id.into(),\n-                        item_id: Some(item.id),\n-                    },\n+                    source_item_id: item.id,\n                 };\n                 def_loc.id(self.db)\n             });"}, {"sha": "3c90e29fe0f392bab96dd282b76a513274be73fb", "filename": "crates/ra_hir/src/query_definitions.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a3f76d3bb6cf75ab5a9ba3384c312a76c70564b/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3f76d3bb6cf75ab5a9ba3384c312a76c70564b/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs?ref=4a3f76d3bb6cf75ab5a9ba3384c312a76c70564b", "patch": "@@ -128,19 +128,20 @@ pub(super) fn input_module_items(\n ) -> Cancelable<Arc<InputModuleItems>> {\n     let module_tree = db.module_tree(source_root)?;\n     let source = module_id.source(&module_tree);\n-    let file_items = db.file_items(source.file_id().into());\n+    let mfile_id = source.file_id().into();\n+    let file_items = db.file_items(mfile_id);\n     let res = match source.resolve(db) {\n         ModuleSourceNode::SourceFile(it) => {\n             let items = it.borrowed().items();\n-            InputModuleItems::new(&file_items, items)\n+            InputModuleItems::new(mfile_id, &file_items, items)\n         }\n         ModuleSourceNode::Module(it) => {\n             let items = it\n                 .borrowed()\n                 .item_list()\n                 .into_iter()\n                 .flat_map(|it| it.items());\n-            InputModuleItems::new(&file_items, items)\n+            InputModuleItems::new(mfile_id, &file_items, items)\n         }\n     };\n     Ok(Arc::new(res))"}]}