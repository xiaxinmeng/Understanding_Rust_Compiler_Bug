{"sha": "eab3b05b622890228e001feff5f5751196cc12ed", "node_id": "C_kwDOAAsO6NoAKGVhYjNiMDViNjIyODkwMjI4ZTAwMWZlZmY1ZjU3NTExOTZjYzEyZWQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-08T19:09:09Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-08T19:09:09Z"}, "message": "Synthetize a trait ref when none is available.", "tree": {"sha": "23c51c3a6ed0e744005772e30534709885f05c55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23c51c3a6ed0e744005772e30534709885f05c55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eab3b05b622890228e001feff5f5751196cc12ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eab3b05b622890228e001feff5f5751196cc12ed", "html_url": "https://github.com/rust-lang/rust/commit/eab3b05b622890228e001feff5f5751196cc12ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eab3b05b622890228e001feff5f5751196cc12ed/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6cfabc88a79fe039a9c3d0c541f6517fb9767e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6cfabc88a79fe039a9c3d0c541f6517fb9767e2", "html_url": "https://github.com/rust-lang/rust/commit/a6cfabc88a79fe039a9c3d0c541f6517fb9767e2"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "af33c1a6ada7431a99e214ec6fa97b014829c416", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eab3b05b622890228e001feff5f5751196cc12ed/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab3b05b622890228e001feff5f5751196cc12ed/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=eab3b05b622890228e001feff5f5751196cc12ed", "patch": "@@ -348,13 +348,13 @@ where\n     fn make_final_bounds(\n         &self,\n         ty_to_bounds: FxHashMap<Type, FxHashSet<GenericBound>>,\n-        ty_to_fn: FxHashMap<Type, (Option<PolyTrait>, Option<Type>)>,\n+        ty_to_fn: FxHashMap<Type, (PolyTrait, Option<Type>)>,\n         lifetime_to_bounds: FxHashMap<Lifetime, FxHashSet<GenericBound>>,\n     ) -> Vec<WherePredicate> {\n         ty_to_bounds\n             .into_iter()\n             .flat_map(|(ty, mut bounds)| {\n-                if let Some((Some(ref poly_trait), ref output)) = ty_to_fn.get(&ty) {\n+                if let Some((ref poly_trait, ref output)) = ty_to_fn.get(&ty) {\n                     let mut new_path = poly_trait.trait_.clone();\n                     let last_segment = new_path.segments.pop().expect(\"segments were empty\");\n \n@@ -473,7 +473,7 @@ where\n         let mut lifetime_to_bounds: FxHashMap<_, FxHashSet<_>> = Default::default();\n         let mut ty_to_traits: FxHashMap<Type, FxHashSet<Path>> = Default::default();\n \n-        let mut ty_to_fn: FxHashMap<Type, (Option<PolyTrait>, Option<Type>)> = Default::default();\n+        let mut ty_to_fn: FxHashMap<Type, (PolyTrait, Option<Type>)> = Default::default();\n \n         for p in clean_where_predicates {\n             let (orig_p, p) = (p, p.clean(self.cx));\n@@ -537,8 +537,8 @@ where\n                         if is_fn {\n                             ty_to_fn\n                                 .entry(ty.clone())\n-                                .and_modify(|e| *e = (Some(poly_trait.clone()), e.1.clone()))\n-                                .or_insert(((Some(poly_trait.clone())), None));\n+                                .and_modify(|e| *e = (poly_trait.clone(), e.1.clone()))\n+                                .or_insert(((poly_trait.clone()), None));\n \n                             ty_to_bounds.entry(ty.clone()).or_default();\n                         } else {\n@@ -561,7 +561,13 @@ where\n                                     .and_modify(|e| {\n                                         *e = (e.0.clone(), Some(rhs.ty().unwrap().clone()))\n                                     })\n-                                    .or_insert((None, Some(rhs.ty().unwrap().clone())));\n+                                    .or_insert((\n+                                        PolyTrait {\n+                                            trait_: trait_.clone(),\n+                                            generic_params: Vec::new(),\n+                                        },\n+                                        Some(rhs.ty().unwrap().clone()),\n+                                    ));\n                                 continue;\n                             }\n "}, {"sha": "d5d5838d37580f15b7e1a976334a15bc4eab17ba", "filename": "src/test/rustdoc/fn-bound.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eab3b05b622890228e001feff5f5751196cc12ed/src%2Ftest%2Frustdoc%2Ffn-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab3b05b622890228e001feff5f5751196cc12ed/src%2Ftest%2Frustdoc%2Ffn-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ffn-bound.rs?ref=eab3b05b622890228e001feff5f5751196cc12ed", "patch": "@@ -4,10 +4,12 @@ pub struct Span<F: Fn(&i32)> {\n     inner: Peekable<ConditionalIterator<F>>,\n }\n \n-struct ConditionalIterator<F> {\n+pub struct ConditionalIterator<F> {\n     f: F,\n }\n \n+\n+// @has 'fn_bound/struct.ConditionalIterator.html' '//h3[@class=\"code-header in-band\"]' 'impl<F: Fn(&i32)> Iterator for ConditionalIterator<F>'\n impl<F: Fn(&i32)> Iterator for ConditionalIterator<F> {\n     type Item = ();\n "}]}