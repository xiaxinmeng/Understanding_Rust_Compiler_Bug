{"sha": "25c375413ab8e24b01bef1d80d61dff58ef7bc1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1YzM3NTQxM2FiOGUyNGIwMWJlZjFkODBkNjFkZmY1OGVmN2JjMWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-03T07:10:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-03T07:10:15Z"}, "message": "Auto merge of #56394 - cuviper:interrupted-timeout, r=sfackler\n\nDeal with EINTR in net timeout tests\n\nWe've seen sporadic QE failures in the timeout tests on this assertion:\n\n    assert!(kind == ErrorKind::WouldBlock || kind == ErrorKind::TimedOut);\n\nSo there's an error, but not either of the expected kinds.  Adding a\nformat to show the kind revealed `ErrorKind::Interrupted` (`EINTR`).\n\nFor the cases that were using `read`, we can just use `read_exact` to\nkeep trying after interruption.  For those using `recv_from`, we have to\nmanually loop until we get a non-interrupted result.", "tree": {"sha": "d186d4d1d194d2e35b9fd1fdcfe48459f0075080", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d186d4d1d194d2e35b9fd1fdcfe48459f0075080"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25c375413ab8e24b01bef1d80d61dff58ef7bc1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25c375413ab8e24b01bef1d80d61dff58ef7bc1c", "html_url": "https://github.com/rust-lang/rust/commit/25c375413ab8e24b01bef1d80d61dff58ef7bc1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25c375413ab8e24b01bef1d80d61dff58ef7bc1c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a563ceb3b9471acbb827e27686c5cacadc49a032", "url": "https://api.github.com/repos/rust-lang/rust/commits/a563ceb3b9471acbb827e27686c5cacadc49a032", "html_url": "https://github.com/rust-lang/rust/commit/a563ceb3b9471acbb827e27686c5cacadc49a032"}, {"sha": "f107514aef0b25b0d959941df1e45b18a478151b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f107514aef0b25b0d959941df1e45b18a478151b", "html_url": "https://github.com/rust-lang/rust/commit/f107514aef0b25b0d959941df1e45b18a478151b"}], "stats": {"total": 40, "additions": 28, "deletions": 12}, "files": [{"sha": "be797803233a86123e478acb2da4cf056bcc54c2", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/25c375413ab8e24b01bef1d80d61dff58ef7bc1c/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c375413ab8e24b01bef1d80d61dff58ef7bc1c/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=25c375413ab8e24b01bef1d80d61dff58ef7bc1c", "patch": "@@ -1548,8 +1548,9 @@ mod tests {\n \n         let mut buf = [0; 10];\n         let start = Instant::now();\n-        let kind = stream.read(&mut buf).err().expect(\"expected error\").kind();\n-        assert!(kind == ErrorKind::WouldBlock || kind == ErrorKind::TimedOut);\n+        let kind = stream.read_exact(&mut buf).err().expect(\"expected error\").kind();\n+        assert!(kind == ErrorKind::WouldBlock || kind == ErrorKind::TimedOut,\n+                \"unexpected_error: {:?}\", kind);\n         assert!(start.elapsed() > Duration::from_millis(400));\n         drop(listener);\n     }\n@@ -1570,8 +1571,9 @@ mod tests {\n         assert_eq!(b\"hello world\", &buf[..]);\n \n         let start = Instant::now();\n-        let kind = stream.read(&mut buf).err().expect(\"expected error\").kind();\n-        assert!(kind == ErrorKind::WouldBlock || kind == ErrorKind::TimedOut);\n+        let kind = stream.read_exact(&mut buf).err().expect(\"expected error\").kind();\n+        assert!(kind == ErrorKind::WouldBlock || kind == ErrorKind::TimedOut,\n+                \"unexpected_error: {:?}\", kind);\n         assert!(start.elapsed() > Duration::from_millis(400));\n         drop(listener);\n     }"}, {"sha": "fc68abae05a0447078cffdb380de94a86663a215", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/25c375413ab8e24b01bef1d80d61dff58ef7bc1c/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c375413ab8e24b01bef1d80d61dff58ef7bc1c/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=25c375413ab8e24b01bef1d80d61dff58ef7bc1c", "patch": "@@ -1030,8 +1030,14 @@ mod tests {\n         let mut buf = [0; 10];\n \n         let start = Instant::now();\n-        let kind = stream.recv_from(&mut buf).err().expect(\"expected error\").kind();\n-        assert!(kind == ErrorKind::WouldBlock || kind == ErrorKind::TimedOut);\n+        loop {\n+            let kind = stream.recv_from(&mut buf).err().expect(\"expected error\").kind();\n+            if kind != ErrorKind::Interrupted {\n+                assert!(kind == ErrorKind::WouldBlock || kind == ErrorKind::TimedOut,\n+                        \"unexpected_error: {:?}\", kind);\n+                break;\n+            }\n+        }\n         assert!(start.elapsed() > Duration::from_millis(400));\n     }\n \n@@ -1049,8 +1055,14 @@ mod tests {\n         assert_eq!(b\"hello world\", &buf[..]);\n \n         let start = Instant::now();\n-        let kind = stream.recv_from(&mut buf).err().expect(\"expected error\").kind();\n-        assert!(kind == ErrorKind::WouldBlock || kind == ErrorKind::TimedOut);\n+        loop {\n+            let kind = stream.recv_from(&mut buf).err().expect(\"expected error\").kind();\n+            if kind != ErrorKind::Interrupted {\n+                assert!(kind == ErrorKind::WouldBlock || kind == ErrorKind::TimedOut,\n+                        \"unexpected_error: {:?}\", kind);\n+                break;\n+            }\n+        }\n         assert!(start.elapsed() > Duration::from_millis(400));\n     }\n "}, {"sha": "737437c76b7c439daff85a09f11fdf773de37939", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/25c375413ab8e24b01bef1d80d61dff58ef7bc1c/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c375413ab8e24b01bef1d80d61dff58ef7bc1c/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=25c375413ab8e24b01bef1d80d61dff58ef7bc1c", "patch": "@@ -1654,8 +1654,9 @@ mod test {\n         or_panic!(stream.set_read_timeout(Some(Duration::from_millis(1000))));\n \n         let mut buf = [0; 10];\n-        let kind = stream.read(&mut buf).err().expect(\"expected error\").kind();\n-        assert!(kind == io::ErrorKind::WouldBlock || kind == io::ErrorKind::TimedOut);\n+        let kind = stream.read_exact(&mut buf).err().expect(\"expected error\").kind();\n+        assert!(kind == ErrorKind::WouldBlock || kind == ErrorKind::TimedOut,\n+                \"unexpected_error: {:?}\", kind);\n     }\n \n     #[test]\n@@ -1675,8 +1676,9 @@ mod test {\n         or_panic!(stream.read(&mut buf));\n         assert_eq!(b\"hello world\", &buf[..]);\n \n-        let kind = stream.read(&mut buf).err().expect(\"expected error\").kind();\n-        assert!(kind == io::ErrorKind::WouldBlock || kind == io::ErrorKind::TimedOut);\n+        let kind = stream.read_exact(&mut buf).err().expect(\"expected error\").kind();\n+        assert!(kind == ErrorKind::WouldBlock || kind == ErrorKind::TimedOut,\n+                \"unexpected_error: {:?}\", kind);\n     }\n \n     // Ensure the `set_read_timeout` and `set_write_timeout` calls return errors"}]}