{"sha": "569b3e3465e4cbab80afa9b0493206fe424cc6bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2OWIzZTM0NjVlNGNiYWI4MGFmYTliMDQ5MzIwNmZlNDI0Y2M2YmI=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-07-07T04:50:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-07-07T04:50:46Z"}, "message": "Merge pull request #1769 from topecongiro/comment-vertical-alignment\n\nComment vertical alignment", "tree": {"sha": "8bd8420ce0421bf7d4b0e1faa112a97b41da88d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bd8420ce0421bf7d4b0e1faa112a97b41da88d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/569b3e3465e4cbab80afa9b0493206fe424cc6bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/569b3e3465e4cbab80afa9b0493206fe424cc6bb", "html_url": "https://github.com/rust-lang/rust/commit/569b3e3465e4cbab80afa9b0493206fe424cc6bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/569b3e3465e4cbab80afa9b0493206fe424cc6bb/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfec7ad593cb1d277d723bcb7d6199f3564638ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfec7ad593cb1d277d723bcb7d6199f3564638ba", "html_url": "https://github.com/rust-lang/rust/commit/cfec7ad593cb1d277d723bcb7d6199f3564638ba"}, {"sha": "680a3a1d190448b93ebac9b2148dd374558eec01", "url": "https://api.github.com/repos/rust-lang/rust/commits/680a3a1d190448b93ebac9b2148dd374558eec01", "html_url": "https://github.com/rust-lang/rust/commit/680a3a1d190448b93ebac9b2148dd374558eec01"}], "stats": {"total": 245, "additions": 197, "deletions": 48}, "files": [{"sha": "95ac1a25bb9b2563654329e54e514b891ddc7c76", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/569b3e3465e4cbab80afa9b0493206fe424cc6bb/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569b3e3465e4cbab80afa9b0493206fe424cc6bb/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=569b3e3465e4cbab80afa9b0493206fe424cc6bb", "patch": "@@ -142,14 +142,14 @@ fn get_fmt_args() -> Vec<String> {\n \n #[derive(Debug)]\n enum TargetKind {\n-    Lib, // dylib, staticlib, lib\n-    Bin, // bin\n-    Example, // example file\n-    Test, // test file\n-    Bench, // bench file\n+    Lib,         // dylib, staticlib, lib\n+    Bin,         // bin\n+    Example,     // example file\n+    Test,        // test file\n+    Bench,       // bench file\n     CustomBuild, // build script\n-    ProcMacro, // a proc macro implementation\n-    Other, // plugin,...\n+    ProcMacro,   // a proc macro implementation\n+    Other,       // plugin,...\n }\n \n impl TargetKind {"}, {"sha": "971bdc21aaa90748286fcda23a972670bb8634fd", "filename": "src/expr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/569b3e3465e4cbab80afa9b0493206fe424cc6bb/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569b3e3465e4cbab80afa9b0493206fe424cc6bb/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=569b3e3465e4cbab80afa9b0493206fe424cc6bb", "patch": "@@ -1298,9 +1298,7 @@ impl<'a> ControlFlow<'a> {\n                 label_string,\n                 self.keyword,\n                 between_kwd_cond_comment.as_ref().map_or(\n-                    if pat_expr_string.is_empty() ||\n-                        pat_expr_string.starts_with('\\n')\n-                    {\n+                    if pat_expr_string.is_empty() || pat_expr_string.starts_with('\\n') {\n                         \"\"\n                     } else {\n                         \" \"\n@@ -1707,7 +1705,7 @@ impl Rewrite for ast::Arm {\n             ends_with_newline: false,\n             config: context.config,\n         };\n-        let pats_str = try_opt!(write_list(items, &fmt));\n+        let pats_str = try_opt!(write_list(&items, &fmt));\n \n         let guard_shape = if pats_str.contains('\\n') {\n             shape.with_max_width(context.config)"}, {"sha": "91bba5349249e11483d5e3ae3c5c942704d1adf0", "filename": "src/items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/569b3e3465e4cbab80afa9b0493206fe424cc6bb/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569b3e3465e4cbab80afa9b0493206fe424cc6bb/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=569b3e3465e4cbab80afa9b0493206fe424cc6bb", "patch": "@@ -478,7 +478,7 @@ impl<'a> FmtVisitor<'a> {\n             config: self.config,\n         };\n \n-        let list = try_opt!(write_list(items, &fmt));\n+        let list = try_opt!(write_list(&items.collect::<Vec<_>>(), &fmt));\n         result.push_str(&list);\n         result.push('\\n');\n         Some(result)\n@@ -2539,7 +2539,7 @@ fn rewrite_where_clause_rfc_style(\n         ends_with_newline: true,\n         config: context.config,\n     };\n-    let preds_str = try_opt!(write_list(items, &fmt));\n+    let preds_str = try_opt!(write_list(&items.collect::<Vec<_>>(), &fmt));\n \n     Some(format!(\n         \"{}where\\n{}{}\","}, {"sha": "4f762ea1f37b9d36f2666916fe2fa5115f9eb8cd", "filename": "src/lists.rs", "status": "modified", "additions": 99, "deletions": 24, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/569b3e3465e4cbab80afa9b0493206fe424cc6bb/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569b3e3465e4cbab80afa9b0493206fe424cc6bb/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=569b3e3465e4cbab80afa9b0493206fe424cc6bb", "patch": "@@ -17,7 +17,7 @@ use {Indent, Shape};\n use comment::{find_comment_end, rewrite_comment, FindUncommented};\n use config::{Config, IndentStyle};\n use rewrite::RewriteContext;\n-use utils::mk_sp;\n+use utils::{first_line_width, last_line_width, mk_sp};\n \n #[derive(Eq, PartialEq, Debug, Copy, Clone)]\n /// Formatting tactic for lists. This will be cast down to a\n@@ -86,8 +86,12 @@ pub struct ListItem {\n }\n \n impl ListItem {\n+    pub fn inner_as_ref(&self) -> &str {\n+        self.item.as_ref().map_or(\"\", |s| &*s)\n+    }\n+\n     pub fn is_multiline(&self) -> bool {\n-        self.item.as_ref().map_or(false, |s| s.contains('\\n')) || self.pre_comment.is_some() ||\n+        self.inner_as_ref().contains('\\n') || self.pre_comment.is_some() ||\n             self.post_comment\n                 .as_ref()\n                 .map_or(false, |s| s.contains('\\n'))\n@@ -157,7 +161,7 @@ where\n // TODO: add unit tests\n pub fn write_list<I, T>(items: I, formatting: &ListFormatting) -> Option<String>\n where\n-    I: IntoIterator<Item = T>,\n+    I: IntoIterator<Item = T> + Clone,\n     T: AsRef<ListItem>,\n {\n     let tactic = formatting.tactic;\n@@ -167,7 +171,9 @@ where\n     // will be a trailing separator.\n     let trailing_separator = needs_trailing_separator(formatting.trailing_separator, tactic);\n     let mut result = String::new();\n+    let cloned_items = items.clone();\n     let mut iter = items.into_iter().enumerate().peekable();\n+    let mut item_max_width: Option<usize> = None;\n \n     let mut line_len = 0;\n     let indent_str = &formatting.shape.indent.to_string(formatting.config);\n@@ -238,6 +244,7 @@ where\n             } else {\n                 result.push(' ');\n             }\n+            item_max_width = None;\n         }\n \n         result.push_str(&inner_item[..]);\n@@ -261,43 +268,111 @@ where\n         }\n \n         if tactic == DefinitiveListTactic::Vertical && item.post_comment.is_some() {\n-            // 1 = space between item and comment.\n-            let width = formatting\n-                .shape\n-                .width\n-                .checked_sub(item_last_line_width + 1)\n-                .unwrap_or(1);\n-            let mut offset = formatting.shape.indent;\n-            offset.alignment += item_last_line_width + 1;\n             let comment = item.post_comment.as_ref().unwrap();\n+            let overhead = last_line_width(&result) + first_line_width(comment.trim());\n+\n+            let rewrite_post_comment = |item_max_width: &mut Option<usize>| {\n+                if item_max_width.is_none() && !last && !inner_item.contains('\\n') {\n+                    *item_max_width = Some(max_width_of_item_with_post_comment(\n+                        &cloned_items,\n+                        i,\n+                        overhead,\n+                        formatting.config.max_width(),\n+                    ));\n+                }\n+                let overhead = if let &mut Some(max_width) = item_max_width {\n+                    max_width + 2\n+                } else {\n+                    // 1 = space between item and comment.\n+                    item_last_line_width + 1\n+                };\n+                let width = formatting.shape.width.checked_sub(overhead).unwrap_or(1);\n+                let offset = formatting.shape.indent + overhead;\n+                let comment_shape = Shape::legacy(width, offset);\n+\n+                // Use block-style only for the last item or multiline comments.\n+                let block_style = !formatting.ends_with_newline && last ||\n+                    comment.trim().contains('\\n') ||\n+                    comment.trim().len() > width;\n+\n+                rewrite_comment(comment, block_style, comment_shape, formatting.config)\n+            };\n \n-            debug!(\"Width = {}, offset = {:?}\", width, offset);\n-            // Use block-style only for the last item or multiline comments.\n-            let block_style = !formatting.ends_with_newline && last ||\n-                comment.trim().contains('\\n') ||\n-                comment.trim().len() > width;\n-\n-            let formatted_comment = try_opt!(rewrite_comment(\n-                comment,\n-                block_style,\n-                Shape::legacy(width, offset),\n-                formatting.config,\n-            ));\n+            let mut formatted_comment = try_opt!(rewrite_post_comment(&mut item_max_width));\n \n             if !formatted_comment.starts_with('\\n') {\n-                result.push(' ');\n+                let mut comment_alignment =\n+                    post_comment_alignment(item_max_width, inner_item.len());\n+                if first_line_width(&formatted_comment) + last_line_width(&result) +\n+                    comment_alignment + 1 > formatting.config.max_width()\n+                {\n+                    item_max_width = None;\n+                    formatted_comment = try_opt!(rewrite_post_comment(&mut item_max_width));\n+                    comment_alignment = post_comment_alignment(item_max_width, inner_item.len());\n+                }\n+                for _ in 0..(comment_alignment + 1) {\n+                    result.push(' ');\n+                }\n+                // An additional space for the missing trailing comma\n+                if last && item_max_width.is_some() && !separate {\n+                    result.push(' ');\n+                }\n+            }\n+            if formatted_comment.contains('\\n') {\n+                item_max_width = None;\n             }\n             result.push_str(&formatted_comment);\n+        } else {\n+            item_max_width = None;\n         }\n \n         if !last && tactic == DefinitiveListTactic::Vertical && item.new_lines {\n+            item_max_width = None;\n             result.push('\\n');\n         }\n     }\n \n     Some(result)\n }\n \n+fn max_width_of_item_with_post_comment<I, T>(\n+    items: &I,\n+    i: usize,\n+    overhead: usize,\n+    max_budget: usize,\n+) -> usize\n+where\n+    I: IntoIterator<Item = T> + Clone,\n+    T: AsRef<ListItem>,\n+{\n+    let mut max_width = 0;\n+    let mut first = true;\n+    for item in items.clone().into_iter().skip(i) {\n+        let item = item.as_ref();\n+        let inner_item_width = item.inner_as_ref().len();\n+        if !first &&\n+            (item.is_multiline() || !item.post_comment.is_some() ||\n+                 inner_item_width + overhead > max_budget)\n+        {\n+            return max_width;\n+        }\n+        if max_width < inner_item_width {\n+            max_width = inner_item_width;\n+        }\n+        if item.new_lines {\n+            return max_width;\n+        }\n+        first = false;\n+    }\n+    max_width\n+}\n+\n+fn post_comment_alignment(item_max_width: Option<usize>, inner_item_len: usize) -> usize {\n+    item_max_width\n+        .and_then(|max_line_width| max_line_width.checked_sub(inner_item_len))\n+        .unwrap_or(0)\n+}\n+\n pub struct ListItems<'a, I, F1, F2, F3>\n where\n     I: Iterator,"}, {"sha": "5fd660c0e861c808490be78e8d4bab70d7991e65", "filename": "tests/source/structs.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/569b3e3465e4cbab80afa9b0493206fe424cc6bb/tests%2Fsource%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569b3e3465e4cbab80afa9b0493206fe424cc6bb/tests%2Fsource%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstructs.rs?ref=569b3e3465e4cbab80afa9b0493206fe424cc6bb", "patch": "@@ -209,3 +209,41 @@ fn foo() {\n     convex_shape.set_point(2, &Vector2f { x: 450.0, y: 100.0 });\n     convex_shape.set_point(3, &Vector2f { x: 580.0, y: 150.0 });\n }\n+\n+// Vertical alignment\n+struct Foo {\n+    aaaaa: u32, // a\n+\n+    b: u32, // b\n+    cc: u32, // cc\n+\n+    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: u32, // 1\n+    yy: u32, // comment2\n+    zzz: u32, // comment3\n+\n+    aaaaaa: u32, // comment4\n+    bb: u32, // comment5\n+    // separate\n+    dd: u32, // comment7\n+    c: u32, // comment6\n+\n+    aaaaaaa: u32, /* multi\n+     * line\n+     * comment\n+     */\n+    b: u32, // hi\n+\n+    do_not_push_this_comment1: u32, // comment1\n+    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: u32, // 2\n+    please_do_not_push_this_comment3: u32, // comment3\n+\n+    do_not_push_this_comment1: u32, // comment1\n+    // separate\n+    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: u32, // 2\n+    please_do_not_push_this_comment3: u32, // comment3\n+\n+    do_not_push_this_comment1: u32, // comment1\n+    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: u32, // 2\n+    // separate\n+    please_do_not_push_this_comment3: u32, // comment3\n+}"}, {"sha": "08210b2ee3c79a74e2d94535494be6e2b188302d", "filename": "tests/target/configs-struct_field_align_threshold-20.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/569b3e3465e4cbab80afa9b0493206fe424cc6bb/tests%2Ftarget%2Fconfigs-struct_field_align_threshold-20.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569b3e3465e4cbab80afa9b0493206fe424cc6bb/tests%2Ftarget%2Fconfigs-struct_field_align_threshold-20.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-struct_field_align_threshold-20.rs?ref=569b3e3465e4cbab80afa9b0493206fe424cc6bb", "patch": "@@ -76,7 +76,7 @@ struct NewType(Type, OtherType);\n struct NewInt<T: Copy>(\n     pub i32,\n     SomeType, // inline comment\n-    T, // sup\n+    T,        // sup\n );\n \n struct Qux<\n@@ -219,7 +219,7 @@ struct Foo<T>(\n where\n     T: PartialEq;\n struct Foo<T>(\n-    TTTTTTTTTTTTTTTTT, // Foo\n+    TTTTTTTTTTTTTTTTT,        // Foo\n     UUUUUUUUUUUUUUUUUUUUUUUU, // Bar\n     // Baz\n     TTTTTTTTTTTTTTTTTTT,"}, {"sha": "9bba8840581a38a6d75e3afc22d83c33404eb04c", "filename": "tests/target/enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/569b3e3465e4cbab80afa9b0493206fe424cc6bb/tests%2Ftarget%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569b3e3465e4cbab80afa9b0493206fe424cc6bb/tests%2Ftarget%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum.rs?ref=569b3e3465e4cbab80afa9b0493206fe424cc6bb", "patch": "@@ -88,7 +88,7 @@ where\n     I: Iterator<Item = T>,\n {\n     // Pre Comment\n-    Left { list: I, root: T }, // Post-comment\n+    Left { list: I, root: T },  // Post-comment\n     Right { list: I, root: T }, // Post Comment\n }\n "}, {"sha": "ef40e040ea8e6effa93048dd3d235dc28046df9e", "filename": "tests/target/fn-args-with-last-line-comment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/569b3e3465e4cbab80afa9b0493206fe424cc6bb/tests%2Ftarget%2Ffn-args-with-last-line-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569b3e3465e4cbab80afa9b0493206fe424cc6bb/tests%2Ftarget%2Ffn-args-with-last-line-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-args-with-last-line-comment.rs?ref=569b3e3465e4cbab80afa9b0493206fe424cc6bb", "patch": "@@ -3,8 +3,8 @@ pub trait X {\n     fn a(&self) -> &'static str;\n     fn bcd(\n         &self,\n-        c: &str, // comment on this arg\n-        d: u16, // comment on this arg\n+        c: &str,         // comment on this arg\n+        d: u16,          // comment on this arg\n         e: &Vec<String>, // comment on this arg\n     ) -> Box<Q>;\n }"}, {"sha": "e150973a67d03fbfcb5d279278a28ddcf5a4ec83", "filename": "tests/target/fn-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/569b3e3465e4cbab80afa9b0493206fe424cc6bb/tests%2Ftarget%2Ffn-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569b3e3465e4cbab80afa9b0493206fe424cc6bb/tests%2Ftarget%2Ffn-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-simple.rs?ref=569b3e3465e4cbab80afa9b0493206fe424cc6bb", "patch": "@@ -2,7 +2,7 @@\n \n fn simple(\n     // pre-comment on a function!?\n-    i: i32, // yes, it's possible!\n+    i: i32,          // yes, it's possible!\n     response: NoWay, // hose\n ) {\n     fn op("}, {"sha": "d784c26ce1c8243edd96c26ced99dfbdb7b24307", "filename": "tests/target/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/569b3e3465e4cbab80afa9b0493206fe424cc6bb/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569b3e3465e4cbab80afa9b0493206fe424cc6bb/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=569b3e3465e4cbab80afa9b0493206fe424cc6bb", "patch": "@@ -29,7 +29,7 @@ fn main() {\n     kaas!(\n         // comments\n         a, // post macro\n-        b // another\n+        b  // another\n     );\n \n     trailingcomma!(a, b, c,);"}, {"sha": "bf12854c9880a9f0984d8de92f436d98f83cdc4a", "filename": "tests/target/multiple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/569b3e3465e4cbab80afa9b0493206fe424cc6bb/tests%2Ftarget%2Fmultiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569b3e3465e4cbab80afa9b0493206fe424cc6bb/tests%2Ftarget%2Fmultiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmultiple.rs?ref=569b3e3465e4cbab80afa9b0493206fe424cc6bb", "patch": "@@ -39,7 +39,7 @@ where\n }\n \n fn baz<\n-    'a: 'b, // comment on 'a\n+    'a: 'b,                                                            // comment on 'a\n     T: SomsssssssssssssssssssssssssssssssssssssssssssssssssssssseType, // comment on T\n >(\n     a: A,\n@@ -71,7 +71,7 @@ impl Bar {\n     fn foo(\n         &mut self,\n         a: sdfsdfcccccccccccccccccccccccccccccccccccccccccccccccccc, // comment on a\n-        b: sdfasdfsdfasfs, // closing comment\n+        b: sdfasdfsdfasfs,                                           // closing comment\n     ) -> isize {\n     }\n "}, {"sha": "ad518810095716dd77ad7802973cfbf8f48351ab", "filename": "tests/target/structs.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/569b3e3465e4cbab80afa9b0493206fe424cc6bb/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569b3e3465e4cbab80afa9b0493206fe424cc6bb/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=569b3e3465e4cbab80afa9b0493206fe424cc6bb", "patch": "@@ -44,7 +44,7 @@ struct NewType(Type, OtherType);\n struct NewInt<T: Copy>(\n     pub i32,\n     SomeType, // inline comment\n-    T, // sup\n+    T,        // sup\n );\n \n struct Qux<\n@@ -187,7 +187,7 @@ struct Foo<T>(\n where\n     T: PartialEq;\n struct Foo<T>(\n-    TTTTTTTTTTTTTTTTT, // Foo\n+    TTTTTTTTTTTTTTTTT,        // Foo\n     UUUUUUUUUUUUUUUUUUUUUUUU, // Bar\n     // Baz\n     TTTTTTTTTTTTTTTTTTT,\n@@ -246,3 +246,41 @@ fn foo() {\n     convex_shape.set_point(2, &Vector2f { x: 450.0, y: 100.0 });\n     convex_shape.set_point(3, &Vector2f { x: 580.0, y: 150.0 });\n }\n+\n+// Vertical alignment\n+struct Foo {\n+    aaaaa: u32, // a\n+\n+    b: u32,  // b\n+    cc: u32, // cc\n+\n+    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: u32, // 1\n+    yy: u32,  // comment2\n+    zzz: u32, // comment3\n+\n+    aaaaaa: u32, // comment4\n+    bb: u32,     // comment5\n+    // separate\n+    dd: u32, // comment7\n+    c: u32,  // comment6\n+\n+    aaaaaaa: u32, /* multi\n+                   * line\n+                   * comment\n+                   * */\n+    b: u32, // hi\n+\n+    do_not_push_this_comment1: u32, // comment1\n+    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: u32, // 2\n+    please_do_not_push_this_comment3: u32, // comment3\n+\n+    do_not_push_this_comment1: u32, // comment1\n+    // separate\n+    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: u32, // 2\n+    please_do_not_push_this_comment3: u32, // comment3\n+\n+    do_not_push_this_comment1: u32, // comment1\n+    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: u32, // 2\n+    // separate\n+    please_do_not_push_this_comment3: u32, // comment3\n+}"}]}