{"sha": "2fe47b966a8ee689d697583be4182262e7b4fd08", "node_id": "C_kwDOAAsO6NoAKDJmZTQ3Yjk2NmE4ZWU2ODlkNjk3NTgzYmU0MTgyMjYyZTdiNGZkMDg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-22T15:06:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-22T15:06:32Z"}, "message": "Auto merge of #111634 - marc0246:arc-new-uninit-bloat, r=thomcc\n\nFix duplicate `arcinner_layout_for_value_layout` calls when using the uninit `Arc` constructors\n\nWhat this fixes is the duplicate calls to `arcinner_layout_for_value_layout` seen here: https://godbolt.org/z/jr5Gxozhj\n\nThe issue was discovered alongside #111603 but is otherwise unrelated to the duplicate `alloca`s, which remain unsolved. Everything I tried to solve said main issue has failed.\n\nAs for the duplicate layout calculations, I also tried slapping `#[inline]` and `#[inline(always)]` on everything in sight but the only thing that worked in the end is to dedup the calls by hand.", "tree": {"sha": "2933eebcfa9f68a6bff70dab8ad086c7352bc06b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2933eebcfa9f68a6bff70dab8ad086c7352bc06b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fe47b966a8ee689d697583be4182262e7b4fd08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fe47b966a8ee689d697583be4182262e7b4fd08", "html_url": "https://github.com/rust-lang/rust/commit/2fe47b966a8ee689d697583be4182262e7b4fd08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fe47b966a8ee689d697583be4182262e7b4fd08/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03761a50a3b26daded09e6da79252692c9bbad5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/03761a50a3b26daded09e6da79252692c9bbad5f", "html_url": "https://github.com/rust-lang/rust/commit/03761a50a3b26daded09e6da79252692c9bbad5f"}, {"sha": "2a466466c768dc56382550a3130674b2eebe227c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a466466c768dc56382550a3130674b2eebe227c", "html_url": "https://github.com/rust-lang/rust/commit/2a466466c768dc56382550a3130674b2eebe227c"}], "stats": {"total": 53, "additions": 47, "deletions": 6}, "files": [{"sha": "bfdb7a92beff68015ee090e3eb7056ef283994b7", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2fe47b966a8ee689d697583be4182262e7b4fd08/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe47b966a8ee689d697583be4182262e7b4fd08/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=2fe47b966a8ee689d697583be4182262e7b4fd08", "patch": "@@ -502,6 +502,7 @@ impl<T> Arc<T> {\n     /// assert_eq!(*five, 5)\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n+    #[inline]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     #[must_use]\n     pub fn new_uninit() -> Arc<mem::MaybeUninit<T>> {\n@@ -535,6 +536,7 @@ impl<T> Arc<T> {\n     ///\n     /// [zeroed]: mem::MaybeUninit::zeroed\n     #[cfg(not(no_global_oom_handling))]\n+    #[inline]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     #[must_use]\n     pub fn new_zeroed() -> Arc<mem::MaybeUninit<T>> {\n@@ -844,6 +846,7 @@ impl<T> Arc<[T]> {\n     /// assert_eq!(*values, [1, 2, 3])\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n+    #[inline]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     #[must_use]\n     pub fn new_uninit_slice(len: usize) -> Arc<[mem::MaybeUninit<T>]> {\n@@ -871,6 +874,7 @@ impl<T> Arc<[T]> {\n     ///\n     /// [zeroed]: mem::MaybeUninit::zeroed\n     #[cfg(not(no_global_oom_handling))]\n+    #[inline]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     #[must_use]\n     pub fn new_zeroed_slice(len: usize) -> Arc<[mem::MaybeUninit<T>]> {\n@@ -1300,10 +1304,10 @@ impl<T: ?Sized> Arc<T> {\n         mem_to_arcinner: impl FnOnce(*mut u8) -> *mut ArcInner<T>,\n     ) -> *mut ArcInner<T> {\n         let layout = arcinner_layout_for_value_layout(value_layout);\n-        unsafe {\n-            Arc::try_allocate_for_layout(value_layout, allocate, mem_to_arcinner)\n-                .unwrap_or_else(|_| handle_alloc_error(layout))\n-        }\n+\n+        let ptr = allocate(layout).unwrap_or_else(|_| handle_alloc_error(layout));\n+\n+        unsafe { Self::initialize_arcinner(ptr, layout, mem_to_arcinner) }\n     }\n \n     /// Allocates an `ArcInner<T>` with sufficient space for\n@@ -1321,7 +1325,16 @@ impl<T: ?Sized> Arc<T> {\n \n         let ptr = allocate(layout)?;\n \n-        // Initialize the ArcInner\n+        let inner = unsafe { Self::initialize_arcinner(ptr, layout, mem_to_arcinner) };\n+\n+        Ok(inner)\n+    }\n+\n+    unsafe fn initialize_arcinner(\n+        ptr: NonNull<[u8]>,\n+        layout: Layout,\n+        mem_to_arcinner: impl FnOnce(*mut u8) -> *mut ArcInner<T>,\n+    ) -> *mut ArcInner<T> {\n         let inner = mem_to_arcinner(ptr.as_non_null_ptr().as_ptr());\n         debug_assert_eq!(unsafe { Layout::for_value(&*inner) }, layout);\n \n@@ -1330,7 +1343,7 @@ impl<T: ?Sized> Arc<T> {\n             ptr::write(&mut (*inner).weak, atomic::AtomicUsize::new(1));\n         }\n \n-        Ok(inner)\n+        inner\n     }\n \n     /// Allocates an `ArcInner<T>` with sufficient space for an unsized inner value."}, {"sha": "90b3c314d2f4bfec8444f76dc05e0ab4967b8843", "filename": "tests/codegen/issues/issue-111603.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2fe47b966a8ee689d697583be4182262e7b4fd08/tests%2Fcodegen%2Fissues%2Fissue-111603.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe47b966a8ee689d697583be4182262e7b4fd08/tests%2Fcodegen%2Fissues%2Fissue-111603.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fissues%2Fissue-111603.rs?ref=2fe47b966a8ee689d697583be4182262e7b4fd08", "patch": "@@ -0,0 +1,28 @@\n+// compile-flags: -O\n+\n+#![crate_type = \"lib\"]\n+#![feature(get_mut_unchecked, new_uninit)]\n+\n+use std::sync::Arc;\n+\n+// CHECK-LABEL: @new_uninit\n+#[no_mangle]\n+pub fn new_uninit(x: u64) -> Arc<[u64; 1000]> {\n+    // CHECK: call alloc::sync::arcinner_layout_for_value_layout\n+    // CHECK-NOT: call alloc::sync::arcinner_layout_for_value_layout\n+    let mut arc = Arc::new_uninit();\n+    unsafe { Arc::get_mut_unchecked(&mut arc) }.write([x; 1000]);\n+    unsafe { arc.assume_init() }\n+}\n+\n+// CHECK-LABEL: @new_uninit_slice\n+#[no_mangle]\n+pub fn new_uninit_slice(x: u64) -> Arc<[u64]> {\n+    // CHECK: call alloc::sync::arcinner_layout_for_value_layout\n+    // CHECK-NOT: call alloc::sync::arcinner_layout_for_value_layout\n+    let mut arc = Arc::new_uninit_slice(1000);\n+    for elem in unsafe { Arc::get_mut_unchecked(&mut arc) } {\n+        elem.write(x);\n+    }\n+    unsafe { arc.assume_init() }\n+}"}]}