{"sha": "0d554540730925c074693b43503e65476eadbd65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNTU0NTQwNzMwOTI1YzA3NDY5M2I0MzUwM2U2NTQ3NmVhZGJkNjU=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-02-17T11:32:13Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-03T17:21:14Z"}, "message": "Add LazyMacroId", "tree": {"sha": "8f51b96f608bbbf694d30c62214800f5f28a3841", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f51b96f608bbbf694d30c62214800f5f28a3841"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d554540730925c074693b43503e65476eadbd65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d554540730925c074693b43503e65476eadbd65", "html_url": "https://github.com/rust-lang/rust/commit/0d554540730925c074693b43503e65476eadbd65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d554540730925c074693b43503e65476eadbd65/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cebb995d21e18990939287f55628237563583b27", "url": "https://api.github.com/repos/rust-lang/rust/commits/cebb995d21e18990939287f55628237563583b27", "html_url": "https://github.com/rust-lang/rust/commit/cebb995d21e18990939287f55628237563583b27"}], "stats": {"total": 72, "additions": 56, "deletions": 16}, "files": [{"sha": "0b70fb9e1f665436441dee44b19cdb927290e137", "filename": "crates/ra_hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d554540730925c074693b43503e65476eadbd65/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d554540730925c074693b43503e65476eadbd65/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=0d554540730925c074693b43503e65476eadbd65", "patch": "@@ -248,7 +248,7 @@ mod tests {\n             kind: MacroCallKind::Attr(AstId::new(file_id.into(), ast_id_map.ast_id(&items[0]))),\n         };\n \n-        let id = db.intern_macro(loc);\n+        let id: MacroCallId = db.intern_macro(loc).into();\n         let parsed = db.parse_or_expand(id.as_file()).unwrap();\n \n         // FIXME text() for syntax nodes parsed from token tree looks weird"}, {"sha": "d91aa4ffa08f9e84bcece34ddb511dd0b2d0ff44", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d554540730925c074693b43503e65476eadbd65/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d554540730925c074693b43503e65476eadbd65/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=0d554540730925c074693b43503e65476eadbd65", "patch": "@@ -80,6 +80,10 @@ fn stringify_expand(\n     id: MacroCallId,\n     _tt: &tt::Subtree,\n ) -> Result<tt::Subtree, mbe::ExpandError> {\n+    let id = match id {\n+        MacroCallId::LazyMacro(id) => id,\n+    };\n+\n     let loc = db.lookup_intern_macro(id);\n \n     let macro_content = {\n@@ -241,7 +245,7 @@ mod tests {\n             )),\n         };\n \n-        let id = db.intern_macro(loc);\n+        let id: MacroCallId = db.intern_macro(loc).into();\n         let parsed = db.parse_or_expand(id.as_file()).unwrap();\n \n         parsed.text().to_string()"}, {"sha": "b695c5b8d546bcc47168f03b1672be02ff551ffa", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0d554540730925c074693b43503e65476eadbd65/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d554540730925c074693b43503e65476eadbd65/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=0d554540730925c074693b43503e65476eadbd65", "patch": "@@ -10,7 +10,7 @@ use ra_syntax::{AstNode, Parse, SyntaxKind::*, SyntaxNode};\n \n use crate::{\n     ast_id_map::AstIdMap, BuiltinDeriveExpander, BuiltinFnLikeExpander, HirFileId, HirFileIdRepr,\n-    MacroCallId, MacroCallLoc, MacroDefId, MacroDefKind, MacroFile,\n+    LazyMacroId, MacroCallId, MacroCallLoc, MacroDefId, MacroDefKind, MacroFile,\n };\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n@@ -60,7 +60,7 @@ pub trait AstDatabase: SourceDatabase {\n     fn parse_or_expand(&self, file_id: HirFileId) -> Option<SyntaxNode>;\n \n     #[salsa::interned]\n-    fn intern_macro(&self, macro_call: MacroCallLoc) -> MacroCallId;\n+    fn intern_macro(&self, macro_call: MacroCallLoc) -> LazyMacroId;\n     fn macro_arg(&self, id: MacroCallId) -> Option<Arc<(tt::Subtree, mbe::TokenMap)>>;\n     fn macro_def(&self, id: MacroDefId) -> Option<Arc<(TokenExpander, mbe::TokenMap)>>;\n     fn parse_macro(&self, macro_file: MacroFile)\n@@ -108,6 +108,9 @@ pub(crate) fn macro_arg(\n     db: &dyn AstDatabase,\n     id: MacroCallId,\n ) -> Option<Arc<(tt::Subtree, mbe::TokenMap)>> {\n+    let id = match id {\n+        MacroCallId::LazyMacro(id) => id,\n+    };\n     let loc = db.lookup_intern_macro(id);\n     let arg = loc.kind.arg(db)?;\n     let (tt, tmap) = mbe::syntax_node_to_token_tree(&arg)?;\n@@ -118,7 +121,11 @@ pub(crate) fn macro_expand(\n     db: &dyn AstDatabase,\n     id: MacroCallId,\n ) -> Result<Arc<tt::Subtree>, String> {\n-    let loc = db.lookup_intern_macro(id);\n+    let lazy_id = match id {\n+        MacroCallId::LazyMacro(id) => id,\n+    };\n+\n+    let loc = db.lookup_intern_macro(lazy_id);\n     let macro_arg = db.macro_arg(id).ok_or(\"Fail to args in to tt::TokenTree\")?;\n \n     let macro_rules = db.macro_def(loc.def).ok_or(\"Fail to find macro definition\")?;\n@@ -167,8 +174,11 @@ pub(crate) fn parse_macro(\n \n /// Given a `MacroCallId`, return what `FragmentKind` it belongs to.\n /// FIXME: Not completed\n-fn to_fragment_kind(db: &dyn AstDatabase, macro_call_id: MacroCallId) -> FragmentKind {\n-    let syn = db.lookup_intern_macro(macro_call_id).kind.node(db).value;\n+fn to_fragment_kind(db: &dyn AstDatabase, id: MacroCallId) -> FragmentKind {\n+    let lazy_id = match id {\n+        MacroCallId::LazyMacro(id) => id,\n+    };\n+    let syn = db.lookup_intern_macro(lazy_id).kind.node(db).value;\n \n     let parent = match syn.parent() {\n         Some(it) => it,"}, {"sha": "ed0e7aa7826ad2370a2050e6fc9cd712e729ec19", "filename": "crates/ra_hir_expand/src/hygiene.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d554540730925c074693b43503e65476eadbd65/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d554540730925c074693b43503e65476eadbd65/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs?ref=0d554540730925c074693b43503e65476eadbd65", "patch": "@@ -23,7 +23,10 @@ impl Hygiene {\n         let def_crate = match file_id.0 {\n             HirFileIdRepr::FileId(_) => None,\n             HirFileIdRepr::MacroFile(macro_file) => {\n-                let loc = db.lookup_intern_macro(macro_file.macro_call_id);\n+                let lazy_id = match macro_file.macro_call_id {\n+                    crate::MacroCallId::LazyMacro(id) => id,\n+                };\n+                let loc = db.lookup_intern_macro(lazy_id);\n                 match loc.def.kind {\n                     MacroDefKind::Declarative => loc.def.krate,\n                     MacroDefKind::BuiltIn(_) => None,"}, {"sha": "3a1c6d2b0b31e9f394f8697cd3fe9b1240a6cf79", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0d554540730925c074693b43503e65476eadbd65/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d554540730925c074693b43503e65476eadbd65/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=0d554540730925c074693b43503e65476eadbd65", "patch": "@@ -70,7 +70,10 @@ impl HirFileId {\n         match self.0 {\n             HirFileIdRepr::FileId(file_id) => file_id,\n             HirFileIdRepr::MacroFile(macro_file) => {\n-                let loc = db.lookup_intern_macro(macro_file.macro_call_id);\n+                let lazy_id = match macro_file.macro_call_id {\n+                    MacroCallId::LazyMacro(id) => id,\n+                };\n+                let loc = db.lookup_intern_macro(lazy_id);\n                 loc.kind.file_id().original_file(db)\n             }\n         }\n@@ -81,7 +84,10 @@ impl HirFileId {\n         match self.0 {\n             HirFileIdRepr::FileId(_) => None,\n             HirFileIdRepr::MacroFile(macro_file) => {\n-                let loc = db.lookup_intern_macro(macro_file.macro_call_id);\n+                let lazy_id = match macro_file.macro_call_id {\n+                    MacroCallId::LazyMacro(id) => id,\n+                };\n+                let loc = db.lookup_intern_macro(lazy_id);\n                 Some(loc.kind.node(db))\n             }\n         }\n@@ -92,7 +98,10 @@ impl HirFileId {\n         match self.0 {\n             HirFileIdRepr::FileId(_) => None,\n             HirFileIdRepr::MacroFile(macro_file) => {\n-                let loc: MacroCallLoc = db.lookup_intern_macro(macro_file.macro_call_id);\n+                let lazy_id = match macro_file.macro_call_id {\n+                    MacroCallId::LazyMacro(id) => id,\n+                };\n+                let loc: MacroCallLoc = db.lookup_intern_macro(lazy_id);\n \n                 let arg_tt = loc.kind.arg(db)?;\n                 let def_tt = loc.def.ast_id?.to_node(db).token_tree()?;\n@@ -118,7 +127,10 @@ impl HirFileId {\n         match self.0 {\n             HirFileIdRepr::FileId(_) => None,\n             HirFileIdRepr::MacroFile(macro_file) => {\n-                let loc: MacroCallLoc = db.lookup_intern_macro(macro_file.macro_call_id);\n+                let lazy_id = match macro_file.macro_call_id {\n+                    MacroCallId::LazyMacro(id) => id,\n+                };\n+                let loc: MacroCallLoc = db.lookup_intern_macro(lazy_id);\n                 let item = match loc.def.kind {\n                     MacroDefKind::BuiltInDerive(_) => loc.kind.node(db),\n                     _ => return None,\n@@ -137,16 +149,27 @@ pub struct MacroFile {\n /// `MacroCallId` identifies a particular macro invocation, like\n /// `println!(\"Hello, {}\", world)`.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct MacroCallId(salsa::InternId);\n-impl salsa::InternKey for MacroCallId {\n+pub enum MacroCallId {\n+    LazyMacro(LazyMacroId),\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct LazyMacroId(salsa::InternId);\n+impl salsa::InternKey for LazyMacroId {\n     fn from_intern_id(v: salsa::InternId) -> Self {\n-        MacroCallId(v)\n+        LazyMacroId(v)\n     }\n     fn as_intern_id(&self) -> salsa::InternId {\n         self.0\n     }\n }\n \n+impl From<LazyMacroId> for MacroCallId {\n+    fn from(it: LazyMacroId) -> Self {\n+        MacroCallId::LazyMacro(it)\n+    }\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct MacroDefId {\n     // FIXME: krate and ast_id are currently optional because we don't have a\n@@ -162,7 +185,7 @@ pub struct MacroDefId {\n \n impl MacroDefId {\n     pub fn as_call_id(self, db: &dyn db::AstDatabase, kind: MacroCallKind) -> MacroCallId {\n-        db.intern_macro(MacroCallLoc { def: self, kind })\n+        db.intern_macro(MacroCallLoc { def: self, kind }).into()\n     }\n }\n "}]}