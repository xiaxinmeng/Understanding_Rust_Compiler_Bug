{"sha": "0090e01f08f7ed564a62fb3cd2e3b652317d39d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwOTBlMDFmMDhmN2VkNTY0YTYyZmIzY2QyZTNiNjUyMzE3ZDM5ZDc=", "commit": {"author": {"name": "Anders Kaseorg", "email": "andersk@mit.edu", "date": "2015-03-23T04:58:19Z"}, "committer": {"name": "Anders Kaseorg", "email": "andersk@mit.edu", "date": "2015-03-23T05:05:05Z"}, "message": "Get __pthread_get_minstack at runtime with dlsym\n\nLinking __pthread_get_minstack, even weakly, was causing Debian\u2019s\ndpkg-shlibdeps to detect an unnecessarily strict versioned dependency\non libc6.\n\nCloses #23628.\n\nSigned-off-by: Anders Kaseorg <andersk@mit.edu>", "tree": {"sha": "7dc172dd099389d20ca227c6ee52a313151b9fc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7dc172dd099389d20ca227c6ee52a313151b9fc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0090e01f08f7ed564a62fb3cd2e3b652317d39d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0090e01f08f7ed564a62fb3cd2e3b652317d39d7", "html_url": "https://github.com/rust-lang/rust/commit/0090e01f08f7ed564a62fb3cd2e3b652317d39d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0090e01f08f7ed564a62fb3cd2e3b652317d39d7/comments", "author": {"login": "andersk", "id": 26471, "node_id": "MDQ6VXNlcjI2NDcx", "avatar_url": "https://avatars.githubusercontent.com/u/26471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andersk", "html_url": "https://github.com/andersk", "followers_url": "https://api.github.com/users/andersk/followers", "following_url": "https://api.github.com/users/andersk/following{/other_user}", "gists_url": "https://api.github.com/users/andersk/gists{/gist_id}", "starred_url": "https://api.github.com/users/andersk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andersk/subscriptions", "organizations_url": "https://api.github.com/users/andersk/orgs", "repos_url": "https://api.github.com/users/andersk/repos", "events_url": "https://api.github.com/users/andersk/events{/privacy}", "received_events_url": "https://api.github.com/users/andersk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "andersk", "id": 26471, "node_id": "MDQ6VXNlcjI2NDcx", "avatar_url": "https://avatars.githubusercontent.com/u/26471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andersk", "html_url": "https://github.com/andersk", "followers_url": "https://api.github.com/users/andersk/followers", "following_url": "https://api.github.com/users/andersk/following{/other_user}", "gists_url": "https://api.github.com/users/andersk/gists{/gist_id}", "starred_url": "https://api.github.com/users/andersk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andersk/subscriptions", "organizations_url": "https://api.github.com/users/andersk/orgs", "repos_url": "https://api.github.com/users/andersk/repos", "events_url": "https://api.github.com/users/andersk/events{/privacy}", "received_events_url": "https://api.github.com/users/andersk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0aad7dd4fad8d7e2e2f877a511a637258949597", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0aad7dd4fad8d7e2e2f877a511a637258949597", "html_url": "https://github.com/rust-lang/rust/commit/b0aad7dd4fad8d7e2e2f877a511a637258949597"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "1d3cb43465b046a0f6e74a04d1de6ead04b4558d", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0090e01f08f7ed564a62fb3cd2e3b652317d39d7/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0090e01f08f7ed564a62fb3cd2e3b652317d39d7/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=0090e01f08f7ed564a62fb3cd2e3b652317d39d7", "patch": "@@ -13,12 +13,14 @@\n use core::prelude::*;\n \n use cmp;\n+use dynamic_lib::DynamicLibrary;\n use ffi::CString;\n use io;\n use libc::consts::os::posix01::PTHREAD_STACK_MIN;\n use libc;\n use mem;\n use ptr;\n+use sync::{Once, ONCE_INIT};\n use sys::os;\n use thunk::Thunk;\n use time::Duration;\n@@ -314,21 +316,30 @@ pub fn sleep(dur: Duration) {\n // is created in an application with big thread-local storage requirements.\n // See #6233 for rationale and details.\n //\n-// Link weakly to the symbol for compatibility with older versions of glibc.\n-// Assumes that we've been dynamically linked to libpthread but that is\n-// currently always the case.  Note that you need to check that the symbol\n-// is non-null before calling it!\n+// Use dlsym to get the symbol value at runtime, for compatibility\n+// with older versions of glibc.  Assumes that we've been dynamically\n+// linked to libpthread but that is currently always the case.  We\n+// previously used weak linkage (under the same assumption), but that\n+// caused Debian to detect an unnecessarily strict versioned\n+// dependency on libc6 (#23628).\n #[cfg(target_os = \"linux\")]\n fn min_stack_size(attr: *const libc::pthread_attr_t) -> libc::size_t {\n     type F = unsafe extern \"C\" fn(*const libc::pthread_attr_t) -> libc::size_t;\n-    extern {\n-        #[linkage = \"extern_weak\"]\n-        static __pthread_get_minstack: *const ();\n-    }\n-    if __pthread_get_minstack.is_null() {\n-        PTHREAD_STACK_MIN\n-    } else {\n-        unsafe { mem::transmute::<*const (), F>(__pthread_get_minstack)(attr) }\n+    static INIT: Once = ONCE_INIT;\n+    static mut __pthread_get_minstack: Option<F> = None;\n+\n+    INIT.call_once(|| {\n+        let lib = DynamicLibrary::open(None).unwrap();\n+        unsafe {\n+            if let Ok(f) = lib.symbol(\"__pthread_get_minstack\") {\n+                __pthread_get_minstack = Some(mem::transmute::<*const (), F>(f));\n+            }\n+        }\n+    });\n+\n+    match unsafe { __pthread_get_minstack } {\n+        None => PTHREAD_STACK_MIN,\n+        Some(f) => unsafe { f(attr) },\n     }\n }\n "}]}