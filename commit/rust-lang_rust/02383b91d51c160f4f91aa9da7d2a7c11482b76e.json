{"sha": "02383b91d51c160f4f91aa9da7d2a7c11482b76e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMzgzYjkxZDUxYzE2MGY0ZjkxYWE5ZGE3ZDJhN2MxMTQ4MmI3NmU=", "commit": {"author": {"name": "gfreezy", "email": "gfreezy@gmail.com", "date": "2019-03-23T15:06:25Z"}, "committer": {"name": "gfreezy", "email": "gfreezy@gmail.com", "date": "2019-03-23T15:13:07Z"}, "message": "Add assist for adding default methods", "tree": {"sha": "a4702c57c1bd701422bc456645dbc52ca135b9e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4702c57c1bd701422bc456645dbc52ca135b9e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02383b91d51c160f4f91aa9da7d2a7c11482b76e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02383b91d51c160f4f91aa9da7d2a7c11482b76e", "html_url": "https://github.com/rust-lang/rust/commit/02383b91d51c160f4f91aa9da7d2a7c11482b76e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02383b91d51c160f4f91aa9da7d2a7c11482b76e/comments", "author": {"login": "gfreezy", "id": 510012, "node_id": "MDQ6VXNlcjUxMDAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/510012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gfreezy", "html_url": "https://github.com/gfreezy", "followers_url": "https://api.github.com/users/gfreezy/followers", "following_url": "https://api.github.com/users/gfreezy/following{/other_user}", "gists_url": "https://api.github.com/users/gfreezy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gfreezy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gfreezy/subscriptions", "organizations_url": "https://api.github.com/users/gfreezy/orgs", "repos_url": "https://api.github.com/users/gfreezy/repos", "events_url": "https://api.github.com/users/gfreezy/events{/privacy}", "received_events_url": "https://api.github.com/users/gfreezy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gfreezy", "id": 510012, "node_id": "MDQ6VXNlcjUxMDAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/510012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gfreezy", "html_url": "https://github.com/gfreezy", "followers_url": "https://api.github.com/users/gfreezy/followers", "following_url": "https://api.github.com/users/gfreezy/following{/other_user}", "gists_url": "https://api.github.com/users/gfreezy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gfreezy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gfreezy/subscriptions", "organizations_url": "https://api.github.com/users/gfreezy/orgs", "repos_url": "https://api.github.com/users/gfreezy/repos", "events_url": "https://api.github.com/users/gfreezy/events{/privacy}", "received_events_url": "https://api.github.com/users/gfreezy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d99ae9ba56ac3ca2a07dc5b587b5a3c0dd504762", "url": "https://api.github.com/repos/rust-lang/rust/commits/d99ae9ba56ac3ca2a07dc5b587b5a3c0dd504762", "html_url": "https://github.com/rust-lang/rust/commit/d99ae9ba56ac3ca2a07dc5b587b5a3c0dd504762"}], "stats": {"total": 62, "additions": 59, "deletions": 3}, "files": [{"sha": "e13f54c4fa11634d5d97e6797f2409866befd9b7", "filename": "crates/ra_assists/src/add_missing_impl_members.rs", "status": "modified", "additions": 58, "deletions": 3, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/02383b91d51c160f4f91aa9da7d2a7c11482b76e/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02383b91d51c160f4f91aa9da7d2a7c11482b76e/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs?ref=02383b91d51c160f4f91aa9da7d2a7c11482b76e", "patch": "@@ -9,7 +9,35 @@ use ra_fmt::{leading_indent, reindent};\n \n use itertools::Itertools;\n \n-pub(crate) fn add_missing_impl_members(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+enum AddMissingImplMembersMode {\n+    DefaultMethodsOnly,\n+    NoDefaultMethods,\n+}\n+\n+pub(crate) fn add_missing_impl_members(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    add_missing_impl_members_inner(\n+        ctx,\n+        AddMissingImplMembersMode::NoDefaultMethods,\n+        \"add_impl_missing_members\",\n+        \"add missing impl members\",\n+    )\n+}\n+\n+pub(crate) fn add_missing_default_members(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    add_missing_impl_members_inner(\n+        ctx,\n+        AddMissingImplMembersMode::DefaultMethodsOnly,\n+        \"add_impl_default_members\",\n+        \"add impl default members\",\n+    )\n+}\n+\n+fn add_missing_impl_members_inner(\n+    mut ctx: AssistCtx<impl HirDatabase>,\n+    mode: AddMissingImplMembersMode,\n+    assist_id: &'static str,\n+    label: &'static str,\n+) -> Option<Assist> {\n     let impl_node = ctx.node_at_offset::<ast::ImplBlock>()?;\n     let impl_item_list = impl_node.item_list()?;\n \n@@ -35,15 +63,18 @@ pub(crate) fn add_missing_impl_members(mut ctx: AssistCtx<impl HirDatabase>) ->\n         trait_fns\n             .into_iter()\n             .filter(|t| def_name(t).is_some())\n-            .filter(|t| t.body().is_none())\n+            .filter(|t| match mode {\n+                AddMissingImplMembersMode::DefaultMethodsOnly => t.body().is_some(),\n+                AddMissingImplMembersMode::NoDefaultMethods => t.body().is_none(),\n+            })\n             .filter(|t| impl_fns.iter().all(|i| def_name(i) != def_name(t)))\n             .collect()\n     };\n     if missing_fns.is_empty() {\n         return None;\n     }\n \n-    ctx.add_action(AssistId(\"add_impl_missing_members\"), \"add missing impl members\", |edit| {\n+    ctx.add_action(AssistId(assist_id), label, |edit| {\n         let (parent_indent, indent) = {\n             // FIXME: Find a way to get the indent already used in the file.\n             // Now, we copy the indent of first item or indent with 4 spaces relative to impl block\n@@ -300,4 +331,28 @@ impl Foo for S {\n }\"#,\n         )\n     }\n+\n+    #[test]\n+    fn test_default_methods() {\n+        check_assist(\n+            add_missing_default_members,\n+            \"\n+trait Foo {\n+    fn valid(some: u32) -> bool { false }\n+    fn foo(some: u32) -> bool;\n+}\n+struct S;\n+impl Foo for S { <|> }\",\n+            \"\n+trait Foo {\n+    fn valid(some: u32) -> bool { false }\n+    fn foo(some: u32) -> bool;\n+}\n+struct S;\n+impl Foo for S {\n+    fn valid(some: u32) -> bool { false }<|>\n+}\",\n+        )\n+    }\n+\n }"}, {"sha": "fc36e8cc97f72270b31bc93021b0f3860785de93", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02383b91d51c160f4f91aa9da7d2a7c11482b76e/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02383b91d51c160f4f91aa9da7d2a7c11482b76e/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=02383b91d51c160f4f91aa9da7d2a7c11482b76e", "patch": "@@ -112,6 +112,7 @@ fn all_assists<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assis\n         remove_dbg::remove_dbg,\n         auto_import::auto_import,\n         add_missing_impl_members::add_missing_impl_members,\n+        add_missing_impl_members::add_missing_default_members,\n     ]\n }\n "}]}