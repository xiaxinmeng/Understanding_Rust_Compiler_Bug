{"sha": "96f0512a45ffebbe7488332ec5e44827a14ce78d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ZjA1MTJhNDVmZmViYmU3NDg4MzMyZWM1ZTQ0ODI3YTE0Y2U3OGQ=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-01-27T02:05:20Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-03T23:37:23Z"}, "message": "Added Round trait to core", "tree": {"sha": "1375f6a28af48240f19b851a7e3910fefdd4c330", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1375f6a28af48240f19b851a7e3910fefdd4c330"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96f0512a45ffebbe7488332ec5e44827a14ce78d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96f0512a45ffebbe7488332ec5e44827a14ce78d", "html_url": "https://github.com/rust-lang/rust/commit/96f0512a45ffebbe7488332ec5e44827a14ce78d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96f0512a45ffebbe7488332ec5e44827a14ce78d/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40f0b45f8e42357f1f16669ab937e13df21161f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/40f0b45f8e42357f1f16669ab937e13df21161f3", "html_url": "https://github.com/rust-lang/rust/commit/40f0b45f8e42357f1f16669ab937e13df21161f3"}], "stats": {"total": 126, "additions": 126, "deletions": 0}, "files": [{"sha": "43b68c5fc4f4071060b255533386e64a81477f4b", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/96f0512a45ffebbe7488332ec5e44827a14ce78d/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f0512a45ffebbe7488332ec5e44827a14ce78d/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=96f0512a45ffebbe7488332ec5e44827a14ce78d", "patch": "@@ -306,6 +306,33 @@ pub extern {\n     fn floorf32(val: f32) -> f32;\n }\n \n+impl f32: num::Round {\n+    #[inline(always)]\n+    pure fn round(&self, mode: num::RoundMode) -> f32 {\n+        match mode {\n+            num::RoundDown                           => floor(*self),\n+            num::RoundUp                             => ceil(*self),\n+            num::RoundToZero   if is_negative(*self) => ceil(*self),\n+            num::RoundToZero                         => floor(*self),\n+            num::RoundFromZero if is_negative(*self) => floor(*self),\n+            num::RoundFromZero                       => ceil(*self)\n+        }\n+    }\n+\n+    #[inline(always)]\n+    pure fn floor(&self) -> f32 { floor(*self) }\n+    #[inline(always)]\n+    pure fn ceil(&self) -> f32 { ceil(*self) }\n+    #[inline(always)]\n+    pure fn fract(&self) -> f32 {\n+        if is_negative(*self) {\n+            (*self) - ceil(*self)\n+        } else {\n+            (*self) - floor(*self)\n+        }\n+    }\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "851697012fc6145aa3472448697f40348d7eb793", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/96f0512a45ffebbe7488332ec5e44827a14ce78d/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f0512a45ffebbe7488332ec5e44827a14ce78d/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=96f0512a45ffebbe7488332ec5e44827a14ce78d", "patch": "@@ -330,6 +330,33 @@ pub extern {\n     fn floorf64(val: f64) -> f64;\n }\n \n+impl f64: num::Round {\n+    #[inline(always)]\n+    pure fn round(&self, mode: num::RoundMode) -> f64 {\n+        match mode {\n+            num::RoundDown                           => floor(*self),\n+            num::RoundUp                             => ceil(*self),\n+            num::RoundToZero   if is_negative(*self) => ceil(*self),\n+            num::RoundToZero                         => floor(*self),\n+            num::RoundFromZero if is_negative(*self) => floor(*self),\n+            num::RoundFromZero                       => ceil(*self)\n+        }\n+    }\n+\n+    #[inline(always)]\n+    pure fn floor(&self) -> f64 { floor(*self) }\n+    #[inline(always)]\n+    pure fn ceil(&self) -> f64 { ceil(*self) }\n+    #[inline(always)]\n+    pure fn fract(&self) -> f64 {\n+        if is_negative(*self) {\n+            (*self) - ceil(*self)\n+        } else {\n+            (*self) - floor(*self)\n+        }\n+    }\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "1d1be6df87abacfebb868cc5111b077303321f86", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/96f0512a45ffebbe7488332ec5e44827a14ce78d/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f0512a45ffebbe7488332ec5e44827a14ce78d/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=96f0512a45ffebbe7488332ec5e44827a14ce78d", "patch": "@@ -488,6 +488,39 @@ impl float: num::One {\n     static pure fn one() -> float { 1.0 }\n }\n \n+impl float: num::Round {\n+    #[inline(always)]\n+    pure fn round(&self, mode: num::RoundMode) -> float {\n+        match mode {\n+            num::RoundDown\n+                => f64::floor(*self as f64) as float,\n+            num::RoundUp\n+                => f64::ceil(*self as f64) as float,\n+            num::RoundToZero   if is_negative(*self)\n+                => f64::ceil(*self as f64) as float,\n+            num::RoundToZero\n+                => f64::floor(*self as f64) as float,\n+            num::RoundFromZero if is_negative(*self)\n+                => f64::floor(*self as f64) as float,\n+            num::RoundFromZero\n+                => f64::ceil(*self as f64) as float\n+        }\n+    }\n+\n+    #[inline(always)]\n+    pure fn floor(&self) -> float { f64::floor(*self as f64) as float}\n+    #[inline(always)]\n+    pure fn ceil(&self) -> float { f64::ceil(*self as f64) as float}\n+    #[inline(always)]\n+    pure fn fract(&self) -> float {\n+        if is_negative(*self) {\n+            (*self) - (f64::ceil(*self as f64) as float)\n+        } else {\n+            (*self) - (f64::floor(*self as f64) as float)\n+        }\n+    }\n+}\n+\n #[test]\n pub fn test_from_str() {\n    assert from_str(~\"3\") == Some(3.);"}, {"sha": "7f3a15621acfb65dda6f50e5466921537472c967", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/96f0512a45ffebbe7488332ec5e44827a14ce78d/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f0512a45ffebbe7488332ec5e44827a14ce78d/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=96f0512a45ffebbe7488332ec5e44827a14ce78d", "patch": "@@ -200,6 +200,18 @@ impl T: num::One {\n     static pure fn one() -> T { 1 }\n }\n \n+impl T: num::Round {\n+    #[inline(always)]\n+    pure fn round(&self, _: num::RoundMode) -> T { *self }\n+\n+    #[inline(always)]\n+    pure fn floor(&self) -> T { *self }\n+    #[inline(always)]\n+    pure fn ceil(&self) -> T { *self }\n+    #[inline(always)]\n+    pure fn fract(&self) -> T { 0 }\n+}\n+\n /**\n  * Parse a buffer of bytes\n  *"}, {"sha": "db8a741f18587c8e0b8e63834703c7896278cefe", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/96f0512a45ffebbe7488332ec5e44827a14ce78d/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f0512a45ffebbe7488332ec5e44827a14ce78d/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=96f0512a45ffebbe7488332ec5e44827a14ce78d", "patch": "@@ -35,3 +35,18 @@ pub trait Zero {\n pub trait One {\n     static pure fn one() -> Self;\n }\n+\n+pub trait Round {\n+    pure fn round(&self, mode: RoundMode) -> self;\n+\n+    pure fn floor(&self) -> self;\n+    pure fn ceil(&self)  -> self;\n+    pure fn fract(&self) -> self;\n+}\n+\n+pub enum RoundMode {\n+    RoundDown,\n+    RoundUp,\n+    RoundToZero,\n+    RoundFromZero\n+}"}, {"sha": "a59813b2df437455fc45ad2596b2c125529561bc", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/96f0512a45ffebbe7488332ec5e44827a14ce78d/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f0512a45ffebbe7488332ec5e44827a14ce78d/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=96f0512a45ffebbe7488332ec5e44827a14ce78d", "patch": "@@ -160,6 +160,18 @@ impl T: num::One {\n     static pure fn one() -> T { 1 }\n }\n \n+impl T: num::Round {\n+    #[inline(always)]\n+    pure fn round(&self, _: num::RoundMode) -> T { *self }\n+\n+    #[inline(always)]\n+    pure fn floor(&self) -> T { *self }\n+    #[inline(always)]\n+    pure fn ceil(&self) -> T { *self }\n+    #[inline(always)]\n+    pure fn fract(&self) -> T { 0 }\n+}\n+\n /**\n  * Parse a buffer of bytes\n  *"}]}