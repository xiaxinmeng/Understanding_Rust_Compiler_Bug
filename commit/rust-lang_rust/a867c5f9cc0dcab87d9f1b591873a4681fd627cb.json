{"sha": "a867c5f9cc0dcab87d9f1b591873a4681fd627cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4NjdjNWY5Y2MwZGNhYjg3ZDlmMWI1OTE4NzNhNDY4MWZkNjI3Y2I=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-01T21:52:32Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-05T06:33:09Z"}, "message": "resolve: merge `resolve_pats` and `resolve_pattern_top`.", "tree": {"sha": "67018e1d0d49fc7234ac099bdcd46a7626af5856", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67018e1d0d49fc7234ac099bdcd46a7626af5856"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a867c5f9cc0dcab87d9f1b591873a4681fd627cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a867c5f9cc0dcab87d9f1b591873a4681fd627cb", "html_url": "https://github.com/rust-lang/rust/commit/a867c5f9cc0dcab87d9f1b591873a4681fd627cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a867c5f9cc0dcab87d9f1b591873a4681fd627cb/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8ef907886e34fe314f1aacc342c4a49cb34ad6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8ef907886e34fe314f1aacc342c4a49cb34ad6a", "html_url": "https://github.com/rust-lang/rust/commit/d8ef907886e34fe314f1aacc342c4a49cb34ad6a"}], "stats": {"total": 25, "additions": 6, "deletions": 19}, "files": [{"sha": "2056e7b91046563d390d5bebd588b3a3704b75ff", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a867c5f9cc0dcab87d9f1b591873a4681fd627cb/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a867c5f9cc0dcab87d9f1b591873a4681fd627cb/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=a867c5f9cc0dcab87d9f1b591873a4681fd627cb", "patch": "@@ -1112,7 +1112,6 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n         let mut bindings = smallvec![(false, <_>::default())];\n         for Param { pat, ty, .. } in params {\n             self.resolve_pattern(pat, PatternSource::FnParam, &mut bindings);\n-            self.check_consistent_bindings_top(pat);\n             self.visit_ty(ty);\n             debug!(\"(resolving function / closure) recorded parameter\");\n         }\n@@ -1248,29 +1247,15 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n \n     fn resolve_arm(&mut self, arm: &Arm) {\n         self.with_rib(ValueNS, NormalRibKind, |this| {\n-            this.resolve_pats(&arm.pats, PatternSource::Match);\n+            this.resolve_pattern_top(&arm.pat, PatternSource::Match);\n             walk_list!(this, visit_expr, &arm.guard);\n             this.visit_expr(&arm.body);\n         });\n     }\n \n-    /// Arising from `source`, resolve a sequence of patterns (top level or-patterns).\n-    fn resolve_pats(&mut self, pats: &[P<Pat>], source: PatternSource) {\n-        let mut bindings = smallvec![(true, <_>::default())];\n-        for pat in pats {\n-            bindings.push((false, <_>::default()));\n-            self.resolve_pattern(pat, source, &mut bindings);\n-            let collected = bindings.pop().unwrap().1;\n-            bindings.last_mut().unwrap().1.extend(collected);\n-        }\n-        // This has to happen *after* we determine which pat_idents are variants\n-        self.check_consistent_bindings(pats);\n-    }\n-\n+    /// Arising from `source`, resolve a top level pattern.\n     fn resolve_pattern_top(&mut self, pat: &Pat, pat_src: PatternSource) {\n         self.resolve_pattern(pat, pat_src, &mut smallvec![(false, <_>::default())]);\n-        // This has to happen *after* we determine which pat_idents are variants:\n-        self.check_consistent_bindings_top(pat);\n     }\n \n     fn resolve_pattern(\n@@ -1280,6 +1265,8 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n         bindings: &mut SmallVec<[(bool, FxHashSet<Ident>); 1]>,\n     ) {\n         self.resolve_pattern_inner(pat, pat_src, bindings);\n+        // This has to happen *after* we determine which pat_idents are variants:\n+        self.check_consistent_bindings_top(pat);\n         visit::walk_pat(self, pat);\n     }\n \n@@ -1866,9 +1853,9 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n                 visit::walk_expr(self, expr);\n             }\n \n-            ExprKind::Let(ref pats, ref scrutinee) => {\n+            ExprKind::Let(ref pat, ref scrutinee) => {\n                 self.visit_expr(scrutinee);\n-                self.resolve_pats(pats, PatternSource::Let);\n+                self.resolve_pattern_top(pat, PatternSource::Let);\n             }\n \n             ExprKind::If(ref cond, ref then, ref opt_else) => {"}]}