{"sha": "548afdbe1a600ba868ac00acc4e94cca0242b001", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0OGFmZGJlMWE2MDBiYTg2OGFjMDBhY2M0ZTk0Y2NhMDI0MmIwMDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-03T04:18:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-03T04:18:32Z"}, "message": "Auto merge of #70726 - Centril:rollup-zrdkkpt, r=Centril\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #68334 (AArch64 bare-metal targets: Build rust-std)\n - #70224 (Clean up rustdoc js testers)\n - #70532 (Miri engine: stronger type-based sanity check for assignments)\n - #70698 (bootstrap: add `--json-output` for rust-analyzer)\n - #70715 (Fix typo in operands section)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "414357f0501d414c9774afa662fcd337c3af9e1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/414357f0501d414c9774afa662fcd337c3af9e1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/548afdbe1a600ba868ac00acc4e94cca0242b001", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/548afdbe1a600ba868ac00acc4e94cca0242b001", "html_url": "https://github.com/rust-lang/rust/commit/548afdbe1a600ba868ac00acc4e94cca0242b001", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/548afdbe1a600ba868ac00acc4e94cca0242b001/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c53e4b38779c3c074ae571b8520ab08e5bb0b904", "url": "https://api.github.com/repos/rust-lang/rust/commits/c53e4b38779c3c074ae571b8520ab08e5bb0b904", "html_url": "https://github.com/rust-lang/rust/commit/c53e4b38779c3c074ae571b8520ab08e5bb0b904"}, {"sha": "c2372f109e2d9822349e4af109034da25cf4d72f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2372f109e2d9822349e4af109034da25cf4d72f", "html_url": "https://github.com/rust-lang/rust/commit/c2372f109e2d9822349e4af109034da25cf4d72f"}], "stats": {"total": 1091, "additions": 448, "deletions": 643}, "files": [{"sha": "32ce170a5a1fe173d751eeb10cd5196d34b0f71f", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/548afdbe1a600ba868ac00acc4e94cca0242b001/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548afdbe1a600ba868ac00acc4e94cca0242b001/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=548afdbe1a600ba868ac00acc4e94cca0242b001", "patch": "@@ -935,7 +935,11 @@ pub fn stream_cargo(\n     }\n     // Instruct Cargo to give us json messages on stdout, critically leaving\n     // stderr as piped so we can get those pretty colors.\n-    let mut message_format = String::from(\"json-render-diagnostics\");\n+    let mut message_format = if builder.config.json_output {\n+        String::from(\"json\")\n+    } else {\n+        String::from(\"json-render-diagnostics\")\n+    };\n     if let Some(s) = &builder.config.rustc_error_format {\n         message_format.push_str(\",json-diagnostic-\");\n         message_format.push_str(s);"}, {"sha": "133709421a5cdeaa5291887ab0e3f5175eb5dca1", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/548afdbe1a600ba868ac00acc4e94cca0242b001/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548afdbe1a600ba868ac00acc4e94cca0242b001/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=548afdbe1a600ba868ac00acc4e94cca0242b001", "patch": "@@ -48,6 +48,7 @@ pub struct Config {\n     pub ignore_git: bool,\n     pub exclude: Vec<PathBuf>,\n     pub rustc_error_format: Option<String>,\n+    pub json_output: bool,\n     pub test_compare_mode: bool,\n     pub llvm_libunwind: bool,\n \n@@ -415,6 +416,7 @@ impl Config {\n         let mut config = Config::default_opts();\n         config.exclude = flags.exclude;\n         config.rustc_error_format = flags.rustc_error_format;\n+        config.json_output = flags.json_output;\n         config.on_fail = flags.on_fail;\n         config.stage = flags.stage;\n         config.jobs = flags.jobs.map(threads_from_config);"}, {"sha": "5d6e401d5b3fb0b46ef6369acc92eaa5526499b5", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/548afdbe1a600ba868ac00acc4e94cca0242b001/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548afdbe1a600ba868ac00acc4e94cca0242b001/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=548afdbe1a600ba868ac00acc4e94cca0242b001", "patch": "@@ -31,6 +31,7 @@ pub struct Flags {\n     pub incremental: bool,\n     pub exclude: Vec<PathBuf>,\n     pub rustc_error_format: Option<String>,\n+    pub json_output: bool,\n     pub dry_run: bool,\n \n     // This overrides the deny-warnings configuration option,\n@@ -156,6 +157,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n             \"VALUE\",\n         );\n         opts.optopt(\"\", \"error-format\", \"rustc error format\", \"FORMAT\");\n+        opts.optflag(\"\", \"json-output\", \"use message-format=json\");\n         opts.optopt(\n             \"\",\n             \"llvm-skip-rebuild\",\n@@ -503,6 +505,7 @@ Arguments:\n             dry_run: matches.opt_present(\"dry-run\"),\n             on_fail: matches.opt_str(\"on-fail\"),\n             rustc_error_format: matches.opt_str(\"error-format\"),\n+            json_output: matches.opt_present(\"json-output\"),\n             keep_stage: matches\n                 .opt_strs(\"keep-stage\")\n                 .into_iter()"}, {"sha": "4ac5e23d683eb3eb6cf2541e7928b5b69e78780d", "filename": "src/ci/docker/dist-various-1/Dockerfile", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/548afdbe1a600ba868ac00acc4e94cca0242b001/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/548afdbe1a600ba868ac00acc4e94cca0242b001/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile?ref=548afdbe1a600ba868ac00acc4e94cca0242b001", "patch": "@@ -72,6 +72,9 @@ RUN ./install-mips-musl.sh\n COPY dist-various-1/install-mipsel-musl.sh /build\n RUN ./install-mipsel-musl.sh\n \n+COPY dist-various-1/install-aarch64-none-elf.sh /build\n+RUN ./install-aarch64-none-elf.sh\n+\n # Suppress some warnings in the openwrt toolchains we downloaded\n ENV STAGING_DIR=/tmp\n \n@@ -140,6 +143,8 @@ ENV TARGETS=$TARGETS,armv5te-unknown-linux-gnueabi\n ENV TARGETS=$TARGETS,armv5te-unknown-linux-musleabi\n ENV TARGETS=$TARGETS,armv7-unknown-linux-musleabihf\n ENV TARGETS=$TARGETS,aarch64-unknown-linux-musl\n+ENV TARGETS=$TARGETS,aarch64-unknown-none\n+ENV TARGETS=$TARGETS,aarch64-unknown-none-softfloat\n ENV TARGETS=$TARGETS,sparc64-unknown-linux-gnu\n ENV TARGETS=$TARGETS,x86_64-unknown-redox\n ENV TARGETS=$TARGETS,thumbv6m-none-eabi\n@@ -178,6 +183,10 @@ ENV CC_mipsel_unknown_linux_musl=mipsel-openwrt-linux-gcc \\\n     CC_armv7a_none_eabihf=arm-none-eabi-gcc \\\n     CFLAGS_armv7a_none_eabi=-march=armv7-a \\\n     CFLAGS_armv7a_none_eabihf=-march=armv7-a+vfpv3 \\\n+    CC_aarch64_unknown_none_softfloat=aarch64-none-elf-gcc \\\n+    CFLAGS_aarch64_unknown_none_softfloat=-mstrict-align -march=armv8-a+nofp+nosimd \\\n+    CC_aarch64_unknown_none=aarch64-none-elf-gcc \\\n+    CFLAGS_aarch64_unknown_none=-mstrict-align -march=armv8-a+fp+simd \\\n     CC_riscv64gc_unknown_linux_gnu=riscv64-unknown-linux-gnu-gcc \\\n     AR_riscv64gc_unknown_linux_gnu=riscv64-unknown-linux-gnu-ar \\\n     CXX_riscv64gc_unknown_linux_gnu=riscv64-unknown-linux-gnu-g++ \\"}, {"sha": "d72976c28584225902eeed7ede849610ce3ee586", "filename": "src/ci/docker/dist-various-1/install-aarch64-none-elf.sh", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/548afdbe1a600ba868ac00acc4e94cca0242b001/src%2Fci%2Fdocker%2Fdist-various-1%2Finstall-aarch64-none-elf.sh", "raw_url": "https://github.com/rust-lang/rust/raw/548afdbe1a600ba868ac00acc4e94cca0242b001/src%2Fci%2Fdocker%2Fdist-various-1%2Finstall-aarch64-none-elf.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-1%2Finstall-aarch64-none-elf.sh?ref=548afdbe1a600ba868ac00acc4e94cca0242b001", "patch": "@@ -0,0 +1,6 @@\n+#!/usr/bin/env bash\n+\n+set -ex\n+\n+curl -L https://developer.arm.com/-/media/Files/downloads/gnu-a/9.2-2019.12/binrel/gcc-arm-9.2-2019.12-x86_64-aarch64-none-elf.tar.xz \\\n+| tar --extract --xz --strip 1 --directory /usr/local"}, {"sha": "da01d9228f14e0ff12177e7694205a4f9a6ed095", "filename": "src/doc/unstable-book/src/library-features/llvm-asm.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/548afdbe1a600ba868ac00acc4e94cca0242b001/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fllvm-asm.md", "raw_url": "https://github.com/rust-lang/rust/raw/548afdbe1a600ba868ac00acc4e94cca0242b001/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fllvm-asm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fllvm-asm.md?ref=548afdbe1a600ba868ac00acc4e94cca0242b001", "patch": "@@ -86,7 +86,7 @@ llvm_asm!(\"xor %eax, %eax\" ::: \"eax\");\n \n Input and output operands follow the same format: `:\n \"constraints1\"(expr1), \"constraints2\"(expr2), ...\"`. Output operand\n-expressions must be mutable lvalues, or not yet assigned:\n+expressions must be mutable place, or not yet assigned:\n \n ```rust\n # #![feature(llvm_asm)]"}, {"sha": "10d3101ebb87a73e951265349b94a7521c670175", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/548afdbe1a600ba868ac00acc4e94cca0242b001/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548afdbe1a600ba868ac00acc4e94cca0242b001/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=548afdbe1a600ba868ac00acc4e94cca0242b001", "patch": "@@ -18,7 +18,7 @@ use rustc_middle::ty::query::TyCtxtAt;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_span::source_map::DUMMY_SP;\n-use rustc_target::abi::{Align, HasDataLayout, LayoutOf, Size, TargetDataLayout};\n+use rustc_target::abi::{Abi, Align, HasDataLayout, LayoutOf, Size, TargetDataLayout};\n \n use super::{\n     Immediate, MPlaceTy, Machine, MemPlace, MemPlaceMeta, Memory, OpTy, Operand, Place, PlaceTy,\n@@ -210,6 +210,53 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> LayoutOf for InterpCx<'mir, 'tcx, M> {\n     }\n }\n \n+/// Test if it is valid for a MIR assignment to assign `src`-typed place to `dest`-typed value.\n+/// This test should be symmetric, as it is primarily about layout compatibility.\n+pub(super) fn mir_assign_valid_types<'tcx>(\n+    src: TyAndLayout<'tcx>,\n+    dest: TyAndLayout<'tcx>,\n+) -> bool {\n+    if src.ty == dest.ty {\n+        // Equal types, all is good.\n+        return true;\n+    }\n+    // Type-changing assignments can happen for (at least) two reasons:\n+    // - `&mut T` -> `&T` gets optimized from a reborrow to a mere assignment.\n+    // - Subtyping is used. While all normal lifetimes are erased, higher-ranked lifetime\n+    //   bounds are still around and can lead to type differences.\n+    // There is no good way to check the latter, so we compare layouts instead -- but only\n+    // for values with `Scalar`/`ScalarPair` abi.\n+    // FIXME: Do something more accurate, type-based.\n+    match &src.abi {\n+        Abi::Scalar(..) | Abi::ScalarPair(..) => src.layout == dest.layout,\n+        _ => false,\n+    }\n+}\n+\n+/// Use the already known layout if given (but sanity check in debug mode),\n+/// or compute the layout.\n+#[cfg_attr(not(debug_assertions), inline(always))]\n+pub(super) fn from_known_layout<'tcx>(\n+    known_layout: Option<TyAndLayout<'tcx>>,\n+    compute: impl FnOnce() -> InterpResult<'tcx, TyAndLayout<'tcx>>,\n+) -> InterpResult<'tcx, TyAndLayout<'tcx>> {\n+    match known_layout {\n+        None => compute(),\n+        Some(known_layout) => {\n+            if cfg!(debug_assertions) {\n+                let check_layout = compute()?;\n+                assert!(\n+                    mir_assign_valid_types(check_layout, known_layout),\n+                    \"expected type differs from actual type.\\nexpected: {:?}\\nactual: {:?}\",\n+                    known_layout.ty,\n+                    check_layout.ty,\n+                );\n+            }\n+            Ok(known_layout)\n+        }\n+    }\n+}\n+\n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     pub fn new(\n         tcx: TyCtxtAt<'tcx>,\n@@ -377,7 +424,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // have to support that case (mostly by skipping all caching).\n         match frame.locals.get(local).and_then(|state| state.layout.get()) {\n             None => {\n-                let layout = crate::interpret::operand::from_known_layout(layout, || {\n+                let layout = from_known_layout(layout, || {\n                     let local_ty = frame.body.local_decls[local].ty;\n                     let local_ty =\n                         self.subst_from_frame_and_normalize_erasing_regions(frame, local_ty);"}, {"sha": "fb59a177b971637066937a43aa6726faa7782871", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/548afdbe1a600ba868ac00acc4e94cca0242b001/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548afdbe1a600ba868ac00acc4e94cca0242b001/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=548afdbe1a600ba868ac00acc4e94cca0242b001", "patch": "@@ -18,19 +18,13 @@ mod visitor;\n pub use rustc_middle::mir::interpret::*; // have all the `interpret` symbols in one place: here\n \n pub use self::eval_context::{Frame, InterpCx, LocalState, LocalValue, StackPopCleanup};\n-\n-pub use self::place::{MPlaceTy, MemPlace, MemPlaceMeta, Place, PlaceTy};\n-\n-pub use self::memory::{AllocCheck, FnVal, Memory, MemoryKind};\n-\n+pub use self::intern::{intern_const_alloc_recursive, InternKind};\n pub use self::machine::{AllocMap, Machine, MayLeak, StackPopJump};\n-\n-pub use self::operand::{ImmTy, Immediate, OpTy, Operand, ScalarMaybeUndef};\n-\n-pub use self::visitor::{MutValueVisitor, ValueVisitor};\n-\n+pub use self::memory::{AllocCheck, FnVal, Memory, MemoryKind};\n+pub use self::operand::{ImmTy, Immediate, OpTy, Operand};\n+pub use self::place::{MPlaceTy, MemPlace, MemPlaceMeta, Place, PlaceTy};\n pub use self::validity::RefTracking;\n-\n-pub use self::intern::{intern_const_alloc_recursive, InternKind};\n+pub use self::visitor::{MutValueVisitor, ValueVisitor};\n \n crate use self::intrinsics::eval_nullary_intrinsic;\n+use eval_context::{from_known_layout, mir_assign_valid_types};"}, {"sha": "12595e4e4d92685510959d58effc63a5a68098ad", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 6, "deletions": 29, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/548afdbe1a600ba868ac00acc4e94cca0242b001/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548afdbe1a600ba868ac00acc4e94cca0242b001/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=548afdbe1a600ba868ac00acc4e94cca0242b001", "patch": "@@ -2,21 +2,21 @@\n //! All high-level functions to read from memory work on operands as sources.\n \n use std::convert::TryFrom;\n+use std::fmt::Write;\n \n-use super::{InterpCx, MPlaceTy, Machine, MemPlace, Place, PlaceTy};\n use rustc_hir::def::Namespace;\n use rustc_macros::HashStable;\n-pub use rustc_middle::mir::interpret::ScalarMaybeUndef;\n-use rustc_middle::mir::interpret::{\n-    sign_extend, truncate, AllocId, ConstValue, GlobalId, InterpResult, Pointer, Scalar,\n-};\n use rustc_middle::ty::layout::{IntegerExt, PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::print::{FmtPrinter, PrettyPrinter, Printer};\n use rustc_middle::ty::Ty;\n use rustc_middle::{mir, ty};\n use rustc_target::abi::{Abi, DiscriminantKind, HasDataLayout, Integer, LayoutOf, Size};\n use rustc_target::abi::{VariantIdx, Variants};\n-use std::fmt::Write;\n+\n+use super::{\n+    from_known_layout, sign_extend, truncate, AllocId, ConstValue, GlobalId, InterpCx,\n+    InterpResult, MPlaceTy, Machine, MemPlace, Place, PlaceTy, Pointer, Scalar, ScalarMaybeUndef,\n+};\n \n /// An `Immediate` represents a single immediate self-contained Rust value.\n ///\n@@ -203,29 +203,6 @@ impl<'tcx, Tag: Copy> ImmTy<'tcx, Tag> {\n     }\n }\n \n-// Use the existing layout if given (but sanity check in debug mode),\n-// or compute the layout.\n-#[inline(always)]\n-pub(super) fn from_known_layout<'tcx>(\n-    layout: Option<TyAndLayout<'tcx>>,\n-    compute: impl FnOnce() -> InterpResult<'tcx, TyAndLayout<'tcx>>,\n-) -> InterpResult<'tcx, TyAndLayout<'tcx>> {\n-    match layout {\n-        None => compute(),\n-        Some(layout) => {\n-            if cfg!(debug_assertions) {\n-                let layout2 = compute()?;\n-                assert_eq!(\n-                    layout.layout, layout2.layout,\n-                    \"mismatch in layout of supposedly equal-layout types {:?} and {:?}\",\n-                    layout.ty, layout2.ty\n-                );\n-            }\n-            Ok(layout)\n-        }\n-    }\n-}\n-\n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Normalice `place.ptr` to a `Pointer` if this is a place and not a ZST.\n     /// Can be helpful to avoid lots of `force_ptr` calls later, if this place is used a lot."}, {"sha": "ec299cdd2134b284a65c4000707425fea9630dda", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/548afdbe1a600ba868ac00acc4e94cca0242b001/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548afdbe1a600ba868ac00acc4e94cca0242b001/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=548afdbe1a600ba868ac00acc4e94cca0242b001", "patch": "@@ -7,16 +7,15 @@ use std::hash::Hash;\n \n use rustc_macros::HashStable;\n use rustc_middle::mir;\n-use rustc_middle::mir::interpret::truncate;\n use rustc_middle::ty::layout::{PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::{self, Ty};\n use rustc_target::abi::{Abi, Align, DiscriminantKind, FieldsShape};\n use rustc_target::abi::{HasDataLayout, LayoutOf, Size, VariantIdx, Variants};\n \n use super::{\n-    AllocId, AllocMap, Allocation, AllocationExtra, ImmTy, Immediate, InterpCx, InterpResult,\n-    LocalValue, Machine, MemoryKind, OpTy, Operand, Pointer, PointerArithmetic, RawConst, Scalar,\n-    ScalarMaybeUndef,\n+    mir_assign_valid_types, truncate, AllocId, AllocMap, Allocation, AllocationExtra, ImmTy,\n+    Immediate, InterpCx, InterpResult, LocalValue, Machine, MemoryKind, OpTy, Operand, Pointer,\n+    PointerArithmetic, RawConst, Scalar, ScalarMaybeUndef,\n };\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable)]\n@@ -869,10 +868,10 @@ where\n         // We do NOT compare the types for equality, because well-typed code can\n         // actually \"transmute\" `&mut T` to `&T` in an assignment without a cast.\n         assert!(\n-            src.layout.layout == dest.layout.layout,\n-            \"Layout mismatch when copying!\\nsrc: {:#?}\\ndest: {:#?}\",\n-            src,\n-            dest\n+            mir_assign_valid_types(src.layout, dest.layout),\n+            \"type mismatch when copying!\\nsrc: {:?},\\ndest: {:?}\",\n+            src.layout.ty,\n+            dest.layout.ty,\n         );\n \n         // Let us see if the layout is simple so we take a shortcut, avoid force_allocation.\n@@ -923,7 +922,7 @@ where\n         src: OpTy<'tcx, M::PointerTag>,\n         dest: PlaceTy<'tcx, M::PointerTag>,\n     ) -> InterpResult<'tcx> {\n-        if src.layout.layout == dest.layout.layout {\n+        if mir_assign_valid_types(src.layout, dest.layout) {\n             // Fast path: Just use normal `copy_op`\n             return self.copy_op(src, dest);\n         }"}, {"sha": "f075d3e22d664ad1516b3b8acfd01e017361b798", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/548afdbe1a600ba868ac00acc4e94cca0242b001/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548afdbe1a600ba868ac00acc4e94cca0242b001/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=548afdbe1a600ba868ac00acc4e94cca0242b001", "patch": "@@ -56,6 +56,8 @@ static TARGETS: &[&str] = &[\n     \"aarch64-unknown-hermit\",\n     \"aarch64-unknown-linux-gnu\",\n     \"aarch64-unknown-linux-musl\",\n+    \"aarch64-unknown-none\",\n+    \"aarch64-unknown-none-softfloat\",\n     \"aarch64-unknown-redox\",\n     \"arm-linux-androideabi\",\n     \"arm-unknown-linux-gnueabi\","}, {"sha": "81e64aec491a6e443698ee2fe752bcf0bf287f81", "filename": "src/tools/rustdoc-js-common/lib.js", "status": "added", "additions": 319, "deletions": 0, "changes": 319, "blob_url": "https://github.com/rust-lang/rust/blob/548afdbe1a600ba868ac00acc4e94cca0242b001/src%2Ftools%2Frustdoc-js-common%2Flib.js", "raw_url": "https://github.com/rust-lang/rust/raw/548afdbe1a600ba868ac00acc4e94cca0242b001/src%2Ftools%2Frustdoc-js-common%2Flib.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js-common%2Flib.js?ref=548afdbe1a600ba868ac00acc4e94cca0242b001", "patch": "@@ -0,0 +1,319 @@\n+const fs = require('fs');\n+\n+function getNextStep(content, pos, stop) {\n+    while (pos < content.length && content[pos] !== stop &&\n+           (content[pos] === ' ' || content[pos] === '\\t' || content[pos] === '\\n')) {\n+        pos += 1;\n+    }\n+    if (pos >= content.length) {\n+        return null;\n+    }\n+    if (content[pos] !== stop) {\n+        return pos * -1;\n+    }\n+    return pos;\n+}\n+\n+// Stupid function extractor based on indent. Doesn't support block\n+// comments. If someone puts a ' or an \" in a block comment this\n+// will blow up. Template strings are not tested and might also be\n+// broken.\n+function extractFunction(content, functionName) {\n+    var indent = 0;\n+    var splitter = \"function \" + functionName + \"(\";\n+\n+    while (true) {\n+        var start = content.indexOf(splitter);\n+        if (start === -1) {\n+            break;\n+        }\n+        var pos = start;\n+        while (pos < content.length && content[pos] !== ')') {\n+            pos += 1;\n+        }\n+        if (pos >= content.length) {\n+            break;\n+        }\n+        pos = getNextStep(content, pos + 1, '{');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        while (pos < content.length) {\n+            // Eat single-line comments\n+            if (content[pos] === '/' && pos > 0 && content[pos-1] === '/') {\n+                do {\n+                    pos += 1;\n+                } while (pos < content.length && content[pos] !== '\\n');\n+\n+            // Eat quoted strings\n+            } else if (content[pos] === '\"' || content[pos] === \"'\" || content[pos] === \"`\") {\n+                var stop = content[pos];\n+                var is_escaped = false;\n+                do {\n+                    if (content[pos] === '\\\\') {\n+                        pos += 2;\n+                    } else {\n+                        pos += 1;\n+                    }\n+                } while (pos < content.length &&\n+                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n+\n+            // Otherwise, check for indent\n+            } else if (content[pos] === '{') {\n+                indent += 1;\n+            } else if (content[pos] === '}') {\n+                indent -= 1;\n+                if (indent === 0) {\n+                    return content.slice(start, pos + 1);\n+                }\n+            }\n+            pos += 1;\n+        }\n+        content = content.slice(start + 1);\n+    }\n+    return null;\n+}\n+\n+// Stupid function extractor for array.\n+function extractArrayVariable(content, arrayName) {\n+    var splitter = \"var \" + arrayName;\n+    while (true) {\n+        var start = content.indexOf(splitter);\n+        if (start === -1) {\n+            break;\n+        }\n+        var pos = getNextStep(content, start, '=');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        pos = getNextStep(content, pos, '[');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        while (pos < content.length) {\n+            if (content[pos] === '\"' || content[pos] === \"'\") {\n+                var stop = content[pos];\n+                do {\n+                    if (content[pos] === '\\\\') {\n+                        pos += 2;\n+                    } else {\n+                        pos += 1;\n+                    }\n+                } while (pos < content.length &&\n+                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n+            } else if (content[pos] === ']' &&\n+                       pos + 1 < content.length &&\n+                       content[pos + 1] === ';') {\n+                return content.slice(start, pos + 2);\n+            }\n+            pos += 1;\n+        }\n+        content = content.slice(start + 1);\n+    }\n+    return null;\n+}\n+\n+// Stupid function extractor for variable.\n+function extractVariable(content, varName) {\n+    var splitter = \"var \" + varName;\n+    while (true) {\n+        var start = content.indexOf(splitter);\n+        if (start === -1) {\n+            break;\n+        }\n+        var pos = getNextStep(content, start, '=');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        while (pos < content.length) {\n+            if (content[pos] === '\"' || content[pos] === \"'\") {\n+                var stop = content[pos];\n+                do {\n+                    if (content[pos] === '\\\\') {\n+                        pos += 2;\n+                    } else {\n+                        pos += 1;\n+                    }\n+                } while (pos < content.length &&\n+                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n+            } else if (content[pos] === ';' || content[pos] === ',') {\n+                return content.slice(start, pos + 1);\n+            }\n+            pos += 1;\n+        }\n+        content = content.slice(start + 1);\n+    }\n+    return null;\n+}\n+\n+function loadContent(content) {\n+    var Module = module.constructor;\n+    var m = new Module();\n+    m._compile(content, \"tmp.js\");\n+    m.exports.ignore_order = content.indexOf(\"\\n// ignore-order\\n\") !== -1 ||\n+        content.startsWith(\"// ignore-order\\n\");\n+    m.exports.exact_check = content.indexOf(\"\\n// exact-check\\n\") !== -1 ||\n+        content.startsWith(\"// exact-check\\n\");\n+    m.exports.should_fail = content.indexOf(\"\\n// should-fail\\n\") !== -1 ||\n+        content.startsWith(\"// should-fail\\n\");\n+    return m.exports;\n+}\n+\n+function readFile(filePath) {\n+    return fs.readFileSync(filePath, 'utf8');\n+}\n+\n+function loadThings(thingsToLoad, kindOfLoad, funcToCall, fileContent) {\n+    var content = '';\n+    for (var i = 0; i < thingsToLoad.length; ++i) {\n+        var tmp = funcToCall(fileContent, thingsToLoad[i]);\n+        if (tmp === null) {\n+            console.error('unable to find ' + kindOfLoad + ' \"' + thingsToLoad[i] + '\"');\n+            process.exit(1);\n+        }\n+        content += tmp;\n+        content += 'exports.' + thingsToLoad[i] + ' = ' + thingsToLoad[i] + ';';\n+    }\n+    return content;\n+}\n+\n+function lookForEntry(entry, data) {\n+    for (var i = 0; i < data.length; ++i) {\n+        var allGood = true;\n+        for (var key in entry) {\n+            if (!entry.hasOwnProperty(key)) {\n+                continue;\n+            }\n+            var value = data[i][key];\n+            // To make our life easier, if there is a \"parent\" type, we add it to the path.\n+            if (key === 'path' && data[i]['parent'] !== undefined) {\n+                if (value.length > 0) {\n+                    value += '::' + data[i]['parent']['name'];\n+                } else {\n+                    value = data[i]['parent']['name'];\n+                }\n+            }\n+            if (value !== entry[key]) {\n+                allGood = false;\n+                break;\n+            }\n+        }\n+        if (allGood === true) {\n+            return i;\n+        }\n+    }\n+    return null;\n+}\n+\n+function loadMainJsAndIndex(mainJs, aliases, searchIndex, crate) {\n+    if (searchIndex[searchIndex.length - 1].length === 0) {\n+        searchIndex.pop();\n+    }\n+    searchIndex.pop();\n+    searchIndex = loadContent(searchIndex.join(\"\\n\") + '\\nexports.searchIndex = searchIndex;');\n+    finalJS = \"\";\n+\n+    var arraysToLoad = [\"itemTypes\"];\n+    var variablesToLoad = [\"MAX_LEV_DISTANCE\", \"MAX_RESULTS\", \"NO_TYPE_FILTER\",\n+                           \"GENERICS_DATA\", \"NAME\", \"INPUTS_DATA\", \"OUTPUT_DATA\",\n+                           \"TY_PRIMITIVE\", \"TY_KEYWORD\",\n+                           \"levenshtein_row2\"];\n+    // execQuery first parameter is built in getQuery (which takes in the search input).\n+    // execQuery last parameter is built in buildIndex.\n+    // buildIndex requires the hashmap from search-index.\n+    var functionsToLoad = [\"buildHrefAndPath\", \"pathSplitter\", \"levenshtein\", \"validateResult\",\n+                           \"getQuery\", \"buildIndex\", \"execQuery\", \"execSearch\"];\n+\n+    finalJS += 'window = { \"currentCrate\": \"' + crate + '\" };\\n';\n+    finalJS += 'var rootPath = \"../\";\\n';\n+    finalJS += aliases;\n+    finalJS += loadThings(arraysToLoad, 'array', extractArrayVariable, mainJs);\n+    finalJS += loadThings(variablesToLoad, 'variable', extractVariable, mainJs);\n+    finalJS += loadThings(functionsToLoad, 'function', extractFunction, mainJs);\n+\n+    var loaded = loadContent(finalJS);\n+    var index = loaded.buildIndex(searchIndex.searchIndex);\n+\n+    return [loaded, index];\n+}\n+\n+function runChecks(testFile, loaded, index) {\n+    var errors = 0;\n+    var loadedFile = loadContent(\n+        readFile(testFile) + 'exports.QUERY = QUERY;exports.EXPECTED = EXPECTED;');\n+\n+    const expected = loadedFile.EXPECTED;\n+    const query = loadedFile.QUERY;\n+    const filter_crate = loadedFile.FILTER_CRATE;\n+    const ignore_order = loadedFile.ignore_order;\n+    const exact_check = loadedFile.exact_check;\n+    const should_fail = loadedFile.should_fail;\n+\n+    var results = loaded.execSearch(loaded.getQuery(query), index);\n+    var error_text = [];\n+\n+    for (var key in expected) {\n+        if (!expected.hasOwnProperty(key)) {\n+            continue;\n+        }\n+        if (!results.hasOwnProperty(key)) {\n+            error_text.push('==> Unknown key \"' + key + '\"');\n+            break;\n+        }\n+        var entry = expected[key];\n+        var prev_pos = -1;\n+        for (var i = 0; i < entry.length; ++i) {\n+            var entry_pos = lookForEntry(entry[i], results[key]);\n+            if (entry_pos === null) {\n+                error_text.push(\"==> Result not found in '\" + key + \"': '\" +\n+                                JSON.stringify(entry[i]) + \"'\");\n+            } else if (exact_check === true && prev_pos + 1 !== entry_pos) {\n+                error_text.push(\"==> Exact check failed at position \" + (prev_pos + 1) + \": \" +\n+                                \"expected '\" + JSON.stringify(entry[i]) + \"' but found '\" +\n+                                JSON.stringify(results[key][i]) + \"'\");\n+            } else if (ignore_order === false && entry_pos < prev_pos) {\n+                error_text.push(\"==> '\" + JSON.stringify(entry[i]) + \"' was supposed to be \" +\n+                                \" before '\" + JSON.stringify(results[key][entry_pos]) + \"'\");\n+            } else {\n+                prev_pos = entry_pos;\n+            }\n+        }\n+    }\n+    if (error_text.length === 0 && should_fail === true) {\n+        errors += 1;\n+        console.error(\"FAILED\");\n+        console.error(\"==> Test was supposed to fail but all items were found...\");\n+    } else if (error_text.length !== 0 && should_fail === false) {\n+        errors += 1;\n+        console.error(\"FAILED\");\n+        console.error(error_text.join(\"\\n\"));\n+    } else {\n+        console.log(\"OK\");\n+    }\n+    return errors;\n+}\n+\n+module.exports = {\n+    'getNextStep': getNextStep,\n+    'extractFunction': extractFunction,\n+    'extractArrayVariable': extractArrayVariable,\n+    'extractVariable': extractVariable,\n+    'loadContent': loadContent,\n+    'readFile': readFile,\n+    'loadThings': loadThings,\n+    'lookForEntry': lookForEntry,\n+    'loadMainJsAndIndex': loadMainJsAndIndex,\n+    'runChecks': runChecks,\n+};"}, {"sha": "6f730b0fdbbaae5eec9982a9c995339e9e34221b", "filename": "src/tools/rustdoc-js-std/tester.js", "status": "modified", "additions": 26, "deletions": 294, "changes": 320, "blob_url": "https://github.com/rust-lang/rust/blob/548afdbe1a600ba868ac00acc4e94cca0242b001/src%2Ftools%2Frustdoc-js-std%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/548afdbe1a600ba868ac00acc4e94cca0242b001/src%2Ftools%2Frustdoc-js-std%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js-std%2Ftester.js?ref=548afdbe1a600ba868ac00acc4e94cca0242b001", "patch": "@@ -1,236 +1,40 @@\n const fs = require('fs');\n const path = require('path');\n+const tools = require('../rustdoc-js-common/lib.js');\n \n-function getNextStep(content, pos, stop) {\n-    while (pos < content.length && content[pos] !== stop &&\n-           (content[pos] === ' ' || content[pos] === '\\t' || content[pos] === '\\n')) {\n-        pos += 1;\n-    }\n-    if (pos >= content.length) {\n-        return null;\n-    }\n-    if (content[pos] !== stop) {\n-        return pos * -1;\n-    }\n-    return pos;\n-}\n-\n-// Stupid function extractor based on indent. Doesn't support block\n-// comments. If someone puts a ' or an \" in a block comment this\n-// will blow up. Template strings are not tested and might also be\n-// broken.\n-function extractFunction(content, functionName) {\n-    var indent = 0;\n-    var splitter = \"function \" + functionName + \"(\";\n-\n-    while (true) {\n-        var start = content.indexOf(splitter);\n-        if (start === -1) {\n-            break;\n-        }\n-        var pos = start;\n-        while (pos < content.length && content[pos] !== ')') {\n-            pos += 1;\n-        }\n-        if (pos >= content.length) {\n-            break;\n-        }\n-        pos = getNextStep(content, pos + 1, '{');\n-        if (pos === null) {\n-            break;\n-        } else if (pos < 0) {\n-            content = content.slice(-pos);\n-            continue;\n-        }\n-        while (pos < content.length) {\n-            // Eat single-line comments\n-            if (content[pos] === '/' && pos > 0 && content[pos-1] === '/') {\n-                do {\n-                    pos += 1;\n-                } while (pos < content.length && content[pos] !== '\\n');\n-\n-            // Eat quoted strings\n-            } else if (content[pos] === '\"' || content[pos] === \"'\" || content[pos] === \"`\") {\n-                var stop = content[pos];\n-                var is_escaped = false;\n-                do {\n-                    if (content[pos] === '\\\\') {\n-                        pos += 2;\n-                    } else {\n-                        pos += 1;\n-                    }\n-                } while (pos < content.length &&\n-                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n-\n-            // Otherwise, check for indent\n-            } else if (content[pos] === '{') {\n-                indent += 1;\n-            } else if (content[pos] === '}') {\n-                indent -= 1;\n-                if (indent === 0) {\n-                    return content.slice(start, pos + 1);\n-                }\n-            }\n-            pos += 1;\n-        }\n-        content = content.slice(start + 1);\n-    }\n-    return null;\n-}\n-\n-// Stupid function extractor for array.\n-function extractArrayVariable(content, arrayName) {\n-    var splitter = \"var \" + arrayName;\n-    while (true) {\n-        var start = content.indexOf(splitter);\n-        if (start === -1) {\n-            break;\n-        }\n-        var pos = getNextStep(content, start, '=');\n-        if (pos === null) {\n-            break;\n-        } else if (pos < 0) {\n-            content = content.slice(-pos);\n-            continue;\n-        }\n-        pos = getNextStep(content, pos, '[');\n-        if (pos === null) {\n-            break;\n-        } else if (pos < 0) {\n-            content = content.slice(-pos);\n-            continue;\n-        }\n-        while (pos < content.length) {\n-            if (content[pos] === '\"' || content[pos] === \"'\") {\n-                var stop = content[pos];\n-                do {\n-                    if (content[pos] === '\\\\') {\n-                        pos += 2;\n-                    } else {\n-                        pos += 1;\n-                    }\n-                } while (pos < content.length &&\n-                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n-            } else if (content[pos] === ']' &&\n-                       pos + 1 < content.length &&\n-                       content[pos + 1] === ';') {\n-                return content.slice(start, pos + 2);\n-            }\n-            pos += 1;\n-        }\n-        content = content.slice(start + 1);\n-    }\n-    return null;\n-}\n-\n-// Stupid function extractor for variable.\n-function extractVariable(content, varName) {\n-    var splitter = \"var \" + varName;\n-    while (true) {\n-        var start = content.indexOf(splitter);\n-        if (start === -1) {\n-            break;\n-        }\n-        var pos = getNextStep(content, start, '=');\n-        if (pos === null) {\n-            break;\n-        } else if (pos < 0) {\n-            content = content.slice(-pos);\n-            continue;\n-        }\n-        while (pos < content.length) {\n-            if (content[pos] === '\"' || content[pos] === \"'\") {\n-                var stop = content[pos];\n-                do {\n-                    if (content[pos] === '\\\\') {\n-                        pos += 2;\n-                    } else {\n-                        pos += 1;\n-                    }\n-                } while (pos < content.length &&\n-                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n-            } else if (content[pos] === ';') {\n-                return content.slice(start, pos + 1);\n-            }\n-            pos += 1;\n-        }\n-        content = content.slice(start + 1);\n-    }\n-    return null;\n-}\n-\n-function loadContent(content) {\n-    var Module = module.constructor;\n-    var m = new Module();\n-    m._compile(content, \"tmp.js\");\n-    m.exports.ignore_order = content.indexOf(\"\\n// ignore-order\\n\") !== -1 ||\n-        content.startsWith(\"// ignore-order\\n\");\n-    m.exports.exact_check = content.indexOf(\"\\n// exact-check\\n\") !== -1 ||\n-        content.startsWith(\"// exact-check\\n\");\n-    m.exports.should_fail = content.indexOf(\"\\n// should-fail\\n\") !== -1 ||\n-        content.startsWith(\"// should-fail\\n\");\n-    return m.exports;\n-}\n-\n-function readFile(filePath) {\n-    return fs.readFileSync(filePath, 'utf8');\n-}\n-\n-function loadThings(thingsToLoad, kindOfLoad, funcToCall, fileContent) {\n-    var content = '';\n-    for (var i = 0; i < thingsToLoad.length; ++i) {\n-        var tmp = funcToCall(fileContent, thingsToLoad[i]);\n-        if (tmp === null) {\n-            console.error('unable to find ' + kindOfLoad + ' \"' + thingsToLoad[i] + '\"');\n-            process.exit(1);\n-        }\n-        content += tmp;\n-        content += 'exports.' + thingsToLoad[i] + ' = ' + thingsToLoad[i] + ';';\n-    }\n-    return content;\n-}\n-\n-function lookForEntry(entry, data) {\n-    for (var i = 0; i < data.length; ++i) {\n-        var allGood = true;\n-        for (var key in entry) {\n-            if (!entry.hasOwnProperty(key)) {\n-                continue;\n-            }\n-            var value = data[i][key];\n-            // To make our life easier, if there is a \"parent\" type, we add it to the path.\n-            if (key === 'path' && data[i]['parent'] !== undefined) {\n-                if (value.length > 0) {\n-                    value += '::' + data[i]['parent']['name'];\n-                } else {\n-                    value = data[i]['parent']['name'];\n-                }\n-            }\n-            if (value !== entry[key]) {\n-                allGood = false;\n-                break;\n-            }\n-        }\n-        if (allGood === true) {\n-            return i;\n-        }\n-    }\n-    return null;\n-}\n \n function findFile(dir, name, extension) {\n     var entries = fs.readdirSync(dir);\n+    var matches = [];\n     for (var i = 0; i < entries.length; ++i) {\n         var entry = entries[i];\n         var file_type = fs.statSync(dir + entry);\n         if (file_type.isDirectory()) {\n             continue;\n         }\n         if (entry.startsWith(name) && entry.endsWith(extension)) {\n-            return entry;\n+            var version = entry.slice(name.length, entry.length - extension.length);\n+            version = version.split(\".\").map(function(x) {\n+                return parseInt(x);\n+            });\n+            var total = 0;\n+            var mult = 1;\n+            for (var j = version.length - 1; j >= 0; --j) {\n+                total += version[j] * mult;\n+                mult *= 1000;\n+            }\n+            matches.push([entry, total]);\n         }\n     }\n-    return null;\n+    if (matches.length === 0) {\n+        return null;\n+    }\n+    // We make a reverse sort to have the \"highest\" file. Very useful in case you didn't clean up\n+    // you std doc folder...\n+    matches.sort(function(a, b) {\n+        return b[1] - a[1];\n+    });\n+    return matches[0][0];\n }\n \n function readFileMatching(dir, name, extension) {\n@@ -241,7 +45,7 @@ function readFileMatching(dir, name, extension) {\n     if (f === null) {\n         return \"\";\n     }\n-    return readFile(dir + f);\n+    return tools.readFile(dir + f);\n }\n \n function main(argv) {\n@@ -253,88 +57,16 @@ function main(argv) {\n     var test_folder = argv[3];\n \n     var mainJs = readFileMatching(std_docs, \"main\", \".js\");\n-    var ALIASES = readFileMatching(std_docs, \"aliases\", \".js\");\n+    var aliases = readFileMatching(std_docs, \"aliases\", \".js\");\n     var searchIndex = readFileMatching(std_docs, \"search-index\", \".js\").split(\"\\n\");\n-    if (searchIndex[searchIndex.length - 1].length === 0) {\n-        searchIndex.pop();\n-    }\n-    searchIndex.pop();\n-    searchIndex = loadContent(searchIndex.join(\"\\n\") + '\\nexports.searchIndex = searchIndex;');\n-    finalJS = \"\";\n-\n-    var arraysToLoad = [\"itemTypes\"];\n-    var variablesToLoad = [\"MAX_LEV_DISTANCE\", \"MAX_RESULTS\", \"NO_TYPE_FILTER\",\n-                           \"GENERICS_DATA\", \"NAME\", \"INPUTS_DATA\", \"OUTPUT_DATA\",\n-                           \"TY_PRIMITIVE\", \"TY_KEYWORD\",\n-                           \"levenshtein_row2\"];\n-    // execQuery first parameter is built in getQuery (which takes in the search input).\n-    // execQuery last parameter is built in buildIndex.\n-    // buildIndex requires the hashmap from search-index.\n-    var functionsToLoad = [\"buildHrefAndPath\", \"pathSplitter\", \"levenshtein\", \"validateResult\",\n-                           \"getQuery\", \"buildIndex\", \"execQuery\", \"execSearch\"];\n \n-    finalJS += 'window = { \"currentCrate\": \"std\" };\\n';\n-    finalJS += 'var rootPath = \"../\";\\n';\n-    finalJS += ALIASES;\n-    finalJS += loadThings(arraysToLoad, 'array', extractArrayVariable, mainJs);\n-    finalJS += loadThings(variablesToLoad, 'variable', extractVariable, mainJs);\n-    finalJS += loadThings(functionsToLoad, 'function', extractFunction, mainJs);\n-\n-    var loaded = loadContent(finalJS);\n-    var index = loaded.buildIndex(searchIndex.searchIndex);\n+    var [loaded, index] = tools.loadMainJsAndIndex(mainJs, aliases, searchIndex, \"std\");\n \n     var errors = 0;\n \n     fs.readdirSync(test_folder).forEach(function(file) {\n-        var loadedFile = loadContent(readFile(path.join(test_folder, file)) +\n-                               'exports.QUERY = QUERY;exports.EXPECTED = EXPECTED;');\n-        const expected = loadedFile.EXPECTED;\n-        const query = loadedFile.QUERY;\n-        const filter_crate = loadedFile.FILTER_CRATE;\n-        const ignore_order = loadedFile.ignore_order;\n-        const exact_check = loadedFile.exact_check;\n-        const should_fail = loadedFile.should_fail;\n-        var results = loaded.execSearch(loaded.getQuery(query), index);\n         process.stdout.write('Checking \"' + file + '\" ... ');\n-        var error_text = [];\n-        for (var key in expected) {\n-            if (!expected.hasOwnProperty(key)) {\n-                continue;\n-            }\n-            if (!results.hasOwnProperty(key)) {\n-                error_text.push('==> Unknown key \"' + key + '\"');\n-                break;\n-            }\n-            var entry = expected[key];\n-            var prev_pos = -1;\n-            for (var i = 0; i < entry.length; ++i) {\n-                var entry_pos = lookForEntry(entry[i], results[key]);\n-                if (entry_pos === null) {\n-                    error_text.push(\"==> Result not found in '\" + key + \"': '\" +\n-                                    JSON.stringify(entry[i]) + \"'\");\n-                } else if (exact_check === true && prev_pos + 1 !== entry_pos) {\n-                    error_text.push(\"==> Exact check failed at position \" + (prev_pos + 1) + \": \" +\n-                                    \"expected '\" + JSON.stringify(entry[i]) + \"' but found '\" +\n-                                    JSON.stringify(results[key][i]) + \"'\");\n-                } else if (ignore_order === false && entry_pos < prev_pos) {\n-                    error_text.push(\"==> '\" + JSON.stringify(entry[i]) + \"' was supposed to be \" +\n-                                    \" before '\" + JSON.stringify(results[key][entry_pos]) + \"'\");\n-                } else {\n-                    prev_pos = entry_pos;\n-                }\n-            }\n-        }\n-        if (error_text.length === 0 && should_fail === true) {\n-            errors += 1;\n-            console.error(\"FAILED\");\n-            console.error(\"==> Test was supposed to fail but all items were found...\");\n-        } else if (error_text.length !== 0 && should_fail === false) {\n-            errors += 1;\n-            console.error(\"FAILED\");\n-            console.error(error_text.join(\"\\n\"));\n-        } else {\n-            console.log(\"OK\");\n-        }\n+        errors += tools.runChecks(path.join(test_folder, file), loaded, index);\n     });\n     return errors > 0 ? 1 : 0;\n }"}, {"sha": "2e8901d56d01ecda288b4d2af447ced69cf5827b", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 6, "deletions": 295, "changes": 301, "blob_url": "https://github.com/rust-lang/rust/blob/548afdbe1a600ba868ac00acc4e94cca0242b001/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/548afdbe1a600ba868ac00acc4e94cca0242b001/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=548afdbe1a600ba868ac00acc4e94cca0242b001", "patch": "@@ -1,255 +1,13 @@\n const fs = require('fs');\n const path = require('path');\n-const { spawnSync } = require('child_process');\n-\n-function getNextStep(content, pos, stop) {\n-    while (pos < content.length && content[pos] !== stop &&\n-           (content[pos] === ' ' || content[pos] === '\\t' || content[pos] === '\\n')) {\n-        pos += 1;\n-    }\n-    if (pos >= content.length) {\n-        return null;\n-    }\n-    if (content[pos] !== stop) {\n-        return pos * -1;\n-    }\n-    return pos;\n-}\n-\n-// Stupid function extractor based on indent. Doesn't support block\n-// comments. If someone puts a ' or an \" in a block comment this\n-// will blow up. Template strings are not tested and might also be\n-// broken.\n-function extractFunction(content, functionName) {\n-    var indent = 0;\n-    var splitter = \"function \" + functionName + \"(\";\n-\n-    while (true) {\n-        var start = content.indexOf(splitter);\n-        if (start === -1) {\n-            break;\n-        }\n-        var pos = start;\n-        while (pos < content.length && content[pos] !== ')') {\n-            pos += 1;\n-        }\n-        if (pos >= content.length) {\n-            break;\n-        }\n-        pos = getNextStep(content, pos + 1, '{');\n-        if (pos === null) {\n-            break;\n-        } else if (pos < 0) {\n-            content = content.slice(-pos);\n-            continue;\n-        }\n-        while (pos < content.length) {\n-            // Eat single-line comments\n-            if (content[pos] === '/' && pos > 0 && content[pos-1] === '/') {\n-                do {\n-                    pos += 1;\n-                } while (pos < content.length && content[pos] !== '\\n');\n-\n-            // Eat quoted strings\n-            } else if (content[pos] === '\"' || content[pos] === \"'\" || content[pos] === \"`\") {\n-                var stop = content[pos];\n-                var is_escaped = false;\n-                do {\n-                    if (content[pos] === '\\\\') {\n-                        pos += 2;\n-                    } else {\n-                        pos += 1;\n-                    }\n-                } while (pos < content.length &&\n-                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n-\n-            // Otherwise, check for indent\n-            } else if (content[pos] === '{') {\n-                indent += 1;\n-            } else if (content[pos] === '}') {\n-                indent -= 1;\n-                if (indent === 0) {\n-                    return content.slice(start, pos + 1);\n-                }\n-            }\n-            pos += 1;\n-        }\n-        content = content.slice(start + 1);\n-    }\n-    return null;\n-}\n-\n-// Stupid function extractor for array.\n-function extractArrayVariable(content, arrayName) {\n-    var splitter = \"var \" + arrayName;\n-    while (true) {\n-        var start = content.indexOf(splitter);\n-        if (start === -1) {\n-            break;\n-        }\n-        var pos = getNextStep(content, start, '=');\n-        if (pos === null) {\n-            break;\n-        } else if (pos < 0) {\n-            content = content.slice(-pos);\n-            continue;\n-        }\n-        pos = getNextStep(content, pos, '[');\n-        if (pos === null) {\n-            break;\n-        } else if (pos < 0) {\n-            content = content.slice(-pos);\n-            continue;\n-        }\n-        while (pos < content.length) {\n-            if (content[pos] === '\"' || content[pos] === \"'\") {\n-                var stop = content[pos];\n-                do {\n-                    if (content[pos] === '\\\\') {\n-                        pos += 2;\n-                    } else {\n-                        pos += 1;\n-                    }\n-                } while (pos < content.length &&\n-                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n-            } else if (content[pos] === ']' &&\n-                       pos + 1 < content.length &&\n-                       content[pos + 1] === ';') {\n-                return content.slice(start, pos + 2);\n-            }\n-            pos += 1;\n-        }\n-        content = content.slice(start + 1);\n-    }\n-    return null;\n-}\n-\n-// Stupid function extractor for variable.\n-function extractVariable(content, varName) {\n-    var splitter = \"var \" + varName;\n-    while (true) {\n-        var start = content.indexOf(splitter);\n-        if (start === -1) {\n-            break;\n-        }\n-        var pos = getNextStep(content, start, '=');\n-        if (pos === null) {\n-            break;\n-        } else if (pos < 0) {\n-            content = content.slice(-pos);\n-            continue;\n-        }\n-        while (pos < content.length) {\n-            if (content[pos] === '\"' || content[pos] === \"'\") {\n-                var stop = content[pos];\n-                do {\n-                    if (content[pos] === '\\\\') {\n-                        pos += 2;\n-                    } else {\n-                        pos += 1;\n-                    }\n-                } while (pos < content.length &&\n-                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n-            } else if (content[pos] === ';') {\n-                return content.slice(start, pos + 1);\n-            }\n-            pos += 1;\n-        }\n-        content = content.slice(start + 1);\n-    }\n-    return null;\n-}\n-\n-function loadContent(content) {\n-    var Module = module.constructor;\n-    var m = new Module();\n-    m._compile(content, \"tmp.js\");\n-    m.exports.ignore_order = content.indexOf(\"\\n// ignore-order\\n\") !== -1 ||\n-        content.startsWith(\"// ignore-order\\n\");\n-    m.exports.exact_check = content.indexOf(\"\\n// exact-check\\n\") !== -1 ||\n-        content.startsWith(\"// exact-check\\n\");\n-    m.exports.should_fail = content.indexOf(\"\\n// should-fail\\n\") !== -1 ||\n-        content.startsWith(\"// should-fail\\n\");\n-    return m.exports;\n-}\n-\n-function readFile(filePath) {\n-    return fs.readFileSync(filePath, 'utf8');\n-}\n-\n-function loadThings(thingsToLoad, kindOfLoad, funcToCall, fileContent) {\n-    var content = '';\n-    for (var i = 0; i < thingsToLoad.length; ++i) {\n-        var tmp = funcToCall(fileContent, thingsToLoad[i]);\n-        if (tmp === null) {\n-            console.error('unable to find ' + kindOfLoad + ' \"' + thingsToLoad[i] + '\"');\n-            process.exit(1);\n-        }\n-        content += tmp;\n-        content += 'exports.' + thingsToLoad[i] + ' = ' + thingsToLoad[i] + ';';\n-    }\n-    return content;\n-}\n-\n-function lookForEntry(entry, data) {\n-    for (var i = 0; i < data.length; ++i) {\n-        var allGood = true;\n-        for (var key in entry) {\n-            if (!entry.hasOwnProperty(key)) {\n-                continue;\n-            }\n-            var value = data[i][key];\n-            // To make our life easier, if there is a \"parent\" type, we add it to the path.\n-            if (key === 'path' && data[i]['parent'] !== undefined) {\n-                if (value.length > 0) {\n-                    value += '::' + data[i]['parent']['name'];\n-                } else {\n-                    value = data[i]['parent']['name'];\n-                }\n-            }\n-            if (value !== entry[key]) {\n-                allGood = false;\n-                break;\n-            }\n-        }\n-        if (allGood === true) {\n-            return i;\n-        }\n-    }\n-    return null;\n-}\n+const tools = require('../rustdoc-js-common/lib.js');\n \n function load_files(out_folder, crate) {\n-    var mainJs = readFile(out_folder + \"/main.js\");\n-    var ALIASES = readFile(out_folder + \"/aliases.js\");\n-    var searchIndex = readFile(out_folder + \"/search-index.js\").split(\"\\n\");\n-    if (searchIndex[searchIndex.length - 1].length === 0) {\n-        searchIndex.pop();\n-    }\n-    searchIndex.pop();\n-    searchIndex = loadContent(searchIndex.join(\"\\n\") + '\\nexports.searchIndex = searchIndex;');\n-    finalJS = \"\";\n-\n-    var arraysToLoad = [\"itemTypes\"];\n-    var variablesToLoad = [\"MAX_LEV_DISTANCE\", \"MAX_RESULTS\", \"NO_TYPE_FILTER\",\n-                           \"GENERICS_DATA\", \"NAME\", \"INPUTS_DATA\", \"OUTPUT_DATA\",\n-                           \"TY_PRIMITIVE\", \"TY_KEYWORD\",\n-                           \"levenshtein_row2\"];\n-    // execQuery first parameter is built in getQuery (which takes in the search input).\n-    // execQuery last parameter is built in buildIndex.\n-    // buildIndex requires the hashmap from search-index.\n-    var functionsToLoad = [\"buildHrefAndPath\", \"pathSplitter\", \"levenshtein\", \"validateResult\",\n-                           \"getQuery\", \"buildIndex\", \"execQuery\", \"execSearch\"];\n-\n-    finalJS += 'window = { \"currentCrate\": \"' + crate + '\" };\\n';\n-    finalJS += 'var rootPath = \"../\";\\n';\n-    finalJS += ALIASES;\n-    finalJS += loadThings(arraysToLoad, 'array', extractArrayVariable, mainJs);\n-    finalJS += loadThings(variablesToLoad, 'variable', extractVariable, mainJs);\n-    finalJS += loadThings(functionsToLoad, 'function', extractFunction, mainJs);\n+    var mainJs = tools.readFile(out_folder + \"/main.js\");\n+    var aliases = tools.readFile(out_folder + \"/aliases.js\");\n+    var searchIndex = tools.readFile(out_folder + \"/search-index.js\").split(\"\\n\");\n \n-    var loaded = loadContent(finalJS);\n-    return [loaded, loaded.buildIndex(searchIndex.searchIndex)];\n+    return tools.loadMainJsAndIndex(mainJs, aliases, searchIndex, crate);\n }\n \n function main(argv) {\n@@ -279,54 +37,7 @@ function main(argv) {\n         const test_out_folder = out_folder + test_name;\n \n         var [loaded, index] = load_files(test_out_folder, test_name);\n-        var loadedFile = loadContent(readFile(test_file) +\n-                               'exports.QUERY = QUERY;exports.EXPECTED = EXPECTED;');\n-        const expected = loadedFile.EXPECTED;\n-        const query = loadedFile.QUERY;\n-        const filter_crate = loadedFile.FILTER_CRATE;\n-        const ignore_order = loadedFile.ignore_order;\n-        const exact_check = loadedFile.exact_check;\n-        const should_fail = loadedFile.should_fail;\n-        var results = loaded.execSearch(loaded.getQuery(query), index);\n-        var error_text = [];\n-        for (var key in expected) {\n-            if (!expected.hasOwnProperty(key)) {\n-                continue;\n-            }\n-            if (!results.hasOwnProperty(key)) {\n-                error_text.push('==> Unknown key \"' + key + '\"');\n-                break;\n-            }\n-            var entry = expected[key];\n-            var prev_pos = -1;\n-            for (var i = 0; i < entry.length; ++i) {\n-                var entry_pos = lookForEntry(entry[i], results[key]);\n-                if (entry_pos === null) {\n-                    error_text.push(\"==> Result not found in '\" + key + \"': '\" +\n-                                    JSON.stringify(entry[i]) + \"'\");\n-                } else if (exact_check === true && prev_pos + 1 !== entry_pos) {\n-                    error_text.push(\"==> Exact check failed at position \" + (prev_pos + 1) + \": \" +\n-                                    \"expected '\" + JSON.stringify(entry[i]) + \"' but found '\" +\n-                                    JSON.stringify(results[key][i]) + \"'\");\n-                } else if (ignore_order === false && entry_pos < prev_pos) {\n-                    error_text.push(\"==> '\" + JSON.stringify(entry[i]) + \"' was supposed to be \" +\n-                                    \" before '\" + JSON.stringify(results[key][entry_pos]) + \"'\");\n-                } else {\n-                    prev_pos = entry_pos;\n-                }\n-            }\n-        }\n-        if (error_text.length === 0 && should_fail === true) {\n-            errors += 1;\n-            console.error(\"FAILED\");\n-            console.error(\"==> Test was supposed to fail but all items were found...\");\n-        } else if (error_text.length !== 0 && should_fail === false) {\n-            errors += 1;\n-            console.error(\"FAILED\");\n-            console.error(error_text.join(\"\\n\"));\n-        } else {\n-            console.log(\"OK\");\n-        }\n+        errors += tools.runChecks(test_file, loaded, index);\n     }\n     return errors > 0 ? 1 : 0;\n }"}]}