{"sha": "b272749197a8a4c949b43d4661909b189066f4ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNzI3NDkxOTdhOGE0Yzk0OWI0M2Q0NjYxOTA5YjE4OTA2NmY0YWU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-22T11:38:40Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-22T11:38:40Z"}, "message": "Fix the conversion between bit representations and i128 representations", "tree": {"sha": "6a496c0b6da7140841fdaf9ba5da4cb34b89196c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a496c0b6da7140841fdaf9ba5da4cb34b89196c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b272749197a8a4c949b43d4661909b189066f4ae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqzlcAACgkQpp+NIls6\n19k/FxAAmWLfeXvMEi++ZLzYVtoSO9a8ykDdFGsykPhceRJqTDYPG+JUvCQnKL91\nKY45vY8SpC/hQbj2JNpldRkl0mjPTf/EQRmQ/YVeaUKJ+INW5YIuUrk23OrpqYID\nZKlI6ENekQ9cNqKHxbjb2rWt9wtGqsfGzZEeAfKeC6MydQUtKxgByUcHRdr3Q7pd\nNT92473KkTxyqdigYtsMJb45MIlJu9EM+o6C+JE3Dxq7ibpkhG64Jc3KRlNIGKyf\nNx15Ta5nE6dCNk5PrQzLisby7L2naKYNlQHcucCFwYAQzicctvwtW+CMtG3RSYJZ\nkLnTnBNv7pVLfgk8lirHpuvvRDYWmRCORiUGz23LFc1sQURq/VkpdTNwT+2PjcnF\nkCbkq+pIDcaoAEPr9rbkdDy2oOFS7SaNSlgn027wG0Pb1UFEEDNWCauVVPIE0rkR\ng+WEAHEeGuWIsWUh1XS9spqpp/dkkkSv65saIuPLyx6keRZMbd3phPvcvrXGx2xW\n6jlzq3cIk4/xaRnB4MeXXpmQ5zpbKSy0ezuhjF02c9j4y0iyXhqd8ZpP2E2PFfVA\ns81GL3S47TbX6rX4/mmpKJCqreqaeTM7JU5OLf30mCqF5HOL2q5aR3smmhx4vyZw\n4AUzGD3NcXhrwas2YL/3t+cNd9kbX9jYLuBd/hHFLsJyX9kprhk=\n=Lioh\n-----END PGP SIGNATURE-----", "payload": "tree 6a496c0b6da7140841fdaf9ba5da4cb34b89196c\nparent eb8d08d90415d82beedd42e8c6372568d8582acf\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1521718720 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1521718720 +0100\n\nFix the conversion between bit representations and i128 representations\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b272749197a8a4c949b43d4661909b189066f4ae", "html_url": "https://github.com/rust-lang/rust/commit/b272749197a8a4c949b43d4661909b189066f4ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b272749197a8a4c949b43d4661909b189066f4ae/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb8d08d90415d82beedd42e8c6372568d8582acf", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb8d08d90415d82beedd42e8c6372568d8582acf", "html_url": "https://github.com/rust-lang/rust/commit/eb8d08d90415d82beedd42e8c6372568d8582acf"}], "stats": {"total": 104, "additions": 66, "deletions": 38}, "files": [{"sha": "029dd6f1fb466662046c0cd0a2e1ec052771023b", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b272749197a8a4c949b43d4661909b189066f4ae/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b272749197a8a4c949b43d4661909b189066f4ae/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=b272749197a8a4c949b43d4661909b189066f4ae", "patch": "@@ -1544,11 +1544,17 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 }\n \n                 let (mut min, mut max) = (i128::max_value(), i128::min_value());\n+                let discr_type = def.repr.discr_type();\n+                let bits = Integer::from_attr(tcx, discr_type).size().bits();\n                 for (i, discr) in def.discriminants(tcx).enumerate() {\n                     if variants[i].iter().any(|f| f.abi == Abi::Uninhabited) {\n                         continue;\n                     }\n-                    let x = discr.val as i128;\n+                    let mut x = discr.val as i128;\n+                    if discr_type.is_signed() {\n+                        // sign extend the raw representation to be an i128\n+                        x = (x << (128 - bits)) >> (128 - bits);\n+                    }\n                     if x < min { min = x; }\n                     if x > max { max = x; }\n                 }"}, {"sha": "9ffdccefae58569bfcc0c1acb9ee1aa06ba2e848", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b272749197a8a4c949b43d4661909b189066f4ae/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b272749197a8a4c949b43d4661909b189066f4ae/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=b272749197a8a4c949b43d4661909b189066f4ae", "patch": "@@ -1886,7 +1886,6 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n     ) -> Option<Discr<'tcx>> {\n         let param_env = ParamEnv::empty();\n         let repr_type = self.repr.discr_type();\n-        let bit_size = layout::Integer::from_attr(tcx, repr_type).size().bits();\n         let substs = Substs::identity_for_item(tcx.global_tcx(), expr_did);\n         let instance = ty::Instance::new(expr_did, substs);\n         let cid = GlobalId {\n@@ -1896,25 +1895,13 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n         match tcx.const_eval(param_env.and(cid)) {\n             Ok(&ty::Const {\n                 val: ConstVal::Value(Value::ByVal(PrimVal::Bytes(b))),\n-                ..\n+                ty,\n             }) => {\n                 trace!(\"discriminants: {} ({:?})\", b, repr_type);\n-                let ty = repr_type.to_ty(tcx);\n-                if repr_type.is_signed() {\n-                    let val = b as i128;\n-                    // sign extend to i128\n-                    let amt = 128 - bit_size;\n-                    let val = (val << amt) >> amt;\n-                    Some(Discr {\n-                        val: val as u128,\n-                        ty,\n-                    })\n-                } else {\n-                    Some(Discr {\n-                        val: b,\n-                        ty,\n-                    })\n-                }\n+                Some(Discr {\n+                    val: b,\n+                    ty,\n+                })\n             },\n             Ok(&ty::Const {\n                 val: ConstVal::Value(other),"}, {"sha": "afe977d10baac333ff9c8b3ed3ebe500d1633062", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b272749197a8a4c949b43d4661909b189066f4ae/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b272749197a8a4c949b43d4661909b189066f4ae/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=b272749197a8a4c949b43d4661909b189066f4ae", "patch": "@@ -39,16 +39,24 @@ use syntax_pos::{Span, DUMMY_SP};\n \n #[derive(Copy, Clone, Debug)]\n pub struct Discr<'tcx> {\n+    /// bit representation of the discriminant, so `-128i8` is `0xFF_u128`\n     pub val: u128,\n     pub ty: Ty<'tcx>\n }\n \n impl<'tcx> fmt::Display for Discr<'tcx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        if self.ty.is_signed() {\n-            write!(fmt, \"{}\", self.val as i128)\n-        } else {\n-            write!(fmt, \"{}\", self.val)\n+        match self.ty.sty {\n+            ty::TyInt(ity) => {\n+                let bits = ty::tls::with(|tcx| {\n+                    Integer::from_attr(tcx, SignedInt(ity)).size().bits()\n+                });\n+                let x = self.val as i128;\n+                // sign extend the raw representation to be an i128\n+                let x = (x << (128 - bits)) >> (128 - bits);\n+                write!(fmt, \"{}\", x)\n+            },\n+            _ => write!(fmt, \"{}\", self.val),\n         }\n     }\n }\n@@ -64,38 +72,38 @@ impl<'tcx> Discr<'tcx> {\n             TyUint(uty) => (Integer::from_attr(tcx, UnsignedInt(uty)), false),\n             _ => bug!(\"non integer discriminant\"),\n         };\n+\n+        let bit_size = int.size().bits();\n+        let amt = 128 - bit_size;\n         if signed {\n-            let (min, max) = match int {\n-                Integer::I8 => (i8::min_value() as i128, i8::max_value() as i128),\n-                Integer::I16 => (i16::min_value() as i128, i16::max_value() as i128),\n-                Integer::I32 => (i32::min_value() as i128, i32::max_value() as i128),\n-                Integer::I64 => (i64::min_value() as i128, i64::max_value() as i128),\n-                Integer::I128 => (i128::min_value(), i128::max_value()),\n+            let sext = |u| {\n+                let i = u as i128;\n+                (i << amt) >> amt\n             };\n-            let val = self.val as i128;\n+            let min = sext(1_u128 << (bit_size - 1));\n+            let max = i128::max_value() >> amt;\n+            let val = sext(self.val);\n+            assert!(n < (i128::max_value() as u128));\n             let n = n as i128;\n             let oflo = val > max - n;\n             let val = if oflo {\n                 min + (n - (max - val) - 1)\n             } else {\n                 val + n\n             };\n+            // zero the upper bits\n+            let val = val as u128;\n+            let val = (val << amt) >> amt;\n             (Self {\n                 val: val as u128,\n                 ty: self.ty,\n             }, oflo)\n         } else {\n-            let (min, max) = match int {\n-                Integer::I8 => (u8::min_value() as u128, u8::max_value() as u128),\n-                Integer::I16 => (u16::min_value() as u128, u16::max_value() as u128),\n-                Integer::I32 => (u32::min_value() as u128, u32::max_value() as u128),\n-                Integer::I64 => (u64::min_value() as u128, u64::max_value() as u128),\n-                Integer::I128 => (u128::min_value(), u128::max_value()),\n-            };\n+            let max = u128::max_value() >> amt;\n             let val = self.val;\n             let oflo = val > max - n;\n             let val = if oflo {\n-                min + (n - (max - val) - 1)\n+                n - (max - val) - 1\n             } else {\n                 val + n\n             };"}, {"sha": "7049d28a87085bef2c5dc63b11ff64864844fd41", "filename": "src/test/run-pass/ctfe/signed_enum_discr.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b272749197a8a4c949b43d4661909b189066f4ae/src%2Ftest%2Frun-pass%2Fctfe%2Fsigned_enum_discr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b272749197a8a4c949b43d4661909b189066f4ae/src%2Ftest%2Frun-pass%2Fctfe%2Fsigned_enum_discr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fsigned_enum_discr.rs?ref=b272749197a8a4c949b43d4661909b189066f4ae", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// https://github.com/rust-lang/rust/issues/49181\n+\n+#[derive(Eq, PartialEq)]\n+#[repr(i8)]\n+pub enum A {\n+    B = -1,\n+    C = 1,\n+}\n+\n+pub const D: A = A::B;\n+\n+fn main() {\n+    match A::C {\n+        D => {},\n+        _ => {}\n+    }\n+}"}]}