{"sha": "9f233cd5d25a2d57dbf617824ca352b45cddbbdb", "node_id": "C_kwDOAAsO6NoAKDlmMjMzY2Q1ZDI1YTJkNTdkYmY2MTc4MjRjYTM1MmI0NWNkZGJiZGI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-09-20T15:12:27Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-09-20T15:12:27Z"}, "message": "Parse more repr options", "tree": {"sha": "f0691b434b152a69f3b3f93c503e1241eed62b80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0691b434b152a69f3b3f93c503e1241eed62b80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f233cd5d25a2d57dbf617824ca352b45cddbbdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f233cd5d25a2d57dbf617824ca352b45cddbbdb", "html_url": "https://github.com/rust-lang/rust/commit/9f233cd5d25a2d57dbf617824ca352b45cddbbdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f233cd5d25a2d57dbf617824ca352b45cddbbdb/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d0d051628503f1147a452ad83c4f24b63c9f395", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d0d051628503f1147a452ad83c4f24b63c9f395", "html_url": "https://github.com/rust-lang/rust/commit/6d0d051628503f1147a452ad83c4f24b63c9f395"}], "stats": {"total": 93, "additions": 74, "deletions": 19}, "files": [{"sha": "785095800604b204d745b66411fc1c9173b66446", "filename": "crates/hir-def/src/adt.rs", "status": "modified", "additions": 64, "deletions": 11, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/9f233cd5d25a2d57dbf617824ca352b45cddbbdb/crates%2Fhir-def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f233cd5d25a2d57dbf617824ca352b45cddbbdb/crates%2Fhir-def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fadt.rs?ref=9f233cd5d25a2d57dbf617824ca352b45cddbbdb", "patch": "@@ -1,6 +1,6 @@\n //! Defines hir-level representation of structs, enums and unions\n \n-use std::sync::Arc;\n+use std::{num::NonZeroU32, sync::Arc};\n \n use base_db::CrateId;\n use either::Either;\n@@ -14,6 +14,7 @@ use tt::{Delimiter, DelimiterKind, Leaf, Subtree, TokenTree};\n \n use crate::{\n     body::{CfgExpander, LowerCtx},\n+    builtin_type::{BuiltinInt, BuiltinUint},\n     db::DefDatabase,\n     intern::Interned,\n     item_tree::{AttrOwner, Field, Fields, ItemTree, ModItem, RawVisibilityId},\n@@ -31,14 +32,15 @@ use cfg::CfgOptions;\n pub struct StructData {\n     pub name: Name,\n     pub variant_data: Arc<VariantData>,\n-    pub repr: Option<ReprKind>,\n+    pub repr: Option<ReprData>,\n     pub visibility: RawVisibility,\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct EnumData {\n     pub name: Name,\n     pub variants: Arena<EnumVariantData>,\n+    pub repr: Option<ReprData>,\n     pub visibility: RawVisibility,\n }\n \n@@ -63,32 +65,80 @@ pub struct FieldData {\n     pub visibility: RawVisibility,\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq)]\n+#[derive(Copy, Debug, Clone, PartialEq, Eq)]\n pub enum ReprKind {\n-    Packed,\n-    Other,\n+    C,\n+    BuiltinInt { builtin: Either<BuiltinInt, BuiltinUint>, is_c: bool },\n+    Transparent,\n+    Default,\n+}\n+\n+#[derive(Copy, Debug, Clone, PartialEq, Eq)]\n+pub struct ReprData {\n+    pub kind: ReprKind,\n+    pub packed: bool,\n+    pub align: Option<NonZeroU32>,\n }\n \n fn repr_from_value(\n     db: &dyn DefDatabase,\n     krate: CrateId,\n     item_tree: &ItemTree,\n     of: AttrOwner,\n-) -> Option<ReprKind> {\n+) -> Option<ReprData> {\n     item_tree.attrs(db, krate, of).by_key(\"repr\").tt_values().find_map(parse_repr_tt)\n }\n \n-fn parse_repr_tt(tt: &Subtree) -> Option<ReprKind> {\n+fn parse_repr_tt(tt: &Subtree) -> Option<ReprData> {\n     match tt.delimiter {\n         Some(Delimiter { kind: DelimiterKind::Parenthesis, .. }) => {}\n         _ => return None,\n     }\n \n-    let mut it = tt.token_trees.iter();\n-    match it.next()? {\n-        TokenTree::Leaf(Leaf::Ident(ident)) if ident.text == \"packed\" => Some(ReprKind::Packed),\n-        _ => Some(ReprKind::Other),\n+    let mut data = ReprData { kind: ReprKind::Default, packed: false, align: None };\n+\n+    let mut tts = tt.token_trees.iter().peekable();\n+    while let Some(tt) = tts.next() {\n+        if let TokenTree::Leaf(Leaf::Ident(ident)) = tt {\n+            match &*ident.text {\n+                \"packed\" => {\n+                    data.packed = true;\n+                    if let Some(TokenTree::Subtree(_)) = tts.peek() {\n+                        tts.next();\n+                    }\n+                }\n+                \"align\" => {\n+                    if let Some(TokenTree::Subtree(tt)) = tts.peek() {\n+                        tts.next();\n+                        if let Some(TokenTree::Leaf(Leaf::Literal(lit))) = tt.token_trees.first() {\n+                            if let Ok(align) = lit.text.parse() {\n+                                data.align = Some(align);\n+                            }\n+                        }\n+                    }\n+                }\n+                \"C\" => {\n+                    if let ReprKind::BuiltinInt { is_c, .. } = &mut data.kind {\n+                        *is_c = true;\n+                    } else {\n+                        data.kind = ReprKind::C;\n+                    }\n+                }\n+                \"transparent\" => data.kind = ReprKind::Transparent,\n+                repr => {\n+                    let is_c = matches!(data.kind, ReprKind::C);\n+                    if let Some(builtin) = BuiltinInt::from_suffix(repr)\n+                        .map(Either::Left)\n+                        .or_else(|| BuiltinUint::from_suffix(repr).map(Either::Right))\n+                    {\n+                        data.kind = ReprKind::BuiltinInt { builtin, is_c };\n+                    }\n+                }\n+            }\n+        }\n     }\n+\n+    Some(data)\n }\n \n impl StructData {\n@@ -108,6 +158,7 @@ impl StructData {\n             visibility: item_tree[strukt.visibility].clone(),\n         })\n     }\n+\n     pub(crate) fn union_data_query(db: &dyn DefDatabase, id: UnionId) -> Arc<StructData> {\n         let loc = id.lookup(db);\n         let krate = loc.container.krate;\n@@ -133,6 +184,7 @@ impl EnumData {\n         let krate = loc.container.krate;\n         let item_tree = loc.id.item_tree(db);\n         let cfg_options = db.crate_graph()[krate].cfg_options.clone();\n+        let repr = repr_from_value(db, krate, &item_tree, ModItem::from(loc.id.value).into());\n \n         let enum_ = &item_tree[loc.id.value];\n         let mut variants = Arena::new();\n@@ -158,6 +210,7 @@ impl EnumData {\n         Arc::new(EnumData {\n             name: enum_.name.clone(),\n             variants,\n+            repr,\n             visibility: item_tree[enum_.visibility].clone(),\n         })\n     }"}, {"sha": "5c7aa72349f6e1c89be036ed2a539610926cc8c5", "filename": "crates/hir-def/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f233cd5d25a2d57dbf617824ca352b45cddbbdb/crates%2Fhir-def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f233cd5d25a2d57dbf617824ca352b45cddbbdb/crates%2Fhir-def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Flib.rs?ref=9f233cd5d25a2d57dbf617824ca352b45cddbbdb", "patch": "@@ -479,7 +479,6 @@ pub enum DefWithBodyId {\n \n impl_from!(FunctionId, ConstId, StaticId for DefWithBodyId);\n \n-// FIXME: Rename EnumVariantId to VariantId so that the macro above can be used\n impl From<EnumVariantId> for DefWithBodyId {\n     fn from(id: EnumVariantId) -> Self {\n         DefWithBodyId::VariantId(id)"}, {"sha": "9ac5eaa74e94c3f96db415584ceee0b8d0d44479", "filename": "crates/hir-ty/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f233cd5d25a2d57dbf617824ca352b45cddbbdb/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f233cd5d25a2d57dbf617824ca352b45cddbbdb/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdb.rs?ref=9f233cd5d25a2d57dbf617824ca352b45cddbbdb", "patch": "@@ -44,12 +44,12 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     #[salsa::invoke(crate::lower::const_param_ty_query)]\n     fn const_param_ty(&self, def: ConstParamId) -> Ty;\n \n-    #[salsa::invoke(crate::consteval::const_eval_query)]\n+    #[salsa::invoke(crate::consteval::const_eval_variant_query)]\n     #[salsa::cycle(crate::consteval::const_eval_recover)]\n     fn const_eval(&self, def: ConstId) -> Result<ComputedExpr, ConstEvalError>;\n \n     #[salsa::invoke(crate::consteval::const_eval_query_variant)]\n-    #[salsa::cycle(crate::consteval::const_eval_recover_variant)]\n+    #[salsa::cycle(crate::consteval::const_eval_variant_recover)]\n     fn const_eval_variant(&self, def: EnumVariantId) -> Result<ComputedExpr, ConstEvalError>;\n \n     #[salsa::invoke(crate::lower::impl_trait_query)]"}, {"sha": "85309d32335d67580706707ed679d6c464052a13", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f233cd5d25a2d57dbf617824ca352b45cddbbdb/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f233cd5d25a2d57dbf617824ca352b45cddbbdb/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=9f233cd5d25a2d57dbf617824ca352b45cddbbdb", "patch": "@@ -67,9 +67,12 @@ pub(crate) fn infer_query(db: &dyn HirDatabase, def: DefWithBodyId) -> Arc<Infer\n         DefWithBodyId::ConstId(c) => ctx.collect_const(&db.const_data(c)),\n         DefWithBodyId::FunctionId(f) => ctx.collect_fn(f),\n         DefWithBodyId::StaticId(s) => ctx.collect_static(&db.static_data(s)),\n-        DefWithBodyId::VariantId(v) => {\n+        DefWithBodyId::VariantId(_v) => {\n+            // db.enum_data(v.parent)\n             // FIXME: This should return the `repr(...)` type of the enum\n-            ctx.return_ty = TyBuilder::def_ty(db, v.parent.into()).fill_with_unknown().build()\n+            ctx.return_ty = TyBuilder::builtin(hir_def::builtin_type::BuiltinType::Uint(\n+                hir_def::builtin_type::BuiltinUint::U32,\n+            ));\n         }\n     }\n "}, {"sha": "7d25eee0c0b41adcb4a584034c2bcc720127e567", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f233cd5d25a2d57dbf617824ca352b45cddbbdb/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f233cd5d25a2d57dbf617824ca352b45cddbbdb/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=9f233cd5d25a2d57dbf617824ca352b45cddbbdb", "patch": "@@ -39,7 +39,7 @@ use arrayvec::ArrayVec;\n use base_db::{CrateDisplayName, CrateId, CrateOrigin, Edition, FileId, ProcMacroKind};\n use either::Either;\n use hir_def::{\n-    adt::{ReprKind, VariantData},\n+    adt::{ReprData, VariantData},\n     body::{BodyDiagnostic, SyntheticSyntax},\n     expr::{BindingAnnotation, LabelId, Pat, PatId},\n     generics::{TypeOrConstParamData, TypeParamProvenance},\n@@ -874,7 +874,7 @@ impl Struct {\n         Type::from_def(db, self.id)\n     }\n \n-    pub fn repr(self, db: &dyn HirDatabase) -> Option<ReprKind> {\n+    pub fn repr(self, db: &dyn HirDatabase) -> Option<ReprData> {\n         db.struct_data(self.id).repr.clone()\n     }\n \n@@ -2964,7 +2964,7 @@ impl Type {\n \n         let adt = adt_id.into();\n         match adt {\n-            Adt::Struct(s) => matches!(s.repr(db), Some(ReprKind::Packed)),\n+            Adt::Struct(s) => matches!(s.repr(db), Some(ReprData { packed: true, .. })),\n             _ => false,\n         }\n     }"}]}