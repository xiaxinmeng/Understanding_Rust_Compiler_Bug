{"sha": "b5d82242124a153801f571bcfcb786a8872aa46e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZDgyMjQyMTI0YTE1MzgwMWY1NzFiY2ZjYjc4NmE4ODcyYWE0NmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-04T09:18:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-04T09:18:47Z"}, "message": "auto merge of #5713 : brson/rust/tutorial2, r=thestinger\n\nIt doesn't quite reflect reality", "tree": {"sha": "4ef7055ed435b1d1f093ceada4a2982fd7b4a9b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ef7055ed435b1d1f093ceada4a2982fd7b4a9b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5d82242124a153801f571bcfcb786a8872aa46e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5d82242124a153801f571bcfcb786a8872aa46e", "html_url": "https://github.com/rust-lang/rust/commit/b5d82242124a153801f571bcfcb786a8872aa46e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5d82242124a153801f571bcfcb786a8872aa46e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dc330c3130c207b40a41579483c00f53ac6e93b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dc330c3130c207b40a41579483c00f53ac6e93b", "html_url": "https://github.com/rust-lang/rust/commit/1dc330c3130c207b40a41579483c00f53ac6e93b"}, {"sha": "679b1dcb62b53f52f6e4ffe18cc89be8dbf5cc15", "url": "https://api.github.com/repos/rust-lang/rust/commits/679b1dcb62b53f52f6e4ffe18cc89be8dbf5cc15", "html_url": "https://github.com/rust-lang/rust/commit/679b1dcb62b53f52f6e4ffe18cc89be8dbf5cc15"}], "stats": {"total": 67, "additions": 28, "deletions": 39}, "files": [{"sha": "7831dc1d80fc0d3740f3eddf1f5a4f859b5a5abc", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 28, "deletions": 39, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/b5d82242124a153801f571bcfcb786a8872aa46e/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/b5d82242124a153801f571bcfcb786a8872aa46e/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=b5d82242124a153801f571bcfcb786a8872aa46e", "patch": "@@ -2,74 +2,63 @@\n \n # Introduction\n \n-The designers of Rust designed the language from the ground up to support pervasive\n-and safe concurrency through lightweight, memory-isolated tasks and\n-message passing.\n-\n-Rust tasks are not the same as traditional threads: rather, they are more like\n-_green threads_. The Rust runtime system schedules tasks cooperatively onto a\n-small number of operating system threads. Because tasks are significantly\n+Rust provides safe concurrency through a combination\n+of lightweight, memory-isolated tasks and message passing.\n+This tutorial will describe the concurrency model in Rust, how it\n+relates to the Rust type system, and introduce\n+the fundamental library abstractions for constructing concurrent programs.\n+\n+Rust tasks are not the same as traditional threads: rather,\n+they are considered _green threads_, lightweight units of execution that the Rust\n+runtime schedules cooperatively onto a small number of operating system threads.\n+On a multi-core system Rust tasks will be scheduled in parallel by default.\n+Because tasks are significantly\n cheaper to create than traditional threads, Rust can create hundreds of\n thousands of concurrent tasks on a typical 32-bit system.\n+In general, all Rust code executes inside a task, including the `main` function.\n+\n+In order to make efficient use of memory Rust tasks have dynamically sized stacks.\n+A task begins its life with a small\n+amount of stack space (currently in the low thousands of bytes, depending on\n+platform), and acquires more stack as needed.\n+Unlike in languages such as C, a Rust task cannot accidentally write to\n+memory beyond the end of the stack, causing crashes or worse.\n \n-Tasks provide failure isolation and recovery. When an exception occurs in Rust\n-code (as a result of an explicit call to `fail!()`, an assertion failure, or\n-another invalid operation), the runtime system destroys the entire\n+Tasks provide failure isolation and recovery. When a fatal error occurs in Rust\n+code as a result of an explicit call to `fail!()`, an assertion failure, or\n+another invalid operation, the runtime system destroys the entire\n task. Unlike in languages such as Java and C++, there is no way to `catch` an\n exception. Instead, tasks may monitor each other for failure.\n \n-Rust tasks have dynamically sized stacks. A task begins its life with a small\n-amount of stack space (currently in the low thousands of bytes, depending on\n-platform), and acquires more stack as needed. Unlike in languages such as C, a\n-Rust task cannot run off the end of the stack. However, tasks do have a stack\n-budget. If a Rust task exceeds its stack budget, then it will fail safely:\n-with a checked exception.\n-\n Tasks use Rust's type system to provide strong memory safety guarantees. In\n particular, the type system guarantees that tasks cannot share mutable state\n with each other. Tasks communicate with each other by transferring _owned_\n data through the global _exchange heap_.\n \n-This tutorial explains the basics of tasks and communication in Rust,\n-explores some typical patterns in concurrent Rust code, and finally\n-discusses some of the more unusual synchronization types in the standard\n-library.\n-\n-> ***Warning:*** This tutorial is incomplete\n-\n ## A note about the libraries\n \n While Rust's type system provides the building blocks needed for safe\n and efficient tasks, all of the task functionality itself is implemented\n in the core and standard libraries, which are still under development\n-and do not always present a consistent interface.\n-\n-In particular, there are currently two independent modules that provide a\n-message passing interface to Rust code: `core::comm` and `core::pipes`.\n-`core::comm` is an older, less efficient system that is being phased out in\n-favor of `pipes`. At some point, we will remove the existing `core::comm` API\n-and move the user-facing portions of `core::pipes` to `core::comm`. In this\n-tutorial, we discuss `pipes` and ignore the `comm` API.\n+and do not always present a consistent or complete interface.\n \n For your reference, these are the standard modules involved in Rust\n concurrency at this writing.\n \n * [`core::task`] - All code relating to tasks and task scheduling\n-* [`core::comm`] - The deprecated message passing API\n-* [`core::pipes`] - The new message passing infrastructure and API\n-* [`std::comm`] - Higher level messaging types based on `core::pipes`\n+* [`core::comm`] - The message passing interface\n+* [`core::pipes`] - The underlying messaging infrastructure\n+* [`std::comm`] - Additional messaging types based on `core::pipes`\n * [`std::sync`] - More exotic synchronization tools, including locks\n-* [`std::arc`] - The ARC (atomic reference counted) type, for safely sharing\n-  immutable data\n-* [`std::par`] - Some basic tools for implementing parallel algorithms\n+* [`std::arc`] - The ARC (atomically reference counted) type,\n+  for safely sharing immutable data\n \n [`core::task`]: core/task.html\n [`core::comm`]: core/comm.html\n [`core::pipes`]: core/pipes.html\n [`std::comm`]: std/comm.html\n [`std::sync`]: std/sync.html\n [`std::arc`]: std/arc.html\n-[`std::par`]: std/par.html\n \n # Basics\n "}]}