{"sha": "f0ca717c643cbef31859e443ee20db4465ac8864", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwY2E3MTdjNjQzY2JlZjMxODU5ZTQ0M2VlMjBkYjQ0NjVhYzg4NjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-08T21:06:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-08T21:06:37Z"}, "message": "auto merge of #18475 : gamazeps/rust/toExtend, r=alexcrichton\n\nEnsured that Extend & FromIterator are implemented for the libcollection.\r\n\r\nRemoved the fact that FromIterator had to be implemented in order to implement Extend, as it did not make sense for LruCache (it needs to be given a size and there are no Default for LruCache).\r\n\r\nChanged the name from Extend to Extendable.\r\n\r\nPart of #18424", "tree": {"sha": "05190af84acccdfc795368a8e2431ab3f43038b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05190af84acccdfc795368a8e2431ab3f43038b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0ca717c643cbef31859e443ee20db4465ac8864", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0ca717c643cbef31859e443ee20db4465ac8864", "html_url": "https://github.com/rust-lang/rust/commit/f0ca717c643cbef31859e443ee20db4465ac8864", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0ca717c643cbef31859e443ee20db4465ac8864/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b80edf1d1257bf521fd9e62b732b6302258374e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b80edf1d1257bf521fd9e62b732b6302258374e7", "html_url": "https://github.com/rust-lang/rust/commit/b80edf1d1257bf521fd9e62b732b6302258374e7"}, {"sha": "a11f16739f08ec480263ba549d510fffc8ce557e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a11f16739f08ec480263ba549d510fffc8ce557e", "html_url": "https://github.com/rust-lang/rust/commit/a11f16739f08ec480263ba549d510fffc8ce557e"}], "stats": {"total": 88, "additions": 57, "deletions": 31}, "files": [{"sha": "25d3b4bf272a0d12e3804a85737aed8d1fed4d73", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=f0ca717c643cbef31859e443ee20db4465ac8864", "patch": "@@ -93,7 +93,7 @@ syn keyword rustEnum Ordering\n syn keyword rustEnumVariant Less Equal Greater\n syn keyword rustTrait Collection Mutable Map MutableMap MutableSeq\n syn keyword rustTrait Set MutableSet\n-syn keyword rustTrait FromIterator Extendable ExactSize\n+syn keyword rustTrait FromIterator IntoIterator Extend ExactSize\n syn keyword rustTrait Iterator DoubleEndedIterator\n syn keyword rustTrait RandomAccessIterator CloneableIterator\n syn keyword rustTrait OrdIterator MutableDoubleEndedIterator"}, {"sha": "88e1e4ffc2277efea3e9d0332876900b4cbaa60f", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=f0ca717c643cbef31859e443ee20db4465ac8864", "patch": "@@ -555,7 +555,7 @@ impl<T: Ord> FromIterator<T> for BinaryHeap<T> {\n     }\n }\n \n-impl<T: Ord> Extendable<T> for BinaryHeap<T> {\n+impl<T: Ord> Extend<T> for BinaryHeap<T> {\n     fn extend<Iter: Iterator<T>>(&mut self, mut iter: Iter) {\n         let (lower, _) = iter.size_hint();\n "}, {"sha": "6ed9dad6252dad0885b599c120b5c4715f7c6fe2", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=f0ca717c643cbef31859e443ee20db4465ac8864", "patch": "@@ -835,7 +835,7 @@ impl FromIterator<bool> for Bitv {\n     }\n }\n \n-impl Extendable<bool> for Bitv {\n+impl Extend<bool> for Bitv {\n     #[inline]\n     fn extend<I: Iterator<bool>>(&mut self, mut iterator: I) {\n         let (min, _) = iterator.size_hint();\n@@ -1014,7 +1014,7 @@ impl FromIterator<bool> for BitvSet {\n     }\n }\n \n-impl Extendable<bool> for BitvSet {\n+impl Extend<bool> for BitvSet {\n     #[inline]\n     fn extend<I: Iterator<bool>>(&mut self, iterator: I) {\n         let &BitvSet(ref mut self_bitv) = self;"}, {"sha": "57ca585f15e7b5c22b4244958240d8102ae2e7f9", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=f0ca717c643cbef31859e443ee20db4465ac8864", "patch": "@@ -727,7 +727,7 @@ impl<K: Ord, V> FromIterator<(K, V)> for BTreeMap<K, V> {\n     }\n }\n \n-impl<K: Ord, V> Extendable<(K, V)> for BTreeMap<K, V> {\n+impl<K: Ord, V> Extend<(K, V)> for BTreeMap<K, V> {\n     #[inline]\n     fn extend<T: Iterator<(K, V)>>(&mut self, mut iter: T) {\n         for (k, v) in iter {"}, {"sha": "365450e76c901a1726b542161d8041a13d5773c5", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=f0ca717c643cbef31859e443ee20db4465ac8864", "patch": "@@ -316,7 +316,7 @@ impl<T: Ord> FromIterator<T> for BTreeSet<T> {\n     }\n }\n \n-impl<T: Ord> Extendable<T> for BTreeSet<T> {\n+impl<T: Ord> Extend<T> for BTreeSet<T> {\n     #[inline]\n     fn extend<Iter: Iterator<T>>(&mut self, mut iter: Iter) {\n         for elem in iter {"}, {"sha": "08f18d4161bcdaa39a6c9eb522df89aa24ecaeb6", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=f0ca717c643cbef31859e443ee20db4465ac8864", "patch": "@@ -720,7 +720,7 @@ impl<A> FromIterator<A> for DList<A> {\n     }\n }\n \n-impl<A> Extendable<A> for DList<A> {\n+impl<A> Extend<A> for DList<A> {\n     fn extend<T: Iterator<A>>(&mut self, mut iterator: T) {\n         for elt in iterator { self.push_back(elt); }\n     }"}, {"sha": "b13e45099ee29c629257771055632fbeeae742f0", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=f0ca717c643cbef31859e443ee20db4465ac8864", "patch": "@@ -235,6 +235,22 @@ impl<E:CLike> Iterator<E> for Items<E> {\n     }\n }\n \n+impl<E:CLike> FromIterator<E> for EnumSet<E> {\n+    fn from_iter<I:Iterator<E>>(iterator: I) -> EnumSet<E> {\n+        let mut ret = EnumSet::new();\n+        ret.extend(iterator);\n+        ret\n+    }\n+}\n+\n+impl<E:CLike> Extend<E> for EnumSet<E> {\n+    fn extend<I: Iterator<E>>(&mut self, mut iterator: I) {\n+        for element in iterator {\n+            self.insert(element);\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod test {\n     use std::prelude::*;"}, {"sha": "46fd86df987019aac6873f38998e9f2c2aaac963", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=f0ca717c643cbef31859e443ee20db4465ac8864", "patch": "@@ -735,7 +735,7 @@ impl<A> FromIterator<A> for RingBuf<A> {\n     }\n }\n \n-impl<A> Extendable<A> for RingBuf<A> {\n+impl<A> Extend<A> for RingBuf<A> {\n     fn extend<T: Iterator<A>>(&mut self, mut iterator: T) {\n         for elt in iterator {\n             self.push_back(elt);"}, {"sha": "cb9faf31a5fd8935cbe0937c17e2af7f71441d6c", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=f0ca717c643cbef31859e443ee20db4465ac8864", "patch": "@@ -683,8 +683,8 @@ impl FromIterator<char> for String {\n     }\n }\n \n-#[experimental = \"waiting on Extendable stabilization\"]\n-impl Extendable<char> for String {\n+#[experimental = \"waiting on Extend stabilization\"]\n+impl Extend<char> for String {\n     fn extend<I:Iterator<char>>(&mut self, mut iterator: I) {\n         for ch in iterator {\n             self.push(ch)"}, {"sha": "50bfeafc43e2910397890984b1f8a895bc44e0a7", "filename": "src/libcollections/tree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcollections%2Ftree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcollections%2Ftree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftree%2Fmap.rs?ref=f0ca717c643cbef31859e443ee20db4465ac8864", "patch": "@@ -1260,7 +1260,7 @@ impl<K: Ord, V> FromIterator<(K, V)> for TreeMap<K, V> {\n     }\n }\n \n-impl<K: Ord, V> Extendable<(K, V)> for TreeMap<K, V> {\n+impl<K: Ord, V> Extend<(K, V)> for TreeMap<K, V> {\n     #[inline]\n     fn extend<T: Iterator<(K, V)>>(&mut self, mut iter: T) {\n         for (k, v) in iter {"}, {"sha": "45904259c6614be53cdce48c6e5a8a2d02184a13", "filename": "src/libcollections/tree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcollections%2Ftree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcollections%2Ftree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftree%2Fset.rs?ref=f0ca717c643cbef31859e443ee20db4465ac8864", "patch": "@@ -659,7 +659,7 @@ impl<T: Ord> FromIterator<T> for TreeSet<T> {\n     }\n }\n \n-impl<T: Ord> Extendable<T> for TreeSet<T> {\n+impl<T: Ord> Extend<T> for TreeSet<T> {\n     #[inline]\n     fn extend<Iter: Iterator<T>>(&mut self, mut iter: Iter) {\n         for elem in iter {"}, {"sha": "b94025bd394fdf229a0f1b7ff8c70af1dcec96d9", "filename": "src/libcollections/trie/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcollections%2Ftrie%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcollections%2Ftrie%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie%2Fmap.rs?ref=f0ca717c643cbef31859e443ee20db4465ac8864", "patch": "@@ -628,7 +628,7 @@ impl<T> FromIterator<(uint, T)> for TrieMap<T> {\n     }\n }\n \n-impl<T> Extendable<(uint, T)> for TrieMap<T> {\n+impl<T> Extend<(uint, T)> for TrieMap<T> {\n     fn extend<Iter: Iterator<(uint, T)>>(&mut self, mut iter: Iter) {\n         for (k, v) in iter {\n             self.insert(k, v);"}, {"sha": "f40c0db5edf99691211ee0e7604e7a049c4ba8a8", "filename": "src/libcollections/trie/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcollections%2Ftrie%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcollections%2Ftrie%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie%2Fset.rs?ref=f0ca717c643cbef31859e443ee20db4465ac8864", "patch": "@@ -355,7 +355,7 @@ impl FromIterator<uint> for TrieSet {\n     }\n }\n \n-impl Extendable<uint> for TrieSet {\n+impl Extend<uint> for TrieSet {\n     fn extend<Iter: Iterator<uint>>(&mut self, mut iter: Iter) {\n         for elem in iter {\n             self.insert(elem);"}, {"sha": "0e3799ed9ac37d4596fcc70e98d61713d774d1f3", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=f0ca717c643cbef31859e443ee20db4465ac8864", "patch": "@@ -484,8 +484,8 @@ impl<T> FromIterator<T> for Vec<T> {\n     }\n }\n \n-#[experimental = \"waiting on Extendable stability\"]\n-impl<T> Extendable<T> for Vec<T> {\n+#[experimental = \"waiting on Extend stability\"]\n+impl<T> Extend<T> for Vec<T> {\n     #[inline]\n     fn extend<I: Iterator<T>>(&mut self, mut iterator: I) {\n         let (lower, _) = iterator.size_hint();"}, {"sha": "36e66ed27f3c995feb55fa84fd5161b88cf1f59e", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=f0ca717c643cbef31859e443ee20db4465ac8864", "patch": "@@ -499,7 +499,7 @@ impl<V> FromIterator<(uint, V)> for VecMap<V> {\n     }\n }\n \n-impl<V> Extendable<(uint, V)> for VecMap<V> {\n+impl<V> Extend<(uint, V)> for VecMap<V> {\n     fn extend<Iter: Iterator<(uint, V)>>(&mut self, mut iter: Iter) {\n         for (k, v) in iter {\n             self.insert(k, v);"}, {"sha": "a717d3c2c993de6c359f31f1be92aa463c1507af", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=f0ca717c643cbef31859e443ee20db4465ac8864", "patch": "@@ -66,6 +66,7 @@ use num::{Zero, One, CheckedAdd, CheckedSub, Saturating, ToPrimitive, Int};\n use ops::{Add, Mul, Sub};\n use option::{Option, Some, None};\n use uint;\n+#[deprecated = \"renamed to Extend\"] pub use self::Extend as Extendable;\n \n /// Conversion from an `Iterator`\n pub trait FromIterator<A> {\n@@ -74,8 +75,8 @@ pub trait FromIterator<A> {\n }\n \n /// A type growable from an `Iterator` implementation\n-pub trait Extendable<A>: FromIterator<A> {\n-    /// Extend a container with the elements yielded by an iterator\n+pub trait Extend<A> {\n+    /// Extend a container with the elements yielded by an arbitrary iterator\n     fn extend<T: Iterator<A>>(&mut self, iterator: T);\n }\n "}, {"sha": "17f7a04819f4b99d9fd9fef8f10dc0b98a071458", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=f0ca717c643cbef31859e443ee20db4465ac8864", "patch": "@@ -48,7 +48,7 @@ pub use char::Char;\n pub use clone::Clone;\n pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n pub use cmp::{Ordering, Less, Equal, Greater, Equiv};\n-pub use iter::{FromIterator, Extendable};\n+pub use iter::{FromIterator, Extend};\n pub use iter::{Iterator, DoubleEndedIterator, RandomAccessIterator, CloneableIterator};\n pub use iter::{OrdIterator, MutableDoubleEndedIterator, ExactSize};\n pub use num::{Num, NumCast, CheckedAdd, CheckedSub, CheckedMul};"}, {"sha": "173b50dfc5ff0d7a3c37fb5c379a215d6560dafb", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=f0ca717c643cbef31859e443ee20db4465ac8864", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use clean::*;\n-use std::iter::Extendable;\n+use std::iter::Extend;\n use std::mem::{replace, swap};\n \n pub trait DocFolder {"}, {"sha": "f55ce9ba4625ce94e675e39532cbb09744a8baeb", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=f0ca717c643cbef31859e443ee20db4465ac8864", "patch": "@@ -15,7 +15,7 @@ use cmp::{max, Eq, Equiv, PartialEq};\n use default::Default;\n use fmt::{mod, Show};\n use hash::{Hash, Hasher, RandomSipHasher};\n-use iter::{mod, Iterator, FromIterator, Extendable};\n+use iter::{mod, Iterator, FromIterator, Extend};\n use kinds::Sized;\n use mem::{mod, replace};\n use num;\n@@ -1449,7 +1449,7 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S> + Default> FromIterator<(K, V)> for Has\n     }\n }\n \n-impl<K: Eq + Hash<S>, V, S, H: Hasher<S> + Default> Extendable<(K, V)> for HashMap<K, V, H> {\n+impl<K: Eq + Hash<S>, V, S, H: Hasher<S> + Default> Extend<(K, V)> for HashMap<K, V, H> {\n     fn extend<T: Iterator<(K, V)>>(&mut self, mut iter: T) {\n         for (k, v) in iter {\n             self.insert(k, v);"}, {"sha": "4326fae16fc911095ef87697b9ea6e7a9c4933d6", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=f0ca717c643cbef31859e443ee20db4465ac8864", "patch": "@@ -16,7 +16,7 @@ use default::Default;\n use fmt::Show;\n use fmt;\n use hash::{Hash, Hasher, RandomSipHasher};\n-use iter::{Iterator, FromIterator, FilterMap, Chain, Repeat, Zip, Extendable};\n+use iter::{Iterator, FromIterator, FilterMap, Chain, Repeat, Zip, Extend};\n use iter;\n use option::{Some, None};\n use result::{Ok, Err};\n@@ -574,7 +574,7 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> FromIterator<T> for HashSet<T,\n     }\n }\n \n-impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> Extendable<T> for HashSet<T, H> {\n+impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> Extend<T> for HashSet<T, H> {\n     fn extend<I: Iterator<T>>(&mut self, mut iter: I) {\n         for k in iter {\n             self.insert(k);"}, {"sha": "94bea37d187284630b25533b41e1903db3c4e797", "filename": "src/libstd/collections/lru_cache.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibstd%2Fcollections%2Flru_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibstd%2Fcollections%2Flru_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Flru_cache.rs?ref=f0ca717c643cbef31859e443ee20db4465ac8864", "patch": "@@ -41,7 +41,7 @@ use cmp::{PartialEq, Eq};\n use collections::HashMap;\n use fmt;\n use hash::Hash;\n-use iter::{range, Iterator};\n+use iter::{range, Iterator, Extend};\n use mem;\n use ops::Drop;\n use option::{Some, None, Option};\n@@ -329,6 +329,15 @@ impl<K: Hash + Eq, V> LruCache<K, V> {\n     /// Clear the cache of all key-value pairs.\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn clear(&mut self) { self.map.clear(); }\n+\n+}\n+\n+impl<K: Hash + Eq, V> Extend<(K, V)> for LruCache<K, V> {\n+    fn extend<T: Iterator<(K, V)>>(&mut self, mut iter: T) {\n+        for (k, v) in iter{\n+            self.insert(k, v);\n+        }\n+    }\n }\n \n impl<A: fmt::Show + Hash + Eq, B: fmt::Show> fmt::Show for LruCache<A, B> {"}, {"sha": "e76046bac059f33b60860fd7516182e178a9a7a4", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=f0ca717c643cbef31859e443ee20db4465ac8864", "patch": "@@ -60,7 +60,7 @@ use io::{IoResult, IoError, FileStat, SeekStyle, Seek, Writer, Reader};\n use io::{Read, Truncate, SeekCur, SeekSet, ReadWrite, SeekEnd, Append};\n use io::UpdateIoError;\n use io;\n-use iter::{Iterator, Extendable};\n+use iter::{Iterator, Extend};\n use kinds::Send;\n use libc;\n use option::{Some, None, Option};"}, {"sha": "9918e93909746a45115e2878dd6d55a4d1134a78", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=f0ca717c643cbef31859e443ee20db4465ac8864", "patch": "@@ -16,7 +16,7 @@ use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n use from_str::FromStr;\n use hash;\n use io::Writer;\n-use iter::{DoubleEndedIterator, AdditiveIterator, Extendable, Iterator, Map};\n+use iter::{DoubleEndedIterator, AdditiveIterator, Extend, Iterator, Map};\n use option::{Option, None, Some};\n use str::Str;\n use str;"}, {"sha": "3a5350f0a291c9d073a6fb20a189174c8cd9263b", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=f0ca717c643cbef31859e443ee20db4465ac8864", "patch": "@@ -19,7 +19,7 @@ use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n use from_str::FromStr;\n use hash;\n use io::Writer;\n-use iter::{AdditiveIterator, DoubleEndedIterator, Extendable, Iterator, Map};\n+use iter::{AdditiveIterator, DoubleEndedIterator, Extend, Iterator, Map};\n use mem;\n use option::{Option, Some, None};\n use slice::{AsSlice, SlicePrelude};"}, {"sha": "f1090e75127977107541193c83a7e30b00ce3446", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=f0ca717c643cbef31859e443ee20db4465ac8864", "patch": "@@ -63,7 +63,7 @@\n #[doc(no_inline)] pub use clone::Clone;\n #[doc(no_inline)] pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n #[doc(no_inline)] pub use cmp::{Ordering, Less, Equal, Greater, Equiv};\n-#[doc(no_inline)] pub use iter::{FromIterator, Extendable, ExactSize};\n+#[doc(no_inline)] pub use iter::{FromIterator, Extend, ExactSize};\n #[doc(no_inline)] pub use iter::{Iterator, DoubleEndedIterator};\n #[doc(no_inline)] pub use iter::{RandomAccessIterator, CloneableIterator};\n #[doc(no_inline)] pub use iter::{OrdIterator, MutableDoubleEndedIterator};"}, {"sha": "8aba0014e97bb1e5b31fa1e80312e6314448294d", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ca717c643cbef31859e443ee20db4465ac8864/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=f0ca717c643cbef31859e443ee20db4465ac8864", "patch": "@@ -33,7 +33,7 @@ impl<T> FromIterator<T> for SmallVector<T> {\n     }\n }\n \n-impl<T> Extendable<T> for SmallVector<T> {\n+impl<T> Extend<T> for SmallVector<T> {\n     fn extend<I: Iterator<T>>(&mut self, mut iter: I) {\n         for val in iter {\n             self.push(val);"}]}