{"sha": "10d8cb913cb8247ae64b954cf07460f1b6d96ef7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZDhjYjkxM2NiODI0N2FlNjRiOTU0Y2YwNzQ2MGYxYjZkOTZlZjc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-16T20:21:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-16T20:21:59Z"}, "message": "Merge #3958\n\n3958: Add proc-macro related config and tests r=matklad a=edwin0cheng\n\nThis PR do the following things:\r\n\r\n1. Add cli argument `proc-macro` for running proc-macro server.\r\n2. Added support for proc-macro in bench and analysis-stats\r\n3. Added typescript config for proc-macros\r\n4. Added an heavy test for proc-macros. \r\n\r\nTo test it out: \r\n\r\n1. run `cargo xtask install --proc-macro`\r\n2. add `\"rust-analyzer.cargo.loadOutDirsFromCheck\": true\"` and `\"rust-analyzer.procMacro.enabled\": true\"` in vs code config.\r\n\r\n[Edit] Change to use `rust-analyzer proc-macro` for running proc-macro standalone process.\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "976786b86c189d8c03a15378fd62526cbe8eaab7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/976786b86c189d8c03a15378fd62526cbe8eaab7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10d8cb913cb8247ae64b954cf07460f1b6d96ef7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJemL5nCRBK7hj4Ov3rIwAAdHIIACsWRGGqqg7IU2p5U3N81XQf\nolEVjja4b3jlAQ1F0e0FrX+gW+hvb6iL0kNhgg49/mhHRYJMC/42vfernAIbk68y\nA6GrWSZfle1c+DX57y9pbdXcIPVrd1aSdvbWWz64RC7ywfaBpgCMxQ/7RzPBy1kc\n1A3AqcB2X2mKKK5D6PQNcI1gb4xdvKGxofYy4Bmd/tHPXmxADeEp28rHhDjnzYpE\nTwZD+ls+zgQVket4iBoATgIvb1/g56EEfZcGuqDYLfT6bnZtUs3MLOwuZFLV6h5X\ntg3OwphbYfPkgjzcX4wif/q465DiHbLd8IJlai+W+jzsvwyYg+dtQULk9bVrXIw=\n=QJSQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 976786b86c189d8c03a15378fd62526cbe8eaab7\nparent a4cda3efbbabe4c6129de4dc095953fe858d7d3f\nparent 16a74cfd234e94d383b0ef067fb6a3c651ed9624\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1587068519 +0000\ncommitter GitHub <noreply@github.com> 1587068519 +0000\n\nMerge #3958\n\n3958: Add proc-macro related config and tests r=matklad a=edwin0cheng\n\nThis PR do the following things:\r\n\r\n1. Add cli argument `proc-macro` for running proc-macro server.\r\n2. Added support for proc-macro in bench and analysis-stats\r\n3. Added typescript config for proc-macros\r\n4. Added an heavy test for proc-macros. \r\n\r\nTo test it out: \r\n\r\n1. run `cargo xtask install --proc-macro`\r\n2. add `\"rust-analyzer.cargo.loadOutDirsFromCheck\": true\"` and `\"rust-analyzer.procMacro.enabled\": true\"` in vs code config.\r\n\r\n[Edit] Change to use `rust-analyzer proc-macro` for running proc-macro standalone process.\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10d8cb913cb8247ae64b954cf07460f1b6d96ef7", "html_url": "https://github.com/rust-lang/rust/commit/10d8cb913cb8247ae64b954cf07460f1b6d96ef7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4cda3efbbabe4c6129de4dc095953fe858d7d3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4cda3efbbabe4c6129de4dc095953fe858d7d3f", "html_url": "https://github.com/rust-lang/rust/commit/a4cda3efbbabe4c6129de4dc095953fe858d7d3f"}, {"sha": "16a74cfd234e94d383b0ef067fb6a3c651ed9624", "url": "https://api.github.com/repos/rust-lang/rust/commits/16a74cfd234e94d383b0ef067fb6a3c651ed9624", "html_url": "https://github.com/rust-lang/rust/commit/16a74cfd234e94d383b0ef067fb6a3c651ed9624"}], "stats": {"total": 237, "additions": 208, "deletions": 29}, "files": [{"sha": "89a734c9bb935cae217aa20213debe4aaff6fe9c", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=10d8cb913cb8247ae64b954cf07460f1b6d96ef7", "patch": "@@ -1341,6 +1341,7 @@ dependencies = [\n  \"ra_hir_def\",\n  \"ra_hir_ty\",\n  \"ra_ide\",\n+ \"ra_proc_macro_srv\",\n  \"ra_prof\",\n  \"ra_project_model\",\n  \"ra_syntax\","}, {"sha": "b200fd12633e0e262082835829e60e43263d0b19", "filename": "crates/ra_proc_macro/src/lib.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/crates%2Fra_proc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/crates%2Fra_proc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro%2Fsrc%2Flib.rs?ref=10d8cb913cb8247ae64b954cf07460f1b6d96ef7", "patch": "@@ -12,6 +12,7 @@ pub mod msg;\n use process::{ProcMacroProcessSrv, ProcMacroProcessThread};\n use ra_tt::{SmolStr, Subtree};\n use std::{\n+    ffi::OsStr,\n     path::{Path, PathBuf},\n     sync::Arc,\n };\n@@ -56,8 +57,15 @@ pub struct ProcMacroClient {\n }\n \n impl ProcMacroClient {\n-    pub fn extern_process(process_path: &Path) -> Result<ProcMacroClient, std::io::Error> {\n-        let (thread, process) = ProcMacroProcessSrv::run(process_path)?;\n+    pub fn extern_process<I, S>(\n+        process_path: &Path,\n+        args: I,\n+    ) -> Result<ProcMacroClient, std::io::Error>\n+    where\n+        I: IntoIterator<Item = S>,\n+        S: AsRef<OsStr>,\n+    {\n+        let (thread, process) = ProcMacroProcessSrv::run(process_path, args)?;\n         Ok(ProcMacroClient {\n             kind: ProcMacroClientKind::Process { process: Arc::new(process), thread },\n         })"}, {"sha": "f851570bca9f4c562e5d8eecc8411ce08f67cc8d", "filename": "crates/ra_proc_macro/src/process.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/crates%2Fra_proc_macro%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/crates%2Fra_proc_macro%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro%2Fsrc%2Fprocess.rs?ref=10d8cb913cb8247ae64b954cf07460f1b6d96ef7", "patch": "@@ -9,6 +9,7 @@ use crate::rpc::{ExpansionResult, ExpansionTask, ListMacrosResult, ListMacrosTas\n use io::{BufRead, BufReader};\n use std::{\n     convert::{TryFrom, TryInto},\n+    ffi::OsStr,\n     io::{self, Write},\n     path::{Path, PathBuf},\n     process::{Child, Command, Stdio},\n@@ -44,8 +45,13 @@ impl Drop for Process {\n }\n \n impl Process {\n-    fn run(process_path: &Path) -> Result<Process, io::Error> {\n+    fn run<I, S>(process_path: &Path, args: I) -> Result<Process, io::Error>\n+    where\n+        I: IntoIterator<Item = S>,\n+        S: AsRef<OsStr>,\n+    {\n         let child = Command::new(process_path.clone())\n+            .args(args)\n             .stdin(Stdio::piped())\n             .stdout(Stdio::piped())\n             .stderr(Stdio::null())\n@@ -74,10 +80,15 @@ impl Process {\n }\n \n impl ProcMacroProcessSrv {\n-    pub fn run(\n+    pub fn run<I, S>(\n         process_path: &Path,\n-    ) -> Result<(ProcMacroProcessThread, ProcMacroProcessSrv), io::Error> {\n-        let process = Process::run(process_path)?;\n+        args: I,\n+    ) -> Result<(ProcMacroProcessThread, ProcMacroProcessSrv), io::Error>\n+    where\n+        I: IntoIterator<Item = S>,\n+        S: AsRef<OsStr>,\n+    {\n+        let process = Process::run(process_path, args)?;\n \n         let (task_tx, task_rx) = bounded(0);\n         let handle = jod_thread::spawn(move || {"}, {"sha": "c771f2b389115deb6078b4116eecec15bb6852b5", "filename": "crates/ra_proc_macro_srv/src/cli.rs", "status": "renamed", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/crates%2Fra_proc_macro_srv%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/crates%2Fra_proc_macro_srv%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Fcli.rs?ref=10d8cb913cb8247ae64b954cf07460f1b6d96ef7", "patch": "@@ -1,7 +1,7 @@\n //! Driver for proc macro server\n \n+use crate::{expand_task, list_macros};\n use ra_proc_macro::msg::{self, Message};\n-use ra_proc_macro_srv::{expand_task, list_macros};\n \n use std::io;\n \n@@ -24,7 +24,8 @@ fn write_response(res: Result<msg::Response, String>) -> Result<(), io::Error> {\n     let mut stdout = stdout.lock();\n     msg.write(&mut stdout)\n }\n-fn main() {\n+\n+pub fn run() {\n     loop {\n         let req = match read_request() {\n             Err(err) => {", "previous_filename": "crates/ra_proc_macro_srv/src/main.rs"}, {"sha": "c62b0ed893c03db3610ce2f969a2f430cf3a095d", "filename": "crates/ra_proc_macro_srv/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/crates%2Fra_proc_macro_srv%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/crates%2Fra_proc_macro_srv%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Flib.rs?ref=10d8cb913cb8247ae64b954cf07460f1b6d96ef7", "patch": "@@ -22,7 +22,7 @@ mod dylib;\n use proc_macro::bridge::client::TokenStream;\n use ra_proc_macro::{ExpansionResult, ExpansionTask, ListMacrosResult, ListMacrosTask};\n \n-pub fn expand_task(task: &ExpansionTask) -> Result<ExpansionResult, String> {\n+pub(crate) fn expand_task(task: &ExpansionTask) -> Result<ExpansionResult, String> {\n     let expander = dylib::Expander::new(&task.lib)\n         .expect(&format!(\"Cannot expand with provided libraries: ${:?}\", &task.lib));\n \n@@ -39,7 +39,7 @@ pub fn expand_task(task: &ExpansionTask) -> Result<ExpansionResult, String> {\n     }\n }\n \n-pub fn list_macros(task: &ListMacrosTask) -> Result<ListMacrosResult, String> {\n+pub(crate) fn list_macros(task: &ListMacrosTask) -> Result<ListMacrosResult, String> {\n     let expander = dylib::Expander::new(&task.lib)\n         .expect(&format!(\"Cannot expand with provided libraries: ${:?}\", &task.lib));\n \n@@ -53,5 +53,7 @@ pub fn list_macros(task: &ListMacrosTask) -> Result<ListMacrosResult, String> {\n     }\n }\n \n+pub mod cli;\n+\n #[cfg(test)]\n mod tests;"}, {"sha": "cee0248b62c545f55917a151e33fd313db08ca1a", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=10d8cb913cb8247ae64b954cf07460f1b6d96ef7", "patch": "@@ -46,7 +46,7 @@ ra_db = { path = \"../ra_db\" }\n hir = { path = \"../ra_hir\", package = \"ra_hir\" }\n hir_def = { path = \"../ra_hir_def\", package = \"ra_hir_def\" }\n hir_ty = { path = \"../ra_hir_ty\", package = \"ra_hir_ty\" }\n-\n+ra_proc_macro_srv = { path = \"../ra_proc_macro_srv\" }\n \n [target.'cfg(windows)'.dependencies]\n winapi = \"0.3.8\""}, {"sha": "5e19253a65cc69b7add9d7e3dc9b26e05fdf8d95", "filename": "crates/rust-analyzer/src/bin/args.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs?ref=10d8cb913cb8247ae64b954cf07460f1b6d96ef7", "patch": "@@ -29,19 +29,23 @@ pub(crate) enum Command {\n         with_deps: bool,\n         path: PathBuf,\n         load_output_dirs: bool,\n+        with_proc_macro: bool,\n     },\n     Bench {\n         path: PathBuf,\n         what: BenchWhat,\n         load_output_dirs: bool,\n+        with_proc_macro: bool,\n     },\n     Diagnostics {\n         path: PathBuf,\n         load_output_dirs: bool,\n+        with_proc_macro: bool,\n         /// Include files which are not modules. In rust-analyzer\n         /// this would include the parser test files.\n         all: bool,\n     },\n+    ProcMacro,\n     RunServer,\n     Version,\n }\n@@ -148,6 +152,7 @@ FLAGS:\n     -h, --help              Prints help information\n         --memory-usage\n         --load-output-dirs  Load OUT_DIR values by running `cargo check` before analysis\n+        --with-proc-macro    Use ra-proc-macro-srv for proc-macro expanding\n     -v, --verbose\n     -q, --quiet\n \n@@ -165,6 +170,7 @@ ARGS:\n                 let only: Option<String> = matches.opt_value_from_str([\"-o\", \"--only\"])?;\n                 let with_deps: bool = matches.contains(\"--with-deps\");\n                 let load_output_dirs = matches.contains(\"--load-output-dirs\");\n+                let with_proc_macro = matches.contains(\"--with-proc-macro\");\n                 let path = {\n                     let mut trailing = matches.free()?;\n                     if trailing.len() != 1 {\n@@ -173,7 +179,15 @@ ARGS:\n                     trailing.pop().unwrap().into()\n                 };\n \n-                Command::Stats { randomize, memory_usage, only, with_deps, path, load_output_dirs }\n+                Command::Stats {\n+                    randomize,\n+                    memory_usage,\n+                    only,\n+                    with_deps,\n+                    path,\n+                    load_output_dirs,\n+                    with_proc_macro,\n+                }\n             }\n             \"analysis-bench\" => {\n                 if matches.contains([\"-h\", \"--help\"]) {\n@@ -187,6 +201,7 @@ USAGE:\n FLAGS:\n     -h, --help          Prints help information\n     --load-output-dirs  Load OUT_DIR values by running `cargo check` before analysis\n+    --with-proc-macro    Use ra-proc-macro-srv for proc-macro expanding\n     -v, --verbose\n \n OPTIONS:\n@@ -214,7 +229,8 @@ ARGS:\n                     ),\n                 };\n                 let load_output_dirs = matches.contains(\"--load-output-dirs\");\n-                Command::Bench { path, what, load_output_dirs }\n+                let with_proc_macro = matches.contains(\"--with-proc-macro\");\n+                Command::Bench { path, what, load_output_dirs, with_proc_macro }\n             }\n             \"diagnostics\" => {\n                 if matches.contains([\"-h\", \"--help\"]) {\n@@ -237,6 +253,7 @@ ARGS:\n                 }\n \n                 let load_output_dirs = matches.contains(\"--load-output-dirs\");\n+                let with_proc_macro = matches.contains(\"--with-proc-macro\");\n                 let all = matches.contains(\"--all\");\n                 let path = {\n                     let mut trailing = matches.free()?;\n@@ -246,8 +263,9 @@ ARGS:\n                     trailing.pop().unwrap().into()\n                 };\n \n-                Command::Diagnostics { path, load_output_dirs, all }\n+                Command::Diagnostics { path, load_output_dirs, with_proc_macro, all }\n             }\n+            \"proc-macro\" => Command::ProcMacro,\n             _ => {\n                 eprintln!(\n                     \"\\"}, {"sha": "28b67cfe2aa47125ad947a9e286c73f106c8bcac", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=10d8cb913cb8247ae64b954cf07460f1b6d96ef7", "patch": "@@ -25,6 +25,7 @@ fn main() -> Result<()> {\n             with_deps,\n             path,\n             load_output_dirs,\n+            with_proc_macro,\n         } => cli::analysis_stats(\n             args.verbosity,\n             memory_usage,\n@@ -33,16 +34,24 @@ fn main() -> Result<()> {\n             with_deps,\n             randomize,\n             load_output_dirs,\n+            with_proc_macro,\n         )?,\n \n-        args::Command::Bench { path, what, load_output_dirs } => {\n-            cli::analysis_bench(args.verbosity, path.as_ref(), what, load_output_dirs)?\n+        args::Command::Bench { path, what, load_output_dirs, with_proc_macro } => {\n+            cli::analysis_bench(\n+                args.verbosity,\n+                path.as_ref(),\n+                what,\n+                load_output_dirs,\n+                with_proc_macro,\n+            )?\n         }\n \n-        args::Command::Diagnostics { path, load_output_dirs, all } => {\n-            cli::diagnostics(path.as_ref(), load_output_dirs, all)?\n+        args::Command::Diagnostics { path, load_output_dirs, with_proc_macro, all } => {\n+            cli::diagnostics(path.as_ref(), load_output_dirs, with_proc_macro, all)?\n         }\n \n+        args::Command::ProcMacro => run_proc_macro_sv()?,\n         args::Command::RunServer => run_server()?,\n         args::Command::Version => println!(\"rust-analyzer {}\", env!(\"REV\")),\n     }\n@@ -56,6 +65,11 @@ fn setup_logging() -> Result<()> {\n     Ok(())\n }\n \n+fn run_proc_macro_sv() -> Result<()> {\n+    ra_proc_macro_srv::cli::run();\n+    Ok(())\n+}\n+\n fn run_server() -> Result<()> {\n     log::info!(\"lifecycle: server started\");\n "}, {"sha": "6147ae20743c4d7fbb7ed593876e9d4be2e8f29d", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=10d8cb913cb8247ae64b954cf07460f1b6d96ef7", "patch": "@@ -47,12 +47,13 @@ pub fn analysis_bench(\n     path: &Path,\n     what: BenchWhat,\n     load_output_dirs: bool,\n+    with_proc_macro: bool,\n ) -> Result<()> {\n     ra_prof::init();\n \n     let start = Instant::now();\n     eprint!(\"loading: \");\n-    let (mut host, roots) = load_cargo(path, load_output_dirs)?;\n+    let (mut host, roots) = load_cargo(path, load_output_dirs, with_proc_macro)?;\n     let db = host.raw_database();\n     eprintln!(\"{:?}\\n\", start.elapsed());\n "}, {"sha": "d442cbd63e31f5d3fcbd76a68587c03bc9e15bdb", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=10d8cb913cb8247ae64b954cf07460f1b6d96ef7", "patch": "@@ -25,9 +25,10 @@ pub fn analysis_stats(\n     with_deps: bool,\n     randomize: bool,\n     load_output_dirs: bool,\n+    with_proc_macro: bool,\n ) -> Result<()> {\n     let db_load_time = Instant::now();\n-    let (mut host, roots) = load_cargo(path, load_output_dirs)?;\n+    let (mut host, roots) = load_cargo(path, load_output_dirs, with_proc_macro)?;\n     let db = host.raw_database();\n     println!(\"Database loaded, {} roots, {:?}\", roots.len(), db_load_time.elapsed());\n     let analysis_time = Instant::now();"}, {"sha": "60daefa3ef7ffd4efbb330c7830dd741cf2a9df4", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=10d8cb913cb8247ae64b954cf07460f1b6d96ef7", "patch": "@@ -9,8 +9,13 @@ use std::{collections::HashSet, path::Path};\n use crate::cli::{load_cargo::load_cargo, Result};\n use hir::Semantics;\n \n-pub fn diagnostics(path: &Path, load_output_dirs: bool, all: bool) -> Result<()> {\n-    let (host, roots) = load_cargo(path, load_output_dirs)?;\n+pub fn diagnostics(\n+    path: &Path,\n+    load_output_dirs: bool,\n+    with_proc_macro: bool,\n+    all: bool,\n+) -> Result<()> {\n+    let (host, roots) = load_cargo(path, load_output_dirs, with_proc_macro)?;\n     let db = host.raw_database();\n     let analysis = host.analysis();\n     let semantics = Semantics::new(db);"}, {"sha": "32a9ee339ad15dfbc20b3834c7e724ac0b71d30b", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=10d8cb913cb8247ae64b954cf07460f1b6d96ef7", "patch": "@@ -25,6 +25,7 @@ fn vfs_root_to_id(r: ra_vfs::VfsRoot) -> SourceRootId {\n pub(crate) fn load_cargo(\n     root: &Path,\n     load_out_dirs_from_check: bool,\n+    with_proc_macro: bool,\n ) -> Result<(AnalysisHost, FxHashMap<SourceRootId, PackageRoot>)> {\n     let root = std::env::current_dir()?.join(root);\n     let ws = ProjectWorkspace::discover(\n@@ -69,7 +70,14 @@ pub(crate) fn load_cargo(\n         })\n         .collect::<FxHashMap<_, _>>();\n \n-    let proc_macro_client = ProcMacroClient::dummy();\n+    let proc_macro_client = if !with_proc_macro {\n+        ProcMacroClient::dummy()\n+    } else {\n+        let mut path = std::env::current_exe()?;\n+        path.pop();\n+        path.push(\"rust-analyzer\");\n+        ProcMacroClient::extern_process(&path, &[\"proc-macro\"]).unwrap()\n+    };\n     let host = load(&source_roots, ws, &mut vfs, receiver, extern_dirs, &proc_macro_client);\n     Ok((host, source_roots))\n }\n@@ -175,7 +183,7 @@ mod tests {\n     #[test]\n     fn test_loading_rust_analyzer() {\n         let path = Path::new(env!(\"CARGO_MANIFEST_DIR\")).parent().unwrap().parent().unwrap();\n-        let (host, _roots) = load_cargo(path, false).unwrap();\n+        let (host, _roots) = load_cargo(path, false, false).unwrap();\n         let n_crates = Crate::all(host.raw_database()).len();\n         // RA has quite a few crates, but the exact count doesn't matter\n         assert!(n_crates > 20);"}, {"sha": "2b45f131031574a3aff7c1fd38fe00b0696ae0f0", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=10d8cb913cb8247ae64b954cf07460f1b6d96ef7", "patch": "@@ -20,7 +20,7 @@ pub struct Config {\n     pub with_sysroot: bool,\n     pub publish_diagnostics: bool,\n     pub lru_capacity: Option<usize>,\n-    pub proc_macro_srv: Option<String>,\n+    pub proc_macro_srv: Option<(String, Vec<String>)>,\n     pub files: FilesConfig,\n     pub notifications: NotificationsConfig,\n \n@@ -131,6 +131,18 @@ impl Config {\n         set(value, \"/cargo/allFeatures\", &mut self.cargo.all_features);\n         set(value, \"/cargo/features\", &mut self.cargo.features);\n         set(value, \"/cargo/loadOutDirsFromCheck\", &mut self.cargo.load_out_dirs_from_check);\n+\n+        match get::<bool>(value, \"/procMacro/enabled\") {\n+            Some(true) => {\n+                if let Ok(mut path) = std::env::current_exe() {\n+                    path.pop();\n+                    path.push(\"rust-analyzer\");\n+                    self.proc_macro_srv = Some((path.to_string_lossy().to_string(), vec![\"proc-macro\".to_string()]));\n+                }\n+            }\n+            _ => self.proc_macro_srv = None,\n+        }\n+\n         match get::<Vec<String>>(value, \"/rustfmt/overrideCommand\") {\n             Some(mut args) if !args.is_empty() => {\n                 let command = args.remove(0);"}, {"sha": "f2ad453fafe40ada08c71a450faaca1b1f51b92a", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=10d8cb913cb8247ae64b954cf07460f1b6d96ef7", "patch": "@@ -64,6 +64,7 @@ pub struct WorldState {\n     pub latest_requests: Arc<RwLock<LatestRequests>>,\n     pub flycheck: Option<Flycheck>,\n     pub diagnostics: DiagnosticCollection,\n+    pub proc_macro_client: ProcMacroClient,\n }\n \n /// An immutable snapshot of the world's state at a point in time.\n@@ -147,9 +148,9 @@ impl WorldState {\n \n         let proc_macro_client = match &config.proc_macro_srv {\n             None => ProcMacroClient::dummy(),\n-            Some(srv) => {\n-                let path = Path::new(&srv);\n-                match ProcMacroClient::extern_process(path) {\n+            Some((path, args)) => {\n+                let path = std::path::Path::new(path);\n+                match ProcMacroClient::extern_process(path, args) {\n                     Ok(it) => it,\n                     Err(err) => {\n                         log::error!(\n@@ -192,6 +193,7 @@ impl WorldState {\n             latest_requests: Default::default(),\n             flycheck,\n             diagnostics: Default::default(),\n+            proc_macro_client,\n         }\n     }\n "}, {"sha": "1dd2676b6e960428c77050579f71284ff98fe1b1", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 90, "deletions": 1, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=10d8cb913cb8247ae64b954cf07460f1b6d96ef7", "patch": "@@ -9,7 +9,7 @@ use lsp_types::{\n };\n use rust_analyzer::req::{\n     CodeActionParams, CodeActionRequest, Completion, CompletionParams, DidOpenTextDocument,\n-    Formatting, GotoDefinition, OnEnter, Runnables, RunnablesParams,\n+    Formatting, GotoDefinition, HoverRequest, OnEnter, Runnables, RunnablesParams,\n };\n use serde_json::json;\n use tempfile::TempDir;\n@@ -625,3 +625,92 @@ fn main() { message(); }\n     ));\n     assert!(format!(\"{}\", res).contains(\"hello.rs\"));\n }\n+\n+#[test]\n+fn resolve_proc_macro() {\n+    if skip_slow_tests() {\n+        return;\n+    }\n+    let server = Project::with_fixture(\n+        r###\"\n+//- foo/Cargo.toml\n+[package]\n+name = \"foo\"\n+version = \"0.0.0\"\n+edition = \"2018\"\n+[dependencies]\n+bar = {path = \"../bar\"}\n+\n+//- foo/src/main.rs\n+use bar::Bar;\n+trait Bar {\n+  fn bar();\n+}\n+#[derive(Bar)]\n+struct Foo {}\n+fn main() {\n+  Foo::bar();\n+}\n+\n+//- bar/Cargo.toml\n+[package]\n+name = \"bar\"\n+version = \"0.0.0\"\n+edition = \"2018\"\n+\n+[lib]\n+proc-macro = true\n+\n+//- bar/src/lib.rs\n+extern crate proc_macro;\n+use proc_macro::{Delimiter, Group, Ident, Span, TokenStream, TokenTree};\n+macro_rules! t {\n+    ($n:literal) => {\n+        TokenTree::from(Ident::new($n, Span::call_site()))\n+    };\n+    ({}) => {\n+        TokenTree::from(Group::new(Delimiter::Brace, TokenStream::new()))\n+    };\n+    (()) => {\n+        TokenTree::from(Group::new(Delimiter::Parenthesis, TokenStream::new()))\n+    };\n+}\n+#[proc_macro_derive(Bar)]\n+pub fn foo(_input: TokenStream) -> TokenStream {\n+    // We hard code the output here for preventing to use any deps\n+    let mut res = TokenStream::new();\n+\n+    // impl Bar for Foo { fn bar() {} }\n+    let mut tokens = vec![t!(\"impl\"), t!(\"Bar\"), t!(\"for\"), t!(\"Foo\")];\n+    let mut fn_stream = TokenStream::new();\n+    fn_stream.extend(vec![t!(\"fn\"), t!(\"bar\"), t!(()), t!({})]);\n+    tokens.push(Group::new(Delimiter::Brace, fn_stream).into());\n+    res.extend(tokens);\n+    res\n+}\n+\n+\"###,\n+    )\n+    .with_config(|config| {\n+        // FIXME: Use env!(\"CARGO_BIN_EXE_ra-analyzer\") instead after\n+        // https://github.com/rust-lang/cargo/pull/7697 landed\n+        let macro_srv_path = std::path::Path::new(std::env!(\"CARGO_MANIFEST_DIR\"))\n+            .join(\"../../target/debug/rust-analyzer\")\n+            .to_string_lossy()\n+            .to_string();\n+\n+        config.cargo.load_out_dirs_from_check = true;\n+        config.proc_macro_srv = Some((macro_srv_path, vec![\"proc-macro\".to_string()]));\n+    })\n+    .root(\"foo\")\n+    .root(\"bar\")\n+    .server();\n+    server.wait_until_workspace_is_loaded();\n+    let res = server.send_request::<HoverRequest>(TextDocumentPositionParams::new(\n+        server.doc_id(\"foo/src/main.rs\"),\n+        Position::new(7, 9),\n+    ));\n+\n+    let value = res.get(\"contents\").unwrap().get(\"value\").unwrap().to_string();\n+    assert_eq!(value, r#\"\"```rust\\nfoo::Bar\\nfn bar()\\n```\"\"#)\n+}"}, {"sha": "5ce59e54a96975208bc335fed03738de912e80d4", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=10d8cb913cb8247ae64b954cf07460f1b6d96ef7", "patch": "@@ -388,6 +388,11 @@\n                     \"description\": \"Enable logging of VS Code extensions itself\",\n                     \"type\": \"boolean\",\n                     \"default\": false\n+                },\n+                \"rust-analyzer.procMacro.enabled\": {\n+                    \"description\": \"Enable Proc macro support, cargo.loadOutDirsFromCheck must be enabled.\",\n+                    \"type\": \"boolean\",\n+                    \"default\": false\n                 }\n             }\n         },"}, {"sha": "3b2eec8baa70cb3a93d3b93b3f00db7bb5d33736", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/10d8cb913cb8247ae64b954cf07460f1b6d96ef7/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=10d8cb913cb8247ae64b954cf07460f1b6d96ef7", "patch": "@@ -12,6 +12,7 @@ export class Config {\n     private readonly requiresReloadOpts = [\n         \"serverPath\",\n         \"cargo\",\n+        \"procMacro\",\n         \"files\",\n         \"highlighting\",\n         \"updates.channel\","}]}