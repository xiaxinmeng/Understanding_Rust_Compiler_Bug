{"sha": "9b0e6af11026ea2e4bd9464d83382ac0b5fe0bba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMGU2YWYxMTAyNmVhMmU0YmQ5NDY0ZDgzMzgyYWMwYjVmZTBiYmE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-01-23T23:47:43Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-02-06T16:42:54Z"}, "message": "Delete swaths of the configure script\n\nThis commit deletes swaths of the configure script related to the old build\nsystem which are now no longer needed when using rustbuild.", "tree": {"sha": "4adff7c8ac1ea198140203a43b3ce4d490036eba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4adff7c8ac1ea198140203a43b3ce4d490036eba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b0e6af11026ea2e4bd9464d83382ac0b5fe0bba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b0e6af11026ea2e4bd9464d83382ac0b5fe0bba", "html_url": "https://github.com/rust-lang/rust/commit/9b0e6af11026ea2e4bd9464d83382ac0b5fe0bba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b0e6af11026ea2e4bd9464d83382ac0b5fe0bba/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ab8090bd4c8fed848cfebe2ab818a91e43e225c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ab8090bd4c8fed848cfebe2ab818a91e43e225c", "html_url": "https://github.com/rust-lang/rust/commit/9ab8090bd4c8fed848cfebe2ab818a91e43e225c"}], "stats": {"total": 858, "additions": 2, "deletions": 856}, "files": [{"sha": "4790ce66044d2725dc80c34faa2a719a8cc59e95", "filename": "configure", "status": "modified", "additions": 2, "deletions": 856, "changes": 858, "blob_url": "https://github.com/rust-lang/rust/blob/9b0e6af11026ea2e4bd9464d83382ac0b5fe0bba/configure", "raw_url": "https://github.com/rust-lang/rust/raw/9b0e6af11026ea2e4bd9464d83382ac0b5fe0bba/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=9b0e6af11026ea2e4bd9464d83382ac0b5fe0bba", "patch": "@@ -993,191 +993,12 @@ then\n     putvar CFG_LOCAL_RUST_ROOT\n fi\n \n-# Force bitrig to build with clang; gcc doesn't like us there\n-if [ $CFG_OSTYPE = unknown-bitrig ]\n-then\n-    step_msg \"on Bitrig, forcing use of clang\"\n-    CFG_ENABLE_CLANG=1\n-fi\n-\n-# default gcc version under OpenBSD maybe too old, try using egcc, which is a\n-# gcc version from ports\n-if [ $CFG_OSTYPE = unknown-openbsd ]\n-then\n-    if [ $(\"$CFG_GCC\" --version 2>&1 | grep -c ' 4\\.[0-6]') -ne 0 ]; then\n-        step_msg \"older GCC found, try with egcc instead\"\n-\n-        # probe again but using egcc\n-        probe CFG_GCC egcc\n-\n-        # and use egcc/eg++ for CC/CXX too if it was found\n-        # (but user setting has priority)\n-        if [ -n \"$CFG_GCC\" ]; then\n-            CC=\"${CC:-egcc}\"\n-            CXX=\"${CXX:-eg++}\"\n-        fi\n-    fi\n-fi\n-\n-# OS X 10.9, gcc is actually clang. This can cause some confusion in the build\n-# system, so if we find that gcc is clang, we should just use clang directly.\n-if [ $CFG_OSTYPE = apple-darwin -a -z \"$CFG_ENABLE_CLANG\" ]\n-then\n-    CFG_OSX_GCC_VERSION=$(\"$CFG_GCC\" --version 2>&1 | grep \"Apple LLVM version\")\n-    if [ $? -eq 0 ]\n-    then\n-        step_msg \"on OS X >=10.9, forcing use of clang\"\n-        CFG_ENABLE_CLANG=1\n-    else\n-        if [ $(\"$CFG_GCC\" --version 2>&1 | grep -c ' 4\\.[0-6]') -ne 0 ]; then\n-            step_msg \"older GCC found, using clang instead\"\n-            CFG_ENABLE_CLANG=1\n-        else\n-            # on OS X, with xcode 5 and newer, certain developers may have\n-            # cc, gcc and g++ point to a  mixture of clang and gcc\n-            # if so, this will create very strange build errors\n-            # this last stanza is to detect some such problems and save the future rust\n-            # contributor some time solving that issue.\n-            # this detection could be generalized to other OSes aside from OS X\n-            # but the issue seems most likely to happen on OS X\n-\n-            chk_cc () {\n-                $1 --version 2> /dev/null | grep -q $2\n-            }\n-            # check that gcc, cc and g++ all point to the same compiler.\n-            # note that for xcode 5, g++ points to clang, not clang++\n-            if !((chk_cc gcc clang  && chk_cc g++ clang) ||\n-                (chk_cc gcc gcc  &&( chk_cc g++ g++ || chk g++ gcc))); then\n-                err \"the gcc and g++ in your path point to different compilers.\n-    Check which versions are in your path with gcc --version and g++ --version.\n-    To resolve this problem, either fix your PATH  or run configure with --enable-clang\"\n-            fi\n-\n-        fi\n-    fi\n-fi\n-\n-# If the clang isn't already enabled, check for GCC, and if it is missing, turn\n-# on clang as a backup.\n-if [ -z \"$CFG_ENABLE_CLANG\" ]\n-then\n-  CFG_GCC_VERSION=$(\"$CFG_GCC\" --version 2>&1)\n-  if [ $? -ne 0 ]\n-  then\n-    step_msg \"GCC not installed, will try using Clang\"\n-    CFG_ENABLE_CLANG=1\n-  fi\n-fi\n-\n-# Okay, at this point, we have made up our minds about whether we are\n-# going to force CFG_ENABLE_CLANG or not; save the setting if so.\n-if [ -n \"$CFG_ENABLE_CLANG\" ]\n-then\n-    putvar CFG_ENABLE_CLANG\n-fi\n-\n-if [ -z \"$CFG_DISABLE_LIBCPP\" -a -n \"$CFG_ENABLE_CLANG\" ]\n-then\n-    CFG_USING_LIBCPP=\"1\"\n-else\n-    CFG_USING_LIBCPP=\"0\"\n-fi\n-\n # Same with jemalloc.  save the setting here.\n if [ -n \"$CFG_DISABLE_JEMALLOC\" ]\n then\n     putvar CFG_DISABLE_JEMALLOC\n fi\n \n-if [ -n \"$CFG_LLVM_ROOT\" -a -z \"$CFG_DISABLE_LLVM_VERSION_CHECK\" -a -e \"$CFG_LLVM_ROOT/bin/llvm-config\" ]\n-then\n-    step_msg \"using custom LLVM at $CFG_LLVM_ROOT\"\n-\n-    LLVM_CONFIG=\"$CFG_LLVM_ROOT/bin/llvm-config\"\n-    LLVM_VERSION=$($LLVM_CONFIG --version)\n-\n-    case $LLVM_VERSION in\n-        (3.[7-9]*)\n-            msg \"found ok version of LLVM: $LLVM_VERSION\"\n-            ;;\n-        (*)\n-            err \"bad LLVM version: $LLVM_VERSION, need >=3.7\"\n-            ;;\n-    esac\n-\n-    if \"$CFG_LLVM_ROOT/bin/llvm-mc\" -help | grep -- \"-relocation-model\"; then\n-        msg \"found older llvm-mc\"\n-        CFG_LLVM_MC_HAS_RELOCATION_MODEL=1\n-        putvar CFG_LLVM_MC_HAS_RELOCATION_MODEL\n-    fi\n-fi\n-\n-# Even when the user overrides the choice of CC, still try to detect\n-# clang to disable some clang-specific warnings.  We here draw a\n-# distinction between:\n-#\n-#  CFG_ENABLE_CLANG : passed --enable-clang, or host \"requires\" clang,\n-#  CFG_USING_CLANG : compiler (clang / gcc / $CC) looks like clang.\n-#\n-# This distinction is important because there are some safeguards we\n-# would prefer to skip when merely CFG_USING_CLANG is set; but when\n-# CFG_ENABLE_CLANG is set, that indicates that we are opting into\n-# running such safeguards.\n-\n-if [ -n \"$CC\" ]\n-then\n-    msg \"skipping compiler inference steps; using provided CC=$CC\"\n-    CFG_CC=\"$CC\"\n-\n-    CFG_OSX_CC_VERSION=$(\"$CFG_CC\" --version 2>&1 | grep \"clang\")\n-    if [ $? -eq 0 ]\n-    then\n-        step_msg \"note, user-provided CC looks like clang; CC=$CC.\"\n-        CFG_USING_CLANG=1\n-        putvar CFG_USING_CLANG\n-    fi\n-else\n-    if [ -n \"$CFG_ENABLE_CLANG\" ]\n-    then\n-        if [ -z \"$CFG_CLANG\" ]\n-        then\n-            err \"clang requested but not found\"\n-        fi\n-        CFG_CC=\"$CFG_CLANG\"\n-        CFG_USING_CLANG=1\n-        putvar CFG_USING_CLANG\n-    else\n-        CFG_CC=\"gcc\"\n-    fi\n-fi\n-\n-if [ -n \"$CFG_ENABLE_CLANG\" ]\n-then\n-    case \"$CC\" in\n-        (''|*clang)\n-        if [ -z \"$CC\" ]\n-        then\n-            CFG_CC=\"clang\"\n-            CFG_CXX=\"clang++\"\n-        fi\n-    esac\n-fi\n-\n-if [ -n \"$CFG_ENABLE_CCACHE\" ]\n-then\n-    if [ -z \"$CFG_CCACHE\" ]\n-    then\n-        err \"ccache requested but not found\"\n-    fi\n-\n-    CFG_CC=\"ccache $CFG_CC\"\n-fi\n-\n-if [ -z \"$CC\" -a -z \"$CFG_ENABLE_CLANG\" -a -z \"$CFG_GCC\" ]\n-then\n-    err \"either clang or gcc is required\"\n-fi\n-\n # All safeguards based on $CFG_ENABLE_CLANG should occur before this\n # point in the script; after this point, script logic should inspect\n # $CFG_USING_CLANG rather than $CFG_ENABLE_CLANG.\n@@ -1190,12 +1011,6 @@ envopt CFLAGS\n envopt CXXFLAGS\n envopt LDFLAGS\n \n-# stdc++ name in use\n-# used to manage non-standard name (on OpenBSD for example)\n-program_transform_name=$($CFG_CC -v 2>&1 | sed -n \"s/.*--program-transform-name='\\([^']*\\)'.*/\\1/p\")\n-CFG_STDCPP_NAME=$(echo \"stdc++\" | sed \"${program_transform_name}\")\n-putvar CFG_STDCPP_NAME\n-\n # a little post-processing of various config values\n CFG_PREFIX=${CFG_PREFIX%/}\n CFG_MANDIR=${CFG_MANDIR%/}\n@@ -1223,651 +1038,6 @@ do\n done\n CFG_TARGET=$V_TEMP\n \n-# check target-specific tool-chains\n-for i in $CFG_TARGET\n-do\n-    L_CHECK=false\n-    for j in $CFG_SUPPORTED_TARGET\n-    do\n-        if [ $i = $j ]\n-        then\n-            L_CHECK=true\n-        fi\n-    done\n-\n-    if [ $L_CHECK = false ]\n-    then\n-        err \"unsupported target triples \\\"$i\\\" found\"\n-    fi\n-\n-    case $i in\n-        *android*)\n-            case $i in\n-                armv7-linux-androideabi)\n-                    cmd_prefix=\"arm-linux-androideabi\"\n-                    ;;\n-                *)\n-                    cmd_prefix=$i\n-                    ;;\n-            esac\n-\n-            upper_snake_target=$(echo \"$i\" | tr '[:lower:]' '[:upper:]' | tr '\\-' '\\_')\n-            eval ndk=\\$\"CFG_${upper_snake_target}_NDK\"\n-            if [ -z \"$ndk\" ]\n-            then\n-                ndk=$CFG_ANDROID_CROSS_PATH\n-                eval \"CFG_${upper_snake_target}_NDK\"=$CFG_ANDROID_CROSS_PATH\n-                warn \"generic/default Android NDK option is deprecated (use --$i-ndk option instead)\"\n-            fi\n-\n-            # Perform a basic sanity check of the NDK\n-            for android_ndk_tool in \"$ndk/bin/$cmd_prefix-gcc\" \"$ndk/bin/$cmd_prefix-g++\" \"$ndk/bin/$cmd_prefix-ar\"\n-            do\n-                if [ ! -f $android_ndk_tool ]\n-                then\n-                    err \"NDK tool $android_ndk_tool not found (bad or missing --$i-ndk option?)\"\n-                fi\n-            done\n-            ;;\n-        *-unknown-nacl)\n-\t    if [ -z \"$CFG_NACL_CROSS_PATH\" ]\n-\t    then\n-\t\terr \"I need the NaCl SDK path! (use --nacl-cross-path)\"\n-\t    fi\n-\t    ;;\n-        arm-apple-darwin)\n-            if [ $CFG_OSTYPE != apple-darwin ]\n-            then\n-                err \"The iOS target is only supported on Mac OS X\"\n-            fi\n-            ;;\n-\n-        *-msvc)\n-            # There are three builds of cmake on windows: MSVC, MinGW and Cygwin\n-            # The Cygwin build does not have generators for Visual Studio, so\n-            # detect that here and error.\n-            if ! \"$CFG_CMAKE\" --help | sed -n '/^Generators/,$p' | grep 'Visual Studio' > /dev/null\n-            then\n-                err \"\n-\n-cmake does not support Visual Studio generators.\n-\n-This is likely due to it being an msys/cygwin build of cmake, \\\n-rather than the required windows version, built using MinGW \\\n-or Visual Studio.\n-\n-If you are building under msys2 try installing the mingw-w64-x86_64-cmake \\\n-package instead of cmake:\n-\n-$ pacman -R cmake && pacman -S mingw-w64-x86_64-cmake\n-\"\n-            fi\n-\n-            # Use the REG program to figure out where VS is installed\n-            # We need to figure out where cl.exe and link.exe are, so we do some\n-            # munging and some probing here. We also look for the default\n-            # INCLUDE and LIB variables for MSVC so we can set those in the\n-            # build system as well.\n-            install=$(cmd //c reg QUERY \\\n-                       'HKLM\\SOFTWARE\\Wow6432Node\\Microsoft\\VisualStudio\\14.0' \\\n-                       -v InstallDir)\n-            if [ -z \"$install\" ]; then\n-              install=$(cmd //c reg QUERY \\\n-                         'HKLM\\SOFTWARE\\Wow6432Node\\Microsoft\\VisualStudio\\12.0' \\\n-                         -v InstallDir)\n-            fi\n-            need_ok \"couldn't find visual studio install root\"\n-            CFG_MSVC_ROOT=$(echo \"$install\" | grep InstallDir | sed 's/.*REG_SZ[ ]*//')\n-            CFG_MSVC_ROOT=$(dirname \"$CFG_MSVC_ROOT\")\n-            CFG_MSVC_ROOT=$(dirname \"$CFG_MSVC_ROOT\")\n-            putvar CFG_MSVC_ROOT\n-\n-            case $i in\n-                x86_64-*)\n-                    bits=x86_64\n-                    msvc_part=amd64\n-                    ;;\n-                i*86-*)\n-                    bits=i386\n-                    msvc_part=\n-                    ;;\n-                *)\n-                    err \"can only target x86 targets for MSVC\"\n-                    ;;\n-            esac\n-            bindir=\"${CFG_MSVC_ROOT}/VC/bin\"\n-            if [ -n \"$msvc_part\" ]; then\n-                bindir=\"$bindir/$msvc_part\"\n-            fi\n-            eval CFG_MSVC_BINDIR_$bits=\"\\\"$bindir\\\"\"\n-            eval CFG_MSVC_CL_$bits=\"\\\"$bindir/cl.exe\\\"\"\n-            eval CFG_MSVC_LIB_$bits=\"\\\"$bindir/lib.exe\\\"\"\n-            eval CFG_MSVC_LINK_$bits=\"\\\"$bindir/link.exe\\\"\"\n-\n-            vcvarsall=\"${CFG_MSVC_ROOT}/VC/vcvarsall.bat\"\n-            include_path=$(cmd //V:ON //c \"$vcvarsall\" $msvc_part \\& echo !INCLUDE!)\n-            need_ok \"failed to learn about MSVC's INCLUDE\"\n-            lib_path=$(cmd //V:ON //c \"$vcvarsall\" $msvc_part \\& echo !LIB!)\n-            need_ok \"failed to learn about MSVC's LIB\"\n-\n-            eval CFG_MSVC_INCLUDE_PATH_${bits}=\"\\\"$include_path\\\"\"\n-            eval CFG_MSVC_LIB_PATH_${bits}=\"\\\"$lib_path\\\"\"\n-\n-            putvar CFG_MSVC_BINDIR_${bits}\n-            putvar CFG_MSVC_CL_${bits}\n-            putvar CFG_MSVC_LIB_${bits}\n-            putvar CFG_MSVC_LINK_${bits}\n-            putvar CFG_MSVC_INCLUDE_PATH_${bits}\n-            putvar CFG_MSVC_LIB_PATH_${bits}\n-            ;;\n-\n-        *)\n-            ;;\n-    esac\n-done\n-\n-if [ \"$CFG_OSTYPE\" = \"pc-windows-gnu\" ] || [ \"$CFG_OSTYPE\" = \"pc-windows-msvc\" ]\n-then\n-    # There are some MSYS python builds which will auto-translate\n-    # windows-style paths to MSYS-style paths in Python itself.\n-    # Unfortunately this breaks LLVM's build system as somewhere along\n-    # the line LLVM prints a path into a file from Python and then CMake\n-    # later tries to interpret that path. If Python prints a MSYS path\n-    # and CMake tries to use it as a Windows path, you're gonna have a\n-    # Bad Time.\n-    #\n-    # Consequently here we try to detect when that happens and print an\n-    # error if it does.\n-    if $CFG_PYTHON -c 'import sys; print sys.argv[1]' `pwd` | grep '^/' > /dev/null\n-    then\n-        err \"\n-\n-python is silently translating windows paths to MSYS paths \\\n-and the build will fail if this python is used.\n-\n-Either an official python install must be used or an \\\n-alternative python package in MinGW must be used.\n-\n-If you are building under msys2 try installing the mingw-w64-x86_64-python2 \\\n-package instead of python2:\n-\n-$ pacman -S mingw-w64-x86_64-python2\n-\"\n-    fi\n-fi\n-\n-if [ -n \"$CFG_PERF\" ]\n-then\n-    HAVE_PERF_LOGFD=`$CFG_PERF stat --log-fd 2>&1 | grep 'unknown option'`\n-    if [ -z \"$HAVE_PERF_LOGFD\" ];\n-    then\n-        CFG_PERF_WITH_LOGFD=1\n-        putvar CFG_PERF_WITH_LOGFD\n-    fi\n-fi\n-\n-if [ -n \"$CFG_DISABLE_RUSTBUILD\" ]; then\n-\n-  step_msg \"making directories\"\n-\n-  for i in \\\n-      doc doc/std doc/extra \\\n-      dl tmp dist\n-  do\n-      make_dir $i\n-  done\n-\n-  for t in $CFG_HOST\n-  do\n-      make_dir $t/llvm\n-  done\n-\n-  for t in $CFG_HOST\n-  do\n-      make_dir $t/rustllvm\n-  done\n-\n-  for t in $CFG_TARGET\n-  do\n-    make_dir $t/rt\n-    for s in 0 1 2 3\n-    do\n-      make_dir $t/rt/stage$s\n-      make_dir $t/rt/jemalloc\n-      make_dir $t/rt/compiler-rt\n-      for i in                                          \\\n-        isaac sync test \\\n-        arch/i386 arch/x86_64 arch/arm arch/aarch64 arch/mips arch/powerpc\n-      do\n-        make_dir $t/rt/stage$s/$i\n-      done\n-    done\n-  done\n-\n-  for h in $CFG_HOST\n-  do\n-      for t in $CFG_TARGET\n-      do\n-          # host bin dir stage0\n-          make_dir $h/stage0/bin\n-\n-          # host lib dir stage0\n-          make_dir $h/stage0/lib\n-\n-          # host test dir stage0\n-          make_dir $h/stage0/test\n-\n-          # target bin dir stage0\n-          make_dir $h/stage0/lib/rustlib/$t/bin\n-\n-          # target lib dir stage0\n-          make_dir $h/stage0/lib/rustlib/$t/lib\n-\n-          for i in 1 2 3\n-          do\n-              # host bin dir\n-              make_dir $h/stage$i/bin\n-\n-              # host lib dir\n-              make_dir $h/stage$i/$CFG_LIBDIR_RELATIVE\n-\n-              # host test dir\n-              make_dir $h/stage$i/test\n-\n-              # target bin dir\n-              make_dir $h/stage$i/$CFG_LIBDIR_RELATIVE/rustlib/$t/bin\n-\n-              # target lib dir\n-              make_dir $h/stage$i/$CFG_LIBDIR_RELATIVE/rustlib/$t/lib\n-          done\n-      done\n-\n-      make_dir $h/test/run-pass\n-      make_dir $h/test/run-pass-valgrind\n-      make_dir $h/test/run-pass-fulldeps\n-      make_dir $h/test/run-fail\n-      make_dir $h/test/run-fail-fulldeps\n-      make_dir $h/test/compile-fail\n-      make_dir $h/test/parse-fail\n-      make_dir $h/test/compile-fail-fulldeps\n-      make_dir $h/test/bench\n-      make_dir $h/test/perf\n-      make_dir $h/test/pretty\n-      make_dir $h/test/debuginfo-gdb\n-      make_dir $h/test/debuginfo-lldb\n-      make_dir $h/test/codegen\n-      make_dir $h/test/codegen-units\n-      make_dir $h/test/rustdoc\n-  done\n-\n-fi\n-\n-# Configure submodules\n-step_msg \"configuring submodules\"\n-\n-# Have to be in the top of src directory for this\n-if [ -z \"$CFG_DISABLE_MANAGE_SUBMODULES\" ] && [ -n \"$CFG_DISABLE_RUSTBUILD\" ]\n-then\n-    cd ${CFG_SRC_DIR}\n-\n-    msg \"git: submodule sync\"\n-    \"${CFG_GIT}\" submodule sync\n-\n-    msg \"git: submodule init\"\n-    \"${CFG_GIT}\" submodule init\n-\n-    # Disable submodules that we're not using\n-    if [ -n \"${CFG_LLVM_ROOT}\" ]; then\n-        msg \"git: submodule deinit src/llvm\"\n-        \"${CFG_GIT}\" submodule deinit src/llvm\n-    fi\n-    if [ -n \"${CFG_JEMALLOC_ROOT}\" ]; then\n-        msg \"git: submodule deinit src/jemalloc\"\n-        \"${CFG_GIT}\" submodule deinit src/jemalloc\n-    fi\n-\n-    msg \"git: submodule update\"\n-    \"${CFG_GIT}\" submodule update\n-    need_ok \"git failed\"\n-\n-    msg \"git: submodule foreach sync\"\n-    \"${CFG_GIT}\" submodule foreach --recursive 'if test -e .gitmodules; then git submodule sync; fi'\n-    need_ok \"git failed\"\n-\n-    msg \"git: submodule foreach update\"\n-    \"${CFG_GIT}\" submodule update --recursive\n-    need_ok \"git failed\"\n-\n-    # NB: this is just for the sake of getting the submodule SHA1 values\n-    # and status written into the build log.\n-    msg \"git: submodule status\"\n-    \"${CFG_GIT}\" submodule status --recursive\n-\n-    msg \"git: submodule clobber\"\n-    \"${CFG_GIT}\" submodule foreach --recursive git clean -dxf\n-    need_ok \"git failed\"\n-    \"${CFG_GIT}\" submodule foreach --recursive git checkout .\n-    need_ok \"git failed\"\n-\n-    cd ${CFG_BUILD_DIR}\n-fi\n-\n-# Do a sanity check that the submodule source exists. Because GitHub\n-# automatically publishes broken tarballs that can't be disabled, and\n-# people download them and try to use them.\n-if [ ! -e \"${CFG_SRC_DIR}/src/liblibc\" ]; then\n-    err \"some submodules are missing. Is this a broken tarball?\n-\n-If you downloaded this tarball from the GitHub release pages at\n-https://github.com/rust-lang/rust/releases,\n-then please delete it and instead download the source from\n-https://www.rust-lang.org/downloads.html\"\n-\n-fi\n-\n-# Configure llvm, only if necessary\n-step_msg \"looking at LLVM\"\n-CFG_LLVM_SRC_DIR=${CFG_SRC_DIR}src/llvm/\n-for t in $CFG_HOST\n-do\n-    do_reconfigure=1\n-    is_msvc=0\n-    case \"$t\" in\n-        (*-msvc)\n-        is_msvc=1\n-        ;;\n-    esac\n-\n-    if [ -z \"$CFG_DISABLE_RUSTBUILD\" ]\n-    then\n-        msg \"not configuring LLVM, rustbuild in use\"\n-        do_reconfigure=0\n-    elif [ -z \"$CFG_LLVM_ROOT\" ]\n-    then\n-        LLVM_BUILD_DIR=${CFG_BUILD_DIR}$t/llvm\n-        LLVM_INST_DIR=$LLVM_BUILD_DIR\n-        # For some weird reason the MSVC output dir is different than Unix\n-        if [ ${is_msvc} -ne 0 ]; then\n-            if [ -n \"$CFG_DISABLE_OPTIMIZE_LLVM\" ]\n-            then\n-                # Just use LLVM straight from its build directory to\n-                # avoid 'make install' time\n-                LLVM_INST_DIR=$LLVM_BUILD_DIR/Debug\n-            else\n-                LLVM_INST_DIR=$LLVM_BUILD_DIR/Release\n-            fi\n-        fi\n-    else\n-        msg \"not reconfiguring LLVM, external LLVM root\"\n-        # The user is using their own LLVM\n-        LLVM_BUILD_DIR=\n-        LLVM_INST_DIR=$CFG_LLVM_ROOT\n-        do_reconfigure=0\n-        # Check that LLVm FileCheck is available. Needed for the tests\n-        if [ -z \"$CFG_DISABLE_CODEGEN_TESTS\" ]; then\n-            need_cmd $LLVM_INST_DIR/bin/FileCheck\n-        fi\n-    fi\n-\n-    if [ ${do_reconfigure} -ne 0 ]\n-    then\n-    # because git is hilarious, it might have put the module index\n-    # in a couple places.\n-        index1=\"${CFG_SRC_DIR}.git/modules/src/llvm/index\"\n-        index2=\"${CFG_SRC_DIR}src/llvm/.git/index\"\n-        for index in ${index1} ${index2}\n-        do\n-            config_status=\"${LLVM_BUILD_DIR}/config.status\"\n-            if test -e ${index} -a \\\n-                    -e ${config_status} -a \\\n-                    ${config_status} -nt ${index}\n-            then\n-                msg \"not reconfiguring LLVM, config.status is fresh\"\n-                do_reconfigure=0\n-            fi\n-        done\n-    fi\n-\n-    # We need the generator later on for compiler-rt even if LLVM's not built\n-    if [ -n \"$CFG_NINJA\" ]\n-    then\n-        generator=\"Ninja\"\n-    elif [ ${is_msvc} -ne 0 ]\n-    then\n-        case \"$CFG_MSVC_ROOT\" in\n-            *14.0*)\n-                generator=\"Visual Studio 14 2015\"\n-                ;;\n-            *12.0*)\n-                generator=\"Visual Studio 12 2013\"\n-                ;;\n-            *)\n-                err \"can't determine generator for LLVM cmake\"\n-                ;;\n-        esac\n-        case \"$t\" in\n-            x86_64-*)\n-                generator=\"$generator Win64\"\n-                ;;\n-            i686-*)\n-                ;;\n-            *)\n-                err \"can only build LLVM for x86 platforms\"\n-                ;;\n-        esac\n-    else\n-        generator=\"Unix Makefiles\"\n-    fi\n-    CFG_CMAKE_GENERATOR=$generator\n-    putvar CFG_CMAKE_GENERATOR\n-\n-    msg \"configuring LLVM for $t\"\n-\n-    LLVM_CFLAGS_32=\"\"\n-    LLVM_CXXFLAGS_32=\"\"\n-    LLVM_LDFLAGS_32=\"\"\n-    LLVM_CFLAGS_64=\"\"\n-    LLVM_CXXFLAGS_64=\"\"\n-    LLVM_LDFLAGS_64=\"\"\n-\n-    case \"$CFG_CC\" in\n-        (\"ccache clang\")\n-            LLVM_CXX_32=\"ccache\"\n-            LLVM_CC_32=\"ccache\"\n-            LLVM_CXX_32_ARG1=\"clang++\"\n-            LLVM_CC_32_ARG1=\"clang\"\n-            LLVM_CFLAGS_32=\"-Qunused-arguments\"\n-            LLVM_CXXFLAGS_32=\"-Qunused-arguments\"\n-\n-            LLVM_CXX_64=\"ccache\"\n-            LLVM_CC_64=\"ccache\"\n-            LLVM_CXX_64_ARG1=\"clang++\"\n-            LLVM_CC_64_ARG1=\"clang\"\n-            LLVM_CFLAGS_64=\"-Qunused-arguments\"\n-            LLVM_CXXFLAGS_64=\"-Qunused-arguments\"\n-            ;;\n-        (\"clang\")\n-            LLVM_CXX_32=\"clang++\"\n-            LLVM_CC_32=\"clang\"\n-            LLVM_CFLAGS_32=\"-Qunused-arguments\"\n-            LLVM_CXXFLAGS_32=\"-Qunused-arguments\"\n-\n-            LLVM_CXX_64=\"clang++\"\n-            LLVM_CC_64=\"clang\"\n-            LLVM_CFLAGS_64=\"-Qunused-arguments\"\n-            LLVM_CXXFLAGS_64=\"-Qunused-arguments\"\n-            ;;\n-        (\"ccache gcc\")\n-            LLVM_CXX_32=\"ccache\"\n-            LLVM_CC_32=\"ccache\"\n-            LLVM_CXX_32_ARG1=\"g++\"\n-            LLVM_CC_32_ARG1=\"gcc\"\n-\n-            LLVM_CXX_64=\"ccache\"\n-            LLVM_CC_64=\"ccache\"\n-            LLVM_CXX_64_ARG1=\"g++\"\n-            LLVM_CC_64_ARG1=\"gcc\"\n-            ;;\n-        (\"gcc\")\n-            if [ -z \"$CFG_ENABLE_SCCACHE\" ]; then\n-                LLVM_CXX_32=\"g++\"\n-                LLVM_CC_32=\"gcc\"\n-\n-                LLVM_CXX_64=\"g++\"\n-                LLVM_CC_64=\"gcc\"\n-            else\n-                LLVM_CXX_32=\"sccache\"\n-                LLVM_CC_32=\"sccache\"\n-                LLVM_CXX_32_ARG1=\"g++\"\n-                LLVM_CC_32_ARG1=\"gcc\"\n-\n-                LLVM_CXX_64=\"sccache\"\n-                LLVM_CC_64=\"sccache\"\n-                LLVM_CXX_64_ARG1=\"g++\"\n-                LLVM_CC_64_ARG1=\"gcc\"\n-            fi\n-            ;;\n-\n-        (*)\n-            msg \"inferring LLVM_CXX/CC from CXX/CC = $CXX/$CC\"\n-            if [ -n \"$CFG_ENABLE_CCACHE\" ]\n-            then\n-                if [ -z \"$CFG_CCACHE\" ]\n-                then\n-                    err \"ccache requested but not found\"\n-                fi\n-\n-                LLVM_CXX_32=\"ccache\"\n-                LLVM_CC_32=\"ccache\"\n-                LLVM_CXX_32_ARG1=\"$CXX\"\n-                LLVM_CC_32_ARG1=\"$CC\"\n-\n-                LLVM_CXX_64=\"ccache\"\n-                LLVM_CC_64=\"ccache\"\n-                LLVM_CXX_64_ARG1=\"$CXX\"\n-                LLVM_CC_64_ARG1=\"$CC\"\n-            else\n-                LLVM_CXX_32=\"$CXX\"\n-                LLVM_CC_32=\"$CC\"\n-\n-                LLVM_CXX_64=\"$CXX\"\n-                LLVM_CC_64=\"$CC\"\n-            fi\n-\n-            ;;\n-    esac\n-\n-    case \"$CFG_CPUTYPE\" in\n-        (x86*)\n-            LLVM_CFLAGS_32=\"$LLVM_CFLAGS_32 -m32\"\n-            LLVM_CXXFLAGS_32=\"$LLVM_CXXFLAGS_32 -m32\"\n-            LLVM_LDFLAGS_32=\"$LLVM_LDFLAGS_32 -m32\"\n-            ;;\n-    esac\n-\n-    if echo $t | grep -q x86_64\n-    then\n-        LLVM_CXX=$LLVM_CXX_64\n-        LLVM_CC=$LLVM_CC_64\n-        LLVM_CXX_ARG1=$LLVM_CXX_64_ARG1\n-        LLVM_CC_ARG1=$LLVM_CC_64_ARG1\n-        LLVM_CFLAGS=$LLVM_CFLAGS_64\n-        LLVM_CXXFLAGS=$LLVM_CXXFLAGS_64\n-        LLVM_LDFLAGS=$LLVM_LDFLAGS_64\n-    else\n-        LLVM_CXX=$LLVM_CXX_32\n-        LLVM_CC=$LLVM_CC_32\n-        LLVM_CXX_ARG1=$LLVM_CXX_32_ARG1\n-        LLVM_CC_ARG1=$LLVM_CC_32_ARG1\n-        LLVM_CFLAGS=$LLVM_CFLAGS_32\n-        LLVM_CXXFLAGS=$LLVM_CXXFLAGS_32\n-        LLVM_LDFLAGS=$LLVM_LDFLAGS_32\n-    fi\n-\n-    if [ \"$CFG_USING_LIBCPP\" != \"0\" ]; then\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_LIBCXX=ON\"\n-    fi\n-\n-    # Turn off things we don't need\n-    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_INCLUDE_TESTS=OFF\"\n-    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_INCLUDE_EXAMPLES=OFF\"\n-    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_INCLUDE_DOCS=OFF\"\n-    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ZLIB=OFF\"\n-    CMAKE_ARGS=\"$CMAKE_ARGS -DWITH_POLY=OFF\"\n-    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_TERMINFO=OFF\"\n-    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_LIBEDIT=OFF\"\n-\n-    arch=\"$(echo \"$t\" | cut -d - -f 1)\"\n-\n-    if [ \"$arch\" = i686 ]; then\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_BUILD_32_BITS=ON\"\n-    fi\n-\n-    if [ \"$t\" != \"$CFG_BUILD\" ]; then\n-        # see http://llvm.org/docs/HowToCrossCompileLLVM.html\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_CROSSCOMPILING=True\"\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_TARGET_ARCH=$arch\"\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_TABLEGEN=$CFG_BUILD_DIR/$CFG_BUILD/llvm/bin/llvm-tblgen\"\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_DEFAULT_TARGET_TRIPLE=$t\"\n-    fi\n-\n-    # MSVC handles compiler business itself\n-    if [ ${is_msvc} -eq 0 ]; then\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_C_COMPILER=$LLVM_CC\"\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_CXX_COMPILER=$LLVM_CXX\"\n-        CMAKE_ARGS=\"$CMAKE_ARGS '-DCMAKE_C_FLAGS=$LLVM_CFLAGS'\"\n-        CMAKE_ARGS=\"$CMAKE_ARGS '-DCMAKE_CXX_FLAGS=$LLVM_CXXFLAGS'\"\n-        if [ -n \"$LLVM_CC_ARG1\" ]; then\n-            CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_C_COMPILER_ARG1=$LLVM_CC_ARG1\"\n-        fi\n-        if [ -n \"$LLVM_CXX_ARG1\" ]; then\n-            CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_CXX_COMPILER_ARG1=$LLVM_CXX_ARG1\"\n-        fi\n-        # FIXME: What about LDFLAGS?\n-    fi\n-\n-    if [ -n \"$CFG_DISABLE_OPTIMIZE_LLVM\" ]; then\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Debug\"\n-    elif [ -n \"$CFG_ENABLE_LLVM_RELEASE_DEBUGINFO\" ]; then\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=RelWithDebInfo\"\n-    else\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Release\"\n-    fi\n-    if [ -z \"$CFG_ENABLE_LLVM_ASSERTIONS\" ]\n-    then\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ASSERTIONS=OFF\"\n-    else\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ASSERTIONS=ON\"\n-    fi\n-\n-    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_TARGETS_TO_BUILD='X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc'\"\n-    CMAKE_ARGS=\"$CMAKE_ARGS -G '$CFG_CMAKE_GENERATOR'\"\n-    CMAKE_ARGS=\"$CMAKE_ARGS $CFG_LLVM_SRC_DIR\"\n-\n-    if [ ${do_reconfigure} -ne 0 ]\n-    then\n-        msg \"configuring LLVM for $t with cmake\"\n-\n-        msg \"configuring LLVM with:\"\n-        msg \"$CMAKE_ARGS\"\n-\n-        (cd $LLVM_BUILD_DIR && eval \"\\\"$CFG_CMAKE\\\"\" $CMAKE_ARGS)\n-        need_ok \"LLVM cmake configure failed\"\n-    fi\n-\n-    # Construct variables for LLVM build and install directories for\n-    # each target. These will be named\n-    # CFG_LLVM_BUILD_DIR_${target_triple} but all the hyphens in\n-    # target_triple will be converted to underscore, because bash\n-    # variables can't contain hyphens. The makefile will then have to\n-    # convert back.\n-    CFG_LLVM_BUILD_DIR=$(echo CFG_LLVM_BUILD_DIR_${t} | tr - _)\n-    CFG_LLVM_INST_DIR=$(echo CFG_LLVM_INST_DIR_${t} | tr - _)\n-    eval ${CFG_LLVM_BUILD_DIR}=\"'$LLVM_BUILD_DIR'\"\n-    eval ${CFG_LLVM_INST_DIR}=\"'$LLVM_INST_DIR'\"\n-done\n-\n-\n step_msg \"writing configuration\"\n \n putvar CFG_SRC_DIR\n@@ -1915,15 +1085,8 @@ do\n     putvar $CFG_LLVM_INST_DIR\n done\n \n-if [ -z \"$CFG_DISABLE_RUSTBUILD\" ]\n-then\n-    INPUT_MAKEFILE=src/bootstrap/mk/Makefile.in\n-else\n-    INPUT_MAKEFILE=Makefile.in\n-fi\n-\n msg\n-copy_if_changed ${CFG_SRC_DIR}${INPUT_MAKEFILE} ./Makefile\n+copy_if_changed ${CFG_SRC_DIR}src/bootstrap/mk/Makefile.in ./Makefile\n move_if_changed config.tmp config.mk\n rm -f config.tmp\n touch config.stamp\n@@ -1940,22 +1103,5 @@ else\n     X_PY=${CFG_SRC_DIR_RELATIVE}x.py\n fi\n \n-if [ -z \"$CFG_DISABLE_RUSTBUILD\" ]; then\n-    msg \"NOTE you have now configured rust to use a rewritten build system\"\n-    msg \"     called rustbuild, and as a result this may have bugs that \"\n-    msg \"     you did not see before. If you experience any issues you can\"\n-    msg \"     go back to the old build system with --disable-rustbuild and\"\n-    msg \"     please feel free to report any bugs!\"\n-    msg \"\"\n-    msg \"run \\`python ${X_PY} --help\\`\"\n-else\n-    warn \"the makefile-based build system is deprecated in favor of rustbuild\"\n-    msg \"\"\n-    msg \"It is recommended you avoid passing --disable-rustbuild to get your\"\n-    msg \"build working as the makefiles will be deleted on 2017-02-02. If you\"\n-    msg \"encounter bugs with rustbuild please file issues against rust-lang/rust\"\n-    msg \"\"\n-    msg \"run \\`make help\\`\"\n-fi\n-\n+msg \"run \\`python ${X_PY} --help\\`\"\n msg"}]}