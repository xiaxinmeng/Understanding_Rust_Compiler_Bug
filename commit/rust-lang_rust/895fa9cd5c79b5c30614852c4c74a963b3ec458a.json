{"sha": "895fa9cd5c79b5c30614852c4c74a963b3ec458a", "node_id": "C_kwDOAAsO6NoAKDg5NWZhOWNkNWM3OWI1YzMwNjE0ODUyYzRjNzRhOTYzYjNlYzQ1OGE", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-01-06T23:22:22Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-01-11T03:23:26Z"}, "message": "Extract functions for two closures\n\nThese closures were quite complex and part of a quite complex function.\nThe fact that they are closures makes mistakes likely when refactoring.\nFor example, earlier, I meant to use `resolved`, an argument of the\nclosure, but I instead typed `res`, which captured a local variable and\ncaused a subtle bug that led to a confusing test failure.\n\nExtracting them as functions makes the code easier to understand and\nrefactor.", "tree": {"sha": "3a0f5681923726c1a51fa87290946698fed2a6d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a0f5681923726c1a51fa87290946698fed2a6d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/895fa9cd5c79b5c30614852c4c74a963b3ec458a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/895fa9cd5c79b5c30614852c4c74a963b3ec458a", "html_url": "https://github.com/rust-lang/rust/commit/895fa9cd5c79b5c30614852c4c74a963b3ec458a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/895fa9cd5c79b5c30614852c4c74a963b3ec458a/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5f09f74d6dc0f52fd2c73fca0a9e5bb99eb756c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5f09f74d6dc0f52fd2c73fca0a9e5bb99eb756c", "html_url": "https://github.com/rust-lang/rust/commit/a5f09f74d6dc0f52fd2c73fca0a9e5bb99eb756c"}], "stats": {"total": 180, "additions": 107, "deletions": 73}, "files": [{"sha": "13b1d5b65a58a8ebcfbcefc2878c5e2b13985fa4", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 107, "deletions": 73, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/895fa9cd5c79b5c30614852c4c74a963b3ec458a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895fa9cd5c79b5c30614852c4c74a963b3ec458a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=895fa9cd5c79b5c30614852c4c74a963b3ec458a", "patch": "@@ -1305,79 +1305,9 @@ impl LinkCollector<'_, '_> {\n             }\n         }\n \n-        let report_mismatch = |specified: Disambiguator, resolved: Res| {\n-            // The resolved item did not match the disambiguator; give a better error than 'not found'\n-            let msg = format!(\"incompatible link kind for `{}`\", path_str);\n-            let callback = |diag: &mut DiagnosticBuilder<'_>, sp: Option<rustc_span::Span>| {\n-                let note = format!(\n-                    \"this link resolved to {} {}, which is not {} {}\",\n-                    resolved.article(),\n-                    resolved.descr(),\n-                    specified.article(),\n-                    specified.descr(),\n-                );\n-                if let Some(sp) = sp {\n-                    diag.span_label(sp, &note);\n-                } else {\n-                    diag.note(&note);\n-                }\n-                suggest_disambiguator(resolved, diag, path_str, &ori_link.link, sp);\n-            };\n-            report_diagnostic(self.cx.tcx, BROKEN_INTRA_DOC_LINKS, &msg, &diag_info, callback);\n-        };\n-\n-        let verify = |kind: DefKind, id: DefId| {\n-            let (kind, id) = if let Some(UrlFragment::Item(ItemFragment(_, id))) = fragment {\n-                (self.cx.tcx.def_kind(id), id)\n-            } else {\n-                (kind, id)\n-            };\n-            debug!(\"intra-doc link to {} resolved to {:?} (id: {:?})\", path_str, res, id);\n-\n-            // Disallow e.g. linking to enums with `struct@`\n-            debug!(\"saw kind {:?} with disambiguator {:?}\", kind, disambiguator);\n-            match (kind, disambiguator) {\n-                | (DefKind::Const | DefKind::ConstParam | DefKind::AssocConst | DefKind::AnonConst, Some(Disambiguator::Kind(DefKind::Const)))\n-                // NOTE: this allows 'method' to mean both normal functions and associated functions\n-                // This can't cause ambiguity because both are in the same namespace.\n-                | (DefKind::Fn | DefKind::AssocFn, Some(Disambiguator::Kind(DefKind::Fn)))\n-                // These are namespaces; allow anything in the namespace to match\n-                | (_, Some(Disambiguator::Namespace(_)))\n-                // If no disambiguator given, allow anything\n-                | (_, None)\n-                // All of these are valid, so do nothing\n-                => {}\n-                (actual, Some(Disambiguator::Kind(expected))) if actual == expected => {}\n-                (_, Some(specified @ Disambiguator::Kind(_) | specified @ Disambiguator::Primitive)) => {\n-                    report_mismatch(specified, Res::Def(kind, id));\n-                    return None;\n-                }\n-            }\n-\n-            // item can be non-local e.g. when using #[doc(primitive = \"pointer\")]\n-            if let Some((src_id, dst_id)) = id\n-                .as_local()\n-                // The `expect_def_id()` should be okay because `local_def_id_to_hir_id`\n-                // would presumably panic if a fake `DefIndex` were passed.\n-                .and_then(|dst_id| {\n-                    item.def_id.expect_def_id().as_local().map(|src_id| (src_id, dst_id))\n-                })\n-            {\n-                if self.cx.tcx.privacy_access_levels(()).is_exported(src_id)\n-                    && !self.cx.tcx.privacy_access_levels(()).is_exported(dst_id)\n-                {\n-                    privacy_error(self.cx, &diag_info, path_str);\n-                }\n-            }\n-\n-            Some(())\n-        };\n-\n         match res {\n             Res::Primitive(prim) => {\n                 if let Some(UrlFragment::Item(ItemFragment(_, id))) = fragment {\n-                    let kind = self.cx.tcx.def_kind(id);\n-\n                     // We're actually resolving an associated item of a primitive, so we need to\n                     // verify the disambiguator (if any) matches the type of the associated item.\n                     // This case should really follow the same flow as the `Res::Def` branch below,\n@@ -1386,7 +1316,16 @@ impl LinkCollector<'_, '_> {\n                     // doesn't allow statements like `use str::trim;`, making this a (hopefully)\n                     // valid omission. See https://github.com/rust-lang/rust/pull/80660#discussion_r551585677\n                     // for discussion on the matter.\n-                    verify(kind, id)?;\n+                    let kind = self.cx.tcx.def_kind(id);\n+                    self.verify_disambiguator(\n+                        path_str,\n+                        &ori_link,\n+                        kind,\n+                        id,\n+                        disambiguator,\n+                        item,\n+                        &diag_info,\n+                    )?;\n \n                     // FIXME: it would be nice to check that the feature gate was enabled in the original crate, not just ignore it altogether.\n                     // However I'm not sure how to check that across crates.\n@@ -1400,7 +1339,9 @@ impl LinkCollector<'_, '_> {\n                     match disambiguator {\n                         Some(Disambiguator::Primitive | Disambiguator::Namespace(_)) | None => {}\n                         Some(other) => {\n-                            report_mismatch(other, res);\n+                            self.report_disambiguator_mismatch(\n+                                path_str, &ori_link, other, res, &diag_info,\n+                            );\n                             return None;\n                         }\n                     }\n@@ -1414,13 +1355,106 @@ impl LinkCollector<'_, '_> {\n                 })\n             }\n             Res::Def(kind, id) => {\n-                verify(kind, id)?;\n+                let (kind_for_dis, id_for_dis) =\n+                    if let Some(UrlFragment::Item(ItemFragment(_, id))) = fragment {\n+                        (self.cx.tcx.def_kind(id), id)\n+                    } else {\n+                        (kind, id)\n+                    };\n+                self.verify_disambiguator(\n+                    path_str,\n+                    &ori_link,\n+                    kind_for_dis,\n+                    id_for_dis,\n+                    disambiguator,\n+                    item,\n+                    &diag_info,\n+                )?;\n                 let id = clean::register_res(self.cx, rustc_hir::def::Res::Def(kind, id));\n                 Some(ItemLink { link: ori_link.link, link_text, did: id, fragment })\n             }\n         }\n     }\n \n+    fn verify_disambiguator(\n+        &self,\n+        path_str: &str,\n+        ori_link: &MarkdownLink,\n+        kind: DefKind,\n+        id: DefId,\n+        disambiguator: Option<Disambiguator>,\n+        item: &Item,\n+        diag_info: &DiagnosticInfo<'_>,\n+    ) -> Option<()> {\n+        debug!(\"intra-doc link to {} resolved to {:?}\", path_str, (kind, id));\n+\n+        // Disallow e.g. linking to enums with `struct@`\n+        debug!(\"saw kind {:?} with disambiguator {:?}\", kind, disambiguator);\n+        match (kind, disambiguator) {\n+                | (DefKind::Const | DefKind::ConstParam | DefKind::AssocConst | DefKind::AnonConst, Some(Disambiguator::Kind(DefKind::Const)))\n+                // NOTE: this allows 'method' to mean both normal functions and associated functions\n+                // This can't cause ambiguity because both are in the same namespace.\n+                | (DefKind::Fn | DefKind::AssocFn, Some(Disambiguator::Kind(DefKind::Fn)))\n+                // These are namespaces; allow anything in the namespace to match\n+                | (_, Some(Disambiguator::Namespace(_)))\n+                // If no disambiguator given, allow anything\n+                | (_, None)\n+                // All of these are valid, so do nothing\n+                => {}\n+                (actual, Some(Disambiguator::Kind(expected))) if actual == expected => {}\n+                (_, Some(specified @ Disambiguator::Kind(_) | specified @ Disambiguator::Primitive)) => {\n+                    self.report_disambiguator_mismatch(path_str,ori_link,specified, Res::Def(kind, id),diag_info);\n+                    return None;\n+                }\n+            }\n+\n+        // item can be non-local e.g. when using #[doc(primitive = \"pointer\")]\n+        if let Some((src_id, dst_id)) = id\n+            .as_local()\n+            // The `expect_def_id()` should be okay because `local_def_id_to_hir_id`\n+            // would presumably panic if a fake `DefIndex` were passed.\n+            .and_then(|dst_id| {\n+                item.def_id.expect_def_id().as_local().map(|src_id| (src_id, dst_id))\n+            })\n+        {\n+            if self.cx.tcx.privacy_access_levels(()).is_exported(src_id)\n+                && !self.cx.tcx.privacy_access_levels(()).is_exported(dst_id)\n+            {\n+                privacy_error(self.cx, diag_info, path_str);\n+            }\n+        }\n+\n+        Some(())\n+    }\n+\n+    fn report_disambiguator_mismatch(\n+        &self,\n+        path_str: &str,\n+        ori_link: &MarkdownLink,\n+        specified: Disambiguator,\n+        resolved: Res,\n+        diag_info: &DiagnosticInfo<'_>,\n+    ) {\n+        // The resolved item did not match the disambiguator; give a better error than 'not found'\n+        let msg = format!(\"incompatible link kind for `{}`\", path_str);\n+        let callback = |diag: &mut DiagnosticBuilder<'_>, sp: Option<rustc_span::Span>| {\n+            let note = format!(\n+                \"this link resolved to {} {}, which is not {} {}\",\n+                resolved.article(),\n+                resolved.descr(),\n+                specified.article(),\n+                specified.descr(),\n+            );\n+            if let Some(sp) = sp {\n+                diag.span_label(sp, &note);\n+            } else {\n+                diag.note(&note);\n+            }\n+            suggest_disambiguator(resolved, diag, path_str, &ori_link.link, sp);\n+        };\n+        report_diagnostic(self.cx.tcx, BROKEN_INTRA_DOC_LINKS, &msg, &diag_info, callback);\n+    }\n+\n     fn report_rawptr_assoc_feature_gate(&self, dox: &str, ori_link: &MarkdownLink, item: &Item) {\n         let span =\n             super::source_span_for_markdown_range(self.cx.tcx, dox, &ori_link.range, &item.attrs)"}]}