{"sha": "3cf6f0db1ab61ed33c585b156a0d5c41279f0810", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjZjZmMGRiMWFiNjFlZDMzYzU4NWIxNTZhMGQ1YzQxMjc5ZjA4MTA=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-08-14T12:31:12Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-08-29T10:27:20Z"}, "message": "bootstrap: Link LLVM tools dynamically in order to save time in ThinLTO builds.", "tree": {"sha": "c0dee5c185faf4f010d7458a32bcfda9db92f18e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0dee5c185faf4f010d7458a32bcfda9db92f18e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cf6f0db1ab61ed33c585b156a0d5c41279f0810", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cf6f0db1ab61ed33c585b156a0d5c41279f0810", "html_url": "https://github.com/rust-lang/rust/commit/3cf6f0db1ab61ed33c585b156a0d5c41279f0810", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cf6f0db1ab61ed33c585b156a0d5c41279f0810/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4b8451ad9e2a30792f17f913ee4d1b0513d199c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4b8451ad9e2a30792f17f913ee4d1b0513d199c", "html_url": "https://github.com/rust-lang/rust/commit/f4b8451ad9e2a30792f17f913ee4d1b0513d199c"}], "stats": {"total": 62, "additions": 46, "deletions": 16}, "files": [{"sha": "c6ff63ad71b80b217ae902aaea4a6100e4a32c0d", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3cf6f0db1ab61ed33c585b156a0d5c41279f0810/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf6f0db1ab61ed33c585b156a0d5c41279f0810/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=3cf6f0db1ab61ed33c585b156a0d5c41279f0810", "patch": "@@ -1885,6 +1885,34 @@ impl Step for HashSign {\n     }\n }\n \n+// Maybe add libLLVM.so to the lib-dir. It will only have been built if\n+// LLVM tools are linked dynamically.\n+// Note: This function does no yet support Windows but we also don't support\n+//       linking LLVM tools dynamically on Windows yet.\n+fn maybe_install_llvm_dylib(builder: &Builder,\n+                            target: Interned<String>,\n+                            image: &Path) {\n+    let src_libdir = builder\n+        .llvm_out(target)\n+        .join(\"lib\");\n+\n+    // Usually libLLVM.so is a symlink to something like libLLVM-6.0.so.\n+    // Since tools link to the latter rather than the former, we have to\n+    // follow the symlink to find out what to distribute.\n+    let llvm_dylib_path = src_libdir.join(\"libLLVM.so\");\n+    if llvm_dylib_path.exists() {\n+        let llvm_dylib_path = llvm_dylib_path.canonicalize().unwrap_or_else(|e| {\n+            panic!(\"dist: Error calling canonicalize path `{}`: {}\",\n+                   llvm_dylib_path.display(), e);\n+        });\n+\n+        let dst_libdir = image.join(\"lib\");\n+        t!(fs::create_dir_all(&dst_libdir));\n+\n+        builder.install(&llvm_dylib_path, &dst_libdir, 0o644);\n+    }\n+}\n+\n #[derive(Clone, Debug, Eq, Hash, PartialEq)]\n pub struct LlvmTools {\n     pub stage: u32,\n@@ -1929,18 +1957,18 @@ impl Step for LlvmTools {\n         drop(fs::remove_dir_all(&image));\n \n         // Prepare the image directory\n-        let bindir = builder\n+        let src_bindir = builder\n             .llvm_out(target)\n             .join(\"bin\");\n-        let dst = image.join(\"lib/rustlib\")\n-            .join(target)\n-            .join(\"bin\");\n-        t!(fs::create_dir_all(&dst));\n+        let dst_bindir = image.join(\"bin\");\n+        t!(fs::create_dir_all(&dst_bindir));\n         for tool in LLVM_TOOLS {\n-            let exe = bindir.join(exe(tool, &target));\n-            builder.install(&exe, &dst, 0o755);\n+            let exe = src_bindir.join(exe(tool, &target));\n+            builder.install(&exe, &dst_bindir, 0o755);\n         }\n \n+        maybe_install_llvm_dylib(builder, target, &image);\n+\n         // Prepare the overlay\n         let overlay = tmp.join(\"llvm-tools-overlay\");\n         drop(fs::remove_dir_all(&overlay));\n@@ -2025,7 +2053,6 @@ impl Step for Lldb {\n         let dst = image.join(\"lib\");\n         t!(fs::create_dir_all(&dst));\n         for entry in t!(fs::read_dir(&libdir)) {\n-            // let entry = t!(entry);\n             let entry = entry.unwrap();\n             if let Ok(name) = entry.file_name().into_string() {\n                 if name.starts_with(\"liblldb.\") && !name.ends_with(\".a\") {\n@@ -2060,6 +2087,9 @@ impl Step for Lldb {\n             }\n         }\n \n+        // Copy libLLVM.so to the lib dir as well, if needed.\n+        maybe_install_llvm_dylib(builder, target, &image);\n+\n         // Prepare the overlay\n         let overlay = tmp.join(\"lldb-overlay\");\n         drop(fs::remove_dir_all(&overlay));"}, {"sha": "b6a89e1c18fab7763ee7ee00d81c9d7deba68240", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf6f0db1ab61ed33c585b156a0d5c41279f0810/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf6f0db1ab61ed33c585b156a0d5c41279f0810/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=3cf6f0db1ab61ed33c585b156a0d5c41279f0810", "patch": "@@ -1025,6 +1025,10 @@ impl Build {\n         self.rust_version()\n     }\n \n+    fn llvm_link_tools_dynamically(&self, target: Interned<String>) -> bool {\n+        (target.contains(\"linux-gnu\") || target.contains(\"apple-darwin\"))\n+    }\n+\n     /// Returns the `version` string associated with this compiler for Rust\n     /// itself.\n     ///"}, {"sha": "c28b467df5093138f547c3f52f668424332da755", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3cf6f0db1ab61ed33c585b156a0d5c41279f0810/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf6f0db1ab61ed33c585b156a0d5c41279f0810/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=3cf6f0db1ab61ed33c585b156a0d5c41279f0810", "patch": "@@ -171,14 +171,10 @@ impl Step for Llvm {\n \n         // This setting makes the LLVM tools link to the dynamic LLVM library,\n         // which saves both memory during parallel links and overall disk space\n-        // for the tools.  We don't distribute any of those tools, so this is\n-        // just a local concern.  However, it doesn't work well everywhere.\n-        //\n-        // If we are shipping llvm tools then we statically link them LLVM\n-        if (target.contains(\"linux-gnu\") || target.contains(\"apple-darwin\")) &&\n-            !builder.config.llvm_tools_enabled &&\n-            !want_lldb {\n-                cfg.define(\"LLVM_LINK_LLVM_DYLIB\", \"ON\");\n+        // for the tools. We don't do this on every platform as it doesn't work\n+        // equally well everywhere.\n+        if builder.llvm_link_tools_dynamically(target) && !emscripten {\n+            cfg.define(\"LLVM_LINK_LLVM_DYLIB\", \"ON\");\n         }\n \n         // For distribution we want the LLVM tools to be *statically* linked to libstdc++"}]}