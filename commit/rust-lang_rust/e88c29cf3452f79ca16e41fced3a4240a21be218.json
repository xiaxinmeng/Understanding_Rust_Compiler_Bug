{"sha": "e88c29cf3452f79ca16e41fced3a4240a21be218", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4OGMyOWNmMzQ1MmY3OWNhMTZlNDFmY2VkM2E0MjQwYTIxYmUyMTg=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-07-04T17:32:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-07-04T17:32:09Z"}, "message": "Merge pull request #1860 from Vurich/master\n\nAllow cargo-clippy to work in subdirectories", "tree": {"sha": "75b4f52dfb75117feaed3ff4cf88871a7a934a4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75b4f52dfb75117feaed3ff4cf88871a7a934a4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e88c29cf3452f79ca16e41fced3a4240a21be218", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e88c29cf3452f79ca16e41fced3a4240a21be218", "html_url": "https://github.com/rust-lang/rust/commit/e88c29cf3452f79ca16e41fced3a4240a21be218", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e88c29cf3452f79ca16e41fced3a4240a21be218/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1788f7bcdecb3454868bd1715c019a467545da93", "url": "https://api.github.com/repos/rust-lang/rust/commits/1788f7bcdecb3454868bd1715c019a467545da93", "html_url": "https://github.com/rust-lang/rust/commit/1788f7bcdecb3454868bd1715c019a467545da93"}, {"sha": "01bb0f9e51711248914ce78ed9f353c93c80c6b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/01bb0f9e51711248914ce78ed9f353c93c80c6b8", "html_url": "https://github.com/rust-lang/rust/commit/01bb0f9e51711248914ce78ed9f353c93c80c6b8"}], "stats": {"total": 58, "additions": 43, "deletions": 15}, "files": [{"sha": "82c87b737c0374fd10627c41119d838bebb443be", "filename": "src/main.rs", "status": "modified", "additions": 43, "deletions": 15, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e88c29cf3452f79ca16e41fced3a4240a21be218/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88c29cf3452f79ca16e41fced3a4240a21be218/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=e88c29cf3452f79ca16e41fced3a4240a21be218", "patch": "@@ -158,6 +158,12 @@ fn show_version() {\n     println!(\"{}\", env!(\"CARGO_PKG_VERSION\"));\n }\n \n+// FIXME: false positive for needless_lifetimes\n+#[allow(needless_lifetimes)]\n+fn has_prefix<'a, T: PartialEq, I: Iterator<Item = &'a T>>(v: &'a [T], itr: I) -> bool {\n+    v.iter().zip(itr).all(|(a, b)| a == b)\n+}\n+\n pub fn main() {\n     use std::env;\n \n@@ -192,26 +198,48 @@ pub fn main() {\n \n         let manifest_path = manifest_path_arg.map(|arg| PathBuf::from(Path::new(&arg[\"--manifest-path=\".len()..])));\n \n-        let current_dir = std::env::current_dir();\n+        let package_index = {\n+                let mut iterator = metadata.packages.iter();\n \n-        let package_index = metadata\n-            .packages\n-            .iter()\n-            .position(|package| {\n-                let package_manifest_path = Path::new(&package.manifest_path);\n                 if let Some(ref manifest_path) = manifest_path {\n-                    package_manifest_path == manifest_path\n+                    iterator.position(|package| {\n+                        let package_manifest_path = Path::new(&package.manifest_path);\n+                        package_manifest_path == manifest_path\n+                    })\n                 } else {\n-                    let current_dir = current_dir\n-                        .as_ref()\n-                        .expect(\"could not read current directory\");\n-                    let package_manifest_directory = package_manifest_path\n-                        .parent()\n-                        .expect(\"could not find parent directory of package manifest\");\n-                    package_manifest_directory == current_dir\n+                    let current_dir = std::env::current_dir()\n+                        .expect(\"could not read current directory\")\n+                        .canonicalize()\n+                        .expect(\"current directory cannot be canonicalized\");\n+                    let current_dir_components = current_dir.components().collect::<Vec<_>>();\n+\n+                    // This gets the most-recent parent (the one that takes the fewest `cd ..`s to\n+                    // reach).\n+                    iterator\n+                        .enumerate()\n+                        .filter_map(|(i, package)| {\n+                            let package_manifest_path = Path::new(&package.manifest_path);\n+                            let canonical_path = package_manifest_path\n+                                .parent()\n+                                .expect(\"could not find parent directory of package manifest\")\n+                                .canonicalize()\n+                                .expect(\"package directory cannot be canonicalized\");\n+\n+                            // TODO: We can do this in `O(1)` by combining the `len` and the\n+                            //       iteration.\n+                            let components = canonical_path.components().collect::<Vec<_>>();\n+                            if has_prefix(&current_dir_components, components.iter()) {\n+                                Some((i, components.len()))\n+                            } else {\n+                                None\n+                            }\n+                        })\n+                        .max_by_key(|&(_, length)| length)\n+                        .map(|(i, _)| i)\n                 }\n-            })\n+            }\n             .expect(\"could not find matching package\");\n+\n         let package = metadata.packages.remove(package_index);\n         for target in package.targets {\n             let args = std::env::args().skip(2);"}]}