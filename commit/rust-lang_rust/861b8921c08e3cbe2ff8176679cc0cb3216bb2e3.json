{"sha": "861b8921c08e3cbe2ff8176679cc0cb3216bb2e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2MWI4OTIxYzA4ZTNjYmUyZmY4MTc2Njc5Y2MwY2IzMjE2YmIyZTM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-10-09T12:48:45Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-10-12T19:32:36Z"}, "message": "Clean up rustdoc HTML tags check pass", "tree": {"sha": "2f1198a325c7a9e6789573ef319a302ca4099232", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f1198a325c7a9e6789573ef319a302ca4099232"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/861b8921c08e3cbe2ff8176679cc0cb3216bb2e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/861b8921c08e3cbe2ff8176679cc0cb3216bb2e3", "html_url": "https://github.com/rust-lang/rust/commit/861b8921c08e3cbe2ff8176679cc0cb3216bb2e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/861b8921c08e3cbe2ff8176679cc0cb3216bb2e3/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e022fc2b8eecbc16c090a99efbbd262c37ec962", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e022fc2b8eecbc16c090a99efbbd262c37ec962", "html_url": "https://github.com/rust-lang/rust/commit/0e022fc2b8eecbc16c090a99efbbd262c37ec962"}], "stats": {"total": 122, "additions": 68, "deletions": 54}, "files": [{"sha": "872543d918cfbd848997d6e8a0b365799bbaa01b", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 68, "deletions": 54, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/861b8921c08e3cbe2ff8176679cc0cb3216bb2e3/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861b8921c08e3cbe2ff8176679cc0cb3216bb2e3/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=861b8921c08e3cbe2ff8176679cc0cb3216bb2e3", "patch": "@@ -4,6 +4,8 @@ use crate::core::DocContext;\n use crate::fold::DocFolder;\n use crate::html::markdown::opts;\n use core::ops::Range;\n+use std::iter::Peekable;\n+use std::str::CharIndices;\n use pulldown_cmark::{Event, Parser};\n use rustc_feature::UnstableFeatures;\n use rustc_session::lint;\n@@ -75,71 +77,83 @@ fn drop_tag(\n     }\n }\n \n-fn extract_tag(\n+fn extract_html_tag(\n     tags: &mut Vec<(String, Range<usize>)>,\n     text: &str,\n-    range: Range<usize>,\n+    range: &Range<usize>,\n+    start_pos: usize,\n+    iter: &mut Peekable<CharIndices<'_>>,\n     f: &impl Fn(&str, &Range<usize>),\n ) {\n-    let mut iter = text.char_indices().peekable();\n+    let mut tag_name = String::new();\n+    let mut is_closing = false;\n+    let mut prev_pos = start_pos;\n \n-    while let Some((start_pos, c)) = iter.next() {\n-        if c == '<' {\n-            let mut tag_name = String::new();\n-            let mut is_closing = false;\n-            let mut prev_pos = start_pos;\n-            loop {\n-                let (pos, c) = match iter.peek() {\n-                    Some((pos, c)) => (*pos, *c),\n-                    // In case we reached the of the doc comment, we want to check that it's an\n-                    // unclosed HTML tag. For example \"/// <h3\".\n-                    None => (prev_pos, '\\0'),\n-                };\n-                prev_pos = pos;\n-                // Checking if this is a closing tag (like `</a>` for `<a>`).\n-                if c == '/' && tag_name.is_empty() {\n-                    is_closing = true;\n-                } else if c.is_ascii_alphanumeric() {\n-                    tag_name.push(c);\n-                } else {\n-                    if !tag_name.is_empty() {\n-                        let mut r =\n-                            Range { start: range.start + start_pos, end: range.start + pos };\n-                        if c == '>' {\n-                            // In case we have a tag without attribute, we can consider the span to\n-                            // refer to it fully.\n-                            r.end += 1;\n+    loop {\n+        let (pos, c) = match iter.peek() {\n+            Some((pos, c)) => (*pos, *c),\n+            // In case we reached the of the doc comment, we want to check that it's an\n+            // unclosed HTML tag. For example \"/// <h3\".\n+            None => (prev_pos, '\\0'),\n+        };\n+        prev_pos = pos;\n+        // Checking if this is a closing tag (like `</a>` for `<a>`).\n+        if c == '/' && tag_name.is_empty() {\n+            is_closing = true;\n+        } else if c.is_ascii_alphanumeric() {\n+            tag_name.push(c);\n+        } else {\n+            if !tag_name.is_empty() {\n+                let mut r =\n+                    Range { start: range.start + start_pos, end: range.start + pos };\n+                if c == '>' {\n+                    // In case we have a tag without attribute, we can consider the span to\n+                    // refer to it fully.\n+                    r.end += 1;\n+                }\n+                if is_closing {\n+                    // In case we have \"</div >\" or even \"</div         >\".\n+                    if c != '>' {\n+                        if !c.is_whitespace() {\n+                            // It seems like it's not a valid HTML tag.\n+                            break;\n                         }\n-                        if is_closing {\n-                            // In case we have \"</div >\" or even \"</div         >\".\n-                            if c != '>' {\n-                                if !c.is_whitespace() {\n-                                    // It seems like it's not a valid HTML tag.\n-                                    break;\n-                                }\n-                                let mut found = false;\n-                                for (new_pos, c) in text[pos..].char_indices() {\n-                                    if !c.is_whitespace() {\n-                                        if c == '>' {\n-                                            r.end = range.start + new_pos + 1;\n-                                            found = true;\n-                                        }\n-                                        break;\n-                                    }\n-                                }\n-                                if !found {\n-                                    break;\n+                        let mut found = false;\n+                        for (new_pos, c) in text[pos..].char_indices() {\n+                            if !c.is_whitespace() {\n+                                if c == '>' {\n+                                    r.end = range.start + new_pos + 1;\n+                                    found = true;\n                                 }\n+                                break;\n                             }\n-                            drop_tag(tags, tag_name, r, f);\n-                        } else {\n-                            tags.push((tag_name, r));\n+                        }\n+                        if !found {\n+                            break;\n                         }\n                     }\n-                    break;\n+                    drop_tag(tags, tag_name, r, f);\n+                } else {\n+                    tags.push((tag_name, r));\n                 }\n-                iter.next();\n             }\n+            break;\n+        }\n+        iter.next();\n+    }\n+}\n+\n+fn extract_tags(\n+    tags: &mut Vec<(String, Range<usize>)>,\n+    text: &str,\n+    range: Range<usize>,\n+    f: &impl Fn(&str, &Range<usize>),\n+) {\n+    let mut iter = text.char_indices().peekable();\n+\n+    while let Some((start_pos, c)) = iter.next() {\n+        if c == '<' {\n+            extract_html_tag(tags, text, &range, start_pos, &mut iter, f);\n         }\n     }\n }\n@@ -172,7 +186,7 @@ impl<'a, 'tcx> DocFolder for InvalidHtmlTagsLinter<'a, 'tcx> {\n \n             for (event, range) in p {\n                 match event {\n-                    Event::Html(text) => extract_tag(&mut tags, &text, range, &report_diag),\n+                    Event::Html(text) => extract_tags(&mut tags, &text, range, &report_diag),\n                     _ => {}\n                 }\n             }"}]}