{"sha": "19c69082f5b0e5b44fe660b6bdd73ea8ac60b6b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5YzY5MDgyZjViMGU1YjQ0ZmU2NjBiNmJkZDczZWE4YWM2MGI2YjA=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-05T08:51:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-05T08:51:20Z"}, "message": "Rollup merge of #49432 - nabijaczleweli:master, r=michaelwoerister\n\nFlush executables to disk after linkage\n\nA problem caused by not doing so in Chrome has been reported [here](https://randomascii.wordpress.com/2018/02/25/compiler-bug-linker-bug-windows-kernel-bug/amp/).\n\n`File::sync_all()` calls `FlushFileBuffers()` down the line, causing potentially unflushed buffers on high I/O-load systems to flush and preventing nasty non-reproducible bugs.\n\nCloses #48545", "tree": {"sha": "60c656c9b362e0d82b711507c2c551abf77dfefa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60c656c9b362e0d82b711507c2c551abf77dfefa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19c69082f5b0e5b44fe660b6bdd73ea8ac60b6b0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaxeOICRBK7hj4Ov3rIwAAdHIIAHVT4dbUTdCNmqZBTbLdiMRR\nUtusLk8uBNp1etl34WxXLB30PfKVVA7GWvISeYBVNCnT/imLGMrF4ij74BPu23hR\nLkxismeVDj4hXMns5aQsMawlhl5dNs79pZaB6Z3BLg9wntcm8hpuEo+o6zmlrSmM\nh2FCLkaFl1GIF1FXGm+F7B4QmxzM+ZjLwuoYGDg6LA+UdBAEDdzpMvaHvfPZHUWG\nFqV83j9x7hTrpTOzQCJRpAaHvEnC1fYm3PesyqM62Fzy4q/JuMBlOehEwhfFIKhJ\n5NdS/mbxft5/4ylfXQlSTHqLNyQUHdKWK7lP8CirmyW2c6MCnQUVXV1bfxFk3B4=\n=z745\n-----END PGP SIGNATURE-----\n", "payload": "tree 60c656c9b362e0d82b711507c2c551abf77dfefa\nparent a70f84401286b58c5767ada0dfd63729640af0e9\nparent e1d3c471d75bbc4360eee17178ccb32dce348542\nauthor kennytm <kennytm@gmail.com> 1522918280 +0800\ncommitter GitHub <noreply@github.com> 1522918280 +0800\n\nRollup merge of #49432 - nabijaczleweli:master, r=michaelwoerister\n\nFlush executables to disk after linkage\n\nA problem caused by not doing so in Chrome has been reported [here](https://randomascii.wordpress.com/2018/02/25/compiler-bug-linker-bug-windows-kernel-bug/amp/).\n\n`File::sync_all()` calls `FlushFileBuffers()` down the line, causing potentially unflushed buffers on high I/O-load systems to flush and preventing nasty non-reproducible bugs.\n\nCloses #48545\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19c69082f5b0e5b44fe660b6bdd73ea8ac60b6b0", "html_url": "https://github.com/rust-lang/rust/commit/19c69082f5b0e5b44fe660b6bdd73ea8ac60b6b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19c69082f5b0e5b44fe660b6bdd73ea8ac60b6b0/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a70f84401286b58c5767ada0dfd63729640af0e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a70f84401286b58c5767ada0dfd63729640af0e9", "html_url": "https://github.com/rust-lang/rust/commit/a70f84401286b58c5767ada0dfd63729640af0e9"}, {"sha": "e1d3c471d75bbc4360eee17178ccb32dce348542", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d3c471d75bbc4360eee17178ccb32dce348542", "html_url": "https://github.com/rust-lang/rust/commit/e1d3c471d75bbc4360eee17178ccb32dce348542"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "4ffc71ba4703eb268d34619852877f5e47206d0e", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/19c69082f5b0e5b44fe660b6bdd73ea8ac60b6b0/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19c69082f5b0e5b44fe660b6bdd73ea8ac60b6b0/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=19c69082f5b0e5b44fe660b6bdd73ea8ac60b6b0", "patch": "@@ -694,7 +694,7 @@ fn link_natively(sess: &Session,\n     loop {\n         i += 1;\n         prog = time(sess, \"running linker\", || {\n-            exec_linker(sess, &mut cmd, tmpdir)\n+            exec_linker(sess, &mut cmd, out_filename, tmpdir)\n         });\n         let output = match prog {\n             Ok(ref output) => output,\n@@ -822,7 +822,7 @@ fn link_natively(sess: &Session,\n     }\n }\n \n-fn exec_linker(sess: &Session, cmd: &mut Command, tmpdir: &Path)\n+fn exec_linker(sess: &Session, cmd: &mut Command, out_filename: &Path, tmpdir: &Path)\n     -> io::Result<Output>\n {\n     // When attempting to spawn the linker we run a risk of blowing out the\n@@ -836,7 +836,11 @@ fn exec_linker(sess: &Session, cmd: &mut Command, tmpdir: &Path)\n     // there instead of looking at the command line.\n     if !cmd.very_likely_to_exceed_some_spawn_limit() {\n         match cmd.command().stdout(Stdio::piped()).stderr(Stdio::piped()).spawn() {\n-            Ok(child) => return child.wait_with_output(),\n+            Ok(child) => {\n+                let output = child.wait_with_output();\n+                flush_linked_file(&output, out_filename)?;\n+                return output;\n+            }\n             Err(ref e) if command_line_too_big(e) => {\n                 info!(\"command line to linker was too big: {}\", e);\n             }\n@@ -870,7 +874,37 @@ fn exec_linker(sess: &Session, cmd: &mut Command, tmpdir: &Path)\n     fs::write(&file, &bytes)?;\n     cmd2.arg(format!(\"@{}\", file.display()));\n     info!(\"invoking linker {:?}\", cmd2);\n-    return cmd2.output();\n+    let output = cmd2.output();\n+    flush_linked_file(&output, out_filename)?;\n+    return output;\n+\n+    #[cfg(unix)]\n+    fn flush_linked_file(_: &io::Result<Output>, _: &Path) -> io::Result<()> {\n+        Ok(())\n+    }\n+\n+    #[cfg(windows)]\n+    fn flush_linked_file(command_output: &io::Result<Output>, out_filename: &Path)\n+        -> io::Result<()>\n+    {\n+        // On Windows, under high I/O load, output buffers are sometimes not flushed,\n+        // even long after process exit, causing nasty, non-reproducible output bugs.\n+        //\n+        // File::sync_all() calls FlushFileBuffers() down the line, which solves the problem.\n+        //\n+        // \u0410 full writeup of the original Chrome bug can be found at\n+        // randomascii.wordpress.com/2018/02/25/compiler-bug-linker-bug-windows-kernel-bug/amp\n+\n+        if let &Ok(ref out) = command_output {\n+            if out.status.success() {\n+                if let Ok(of) = fs::OpenOptions::new().write(true).open(out_filename) {\n+                    of.sync_all()?;\n+                }\n+            }\n+        }\n+\n+        Ok(())\n+    }\n \n     #[cfg(unix)]\n     fn command_line_too_big(err: &io::Error) -> bool {"}]}