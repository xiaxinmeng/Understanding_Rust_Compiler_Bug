{"sha": "05eae0823373415bb25063e3d0ccd99df52079b0", "node_id": "C_kwDOAAsO6NoAKDA1ZWFlMDgyMzM3MzQxNWJiMjUwNjNlM2QwY2NkOTlkZjUyMDc5YjA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-02T11:57:40Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-05-31T10:24:17Z"}, "message": "Remove const eval limit and implement an exponential backoff lint instead", "tree": {"sha": "271b91c6484039fd5305700b4e19a7e1d7bde995", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/271b91c6484039fd5305700b4e19a7e1d7bde995"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05eae0823373415bb25063e3d0ccd99df52079b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05eae0823373415bb25063e3d0ccd99df52079b0", "html_url": "https://github.com/rust-lang/rust/commit/05eae0823373415bb25063e3d0ccd99df52079b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05eae0823373415bb25063e3d0ccd99df52079b0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "578bcbc2b42191556c4438b80ba37fafa4193e82", "url": "https://api.github.com/repos/rust-lang/rust/commits/578bcbc2b42191556c4438b80ba37fafa4193e82", "html_url": "https://github.com/rust-lang/rust/commit/578bcbc2b42191556c4438b80ba37fafa4193e82"}], "stats": {"total": 586, "additions": 325, "deletions": 261}, "files": [{"sha": "917bd8295726b10923b4e4691b3b38091b2bacef", "filename": "compiler/rustc_const_eval/messages.ftl", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/compiler%2Frustc_const_eval%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/compiler%2Frustc_const_eval%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fmessages.ftl?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -10,6 +10,12 @@ const_eval_interior_mutable_data_refer =\n         This would make multiple uses of a constant to be able to see different values and allow circumventing\n         the `Send` and `Sync` requirements for shared mutable data, which is unsound.\n \n+const_eval_long_running =\n+    constant evaluation is taking a long time\n+    .note = this lint makes sure the compiler doesn't get stuck due to infinite loops in const eval.\n+        If your compilation actually takes a long time, you can safely allow the lint.\n+    .label = the const evaluator is currently interpreting this expression\n+    .help = the constant being evaluated\n const_eval_max_num_nodes_in_const = maximum number of nodes exceeded in constant {$global_const_id}\n \n const_eval_mut_deref ="}, {"sha": "e4d34b90018b82eed925a4176a1633478cd54b0f", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -103,7 +103,7 @@ pub(super) fn mk_eval_cx<'mir, 'tcx>(\n         tcx,\n         root_span,\n         param_env,\n-        CompileTimeInterpreter::new(tcx.const_eval_limit(), can_access_statics, CheckAlignment::No),\n+        CompileTimeInterpreter::new(can_access_statics, CheckAlignment::No),\n     )\n }\n \n@@ -306,7 +306,6 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n         // Statics (and promoteds inside statics) may access other statics, because unlike consts\n         // they do not have to behave \"as if\" they were evaluated at runtime.\n         CompileTimeInterpreter::new(\n-            tcx.const_eval_limit(),\n             /*can_access_statics:*/ is_static,\n             if tcx.sess.opts.unstable_opts.extra_const_ub_checks {\n                 CheckAlignment::Error"}, {"sha": "a8b6b98c96cbeba0913347263d7606ebd366215d", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 65, "deletions": 17, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -16,25 +16,36 @@ use std::fmt;\n use rustc_ast::Mutability;\n use rustc_hir::def_id::DefId;\n use rustc_middle::mir::AssertMessage;\n-use rustc_session::Limit;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_target::abi::{Align, Size};\n use rustc_target::spec::abi::Abi as CallAbi;\n \n+use crate::errors::{LongRunning, LongRunningWarn};\n use crate::interpret::{\n     self, compile_time_machine, AllocId, ConstAllocation, FnVal, Frame, ImmTy, InterpCx,\n     InterpResult, OpTy, PlaceTy, Pointer, Scalar,\n };\n \n use super::error::*;\n \n+/// When hitting this many interpreted terminators we emit a deny by default lint\n+/// that notfies the user that their constant takes a long time to evaluate. If that's\n+/// what they intended, they can just allow the lint.\n+const LINT_TERMINATOR_LIMIT: usize = 2_000_000;\n+/// The limit used by `-Z tiny-const-eval-limit`. This smaller limit is useful for internal\n+/// tests not needing to run 30s or more to show some behaviour.\n+const TINY_LINT_TERMINATOR_LIMIT: usize = 20;\n+/// After this many interpreted terminators, we start emitting progress indicators at every\n+/// power of two of interpreted terminators.\n+const PROGRESS_INDICATOR_START: usize = 4_000_000;\n+\n /// Extra machine state for CTFE, and the Machine instance\n pub struct CompileTimeInterpreter<'mir, 'tcx> {\n-    /// For now, the number of terminators that can be evaluated before we throw a resource\n-    /// exhaustion error.\n+    /// The number of terminators that have been evaluated.\n     ///\n-    /// Setting this to `0` disables the limit and allows the interpreter to run forever.\n-    pub(super) steps_remaining: usize,\n+    /// This is used to produce lints informing the user that the compiler is not stuck.\n+    /// Set to `usize::MAX` to never report anything.\n+    pub(super) num_evaluated_steps: usize,\n \n     /// The virtual call stack.\n     pub(super) stack: Vec<Frame<'mir, 'tcx, AllocId, ()>>,\n@@ -72,13 +83,9 @@ impl CheckAlignment {\n }\n \n impl<'mir, 'tcx> CompileTimeInterpreter<'mir, 'tcx> {\n-    pub(crate) fn new(\n-        const_eval_limit: Limit,\n-        can_access_statics: bool,\n-        check_alignment: CheckAlignment,\n-    ) -> Self {\n+    pub(crate) fn new(can_access_statics: bool, check_alignment: CheckAlignment) -> Self {\n         CompileTimeInterpreter {\n-            steps_remaining: const_eval_limit.0,\n+            num_evaluated_steps: 0,\n             stack: Vec::new(),\n             can_access_statics,\n             check_alignment,\n@@ -569,13 +576,54 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n \n     fn increment_const_eval_counter(ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n         // The step limit has already been hit in a previous call to `increment_const_eval_counter`.\n-        if ecx.machine.steps_remaining == 0 {\n-            return Ok(());\n-        }\n \n-        ecx.machine.steps_remaining -= 1;\n-        if ecx.machine.steps_remaining == 0 {\n-            throw_exhaust!(StepLimitReached)\n+        if let Some(new_steps) = ecx.machine.num_evaluated_steps.checked_add(1) {\n+            let (limit, start) = if ecx.tcx.sess.opts.unstable_opts.tiny_const_eval_limit {\n+                (TINY_LINT_TERMINATOR_LIMIT, TINY_LINT_TERMINATOR_LIMIT)\n+            } else {\n+                (LINT_TERMINATOR_LIMIT, PROGRESS_INDICATOR_START)\n+            };\n+\n+            ecx.machine.num_evaluated_steps = new_steps;\n+            // By default, we have a *deny* lint kicking in after some time\n+            // to ensure `loop {}` doesn't just go forever.\n+            // In case that lint got reduced, in particular for `--cap-lint` situations, we also\n+            // have a hard warning shown every now and then for really long executions.\n+            if new_steps == limit {\n+                // By default, we stop after a million steps, but the user can disable this lint\n+                // to be able to run until the heat death of the universe or power loss, whichever\n+                // comes first.\n+                let hir_id = ecx.best_lint_scope();\n+                let is_error = ecx\n+                    .tcx\n+                    .lint_level_at_node(\n+                        rustc_session::lint::builtin::LONG_RUNNING_CONST_EVAL,\n+                        hir_id,\n+                    )\n+                    .0\n+                    .is_error();\n+                let span = ecx.cur_span();\n+                ecx.tcx.emit_spanned_lint(\n+                    rustc_session::lint::builtin::LONG_RUNNING_CONST_EVAL,\n+                    hir_id,\n+                    span,\n+                    LongRunning { item_span: ecx.tcx.span },\n+                );\n+                // If this was a hard error, don't bother continuing evaluation.\n+                if is_error {\n+                    let guard = ecx\n+                        .tcx\n+                        .sess\n+                        .delay_span_bug(span, \"The deny lint should have already errored\");\n+                    throw_inval!(AlreadyReported(guard.into()));\n+                }\n+            } else if new_steps > start && new_steps.is_power_of_two() {\n+                // Only report after a certain number of terminators have been evaluated and the\n+                // current number of evaluated terminators is a power of 2. The latter gives us a cheap\n+                // way to implement exponential backoff.\n+                let span = ecx.cur_span();\n+                ecx.tcx.sess.emit_warning(LongRunningWarn { span, item_span: ecx.tcx.span });\n+            }\n         }\n \n         Ok(())"}, {"sha": "ad2e68e752d3710a2df452db86f3dd66f54b96a4", "filename": "compiler/rustc_const_eval/src/errors.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -1,5 +1,5 @@\n use rustc_hir::ConstContext;\n-use rustc_macros::Diagnostic;\n+use rustc_macros::{Diagnostic, LintDiagnostic};\n use rustc_span::Span;\n \n #[derive(Diagnostic)]\n@@ -194,3 +194,21 @@ pub(crate) struct InteriorMutabilityBorrow {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(LintDiagnostic)]\n+#[diag(const_eval_long_running)]\n+#[note]\n+pub struct LongRunning {\n+    #[help]\n+    pub item_span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(const_eval_long_running)]\n+pub struct LongRunningWarn {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    #[help]\n+    pub item_span: Span,\n+}"}, {"sha": "0a61dab8aac2c87e0021752c9fb95386179bc019", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -4,6 +4,7 @@ use std::mem;\n \n use either::{Either, Left, Right};\n \n+use hir::CRATE_HIR_ID;\n use rustc_hir::{self as hir, def_id::DefId, definitions::DefPathData};\n use rustc_index::IndexVec;\n use rustc_middle::mir;\n@@ -405,6 +406,15 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         self.stack().last().map_or(self.tcx.span, |f| f.current_span())\n     }\n \n+    #[inline(always)]\n+    /// Find the first stack frame that is within the current crate, if any, otherwise return the crate's HirId\n+    pub fn best_lint_scope(&self) -> hir::HirId {\n+        self.stack()\n+            .iter()\n+            .find_map(|frame| frame.body.source.def_id().as_local())\n+            .map_or(CRATE_HIR_ID, |def_id| self.tcx.hir().local_def_id_to_hir_id(def_id))\n+    }\n+\n     #[inline(always)]\n     pub(crate) fn stack(&self) -> &[Frame<'mir, 'tcx, M::Provenance, M::FrameExtra>] {\n         M::stack(self)"}, {"sha": "29063261adab6e3cad9e3ed385e71f0d991d920b", "filename": "compiler/rustc_const_eval/src/util/check_validity_requirement.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcheck_validity_requirement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcheck_validity_requirement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcheck_validity_requirement.rs?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -1,6 +1,5 @@\n use rustc_middle::ty::layout::{LayoutCx, LayoutError, LayoutOf, TyAndLayout, ValidityRequirement};\n use rustc_middle::ty::{ParamEnv, ParamEnvAnd, Ty, TyCtxt};\n-use rustc_session::Limit;\n use rustc_target::abi::{Abi, FieldsShape, Scalar, Variants};\n \n use crate::const_eval::{CheckAlignment, CompileTimeInterpreter};\n@@ -45,11 +44,8 @@ fn might_permit_raw_init_strict<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     kind: ValidityRequirement,\n ) -> Result<bool, LayoutError<'tcx>> {\n-    let machine = CompileTimeInterpreter::new(\n-        Limit::new(0),\n-        /*can_access_statics:*/ false,\n-        CheckAlignment::Error,\n-    );\n+    let machine =\n+        CompileTimeInterpreter::new(/*can_access_statics:*/ false, CheckAlignment::Error);\n \n     let mut cx = InterpCx::new(tcx, rustc_span::DUMMY_SP, ParamEnv::reveal_all(), machine);\n "}, {"sha": "96dc44ce185d83169cbbb0120541518d9d1a0a4b", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -351,8 +351,6 @@ declare_features! (\n     (active, const_async_blocks, \"1.53.0\", Some(85368), None),\n     /// Allows `const || {}` closures in const contexts.\n     (incomplete, const_closures, \"1.68.0\", Some(106003), None),\n-    /// Allows limiting the evaluation steps of const expressions\n-    (active, const_eval_limit, \"1.43.0\", Some(67217), None),\n     /// Allows the definition of `const extern fn` and `const unsafe extern fn`.\n     (active, const_extern_fn, \"1.40.0\", Some(64926), None),\n     /// Allows basic arithmetic on floating point types in a `const fn`."}, {"sha": "9be28c338f64b80c13956229b1ae3e6eb12a7266", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -355,10 +355,6 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Limits:\n     ungated!(recursion_limit, CrateLevel, template!(NameValueStr: \"N\"), FutureWarnFollowing),\n     ungated!(type_length_limit, CrateLevel, template!(NameValueStr: \"N\"), FutureWarnFollowing),\n-    gated!(\n-        const_eval_limit, CrateLevel, template!(NameValueStr: \"N\"), ErrorFollowing,\n-        const_eval_limit, experimental!(const_eval_limit)\n-    ),\n     gated!(\n         move_size_limit, CrateLevel, template!(NameValueStr: \"N\"), ErrorFollowing,\n         large_assignments, experimental!(move_size_limit)"}, {"sha": "ed5d76b861a4905cfd4c4691a2edb3d46ee4c104", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -59,8 +59,10 @@ declare_features! (\n     /// Allows comparing raw pointers during const eval.\n     (removed, const_compare_raw_pointers, \"1.46.0\", Some(53020), None,\n      Some(\"cannot be allowed in const eval in any meaningful way\")),\n+    /// Allows limiting the evaluation steps of const expressions\n+    (removed, const_eval_limit, \"1.43.0\", Some(67217), None, Some(\"removed the limit entirely\")),\n     /// Allows non-trivial generic constants which have to be manually propagated upwards.\n-     (removed, const_evaluatable_checked, \"1.48.0\", Some(76560), None, Some(\"renamed to `generic_const_exprs`\")),\n+    (removed, const_evaluatable_checked, \"1.48.0\", Some(76560), None, Some(\"renamed to `generic_const_exprs`\")),\n     /// Allows the definition of `const` functions with some advanced features.\n     (removed, const_fn, \"1.54.0\", Some(57563), None,\n      Some(\"split into finer-grained feature gates\")),"}, {"sha": "eb246c3f93eb04b114261f40d660aefc2c229ccb", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -3357,6 +3357,7 @@ declare_lint_pass! {\n         LARGE_ASSIGNMENTS,\n         LATE_BOUND_LIFETIME_ARGUMENTS,\n         LEGACY_DERIVE_HELPERS,\n+        LONG_RUNNING_CONST_EVAL,\n         LOSSY_PROVENANCE_CASTS,\n         MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS,\n         MACRO_USE_EXTERN_CRATE,\n@@ -3426,6 +3427,43 @@ declare_lint_pass! {\n     ]\n }\n \n+declare_lint! {\n+    /// The `long_running_const_eval` lint is emitted when const\n+    /// eval is running for a long time to ensure rustc terminates\n+    /// even if you accidentally wrote an infinite loop.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// const FOO: () = loop {};\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Loops allow const evaluation to compute arbitrary code, but may also\n+    /// cause infinite loops or just very long running computations.\n+    /// Users can enable long running computations by allowing the lint\n+    /// on individual constants or for entire crates.\n+    ///\n+    /// ### Unconditional warnings\n+    ///\n+    /// Note that regardless of whether the lint is allowed or set to warn,\n+    /// the compiler will issue warnings if constant evaluation runs significantly\n+    /// longer than this lint's limit. These warnings are also shown to downstream\n+    /// users from crates.io or similar registries. If you are above the lint's limit,\n+    /// both you and downstream users might be exposed to these warnings.\n+    /// They might also appear on compiler updates, as the compiler makes minor changes\n+    /// about how complexity is measured: staying below the limit ensures that there\n+    /// is enough room, and given that the lint is disabled for people who use your\n+    /// dependency it means you will be the only one to get the warning and can put\n+    /// out an update in your own time.\n+    pub LONG_RUNNING_CONST_EVAL,\n+    Deny,\n+    \"detects long const eval operations\"\n+}\n+\n declare_lint! {\n     /// The `unused_doc_comments` lint detects doc comments that aren't used\n     /// by `rustdoc`."}, {"sha": "d4f023958d6fda3cc505aa049e48d78dbffd19e1", "filename": "compiler/rustc_middle/src/middle/limits.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -1,8 +1,7 @@\n //! Registering limits:\n //! * recursion_limit,\n-//! * move_size_limit,\n-//! * type_length_limit, and\n-//! * const_eval_limit\n+//! * move_size_limit, and\n+//! * type_length_limit\n //!\n //! There are various parts of the compiler that must impose arbitrary limits\n //! on how deeply they recurse to prevent stack overflow. Users can override\n@@ -34,12 +33,6 @@ pub fn provide(providers: &mut Providers) {\n             sym::type_length_limit,\n             1048576,\n         ),\n-        const_eval_limit: get_limit(\n-            tcx.hir().krate_attrs(),\n-            tcx.sess,\n-            sym::const_eval_limit,\n-            2_000_000,\n-        ),\n     }\n }\n "}, {"sha": "357bcca44199003a271b89a3f15f065504cb399b", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -465,10 +465,6 @@ impl fmt::Display for UnsupportedOpInfo {\n pub enum ResourceExhaustionInfo {\n     /// The stack grew too big.\n     StackFrameLimitReached,\n-    /// The program ran for too long.\n-    ///\n-    /// The exact limit is set by the `const_eval_limit` attribute.\n-    StepLimitReached,\n     /// There is not enough memory (on the host) to perform an allocation.\n     MemoryExhausted,\n     /// The address space (of the target) is full.\n@@ -482,9 +478,6 @@ impl fmt::Display for ResourceExhaustionInfo {\n             StackFrameLimitReached => {\n                 write!(f, \"reached the configured maximum number of stack frames\")\n             }\n-            StepLimitReached => {\n-                write!(f, \"exceeded interpreter step limit (see `#[const_eval_limit]`)\")\n-            }\n             MemoryExhausted => {\n                 write!(f, \"tried to allocate more memory than available to compiler\")\n             }"}, {"sha": "b05e791211d10bb3e8c70aef9b93fe522a66e5b7", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -82,8 +82,6 @@ use std::iter;\n use std::mem;\n use std::ops::{Bound, Deref};\n \n-const TINY_CONST_EVAL_LIMIT: Limit = Limit(20);\n-\n #[allow(rustc::usage_of_ty_tykind)]\n impl<'tcx> Interner for TyCtxt<'tcx> {\n     type AdtDef = ty::AdtDef<'tcx>;\n@@ -1178,14 +1176,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.limits(()).move_size_limit\n     }\n \n-    pub fn const_eval_limit(self) -> Limit {\n-        if self.sess.opts.unstable_opts.tiny_const_eval_limit {\n-            TINY_CONST_EVAL_LIMIT\n-        } else {\n-            self.limits(()).const_eval_limit\n-        }\n-    }\n-\n     pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {\n         iter::once(LOCAL_CRATE)\n             .chain(self.crates(()).iter().copied())"}, {"sha": "bf3525750d8890169d658be6a4bbeb9a8e119014", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -128,8 +128,6 @@ pub struct Limits {\n     pub move_size_limit: Limit,\n     /// The maximum length of types during monomorphization.\n     pub type_length_limit: Limit,\n-    /// The maximum blocks a const expression can evaluate.\n-    pub const_eval_limit: Limit,\n }\n \n pub struct CompilerIO {"}, {"sha": "c2fd2e3a91aef6c8c7dc7ce53957608d8f1ab8f8", "filename": "src/ci/docker/host-x86_64/dist-x86_64-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -55,7 +55,7 @@ RUN ./build-clang.sh\n ENV CC=clang CXX=clang++\n \n # rustc-perf version from 2023-03-15\n-ENV PERF_COMMIT 9dfaa35193154b690922347ee1141a06ec87a199\n+ENV PERF_COMMIT 8b2ac3042e1ff2c0074455a0a3618adef97156b1\n RUN curl -LS -o perf.zip https://github.com/rust-lang/rustc-perf/archive/$PERF_COMMIT.zip && \\\n     unzip perf.zip && \\\n     mv rustc-perf-$PERF_COMMIT rustc-perf && \\"}, {"sha": "066d3a198f2fd328790af527d781cdb528062bb5", "filename": "src/ci/stage-build.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/src%2Fci%2Fstage-build.py", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/src%2Fci%2Fstage-build.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fstage-build.py?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -175,7 +175,7 @@ def rustc_stage_2(self) -> Path:\n \n     def build_rustc_perf(self):\n         # rustc-perf version from 2023-03-15\n-        perf_commit = \"9dfaa35193154b690922347ee1141a06ec87a199\"\n+        perf_commit = \"8b2ac3042e1ff2c0074455a0a3618adef97156b1\"\n         rustc_perf_zip_path = self.opt_artifacts() / \"perf.zip\"\n \n         def download_rustc_perf():"}, {"sha": "df68e83bcac744e1b5fd4fa99f3b058955b81f99", "filename": "src/doc/unstable-book/src/language-features/const-eval-limit.md", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/578bcbc2b42191556c4438b80ba37fafa4193e82/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-eval-limit.md", "raw_url": "https://github.com/rust-lang/rust/raw/578bcbc2b42191556c4438b80ba37fafa4193e82/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-eval-limit.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-eval-limit.md?ref=578bcbc2b42191556c4438b80ba37fafa4193e82", "patch": "@@ -1,7 +0,0 @@\n-# `const_eval_limit`\n-\n-The tracking issue for this feature is: [#67217]\n-\n-[#67217]: https://github.com/rust-lang/rust/issues/67217\n-\n-The `const_eval_limit` allows someone to limit the evaluation steps the CTFE undertakes to evaluate a `const fn`."}, {"sha": "142b12290194e8a6830534bee92aabcf74bc2134", "filename": "src/tools/rust-analyzer/crates/hir-def/src/builtin_attr.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-def%2Fsrc%2Fbuiltin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-def%2Fsrc%2Fbuiltin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-def%2Fsrc%2Fbuiltin_attr.rs?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -195,10 +195,6 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Limits:\n     ungated!(recursion_limit, CrateLevel, template!(NameValueStr: \"N\"), FutureWarnFollowing),\n     ungated!(type_length_limit, CrateLevel, template!(NameValueStr: \"N\"), FutureWarnFollowing),\n-    gated!(\n-        const_eval_limit, CrateLevel, template!(NameValueStr: \"N\"), ErrorFollowing,\n-        const_eval_limit, experimental!(const_eval_limit)\n-    ),\n     gated!(\n         move_size_limit, CrateLevel, template!(NameValueStr: \"N\"), ErrorFollowing,\n         large_assignments, experimental!(move_size_limit)"}, {"sha": "217814906379152092641c435484c2af945aeadf", "filename": "tests/ui/consts/const-eval/infinite_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -4,8 +4,8 @@ fn main() {\n     let _ = [(); {\n         let mut n = 113383; // #20 in https://oeis.org/A006884\n         while n != 0 {\n-            //~^ ERROR evaluation of constant value failed\n-            n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n+            //~^ ERROR is taking a long time\n+            n = if n % 2 == 0 { n / 2 } else { 3 * n + 1 };\n         }\n         n\n     }];"}, {"sha": "f0434a847cea5b2acfe49a97b08745b248878100", "filename": "tests/ui/consts/const-eval/infinite_loop.stderr", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -1,12 +1,27 @@\n-error[E0080]: evaluation of constant value failed\n+error: constant evaluation is taking a long time\n   --> $DIR/infinite_loop.rs:6:9\n    |\n LL | /         while n != 0 {\n LL | |\n-LL | |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n+LL | |             n = if n % 2 == 0 { n / 2 } else { 3 * n + 1 };\n LL | |         }\n-   | |_________^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n+   | |_________^\n+   |\n+   = note: this lint makes sure the compiler doesn't get stuck due to infinite loops in const eval.\n+           If your compilation actually takes a long time, you can safely allow the lint.\n+help: the constant being evaluated\n+  --> $DIR/infinite_loop.rs:4:18\n+   |\n+LL |       let _ = [(); {\n+   |  __________________^\n+LL | |         let mut n = 113383; // #20 in https://oeis.org/A006884\n+LL | |         while n != 0 {\n+LL | |\n+...  |\n+LL | |         n\n+LL | |     }];\n+   | |_____^\n+   = note: `#[deny(long_running_const_eval)]` on by default\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0080`."}, {"sha": "ee26d280018b431de90ebc3c52cf15de7c670cb8", "filename": "tests/ui/consts/const-eval/issue-52475.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -2,7 +2,8 @@ fn main() {\n     let _ = [(); {\n         let mut x = &0;\n         let mut n = 0;\n-        while n < 5 { //~ ERROR evaluation of constant value failed [E0080]\n+        while n < 5 {\n+            //~^ ERROR: constant evaluation is taking a long time\n             n = (n + 1) % 5;\n             x = &0; // Materialize a new AllocId\n         }"}, {"sha": "ebf9d12a66ad81f3e1e8d5cbe69c37a4dc8d8086", "filename": "tests/ui/consts/const-eval/issue-52475.stderr", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -1,12 +1,28 @@\n-error[E0080]: evaluation of constant value failed\n+error: constant evaluation is taking a long time\n   --> $DIR/issue-52475.rs:5:9\n    |\n LL | /         while n < 5 {\n+LL | |\n LL | |             n = (n + 1) % 5;\n LL | |             x = &0; // Materialize a new AllocId\n LL | |         }\n-   | |_________^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n+   | |_________^\n+   |\n+   = note: this lint makes sure the compiler doesn't get stuck due to infinite loops in const eval.\n+           If your compilation actually takes a long time, you can safely allow the lint.\n+help: the constant being evaluated\n+  --> $DIR/issue-52475.rs:2:18\n+   |\n+LL |       let _ = [(); {\n+   |  __________________^\n+LL | |         let mut x = &0;\n+LL | |         let mut n = 0;\n+LL | |         while n < 5 {\n+...  |\n+LL | |         0\n+LL | |     }];\n+   | |_____^\n+   = note: `#[deny(long_running_const_eval)]` on by default\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0080`."}, {"sha": "c8c809a25ed78ba4dd1fd4ae1aca0dbf11cd2e4b", "filename": "tests/ui/consts/const-eval/issue-70723.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Fissue-70723.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Fissue-70723.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fissue-70723.rs?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -1,3 +1,3 @@\n-static _X: () = loop {}; //~ ERROR could not evaluate static initializer\n+static _X: () = loop {}; //~ ERROR taking a long time\n \n fn main() {}"}, {"sha": "572a430726fbd184c4fad4be001dcc577bab54ae", "filename": "tests/ui/consts/const-eval/issue-70723.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Fissue-70723.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Fissue-70723.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fissue-70723.stderr?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -1,9 +1,17 @@\n-error[E0080]: could not evaluate static initializer\n+error: constant evaluation is taking a long time\n   --> $DIR/issue-70723.rs:1:17\n    |\n LL | static _X: () = loop {};\n-   |                 ^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n+   |                 ^^^^^^^\n+   |\n+   = note: this lint makes sure the compiler doesn't get stuck due to infinite loops in const eval.\n+           If your compilation actually takes a long time, you can safely allow the lint.\n+help: the constant being evaluated\n+  --> $DIR/issue-70723.rs:1:1\n+   |\n+LL | static _X: () = loop {};\n+   | ^^^^^^^^^^^^^\n+   = note: `#[deny(long_running_const_eval)]` on by default\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0080`."}, {"sha": "a30518170ad4236b7785e9a86039059fe19453e2", "filename": "tests/ui/consts/const-eval/stable-metric/ctfe-fn-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-fn-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-fn-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-fn-call.rs?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -25,7 +25,7 @@ const fn call_foo() -> u32 {\n     foo();\n     foo();\n     foo();\n-    foo(); //~ ERROR evaluation of constant value failed [E0080]\n+    foo(); //~ ERROR is taking a long time\n     0\n }\n "}, {"sha": "a3fd712ca46080e5f8268c674f69df7ad7895e6c", "filename": "tests/ui/consts/const-eval/stable-metric/ctfe-fn-call.stderr", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-fn-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-fn-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-fn-call.stderr?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -1,20 +1,17 @@\n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/ctfe-fn-call.rs:28:5\n-   |\n-LL |     foo();\n-   |     ^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n-   |\n-note: inside `call_foo`\n+error: constant evaluation is taking a long time\n   --> $DIR/ctfe-fn-call.rs:28:5\n    |\n LL |     foo();\n    |     ^^^^^\n-note: inside `X`\n-  --> $DIR/ctfe-fn-call.rs:32:16\n+   |\n+   = note: this lint makes sure the compiler doesn't get stuck due to infinite loops in const eval.\n+           If your compilation actually takes a long time, you can safely allow the lint.\n+help: the constant being evaluated\n+  --> $DIR/ctfe-fn-call.rs:32:1\n    |\n LL | const X: u32 = call_foo();\n-   |                ^^^^^^^^^^\n+   | ^^^^^^^^^^^^\n+   = note: `#[deny(long_running_const_eval)]` on by default\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0080`."}, {"sha": "f7cd04568be3c137f99600f720d5213df8ec32d7", "filename": "tests/ui/consts/const-eval/stable-metric/ctfe-labelled-loop.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-labelled-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-labelled-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-labelled-loop.rs?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -3,9 +3,10 @@\n \n const fn labelled_loop(n: u32) -> u32 {\n     let mut i = 0;\n-    'mylabel: loop { //~ ERROR evaluation of constant value failed [E0080]\n+    'mylabel: loop {\n+        //~^ ERROR is taking a long time\n         if i > n {\n-            break 'mylabel\n+            break 'mylabel;\n         }\n         i += 1;\n     }"}, {"sha": "5808ee35a6b4541dc7f11c317c8c168c3af8b5c0", "filename": "tests/ui/consts/const-eval/stable-metric/ctfe-labelled-loop.stderr", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-labelled-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-labelled-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-labelled-loop.stderr?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -1,30 +1,23 @@\n-error[E0080]: evaluation of constant value failed\n+error: constant evaluation is taking a long time\n   --> $DIR/ctfe-labelled-loop.rs:6:5\n    |\n LL | /     'mylabel: loop {\n+LL | |\n LL | |         if i > n {\n-LL | |             break 'mylabel\n-LL | |         }\n-LL | |         i += 1;\n-LL | |     }\n-   | |_____^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n-   |\n-note: inside `labelled_loop`\n-  --> $DIR/ctfe-labelled-loop.rs:6:5\n-   |\n-LL | /     'mylabel: loop {\n-LL | |         if i > n {\n-LL | |             break 'mylabel\n+LL | |             break 'mylabel;\n LL | |         }\n LL | |         i += 1;\n LL | |     }\n    | |_____^\n-note: inside `X`\n-  --> $DIR/ctfe-labelled-loop.rs:15:16\n+   |\n+   = note: this lint makes sure the compiler doesn't get stuck due to infinite loops in const eval.\n+           If your compilation actually takes a long time, you can safely allow the lint.\n+help: the constant being evaluated\n+  --> $DIR/ctfe-labelled-loop.rs:16:1\n    |\n LL | const X: u32 = labelled_loop(19);\n-   |                ^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^\n+   = note: `#[deny(long_running_const_eval)]` on by default\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0080`."}, {"sha": "56a39fc45b0aee869b2862de5bf1e2bbbd3a0642", "filename": "tests/ui/consts/const-eval/stable-metric/ctfe-recursion.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-recursion.rs?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -1,11 +1,12 @@\n // check-fail\n // compile-flags: -Z tiny-const-eval-limit\n \n+#[rustfmt::skip]\n const fn recurse(n: u32) -> u32 {\n     if n == 0 {\n         n\n     } else {\n-        recurse(n - 1) //~ ERROR evaluation of constant value failed [E0080]\n+        recurse(n - 1) //~ ERROR is taking a long time\n     }\n }\n "}, {"sha": "524c8e55426660dfa238bd7c7a3d857c8fbb6173", "filename": "tests/ui/consts/const-eval/stable-metric/ctfe-recursion.stderr", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-recursion.stderr?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -1,25 +1,17 @@\n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/ctfe-recursion.rs:8:9\n-   |\n-LL |         recurse(n - 1)\n-   |         ^^^^^^^^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n-   |\n-note: inside `recurse`\n-  --> $DIR/ctfe-recursion.rs:8:9\n+error: constant evaluation is taking a long time\n+  --> $DIR/ctfe-recursion.rs:9:9\n    |\n LL |         recurse(n - 1)\n    |         ^^^^^^^^^^^^^^\n-note: [... 18 additional calls inside `recurse` ...]\n-  --> $DIR/ctfe-recursion.rs:8:9\n    |\n-LL |         recurse(n - 1)\n-   |         ^^^^^^^^^^^^^^\n-note: inside `X`\n-  --> $DIR/ctfe-recursion.rs:12:16\n+   = note: this lint makes sure the compiler doesn't get stuck due to infinite loops in const eval.\n+           If your compilation actually takes a long time, you can safely allow the lint.\n+help: the constant being evaluated\n+  --> $DIR/ctfe-recursion.rs:13:1\n    |\n LL | const X: u32 = recurse(19);\n-   |                ^^^^^^^^^^^\n+   | ^^^^^^^^^^^^\n+   = note: `#[deny(long_running_const_eval)]` on by default\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0080`."}, {"sha": "30550f93ac10d24fc0930f12ba85f37d903cc478", "filename": "tests/ui/consts/const-eval/stable-metric/ctfe-simple-loop.allow.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.allow.stderr?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -0,0 +1,19 @@\n+warning: constant evaluation is taking a long time\n+  --> $DIR/ctfe-simple-loop.rs:9:5\n+   |\n+LL | /     while index < n {\n+LL | |\n+LL | |\n+LL | |\n+LL | |         index = index + 1;\n+LL | |     }\n+   | |_____^ the const evaluator is currently interpreting this expression\n+   |\n+help: the constant being evaluated\n+  --> $DIR/ctfe-simple-loop.rs:19:1\n+   |\n+LL | const Y: u32 = simple_loop(35);\n+   | ^^^^^^^^^^^^\n+\n+warning: 1 warning emitted\n+"}, {"sha": "214f33dfb36c5cf5711fa5651aaa030e9f280c98", "filename": "tests/ui/consts/const-eval/stable-metric/ctfe-simple-loop.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.rs?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -1,14 +1,22 @@\n-// check-fail\n+// check-pass\n+// revisions: warn allow\n+#![cfg_attr(warn, warn(long_running_const_eval))]\n+#![cfg_attr(allow, allow(long_running_const_eval))]\n+\n // compile-flags: -Z tiny-const-eval-limit\n const fn simple_loop(n: u32) -> u32 {\n     let mut index = 0;\n-    while index < n { //~ ERROR evaluation of constant value failed [E0080]\n+    while index < n {\n+        //~^ WARN is taking a long time\n+        //[warn]~| WARN is taking a long time\n+        //[warn]~| WARN is taking a long time\n         index = index + 1;\n     }\n     0\n }\n \n const X: u32 = simple_loop(19);\n+const Y: u32 = simple_loop(35);\n \n fn main() {\n     println!(\"{X}\");"}, {"sha": "83ff275de70491a318af4c69f0904a3b53807f50", "filename": "tests/ui/consts/const-eval/stable-metric/ctfe-simple-loop.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/578bcbc2b42191556c4438b80ba37fafa4193e82/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/578bcbc2b42191556c4438b80ba37fafa4193e82/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.stderr?ref=578bcbc2b42191556c4438b80ba37fafa4193e82", "patch": "@@ -1,24 +0,0 @@\n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/ctfe-simple-loop.rs:5:5\n-   |\n-LL | /     while index < n {\n-LL | |         index = index + 1;\n-LL | |     }\n-   | |_____^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n-   |\n-note: inside `simple_loop`\n-  --> $DIR/ctfe-simple-loop.rs:5:5\n-   |\n-LL | /     while index < n {\n-LL | |         index = index + 1;\n-LL | |     }\n-   | |_____^\n-note: inside `X`\n-  --> $DIR/ctfe-simple-loop.rs:11:16\n-   |\n-LL | const X: u32 = simple_loop(19);\n-   |                ^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0080`."}, {"sha": "40fc4a876e9e5ef3198f7db05890cb0e454362d4", "filename": "tests/ui/consts/const-eval/stable-metric/ctfe-simple-loop.warn.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.warn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05eae0823373415bb25063e3d0ccd99df52079b0/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.warn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.warn.stderr?ref=05eae0823373415bb25063e3d0ccd99df52079b0", "patch": "@@ -0,0 +1,62 @@\n+warning: constant evaluation is taking a long time\n+  --> $DIR/ctfe-simple-loop.rs:9:5\n+   |\n+LL | /     while index < n {\n+LL | |\n+LL | |\n+LL | |\n+LL | |         index = index + 1;\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: this lint makes sure the compiler doesn't get stuck due to infinite loops in const eval.\n+           If your compilation actually takes a long time, you can safely allow the lint.\n+help: the constant being evaluated\n+  --> $DIR/ctfe-simple-loop.rs:18:1\n+   |\n+LL | const X: u32 = simple_loop(19);\n+   | ^^^^^^^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/ctfe-simple-loop.rs:3:24\n+   |\n+LL | #![cfg_attr(warn, warn(long_running_const_eval))]\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: constant evaluation is taking a long time\n+  --> $DIR/ctfe-simple-loop.rs:9:5\n+   |\n+LL | /     while index < n {\n+LL | |\n+LL | |\n+LL | |\n+LL | |         index = index + 1;\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: this lint makes sure the compiler doesn't get stuck due to infinite loops in const eval.\n+           If your compilation actually takes a long time, you can safely allow the lint.\n+help: the constant being evaluated\n+  --> $DIR/ctfe-simple-loop.rs:19:1\n+   |\n+LL | const Y: u32 = simple_loop(35);\n+   | ^^^^^^^^^^^^\n+\n+warning: constant evaluation is taking a long time\n+  --> $DIR/ctfe-simple-loop.rs:9:5\n+   |\n+LL | /     while index < n {\n+LL | |\n+LL | |\n+LL | |\n+LL | |         index = index + 1;\n+LL | |     }\n+   | |_____^ the const evaluator is currently interpreting this expression\n+   |\n+help: the constant being evaluated\n+  --> $DIR/ctfe-simple-loop.rs:19:1\n+   |\n+LL | const Y: u32 = simple_loop(35);\n+   | ^^^^^^^^^^^^\n+\n+warning: 3 warnings emitted\n+"}, {"sha": "629d1f02a30f3d88f4db73470e3b0289a80fe3a4", "filename": "tests/ui/consts/const_limit/const_eval_limit_not_reached.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/578bcbc2b42191556c4438b80ba37fafa4193e82/tests%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_not_reached.rs", "raw_url": "https://github.com/rust-lang/rust/raw/578bcbc2b42191556c4438b80ba37fafa4193e82/tests%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_not_reached.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_not_reached.rs?ref=578bcbc2b42191556c4438b80ba37fafa4193e82", "patch": "@@ -1,20 +0,0 @@\n-// check-pass\n-\n-#![feature(const_eval_limit)]\n-\n-// This needs to be higher than the number of loop iterations since each pass through the loop may\n-// hit more than one terminator.\n-#![const_eval_limit=\"4000\"]\n-\n-const X: usize = {\n-    let mut x = 0;\n-    while x != 1000 {\n-        x += 1;\n-    }\n-\n-    x\n-};\n-\n-fn main() {\n-    assert_eq!(X, 1000);\n-}"}, {"sha": "1c49593cd53fa399bc8d6451b60d70e13825b3c5", "filename": "tests/ui/consts/const_limit/const_eval_limit_overflow.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/578bcbc2b42191556c4438b80ba37fafa4193e82/tests%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/578bcbc2b42191556c4438b80ba37fafa4193e82/tests%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_overflow.rs?ref=578bcbc2b42191556c4438b80ba37fafa4193e82", "patch": "@@ -1,15 +0,0 @@\n-#![feature(const_eval_limit)]\n-#![const_eval_limit=\"18_446_744_073_709_551_615\"]\n-//~^ ERROR `limit` must be a non-negative integer\n-\n-const CONSTANT: usize = limit();\n-\n-fn main() {\n-    assert_eq!(CONSTANT, 1764);\n-}\n-\n-const fn limit() -> usize {\n-    let x = 42;\n-\n-    x * 42\n-}"}, {"sha": "7f5d5e6cd4c5ac07714a5d2a977d89dbbbc0506d", "filename": "tests/ui/consts/const_limit/const_eval_limit_overflow.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/578bcbc2b42191556c4438b80ba37fafa4193e82/tests%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/578bcbc2b42191556c4438b80ba37fafa4193e82/tests%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_overflow.stderr?ref=578bcbc2b42191556c4438b80ba37fafa4193e82", "patch": "@@ -1,10 +0,0 @@\n-error: `limit` must be a non-negative integer\n-  --> $DIR/const_eval_limit_overflow.rs:2:1\n-   |\n-LL | #![const_eval_limit=\"18_446_744_073_709_551_615\"]\n-   | ^^^^^^^^^^^^^^^^^^^^----------------------------^\n-   |                     |\n-   |                     not a valid integer\n-\n-error: aborting due to previous error\n-"}, {"sha": "3ce038c1d3f772e86da1665b571c702d8ac5c890", "filename": "tests/ui/consts/const_limit/const_eval_limit_reached.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/578bcbc2b42191556c4438b80ba37fafa4193e82/tests%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.rs", "raw_url": "https://github.com/rust-lang/rust/raw/578bcbc2b42191556c4438b80ba37fafa4193e82/tests%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.rs?ref=578bcbc2b42191556c4438b80ba37fafa4193e82", "patch": "@@ -1,16 +0,0 @@\n-#![feature(const_eval_limit)]\n-#![const_eval_limit = \"500\"]\n-\n-const X: usize = {\n-    let mut x = 0;\n-    while x != 1000 {\n-        //~^ ERROR evaluation of constant value failed\n-        x += 1;\n-    }\n-\n-    x\n-};\n-\n-fn main() {\n-    assert_eq!(X, 1000);\n-}"}, {"sha": "a8e8ae9bb088a07737324dd98aeaf9a3ad2762df", "filename": "tests/ui/consts/const_limit/const_eval_limit_reached.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/578bcbc2b42191556c4438b80ba37fafa4193e82/tests%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/578bcbc2b42191556c4438b80ba37fafa4193e82/tests%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr?ref=578bcbc2b42191556c4438b80ba37fafa4193e82", "patch": "@@ -1,12 +0,0 @@\n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_eval_limit_reached.rs:6:5\n-   |\n-LL | /     while x != 1000 {\n-LL | |\n-LL | |         x += 1;\n-LL | |     }\n-   | |_____^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0080`."}, {"sha": "61119d7511d49262fc41355eea7720d7155d9eb4", "filename": "tests/ui/consts/const_limit/feature-gate-const_eval_limit.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/578bcbc2b42191556c4438b80ba37fafa4193e82/tests%2Fui%2Fconsts%2Fconst_limit%2Ffeature-gate-const_eval_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/578bcbc2b42191556c4438b80ba37fafa4193e82/tests%2Fui%2Fconsts%2Fconst_limit%2Ffeature-gate-const_eval_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_limit%2Ffeature-gate-const_eval_limit.rs?ref=578bcbc2b42191556c4438b80ba37fafa4193e82", "patch": "@@ -1,14 +0,0 @@\n-#![const_eval_limit=\"42\"]\n-//~^ ERROR the `#[const_eval_limit]` attribute is an experimental feature [E0658]\n-\n-const CONSTANT: usize = limit();\n-\n-fn main() {\n-    assert_eq!(CONSTANT, 1764);\n-}\n-\n-const fn limit() -> usize {\n-    let x = 42;\n-\n-    x * 42\n-}"}, {"sha": "5bd29c7dfd22b8f116a5119e53ed15fa871c6543", "filename": "tests/ui/consts/const_limit/feature-gate-const_eval_limit.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/578bcbc2b42191556c4438b80ba37fafa4193e82/tests%2Fui%2Fconsts%2Fconst_limit%2Ffeature-gate-const_eval_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/578bcbc2b42191556c4438b80ba37fafa4193e82/tests%2Fui%2Fconsts%2Fconst_limit%2Ffeature-gate-const_eval_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_limit%2Ffeature-gate-const_eval_limit.stderr?ref=578bcbc2b42191556c4438b80ba37fafa4193e82", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: the `#[const_eval_limit]` attribute is an experimental feature\n-  --> $DIR/feature-gate-const_eval_limit.rs:1:1\n-   |\n-LL | #![const_eval_limit=\"42\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #67217 <https://github.com/rust-lang/rust/issues/67217> for more information\n-   = help: add `#![feature(const_eval_limit)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}]}