{"sha": "bd7f301b20380c1e56e72d17310b89214fddb571", "node_id": "C_kwDOAAsO6NoAKGJkN2YzMDFiMjAzODBjMWU1NmU3MmQxNzMxMGI4OTIxNGZkZGI1NzE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-04-11T03:48:41Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-04-11T04:56:11Z"}, "message": "Use the existing `static` and `env` symbols instead of interning.", "tree": {"sha": "dafd4a5d6a2e73a62cc408b808ca4871a5e103a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dafd4a5d6a2e73a62cc408b808ca4871a5e103a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd7f301b20380c1e56e72d17310b89214fddb571", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd7f301b20380c1e56e72d17310b89214fddb571", "html_url": "https://github.com/rust-lang/rust/commit/bd7f301b20380c1e56e72d17310b89214fddb571", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd7f301b20380c1e56e72d17310b89214fddb571/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1eb53902f3b2b9c02b20472a8c7747b89bd54203", "url": "https://api.github.com/repos/rust-lang/rust/commits/1eb53902f3b2b9c02b20472a8c7747b89bd54203", "html_url": "https://github.com/rust-lang/rust/commit/1eb53902f3b2b9c02b20472a8c7747b89bd54203"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "58812faa500a4820b777063e9892701a0e491e5c", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f301b20380c1e56e72d17310b89214fddb571/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f301b20380c1e56e72d17310b89214fddb571/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=bd7f301b20380c1e56e72d17310b89214fddb571", "patch": "@@ -35,6 +35,7 @@ use rustc_middle::ty::{\n     OpaqueHiddenType, OpaqueTypeKey, RegionVid, Ty, TyCtxt, UserType, UserTypeAnnotationIndex,\n };\n use rustc_span::def_id::CRATE_DEF_ID;\n+use rustc_span::symbol::sym;\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::{FieldIdx, FIRST_VARIANT};\n use rustc_trait_selection::traits::query::type_op::custom::scrape_region_constraints;\n@@ -1347,9 +1348,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                                 BoundRegionInfo::Name(Symbol::intern(\"anon\"))\n                             }\n                             ty::BoundRegionKind::BrNamed(_, name) => BoundRegionInfo::Name(name),\n-                            ty::BoundRegionKind::BrEnv => {\n-                                BoundRegionInfo::Name(Symbol::intern(\"env\"))\n-                            }\n+                            ty::BoundRegionKind::BrEnv => BoundRegionInfo::Name(sym::env),\n                         };\n \n                         RegionCtxt::LateBound(reg_info)"}, {"sha": "a0e365387234e529079948367bfb022ec1a2cd80", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f301b20380c1e56e72d17310b89214fddb571/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f301b20380c1e56e72d17310b89214fddb571/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=bd7f301b20380c1e56e72d17310b89214fddb571", "patch": "@@ -4,6 +4,7 @@ use rustc_infer::traits::PredicateObligations;\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::{self, Ty};\n+use rustc_span::symbol::sym;\n use rustc_span::{Span, Symbol};\n use rustc_trait_selection::traits::query::Fallible;\n \n@@ -127,7 +128,7 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n             ty::BoundRegionKind::BrAnon(Some(span)) => BoundRegionInfo::Span(span),\n             ty::BoundRegionKind::BrAnon(..) => BoundRegionInfo::Name(Symbol::intern(\"anon\")),\n             ty::BoundRegionKind::BrNamed(_, name) => BoundRegionInfo::Name(name),\n-            ty::BoundRegionKind::BrEnv => BoundRegionInfo::Name(Symbol::intern(\"env\")),\n+            ty::BoundRegionKind::BrEnv => BoundRegionInfo::Name(sym::env),\n         };\n \n         let reg_var ="}, {"sha": "cc351c6343148b71bd73f2a06a06094c20f84a3e", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f301b20380c1e56e72d17310b89214fddb571/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f301b20380c1e56e72d17310b89214fddb571/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=bd7f301b20380c1e56e72d17310b89214fddb571", "patch": "@@ -24,6 +24,7 @@ use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::{self, InlineConstSubsts, InlineConstSubstsParts, RegionVid, Ty, TyCtxt};\n use rustc_middle::ty::{InternalSubsts, SubstsRef};\n+use rustc_span::symbol::kw;\n use rustc_span::Symbol;\n use std::iter;\n \n@@ -404,10 +405,8 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         assert_eq!(FIRST_GLOBAL_INDEX, self.infcx.num_region_vars());\n \n         // Create the \"global\" region that is always free in all contexts: 'static.\n-        let fr_static = self\n-            .infcx\n-            .next_nll_region_var(FR, || RegionCtxt::Free(Symbol::intern(\"static\")))\n-            .to_region_vid();\n+        let fr_static =\n+            self.infcx.next_nll_region_var(FR, || RegionCtxt::Free(kw::Static)).to_region_vid();\n \n         // We've now added all the global regions. The next ones we\n         // add will be external."}]}