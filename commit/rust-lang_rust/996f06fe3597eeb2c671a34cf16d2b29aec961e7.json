{"sha": "996f06fe3597eeb2c671a34cf16d2b29aec961e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NmYwNmZlMzU5N2VlYjJjNjcxYTM0Y2YxNmQyYjI5YWVjOTYxZTc=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-04-07T13:20:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-07T13:20:06Z"}, "message": "Rollup merge of #41061 - arielb1:parent-lock, r=eddyb\n\ncstore: return an immutable borrow from `visible_parent_map`\n\nThis prevents an ICE when `visible_parent_map` is called multiple times, for example when an item referenced in an impl signature is imported from an  `extern crate` statement occurs within an impl.\n\nFixes #41053.\n\nr? @eddyb", "tree": {"sha": "76779c17044b0b566c2073bf71989a05153ca538", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76779c17044b0b566c2073bf71989a05153ca538"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/996f06fe3597eeb2c671a34cf16d2b29aec961e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/996f06fe3597eeb2c671a34cf16d2b29aec961e7", "html_url": "https://github.com/rust-lang/rust/commit/996f06fe3597eeb2c671a34cf16d2b29aec961e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/996f06fe3597eeb2c671a34cf16d2b29aec961e7/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88e97f05412e71cde26b1da0c1d33a4818d27286", "url": "https://api.github.com/repos/rust-lang/rust/commits/88e97f05412e71cde26b1da0c1d33a4818d27286", "html_url": "https://github.com/rust-lang/rust/commit/88e97f05412e71cde26b1da0c1d33a4818d27286"}, {"sha": "60381cd9c29c51615975894e898b47da65f0b124", "url": "https://api.github.com/repos/rust-lang/rust/commits/60381cd9c29c51615975894e898b47da65f0b124", "html_url": "https://github.com/rust-lang/rust/commit/60381cd9c29c51615975894e898b47da65f0b124"}], "stats": {"total": 61, "additions": 55, "deletions": 6}, "files": [{"sha": "694321812836b2b943cebea312515ab54118ec5a", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/996f06fe3597eeb2c671a34cf16d2b29aec961e7/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996f06fe3597eeb2c671a34cf16d2b29aec961e7/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=996f06fe3597eeb2c671a34cf16d2b29aec961e7", "patch": "@@ -172,7 +172,7 @@ pub trait CrateStore {\n     fn stability(&self, def: DefId) -> Option<attr::Stability>;\n     fn deprecation(&self, def: DefId) -> Option<attr::Deprecation>;\n     fn visibility(&self, def: DefId) -> ty::Visibility;\n-    fn visible_parent_map<'a>(&'a self) -> ::std::cell::RefMut<'a, DefIdMap<DefId>>;\n+    fn visible_parent_map<'a>(&'a self) -> ::std::cell::Ref<'a, DefIdMap<DefId>>;\n     fn item_generics_cloned(&self, def: DefId) -> ty::Generics;\n     fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute>;\n     fn fn_arg_names(&self, did: DefId) -> Vec<ast::Name>;\n@@ -303,7 +303,7 @@ impl CrateStore for DummyCrateStore {\n     fn stability(&self, def: DefId) -> Option<attr::Stability> { bug!(\"stability\") }\n     fn deprecation(&self, def: DefId) -> Option<attr::Deprecation> { bug!(\"deprecation\") }\n     fn visibility(&self, def: DefId) -> ty::Visibility { bug!(\"visibility\") }\n-    fn visible_parent_map<'a>(&'a self) -> ::std::cell::RefMut<'a, DefIdMap<DefId>> {\n+    fn visible_parent_map<'a>(&'a self) -> ::std::cell::Ref<'a, DefIdMap<DefId>> {\n         bug!(\"visible_parent_map\")\n     }\n     fn item_generics_cloned(&self, def: DefId) -> ty::Generics"}, {"sha": "37984e4c3718fd96231832ea22bae1f8f47e409d", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/996f06fe3597eeb2c671a34cf16d2b29aec961e7/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996f06fe3597eeb2c671a34cf16d2b29aec961e7/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=996f06fe3597eeb2c671a34cf16d2b29aec961e7", "patch": "@@ -511,12 +511,19 @@ impl CrateStore for cstore::CStore {\n     /// Returns a map from a sufficiently visible external item (i.e. an external item that is\n     /// visible from at least one local module) to a sufficiently visible parent (considering\n     /// modules that re-export the external item to be parents).\n-    fn visible_parent_map<'a>(&'a self) -> ::std::cell::RefMut<'a, DefIdMap<DefId>> {\n-        let mut visible_parent_map = self.visible_parent_map.borrow_mut();\n-        if !visible_parent_map.is_empty() { return visible_parent_map; }\n+    fn visible_parent_map<'a>(&'a self) -> ::std::cell::Ref<'a, DefIdMap<DefId>> {\n+        {\n+            let visible_parent_map = self.visible_parent_map.borrow();\n+            if !visible_parent_map.is_empty() {\n+                return visible_parent_map;\n+            }\n+        }\n \n         use std::collections::vec_deque::VecDeque;\n         use std::collections::hash_map::Entry;\n+\n+        let mut visible_parent_map = self.visible_parent_map.borrow_mut();\n+\n         for cnum in (1 .. self.next_crate_num().as_usize()).map(CrateNum::new) {\n             let cdata = self.get_crate_data(cnum);\n \n@@ -560,6 +567,7 @@ impl CrateStore for cstore::CStore {\n             }\n         }\n \n-        visible_parent_map\n+        drop(visible_parent_map);\n+        self.visible_parent_map.borrow()\n     }\n }"}, {"sha": "68e92b104298c0480d54229edc6acab0e2edda8e", "filename": "src/test/run-pass/auxiliary/issue_41053.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/996f06fe3597eeb2c671a34cf16d2b29aec961e7/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_41053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996f06fe3597eeb2c671a34cf16d2b29aec961e7/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_41053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_41053.rs?ref=996f06fe3597eeb2c671a34cf16d2b29aec961e7", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct Test;"}, {"sha": "769d841e364d78edb845a5678633e9b9491bb232", "filename": "src/test/run-pass/issue-41053.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/996f06fe3597eeb2c671a34cf16d2b29aec961e7/src%2Ftest%2Frun-pass%2Fissue-41053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996f06fe3597eeb2c671a34cf16d2b29aec961e7/src%2Ftest%2Frun-pass%2Fissue-41053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-41053.rs?ref=996f06fe3597eeb2c671a34cf16d2b29aec961e7", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue_41053.rs\n+\n+pub trait Trait { fn foo(&self) {} }\n+\n+pub struct Foo;\n+\n+impl Iterator for Foo {\n+    type Item = Box<Trait>;\n+    fn next(&mut self) -> Option<Box<Trait>> {\n+        extern crate issue_41053;\n+        impl ::Trait for issue_41053::Test {\n+            fn foo(&self) {}\n+        }\n+        Some(Box::new(issue_41053::Test))\n+    }\n+}\n+\n+fn main() {\n+    Foo.next().unwrap().foo();\n+}"}]}