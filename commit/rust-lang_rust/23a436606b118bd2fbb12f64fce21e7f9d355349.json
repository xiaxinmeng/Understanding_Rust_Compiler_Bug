{"sha": "23a436606b118bd2fbb12f64fce21e7f9d355349", "node_id": "C_kwDOAAsO6NoAKDIzYTQzNjYwNmIxMThiZDJmYmIxMmY2NGZjZTIxZTdmOWQzNTUzNDk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-25T08:16:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-25T08:16:08Z"}, "message": "Auto merge of #88781 - estebank:emoji-idents, r=oli-obk\n\nTokenize emoji as if they were valid identifiers\n\nIn the lexer, consider emojis to be valid identifiers and reject\nthem later to avoid knock down parse errors.\n\nPartially address #86102.", "tree": {"sha": "f7cdcfcb705dc416fd967deb4e89ad3184f282c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7cdcfcb705dc416fd967deb4e89ad3184f282c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23a436606b118bd2fbb12f64fce21e7f9d355349", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23a436606b118bd2fbb12f64fce21e7f9d355349", "html_url": "https://github.com/rust-lang/rust/commit/23a436606b118bd2fbb12f64fce21e7f9d355349", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23a436606b118bd2fbb12f64fce21e7f9d355349/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6eda7d8a7af3ef51311d3106874a7d8de994edc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6eda7d8a7af3ef51311d3106874a7d8de994edc", "html_url": "https://github.com/rust-lang/rust/commit/c6eda7d8a7af3ef51311d3106874a7d8de994edc"}, {"sha": "d92916439c372967e4c12b7ece3c8d7e860a8777", "url": "https://api.github.com/repos/rust-lang/rust/commits/d92916439c372967e4c12b7ece3c8d7e860a8777", "html_url": "https://github.com/rust-lang/rust/commit/d92916439c372967e4c12b7ece3c8d7e860a8777"}], "stats": {"total": 238, "additions": 223, "deletions": 15}, "files": [{"sha": "edc227d9db7baee9b5cd3dc306efc73915ea90be", "filename": "Cargo.lock", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/23a436606b118bd2fbb12f64fce21e7f9d355349/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/23a436606b118bd2fbb12f64fce21e7f9d355349/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=23a436606b118bd2fbb12f64fce21e7f9d355349", "patch": "@@ -4040,6 +4040,7 @@ name = \"rustc_lexer\"\n version = \"0.1.0\"\n dependencies = [\n  \"expect-test\",\n+ \"unic-emoji-char\",\n  \"unicode-xid\",\n ]\n \n@@ -5510,6 +5511,47 @@ version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"56dee185309b50d1f11bfedef0fe6d036842e3fb77413abef29f8f8d1c5d4c1c\"\n \n+[[package]]\n+name = \"unic-char-property\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a8c57a407d9b6fa02b4795eb81c5b6652060a15a7903ea981f3d723e6c0be221\"\n+dependencies = [\n+ \"unic-char-range\",\n+]\n+\n+[[package]]\n+name = \"unic-char-range\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0398022d5f700414f6b899e10b8348231abf9173fa93144cbc1a43b9793c1fbc\"\n+\n+[[package]]\n+name = \"unic-common\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"80d7ff825a6a654ee85a63e80f92f054f904f21e7d12da4e22f9834a4aaa35bc\"\n+\n+[[package]]\n+name = \"unic-emoji-char\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0b07221e68897210270a38bde4babb655869637af0f69407f96053a34f76494d\"\n+dependencies = [\n+ \"unic-char-property\",\n+ \"unic-char-range\",\n+ \"unic-ucd-version\",\n+]\n+\n+[[package]]\n+name = \"unic-ucd-version\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"96bd2f2237fe450fcd0a1d2f5f4e91711124f7857ba2e964247776ebeeb7b0c4\"\n+dependencies = [\n+ \"unic-common\",\n+]\n+\n [[package]]\n name = \"unicase\"\n version = \"2.6.0\""}, {"sha": "d64a589bd9b2a37b1db629e6e10d7112c206ea36", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/23a436606b118bd2fbb12f64fce21e7f9d355349/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a436606b118bd2fbb12f64fce21e7f9d355349/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=23a436606b118bd2fbb12f64fce21e7f9d355349", "patch": "@@ -730,7 +730,7 @@ impl EmitterWriter {\n         }\n \n         let source_string = match file.get_line(line.line_index - 1) {\n-            Some(s) => replace_tabs(&*s),\n+            Some(s) => normalize_whitespace(&*s),\n             None => return Vec::new(),\n         };\n \n@@ -1286,7 +1286,7 @@ impl EmitterWriter {\n             }\n             for &(ref text, _) in msg.iter() {\n                 // Account for newlines to align output to its label.\n-                for (line, text) in replace_tabs(text).lines().enumerate() {\n+                for (line, text) in normalize_whitespace(text).lines().enumerate() {\n                     buffer.append(\n                         0 + line,\n                         &format!(\n@@ -1550,7 +1550,7 @@ impl EmitterWriter {\n \n                             self.draw_line(\n                                 &mut buffer,\n-                                &replace_tabs(&unannotated_line),\n+                                &normalize_whitespace(&unannotated_line),\n                                 annotated_file.lines[line_idx + 1].line_index - 1,\n                                 last_buffer_line_num,\n                                 width_offset,\n@@ -1672,7 +1672,7 @@ impl EmitterWriter {\n                     buffer.puts(\n                         row_num - 1,\n                         max_line_num_len + 3,\n-                        &replace_tabs(\n+                        &normalize_whitespace(\n                             &*file_lines\n                                 .file\n                                 .get_line(file_lines.lines[line_pos].line_index)\n@@ -1698,7 +1698,7 @@ impl EmitterWriter {\n                 }\n \n                 // print the suggestion\n-                buffer.append(row_num, &replace_tabs(line), Style::NoStyle);\n+                buffer.append(row_num, &normalize_whitespace(line), Style::NoStyle);\n \n                 // Colorize addition/replacements with green.\n                 for &SubstitutionHighlight { start, end } in highlight_parts {\n@@ -2081,6 +2081,7 @@ fn num_decimal_digits(num: usize) -> usize {\n // We replace some characters so the CLI output is always consistent and underlines aligned.\n const OUTPUT_REPLACEMENTS: &[(char, &str)] = &[\n     ('\\t', \"    \"),   // We do our own tab replacement\n+    ('\\u{200D}', \"\"), // Replace ZWJ with nothing for consistent terminal output of grapheme clusters.\n     ('\\u{202A}', \"\"), // The following unicode text flow control characters are inconsistently\n     ('\\u{202B}', \"\"), // supported accross CLIs and can cause confusion due to the bytes on disk\n     ('\\u{202D}', \"\"), // not corresponding to the visible source code, so we replace them always.\n@@ -2092,7 +2093,7 @@ const OUTPUT_REPLACEMENTS: &[(char, &str)] = &[\n     ('\\u{2069}', \"\"),\n ];\n \n-fn replace_tabs(str: &str) -> String {\n+fn normalize_whitespace(str: &str) -> String {\n     let mut s = str.to_string();\n     for (c, replacement) in OUTPUT_REPLACEMENTS {\n         s = s.replace(*c, replacement);"}, {"sha": "d3917dfb14ab3126bd4cedf61c2e79a2a175617d", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/23a436606b118bd2fbb12f64fce21e7f9d355349/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a436606b118bd2fbb12f64fce21e7f9d355349/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=23a436606b118bd2fbb12f64fce21e7f9d355349", "patch": "@@ -35,7 +35,7 @@ use rustc_session::output::{filename_for_input, filename_for_metadata};\n use rustc_session::search_paths::PathKind;\n use rustc_session::{Limit, Session};\n use rustc_span::symbol::{sym, Ident, Symbol};\n-use rustc_span::FileName;\n+use rustc_span::{FileName, MultiSpan};\n use rustc_trait_selection::traits;\n use rustc_typeck as typeck;\n use tempfile::Builder as TempFileBuilder;\n@@ -450,6 +450,19 @@ pub fn configure_and_expand(\n         });\n     }\n \n+    // Gate identifiers containing invalid Unicode codepoints that were recovered during lexing.\n+    sess.parse_sess.bad_unicode_identifiers.with_lock(|identifiers| {\n+        let mut identifiers: Vec<_> = identifiers.drain().collect();\n+        identifiers.sort_by_key(|&(key, _)| key);\n+        for (ident, mut spans) in identifiers.into_iter() {\n+            spans.sort();\n+            sess.diagnostic().span_err(\n+                MultiSpan::from(spans),\n+                &format!(\"identifiers cannot contain emoji: `{}`\", ident),\n+            );\n+        }\n+    });\n+\n     Ok(krate)\n }\n "}, {"sha": "35af110537d4c3ea859b76fbcf4ad4d9ac8a67c8", "filename": "compiler/rustc_lexer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23a436606b118bd2fbb12f64fce21e7f9d355349/compiler%2Frustc_lexer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/23a436606b118bd2fbb12f64fce21e7f9d355349/compiler%2Frustc_lexer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2FCargo.toml?ref=23a436606b118bd2fbb12f64fce21e7f9d355349", "patch": "@@ -17,6 +17,7 @@ doctest = false\n # Note that this crate purposefully does not depend on other rustc crates\n [dependencies]\n unicode-xid = \"0.2.0\"\n+unic-emoji-char = \"0.9.0\"\n \n [dev-dependencies]\n expect-test = \"1.0\""}, {"sha": "44b002fa93f42d1843095450b593413e8956ef5e", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/23a436606b118bd2fbb12f64fce21e7f9d355349/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a436606b118bd2fbb12f64fce21e7f9d355349/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=23a436606b118bd2fbb12f64fce21e7f9d355349", "patch": "@@ -64,6 +64,8 @@ pub enum TokenKind {\n     /// \"ident\" or \"continue\"\n     /// At this step keywords are also considered identifiers.\n     Ident,\n+    /// Like the above, but containing invalid unicode codepoints.\n+    InvalidIdent,\n     /// \"r#ident\"\n     RawIdent,\n     /// An unknown prefix like `foo#`, `foo'`, `foo\"`. Note that only the\n@@ -411,6 +413,10 @@ impl Cursor<'_> {\n                 let kind = Str { terminated };\n                 Literal { kind, suffix_start }\n             }\n+            // Identifier starting with an emoji. Only lexed for graceful error recovery.\n+            c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {\n+                self.fake_ident_or_unknown_prefix()\n+            }\n             _ => Unknown,\n         };\n         Token::new(token_kind, self.len_consumed())\n@@ -492,10 +498,28 @@ impl Cursor<'_> {\n         // we see a prefix here, it is definitely an unknown prefix.\n         match self.first() {\n             '#' | '\"' | '\\'' => UnknownPrefix,\n+            c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {\n+                self.fake_ident_or_unknown_prefix()\n+            }\n             _ => Ident,\n         }\n     }\n \n+    fn fake_ident_or_unknown_prefix(&mut self) -> TokenKind {\n+        // Start is already eaten, eat the rest of identifier.\n+        self.eat_while(|c| {\n+            unicode_xid::UnicodeXID::is_xid_continue(c)\n+                || (!c.is_ascii() && unic_emoji_char::is_emoji(c))\n+                || c == '\\u{200d}'\n+        });\n+        // Known prefixes must have been handled earlier. So if\n+        // we see a prefix here, it is definitely an unknown prefix.\n+        match self.first() {\n+            '#' | '\"' | '\\'' => UnknownPrefix,\n+            _ => InvalidIdent,\n+        }\n+    }\n+\n     fn number(&mut self, first_digit: char) -> LiteralKind {\n         debug_assert!('0' <= self.prev() && self.prev() <= '9');\n         let mut base = Base::Decimal;"}, {"sha": "1a620968d56a8d092336304a562484b3341a98be", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/23a436606b118bd2fbb12f64fce21e7f9d355349/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a436606b118bd2fbb12f64fce21e7f9d355349/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=23a436606b118bd2fbb12f64fce21e7f9d355349", "patch": "@@ -1,3 +1,4 @@\n+use crate::lexer::unicode_chars::UNICODE_ARRAY;\n use rustc_ast::ast::{self, AttrStyle};\n use rustc_ast::token::{self, CommentKind, Token, TokenKind};\n use rustc_ast::tokenstream::{Spacing, TokenStream};\n@@ -222,6 +223,22 @@ impl<'a> StringReader<'a> {\n                 }\n                 token::Ident(sym, is_raw_ident)\n             }\n+            rustc_lexer::TokenKind::InvalidIdent\n+                // Do not recover an identifier with emoji if the codepoint is a confusable\n+                // with a recoverable substitution token, like `\u2796`.\n+                if UNICODE_ARRAY\n+                    .iter()\n+                    .find(|&&(c, _, _)| {\n+                        let sym = self.str_from(start);\n+                        sym.chars().count() == 1 && c == sym.chars().next().unwrap()\n+                    })\n+                    .is_none() =>\n+            {\n+                let sym = nfc_normalize(self.str_from(start));\n+                let span = self.mk_sp(start, self.pos);\n+                self.sess.bad_unicode_identifiers.borrow_mut().entry(sym).or_default().push(span);\n+                token::Ident(sym, false)\n+            }\n             rustc_lexer::TokenKind::Literal { kind, suffix_start } => {\n                 let suffix_start = start + BytePos(suffix_start as u32);\n                 let (kind, symbol) = self.cook_lexer_literal(start, suffix_start, kind);\n@@ -293,7 +310,7 @@ impl<'a> StringReader<'a> {\n             rustc_lexer::TokenKind::Caret => token::BinOp(token::Caret),\n             rustc_lexer::TokenKind::Percent => token::BinOp(token::Percent),\n \n-            rustc_lexer::TokenKind::Unknown => {\n+            rustc_lexer::TokenKind::Unknown | rustc_lexer::TokenKind::InvalidIdent => {\n                 let c = self.str_from(start).chars().next().unwrap();\n                 let mut err =\n                     self.struct_fatal_span_char(start, self.pos, \"unknown start of token\", c);"}, {"sha": "ccd11f06bc582e0fa8ddd9f9c9af39fac9433103", "filename": "compiler/rustc_parse/src/lexer/unicode_chars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23a436606b118bd2fbb12f64fce21e7f9d355349/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a436606b118bd2fbb12f64fce21e7f9d355349/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs?ref=23a436606b118bd2fbb12f64fce21e7f9d355349", "patch": "@@ -7,7 +7,7 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_span::{symbol::kw, BytePos, Pos, Span};\n \n #[rustfmt::skip] // for line breaks\n-const UNICODE_ARRAY: &[(char, &str, char)] = &[\n+pub(crate) const UNICODE_ARRAY: &[(char, &str, char)] = &[\n     ('\u2028', \"Line Separator\", ' '),\n     ('\u2029', \"Paragraph Separator\", ' '),\n     ('\u1680', \"Ogham Space mark\", ' '),"}, {"sha": "d5b520325e55094c3c1a161d697335da01714667", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/23a436606b118bd2fbb12f64fce21e7f9d355349/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a436606b118bd2fbb12f64fce21e7f9d355349/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=23a436606b118bd2fbb12f64fce21e7f9d355349", "patch": "@@ -119,8 +119,13 @@ pub struct ParseSess {\n     pub config: CrateConfig,\n     pub edition: Edition,\n     pub missing_fragment_specifiers: Lock<FxHashMap<Span, NodeId>>,\n-    /// Places where raw identifiers were used. This is used for feature-gating raw identifiers.\n+    /// Places where raw identifiers were used. This is used to avoid complaining about idents\n+    /// clashing with keywords in new editions.\n     pub raw_identifier_spans: Lock<Vec<Span>>,\n+    /// Places where identifiers that contain invalid Unicode codepoints but that look like they\n+    /// should be. Useful to avoid bad tokenization when encountering emoji. We group them to\n+    /// provide a single error per unique incorrect identifier.\n+    pub bad_unicode_identifiers: Lock<FxHashMap<Symbol, Vec<Span>>>,\n     source_map: Lrc<SourceMap>,\n     pub buffered_lints: Lock<Vec<BufferedEarlyLint>>,\n     /// Contains the spans of block expressions that could have been incomplete based on the\n@@ -160,6 +165,7 @@ impl ParseSess {\n             edition: ExpnId::root().expn_data().edition,\n             missing_fragment_specifiers: Default::default(),\n             raw_identifier_spans: Lock::new(Vec::new()),\n+            bad_unicode_identifiers: Lock::new(Default::default()),\n             source_map,\n             buffered_lints: Lock::new(vec![]),\n             ambiguous_block_expr_parse: Lock::new(FxHashMap::default()),"}, {"sha": "688860f94e183694215564553200c9c3c82f6e1d", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23a436606b118bd2fbb12f64fce21e7f9d355349/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a436606b118bd2fbb12f64fce21e7f9d355349/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=23a436606b118bd2fbb12f64fce21e7f9d355349", "patch": "@@ -632,7 +632,7 @@ impl<'a> Classifier<'a> {\n                 },\n                 Some(c) => c,\n             },\n-            TokenKind::RawIdent | TokenKind::UnknownPrefix => {\n+            TokenKind::RawIdent | TokenKind::UnknownPrefix | TokenKind::InvalidIdent => {\n                 Class::Ident(self.new_span(before, text))\n             }\n             TokenKind::Lifetime { .. } => Class::Lifetime,"}, {"sha": "ef18939bbb80c4b2fa777f200cf9a6755305663f", "filename": "src/test/ui/parser/emoji-identifiers.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/23a436606b118bd2fbb12f64fce21e7f9d355349/src%2Ftest%2Fui%2Fparser%2Femoji-identifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a436606b118bd2fbb12f64fce21e7f9d355349/src%2Ftest%2Fui%2Fparser%2Femoji-identifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Femoji-identifiers.rs?ref=23a436606b118bd2fbb12f64fce21e7f9d355349", "patch": "@@ -0,0 +1,16 @@\n+struct ABig\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67Family; //~ ERROR identifiers cannot contain emoji\n+struct \ud83d\udc40; //~ ERROR identifiers cannot contain emoji\n+impl \ud83d\udc40 {\n+    fn full_of_\u2728() -> \ud83d\udc40 { //~ ERROR identifiers cannot contain emoji\n+        \ud83d\udc40\n+    }\n+}\n+fn i_like_to_\ud83d\ude05_a_lot() -> \ud83d\udc40 { //~ ERROR identifiers cannot contain emoji\n+    \ud83d\udc40::full_of\u2728() //~ ERROR no function or associated item named `full_of\u2728` found for struct `\ud83d\udc40`\n+    //~^ ERROR identifiers cannot contain emoji\n+}\n+fn main() {\n+    let _ = i_like_to_\ud83d\ude04_a_lot() \u2796 4; //~ ERROR cannot find function `i_like_to_\ud83d\ude04_a_lot` in this scope\n+    //~^ ERROR identifiers cannot contain emoji\n+    //~| ERROR unknown start of token: \\u{2796}\n+}"}, {"sha": "5f9263c4c13e7416f913100f954b1b31fc853a58", "filename": "src/test/ui/parser/emoji-identifiers.stderr", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/23a436606b118bd2fbb12f64fce21e7f9d355349/src%2Ftest%2Fui%2Fparser%2Femoji-identifiers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23a436606b118bd2fbb12f64fce21e7f9d355349/src%2Ftest%2Fui%2Fparser%2Femoji-identifiers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Femoji-identifiers.stderr?ref=23a436606b118bd2fbb12f64fce21e7f9d355349", "patch": "@@ -0,0 +1,83 @@\n+error: unknown start of token: \\u{2796}\n+  --> $DIR/emoji-identifiers.rs:13:33\n+   |\n+LL |     let _ = i_like_to_\ud83d\ude04_a_lot() \u2796 4;\n+   |                                  ^^\n+   |\n+help: Unicode character '\u2796' (Heavy Minus Sign) looks like '-' (Minus/Hyphen), but it is not\n+   |\n+LL |     let _ = i_like_to_\ud83d\ude04_a_lot() - 4;\n+   |                                  ~\n+\n+error[E0425]: cannot find function `i_like_to_\ud83d\ude04_a_lot` in this scope\n+  --> $DIR/emoji-identifiers.rs:13:13\n+   |\n+LL | fn i_like_to_\ud83d\ude05_a_lot() -> \ud83d\udc40 {\n+   | ----------------------------- similarly named function `i_like_to_\ud83d\ude05_a_lot` defined here\n+...\n+LL |     let _ = i_like_to_\ud83d\ude04_a_lot() \u2796 4;\n+   |             ^^^^^^^^^^^^^^^^^^ help: a function with a similar name exists: `i_like_to_\ud83d\ude05_a_lot`\n+\n+error: identifiers cannot contain emoji: `ABig\ud83d\udc69\ud83d\udc69\ud83d\udc67\ud83d\udc67Family`\n+  --> $DIR/emoji-identifiers.rs:1:8\n+   |\n+LL | struct ABig\ud83d\udc69\ud83d\udc69\ud83d\udc67\ud83d\udc67Family;\n+   |        ^^^^^^^^^^^^^^^^^^\n+\n+error: identifiers cannot contain emoji: `\ud83d\udc40`\n+  --> $DIR/emoji-identifiers.rs:2:8\n+   |\n+LL | struct \ud83d\udc40;\n+   |        ^^\n+LL | impl \ud83d\udc40 {\n+   |      ^^\n+LL |     fn full_of_\u2728() -> \ud83d\udc40 {\n+   |                        ^^\n+LL |         \ud83d\udc40\n+   |         ^^\n+...\n+LL | fn i_like_to_\ud83d\ude05_a_lot() -> \ud83d\udc40 {\n+   |                            ^^\n+LL |     \ud83d\udc40::full_of\u2728()\n+   |     ^^\n+\n+error: identifiers cannot contain emoji: `full_of_\u2728`\n+  --> $DIR/emoji-identifiers.rs:4:8\n+   |\n+LL |     fn full_of_\u2728() -> \ud83d\udc40 {\n+   |        ^^^^^^^^^^\n+\n+error: identifiers cannot contain emoji: `i_like_to_\ud83d\ude05_a_lot`\n+  --> $DIR/emoji-identifiers.rs:8:4\n+   |\n+LL | fn i_like_to_\ud83d\ude05_a_lot() -> \ud83d\udc40 {\n+   |    ^^^^^^^^^^^^^^^^^^\n+\n+error: identifiers cannot contain emoji: `full_of\u2728`\n+  --> $DIR/emoji-identifiers.rs:9:8\n+   |\n+LL |     \ud83d\udc40::full_of\u2728()\n+   |         ^^^^^^^^^\n+\n+error: identifiers cannot contain emoji: `i_like_to_\ud83d\ude04_a_lot`\n+  --> $DIR/emoji-identifiers.rs:13:13\n+   |\n+LL |     let _ = i_like_to_\ud83d\ude04_a_lot() \u2796 4;\n+   |             ^^^^^^^^^^^^^^^^^^\n+\n+error[E0599]: no function or associated item named `full_of\u2728` found for struct `\ud83d\udc40` in the current scope\n+  --> $DIR/emoji-identifiers.rs:9:8\n+   |\n+LL | struct \ud83d\udc40;\n+   | ---------- function or associated item `full_of\u2728` not found for this\n+...\n+LL |     \ud83d\udc40::full_of\u2728()\n+   |         ^^^^^^^^^\n+   |         |\n+   |         function or associated item not found in `\ud83d\udc40`\n+   |         help: there is an associated function with a similar name: `full_of_\u2728`\n+\n+error: aborting due to 9 previous errors\n+\n+Some errors have detailed explanations: E0425, E0599.\n+For more information about an error, try `rustc --explain E0425`."}, {"sha": "7f08ace4f1305de7f3b1b0e2f765911957226bd4", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=23a436606b118bd2fbb12f64fce21e7f9d355349", "patch": "@@ -1 +1 @@\n-Subproject commit e1fb17631eb1b3665cdbe45b1c186111577ef512\n+Subproject commit 7f08ace4f1305de7f3b1b0e2f765911957226bd4"}, {"sha": "bc33284f31e2e903b2c3342da6f835cb6ce7e1f7", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/23a436606b118bd2fbb12f64fce21e7f9d355349/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a436606b118bd2fbb12f64fce21e7f9d355349/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=23a436606b118bd2fbb12f64fce21e7f9d355349", "patch": "@@ -82,8 +82,8 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"bitflags\",\n     \"block-buffer\",\n     \"block-padding\",\n-    \"byteorder\",\n     \"byte-tools\",\n+    \"byteorder\",\n     \"cc\",\n     \"cfg-if\",\n     \"chalk-derive\",\n@@ -140,9 +140,9 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"memmap2\",\n     \"memoffset\",\n     \"miniz_oxide\",\n-    \"num_cpus\",\n     \"num-integer\",\n     \"num-traits\",\n+    \"num_cpus\",\n     \"object\",\n     \"odht\",\n     \"once_cell\",\n@@ -190,8 +190,8 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"serde_json\",\n     \"sha-1\",\n     \"sha2\",\n-    \"smallvec\",\n     \"sharded-slab\",\n+    \"smallvec\",\n     \"snap\",\n     \"stable_deref_trait\",\n     \"stacker\",\n@@ -211,6 +211,11 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"tracing-subscriber\",\n     \"tracing-tree\",\n     \"typenum\",\n+    \"unic-char-property\",\n+    \"unic-char-range\",\n+    \"unic-common\",\n+    \"unic-emoji-char\",\n+    \"unic-ucd-version\",\n     \"unicode-normalization\",\n     \"unicode-script\",\n     \"unicode-security\","}]}