{"sha": "68d0b29098ed75f50dabc7d07b96c70caab5c182", "node_id": "C_kwDOAAsO6NoAKDY4ZDBiMjkwOThlZDc1ZjUwZGFiYzdkMDdiOTZjNzBjYWFiNWMxODI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-19T14:51:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-19T14:51:28Z"}, "message": "Auto merge of #98255 - Dylan-DPC:rollup-hr129rg, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #98105 (rustdoc: remove tuple link on round braces)\n - #98136 (Rename `impl_constness` to `constness`)\n - #98146 (Remove --memory-init-file flag when linking with Emscripten)\n - #98219 (Skip late bound regions in GATSubstCollector)\n - #98233 (Remove accidental uses of `&A: Allocator`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "4aab4e2b4b5778738a08618abb7670c0221ff637", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4aab4e2b4b5778738a08618abb7670c0221ff637"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68d0b29098ed75f50dabc7d07b96c70caab5c182", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68d0b29098ed75f50dabc7d07b96c70caab5c182", "html_url": "https://github.com/rust-lang/rust/commit/68d0b29098ed75f50dabc7d07b96c70caab5c182", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68d0b29098ed75f50dabc7d07b96c70caab5c182/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67404f7200c13deec255ffe1146e1d2c9d0d3028", "url": "https://api.github.com/repos/rust-lang/rust/commits/67404f7200c13deec255ffe1146e1d2c9d0d3028", "html_url": "https://github.com/rust-lang/rust/commit/67404f7200c13deec255ffe1146e1d2c9d0d3028"}, {"sha": "6a2a56da451a357141bc8c929045ec2aafa3421f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a2a56da451a357141bc8c929045ec2aafa3421f", "html_url": "https://github.com/rust-lang/rust/commit/6a2a56da451a357141bc8c929045ec2aafa3421f"}], "stats": {"total": 171, "additions": 98, "deletions": 73}, "files": [{"sha": "8ac5f094cf6ee0cbc36f5bf55448a5d404348717", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d0b29098ed75f50dabc7d07b96c70caab5c182/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d0b29098ed75f50dabc7d07b96c70caab5c182/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=68d0b29098ed75f50dabc7d07b96c70caab5c182", "patch": "@@ -1120,8 +1120,6 @@ impl<'a> Linker for EmLinker<'a> {\n             OptLevel::Size => \"-Os\",\n             OptLevel::SizeMin => \"-Oz\",\n         });\n-        // Unusable until https://github.com/rust-lang/rust/issues/38454 is resolved\n-        self.cmd.args(&[\"--memory-init-file\", \"0\"]);\n     }\n \n     fn pgo_gen(&mut self) {"}, {"sha": "f1674d04f8d15f16be1f3011eaead81daad003e7", "filename": "compiler/rustc_const_eval/src/const_eval/fn_queries.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/68d0b29098ed75f50dabc7d07b96c70caab5c182/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d0b29098ed75f50dabc7d07b96c70caab5c182/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=68d0b29098ed75f50dabc7d07b96c70caab5c182", "patch": "@@ -17,13 +17,14 @@ pub fn is_unstable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Symbol> {\n \n pub fn is_parent_const_impl_raw(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n     let parent_id = tcx.local_parent(def_id);\n-    tcx.def_kind(parent_id) == DefKind::Impl\n-        && tcx.impl_constness(parent_id) == hir::Constness::Const\n+    tcx.def_kind(parent_id) == DefKind::Impl && tcx.constness(parent_id) == hir::Constness::Const\n }\n \n-/// Checks whether the function has a `const` modifier or, in case it is an intrinsic, whether\n-/// said intrinsic has a `rustc_const_{un,}stable` attribute.\n-fn impl_constness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Constness {\n+/// Checks whether an item is considered to be `const`. If it is a constructor, it is const. If\n+/// it is a trait impl/function, return if it has a `const` modifier. If it is an intrinsic,\n+/// report whether said intrinsic has a `rustc_const_{un,}stable` attribute. Otherwise, return\n+/// `Constness::NotConst`.\n+fn constness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Constness {\n     let def_id = def_id.expect_local();\n     let node = tcx.hir().get_by_def_id(def_id);\n \n@@ -77,5 +78,5 @@ fn is_promotable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n }\n \n pub fn provide(providers: &mut Providers) {\n-    *providers = Providers { impl_constness, is_promotable_const_fn, ..*providers };\n+    *providers = Providers { constness, is_promotable_const_fn, ..*providers };\n }"}, {"sha": "069fbed36ee3a0190797be7ad2e7e304a0bbabe2", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d0b29098ed75f50dabc7d07b96c70caab5c182/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d0b29098ed75f50dabc7d07b96c70caab5c182/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=68d0b29098ed75f50dabc7d07b96c70caab5c182", "patch": "@@ -753,7 +753,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                                 callee = did;\n                             }\n \n-                            if let hir::Constness::NotConst = tcx.impl_constness(data.impl_def_id) {\n+                            if let hir::Constness::NotConst = tcx.constness(data.impl_def_id) {\n                                 self.check_op(ops::FnCallNonConst {\n                                     caller,\n                                     callee,"}, {"sha": "0bea2a10da8967094d0ef605cd53092eae6ab028", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d0b29098ed75f50dabc7d07b96c70caab5c182/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d0b29098ed75f50dabc7d07b96c70caab5c182/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=68d0b29098ed75f50dabc7d07b96c70caab5c182", "patch": "@@ -214,7 +214,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     impl_parent => { table }\n     impl_polarity => { table_direct }\n     impl_defaultness => { table_direct }\n-    impl_constness => { table_direct }\n+    constness => { table_direct }\n     coerce_unsized_info => { table }\n     mir_const_qualif => { table }\n     rendered_const => { table }"}, {"sha": "75286b8906871a81e2a4c0cb05002c57bd460c4e", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/68d0b29098ed75f50dabc7d07b96c70caab5c182/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d0b29098ed75f50dabc7d07b96c70caab5c182/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=68d0b29098ed75f50dabc7d07b96c70caab5c182", "patch": "@@ -1063,7 +1063,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));\n-        self.tables.impl_constness.set(def_id.index, hir::Constness::Const);\n+        self.tables.constness.set(def_id.index, hir::Constness::Const);\n         record_array!(self.tables.children[def_id] <- variant.fields.iter().map(|f| {\n             assert!(f.did.is_local());\n             f.did.index\n@@ -1092,7 +1092,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));\n-        self.tables.impl_constness.set(def_id.index, hir::Constness::Const);\n+        self.tables.constness.set(def_id.index, hir::Constness::Const);\n         self.encode_item_type(def_id);\n         if variant.ctor_kind == CtorKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n@@ -1175,7 +1175,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.repr_options[def_id] <- adt_def.repr());\n-        self.tables.impl_constness.set(def_id.index, hir::Constness::Const);\n+        self.tables.constness.set(def_id.index, hir::Constness::Const);\n         record!(self.tables.kind[def_id] <- EntryKind::Struct(self.lazy(data)));\n         self.encode_item_type(def_id);\n         if variant.ctor_kind == CtorKind::Fn {\n@@ -1226,7 +1226,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     }\n                 };\n                 self.tables.asyncness.set(def_id.index, m_sig.header.asyncness);\n-                self.tables.impl_constness.set(def_id.index, hir::Constness::NotConst);\n+                self.tables.constness.set(def_id.index, hir::Constness::NotConst);\n                 record!(self.tables.kind[def_id] <- EntryKind::AssocFn(self.lazy(AssocFnData {\n                     container,\n                     has_self: trait_item.fn_has_self_parameter,\n@@ -1290,7 +1290,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 } else {\n                     hir::Constness::NotConst\n                 };\n-                self.tables.impl_constness.set(def_id.index, constness);\n+                self.tables.constness.set(def_id.index, constness);\n                 record!(self.tables.kind[def_id] <- EntryKind::AssocFn(self.lazy(AssocFnData {\n                     container,\n                     has_self: impl_item.fn_has_self_parameter,\n@@ -1413,7 +1413,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hir::ItemKind::Fn(ref sig, .., body) => {\n                 self.tables.asyncness.set(def_id.index, sig.header.asyncness);\n                 record_array!(self.tables.fn_arg_names[def_id] <- self.tcx.hir().body_param_names(body));\n-                self.tables.impl_constness.set(def_id.index, sig.header.constness);\n+                self.tables.constness.set(def_id.index, sig.header.constness);\n                 EntryKind::Fn\n             }\n             hir::ItemKind::Macro(ref macro_def, _) => {\n@@ -1437,7 +1437,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hir::ItemKind::Struct(ref struct_def, _) => {\n                 let adt_def = self.tcx.adt_def(def_id);\n                 record!(self.tables.repr_options[def_id] <- adt_def.repr());\n-                self.tables.impl_constness.set(def_id.index, hir::Constness::Const);\n+                self.tables.constness.set(def_id.index, hir::Constness::Const);\n \n                 // Encode def_ids for each field and method\n                 // for methods, write all the stuff get_trait_method\n@@ -1468,7 +1468,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             }\n             hir::ItemKind::Impl(hir::Impl { defaultness, constness, .. }) => {\n                 self.tables.impl_defaultness.set(def_id.index, *defaultness);\n-                self.tables.impl_constness.set(def_id.index, *constness);\n+                self.tables.constness.set(def_id.index, *constness);\n \n                 let trait_ref = self.tcx.impl_trait_ref(def_id);\n                 if let Some(trait_ref) = trait_ref {\n@@ -1934,7 +1934,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 } else {\n                     hir::Constness::NotConst\n                 };\n-                self.tables.impl_constness.set(def_id.index, constness);\n+                self.tables.constness.set(def_id.index, constness);\n                 record!(self.tables.kind[def_id] <- EntryKind::ForeignFn);\n             }\n             hir::ForeignItemKind::Static(..) => {"}, {"sha": "a58c0e68ee38c3dfe1506a2805549c911589835e", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d0b29098ed75f50dabc7d07b96c70caab5c182/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d0b29098ed75f50dabc7d07b96c70caab5c182/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=68d0b29098ed75f50dabc7d07b96c70caab5c182", "patch": "@@ -364,7 +364,7 @@ define_tables! {\n     thir_abstract_const: Table<DefIndex, LazyValue<&'static [thir::abstract_const::Node<'static>]>>,\n     impl_parent: Table<DefIndex, RawDefId>,\n     impl_polarity: Table<DefIndex, ty::ImplPolarity>,\n-    impl_constness: Table<DefIndex, hir::Constness>,\n+    constness: Table<DefIndex, hir::Constness>,\n     is_intrinsic: Table<DefIndex, ()>,\n     impl_defaultness: Table<DefIndex, hir::Defaultness>,\n     // FIXME(eddyb) perhaps compute this on the fly if cheap enough?"}, {"sha": "ca2c03cb614bb5747980af10bb4f8cdcb4a7f423", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68d0b29098ed75f50dabc7d07b96c70caab5c182/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d0b29098ed75f50dabc7d07b96c70caab5c182/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=68d0b29098ed75f50dabc7d07b96c70caab5c182", "patch": "@@ -590,9 +590,9 @@ rustc_queries! {\n     /// not have the feature gate active).\n     ///\n     /// **Do not call this function manually.** It is only meant to cache the base data for the\n-    /// `is_const_fn` function.\n-    query impl_constness(key: DefId) -> hir::Constness {\n-        desc { |tcx| \"checking if item is const fn: `{}`\", tcx.def_path_str(key) }\n+    /// `is_const_fn` function. Consider using `is_const_fn` or `is_const_fn_raw` instead.\n+    query constness(key: DefId) -> hir::Constness {\n+        desc { |tcx| \"checking if item is const: `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n     }"}, {"sha": "6789f02c46abfd03bb832ff4201b7a7476965876", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d0b29098ed75f50dabc7d07b96c70caab5c182/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d0b29098ed75f50dabc7d07b96c70caab5c182/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=68d0b29098ed75f50dabc7d07b96c70caab5c182", "patch": "@@ -2341,7 +2341,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     #[inline]\n     pub fn is_const_fn_raw(self, def_id: DefId) -> bool {\n         matches!(self.def_kind(def_id), DefKind::Fn | DefKind::AssocFn | DefKind::Ctor(..))\n-            && self.impl_constness(def_id) == hir::Constness::Const\n+            && self.constness(def_id) == hir::Constness::Const\n     }\n \n     #[inline]"}, {"sha": "b9c95813121398e49401e84ba23ae80e580bb8b0", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d0b29098ed75f50dabc7d07b96c70caab5c182/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d0b29098ed75f50dabc7d07b96c70caab5c182/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=68d0b29098ed75f50dabc7d07b96c70caab5c182", "patch": "@@ -376,7 +376,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let (did, constness) = self.find_map_relevant_impl(drop_trait, ty, |impl_did| {\n             if let Some(item_id) = self.associated_item_def_ids(impl_did).first() {\n                 if validate(self, impl_did).is_ok() {\n-                    return Some((*item_id, self.impl_constness(impl_did)));\n+                    return Some((*item_id, self.constness(impl_did)));\n                 }\n             }\n             None"}, {"sha": "269bf8b8bcd49814a371c96d360562758396c4e5", "filename": "compiler/rustc_target/src/spec/asmjs_unknown_emscripten.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68d0b29098ed75f50dabc7d07b96c70caab5c182/compiler%2Frustc_target%2Fsrc%2Fspec%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d0b29098ed75f50dabc7d07b96c70caab5c182/compiler%2Frustc_target%2Fsrc%2Fspec%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fasmjs_unknown_emscripten.rs?ref=68d0b29098ed75f50dabc7d07b96c70caab5c182", "patch": "@@ -2,10 +2,10 @@ use super::{wasm32_unknown_emscripten, LinkerFlavor, Target};\n \n pub fn target() -> Target {\n     let mut target = wasm32_unknown_emscripten::target();\n-    target\n-        .post_link_args\n-        .entry(LinkerFlavor::Em)\n-        .or_default()\n-        .extend(vec![\"-s\".into(), \"WASM=0\".into()]);\n+    target.post_link_args.entry(LinkerFlavor::Em).or_default().extend(vec![\n+        \"-sWASM=0\".into(),\n+        \"--memory-init-file\".into(),\n+        \"0\".into(),\n+    ]);\n     target\n }"}, {"sha": "cfd50c1afb9e228ffb56978ae3c20f0f13979193", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d0b29098ed75f50dabc7d07b96c70caab5c182/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d0b29098ed75f50dabc7d07b96c70caab5c182/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=68d0b29098ed75f50dabc7d07b96c70caab5c182", "patch": "@@ -970,7 +970,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n                 if let Some(impl_def_id) = relevant_impl {\n                     // Check that `impl Drop` is actually const, if there is a custom impl\n-                    if self.tcx().impl_constness(impl_def_id) == hir::Constness::Const {\n+                    if self.tcx().constness(impl_def_id) == hir::Constness::Const {\n                         candidates.vec.push(ConstDestructCandidate(Some(impl_def_id)));\n                     }\n                 } else {"}, {"sha": "297fbfa1c327653e60e6551ab68d28a619729a69", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68d0b29098ed75f50dabc7d07b96c70caab5c182/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d0b29098ed75f50dabc7d07b96c70caab5c182/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=68d0b29098ed75f50dabc7d07b96c70caab5c182", "patch": "@@ -1119,8 +1119,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             if obligation.is_const() {\n                 match candidate {\n                     // const impl\n-                    ImplCandidate(def_id)\n-                        if tcx.impl_constness(def_id) == hir::Constness::Const => {}\n+                    ImplCandidate(def_id) if tcx.constness(def_id) == hir::Constness::Const => {}\n                     // const param\n                     ParamCandidate(trait_pred) if trait_pred.is_const_if_const() => {}\n                     // auto trait impl"}, {"sha": "7931215389575031d212d1070ffabf492208c482", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/68d0b29098ed75f50dabc7d07b96c70caab5c182/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d0b29098ed75f50dabc7d07b96c70caab5c182/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=68d0b29098ed75f50dabc7d07b96c70caab5c182", "patch": "@@ -490,7 +490,7 @@ fn gather_gat_bounds<'tcx, T: TypeFoldable<'tcx>>(\n     // The bounds we that we would require from `to_check`\n     let mut bounds = FxHashSet::default();\n \n-    let (regions, types) = GATSubstCollector::visit(tcx, gat_def_id.to_def_id(), to_check);\n+    let (regions, types) = GATSubstCollector::visit(gat_def_id.to_def_id(), to_check);\n \n     // If both regions and types are empty, then this GAT isn't in the\n     // set of types we are checking, and we shouldn't try to do clause analysis\n@@ -664,7 +664,6 @@ fn resolve_regions_with_wf_tys<'tcx>(\n /// the two vectors, `regions` and `types` (depending on their kind). For each\n /// parameter `Pi` also track the index `i`.\n struct GATSubstCollector<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n     gat: DefId,\n     // Which region appears and which parameter index its substituted for\n     regions: FxHashSet<(ty::Region<'tcx>, usize)>,\n@@ -674,16 +673,11 @@ struct GATSubstCollector<'tcx> {\n \n impl<'tcx> GATSubstCollector<'tcx> {\n     fn visit<T: TypeFoldable<'tcx>>(\n-        tcx: TyCtxt<'tcx>,\n         gat: DefId,\n         t: T,\n     ) -> (FxHashSet<(ty::Region<'tcx>, usize)>, FxHashSet<(Ty<'tcx>, usize)>) {\n-        let mut visitor = GATSubstCollector {\n-            tcx,\n-            gat,\n-            regions: FxHashSet::default(),\n-            types: FxHashSet::default(),\n-        };\n+        let mut visitor =\n+            GATSubstCollector { gat, regions: FxHashSet::default(), types: FxHashSet::default() };\n         t.visit_with(&mut visitor);\n         (visitor.regions, visitor.types)\n     }\n@@ -692,19 +686,12 @@ impl<'tcx> GATSubstCollector<'tcx> {\n impl<'tcx> TypeVisitor<'tcx> for GATSubstCollector<'tcx> {\n     type BreakTy = !;\n \n-    fn visit_binder<T: TypeFoldable<'tcx>>(\n-        &mut self,\n-        t: &ty::Binder<'tcx, T>,\n-    ) -> ControlFlow<Self::BreakTy> {\n-        self.tcx.liberate_late_bound_regions(self.gat, t.clone()).visit_with(self)\n-    }\n-\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match t.kind() {\n             ty::Projection(p) if p.item_def_id == self.gat => {\n                 for (idx, subst) in p.substs.iter().enumerate() {\n                     match subst.unpack() {\n-                        GenericArgKind::Lifetime(lt) => {\n+                        GenericArgKind::Lifetime(lt) if !lt.is_late_bound() => {\n                             self.regions.insert((lt, idx));\n                         }\n                         GenericArgKind::Type(t) => {"}, {"sha": "28068a880609619c1a0d9192764c30b58a8b0e93", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68d0b29098ed75f50dabc7d07b96c70caab5c182/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d0b29098ed75f50dabc7d07b96c70caab5c182/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=68d0b29098ed75f50dabc7d07b96c70caab5c182", "patch": "@@ -1644,11 +1644,11 @@ impl<K, V, A: Allocator + Clone> IntoIter<K, V, A> {\n         &mut self,\n     ) -> Option<Handle<NodeRef<marker::Dying, K, V, marker::LeafOrInternal>, marker::KV>> {\n         if self.length == 0 {\n-            self.range.deallocating_end(&self.alloc);\n+            self.range.deallocating_end(self.alloc.clone());\n             None\n         } else {\n             self.length -= 1;\n-            Some(unsafe { self.range.deallocating_next_unchecked(&self.alloc) })\n+            Some(unsafe { self.range.deallocating_next_unchecked(self.alloc.clone()) })\n         }\n     }\n \n@@ -1658,11 +1658,11 @@ impl<K, V, A: Allocator + Clone> IntoIter<K, V, A> {\n         &mut self,\n     ) -> Option<Handle<NodeRef<marker::Dying, K, V, marker::LeafOrInternal>, marker::KV>> {\n         if self.length == 0 {\n-            self.range.deallocating_end(&self.alloc);\n+            self.range.deallocating_end(self.alloc.clone());\n             None\n         } else {\n             self.length -= 1;\n-            Some(unsafe { self.range.deallocating_next_back_unchecked(&self.alloc) })\n+            Some(unsafe { self.range.deallocating_next_back_unchecked(self.alloc.clone()) })\n         }\n     }\n }\n@@ -1849,7 +1849,7 @@ where\n     type Item = (K, V);\n \n     fn next(&mut self) -> Option<(K, V)> {\n-        self.inner.next(&mut self.pred, &self.alloc)\n+        self.inner.next(&mut self.pred, self.alloc.clone())\n     }\n \n     fn size_hint(&self) -> (usize, Option<usize>) {"}, {"sha": "0d3fdc9019efd792668ecb166a43d065f2b15d16", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d0b29098ed75f50dabc7d07b96c70caab5c182/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d0b29098ed75f50dabc7d07b96c70caab5c182/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=68d0b29098ed75f50dabc7d07b96c70caab5c182", "patch": "@@ -1320,7 +1320,7 @@ where\n     fn next(&mut self) -> Option<T> {\n         let pred = &mut self.pred;\n         let mut mapped_pred = |k: &T, _v: &mut ()| pred(k);\n-        self.inner.next(&mut mapped_pred, &self.alloc).map(|(k, _)| k)\n+        self.inner.next(&mut mapped_pred, self.alloc.clone()).map(|(k, _)| k)\n     }\n \n     fn size_hint(&self) -> (usize, Option<usize>) {"}, {"sha": "d554ec590358fd6f37d7745fbb18ba8dfd794961", "filename": "library/std/src/alloc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68d0b29098ed75f50dabc7d07b96c70caab5c182/library%2Fstd%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d0b29098ed75f50dabc7d07b96c70caab5c182/library%2Fstd%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Falloc.rs?ref=68d0b29098ed75f50dabc7d07b96c70caab5c182", "patch": "@@ -187,7 +187,7 @@ impl System {\n             old_size => unsafe {\n                 let new_ptr = self.alloc_impl(new_layout, zeroed)?;\n                 ptr::copy_nonoverlapping(ptr.as_ptr(), new_ptr.as_mut_ptr(), old_size);\n-                Allocator::deallocate(&self, ptr, old_layout);\n+                Allocator::deallocate(self, ptr, old_layout);\n                 Ok(new_ptr)\n             },\n         }\n@@ -254,7 +254,7 @@ unsafe impl Allocator for System {\n         match new_layout.size() {\n             // SAFETY: conditions must be upheld by the caller\n             0 => unsafe {\n-                Allocator::deallocate(&self, ptr, old_layout);\n+                Allocator::deallocate(self, ptr, old_layout);\n                 Ok(NonNull::slice_from_raw_parts(new_layout.dangling(), 0))\n             },\n \n@@ -274,9 +274,9 @@ unsafe impl Allocator for System {\n             // `new_ptr`. Thus, the call to `copy_nonoverlapping` is safe. The safety contract\n             // for `dealloc` must be upheld by the caller.\n             new_size => unsafe {\n-                let new_ptr = Allocator::allocate(&self, new_layout)?;\n+                let new_ptr = Allocator::allocate(self, new_layout)?;\n                 ptr::copy_nonoverlapping(ptr.as_ptr(), new_ptr.as_mut_ptr(), new_size);\n-                Allocator::deallocate(&self, ptr, old_layout);\n+                Allocator::deallocate(self, ptr, old_layout);\n                 Ok(new_ptr)\n             },\n         }"}, {"sha": "70b6af717cd384c81526a267ee437e75d134ac51", "filename": "src/etc/htmldocck.py", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68d0b29098ed75f50dabc7d07b96c70caab5c182/src%2Fetc%2Fhtmldocck.py", "raw_url": "https://github.com/rust-lang/rust/raw/68d0b29098ed75f50dabc7d07b96c70caab5c182/src%2Fetc%2Fhtmldocck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fhtmldocck.py?ref=68d0b29098ed75f50dabc7d07b96c70caab5c182", "patch": "@@ -417,7 +417,7 @@ def check_snapshot(snapshot_name, actual_tree, normalize_to_text):\n     snapshot_path = '{}.{}.{}'.format(rust_test_path[:-3], snapshot_name, 'html')\n     try:\n         with open(snapshot_path, 'r') as snapshot_file:\n-            expected_str = snapshot_file.read()\n+            expected_str = snapshot_file.read().replace(\"{{channel}}\", channel)\n     except FileNotFoundError:\n         if bless:\n             expected_str = None\n@@ -429,8 +429,6 @@ def check_snapshot(snapshot_name, actual_tree, normalize_to_text):\n     else:\n         actual_str = flatten(actual_tree)\n \n-    expected_str = expected_str.replace(\"{{channel}}\", channel)\n-\n     # Conditions:\n     #  1. Is --bless\n     #  2. Are actual and expected tree different"}, {"sha": "5baa53d55545f5ce6c760b667c58869cdc8b72b2", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/68d0b29098ed75f50dabc7d07b96c70caab5c182/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d0b29098ed75f50dabc7d07b96c70caab5c182/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=68d0b29098ed75f50dabc7d07b96c70caab5c182", "patch": "@@ -23,6 +23,8 @@ use rustc_span::symbol::kw;\n use rustc_span::{sym, Symbol};\n use rustc_target::spec::abi::Abi;\n \n+use itertools::Itertools;\n+\n use crate::clean::{\n     self, types::ExternalLocation, utils::find_nearest_parent_module, ExternalCrate, ItemId,\n     PrimitiveType,\n@@ -874,20 +876,42 @@ fn fmt_type<'cx>(\n             match &typs[..] {\n                 &[] => primitive_link(f, PrimitiveType::Unit, \"()\", cx),\n                 &[ref one] => {\n-                    primitive_link(f, PrimitiveType::Tuple, \"(\", cx)?;\n-                    // Carry `f.alternate()` into this display w/o branching manually.\n-                    fmt::Display::fmt(&one.print(cx), f)?;\n-                    primitive_link(f, PrimitiveType::Tuple, \",)\", cx)\n+                    if let clean::Generic(name) = one {\n+                        primitive_link(f, PrimitiveType::Tuple, &format!(\"({name},)\"), cx)\n+                    } else {\n+                        write!(f, \"(\")?;\n+                        // Carry `f.alternate()` into this display w/o branching manually.\n+                        fmt::Display::fmt(&one.print(cx), f)?;\n+                        write!(f, \",)\")\n+                    }\n                 }\n                 many => {\n-                    primitive_link(f, PrimitiveType::Tuple, \"(\", cx)?;\n-                    for (i, item) in many.iter().enumerate() {\n-                        if i != 0 {\n-                            write!(f, \", \")?;\n+                    let generic_names: Vec<Symbol> = many\n+                        .iter()\n+                        .filter_map(|t| match t {\n+                            clean::Generic(name) => Some(*name),\n+                            _ => None,\n+                        })\n+                        .collect();\n+                    let is_generic = generic_names.len() == many.len();\n+                    if is_generic {\n+                        primitive_link(\n+                            f,\n+                            PrimitiveType::Tuple,\n+                            &format!(\"({})\", generic_names.iter().map(|s| s.as_str()).join(\", \")),\n+                            cx,\n+                        )\n+                    } else {\n+                        write!(f, \"(\")?;\n+                        for (i, item) in many.iter().enumerate() {\n+                            if i != 0 {\n+                                write!(f, \", \")?;\n+                            }\n+                            // Carry `f.alternate()` into this display w/o branching manually.\n+                            fmt::Display::fmt(&item.print(cx), f)?;\n                         }\n-                        fmt::Display::fmt(&item.print(cx), f)?;\n+                        write!(f, \")\")\n                     }\n-                    primitive_link(f, PrimitiveType::Tuple, \")\", cx)\n                 }\n             }\n         }"}, {"sha": "4efde28ed52e78d6bd043d6c986c7f6d7b6f8793", "filename": "src/test/rustdoc/tuples.link1_i32.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68d0b29098ed75f50dabc7d07b96c70caab5c182/src%2Ftest%2Frustdoc%2Ftuples.link1_i32.html", "raw_url": "https://github.com/rust-lang/rust/raw/68d0b29098ed75f50dabc7d07b96c70caab5c182/src%2Ftest%2Frustdoc%2Ftuples.link1_i32.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftuples.link1_i32.html?ref=68d0b29098ed75f50dabc7d07b96c70caab5c182", "patch": "@@ -0,0 +1 @@\n+<code>pub fn tuple1(x: (<a class=\"primitive\" href=\"{{channel}}/std/primitive.i32.html\">i32</a>,)) -&gt; (<a class=\"primitive\" href=\"{{channel}}/std/primitive.i32.html\">i32</a>,)</code>\n\\ No newline at end of file"}, {"sha": "1cbaec05733b54e6b84f1b7d4a14368b36277a20", "filename": "src/test/rustdoc/tuples.link1_t.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68d0b29098ed75f50dabc7d07b96c70caab5c182/src%2Ftest%2Frustdoc%2Ftuples.link1_t.html", "raw_url": "https://github.com/rust-lang/rust/raw/68d0b29098ed75f50dabc7d07b96c70caab5c182/src%2Ftest%2Frustdoc%2Ftuples.link1_t.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftuples.link1_t.html?ref=68d0b29098ed75f50dabc7d07b96c70caab5c182", "patch": "@@ -0,0 +1 @@\n+<code>pub fn tuple1_t&lt;T&gt;(x: <a class=\"primitive\" href=\"{{channel}}/std/primitive.tuple.html\">(T,)</a>) -&gt; <a class=\"primitive\" href=\"{{channel}}/std/primitive.tuple.html\">(T,)</a></code>\n\\ No newline at end of file"}, {"sha": "77c8d81b842df0740e4eb303417e8312903f4075", "filename": "src/test/rustdoc/tuples.link2_i32.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68d0b29098ed75f50dabc7d07b96c70caab5c182/src%2Ftest%2Frustdoc%2Ftuples.link2_i32.html", "raw_url": "https://github.com/rust-lang/rust/raw/68d0b29098ed75f50dabc7d07b96c70caab5c182/src%2Ftest%2Frustdoc%2Ftuples.link2_i32.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftuples.link2_i32.html?ref=68d0b29098ed75f50dabc7d07b96c70caab5c182", "patch": "@@ -0,0 +1 @@\n+<code>pub fn tuple2(x: (<a class=\"primitive\" href=\"{{channel}}/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"{{channel}}/std/primitive.i32.html\">i32</a>)) -&gt; (<a class=\"primitive\" href=\"{{channel}}/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"{{channel}}/std/primitive.i32.html\">i32</a>)</code>\n\\ No newline at end of file"}, {"sha": "2477aa6be9d39a50a28f0c8d6777f59411710840", "filename": "src/test/rustdoc/tuples.link2_t.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68d0b29098ed75f50dabc7d07b96c70caab5c182/src%2Ftest%2Frustdoc%2Ftuples.link2_t.html", "raw_url": "https://github.com/rust-lang/rust/raw/68d0b29098ed75f50dabc7d07b96c70caab5c182/src%2Ftest%2Frustdoc%2Ftuples.link2_t.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftuples.link2_t.html?ref=68d0b29098ed75f50dabc7d07b96c70caab5c182", "patch": "@@ -0,0 +1 @@\n+<code>pub fn tuple2_t&lt;T&gt;(x: <a class=\"primitive\" href=\"{{channel}}/std/primitive.tuple.html\">(T, T)</a>) -&gt; <a class=\"primitive\" href=\"{{channel}}/std/primitive.tuple.html\">(T, T)</a></code>\n\\ No newline at end of file"}, {"sha": "b02f8dd8d6530c39d321788e0a1282a8a7c8727c", "filename": "src/test/rustdoc/tuples.link2_tu.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68d0b29098ed75f50dabc7d07b96c70caab5c182/src%2Ftest%2Frustdoc%2Ftuples.link2_tu.html", "raw_url": "https://github.com/rust-lang/rust/raw/68d0b29098ed75f50dabc7d07b96c70caab5c182/src%2Ftest%2Frustdoc%2Ftuples.link2_tu.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftuples.link2_tu.html?ref=68d0b29098ed75f50dabc7d07b96c70caab5c182", "patch": "@@ -0,0 +1 @@\n+<code>pub fn tuple2_tu&lt;T, U&gt;(x: <a class=\"primitive\" href=\"{{channel}}/std/primitive.tuple.html\">(T, U)</a>) -&gt; <a class=\"primitive\" href=\"{{channel}}/std/primitive.tuple.html\">(T, U)</a></code>\n\\ No newline at end of file"}, {"sha": "839990e1587c6b22ea2756c61eea84a1945a1699", "filename": "src/test/rustdoc/tuples.link_unit.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68d0b29098ed75f50dabc7d07b96c70caab5c182/src%2Ftest%2Frustdoc%2Ftuples.link_unit.html", "raw_url": "https://github.com/rust-lang/rust/raw/68d0b29098ed75f50dabc7d07b96c70caab5c182/src%2Ftest%2Frustdoc%2Ftuples.link_unit.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftuples.link_unit.html?ref=68d0b29098ed75f50dabc7d07b96c70caab5c182", "patch": "@@ -0,0 +1 @@\n+<code>pub fn tuple0(x: <a class=\"primitive\" href=\"{{channel}}/std/primitive.unit.html\">()</a>)</code>\n\\ No newline at end of file"}, {"sha": "62e2f9e7ef24474008caf643c7d04a49eba424c6", "filename": "src/test/rustdoc/tuples.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68d0b29098ed75f50dabc7d07b96c70caab5c182/src%2Ftest%2Frustdoc%2Ftuples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d0b29098ed75f50dabc7d07b96c70caab5c182/src%2Ftest%2Frustdoc%2Ftuples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftuples.rs?ref=68d0b29098ed75f50dabc7d07b96c70caab5c182", "patch": "@@ -1,8 +1,20 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.tuple0.html //pre 'pub fn tuple0(x: ())'\n+// @snapshot link_unit - '//pre[@class=\"rust fn\"]/code'\n pub fn tuple0(x: ()) -> () { x }\n // @has foo/fn.tuple1.html //pre 'pub fn tuple1(x: (i32,)) -> (i32,)'\n+// @snapshot link1_i32 - '//pre[@class=\"rust fn\"]/code'\n pub fn tuple1(x: (i32,)) -> (i32,) { x }\n // @has foo/fn.tuple2.html //pre 'pub fn tuple2(x: (i32, i32)) -> (i32, i32)'\n+// @snapshot link2_i32 - '//pre[@class=\"rust fn\"]/code'\n pub fn tuple2(x: (i32, i32)) -> (i32, i32) { x }\n+// @has foo/fn.tuple1_t.html //pre 'pub fn tuple1_t<T>(x: (T,)) -> (T,)'\n+// @snapshot link1_t - '//pre[@class=\"rust fn\"]/code'\n+pub fn tuple1_t<T>(x: (T,)) -> (T,) { x }\n+// @has foo/fn.tuple2_t.html //pre 'pub fn tuple2_t<T>(x: (T, T)) -> (T, T)'\n+// @snapshot link2_t - '//pre[@class=\"rust fn\"]/code'\n+pub fn tuple2_t<T>(x: (T, T)) -> (T, T) { x }\n+// @has foo/fn.tuple2_tu.html //pre 'pub fn tuple2_tu<T, U>(x: (T, U)) -> (T, U)'\n+// @snapshot link2_tu - '//pre[@class=\"rust fn\"]/code'\n+pub fn tuple2_tu<T, U>(x: (T, U)) -> (T, U) { x }"}]}