{"sha": "10270bcd30d1d85a003412e597e367f2e7c89942", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMjcwYmNkMzBkMWQ4NWEwMDM0MTJlNTk3ZTM2N2YyZTdjODk5NDI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-01T09:55:41Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-12T16:54:48Z"}, "message": "Fuse associated type parsing.", "tree": {"sha": "7d8dcd0f8b9f5b718da2a93f79ca1d98c5315844", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d8dcd0f8b9f5b718da2a93f79ca1d98c5315844"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10270bcd30d1d85a003412e597e367f2e7c89942", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10270bcd30d1d85a003412e597e367f2e7c89942", "html_url": "https://github.com/rust-lang/rust/commit/10270bcd30d1d85a003412e597e367f2e7c89942", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10270bcd30d1d85a003412e597e367f2e7c89942/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d92aa5535e9b28f4c9244785baed719b72b9d59", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d92aa5535e9b28f4c9244785baed719b72b9d59", "html_url": "https://github.com/rust-lang/rust/commit/2d92aa5535e9b28f4c9244785baed719b72b9d59"}], "stats": {"total": 33, "additions": 4, "deletions": 29}, "files": [{"sha": "3fc4cafc0da5bfd8aacbdd5eb65ab41693563e1b", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/10270bcd30d1d85a003412e597e367f2e7c89942/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10270bcd30d1d85a003412e597e367f2e7c89942/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=10270bcd30d1d85a003412e597e367f2e7c89942", "patch": "@@ -698,7 +698,7 @@ impl<'a> Parser<'a> {\n         let vis = self.parse_visibility(FollowedByType::No)?;\n         let defaultness = self.parse_defaultness();\n         let (name, kind, generics) = if self.eat_keyword(kw::Type) {\n-            self.parse_impl_assoc_ty()?\n+            self.parse_assoc_ty()?\n         } else if self.is_const_item() {\n             self.parse_assoc_const()?\n         } else if let Some(mac) = self.parse_assoc_macro_invoc(\"impl\", Some(&vis), at_end)? {\n@@ -750,31 +750,6 @@ impl<'a> Parser<'a> {\n             !self.is_keyword_ahead(1, &[kw::Fn, kw::Unsafe])\n     }\n \n-    /// Parses the following grammar:\n-    ///\n-    ///     AssocTy = Ident [\"<\"...\">\"] [\":\" [GenericBounds]] [\"where\" ...] [\"=\" Ty]\n-    fn parse_impl_assoc_ty(&mut self) -> PResult<'a, (Ident, ImplItemKind, Generics)> {\n-        let ident = self.parse_ident()?;\n-        let mut generics = self.parse_generics()?;\n-\n-        // Parse optional colon and param bounds.\n-        let bounds = if self.eat(&token::Colon) {\n-            self.parse_generic_bounds(None)?\n-        } else {\n-            Vec::new()\n-        };\n-        generics.where_clause = self.parse_where_clause()?;\n-\n-        let default = if self.eat(&token::Eq) {\n-            Some(self.parse_ty()?)\n-        } else {\n-            None\n-        };\n-        self.expect_semi()?;\n-\n-        Ok((ident, ImplItemKind::TyAlias(bounds, default), generics))\n-    }\n-\n     /// Parses `auto? trait Foo { ... }` or `trait Foo = Bar;`.\n     fn parse_item_trait(&mut self, lo: Span, unsafety: Unsafety) -> PResult<'a, ItemInfo> {\n         // Parse optional `auto` prefix.\n@@ -894,7 +869,7 @@ impl<'a> Parser<'a> {\n         let vis = self.parse_visibility(FollowedByType::No)?;\n         let defaultness = self.parse_defaultness();\n         let (name, kind, generics) = if self.eat_keyword(kw::Type) {\n-            self.parse_trait_item_assoc_ty()?\n+            self.parse_assoc_ty()?\n         } else if self.is_const_item() {\n             self.parse_assoc_const()?\n         } else if let Some(mac) = self.parse_assoc_macro_invoc(\"trait\", None, &mut false)? {\n@@ -937,7 +912,7 @@ impl<'a> Parser<'a> {\n     /// Parses the following grammar:\n     ///\n     ///     AssocTy = Ident [\"<\"...\">\"] [\":\" [GenericBounds]] [\"where\" ...] [\"=\" Ty]\n-    fn parse_trait_item_assoc_ty(&mut self) -> PResult<'a, (Ident, TraitItemKind, Generics)> {\n+    fn parse_assoc_ty(&mut self) -> PResult<'a, (Ident, AssocItemKind, Generics)> {\n         let ident = self.parse_ident()?;\n         let mut generics = self.parse_generics()?;\n \n@@ -956,7 +931,7 @@ impl<'a> Parser<'a> {\n         };\n         self.expect_semi()?;\n \n-        Ok((ident, TraitItemKind::TyAlias(bounds, default), generics))\n+        Ok((ident, AssocItemKind::TyAlias(bounds, default), generics))\n     }\n \n     /// Parses a `UseTree`."}]}