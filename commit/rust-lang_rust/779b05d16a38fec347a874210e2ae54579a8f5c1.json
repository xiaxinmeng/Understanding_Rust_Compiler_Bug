{"sha": "779b05d16a38fec347a874210e2ae54579a8f5c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3OWIwNWQxNmEzOGZlYzM0N2E4NzQyMTBlMmFlNTQ1NzlhOGY1YzE=", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2020-06-26T22:33:35Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2020-06-26T23:53:18Z"}, "message": "Fix ICE for lib features", "tree": {"sha": "4f8d6719b6c4bedbeba4a7e0d1ff5b59e1db3b64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f8d6719b6c4bedbeba4a7e0d1ff5b59e1db3b64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/779b05d16a38fec347a874210e2ae54579a8f5c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/779b05d16a38fec347a874210e2ae54579a8f5c1", "html_url": "https://github.com/rust-lang/rust/commit/779b05d16a38fec347a874210e2ae54579a8f5c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/779b05d16a38fec347a874210e2ae54579a8f5c1/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc239e82fe1ef91632dfa858487d89141aaab7a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc239e82fe1ef91632dfa858487d89141aaab7a7", "html_url": "https://github.com/rust-lang/rust/commit/fc239e82fe1ef91632dfa858487d89141aaab7a7"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "bd9d33e67f8fbf8eeb0cf6007bca64170c90fd94", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/779b05d16a38fec347a874210e2ae54579a8f5c1/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/779b05d16a38fec347a874210e2ae54579a8f5c1/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=779b05d16a38fec347a874210e2ae54579a8f5c1", "patch": "@@ -550,9 +550,9 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                 } else if let Some(feature) = is_unstable_const_fn(self.tcx, def_id) {\n                     // Exempt unstable const fns inside of macros or functions with\n                     // `#[allow_internal_unstable]`.\n-                    use crate::transform::qualify_min_const_fn::feature_allowed;\n+                    use crate::transform::qualify_min_const_fn::lib_feature_allowed;\n                     if !self.span.allows_unstable(feature)\n-                        && !feature_allowed(self.tcx, self.def_id, feature)\n+                        && !lib_feature_allowed(self.tcx, self.def_id, feature)\n                     {\n                         self.check_op(ops::FnCallUnstable(def_id, feature));\n                     }"}, {"sha": "7c54acf2163cc21a849e3aec95756f239d882ce6", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/779b05d16a38fec347a874210e2ae54579a8f5c1/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/779b05d16a38fec347a874210e2ae54579a8f5c1/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=779b05d16a38fec347a874210e2ae54579a8f5c1", "patch": "@@ -315,7 +315,7 @@ fn check_place(\n }\n \n /// Returns `true` if the given feature gate is allowed within the function with the given `DefId`.\n-pub fn feature_allowed(tcx: TyCtxt<'tcx>, def_id: DefId, feature_gate: Symbol) -> bool {\n+fn feature_allowed(tcx: TyCtxt<'tcx>, def_id: DefId, feature_gate: Symbol) -> bool {\n     // All features require that the corresponding gate be enabled,\n     // even if the function has `#[allow_internal_unstable(the_gate)]`.\n     if !tcx.features().enabled(feature_gate) {\n@@ -334,6 +334,26 @@ pub fn feature_allowed(tcx: TyCtxt<'tcx>, def_id: DefId, feature_gate: Symbol) -\n         .map_or(false, |mut features| features.any(|name| name == feature_gate))\n }\n \n+/// Returns `true` if the given library feature gate is allowed within the function with the given `DefId`.\n+pub fn lib_feature_allowed(tcx: TyCtxt<'tcx>, def_id: DefId, feature_gate: Symbol) -> bool {\n+    // All features require that the corresponding gate be enabled,\n+    // even if the function has `#[allow_internal_unstable(the_gate)]`.\n+    if !tcx.features().declared_lib_features.iter().any(|&(sym, _)| sym == feature_gate) {\n+        return false;\n+    }\n+\n+    // If this crate is not using stability attributes, or this function is not claiming to be a\n+    // stable `const fn`, that is all that is required.\n+    if !tcx.features().staged_api || tcx.has_attr(def_id, sym::rustc_const_unstable) {\n+        return true;\n+    }\n+\n+    // However, we cannot allow stable `const fn`s to use unstable features without an explicit\n+    // opt-in via `allow_internal_unstable`.\n+    attr::allow_internal_unstable(&tcx.get_attrs(def_id), &tcx.sess.diagnostic())\n+        .map_or(false, |mut features| features.any(|name| name == feature_gate))\n+}\n+\n fn check_terminator(\n     tcx: TyCtxt<'tcx>,\n     body: &'a Body<'tcx>,\n@@ -383,7 +403,8 @@ fn check_terminator(\n                 if !crate::const_eval::is_min_const_fn(tcx, fn_def_id)\n                     && !crate::const_eval::is_unstable_const_fn(tcx, fn_def_id)\n                         .map(|feature| {\n-                            span.allows_unstable(feature) || feature_allowed(tcx, def_id, feature)\n+                            span.allows_unstable(feature)\n+                                || lib_feature_allowed(tcx, def_id, feature)\n                         })\n                         .unwrap_or(false)\n                 {"}]}