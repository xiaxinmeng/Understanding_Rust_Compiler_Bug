{"sha": "f6e4c742f41c5505c9a371ce8ef2c7aed55c35e4", "node_id": "C_kwDOAAsO6NoAKGY2ZTRjNzQyZjQxYzU1MDVjOWEzNzFjZThlZjJjN2FlZDU1YzM1ZTQ", "commit": {"author": {"name": "Martin von Zweigbergk", "email": "martinvonz@google.com", "date": "2021-10-11T23:40:16Z"}, "committer": {"name": "Martin von Zweigbergk", "email": "martinvonz@google.com", "date": "2021-10-12T15:34:03Z"}, "message": "Make split_inclusive() on an empty slice yield an empty output\n\n`[].split_inclusive()` currently yields a single, empty slice. That's\ndifferent from `\"\".split_inslusive()`, which yields no output at\nall. I think that makes the slice version harder to use.\n\nThe case where I ran into this bug was when writing code for\ngenerating a diff between two slices of bytes. I wanted to prefix\nremoved lines with \"-\" and a added lines with \"+\". Due to\n`split_inclusive()`'s current behavior, that means that my code prints\njust a \"-\" or \"+\" for empty files. I suspect most existing callers\nhave similar \"bugs\" (which would be fixed by this patch).\n\nCloses #89716.", "tree": {"sha": "026d5aa2214d02c3dee3ac08cbd520de4a1d75fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/026d5aa2214d02c3dee3ac08cbd520de4a1d75fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6e4c742f41c5505c9a371ce8ef2c7aed55c35e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6e4c742f41c5505c9a371ce8ef2c7aed55c35e4", "html_url": "https://github.com/rust-lang/rust/commit/f6e4c742f41c5505c9a371ce8ef2c7aed55c35e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6e4c742f41c5505c9a371ce8ef2c7aed55c35e4/comments", "author": {"login": "martinvonz", "id": 891642, "node_id": "MDQ6VXNlcjg5MTY0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/891642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinvonz", "html_url": "https://github.com/martinvonz", "followers_url": "https://api.github.com/users/martinvonz/followers", "following_url": "https://api.github.com/users/martinvonz/following{/other_user}", "gists_url": "https://api.github.com/users/martinvonz/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinvonz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinvonz/subscriptions", "organizations_url": "https://api.github.com/users/martinvonz/orgs", "repos_url": "https://api.github.com/users/martinvonz/repos", "events_url": "https://api.github.com/users/martinvonz/events{/privacy}", "received_events_url": "https://api.github.com/users/martinvonz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "martinvonz", "id": 891642, "node_id": "MDQ6VXNlcjg5MTY0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/891642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinvonz", "html_url": "https://github.com/martinvonz", "followers_url": "https://api.github.com/users/martinvonz/followers", "following_url": "https://api.github.com/users/martinvonz/following{/other_user}", "gists_url": "https://api.github.com/users/martinvonz/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinvonz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinvonz/subscriptions", "organizations_url": "https://api.github.com/users/martinvonz/orgs", "repos_url": "https://api.github.com/users/martinvonz/repos", "events_url": "https://api.github.com/users/martinvonz/events{/privacy}", "received_events_url": "https://api.github.com/users/martinvonz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "html_url": "https://github.com/rust-lang/rust/commit/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "18ea6a214137703403e2f36da7bb94ae4bc2310c", "filename": "library/alloc/tests/slice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6e4c742f41c5505c9a371ce8ef2c7aed55c35e4/library%2Falloc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e4c742f41c5505c9a371ce8ef2c7aed55c35e4/library%2Falloc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fslice.rs?ref=f6e4c742f41c5505c9a371ce8ef2c7aed55c35e4", "patch": "@@ -863,7 +863,7 @@ fn test_splitator_inclusive() {\n     assert_eq!(xs.split_inclusive(|_| true).collect::<Vec<&[i32]>>(), splits);\n \n     let xs: &[i32] = &[];\n-    let splits: &[&[i32]] = &[&[]];\n+    let splits: &[&[i32]] = &[];\n     assert_eq!(xs.split_inclusive(|x| *x == 5).collect::<Vec<&[i32]>>(), splits);\n }\n \n@@ -883,7 +883,7 @@ fn test_splitator_inclusive_reverse() {\n     assert_eq!(xs.split_inclusive(|_| true).rev().collect::<Vec<_>>(), splits);\n \n     let xs: &[i32] = &[];\n-    let splits: &[&[i32]] = &[&[]];\n+    let splits: &[&[i32]] = &[];\n     assert_eq!(xs.split_inclusive(|x| *x == 5).rev().collect::<Vec<_>>(), splits);\n }\n \n@@ -903,7 +903,7 @@ fn test_splitator_mut_inclusive() {\n     assert_eq!(xs.split_inclusive_mut(|_| true).collect::<Vec<_>>(), splits);\n \n     let xs: &mut [i32] = &mut [];\n-    let splits: &[&[i32]] = &[&[]];\n+    let splits: &[&[i32]] = &[];\n     assert_eq!(xs.split_inclusive_mut(|x| *x == 5).collect::<Vec<_>>(), splits);\n }\n \n@@ -923,7 +923,7 @@ fn test_splitator_mut_inclusive_reverse() {\n     assert_eq!(xs.split_inclusive_mut(|_| true).rev().collect::<Vec<_>>(), splits);\n \n     let xs: &mut [i32] = &mut [];\n-    let splits: &[&[i32]] = &[&[]];\n+    let splits: &[&[i32]] = &[];\n     assert_eq!(xs.split_inclusive_mut(|x| *x == 5).rev().collect::<Vec<_>>(), splits);\n }\n "}, {"sha": "d88c85613a900b0dbb12bff25e50ab11e6015d13", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6e4c742f41c5505c9a371ce8ef2c7aed55c35e4/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e4c742f41c5505c9a371ce8ef2c7aed55c35e4/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=f6e4c742f41c5505c9a371ce8ef2c7aed55c35e4", "patch": "@@ -479,7 +479,8 @@ where\n impl<'a, T: 'a, P: FnMut(&T) -> bool> SplitInclusive<'a, T, P> {\n     #[inline]\n     pub(super) fn new(slice: &'a [T], pred: P) -> Self {\n-        Self { v: slice, pred, finished: false }\n+        let finished = slice.is_empty();\n+        Self { v: slice, pred, finished }\n     }\n }\n \n@@ -727,7 +728,8 @@ where\n impl<'a, T: 'a, P: FnMut(&T) -> bool> SplitInclusiveMut<'a, T, P> {\n     #[inline]\n     pub(super) fn new(slice: &'a mut [T], pred: P) -> Self {\n-        Self { v: slice, pred, finished: false }\n+        let finished = slice.is_empty();\n+        Self { v: slice, pred, finished }\n     }\n }\n "}]}