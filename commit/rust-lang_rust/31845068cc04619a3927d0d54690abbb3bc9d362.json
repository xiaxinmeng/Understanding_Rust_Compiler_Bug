{"sha": "31845068cc04619a3927d0d54690abbb3bc9d362", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxODQ1MDY4Y2MwNDYxOWEzOTI3ZDBkNTQ2OTBhYmJiM2JjOWQzNjI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-23T23:49:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-23T23:49:46Z"}, "message": "Rollup merge of #70267 - RalfJung:const-prop-unsup, r=oli-obk,wesleywiser\n\nget rid of ConstPropUnsupported; use ZST marker structs instead\n\nThis gets rid of yet another machine-specific error variant.\n\nr? @oli-obk", "tree": {"sha": "cd7a506b87fc1fb9d19a6286cea0d66ed1e910bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd7a506b87fc1fb9d19a6286cea0d66ed1e910bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31845068cc04619a3927d0d54690abbb3bc9d362", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeeUsbCRBK7hj4Ov3rIwAAdHIIAHyCOG0KPGRGzpd1VzR/M6E8\nBPGU0gHVzT7cia4jKyBaHZPcnVlNSspqA7MrPKSk55gjOCDUxKlaDYXfpwjYbQFX\na7FlExDMZnitOVP3CfXSNOLSzkU2S0h7ZZ+pQIapNLappKIY5oTxyR3aFANuTr39\njNvUsr973mAlCxcum4VuorNOTKNFE1x+7iDin/itrga95/tr+mXQgG2MTXzIhPFV\n/iA2qsmOgN9nWOqHIoix1JJSakpGfWs2a//zCaCH8xS0q1OKtTi7czLYh6TSKgrz\nju1F/ZgaIiegEwc9JtTrJNC7T8kO7hDR97+l037hDcCuirsdIM1Z7NUuh4s4p78=\n=ddKW\n-----END PGP SIGNATURE-----\n", "payload": "tree cd7a506b87fc1fb9d19a6286cea0d66ed1e910bd\nparent ab2817bbd0047448a2c3dadd856cac98ff07a7a8\nparent e619b85776feca7ae484c42dff1e37e0844aa06c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1585007386 +0100\ncommitter GitHub <noreply@github.com> 1585007386 +0100\n\nRollup merge of #70267 - RalfJung:const-prop-unsup, r=oli-obk,wesleywiser\n\nget rid of ConstPropUnsupported; use ZST marker structs instead\n\nThis gets rid of yet another machine-specific error variant.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31845068cc04619a3927d0d54690abbb3bc9d362", "html_url": "https://github.com/rust-lang/rust/commit/31845068cc04619a3927d0d54690abbb3bc9d362", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31845068cc04619a3927d0d54690abbb3bc9d362/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab2817bbd0047448a2c3dadd856cac98ff07a7a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab2817bbd0047448a2c3dadd856cac98ff07a7a8", "html_url": "https://github.com/rust-lang/rust/commit/ab2817bbd0047448a2c3dadd856cac98ff07a7a8"}, {"sha": "e619b85776feca7ae484c42dff1e37e0844aa06c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e619b85776feca7ae484c42dff1e37e0844aa06c", "html_url": "https://github.com/rust-lang/rust/commit/e619b85776feca7ae484c42dff1e37e0844aa06c"}], "stats": {"total": 79, "additions": 56, "deletions": 23}, "files": [{"sha": "39df803bbea3010cdc475133679ee97cebc24f30", "filename": "src/libcore/any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31845068cc04619a3927d0d54690abbb3bc9d362/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31845068cc04619a3927d0d54690abbb3bc9d362/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=31845068cc04619a3927d0d54690abbb3bc9d362", "patch": "@@ -164,7 +164,7 @@ impl dyn Any {\n         // Get `TypeId` of the type this function is instantiated with.\n         let t = TypeId::of::<T>();\n \n-        // Get `TypeId` of the type in the trait object.\n+        // Get `TypeId` of the type in the trait object (`self`).\n         let concrete = self.type_id();\n \n         // Compare both `TypeId`s on equality."}, {"sha": "8f06b9a69bd15abebdb7bb2599beaa42e743b079", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/31845068cc04619a3927d0d54690abbb3bc9d362/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31845068cc04619a3927d0d54690abbb3bc9d362/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=31845068cc04619a3927d0d54690abbb3bc9d362", "patch": "@@ -14,7 +14,7 @@ use rustc_hir as hir;\n use rustc_macros::HashStable;\n use rustc_session::CtfeBacktrace;\n use rustc_span::{def_id::DefId, Pos, Span};\n-use std::{any::Any, fmt};\n+use std::{any::Any, fmt, mem};\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, HashStable, RustcEncodable, RustcDecodable)]\n pub enum ErrorHandled {\n@@ -449,9 +449,6 @@ impl fmt::Debug for UndefinedBehaviorInfo {\n pub enum UnsupportedOpInfo {\n     /// Free-form case. Only for errors that are never caught!\n     Unsupported(String),\n-    /// When const-prop encounters a situation it does not support, it raises this error.\n-    /// This must not allocate for performance reasons (hence `str`, not `String`).\n-    ConstPropUnsupported(&'static str),\n     /// Accessing an unsupported foreign static.\n     ReadForeignStatic(DefId),\n     /// Could not find MIR for a function.\n@@ -470,9 +467,6 @@ impl fmt::Debug for UnsupportedOpInfo {\n         use UnsupportedOpInfo::*;\n         match self {\n             Unsupported(ref msg) => write!(f, \"{}\", msg),\n-            ConstPropUnsupported(ref msg) => {\n-                write!(f, \"Constant propagation encountered an unsupported situation: {}\", msg)\n-            }\n             ReadForeignStatic(did) => {\n                 write!(f, \"tried to read from foreign (extern) static {:?}\", did)\n             }\n@@ -514,6 +508,29 @@ impl fmt::Debug for ResourceExhaustionInfo {\n     }\n }\n \n+/// A trait to work around not having trait object upcasting.\n+pub trait AsAny: Any {\n+    fn as_any(&self) -> &dyn Any;\n+}\n+\n+impl<T: Any> AsAny for T {\n+    #[inline(always)]\n+    fn as_any(&self) -> &dyn Any {\n+        self\n+    }\n+}\n+\n+/// A trait for machine-specific errors (or other \"machine stop\" conditions).\n+pub trait MachineStopType: AsAny + fmt::Debug + Send {}\n+impl MachineStopType for String {}\n+\n+impl dyn MachineStopType {\n+    #[inline(always)]\n+    pub fn downcast_ref<T: Any>(&self) -> Option<&T> {\n+        self.as_any().downcast_ref()\n+    }\n+}\n+\n pub enum InterpError<'tcx> {\n     /// The program caused undefined behavior.\n     UndefinedBehavior(UndefinedBehaviorInfo),\n@@ -527,7 +544,7 @@ pub enum InterpError<'tcx> {\n     ResourceExhaustion(ResourceExhaustionInfo),\n     /// Stop execution for a machine-controlled reason. This is never raised by\n     /// the core engine itself.\n-    MachineStop(Box<dyn Any + Send>),\n+    MachineStop(Box<dyn MachineStopType>),\n }\n \n pub type InterpResult<'tcx, T = ()> = Result<T, InterpErrorInfo<'tcx>>;\n@@ -547,7 +564,7 @@ impl fmt::Debug for InterpError<'_> {\n             InvalidProgram(ref msg) => write!(f, \"{:?}\", msg),\n             UndefinedBehavior(ref msg) => write!(f, \"{:?}\", msg),\n             ResourceExhaustion(ref msg) => write!(f, \"{:?}\", msg),\n-            MachineStop(_) => bug!(\"unhandled MachineStop\"),\n+            MachineStop(ref msg) => write!(f, \"{:?}\", msg),\n         }\n     }\n }\n@@ -558,8 +575,9 @@ impl InterpError<'_> {\n     /// waste of resources.\n     pub fn allocates(&self) -> bool {\n         match self {\n-            InterpError::MachineStop(_)\n-            | InterpError::Unsupported(UnsupportedOpInfo::Unsupported(_))\n+            // Zero-sized boxes do not allocate.\n+            InterpError::MachineStop(b) => mem::size_of_val::<dyn MachineStopType>(&**b) > 0,\n+            InterpError::Unsupported(UnsupportedOpInfo::Unsupported(_))\n             | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::ValidationFailure(_))\n             | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::Ub(_)) => true,\n             _ => false,"}, {"sha": "1b5fb4c9954cbcf859303b67c80f696cfca6c2bd", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31845068cc04619a3927d0d54690abbb3bc9d362/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31845068cc04619a3927d0d54690abbb3bc9d362/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=31845068cc04619a3927d0d54690abbb3bc9d362", "patch": "@@ -97,8 +97,8 @@ mod value;\n \n pub use self::error::{\n     struct_error, ConstEvalErr, ConstEvalRawResult, ConstEvalResult, ErrorHandled, FrameInfo,\n-    InterpError, InterpErrorInfo, InterpResult, InvalidProgramInfo, ResourceExhaustionInfo,\n-    UndefinedBehaviorInfo, UnsupportedOpInfo,\n+    InterpError, InterpErrorInfo, InterpResult, InvalidProgramInfo, MachineStopType,\n+    ResourceExhaustionInfo, UndefinedBehaviorInfo, UnsupportedOpInfo,\n };\n \n pub use self::value::{get_slice_bytes, ConstValue, RawConst, Scalar, ScalarMaybeUndef};"}, {"sha": "8899f12b15361fc5aad9ed59098661e3db0df16d", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/31845068cc04619a3927d0d54690abbb3bc9d362/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31845068cc04619a3927d0d54690abbb3bc9d362/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=31845068cc04619a3927d0d54690abbb3bc9d362", "patch": "@@ -39,6 +39,24 @@ use crate::transform::{MirPass, MirSource};\n /// The maximum number of bytes that we'll allocate space for a return value.\n const MAX_ALLOC_LIMIT: u64 = 1024;\n \n+/// Macro for machine-specific `InterpError` without allocation.\n+/// (These will never be shown to the user, but they help diagnose ICEs.)\n+macro_rules! throw_machine_stop_str {\n+    ($($tt:tt)*) => {{\n+        // We make a new local type for it. The type itself does not carry any information,\n+        // but its vtable (for the `MachineStopType` trait) does.\n+        struct Zst;\n+        // Debug-printing this type shows the desired string.\n+        impl std::fmt::Debug for Zst {\n+            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+                write!(f, $($tt)*)\n+            }\n+        }\n+        impl rustc::mir::interpret::MachineStopType for Zst {}\n+        throw_machine_stop!(Zst)\n+    }};\n+}\n+\n pub struct ConstProp;\n \n impl<'tcx> MirPass<'tcx> for ConstProp {\n@@ -192,7 +210,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n         _ret: Option<(PlaceTy<'tcx>, BasicBlock)>,\n         _unwind: Option<BasicBlock>,\n     ) -> InterpResult<'tcx> {\n-        throw_unsup!(ConstPropUnsupported(\"calling intrinsics isn't supported in ConstProp\"))\n+        throw_machine_stop_str!(\"calling intrinsics isn't supported in ConstProp\")\n     }\n \n     fn assert_panic(\n@@ -204,7 +222,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n     }\n \n     fn ptr_to_int(_mem: &Memory<'mir, 'tcx, Self>, _ptr: Pointer) -> InterpResult<'tcx, u64> {\n-        throw_unsup!(ConstPropUnsupported(\"ptr-to-int casts aren't supported in ConstProp\"))\n+        throw_unsup!(ReadPointerAsBytes)\n     }\n \n     fn binary_ptr_op(\n@@ -214,10 +232,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n         _right: ImmTy<'tcx>,\n     ) -> InterpResult<'tcx, (Scalar, bool, Ty<'tcx>)> {\n         // We can't do this because aliasing of memory can differ between const eval and llvm\n-        throw_unsup!(ConstPropUnsupported(\n-            \"pointer arithmetic or comparisons aren't supported \\\n-            in ConstProp\"\n-        ))\n+        throw_machine_stop_str!(\"pointer arithmetic or comparisons aren't supported in ConstProp\")\n     }\n \n     #[inline(always)]\n@@ -238,7 +253,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _dest: PlaceTy<'tcx>,\n     ) -> InterpResult<'tcx> {\n-        throw_unsup!(ConstPropUnsupported(\"can't const prop `box` keyword\"))\n+        throw_machine_stop_str!(\"can't const prop heap allocations\")\n     }\n \n     fn access_local(\n@@ -249,7 +264,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n         let l = &frame.locals[local];\n \n         if l.value == LocalValue::Uninitialized {\n-            throw_unsup!(ConstPropUnsupported(\"tried to access an uninitialized local\"));\n+            throw_machine_stop_str!(\"tried to access an uninitialized local\")\n         }\n \n         l.access()\n@@ -262,7 +277,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n         // if the static allocation is mutable or if it has relocations (it may be legal to mutate\n         // the memory behind that in the future), then we can't const prop it\n         if allocation.mutability == Mutability::Mut || allocation.relocations().len() > 0 {\n-            throw_unsup!(ConstPropUnsupported(\"can't eval mutable statics in ConstProp\"));\n+            throw_machine_stop_str!(\"can't eval mutable statics in ConstProp\")\n         }\n \n         Ok(())"}]}