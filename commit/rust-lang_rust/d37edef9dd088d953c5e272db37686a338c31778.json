{"sha": "d37edef9dd088d953c5e272db37686a338c31778", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzN2VkZWY5ZGQwODhkOTUzYzVlMjcyZGIzNzY4NmEzMzhjMzE3Nzg=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2016-07-03T21:38:37Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2016-07-03T23:27:02Z"}, "message": "prefer `if let` to match with `None => {}` arm in some places\n\nThis is a spiritual succesor to #34268/8531d581, in which we replaced a\nnumber of matches of None to the unit value with `if let` conditionals\nwhere it was judged that this made for clearer/simpler code (as would be\nrecommended by Manishearth/rust-clippy's `single_match` lint). The same\nrationale applies to matches of None to the empty block.", "tree": {"sha": "294c125abc99a5d3e7d788c2cc0b056ecd35a26e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/294c125abc99a5d3e7d788c2cc0b056ecd35a26e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d37edef9dd088d953c5e272db37686a338c31778", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d37edef9dd088d953c5e272db37686a338c31778", "html_url": "https://github.com/rust-lang/rust/commit/d37edef9dd088d953c5e272db37686a338c31778", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d37edef9dd088d953c5e272db37686a338c31778/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e858f34df6ac9ae9d2fbc40c84db9d4bcd29eff", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e858f34df6ac9ae9d2fbc40c84db9d4bcd29eff", "html_url": "https://github.com/rust-lang/rust/commit/5e858f34df6ac9ae9d2fbc40c84db9d4bcd29eff"}], "stats": {"total": 564, "additions": 215, "deletions": 349}, "files": [{"sha": "895a679fc3dccf76b1d7efae56248e31733b3f54", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -840,11 +840,8 @@ pub fn write(output: &mut Write, args: Arguments) -> Result {\n     }\n \n     // There can be only one trailing string piece left.\n-    match pieces.next() {\n-        Some(piece) => {\n-            formatter.buf.write_str(*piece)?;\n-        }\n-        None => {}\n+    if let Some(piece) = pieces.next() {\n+        formatter.buf.write_str(*piece)?;\n     }\n \n     Ok(())"}, {"sha": "41ad089ecd235d0f753de2b6da8d50043ac4463b", "filename": "src/librand/rand_impls.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrand%2Frand_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrand%2Frand_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Frand_impls.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -144,9 +144,8 @@ impl Rand for char {\n             // Rejection sampling. About 0.2% of numbers with at most\n             // 21-bits are invalid codepoints (surrogates), so this\n             // will succeed first go almost every time.\n-            match char::from_u32(rng.next_u32() & CHAR_MASK) {\n-                Some(c) => return c,\n-                None => {}\n+            if let Some(c) = char::from_u32(rng.next_u32() & CHAR_MASK) {\n+                return c;\n             }\n         }\n     }"}, {"sha": "bf6188faa2fbdf160d7c60032e0bb8613c186042", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -1697,13 +1697,10 @@ impl<'a> State<'a> {\n                 self.commasep(Inconsistent, &data.inputs, |s, ty| s.print_type(&ty))?;\n                 word(&mut self.s, \")\")?;\n \n-                match data.output {\n-                    None => {}\n-                    Some(ref ty) => {\n-                        self.space_if_not_bol()?;\n-                        self.word_space(\"->\")?;\n-                        self.print_type(&ty)?;\n-                    }\n+                if let Some(ref ty) = data.output {\n+                    self.space_if_not_bol()?;\n+                    self.word_space(\"->\")?;\n+                    self.print_type(&ty)?;\n                 }\n             }\n         }"}, {"sha": "d3b4afa2cee7915caa98b010a4b792d8713ea5df", "filename": "src/librustc/infer/region_inference/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -842,11 +842,8 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n         where F: FnMut(&RegionVarBindings<'a, 'gcx, 'tcx>, Region, Region)\n     {\n         let vars = TwoRegions { a: a, b: b };\n-        match self.combine_map(t).borrow().get(&vars) {\n-            Some(&c) => {\n-                return ReVar(c);\n-            }\n-            None => {}\n+        if let Some(&c) = self.combine_map(t).borrow().get(&vars) {\n+            return ReVar(c);\n         }\n         let c = self.new_region_var(MiscVariable(origin.span()));\n         self.combine_map(t).borrow_mut().insert(vars, c);"}, {"sha": "01e14ad71b39c8c0e7e1e384950b00cc1b046559", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -1055,13 +1055,10 @@ impl<'a> ast_visit::Visitor for EarlyContext<'a> {\n // Output any lints that were previously added to the session.\n impl<'a, 'tcx> IdVisitingOperation for LateContext<'a, 'tcx> {\n     fn visit_id(&mut self, id: ast::NodeId) {\n-        match self.sess().lints.borrow_mut().remove(&id) {\n-            None => {}\n-            Some(lints) => {\n-                debug!(\"LateContext::visit_id: id={:?} lints={:?}\", id, lints);\n-                for (lint_id, span, msg) in lints {\n-                    self.span_lint(lint_id.lint, span, &msg[..])\n-                }\n+        if let Some(lints) = self.sess().lints.borrow_mut().remove(&id) {\n+            debug!(\"LateContext::visit_id: id={:?} lints={:?}\", id, lints);\n+            for (lint_id, span, msg) in lints {\n+                self.span_lint(lint_id.lint, span, &msg[..])\n             }\n         }\n     }"}, {"sha": "fc1294c86c44f518e1b9a7faa5caba80c5e3da20", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -168,9 +168,8 @@ fn build_nodeid_to_index(decl: Option<&hir::FnDecl>,\n     // into cfg itself?  i.e. introduce a fn-based flow-graph in\n     // addition to the current block-based flow-graph, rather than\n     // have to put traversals like this here?\n-    match decl {\n-        None => {}\n-        Some(decl) => add_entries_from_fn_decl(&mut index, decl, cfg.entry)\n+    if let Some(decl) = decl {\n+        add_entries_from_fn_decl(&mut index, decl, cfg.entry);\n     }\n \n     cfg.graph.each_node(|node_idx, node| {"}, {"sha": "cf6905ecf439ab24400902c25129f22647894715", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -105,9 +105,8 @@ fn calculate_type(sess: &session::Session,\n         // If the global prefer_dynamic switch is turned off, first attempt\n         // static linkage (this can fail).\n         config::CrateTypeExecutable if !sess.opts.cg.prefer_dynamic => {\n-            match attempt_static(sess) {\n-                Some(v) => return v,\n-                None => {}\n+            if let Some(v) = attempt_static(sess) {\n+                return v;\n             }\n         }\n \n@@ -119,9 +118,8 @@ fn calculate_type(sess: &session::Session,\n         // to be found, we generate some nice pretty errors.\n         config::CrateTypeStaticlib |\n         config::CrateTypeCdylib => {\n-            match attempt_static(sess) {\n-                Some(v) => return v,\n-                None => {}\n+            if let Some(v) = attempt_static(sess) {\n+                return v;\n             }\n             for cnum in sess.cstore.crates() {\n                 let src = sess.cstore.used_crate_source(cnum);\n@@ -136,9 +134,8 @@ fn calculate_type(sess: &session::Session,\n         // to try to eagerly statically link all dependencies. This is normally\n         // done for end-product dylibs, not intermediate products.\n         config::CrateTypeDylib if !sess.opts.cg.prefer_dynamic => {\n-            match attempt_static(sess) {\n-                Some(v) => return v,\n-                None => {}\n+            if let Some(v) = attempt_static(sess) {\n+                return v;\n             }\n         }\n "}, {"sha": "c8b8c5dbdbbcbc878f2d51cc386a49475253a80f", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -735,26 +735,23 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n \n         for i in 0..autoderefs {\n             let deref_id = ty::MethodCall::autoderef(expr.id, i as u32);\n-            match self.mc.infcx.node_method_ty(deref_id) {\n-                None => {}\n-                Some(method_ty) => {\n-                    let cmt = return_if_err!(self.mc.cat_expr_autoderefd(expr, i));\n-\n-                    // the method call infrastructure should have\n-                    // replaced all late-bound regions with variables:\n-                    let self_ty = method_ty.fn_sig().input(0);\n-                    let self_ty = self.tcx().no_late_bound_regions(&self_ty).unwrap();\n-\n-                    let (m, r) = match self_ty.sty {\n-                        ty::TyRef(r, ref m) => (m.mutbl, r),\n-                        _ => span_bug!(expr.span,\n-                                \"bad overloaded deref type {:?}\",\n-                                method_ty)\n-                    };\n-                    let bk = ty::BorrowKind::from_mutbl(m);\n-                    self.delegate.borrow(expr.id, expr.span, cmt,\n-                                         *r, bk, AutoRef);\n-                }\n+            if let Some(method_ty) = self.mc.infcx.node_method_ty(deref_id) {\n+                let cmt = return_if_err!(self.mc.cat_expr_autoderefd(expr, i));\n+\n+                // the method call infrastructure should have\n+                // replaced all late-bound regions with variables:\n+                let self_ty = method_ty.fn_sig().input(0);\n+                let self_ty = self.tcx().no_late_bound_regions(&self_ty).unwrap();\n+\n+                let (m, r) = match self_ty.sty {\n+                    ty::TyRef(r, ref m) => (m.mutbl, r),\n+                    _ => span_bug!(expr.span,\n+                                   \"bad overloaded deref type {:?}\",\n+                                   method_ty)\n+                };\n+                let bk = ty::BorrowKind::from_mutbl(m);\n+                self.delegate.borrow(expr.id, expr.span, cmt,\n+                                     *r, bk, AutoRef);\n             }\n         }\n     }"}, {"sha": "ea3765c76f89b2ec425fb845286e69338d7e685d", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -598,11 +598,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn arm_pats_bindings<F>(&mut self, pat: Option<&hir::Pat>, f: F) where\n         F: FnMut(&mut Liveness<'a, 'tcx>, LiveNode, Variable, Span, NodeId),\n     {\n-        match pat {\n-            Some(pat) => {\n-                self.pat_bindings(pat, f);\n-            }\n-            None => {}\n+        if let Some(pat) = pat {\n+            self.pat_bindings(pat, f);\n         }\n     }\n "}, {"sha": "7f6614a959c894634e2d3898ed0a89c083863f97", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -284,9 +284,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for LifetimeContext<'a, 'tcx> {\n     fn visit_generics(&mut self, generics: &hir::Generics) {\n         for ty_param in generics.ty_params.iter() {\n             walk_list!(self, visit_ty_param_bound, &ty_param.bounds);\n-            match ty_param.default {\n-                Some(ref ty) => self.visit_ty(&ty),\n-                None => {}\n+            if let Some(ref ty) = ty_param.default {\n+                self.visit_ty(&ty);\n             }\n         }\n         for predicate in &generics.where_clause.predicates {"}, {"sha": "6fb1b16705fe47fce509e180202bc25cf0a75cdd", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -123,9 +123,8 @@ impl<'a> Context<'a> {\n \n impl<'a, 'v> Visitor<'v> for Context<'a> {\n     fn visit_foreign_item(&mut self, i: &hir::ForeignItem) {\n-        match lang_items::extract(&i.attrs) {\n-            None => {}\n-            Some(lang_item) => self.register(&lang_item, i.span),\n+        if let Some(lang_item) = lang_items::extract(&i.attrs) {\n+            self.register(&lang_item, i.span);\n         }\n         intravisit::walk_foreign_item(self, i)\n     }"}, {"sha": "57c4af6bed569406138d3096914b43e092ee0ae8", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -250,15 +250,12 @@ impl Session {\n                     msg: String) {\n         let lint_id = lint::LintId::of(lint);\n         let mut lints = self.lints.borrow_mut();\n-        match lints.get_mut(&id) {\n-            Some(arr) => {\n-                let tuple = (lint_id, sp, msg);\n-                if !arr.contains(&tuple) {\n-                    arr.push(tuple);\n-                }\n-                return;\n+        if let Some(arr) = lints.get_mut(&id) {\n+            let tuple = (lint_id, sp, msg);\n+            if !arr.contains(&tuple) {\n+                arr.push(tuple);\n             }\n-            None => {}\n+            return;\n         }\n         lints.insert(id, vec!((lint_id, sp, msg)));\n     }"}, {"sha": "14b0a8070983c84a3628b665e1d07648689768ea", "filename": "src/librustc/ty/contents.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc%2Fty%2Fcontents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc%2Fty%2Fcontents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontents.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -168,13 +168,12 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n             // which is incorrect.  This value was computed based on the crutch\n             // value for the type contents of list.  The correct value is\n             // TC::OwnsOwned.  This manifested as issue #4821.\n-            match cache.get(&ty) {\n-                Some(tc) => { return *tc; }\n-                None => {}\n+            if let Some(tc) = cache.get(&ty) {\n+                return *tc;\n             }\n-            match tcx.tc_cache.borrow().get(&ty) {    // Must check both caches!\n-                Some(tc) => { return *tc; }\n-                None => {}\n+            // Must check both caches!\n+            if let Some(tc) = tcx.tc_cache.borrow().get(&ty) {\n+                return *tc;\n             }\n             cache.insert(ty, TC::None);\n "}, {"sha": "b334964bf489b4e4fac8e9e533e4fc771b887b88", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -521,9 +521,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             fn tcx<'b>(&'b self) -> TyCtxt<'b, 'gcx, 'tcx> { self.0 }\n \n             fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-                match self.tcx().normalized_cache.borrow().get(&ty).cloned() {\n-                    None => {}\n-                    Some(u) => return u\n+                if let Some(u) = self.tcx().normalized_cache.borrow().get(&ty).cloned() {\n+                    return u;\n                 }\n \n                 // FIXME(eddyb) should local contexts have a cache too?\n@@ -714,4 +713,3 @@ impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n         false\n     }\n }\n-"}, {"sha": "21c14e6fe4c3b16c2d39eac6769274bcb445c47b", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -712,16 +712,13 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n                         // struct Foo;\n                         // struct Bar<T> { x: Bar<Foo> }\n \n-                        match iter.next() {\n-                            Some(&seen_type) => {\n-                                if same_struct_or_enum(seen_type, def) {\n-                                    debug!(\"SelfRecursive: {:?} contains {:?}\",\n-                                           seen_type,\n-                                           ty);\n-                                    return Representability::SelfRecursive;\n-                                }\n+                        if let Some(&seen_type) = iter.next() {\n+                            if same_struct_or_enum(seen_type, def) {\n+                                debug!(\"SelfRecursive: {:?} contains {:?}\",\n+                                       seen_type,\n+                                       ty);\n+                                return Representability::SelfRecursive;\n                             }\n-                            None => {}\n                         }\n \n                         // We also need to know whether the first item contains other types"}, {"sha": "c9822a4fee7498b4da41c83a2bffe357df515eb5", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -274,11 +274,8 @@ impl<'a, 'tcx> MoveData<'tcx> {\n     /// `lp` and any of its base paths that do not yet have an index.\n     pub fn move_path(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                      lp: Rc<LoanPath<'tcx>>) -> MovePathIndex {\n-        match self.path_map.borrow().get(&lp) {\n-            Some(&index) => {\n-                return index;\n-            }\n-            None => {}\n+        if let Some(&index) = self.path_map.borrow().get(&lp) {\n+            return index;\n         }\n \n         let index = match lp.kind {"}, {"sha": "a5a9dea61ad7c99661851be39303634677eb4198", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -176,9 +176,8 @@ fn check_expr(cx: &mut MatchCheckCtxt, ex: &hir::Expr) {\n \n                 // Second, if there is a guard on each arm, make sure it isn't\n                 // assigning or borrowing anything mutably.\n-                match arm.guard {\n-                    Some(ref guard) => check_for_mutation_in_guard(cx, &guard),\n-                    None => {}\n+                if let Some(ref guard) = arm.guard {\n+                    check_for_mutation_in_guard(cx, &guard);\n                 }\n             }\n "}, {"sha": "4dc1a5e4f5e9f6dda3e8bc63fa9ffab1af28c15e", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -150,12 +150,9 @@ impl LateLintPass for UnusedResults {\n                 if attr.check_name(\"must_use\") {\n                     let mut msg = \"unused result which must be used\".to_string();\n                     // check for #[must_use=\"...\"]\n-                    match attr.value_str() {\n-                        None => {}\n-                        Some(s) => {\n-                            msg.push_str(\": \");\n-                            msg.push_str(&s);\n-                        }\n+                    if let Some(s) = attr.value_str() {\n+                        msg.push_str(\": \");\n+                        msg.push_str(&s);\n                     }\n                     cx.span_lint(UNUSED_MUST_USE, sp, &msg);\n                     return true;"}, {"sha": "a2c808cbcb6b6dae988880d354dc5528b01ea85c", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -24,19 +24,17 @@ fn main() {\n     let llvm_config = env::var_os(\"LLVM_CONFIG\")\n                           .map(PathBuf::from)\n                           .unwrap_or_else(|| {\n-                              match env::var_os(\"CARGO_TARGET_DIR\").map(PathBuf::from) {\n-                                  Some(dir) => {\n-                                      let to_test = dir.parent()\n-                                                       .unwrap()\n-                                                       .parent()\n-                                                       .unwrap()\n-                                                       .join(&target)\n-                                                       .join(\"llvm/bin/llvm-config\");\n-                                      if Command::new(&to_test).output().is_ok() {\n-                                          return to_test;\n-                                      }\n+                              if let Some(dir) = env::var_os(\"CARGO_TARGET_DIR\")\n+                                      .map(PathBuf::from) {\n+                                  let to_test = dir.parent()\n+                                                   .unwrap()\n+                                                   .parent()\n+                                                   .unwrap()\n+                                                   .join(&target)\n+                                                   .join(\"llvm/bin/llvm-config\");\n+                                  if Command::new(&to_test).output().is_ok() {\n+                                      return to_test;\n                                   }\n-                                  None => {}\n                               }\n                               PathBuf::from(\"llvm-config\")\n                           });"}, {"sha": "eada2a9cd7a63332f6b30aeb10712a785d047f3e", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -682,15 +682,12 @@ fn each_child_of_item_or_crate<F, G>(intr: Rc<IdentInterner>,\n         };\n \n         // Get the item.\n-        match crate_data.get_item(child_def_id.index) {\n-            None => {}\n-            Some(child_item_doc) => {\n-                // Hand off the item to the callback.\n-                let child_name = item_name(&intr, child_item_doc);\n-                let def_like = item_to_def_like(crate_data, child_item_doc, child_def_id);\n-                let visibility = item_visibility(child_item_doc);\n-                callback(def_like, child_name, visibility);\n-            }\n+        if let Some(child_item_doc) = crate_data.get_item(child_def_id.index) {\n+            // Hand off the item to the callback.\n+            let child_name = item_name(&intr, child_item_doc);\n+            let def_like = item_to_def_like(crate_data, child_item_doc, child_def_id);\n+            let visibility = item_visibility(child_item_doc);\n+            callback(def_like, child_name, visibility);\n         }\n     }\n "}, {"sha": "48c8bcff1ec560a12db7bdba3f24b9be15b922ba", "filename": "src/librustc_metadata/loader.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_metadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_metadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Floader.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -503,19 +503,11 @@ impl<'a> Context<'a> {\n                                                self.crate_name);\n                 err.note(\"candidates:\");\n                 for (_, lib) in libraries {\n-                    match lib.dylib {\n-                        Some((ref p, _)) => {\n-                            err.note(&format!(\"path: {}\",\n-                                              p.display()));\n-                        }\n-                        None => {}\n+                    if let Some((ref p, _)) = lib.dylib {\n+                        err.note(&format!(\"path: {}\", p.display()));\n                     }\n-                    match lib.rlib {\n-                        Some((ref p, _)) => {\n-                            err.note(&format!(\"path: {}\",\n-                                              p.display()));\n-                        }\n-                        None => {}\n+                    if let Some((ref p, _)) = lib.rlib {\n+                        err.note(&format!(\"path: {}\", p.display()));\n                     }\n                     let data = lib.metadata.as_slice();\n                     let name = decoder::get_crate_name(data);"}, {"sha": "119640af463aa8bf768dddfc23ede46bd996df88", "filename": "src/librustc_metadata/tydecode.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_metadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_metadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftydecode.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -396,16 +396,13 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n \n                 let pos = self.parse_vuint();\n                 let key = ty::CReaderCacheKey { cnum: self.krate, pos: pos };\n-                match tcx.rcache.borrow().get(&key).cloned() {\n-                    Some(tt) => {\n-                        // If there is a closure buried in the type some where, then we\n-                        // need to re-convert any def ids (see case 'k', below). That means\n-                        // we can't reuse the cached version.\n-                        if !tt.has_closure_types() {\n-                            return tt;\n-                        }\n+                if let Some(tt) = tcx.rcache.borrow().get(&key).cloned() {\n+                    // If there is a closure buried in the type some where, then we\n+                    // need to re-convert any def ids (see case 'k', below). That means\n+                    // we can't reuse the cached version.\n+                    if !tt.has_closure_types() {\n+                        return tt;\n                     }\n-                    None => {}\n                 }\n \n                 let mut substate = TyDecoder::new(self.data,"}, {"sha": "1afeccdf8e3a9b9a6735f0472f7f8e21aa60e40c", "filename": "src/librustc_metadata/tyencode.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_metadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_metadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftyencode.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -64,9 +64,9 @@ pub struct ty_abbrev {\n pub type abbrev_map<'tcx> = RefCell<FnvHashMap<Ty<'tcx>, ty_abbrev>>;\n \n pub fn enc_ty<'a, 'tcx>(w: &mut Cursor<Vec<u8>>, cx: &ctxt<'a, 'tcx>, t: Ty<'tcx>) {\n-    match cx.abbrevs.borrow_mut().get(&t) {\n-        Some(a) => { w.write_all(&a.s); return; }\n-        None => {}\n+    if let Some(a) = cx.abbrevs.borrow_mut().get(&t) {\n+        w.write_all(&a.s);\n+        return;\n     }\n \n     let pos = w.position();"}, {"sha": "0580c51d9a17a745db2140e59ef8b3885624849c", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -299,12 +299,10 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                             let mut result = String::from(\"<\");\n                             result.push_str(&rustc::hir::print::ty_to_string(&ty));\n \n-                            match self.tcx.trait_of_item(self.tcx.map.local_def_id(id)) {\n-                                Some(def_id) => {\n-                                    result.push_str(\" as \");\n-                                    result.push_str(&self.tcx.item_path_str(def_id));\n-                                }\n-                                None => {}\n+                            if let Some(def_id) = self.tcx\n+                                    .trait_of_item(self.tcx.map.local_def_id(id)) {\n+                                result.push_str(\" as \");\n+                                result.push_str(&self.tcx.item_path_str(def_id));\n                             }\n                             result.push_str(\">\");\n                             result"}, {"sha": "3ef6e29a6f83894da32612e3ba11b5fa4fcd780a", "filename": "src/librustc_trans/_match.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_trans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_trans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2F_match.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -1706,17 +1706,13 @@ pub fn store_local<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             //\n             // In such cases, the more general path is unsafe, because\n             // it assumes it is matching against a valid value.\n-            match simple_name(pat) {\n-                Some(name) => {\n-                    let var_scope = cleanup::var_scope(tcx, local.id);\n-                    return mk_binding_alloca(\n-                        bcx, pat.id, name, var_scope, (),\n-                        \"_match::store_local\",\n-                        |(), bcx, Datum { val: v, .. }| expr::trans_into(bcx, &init_expr,\n-                                                                         expr::SaveIn(v)));\n-                }\n-\n-                None => {}\n+            if let Some(name) = simple_name(pat) {\n+                let var_scope = cleanup::var_scope(tcx, local.id);\n+                return mk_binding_alloca(\n+                    bcx, pat.id, name, var_scope, (),\n+                    \"_match::store_local\",\n+                    |(), bcx, Datum { val: v, .. }| expr::trans_into(bcx, &init_expr,\n+                                                                     expr::SaveIn(v)));\n             }\n \n             // General path."}, {"sha": "23c4258caf7bd9c5ca873ba44d9c4ac28880f2d0", "filename": "src/librustc_trans/adt.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_trans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_trans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fadt.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -191,9 +191,8 @@ pub fn represent_type<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                 t: Ty<'tcx>)\n                                 -> Rc<Repr<'tcx>> {\n     debug!(\"Representing: {}\", t);\n-    match cx.adt_reprs().borrow().get(&t) {\n-        Some(repr) => return repr.clone(),\n-        None => {}\n+    if let Some(repr) = cx.adt_reprs().borrow().get(&t) {\n+        return repr.clone();\n     }\n \n     let repr = Rc::new(represent_type_uncached(cx, t));"}, {"sha": "7a572fdadc3d795bdac78a20a3bb3ea80449ed96", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -136,11 +136,8 @@ pub struct _InsnCtxt {\n impl Drop for _InsnCtxt {\n     fn drop(&mut self) {\n         TASK_LOCAL_INSN_KEY.with(|slot| {\n-            match slot.borrow_mut().as_mut() {\n-                Some(ctx) => {\n-                    ctx.pop();\n-                }\n-                None => {}\n+            if let Some(ctx) = slot.borrow_mut().as_mut() {\n+                ctx.pop();\n             }\n         })\n     }"}, {"sha": "5596ab0d819e0a3470f7b6a2e360a0c72de87fa2", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -138,18 +138,15 @@ pub fn addr_of(ccx: &CrateContext,\n                align: machine::llalign,\n                kind: &str)\n                -> ValueRef {\n-    match ccx.const_globals().borrow().get(&cv) {\n-        Some(&gv) => {\n-            unsafe {\n-                // Upgrade the alignment in cases where the same constant is used with different\n-                // alignment requirements\n-                if align > llvm::LLVMGetAlignment(gv) {\n-                    llvm::LLVMSetAlignment(gv, align);\n-                }\n+    if let Some(&gv) = ccx.const_globals().borrow().get(&cv) {\n+        unsafe {\n+            // Upgrade the alignment in cases where the same constant is used with different\n+            // alignment requirements\n+            if align > llvm::LLVMGetAlignment(gv) {\n+                llvm::LLVMSetAlignment(gv, align);\n             }\n-            return gv;\n         }\n-        None => {}\n+        return gv;\n     }\n     let gv = addr_of_mut(ccx, cv, align, kind);\n     unsafe {"}, {"sha": "c3f2c4f2c8bfe5bf333550dbadc1ff6687690620", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -572,11 +572,8 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n         // will only succeed if both operands are constant.\n         // This is necessary to determine when an overflow Assert\n         // will always panic at runtime, and produce a warning.\n-        match const_scalar_checked_binop(bcx.tcx(), op, lhs, rhs, input_ty) {\n-            Some((val, of)) => {\n-                return OperandValue::Pair(val, C_bool(bcx.ccx(), of));\n-            }\n-            None => {}\n+        if let Some((val, of)) = const_scalar_checked_binop(bcx.tcx(), op, lhs, rhs, input_ty) {\n+            return OperandValue::Pair(val, C_bool(bcx.ccx(), of));\n         }\n \n         let (val, of) = match op {"}, {"sha": "6a1baf13b273d4f2bda0c4f4c3d4cf1b688ca38c", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -864,9 +864,8 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n     // THE ACTUAL SEARCH\n \n     fn pick(mut self) -> PickResult<'tcx> {\n-        match self.pick_core() {\n-            Some(r) => return r,\n-            None => {}\n+        if let Some(r) = self.pick_core() {\n+            return r;\n         }\n \n         let static_candidates = mem::replace(&mut self.static_candidates, vec![]);\n@@ -929,9 +928,8 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             return None;\n         }\n \n-        match self.pick_by_value_method(step) {\n-            Some(result) => return Some(result),\n-            None => {}\n+        if let Some(result) = self.pick_by_value_method(step) {\n+            return Some(result);\n         }\n \n         self.pick_autorefd_method(step)\n@@ -1003,12 +1001,10 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         let mut possibly_unsatisfied_predicates = Vec::new();\n \n         debug!(\"searching inherent candidates\");\n-        match self.consider_candidates(self_ty, &self.inherent_candidates,\n-                                       &mut possibly_unsatisfied_predicates) {\n-            None => {}\n-            Some(pick) => {\n-                return Some(pick);\n-            }\n+        if let Some(pick) = self.consider_candidates(self_ty,\n+                                                     &self.inherent_candidates,\n+                                                     &mut possibly_unsatisfied_predicates) {\n+            return Some(pick);\n         }\n \n         debug!(\"searching extension candidates\");"}, {"sha": "9786132dc537b53c57c0a4b47abde6fe863536ac", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -334,13 +334,8 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n         };\n \n         //NB(jroesch): We need to match twice to avoid a double borrow which would cause an ICE\n-        match new_method {\n-            Some(method) => {\n-                self.tcx().tables.borrow_mut().method_map.insert(\n-                    method_call,\n-                    method);\n-            }\n-            None => {}\n+        if let Some(method) = new_method {\n+            self.tcx().tables.borrow_mut().method_map.insert(method_call, method);\n         }\n     }\n "}, {"sha": "198e9afd5e12c77f1604d753ba612ba8414ad38c", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -174,12 +174,9 @@ impl<'a, 'gcx, 'tcx> CoherenceChecker<'a, 'gcx, 'tcx> {\n     }\n \n     fn add_inherent_impl(&self, base_def_id: DefId, impl_def_id: DefId) {\n-        match self.inherent_impls.borrow().get(&base_def_id) {\n-            Some(implementation_list) => {\n-                implementation_list.borrow_mut().push(impl_def_id);\n-                return;\n-            }\n-            None => {}\n+        if let Some(implementation_list) = self.inherent_impls.borrow().get(&base_def_id) {\n+            implementation_list.borrow_mut().push(impl_def_id);\n+            return;\n         }\n \n         self.inherent_impls.borrow_mut().insert("}, {"sha": "16e48767a6c602991e3a1c9711a967a90eb32bbc", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -313,14 +313,13 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n fn check_for_entry_fn(ccx: &CrateCtxt) {\n     let tcx = ccx.tcx;\n     let _task = tcx.dep_graph.in_task(DepNode::CheckEntryFn);\n-    match *tcx.sess.entry_fn.borrow() {\n-        Some((id, sp)) => match tcx.sess.entry_type.get() {\n+    if let Some((id, sp)) = *tcx.sess.entry_fn.borrow() {\n+        match tcx.sess.entry_type.get() {\n             Some(config::EntryMain) => check_main_fn_ty(ccx, id, sp),\n             Some(config::EntryStart) => check_start_fn_ty(ccx, id, sp),\n             Some(config::EntryNone) => {}\n             None => bug!(\"entry function without a type\")\n-        },\n-        None => {}\n+        }\n     }\n }\n "}, {"sha": "77c4a0f8174a3296d00a2a94a480d912375cead7", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -131,9 +131,8 @@ impl fmt::Display for clean::Generics {\n                     write!(f, \":&nbsp;{}\", TyParamBounds(&tp.bounds))?;\n                 }\n \n-                match tp.default {\n-                    Some(ref ty) => { write!(f, \"&nbsp;=&nbsp;{}\", ty)?; },\n-                    None => {}\n+                if let Some(ref ty) = tp.default {\n+                    write!(f, \"&nbsp;=&nbsp;{}\", ty)?;\n                 };\n             }\n         }\n@@ -401,15 +400,12 @@ fn primitive_link(f: &mut fmt::Formatter,\n                 }\n                 (_, render::Unknown) => None,\n             };\n-            match loc {\n-                Some(root) => {\n-                    write!(f, \"<a class='primitive' href='{}{}/primitive.{}.html'>\",\n-                           root,\n-                           path.0.first().unwrap(),\n-                           prim.to_url_str())?;\n-                    needs_termination = true;\n-                }\n-                None => {}\n+            if let Some(root) = loc {\n+                write!(f, \"<a class='primitive' href='{}{}/primitive.{}.html'>\",\n+                       root,\n+                       path.0.first().unwrap(),\n+                       prim.to_url_str())?;\n+                needs_termination = true;\n             }\n         }\n         None => {}"}, {"sha": "84e98a6739193e9b917135c3b218e00cb15bd08f", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -352,9 +352,8 @@ fn write_header(class: Option<&str>,\n                 out: &mut Write)\n                 -> io::Result<()> {\n     write!(out, \"<pre \")?;\n-    match id {\n-        Some(id) => write!(out, \"id='{}' \", id)?,\n-        None => {}\n+    if let Some(id) = id {\n+        write!(out, \"id='{}' \", id)?;\n     }\n     write!(out, \"class='rust {}'>\\n\", class.unwrap_or(\"\"))\n }"}, {"sha": "acf867561a6370aa6084c3426f6497071dd7118b", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -589,19 +589,16 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n     // Attach all orphan methods to the type's definition if the type\n     // has since been learned.\n     for &(did, ref item) in orphan_methods {\n-        match paths.get(&did) {\n-            Some(&(ref fqp, _)) => {\n-                search_index.push(IndexItem {\n-                    ty: shortty(item),\n-                    name: item.name.clone().unwrap(),\n-                    path: fqp[..fqp.len() - 1].join(\"::\"),\n-                    desc: Escape(&shorter(item.doc_value())).to_string(),\n-                    parent: Some(did),\n-                    parent_idx: None,\n-                    search_type: get_index_search_type(&item),\n-                });\n-            },\n-            None => {}\n+        if let Some(&(ref fqp, _)) = paths.get(&did) {\n+            search_index.push(IndexItem {\n+                ty: shortty(item),\n+                name: item.name.clone().unwrap(),\n+                path: fqp[..fqp.len() - 1].join(\"::\"),\n+                desc: Escape(&shorter(item.doc_value())).to_string(),\n+                parent: Some(did),\n+                parent_idx: None,\n+                search_type: get_index_search_type(&item),\n+            });\n         }\n     }\n \n@@ -2093,15 +2090,12 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n         <h2 id='implementors'>Implementors</h2>\n         <ul class='item-list' id='implementors-list'>\n     \")?;\n-    match cache.implementors.get(&it.def_id) {\n-        Some(implementors) => {\n-            for i in implementors {\n-                write!(w, \"<li><code>\")?;\n-                fmt_impl_for_trait_page(&i.impl_, w)?;\n-                writeln!(w, \"</code></li>\")?;\n-            }\n+    if let Some(implementors) = cache.implementors.get(&it.def_id) {\n+        for i in implementors {\n+            write!(w, \"<li><code>\")?;\n+            fmt_impl_for_trait_page(&i.impl_, w)?;\n+            writeln!(w, \"</code></li>\")?;\n         }\n-        None => {}\n     }\n     write!(w, \"</ul>\")?;\n     write!(w, r#\"<script type=\"text/javascript\" async"}, {"sha": "6c4b6c4506b814fd7d19b5575841b6703ef54f52", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -1764,9 +1764,8 @@ impl<T: Iterator<Item=char>> Parser<T> {\n                     return self.parse_array(first);\n                 }\n                 ParseArrayComma => {\n-                    match self.parse_array_comma_or_end() {\n-                        Some(evt) => { return evt; }\n-                        None => {}\n+                    if let Some(evt) = self.parse_array_comma_or_end() {\n+                        return evt;\n                     }\n                 }\n                 ParseObject(first) => {\n@@ -2583,9 +2582,8 @@ impl<'a, T: Encodable> fmt::Display for AsPrettyJson<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let mut shim = FormatShim { inner: f };\n         let mut encoder = PrettyEncoder::new(&mut shim);\n-        match self.indent {\n-            Some(n) => encoder.set_indent(n),\n-            None => {}\n+        if let Some(n) = self.indent {\n+            encoder.set_indent(n);\n         }\n         match self.inner.encode(&mut encoder) {\n             Ok(_) => Ok(()),"}, {"sha": "92670cd9def9015cc14d76809f3ba0f93e560046", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -944,9 +944,8 @@ impl SyntaxEnv {\n \n     pub fn find(&self, k: Name) -> Option<Rc<SyntaxExtension>> {\n         for frame in self.chain.iter().rev() {\n-            match frame.map.get(&k) {\n-                Some(v) => return Some(v.clone()),\n-                None => {}\n+            if let Some(v) = frame.map.get(&k) {\n+                return Some(v.clone());\n             }\n         }\n         None"}, {"sha": "40944a9a1c2d360bf13c78a9b1a45d742f2fb998", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -225,12 +225,9 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n         } else { /* repeat */\n             *r.repeat_idx.last_mut().unwrap() += 1;\n             r.stack.last_mut().unwrap().idx = 0;\n-            match r.stack.last().unwrap().sep.clone() {\n-                Some(tk) => {\n-                    r.cur_tok = tk; /* repeat same span, I guess */\n-                    return ret_val;\n-                }\n-                None => {}\n+            if let Some(tk) = r.stack.last().unwrap().sep.clone() {\n+                r.cur_tok = tk; // repeat same span, I guess\n+                return ret_val;\n             }\n         }\n     }"}, {"sha": "15344cef1dbcf438d157614df5bfd39064462152", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -160,12 +160,9 @@ impl<'a> Parser<'a> {\n             _ => None,\n         };\n \n-        match nt_meta {\n-            Some(meta) => {\n-                self.bump();\n-                return Ok(meta);\n-            }\n-            None => {}\n+        if let Some(meta) = nt_meta {\n+            self.bump();\n+            return Ok(meta);\n         }\n \n         let lo = self.span.lo;"}, {"sha": "77b5c10899a3da8cc158c1003161b44a200d78bf", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -470,15 +470,12 @@ impl<'a> StringReader<'a> {\n     /// PRECONDITION: self.curr is not whitespace\n     /// Eats any kind of comment.\n     fn scan_comment(&mut self) -> Option<TokenAndSpan> {\n-        match self.curr {\n-            Some(c) => {\n-                if c.is_whitespace() {\n-                    self.span_diagnostic.span_err(syntax_pos::mk_sp(self.last_pos, self.last_pos),\n-                                                  \"called consume_any_line_comment, but there \\\n-                                                   was whitespace\");\n-                }\n+        if let Some(c) = self.curr {\n+            if c.is_whitespace() {\n+                self.span_diagnostic.span_err(syntax_pos::mk_sp(self.last_pos, self.last_pos),\n+                                              \"called consume_any_line_comment, but there \\\n+                                               was whitespace\");\n             }\n-            None => {}\n         }\n \n         if self.curr_is('/') {"}, {"sha": "6fa95afd9fb2223c9dec5dc1565cb68a40db4e7f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -2752,9 +2752,8 @@ impl<'a> Parser<'a> {\n             }\n         };\n \n-        match parse_kleene_op(self)? {\n-            Some(kleene_op) => return Ok((None, kleene_op)),\n-            None => {}\n+        if let Some(kleene_op) = parse_kleene_op(self)? {\n+            return Ok((None, kleene_op));\n         }\n \n         let separator = self.bump_and_get();\n@@ -5691,15 +5690,12 @@ impl<'a> Parser<'a> {\n             }\n             _ => None\n         };\n-        match nt_item {\n-            Some(mut item) => {\n-                self.bump();\n-                let mut attrs = attrs;\n-                mem::swap(&mut item.attrs, &mut attrs);\n-                item.attrs.extend(attrs);\n-                return Ok(Some(P(item)));\n-            }\n-            None => {}\n+        if let Some(mut item) = nt_item {\n+            self.bump();\n+            let mut attrs = attrs;\n+            mem::swap(&mut item.attrs, &mut attrs);\n+            item.attrs.extend(attrs);\n+            return Ok(Some(P(item)));\n         }\n \n         let lo = self.span.lo;"}, {"sha": "ce30c3de7595867490b94ec77281f91d2e1a51fe", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -1264,13 +1264,10 @@ impl<'a> State<'a> {\n                     _ => {}\n                 }\n \n-                match *opt_trait {\n-                    Some(ref t) => {\n-                        try!(self.print_trait_ref(t));\n-                        try!(space(&mut self.s));\n-                        try!(self.word_space(\"for\"));\n-                    }\n-                    None => {}\n+                if let Some(ref t) = *opt_trait {\n+                    try!(self.print_trait_ref(t));\n+                    try!(space(&mut self.s));\n+                    try!(self.word_space(\"for\"));\n                 }\n \n                 try!(self.print_type(&ty));\n@@ -1470,11 +1467,8 @@ impl<'a> State<'a> {\n                     try!(self.print_tt(tt_elt));\n                 }\n                 try!(word(&mut self.s, \")\"));\n-                match seq.separator {\n-                    Some(ref tk) => {\n-                        try!(word(&mut self.s, &token_to_string(tk)));\n-                    }\n-                    None => {},\n+                if let Some(ref tk) = seq.separator {\n+                    try!(word(&mut self.s, &token_to_string(tk)));\n                 }\n                 match seq.op {\n                     tokenstream::KleeneOp::ZeroOrMore => word(&mut self.s, \"*\"),"}, {"sha": "f33898109cc57e3110aa40a13b1ac7cfeaefe1da", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -360,13 +360,10 @@ fn find_type_parameters(ty: &ast::Ty, ty_param_names: &[ast::Name], span: Span,\n         fn visit_ty(&mut self, ty: &ast::Ty) {\n             match ty.node {\n                 ast::TyKind::Path(_, ref path) if !path.global => {\n-                    match path.segments.first() {\n-                        Some(segment) => {\n-                            if self.ty_param_names.contains(&segment.identifier.name) {\n-                                self.types.push(P(ty.clone()));\n-                            }\n+                    if let Some(segment) = path.segments.first() {\n+                        if self.ty_param_names.contains(&segment.identifier.name) {\n+                            self.types.push(P(ty.clone()));\n                         }\n-                        None => {}\n                     }\n                 }\n                 _ => {}"}, {"sha": "c6c4b6135c681e1eec0e83b0e05b8679cd006bb4", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -88,12 +88,9 @@ pub fn expand_env<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[tokenstream::Token\n         }\n     };\n \n-    match exprs.next() {\n-        None => {}\n-        Some(_) => {\n-            cx.span_err(sp, \"env! takes 1 or 2 arguments\");\n-            return DummyResult::expr(sp);\n-        }\n+    if let Some(_) = exprs.next() {\n+        cx.span_err(sp, \"env! takes 1 or 2 arguments\");\n+        return DummyResult::expr(sp);\n     }\n \n     let e = match env::var(&var[..]) {"}, {"sha": "dc572e652c6713de2597706a78dc074e3014f00d", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -126,16 +126,13 @@ fn parse_args(ecx: &mut ExtCtxt, sp: Span, tts: &[tokenstream::TokenTree])\n \n             panictry!(p.expect(&token::Eq));\n             let e = panictry!(p.parse_expr());\n-            match names.get(name) {\n-                None => {}\n-                Some(prev) => {\n-                    ecx.struct_span_err(e.span,\n-                                        &format!(\"duplicate argument named `{}`\",\n-                                                 name))\n-                       .span_note(prev.span, \"previously here\")\n-                       .emit();\n-                    continue\n-                }\n+            if let Some(prev) = names.get(name) {\n+                ecx.struct_span_err(e.span,\n+                                    &format!(\"duplicate argument named `{}`\",\n+                                             name))\n+                    .span_note(prev.span, \"previously here\")\n+                    .emit();\n+                continue;\n             }\n             order.push(name.to_string());\n             names.insert(name.to_string(), e);\n@@ -665,13 +662,10 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt, sp: Span,\n             Some(piece) => {\n                 if !parser.errors.is_empty() { break }\n                 cx.verify_piece(&piece);\n-                match cx.trans_piece(&piece) {\n-                    Some(piece) => {\n-                        let s = cx.trans_literal_string();\n-                        cx.str_pieces.push(s);\n-                        cx.pieces.push(piece);\n-                    }\n-                    None => {}\n+                if let Some(piece) = cx.trans_piece(&piece) {\n+                    let s = cx.trans_literal_string();\n+                    cx.str_pieces.push(s);\n+                    cx.pieces.push(piece);\n                 }\n             }\n             None => break"}, {"sha": "c90c93e75acd87f930f76db4dc0fb43691a72132", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37edef9dd088d953c5e272db37686a338c31778/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=d37edef9dd088d953c5e272db37686a338c31778", "patch": "@@ -747,12 +747,9 @@ pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Resu\n             PadOnRight => t.desc.name.as_slice().len(),\n         }\n     }\n-    match tests.iter().max_by_key(|t| len_if_padded(*t)) {\n-        Some(t) => {\n-            let n = t.desc.name.as_slice();\n-            st.max_name_len = n.len();\n-        }\n-        None => {}\n+    if let Some(t) = tests.iter().max_by_key(|t| len_if_padded(*t)) {\n+        let n = t.desc.name.as_slice();\n+        st.max_name_len = n.len();\n     }\n     run_tests(opts, tests, |x| callback(&x, &mut st))?;\n     return st.write_run_finish();"}]}