{"sha": "45e48ec424b2e1db489db860581aaf7e684fbae0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZTQ4ZWM0MjRiMmUxZGI0ODlkYjg2MDU4MWFhZjdlNjg0ZmJhZTA=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-09-15T03:10:30Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-09-15T03:10:30Z"}, "message": "Add a new config option to control the placement of a binary operator", "tree": {"sha": "36820db5886a53726d5d8519a55b245e566450c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36820db5886a53726d5d8519a55b245e566450c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45e48ec424b2e1db489db860581aaf7e684fbae0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45e48ec424b2e1db489db860581aaf7e684fbae0", "html_url": "https://github.com/rust-lang/rust/commit/45e48ec424b2e1db489db860581aaf7e684fbae0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45e48ec424b2e1db489db860581aaf7e684fbae0/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e309a4ad83e1403d7bd23c4a1ee2c02cf4e273d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e309a4ad83e1403d7bd23c4a1ee2c02cf4e273d", "html_url": "https://github.com/rust-lang/rust/commit/7e309a4ad83e1403d7bd23c4a1ee2c02cf4e273d"}], "stats": {"total": 149, "additions": 115, "deletions": 34}, "files": [{"sha": "04020d1aeee7dc6116fc3162e22f0fd88eb990e1", "filename": "src/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45e48ec424b2e1db489db860581aaf7e684fbae0/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e48ec424b2e1db489db860581aaf7e684fbae0/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=45e48ec424b2e1db489db860581aaf7e684fbae0", "patch": "@@ -620,6 +620,8 @@ create_config! {\n     multiline_match_arm_forces_block: bool, false,\n         \"Force multiline match arm bodies to be wrapped in a block\";\n     merge_derives: bool, true, \"Merge multiple `#[derive(...)]` into a single one\";\n+    binop_sep: SeparatorPlace, SeparatorPlace::Front,\n+        \"Where to put a binary operator when a binary expression goes multiline.\";\n }\n \n #[cfg(test)]"}, {"sha": "dc11edde95f43a62087a53ba686372adf7dcba37", "filename": "src/expr.rs", "status": "modified", "additions": 82, "deletions": 30, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/45e48ec424b2e1db489db860581aaf7e684fbae0/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e48ec424b2e1db489db860581aaf7e684fbae0/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=45e48ec424b2e1db489db860581aaf7e684fbae0", "patch": "@@ -101,6 +101,7 @@ pub fn format_expr(\n                 \"\",\n                 context,\n                 shape,\n+                context.config.binop_sep(),\n             )\n         }\n         ast::ExprKind::Unary(ref op, ref subexpr) => rewrite_unary_op(context, op, subexpr, shape),\n@@ -213,12 +214,26 @@ pub fn format_expr(\n         ast::ExprKind::AddrOf(mutability, ref expr) => {\n             rewrite_expr_addrof(context, mutability, expr, shape)\n         }\n-        ast::ExprKind::Cast(ref expr, ref ty) => {\n-            rewrite_pair(&**expr, &**ty, \"\", \" as \", \"\", context, shape)\n-        }\n-        ast::ExprKind::Type(ref expr, ref ty) => {\n-            rewrite_pair(&**expr, &**ty, \"\", \": \", \"\", context, shape)\n-        }\n+        ast::ExprKind::Cast(ref expr, ref ty) => rewrite_pair(\n+            &**expr,\n+            &**ty,\n+            \"\",\n+            \" as \",\n+            \"\",\n+            context,\n+            shape,\n+            SeparatorPlace::Front,\n+        ),\n+        ast::ExprKind::Type(ref expr, ref ty) => rewrite_pair(\n+            &**expr,\n+            &**ty,\n+            \"\",\n+            \": \",\n+            \"\",\n+            context,\n+            shape,\n+            SeparatorPlace::Front,\n+        ),\n         ast::ExprKind::Index(ref expr, ref index) => {\n             rewrite_index(&**expr, &**index, context, shape)\n         }\n@@ -228,7 +243,16 @@ pub fn format_expr(\n             } else {\n                 (\"[\", \"]\")\n             };\n-            rewrite_pair(&**expr, &**repeats, lbr, \"; \", rbr, context, shape)\n+            rewrite_pair(\n+                &**expr,\n+                &**repeats,\n+                lbr,\n+                \"; \",\n+                rbr,\n+                context,\n+                shape,\n+                SeparatorPlace::Back,\n+            )\n         }\n         ast::ExprKind::Range(ref lhs, ref rhs, limits) => {\n             let delim = match limits {\n@@ -257,7 +281,16 @@ pub fn format_expr(\n                     } else {\n                         delim.into()\n                     };\n-                    rewrite_pair(&*lhs, &*rhs, \"\", &sp_delim, \"\", context, shape)\n+                    rewrite_pair(\n+                        &*lhs,\n+                        &*rhs,\n+                        \"\",\n+                        &sp_delim,\n+                        \"\",\n+                        context,\n+                        shape,\n+                        SeparatorPlace::Front,\n+                    )\n                 }\n                 (None, Some(rhs)) => {\n                     let sp_delim = if context.config.spaces_around_ranges() {\n@@ -323,26 +356,29 @@ pub fn rewrite_pair<LHS, RHS>(\n     suffix: &str,\n     context: &RewriteContext,\n     shape: Shape,\n+    separator_place: SeparatorPlace,\n ) -> Option<String>\n where\n     LHS: Rewrite,\n     RHS: Rewrite,\n {\n-    let sep = if infix.ends_with(' ') { \" \" } else { \"\" };\n-    let infix = infix.trim_right();\n-    let lhs_overhead = shape.used_width() + prefix.len() + infix.len();\n+    let lhs_overhead = match separator_place {\n+        SeparatorPlace::Back => shape.used_width() + prefix.len() + infix.trim_right().len(),\n+        SeparatorPlace::Front => shape.used_width(),\n+    };\n     let lhs_shape = Shape {\n-        width: try_opt!(context.config.max_width().checked_sub(lhs_overhead)),\n+        width: context.budget(lhs_overhead),\n         ..shape\n     };\n     let lhs_result = try_opt!(\n         lhs.rewrite(context, lhs_shape)\n-            .map(|lhs_str| format!(\"{}{}{}\", prefix, lhs_str, infix))\n+            .map(|lhs_str| format!(\"{}{}\", prefix, lhs_str))\n     );\n \n     // Try to the both lhs and rhs on the same line.\n     let rhs_orig_result = shape\n-        .offset_left(last_line_width(&lhs_result) + suffix.len() + sep.len())\n+        .offset_left(last_line_width(&lhs_result) + infix.len())\n+        .and_then(|s| s.sub_width(suffix.len()))\n         .and_then(|rhs_shape| rhs.rewrite(context, rhs_shape));\n     if let Some(ref rhs_result) = rhs_orig_result {\n         // If the rhs looks like block expression, we allow it to stay on the same line\n@@ -353,33 +389,49 @@ where\n             .map(|first_line| first_line.ends_with('{'))\n             .unwrap_or(false);\n         if !rhs_result.contains('\\n') || allow_same_line {\n-            return Some(format!(\"{}{}{}{}\", lhs_result, sep, rhs_result, suffix));\n+            return Some(format!(\"{}{}{}{}\", lhs_result, infix, rhs_result, suffix));\n         }\n     }\n \n     // We have to use multiple lines.\n     // Re-evaluate the rhs because we have more space now:\n-    let rhs_shape = match context.config.control_style() {\n-        Style::Legacy => {\n-            try_opt!(shape.sub_width(suffix.len() + prefix.len())).visual_indent(prefix.len())\n-        }\n+    let mut rhs_shape = try_opt!(match context.config.control_style() {\n+        Style::Legacy => shape\n+            .sub_width(suffix.len() + prefix.len())\n+            .map(|s| s.visual_indent(prefix.len())),\n         Style::Rfc => {\n             // Try to calculate the initial constraint on the right hand side.\n             let rhs_overhead = shape.rhs_overhead(context.config);\n-            try_opt!(\n-                Shape::indented(shape.indent.block_indent(context.config), context.config)\n-                    .sub_width(rhs_overhead)\n-            )\n+            Shape::indented(shape.indent.block_indent(context.config), context.config)\n+                .sub_width(rhs_overhead)\n         }\n+    });\n+    let infix = match separator_place {\n+        SeparatorPlace::Back => infix.trim_right(),\n+        SeparatorPlace::Front => infix.trim_left(),\n     };\n+    if separator_place == SeparatorPlace::Front {\n+        rhs_shape = try_opt!(rhs_shape.offset_left(infix.len()));\n+    }\n     let rhs_result = try_opt!(rhs.rewrite(context, rhs_shape));\n-    Some(format!(\n-        \"{}\\n{}{}{}\",\n-        lhs_result,\n-        rhs_shape.indent.to_string(context.config),\n-        rhs_result,\n-        suffix\n-    ))\n+    match separator_place {\n+        SeparatorPlace::Back => Some(format!(\n+            \"{}{}\\n{}{}{}\",\n+            lhs_result,\n+            infix,\n+            rhs_shape.indent.to_string(context.config),\n+            rhs_result,\n+            suffix\n+        )),\n+        SeparatorPlace::Front => Some(format!(\n+            \"{}\\n{}{}{}{}\",\n+            lhs_result,\n+            rhs_shape.indent.to_string(context.config),\n+            infix,\n+            rhs_result,\n+            suffix\n+        )),\n+    }\n }\n \n pub fn rewrite_array<'a, I>("}, {"sha": "ab61df22b682f23ce52c7a689d5575458fa0095f", "filename": "src/patterns.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/45e48ec424b2e1db489db860581aaf7e684fbae0/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e48ec424b2e1db489db860581aaf7e684fbae0/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=45e48ec424b2e1db489db860581aaf7e684fbae0", "patch": "@@ -18,7 +18,7 @@ use comment::FindUncommented;\n use expr::{can_be_overflowed_expr, rewrite_call_inner, rewrite_pair, rewrite_unary_prefix,\n            wrap_struct_field};\n use lists::{itemize_list, shape_for_tactic, struct_lit_formatting, struct_lit_shape,\n-            struct_lit_tactic, write_list, DefinitiveListTactic, SeparatorTactic};\n+            struct_lit_tactic, write_list, DefinitiveListTactic, SeparatorPlace, SeparatorTactic};\n use rewrite::{Rewrite, RewriteContext};\n use types::{rewrite_path, PathContext};\n use utils::{format_mutability, mk_sp, wrap_str};\n@@ -59,8 +59,26 @@ impl Rewrite for Pat {\n                 None\n             },\n             PatKind::Range(ref lhs, ref rhs, ref end_kind) => match *end_kind {\n-                RangeEnd::Included => rewrite_pair(&**lhs, &**rhs, \"\", \"...\", \"\", context, shape),\n-                RangeEnd::Excluded => rewrite_pair(&**lhs, &**rhs, \"\", \"..\", \"\", context, shape),\n+                RangeEnd::Included => rewrite_pair(\n+                    &**lhs,\n+                    &**rhs,\n+                    \"\",\n+                    \"...\",\n+                    \"\",\n+                    context,\n+                    shape,\n+                    SeparatorPlace::Front,\n+                ),\n+                RangeEnd::Excluded => rewrite_pair(\n+                    &**lhs,\n+                    &**rhs,\n+                    \"\",\n+                    \"..\",\n+                    \"\",\n+                    context,\n+                    shape,\n+                    SeparatorPlace::Front,\n+                ),\n             },\n             PatKind::Ref(ref pat, mutability) => {\n                 let prefix = format!(\"&{}\", format_mutability(mutability));"}, {"sha": "535b71c940254a8b64c100f0cab1e67206093eb2", "filename": "src/types.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/45e48ec424b2e1db489db860581aaf7e684fbae0/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e48ec424b2e1db489db860581aaf7e684fbae0/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=45e48ec424b2e1db489db860581aaf7e684fbae0", "patch": "@@ -738,7 +738,16 @@ impl Rewrite for ast::Ty {\n                 let use_spaces = context.config.spaces_within_square_brackets();\n                 let lbr = if use_spaces { \"[ \" } else { \"[\" };\n                 let rbr = if use_spaces { \" ]\" } else { \"]\" };\n-                rewrite_pair(&**ty, &**repeats, lbr, \"; \", rbr, context, shape)\n+                rewrite_pair(\n+                    &**ty,\n+                    &**repeats,\n+                    lbr,\n+                    \"; \",\n+                    rbr,\n+                    context,\n+                    shape,\n+                    SeparatorPlace::Back,\n+                )\n             }\n             ast::TyKind::Infer => if shape.width >= 1 {\n                 Some(\"_\".to_owned())"}]}