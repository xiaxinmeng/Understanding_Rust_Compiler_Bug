{"sha": "d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZmVlMjRjN2M0YzhkZGIxYzJjNjgxYTAxZjY2NmE1OTg4MWFjYmI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-21T01:18:57Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-22T00:31:34Z"}, "message": "librustc: Forbid destructors from being attached to any structs that might contain non-Owned fields. r=nmatsakis", "tree": {"sha": "8e708c38984e6d54dfe823377113d6047d9f3551", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e708c38984e6d54dfe823377113d6047d9f3551"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "html_url": "https://github.com/rust-lang/rust/commit/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5726fd45268d1ef3574c9321c7ce6efb7e676eac", "url": "https://api.github.com/repos/rust-lang/rust/commits/5726fd45268d1ef3574c9321c7ce6efb7e676eac", "html_url": "https://github.com/rust-lang/rust/commit/5726fd45268d1ef3574c9321c7ce6efb7e676eac"}], "stats": {"total": 283, "additions": 236, "deletions": 47}, "files": [{"sha": "66e9b970fa7891dd4122a24f7ee96d7505fe2fee", "filename": "src/libcore/condition.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibcore%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibcore%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcondition.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -84,6 +84,7 @@ struct Guard<T, U> {\n     cond: &'self Condition/&self<T, U>\n }\n \n+#[unsafe_destructor]\n impl<T, U> Drop for Guard/&self<T, U> {\n     fn finalize(&self) {\n         unsafe {"}, {"sha": "e77dc0bbc78785d18e96c397bdb600a53c38f2c6", "filename": "src/libcore/io.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -1230,15 +1230,17 @@ pub mod fsync {\n         arg: Arg<t>,\n     }\n \n+    #[unsafe_destructor]\n     impl<T:Copy> Drop for Res<T> {\n         fn finalize(&self) {\n-          match self.arg.opt_level {\n-            None => (),\n-            Some(level) => {\n-              // fail hard if not succesful\n-              fail_unless!(((self.arg.fsync_fn)(self.arg.val, level) != -1));\n+            match self.arg.opt_level {\n+                None => (),\n+                Some(level) => {\n+                  // fail hard if not succesful\n+                  fail_unless!(((self.arg.fsync_fn)(self.arg.val, level)\n+                    != -1));\n+                }\n             }\n-          }\n         }\n     }\n "}, {"sha": "8103166909c7fdfd273f215431eadee62b7eda7e", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -514,6 +514,7 @@ fn test_unwrap_resource() {\n        i: @mut int,\n     }\n \n+    #[unsafe_destructor]\n     impl ::ops::Drop for R {\n        fn finalize(&self) { *(self.i) += 1; }\n     }"}, {"sha": "a5d1cfa2793206ef105aed9af643d86246e3e752", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -350,6 +350,7 @@ struct BufferResource<T> {\n \n }\n \n+#[unsafe_destructor]\n impl<T> ::ops::Drop for BufferResource<T> {\n     fn finalize(&self) {\n         unsafe {\n@@ -445,16 +446,17 @@ pub fn try_recv<T:Owned,Tbuffer:Owned>(p: RecvPacketBuffered<T, Tbuffer>)\n     let p_ = p.unwrap();\n     let p = unsafe { &*p_ };\n \n+    #[unsafe_destructor]\n     struct DropState {\n         p: &'self PacketHeader,\n \n         drop {\n-            if task::failing() {\n-                self.p.state = Terminated;\n-                let old_task = swap_task(&mut self.p.blocked_task,\n-                                         ptr::null());\n-                if !old_task.is_null() {\n-                    unsafe {\n+            unsafe {\n+                if task::failing() {\n+                    self.p.state = Terminated;\n+                    let old_task = swap_task(&mut self.p.blocked_task,\n+                                             ptr::null());\n+                    if !old_task.is_null() {\n                         rustrt::rust_task_deref(old_task);\n                     }\n                 }\n@@ -773,6 +775,7 @@ pub struct SendPacketBuffered<T, Tbuffer> {\n     mut buffer: Option<BufferResource<Tbuffer>>,\n }\n \n+#[unsafe_destructor]\n impl<T:Owned,Tbuffer:Owned> ::ops::Drop for SendPacketBuffered<T,Tbuffer> {\n     fn finalize(&self) {\n         //if self.p != none {\n@@ -842,6 +845,7 @@ pub struct RecvPacketBuffered<T, Tbuffer> {\n     mut buffer: Option<BufferResource<Tbuffer>>,\n }\n \n+#[unsafe_destructor]\n impl<T:Owned,Tbuffer:Owned> ::ops::Drop for RecvPacketBuffered<T,Tbuffer> {\n     fn finalize(&self) {\n         //if self.p != none {"}, {"sha": "0ef736d51980656833d76038f5770ea6d60f786f", "filename": "src/libcore/unstable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibcore%2Funstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibcore%2Funstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -118,6 +118,7 @@ struct ArcDestruct<T> {\n     mut data: *libc::c_void,\n }\n \n+#[unsafe_destructor]\n impl<T> Drop for ArcDestruct<T>{\n     fn finalize(&self) {\n         unsafe {"}, {"sha": "c96889cebc8be82788a8218af013f462df9525ac", "filename": "src/libcore/unstable/finally.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibcore%2Funstable%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibcore%2Funstable%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Ffinally.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -45,6 +45,7 @@ struct Finallyalizer {\n     dtor: &'self fn()\n }\n \n+#[unsafe_destructor]\n impl Drop for Finallyalizer/&self {\n     fn finalize(&self) {\n         (self.dtor)();"}, {"sha": "0564e2444376a34984d37e9a97aa831b323cecb1", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 94, "deletions": 5, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -22,6 +22,7 @@ use core::str;\n use core::vec;\n use std::oldmap::HashMap;\n use syntax::ast::*;\n+use syntax::attr::attrs_contains_name;\n use syntax::codemap::{span, spanned};\n use syntax::print::pprust::expr_to_str;\n use syntax::{visit, ast_util};\n@@ -55,6 +56,8 @@ use syntax::{visit, ast_util};\n // primitives in the stdlib are explicitly annotated to only take sendable\n // types.\n \n+use core::hashmap::linear::LinearSet;\n+\n pub const try_adding: &'static str = \"Try adding a move\";\n \n pub type rval_map = HashMap<node_id, ()>;\n@@ -63,7 +66,7 @@ pub struct Context {\n     tcx: ty::ctxt,\n     method_map: typeck::method_map,\n     last_use_map: liveness::last_use_map,\n-    current_item: node_id\n+    current_item: node_id,\n }\n \n pub fn check_crate(tcx: ty::ctxt,\n@@ -74,16 +77,15 @@ pub fn check_crate(tcx: ty::ctxt,\n         tcx: tcx,\n         method_map: method_map,\n         last_use_map: last_use_map,\n-        current_item: -1\n+        current_item: -1,\n     };\n     let visit = visit::mk_vt(@visit::Visitor {\n         visit_arm: check_arm,\n         visit_expr: check_expr,\n         visit_fn: check_fn,\n         visit_ty: check_ty,\n-        visit_item: |i, cx, v| {\n-            visit::visit_item(i, Context { current_item: i.id,.. cx }, v);\n-        },\n+        visit_item: check_item,\n+        visit_block: check_block,\n         .. *visit::default_visitor()\n     });\n     visit::visit_crate(*crate, ctx, visit);\n@@ -92,6 +94,93 @@ pub fn check_crate(tcx: ty::ctxt,\n \n type check_fn = @fn(Context, @freevar_entry);\n \n+fn check_struct_safe_for_destructor(cx: Context,\n+                                    span: span,\n+                                    struct_did: def_id) {\n+    let struct_tpt = ty::lookup_item_type(cx.tcx, struct_did);\n+    if struct_tpt.bounds.len() == 0 {\n+        let struct_ty = ty::mk_struct(cx.tcx, struct_did, ty::substs {\n+            self_r: None,\n+            self_ty: None,\n+            tps: ~[]\n+        });\n+        if !ty::type_is_owned(cx.tcx, struct_ty) {\n+            cx.tcx.sess.span_err(span,\n+                                 ~\"cannot implement a destructor on a struct \\\n+                                   that is not Owned\");\n+            cx.tcx.sess.span_note(span,\n+                                  ~\"use \\\"#[unsafe_destructor]\\\" on the \\\n+                                    implementation to force the compiler to \\\n+                                    allow this\");\n+        }\n+    } else {\n+        cx.tcx.sess.span_err(span,\n+                             ~\"cannot implement a destructor on a struct \\\n+                               with type parameters\");\n+        cx.tcx.sess.span_note(span,\n+                              ~\"use \\\"#[unsafe_destructor]\\\" on the \\\n+                                implementation to force the compiler to \\\n+                                allow this\");\n+    }\n+}\n+\n+fn check_block(block: &blk, cx: Context, visitor: visit::vt<Context>) {\n+    visit::visit_block(block, cx, visitor);\n+}\n+\n+fn check_item(item: @item, cx: Context, visitor: visit::vt<Context>) {\n+    // If this is a destructor, check kinds.\n+    if !attrs_contains_name(item.attrs, \"unsafe_destructor\") {\n+        match item.node {\n+            item_impl(_, Some(trait_ref), self_type, _) => {\n+                match cx.tcx.def_map.find(&trait_ref.ref_id) {\n+                    None => cx.tcx.sess.bug(~\"trait ref not in def map!\"),\n+                    Some(trait_def) => {\n+                        let trait_def_id = ast_util::def_id_of_def(trait_def);\n+                        if cx.tcx.lang_items.drop_trait() == trait_def_id {\n+                            // Yes, it's a destructor.\n+                            match self_type.node {\n+                                ty_path(_, path_node_id) => {\n+                                    let struct_def = cx.tcx.def_map.get(\n+                                        &path_node_id);\n+                                    let struct_did =\n+                                        ast_util::def_id_of_def(struct_def);\n+                                    check_struct_safe_for_destructor(\n+                                        cx,\n+                                        self_type.span,\n+                                        struct_did);\n+                                }\n+                                _ => {\n+                                    cx.tcx.sess.span_bug(self_type.span,\n+                                                         ~\"the self type for \\\n+                                                           the Drop trait \\\n+                                                           impl is not a \\\n+                                                           path\");\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            item_struct(struct_def, _) => {\n+                match struct_def.dtor {\n+                    None => {}\n+                    Some(ref dtor) => {\n+                        let struct_did = def_id { crate: 0, node: item.id };\n+                        check_struct_safe_for_destructor(cx,\n+                                                         dtor.span,\n+                                                         struct_did);\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n+\n+    let cx = Context { current_item: item.id, ..cx };\n+    visit::visit_item(item, cx, visitor);\n+}\n+\n // Yields the appropriate function to check the kind of closed over\n // variables. `id` is the node_id for some expression that creates the\n // closure."}, {"sha": "62fff5837666e98dff43879f4305944713cf9ff1", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -88,11 +88,14 @@ pub struct icx_popper {\n     ccx: @CrateContext,\n }\n \n+#[unsafe_destructor]\n impl Drop for icx_popper {\n     fn finalize(&self) {\n-      if self.ccx.sess.count_llvm_insns() {\n-          self.ccx.stats.llvm_insn_ctxt.pop();\n-      }\n+        unsafe {\n+            if self.ccx.sess.count_llvm_insns() {\n+                self.ccx.stats.llvm_insn_ctxt.pop();\n+            }\n+        }\n     }\n }\n "}, {"sha": "911abf95ff858a79f4c1959a66fd75eaa220d29f", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -88,6 +88,7 @@ pub struct Arena {\n     priv mut chunks: @List<Chunk>,\n }\n \n+#[unsafe_destructor]\n impl Drop for Arena {\n     fn finalize(&self) {\n         unsafe {"}, {"sha": "d9595656f05e225c949c920564b80236321b201d", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -54,11 +54,14 @@ struct DtorRes {\n   dtor: Option<@fn()>,\n }\n \n+#[unsafe_destructor]\n impl Drop for DtorRes {\n     fn finalize(&self) {\n-        match self.dtor {\n-          option::None => (),\n-          option::Some(f) => f()\n+        unsafe {\n+            match self.dtor {\n+                option::None => (),\n+                option::Some(f) => f()\n+            }\n         }\n     }\n }"}, {"sha": "fc60932b67ae11d8e31a70b51dd47ada809215fd", "filename": "src/libstd/future.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -35,6 +35,7 @@ pub struct Future<A> {\n \n // FIXME(#2829) -- futures should not be copyable, because they close\n // over ~fn's that have pipes and so forth within!\n+#[unsafe_destructor]\n impl<A> Drop for Future<A> {\n     fn finalize(&self) {}\n }"}, {"sha": "c49f65d0f99b8bef4dfef24c213333b6aed20e84", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -55,6 +55,7 @@ pub struct TcpSocket {\n   socket_data: @TcpSocketData,\n }\n \n+#[unsafe_destructor]\n impl Drop for TcpSocket {\n     fn finalize(&self) {\n         unsafe {"}, {"sha": "db8311ca0350eca09e629f489bb7a84990c8d159", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -1190,6 +1190,7 @@ mod big_tests {\n         key: &'self fn(@uint),\n     }\n \n+    #[unsafe_destructor]\n     impl Drop for LVal/&self {\n         fn finalize(&self) {\n             let x = unsafe { task::local_data::local_data_get(self.key) };"}, {"sha": "00de601da6fa3fa39aba711bd5dcc6d57d985428", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -167,9 +167,12 @@ type SemRelease = SemReleaseGeneric<'self, ()>;\n type SemAndSignalRelease = SemReleaseGeneric<'self, ~[Waitqueue]>;\n struct SemReleaseGeneric<Q> { sem: &'self Sem<Q> }\n \n+#[unsafe_destructor]\n impl<Q:Owned> Drop for SemReleaseGeneric/&self<Q> {\n     fn finalize(&self) {\n-        self.sem.release();\n+        unsafe {\n+            self.sem.release();\n+        }\n     }\n }\n \n@@ -189,6 +192,7 @@ fn SemAndSignalRelease(sem: &'r Sem<~[Waitqueue]>)\n /// A mechanism for atomic-unlock-and-deschedule blocking and signalling.\n pub struct Condvar { priv sem: &'self Sem<~[Waitqueue]> }\n \n+#[unsafe_destructor]\n impl Drop for Condvar/&self { fn finalize(&self) {} }\n \n pub impl Condvar/&self {\n@@ -261,6 +265,7 @@ pub impl Condvar/&self {\n             sem: &'self Sem<~[Waitqueue]>,\n         }\n \n+        #[unsafe_destructor]\n         impl Drop for SemAndSignalReacquire/&self {\n             fn finalize(&self) {\n                 unsafe {\n@@ -613,6 +618,7 @@ struct RWlockReleaseRead {\n     lock: &'self RWlock,\n }\n \n+#[unsafe_destructor]\n impl Drop for RWlockReleaseRead/&self {\n     fn finalize(&self) {\n         unsafe {\n@@ -643,10 +649,12 @@ fn RWlockReleaseRead(lock: &'r RWlock) -> RWlockReleaseRead/&r {\n \n // FIXME(#3588) should go inside of downgrade()\n #[doc(hidden)]\n+#[unsafe_destructor]\n struct RWlockReleaseDowngrade {\n     lock: &'self RWlock,\n }\n \n+#[unsafe_destructor]\n impl Drop for RWlockReleaseDowngrade/&self {\n     fn finalize(&self) {\n         unsafe {\n@@ -685,10 +693,12 @@ fn RWlockReleaseDowngrade(lock: &'r RWlock) -> RWlockReleaseDowngrade/&r {\n \n /// The \"write permission\" token used for rwlock.write_downgrade().\n pub struct RWlockWriteMode { priv lock: &'self RWlock }\n+#[unsafe_destructor]\n impl Drop for RWlockWriteMode/&self { fn finalize(&self) {} }\n \n /// The \"read permission\" token used for rwlock.write_downgrade().\n pub struct RWlockReadMode  { priv lock: &'self RWlock }\n+#[unsafe_destructor]\n impl Drop for RWlockReadMode/&self { fn finalize(&self) {} }\n \n pub impl RWlockWriteMode/&self {"}, {"sha": "d8ca5559f423d6cdebd2869e06cd1b87954cc98c", "filename": "src/libstd/task_pool.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibstd%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibstd%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask_pool.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -28,6 +28,7 @@ pub struct TaskPool<T> {\n \n }\n \n+#[unsafe_destructor]\n impl<T> Drop for TaskPool<T> {\n     fn finalize(&self) {\n         for self.channels.each |channel| {"}, {"sha": "421c1805f6a623720dcab3c335221a6bdabd6a79", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -268,6 +268,7 @@ pub struct Parser {\n \n }\n \n+#[unsafe_destructor]\n impl Drop for Parser {\n     /* do not copy the parser; its state is tied to outside state */\n     fn finalize(&self) {}"}, {"sha": "775955ff38c43a1e56583f0e68ad745e925a6333", "filename": "src/test/auxiliary/issue-2526.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2526.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -19,6 +19,7 @@ struct arc_destruct<T> {\n   _data: int,\n }\n \n+#[unsafe_destructor]\n impl<T:Const> Drop for arc_destruct<T> {\n     fn finalize(&self) {}\n }"}, {"sha": "c29ab9a769e1a7fb17ddc1676fdd31fc9d6dc4a0", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -56,6 +56,7 @@ struct r {\n   _l: @nillist,\n }\n \n+#[unsafe_destructor]\n impl Drop for r {\n     fn finalize(&self) {}\n }"}, {"sha": "fe7b29cf9a8680f0ddadcf74492c76ae8e0744c8", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue-2.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -12,9 +12,12 @@ struct defer {\n     x: &'self [&'self str],\n }\n \n+#[unsafe_destructor]\n impl Drop for defer<'self> {\n     fn finalize(&self) {\n-        error!(\"%?\", self.x);\n+        unsafe {\n+            error!(\"%?\", self.x);\n+        }\n     }\n }\n "}, {"sha": "f8f973dbc6bed59f45987f8083a8dcc6aac89c2c", "filename": "src/test/compile-fail/issue-2548.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -16,10 +16,13 @@ struct foo {\n \n }\n \n+#[unsafe_destructor]\n impl Drop for foo {\n     fn finalize(&self) {\n-        io::println(\"Goodbye, World!\");\n-        *self.x += 1;\n+        unsafe {\n+            io::println(\"Goodbye, World!\");\n+            *self.x += 1;\n+        }\n     }\n }\n "}, {"sha": "e956f95b4229c1400900f9ab5f5c5b11c6581571", "filename": "src/test/compile-fail/kindck-destructor-owned.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -0,0 +1,12 @@\n+struct Foo {\n+    f: @mut int,\n+}\n+\n+impl Drop for Foo { //~ ERROR cannot implement a destructor on a struct that is not Owned\n+    fn finalize(&self) {\n+        *self.f = 10;\n+    }\n+}\n+\n+fn main() { }\n+"}, {"sha": "c1071e5a8c4d973619415a6caef6bc26a8ed3600", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -17,6 +17,7 @@ fn main() {\n       _x: Port<()>,\n     }\n \n+    #[unsafe_destructor]\n     impl Drop for foo {\n         fn finalize(&self) {}\n     }"}, {"sha": "17e23360a5bbcd85024ff721d80543a06cb0a897", "filename": "src/test/compile-fail/pinned-deep-copy.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -12,9 +12,12 @@ struct r {\n   i: @mut int,\n }\n \n+#[unsafe_destructor]\n impl Drop for r {\n     fn finalize(&self) {\n-        *(self.i) = *(self.i) + 1;\n+        unsafe {\n+            *(self.i) = *(self.i) + 1;\n+        }\n     }\n }\n "}, {"sha": "a3c51e2b7b1fc36809c4104e46d2bc941f7804fa", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -12,9 +12,12 @@ struct r {\n   i: @mut int,\n }\n \n+#[unsafe_destructor]\n impl Drop for r {\n     fn finalize(&self) {\n-        *(self.i) = *(self.i) + 1;\n+        unsafe {\n+            *(self.i) = *(self.i) + 1;\n+        }\n     }\n }\n "}, {"sha": "d3ba5737b71f6f5d41e8a27f9f177f24fec548df", "filename": "src/test/run-fail/unwind-resource-fail3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -17,6 +17,7 @@ struct faily_box {\n  \n fn faily_box(i: @int) -> faily_box { faily_box { i: i } }\n \n+#[unsafe_destructor]\n impl Drop for faily_box {\n     fn finalize(&self) {\n         fail!(~\"quux\");"}, {"sha": "21b85084117c4f0cb7676c778bc2397d570f9738", "filename": "src/test/run-pass/drop-trait-generic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -12,6 +12,7 @@ struct S<T> {\n     x: T\n }\n \n+#[unsafe_destructor]\n impl<T> ::core::ops::Drop for S<T> {\n     fn finalize(&self) {\n         io::println(\"bye\");"}, {"sha": "5db8e34c7b5caade3e0f5546b54215d6eca37a15", "filename": "src/test/run-pass/init-res-into-things.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -17,9 +17,12 @@ struct r {\n \n struct Box { x: r }\n \n+#[unsafe_destructor]\n impl Drop for r {\n     fn finalize(&self) {\n-        *(self.i) = *(self.i) + 1;\n+        unsafe {\n+            *(self.i) = *(self.i) + 1;\n+        }\n     }\n }\n "}, {"sha": "c8c2d381a7e9932d827045397e3de7d3ba4f7814", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -155,6 +155,7 @@ pub mod pipes {\n         p: Option<*packet<T>>,\n     }\n \n+    #[unsafe_destructor]\n     impl<T:Owned> Drop for send_packet<T> {\n         fn finalize(&self) {\n             unsafe {\n@@ -187,6 +188,7 @@ pub mod pipes {\n         p: Option<*packet<T>>,\n     }\n \n+    #[unsafe_destructor]\n     impl<T:Owned> Drop for recv_packet<T> {\n         fn finalize(&self) {\n             unsafe {"}, {"sha": "52a5f19344794ffdae6ec2144f0792141d6a5ded", "filename": "src/test/run-pass/issue-2735-2.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -13,9 +13,12 @@ struct defer {\n     b: &'self mut bool,\n }\n \n+#[unsafe_destructor]\n impl Drop for defer/&self {\n     fn finalize(&self) {\n-        *(self.b) = true;\n+        unsafe {\n+            *(self.b) = true;\n+        }\n     }\n }\n "}, {"sha": "02e9f6f8b67e30dba705e3f79a54e8a30910318e", "filename": "src/test/run-pass/issue-2735-3.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -13,9 +13,12 @@ struct defer {\n     b: &'self mut bool,\n }\n \n+#[unsafe_destructor]\n impl Drop for defer/&self {\n     fn finalize(&self) {\n-        *(self.b) = true;\n+        unsafe {\n+            *(self.b) = true;\n+        }\n     }\n }\n "}, {"sha": "d5184efa4c3db87f2bb5c4cb2a1348f4d280404c", "filename": "src/test/run-pass/issue-979.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Fissue-979.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Fissue-979.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-979.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -12,9 +12,12 @@ struct r {\n   b: @mut int,\n }\n \n+#[unsafe_destructor]\n impl Drop for r {\n     fn finalize(&self) {\n-        *(self.b) += 1;\n+        unsafe {\n+            *(self.b) += 1;\n+        }\n     }\n }\n "}, {"sha": "207428c2cec78e85e6aac90eef33eeeaef082e2e", "filename": "src/test/run-pass/option-unwrap.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Foption-unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Foption-unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foption-unwrap.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -13,10 +13,13 @@ struct dtor {\n \n }\n \n+#[unsafe_destructor]\n impl Drop for dtor {\n     fn finalize(&self) {\n         // abuse access to shared mutable state to write this code\n-        *self.x -= 1;\n+        unsafe {\n+            *self.x -= 1;\n+        }\n     }\n }\n "}, {"sha": "7d9c01cd2e34fbfe2ea32db94400c33d2ea206f9", "filename": "src/test/run-pass/resource-assign-is-not-copy.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -12,9 +12,12 @@ struct r {\n   i: @mut int,\n }\n \n+#[unsafe_destructor]\n impl Drop for r {\n     fn finalize(&self) {\n-        *(self.i) += 1;\n+        unsafe {\n+            *(self.i) += 1;\n+        }\n     }\n }\n "}, {"sha": "cc9a27fd9e4d14a62938ec03173c1bc5f8902127", "filename": "src/test/run-pass/resource-destruct.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-destruct.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -12,9 +12,12 @@ struct shrinky_pointer {\n   i: @@mut int,\n }\n \n+#[unsafe_destructor]\n impl Drop for shrinky_pointer {\n     fn finalize(&self) {\n-        error!(~\"Hello!\"); **(self.i) -= 1;\n+        unsafe {\n+            error!(~\"Hello!\"); **(self.i) -= 1;\n+        }\n     }\n }\n "}, {"sha": "4ce6a37956c528ec706f43a64bf44ed8a9e31304", "filename": "src/test/run-pass/resource-generic.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-generic.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -16,9 +16,12 @@ struct finish<T> {\n   arg: Arg<T>\n }\n \n+#[unsafe_destructor]\n impl<T:Copy> Drop for finish<T> {\n     fn finalize(&self) {\n-        (self.arg.fin)(self.arg.val);\n+        unsafe {\n+            (self.arg.fin)(self.arg.val);\n+        }\n     }\n }\n "}, {"sha": "9eb680ed7cc03705ea63c2a3b1050534d81d34be", "filename": "src/test/run-pass/resource-in-struct.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -18,9 +18,12 @@ struct close_res {\n \n }\n \n+#[unsafe_destructor]\n impl Drop for close_res {\n     fn finalize(&self) {\n-        *(self.i) = false;\n+        unsafe {\n+            *(self.i) = false;\n+        }\n     }\n }\n "}, {"sha": "042ae1785d1be251f21cf53a4f34e76527bbd26e", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -20,15 +20,18 @@ struct notify {\n     ch: Chan<bool>, v: @mut bool,\n }\n \n+#[unsafe_destructor]\n impl Drop for notify {\n     fn finalize(&self) {\n-        error!(\"notify: task=%? v=%x unwinding=%b b=%b\",\n-               task::get_task(),\n-               ptr::addr_of(&(*(self.v))) as uint,\n-               task::failing(),\n-               *(self.v));\n-        let b = *(self.v);\n-        self.ch.send(b);\n+        unsafe {\n+            error!(\"notify: task=%? v=%x unwinding=%b b=%b\",\n+                   task::get_task(),\n+                   ptr::addr_of(&(*(self.v))) as uint,\n+                   task::failing(),\n+                   *(self.v));\n+            let b = *(self.v);\n+            self.ch.send(b);\n+        }\n     }\n }\n "}, {"sha": "ff22c18b02c74d5b905131df4b74c34ccada2c92", "filename": "src/test/run-pass/unique-pinned-nocopy-2.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Funique-pinned-nocopy-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Funique-pinned-nocopy-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pinned-nocopy-2.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -12,9 +12,12 @@ struct r {\n   i: @mut int,\n }\n \n+#[unsafe_destructor]\n impl Drop for r {\n     fn finalize(&self) {\n-        *(self.i) = *(self.i) + 1;\n+        unsafe {\n+            *(self.i) = *(self.i) + 1;\n+        }\n     }\n }\n "}, {"sha": "993acc2264f68161f99f3209b1420db4f560dac0", "filename": "src/test/run-pass/unwind-resource2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource2.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -15,6 +15,7 @@ struct complainer {\n   c: @int,\n }\n \n+#[unsafe_destructor]\n impl Drop for complainer {\n     fn finalize(&self) {}\n }"}, {"sha": "2a7c9610ad42e5936712452b634eb4ea5a787158", "filename": "src/test/run-pass/vec-slice-drop.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -13,9 +13,12 @@ struct foo {\n     x: @mut int,\n }\n \n+#[unsafe_destructor]\n impl Drop for foo {\n     fn finalize(&self) {\n-        *self.x += 1;\n+        unsafe {\n+            *self.x += 1;\n+        }\n     }\n }\n "}]}