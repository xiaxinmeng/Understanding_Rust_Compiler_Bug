{"sha": "b98629bfbc66f2011d989138b0d82d7598471445", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5ODYyOWJmYmM2NmYyMDExZDk4OTEzOGIwZDgyZDc1OTg0NzE0NDU=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-05-05T20:52:58Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-05-05T20:57:48Z"}, "message": "lazify backtrace formatting for delayed diagnostics\n\nThis defers backtrace formatting to the point where we\nactually want to flush delayed diagnostics. If they are discarded\nbefore that point then we can avoid invoking the backtrace formatting\nmachinery which will parse debug info and symbol tables.\n\nfor debuginfo=2 this leads to a 20% walltime reduction of the UI testsuite", "tree": {"sha": "240ca7873533455b29b4293854fa847fecbb8028", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/240ca7873533455b29b4293854fa847fecbb8028"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b98629bfbc66f2011d989138b0d82d7598471445", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b98629bfbc66f2011d989138b0d82d7598471445", "html_url": "https://github.com/rust-lang/rust/commit/b98629bfbc66f2011d989138b0d82d7598471445", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b98629bfbc66f2011d989138b0d82d7598471445/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a0f1781d04662041db5deaef89598a8edd53717", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a0f1781d04662041db5deaef89598a8edd53717", "html_url": "https://github.com/rust-lang/rust/commit/7a0f1781d04662041db5deaef89598a8edd53717"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "6aee769298bd832d54283c2e7670b06bdda970ae", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b98629bfbc66f2011d989138b0d82d7598471445/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98629bfbc66f2011d989138b0d82d7598471445/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=b98629bfbc66f2011d989138b0d82d7598471445", "patch": "@@ -294,6 +294,7 @@ impl error::Error for ExplicitBug {}\n \n pub use diagnostic::{Diagnostic, DiagnosticId, DiagnosticStyledString, SubDiagnostic};\n pub use diagnostic_builder::DiagnosticBuilder;\n+use std::backtrace::Backtrace;\n \n /// A handler deals with errors and other compiler output.\n /// Certain errors (fatal, bug, unimpl) may cause immediate exit,\n@@ -317,7 +318,7 @@ struct HandlerInner {\n     deduplicated_err_count: usize,\n     emitter: Box<dyn Emitter + sync::Send>,\n     delayed_span_bugs: Vec<Diagnostic>,\n-    delayed_good_path_bugs: Vec<Diagnostic>,\n+    delayed_good_path_bugs: Vec<DelayedDiagnostic>,\n \n     /// This set contains the `DiagnosticId` of all emitted diagnostics to avoid\n     /// emitting the same diagnostic with extended help (`--teach`) twice, which\n@@ -388,7 +389,7 @@ impl Drop for HandlerInner {\n         if !self.has_any_message() {\n             let bugs = std::mem::replace(&mut self.delayed_good_path_bugs, Vec::new());\n             self.flush_delayed(\n-                bugs,\n+                bugs.into_iter().map(DelayedDiagnostic::decorate).collect(),\n                 \"no warnings or errors encountered even though `delayed_good_path_bugs` issued\",\n             );\n         }\n@@ -968,12 +969,12 @@ impl HandlerInner {\n     }\n \n     fn delay_good_path_bug(&mut self, msg: &str) {\n-        let mut diagnostic = Diagnostic::new(Level::Bug, msg);\n+        let diagnostic = Diagnostic::new(Level::Bug, msg);\n         if self.flags.report_delayed_bugs {\n             self.emit_diagnostic(&diagnostic);\n         }\n-        diagnostic.note(&format!(\"delayed at {}\", std::backtrace::Backtrace::force_capture()));\n-        self.delayed_good_path_bugs.push(diagnostic);\n+        let backtrace = std::backtrace::Backtrace::force_capture();\n+        self.delayed_good_path_bugs.push(DelayedDiagnostic::with_backtrace(diagnostic, backtrace));\n     }\n \n     fn failure(&mut self, msg: &str) {\n@@ -1042,6 +1043,22 @@ impl HandlerInner {\n     }\n }\n \n+struct DelayedDiagnostic {\n+    inner: Diagnostic,\n+    note: Backtrace,\n+}\n+\n+impl DelayedDiagnostic {\n+    fn with_backtrace(diagnostic: Diagnostic, backtrace: Backtrace) -> Self {\n+        DelayedDiagnostic { inner: diagnostic, note: backtrace }\n+    }\n+\n+    fn decorate(mut self) -> Diagnostic {\n+        self.inner.note(&format!(\"delayed at {}\", self.note));\n+        self.inner\n+    }\n+}\n+\n #[derive(Copy, PartialEq, Clone, Hash, Debug, Encodable, Decodable)]\n pub enum Level {\n     Bug,"}]}