{"sha": "bfbc210bc1216b79e355eb70449caf08dc67d5ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYmMyMTBiYzEyMTZiNzllMzU1ZWI3MDQ0OWNhZjA4ZGM2N2Q1YWQ=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-05-22T16:15:53Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-05-22T19:05:13Z"}, "message": "Use Chalk's built-in representation of function item types", "tree": {"sha": "405645695f7eac402b000f99bef634e49f9e0e6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/405645695f7eac402b000f99bef634e49f9e0e6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfbc210bc1216b79e355eb70449caf08dc67d5ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfbc210bc1216b79e355eb70449caf08dc67d5ad", "html_url": "https://github.com/rust-lang/rust/commit/bfbc210bc1216b79e355eb70449caf08dc67d5ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfbc210bc1216b79e355eb70449caf08dc67d5ad/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4daca9f02ec46be1beef79e9ed647a3a24e2434", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4daca9f02ec46be1beef79e9ed647a3a24e2434", "html_url": "https://github.com/rust-lang/rust/commit/d4daca9f02ec46be1beef79e9ed647a3a24e2434"}], "stats": {"total": 138, "additions": 128, "deletions": 10}, "files": [{"sha": "0a8bb24ac2394e7d64248294ff847cd40acad6c5", "filename": "crates/ra_hir_ty/src/db.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bfbc210bc1216b79e355eb70449caf08dc67d5ad/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbc210bc1216b79e355eb70449caf08dc67d5ad/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs?ref=bfbc210bc1216b79e355eb70449caf08dc67d5ad", "patch": "@@ -76,6 +76,8 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     #[salsa::interned]\n     fn intern_type_ctor(&self, type_ctor: TypeCtor) -> crate::TypeCtorId;\n     #[salsa::interned]\n+    fn intern_callable_def(&self, callable_def: CallableDef) -> crate::CallableDefId;\n+    #[salsa::interned]\n     fn intern_type_param_id(&self, param_id: TypeParamId) -> GlobalTypeParamId;\n     #[salsa::interned]\n     fn intern_chalk_impl(&self, impl_: Impl) -> crate::traits::GlobalImplId;\n@@ -94,6 +96,9 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     #[salsa::invoke(crate::traits::chalk::impl_datum_query)]\n     fn impl_datum(&self, krate: CrateId, impl_id: chalk::ImplId) -> Arc<chalk::ImplDatum>;\n \n+    #[salsa::invoke(crate::traits::chalk::fn_def_datum_query)]\n+    fn fn_def_datum(&self, krate: CrateId, fn_def_id: chalk::FnDefId) -> Arc<chalk::FnDefDatum>;\n+\n     #[salsa::invoke(crate::traits::chalk::associated_ty_value_query)]\n     fn associated_ty_value(\n         &self,"}, {"sha": "93cb45a648c516d6b9be715eb4bd5183024505df", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfbc210bc1216b79e355eb70449caf08dc67d5ad/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbc210bc1216b79e355eb70449caf08dc67d5ad/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=bfbc210bc1216b79e355eb70449caf08dc67d5ad", "patch": "@@ -159,6 +159,12 @@ pub enum TypeCtor {\n pub struct TypeCtorId(salsa::InternId);\n impl_intern_key!(TypeCtorId);\n \n+/// This exists just for Chalk, because Chalk just has a single `FnDefId` where\n+/// we have different IDs for struct and enum variant constructors.\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, Ord, PartialOrd)]\n+pub struct CallableDefId(salsa::InternId);\n+impl_intern_key!(CallableDefId);\n+\n impl TypeCtor {\n     pub fn num_ty_params(self, db: &dyn HirDatabase) -> usize {\n         match self {"}, {"sha": "17c6460761ea43872209391959212793735cb9ae", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/bfbc210bc1216b79e355eb70449caf08dc67d5ad/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbc210bc1216b79e355eb70449caf08dc67d5ad/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=bfbc210bc1216b79e355eb70449caf08dc67d5ad", "patch": "@@ -2643,6 +2643,48 @@ fn test() {\n     );\n }\n \n+#[test]\n+fn builtin_fn_def_copy() {\n+    assert_snapshot!(\n+        infer_with_mismatches(r#\"\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+fn foo() {}\n+fn bar<T: Copy>(T) -> T {}\n+struct Struct(usize);\n+enum Enum { Variant(usize) }\n+\n+trait Test { fn test(&self) -> bool; }\n+impl<T: Copy> Test for T {}\n+\n+fn test() {\n+    foo.test();\n+    bar.test();\n+    Struct.test();\n+    Enum::Variant.test();\n+}\n+\"#, true),\n+        // wrong result, because the built-in Copy impl for fn defs doesn't exist in Chalk yet\n+        @r###\"\n+    42..44 '{}': ()\n+    61..62 'T': {unknown}\n+    69..71 '{}': ()\n+    69..71: expected T, got ()\n+    146..150 'self': &Self\n+    202..282 '{     ...t(); }': ()\n+    208..211 'foo': fn foo()\n+    208..218 'foo.test()': {unknown}\n+    224..227 'bar': fn bar<{unknown}>({unknown}) -> {unknown}\n+    224..234 'bar.test()': {unknown}\n+    240..246 'Struct': Struct(usize) -> Struct\n+    240..253 'Struct.test()': {unknown}\n+    259..272 'Enum::Variant': Variant(usize) -> Enum\n+    259..279 'Enum::...test()': {unknown}\n+    \"###\n+    );\n+}\n+\n #[test]\n fn builtin_sized() {\n     assert_snapshot!("}, {"sha": "5b0f12a3c7f3ad94acb3e7cbd0e43aa02c3ea5c7", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/bfbc210bc1216b79e355eb70449caf08dc67d5ad/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbc210bc1216b79e355eb70449caf08dc67d5ad/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=bfbc210bc1216b79e355eb70449caf08dc67d5ad", "patch": "@@ -14,7 +14,7 @@ use ra_db::{salsa::InternKey, CrateId};\n use super::{builtin, AssocTyValue, ChalkContext, Impl};\n use crate::{\n     db::HirDatabase, display::HirDisplay, method_resolution::TyFingerprint, utils::generics,\n-    DebruijnIndex, GenericPredicate, Substs, Ty, TypeCtor,\n+    CallableDef, DebruijnIndex, GenericPredicate, Substs, Ty, TypeCtor,\n };\n use chalk_rust_ir::WellKnownTrait;\n use mapping::{convert_where_clauses, generic_predicate_to_inline_bound, make_binders};\n@@ -54,10 +54,9 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n \n     fn fn_def_datum(\n         &self,\n-        _fn_def_id: chalk_ir::FnDefId<Interner>,\n+        fn_def_id: chalk_ir::FnDefId<Interner>,\n     ) -> Arc<chalk_rust_ir::FnDefDatum<Interner>> {\n-        // We don't yet provide any FnDefs to Chalk\n-        unimplemented!()\n+        self.db.fn_def_datum(self.krate, fn_def_id)\n     }\n \n     fn impls_for_trait(\n@@ -405,6 +404,26 @@ fn type_alias_associated_ty_value(\n     Arc::new(value)\n }\n \n+pub(crate) fn fn_def_datum_query(\n+    db: &dyn HirDatabase,\n+    _krate: CrateId,\n+    fn_def_id: FnDefId,\n+) -> Arc<FnDefDatum> {\n+    let callable_def: CallableDef = from_chalk(db, fn_def_id);\n+    let generic_params = generics(db.upcast(), callable_def.into());\n+    let sig = db.callable_item_signature(callable_def);\n+    let bound_vars = Substs::bound_vars(&generic_params, DebruijnIndex::INNERMOST);\n+    let where_clauses = convert_where_clauses(db, callable_def.into(), &bound_vars);\n+    let bound = chalk_rust_ir::FnDefDatumBound {\n+        // Note: Chalk doesn't actually use this information yet as far as I am aware, but we provide it anyway\n+        argument_types: sig.value.params().iter().map(|ty| ty.clone().to_chalk(db)).collect(),\n+        return_type: sig.value.ret().clone().to_chalk(db),\n+        where_clauses,\n+    };\n+    let datum = FnDefDatum { id: fn_def_id, binders: make_binders(bound, sig.num_binders) };\n+    Arc::new(datum)\n+}\n+\n impl From<AdtId> for crate::TypeCtorId {\n     fn from(struct_id: AdtId) -> Self {\n         struct_id.0\n@@ -417,6 +436,18 @@ impl From<crate::TypeCtorId> for AdtId {\n     }\n }\n \n+impl From<FnDefId> for crate::CallableDefId {\n+    fn from(fn_def_id: FnDefId) -> Self {\n+        InternKey::from_intern_id(fn_def_id.0)\n+    }\n+}\n+\n+impl From<crate::CallableDefId> for FnDefId {\n+    fn from(callable_def_id: crate::CallableDefId) -> Self {\n+        chalk_ir::FnDefId(callable_def_id.as_intern_id())\n+    }\n+}\n+\n impl From<ImplId> for crate::traits::GlobalImplId {\n     fn from(impl_id: ImplId) -> Self {\n         InternKey::from_intern_id(impl_id.0)"}, {"sha": "2a27f8ed8b3e30355f0d5e2dfccf3976e94c30c5", "filename": "crates/ra_hir_ty/src/traits/chalk/interner.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfbc210bc1216b79e355eb70449caf08dc67d5ad/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbc210bc1216b79e355eb70449caf08dc67d5ad/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs?ref=bfbc210bc1216b79e355eb70449caf08dc67d5ad", "patch": "@@ -20,6 +20,8 @@ pub type ImplId = chalk_ir::ImplId<Interner>;\n pub type ImplDatum = chalk_rust_ir::ImplDatum<Interner>;\n pub type AssociatedTyValueId = chalk_rust_ir::AssociatedTyValueId<Interner>;\n pub type AssociatedTyValue = chalk_rust_ir::AssociatedTyValue<Interner>;\n+pub type FnDefId = chalk_ir::FnDefId<Interner>;\n+pub type FnDefDatum = chalk_rust_ir::FnDefDatum<Interner>;\n \n impl chalk_ir::interner::Interner for Interner {\n     type InternedType = Box<chalk_ir::TyData<Self>>; // FIXME use Arc?"}, {"sha": "7841a0e218656836a86eb639f8c84f510e5b7754", "filename": "crates/ra_hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bfbc210bc1216b79e355eb70449caf08dc67d5ad/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbc210bc1216b79e355eb70449caf08dc67d5ad/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=bfbc210bc1216b79e355eb70449caf08dc67d5ad", "patch": "@@ -15,8 +15,8 @@ use crate::{\n     db::HirDatabase,\n     primitive::{FloatBitness, FloatTy, IntBitness, IntTy, Signedness, Uncertain},\n     traits::{builtin, AssocTyValue, Canonical, Impl, Obligation},\n-    ApplicationTy, GenericPredicate, InEnvironment, ProjectionPredicate, ProjectionTy, Substs,\n-    TraitEnvironment, TraitRef, Ty, TypeCtor,\n+    ApplicationTy, CallableDef, GenericPredicate, InEnvironment, ProjectionPredicate, ProjectionTy,\n+    Substs, TraitEnvironment, TraitRef, Ty, TypeCtor,\n };\n \n use super::interner::*;\n@@ -217,11 +217,14 @@ impl ToChalk for TypeCtor {\n             TypeCtor::Slice => TypeName::Slice,\n             TypeCtor::Ref(mutability) => TypeName::Ref(mutability.to_chalk(db)),\n             TypeCtor::Str => TypeName::Str,\n+            TypeCtor::FnDef(callable_def) => {\n+                let id = callable_def.to_chalk(db);\n+                TypeName::FnDef(id)\n+            }\n             TypeCtor::Int(Uncertain::Unknown)\n             | TypeCtor::Float(Uncertain::Unknown)\n             | TypeCtor::Adt(_)\n             | TypeCtor::Array\n-            | TypeCtor::FnDef(_)\n             | TypeCtor::FnPtr { .. }\n             | TypeCtor::Never\n             | TypeCtor::Closure { .. } => {\n@@ -260,7 +263,10 @@ impl ToChalk for TypeCtor {\n             TypeName::Ref(mutability) => TypeCtor::Ref(from_chalk(db, mutability)),\n             TypeName::Str => TypeCtor::Str,\n \n-            TypeName::FnDef(_) => unreachable!(),\n+            TypeName::FnDef(fn_def_id) => {\n+                let callable_def = from_chalk(db, fn_def_id);\n+                TypeCtor::FnDef(callable_def)\n+            }\n \n             TypeName::Error => {\n                 // this should not be reached, since we don't represent TypeName::Error with TypeCtor\n@@ -347,6 +353,18 @@ impl ToChalk for Impl {\n     }\n }\n \n+impl ToChalk for CallableDef {\n+    type Chalk = FnDefId;\n+\n+    fn to_chalk(self, db: &dyn HirDatabase) -> FnDefId {\n+        db.intern_callable_def(self).into()\n+    }\n+\n+    fn from_chalk(db: &dyn HirDatabase, fn_def_id: FnDefId) -> CallableDef {\n+        db.lookup_intern_callable_def(fn_def_id.into())\n+    }\n+}\n+\n impl ToChalk for TypeAliasId {\n     type Chalk = AssocTypeId;\n "}, {"sha": "d88828c7c0a0ecc9b72c145f45d2d9e21256beba", "filename": "crates/ra_hir_ty/src/traits/chalk/tls.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bfbc210bc1216b79e355eb70449caf08dc67d5ad/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbc210bc1216b79e355eb70449caf08dc67d5ad/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs?ref=bfbc210bc1216b79e355eb70449caf08dc67d5ad", "patch": "@@ -247,10 +247,24 @@ impl DebugContext<'_> {\n \n     pub fn debug_fn_def_id(\n         &self,\n-        _fn_def_id: chalk_ir::FnDefId<Interner>,\n+        fn_def_id: chalk_ir::FnDefId<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n-        write!(fmt, \"fn\")\n+        let def: CallableDef = from_chalk(self.0, fn_def_id);\n+        let name = match def {\n+            CallableDef::FunctionId(ff) => self.0.function_data(ff).name.clone(),\n+            CallableDef::StructId(s) => self.0.struct_data(s).name.clone(),\n+            CallableDef::EnumVariantId(e) => {\n+                let enum_data = self.0.enum_data(e.parent);\n+                enum_data.variants[e.local_id].name.clone()\n+            }\n+        };\n+        match def {\n+            CallableDef::FunctionId(_) => write!(fmt, \"{{fn {}}}\", name),\n+            CallableDef::StructId(_) | CallableDef::EnumVariantId(_) => {\n+                write!(fmt, \"{{ctor {}}}\", name)\n+            }\n+        }\n     }\n \n     pub fn debug_const("}]}