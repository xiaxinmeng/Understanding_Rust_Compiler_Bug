{"sha": "6a12bae1941bdef7c2716ffefed5594e5d7e9f8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMTJiYWUxOTQxYmRlZjdjMjcxNmZmZWZlZDU1OTRlNWQ3ZTlmOGU=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-08-18T20:19:30Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-08-18T20:19:30Z"}, "message": "no from/to bits in const: add tests cases for f64", "tree": {"sha": "ac71d41b13a0c221c06d6e5d571d98dd5e2da4b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac71d41b13a0c221c06d6e5d571d98dd5e2da4b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a12bae1941bdef7c2716ffefed5594e5d7e9f8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a12bae1941bdef7c2716ffefed5594e5d7e9f8e", "html_url": "https://github.com/rust-lang/rust/commit/6a12bae1941bdef7c2716ffefed5594e5d7e9f8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a12bae1941bdef7c2716ffefed5594e5d7e9f8e/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df4d42fc2debf7a7d43226c79480c71037be42b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/df4d42fc2debf7a7d43226c79480c71037be42b8", "html_url": "https://github.com/rust-lang/rust/commit/df4d42fc2debf7a7d43226c79480c71037be42b8"}], "stats": {"total": 46, "additions": 36, "deletions": 10}, "files": [{"sha": "50d9c93f9d405f16e956de1c6446fada39ea7b75", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a12bae1941bdef7c2716ffefed5594e5d7e9f8e/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a12bae1941bdef7c2716ffefed5594e5d7e9f8e/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=6a12bae1941bdef7c2716ffefed5594e5d7e9f8e", "patch": "@@ -331,7 +331,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n             if let Some(def_id) = cx.qpath_res(qpath, path_expr.hir_id).opt_def_id();\n             if match_def_path(cx, def_id, &paths::TRANSMUTE);\n             then {\n-                // Avoid suggesting f32::(from|to)_bits in const contexts.\n+                // Avoid suggesting from/to bits in const contexts.\n                 // See https://github.com/rust-lang/rust/issues/73736 for progress on making them `const fn`.\n                 let const_context = in_constant(cx, e.hir_id);\n "}, {"sha": "9f1948359e7d585d6d8ca2eacd26022d7330eeb8", "filename": "tests/ui/transmute.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6a12bae1941bdef7c2716ffefed5594e5d7e9f8e/tests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a12bae1941bdef7c2716ffefed5594e5d7e9f8e/tests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.rs?ref=6a12bae1941bdef7c2716ffefed5594e5d7e9f8e", "patch": "@@ -86,12 +86,21 @@ mod int_to_float {\n     fn test() {\n         let _: f32 = unsafe { std::mem::transmute(0_u32) };\n         let _: f32 = unsafe { std::mem::transmute(0_i32) };\n+        let _: f64 = unsafe { std::mem::transmute(0_u64) };\n+        let _: f64 = unsafe { std::mem::transmute(0_i64) };\n     }\n \n-    // See issue #5747\n-    const VALUE: f32 = unsafe { std::mem::transmute(0_u32) };\n-    const fn from_bits(v: u32) -> f32 {\n-        unsafe { std::mem::transmute(v) }\n+    mod issue_5747 {\n+        const VALUE32: f32 = unsafe { std::mem::transmute(0_u32) };\n+        const VALUE64: f64 = unsafe { std::mem::transmute(0_i64) };\n+\n+        const fn from_bits_32(v: i32) -> f32 {\n+            unsafe { std::mem::transmute(v) }\n+        }\n+\n+        const fn from_bits_64(v: u64) -> f64 {\n+            unsafe { std::mem::transmute(v) }\n+        }\n     }\n }\n "}, {"sha": "ad9953d12bcc626fb93c7849d0e8b6957406c76b", "filename": "tests/ui/transmute.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6a12bae1941bdef7c2716ffefed5594e5d7e9f8e/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a12bae1941bdef7c2716ffefed5594e5d7e9f8e/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=6a12bae1941bdef7c2716ffefed5594e5d7e9f8e", "patch": "@@ -128,19 +128,31 @@ error: transmute from a `i32` to a `f32`\n LL |         let _: f32 = unsafe { std::mem::transmute(0_i32) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f32::from_bits(0_i32 as u32)`\n \n+error: transmute from a `u64` to a `f64`\n+  --> $DIR/transmute.rs:89:31\n+   |\n+LL |         let _: f64 = unsafe { std::mem::transmute(0_u64) };\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f64::from_bits(0_u64)`\n+\n+error: transmute from a `i64` to a `f64`\n+  --> $DIR/transmute.rs:90:31\n+   |\n+LL |         let _: f64 = unsafe { std::mem::transmute(0_i64) };\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f64::from_bits(0_i64 as u64)`\n+\n error: transmute from a `&[u8]` to a `&str`\n-  --> $DIR/transmute.rs:99:28\n+  --> $DIR/transmute.rs:108:28\n    |\n LL |     let _: &str = unsafe { std::mem::transmute(b) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8(b).unwrap()`\n    |\n    = note: `-D clippy::transmute-bytes-to-str` implied by `-D warnings`\n \n error: transmute from a `&mut [u8]` to a `&mut str`\n-  --> $DIR/transmute.rs:100:32\n+  --> $DIR/transmute.rs:109:32\n    |\n LL |     let _: &mut str = unsafe { std::mem::transmute(mb) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8_mut(mb).unwrap()`\n \n-error: aborting due to 22 previous errors\n+error: aborting due to 24 previous errors\n "}, {"sha": "1040fee4b34d00c3b2cff7c9106ac16338d8ade7", "filename": "tests/ui/transmute_float_to_int.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6a12bae1941bdef7c2716ffefed5594e5d7e9f8e/tests%2Fui%2Ftransmute_float_to_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a12bae1941bdef7c2716ffefed5594e5d7e9f8e/tests%2Fui%2Ftransmute_float_to_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_float_to_int.rs?ref=6a12bae1941bdef7c2716ffefed5594e5d7e9f8e", "patch": "@@ -11,9 +11,14 @@ fn float_to_int() {\n }\n \n mod issue_5747 {\n-    const VALUE: u32 = unsafe { std::mem::transmute(1f32) };\n+    const VALUE32: i32 = unsafe { std::mem::transmute(1f32) };\n+    const VALUE64: u64 = unsafe { std::mem::transmute(1f64) };\n \n-    const fn to_bits(v: f32) -> u32 {\n+    const fn to_bits_32(v: f32) -> u32 {\n+        unsafe { std::mem::transmute(v) }\n+    }\n+\n+    const fn to_bits_64(v: f64) -> i64 {\n         unsafe { std::mem::transmute(v) }\n     }\n }"}]}