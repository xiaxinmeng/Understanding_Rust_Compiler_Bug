{"sha": "fc8a6c343a3982534ccb64cd93fb0bc4e1273bab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjOGE2YzM0M2EzOTgyNTM0Y2NiNjRjZDkzZmIwYmM0ZTEyNzNiYWI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-03T12:14:28Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-03T12:14:28Z"}, "message": "Update Cargo.lock\n\nAlso update for cranelift changes.", "tree": {"sha": "a841c105248a81bcf2c6667ec11ee76ab13fd850", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a841c105248a81bcf2c6667ec11ee76ab13fd850"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc8a6c343a3982534ccb64cd93fb0bc4e1273bab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc8a6c343a3982534ccb64cd93fb0bc4e1273bab", "html_url": "https://github.com/rust-lang/rust/commit/fc8a6c343a3982534ccb64cd93fb0bc4e1273bab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc8a6c343a3982534ccb64cd93fb0bc4e1273bab/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23e0b0bd9caac40500a51b6cf86d6dd8ea04a5fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/23e0b0bd9caac40500a51b6cf86d6dd8ea04a5fd", "html_url": "https://github.com/rust-lang/rust/commit/23e0b0bd9caac40500a51b6cf86d6dd8ea04a5fd"}], "stats": {"total": 236, "additions": 123, "deletions": 113}, "files": [{"sha": "4f967960e35037b414f5287dc63ec1c8212bd715", "filename": "Cargo.lock", "status": "modified", "additions": 71, "deletions": 55, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/fc8a6c343a3982534ccb64cd93fb0bc4e1273bab/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/fc8a6c343a3982534ccb64cd93fb0bc4e1273bab/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=fc8a6c343a3982534ccb64cd93fb0bc4e1273bab", "patch": "@@ -1,9 +1,9 @@\n [[package]]\n name = \"aho-corasick\"\n-version = \"0.6.8\"\n+version = \"0.6.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"memchr 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -90,7 +90,7 @@ dependencies = [\n [[package]]\n name = \"cranelift\"\n version = \"0.22.0\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#8382f9e9886818b3cb9ed3e49fdceb8f4ec19456\"\n+source = \"git+https://github.com/CraneStation/cranelift.git#8e7112166726d66640e26c3d4df7def406b0df10\"\n dependencies = [\n  \"cranelift-codegen 0.22.0 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"cranelift-frontend 0.22.0 (git+https://github.com/CraneStation/cranelift.git)\",\n@@ -99,39 +99,39 @@ dependencies = [\n [[package]]\n name = \"cranelift-bforest\"\n version = \"0.22.0\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#8382f9e9886818b3cb9ed3e49fdceb8f4ec19456\"\n+source = \"git+https://github.com/CraneStation/cranelift.git#8e7112166726d66640e26c3d4df7def406b0df10\"\n dependencies = [\n  \"cranelift-entity 0.22.0 (git+https://github.com/CraneStation/cranelift.git)\",\n ]\n \n [[package]]\n name = \"cranelift-codegen\"\n version = \"0.22.0\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#8382f9e9886818b3cb9ed3e49fdceb8f4ec19456\"\n+source = \"git+https://github.com/CraneStation/cranelift.git#8e7112166726d66640e26c3d4df7def406b0df10\"\n dependencies = [\n  \"cranelift-bforest 0.22.0 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"cranelift-codegen-meta 0.22.0 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"cranelift-entity 0.22.0 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"failure 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure_derive 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"target-lexicon 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"cranelift-codegen-meta\"\n version = \"0.22.0\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#8382f9e9886818b3cb9ed3e49fdceb8f4ec19456\"\n+source = \"git+https://github.com/CraneStation/cranelift.git#8e7112166726d66640e26c3d4df7def406b0df10\"\n \n [[package]]\n name = \"cranelift-entity\"\n version = \"0.22.0\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#8382f9e9886818b3cb9ed3e49fdceb8f4ec19456\"\n+source = \"git+https://github.com/CraneStation/cranelift.git#8e7112166726d66640e26c3d4df7def406b0df10\"\n \n [[package]]\n name = \"cranelift-faerie\"\n version = \"0.22.0\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#8382f9e9886818b3cb9ed3e49fdceb8f4ec19456\"\n+source = \"git+https://github.com/CraneStation/cranelift.git#8e7112166726d66640e26c3d4df7def406b0df10\"\n dependencies = [\n  \"cranelift-codegen 0.22.0 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"cranelift-module 0.22.0 (git+https://github.com/CraneStation/cranelift.git)\",\n@@ -144,28 +144,28 @@ dependencies = [\n [[package]]\n name = \"cranelift-frontend\"\n version = \"0.22.0\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#8382f9e9886818b3cb9ed3e49fdceb8f4ec19456\"\n+source = \"git+https://github.com/CraneStation/cranelift.git#8e7112166726d66640e26c3d4df7def406b0df10\"\n dependencies = [\n  \"cranelift-codegen 0.22.0 (git+https://github.com/CraneStation/cranelift.git)\",\n- \"log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"target-lexicon 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"cranelift-module\"\n version = \"0.22.0\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#8382f9e9886818b3cb9ed3e49fdceb8f4ec19456\"\n+source = \"git+https://github.com/CraneStation/cranelift.git#8e7112166726d66640e26c3d4df7def406b0df10\"\n dependencies = [\n  \"cranelift-codegen 0.22.0 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"cranelift-entity 0.22.0 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"failure 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"cranelift-native\"\n version = \"0.22.0\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#8382f9e9886818b3cb9ed3e49fdceb8f4ec19456\"\n+source = \"git+https://github.com/CraneStation/cranelift.git#8e7112166726d66640e26c3d4df7def406b0df10\"\n dependencies = [\n  \"cranelift-codegen 0.22.0 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"raw-cpuid 6.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -175,7 +175,7 @@ dependencies = [\n [[package]]\n name = \"cranelift-simplejit\"\n version = \"0.22.0\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#8382f9e9886818b3cb9ed3e49fdceb8f4ec19456\"\n+source = \"git+https://github.com/CraneStation/cranelift.git#8e7112166726d66640e26c3d4df7def406b0df10\"\n dependencies = [\n  \"cranelift-codegen 0.22.0 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"cranelift-module 0.22.0 (git+https://github.com/CraneStation/cranelift.git)\",\n@@ -194,7 +194,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"humantime 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termcolor 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -227,11 +227,11 @@ dependencies = [\n  \"failure 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"goblin 0.0.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scroll 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"string-interner 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"structopt 0.2.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"structopt-derive 0.2.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"structopt 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"structopt-derive 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"target-lexicon 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -250,9 +250,9 @@ version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 0.6.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"synstructure 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"synstructure 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -265,7 +265,7 @@ name = \"goblin\"\n version = \"0.0.17\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"plain 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scroll 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -275,11 +275,19 @@ name = \"goblin\"\n version = \"0.0.19\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"plain 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scroll 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"heck\"\n+version = \"0.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"unicode-segmentation 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"humantime\"\n version = \"1.1.1\"\n@@ -313,7 +321,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"log\"\n-version = \"0.4.5\"\n+version = \"0.4.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -329,7 +337,7 @@ dependencies = [\n \n [[package]]\n name = \"memchr\"\n-version = \"2.1.0\"\n+version = \"2.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -357,7 +365,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"quote\"\n-version = \"0.6.8\"\n+version = \"0.6.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -391,19 +399,19 @@ name = \"regex\"\n version = \"1.0.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"aho-corasick 0.6.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"memchr 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"aho-corasick 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex-syntax 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"utf8-ranges 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"utf8-ranges 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"regex-syntax\"\n version = \"0.6.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"ucd-util 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ucd-util 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -465,8 +473,8 @@ version = \"0.9.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 0.6.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -512,41 +520,42 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"structopt\"\n-version = \"0.2.12\"\n+version = \"0.2.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"structopt-derive 0.2.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"structopt-derive 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"structopt-derive\"\n-version = \"0.2.12\"\n+version = \"0.2.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n+ \"heck 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc-macro2 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 0.6.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"syn\"\n-version = \"0.15.14\"\n+version = \"0.15.18\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 0.6.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"synstructure\"\n-version = \"0.10.0\"\n+version = \"0.10.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 0.6.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -596,7 +605,12 @@ dependencies = [\n \n [[package]]\n name = \"ucd-util\"\n-version = \"0.1.1\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"unicode-segmentation\"\n+version = \"1.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -611,7 +625,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"utf8-ranges\"\n-version = \"1.0.1\"\n+version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -661,7 +675,7 @@ dependencies = [\n ]\n \n [metadata]\n-\"checksum aho-corasick 0.6.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"68f56c7353e5a9547cbd76ed90f7bb5ffc3ba09d4ea9bd1d8c06c8b1142eeb5a\"\n+\"checksum aho-corasick 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1e9a933f4e58658d7b12defcf96dc5c720f20832deebe3e0a19efd3b6aaeeb9e\"\n \"checksum ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n \"checksum ar 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"095515608290b62ac2427084f9ac3cfeb5dc76067f7d94564db9db1c46cc0a85\"\n \"checksum atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a7d5b8723950951411ee34d271d99dddcc2035a16ab25310ea2c8cfd4369652\"\n@@ -691,18 +705,19 @@ dependencies = [\n \"checksum gcc 0.3.55 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8f5f3913fa0bfe7ee1fd8248b6b9f42a5af4b9d65ec2dd2c3c26132b950ecfc2\"\n \"checksum goblin 0.0.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5911d7df7b8f65ab676c5327b50acea29d3c6a1a4ad05e444cf5dce321b26db2\"\n \"checksum goblin 0.0.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c65cd533b33e3d04c6e393225fa8919ddfcf5862ca8919c7f9a167c312ef41c2\"\n+\"checksum heck 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ea04fa3ead4e05e51a7c806fc07271fdbde4e246a6c6d1efd52e72230b771b82\"\n \"checksum humantime 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0484fda3e7007f2a4a0d9c3a703ca38c71c54c55602ce4660c419fd32e188c9e\"\n \"checksum indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e81a7c05f79578dbc15793d8b619db9ba32b4577003ef3af1a91c416798c58d\"\n \"checksum itoa 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1306f3464951f30e30d12373d31c79fbd52d236e5e896fd92f96ec7babbbe60b\"\n \"checksum lazy_static 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ca488b89a5657b0a2ecd45b95609b3e848cf1755da332a0da46e2b2b1cb371a7\"\n \"checksum libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76e3a3ef172f1a0b9a9ff0dd1491ae5e6c948b94479a3021819ba7d860c8645d\"\n-\"checksum log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4fcce5fa49cc693c312001daf1d13411c4a5283796bac1084299ea3e567113f\"\n+\"checksum log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c84ec4b527950aa83a329754b01dbe3f58361d1c5efacd1f6d68c494d08a17c6\"\n \"checksum mach 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"86dd2487cdfea56def77b88438a2c915fb45113c5319bfe7e14306ca4cd0b0e1\"\n-\"checksum memchr 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4b3629fe9fdbff6daa6c33b90f7c08355c1aca05a3d01fa8063b822fcf185f3b\"\n+\"checksum memchr 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a3eb002f0535929f1199681417029ebea04aadc0c7a4224b46be99c7f5d6a16\"\n \"checksum plain 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b4596b6d070b27117e987119b4dac604f3c58cfb0b191112e24771b2faeac1a6\"\n \"checksum proc-macro2 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3d7b7eaaa90b4a90a932a9ea6666c95a389e424eff347f0f793979289429feee\"\n \"checksum quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9274b940887ce9addde99c4eee6b5c44cc494b182b97e73dc8ffdcb3397fd3f0\"\n-\"checksum quote 0.6.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dd636425967c33af890042c483632d33fa7a18f19ad1d7ea72e8998c6ef8dea5\"\n+\"checksum quote 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"63b5829244f52738cfee93b3a165c1911388675be000c888d2fae620dee8fa5b\"\n \"checksum raw-cpuid 6.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"41219962ecab392f1e68db9e7ebd972800d4045a128cc23462b384e8c312cde1\"\n \"checksum redox_syscall 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c214e91d3ecf43e9a4e41e578973adeb14b474f2bee858742d127af75a0112b1\"\n \"checksum redox_termios 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e891cfe48e9100a70a3b6eb652fef28920c117d366339687bd5576160db0f76\"\n@@ -720,19 +735,20 @@ dependencies = [\n \"checksum serde_json 1.0.32 (registry+https://github.com/rust-lang/crates.io-index)\" = \"43344e7ce05d0d8280c5940cabb4964bea626aa58b1ec0e8c73fa2a8512a38ce\"\n \"checksum string-interner 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"abb38a0d8fe673c40b10b6b75abcb076a958cc10fb894f14993d9737c4c87000\"\n \"checksum strsim 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb4f380125926a99e52bc279241539c018323fab05ad6368b56f93d9369ff550\"\n-\"checksum structopt 0.2.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d77af7242f18c40fd19cb270985930f239ee1646cfb482050bbae9da1d18743b\"\n-\"checksum structopt-derive 0.2.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"17ff01fe96de9d16e7372ae5f19dd7ece2c703b51043c3db9ea27f9e393ea311\"\n-\"checksum syn 0.15.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"baaba45c6bf60fe29aaf241fa33306c0b75c801edea8378263a8f043b09a5634\"\n-\"checksum synstructure 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ec37f4fab4bafaf6b5621c1d54e6aa5d4d059a8f84929e87abfdd7f9f04c6db2\"\n+\"checksum structopt 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"41c4a2479a078509940d82773d90ff824a8c89533ab3b59cd3ce8b0c0e369c02\"\n+\"checksum structopt-derive 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5352090cfae7a2c85e1a31146268b53396106c88ca5d6ccee2e3fae83b6e35c2\"\n+\"checksum syn 0.15.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90c39a061e2f412a9f869540471ab679e85e50c6b05604daf28bc3060f75c430\"\n+\"checksum synstructure 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"73687139bf99285483c96ac0add482c3776528beac1d97d444f6e91f203a2015\"\n \"checksum target-lexicon 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a34226bd63b5a26fc909f5f0d7ef4dc55d5851077035e49437e4e14bf567247f\"\n \"checksum termcolor 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4096add70612622289f2fdcdbd5086dc81c1e2675e6ae58d6c4f62a16c6d7f2f\"\n \"checksum termion 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"689a3bdfaab439fd92bc87df5c4c78417d3cbe537487274e9b0b2dce76e92096\"\n \"checksum textwrap 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"307686869c93e71f94da64286f9a9524c0f308a9e1c87a583de8e9c9039ad3f6\"\n \"checksum thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c6b53e329000edc2b34dbe8545fd20e55a333362d0a321909685a19bd28c3f1b\"\n-\"checksum ucd-util 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fd2be2d6639d0f8fe6cdda291ad456e23629558d466e2789d2c3e9892bda285d\"\n+\"checksum ucd-util 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d0f8bfa9ff0cadcd210129ad9d2c5f145c13e9ced3d3e5d948a6213487d52444\"\n+\"checksum unicode-segmentation 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aa6024fc12ddfd1c6dbc14a80fa2324d4568849869b779f6bd37e5e4c03344d1\"\n \"checksum unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"882386231c45df4700b275c7ff55b6f3698780a650026380e72dabe76fa46526\"\n \"checksum unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc72304796d0818e357ead4e000d19c9c174ab23dc11093ac919054d20a6a7fc\"\n-\"checksum utf8-ranges 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fd70f467df6810094968e2fce0ee1bd0e87157aceb026a8c083bcf5e25b9efe4\"\n+\"checksum utf8-ranges 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"796f7e48bef87609f7ade7e06495a87d5cd06c7866e6a5cbfceffc558a243737\"\n \"checksum vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"05c78687fb1a80548ae3250346c3db86a80a7cdd77bda190189f2d0a0987c81a\"\n \"checksum version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"914b1a6776c4c929a602fafd8bc742e06365d4bcbe48c30f9cca5824f70dc9dd\"\n \"checksum winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92c1eb33641e276cfa214a0522acad57be5c56b10cb348b3c5117db75f3ac4b0\""}, {"sha": "42119a9bfad84b3f145ae8f79fd355d21f3f6179", "filename": "src/abi.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc8a6c343a3982534ccb64cd93fb0bc4e1273bab/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8a6c343a3982534ccb64cd93fb0bc4e1273bab/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=fc8a6c343a3982534ccb64cd93fb0bc4e1273bab", "patch": "@@ -17,7 +17,7 @@ impl PassMode {\n         match self {\n             PassMode::NoPass => unimplemented!(\"pass mode nopass\"),\n             PassMode::ByVal(cton_type) => cton_type,\n-            PassMode::ByRef => fx.module.pointer_type(),\n+            PassMode::ByRef => fx.pointer_type,\n         }\n     }\n }\n@@ -257,7 +257,7 @@ impl<'a, 'tcx: 'a, B: Backend + 'a> FunctionCx<'a, 'tcx, B> {\n             CValue::ByVal(val, return_layout)\n         } else {\n             CValue::ByRef(\n-                self.bcx.ins().iconst(self.module.pointer_type(), 0),\n+                self.bcx.ins().iconst(self.pointer_type, 0),\n                 return_layout,\n             )\n         }\n@@ -283,7 +283,7 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(\n     let ret_param = match output_pass_mode {\n         PassMode::NoPass => None,\n         PassMode::ByVal(_) => None,\n-        PassMode::ByRef => Some(fx.bcx.append_ebb_param(start_ebb, fx.module.pointer_type())),\n+        PassMode::ByRef => Some(fx.bcx.append_ebb_param(start_ebb, fx.pointer_type)),\n     };\n \n     enum ArgKind {\n@@ -342,7 +342,7 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(\n \n     match output_pass_mode {\n         PassMode::NoPass => {\n-            let null = fx.bcx.ins().iconst(fx.module.pointer_type(), 0);\n+            let null = fx.bcx.ins().iconst(fx.pointer_type, 0);\n             //unimplemented!(\"pass mode nopass\");\n             fx.local_map.insert(\n                 RETURN_PLACE,\n@@ -526,7 +526,7 @@ pub fn codegen_call_inner<'a, 'tcx: 'a>(\n         PassMode::NoPass => None,\n         PassMode::ByRef => match ret_place {\n             Some(ret_place) => Some(ret_place.expect_addr()),\n-            None => Some(fx.bcx.ins().iconst(fx.module.pointer_type(), 0)),\n+            None => Some(fx.bcx.ins().iconst(fx.pointer_type, 0)),\n         },\n         PassMode::ByVal(_) => None,\n     };"}, {"sha": "81ab980c334b6e19aa6b33ad0dd73867a1745b27", "filename": "src/base.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fc8a6c343a3982534ccb64cd93fb0bc4e1273bab/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8a6c343a3982534ccb64cd93fb0bc4e1273bab/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=fc8a6c343a3982534ccb64cd93fb0bc4e1273bab", "patch": "@@ -11,7 +11,6 @@ impl<F: Fn() -> String> Drop for PrintOnPanic<F> {\n \n pub fn trans_mono_item<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    isa: &isa::TargetIsa,\n     module: &mut Module<impl Backend>,\n     caches: &mut Caches<'tcx>,\n     ccx: &mut crate::constant::ConstantCx,\n@@ -43,7 +42,7 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(\n                 }\n             });\n \n-            trans_fn(tcx, isa, module, ccx, caches, inst);\n+            trans_fn(tcx, module, ccx, caches, inst);\n         }\n         MonoItem::Static(def_id) => {\n             crate::constant::codegen_static(ccx, def_id);\n@@ -56,7 +55,6 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(\n \n fn trans_fn<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    isa: &isa::TargetIsa,\n     module: &mut Module<impl Backend>,\n     constants: &mut crate::constant::ConstantCx,\n     caches: &mut Caches<'tcx>,\n@@ -84,10 +82,11 @@ fn trans_fn<'a, 'tcx: 'a>(\n     }\n \n     // Step 5. Make FunctionCx\n+    let pointer_type = module.target_config().pointer_type();\n     let mut fx = FunctionCx {\n         tcx,\n-        isa,\n         module,\n+        pointer_type,\n         instance,\n         mir,\n         bcx,\n@@ -584,7 +583,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                 Rvalue::Repeat(operand, times) => {\n                     let operand = trans_operand(fx, operand);\n                     for i in 0..*times {\n-                        let index = fx.bcx.ins().iconst(fx.module.pointer_type(), i as i64);\n+                        let index = fx.bcx.ins().iconst(fx.pointer_type, i as i64);\n                         let to = lval.place_index(fx, index);\n                         to.write_cvalue(fx, operand);\n                     }\n@@ -596,7 +595,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                         ty::Array(_elem_ty, len) => {\n                             let len = crate::constant::force_eval_const(fx, len)\n                                 .unwrap_usize(fx.tcx) as i64;\n-                            fx.bcx.ins().iconst(fx.module.pointer_type(), len)\n+                            fx.bcx.ins().iconst(fx.pointer_type, len)\n                         }\n                         ty::Slice(_elem_ty) => match place {\n                             CPlace::Addr(_, size, _) => size.unwrap(),\n@@ -644,7 +643,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                     AggregateKind::Array(_ty) => {\n                         for (i, operand) in operands.into_iter().enumerate() {\n                             let operand = trans_operand(fx, operand);\n-                            let index = fx.bcx.ins().iconst(fx.module.pointer_type(), i as i64);\n+                            let index = fx.bcx.ins().iconst(fx.pointer_type, i as i64);\n                             let to = lval.place_index(fx, index);\n                             to.write_cvalue(fx, operand);\n                         }"}, {"sha": "39bd293a2892d78f7857701fbf11447ae109f19e", "filename": "src/common.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fc8a6c343a3982534ccb64cd93fb0bc4e1273bab/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8a6c343a3982534ccb64cd93fb0bc4e1273bab/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=fc8a6c343a3982534ccb64cd93fb0bc4e1273bab", "patch": "@@ -134,7 +134,7 @@ impl<'tcx> CValue<'tcx> {\n                 let addr = fx\n                     .bcx\n                     .ins()\n-                    .stack_addr(fx.module.pointer_type(), stack_slot, 0);\n+                    .stack_addr(fx.pointer_type, stack_slot, 0);\n                 fx.bcx.ins().store(MemFlags::new(), value, addr, 0);\n                 addr\n             }\n@@ -193,11 +193,11 @@ impl<'tcx> CValue<'tcx> {\n                 let val1 =\n                     fx.bcx\n                         .ins()\n-                        .load(fx.module.pointer_type(), MemFlags::new(), addr, val1_offset);\n+                        .load(fx.pointer_type, MemFlags::new(), addr, val1_offset);\n                 let val2 =\n                     fx.bcx\n                         .ins()\n-                        .load(fx.module.pointer_type(), MemFlags::new(), addr, val2_offset);\n+                        .load(fx.pointer_type, MemFlags::new(), addr, val2_offset);\n                 (val1, val2)\n             }\n             CValue::ByVal(_, _layout) => bug!(\"Please use load_value for ByVal\"),\n@@ -248,7 +248,7 @@ impl<'tcx> CValue<'tcx> {\n                             let extra = fx\n                                 .bcx\n                                 .ins()\n-                                .iconst(fx.module.pointer_type(), size.unwrap_usize(fx.tcx) as i64);\n+                                .iconst(fx.pointer_type, size.unwrap_usize(fx.tcx) as i64);\n                             (ptr, extra)\n                         }\n                         _ => bug!(\"unsize non array {:?} to slice\", ty),\n@@ -346,7 +346,7 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n         CPlace::Addr(\n             fx.bcx\n                 .ins()\n-                .stack_addr(fx.module.pointer_type(), stack_slot, 0),\n+                .stack_addr(fx.pointer_type, stack_slot, 0),\n             None,\n             layout,\n         )\n@@ -362,7 +362,7 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n         CPlace::Addr(\n             fx.bcx\n                 .ins()\n-                .stack_addr(fx.module.pointer_type(), stack_slot, 0),\n+                .stack_addr(fx.pointer_type, stack_slot, 0),\n             None,\n             layout,\n         )\n@@ -433,12 +433,12 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n                     CValue::ByRef(from, _src_layout) => {\n                         let size = dst_layout.size.bytes() as i32;\n                         // FIXME emit_small_memcpy has a bug as of commit CraneStation/cranelift@b2281ed\n-                        // fx.bcx.emit_small_memcpy(fx.isa, addr, from, size, layout.align.abi() as u8, src_layout.align.abi() as u8);\n+                        // fx.bcx.emit_small_memcpy(fx.module.target_config(), addr, from, size, layout.align.abi() as u8, src_layout.align.abi() as u8);\n \n                         let mut offset = 0;\n                         while size - offset >= 8 {\n                             let byte = fx.bcx.ins().load(\n-                                fx.module.pointer_type(),\n+                                fx.pointer_type,\n                                 MemFlags::new(),\n                                 from,\n                                 offset,\n@@ -609,9 +609,8 @@ pub fn cton_intcast<'a, 'tcx: 'a>(\n \n pub struct FunctionCx<'a, 'tcx: 'a, B: Backend + 'a> {\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    // FIXME get isa from Module\n-    pub isa: &'a isa::TargetIsa,\n     pub module: &'a mut Module<B>,\n+    pub pointer_type: Type, // Cached from module\n     pub instance: Instance<'tcx>,\n     pub mir: &'tcx Mir<'tcx>,\n     pub param_substs: &'tcx Substs<'tcx>,"}, {"sha": "c7a6b971041dbd8829073a5a1f6b7c2f4b030587", "filename": "src/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc8a6c343a3982534ccb64cd93fb0bc4e1273bab/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8a6c343a3982534ccb64cd93fb0bc4e1273bab/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=fc8a6c343a3982534ccb64cd93fb0bc4e1273bab", "patch": "@@ -110,7 +110,7 @@ fn trans_const_value<'a, 'tcx: 'a>(\n             let func_ref = fx.get_function_ref(\n                 Instance::resolve(fx.tcx, ParamEnv::reveal_all(), def_id, substs).unwrap(),\n             );\n-            let func_addr = fx.bcx.ins().func_addr(fx.module.pointer_type(), func_ref);\n+            let func_addr = fx.bcx.ins().func_addr(fx.pointer_type, func_ref);\n             CValue::ByVal(func_addr, layout)\n         }\n         _ => trans_const_place(fx, const_).to_cvalue(fx),\n@@ -176,7 +176,7 @@ fn cplace_for_dataid<'a, 'tcx: 'a>(\n     let global_ptr = fx\n         .bcx\n         .ins()\n-        .global_value(fx.module.pointer_type(), local_data_id);\n+        .global_value(fx.pointer_type, local_data_id);\n     let layout = fx.layout_of(fx.monomorphize(&ty));\n     assert!(!layout.is_unsized(), \"unsized statics aren't supported\");\n     CPlace::Addr(global_ptr, None, layout)"}, {"sha": "f2cdb9b48f813074252e2a7f5703ab31b5ca5ff6", "filename": "src/intrinsics.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fc8a6c343a3982534ccb64cd93fb0bc4e1273bab/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8a6c343a3982534ccb64cd93fb0bc4e1273bab/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=fc8a6c343a3982534ccb64cd93fb0bc4e1273bab", "patch": "@@ -132,14 +132,14 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             let elem_size = fx\n                 .bcx\n                 .ins()\n-                .iconst(fx.module.pointer_type(), elem_size as i64);\n+                .iconst(fx.pointer_type, elem_size as i64);\n             assert_eq!(args.len(), 3);\n             let byte_amount = fx.bcx.ins().imul(count, elem_size);\n \n             if intrinsic.ends_with(\"_nonoverlapping\") {\n-                fx.bcx.call_memcpy(fx.isa, dst, src, byte_amount);\n+                fx.bcx.call_memcpy(&fx.module.target_config(), dst, src, byte_amount);\n             } else {\n-                fx.bcx.call_memmove(fx.isa, dst, src, byte_amount);\n+                fx.bcx.call_memmove(&fx.module.target_config(), dst, src, byte_amount);\n             }\n         };\n         discriminant_value, (c val) {\n@@ -157,7 +157,7 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n                 _ if !layout.is_unsized() => fx\n                     .bcx\n                     .ins()\n-                    .iconst(fx.module.pointer_type(), layout.size.bytes() as i64),\n+                    .iconst(fx.pointer_type, layout.size.bytes() as i64),\n                 ty::Slice(elem) => {\n                     let len = ptr.load_value_pair(fx).1;\n                     let elem_size = fx.layout_of(elem).size.bytes();\n@@ -179,10 +179,10 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n                 _ if !layout.is_unsized() => fx\n                     .bcx\n                     .ins()\n-                    .iconst(fx.module.pointer_type(), layout.align.abi() as i64),\n+                    .iconst(fx.pointer_type, layout.align.abi() as i64),\n                 ty::Slice(elem) => {\n                     let align = fx.layout_of(elem).align.abi() as i64;\n-                    fx.bcx.ins().iconst(fx.module.pointer_type(), align)\n+                    fx.bcx.ins().iconst(fx.pointer_type, align)\n                 }\n                 ty::Dynamic(..) => crate::vtable::min_align_of_obj(fx, ptr),\n                 ty => unimplemented!(\"min_align_of_val for {:?}\", ty),\n@@ -301,14 +301,14 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             let addr = fx.bcx.ins().stack_addr(pointer_ty(fx.tcx), stack_slot, 0);\n             let zero_val = fx.bcx.ins().iconst(types::I8, 0);\n             let len_val = fx.bcx.ins().iconst(pointer_ty(fx.tcx), layout.size.bytes() as i64);\n-            fx.bcx.call_memset(fx.isa, addr, zero_val, len_val);\n+            fx.bcx.call_memset(&fx.module.target_config(), addr, zero_val, len_val);\n \n             let uninit_place = CPlace::from_stack_slot(fx, stack_slot, T);\n             let uninit_val = uninit_place.to_cvalue(fx);\n             ret.write_cvalue(fx, uninit_val);\n         };\n         write_bytes, (v dst, v val, v count) {\n-            fx.bcx.call_memset(fx.isa, dst, val, count);\n+            fx.bcx.call_memset(&fx.module.target_config(), dst, val, count);\n         };\n         uninit, <T> () {\n             let layout = fx.layout_of(T);"}, {"sha": "9e7e527e98d2c5e1b5f69b8e12ce9df26264ca00", "filename": "src/lib.rs", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fc8a6c343a3982534ccb64cd93fb0bc4e1273bab/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8a6c343a3982534ccb64cd93fb0bc4e1273bab/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=fc8a6c343a3982534ccb64cd93fb0bc4e1273bab", "patch": "@@ -80,6 +80,7 @@ mod prelude {\n     pub use crate::syntax::ast::{FloatTy, IntTy, UintTy};\n     pub use crate::syntax::source_map::DUMMY_SP;\n \n+    pub use cranelift::codegen::isa::CallConv;\n     pub use cranelift::codegen::ir::{\n         condcodes::IntCC, function::Function, ExternalName, FuncRef, Inst, StackSlot,\n     };\n@@ -178,16 +179,12 @@ impl CodegenBackend for CraneliftCodegenBackend {\n \n         let metadata = tcx.encode_metadata();\n \n-        fn build_isa(tcx: TyCtxt) -> Box<isa::TargetIsa> {\n-            let mut flags_builder = settings::builder();\n-            flags_builder.enable(\"is_pic\").unwrap();\n-            let flags = settings::Flags::new(flags_builder);\n-            cranelift::codegen::isa::lookup(tcx.sess.target.target.llvm_target.parse().unwrap())\n-                .unwrap()\n-                .finish(flags)\n-        }\n-\n-        let isa = build_isa(tcx);\n+        let mut flags_builder = settings::builder();\n+        flags_builder.enable(\"is_pic\").unwrap();\n+        let flags = settings::Flags::new(flags_builder);\n+        let isa = cranelift::codegen::isa::lookup(tcx.sess.target.target.llvm_target.parse().unwrap())\n+            .unwrap()\n+            .finish(flags);\n \n         let mono_items =\n             collector::collect_crate_mono_items(tcx, collector::MonoItemCollectionMode::Lazy).0;\n@@ -198,20 +195,20 @@ impl CodegenBackend for CraneliftCodegenBackend {\n \n         if std::env::var(\"SHOULD_RUN\").is_ok() {\n             let mut jit_module: Module<SimpleJITBackend> = Module::new(SimpleJITBuilder::new());\n-            assert_eq!(pointer_ty(tcx), jit_module.pointer_type());\n+            assert_eq!(pointer_ty(tcx), jit_module.target_config().pointer_type());\n \n-            codegen_mono_items(tcx, &*isa, &mut jit_module, &mono_items);\n+            codegen_mono_items(tcx, &mut jit_module, &mono_items);\n \n             tcx.sess.abort_if_errors();\n             println!(\"Compiled everything\");\n             println!(\"Rustc codegen cranelift will JIT run the executable, because the SHOULD_RUN env var is set\");\n \n             let sig = Signature {\n                 params: vec![\n-                    AbiParam::new(jit_module.pointer_type()),\n-                    AbiParam::new(jit_module.pointer_type()),\n+                    AbiParam::new(jit_module.target_config().pointer_type()),\n+                    AbiParam::new(jit_module.target_config().pointer_type()),\n                 ],\n-                returns: vec![AbiParam::new(jit_module.pointer_type() /*isize*/)],\n+                returns: vec![AbiParam::new(jit_module.target_config().pointer_type() /*isize*/)],\n                 call_conv: CallConv::SystemV,\n             };\n             let main_func_id = jit_module\n@@ -239,9 +236,9 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                 )\n                 .unwrap(),\n             );\n-            assert_eq!(pointer_ty(tcx), faerie_module.pointer_type());\n+            assert_eq!(pointer_ty(tcx), faerie_module.target_config().pointer_type());\n \n-            codegen_mono_items(tcx, &*build_isa(tcx), &mut faerie_module, &mono_items);\n+            codegen_mono_items(tcx, &mut faerie_module, &mono_items);\n \n             tcx.sess.abort_if_errors();\n \n@@ -344,7 +341,6 @@ impl CodegenBackend for CraneliftCodegenBackend {\n \n fn codegen_mono_items<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    isa: &isa::TargetIsa,\n     module: &mut Module<impl Backend + 'static>,\n     mono_items: &FxHashSet<MonoItem<'tcx>>,\n ) {\n@@ -367,7 +363,7 @@ fn codegen_mono_items<'a, 'tcx: 'a>(\n \n     for mono_item in mono_items {\n         let res = ::std::panic::catch_unwind(::std::panic::AssertUnwindSafe(|| {\n-            base::trans_mono_item(tcx, isa, module, &mut caches, &mut ccx, *mono_item);\n+            base::trans_mono_item(tcx, module, &mut caches, &mut ccx, *mono_item);\n         }));\n \n         if let Err(err) = res {"}, {"sha": "f7b325f7038fcf168ec1e9f243437a73a5f2f0c2", "filename": "src/main_shim.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc8a6c343a3982534ccb64cd93fb0bc4e1273bab/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8a6c343a3982534ccb64cd93fb0bc4e1273bab/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=fc8a6c343a3982534ccb64cd93fb0bc4e1273bab", "patch": "@@ -38,10 +38,10 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx: 'a>(\n \n         let cmain_sig = Signature {\n             params: vec![\n-                AbiParam::new(m.pointer_type()),\n-                AbiParam::new(m.pointer_type()),\n+                AbiParam::new(m.target_config().pointer_type()),\n+                AbiParam::new(m.target_config().pointer_type()),\n             ],\n-            returns: vec![AbiParam::new(m.pointer_type() /*isize*/)],\n+            returns: vec![AbiParam::new(m.target_config().pointer_type() /*isize*/)],\n             call_conv: CallConv::SystemV,\n         };\n \n@@ -65,8 +65,8 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx: 'a>(\n \n             let ebb = bcx.create_ebb();\n             bcx.switch_to_block(ebb);\n-            let arg_argc = bcx.append_ebb_param(ebb, m.pointer_type());\n-            let arg_argv = bcx.append_ebb_param(ebb, m.pointer_type());\n+            let arg_argc = bcx.append_ebb_param(ebb, m.target_config().pointer_type());\n+            let arg_argv = bcx.append_ebb_param(ebb, m.target_config().pointer_type());\n \n             let main_func_ref = m.declare_func_in_func(main_func_id, &mut bcx.func);\n \n@@ -85,7 +85,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx: 'a>(\n                     .declare_function(&start_name, Linkage::Import, &start_sig)\n                     .unwrap();\n \n-                let main_val = bcx.ins().func_addr(m.pointer_type(), main_func_ref);\n+                let main_val = bcx.ins().func_addr(m.target_config().pointer_type(), main_func_ref);\n \n                 let func_ref = m.declare_func_in_func(start_func_id, &mut bcx.func);\n                 bcx.ins().call(func_ref, &[main_val, arg_argc, arg_argv])"}, {"sha": "185ce4abfe0c5dc906d1e9e2893c0fc8de52c051", "filename": "src/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc8a6c343a3982534ccb64cd93fb0bc4e1273bab/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8a6c343a3982534ccb64cd93fb0bc4e1273bab/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=fc8a6c343a3982534ccb64cd93fb0bc4e1273bab", "patch": "@@ -66,7 +66,7 @@ pub fn get_vtable<'a, 'tcx: 'a>(\n     let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n     fx.bcx\n         .ins()\n-        .global_value(fx.module.pointer_type(), local_data_id)\n+        .global_value(fx.pointer_type, local_data_id)\n }\n \n fn build_vtable<'a, 'tcx: 'a>("}]}