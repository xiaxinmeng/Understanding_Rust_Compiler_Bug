{"sha": "e12bc239b4e85d0dedc5ba6e9f7ffa0b91ade634", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMmJjMjM5YjRlODVkMGRlZGM1YmE2ZTlmN2ZmYTBiOTFhZGU2MzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-20T19:01:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-20T19:01:34Z"}, "message": "auto merge of #10527 : eholk/rust/win64, r=alexcrichton\n\nThis was needed to access UEFI boot services in my new Boot2Rust experiment.\r\n\r\nI also realized that Rust functions declared as extern always use the C calling convention regardless of how they were declared, so this pull request fixes that as well.", "tree": {"sha": "3f5752af4483fea874d47504a3b0cffd52ef2989", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f5752af4483fea874d47504a3b0cffd52ef2989"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e12bc239b4e85d0dedc5ba6e9f7ffa0b91ade634", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e12bc239b4e85d0dedc5ba6e9f7ffa0b91ade634", "html_url": "https://github.com/rust-lang/rust/commit/e12bc239b4e85d0dedc5ba6e9f7ffa0b91ade634", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e12bc239b4e85d0dedc5ba6e9f7ffa0b91ade634/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a25ba374b2bfe32d4411cab3547d76d47769d6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a25ba374b2bfe32d4411cab3547d76d47769d6c", "html_url": "https://github.com/rust-lang/rust/commit/6a25ba374b2bfe32d4411cab3547d76d47769d6c"}, {"sha": "02e565a187adc0b5a7348852de664be26eb1701c", "url": "https://api.github.com/repos/rust-lang/rust/commits/02e565a187adc0b5a7348852de664be26eb1701c", "html_url": "https://github.com/rust-lang/rust/commit/02e565a187adc0b5a7348852de664be26eb1701c"}], "stats": {"total": 74, "additions": 72, "deletions": 2}, "files": [{"sha": "160bc5111688a1fe98695f690f9d6abec2ae2ad3", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e12bc239b4e85d0dedc5ba6e9f7ffa0b91ade634/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e12bc239b4e85d0dedc5ba6e9f7ffa0b91ade634/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=e12bc239b4e85d0dedc5ba6e9f7ffa0b91ade634", "patch": "@@ -33,6 +33,7 @@ pub enum CallConv {\n     ColdCallConv = 9,\n     X86StdcallCallConv = 64,\n     X86FastcallCallConv = 65,\n+    X86_64_Win64 = 79,\n }\n \n pub enum Visibility {"}, {"sha": "d73345b84742c59bf5a1771336b255a7e73fd41a", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e12bc239b4e85d0dedc5ba6e9f7ffa0b91ade634/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e12bc239b4e85d0dedc5ba6e9f7ffa0b91ade634/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=e12bc239b4e85d0dedc5ba6e9f7ffa0b91ade634", "patch": "@@ -33,7 +33,7 @@ use syntax::{ast};\n use syntax::{attr, ast_map};\n use syntax::parse::token::special_idents;\n use syntax::abi::{RustIntrinsic, Rust, Stdcall, Fastcall, System,\n-                  Cdecl, Aapcs, C, AbiSet};\n+                  Cdecl, Aapcs, C, AbiSet, Win64};\n use util::ppaux::{Repr, UserString};\n use middle::trans::type_::Type;\n \n@@ -96,6 +96,7 @@ pub fn llvm_calling_convention(ccx: &mut CrateContext,\n             Stdcall => lib::llvm::X86StdcallCallConv,\n             Fastcall => lib::llvm::X86FastcallCallConv,\n             C => lib::llvm::CCallConv,\n+            Win64 => lib::llvm::X86_64_Win64,\n \n             // NOTE These API constants ought to be more specific\n             Cdecl => lib::llvm::CCallConv,\n@@ -398,11 +399,19 @@ pub fn register_rust_fn_with_foreign_abi(ccx: @mut CrateContext,\n \n     let tys = foreign_types_for_id(ccx, node_id);\n     let llfn_ty = lltype_for_fn_from_foreign_types(&tys);\n+    let t = ty::node_id_to_type(ccx.tcx, node_id);\n+    let cconv = match ty::get(t).sty {\n+        ty::ty_bare_fn(ref fn_ty) => {\n+            let c = llvm_calling_convention(ccx, fn_ty.abis);\n+            c.unwrap_or(lib::llvm::CCallConv)\n+        }\n+        _ => lib::llvm::CCallConv\n+    };\n     let llfn = base::register_fn_llvmty(ccx,\n                                         sp,\n                                         sym,\n                                         node_id,\n-                                        lib::llvm::CCallConv,\n+                                        cconv,\n                                         llfn_ty);\n     add_argument_attributes(&tys, llfn);\n     debug!(\"register_rust_fn_with_foreign_abi(node_id={:?}, llfn_ty={}, llfn={})\","}, {"sha": "60d49b4c9edb7e0d7f38efd7de7c755090e8c603", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e12bc239b4e85d0dedc5ba6e9f7ffa0b91ade634/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e12bc239b4e85d0dedc5ba6e9f7ffa0b91ade634/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=e12bc239b4e85d0dedc5ba6e9f7ffa0b91ade634", "patch": "@@ -23,6 +23,7 @@ pub enum Abi {\n     Stdcall,\n     Fastcall,\n     Aapcs,\n+    Win64,\n \n     // Multiplatform ABIs second\n     Rust,\n@@ -73,6 +74,8 @@ static AbiDatas: &'static [AbiData] = &[\n     AbiData {abi: Stdcall, name: \"stdcall\", abi_arch: Archs(IntelBits)},\n     AbiData {abi: Fastcall, name:\"fastcall\", abi_arch: Archs(IntelBits)},\n     AbiData {abi: Aapcs, name: \"aapcs\", abi_arch: Archs(ArmBits)},\n+    AbiData {abi: Win64, name: \"win64\",\n+             abi_arch: Archs(1 << (X86_64 as uint))},\n \n     // Cross-platform ABIs\n     //"}, {"sha": "41c57831da64fe4443d04a37c02d291fb4ac06af", "filename": "src/test/auxiliary/extern_calling_convention.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e12bc239b4e85d0dedc5ba6e9f7ffa0b91ade634/src%2Ftest%2Fauxiliary%2Fextern_calling_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e12bc239b4e85d0dedc5ba6e9f7ffa0b91ade634/src%2Ftest%2Fauxiliary%2Fextern_calling_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern_calling_convention.rs?ref=e12bc239b4e85d0dedc5ba6e9f7ffa0b91ade634", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Make sure Rust generates the correct calling convention for extern\n+// functions.\n+\n+#[inline(never)]\n+#[cfg(target_arch = \"x86_64\")]\n+pub extern \"win64\" fn foo(a: int, b: int, c: int, d: int) {\n+    assert!(a == 1);\n+    assert!(b == 2);\n+    assert!(c == 3);\n+    assert!(d == 4);\n+\n+    println!(\"a: {:?}, b: {:?}, c: {:?}, d: {:?}\",\n+             a, b, c, d)\n+}\n+\n+#[inline(never)]\n+#[cfg(target_arch = \"x86\")]\n+#[cfg(target_arch = \"arm\")]\n+pub extern fn foo(a: int, b: int, c: int, d: int) {\n+    assert!(a == 1);\n+    assert!(b == 2);\n+    assert!(c == 3);\n+    assert!(d == 4);\n+\n+    println!(\"a: {:?}, b: {:?}, c: {:?}, d: {:?}\",\n+             a, b, c, d)\n+}"}, {"sha": "e8609a8b60b1a565621b4944b7fbadcd20f45abb", "filename": "src/test/run-pass/extern-calling-convention-test.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e12bc239b4e85d0dedc5ba6e9f7ffa0b91ade634/src%2Ftest%2Frun-pass%2Fextern-calling-convention-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e12bc239b4e85d0dedc5ba6e9f7ffa0b91ade634/src%2Ftest%2Frun-pass%2Fextern-calling-convention-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-calling-convention-test.rs?ref=e12bc239b4e85d0dedc5ba6e9f7ffa0b91ade634", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast: aux-build not compatible with fast\n+// aux-build:extern_calling_convention.rs\n+\n+extern mod extern_calling_convention;\n+\n+use extern_calling_convention::foo;\n+\n+fn main() {\n+    foo(1, 2, 3, 4);\n+}"}]}