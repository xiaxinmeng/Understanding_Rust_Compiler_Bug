{"sha": "e6aadf6ef21a25a6dae55f39bc774b5a0ef2ad6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2YWFkZjZlZjIxYTI1YTZkYWU1NWYzOWJjNzc0YjVhMGVmMmFkNmM=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-02T15:49:25Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-02T15:49:25Z"}, "message": "Merge #405\n\n405: extend selection inside a string literal should select a word first r=matklad a=gfreezy\n\n fixed #402\n\nCo-authored-by: gfreezy <gfreezy@gmail.com>", "tree": {"sha": "3ba089370f0a838df54b82181ccf2fb636f8d780", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ba089370f0a838df54b82181ccf2fb636f8d780"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6aadf6ef21a25a6dae55f39bc774b5a0ef2ad6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6aadf6ef21a25a6dae55f39bc774b5a0ef2ad6c", "html_url": "https://github.com/rust-lang/rust/commit/e6aadf6ef21a25a6dae55f39bc774b5a0ef2ad6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6aadf6ef21a25a6dae55f39bc774b5a0ef2ad6c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "29d8bfb9c909847cb37ff6e564ea0e61744277ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/29d8bfb9c909847cb37ff6e564ea0e61744277ad", "html_url": "https://github.com/rust-lang/rust/commit/29d8bfb9c909847cb37ff6e564ea0e61744277ad"}, {"sha": "9672ae001e6be8f4ad3a2fd247999ebb205736ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/9672ae001e6be8f4ad3a2fd247999ebb205736ab", "html_url": "https://github.com/rust-lang/rust/commit/9672ae001e6be8f4ad3a2fd247999ebb205736ab"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "7a423852bff11e36fd3c7655db53a528ad5b04f1", "filename": "crates/ra_editor/src/extend_selection.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e6aadf6ef21a25a6dae55f39bc774b5a0ef2ad6c/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6aadf6ef21a25a6dae55f39bc774b5a0ef2ad6c/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs?ref=e6aadf6ef21a25a6dae55f39bc774b5a0ef2ad6c", "patch": "@@ -6,6 +6,7 @@ use ra_syntax::{\n };\n \n pub fn extend_selection(root: SyntaxNodeRef, range: TextRange) -> Option<TextRange> {\n+    let string_kinds = [COMMENT, STRING, RAW_STRING, BYTE_STRING, RAW_BYTE_STRING];\n     if range.is_empty() {\n         let offset = range.start();\n         let mut leaves = find_leaf_at_offset(root, offset);\n@@ -15,8 +16,8 @@ pub fn extend_selection(root: SyntaxNodeRef, range: TextRange) -> Option<TextRan\n         let leaf_range = match leaves {\n             LeafAtOffset::None => return None,\n             LeafAtOffset::Single(l) => {\n-                if l.kind() == COMMENT {\n-                    extend_single_word_in_comment(l, offset).unwrap_or_else(|| l.range())\n+                if string_kinds.contains(&l.kind()) {\n+                    extend_single_word_in_comment_or_string(l, offset).unwrap_or_else(|| l.range())\n                 } else {\n                     l.range()\n                 }\n@@ -26,7 +27,7 @@ pub fn extend_selection(root: SyntaxNodeRef, range: TextRange) -> Option<TextRan\n         return Some(leaf_range);\n     };\n     let node = find_covering_node(root, range);\n-    if node.kind() == COMMENT && range == node.range() {\n+    if string_kinds.contains(&node.kind()) && range == node.range() {\n         if let Some(range) = extend_comments(node) {\n             return Some(range);\n         }\n@@ -38,7 +39,10 @@ pub fn extend_selection(root: SyntaxNodeRef, range: TextRange) -> Option<TextRan\n     }\n }\n \n-fn extend_single_word_in_comment(leaf: SyntaxNodeRef, offset: TextUnit) -> Option<TextRange> {\n+fn extend_single_word_in_comment_or_string(\n+    leaf: SyntaxNodeRef,\n+    offset: TextUnit,\n+) -> Option<TextRange> {\n     let text: &str = leaf.leaf_text()?;\n     let cursor_position: u32 = (offset - leaf.range().start()).into();\n \n@@ -262,4 +266,16 @@ impl S {\n             &[\"hello\", \"// hello world\"],\n         );\n     }\n+\n+    #[test]\n+    fn test_extend_selection_string() {\n+        do_check(\n+            r#\"\n+fn bar(){}\n+\n+\" fn f<|>oo() {\"\n+    \"#,\n+            &[\"foo\", \"\\\" fn foo() {\\\"\"],\n+        );\n+    }\n }"}, {"sha": "5bbc3e99353371e424270b551bdad958d6e73c9c", "filename": "crates/ra_vfs/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6aadf6ef21a25a6dae55f39bc774b5a0ef2ad6c/crates%2Fra_vfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6aadf6ef21a25a6dae55f39bc774b5a0ef2ad6c/crates%2Fra_vfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Flib.rs?ref=e6aadf6ef21a25a6dae55f39bc774b5a0ef2ad6c", "patch": "@@ -11,7 +11,7 @@\n //! to support custom watcher events (related to https://github.com/rust-analyzer/rust-analyzer/issues/131)\n //!\n //! VFS is based on a concept of roots: a set of directories on the file system\n-//! whihc are watched for changes. Typically, there will be a root for each\n+//! which are watched for changes. Typically, there will be a root for each\n //! Cargo package.\n mod arena;\n mod io;"}]}