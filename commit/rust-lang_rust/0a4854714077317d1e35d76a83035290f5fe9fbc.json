{"sha": "0a4854714077317d1e35d76a83035290f5fe9fbc", "node_id": "C_kwDOAAsO6NoAKDBhNDg1NDcxNDA3NzMxN2QxZTM1ZDc2YTgzMDM1MjkwZjVmZTlmYmM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-21T17:41:47Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-01-15T20:26:20Z"}, "message": "Return a LocalDefId in get_parent_item.", "tree": {"sha": "bb0a4437c98b4a551f89c84ecaa2d8ff544aae9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb0a4437c98b4a551f89c84ecaa2d8ff544aae9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a4854714077317d1e35d76a83035290f5fe9fbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a4854714077317d1e35d76a83035290f5fe9fbc", "html_url": "https://github.com/rust-lang/rust/commit/0a4854714077317d1e35d76a83035290f5fe9fbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a4854714077317d1e35d76a83035290f5fe9fbc/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7024acb3287d4dbde9f49c2e0c8c44c59fe365f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7024acb3287d4dbde9f49c2e0c8c44c59fe365f", "html_url": "https://github.com/rust-lang/rust/commit/d7024acb3287d4dbde9f49c2e0c8c44c59fe365f"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "5f95333a77407f7f65bc80465e2664f1a5a053ec", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=0a4854714077317d1e35d76a83035290f5fe9fbc", "patch": "@@ -77,7 +77,7 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n         }\n \n         let parent_id = cx.tcx.hir().get_parent_item(hir_id);\n-        let parent_node = cx.tcx.hir().find(parent_id);\n+        let parent_node = cx.tcx.hir().find_by_def_id(parent_id);\n \n         let mut trait_self_ty = None;\n         if let Some(Node::Item(item)) = parent_node {"}, {"sha": "cbf52d19334c0f79a15a7fdc4b876dcca6d973b5", "filename": "clippy_lints/src/exit.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Fexit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Fexit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexit.rs?ref=0a4854714077317d1e35d76a83035290f5fe9fbc", "patch": "@@ -34,11 +34,10 @@ impl<'tcx> LateLintPass<'tcx> for Exit {\n             if let Some(def_id) = cx.qpath_res(path, path_expr.hir_id).opt_def_id();\n             if match_def_path(cx, def_id, &paths::EXIT);\n             let parent = cx.tcx.hir().get_parent_item(e.hir_id);\n-            if let Some(Node::Item(Item{kind: ItemKind::Fn(..), ..})) = cx.tcx.hir().find(parent);\n+            if let Some(Node::Item(Item{kind: ItemKind::Fn(..), ..})) = cx.tcx.hir().find_by_def_id(parent);\n             // If the next item up is a function we check if it is an entry point\n             // and only then emit a linter warning\n-            let def_id = cx.tcx.hir().local_def_id(parent);\n-            if !is_entrypoint_fn(cx, def_id.to_def_id());\n+            if !is_entrypoint_fn(cx, parent.to_def_id());\n             then {\n                 span_lint(cx, EXIT, e.span, \"usage of `process::exit`\");\n             }"}, {"sha": "bf59103e3f4d2bce903907fc9c41653eff1cf155", "filename": "clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=0a4854714077317d1e35d76a83035290f5fe9fbc", "patch": "@@ -48,7 +48,7 @@ pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Imp\n         let attr = must_use_attr(attrs);\n         if let Some(attr) = attr {\n             check_needless_must_use(cx, sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n-        } else if is_public && !is_proc_macro(cx.sess(), attrs) && trait_ref_of_method(cx, item.hir_id()).is_none() {\n+        } else if is_public && !is_proc_macro(cx.sess(), attrs) && trait_ref_of_method(cx, item.def_id).is_none() {\n             check_must_use_candidate(\n                 cx,\n                 sig.decl,"}, {"sha": "120fcb2619c7c66dd59dd58bdb3b7c1ea8b30170", "filename": "clippy_lints/src/functions/result_unit_err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Ffunctions%2Fresult_unit_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Ffunctions%2Fresult_unit_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fresult_unit_err.rs?ref=0a4854714077317d1e35d76a83035290f5fe9fbc", "patch": "@@ -27,7 +27,7 @@ pub(super) fn check_impl_item(cx: &LateContext<'_>, item: &hir::ImplItem<'_>) {\n     if let hir::ImplItemKind::Fn(ref sig, _) = item.kind {\n         let is_public = cx.access_levels.is_exported(item.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n-        if is_public && trait_ref_of_method(cx, item.hir_id()).is_none() {\n+        if is_public && trait_ref_of_method(cx, item.def_id).is_none() {\n             check_result_unit_err(cx, sig.decl, item.span, fn_header_span);\n         }\n     }"}, {"sha": "55c04a1186fc3376fce1d70124b972727d9e0163", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=0a4854714077317d1e35d76a83035290f5fe9fbc", "patch": "@@ -116,7 +116,7 @@ impl<'tcx> LateLintPass<'tcx> for InherentToString {\n             if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id()), sym::String);\n \n             // Filters instances of to_string which are required by a trait\n-            if trait_ref_of_method(cx, impl_item.hir_id()).is_none();\n+            if trait_ref_of_method(cx, impl_item.def_id).is_none();\n \n             then {\n                 show_lint(cx, impl_item);"}, {"sha": "6dd7b22ff94b5f80c9d5e49d7210913dedcd6c90", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=0a4854714077317d1e35d76a83035290f5fe9fbc", "patch": "@@ -91,7 +91,7 @@ impl<'tcx> LateLintPass<'tcx> for Lifetimes {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'_>) {\n         if let ImplItemKind::Fn(ref sig, id) = item.kind {\n-            let report_extra_lifetimes = trait_ref_of_method(cx, item.hir_id()).is_none();\n+            let report_extra_lifetimes = trait_ref_of_method(cx, item.def_id).is_none();\n             check_fn_inner(\n                 cx,\n                 sig.decl,"}, {"sha": "33abd2a72d8809384618191316b2d4fb86c8b5c3", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=0a4854714077317d1e35d76a83035290f5fe9fbc", "patch": "@@ -58,8 +58,7 @@ pub(super) fn check<'tcx>(\n \n                 // ensure that the indexed variable was declared before the loop, see #601\n                 if let Some(indexed_extent) = indexed_extent {\n-                    let parent_id = cx.tcx.hir().get_parent_item(expr.hir_id);\n-                    let parent_def_id = cx.tcx.hir().local_def_id(parent_id);\n+                    let parent_def_id = cx.tcx.hir().get_parent_item(expr.hir_id);\n                     let region_scope_tree = cx.tcx.region_scope_tree(parent_def_id);\n                     let pat_extent = region_scope_tree.var_scope(pat.hir_id.local_id);\n                     if region_scope_tree.is_subscope_of(indexed_extent, pat_extent) {\n@@ -263,8 +262,7 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n                 let res = self.cx.qpath_res(seqpath, seqexpr.hir_id);\n                 match res {\n                     Res::Local(hir_id) => {\n-                        let parent_id = self.cx.tcx.hir().get_parent_item(expr.hir_id);\n-                        let parent_def_id = self.cx.tcx.hir().local_def_id(parent_id);\n+                        let parent_def_id = self.cx.tcx.hir().get_parent_item(expr.hir_id);\n                         let extent = self.cx.tcx.region_scope_tree(parent_def_id).var_scope(hir_id.local_id);\n                         if index_used_directly {\n                             self.indexed_directly.insert("}, {"sha": "cd038ecd5ce1ec4fcb2507ebc763c0b65b40f601", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=0a4854714077317d1e35d76a83035290f5fe9fbc", "patch": "@@ -2053,7 +2053,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             return;\n         }\n         let name = impl_item.ident.name.as_str();\n-        let parent = cx.tcx.hir().get_parent_did(impl_item.hir_id());\n+        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n         let item = cx.tcx.hir().expect_item(parent);\n         let self_ty = cx.tcx.type_of(item.def_id);\n "}, {"sha": "77849e1800f6bf9f22aff0d916f55592d55fc42e", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=0a4854714077317d1e35d76a83035290f5fe9fbc", "patch": "@@ -121,7 +121,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n                 }\n             },\n             FnKind::Method(_, sig, ..) => {\n-                if trait_ref_of_method(cx, hir_id).is_some()\n+                if trait_ref_of_method(cx, def_id).is_some()\n                     || already_const(sig.header)\n                     || method_accepts_dropable(cx, sig.decl.inputs)\n                 {"}, {"sha": "1bdd805f658549801dec79a6bfd63d1d14e6e66f", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=0a4854714077317d1e35d76a83035290f5fe9fbc", "patch": "@@ -89,7 +89,7 @@ impl<'tcx> LateLintPass<'tcx> for MutableKeyType {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'tcx>) {\n         if let hir::ImplItemKind::Fn(ref sig, ..) = item.kind {\n-            if trait_ref_of_method(cx, item.hir_id()).is_none() {\n+            if trait_ref_of_method(cx, item.def_id).is_none() {\n                 check_sig(cx, item.hir_id(), sig.decl);\n             }\n         }"}, {"sha": "aec95530bba67ea3b3d2faaeaf93cec7b9612c44", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=0a4854714077317d1e35d76a83035290f5fe9fbc", "patch": "@@ -101,7 +101,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                             if sig.decl.inputs.is_empty();\n                             if name == sym::new;\n                             if cx.access_levels.is_reachable(impl_item.def_id);\n-                            let self_def_id = cx.tcx.hir().local_def_id(cx.tcx.hir().get_parent_item(id));\n+                            let self_def_id = cx.tcx.hir().get_parent_item(id);\n                             let self_ty = cx.tcx.type_of(self_def_id);\n                             if TyS::same_type(self_ty, return_ty(cx, id));\n                             if let Some(default_trait_id) = cx.tcx.get_diagnostic_item(sym::Default);"}, {"sha": "21ac6548b0179cafa486608e4f7153d04e137080", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=0a4854714077317d1e35d76a83035290f5fe9fbc", "patch": "@@ -280,7 +280,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx ImplItem<'_>) {\n         if let ImplItemKind::Const(hir_ty, body_id) = &impl_item.kind {\n-            let item_def_id = cx.tcx.hir().get_parent_did(impl_item.hir_id());\n+            let item_def_id = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n             let item = cx.tcx.hir().expect_item(item_def_id);\n \n             match &item.kind {"}, {"sha": "63de117a6f1dec08737ffb022427062517570395", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=0a4854714077317d1e35d76a83035290f5fe9fbc", "patch": "@@ -164,7 +164,7 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'_>) {\n         if let ImplItemKind::Fn(ref sig, body_id) = item.kind {\n             let parent_item = cx.tcx.hir().get_parent_item(item.hir_id());\n-            if let Some(Node::Item(it)) = cx.tcx.hir().find(parent_item) {\n+            if let Some(Node::Item(it)) = cx.tcx.hir().find_by_def_id(parent_item) {\n                 if let ItemKind::Impl(Impl { of_trait: Some(_), .. }) = it.kind {\n                     return; // ignore trait impls\n                 }"}, {"sha": "9673d975cb4d3cc2becb0f501e3244bc2516e49c", "filename": "clippy_lints/src/self_named_constructors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Fself_named_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Fself_named_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fself_named_constructors.rs?ref=0a4854714077317d1e35d76a83035290f5fe9fbc", "patch": "@@ -51,7 +51,7 @@ impl<'tcx> LateLintPass<'tcx> for SelfNamedConstructors {\n             _ => return,\n         }\n \n-        let parent = cx.tcx.hir().get_parent_did(impl_item.hir_id());\n+        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n         let item = cx.tcx.hir().expect_item(parent);\n         let self_ty = cx.tcx.type_of(item.def_id);\n         let ret_ty = return_ty(cx, impl_item.hir_id());"}, {"sha": "92494159deeb53029c88592e4d6a7ffe93b24c98", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=0a4854714077317d1e35d76a83035290f5fe9fbc", "patch": "@@ -66,7 +66,7 @@ impl<'tcx> LateLintPass<'tcx> for SuspiciousImpl {\n             // Check for more than one binary operation in the implemented function\n             // Linting when multiple operations are involved can result in false positives\n             let parent_fn = cx.tcx.hir().get_parent_item(expr.hir_id);\n-            if let hir::Node::ImplItem(impl_item) = cx.tcx.hir().get(parent_fn);\n+            if let hir::Node::ImplItem(impl_item) = cx.tcx.hir().get_by_def_id(parent_fn);\n             if let hir::ImplItemKind::Fn(_, body_id) = impl_item.kind;\n             let body = cx.tcx.hir().body(body_id);\n             let parent_fn = cx.tcx.hir().get_parent_item(expr.hir_id);"}, {"sha": "67cc8913318962f2f849ab1441a166dd7b9d9eaa", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=0a4854714077317d1e35d76a83035290f5fe9fbc", "patch": "@@ -312,12 +312,12 @@ impl_lint_pass!(Types => [BOX_COLLECTION, VEC_BOX, OPTION_OPTION, LINKEDLIST, BO\n \n impl<'tcx> LateLintPass<'tcx> for Types {\n     fn check_fn(&mut self, cx: &LateContext<'_>, _: FnKind<'_>, decl: &FnDecl<'_>, _: &Body<'_>, _: Span, id: HirId) {\n-        let is_in_trait_impl = if let Some(hir::Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_item(id))\n-        {\n-            matches!(item.kind, ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }))\n-        } else {\n-            false\n-        };\n+        let is_in_trait_impl =\n+            if let Some(hir::Node::Item(item)) = cx.tcx.hir().find_by_def_id(cx.tcx.hir().get_parent_item(id)) {\n+                matches!(item.kind, ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }))\n+            } else {\n+                false\n+            };\n \n         let is_exported = cx.access_levels.is_exported(cx.tcx.hir().local_def_id(id));\n \n@@ -353,7 +353,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n         match item.kind {\n             ImplItemKind::Const(ty, _) => {\n                 let is_in_trait_impl = if let Some(hir::Node::Item(item)) =\n-                    cx.tcx.hir().find(cx.tcx.hir().get_parent_item(item.hir_id()))\n+                    cx.tcx.hir().find_by_def_id(cx.tcx.hir().get_parent_item(item.hir_id()))\n                 {\n                     matches!(item.kind, ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }))\n                 } else {"}, {"sha": "fd9d5b52e501f318199e5fa94ad9cf55dd79cad6", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=0a4854714077317d1e35d76a83035290f5fe9fbc", "patch": "@@ -42,7 +42,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedSelf {\n         if impl_item.span.from_expansion() {\n             return;\n         }\n-        let parent = cx.tcx.hir().get_parent_did(impl_item.hir_id());\n+        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n         let parent_item = cx.tcx.hir().expect_item(parent);\n         let assoc_item = cx.tcx.associated_item(impl_item.def_id);\n         if_chain! {"}, {"sha": "70b0560e676044eef19feef0cff8f9733f5394d8", "filename": "clippy_lints/src/zero_sized_map_values.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs?ref=0a4854714077317d1e35d76a83035290f5fe9fbc", "patch": "@@ -69,7 +69,11 @@ impl LateLintPass<'_> for ZeroSizedMapValues {\n \n fn in_trait_impl(cx: &LateContext<'_>, hir_id: HirId) -> bool {\n     let parent_id = cx.tcx.hir().get_parent_item(hir_id);\n-    if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_item(parent_id)) {\n+    let second_parent_id = cx\n+        .tcx\n+        .hir()\n+        .get_parent_item(cx.tcx.hir().local_def_id_to_hir_id(parent_id));\n+    if let Some(Node::Item(item)) = cx.tcx.hir().find_by_def_id(second_parent_id) {\n         if let ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }) = item.kind {\n             return true;\n         }"}, {"sha": "e55817f13eb1a1c0c67a655f7aee1371d7f128e9", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4854714077317d1e35d76a83035290f5fe9fbc/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=0a4854714077317d1e35d76a83035290f5fe9fbc", "patch": "@@ -70,7 +70,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_ID};\n use rustc_hir::hir_id::{HirIdMap, HirIdSet};\n use rustc_hir::intravisit::{walk_expr, ErasedMap, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n@@ -90,7 +90,6 @@ use rustc_middle::ty::binding::BindingMode;\n use rustc_middle::ty::{layout::IntegerExt, BorrowKind, DefIdTree, Ty, TyCtxt, TypeAndMut, TypeFoldable, UpvarCapture};\n use rustc_semver::RustcVersion;\n use rustc_session::Session;\n-use rustc_span::def_id::LocalDefId;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::original_sp;\n use rustc_span::sym;\n@@ -216,7 +215,7 @@ pub fn find_binding_init<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<\n /// ```\n pub fn in_constant(cx: &LateContext<'_>, id: HirId) -> bool {\n     let parent_id = cx.tcx.hir().get_parent_item(id);\n-    match cx.tcx.hir().get(parent_id) {\n+    match cx.tcx.hir().get_by_def_id(parent_id) {\n         Node::Item(&Item {\n             kind: ItemKind::Const(..) | ItemKind::Static(..),\n             ..\n@@ -607,12 +606,13 @@ pub fn get_trait_def_id(cx: &LateContext<'_>, path: &[&str]) -> Option<DefId> {\n ///     }\n /// }\n /// ```\n-pub fn trait_ref_of_method<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<&'tcx TraitRef<'tcx>> {\n+pub fn trait_ref_of_method<'tcx>(cx: &LateContext<'tcx>, def_id: LocalDefId) -> Option<&'tcx TraitRef<'tcx>> {\n     // Get the implemented trait for the current function\n+    let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def_id);\n     let parent_impl = cx.tcx.hir().get_parent_item(hir_id);\n     if_chain! {\n-        if parent_impl != hir::CRATE_HIR_ID;\n-        if let hir::Node::Item(item) = cx.tcx.hir().get(parent_impl);\n+        if parent_impl != CRATE_DEF_ID;\n+        if let hir::Node::Item(item) = cx.tcx.hir().get_by_def_id(parent_impl);\n         if let hir::ItemKind::Impl(impl_) = &item.kind;\n         then { return impl_.of_trait.as_ref(); }\n     }\n@@ -1122,14 +1122,13 @@ pub fn is_entrypoint_fn(cx: &LateContext<'_>, def_id: DefId) -> bool {\n /// Returns `true` if the expression is in the program's `#[panic_handler]`.\n pub fn is_in_panic_handler(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n     let parent = cx.tcx.hir().get_parent_item(e.hir_id);\n-    let def_id = cx.tcx.hir().local_def_id(parent).to_def_id();\n-    Some(def_id) == cx.tcx.lang_items().panic_impl()\n+    Some(parent.to_def_id()) == cx.tcx.lang_items().panic_impl()\n }\n \n /// Gets the name of the item the expression is in, if available.\n pub fn get_item_name(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<Symbol> {\n     let parent_id = cx.tcx.hir().get_parent_item(expr.hir_id);\n-    match cx.tcx.hir().find(parent_id) {\n+    match cx.tcx.hir().find_by_def_id(parent_id) {\n         Some(\n             Node::Item(Item { ident, .. })\n             | Node::TraitItem(TraitItem { ident, .. })\n@@ -1639,7 +1638,7 @@ pub fn any_parent_has_attr(tcx: TyCtxt<'_>, node: HirId, symbol: Symbol) -> bool\n             return true;\n         }\n         prev_enclosing_node = Some(enclosing_node);\n-        enclosing_node = map.get_parent_item(enclosing_node);\n+        enclosing_node = map.local_def_id_to_hir_id(map.get_parent_item(enclosing_node));\n     }\n \n     false"}]}