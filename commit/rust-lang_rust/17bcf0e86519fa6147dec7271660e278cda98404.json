{"sha": "17bcf0e86519fa6147dec7271660e278cda98404", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YmNmMGU4NjUxOWZhNjE0N2RlYzcyNzE2NjBlMjc4Y2RhOTg0MDQ=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-05-06T10:59:08Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-05-06T10:59:08Z"}, "message": "New lint: precedence, see issue #41", "tree": {"sha": "379e13e0c6a2939d44bc5a946716a9523ee8a079", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/379e13e0c6a2939d44bc5a946716a9523ee8a079"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17bcf0e86519fa6147dec7271660e278cda98404", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17bcf0e86519fa6147dec7271660e278cda98404", "html_url": "https://github.com/rust-lang/rust/commit/17bcf0e86519fa6147dec7271660e278cda98404", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17bcf0e86519fa6147dec7271660e278cda98404/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac151bb1f0f5069e36a10c8ff6dbf0f81601b317", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac151bb1f0f5069e36a10c8ff6dbf0f81601b317", "html_url": "https://github.com/rust-lang/rust/commit/ac151bb1f0f5069e36a10c8ff6dbf0f81601b317"}], "stats": {"total": 64, "additions": 63, "deletions": 1}, "files": [{"sha": "7d3e3fd8c65decea1956529be0528cec1b5d0fe6", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17bcf0e86519fa6147dec7271660e278cda98404/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/17bcf0e86519fa6147dec7271660e278cda98404/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=17bcf0e86519fa6147dec7271660e278cda98404", "patch": "@@ -18,6 +18,7 @@ Lints included in this crate:\n  - `approx_constant`: Warns if the approximate of a known float constant (in `std::f64::consts` or `std::f32::consts`) is found and suggests to use the constant\n  - `cmp_nan`: Denies comparisons to NAN (which will always return false, which is probably not intended)\n  - `float_cmp`: Warns on `==` or `!=` comparisons of floaty typed values. As floating-point operations usually involve rounding errors, it is always better to check for approximate equality within some small bounds\n+ - `precedence`: Warns on expressions where precedence may trip up the unwary reader of the source and suggests adding parenthesis, e.g. `x << 2 + y` will be parsed as `x << (2 + y)`\n \n To use, add the following lines to your Cargo.toml:\n "}, {"sha": "ffee122f776cb8b1f151d4dbd75a6022bb75d996", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17bcf0e86519fa6147dec7271660e278cda98404/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17bcf0e86519fa6147dec7271660e278cda98404/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=17bcf0e86519fa6147dec7271660e278cda98404", "patch": "@@ -35,6 +35,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box needless_bool::NeedlessBool as LintPassObject);\n     reg.register_lint_pass(box approx_const::ApproxConstant as LintPassObject);\n     reg.register_lint_pass(box misc::FloatCmp as LintPassObject);\n+    reg.register_lint_pass(box misc::Precedence as LintPassObject);\n     \n     reg.register_lint_group(\"clippy\", vec![types::BOX_VEC, types::LINKEDLIST,\n                                            misc::SINGLE_MATCH, misc::STR_TO_STRING,\n@@ -43,5 +44,6 @@ pub fn plugin_registrar(reg: &mut Registry) {\n                                            needless_bool::NEEDLESS_BOOL,\n                                            approx_const::APPROX_CONSTANT,\n                                            misc::CMP_NAN, misc::FLOAT_CMP,\n+                                           misc::PRECEDENCE,\n                                            ]);\n }"}, {"sha": "eae6d518950a7d8425c69b5a2f83d75bb81508cc", "filename": "src/misc.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/17bcf0e86519fa6147dec7271660e278cda98404/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17bcf0e86519fa6147dec7271660e278cda98404/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=17bcf0e86519fa6147dec7271660e278cda98404", "patch": "@@ -5,7 +5,7 @@ use syntax::ast_util::{is_comparison_binop, binop_to_string};\n use syntax::visit::{FnKind};\n use rustc::lint::{Context, LintPass, LintArray, Lint, Level};\n use rustc::middle::ty::{self, expr_ty, ty_str, ty_ptr, ty_rptr, ty_float};\n-use syntax::codemap::Span;\n+use syntax::codemap::{Span, Spanned};\n \n \n use types::span_note_and_lint;\n@@ -169,3 +169,47 @@ impl LintPass for FloatCmp {\n fn is_float(cx: &Context, expr: &Expr) -> bool {\n \tif let ty_float(_) = walk_ty(expr_ty(cx.tcx, expr)).sty { true } else { false }\n }\n+\n+declare_lint!(pub PRECEDENCE, Warn,\n+\t\t\t  \"Warn on mixing bit ops with integer arithmetic without parenthesis\");\n+\t\t\t  \n+#[derive(Copy,Clone)]\n+pub struct Precedence;\n+\n+impl LintPass for Precedence {\n+\tfn get_lints(&self) -> LintArray {\n+        lint_array!(PRECEDENCE)\n+\t}\n+\t\n+\tfn check_expr(&mut self, cx: &Context, expr: &Expr) {\n+\t\tif let ExprBinary(Spanned { node: op, ..}, ref left, ref right) = expr.node {\n+\t\t\tif is_bit_op(op) {\n+\t\t\t\tif let ExprBinary(Spanned { node: lop, ..}, _, _) = left.node {\n+\t\t\t\t\tif is_arith_op(lop) {\n+\t\t\t\t\t\tcx.span_lint(PRECEDENCE, expr.span, \"Operator precedence can trip the unwary. Please consider adding parenthesis to the subexpression to make the meaning more clear.\");\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tif let ExprBinary(Spanned { node: rop, ..}, _, _) = right.node {\n+\t\t\t\t\t\tif is_arith_op(rop) {\n+\t\t\t\t\t\t\tcx.span_lint(PRECEDENCE, expr.span, \"Operator precedence can trip the unwary. Please consider adding parenthesis to the subexpression to make the meaning more clear.\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n+\n+fn is_bit_op(op : BinOp_) -> bool {\n+\tmatch op {\n+\t\tBiBitXor | BiBitAnd | BiBitOr | BiShl | BiShr => true,\n+\t\t_ => false\n+\t}\n+}\n+\n+fn is_arith_op(op : BinOp_) -> bool {\n+\tmatch op {\n+\t\tBiAdd | BiSub | BiMul | BiDiv | BiRem => true,\n+\t\t_ => false\n+\t}\n+}"}, {"sha": "7969be0f371cc619bc35ebf5eb8a776b7da3cc3a", "filename": "tests/compile-fail/precedence.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/17bcf0e86519fa6147dec7271660e278cda98404/tests%2Fcompile-fail%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17bcf0e86519fa6147dec7271660e278cda98404/tests%2Fcompile-fail%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fprecedence.rs?ref=17bcf0e86519fa6147dec7271660e278cda98404", "patch": "@@ -0,0 +1,15 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[deny(precedence)]\n+#[allow(eq_op)]\n+fn main() {\n+\tformat!(\"{} vs. {}\", 1 << 2 + 3, (1 << 2) + 3); //~ERROR\n+    format!(\"{} vs. {}\", 1 + 2 << 3, 1 + (2 << 3)); //~ERROR\n+    format!(\"{} vs. {}\", 4 >> 1 + 1, (4 >> 1) + 1); //~ERROR\n+    format!(\"{} vs. {}\", 1 + 3 >> 2, 1 + (3 >> 2)); //~ERROR\n+    format!(\"{} vs. {}\", 1 ^ 1 - 1, (1 ^ 1) - 1);   //~ERROR\n+    format!(\"{} vs. {}\", 3 | 2 - 1, (3 | 2) - 1);   //~ERROR\n+    format!(\"{} vs. {}\", 3 & 5 - 2, (3 & 5) - 2);   //~ERROR\n+\n+}"}]}