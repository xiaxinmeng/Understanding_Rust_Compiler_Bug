{"sha": "88197214b8a9099bb3da559a3bd7bf4867c10c5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MTk3MjE0YjhhOTA5OWJiM2RhNTU5YTNiZDdiZjQ4NjdjMTBjNWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-10T05:54:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-10T05:54:26Z"}, "message": "Auto merge of #75573 - Aaron1011:feature/const-mutation-lint, r=oli-obk\n\nAdd CONST_ITEM_MUTATION lint\n\nFixes #74053\nFixes #55721\n\nThis PR adds a new lint `CONST_ITEM_MUTATION`.\nGiven an item `const FOO: SomeType = ..`, this lint fires on:\n\n* Attempting to write directly to a field (`FOO.field = some_val`) or\n  array entry (`FOO.array_field[0] = val`)\n* Taking a mutable reference to the `const` item (`&mut FOO`), including\n  through an autoderef `FOO.some_mut_self_method()`\n\nThe lint message explains that since each use of a constant creates a\nnew temporary, the original `const` item will not be modified.", "tree": {"sha": "ac629e272c836b5dd523baec4209f32110843244", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac629e272c836b5dd523baec4209f32110843244"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88197214b8a9099bb3da559a3bd7bf4867c10c5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88197214b8a9099bb3da559a3bd7bf4867c10c5f", "html_url": "https://github.com/rust-lang/rust/commit/88197214b8a9099bb3da559a3bd7bf4867c10c5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88197214b8a9099bb3da559a3bd7bf4867c10c5f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1894e4afe1a39f718cc27232a5a2f0d02b501f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1894e4afe1a39f718cc27232a5a2f0d02b501f6", "html_url": "https://github.com/rust-lang/rust/commit/a1894e4afe1a39f718cc27232a5a2f0d02b501f6"}, {"sha": "4434e8cefbec96e6928ea23769eb1a83d0f198b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4434e8cefbec96e6928ea23769eb1a83d0f198b5", "html_url": "https://github.com/rust-lang/rust/commit/4434e8cefbec96e6928ea23769eb1a83d0f198b5"}], "stats": {"total": 549, "additions": 430, "deletions": 119}, "files": [{"sha": "d32a7a4062e27502e10fd91121a985e7b2e5536f", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88197214b8a9099bb3da559a3bd7bf4867c10c5f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88197214b8a9099bb3da559a3bd7bf4867c10c5f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=88197214b8a9099bb3da559a3bd7bf4867c10c5f", "patch": "@@ -922,6 +922,8 @@ pub enum LocalInfo<'tcx> {\n     User(ClearCrossCrate<BindingForm<'tcx>>),\n     /// A temporary created that references the static with the given `DefId`.\n     StaticRef { def_id: DefId, is_thread_local: bool },\n+    /// A temporary created that references the const with the given `DefId`\n+    ConstRef { def_id: DefId },\n }\n \n impl<'tcx> LocalDecl<'tcx> {"}, {"sha": "f51bf7730ea0984572d6aad4896592e28b442753", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 40, "deletions": 57, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/88197214b8a9099bb3da559a3bd7bf4867c10c5f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88197214b8a9099bb3da559a3bd7bf4867c10c5f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=88197214b8a9099bb3da559a3bd7bf4867c10c5f", "patch": "@@ -804,68 +804,51 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         debug!(\"move_spans: target_temp = {:?}\", target_temp);\n \n         if let Some(Terminator {\n-            kind: TerminatorKind::Call { func, args, fn_span, from_hir_call, .. },\n-            ..\n+            kind: TerminatorKind::Call { fn_span, from_hir_call, .. }, ..\n         }) = &self.body[location.block].terminator\n         {\n-            let mut method_did = None;\n-            if let Operand::Constant(box Constant { literal: ty::Const { ty, .. }, .. }) = func {\n-                if let ty::FnDef(def_id, _) = *ty.kind() {\n-                    debug!(\"move_spans: fn = {:?}\", def_id);\n-                    if let Some(ty::AssocItem { fn_has_self_parameter, .. }) =\n-                        self.infcx.tcx.opt_associated_item(def_id)\n-                    {\n-                        if *fn_has_self_parameter {\n-                            method_did = Some(def_id);\n-                        }\n-                    }\n-                }\n-            }\n+            let method_did = if let Some(method_did) =\n+                crate::util::find_self_call(self.infcx.tcx, &self.body, target_temp, location.block)\n+            {\n+                method_did\n+            } else {\n+                return normal_ret;\n+            };\n \n             let tcx = self.infcx.tcx;\n-            let method_did = if let Some(did) = method_did { did } else { return normal_ret };\n-\n-            if let [Operand::Move(self_place), ..] = **args {\n-                if self_place.as_local() == Some(target_temp) {\n-                    let parent = tcx.parent(method_did);\n-                    let is_fn_once = parent == tcx.lang_items().fn_once_trait();\n-                    let is_operator = !from_hir_call\n-                        && parent.map_or(false, |p| {\n-                            tcx.lang_items().group(LangItemGroup::Op).contains(&p)\n-                        });\n-                    let fn_call_span = *fn_span;\n-\n-                    let self_arg = tcx.fn_arg_names(method_did)[0];\n-\n-                    let kind = if is_fn_once {\n-                        FnSelfUseKind::FnOnceCall\n-                    } else if is_operator {\n-                        FnSelfUseKind::Operator { self_arg }\n-                    } else {\n-                        debug!(\n-                            \"move_spans: method_did={:?}, fn_call_span={:?}\",\n-                            method_did, fn_call_span\n-                        );\n-                        let implicit_into_iter = matches!(\n-                            fn_call_span.desugaring_kind(),\n-                            Some(DesugaringKind::ForLoop(ForLoopLoc::IntoIter))\n-                        );\n-                        FnSelfUseKind::Normal { self_arg, implicit_into_iter }\n-                    };\n \n-                    return FnSelfUse {\n-                        var_span: stmt.source_info.span,\n-                        fn_call_span,\n-                        fn_span: self\n-                            .infcx\n-                            .tcx\n-                            .sess\n-                            .source_map()\n-                            .guess_head_span(self.infcx.tcx.def_span(method_did)),\n-                        kind,\n-                    };\n-                }\n-            }\n+            let parent = tcx.parent(method_did);\n+            let is_fn_once = parent == tcx.lang_items().fn_once_trait();\n+            let is_operator = !from_hir_call\n+                && parent.map_or(false, |p| tcx.lang_items().group(LangItemGroup::Op).contains(&p));\n+            let fn_call_span = *fn_span;\n+\n+            let self_arg = tcx.fn_arg_names(method_did)[0];\n+\n+            let kind = if is_fn_once {\n+                FnSelfUseKind::FnOnceCall\n+            } else if is_operator {\n+                FnSelfUseKind::Operator { self_arg }\n+            } else {\n+                debug!(\"move_spans: method_did={:?}, fn_call_span={:?}\", method_did, fn_call_span);\n+                let implicit_into_iter = matches!(\n+                    fn_call_span.desugaring_kind(),\n+                    Some(DesugaringKind::ForLoop(ForLoopLoc::IntoIter))\n+                );\n+                FnSelfUseKind::Normal { self_arg, implicit_into_iter }\n+            };\n+\n+            return FnSelfUse {\n+                var_span: stmt.source_info.span,\n+                fn_call_span,\n+                fn_span: self\n+                    .infcx\n+                    .tcx\n+                    .sess\n+                    .source_map()\n+                    .guess_head_span(self.infcx.tcx.def_span(method_did)),\n+                kind,\n+            };\n         }\n         normal_ret\n     }"}, {"sha": "589268e39bda9146e9ed1e2d86d8457b7f13db4f", "filename": "compiler/rustc_mir/src/transform/check_const_item_mutation.rs", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/88197214b8a9099bb3da559a3bd7bf4867c10c5f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88197214b8a9099bb3da559a3bd7bf4867c10c5f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs?ref=88197214b8a9099bb3da559a3bd7bf4867c10c5f", "patch": "@@ -0,0 +1,114 @@\n+use rustc_errors::DiagnosticBuilder;\n+use rustc_middle::lint::LintDiagnosticBuilder;\n+use rustc_middle::mir::visit::Visitor;\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::TyCtxt;\n+use rustc_session::lint::builtin::CONST_ITEM_MUTATION;\n+use rustc_span::def_id::DefId;\n+\n+use crate::transform::{MirPass, MirSource};\n+\n+pub struct CheckConstItemMutation;\n+\n+impl<'tcx> MirPass<'tcx> for CheckConstItemMutation {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+        let mut checker = ConstMutationChecker { body, tcx, target_local: None };\n+        checker.visit_body(&body);\n+    }\n+}\n+\n+struct ConstMutationChecker<'a, 'tcx> {\n+    body: &'a Body<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n+    target_local: Option<Local>,\n+}\n+\n+impl<'a, 'tcx> ConstMutationChecker<'a, 'tcx> {\n+    fn is_const_item(&self, local: Local) -> Option<DefId> {\n+        if let Some(box LocalInfo::ConstRef { def_id }) = self.body.local_decls[local].local_info {\n+            Some(def_id)\n+        } else {\n+            None\n+        }\n+    }\n+    fn lint_const_item_usage(\n+        &self,\n+        const_item: DefId,\n+        location: Location,\n+        decorate: impl for<'b> FnOnce(LintDiagnosticBuilder<'b>) -> DiagnosticBuilder<'b>,\n+    ) {\n+        let source_info = self.body.source_info(location);\n+        let lint_root = self.body.source_scopes[source_info.scope]\n+            .local_data\n+            .as_ref()\n+            .assert_crate_local()\n+            .lint_root;\n+\n+        self.tcx.struct_span_lint_hir(CONST_ITEM_MUTATION, lint_root, source_info.span, |lint| {\n+            decorate(lint)\n+                .span_note(self.tcx.def_span(const_item), \"`const` item defined here\")\n+                .emit()\n+        });\n+    }\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for ConstMutationChecker<'a, 'tcx> {\n+    fn visit_statement(&mut self, stmt: &Statement<'tcx>, loc: Location) {\n+        if let StatementKind::Assign(box (lhs, _)) = &stmt.kind {\n+            // Check for assignment to fields of a constant\n+            // Assigning directly to a constant (e.g. `FOO = true;`) is a hard error,\n+            // so emitting a lint would be redundant.\n+            if !lhs.projection.is_empty() {\n+                if let Some(def_id) = self.is_const_item(lhs.local) {\n+                    self.lint_const_item_usage(def_id, loc, |lint| {\n+                        let mut lint = lint.build(\"attempting to modify a `const` item\");\n+                        lint.note(\"each usage of a `const` item creates a new temporary - the original `const` item will not be modified\");\n+                        lint\n+                    })\n+                }\n+            }\n+            // We are looking for MIR of the form:\n+            //\n+            // ```\n+            // _1 = const FOO;\n+            // _2 = &mut _1;\n+            // method_call(_2, ..)\n+            // ```\n+            //\n+            // Record our current LHS, so that we can detect this\n+            // pattern in `visit_rvalue`\n+            self.target_local = lhs.as_local();\n+        }\n+        self.super_statement(stmt, loc);\n+        self.target_local = None;\n+    }\n+    fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, loc: Location) {\n+        if let Rvalue::Ref(_, BorrowKind::Mut { .. }, place) = rvalue {\n+            let local = place.local;\n+            if let Some(def_id) = self.is_const_item(local) {\n+                // If this Rvalue is being used as the right-hand side of a\n+                // `StatementKind::Assign`, see if it ends up getting used as\n+                // the `self` parameter of a method call (as the terminator of our current\n+                // BasicBlock). If so, we emit a more specific lint.\n+                let method_did = self.target_local.and_then(|target_local| {\n+                    crate::util::find_self_call(self.tcx, &self.body, target_local, loc.block)\n+                });\n+                let lint_loc =\n+                    if method_did.is_some() { self.body.terminator_loc(loc.block) } else { loc };\n+                self.lint_const_item_usage(def_id, lint_loc, |lint| {\n+                    let mut lint = lint.build(\"taking a mutable reference to a `const` item\");\n+                    lint\n+                        .note(\"each usage of a `const` item creates a new temporary\")\n+                        .note(\"the mutable reference will refer to this temporary, not the original `const` item\");\n+\n+                    if let Some(method_did) = method_did {\n+                        lint.span_note(self.tcx.def_span(method_did), \"mutable reference created due to call to this method\");\n+                    }\n+\n+                    lint\n+                });\n+            }\n+        }\n+        self.super_rvalue(rvalue, loc);\n+    }\n+}"}, {"sha": "8025b7c02043d4b84b6cd226d3b88aee5715e702", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88197214b8a9099bb3da559a3bd7bf4867c10c5f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88197214b8a9099bb3da559a3bd7bf4867c10c5f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=88197214b8a9099bb3da559a3bd7bf4867c10c5f", "patch": "@@ -16,6 +16,7 @@ use std::borrow::Cow;\n pub mod add_call_guards;\n pub mod add_moves_for_packed_drops;\n pub mod add_retag;\n+pub mod check_const_item_mutation;\n pub mod check_consts;\n pub mod check_packed_ref;\n pub mod check_unsafety;\n@@ -307,6 +308,7 @@ fn mir_const<'tcx>(\n         &[&[\n             // MIR-level lints.\n             &check_packed_ref::CheckPackedRef,\n+            &check_const_item_mutation::CheckConstItemMutation,\n             // What we need to do constant evaluation.\n             &simplify::SimplifyCfg::new(\"initial\"),\n             &rustc_peek::SanityCheck,"}, {"sha": "049b5f01214cf49a8ccb76de10bd7202936994f0", "filename": "compiler/rustc_mir/src/util/find_self_call.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/88197214b8a9099bb3da559a3bd7bf4867c10c5f/compiler%2Frustc_mir%2Fsrc%2Futil%2Ffind_self_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88197214b8a9099bb3da559a3bd7bf4867c10c5f/compiler%2Frustc_mir%2Fsrc%2Futil%2Ffind_self_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Ffind_self_call.rs?ref=88197214b8a9099bb3da559a3bd7bf4867c10c5f", "patch": "@@ -0,0 +1,35 @@\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::{self, TyCtxt};\n+use rustc_span::def_id::DefId;\n+\n+/// Checks if the specified `local` is used as the `self` prameter of a method call\n+/// in the provided `BasicBlock`. If it is, then the `DefId` of the called method is\n+/// returned.\n+pub fn find_self_call(\n+    tcx: TyCtxt<'_>,\n+    body: &Body<'_>,\n+    local: Local,\n+    block: BasicBlock,\n+) -> Option<DefId> {\n+    debug!(\"find_self_call(local={:?}): terminator={:?}\", local, &body[block].terminator);\n+    if let Some(Terminator { kind: TerminatorKind::Call { func, args, .. }, .. }) =\n+        &body[block].terminator\n+    {\n+        debug!(\"find_self_call: func={:?}\", func);\n+        if let Operand::Constant(box Constant { literal: ty::Const { ty, .. }, .. }) = func {\n+            if let ty::FnDef(def_id, _) = *ty.kind() {\n+                if let Some(ty::AssocItem { fn_has_self_parameter: true, .. }) =\n+                    tcx.opt_associated_item(def_id)\n+                {\n+                    debug!(\"find_self_call: args={:?}\", args);\n+                    if let [Operand::Move(self_place) | Operand::Copy(self_place), ..] = **args {\n+                        if self_place.as_local() == Some(local) {\n+                            return Some(def_id);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    None\n+}"}, {"sha": "699f3bcf0146f73301c1dcfeee9b5216d2f8adf2", "filename": "compiler/rustc_mir/src/util/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88197214b8a9099bb3da559a3bd7bf4867c10c5f/compiler%2Frustc_mir%2Fsrc%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88197214b8a9099bb3da559a3bd7bf4867c10c5f/compiler%2Frustc_mir%2Fsrc%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fmod.rs?ref=88197214b8a9099bb3da559a3bd7bf4867c10c5f", "patch": "@@ -7,12 +7,14 @@ pub mod storage;\n \n mod alignment;\n pub mod collect_writes;\n+mod find_self_call;\n mod graphviz;\n pub(crate) mod pretty;\n pub(crate) mod spanview;\n \n pub use self::aggregate::expand_aggregate;\n pub use self::alignment::is_disaligned;\n+pub use self::find_self_call::find_self_call;\n pub use self::graphviz::write_node_label as write_graphviz_node_label;\n pub use self::graphviz::{graphviz_safe_def_name, write_mir_graphviz};\n pub use self::pretty::{dump_enabled, dump_mir, write_mir_pretty, PassWhere};"}, {"sha": "244a70f83b03e5453257ce2654713792241c07ba", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88197214b8a9099bb3da559a3bd7bf4867c10c5f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88197214b8a9099bb3da559a3bd7bf4867c10c5f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=88197214b8a9099bb3da559a3bd7bf4867c10c5f", "patch": "@@ -21,7 +21,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let Expr { ty, temp_lifetime: _, span, kind } = expr;\n         match kind {\n             ExprKind::Scope { region_scope: _, lint_level: _, value } => this.as_constant(value),\n-            ExprKind::Literal { literal, user_ty } => {\n+            ExprKind::Literal { literal, user_ty, const_id: _ } => {\n                 let user_ty = user_ty.map(|user_ty| {\n                     this.canonical_user_type_annotations.push(CanonicalUserTypeAnnotation {\n                         span,"}, {"sha": "9984b527ffdb4c00611c8e0b843f6ab5b25c072a", "filename": "compiler/rustc_mir_build/src/build/expr/as_temp.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88197214b8a9099bb3da559a3bd7bf4867c10c5f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88197214b8a9099bb3da559a3bd7bf4867c10c5f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs?ref=88197214b8a9099bb3da559a3bd7bf4867c10c5f", "patch": "@@ -76,6 +76,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     local_decl.local_info =\n                         Some(box LocalInfo::StaticRef { def_id, is_thread_local: true });\n                 }\n+                ExprKind::Literal { const_id: Some(def_id), .. } => {\n+                    local_decl.local_info = Some(box LocalInfo::ConstRef { def_id });\n+                }\n                 _ => {}\n             }\n             this.local_decls.push(local_decl)"}, {"sha": "70c7abc2654927519d18758b8b8fbf1682b24d57", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/88197214b8a9099bb3da559a3bd7bf4867c10c5f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88197214b8a9099bb3da559a3bd7bf4867c10c5f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=88197214b8a9099bb3da559a3bd7bf4867c10c5f", "patch": "@@ -247,6 +247,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n         hir::ExprKind::Lit(ref lit) => ExprKind::Literal {\n             literal: cx.const_eval_literal(&lit.node, expr_ty, lit.span, false),\n             user_ty: None,\n+            const_id: None,\n         },\n \n         hir::ExprKind::Binary(op, ref lhs, ref rhs) => {\n@@ -306,6 +307,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n                     ExprKind::Literal {\n                         literal: cx.const_eval_literal(&lit.node, expr_ty, lit.span, true),\n                         user_ty: None,\n+                        const_id: None,\n                     }\n                 } else {\n                     ExprKind::Unary { op: UnOp::Neg, arg: arg.to_ref() }\n@@ -447,6 +449,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n                                             kind: ExprKind::Literal {\n                                                 literal: ty::Const::zero_sized(cx.tcx, ty),\n                                                 user_ty,\n+                                                const_id: None,\n                                             },\n                                         }\n                                         .to_ref(),\n@@ -473,6 +476,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n                                             kind: ExprKind::Literal {\n                                                 literal: ty::Const::zero_sized(cx.tcx, ty),\n                                                 user_ty: None,\n+                                                const_id: None,\n                                             },\n                                         }\n                                         .to_ref(),\n@@ -585,7 +589,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n                             temp_lifetime,\n                             ty: var_ty,\n                             span: expr.span,\n-                            kind: ExprKind::Literal { literal, user_ty: None },\n+                            kind: ExprKind::Literal { literal, user_ty: None, const_id: None },\n                         }\n                         .to_ref()\n                     };\n@@ -714,7 +718,11 @@ fn method_callee<'a, 'tcx>(\n         temp_lifetime,\n         ty,\n         span,\n-        kind: ExprKind::Literal { literal: ty::Const::zero_sized(cx.tcx(), ty), user_ty },\n+        kind: ExprKind::Literal {\n+            literal: ty::Const::zero_sized(cx.tcx(), ty),\n+            user_ty,\n+            const_id: None,\n+        },\n     }\n }\n \n@@ -777,6 +785,7 @@ fn convert_path_expr<'a, 'tcx>(\n             ExprKind::Literal {\n                 literal: ty::Const::zero_sized(cx.tcx, cx.typeck_results().node_type(expr.hir_id)),\n                 user_ty,\n+                const_id: None,\n             }\n         }\n \n@@ -794,6 +803,7 @@ fn convert_path_expr<'a, 'tcx>(\n                     .tcx\n                     .mk_const(ty::Const { val, ty: cx.typeck_results().node_type(expr.hir_id) }),\n                 user_ty: None,\n+                const_id: Some(def_id),\n             }\n         }\n \n@@ -810,6 +820,7 @@ fn convert_path_expr<'a, 'tcx>(\n                     ty: cx.typeck_results().node_type(expr.hir_id),\n                 }),\n                 user_ty,\n+                const_id: Some(def_id),\n             }\n         }\n "}, {"sha": "4d57fd5c64f8dd1738801e4b52dac9779aae7c91", "filename": "compiler/rustc_mir_build/src/thir/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88197214b8a9099bb3da559a3bd7bf4867c10c5f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88197214b8a9099bb3da559a3bd7bf4867c10c5f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs?ref=88197214b8a9099bb3da559a3bd7bf4867c10c5f", "patch": "@@ -273,6 +273,10 @@ crate enum ExprKind<'tcx> {\n     Literal {\n         literal: &'tcx Const<'tcx>,\n         user_ty: Option<Canonical<'tcx, UserType<'tcx>>>,\n+        /// The `DefId` of the `const` item this literal\n+        /// was produced from, if this is not a user-written\n+        /// literal value.\n+        const_id: Option<DefId>,\n     },\n     /// A literal containing the address of a `static`.\n     ///"}, {"sha": "a9deaaae0daeb6e6ee741d0ddab31c0496aa893b", "filename": "compiler/rustc_session/src/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88197214b8a9099bb3da559a3bd7bf4867c10c5f/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88197214b8a9099bb3da559a3bd7bf4867c10c5f/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs?ref=88197214b8a9099bb3da559a3bd7bf4867c10c5f", "patch": "@@ -232,6 +232,12 @@ declare_lint! {\n     \"detects unaligned references to fields of packed structs\",\n }\n \n+declare_lint! {\n+    pub CONST_ITEM_MUTATION,\n+    Warn,\n+    \"detects attempts to mutate a `const` item\",\n+}\n+\n declare_lint! {\n     pub SAFE_PACKED_BORROWS,\n     Warn,\n@@ -582,6 +588,7 @@ declare_lint_pass! {\n         CONST_ERR,\n         RENAMED_AND_REMOVED_LINTS,\n         UNALIGNED_REFERENCES,\n+        CONST_ITEM_MUTATION,\n         SAFE_PACKED_BORROWS,\n         PATTERNS_IN_FNS_WITHOUT_BODY,\n         LATE_BOUND_LIFETIME_ARGUMENTS,"}, {"sha": "54d3cc54a84d9e5ad28b05c28f959f875b123405", "filename": "src/test/ui/error-codes/E0017.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88197214b8a9099bb3da559a3bd7bf4867c10c5f/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88197214b8a9099bb3da559a3bd7bf4867c10c5f/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs?ref=88197214b8a9099bb3da559a3bd7bf4867c10c5f", "patch": "@@ -3,9 +3,11 @@ const C: i32 = 2;\n static mut M: i32 = 3;\n \n const CR: &'static mut i32 = &mut C; //~ ERROR E0764\n+                                     //~| WARN taking a mutable\n static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0764\n                                               //~| ERROR E0019\n                                               //~| ERROR cannot borrow\n static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0764\n+                                              //~| WARN taking a mutable\n static STATIC_MUT_REF: &'static mut i32 = unsafe { &mut M }; //~ ERROR E0764\n fn main() {}"}, {"sha": "40ef6bd97b3b0d2a76712a5be952f98a314dd89b", "filename": "src/test/ui/error-codes/E0017.stderr", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/88197214b8a9099bb3da559a3bd7bf4867c10c5f/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88197214b8a9099bb3da559a3bd7bf4867c10c5f/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr?ref=88197214b8a9099bb3da559a3bd7bf4867c10c5f", "patch": "@@ -1,42 +1,71 @@\n+warning: taking a mutable reference to a `const` item\n+  --> $DIR/E0017.rs:5:30\n+   |\n+LL | const CR: &'static mut i32 = &mut C;\n+   |                              ^^^^^^\n+   |\n+   = note: `#[warn(const_item_mutation)]` on by default\n+   = note: each usage of a `const` item creates a new temporary\n+   = note: the mutable reference will refer to this temporary, not the original `const` item\n+note: `const` item defined here\n+  --> $DIR/E0017.rs:2:1\n+   |\n+LL | const C: i32 = 2;\n+   | ^^^^^^^^^^^^^^^^^\n+\n error[E0764]: mutable references are not allowed in constants\n   --> $DIR/E0017.rs:5:30\n    |\n LL | const CR: &'static mut i32 = &mut C;\n    |                              ^^^^^^ `&mut` is only allowed in `const fn`\n \n error[E0019]: static contains unimplemented expression type\n-  --> $DIR/E0017.rs:6:39\n+  --> $DIR/E0017.rs:7:39\n    |\n LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^\n    |\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0764]: mutable references are not allowed in statics\n-  --> $DIR/E0017.rs:6:39\n+  --> $DIR/E0017.rs:7:39\n    |\n LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^ `&mut` is only allowed in `const fn`\n \n error[E0596]: cannot borrow immutable static item `X` as mutable\n-  --> $DIR/E0017.rs:6:39\n+  --> $DIR/E0017.rs:7:39\n    |\n LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^ cannot borrow as mutable\n \n+warning: taking a mutable reference to a `const` item\n+  --> $DIR/E0017.rs:10:38\n+   |\n+LL | static CONST_REF: &'static mut i32 = &mut C;\n+   |                                      ^^^^^^\n+   |\n+   = note: each usage of a `const` item creates a new temporary\n+   = note: the mutable reference will refer to this temporary, not the original `const` item\n+note: `const` item defined here\n+  --> $DIR/E0017.rs:2:1\n+   |\n+LL | const C: i32 = 2;\n+   | ^^^^^^^^^^^^^^^^^\n+\n error[E0764]: mutable references are not allowed in statics\n-  --> $DIR/E0017.rs:9:38\n+  --> $DIR/E0017.rs:10:38\n    |\n LL | static CONST_REF: &'static mut i32 = &mut C;\n    |                                      ^^^^^^ `&mut` is only allowed in `const fn`\n \n error[E0764]: mutable references are not allowed in statics\n-  --> $DIR/E0017.rs:10:52\n+  --> $DIR/E0017.rs:12:52\n    |\n LL | static STATIC_MUT_REF: &'static mut i32 = unsafe { &mut M };\n    |                                                    ^^^^^^ `&mut` is only allowed in `const fn`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 6 previous errors; 2 warnings emitted\n \n Some errors have detailed explanations: E0019, E0596, E0764.\n For more information about an error, try `rustc --explain E0019`."}, {"sha": "8ad586bb30f1eaf7a4bf99b095ca61ec4036ba7f", "filename": "src/test/ui/error-codes/E0388.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88197214b8a9099bb3da559a3bd7bf4867c10c5f/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88197214b8a9099bb3da559a3bd7bf4867c10c5f/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs?ref=88197214b8a9099bb3da559a3bd7bf4867c10c5f", "patch": "@@ -2,9 +2,11 @@ static X: i32 = 1;\n const C: i32 = 2;\n \n const CR: &'static mut i32 = &mut C; //~ ERROR E0764\n+                                     //~| WARN taking a mutable\n static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0019\n                                               //~| ERROR cannot borrow\n                                               //~| ERROR E0764\n static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0764\n+                                             //~| WARN taking a mutable\n \n fn main() {}"}, {"sha": "39bc717ceec3e9e762eb6337ee9c9e2ab5550a15", "filename": "src/test/ui/error-codes/E0388.stderr", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/88197214b8a9099bb3da559a3bd7bf4867c10c5f/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88197214b8a9099bb3da559a3bd7bf4867c10c5f/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr?ref=88197214b8a9099bb3da559a3bd7bf4867c10c5f", "patch": "@@ -1,36 +1,65 @@\n+warning: taking a mutable reference to a `const` item\n+  --> $DIR/E0388.rs:4:30\n+   |\n+LL | const CR: &'static mut i32 = &mut C;\n+   |                              ^^^^^^\n+   |\n+   = note: `#[warn(const_item_mutation)]` on by default\n+   = note: each usage of a `const` item creates a new temporary\n+   = note: the mutable reference will refer to this temporary, not the original `const` item\n+note: `const` item defined here\n+  --> $DIR/E0388.rs:2:1\n+   |\n+LL | const C: i32 = 2;\n+   | ^^^^^^^^^^^^^^^^^\n+\n error[E0764]: mutable references are not allowed in constants\n   --> $DIR/E0388.rs:4:30\n    |\n LL | const CR: &'static mut i32 = &mut C;\n    |                              ^^^^^^ `&mut` is only allowed in `const fn`\n \n error[E0019]: static contains unimplemented expression type\n-  --> $DIR/E0388.rs:5:39\n+  --> $DIR/E0388.rs:6:39\n    |\n LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^\n    |\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0764]: mutable references are not allowed in statics\n-  --> $DIR/E0388.rs:5:39\n+  --> $DIR/E0388.rs:6:39\n    |\n LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^ `&mut` is only allowed in `const fn`\n \n error[E0596]: cannot borrow immutable static item `X` as mutable\n-  --> $DIR/E0388.rs:5:39\n+  --> $DIR/E0388.rs:6:39\n    |\n LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^ cannot borrow as mutable\n \n+warning: taking a mutable reference to a `const` item\n+  --> $DIR/E0388.rs:9:38\n+   |\n+LL | static CONST_REF: &'static mut i32 = &mut C;\n+   |                                      ^^^^^^\n+   |\n+   = note: each usage of a `const` item creates a new temporary\n+   = note: the mutable reference will refer to this temporary, not the original `const` item\n+note: `const` item defined here\n+  --> $DIR/E0388.rs:2:1\n+   |\n+LL | const C: i32 = 2;\n+   | ^^^^^^^^^^^^^^^^^\n+\n error[E0764]: mutable references are not allowed in statics\n-  --> $DIR/E0388.rs:8:38\n+  --> $DIR/E0388.rs:9:38\n    |\n LL | static CONST_REF: &'static mut i32 = &mut C;\n    |                                      ^^^^^^ `&mut` is only allowed in `const fn`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 5 previous errors; 2 warnings emitted\n \n Some errors have detailed explanations: E0019, E0596, E0764.\n For more information about an error, try `rustc --explain E0019`."}, {"sha": "92d29a7dae4757e2bf44d5a1948a56eb9ab943ee", "filename": "src/test/ui/lint/lint-const-item-mutation.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/88197214b8a9099bb3da559a3bd7bf4867c10c5f/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88197214b8a9099bb3da559a3bd7bf4867c10c5f/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.rs?ref=88197214b8a9099bb3da559a3bd7bf4867c10c5f", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+\n+struct MyStruct {\n+    field: bool,\n+    inner_array: [char; 1],\n+}\n+impl MyStruct {\n+    fn use_mut(&mut self) {}\n+}\n+\n+const ARRAY: [u8; 1] = [25];\n+const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'] };\n+\n+fn main() {\n+    ARRAY[0] = 5; //~ WARN attempting to modify\n+    MY_STRUCT.field = false; //~ WARN attempting to modify\n+    MY_STRUCT.inner_array[0] = 'b'; //~ WARN attempting to modify\n+    MY_STRUCT.use_mut(); //~ WARN taking\n+    &mut MY_STRUCT; //~ WARN taking\n+    (&mut MY_STRUCT).use_mut(); //~ WARN taking\n+}"}, {"sha": "2d8f2c49744ba37ee93ad07a99b0d53a2292e4d9", "filename": "src/test/ui/lint/lint-const-item-mutation.stderr", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/88197214b8a9099bb3da559a3bd7bf4867c10c5f/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88197214b8a9099bb3da559a3bd7bf4867c10c5f/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr?ref=88197214b8a9099bb3da559a3bd7bf4867c10c5f", "patch": "@@ -0,0 +1,89 @@\n+warning: attempting to modify a `const` item\n+  --> $DIR/lint-const-item-mutation.rs:15:5\n+   |\n+LL |     ARRAY[0] = 5;\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(const_item_mutation)]` on by default\n+   = note: each usage of a `const` item creates a new temporary - the original `const` item will not be modified\n+note: `const` item defined here\n+  --> $DIR/lint-const-item-mutation.rs:11:1\n+   |\n+LL | const ARRAY: [u8; 1] = [25];\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: attempting to modify a `const` item\n+  --> $DIR/lint-const-item-mutation.rs:16:5\n+   |\n+LL |     MY_STRUCT.field = false;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: each usage of a `const` item creates a new temporary - the original `const` item will not be modified\n+note: `const` item defined here\n+  --> $DIR/lint-const-item-mutation.rs:12:1\n+   |\n+LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'] };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: attempting to modify a `const` item\n+  --> $DIR/lint-const-item-mutation.rs:17:5\n+   |\n+LL |     MY_STRUCT.inner_array[0] = 'b';\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: each usage of a `const` item creates a new temporary - the original `const` item will not be modified\n+note: `const` item defined here\n+  --> $DIR/lint-const-item-mutation.rs:12:1\n+   |\n+LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'] };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: taking a mutable reference to a `const` item\n+  --> $DIR/lint-const-item-mutation.rs:18:5\n+   |\n+LL |     MY_STRUCT.use_mut();\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: each usage of a `const` item creates a new temporary\n+   = note: the mutable reference will refer to this temporary, not the original `const` item\n+note: mutable reference created due to call to this method\n+  --> $DIR/lint-const-item-mutation.rs:8:5\n+   |\n+LL |     fn use_mut(&mut self) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+note: `const` item defined here\n+  --> $DIR/lint-const-item-mutation.rs:12:1\n+   |\n+LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'] };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: taking a mutable reference to a `const` item\n+  --> $DIR/lint-const-item-mutation.rs:19:5\n+   |\n+LL |     &mut MY_STRUCT;\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = note: each usage of a `const` item creates a new temporary\n+   = note: the mutable reference will refer to this temporary, not the original `const` item\n+note: `const` item defined here\n+  --> $DIR/lint-const-item-mutation.rs:12:1\n+   |\n+LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'] };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: taking a mutable reference to a `const` item\n+  --> $DIR/lint-const-item-mutation.rs:20:5\n+   |\n+LL |     (&mut MY_STRUCT).use_mut();\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = note: each usage of a `const` item creates a new temporary\n+   = note: the mutable reference will refer to this temporary, not the original `const` item\n+note: `const` item defined here\n+  --> $DIR/lint-const-item-mutation.rs:12:1\n+   |\n+LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'] };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: 6 warnings emitted\n+"}, {"sha": "2b6ddadd4c112aca2f5cfc49183c2c2d30079821", "filename": "src/tools/clippy/clippy_lints/src/temporary_assignment.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88197214b8a9099bb3da559a3bd7bf4867c10c5f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88197214b8a9099bb3da559a3bd7bf4867c10c5f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftemporary_assignment.rs?ref=88197214b8a9099bb3da559a3bd7bf4867c10c5f", "patch": "@@ -1,5 +1,4 @@\n use crate::utils::{is_adjusted, span_lint};\n-use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -22,10 +21,9 @@ declare_clippy_lint! {\n     \"assignments to temporaries\"\n }\n \n-fn is_temporary(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+fn is_temporary(_cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     match &expr.kind {\n         ExprKind::Struct(..) | ExprKind::Tup(..) => true,\n-        ExprKind::Path(qpath) => matches!(cx.qpath_res(qpath, expr.hir_id), Res::Def(DefKind::Const, ..)),\n         _ => false,\n     }\n }"}, {"sha": "39f87510548503654c7a610837fed55c9ebc64de", "filename": "src/tools/clippy/tests/ui/borrow_interior_mutable_const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88197214b8a9099bb3da559a3bd7bf4867c10c5f/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_interior_mutable_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88197214b8a9099bb3da559a3bd7bf4867c10c5f/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_interior_mutable_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_interior_mutable_const.rs?ref=88197214b8a9099bb3da559a3bd7bf4867c10c5f", "patch": "@@ -1,5 +1,6 @@\n #![warn(clippy::borrow_interior_mutable_const)]\n #![allow(clippy::declare_interior_mutable_const, clippy::ref_in_deref)]\n+#![allow(const_item_mutation)]\n \n use std::borrow::Cow;\n use std::cell::{Cell, UnsafeCell};"}, {"sha": "5800af7e960f4da7247f652d0685bcaf3af32093", "filename": "src/tools/clippy/tests/ui/borrow_interior_mutable_const.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/88197214b8a9099bb3da559a3bd7bf4867c10c5f/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_interior_mutable_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88197214b8a9099bb3da559a3bd7bf4867c10c5f/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_interior_mutable_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_interior_mutable_const.stderr?ref=88197214b8a9099bb3da559a3bd7bf4867c10c5f", "patch": "@@ -1,5 +1,5 @@\n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:65:5\n+  --> $DIR/borrow_interior_mutable_const.rs:66:5\n    |\n LL |     ATOMIC.store(1, Ordering::SeqCst); //~ ERROR interior mutability\n    |     ^^^^^^\n@@ -8,119 +8,119 @@ LL |     ATOMIC.store(1, Ordering::SeqCst); //~ ERROR interior mutability\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:66:16\n+  --> $DIR/borrow_interior_mutable_const.rs:67:16\n    |\n LL |     assert_eq!(ATOMIC.load(Ordering::SeqCst), 5); //~ ERROR interior mutability\n    |                ^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:69:22\n+  --> $DIR/borrow_interior_mutable_const.rs:70:22\n    |\n LL |     let _once_ref = &ONCE_INIT; //~ ERROR interior mutability\n    |                      ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:70:25\n+  --> $DIR/borrow_interior_mutable_const.rs:71:25\n    |\n LL |     let _once_ref_2 = &&ONCE_INIT; //~ ERROR interior mutability\n    |                         ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:71:27\n+  --> $DIR/borrow_interior_mutable_const.rs:72:27\n    |\n LL |     let _once_ref_4 = &&&&ONCE_INIT; //~ ERROR interior mutability\n    |                           ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:72:26\n+  --> $DIR/borrow_interior_mutable_const.rs:73:26\n    |\n LL |     let _once_mut = &mut ONCE_INIT; //~ ERROR interior mutability\n    |                          ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:83:14\n+  --> $DIR/borrow_interior_mutable_const.rs:84:14\n    |\n LL |     let _ = &ATOMIC_TUPLE; //~ ERROR interior mutability\n    |              ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:84:14\n+  --> $DIR/borrow_interior_mutable_const.rs:85:14\n    |\n LL |     let _ = &ATOMIC_TUPLE.0; //~ ERROR interior mutability\n    |              ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:85:19\n+  --> $DIR/borrow_interior_mutable_const.rs:86:19\n    |\n LL |     let _ = &(&&&&ATOMIC_TUPLE).0; //~ ERROR interior mutability\n    |                   ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:86:14\n+  --> $DIR/borrow_interior_mutable_const.rs:87:14\n    |\n LL |     let _ = &ATOMIC_TUPLE.0[0]; //~ ERROR interior mutability\n    |              ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:87:13\n+  --> $DIR/borrow_interior_mutable_const.rs:88:13\n    |\n LL |     let _ = ATOMIC_TUPLE.0[0].load(Ordering::SeqCst); //~ ERROR interior mutability\n    |             ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:93:13\n+  --> $DIR/borrow_interior_mutable_const.rs:94:13\n    |\n LL |     let _ = ATOMIC_TUPLE.0[0]; //~ ERROR interior mutability\n    |             ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:98:5\n+  --> $DIR/borrow_interior_mutable_const.rs:99:5\n    |\n LL |     CELL.set(2); //~ ERROR interior mutability\n    |     ^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:99:16\n+  --> $DIR/borrow_interior_mutable_const.rs:100:16\n    |\n LL |     assert_eq!(CELL.get(), 6); //~ ERROR interior mutability\n    |                ^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:112:5\n+  --> $DIR/borrow_interior_mutable_const.rs:113:5\n    |\n LL |     u64::ATOMIC.store(5, Ordering::SeqCst); //~ ERROR interior mutability\n    |     ^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:113:16\n+  --> $DIR/borrow_interior_mutable_const.rs:114:16\n    |\n LL |     assert_eq!(u64::ATOMIC.load(Ordering::SeqCst), 9); //~ ERROR interior mutability\n    |                ^^^^^^^^^^^"}, {"sha": "d6f56d40c5d4eb8d9664dc2c233f4fe04204c2d7", "filename": "src/tools/clippy/tests/ui/temporary_assignment.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88197214b8a9099bb3da559a3bd7bf4867c10c5f/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88197214b8a9099bb3da559a3bd7bf4867c10c5f/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftemporary_assignment.rs?ref=88197214b8a9099bb3da559a3bd7bf4867c10c5f", "patch": "@@ -1,4 +1,5 @@\n #![warn(clippy::temporary_assignment)]\n+#![allow(const_item_mutation)]\n \n use std::ops::{Deref, DerefMut};\n "}, {"sha": "4cc32c79f05ce3389f36da19d98258e919a34f9f", "filename": "src/tools/clippy/tests/ui/temporary_assignment.stderr", "status": "modified", "additions": 5, "deletions": 29, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/88197214b8a9099bb3da559a3bd7bf4867c10c5f/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftemporary_assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88197214b8a9099bb3da559a3bd7bf4867c10c5f/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftemporary_assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftemporary_assignment.stderr?ref=88197214b8a9099bb3da559a3bd7bf4867c10c5f", "patch": "@@ -1,13 +1,13 @@\n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:47:5\n+  --> $DIR/temporary_assignment.rs:48:5\n    |\n LL |     Struct { field: 0 }.field = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::temporary-assignment` implied by `-D warnings`\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:48:5\n+  --> $DIR/temporary_assignment.rs:49:5\n    |\n LL | /     MultiStruct {\n LL | |         structure: Struct { field: 0 },\n@@ -17,40 +17,16 @@ LL | |     .field = 1;\n    | |______________^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:53:5\n+  --> $DIR/temporary_assignment.rs:54:5\n    |\n LL |     ArrayStruct { array: [0] }.array[0] = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:54:5\n+  --> $DIR/temporary_assignment.rs:55:5\n    |\n LL |     (0, 0).0 = 1;\n    |     ^^^^^^^^^^^^\n \n-error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:56:5\n-   |\n-LL |     A.0 = 2;\n-   |     ^^^^^^^\n-\n-error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:57:5\n-   |\n-LL |     B.field = 2;\n-   |     ^^^^^^^^^^^\n-\n-error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:58:5\n-   |\n-LL |     C.structure.field = 2;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-\n-error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:59:5\n-   |\n-LL |     D.array[0] = 2;\n-   |     ^^^^^^^^^^^^^^\n-\n-error: aborting due to 8 previous errors\n+error: aborting due to 4 previous errors\n "}]}