{"sha": "40be1d3152542470ec5955a1bd03de4e2c87053d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwYmUxZDMxNTI1NDI0NzBlYzU5NTVhMWJkMDNkZTRlMmM4NzA1M2Q=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-05-11T22:17:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-11T22:17:59Z"}, "message": "Rollup merge of #83501 - camelid:rustdoc-layout, r=jyn514,GuillaumeGomez\n\nrustdoc: Add unstable CLI option to show basic type layout information\n\nCloses #75988.\n\nRight now it just shows the size.", "tree": {"sha": "e849c74ba3b379ec0351dd98f25fd471a366105a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e849c74ba3b379ec0351dd98f25fd471a366105a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40be1d3152542470ec5955a1bd03de4e2c87053d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgmwKXCRBK7hj4Ov3rIwAAO3UIACfSyleTQo3SZ8bl0TcOI/DO\nOjSxFz8N2YqgYcByGa9KQYmlnnEkq53eZxeC6VNHw1T3FLweD2+EtPz5mgMMTX1s\nfRCA0RmVblA1/D/2hXfW41yfIs51Nw5daDsq99PeEkYXa47k8pq17q6tL0uLP746\nAY5j1YPdNb4WrAyybbDHGqMRv/rC50BgMD0U5hwcqZ7m6xVpVOeIFaLl26dmOWu1\nNhsQ3qVCzndhyoRHp7/mWc1CNrZ6BjFNhFd3AAeBBFzIiQCyTVSGImmkwQXUOWer\noou8AwRQUwWEJ+/Bd0y4TFjXte8IM9dwVruEY9kiApZF3PQp8aArwKZUhsWcuiE=\n=NTbh\n-----END PGP SIGNATURE-----\n", "payload": "tree e849c74ba3b379ec0351dd98f25fd471a366105a\nparent 5c029265465301fe9cb3960ce2a5da6c99b8dcf2\nparent d43701caa01003d9e0386fbd7a61d530e830564b\nauthor Yuki Okushi <jtitor@2k36.org> 1620771479 +0900\ncommitter GitHub <noreply@github.com> 1620771479 +0900\n\nRollup merge of #83501 - camelid:rustdoc-layout, r=jyn514,GuillaumeGomez\n\nrustdoc: Add unstable CLI option to show basic type layout information\n\nCloses #75988.\n\nRight now it just shows the size.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40be1d3152542470ec5955a1bd03de4e2c87053d", "html_url": "https://github.com/rust-lang/rust/commit/40be1d3152542470ec5955a1bd03de4e2c87053d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40be1d3152542470ec5955a1bd03de4e2c87053d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c029265465301fe9cb3960ce2a5da6c99b8dcf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c029265465301fe9cb3960ce2a5da6c99b8dcf2", "html_url": "https://github.com/rust-lang/rust/commit/5c029265465301fe9cb3960ce2a5da6c99b8dcf2"}, {"sha": "d43701caa01003d9e0386fbd7a61d530e830564b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d43701caa01003d9e0386fbd7a61d530e830564b", "html_url": "https://github.com/rust-lang/rust/commit/d43701caa01003d9e0386fbd7a61d530e830564b"}], "stats": {"total": 149, "additions": 145, "deletions": 4}, "files": [{"sha": "326a6fdaa80ff75ce70bb8a864e6d0ba1d2cfd6c", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40be1d3152542470ec5955a1bd03de4e2c87053d/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40be1d3152542470ec5955a1bd03de4e2c87053d/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=40be1d3152542470ec5955a1bd03de4e2c87053d", "patch": "@@ -549,6 +549,7 @@ impl Step for Rustc {\n         cargo.rustdocflag(\"--enable-index-page\");\n         cargo.rustdocflag(\"-Zunstable-options\");\n         cargo.rustdocflag(\"-Znormalize-docs\");\n+        cargo.rustdocflag(\"--show-type-layout\");\n         compile::rustc_cargo(builder, &mut cargo, target);\n \n         // Only include compiler crates, no dependencies of those, such as `libc`.\n@@ -648,6 +649,7 @@ impl Step for Rustdoc {\n \n         cargo.rustdocflag(\"--document-private-items\");\n         cargo.rustdocflag(\"--enable-index-page\");\n+        cargo.rustdocflag(\"--show-type-layout\");\n         cargo.rustdocflag(\"-Zunstable-options\");\n         builder.run(&mut cargo.into());\n     }"}, {"sha": "b75e98ae16c16f2718d49d7313bc48865ecff5b3", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40be1d3152542470ec5955a1bd03de4e2c87053d/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40be1d3152542470ec5955a1bd03de4e2c87053d/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=40be1d3152542470ec5955a1bd03de4e2c87053d", "patch": "@@ -267,6 +267,8 @@ crate struct RenderOptions {\n     crate document_hidden: bool,\n     /// If `true`, generate a JSON file in the crate folder instead of HTML redirection files.\n     crate generate_redirect_map: bool,\n+    /// Show the memory layout of types in the docs.\n+    crate show_type_layout: bool,\n     crate unstable_features: rustc_feature::UnstableFeatures,\n     crate emit: Vec<EmitType>,\n }\n@@ -636,6 +638,7 @@ impl Options {\n         let document_hidden = matches.opt_present(\"document-hidden-items\");\n         let run_check = matches.opt_present(\"check\");\n         let generate_redirect_map = matches.opt_present(\"generate-redirect-map\");\n+        let show_type_layout = matches.opt_present(\"show-type-layout\");\n \n         let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n \n@@ -695,6 +698,7 @@ impl Options {\n                 document_private,\n                 document_hidden,\n                 generate_redirect_map,\n+                show_type_layout,\n                 unstable_features: rustc_feature::UnstableFeatures::from_environment(\n                     crate_name.as_deref(),\n                 ),"}, {"sha": "666d9dfc3e9e4d27e9acd0e5731d9fe25a6093ff", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40be1d3152542470ec5955a1bd03de4e2c87053d/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40be1d3152542470ec5955a1bd03de4e2c87053d/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=40be1d3152542470ec5955a1bd03de4e2c87053d", "patch": "@@ -91,6 +91,8 @@ crate struct SharedContext<'tcx> {\n     crate include_sources: bool,\n     /// The local file sources we've emitted and their respective url-paths.\n     crate local_sources: FxHashMap<PathBuf, String>,\n+    /// Show the memory layout of types in the docs.\n+    pub(super) show_type_layout: bool,\n     /// Whether the collapsed pass ran\n     collapsed: bool,\n     /// The base-URL of the issue tracker for when an item has been tagged with\n@@ -373,6 +375,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             generate_search_filter,\n             unstable_features,\n             generate_redirect_map,\n+            show_type_layout,\n             ..\n         } = options;\n \n@@ -446,6 +449,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             all: RefCell::new(AllTypes::new()),\n             errors: receiver,\n             redirections: if generate_redirect_map { Some(Default::default()) } else { None },\n+            show_type_layout,\n         };\n \n         // Add the default themes to the `Vec` of stylepaths"}, {"sha": "f0ca24b8f0221d2c0c2c87f03d55003aaf554c6d", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 74, "deletions": 4, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/40be1d3152542470ec5955a1bd03de4e2c87053d/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40be1d3152542470ec5955a1bd03de4e2c87053d/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=40be1d3152542470ec5955a1bd03de4e2c87053d", "patch": "@@ -7,6 +7,7 @@ use rustc_hir as hir;\n use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::DefId;\n use rustc_middle::middle::stability;\n+use rustc_middle::ty::layout::LayoutError;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -830,11 +831,12 @@ fn item_typedef(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::T\n \n     document(w, cx, it, None);\n \n+    let def_id = it.def_id.expect_real();\n     // Render any items associated directly to this alias, as otherwise they\n     // won't be visible anywhere in the docs. It would be nice to also show\n     // associated items from the aliased type (see discussion in #32077), but\n     // we need #14072 to make sense of the generics.\n-    render_assoc_items(w, cx, it, it.def_id.expect_real(), AssocItemRender::All)\n+    render_assoc_items(w, cx, it, def_id, AssocItemRender::All);\n }\n \n fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Union) {\n@@ -846,6 +848,7 @@ fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Uni\n     });\n \n     document(w, cx, it, None);\n+\n     let mut fields = s\n         .fields\n         .iter()\n@@ -880,7 +883,9 @@ fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Uni\n             document(w, cx, field, Some(it));\n         }\n     }\n-    render_assoc_items(w, cx, it, it.def_id.expect_real(), AssocItemRender::All)\n+    let def_id = it.def_id.expect_real();\n+    render_assoc_items(w, cx, it, def_id, AssocItemRender::All);\n+    document_type_layout(w, cx, def_id);\n }\n \n fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum) {\n@@ -940,6 +945,7 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n     });\n \n     document(w, cx, it, None);\n+\n     if !e.variants.is_empty() {\n         write!(\n             w,\n@@ -1014,7 +1020,9 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n             render_stability_since(w, variant, it, cx.tcx());\n         }\n     }\n-    render_assoc_items(w, cx, it, it.def_id.expect_real(), AssocItemRender::All)\n+    let def_id = it.def_id.expect_real();\n+    render_assoc_items(w, cx, it, def_id, AssocItemRender::All);\n+    document_type_layout(w, cx, def_id);\n }\n \n fn item_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Macro) {\n@@ -1114,6 +1122,7 @@ fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n     });\n \n     document(w, cx, it, None);\n+\n     let mut fields = s\n         .fields\n         .iter()\n@@ -1152,7 +1161,9 @@ fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n             }\n         }\n     }\n-    render_assoc_items(w, cx, it, it.def_id.expect_real(), AssocItemRender::All)\n+    let def_id = it.def_id.expect_real();\n+    render_assoc_items(w, cx, it, def_id, AssocItemRender::All);\n+    document_type_layout(w, cx, def_id);\n }\n \n fn item_static(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Static) {\n@@ -1522,3 +1533,62 @@ fn document_non_exhaustive(w: &mut Buffer, item: &clean::Item) {\n         w.write_str(\"</div></details>\");\n     }\n }\n+\n+fn document_type_layout(w: &mut Buffer, cx: &Context<'_>, ty_def_id: DefId) {\n+    if !cx.shared.show_type_layout {\n+        return;\n+    }\n+\n+    writeln!(w, \"<h2 class=\\\"small-section-header\\\">Layout</h2>\");\n+    writeln!(w, \"<div class=\\\"docblock\\\">\");\n+\n+    let tcx = cx.tcx();\n+    let param_env = tcx.param_env(ty_def_id);\n+    let ty = tcx.type_of(ty_def_id);\n+    match tcx.layout_of(param_env.and(ty)) {\n+        Ok(ty_layout) => {\n+            writeln!(\n+                w,\n+                \"<div class=\\\"warning\\\"><p><strong>Note:</strong> Most layout information is \\\n+                 completely unstable and may be different between compiler versions and platforms. \\\n+                 The only exception is types with certain <code>repr(...)</code> attributes. \\\n+                 Please see the Rust Reference\u2019s \\\n+                 <a href=\\\"https://doc.rust-lang.org/reference/type-layout.html\\\">\u201cType Layout\u201d</a> \\\n+                 chapter for details on type layout guarantees.</p></div>\"\n+            );\n+            if ty_layout.layout.abi.is_unsized() {\n+                writeln!(w, \"<p><strong>Size:</strong> (unsized)</p>\");\n+            } else {\n+                let bytes = ty_layout.layout.size.bytes();\n+                writeln!(\n+                    w,\n+                    \"<p><strong>Size:</strong> {size} byte{pl}</p>\",\n+                    size = bytes,\n+                    pl = if bytes == 1 { \"\" } else { \"s\" },\n+                );\n+            }\n+        }\n+        // This kind of layout error can occur with valid code, e.g. if you try to\n+        // get the layout of a generic type such as `Vec<T>`.\n+        Err(LayoutError::Unknown(_)) => {\n+            writeln!(\n+                w,\n+                \"<p><strong>Note:</strong> Unable to compute type layout, \\\n+                 possibly due to this type having generic parameters. \\\n+                 Layout can only be computed for concrete, fully-instantiated types.</p>\"\n+            );\n+        }\n+        // This kind of error probably can't happen with valid code, but we don't\n+        // want to panic and prevent the docs from building, so we just let the\n+        // user know that we couldn't compute the layout.\n+        Err(LayoutError::SizeOverflow(_)) => {\n+            writeln!(\n+                w,\n+                \"<p><strong>Note:</strong> Encountered an error during type layout; \\\n+                 the type was too big.</p>\"\n+            );\n+        }\n+    }\n+\n+    writeln!(w, \"</div>\");\n+}"}, {"sha": "5ede3780e87ae8cbe50dec1bab5eaa14786d98e6", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40be1d3152542470ec5955a1bd03de4e2c87053d/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40be1d3152542470ec5955a1bd03de4e2c87053d/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=40be1d3152542470ec5955a1bd03de4e2c87053d", "patch": "@@ -594,6 +594,9 @@ fn opts() -> Vec<RustcOptGroup> {\n             )\n         }),\n         unstable(\"no-run\", |o| o.optflag(\"\", \"no-run\", \"Compile doctests without running them\")),\n+        unstable(\"show-type-layout\", |o| {\n+            o.optflag(\"\", \"show-type-layout\", \"Include the memory layout of types in the docs\")\n+        }),\n     ]\n }\n "}, {"sha": "a01fbd229508b1331627fb9f896f20e6ae9437b0", "filename": "src/test/rustdoc/type-layout-flag-required.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40be1d3152542470ec5955a1bd03de4e2c87053d/src%2Ftest%2Frustdoc%2Ftype-layout-flag-required.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40be1d3152542470ec5955a1bd03de4e2c87053d/src%2Ftest%2Frustdoc%2Ftype-layout-flag-required.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftype-layout-flag-required.rs?ref=40be1d3152542470ec5955a1bd03de4e2c87053d", "patch": "@@ -0,0 +1,4 @@\n+// Tests that `--show-type-layout` is required in order to show layout info.\n+\n+// @!has type_layout_flag_required/struct.Foo.html 'Size: '\n+pub struct Foo(usize);"}, {"sha": "272911de6815b663ec443b8ae67543c7734c4731", "filename": "src/test/rustdoc/type-layout.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/40be1d3152542470ec5955a1bd03de4e2c87053d/src%2Ftest%2Frustdoc%2Ftype-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40be1d3152542470ec5955a1bd03de4e2c87053d/src%2Ftest%2Frustdoc%2Ftype-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftype-layout.rs?ref=40be1d3152542470ec5955a1bd03de4e2c87053d", "patch": "@@ -0,0 +1,54 @@\n+// compile-flags: --show-type-layout -Z unstable-options\n+\n+// @has type_layout/struct.Foo.html 'Size: '\n+// @has - ' bytes'\n+pub struct Foo {\n+    pub a: usize,\n+    b: Vec<String>,\n+}\n+\n+// @has type_layout/enum.Bar.html 'Size: '\n+// @has - ' bytes'\n+pub enum Bar<'a> {\n+    A(String),\n+    B(&'a str, (std::collections::HashMap<String, usize>, Foo)),\n+}\n+\n+// @has type_layout/union.Baz.html 'Size: '\n+// @has - ' bytes'\n+pub union Baz {\n+    a: &'static str,\n+    b: usize,\n+    c: &'static [u8],\n+}\n+\n+// @has type_layout/struct.X.html 'Size: '\n+// @has - ' bytes'\n+pub struct X(usize);\n+\n+// @has type_layout/struct.Y.html 'Size: '\n+// @has - '1 byte'\n+// @!has - ' bytes'\n+pub struct Y(u8);\n+\n+// @has type_layout/struct.Z.html 'Size: '\n+// @has - '0 bytes'\n+pub struct Z;\n+\n+// We can't compute layout for generic types.\n+// @has type_layout/struct.Generic.html 'Unable to compute type layout, possibly due to this type having generic parameters'\n+// @!has - 'Size: '\n+pub struct Generic<T>(T);\n+\n+// We *can*, however, compute layout for types that are only generic over lifetimes,\n+// because lifetimes are a type-system construct.\n+// @has type_layout/struct.GenericLifetimes.html 'Size: '\n+// @has - ' bytes'\n+pub struct GenericLifetimes<'a>(&'a str);\n+\n+// @has type_layout/struct.Unsized.html 'Size: '\n+// @has - '(unsized)'\n+pub struct Unsized([u8]);\n+\n+// @!has type_layout/trait.MyTrait.html 'Size: '\n+pub trait MyTrait {}"}]}