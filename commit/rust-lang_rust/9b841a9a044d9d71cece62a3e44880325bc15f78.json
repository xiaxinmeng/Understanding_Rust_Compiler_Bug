{"sha": "9b841a9a044d9d71cece62a3e44880325bc15f78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliODQxYTlhMDQ0ZDlkNzFjZWNlNjJhM2U0NDg4MDMyNWJjMTVmNzg=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-08T18:06:17Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-31T19:03:47Z"}, "message": "Expand binding patterns.", "tree": {"sha": "77f4bbfc18f8a678f8074d97683e6eb4a46066b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77f4bbfc18f8a678f8074d97683e6eb4a46066b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b841a9a044d9d71cece62a3e44880325bc15f78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b841a9a044d9d71cece62a3e44880325bc15f78", "html_url": "https://github.com/rust-lang/rust/commit/9b841a9a044d9d71cece62a3e44880325bc15f78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b841a9a044d9d71cece62a3e44880325bc15f78/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7239e5ab4a3b88e9e79cc60d80eaf7300411e5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7239e5ab4a3b88e9e79cc60d80eaf7300411e5a", "html_url": "https://github.com/rust-lang/rust/commit/d7239e5ab4a3b88e9e79cc60d80eaf7300411e5a"}], "stats": {"total": 116, "additions": 110, "deletions": 6}, "files": [{"sha": "d98fb0867f40e96276d5cda4f9207c6d7bf00617", "filename": "crates/hir_ty/src/diagnostics/pattern.rs", "status": "modified", "additions": 96, "deletions": 2, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/9b841a9a044d9d71cece62a3e44880325bc15f78/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b841a9a044d9d71cece62a3e44880325bc15f78/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern.rs?ref=9b841a9a044d9d71cece62a3e44880325bc15f78", "patch": "@@ -239,6 +239,101 @@ impl<'a> PatCtxt<'a> {\n     }\n }\n \n+pub(crate) trait PatternFoldable: Sized {\n+    fn fold_with<F: PatternFolder>(&self, folder: &mut F) -> Self {\n+        self.super_fold_with(folder)\n+    }\n+\n+    fn super_fold_with<F: PatternFolder>(&self, folder: &mut F) -> Self;\n+}\n+\n+pub(crate) trait PatternFolder: Sized {\n+    fn fold_pattern(&mut self, pattern: &Pat) -> Pat {\n+        pattern.super_fold_with(self)\n+    }\n+\n+    fn fold_pattern_kind(&mut self, kind: &PatKind) -> PatKind {\n+        kind.super_fold_with(self)\n+    }\n+}\n+\n+impl<T: PatternFoldable> PatternFoldable for Box<T> {\n+    fn super_fold_with<F: PatternFolder>(&self, folder: &mut F) -> Self {\n+        let content: T = (**self).fold_with(folder);\n+        Box::new(content)\n+    }\n+}\n+\n+impl<T: PatternFoldable> PatternFoldable for Vec<T> {\n+    fn super_fold_with<F: PatternFolder>(&self, folder: &mut F) -> Self {\n+        self.iter().map(|t| t.fold_with(folder)).collect()\n+    }\n+}\n+\n+impl<T: PatternFoldable> PatternFoldable for Option<T> {\n+    fn super_fold_with<F: PatternFolder>(&self, folder: &mut F) -> Self {\n+        self.as_ref().map(|t| t.fold_with(folder))\n+    }\n+}\n+\n+macro_rules! clone_impls {\n+    ($($ty:ty),+) => {\n+        $(\n+            impl PatternFoldable for $ty {\n+                fn super_fold_with<F: PatternFolder>(&self, _: &mut F) -> Self {\n+                    Clone::clone(self)\n+                }\n+            }\n+        )+\n+    }\n+}\n+\n+clone_impls! { LocalFieldId, Ty, Substitution, EnumVariantId }\n+\n+impl PatternFoldable for FieldPat {\n+    fn super_fold_with<F: PatternFolder>(&self, folder: &mut F) -> Self {\n+        FieldPat { field: self.field.fold_with(folder), pattern: self.pattern.fold_with(folder) }\n+    }\n+}\n+\n+impl PatternFoldable for Pat {\n+    fn fold_with<F: PatternFolder>(&self, folder: &mut F) -> Self {\n+        folder.fold_pattern(self)\n+    }\n+\n+    fn super_fold_with<F: PatternFolder>(&self, folder: &mut F) -> Self {\n+        Pat { ty: self.ty.fold_with(folder), kind: self.kind.fold_with(folder) }\n+    }\n+}\n+\n+impl PatternFoldable for PatKind {\n+    fn fold_with<F: PatternFolder>(&self, folder: &mut F) -> Self {\n+        folder.fold_pattern_kind(self)\n+    }\n+\n+    fn super_fold_with<F: PatternFolder>(&self, folder: &mut F) -> Self {\n+        match self {\n+            PatKind::Wild => PatKind::Wild,\n+            PatKind::Binding { subpattern } => {\n+                PatKind::Binding { subpattern: subpattern.fold_with(folder) }\n+            }\n+            PatKind::Variant { substs, enum_variant, subpatterns } => PatKind::Variant {\n+                substs: substs.fold_with(folder),\n+                enum_variant: enum_variant.fold_with(folder),\n+                subpatterns: subpatterns.fold_with(folder),\n+            },\n+            PatKind::Leaf { subpatterns } => {\n+                PatKind::Leaf { subpatterns: subpatterns.fold_with(folder) }\n+            }\n+            PatKind::Deref { subpattern } => {\n+                PatKind::Deref { subpattern: subpattern.fold_with(folder) }\n+            }\n+            &PatKind::LiteralBool { value } => PatKind::LiteralBool { value },\n+            PatKind::Or { pats } => PatKind::Or { pats: pats.fold_with(folder) },\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::diagnostics::tests::check_diagnostics;\n@@ -410,9 +505,8 @@ fn main() {\n         _x @ true => {}\n         false     => {}\n     }\n-    //FIXME: false negative. \n-    // Binding patterns should be expanded in `usefulness::expand_pattern()`\n     match true { _x @ true => {} }\n+        //^^^^ Missing match arm\n }\n \"#,\n         );"}, {"sha": "ef2be7530351dca6e959382b80daaf36890f7c21", "filename": "crates/hir_ty/src/diagnostics/pattern/usefulness.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9b841a9a044d9d71cece62a3e44880325bc15f78/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b841a9a044d9d71cece62a3e44880325bc15f78/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern%2Fusefulness.rs?ref=9b841a9a044d9d71cece62a3e44880325bc15f78", "patch": "@@ -9,11 +9,11 @@ use once_cell::unsync::OnceCell;\n use rustc_hash::FxHashMap;\n use smallvec::{smallvec, SmallVec};\n \n-use crate::{db::HirDatabase, InferenceResult, Ty};\n+use crate::{db::HirDatabase, InferenceResult, Interner, Ty};\n \n use super::{\n     deconstruct_pat::{Constructor, Fields, SplitWildcard},\n-    Pat, PatId, PatKind,\n+    Pat, PatId, PatKind, PatternFoldable, PatternFolder,\n };\n \n use self::{\n@@ -75,8 +75,18 @@ pub(super) struct PatCtxt<'a> {\n }\n \n pub(crate) fn expand_pattern(pat: Pat) -> Pat {\n-    // TODO: LiteralExpander, it is about string literal patterns\n-    pat\n+    LiteralExpander.fold_pattern(&pat)\n+}\n+\n+struct LiteralExpander;\n+\n+impl PatternFolder for LiteralExpander {\n+    fn fold_pattern(&mut self, pat: &Pat) -> Pat {\n+        match (pat.ty.kind(&Interner), pat.kind.as_ref()) {\n+            (_, PatKind::Binding { subpattern: Some(s), .. }) => s.fold_with(self),\n+            _ => pat.super_fold_with(self),\n+        }\n+    }\n }\n \n impl Pat {"}]}