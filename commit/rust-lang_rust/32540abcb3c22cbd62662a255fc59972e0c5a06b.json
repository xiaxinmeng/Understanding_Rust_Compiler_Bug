{"sha": "32540abcb3c22cbd62662a255fc59972e0c5a06b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNTQwYWJjYjNjMjJjYmQ2MjY2MmEyNTVmYzU5OTcyZTBjNWEwNmI=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-01-10T19:56:58Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-01-10T20:14:19Z"}, "message": "Add AccessMode to decls", "tree": {"sha": "75fa22959176671a60835e25c90b399ccba48a88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75fa22959176671a60835e25c90b399ccba48a88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32540abcb3c22cbd62662a255fc59972e0c5a06b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32540abcb3c22cbd62662a255fc59972e0c5a06b", "html_url": "https://github.com/rust-lang/rust/commit/32540abcb3c22cbd62662a255fc59972e0c5a06b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32540abcb3c22cbd62662a255fc59972e0c5a06b/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49fd6a5228bfb2200611e6a9a9b24d01368bb279", "url": "https://api.github.com/repos/rust-lang/rust/commits/49fd6a5228bfb2200611e6a9a9b24d01368bb279", "html_url": "https://github.com/rust-lang/rust/commit/49fd6a5228bfb2200611e6a9a9b24d01368bb279"}], "stats": {"total": 65, "additions": 57, "deletions": 8}, "files": [{"sha": "4e52e0e7bfb2ba7be9a9016d9f91169981ab4fc1", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 57, "deletions": 8, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/32540abcb3c22cbd62662a255fc59972e0c5a06b/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32540abcb3c22cbd62662a255fc59972e0c5a06b/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=32540abcb3c22cbd62662a255fc59972e0c5a06b", "patch": "@@ -19,8 +19,9 @@ use once_cell::unsync::Lazy;\n use ra_db::{SourceDatabase, SourceDatabaseExt};\n use ra_prof::profile;\n use ra_syntax::{\n-    algo::find_node_at_offset, ast, match_ast, AstNode, SourceFile, SyntaxKind, SyntaxNode,\n-    TextUnit, TokenAtOffset,\n+    algo::find_node_at_offset,\n+    ast::{self, NameOwner},\n+    match_ast, AstNode, SourceFile, SyntaxKind, SyntaxNode, TextRange, TextUnit, TokenAtOffset,\n };\n \n use crate::{\n@@ -149,7 +150,13 @@ pub(crate) fn find_all_refs(\n         }\n     };\n \n-    let declaration = Declaration { nav: declaration, kind: ReferenceKind::Other, access: None };\n+    let decl_range = declaration.range();\n+\n+    let declaration = Declaration {\n+        nav: declaration,\n+        kind: ReferenceKind::Other,\n+        access: decl_access(&def.kind, &name, &syntax, decl_range),\n+    };\n \n     let references = process_definition(db, def, name, search_scope)\n         .into_iter()\n@@ -218,12 +225,11 @@ fn process_definition(\n                         } else {\n                             ReferenceKind::Other\n                         };\n-                        let access = access_mode(d.kind, &name_ref);\n \n                         refs.push(Reference {\n                             file_range: FileRange { file_id, range },\n                             kind,\n-                            access,\n+                            access: reference_access(&d.kind, &name_ref),\n                         });\n                     }\n                 }\n@@ -233,7 +239,34 @@ fn process_definition(\n     refs\n }\n \n-fn access_mode(kind: NameKind, name_ref: &ast::NameRef) -> Option<ReferenceAccess> {\n+fn decl_access(\n+    kind: &NameKind,\n+    name: &str,\n+    syntax: &SyntaxNode,\n+    range: TextRange,\n+) -> Option<ReferenceAccess> {\n+    match kind {\n+        NameKind::Local(_) | NameKind::Field(_) => {}\n+        _ => return None,\n+    };\n+\n+    let stmt = find_node_at_offset::<ast::LetStmt>(syntax, range.start())?;\n+    if let Some(_) = stmt.initializer() {\n+        let pat = stmt.pat()?;\n+        match pat {\n+            ast::Pat::BindPat(it) => {\n+                if it.name()?.text().as_str() == name {\n+                    return Some(ReferenceAccess::Write);\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n+\n+    None\n+}\n+\n+fn reference_access(kind: &NameKind, name_ref: &ast::NameRef) -> Option<ReferenceAccess> {\n     // Only Locals and Fields have accesses for now.\n     match kind {\n         NameKind::Local(_) | NameKind::Field(_) => {}\n@@ -311,7 +344,7 @@ mod tests {\n         let refs = get_all_refs(code);\n         check_result(\n             refs,\n-            \"i BIND_PAT FileId(1) [33; 34) Other\",\n+            \"i BIND_PAT FileId(1) [33; 34) Other Write\",\n             &[\n                 \"FileId(1) [67; 68) Other Write\",\n                 \"FileId(1) [71; 72) Other Read\",\n@@ -569,7 +602,7 @@ mod tests {\n         let refs = get_all_refs(code);\n         check_result(\n             refs,\n-            \"i BIND_PAT FileId(1) [36; 37) Other\",\n+            \"i BIND_PAT FileId(1) [36; 37) Other Write\",\n             &[\"FileId(1) [55; 56) Other Write\", \"FileId(1) [59; 60) Other Read\"],\n         );\n     }\n@@ -594,6 +627,22 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn test_basic_highlight_decl_no_write() {\n+        let code = r#\"\n+        fn foo() {\n+            let i<|>;\n+            i = 1;\n+        }\"#;\n+\n+        let refs = get_all_refs(code);\n+        check_result(\n+            refs,\n+            \"i BIND_PAT FileId(1) [36; 37) Other\",\n+            &[\"FileId(1) [51; 52) Other Write\"],\n+        );\n+    }\n+\n     fn get_all_refs(text: &str) -> ReferenceSearchResult {\n         let (analysis, position) = single_file_with_position(text);\n         analysis.find_all_refs(position, None).unwrap().unwrap()"}]}