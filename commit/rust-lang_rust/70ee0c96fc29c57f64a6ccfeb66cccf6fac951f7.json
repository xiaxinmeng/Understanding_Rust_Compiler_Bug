{"sha": "70ee0c96fc29c57f64a6ccfeb66cccf6fac951f7", "node_id": "C_kwDOAAsO6NoAKDcwZWUwYzk2ZmMyOWM1N2Y2NGE2Y2NmZWI2NmNjY2Y2ZmFjOTUxZjc", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-03-31T08:02:31Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-04-05T06:01:03Z"}, "message": "macros: add `#[no_arg]` to skip `set_arg` call\n\nA call to `set_arg` is generated for every field of a\n`SessionDiagnostic` struct without attributes, but not all types support\nbeing an argument, so `#[no_arg]` is introduced to skip these fields.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "01a686fcd042f264200076fb73abc167b90bbc3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01a686fcd042f264200076fb73abc167b90bbc3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70ee0c96fc29c57f64a6ccfeb66cccf6fac951f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70ee0c96fc29c57f64a6ccfeb66cccf6fac951f7", "html_url": "https://github.com/rust-lang/rust/commit/70ee0c96fc29c57f64a6ccfeb66cccf6fac951f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70ee0c96fc29c57f64a6ccfeb66cccf6fac951f7/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8100541d5496e087ca214df4e599a67a91f25983", "url": "https://api.github.com/repos/rust-lang/rust/commits/8100541d5496e087ca214df4e599a67a91f25983", "html_url": "https://github.com/rust-lang/rust/commit/8100541d5496e087ca214df4e599a67a91f25983"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "67b56d2e9db44c8cc3cf80aa33dcddceb43df1b5", "filename": "compiler/rustc_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70ee0c96fc29c57f64a6ccfeb66cccf6fac951f7/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ee0c96fc29c57f64a6ccfeb66cccf6fac951f7/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Flib.rs?ref=70ee0c96fc29c57f64a6ccfeb66cccf6fac951f7", "patch": "@@ -67,6 +67,7 @@ decl_derive!(\n         warning,\n         error,\n         // field attributes\n+        skip_arg,\n         primary_span,\n         label,\n         suggestion,"}, {"sha": "fec9a820d0f4850500ea5429d9faeec54fa9a2c1", "filename": "compiler/rustc_macros/src/session_diagnostic.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/70ee0c96fc29c57f64a6ccfeb66cccf6fac951f7/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ee0c96fc29c57f64a6ccfeb66cccf6fac951f7/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs?ref=70ee0c96fc29c57f64a6ccfeb66cccf6fac951f7", "patch": "@@ -216,7 +216,12 @@ impl<'a> SessionDiagnosticDerive<'a> {\n                     if field.attrs.is_empty() {\n                         let diag = &builder.diag;\n                         let ident = field_binding.ast().ident.as_ref().unwrap();\n-                        quote! { #diag.set_arg(stringify!(#ident), #field_binding.into_diagnostic_arg()); }\n+                        quote! {\n+                            #diag.set_arg(\n+                                stringify!(#ident),\n+                                #field_binding.into_diagnostic_arg()\n+                            );\n+                        }\n                     } else {\n                         quote! {}\n                     }\n@@ -566,6 +571,11 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n         let meta = attr.parse_meta()?;\n         match meta {\n             syn::Meta::Path(_) => match name {\n+                \"skip_arg\" => {\n+                    // Don't need to do anything - by virtue of the attribute existing, the\n+                    // `set_arg` call will not be generated.\n+                    Ok(quote! {})\n+                }\n                 \"primary_span\" => {\n                     if type_matches_path(&info.ty, &[\"rustc_span\", \"Span\"]) {\n                         return Ok(quote! {"}, {"sha": "96d78c2d00e8d4882829dc9986170c83e676dd20", "filename": "src/test/ui-fulldeps/session-derive-errors.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/70ee0c96fc29c57f64a6ccfeb66cccf6fac951f7/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ee0c96fc29c57f64a6ccfeb66cccf6fac951f7/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.rs?ref=70ee0c96fc29c57f64a6ccfeb66cccf6fac951f7", "patch": "@@ -311,3 +311,23 @@ struct ErrorWithLifetime<'a> {\n     span: Span,\n     name: &'a str,\n }\n+\n+#[derive(SessionDiagnostic)]\n+//~^ ERROR no method named `into_diagnostic_arg` found for struct `Hello` in the current scope\n+#[error(code = \"E0123\", slug = \"foo\")]\n+struct ArgFieldWithoutSkip {\n+    #[primary_span]\n+    span: Span,\n+    other: Hello,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(code = \"E0123\", slug = \"foo\")]\n+struct ArgFieldWithSkip {\n+    #[primary_span]\n+    span: Span,\n+    // `Hello` does not implement `IntoDiagnosticArg` so this would result in an error if\n+    // not for `#[skip_arg]`.\n+    #[skip_arg]\n+    other: Hello,\n+}"}, {"sha": "21bf8e060baa60ad3a14f832ea76fc7e87d48059", "filename": "src/test/ui-fulldeps/session-derive-errors.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/70ee0c96fc29c57f64a6ccfeb66cccf6fac951f7/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70ee0c96fc29c57f64a6ccfeb66cccf6fac951f7/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr?ref=70ee0c96fc29c57f64a6ccfeb66cccf6fac951f7", "patch": "@@ -274,5 +274,17 @@ error: cannot find attribute `nonsense` in this scope\n LL |     #[nonsense]\n    |       ^^^^^^^^\n \n-error: aborting due to 34 previous errors\n+error[E0599]: no method named `into_diagnostic_arg` found for struct `Hello` in the current scope\n+  --> $DIR/session-derive-errors.rs:315:10\n+   |\n+LL | struct Hello {}\n+   | ------------ method `into_diagnostic_arg` not found for this\n+...\n+LL | #[derive(SessionDiagnostic)]\n+   |          ^^^^^^^^^^^^^^^^^ method not found in `Hello`\n+   |\n+   = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 35 previous errors\n \n+For more information about this error, try `rustc --explain E0599`."}]}