{"sha": "d863021521c57cec83da08f361ba13a3c3a2483a", "node_id": "C_kwDOAAsO6NoAKGQ4NjMwMjE1MjFjNTdjZWM4M2RhMDhmMzYxYmExM2EzYzNhMjQ4M2E", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-11-08T15:55:51Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-11-08T15:55:51Z"}, "message": "fmt", "tree": {"sha": "da1ca47e7dcc3d11de4f7b5ae965aec00cd34939", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da1ca47e7dcc3d11de4f7b5ae965aec00cd34939"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d863021521c57cec83da08f361ba13a3c3a2483a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmGJSIcACgkQAn35M4hi\nrd345w/8COR7LETrtNqDfTcrMfgomJJCHxTbkXicSgr54P4I2gRdS53SIUOLKlun\n1Yhs6gDJfIkMUbRCfgoFRvOnN0KiLC4IYT65Vo6uohj9NZNBqZMTkTDhZelGW0ma\nPIWwUkZULmPLXvRNcqwX3UrB0stolHbgboswucRjHi+J7yHe+nS3UeqgG60RIvfU\nGZcNVfwdYqRbrzZMoLkAeouhQ6WGezu1ssuKiYUpTtUyxJoRoDUo5Lc3LC9AOICQ\n+gkNNH1eaPmv0lOe4TP6GTBrhDtK6ddPqU8AYLN3ihjpupM79monvP+BKdt9At7v\nRrQyk1v1cruVt62+AkizyF1ghogWCpqMSLUIJUukIFEV7mSsDsmDhQkY3lnMivu8\nx5EkoYo+ejxS+8tzvWV0xFY/L3eQZdgi0/OnR+xtiOl9Oj+13ngOUacD1r6hcLon\nYQzLce0fTzLF2l1DDTIdCXwuTHebUPiA8BC3Y0PkHVdtZKRquB1ovq8K94060r/y\n5p8i5N5aKhVz9J2eJCudL7iALV+lzq2qk6T4TfLDDpToaaxX06jdjBBeECWARTDk\nYymc3euoUXb4AnD7pSJi+vjZvNALEWy0mEuyncIIAC4NWSOW653h1D+4M1a5C0Dj\noJBaJU8hf+ppeQ6gsr92XbtaJsH3We0pbyHDq7aLGVNO693YATQ=\n=i8QC\n-----END PGP SIGNATURE-----", "payload": "tree da1ca47e7dcc3d11de4f7b5ae965aec00cd34939\nparent f1126f1272d21a5bee1694b5e9bb5f3cf19629d1\nauthor Deadbeef <ent3rm4n@gmail.com> 1636386951 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1636386951 +0800\n\nfmt\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d863021521c57cec83da08f361ba13a3c3a2483a", "html_url": "https://github.com/rust-lang/rust/commit/d863021521c57cec83da08f361ba13a3c3a2483a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d863021521c57cec83da08f361ba13a3c3a2483a/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1", "html_url": "https://github.com/rust-lang/rust/commit/f1126f1272d21a5bee1694b5e9bb5f3cf19629d1"}], "stats": {"total": 60, "additions": 18, "deletions": 42}, "files": [{"sha": "152a395c871be44a6008ba8cb46bd81c9094548a", "filename": "compiler/rustc_infer/src/traits/engine.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d863021521c57cec83da08f361ba13a3c3a2483a/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d863021521c57cec83da08f361ba13a3c3a2483a/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs?ref=d863021521c57cec83da08f361ba13a3c3a2483a", "patch": "@@ -46,10 +46,7 @@ pub trait TraitEngine<'tcx>: 'tcx {\n         obligation: PredicateObligation<'tcx>,\n     );\n \n-    fn select_all_or_error(\n-        &mut self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n-    ) -> Vec<FulfillmentError<'tcx>>;\n+    fn select_all_or_error(&mut self, infcx: &InferCtxt<'_, 'tcx>) -> Vec<FulfillmentError<'tcx>>;\n \n     fn select_all_with_constness_or_error(\n         &mut self,\n@@ -59,10 +56,8 @@ pub trait TraitEngine<'tcx>: 'tcx {\n         self.select_all_or_error(infcx)\n     }\n \n-    fn select_where_possible(\n-        &mut self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n-    ) -> Vec<FulfillmentError<'tcx>>;\n+    fn select_where_possible(&mut self, infcx: &InferCtxt<'_, 'tcx>)\n+    -> Vec<FulfillmentError<'tcx>>;\n \n     // FIXME(fee1-dead) this should not provide a default body for chalk as chalk should be updated\n     fn select_with_constness_where_possible("}, {"sha": "54f7b91080dd9fb0a9cae74dea7ecd43517972a5", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d863021521c57cec83da08f361ba13a3c3a2483a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d863021521c57cec83da08f361ba13a3c3a2483a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=d863021521c57cec83da08f361ba13a3c3a2483a", "patch": "@@ -188,7 +188,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n             let mut fulfill = FulfillmentContext::new();\n             fulfill.register_bound(&infcx, full_env, ty, trait_did, ObligationCause::dummy());\n             let errors = fulfill.select_all_or_error(&infcx);\n-            \n+\n             if !errors.is_empty() {\n                 panic!(\"Unable to fulfill trait {:?} for '{:?}': {:?}\", trait_did, ty, errors);\n             }"}, {"sha": "2ccb25349173ff300d88e636ad59848fcad44e92", "filename": "compiler/rustc_trait_selection/src/traits/chalk_fulfill.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d863021521c57cec83da08f361ba13a3c3a2483a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d863021521c57cec83da08f361ba13a3c3a2483a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs?ref=d863021521c57cec83da08f361ba13a3c3a2483a", "patch": "@@ -49,10 +49,7 @@ impl TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         self.obligations.insert(obligation);\n     }\n \n-    fn select_all_or_error(\n-        &mut self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n-    ) -> Vec<FulfillmentError<'tcx>> {\n+    fn select_all_or_error(&mut self, infcx: &InferCtxt<'_, 'tcx>) -> Vec<FulfillmentError<'tcx>> {\n         {\n             let errors = self.select_where_possible(infcx);\n \n@@ -62,8 +59,7 @@ impl TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         }\n \n         // any remaining obligations are errors\n-        self\n-            .obligations\n+        self.obligations\n             .iter()\n             .map(|obligation| FulfillmentError {\n                 obligation: obligation.clone(),"}, {"sha": "e121837c987ae9b694ea1b45281abca63da8e8c7", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d863021521c57cec83da08f361ba13a3c3a2483a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d863021521c57cec83da08f361ba13a3c3a2483a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=d863021521c57cec83da08f361ba13a3c3a2483a", "patch": "@@ -126,10 +126,7 @@ impl<'a, 'tcx> FulfillmentContext<'tcx> {\n     }\n \n     /// Attempts to select obligations using `selcx`.\n-    fn select(\n-        &mut self,\n-        selcx: &mut SelectionContext<'a, 'tcx>,\n-    ) -> Vec<FulfillmentError<'tcx>> {\n+    fn select(&mut self, selcx: &mut SelectionContext<'a, 'tcx>) -> Vec<FulfillmentError<'tcx>> {\n         let span = debug_span!(\"select\", obligation_forest_size = ?self.predicates.len());\n         let _enter = span.enter();\n \n@@ -223,23 +220,15 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n             .register_obligation(PendingPredicateObligation { obligation, stalled_on: vec![] });\n     }\n \n-    fn select_all_or_error(\n-        &mut self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n-    ) -> Vec<FulfillmentError<'tcx>> {\n+    fn select_all_or_error(&mut self, infcx: &InferCtxt<'_, 'tcx>) -> Vec<FulfillmentError<'tcx>> {\n         {\n             let errors = self.select_where_possible(infcx);\n             if !errors.is_empty() {\n                 return errors;\n             }\n         }\n \n-        self\n-            .predicates\n-            .to_errors(CodeAmbiguity)\n-            .into_iter()\n-            .map(to_fulfillment_error)\n-            .collect()\n+        self.predicates.to_errors(CodeAmbiguity).into_iter().map(to_fulfillment_error).collect()\n     }\n \n     fn select_all_with_constness_or_error(\n@@ -254,12 +243,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n             }\n         }\n \n-        self\n-            .predicates\n-            .to_errors(CodeAmbiguity)\n-            .into_iter()\n-            .map(to_fulfillment_error)\n-            .collect()\n+        self.predicates.to_errors(CodeAmbiguity).into_iter().map(to_fulfillment_error).collect()\n     }\n \n     fn select_where_possible("}, {"sha": "0a85676f4315e36a88893a759201e899d87b0754", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d863021521c57cec83da08f361ba13a3c3a2483a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d863021521c57cec83da08f361ba13a3c3a2483a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs?ref=d863021521c57cec83da08f361ba13a3c3a2483a", "patch": "@@ -78,7 +78,7 @@ fn scrape_region_constraints<'tcx, Op: super::TypeOp<'tcx, Output = R>, R>(\n     debug_assert!(obligations.iter().all(|o| o.cause.body_id == dummy_body_id));\n     fulfill_cx.register_predicate_obligations(infcx, obligations);\n     let errors = fulfill_cx.select_all_or_error(infcx);\n-    if !errors.is_empty()  {\n+    if !errors.is_empty() {\n         infcx.tcx.sess.diagnostic().delay_span_bug(\n             DUMMY_SP,\n             &format!(\"errors selecting obligation during MIR typeck: {:?}\", errors),"}, {"sha": "f0a77cb39a62273b1fb3a18e9faa091da3b20840", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d863021521c57cec83da08f361ba13a3c3a2483a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d863021521c57cec83da08f361ba13a3c3a2483a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=d863021521c57cec83da08f361ba13a3c3a2483a", "patch": "@@ -664,7 +664,7 @@ fn check_opaque_meets_bounds<'tcx>(\n         // Check that all obligations are satisfied by the implementation's\n         // version.\n         let errors = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx);\n-        if !errors.is_empty()  {\n+        if !errors.is_empty() {\n             infcx.report_fulfillment_errors(&errors, None, false);\n         }\n "}, {"sha": "3eadb3f2363d2cdf7645292b1f1a3c310b41aaa1", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d863021521c57cec83da08f361ba13a3c3a2483a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d863021521c57cec83da08f361ba13a3c3a2483a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=d863021521c57cec83da08f361ba13a3c3a2483a", "patch": "@@ -1096,7 +1096,7 @@ crate fn compare_const_impl<'tcx>(\n         // Check that all obligations are satisfied by the implementation's\n         // version.\n         let errors = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx);\n-        if !errors.is_empty()  {\n+        if !errors.is_empty() {\n             infcx.report_fulfillment_errors(&errors, None, false);\n             return;\n         }\n@@ -1213,7 +1213,7 @@ fn compare_type_predicate_entailment<'tcx>(\n         // Check that all obligations are satisfied by the implementation's\n         // version.\n         let errors = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx);\n-        if !errors.is_empty()  {\n+        if !errors.is_empty() {\n             infcx.report_fulfillment_errors(&errors, None, false);\n             return Err(ErrorReported);\n         }\n@@ -1430,7 +1430,8 @@ pub fn check_type_bounds<'tcx>(\n \n         // Check that all obligations are satisfied by the implementation's\n         // version.\n-        let errors = inh.fulfillment_cx.borrow_mut().select_all_with_constness_or_error(&infcx, constness);\n+        let errors =\n+            inh.fulfillment_cx.borrow_mut().select_all_with_constness_or_error(&infcx, constness);\n         if !errors.is_empty() {\n             infcx.report_fulfillment_errors(&errors, None, false);\n             return Err(ErrorReported);"}, {"sha": "93b2a595259722923447a3a5de4bbdc192c8f498", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d863021521c57cec83da08f361ba13a3c3a2483a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d863021521c57cec83da08f361ba13a3c3a2483a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=d863021521c57cec83da08f361ba13a3c3a2483a", "patch": "@@ -642,7 +642,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     #[instrument(skip(self), level = \"debug\")]\n     pub(in super::super) fn select_all_obligations_or_error(&self) {\n-        let errors =self\n+        let errors = self\n             .fulfillment_cx\n             .borrow_mut()\n             .select_all_with_constness_or_error(&self, self.inh.constness);\n@@ -662,7 +662,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .fulfillment_cx\n             .borrow_mut()\n             .select_with_constness_where_possible(self, self.inh.constness);\n-        if !result.is_empty()  {\n+        if !result.is_empty() {\n             mutate_fulfillment_errors(&mut result);\n             self.report_fulfillment_errors(&result, self.inh.body_id, fallback_has_occurred);\n         }"}]}