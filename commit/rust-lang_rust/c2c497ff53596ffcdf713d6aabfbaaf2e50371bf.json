{"sha": "c2c497ff53596ffcdf713d6aabfbaaf2e50371bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYzQ5N2ZmNTM1OTZmZmNkZjcxM2Q2YWFiZmJhYWYyZTUwMzcxYmY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-06T01:30:00Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-06T01:31:57Z"}, "message": "rustc: Configure out #[test] functions when not testing", "tree": {"sha": "546c56a7c0d763b8c901681d786585f765736fe2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/546c56a7c0d763b8c901681d786585f765736fe2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2c497ff53596ffcdf713d6aabfbaaf2e50371bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2c497ff53596ffcdf713d6aabfbaaf2e50371bf", "html_url": "https://github.com/rust-lang/rust/commit/c2c497ff53596ffcdf713d6aabfbaaf2e50371bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2c497ff53596ffcdf713d6aabfbaaf2e50371bf/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2acb052cae2252e45f09a79ba48a15bb4d2bbd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2acb052cae2252e45f09a79ba48a15bb4d2bbd9", "html_url": "https://github.com/rust-lang/rust/commit/a2acb052cae2252e45f09a79ba48a15bb4d2bbd9"}], "stats": {"total": 87, "additions": 62, "deletions": 25}, "files": [{"sha": "efad512221efa85184a927c2788789f3e317eff6", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c2c497ff53596ffcdf713d6aabfbaaf2e50371bf/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c497ff53596ffcdf713d6aabfbaaf2e50371bf/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=c2c497ff53596ffcdf713d6aabfbaaf2e50371bf", "patch": "@@ -146,11 +146,9 @@ fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n     crate =\n         time(time_passes, \"configuration\",\n              bind front::config::strip_unconfigured_items(crate));\n-    if sess.get_opts().test {\n-        crate =\n-            time(time_passes, \"building test harness\",\n-                 bind front::test::modify_for_testing(sess, crate));\n-    }\n+    crate =\n+        time(time_passes, \"maybe building test harness\",\n+             bind front::test::modify_for_testing(sess, crate));\n     crate =\n         time(time_passes, \"expansion\",\n              bind syntax::ext::expand::expand_crate(sess, crate));"}, {"sha": "c7de20bb1b3fcd83661c567bb99dec85ffd7db95", "filename": "src/comp/front/config.rs", "status": "modified", "additions": 35, "deletions": 20, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c2c497ff53596ffcdf713d6aabfbaaf2e50371bf/src%2Fcomp%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c497ff53596ffcdf713d6aabfbaaf2e50371bf/src%2Fcomp%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fconfig.rs?ref=c2c497ff53596ffcdf713d6aabfbaaf2e50371bf", "patch": "@@ -4,58 +4,73 @@ import attr;\n \n export strip_unconfigured_items;\n export metas_in_cfg;\n+export strip_items;\n+\n+type in_cfg_pred = fn@([ast::attribute]) -> bool;\n+\n+type ctxt = @{\n+    in_cfg: in_cfg_pred\n+};\n \n // Support conditional compilation by transforming the AST, stripping out\n // any items that do not belong in the current configuration\n fn strip_unconfigured_items(crate: @ast::crate) -> @ast::crate {\n-    let cfg = crate.node.config;\n+    strip_items(crate) {|attrs|\n+        in_cfg(crate.node.config, attrs)\n+    }\n+}\n+\n+fn strip_items(crate: @ast::crate, in_cfg: in_cfg_pred)\n+    -> @ast::crate {\n+\n+    let ctxt = @{in_cfg: in_cfg};\n \n     let precursor =\n-        {fold_mod: bind fold_mod(cfg, _, _),\n-         fold_block: bind fold_block(cfg, _, _),\n-         fold_native_mod: bind fold_native_mod(cfg, _, _)\n+        {fold_mod: bind fold_mod(ctxt, _, _),\n+         fold_block: bind fold_block(ctxt, _, _),\n+         fold_native_mod: bind fold_native_mod(ctxt, _, _)\n             with *fold::default_ast_fold()};\n \n     let fold = fold::make_fold(precursor);\n     let res = @fold.fold_crate(*crate);\n     ret res;\n }\n \n-fn filter_item(cfg: ast::crate_cfg, &&item: @ast::item) ->\n+fn filter_item(cx: ctxt, &&item: @ast::item) ->\n    option::t<@ast::item> {\n-    if item_in_cfg(cfg, item) { option::some(item) } else { option::none }\n+    if item_in_cfg(cx, item) { option::some(item) } else { option::none }\n }\n \n-fn fold_mod(cfg: ast::crate_cfg, m: ast::_mod, fld: fold::ast_fold) ->\n+fn fold_mod(cx: ctxt, m: ast::_mod, fld: fold::ast_fold) ->\n    ast::_mod {\n-    let filter = bind filter_item(cfg, _);\n+    let filter = bind filter_item(cx, _);\n     let filtered_items = vec::filter_map(m.items, filter);\n     ret {view_items: vec::map(m.view_items, fld.fold_view_item),\n          items: vec::map(filtered_items, fld.fold_item)};\n }\n \n-fn filter_native_item(cfg: ast::crate_cfg, &&item: @ast::native_item) ->\n+fn filter_native_item(cx: ctxt, &&item: @ast::native_item) ->\n    option::t<@ast::native_item> {\n-    if native_item_in_cfg(cfg, item) {\n+    if native_item_in_cfg(cx, item) {\n         option::some(item)\n     } else { option::none }\n }\n \n-fn fold_native_mod(cfg: ast::crate_cfg, nm: ast::native_mod,\n+fn fold_native_mod(cx: ctxt, nm: ast::native_mod,\n                    fld: fold::ast_fold) -> ast::native_mod {\n-    let filter = bind filter_native_item(cfg, _);\n+    let filter = bind filter_native_item(cx, _);\n     let filtered_items = vec::filter_map(nm.items, filter);\n     ret {view_items: vec::map(nm.view_items, fld.fold_view_item),\n          items: filtered_items};\n }\n \n-fn filter_stmt(cfg: ast::crate_cfg, &&stmt: @ast::stmt) ->\n+fn filter_stmt(cx: ctxt, &&stmt: @ast::stmt) ->\n    option::t<@ast::stmt> {\n     alt stmt.node {\n       ast::stmt_decl(decl, _) {\n         alt decl.node {\n           ast::decl_item(item) {\n-            if item_in_cfg(cfg, item) {\n+            if item_in_cfg(cx, item) {\n                 option::some(stmt)\n             } else { option::none }\n           }\n@@ -66,9 +81,9 @@ fn filter_stmt(cfg: ast::crate_cfg, &&stmt: @ast::stmt) ->\n     }\n }\n \n-fn fold_block(cfg: ast::crate_cfg, b: ast::blk_, fld: fold::ast_fold) ->\n+fn fold_block(cx: ctxt, b: ast::blk_, fld: fold::ast_fold) ->\n    ast::blk_ {\n-    let filter = bind filter_stmt(cfg, _);\n+    let filter = bind filter_stmt(cx, _);\n     let filtered_stmts = vec::filter_map(b.stmts, filter);\n     ret {view_items: b.view_items,\n          stmts: vec::map(filtered_stmts, fld.fold_stmt),\n@@ -77,12 +92,12 @@ fn fold_block(cfg: ast::crate_cfg, b: ast::blk_, fld: fold::ast_fold) ->\n          rules: b.rules};\n }\n \n-fn item_in_cfg(cfg: ast::crate_cfg, item: @ast::item) -> bool {\n-    ret in_cfg(cfg, item.attrs);\n+fn item_in_cfg(cx: ctxt, item: @ast::item) -> bool {\n+    ret cx.in_cfg(item.attrs);\n }\n \n-fn native_item_in_cfg(cfg: ast::crate_cfg, item: @ast::native_item) -> bool {\n-    ret in_cfg(cfg, item.attrs);\n+fn native_item_in_cfg(cx: ctxt, item: @ast::native_item) -> bool {\n+    ret cx.in_cfg(item.attrs);\n }\n \n // Determine if an item should be translated in the current crate"}, {"sha": "46293c80310c4827c76e2c0372a1bbd7ae1ccca0", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c2c497ff53596ffcdf713d6aabfbaaf2e50371bf/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c497ff53596ffcdf713d6aabfbaaf2e50371bf/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=c2c497ff53596ffcdf713d6aabfbaaf2e50371bf", "patch": "@@ -27,6 +27,15 @@ type test_ctxt =\n fn modify_for_testing(sess: session::session,\n                       crate: @ast::crate) -> @ast::crate {\n \n+    if sess.get_opts().test {\n+        generate_test_harness(sess, crate)\n+    } else {\n+        strip_test_functions(crate)\n+    }\n+}\n+\n+fn generate_test_harness(sess: session::session,\n+                         crate: @ast::crate) -> @ast::crate {\n     let cx: test_ctxt =\n         @{sess: sess,\n           crate: crate,\n@@ -43,6 +52,14 @@ fn modify_for_testing(sess: session::session,\n     ret res;\n }\n \n+fn strip_test_functions(crate: @ast::crate) -> @ast::crate {\n+    // When not compiling with --test we should not compile the\n+    // #[test] functions\n+    config::strip_items(crate) {|attrs|\n+        !attr::contains_name(attr::attr_metas(attrs), \"test\")\n+    }\n+}\n+\n fn fold_mod(_cx: test_ctxt, m: ast::_mod, fld: fold::ast_fold) -> ast::_mod {\n \n     // Remove any defined main function from the AST so it doesn't clash with"}, {"sha": "551eaf06c39bf16d328ad796cfa2af593ce34ac0", "filename": "src/test/compile-fail/elided-test.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c2c497ff53596ffcdf713d6aabfbaaf2e50371bf/src%2Ftest%2Fcompile-fail%2Felided-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c497ff53596ffcdf713d6aabfbaaf2e50371bf/src%2Ftest%2Fcompile-fail%2Felided-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Felided-test.rs?ref=c2c497ff53596ffcdf713d6aabfbaaf2e50371bf", "patch": "@@ -0,0 +1,7 @@\n+// error-pattern: main function not found\n+\n+// Since we're not compiling a test runner this function should be elided\n+// and the build will fail because main doesn't exist\n+#[test]\n+fn main() {\n+}\n\\ No newline at end of file"}]}