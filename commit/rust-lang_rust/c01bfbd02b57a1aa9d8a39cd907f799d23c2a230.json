{"sha": "c01bfbd02b57a1aa9d8a39cd907f799d23c2a230", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMWJmYmQwMmI1N2ExYWE5ZDhhMzljZDkwN2Y3OTlkMjNjMmEyMzA=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2017-12-12T16:50:09Z"}, "committer": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-01-27T17:42:53Z"}, "message": "refactor `structurally_resolve_type`\n\nthe `or_else` part was dead code.", "tree": {"sha": "a9577c28f646092a5b7dc7b40e12b299441cc7bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9577c28f646092a5b7dc7b40e12b299441cc7bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c01bfbd02b57a1aa9d8a39cd907f799d23c2a230", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c01bfbd02b57a1aa9d8a39cd907f799d23c2a230", "html_url": "https://github.com/rust-lang/rust/commit/c01bfbd02b57a1aa9d8a39cd907f799d23c2a230", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c01bfbd02b57a1aa9d8a39cd907f799d23c2a230/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b99adeb11313197f409b4f7c4083c2ceca8a4fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b99adeb11313197f409b4f7c4083c2ceca8a4fe", "html_url": "https://github.com/rust-lang/rust/commit/6b99adeb11313197f409b4f7c4083c2ceca8a4fe"}], "stats": {"total": 36, "additions": 9, "deletions": 27}, "files": [{"sha": "cb80498f3e2040f9980c6cf0b0d74257089b350a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 27, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c01bfbd02b57a1aa9d8a39cd907f799d23c2a230/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01bfbd02b57a1aa9d8a39cd907f799d23c2a230/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c01bfbd02b57a1aa9d8a39cd907f799d23c2a230", "patch": "@@ -4954,41 +4954,23 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         });\n     }\n \n-    fn structurally_resolve_type_or_else<F>(&self, sp: Span, ty: Ty<'tcx>, f: F)\n-                                            -> Ty<'tcx>\n-        where F: Fn() -> Ty<'tcx>\n-    {\n+    // Resolves `typ` by a single level if `typ` is a type variable. If no\n+    // resolution is possible, then an error is reported.\n+    pub fn structurally_resolved_type(&self, sp: Span, ty: Ty<'tcx>) -> Ty<'tcx> {\n         let mut ty = self.resolve_type_vars_with_obligations(ty);\n-\n         if ty.is_ty_var() {\n-            let alternative = f();\n-\n             // If not, error.\n-            if alternative.is_ty_var() || alternative.references_error() {\n-                if !self.is_tainted_by_errors() {\n-                    type_error_struct!(self.tcx.sess, sp, ty, E0619,\n-                                       \"the type of this value must be known in this context\")\n-                        .emit();\n-                }\n-                self.demand_suptype(sp, self.tcx.types.err, ty);\n-                ty = self.tcx.types.err;\n-            } else {\n-                self.demand_suptype(sp, alternative, ty);\n-                ty = alternative;\n+            if !self.is_tainted_by_errors() {\n+                type_error_struct!(self.tcx.sess, sp, ty, E0619,\n+                                    \"the type of this value must be known in this context\")\n+                .emit();\n             }\n+            self.demand_suptype(sp, self.tcx.types.err, ty);\n+            ty = self.tcx.types.err;\n         }\n-\n         ty\n     }\n \n-    // Resolves `typ` by a single level if `typ` is a type variable.  If no\n-    // resolution is possible, then an error is reported.\n-    pub fn structurally_resolved_type(&self, sp: Span, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        self.structurally_resolve_type_or_else(sp, ty, || {\n-            self.tcx.types.err\n-        })\n-    }\n-\n     fn with_breakable_ctxt<F: FnOnce() -> R, R>(&self, id: ast::NodeId,\n                                         ctxt: BreakableCtxt<'gcx, 'tcx>, f: F)\n                                    -> (BreakableCtxt<'gcx, 'tcx>, R) {"}]}