{"sha": "39d9d40e402abacae14f73c3476541c729a0f5a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZDlkNDBlNDAyYWJhY2FlMTRmNzNjMzQ3NjU0MWM3MjlhMGY1YTI=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-11-20T21:54:02Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-11-20T21:54:02Z"}, "message": "Remove glob uses and slightly refactor.", "tree": {"sha": "7fc64fc93f7ba93960be0363ad110cb5fa103194", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fc64fc93f7ba93960be0363ad110cb5fa103194"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39d9d40e402abacae14f73c3476541c729a0f5a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39d9d40e402abacae14f73c3476541c729a0f5a2", "html_url": "https://github.com/rust-lang/rust/commit/39d9d40e402abacae14f73c3476541c729a0f5a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39d9d40e402abacae14f73c3476541c729a0f5a2/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fae7a5685f378d846f53d2d5083f4c2feec39960", "url": "https://api.github.com/repos/rust-lang/rust/commits/fae7a5685f378d846f53d2d5083f4c2feec39960", "html_url": "https://github.com/rust-lang/rust/commit/fae7a5685f378d846f53d2d5083f4c2feec39960"}], "stats": {"total": 132, "additions": 63, "deletions": 69}, "files": [{"sha": "8885833eaf9ac1b7adf6c274e14ead412e0e7475", "filename": "src/interpreter.rs", "status": "modified", "additions": 63, "deletions": 69, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/39d9d40e402abacae14f73c3476541c729a0f5a2/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d9d40e402abacae14f73c3476541c729a0f5a2/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=39d9d40e402abacae14f73c3476541c729a0f5a2", "patch": "@@ -120,23 +120,19 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n         let mut block = mir::START_BLOCK;\n \n         loop {\n-            use rustc_mir::repr::Terminator::*;\n-\n             let block_data = mir.basic_block_data(block);\n \n             for stmt in &block_data.statements {\n-                use rustc_mir::repr::StatementKind::*;\n-\n                 if TRACE_EXECUTION { println!(\"{:?}\", stmt); }\n \n                 match stmt.kind {\n-                    Assign(ref lvalue, ref rvalue) => {\n+                    mir::StatementKind::Assign(ref lvalue, ref rvalue) => {\n                         let ptr = self.eval_lvalue(lvalue);\n                         let value = self.eval_rvalue(rvalue);\n                         self.write_pointer(ptr, value);\n                     }\n \n-                    Drop(_kind, ref _lv) => {\n+                    mir::StatementKind::Drop(_kind, ref _lv) => {\n                         // TODO\n                     },\n                 }\n@@ -145,10 +141,10 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n             if TRACE_EXECUTION { println!(\"{:?}\", block_data.terminator); }\n \n             match block_data.terminator {\n-                Return => break,\n-                Goto { target } => block = target,\n+                mir::Terminator::Return => break,\n+                mir::Terminator::Goto { target } => block = target,\n \n-                Call { data: mir::CallData { ref destination, ref func, ref args }, targets } => {\n+                mir::Terminator::Call { data: mir::CallData { ref destination, ref func, ref args }, targets } => {\n                     let ptr = self.eval_lvalue(destination);\n                     let func_val = self.eval_operand(func);\n \n@@ -168,15 +164,15 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n                     }\n                 }\n \n-                If { ref cond, targets } => {\n+                mir::Terminator::If { ref cond, targets } => {\n                     match self.eval_operand(cond) {\n                         Value::Bool(true) => block = targets[0],\n                         Value::Bool(false) => block = targets[1],\n                         cond_val => panic!(\"Non-boolean `if` condition value: {:?}\", cond_val),\n                     }\n                 }\n \n-                SwitchInt { ref discr, switch_ty: _, ref values, ref targets } => {\n+                mir::Terminator::SwitchInt { ref discr, switch_ty: _, ref values, ref targets } => {\n                     let discr_val = self.read_lvalue(discr);\n \n                     let index = values.iter().position(|v| discr_val == self.eval_constant(v))\n@@ -185,9 +181,9 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n                     block = targets[index];\n                 }\n \n-                // Diverge => unimplemented!(),\n-                // Panic { target } => unimplemented!(),\n-                // Switch { ref discr, adt_def, ref targets } => unimplemented!(),\n+                // mir::Terminator::Diverge => unimplemented!(),\n+                // mir::Terminator::Panic { target } => unimplemented!(),\n+                // mir::Terminator::Switch { ref discr, adt_def, ref targets } => unimplemented!(),\n                 _ => unimplemented!(),\n             }\n         }\n@@ -198,62 +194,64 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n     }\n \n     fn eval_lvalue(&self, lvalue: &mir::Lvalue) -> Pointer {\n-        use rustc_mir::repr::Lvalue::*;\n-\n         let frame = self.call_stack.last().expect(\"missing call frame\");\n \n         match *lvalue {\n-            ReturnPointer => Pointer::Stack(frame.return_val_offset()),\n-            Arg(i)  => Pointer::Stack(frame.arg_offset(i)),\n-            Var(i)  => Pointer::Stack(frame.var_offset(i)),\n-            Temp(i) => Pointer::Stack(frame.temp_offset(i)),\n+            mir::Lvalue::ReturnPointer => Pointer::Stack(frame.return_val_offset()),\n+            mir::Lvalue::Arg(i)  => Pointer::Stack(frame.arg_offset(i)),\n+            mir::Lvalue::Var(i)  => Pointer::Stack(frame.var_offset(i)),\n+            mir::Lvalue::Temp(i) => Pointer::Stack(frame.temp_offset(i)),\n             _ => unimplemented!(),\n         }\n     }\n \n-    fn eval_rvalue(&mut self, rvalue: &mir::Rvalue) -> Value {\n-        use rustc_mir::repr::Rvalue::*;\n-        use rustc_mir::repr::BinOp::*;\n-        use rustc_mir::repr::UnOp::*;\n+    fn eval_binary_op(&mut self, bin_op: mir::BinOp, left: Value, right: Value) -> Value {\n+        match (left, right) {\n+            (Value::Int(l), Value::Int(r)) => {\n+                match bin_op {\n+                    mir::BinOp::Add    => Value::Int(l + r),\n+                    mir::BinOp::Sub    => Value::Int(l - r),\n+                    mir::BinOp::Mul    => Value::Int(l * r),\n+                    mir::BinOp::Div    => Value::Int(l / r),\n+                    mir::BinOp::Rem    => Value::Int(l % r),\n+                    mir::BinOp::BitXor => Value::Int(l ^ r),\n+                    mir::BinOp::BitAnd => Value::Int(l & r),\n+                    mir::BinOp::BitOr  => Value::Int(l | r),\n+                    mir::BinOp::Shl    => Value::Int(l << r),\n+                    mir::BinOp::Shr    => Value::Int(l >> r),\n+                    mir::BinOp::Eq     => Value::Bool(l == r),\n+                    mir::BinOp::Lt     => Value::Bool(l < r),\n+                    mir::BinOp::Le     => Value::Bool(l <= r),\n+                    mir::BinOp::Ne     => Value::Bool(l != r),\n+                    mir::BinOp::Ge     => Value::Bool(l >= r),\n+                    mir::BinOp::Gt     => Value::Bool(l > r),\n+                }\n+            }\n \n+            _ => unimplemented!(),\n+        }\n+    }\n+\n+    fn eval_rvalue(&mut self, rvalue: &mir::Rvalue) -> Value {\n         match *rvalue {\n-            Use(ref operand) => self.eval_operand(operand),\n-\n-            BinaryOp(bin_op, ref left, ref right) => {\n-                match (self.eval_operand(left), self.eval_operand(right)) {\n-                    (Value::Int(l), Value::Int(r)) => {\n-                        match bin_op {\n-                            Add => Value::Int(l + r),\n-                            Sub => Value::Int(l - r),\n-                            Mul => Value::Int(l * r),\n-                            Div => Value::Int(l / r),\n-                            Rem => Value::Int(l % r),\n-                            BitXor => Value::Int(l ^ r),\n-                            BitAnd => Value::Int(l & r),\n-                            BitOr => Value::Int(l | r),\n-                            Shl => Value::Int(l << r),\n-                            Shr => Value::Int(l >> r),\n-                            Eq => Value::Bool(l == r),\n-                            Lt => Value::Bool(l < r),\n-                            Le => Value::Bool(l <= r),\n-                            Ne => Value::Bool(l != r),\n-                            Ge => Value::Bool(l >= r),\n-                            Gt => Value::Bool(l > r),\n-                        }\n-                    }\n-                    _ => unimplemented!(),\n-                }\n+            mir::Rvalue::Use(ref operand) => self.eval_operand(operand),\n+\n+            mir::Rvalue::BinaryOp(bin_op, ref left, ref right) => {\n+                let left_val = self.eval_operand(left);\n+                let right_val = self.eval_operand(right);\n+                self.eval_binary_op(bin_op, left_val, right_val)\n             }\n \n-            UnaryOp(un_op, ref operand) => {\n+            mir::Rvalue::UnaryOp(un_op, ref operand) => {\n                 match (un_op, self.eval_operand(operand)) {\n-                    (Not, Value::Int(n)) => Value::Int(!n),\n-                    (Neg, Value::Int(n)) => Value::Int(-n),\n+                    (mir::UnOp::Not, Value::Int(n)) => Value::Int(!n),\n+                    (mir::UnOp::Neg, Value::Int(n)) => Value::Int(-n),\n                     _ => unimplemented!(),\n                 }\n             }\n \n-            // Aggregate(mir::AggregateKind::Adt(ref adt_def, variant, substs), ref operands) => {\n+            // mir::Rvalue::Aggregate(mir::AggregateKind::Adt(ref adt_def, variant, substs),\n+            //                        ref operands) => {\n             //     let num_fields = adt_def.variants[variant].fields.len();\n             //     debug_assert_eq!(num_fields, operands.len());\n \n@@ -266,12 +264,10 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n     }\n \n     fn eval_operand(&mut self, op: &mir::Operand) -> Value {\n-        use rustc_mir::repr::Operand::*;\n-\n         match *op {\n-            Consume(ref lvalue) => self.read_lvalue(lvalue),\n+            mir::Operand::Consume(ref lvalue) => self.read_lvalue(lvalue),\n \n-            Constant(ref constant) => {\n+            mir::Operand::Constant(ref constant) => {\n                 match constant.literal {\n                     mir::Literal::Value { ref value } => self.eval_constant(value),\n \n@@ -284,18 +280,16 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n     }\n \n     fn eval_constant(&self, const_val: &const_eval::ConstVal) -> Value {\n-        use rustc::middle::const_eval::ConstVal::*;\n-\n         match *const_val {\n-            Float(_f) => unimplemented!(),\n-            Int(i) => Value::Int(i),\n-            Uint(_u) => unimplemented!(),\n-            Str(ref _s) => unimplemented!(),\n-            ByteStr(ref _bs) => unimplemented!(),\n-            Bool(b) => Value::Bool(b),\n-            Struct(_node_id) => unimplemented!(),\n-            Tuple(_node_id) => unimplemented!(),\n-            Function(_def_id) => unimplemented!(),\n+            const_eval::ConstVal::Float(_f)         => unimplemented!(),\n+            const_eval::ConstVal::Int(i)            => Value::Int(i),\n+            const_eval::ConstVal::Uint(_u)          => unimplemented!(),\n+            const_eval::ConstVal::Str(ref _s)       => unimplemented!(),\n+            const_eval::ConstVal::ByteStr(ref _bs)  => unimplemented!(),\n+            const_eval::ConstVal::Bool(b)           => Value::Bool(b),\n+            const_eval::ConstVal::Struct(_node_id)  => unimplemented!(),\n+            const_eval::ConstVal::Tuple(_node_id)   => unimplemented!(),\n+            const_eval::ConstVal::Function(_def_id) => unimplemented!(),\n         }\n     }\n "}]}