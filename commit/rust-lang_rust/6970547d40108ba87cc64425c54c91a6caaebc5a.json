{"sha": "6970547d40108ba87cc64425c54c91a6caaebc5a", "node_id": "C_kwDOAAsO6NoAKDY5NzA1NDdkNDAxMDhiYTg3Y2M2NDQyNWM1NGM5MWE2Y2FhZWJjNWE", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-01-19T10:22:40Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-02-01T09:15:59Z"}, "message": "rustfmt is broken, manually reduce line length", "tree": {"sha": "00a88fc5b546caeb9e24a4ca434cc4a8d086c2e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00a88fc5b546caeb9e24a4ca434cc4a8d086c2e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6970547d40108ba87cc64425c54c91a6caaebc5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6970547d40108ba87cc64425c54c91a6caaebc5a", "html_url": "https://github.com/rust-lang/rust/commit/6970547d40108ba87cc64425c54c91a6caaebc5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6970547d40108ba87cc64425c54c91a6caaebc5a/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "html_url": "https://github.com/rust-lang/rust/commit/a1a30f7548bdb625f8f90c25258f8ab463cebe8c"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "594251d46b4b0698e451abd0f09304e413b9fe8d", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6970547d40108ba87cc64425c54c91a6caaebc5a/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6970547d40108ba87cc64425c54c91a6caaebc5a/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=6970547d40108ba87cc64425c54c91a6caaebc5a", "patch": "@@ -75,11 +75,16 @@ impl LateLintPass<'_> for QueryStability {\n         }\n \n         let (span, def_id, substs) = match expr.kind {\n-            ExprKind::MethodCall(_, span, _, _) if let Some(def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) => {\n+            ExprKind::MethodCall(_, span, _, _)\n+                if let Some(def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) =>\n+            {\n                 (span, def_id, cx.typeck_results().node_substs(expr.hir_id))\n             },\n             _ => {\n-                let &ty::FnDef(def_id, substs) = cx.typeck_results().node_type(expr.hir_id).kind() else { return };\n+                let &ty::FnDef(def_id, substs) =\n+                    cx.typeck_results()\n+                        .node_type(expr.hir_id)\n+                        .kind() else { return };\n                 (expr.span, def_id, substs)\n             }\n         };"}]}