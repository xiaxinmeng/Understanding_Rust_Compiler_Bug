{"sha": "39936fd0b72ab9f25590ef6a2ffda0b08ff147e5", "node_id": "C_kwDOAAsO6NoAKDM5OTM2ZmQwYjcyYWI5ZjI1NTkwZWY2YTJmZmRhMGIwOGZmMTQ3ZTU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-14T13:54:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-14T13:54:06Z"}, "message": "Rollup merge of #99222 - atsuzaki:generic_const_err, r=lcnr\n\nBetter error message for generic_const_exprs inference failure\n\nFixes #90531\n\nThis code:\n```rs\n#![feature(generic_const_exprs)]\n\nfn foo<const N: usize>(_arr: [u64; N + 1]) where [u64; N + 1]: {}\n\nfn main() {\n  let arr = [5; 5];\n  foo(arr);\n}\n```\n\nWill now emit the following error:\n```rs\nwarning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes\n --> test.rs:1:12\n  |\n1 | #![feature(generic_const_exprs)]\n  |            ^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(incomplete_features)]` on by default\n  = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n\nerror[E0284]: type annotations needed\n --> test.rs:8:7\n  |\n8 |       foo(arr);\n  |       ^^^ cannot infer the value of the const parameter `N` declared on the function `foo`\n  |\nnote: required by a bound in `foo`\n --> test.rs:3:56\n  |\n3 | fn foo<const N: usize>(_arr: [u64; N + 1]) where [u64; N + 1]: {}\n  |                                                        ^^^^^ required by this bound in `foo`\nhelp: consider specifying the generic argument\n  |\n8 |       foo::<N>(arr);\n  |          +++++\n\nerror: aborting due to previous error; 1 warning emitted\n```\n\ncc: `@lcnr` thanks a lot again for the help on this", "tree": {"sha": "2630fd6d5c100dc4428bee76b53c80fefe9f1d87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2630fd6d5c100dc4428bee76b53c80fefe9f1d87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39936fd0b72ab9f25590ef6a2ffda0b08ff147e5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi0B//CRBK7hj4Ov3rIwAAPbYIAApAOblBPrIqAyl7cmpl4uBi\n00bkO+kpE2BeUdZ7hCYDpGnV00xiK95gj2nGELyxgZNUp5U401MEfQZKPhcgAKw9\nsuv5iTs028A3unoKECOprqP6qwRajv1IDlFAc4xWkLgik3n2AukK7lKzxGhqcobX\nam072/s7Nve7O0H/bc5OT7TgxB1EjQ66mvhAKmACpJztkhx+hOr7PILsGZImOgyG\nQtEwmfv9/XFpfBxvWQEmEUQ9abTyRatc70pytGurX893FBJ7OdUFAQy/oNr326Le\n4bM+J9xMfjDWr8oW6ZKdM/BZxcIpB6vcmuyOyjkrz9G1Qi1hDiJR+Ns1LbCANRs=\n=dzIV\n-----END PGP SIGNATURE-----\n", "payload": "tree 2630fd6d5c100dc4428bee76b53c80fefe9f1d87\nparent d3a1aa0b4380b7ab217a1e2889a4217e70237f61\nparent 96d34dc9ff557c189fef19cb00b36f5cd5c7ac49\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1657806846 +0530\ncommitter GitHub <noreply@github.com> 1657806846 +0530\n\nRollup merge of #99222 - atsuzaki:generic_const_err, r=lcnr\n\nBetter error message for generic_const_exprs inference failure\n\nFixes #90531\n\nThis code:\n```rs\n#![feature(generic_const_exprs)]\n\nfn foo<const N: usize>(_arr: [u64; N + 1]) where [u64; N + 1]: {}\n\nfn main() {\n  let arr = [5; 5];\n  foo(arr);\n}\n```\n\nWill now emit the following error:\n```rs\nwarning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes\n --> test.rs:1:12\n  |\n1 | #![feature(generic_const_exprs)]\n  |            ^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(incomplete_features)]` on by default\n  = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n\nerror[E0284]: type annotations needed\n --> test.rs:8:7\n  |\n8 |       foo(arr);\n  |       ^^^ cannot infer the value of the const parameter `N` declared on the function `foo`\n  |\nnote: required by a bound in `foo`\n --> test.rs:3:56\n  |\n3 | fn foo<const N: usize>(_arr: [u64; N + 1]) where [u64; N + 1]: {}\n  |                                                        ^^^^^ required by this bound in `foo`\nhelp: consider specifying the generic argument\n  |\n8 |       foo::<N>(arr);\n  |          +++++\n\nerror: aborting due to previous error; 1 warning emitted\n```\n\ncc: `@lcnr` thanks a lot again for the help on this\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39936fd0b72ab9f25590ef6a2ffda0b08ff147e5", "html_url": "https://github.com/rust-lang/rust/commit/39936fd0b72ab9f25590ef6a2ffda0b08ff147e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39936fd0b72ab9f25590ef6a2ffda0b08ff147e5/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3a1aa0b4380b7ab217a1e2889a4217e70237f61", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3a1aa0b4380b7ab217a1e2889a4217e70237f61", "html_url": "https://github.com/rust-lang/rust/commit/d3a1aa0b4380b7ab217a1e2889a4217e70237f61"}, {"sha": "96d34dc9ff557c189fef19cb00b36f5cd5c7ac49", "url": "https://api.github.com/repos/rust-lang/rust/commits/96d34dc9ff557c189fef19cb00b36f5cd5c7ac49", "html_url": "https://github.com/rust-lang/rust/commit/96d34dc9ff557c189fef19cb00b36f5cd5c7ac49"}], "stats": {"total": 44, "additions": 37, "deletions": 7}, "files": [{"sha": "02196a8f16d0b0ba3589a300195a8b13296d509e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/39936fd0b72ab9f25590ef6a2ffda0b08ff147e5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39936fd0b72ab9f25590ef6a2ffda0b08ff147e5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=39936fd0b72ab9f25590ef6a2ffda0b08ff147e5", "patch": "@@ -2179,6 +2179,33 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                 }\n             }\n \n+            ty::PredicateKind::ConstEvaluatable(data) => {\n+                if predicate.references_error() || self.is_tainted_by_errors() {\n+                    return;\n+                }\n+                let subst = data.substs.iter().find(|g| g.has_infer_types_or_consts());\n+                if let Some(subst) = subst {\n+                    let err = self.emit_inference_failure_err(\n+                        body_id,\n+                        span,\n+                        subst,\n+                        ErrorCode::E0284,\n+                        true,\n+                    );\n+                    err\n+                } else {\n+                    // If we can't find a substitution, just print a generic error\n+                    let mut err = struct_span_err!(\n+                        self.tcx.sess,\n+                        span,\n+                        E0284,\n+                        \"type annotations needed: cannot satisfy `{}`\",\n+                        predicate,\n+                    );\n+                    err.span_label(span, &format!(\"cannot satisfy `{}`\", predicate));\n+                    err\n+                }\n+            }\n             _ => {\n                 if self.tcx.sess.has_errors().is_some() || self.is_tainted_by_errors() {\n                     return;"}, {"sha": "79e9834b54ed2c4b4b9b9514641a32471b7b5db2", "filename": "src/test/ui/const-generics/generic_const_exprs/object-safety-ok-infer-err.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39936fd0b72ab9f25590ef6a2ffda0b08ff147e5/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-ok-infer-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39936fd0b72ab9f25590ef6a2ffda0b08ff147e5/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-ok-infer-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-ok-infer-err.rs?ref=39936fd0b72ab9f25590ef6a2ffda0b08ff147e5", "patch": "@@ -16,7 +16,6 @@ fn use_dyn<const N: usize>(v: &dyn Foo<N>) where [u8; N + 1]: Sized {\n }\n \n fn main() {\n-    // FIXME(generic_const_exprs): Improve the error message here.\n     use_dyn(&());\n     //~^ ERROR type annotations needed\n }"}, {"sha": "59e9fee1eaf41317d10e801fcbc8264a5d6bfc52", "filename": "src/test/ui/const-generics/generic_const_exprs/object-safety-ok-infer-err.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39936fd0b72ab9f25590ef6a2ffda0b08ff147e5/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-ok-infer-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39936fd0b72ab9f25590ef6a2ffda0b08ff147e5/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-ok-infer-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-ok-infer-err.stderr?ref=39936fd0b72ab9f25590ef6a2ffda0b08ff147e5", "patch": "@@ -1,14 +1,18 @@\n-error[E0284]: type annotations needed: cannot satisfy `the constant `use_dyn::<{_: usize}>::{constant#0}` can be evaluated`\n-  --> $DIR/object-safety-ok-infer-err.rs:20:5\n+error[E0284]: type annotations needed\n+  --> $DIR/object-safety-ok-infer-err.rs:19:5\n    |\n LL |     use_dyn(&());\n-   |     ^^^^^^^ cannot satisfy `the constant `use_dyn::<{_: usize}>::{constant#0}` can be evaluated`\n+   |     ^^^^^^^ cannot infer the value of the const parameter `N` declared on the function `use_dyn`\n    |\n note: required by a bound in `use_dyn`\n   --> $DIR/object-safety-ok-infer-err.rs:14:55\n    |\n LL | fn use_dyn<const N: usize>(v: &dyn Foo<N>) where [u8; N + 1]: Sized {\n    |                                                       ^^^^^ required by this bound in `use_dyn`\n+help: consider specifying the generic argument\n+   |\n+LL |     use_dyn::<N>(&());\n+   |            +++++\n \n error: aborting due to previous error\n "}, {"sha": "7a78e0f109ca74e0c8073996bbc789dfcd5fdcb5", "filename": "src/test/ui/const-generics/parent_generics_of_encoding_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39936fd0b72ab9f25590ef6a2ffda0b08ff147e5/src%2Ftest%2Fui%2Fconst-generics%2Fparent_generics_of_encoding_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39936fd0b72ab9f25590ef6a2ffda0b08ff147e5/src%2Ftest%2Fui%2Fconst-generics%2Fparent_generics_of_encoding_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparent_generics_of_encoding_impl_trait.rs?ref=39936fd0b72ab9f25590ef6a2ffda0b08ff147e5", "patch": "@@ -7,5 +7,5 @@ extern crate generics_of_parent_impl_trait;\n fn main() {\n     // check for `impl Trait<{ const }>` which has a parent of a `DefKind::TyParam`\n     generics_of_parent_impl_trait::foo([()]);\n-    //~^ error: type annotations needed:\n+    //~^ error: type annotations needed\n }"}, {"sha": "87ff7babe71c09793f46f1e2a2d3069771188cb7", "filename": "src/test/ui/const-generics/parent_generics_of_encoding_impl_trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39936fd0b72ab9f25590ef6a2ffda0b08ff147e5/src%2Ftest%2Fui%2Fconst-generics%2Fparent_generics_of_encoding_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39936fd0b72ab9f25590ef6a2ffda0b08ff147e5/src%2Ftest%2Fui%2Fconst-generics%2Fparent_generics_of_encoding_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparent_generics_of_encoding_impl_trait.stderr?ref=39936fd0b72ab9f25590ef6a2ffda0b08ff147e5", "patch": "@@ -1,8 +1,8 @@\n-error[E0284]: type annotations needed: cannot satisfy `the constant `foo::{opaque#0}::{constant#0}` can be evaluated`\n+error[E0284]: type annotations needed\n   --> $DIR/parent_generics_of_encoding_impl_trait.rs:9:5\n    |\n LL |     generics_of_parent_impl_trait::foo([()]);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot satisfy `the constant `foo::{opaque#0}::{constant#0}` can be evaluated`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer the value of const parameter `N` declared on the function `foo`\n    |\n note: required by a bound in `foo`\n   --> $DIR/auxiliary/generics_of_parent_impl_trait.rs:6:48"}]}