{"sha": "a2b1646c597329d0a25efa3889b66650f65de1de", "node_id": "C_kwDOAAsO6NoAKGEyYjE2NDZjNTk3MzI5ZDBhMjVlZmEzODg5YjY2NjUwZjY1ZGUxZGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-25T16:59:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-25T16:59:57Z"}, "message": "Auto merge of #86844 - bjorn3:global_alloc_improvements, r=pnkfelix\n\nSupport #[global_allocator] without the allocator shim\n\nThis makes it possible to use liballoc/libstd in combination with `--emit obj` if you use `#[global_allocator]`. This is what rust-for-linux uses right now and systemd may use in the future. Currently they have to depend on the exact implementation of the allocator shim to create one themself as `--emit obj` doesn't create an allocator shim.\n\nNote that currently the allocator shim also defines the oom error handler, which is normally required too. Once `#![feature(default_alloc_error_handler)]` becomes the only option, this can be avoided. In addition when using only fallible allocator methods and either `--cfg no_global_oom_handling` for liballoc (like rust-for-linux) or `--gc-sections` no references to the oom error handler will exist.\n\nTo avoid this feature being insta-stable, you will have to define `__rust_no_alloc_shim_is_unstable` to avoid linker errors.\n\n(Labeling this with both T-compiler and T-lang as it originally involved both an implementation detail and had an insta-stable user facing change. As noted above, the `__rust_no_alloc_shim_is_unstable` symbol requirement should prevent unintended dependence on this unstable feature.)", "tree": {"sha": "f09c5d967f915501387578d1d89574c68343eeb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f09c5d967f915501387578d1d89574c68343eeb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2b1646c597329d0a25efa3889b66650f65de1de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2b1646c597329d0a25efa3889b66650f65de1de", "html_url": "https://github.com/rust-lang/rust/commit/a2b1646c597329d0a25efa3889b66650f65de1de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2b1646c597329d0a25efa3889b66650f65de1de/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cade26637fe1c23965ce644299ed5200db7c92dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/cade26637fe1c23965ce644299ed5200db7c92dd", "html_url": "https://github.com/rust-lang/rust/commit/cade26637fe1c23965ce644299ed5200db7c92dd"}, {"sha": "33d9b5880885862fdf4ec5bf70f45bf0e503a7fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/33d9b5880885862fdf4ec5bf70f45bf0e503a7fc", "html_url": "https://github.com/rust-lang/rust/commit/33d9b5880885862fdf4ec5bf70f45bf0e503a7fc"}], "stats": {"total": 575, "additions": 358, "deletions": 217}, "files": [{"sha": "e87f6e820a1fcae6feeb67959990f25ab60cd7e0", "filename": "compiler/rustc_ast/src/expand/allocator.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a2b1646c597329d0a25efa3889b66650f65de1de/compiler%2Frustc_ast%2Fsrc%2Fexpand%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b1646c597329d0a25efa3889b66650f65de1de/compiler%2Frustc_ast%2Fsrc%2Fexpand%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fexpand%2Fallocator.rs?ref=a2b1646c597329d0a25efa3889b66650f65de1de", "patch": "@@ -1,20 +1,28 @@\n use rustc_span::symbol::{sym, Symbol};\n \n-#[derive(Clone, Debug, Copy, HashStable_Generic)]\n+#[derive(Clone, Debug, Copy, Eq, PartialEq, HashStable_Generic)]\n pub enum AllocatorKind {\n     Global,\n     Default,\n }\n \n-impl AllocatorKind {\n-    pub fn fn_name(&self, base: Symbol) -> String {\n-        match *self {\n-            AllocatorKind::Global => format!(\"__rg_{base}\"),\n-            AllocatorKind::Default => format!(\"__rdl_{base}\"),\n-        }\n+pub fn global_fn_name(base: Symbol) -> String {\n+    format!(\"__rust_{base}\")\n+}\n+\n+pub fn default_fn_name(base: Symbol) -> String {\n+    format!(\"__rdl_{base}\")\n+}\n+\n+pub fn alloc_error_handler_name(alloc_error_handler_kind: AllocatorKind) -> &'static str {\n+    match alloc_error_handler_kind {\n+        AllocatorKind::Global => \"__rg_oom\",\n+        AllocatorKind::Default => \"__rdl_oom\",\n     }\n }\n \n+pub const NO_ALLOC_SHIM_IS_UNSTABLE: &str = \"__rust_no_alloc_shim_is_unstable\";\n+\n pub enum AllocatorTy {\n     Layout,\n     Ptr,"}, {"sha": "f0d378d12f71245de599e0eef72767b08b210170", "filename": "compiler/rustc_builtin_macros/src/global_allocator.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a2b1646c597329d0a25efa3889b66650f65de1de/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b1646c597329d0a25efa3889b66650f65de1de/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs?ref=a2b1646c597329d0a25efa3889b66650f65de1de", "patch": "@@ -1,7 +1,7 @@\n use crate::util::check_builtin_macro_attribute;\n \n use rustc_ast::expand::allocator::{\n-    AllocatorKind, AllocatorMethod, AllocatorTy, ALLOCATOR_METHODS,\n+    global_fn_name, AllocatorMethod, AllocatorTy, ALLOCATOR_METHODS,\n };\n use rustc_ast::ptr::P;\n use rustc_ast::{self as ast, AttrVec, Expr, FnHeader, FnSig, Generics, Param, StmtKind};\n@@ -40,8 +40,7 @@ pub fn expand(\n \n     // Generate a bunch of new items using the AllocFnFactory\n     let span = ecx.with_def_site_ctxt(item.span);\n-    let f =\n-        AllocFnFactory { span, ty_span, kind: AllocatorKind::Global, global: item.ident, cx: ecx };\n+    let f = AllocFnFactory { span, ty_span, global: item.ident, cx: ecx };\n \n     // Generate item statements for the allocator methods.\n     let stmts = ALLOCATOR_METHODS.iter().map(|method| f.allocator_fn(method)).collect();\n@@ -63,7 +62,6 @@ pub fn expand(\n struct AllocFnFactory<'a, 'b> {\n     span: Span,\n     ty_span: Span,\n-    kind: AllocatorKind,\n     global: Ident,\n     cx: &'b ExtCtxt<'a>,\n }\n@@ -92,7 +90,7 @@ impl AllocFnFactory<'_, '_> {\n         }));\n         let item = self.cx.item(\n             self.span,\n-            Ident::from_str_and_span(&self.kind.fn_name(method.name), self.span),\n+            Ident::from_str_and_span(&global_fn_name(method.name), self.span),\n             self.attrs(),\n             kind,\n         );"}, {"sha": "d4b1ae2b61383e655bf1cc832f853769187711e2", "filename": "compiler/rustc_codegen_cranelift/src/allocator.rs", "status": "modified", "additions": 45, "deletions": 34, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/a2b1646c597329d0a25efa3889b66650f65de1de/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b1646c597329d0a25efa3889b66650f65de1de/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs?ref=a2b1646c597329d0a25efa3889b66650f65de1de", "patch": "@@ -3,10 +3,12 @@\n \n use crate::prelude::*;\n \n-use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n+use rustc_ast::expand::allocator::{\n+    alloc_error_handler_name, default_fn_name, global_fn_name, AllocatorKind, AllocatorTy,\n+    ALLOCATOR_METHODS, NO_ALLOC_SHIM_IS_UNSTABLE,\n+};\n use rustc_codegen_ssa::base::allocator_kind_for_codegen;\n use rustc_session::config::OomStrategy;\n-use rustc_span::symbol::sym;\n \n /// Returns whether an allocator shim was created\n pub(crate) fn codegen(\n@@ -34,41 +36,43 @@ fn codegen_inner(\n ) {\n     let usize_ty = module.target_config().pointer_type();\n \n-    for method in ALLOCATOR_METHODS {\n-        let mut arg_tys = Vec::with_capacity(method.inputs.len());\n-        for ty in method.inputs.iter() {\n-            match *ty {\n-                AllocatorTy::Layout => {\n-                    arg_tys.push(usize_ty); // size\n-                    arg_tys.push(usize_ty); // align\n-                }\n-                AllocatorTy::Ptr => arg_tys.push(usize_ty),\n-                AllocatorTy::Usize => arg_tys.push(usize_ty),\n+    if kind == AllocatorKind::Default {\n+        for method in ALLOCATOR_METHODS {\n+            let mut arg_tys = Vec::with_capacity(method.inputs.len());\n+            for ty in method.inputs.iter() {\n+                match *ty {\n+                    AllocatorTy::Layout => {\n+                        arg_tys.push(usize_ty); // size\n+                        arg_tys.push(usize_ty); // align\n+                    }\n+                    AllocatorTy::Ptr => arg_tys.push(usize_ty),\n+                    AllocatorTy::Usize => arg_tys.push(usize_ty),\n \n-                AllocatorTy::ResultPtr | AllocatorTy::Unit => panic!(\"invalid allocator arg\"),\n+                    AllocatorTy::ResultPtr | AllocatorTy::Unit => panic!(\"invalid allocator arg\"),\n+                }\n             }\n-        }\n-        let output = match method.output {\n-            AllocatorTy::ResultPtr => Some(usize_ty),\n-            AllocatorTy::Unit => None,\n+            let output = match method.output {\n+                AllocatorTy::ResultPtr => Some(usize_ty),\n+                AllocatorTy::Unit => None,\n \n-            AllocatorTy::Layout | AllocatorTy::Usize | AllocatorTy::Ptr => {\n-                panic!(\"invalid allocator output\")\n-            }\n-        };\n+                AllocatorTy::Layout | AllocatorTy::Usize | AllocatorTy::Ptr => {\n+                    panic!(\"invalid allocator output\")\n+                }\n+            };\n \n-        let sig = Signature {\n-            call_conv: module.target_config().default_call_conv,\n-            params: arg_tys.iter().cloned().map(AbiParam::new).collect(),\n-            returns: output.into_iter().map(AbiParam::new).collect(),\n-        };\n-        crate::common::create_wrapper_function(\n-            module,\n-            unwind_context,\n-            sig,\n-            &format!(\"__rust_{}\", method.name),\n-            &kind.fn_name(method.name),\n-        );\n+            let sig = Signature {\n+                call_conv: module.target_config().default_call_conv,\n+                params: arg_tys.iter().cloned().map(AbiParam::new).collect(),\n+                returns: output.into_iter().map(AbiParam::new).collect(),\n+            };\n+            crate::common::create_wrapper_function(\n+                module,\n+                unwind_context,\n+                sig,\n+                &global_fn_name(method.name),\n+                &default_fn_name(method.name),\n+            );\n+        }\n     }\n \n     let sig = Signature {\n@@ -81,7 +85,7 @@ fn codegen_inner(\n         unwind_context,\n         sig,\n         \"__rust_alloc_error_handler\",\n-        &alloc_error_handler_kind.fn_name(sym::oom),\n+        &alloc_error_handler_name(alloc_error_handler_kind),\n     );\n \n     let data_id = module.declare_data(OomStrategy::SYMBOL, Linkage::Export, false, false).unwrap();\n@@ -90,4 +94,11 @@ fn codegen_inner(\n     let val = oom_strategy.should_panic();\n     data_ctx.define(Box::new([val]));\n     module.define_data(data_id, &data_ctx).unwrap();\n+\n+    let data_id =\n+        module.declare_data(NO_ALLOC_SHIM_IS_UNSTABLE, Linkage::Export, false, false).unwrap();\n+    let mut data_ctx = DataContext::new();\n+    data_ctx.set_align(1);\n+    data_ctx.define(Box::new([0]));\n+    module.define_data(data_id, &data_ctx).unwrap();\n }"}, {"sha": "13f88192bbc9005e9665ac0851dded4ac581e0ec", "filename": "compiler/rustc_codegen_gcc/src/allocator.rs", "status": "modified", "additions": 67, "deletions": 58, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/a2b1646c597329d0a25efa3889b66650f65de1de/compiler%2Frustc_codegen_gcc%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b1646c597329d0a25efa3889b66650f65de1de/compiler%2Frustc_codegen_gcc%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fallocator.rs?ref=a2b1646c597329d0a25efa3889b66650f65de1de", "patch": "@@ -1,11 +1,13 @@\n #[cfg(feature=\"master\")]\n use gccjit::FnAttribute;\n use gccjit::{FunctionType, GlobalKind, ToRValue};\n-use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n+use rustc_ast::expand::allocator::{\n+    alloc_error_handler_name, default_fn_name, global_fn_name, AllocatorKind, AllocatorTy,\n+    ALLOCATOR_METHODS, NO_ALLOC_SHIM_IS_UNSTABLE,\n+};\n use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::OomStrategy;\n-use rustc_span::symbol::sym;\n \n use crate::GccContext;\n \n@@ -22,69 +24,71 @@ pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut GccContext, _module_nam\n     let i8p = i8.make_pointer();\n     let void = context.new_type::<()>();\n \n-    for method in ALLOCATOR_METHODS {\n-        let mut types = Vec::with_capacity(method.inputs.len());\n-        for ty in method.inputs.iter() {\n-            match *ty {\n-                AllocatorTy::Layout => {\n-                    types.push(usize);\n-                    types.push(usize);\n+    if kind == AllocatorKind::Default {\n+        for method in ALLOCATOR_METHODS {\n+            let mut types = Vec::with_capacity(method.inputs.len());\n+            for ty in method.inputs.iter() {\n+                match *ty {\n+                    AllocatorTy::Layout => {\n+                        types.push(usize);\n+                        types.push(usize);\n+                    }\n+                    AllocatorTy::Ptr => types.push(i8p),\n+                    AllocatorTy::Usize => types.push(usize),\n+\n+                    AllocatorTy::ResultPtr | AllocatorTy::Unit => panic!(\"invalid allocator arg\"),\n                 }\n-                AllocatorTy::Ptr => types.push(i8p),\n-                AllocatorTy::Usize => types.push(usize),\n-\n-                AllocatorTy::ResultPtr | AllocatorTy::Unit => panic!(\"invalid allocator arg\"),\n             }\n-        }\n-        let output = match method.output {\n-            AllocatorTy::ResultPtr => Some(i8p),\n-            AllocatorTy::Unit => None,\n+            let output = match method.output {\n+                AllocatorTy::ResultPtr => Some(i8p),\n+                AllocatorTy::Unit => None,\n \n-            AllocatorTy::Layout | AllocatorTy::Usize | AllocatorTy::Ptr => {\n-                panic!(\"invalid allocator output\")\n-            }\n-        };\n-        let name = format!(\"__rust_{}\", method.name);\n+                AllocatorTy::Layout | AllocatorTy::Usize | AllocatorTy::Ptr => {\n+                    panic!(\"invalid allocator output\")\n+                }\n+            };\n+            let name = global_fn_name(method.name);\n \n-        let args: Vec<_> = types.iter().enumerate()\n-            .map(|(index, typ)| context.new_parameter(None, *typ, &format!(\"param{}\", index)))\n-            .collect();\n-        let func = context.new_function(None, FunctionType::Exported, output.unwrap_or(void), &args, name, false);\n+            let args: Vec<_> = types.iter().enumerate()\n+                .map(|(index, typ)| context.new_parameter(None, *typ, &format!(\"param{}\", index)))\n+                .collect();\n+            let func = context.new_function(None, FunctionType::Exported, output.unwrap_or(void), &args, name, false);\n \n-        if tcx.sess.target.options.default_hidden_visibility {\n+            if tcx.sess.target.options.default_hidden_visibility {\n+                #[cfg(feature=\"master\")]\n+                func.add_attribute(FnAttribute::Visibility(gccjit::Visibility::Hidden));\n+            }\n+            if tcx.sess.must_emit_unwind_tables() {\n+                // TODO(antoyo): emit unwind tables.\n+            }\n+\n+            let callee = default_fn_name(method.name);\n+            let args: Vec<_> = types.iter().enumerate()\n+                .map(|(index, typ)| context.new_parameter(None, *typ, &format!(\"param{}\", index)))\n+                .collect();\n+            let callee = context.new_function(None, FunctionType::Extern, output.unwrap_or(void), &args, callee, false);\n             #[cfg(feature=\"master\")]\n-            func.add_attribute(FnAttribute::Visibility(gccjit::Visibility::Hidden));\n-        }\n-        if tcx.sess.must_emit_unwind_tables() {\n-            // TODO(antoyo): emit unwind tables.\n-        }\n+            callee.add_attribute(FnAttribute::Visibility(gccjit::Visibility::Hidden));\n+\n+            let block = func.new_block(\"entry\");\n+\n+            let args = args\n+                .iter()\n+                .enumerate()\n+                .map(|(i, _)| func.get_param(i as i32).to_rvalue())\n+                .collect::<Vec<_>>();\n+            let ret = context.new_call(None, callee, &args);\n+            //llvm::LLVMSetTailCall(ret, True);\n+            if output.is_some() {\n+                block.end_with_return(None, ret);\n+            }\n+            else {\n+                block.end_with_void_return(None);\n+            }\n \n-        let callee = kind.fn_name(method.name);\n-        let args: Vec<_> = types.iter().enumerate()\n-            .map(|(index, typ)| context.new_parameter(None, *typ, &format!(\"param{}\", index)))\n-            .collect();\n-        let callee = context.new_function(None, FunctionType::Extern, output.unwrap_or(void), &args, callee, false);\n-        #[cfg(feature=\"master\")]\n-        callee.add_attribute(FnAttribute::Visibility(gccjit::Visibility::Hidden));\n-\n-        let block = func.new_block(\"entry\");\n-\n-        let args = args\n-            .iter()\n-            .enumerate()\n-            .map(|(i, _)| func.get_param(i as i32).to_rvalue())\n-            .collect::<Vec<_>>();\n-        let ret = context.new_call(None, callee, &args);\n-        //llvm::LLVMSetTailCall(ret, True);\n-        if output.is_some() {\n-            block.end_with_return(None, ret);\n-        }\n-        else {\n-            block.end_with_void_return(None);\n+            // TODO(@Commeownist): Check if we need to emit some extra debugging info in certain circumstances\n+            // as described in https://github.com/rust-lang/rust/commit/77a96ed5646f7c3ee8897693decc4626fe380643\n         }\n-\n-        // TODO(@Commeownist): Check if we need to emit some extra debugging info in certain circumstances\n-        // as described in https://github.com/rust-lang/rust/commit/77a96ed5646f7c3ee8897693decc4626fe380643\n     }\n \n     let types = [usize, usize];\n@@ -99,7 +103,7 @@ pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut GccContext, _module_nam\n         func.add_attribute(FnAttribute::Visibility(gccjit::Visibility::Hidden));\n     }\n \n-    let callee = alloc_error_handler_kind.fn_name(sym::oom);\n+    let callee = alloc_error_handler_name(alloc_error_handler_kind);\n     let args: Vec<_> = types.iter().enumerate()\n         .map(|(index, typ)| context.new_parameter(None, *typ, &format!(\"param{}\", index)))\n         .collect();\n@@ -123,4 +127,9 @@ pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut GccContext, _module_nam\n     let value = tcx.sess.opts.unstable_opts.oom.should_panic();\n     let value = context.new_rvalue_from_int(i8, value as i32);\n     global.global_set_initializer_rvalue(value);\n+\n+    let name = NO_ALLOC_SHIM_IS_UNSTABLE.to_string();\n+    let global = context.new_global(None, GlobalKind::Exported, i8, name);\n+    let value = context.new_rvalue_from_int(i8, 0);\n+    global.global_set_initializer_rvalue(value);\n }"}, {"sha": "a57508815d6f81ac9fdc5e61d4eddbb3d2b2b3a5", "filename": "compiler/rustc_codegen_llvm/src/allocator.rs", "status": "modified", "additions": 79, "deletions": 66, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/a2b1646c597329d0a25efa3889b66650f65de1de/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b1646c597329d0a25efa3889b66650f65de1de/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs?ref=a2b1646c597329d0a25efa3889b66650f65de1de", "patch": "@@ -1,10 +1,12 @@\n use crate::attributes;\n use libc::c_uint;\n-use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n+use rustc_ast::expand::allocator::{\n+    alloc_error_handler_name, default_fn_name, global_fn_name, AllocatorKind, AllocatorTy,\n+    ALLOCATOR_METHODS, NO_ALLOC_SHIM_IS_UNSTABLE,\n+};\n use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{DebugInfo, OomStrategy};\n-use rustc_span::symbol::sym;\n \n use crate::debuginfo;\n use crate::llvm::{self, False, True};\n@@ -29,75 +31,78 @@ pub(crate) unsafe fn codegen(\n     let i8p = llvm::LLVMPointerType(i8, 0);\n     let void = llvm::LLVMVoidTypeInContext(llcx);\n \n-    for method in ALLOCATOR_METHODS {\n-        let mut args = Vec::with_capacity(method.inputs.len());\n-        for ty in method.inputs.iter() {\n-            match *ty {\n-                AllocatorTy::Layout => {\n-                    args.push(usize); // size\n-                    args.push(usize); // align\n+    if kind == AllocatorKind::Default {\n+        for method in ALLOCATOR_METHODS {\n+            let mut args = Vec::with_capacity(method.inputs.len());\n+            for ty in method.inputs.iter() {\n+                match *ty {\n+                    AllocatorTy::Layout => {\n+                        args.push(usize); // size\n+                        args.push(usize); // align\n+                    }\n+                    AllocatorTy::Ptr => args.push(i8p),\n+                    AllocatorTy::Usize => args.push(usize),\n+\n+                    AllocatorTy::ResultPtr | AllocatorTy::Unit => panic!(\"invalid allocator arg\"),\n                 }\n-                AllocatorTy::Ptr => args.push(i8p),\n-                AllocatorTy::Usize => args.push(usize),\n-\n-                AllocatorTy::ResultPtr | AllocatorTy::Unit => panic!(\"invalid allocator arg\"),\n             }\n-        }\n-        let output = match method.output {\n-            AllocatorTy::ResultPtr => Some(i8p),\n-            AllocatorTy::Unit => None,\n+            let output = match method.output {\n+                AllocatorTy::ResultPtr => Some(i8p),\n+                AllocatorTy::Unit => None,\n \n-            AllocatorTy::Layout | AllocatorTy::Usize | AllocatorTy::Ptr => {\n-                panic!(\"invalid allocator output\")\n+                AllocatorTy::Layout | AllocatorTy::Usize | AllocatorTy::Ptr => {\n+                    panic!(\"invalid allocator output\")\n+                }\n+            };\n+            let ty = llvm::LLVMFunctionType(\n+                output.unwrap_or(void),\n+                args.as_ptr(),\n+                args.len() as c_uint,\n+                False,\n+            );\n+            let name = global_fn_name(method.name);\n+            let llfn =\n+                llvm::LLVMRustGetOrInsertFunction(llmod, name.as_ptr().cast(), name.len(), ty);\n+\n+            if tcx.sess.target.default_hidden_visibility {\n+                llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n+            }\n+            if tcx.sess.must_emit_unwind_tables() {\n+                let uwtable = attributes::uwtable_attr(llcx);\n+                attributes::apply_to_llfn(llfn, llvm::AttributePlace::Function, &[uwtable]);\n             }\n-        };\n-        let ty = llvm::LLVMFunctionType(\n-            output.unwrap_or(void),\n-            args.as_ptr(),\n-            args.len() as c_uint,\n-            False,\n-        );\n-        let name = format!(\"__rust_{}\", method.name);\n-        let llfn = llvm::LLVMRustGetOrInsertFunction(llmod, name.as_ptr().cast(), name.len(), ty);\n-\n-        if tcx.sess.target.default_hidden_visibility {\n-            llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n-        }\n-        if tcx.sess.must_emit_unwind_tables() {\n-            let uwtable = attributes::uwtable_attr(llcx);\n-            attributes::apply_to_llfn(llfn, llvm::AttributePlace::Function, &[uwtable]);\n-        }\n \n-        let callee = kind.fn_name(method.name);\n-        let callee =\n-            llvm::LLVMRustGetOrInsertFunction(llmod, callee.as_ptr().cast(), callee.len(), ty);\n-        llvm::LLVMRustSetVisibility(callee, llvm::Visibility::Hidden);\n-\n-        let llbb = llvm::LLVMAppendBasicBlockInContext(llcx, llfn, \"entry\\0\".as_ptr().cast());\n-\n-        let llbuilder = llvm::LLVMCreateBuilderInContext(llcx);\n-        llvm::LLVMPositionBuilderAtEnd(llbuilder, llbb);\n-        let args = args\n-            .iter()\n-            .enumerate()\n-            .map(|(i, _)| llvm::LLVMGetParam(llfn, i as c_uint))\n-            .collect::<Vec<_>>();\n-        let ret = llvm::LLVMRustBuildCall(\n-            llbuilder,\n-            ty,\n-            callee,\n-            args.as_ptr(),\n-            args.len() as c_uint,\n-            [].as_ptr(),\n-            0 as c_uint,\n-        );\n-        llvm::LLVMSetTailCall(ret, True);\n-        if output.is_some() {\n-            llvm::LLVMBuildRet(llbuilder, ret);\n-        } else {\n-            llvm::LLVMBuildRetVoid(llbuilder);\n+            let callee = default_fn_name(method.name);\n+            let callee =\n+                llvm::LLVMRustGetOrInsertFunction(llmod, callee.as_ptr().cast(), callee.len(), ty);\n+            llvm::LLVMRustSetVisibility(callee, llvm::Visibility::Hidden);\n+\n+            let llbb = llvm::LLVMAppendBasicBlockInContext(llcx, llfn, \"entry\\0\".as_ptr().cast());\n+\n+            let llbuilder = llvm::LLVMCreateBuilderInContext(llcx);\n+            llvm::LLVMPositionBuilderAtEnd(llbuilder, llbb);\n+            let args = args\n+                .iter()\n+                .enumerate()\n+                .map(|(i, _)| llvm::LLVMGetParam(llfn, i as c_uint))\n+                .collect::<Vec<_>>();\n+            let ret = llvm::LLVMRustBuildCall(\n+                llbuilder,\n+                ty,\n+                callee,\n+                args.as_ptr(),\n+                args.len() as c_uint,\n+                [].as_ptr(),\n+                0 as c_uint,\n+            );\n+            llvm::LLVMSetTailCall(ret, True);\n+            if output.is_some() {\n+                llvm::LLVMBuildRet(llbuilder, ret);\n+            } else {\n+                llvm::LLVMBuildRetVoid(llbuilder);\n+            }\n+            llvm::LLVMDisposeBuilder(llbuilder);\n         }\n-        llvm::LLVMDisposeBuilder(llbuilder);\n     }\n \n     // rust alloc error handler\n@@ -118,7 +123,7 @@ pub(crate) unsafe fn codegen(\n         attributes::apply_to_llfn(llfn, llvm::AttributePlace::Function, &[uwtable]);\n     }\n \n-    let callee = alloc_error_handler_kind.fn_name(sym::oom);\n+    let callee = alloc_error_handler_name(alloc_error_handler_kind);\n     let callee = llvm::LLVMRustGetOrInsertFunction(llmod, callee.as_ptr().cast(), callee.len(), ty);\n     // -> ! DIFlagNoReturn\n     attributes::apply_to_llfn(callee, llvm::AttributePlace::Function, &[no_return]);\n@@ -156,6 +161,14 @@ pub(crate) unsafe fn codegen(\n     let llval = llvm::LLVMConstInt(i8, val as u64, False);\n     llvm::LLVMSetInitializer(ll_g, llval);\n \n+    let name = NO_ALLOC_SHIM_IS_UNSTABLE;\n+    let ll_g = llvm::LLVMRustGetOrInsertGlobal(llmod, name.as_ptr().cast(), name.len(), i8);\n+    if tcx.sess.target.default_hidden_visibility {\n+        llvm::LLVMRustSetVisibility(ll_g, llvm::Visibility::Hidden);\n+    }\n+    let llval = llvm::LLVMConstInt(i8, 0, False);\n+    llvm::LLVMSetInitializer(ll_g, llval);\n+\n     if tcx.sess.opts.debuginfo != DebugInfo::None {\n         let dbg_cx = debuginfo::CodegenUnitDebugContext::new(llmod);\n         debuginfo::metadata::build_compile_unit_di_node(tcx, module_name, &dbg_cx);"}, {"sha": "a8b6030ac85c3a50f4eb4f13e19e541b98a5b9cb", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a2b1646c597329d0a25efa3889b66650f65de1de/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b1646c597329d0a25efa3889b66650f65de1de/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=a2b1646c597329d0a25efa3889b66650f65de1de", "patch": "@@ -2,7 +2,7 @@ use crate::base::allocator_kind_for_codegen;\n \n use std::collections::hash_map::Entry::*;\n \n-use rustc_ast::expand::allocator::ALLOCATOR_METHODS;\n+use rustc_ast::expand::allocator::{ALLOCATOR_METHODS, NO_ALLOC_SHIM_IS_UNSTABLE};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n@@ -241,6 +241,17 @@ fn exported_symbols_provider_local(\n                 used: false,\n             },\n         ));\n+\n+        let exported_symbol =\n+            ExportedSymbol::NoDefId(SymbolName::new(tcx, NO_ALLOC_SHIM_IS_UNSTABLE));\n+        symbols.push((\n+            exported_symbol,\n+            SymbolExportInfo {\n+                level: SymbolExportLevel::Rust,\n+                kind: SymbolExportKind::Data,\n+                used: false,\n+            },\n+        ))\n     }\n \n     if tcx.sess.instrument_coverage() || tcx.sess.opts.cg.profile_generate.enabled() {"}, {"sha": "aaf72ab94e71123920c9d5fa20e4cfac0b342fb6", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2b1646c597329d0a25efa3889b66650f65de1de/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b1646c597329d0a25efa3889b66650f65de1de/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=a2b1646c597329d0a25efa3889b66650f65de1de", "patch": "@@ -4,7 +4,7 @@ use crate::errors;\n use crate::locator::{CrateError, CrateLocator, CratePaths};\n use crate::rmeta::{CrateDep, CrateMetadata, CrateNumMap, CrateRoot, MetadataBlob};\n \n-use rustc_ast::expand::allocator::AllocatorKind;\n+use rustc_ast::expand::allocator::{alloc_error_handler_name, global_fn_name, AllocatorKind};\n use rustc_ast::{self as ast, *};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::svh::Svh;\n@@ -1048,7 +1048,7 @@ fn global_allocator_spans(krate: &ast::Crate) -> Vec<Span> {\n         }\n     }\n \n-    let name = Symbol::intern(&AllocatorKind::Global.fn_name(sym::alloc));\n+    let name = Symbol::intern(&global_fn_name(sym::alloc));\n     let mut f = Finder { name, spans: Vec::new() };\n     visit::walk_crate(&mut f, krate);\n     f.spans\n@@ -1070,7 +1070,7 @@ fn alloc_error_handler_spans(krate: &ast::Crate) -> Vec<Span> {\n         }\n     }\n \n-    let name = Symbol::intern(&AllocatorKind::Global.fn_name(sym::oom));\n+    let name = Symbol::intern(alloc_error_handler_name(AllocatorKind::Global));\n     let mut f = Finder { name, spans: Vec::new() };\n     visit::walk_crate(&mut f, krate);\n     f.spans"}, {"sha": "01d1fdc9b2a5530ac03e1e829fd4d4713f8c6908", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a2b1646c597329d0a25efa3889b66650f65de1de/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b1646c597329d0a25efa3889b66650f65de1de/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=a2b1646c597329d0a25efa3889b66650f65de1de", "patch": "@@ -37,6 +37,9 @@ extern \"Rust\" {\n     #[rustc_allocator_zeroed]\n     #[rustc_nounwind]\n     fn __rust_alloc_zeroed(size: usize, align: usize) -> *mut u8;\n+\n+    #[cfg(not(bootstrap))]\n+    static __rust_no_alloc_shim_is_unstable: u8;\n }\n \n /// The global memory allocator.\n@@ -90,7 +93,14 @@ pub use std::alloc::Global;\n #[must_use = \"losing the pointer will leak memory\"]\n #[inline]\n pub unsafe fn alloc(layout: Layout) -> *mut u8 {\n-    unsafe { __rust_alloc(layout.size(), layout.align()) }\n+    unsafe {\n+        // Make sure we don't accidentally allow omitting the allocator shim in\n+        // stable code until it is actually stabilized.\n+        #[cfg(not(bootstrap))]\n+        core::ptr::read_volatile(&__rust_no_alloc_shim_is_unstable);\n+\n+        __rust_alloc(layout.size(), layout.align())\n+    }\n }\n \n /// Deallocate memory with the global allocator."}, {"sha": "0ba7dad564910a51e46842eb935982ea769156a5", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2b1646c597329d0a25efa3889b66650f65de1de/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b1646c597329d0a25efa3889b66650f65de1de/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=a2b1646c597329d0a25efa3889b66650f65de1de", "patch": "@@ -651,6 +651,10 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n \n     /// Sets up the \"extern statics\" for this machine.\n     fn init_extern_statics(this: &mut MiriInterpCx<'mir, 'tcx>) -> InterpResult<'tcx> {\n+        // \"__rust_no_alloc_shim_is_unstable\"\n+        let val = ImmTy::from_int(0, this.machine.layouts.u8);\n+        Self::alloc_extern_static(this, \"__rust_no_alloc_shim_is_unstable\", val)?;\n+\n         match this.tcx.sess.target.os.as_ref() {\n             \"linux\" => {\n                 // \"environ\""}, {"sha": "74364994579abb98d1ac23546d523b0d03c2b1f2", "filename": "src/tools/miri/src/shims/foreign_items.rs", "status": "modified", "additions": 40, "deletions": 31, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/a2b1646c597329d0a25efa3889b66650f65de1de/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b1646c597329d0a25efa3889b66650f65de1de/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs?ref=a2b1646c597329d0a25efa3889b66650f65de1de", "patch": "@@ -347,7 +347,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// Emulates calling the internal __rust_* allocator functions\n     fn emulate_allocator(\n         &mut self,\n-        symbol: Symbol,\n         default: impl FnOnce(&mut MiriInterpCx<'mir, 'tcx>) -> InterpResult<'tcx>,\n     ) -> InterpResult<'tcx, EmulateByNameResult<'mir, 'tcx>> {\n         let this = self.eval_context_mut();\n@@ -359,11 +358,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         match allocator_kind {\n             AllocatorKind::Global => {\n-                let (body, instance) = this\n-                    .lookup_exported_symbol(symbol)?\n-                    .expect(\"symbol should be present if there is a global allocator\");\n-\n-                Ok(EmulateByNameResult::MirBody(body, instance))\n+                // When `#[global_allocator]` is used, `__rust_*` is defined by the macro expansion\n+                // of this attribute. As such we have to call an exported Rust function,\n+                // and not execute any Miri shim. Somewhat unintuitively doing so is done\n+                // by returning `NotSupported`, which triggers the `lookup_exported_symbol`\n+                // fallback case in `emulate_foreign_item`.\n+                return Ok(EmulateByNameResult::NotSupported);\n             }\n             AllocatorKind::Default => {\n                 default(this)?;\n@@ -558,11 +558,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n             // Rust allocation\n             \"__rust_alloc\" | \"miri_alloc\" => {\n-                let [size, align] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n-                let size = this.read_target_usize(size)?;\n-                let align = this.read_target_usize(align)?;\n-\n                 let default = |this: &mut MiriInterpCx<'mir, 'tcx>| {\n+                    // Only call `check_shim` when `#[global_allocator]` isn't used. When that\n+                    // macro is used, we act like no shim exists, so that the exported function can run.\n+                    let [size, align] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n+                    let size = this.read_target_usize(size)?;\n+                    let align = this.read_target_usize(align)?;\n+\n                     Self::check_alloc_request(size, align)?;\n \n                     let memory_kind = match link_name.as_str() {\n@@ -581,8 +583,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 };\n \n                 match link_name.as_str() {\n-                    \"__rust_alloc\" =>\n-                        return this.emulate_allocator(Symbol::intern(\"__rg_alloc\"), default),\n+                    \"__rust_alloc\" => return this.emulate_allocator(default),\n                     \"miri_alloc\" => {\n                         default(this)?;\n                         return Ok(EmulateByNameResult::NeedsJumping);\n@@ -591,11 +592,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 }\n             }\n             \"__rust_alloc_zeroed\" => {\n-                let [size, align] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n-                let size = this.read_target_usize(size)?;\n-                let align = this.read_target_usize(align)?;\n+                return this.emulate_allocator(|this| {\n+                    // See the comment for `__rust_alloc` why `check_shim` is only called in the\n+                    // default case.\n+                    let [size, align] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n+                    let size = this.read_target_usize(size)?;\n+                    let align = this.read_target_usize(align)?;\n \n-                return this.emulate_allocator(Symbol::intern(\"__rg_alloc_zeroed\"), |this| {\n                     Self::check_alloc_request(size, align)?;\n \n                     let ptr = this.allocate_ptr(\n@@ -614,12 +617,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 });\n             }\n             \"__rust_dealloc\" | \"miri_dealloc\" => {\n-                let [ptr, old_size, align] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n-                let ptr = this.read_pointer(ptr)?;\n-                let old_size = this.read_target_usize(old_size)?;\n-                let align = this.read_target_usize(align)?;\n-\n                 let default = |this: &mut MiriInterpCx<'mir, 'tcx>| {\n+                    // See the comment for `__rust_alloc` why `check_shim` is only called in the\n+                    // default case.\n+                    let [ptr, old_size, align] =\n+                        this.check_shim(abi, Abi::Rust, link_name, args)?;\n+                    let ptr = this.read_pointer(ptr)?;\n+                    let old_size = this.read_target_usize(old_size)?;\n+                    let align = this.read_target_usize(align)?;\n+\n                     let memory_kind = match link_name.as_str() {\n                         \"__rust_dealloc\" => MiriMemoryKind::Rust,\n                         \"miri_dealloc\" => MiriMemoryKind::Miri,\n@@ -635,8 +641,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 };\n \n                 match link_name.as_str() {\n-                    \"__rust_dealloc\" =>\n-                        return this.emulate_allocator(Symbol::intern(\"__rg_dealloc\"), default),\n+                    \"__rust_dealloc\" => {\n+                        return this.emulate_allocator(default);\n+                    }\n                     \"miri_dealloc\" => {\n                         default(this)?;\n                         return Ok(EmulateByNameResult::NeedsJumping);\n@@ -645,15 +652,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 }\n             }\n             \"__rust_realloc\" => {\n-                let [ptr, old_size, align, new_size] =\n-                    this.check_shim(abi, Abi::Rust, link_name, args)?;\n-                let ptr = this.read_pointer(ptr)?;\n-                let old_size = this.read_target_usize(old_size)?;\n-                let align = this.read_target_usize(align)?;\n-                let new_size = this.read_target_usize(new_size)?;\n-                // No need to check old_size; we anyway check that they match the allocation.\n+                return this.emulate_allocator(|this| {\n+                    // See the comment for `__rust_alloc` why `check_shim` is only called in the\n+                    // default case.\n+                    let [ptr, old_size, align, new_size] =\n+                        this.check_shim(abi, Abi::Rust, link_name, args)?;\n+                    let ptr = this.read_pointer(ptr)?;\n+                    let old_size = this.read_target_usize(old_size)?;\n+                    let align = this.read_target_usize(align)?;\n+                    let new_size = this.read_target_usize(new_size)?;\n+                    // No need to check old_size; we anyway check that they match the allocation.\n \n-                return this.emulate_allocator(Symbol::intern(\"__rg_realloc\"), |this| {\n                     Self::check_alloc_request(new_size, align)?;\n \n                     let align = Align::from_bytes(align).unwrap();"}, {"sha": "12bb944b076774b1c18eae7b5f0ed94b82dc134c", "filename": "src/tools/miri/tests/fail/memleak.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2b1646c597329d0a25efa3889b66650f65de1de/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2b1646c597329d0a25efa3889b66650f65de1de/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak.stderr?ref=a2b1646c597329d0a25efa3889b66650f65de1de", "patch": "@@ -1,8 +1,8 @@\n error: memory leaked: ALLOC (Rust heap, size: 4, align: 4), allocated here:\n   --> RUSTLIB/alloc/src/alloc.rs:LL:CC\n    |\n-LL |     unsafe { __rust_alloc(layout.size(), layout.align()) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         __rust_alloc(layout.size(), layout.align())\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: inside `std::alloc::alloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n    = note: inside `std::alloc::Global::alloc_impl` at RUSTLIB/alloc/src/alloc.rs:LL:CC"}, {"sha": "87c5f466bc4bef534014acd3f7c43d7ff9fc58e2", "filename": "src/tools/miri/tests/fail/memleak_rc.32bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2b1646c597329d0a25efa3889b66650f65de1de/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_rc.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2b1646c597329d0a25efa3889b66650f65de1de/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_rc.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_rc.32bit.stderr?ref=a2b1646c597329d0a25efa3889b66650f65de1de", "patch": "@@ -1,8 +1,8 @@\n error: memory leaked: ALLOC (Rust heap, size: 16, align: 4), allocated here:\n   --> RUSTLIB/alloc/src/alloc.rs:LL:CC\n    |\n-LL |     unsafe { __rust_alloc(layout.size(), layout.align()) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         __rust_alloc(layout.size(), layout.align())\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: inside `std::alloc::alloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n    = note: inside `std::alloc::Global::alloc_impl` at RUSTLIB/alloc/src/alloc.rs:LL:CC"}, {"sha": "ec5f5f5bed3681bedefd4a5f3583be38f618226a", "filename": "src/tools/miri/tests/fail/memleak_rc.64bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2b1646c597329d0a25efa3889b66650f65de1de/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_rc.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2b1646c597329d0a25efa3889b66650f65de1de/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_rc.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_rc.64bit.stderr?ref=a2b1646c597329d0a25efa3889b66650f65de1de", "patch": "@@ -1,8 +1,8 @@\n error: memory leaked: ALLOC (Rust heap, size: 32, align: 8), allocated here:\n   --> RUSTLIB/alloc/src/alloc.rs:LL:CC\n    |\n-LL |     unsafe { __rust_alloc(layout.size(), layout.align()) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         __rust_alloc(layout.size(), layout.align())\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: inside `std::alloc::alloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n    = note: inside `std::alloc::Global::alloc_impl` at RUSTLIB/alloc/src/alloc.rs:LL:CC"}, {"sha": "3258a2be460b0a2684df2dbbf12d0201a8f72f9a", "filename": "src/tools/miri/tests/pass/shims/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2b1646c597329d0a25efa3889b66650f65de1de/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b1646c597329d0a25efa3889b66650f65de1de/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ffs.rs?ref=a2b1646c597329d0a25efa3889b66650f65de1de", "patch": "@@ -31,7 +31,7 @@ fn main() {\n }\n \n fn host_to_target_path(path: String) -> PathBuf {\n-    use std::ffi::{CStr, CString};\n+    use std::ffi::{c_char, CStr, CString};\n \n     let path = CString::new(path).unwrap();\n     let mut out = Vec::with_capacity(1024);"}, {"sha": "f88d695d87e1e57d40dbab9202a4559f3eba40be", "filename": "tests/codegen/alloc-optimisation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a2b1646c597329d0a25efa3889b66650f65de1de/tests%2Fcodegen%2Falloc-optimisation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b1646c597329d0a25efa3889b66650f65de1de/tests%2Fcodegen%2Falloc-optimisation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Falloc-optimisation.rs?ref=a2b1646c597329d0a25efa3889b66650f65de1de", "patch": "@@ -1,12 +1,13 @@\n //\n // no-system-llvm\n // compile-flags: -O\n-#![crate_type=\"lib\"]\n+#![crate_type = \"lib\"]\n \n #[no_mangle]\n pub fn alloc_test(data: u32) {\n     // CHECK-LABEL: @alloc_test\n     // CHECK-NEXT: start:\n+    // CHECK-NEXT: {{.*}} load volatile i8, ptr @__rust_no_alloc_shim_is_unstable, align 1\n     // CHECK-NEXT: ret void\n     let x = Box::new(data);\n     drop(x);"}, {"sha": "e52392b260bd4ebb1106c44de85b9d81e0bb9481", "filename": "tests/codegen/debug-vtable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2b1646c597329d0a25efa3889b66650f65de1de/tests%2Fcodegen%2Fdebug-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b1646c597329d0a25efa3889b66650f65de1de/tests%2Fcodegen%2Fdebug-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fdebug-vtable.rs?ref=a2b1646c597329d0a25efa3889b66650f65de1de", "patch": "@@ -11,8 +11,6 @@\n \n // Make sure that vtables don't have the unnamed_addr attribute when debuginfo is enabled.\n // This helps debuggers more reliably map from dyn pointer to concrete type.\n-// CHECK: @vtable.0 = private constant <{\n-// CHECK: @vtable.1 = private constant <{\n // CHECK: @vtable.2 = private constant <{\n // CHECK: @vtable.3 = private constant <{\n // CHECK: @vtable.4 = private constant <{"}, {"sha": "6f477a796b65d6b1af2746bb28b747511a168d26", "filename": "tests/codegen/vec-optimizes-away.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a2b1646c597329d0a25efa3889b66650f65de1de/tests%2Fcodegen%2Fvec-optimizes-away.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b1646c597329d0a25efa3889b66650f65de1de/tests%2Fcodegen%2Fvec-optimizes-away.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fvec-optimizes-away.rs?ref=a2b1646c597329d0a25efa3889b66650f65de1de", "patch": "@@ -1,12 +1,13 @@\n // ignore-debug: the debug assertions get in the way\n // no-system-llvm\n // compile-flags: -O\n-#![crate_type=\"lib\"]\n+#![crate_type = \"lib\"]\n \n #[no_mangle]\n pub fn sum_me() -> i32 {\n     // CHECK-LABEL: @sum_me\n     // CHECK-NEXT: {{^.*:$}}\n+    // CHECK-NEXT: {{.*}} load volatile i8, ptr @__rust_no_alloc_shim_is_unstable, align 1\n     // CHECK-NEXT: ret i32 6\n     vec![1, 2, 3].iter().sum::<i32>()\n }"}, {"sha": "568e3f9ba1d684cb527a255b81faf004e64052a7", "filename": "tests/run-make/no-alloc-shim/Makefile", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a2b1646c597329d0a25efa3889b66650f65de1de/tests%2Frun-make%2Fno-alloc-shim%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a2b1646c597329d0a25efa3889b66650f65de1de/tests%2Frun-make%2Fno-alloc-shim%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fno-alloc-shim%2FMakefile?ref=a2b1646c597329d0a25efa3889b66650f65de1de", "patch": "@@ -0,0 +1,24 @@\n+include ../tools.mk\n+\n+# ignore-cross-compile\n+# ignore-msvc FIXME(bjorn3) can't figure out how to link with the MSVC toolchain\n+\n+TARGET_LIBDIR = $$($(RUSTC) --print target-libdir)\n+\n+all:\n+\t$(RUSTC) foo.rs --crate-type bin --emit obj -Cpanic=abort\n+ifdef IS_MSVC\n+\t$(CC) $(CFLAGS) $(TMPDIR)/foo.o $(call OUT_EXE,foo) /link $(TARGET_LIBDIR)/liballoc-*.rlib $(TARGET_LIBDIR)/libcore-*.rlib $(TARGET_LIBDIR)/libcompiler_builtins-*.rlib\n+\t$(call OUT_EXE,foo)\n+else\n+\t$(CC) $(CFLAGS) $(TMPDIR)/foo.o $(TARGET_LIBDIR)/liballoc-*.rlib $(TARGET_LIBDIR)/libcore-*.rlib $(TARGET_LIBDIR)/libcompiler_builtins-*.rlib -o $(call RUN_BINFILE,foo)\n+\t$(call RUN_BINFILE,foo)\n+endif\n+\n+\t# Check that linking without __rust_no_alloc_shim_is_unstable defined fails\n+\t$(RUSTC) foo.rs --crate-type bin --emit obj -Cpanic=abort --cfg check_feature_gate\n+ifdef IS_MSVC\n+\t$(CC) $(CFLAGS) $(TMPDIR)/foo.o $(call OUT_EXE,foo) /link $(TARGET_LIBDIR)/liballoc-*.rlib $(TARGET_LIBDIR)/libcore-*.rlib $(TARGET_LIBDIR)/libcompiler_builtins-*.rlib || exit 0 && exit 1\n+else\n+\t$(CC) $(CFLAGS) $(TMPDIR)/foo.o $(TARGET_LIBDIR)/liballoc-*.rlib $(TARGET_LIBDIR)/libcore-*.rlib $(TARGET_LIBDIR)/libcompiler_builtins-*.rlib -o $(call RUN_BINFILE,foo) || exit 0 && exit 1\n+endif"}, {"sha": "a3daec3db391a07af08d149ba35413c27c7dd49d", "filename": "tests/run-make/no-alloc-shim/foo.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a2b1646c597329d0a25efa3889b66650f65de1de/tests%2Frun-make%2Fno-alloc-shim%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b1646c597329d0a25efa3889b66650f65de1de/tests%2Frun-make%2Fno-alloc-shim%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fno-alloc-shim%2Ffoo.rs?ref=a2b1646c597329d0a25efa3889b66650f65de1de", "patch": "@@ -0,0 +1,44 @@\n+#![feature(default_alloc_error_handler)]\n+#![no_std]\n+#![no_main]\n+\n+extern crate alloc;\n+\n+use alloc::alloc::{GlobalAlloc, Layout};\n+\n+#[panic_handler]\n+fn panic_handler(_: &core::panic::PanicInfo) -> ! {\n+    loop {}\n+}\n+\n+#[no_mangle]\n+extern \"C\" fn rust_eh_personality() {\n+    loop {}\n+}\n+\n+#[global_allocator]\n+static ALLOC: Alloc = Alloc;\n+\n+struct Alloc;\n+\n+unsafe impl GlobalAlloc for Alloc {\n+    unsafe fn alloc(&self, _: Layout) -> *mut u8 {\n+        core::ptr::null_mut()\n+    }\n+    unsafe fn dealloc(&self, _: *mut u8, _: Layout) {\n+        todo!()\n+    }\n+}\n+\n+#[cfg(not(check_feature_gate))]\n+#[no_mangle]\n+static __rust_no_alloc_shim_is_unstable: u8 = 0;\n+\n+#[no_mangle]\n+extern \"C\" fn main(_argc: usize, _argv: *const *const i8) -> i32 {\n+    unsafe {\n+        assert_eq!(alloc::alloc::alloc(Layout::new::<()>()), core::ptr::null_mut());\n+    }\n+\n+    0\n+}"}]}