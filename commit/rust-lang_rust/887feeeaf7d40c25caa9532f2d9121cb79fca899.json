{"sha": "887feeeaf7d40c25caa9532f2d9121cb79fca899", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4N2ZlZWVhZjdkNDBjMjVjYWE5NTMyZjJkOTEyMWNiNzlmY2E4OTk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-12T08:42:58Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-19T18:16:04Z"}, "message": "rustc: replace `GenericArgs::with_generic_args` hack with a plain getter.", "tree": {"sha": "b1078b39f5eb7198125a384abe44cfa26eb97bc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1078b39f5eb7198125a384abe44cfa26eb97bc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/887feeeaf7d40c25caa9532f2d9121cb79fca899", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/887feeeaf7d40c25caa9532f2d9121cb79fca899", "html_url": "https://github.com/rust-lang/rust/commit/887feeeaf7d40c25caa9532f2d9121cb79fca899", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/887feeeaf7d40c25caa9532f2d9121cb79fca899/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e79b2a18a21e6b178d73473bb8fdbf3d18c66051", "url": "https://api.github.com/repos/rust-lang/rust/commits/e79b2a18a21e6b178d73473bb8fdbf3d18c66051", "html_url": "https://github.com/rust-lang/rust/commit/e79b2a18a21e6b178d73473bb8fdbf3d18c66051"}], "stats": {"total": 193, "additions": 91, "deletions": 102}, "files": [{"sha": "de8c75345fee45f1f289c9940153cbe6327a383f", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/887feeeaf7d40c25caa9532f2d9121cb79fca899/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887feeeaf7d40c25caa9532f2d9121cb79fca899/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=887feeeaf7d40c25caa9532f2d9121cb79fca899", "patch": "@@ -383,17 +383,13 @@ impl PathSegment {\n         }\n     }\n \n-    // FIXME: hack required because you can't create a static\n-    // `GenericArgs`, so you can't just return a `&GenericArgs`.\n-    pub fn with_generic_args<F, R>(&self, f: F) -> R\n-        where F: FnOnce(&GenericArgs) -> R\n-    {\n-        let dummy = GenericArgs::none();\n-        f(if let Some(ref args) = self.args {\n-            &args\n+    pub fn generic_args(&self) -> &GenericArgs {\n+        if let Some(ref args) = self.args {\n+            args\n         } else {\n-            &dummy\n-        })\n+            const DUMMY: &GenericArgs = &GenericArgs::none();\n+            DUMMY\n+        }\n     }\n }\n \n@@ -449,7 +445,7 @@ pub struct GenericArgs {\n }\n \n impl GenericArgs {\n-    pub fn none() -> Self {\n+    pub const fn none() -> Self {\n         Self {\n             args: HirVec::new(),\n             bindings: HirVec::new(),"}, {"sha": "8111ac44a87ee55dd596503618ae3ffcc14c1bb7", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 19, "deletions": 30, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/887feeeaf7d40c25caa9532f2d9121cb79fca899/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887feeeaf7d40c25caa9532f2d9121cb79fca899/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=887feeeaf7d40c25caa9532f2d9121cb79fca899", "patch": "@@ -1194,12 +1194,11 @@ impl<'a> State<'a> {\n         self.s.word(\".\")?;\n         self.print_ident(segment.ident)?;\n \n-        segment.with_generic_args(|generic_args| {\n-            if !generic_args.args.is_empty() || !generic_args.bindings.is_empty() {\n-                return self.print_generic_args(&generic_args, segment.infer_args, true);\n-            }\n-            Ok(())\n-        })?;\n+        let generic_args = segment.generic_args();\n+        if !generic_args.args.is_empty() || !generic_args.bindings.is_empty() {\n+            self.print_generic_args(generic_args, segment.infer_args, true)?;\n+        }\n+\n         self.print_call_post(base_args)\n     }\n \n@@ -1559,11 +1558,9 @@ impl<'a> State<'a> {\n                 self.s.word(\"::\")?\n             }\n             if segment.ident.name != kw::PathRoot {\n-               self.print_ident(segment.ident)?;\n-               segment.with_generic_args(|generic_args| {\n-                   self.print_generic_args(generic_args, segment.infer_args,\n-                                           colons_before_params)\n-               })?;\n+                self.print_ident(segment.ident)?;\n+                self.print_generic_args(segment.generic_args(), segment.infer_args,\n+                                        colons_before_params)?;\n             }\n         }\n \n@@ -1572,10 +1569,8 @@ impl<'a> State<'a> {\n \n     pub fn print_path_segment(&mut self, segment: &hir::PathSegment) -> io::Result<()> {\n         if segment.ident.name != kw::PathRoot {\n-           self.print_ident(segment.ident)?;\n-           segment.with_generic_args(|generic_args| {\n-               self.print_generic_args(generic_args, segment.infer_args, false)\n-           })?;\n+            self.print_ident(segment.ident)?;\n+            self.print_generic_args(segment.generic_args(), segment.infer_args, false)?;\n         }\n         Ok(())\n     }\n@@ -1600,35 +1595,29 @@ impl<'a> State<'a> {\n                     }\n                     if segment.ident.name != kw::PathRoot {\n                         self.print_ident(segment.ident)?;\n-                        segment.with_generic_args(|generic_args| {\n-                            self.print_generic_args(generic_args,\n-                                                    segment.infer_args,\n-                                                    colons_before_params)\n-                        })?;\n+                        self.print_generic_args(segment.generic_args(),\n+                                                segment.infer_args,\n+                                                colons_before_params)?;\n                     }\n                 }\n \n                 self.s.word(\">\")?;\n                 self.s.word(\"::\")?;\n                 let item_segment = path.segments.last().unwrap();\n                 self.print_ident(item_segment.ident)?;\n-                item_segment.with_generic_args(|generic_args| {\n-                    self.print_generic_args(generic_args,\n-                                            item_segment.infer_args,\n-                                            colons_before_params)\n-                })\n+                self.print_generic_args(item_segment.generic_args(),\n+                                        item_segment.infer_args,\n+                                        colons_before_params)\n             }\n             hir::QPath::TypeRelative(ref qself, ref item_segment) => {\n                 self.s.word(\"<\")?;\n                 self.print_type(qself)?;\n                 self.s.word(\">\")?;\n                 self.s.word(\"::\")?;\n                 self.print_ident(item_segment.ident)?;\n-                item_segment.with_generic_args(|generic_args| {\n-                    self.print_generic_args(generic_args,\n-                                            item_segment.infer_args,\n-                                            colons_before_params)\n-                })\n+                self.print_generic_args(item_segment.generic_args(),\n+                                        item_segment.infer_args,\n+                                        colons_before_params)\n             }\n         }\n     }"}, {"sha": "b6d123c72acd8670e5effb0fc1cd827b6327e50f", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 50, "deletions": 56, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/887feeeaf7d40c25caa9532f2d9121cb79fca899/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887feeeaf7d40c25caa9532f2d9121cb79fca899/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=887feeeaf7d40c25caa9532f2d9121cb79fca899", "patch": "@@ -191,15 +191,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         item_segment: &hir::PathSegment)\n         -> SubstsRef<'tcx>\n     {\n-        let (substs, assoc_bindings, _) = item_segment.with_generic_args(|generic_args| {\n-            self.create_substs_for_ast_path(\n-                span,\n-                def_id,\n-                generic_args,\n-                item_segment.infer_args,\n-                None,\n-            )\n-        });\n+        let (substs, assoc_bindings, _) = self.create_substs_for_ast_path(\n+            span,\n+            def_id,\n+            item_segment.generic_args(),\n+            item_segment.infer_args,\n+            None,\n+        );\n \n         assoc_bindings.first().map(|b| Self::prohibit_assoc_ty_binding(self.tcx(), b.span));\n \n@@ -874,8 +872,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let trait_def = self.tcx().trait_def(trait_def_id);\n \n         if !self.tcx().features().unboxed_closures &&\n-            trait_segment.with_generic_args(|generic_args| generic_args.parenthesized)\n-            != trait_def.paren_sugar {\n+            trait_segment.generic_args().parenthesized != trait_def.paren_sugar\n+        {\n             // For now, require that parenthetical notation be used only with `Fn()` etc.\n             let msg = if trait_def.paren_sugar {\n                 \"the precise format of `Fn`-family traits' type parameters is subject to change. \\\n@@ -887,13 +885,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                              span, GateIssue::Language, msg);\n         }\n \n-        trait_segment.with_generic_args(|generic_args| {\n-            self.create_substs_for_ast_path(span,\n-                                            trait_def_id,\n-                                            generic_args,\n-                                            trait_segment.infer_args,\n-                                            Some(self_ty))\n-        })\n+        self.create_substs_for_ast_path(span,\n+                                        trait_def_id,\n+                                        trait_segment.generic_args(),\n+                                        trait_segment.infer_args,\n+                                        Some(self_ty))\n     }\n \n     fn trait_defines_associated_type_named(&self,\n@@ -1765,47 +1761,45 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             &self, segments: T) -> bool {\n         let mut has_err = false;\n         for segment in segments {\n-            segment.with_generic_args(|generic_args| {\n-                let (mut err_for_lt, mut err_for_ty, mut err_for_ct) = (false, false, false);\n-                for arg in &generic_args.args {\n-                    let (span, kind) = match arg {\n-                        hir::GenericArg::Lifetime(lt) => {\n-                            if err_for_lt { continue }\n-                            err_for_lt = true;\n-                            has_err = true;\n-                            (lt.span, \"lifetime\")\n-                        }\n-                        hir::GenericArg::Type(ty) => {\n-                            if err_for_ty { continue }\n-                            err_for_ty = true;\n-                            has_err = true;\n-                            (ty.span, \"type\")\n-                        }\n-                        hir::GenericArg::Const(ct) => {\n-                            if err_for_ct { continue }\n-                            err_for_ct = true;\n-                            (ct.span, \"const\")\n-                        }\n-                    };\n-                    let mut err = struct_span_err!(\n-                        self.tcx().sess,\n-                        span,\n-                        E0109,\n-                        \"{} arguments are not allowed for this type\",\n-                        kind,\n-                    );\n-                    err.span_label(span, format!(\"{} argument not allowed\", kind));\n-                    err.emit();\n-                    if err_for_lt && err_for_ty && err_for_ct {\n-                        break;\n+            let (mut err_for_lt, mut err_for_ty, mut err_for_ct) = (false, false, false);\n+            for arg in &segment.generic_args().args {\n+                let (span, kind) = match arg {\n+                    hir::GenericArg::Lifetime(lt) => {\n+                        if err_for_lt { continue }\n+                        err_for_lt = true;\n+                        has_err = true;\n+                        (lt.span, \"lifetime\")\n                     }\n-                }\n-                for binding in &generic_args.bindings {\n-                    has_err = true;\n-                    Self::prohibit_assoc_ty_binding(self.tcx(), binding.span);\n+                    hir::GenericArg::Type(ty) => {\n+                        if err_for_ty { continue }\n+                        err_for_ty = true;\n+                        has_err = true;\n+                        (ty.span, \"type\")\n+                    }\n+                    hir::GenericArg::Const(ct) => {\n+                        if err_for_ct { continue }\n+                        err_for_ct = true;\n+                        (ct.span, \"const\")\n+                    }\n+                };\n+                let mut err = struct_span_err!(\n+                    self.tcx().sess,\n+                    span,\n+                    E0109,\n+                    \"{} arguments are not allowed for this type\",\n+                    kind,\n+                );\n+                err.span_label(span, format!(\"{} argument not allowed\", kind));\n+                err.emit();\n+                if err_for_lt && err_for_ty && err_for_ct {\n                     break;\n                 }\n-            })\n+            }\n+            for binding in &segment.generic_args().bindings {\n+                has_err = true;\n+                Self::prohibit_assoc_ty_binding(self.tcx(), binding.span);\n+                break;\n+            }\n         }\n         has_err\n     }"}, {"sha": "9968118d2ece1aa5f83bf043e80a8a6a8c5c7490", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/887feeeaf7d40c25caa9532f2d9121cb79fca899/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887feeeaf7d40c25caa9532f2d9121cb79fca899/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=887feeeaf7d40c25caa9532f2d9121cb79fca899", "patch": "@@ -2809,7 +2809,8 @@ impl Clean<Type> for hir::Ty {\n                     let mut ty_substs = FxHashMap::default();\n                     let mut lt_substs = FxHashMap::default();\n                     let mut ct_substs = FxHashMap::default();\n-                    provided_params.with_generic_args(|generic_args| {\n+                    let generic_args = provided_params.generic_args();\n+                    {\n                         let mut indices: GenericParamCount = Default::default();\n                         for param in generics.params.iter() {\n                             match param.kind {\n@@ -2884,7 +2885,7 @@ impl Clean<Type> for hir::Ty {\n                                 }\n                             }\n                         }\n-                    });\n+                    }\n                     return cx.enter_alias(ty_substs, lt_substs, ct_substs, || ty.clean(cx));\n                 }\n                 resolve_type(cx, path.clean(cx), self.hir_id)\n@@ -3537,7 +3538,7 @@ impl Clean<PathSegment> for hir::PathSegment {\n     fn clean(&self, cx: &DocContext<'_>) -> PathSegment {\n         PathSegment {\n             name: self.ident.name.clean(cx),\n-            args: self.with_generic_args(|generic_args| generic_args.clean(cx))\n+            args: self.generic_args().clean(cx),\n         }\n     }\n }"}, {"sha": "337b84247361d8021d0ab88166afaf0ce3c8314a", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/887feeeaf7d40c25caa9532f2d9121cb79fca899/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887feeeaf7d40c25caa9532f2d9121cb79fca899/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=887feeeaf7d40c25caa9532f2d9121cb79fca899", "patch": "@@ -12,6 +12,8 @@\n #![deny(unused_lifetimes)]\n \n #![feature(bind_by_move_pattern_guards)]\n+#![feature(const_fn)]\n+#![feature(const_transmute)]\n #![feature(crate_visibility_modifier)]\n #![feature(label_break_value)]\n #![feature(nll)]"}, {"sha": "f0cfa5a84a827ddc3fcb4d54fa4d5b42ad495a42", "filename": "src/libsyntax/ptr.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/887feeeaf7d40c25caa9532f2d9121cb79fca899/src%2Flibsyntax%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887feeeaf7d40c25caa9532f2d9121cb79fca899/src%2Flibsyntax%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fptr.rs?ref=887feeeaf7d40c25caa9532f2d9121cb79fca899", "patch": "@@ -133,8 +133,15 @@ impl<T: Encodable> Encodable for P<T> {\n }\n \n impl<T> P<[T]> {\n-    pub fn new() -> P<[T]> {\n-        P { ptr: Default::default() }\n+    pub const fn new() -> P<[T]> {\n+        // HACK(eddyb) bypass the lack of a `const fn` to create an empty `Box<[T]>`\n+        // (as trait methods, `default` in this case, can't be `const fn` yet).\n+        P {\n+            ptr: unsafe {\n+                use std::ptr::NonNull;\n+                std::mem::transmute(NonNull::<[T; 0]>::dangling() as NonNull<[T]>)\n+            },\n+        }\n     }\n \n     #[inline(never)]"}]}