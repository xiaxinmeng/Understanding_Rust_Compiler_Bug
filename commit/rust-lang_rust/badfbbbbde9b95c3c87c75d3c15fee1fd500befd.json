{"sha": "badfbbbbde9b95c3c87c75d3c15fee1fd500befd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhZGZiYmJiZGU5Yjk1YzNjODdjNzVkM2MxNWZlZTFmZDUwMGJlZmQ=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-03-21T19:26:55Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-03-22T09:31:30Z"}, "message": "Fix single binding in closure", "tree": {"sha": "6b68319b8eb913e3bdae21fd1dd7e66334e5f03a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b68319b8eb913e3bdae21fd1dd7e66334e5f03a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/badfbbbbde9b95c3c87c75d3c15fee1fd500befd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/badfbbbbde9b95c3c87c75d3c15fee1fd500befd", "html_url": "https://github.com/rust-lang/rust/commit/badfbbbbde9b95c3c87c75d3c15fee1fd500befd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/badfbbbbde9b95c3c87c75d3c15fee1fd500befd/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e5e2c436584ca9ad02d3c7edec8ffa116f1419f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e5e2c436584ca9ad02d3c7edec8ffa116f1419f", "html_url": "https://github.com/rust-lang/rust/commit/0e5e2c436584ca9ad02d3c7edec8ffa116f1419f"}], "stats": {"total": 64, "additions": 57, "deletions": 7}, "files": [{"sha": "40880f78270c4ff8e05c15176c39d88138c01c55", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/badfbbbbde9b95c3c87c75d3c15fee1fd500befd/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badfbbbbde9b95c3c87c75d3c15fee1fd500befd/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=badfbbbbde9b95c3c87c75d3c15fee1fd500befd", "patch": "@@ -3,9 +3,10 @@ use crate::utils::paths;\n use crate::utils::sugg::Sugg;\n use crate::utils::usage::is_unused;\n use crate::utils::{\n-    expr_block, get_arg_name, in_macro, indent_of, is_allowed, is_expn_of, is_refutable, is_wild, match_qpath,\n-    match_type, match_var, multispan_sugg, remove_blocks, snippet, snippet_block, snippet_with_applicability,\n-    span_lint_and_help, span_lint_and_note, span_lint_and_sugg, span_lint_and_then, walk_ptrs_ty,\n+    expr_block, get_arg_name, get_parent_expr, in_macro, indent_of, is_allowed, is_expn_of, is_refutable, is_wild,\n+    match_qpath, match_type, match_var, multispan_sugg, remove_blocks, snippet, snippet_block,\n+    snippet_with_applicability, span_lint_and_help, span_lint_and_note, span_lint_and_sugg, span_lint_and_then,\n+    walk_ptrs_ty,\n };\n use if_chain::if_chain;\n use rustc::lint::in_external_macro;\n@@ -928,14 +929,27 @@ fn check_match_single_binding<'a>(cx: &LateContext<'_, 'a>, ex: &Expr<'a>, arms:\n                     ),\n                 )\n             } else {\n+                // If we are in closure, we need curly braces around suggestion\n+                let mut indent = \" \".repeat(indent_of(cx, ex.span).unwrap_or(0));\n+                let (mut cbrace_start, mut cbrace_end) = (\"\".to_string(), \"\".to_string());\n+                if let Some(parent_expr) = get_parent_expr(cx, expr) {\n+                    if let ExprKind::Closure(..) = parent_expr.kind {\n+                        cbrace_end = format!(\"\\n{}}}\", indent);\n+                        // Fix body indent due to the closure\n+                        indent = \" \".repeat(indent_of(cx, bind_names).unwrap_or(0));\n+                        cbrace_start = format!(\"{{\\n{}\", indent);\n+                    }\n+                };\n                 (\n                     expr.span,\n                     format!(\n-                        \"let {} = {};\\n{}{}\",\n+                        \"{}let {} = {};\\n{}{}{}\",\n+                        cbrace_start,\n                         snippet_with_applicability(cx, bind_names, \"..\", &mut applicability),\n                         snippet_with_applicability(cx, matched_vars, \"..\", &mut applicability),\n-                        \" \".repeat(indent_of(cx, expr.span).unwrap_or(0)),\n-                        snippet_body\n+                        indent,\n+                        snippet_body,\n+                        cbrace_end\n                     ),\n                 )\n             };"}, {"sha": "90f00aa78712da078d625737713a34763873300f", "filename": "tests/ui/match_single_binding.fixed", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/badfbbbbde9b95c3c87c75d3c15fee1fd500befd/tests%2Fui%2Fmatch_single_binding.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/badfbbbbde9b95c3c87c75d3c15fee1fd500befd/tests%2Fui%2Fmatch_single_binding.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.fixed?ref=badfbbbbde9b95c3c87c75d3c15fee1fd500befd", "patch": "@@ -67,4 +67,14 @@ fn main() {\n     // Lint\n     let Point { x, y } = coords();\n     let product = x * y;\n+    // Lint\n+    let v = vec![Some(1), Some(2), Some(3), Some(4)];\n+    #[allow(clippy::let_and_return)]\n+    let _ = v\n+        .iter()\n+        .map(|i| {\n+            let unwrapped = i.unwrap();\n+            unwrapped\n+        })\n+        .collect::<Vec<u8>>();\n }"}, {"sha": "4a4b290036c79b23872c2f51321591770f569ba5", "filename": "tests/ui/match_single_binding.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/badfbbbbde9b95c3c87c75d3c15fee1fd500befd/tests%2Fui%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badfbbbbde9b95c3c87c75d3c15fee1fd500befd/tests%2Fui%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.rs?ref=badfbbbbde9b95c3c87c75d3c15fee1fd500befd", "patch": "@@ -80,4 +80,13 @@ fn main() {\n     let product = match coords() {\n         Point { x, y } => x * y,\n     };\n+    // Lint\n+    let v = vec![Some(1), Some(2), Some(3), Some(4)];\n+    #[allow(clippy::let_and_return)]\n+    let _ = v\n+        .iter()\n+        .map(|i| match i.unwrap() {\n+            unwrapped => unwrapped,\n+        })\n+        .collect::<Vec<u8>>();\n }"}, {"sha": "cf741a989c2df7cdf74eef5a63cf6e5db058fe47", "filename": "tests/ui/match_single_binding.stderr", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/badfbbbbde9b95c3c87c75d3c15fee1fd500befd/tests%2Fui%2Fmatch_single_binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badfbbbbde9b95c3c87c75d3c15fee1fd500befd/tests%2Fui%2Fmatch_single_binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.stderr?ref=badfbbbbde9b95c3c87c75d3c15fee1fd500befd", "patch": "@@ -150,5 +150,22 @@ LL |     let Point { x, y } = coords();\n LL |     let product = x * y;\n    |\n \n-error: aborting due to 10 previous errors\n+error: this match could be written as a `let` statement\n+  --> $DIR/match_single_binding.rs:88:18\n+   |\n+LL |           .map(|i| match i.unwrap() {\n+   |  __________________^\n+LL | |             unwrapped => unwrapped,\n+LL | |         })\n+   | |_________^\n+   |\n+help: consider using `let` statement\n+   |\n+LL |         .map(|i| {\n+LL |             let unwrapped = i.unwrap();\n+LL |             unwrapped\n+LL |         })\n+   |\n+\n+error: aborting due to 11 previous errors\n "}]}