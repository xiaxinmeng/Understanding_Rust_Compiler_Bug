{"sha": "53f1c38734dd8afdca708a01dced14dd8139bb7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzZjFjMzg3MzRkZDhhZmRjYTcwOGEwMWRjZWQxNGRkODEzOWJiN2I=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-05-24T14:36:44Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-05-28T14:14:34Z"}, "message": "Allow to specify profiling data output directory as -Zself-profile argument.", "tree": {"sha": "3d9fa72ef99a7f76a3f73b60962e78ecf7a7d6ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d9fa72ef99a7f76a3f73b60962e78ecf7a7d6ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53f1c38734dd8afdca708a01dced14dd8139bb7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53f1c38734dd8afdca708a01dced14dd8139bb7b", "html_url": "https://github.com/rust-lang/rust/commit/53f1c38734dd8afdca708a01dced14dd8139bb7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53f1c38734dd8afdca708a01dced14dd8139bb7b/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "url": "https://api.github.com/repos/rust-lang/rust/commits/837b72c805f98d95a44ad4fc2b43ba6a8acb108a", "html_url": "https://github.com/rust-lang/rust/commit/837b72c805f98d95a44ad4fc2b43ba6a8acb108a"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "6dae25dcd5dda88a567d1a7644bcbef1e5395ae4", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53f1c38734dd8afdca708a01dced14dd8139bb7b/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f1c38734dd8afdca708a01dced14dd8139bb7b/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=53f1c38734dd8afdca708a01dced14dd8139bb7b", "patch": "@@ -1447,7 +1447,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"don't interleave execution of lints; allows benchmarking individual lints\"),\n     crate_attr: Vec<String> = (Vec::new(), parse_string_push, [TRACKED],\n         \"inject the given attribute in the crate\"),\n-    self_profile: bool = (false, parse_bool, [UNTRACKED],\n+    self_profile: PgoGenerate = (PgoGenerate::Disabled, parse_pgo_generate, [UNTRACKED],\n         \"run the self profiler and output the raw event data\"),\n     self_profile_events: Option<Vec<String>> = (None, parse_opt_comma_list, [UNTRACKED],\n         \"specifies which kinds of events get recorded by the self profiler\"),"}, {"sha": "d8d71035dbfa6fcc1aab40977de2621605734af5", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/53f1c38734dd8afdca708a01dced14dd8139bb7b/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f1c38734dd8afdca708a01dced14dd8139bb7b/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=53f1c38734dd8afdca708a01dced14dd8139bb7b", "patch": "@@ -9,7 +9,7 @@ use crate::lint;\n use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::middle::allocator::AllocatorKind;\n use crate::middle::dependency_format;\n-use crate::session::config::OutputType;\n+use crate::session::config::{OutputType, PgoGenerate};\n use crate::session::search_paths::{PathKind, SearchPath};\n use crate::util::nodemap::{FxHashMap, FxHashSet};\n use crate::util::common::{duration_to_secs_str, ErrorReported};\n@@ -1137,8 +1137,18 @@ fn build_session_(\n     driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n ) -> Session {\n     let self_profiler =\n-        if sopts.debugging_opts.self_profile {\n-            let profiler = SelfProfiler::new(&sopts.debugging_opts.self_profile_events);\n+        if let PgoGenerate::Enabled(ref d) = sopts.debugging_opts.self_profile {\n+            let directory = if let Some(ref directory) = d {\n+                directory\n+            } else {\n+                std::path::Path::new(\".\")\n+            };\n+\n+            let profiler = SelfProfiler::new(\n+                directory,\n+                sopts.crate_name.as_ref().map(|s| &s[..]),\n+                &sopts.debugging_opts.self_profile_events\n+            );\n             match profiler {\n                 Ok(profiler) => {\n                     crate::ty::query::QueryName::register_with_profiler(&profiler);"}, {"sha": "8624856a4f55ca96fd0da56bc62403445bd47f07", "filename": "src/librustc/util/profiling.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/53f1c38734dd8afdca708a01dced14dd8139bb7b/src%2Flibrustc%2Futil%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f1c38734dd8afdca708a01dced14dd8139bb7b/src%2Flibrustc%2Futil%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fprofiling.rs?ref=53f1c38734dd8afdca708a01dced14dd8139bb7b", "patch": "@@ -1,6 +1,8 @@\n use std::borrow::Cow;\n use std::error::Error;\n+use std::fs;\n use std::mem::{self, Discriminant};\n+use std::path::Path;\n use std::process;\n use std::thread::ThreadId;\n use std::u32;\n@@ -71,10 +73,17 @@ pub struct SelfProfiler {\n }\n \n impl SelfProfiler {\n-    pub fn new(event_filters: &Option<Vec<String>>) -> Result<SelfProfiler, Box<dyn Error>> {\n-        let filename = format!(\"pid-{}.rustc_profile\", process::id());\n-        let path = std::path::Path::new(&filename);\n-        let profiler = Profiler::new(path)?;\n+    pub fn new(\n+        output_directory: &Path,\n+        crate_name: Option<&str>,\n+        event_filters: &Option<Vec<String>>\n+    ) -> Result<SelfProfiler, Box<dyn Error>> {\n+        fs::create_dir_all(output_directory)?;\n+\n+        let crate_name = crate_name.unwrap_or(\"unknown-crate\");\n+        let filename = format!(\"{}-{}.rustc_profile\", crate_name, process::id());\n+        let path = output_directory.join(&filename);\n+        let profiler = Profiler::new(&path)?;\n \n         let query_event_kind = profiler.alloc_string(\"Query\");\n         let generic_activity_event_kind = profiler.alloc_string(\"GenericActivity\");"}]}