{"sha": "1c3a1385a587f0713908c0ae888ffad31f13de11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjM2ExMzg1YTU4N2YwNzEzOTA4YzBhZTg4OGZmYWQzMWYxM2RlMTE=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-04-21T12:31:57Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-04-21T12:31:57Z"}, "message": "Improve autocompletion by looking on the type and name\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "c1f1ea8d9575670d36c09bc7a9c0c0e34fee89d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1f1ea8d9575670d36c09bc7a9c0c0e34fee89d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c3a1385a587f0713908c0ae888ffad31f13de11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c3a1385a587f0713908c0ae888ffad31f13de11", "html_url": "https://github.com/rust-lang/rust/commit/1c3a1385a587f0713908c0ae888ffad31f13de11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c3a1385a587f0713908c0ae888ffad31f13de11/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af3c19e85f55db9277ce9ad5b784df2ccfe3c9e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/af3c19e85f55db9277ce9ad5b784df2ccfe3c9e4", "html_url": "https://github.com/rust-lang/rust/commit/af3c19e85f55db9277ce9ad5b784df2ccfe3c9e4"}], "stats": {"total": 95, "additions": 47, "deletions": 48}, "files": [{"sha": "44288f92e69459b117c00c315a9dc0025e96f9b5", "filename": "crates/ra_ide/src/completion/complete_dot.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c3a1385a587f0713908c0ae888ffad31f13de11/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3a1385a587f0713908c0ae888ffad31f13de11/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=1c3a1385a587f0713908c0ae888ffad31f13de11", "patch": "@@ -7,11 +7,9 @@ use crate::{\n         completion_context::CompletionContext,\n         completion_item::{CompletionKind, Completions},\n     },\n-    // CallInfo,\n     CompletionItem,\n };\n use rustc_hash::FxHashSet;\n-// use std::cmp::Ordering;\n \n /// Complete dot accesses, i.e. fields or methods (and .await syntax).\n pub(super) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {"}, {"sha": "8b96b81db9dcf32e7d28136858f0d86542df7591", "filename": "crates/ra_ide/src/completion/completion_item.rs", "status": "modified", "additions": 2, "deletions": 40, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1c3a1385a587f0713908c0ae888ffad31f13de11/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3a1385a587f0713908c0ae888ffad31f13de11/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=1c3a1385a587f0713908c0ae888ffad31f13de11", "patch": "@@ -305,46 +305,6 @@ impl Builder {\n         self\n     }\n     #[allow(unused)]\n-    pub(crate) fn compute_score(mut self, ctx: &CompletionContext) -> Builder {\n-        let (active_name, active_type) = if let Some(record_field) = &ctx.record_field_syntax {\n-            if let Some((struct_field, _)) = ctx.sema.resolve_record_field(record_field) {\n-                (\n-                    struct_field.name(ctx.db).to_string(),\n-                    struct_field.signature_ty(ctx.db).display(ctx.db).to_string(),\n-                )\n-            } else {\n-                return self;\n-            }\n-        } else if let Some(call_info) = call_info(ctx.db, ctx.file_position) {\n-            if call_info.active_parameter_type().is_some()\n-                && call_info.active_parameter_name().is_some()\n-            {\n-                (\n-                    call_info.active_parameter_name().unwrap(),\n-                    call_info.active_parameter_type().unwrap(),\n-                )\n-            } else {\n-                return self;\n-            }\n-        } else {\n-            return self;\n-        };\n-\n-        // Compute score\n-        // For the same type\n-        if let Some(a_parameter_type) = &self.detail {\n-            if &active_type == a_parameter_type {\n-                // If same type + same name then go top position\n-                if active_name == self.label {\n-                    return self.set_score(CompletionScore::TypeAndNameMatch);\n-                } else {\n-                    return self.set_score(CompletionScore::TypeMatch);\n-                }\n-            }\n-        }\n-\n-        self\n-    }\n     pub(crate) fn set_score(mut self, score: CompletionScore) -> Builder {\n         self.score = Some(score);\n         self\n@@ -363,7 +323,9 @@ impl<'a> Into<CompletionItem> for Builder {\n \n #[derive(Debug, Clone)]\n pub enum CompletionScore {\n+    /// If only type match\n     TypeMatch,\n+    /// If type and name match\n     TypeAndNameMatch,\n }\n "}, {"sha": "bb12a1bdc0cd4b728ffb4e761f0faba2bce00098", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1c3a1385a587f0713908c0ae888ffad31f13de11/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3a1385a587f0713908c0ae888ffad31f13de11/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=1c3a1385a587f0713908c0ae888ffad31f13de11", "patch": "@@ -6,12 +6,13 @@ use stdx::SepBy;\n use test_utils::tested_by;\n \n use crate::{\n+    call_info::call_info,\n     completion::{\n         completion_item::Builder, CompletionContext, CompletionItem, CompletionItemKind,\n         CompletionKind, Completions,\n     },\n     display::{const_label, macro_label, type_label, FunctionSignature},\n-    RootDatabase,\n+    CompletionScore, RootDatabase,\n };\n \n impl Completions {\n@@ -22,7 +23,7 @@ impl Completions {\n         ty: &Type,\n     ) {\n         let is_deprecated = is_deprecated(field, ctx.db);\n-        CompletionItem::new(\n+        let mut completion_item = CompletionItem::new(\n             CompletionKind::Reference,\n             ctx.source_range(),\n             field.name(ctx.db).to_string(),\n@@ -31,8 +32,11 @@ impl Completions {\n         .detail(ty.display(ctx.db).to_string())\n         .set_documentation(field.docs(ctx.db))\n         .set_deprecated(is_deprecated)\n-        .compute_score(ctx)\n-        .add_to(self);\n+        .build();\n+\n+        compute_score(&mut completion_item, ctx);\n+\n+        self.add(completion_item);\n     }\n \n     pub(crate) fn add_tuple_field(&mut self, ctx: &CompletionContext, field: usize, ty: &Type) {\n@@ -295,6 +299,42 @@ impl Completions {\n     }\n }\n \n+pub(crate) fn compute_score(completion_item: &mut CompletionItem, ctx: &CompletionContext) {\n+    let (active_name, active_type) = if let Some(record_field) = &ctx.record_field_syntax {\n+        if let Some((struct_field, _)) = ctx.sema.resolve_record_field(record_field) {\n+            (\n+                struct_field.name(ctx.db).to_string(),\n+                struct_field.signature_ty(ctx.db).display(ctx.db).to_string(),\n+            )\n+        } else {\n+            return;\n+        }\n+    } else if let Some(call_info) = call_info(ctx.db, ctx.file_position) {\n+        if call_info.active_parameter_type().is_some()\n+            && call_info.active_parameter_name().is_some()\n+        {\n+            (call_info.active_parameter_name().unwrap(), call_info.active_parameter_type().unwrap())\n+        } else {\n+            return;\n+        }\n+    } else {\n+        return;\n+    };\n+\n+    // Compute score\n+    // For the same type\n+    if let Some(a_parameter_type) = completion_item.detail() {\n+        if &active_type == a_parameter_type {\n+            // If same type + same name then go top position\n+            if active_name == completion_item.label() {\n+                completion_item.set_score(CompletionScore::TypeAndNameMatch);\n+            } else {\n+                completion_item.set_score(CompletionScore::TypeMatch);\n+            }\n+        }\n+    }\n+}\n+\n enum Params {\n     Named(Vec<String>),\n     Anonymous(usize),"}, {"sha": "b5e2785fe0429a4744619b939f90fe797b87ba27", "filename": "crates/ra_ide/src/display/function_signature.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c3a1385a587f0713908c0ae888ffad31f13de11/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3a1385a587f0713908c0ae888ffad31f13de11/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=1c3a1385a587f0713908c0ae888ffad31f13de11", "patch": "@@ -73,7 +73,7 @@ impl FunctionSignature {\n             if let Some(param_type) = raw_param.split(':').nth(1) {\n                 parameter_types.push(param_type[1..].to_string());\n             } else {\n-                // The unwrap_or_else is useful when you have tuple struct\n+                // useful when you have tuple struct\n                 parameter_types.push(raw_param.clone());\n             }\n             params.push(raw_param);\n@@ -177,7 +177,6 @@ impl From<&'_ ast::FnDef> for FunctionSignature {\n                     has_self_param = true;\n                     let raw_param = self_param.syntax().text().to_string();\n \n-                    // FIXME: better solution ?\n                     res_types.push(\n                         raw_param.split(':').nth(1).unwrap_or_else(|| \" Self\")[1..].to_string(),\n                     );"}]}