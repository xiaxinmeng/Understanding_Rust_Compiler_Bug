{"sha": "90dac3d4bd861c9b46aab646cc1abe90dcc3f4a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZGFjM2Q0YmQ4NjFjOWI0NmFhYjY0NmNjMWFiZTkwZGNjM2Y0YTE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-03-25T21:47:31Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-03-25T21:50:22Z"}, "message": "update README to suggest installing Miri as a component", "tree": {"sha": "4b84b0d7772a4469e46b6d97a97af817b9452695", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b84b0d7772a4469e46b6d97a97af817b9452695"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90dac3d4bd861c9b46aab646cc1abe90dcc3f4a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90dac3d4bd861c9b46aab646cc1abe90dcc3f4a1", "html_url": "https://github.com/rust-lang/rust/commit/90dac3d4bd861c9b46aab646cc1abe90dcc3f4a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90dac3d4bd861c9b46aab646cc1abe90dcc3f4a1/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d758250162865e346fd0ff8ac1b05c511920f53", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d758250162865e346fd0ff8ac1b05c511920f53", "html_url": "https://github.com/rust-lang/rust/commit/1d758250162865e346fd0ff8ac1b05c511920f53"}], "stats": {"total": 36, "additions": 13, "deletions": 23}, "files": [{"sha": "09fa329dc4ecf005219276885349890cfe04632d", "filename": "README.md", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/90dac3d4bd861c9b46aab646cc1abe90dcc3f4a1/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/90dac3d4bd861c9b46aab646cc1abe90dcc3f4a1/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=90dac3d4bd861c9b46aab646cc1abe90dcc3f4a1", "patch": "@@ -27,42 +27,31 @@ list!\n \n ## Running Miri on your own project (and its test suite)\n \n-Install Miri as a cargo subcommand:\n+Install Miri via `rustup`:\n \n ```sh\n-cargo +nightly install --force --git https://github.com/rust-lang/miri miri\n+rustup component add miri\n ```\n \n-If this does not work, try using the nightly version given in\n-[this file](https://raw.githubusercontent.com/rust-lang/miri/master/rust-version). CI\n-should ensure that this nightly always works.\n-\n-You have to use a consistent Rust version for building miri and your project, so\n-remember to either always specify the nightly version manually (like in the\n-example above), overriding it in your project directory as well, or use `rustup\n-default nightly` (or `rustup default nightly-YYYY-MM-DD`) to globally make\n-`nightly` the default toolchain.\n-\n Now you can run your project in Miri:\n \n 1. Run `cargo clean` to eliminate any cached dependencies.  Miri needs your\n    dependencies to be compiled the right way, that would not happen if they have\n    previously already been compiled.\n-2. To run all tests in your project through Miri, use `cargo +nightly miri test`.\n-3. If you have a binary project, you can run it through Miri using `cargo\n-   +nightly miri run`.\n+2. To run all tests in your project through Miri, use `cargo miri test`.\n+3. If you have a binary project, you can run it through Miri using `cargo miri run`.\n \n The first time you run Miri, it will perform some extra setup and install some\n dependencies.  It will ask you for confirmation before installing anything.  If\n-you run Miri on CI, run `cargo +nightly miri setup` to avoid getting interactive\n+you run Miri on CI, run `cargo miri setup` to avoid getting interactive\n questions.\n \n You can pass arguments to Miri after the first `--`, and pass arguments to the\n interpreted program or test suite after the second `--`.  For example, `cargo\n-+nightly miri run -- -Zmiri-disable-validation` runs the program without\n-validation of basic type invariants and references.  `cargo +nightly miri test\n--- -- -Zunstable-options --exclude-should-panic` skips `#[should_panic]` tests,\n-which is a good idea because Miri does not support unwinding or catching panics.\n+miri run -- -Zmiri-disable-validation` runs the program without validation of\n+basic type invariants and references.  `cargo miri test -- -- -Zunstable-options\n+--exclude-should-panic` skips `#[should_panic]` tests, which is a good idea\n+because Miri does not support unwinding or catching panics.\n \n When running code via `cargo miri`, the `miri` config flag is set.  You can\n use this to exclude test cases that will fail under Miri because they do things\n@@ -110,10 +99,14 @@ convenient way is to install Miri using cargo, then you can easily run it on\n other projects:\n \n ```sh\n+rustup component remove miri # avoid having Miri installed twice\n cargo +nightly install --path \"$DIR\" --force # or the nightly in `rust-version`\n cargo +nightly miri setup\n ```\n \n+(We are giving `+nightly` explicitly here all the time because it is important\n+that all of these commands get executed with the same toolchain.)\n+\n If you want to use a different libstd (not the one that comes with the\n nightly), you can do that by running\n \n@@ -124,9 +117,6 @@ XARGO_RUST_SRC=~/src/rust/rustc/src/ cargo +nightly miri setup\n Either way, you can now do `cargo +nightly miri run` to run Miri with your\n local changes on whatever project you are debugging.\n \n-(We are giving `+nightly` explicitly here all the time because it is important\n-that all of these commands get executed with the same toolchain.)\n-\n `cargo miri setup` should end in printing the directory where the libstd was\n built.  For the next step to work, set that as your `MIRI_SYSROOT` environment\n variable:"}]}