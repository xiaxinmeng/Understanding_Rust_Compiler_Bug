{"sha": "f4f71e361ee632a7a09b633934a9c0a11f4a9be7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZjcxZTM2MWVlNjMyYTdhMDliNjMzOTM0YTljMGExMWY0YTliZTc=", "commit": {"author": {"name": "zombiefungus", "email": "divmermarlav@gmail.com", "date": "2020-02-02T13:04:06Z"}, "committer": {"name": "zombiefungus", "email": "divmermarlav@gmail.com", "date": "2020-02-02T13:04:24Z"}, "message": "include requested changes", "tree": {"sha": "ddc461410065761d4f4397e96ea915ea9264609a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddc461410065761d4f4397e96ea915ea9264609a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4f71e361ee632a7a09b633934a9c0a11f4a9be7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4f71e361ee632a7a09b633934a9c0a11f4a9be7", "html_url": "https://github.com/rust-lang/rust/commit/f4f71e361ee632a7a09b633934a9c0a11f4a9be7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4f71e361ee632a7a09b633934a9c0a11f4a9be7/comments", "author": null, "committer": null, "parents": [{"sha": "7d527159457420d55f1ee2f70615098a10176b91", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d527159457420d55f1ee2f70615098a10176b91", "html_url": "https://github.com/rust-lang/rust/commit/7d527159457420d55f1ee2f70615098a10176b91"}], "stats": {"total": 55, "additions": 28, "deletions": 27}, "files": [{"sha": "6352c71ef18c387866ce06842c510e1a774d704f", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f4f71e361ee632a7a09b633934a9c0a11f4a9be7/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f71e361ee632a7a09b633934a9c0a11f4a9be7/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=f4f71e361ee632a7a09b633934a9c0a11f4a9be7", "patch": "@@ -22,7 +22,7 @@ use crate::{\n         diagnostics::DefDiagnostic, mod_resolution::ModDir, path_resolution::ReachedFixedPoint,\n         raw, BuiltinShadowMode, CrateDefMap, ModuleData, ModuleOrigin, ResolveMode,\n     },\n-    path::{ModPath, PathKind},\n+    path::{ImportAlias, ModPath, PathKind},\n     per_ns::PerNs,\n     visibility::Visibility,\n     AdtId, AstId, ConstLoc, ContainerId, EnumLoc, EnumVariantId, FunctionLoc, ImplLoc, Intern,\n@@ -439,8 +439,9 @@ where\n             match import.path.segments.last() {\n                 Some(last_segment) => {\n                     let name = match &import.alias {\n-                        raw::ImportAlias::Alias(name) => name.clone(),\n-                        _ => last_segment.clone(), // \"use as ;\" and \"use as _;\" are treated the same way\n+                        Some(ImportAlias::Alias(name)) => name.clone(),\n+                        Some(ImportAlias::Underscore) => last_segment.clone(), // FIXME rust-analyzer#2736\n+                        None => last_segment.clone(),\n                     };\n                     log::debug!(\"resolved import {:?} ({:?}) to {:?}\", name, import, def);\n "}, {"sha": "650cf1f98b0b10407bfd62785d04f0da9e5370ca", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f4f71e361ee632a7a09b633934a9c0a11f4a9be7/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f71e361ee632a7a09b633934a9c0a11f4a9be7/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=f4f71e361ee632a7a09b633934a9c0a11f4a9be7", "patch": "@@ -22,8 +22,11 @@ use ra_syntax::{\n use test_utils::tested_by;\n \n use crate::{\n-    attr::Attrs, db::DefDatabase, path::ModPath, visibility::RawVisibility, FileAstId, HirFileId,\n-    InFile,\n+    attr::Attrs,\n+    db::DefDatabase,\n+    path::{ImportAlias, ModPath},\n+    visibility::RawVisibility,\n+    FileAstId, HirFileId, InFile,\n };\n \n /// `RawItems` is a set of top-level items in a file (except for impls).\n@@ -145,21 +148,14 @@ impl_arena_id!(Import);\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ImportData {\n     pub(super) path: ModPath,\n-    pub(super) alias: ImportAlias,\n+    pub(super) alias: Option<ImportAlias>,\n     pub(super) is_glob: bool,\n     pub(super) is_prelude: bool,\n     pub(super) is_extern_crate: bool,\n     pub(super) is_macro_use: bool,\n     pub(super) visibility: RawVisibility,\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq)]\n-pub enum ImportAlias {\n-    NoAlias,\n-    Unnamed, // use Foo as _;\n-    Alias(Name),\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub(super) struct Def(RawId);\n impl_arena_id!(Def);\n@@ -360,10 +356,10 @@ impl RawItemsCollector {\n             let path = ModPath::from_name_ref(&name_ref);\n             let visibility =\n                 RawVisibility::from_ast_with_hygiene(extern_crate.visibility(), &self.hygiene);\n-            let alias = extern_crate.alias().map_or(ImportAlias::NoAlias, |a| {\n+            let alias = extern_crate.alias().map(|a| {\n                 a.name()\n                     .map(|it| it.as_name())\n-                    .map_or(ImportAlias::Unnamed, |a| ImportAlias::Alias(a))\n+                    .map_or(ImportAlias::Underscore, |a| ImportAlias::Alias(a))\n             });\n             let attrs = self.parse_attrs(&extern_crate);\n             // FIXME: cfg_attr"}, {"sha": "fb7692191a745995baff7d9ebdc4c91ec2cd797e", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f4f71e361ee632a7a09b633934a9c0a11f4a9be7/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f71e361ee632a7a09b633934a9c0a11f4a9be7/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=f4f71e361ee632a7a09b633934a9c0a11f4a9be7", "patch": "@@ -34,6 +34,14 @@ pub enum PathKind {\n     DollarCrate(CrateId),\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub enum ImportAlias {\n+    /// Unnamed alias, as in `use Foo as _;`\n+    Underscore,\n+    /// Named alias\n+    Alias(Name),\n+}\n+\n impl ModPath {\n     pub fn from_src(path: ast::Path, hygiene: &Hygiene) -> Option<ModPath> {\n         lower::lower_path(path, hygiene).map(|it| it.mod_path)\n@@ -57,12 +65,7 @@ impl ModPath {\n     pub(crate) fn expand_use_item(\n         item_src: InFile<ast::UseItem>,\n         hygiene: &Hygiene,\n-        mut cb: impl FnMut(\n-            ModPath,\n-            &ast::UseTree,\n-            /* is_glob */ bool,\n-            crate::nameres::raw::ImportAlias,\n-        ),\n+        mut cb: impl FnMut(ModPath, &ast::UseTree, /* is_glob */ bool, Option<ImportAlias>),\n     ) {\n         if let Some(tree) = item_src.value.use_tree() {\n             lower::lower_use_tree(None, tree, hygiene, &mut cb);"}, {"sha": "d2bc9d1934547f761b9ca2fc50017ae129ae9179", "filename": "crates/ra_hir_def/src/path/lower/lower_use.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f4f71e361ee632a7a09b633934a9c0a11f4a9be7/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f71e361ee632a7a09b633934a9c0a11f4a9be7/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs?ref=f4f71e361ee632a7a09b633934a9c0a11f4a9be7", "patch": "@@ -8,14 +8,13 @@ use hir_expand::{hygiene::Hygiene, name::AsName};\n use ra_syntax::ast::{self, NameOwner};\n use test_utils::tested_by;\n \n-use crate::nameres::raw::ImportAlias;\n-use crate::path::{ModPath, PathKind};\n+use crate::path::{ImportAlias, ModPath, PathKind};\n \n pub(crate) fn lower_use_tree(\n     prefix: Option<ModPath>,\n     tree: ast::UseTree,\n     hygiene: &Hygiene,\n-    cb: &mut dyn FnMut(ModPath, &ast::UseTree, bool, ImportAlias),\n+    cb: &mut dyn FnMut(ModPath, &ast::UseTree, bool, Option<ImportAlias>),\n ) {\n     if let Some(use_tree_list) = tree.use_tree_list() {\n         let prefix = match tree.path() {\n@@ -32,8 +31,10 @@ pub(crate) fn lower_use_tree(\n             lower_use_tree(prefix.clone(), child_tree, hygiene, cb);\n         }\n     } else {\n-        let alias = tree.alias().map_or(ImportAlias::NoAlias, |a| {\n-            a.name().map(|it| it.as_name()).map_or(ImportAlias::Unnamed, |a| ImportAlias::Alias(a))\n+        let alias = tree.alias().map(|a| {\n+            a.name()\n+                .map(|it| it.as_name())\n+                .map_or(ImportAlias::Underscore, |a| ImportAlias::Alias(a))\n         });\n         let is_glob = tree.has_star();\n         if let Some(ast_path) = tree.path() {\n@@ -57,7 +58,7 @@ pub(crate) fn lower_use_tree(\n         } else if is_glob {\n             tested_by!(glob_enum_group);\n             if let Some(prefix) = prefix {\n-                cb(prefix, &tree, is_glob, ImportAlias::NoAlias)\n+                cb(prefix, &tree, is_glob, None)\n             }\n         }\n     }"}]}