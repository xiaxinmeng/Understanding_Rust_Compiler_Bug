{"sha": "5028c669fcdcb876e28c009b036b7d3d7e5006ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMjhjNjY5ZmNkY2I4NzZlMjhjMDA5YjAzNmI3ZDNkN2U1MDA2YWI=", "commit": {"author": {"name": "Robert Clipsham", "email": "robert@octarineparrot.com", "date": "2014-08-29T09:18:25Z"}, "committer": {"name": "Robert Clipsham", "email": "robert@octarineparrot.com", "date": "2014-08-29T09:18:25Z"}, "message": "Modifications to liblibc for raw/custom socket support.", "tree": {"sha": "125abc35dc368a7d02d0955f76043f307a67cc52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/125abc35dc368a7d02d0955f76043f307a67cc52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5028c669fcdcb876e28c009b036b7d3d7e5006ab", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5028c669fcdcb876e28c009b036b7d3d7e5006ab", "html_url": "https://github.com/rust-lang/rust/commit/5028c669fcdcb876e28c009b036b7d3d7e5006ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5028c669fcdcb876e28c009b036b7d3d7e5006ab/comments", "author": {"login": "mrmonday", "id": 165689, "node_id": "MDQ6VXNlcjE2NTY4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/165689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrmonday", "html_url": "https://github.com/mrmonday", "followers_url": "https://api.github.com/users/mrmonday/followers", "following_url": "https://api.github.com/users/mrmonday/following{/other_user}", "gists_url": "https://api.github.com/users/mrmonday/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrmonday/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrmonday/subscriptions", "organizations_url": "https://api.github.com/users/mrmonday/orgs", "repos_url": "https://api.github.com/users/mrmonday/repos", "events_url": "https://api.github.com/users/mrmonday/events{/privacy}", "received_events_url": "https://api.github.com/users/mrmonday/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mrmonday", "id": 165689, "node_id": "MDQ6VXNlcjE2NTY4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/165689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrmonday", "html_url": "https://github.com/mrmonday", "followers_url": "https://api.github.com/users/mrmonday/followers", "following_url": "https://api.github.com/users/mrmonday/following{/other_user}", "gists_url": "https://api.github.com/users/mrmonday/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrmonday/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrmonday/subscriptions", "organizations_url": "https://api.github.com/users/mrmonday/orgs", "repos_url": "https://api.github.com/users/mrmonday/repos", "events_url": "https://api.github.com/users/mrmonday/events{/privacy}", "received_events_url": "https://api.github.com/users/mrmonday/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3549ee202355731003002e813cf071cd89f04cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3549ee202355731003002e813cf071cd89f04cb", "html_url": "https://github.com/rust-lang/rust/commit/e3549ee202355731003002e813cf071cd89f04cb"}], "stats": {"total": 159, "additions": 152, "deletions": 7}, "files": [{"sha": "9eb0019a87650d484dbbc5454770ac82587f56ad", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 152, "deletions": 7, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/5028c669fcdcb876e28c009b036b7d3d7e5006ab/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5028c669fcdcb876e28c009b036b7d3d7e5006ab/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=5028c669fcdcb876e28c009b036b7d3d7e5006ab", "patch": "@@ -116,13 +116,14 @@ pub use consts::os::posix88::{S_IFDIR, S_IFIFO, S_IFMT, S_IFREG, S_IFLNK};\n pub use consts::os::posix88::{S_IREAD, S_IRUSR, S_IRWXU, S_IWUSR};\n pub use consts::os::posix88::{STDERR_FILENO, STDIN_FILENO, S_IXUSR};\n pub use consts::os::posix88::{STDOUT_FILENO, W_OK, X_OK};\n-pub use consts::os::bsd44::{AF_INET, AF_INET6, SOCK_STREAM, SOCK_DGRAM};\n+pub use consts::os::bsd44::{AF_INET, AF_INET6, SOCK_STREAM, SOCK_DGRAM, SOCK_RAW};\n pub use consts::os::bsd44::{IPPROTO_IP, IPPROTO_IPV6, IPPROTO_TCP, TCP_NODELAY};\n pub use consts::os::bsd44::{SOL_SOCKET, SO_KEEPALIVE, SO_ERROR};\n pub use consts::os::bsd44::{SO_REUSEADDR, SO_BROADCAST, SHUT_WR, IP_MULTICAST_LOOP};\n pub use consts::os::bsd44::{IP_ADD_MEMBERSHIP, IP_DROP_MEMBERSHIP};\n pub use consts::os::bsd44::{IPV6_ADD_MEMBERSHIP, IPV6_DROP_MEMBERSHIP};\n-pub use consts::os::bsd44::{IP_MULTICAST_TTL, IP_TTL, SHUT_RD};\n+pub use consts::os::bsd44::{IP_MULTICAST_TTL, IP_TTL, IP_HDRINCL, SHUT_RD};\n+pub use consts::os::extra::{IPPROTO_RAW};\n \n pub use funcs::c95::ctype::{isalnum, isalpha, iscntrl, isdigit};\n pub use funcs::c95::ctype::{islower, isprint, ispunct, isspace};\n@@ -178,24 +179,28 @@ pub use funcs::bsd43::{shutdown};\n #[cfg(unix)] pub use consts::os::posix88::{ECANCELED, SIGINT, EINPROGRESS};\n #[cfg(unix)] pub use consts::os::posix88::{ENOSYS, ENOTTY, ETIMEDOUT, EMFILE};\n #[cfg(unix)] pub use consts::os::posix88::{SIGTERM, SIGKILL, SIGPIPE, PROT_NONE};\n-#[cfg(unix)] pub use consts::os::posix01::{SIG_IGN};\n+#[cfg(unix)] pub use consts::os::posix01::{SIG_IGN, F_GETFL, F_SETFL};\n #[cfg(unix)] pub use consts::os::bsd44::{AF_UNIX};\n+#[cfg(unix)] pub use consts::os::extra::{O_NONBLOCK};\n \n #[cfg(unix)] pub use types::os::common::posix01::{pthread_t, timespec, timezone};\n \n #[cfg(unix)] pub use types::os::arch::posix88::{uid_t, gid_t};\n #[cfg(unix)] pub use types::os::arch::posix01::{pthread_attr_t};\n #[cfg(unix)] pub use types::os::arch::posix01::{stat, utimbuf};\n+#[cfg(unix)] pub use types::os::common::bsd44::{ifaddrs};\n #[cfg(unix)] pub use funcs::posix88::unistd::{sysconf, setgid, setsid, setuid, pread, pwrite};\n #[cfg(unix)] pub use funcs::posix88::unistd::{getgid, getuid};\n #[cfg(unix)] pub use funcs::posix88::unistd::{_PC_NAME_MAX, utime, nanosleep, pathconf, link};\n #[cfg(unix)] pub use funcs::posix88::unistd::{chown};\n #[cfg(unix)] pub use funcs::posix88::mman::{mmap, munmap, mprotect};\n #[cfg(unix)] pub use funcs::posix88::dirent::{opendir, readdir_r, closedir};\n #[cfg(unix)] pub use funcs::posix88::fcntl::{fcntl};\n+#[cfg(unix)] pub use funcs::posix88::net::{if_nametoindex};\n #[cfg(unix)] pub use funcs::posix01::stat_::{lstat};\n #[cfg(unix)] pub use funcs::posix01::unistd::{fsync, ftruncate};\n #[cfg(unix)] pub use funcs::posix01::unistd::{readlink, symlink};\n+#[cfg(unix)] pub use funcs::bsd43::{getifaddrs, freeifaddrs};\n \n #[cfg(windows)] pub use consts::os::c95::{WSAECONNREFUSED, WSAECONNRESET, WSAEACCES};\n #[cfg(windows)] pub use consts::os::c95::{WSAEWOULDBLOCK, WSAENOTCONN, WSAECONNABORTED};\n@@ -236,6 +241,7 @@ pub use funcs::bsd43::{shutdown};\n #[cfg(windows)] pub use consts::os::extra::{ERROR_PIPE_CONNECTED, WAIT_OBJECT_0};\n #[cfg(windows)] pub use consts::os::extra::{ERROR_NOT_FOUND};\n #[cfg(windows)] pub use consts::os::extra::{ERROR_OPERATION_ABORTED};\n+#[cfg(windows)] pub use consts::os::extra::{FIONBIO};\n #[cfg(windows)] pub use types::os::common::bsd44::{SOCKET};\n #[cfg(windows)] pub use types::os::common::posix01::{stat, utimbuf};\n #[cfg(windows)] pub use types::os::arch::extra::{HANDLE, BOOL, LPSECURITY_ATTRIBUTES};\n@@ -268,13 +274,18 @@ pub use funcs::bsd43::{shutdown};\n #[cfg(windows)] pub use funcs::extra::kernel32::{DisconnectNamedPipe, OpenProcess};\n #[cfg(windows)] pub use funcs::extra::kernel32::{MoveFileExW, VirtualProtect};\n #[cfg(windows)] pub use funcs::extra::msvcrt::{get_osfhandle, open_osfhandle};\n+#[cfg(windows)] pub use funcs::extra::winsock::{ioctlsocket};\n \n #[cfg(target_os = \"linux\")] #[cfg(target_os = \"android\")]\n #[cfg(target_os = \"freebsd\")] #[cfg(target_os = \"dragonfly\")]\n pub use consts::os::posix01::{CLOCK_REALTIME, CLOCK_MONOTONIC};\n \n #[cfg(target_os = \"linux\")] #[cfg(target_os = \"android\")]\n pub use funcs::posix01::unistd::{fdatasync};\n+#[cfg(target_os = \"linux\")] #[cfg(target_os = \"android\")]\n+pub use types::os::arch::extra::{sockaddr_ll};\n+#[cfg(target_os = \"linux\")] #[cfg(target_os = \"android\")]\n+pub use consts::os::extra::{AF_PACKET};\n \n #[cfg(unix, not(target_os = \"freebsd\"))]\n pub use consts::os::extra::{MAP_STACK};\n@@ -400,6 +411,7 @@ pub mod types {\n                 pub type sighandler_t = size_t;\n             }\n             pub mod bsd44 {\n+                use types::common::c95::{c_void};\n                 use types::os::arch::c95::{c_char, c_int, c_uint};\n \n                 pub type socklen_t = u32;\n@@ -477,6 +489,18 @@ pub mod types {\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char, ..108]\n                 }\n+\n+                #[repr(C)]\n+                pub struct ifaddrs {\n+                    pub ifa_next: *mut ifaddrs,\n+                    pub ifa_name: *mut c_char,\n+                    pub ifa_flags: c_uint,\n+                    pub ifa_addr: *mut sockaddr,\n+                    pub ifa_netmask: *mut sockaddr,\n+                    pub ifa_ifu: *mut sockaddr, // FIXME This should be a union\n+                    pub ifa_data: *mut c_void\n+                }\n+\n             }\n         }\n \n@@ -675,7 +699,20 @@ pub mod types {\n             }\n             pub mod posix08 {}\n             pub mod bsd44 {}\n-            pub mod extra {}\n+            pub mod extra {\n+                use types::os::arch::c95::{c_ushort, c_int, c_uchar};\n+                #[repr(C)]\n+                pub struct sockaddr_ll {\n+                    pub sll_family: c_ushort,\n+                    pub sll_protocol: c_ushort,\n+                    pub sll_ifindex: c_int,\n+                    pub sll_hatype: c_ushort,\n+                    pub sll_pkttype: c_uchar,\n+                    pub sll_halen: c_uchar,\n+                    pub sll_addr: [c_uchar, ..8]\n+                }\n+            }\n+\n         }\n \n         #[cfg(target_arch = \"x86_64\")]\n@@ -763,6 +800,17 @@ pub mod types {\n             pub mod bsd44 {\n             }\n             pub mod extra {\n+                use types::os::arch::c95::{c_ushort, c_int, c_uchar};\n+                pub struct sockaddr_ll {\n+                    pub sll_family: c_ushort,\n+                    pub sll_protocol: c_ushort,\n+                    pub sll_ifindex: c_int,\n+                    pub sll_hatype: c_ushort,\n+                    pub sll_pkttype: c_uchar,\n+                    pub sll_halen: c_uchar,\n+                    pub sll_addr: [c_uchar, ..8]\n+                }\n+\n             }\n         }\n     }\n@@ -812,6 +860,7 @@ pub mod types {\n                 pub type sighandler_t = size_t;\n             }\n             pub mod bsd44 {\n+                use types::common::c95::{c_void};\n                 use types::os::arch::c95::{c_char, c_int, c_uint};\n \n                 pub type socklen_t = u32;\n@@ -884,6 +933,18 @@ pub mod types {\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char, ..104]\n                 }\n+                #[repr(C)]\n+                pub struct ifaddrs {\n+                    pub ifa_next: *mut ifaddrs,\n+                    pub ifa_name: *mut c_char,\n+                    pub ifa_flags: c_uint,\n+                    pub ifa_addr: *mut sockaddr,\n+                    pub ifa_netmask: *mut sockaddr,\n+                    pub ifa_dstaddr: *mut sockaddr,\n+                    pub ifa_data: *mut c_void\n+                }\n+\n+\n             }\n         }\n \n@@ -1628,6 +1689,7 @@ pub mod types {\n             }\n \n             pub mod bsd44 {\n+                use types::common::c95::{c_void};\n                 use types::os::arch::c95::{c_char, c_int, c_uint};\n \n                 pub type socklen_t = c_int;\n@@ -1700,6 +1762,16 @@ pub mod types {\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char, ..104]\n                 }\n+                #[repr(C)]\n+                pub struct ifaddrs {\n+                    pub ifa_next: *mut ifaddrs,\n+                    pub ifa_name: *mut c_char,\n+                    pub ifa_flags: c_uint,\n+                    pub ifa_addr: *mut sockaddr,\n+                    pub ifa_netmask: *mut sockaddr,\n+                    pub ifa_dstaddr: *mut sockaddr,\n+                    pub ifa_data: *mut c_void\n+                }\n             }\n         }\n \n@@ -2032,6 +2104,7 @@ pub mod consts {\n             pub static AF_INET6: c_int = 23;\n             pub static SOCK_STREAM: c_int = 1;\n             pub static SOCK_DGRAM: c_int = 2;\n+            pub static SOCK_RAW: c_int = 3;\n             pub static IPPROTO_TCP: c_int = 6;\n             pub static IPPROTO_IP: c_int = 0;\n             pub static IPPROTO_IPV6: c_int = 41;\n@@ -2042,6 +2115,7 @@ pub mod consts {\n             pub static IPV6_ADD_MEMBERSHIP: c_int = 5;\n             pub static IPV6_DROP_MEMBERSHIP: c_int = 6;\n             pub static IP_TTL: c_int = 4;\n+            pub static IP_HDRINCL: c_int = 2;\n \n             pub static TCP_NODELAY: c_int = 0x0001;\n             pub static SOL_SOCKET: c_int = 0xffff;\n@@ -2050,12 +2124,14 @@ pub mod consts {\n             pub static SO_REUSEADDR: c_int = 4;\n             pub static SO_ERROR: c_int = 0x1007;\n \n+            pub static IFF_LOOPBACK: c_int = 4;\n+\n             pub static SHUT_RD: c_int = 0;\n             pub static SHUT_WR: c_int = 1;\n             pub static SHUT_RDWR: c_int = 2;\n         }\n         pub mod extra {\n-            use types::os::arch::c95::c_int;\n+            use types::os::arch::c95::{c_int, c_long};\n             use types::os::arch::extra::{WORD, DWORD, BOOL, HANDLE};\n \n             pub static TRUE : BOOL = 1;\n@@ -2279,6 +2355,10 @@ pub mod consts {\n             pub static PIPE_ACCEPT_REMOTE_CLIENTS: DWORD = 0x00000000;\n             pub static PIPE_REJECT_REMOTE_CLIENTS: DWORD = 0x00000008;\n             pub static PIPE_UNLIMITED_INSTANCES: DWORD = 255;\n+\n+            pub static IPPROTO_RAW: c_int = 255;\n+\n+            pub static FIONBIO: c_long = -0x7FFB9982;\n         }\n         pub mod sysconf {\n         }\n@@ -2737,6 +2817,12 @@ pub mod consts {\n         pub mod posix01 {\n             use types::os::arch::c95::{c_int, size_t};\n \n+            pub static F_DUPFD : c_int = 0;\n+            pub static F_GETFD : c_int = 1;\n+            pub static F_SETFD : c_int = 2;\n+            pub static F_GETFL : c_int = 3;\n+            pub static F_SETFL : c_int = 4;\n+\n             pub static SIGTRAP : c_int = 5;\n             pub static SIGPIPE: c_int = 13;\n             pub static SIG_IGN: size_t = 1;\n@@ -2826,17 +2912,21 @@ pub mod consts {\n             pub static MADV_UNMERGEABLE : c_int = 13;\n             pub static MADV_HWPOISON : c_int = 100;\n \n+            pub static IFF_LOOPBACK: c_int = 0x8;\n+\n             pub static AF_UNIX: c_int = 1;\n             pub static AF_INET: c_int = 2;\n             pub static AF_INET6: c_int = 10;\n             pub static SOCK_STREAM: c_int = 1;\n             pub static SOCK_DGRAM: c_int = 2;\n+            pub static SOCK_RAW: c_int = 3;\n             pub static IPPROTO_TCP: c_int = 6;\n             pub static IPPROTO_IP: c_int = 0;\n             pub static IPPROTO_IPV6: c_int = 41;\n             pub static IP_MULTICAST_TTL: c_int = 33;\n             pub static IP_MULTICAST_LOOP: c_int = 34;\n             pub static IP_TTL: c_int = 2;\n+            pub static IP_HDRINCL: c_int = 3;\n             pub static IP_ADD_MEMBERSHIP: c_int = 35;\n             pub static IP_DROP_MEMBERSHIP: c_int = 36;\n             pub static IPV6_ADD_MEMBERSHIP: c_int = 20;\n@@ -2903,8 +2993,12 @@ pub mod consts {\n         pub mod extra {\n             use types::os::arch::c95::c_int;\n \n+            pub static AF_PACKET : c_int = 17;\n+            pub static IPPROTO_RAW : c_int = 255;\n+\n             pub static O_RSYNC : c_int = 1052672;\n             pub static O_DSYNC : c_int = 4096;\n+            pub static O_NONBLOCK : c_int = 2048;\n             pub static O_SYNC : c_int = 1052672;\n \n             pub static PROT_GROWSDOWN : c_int = 0x010000000;\n@@ -3240,6 +3334,12 @@ pub mod consts {\n         pub mod posix01 {\n             use types::os::arch::c95::{c_int, size_t};\n \n+            pub static F_DUPFD : c_int = 0;\n+            pub static F_GETFD : c_int = 1;\n+            pub static F_SETFD : c_int = 2;\n+            pub static F_GETFL : c_int = 3;\n+            pub static F_SETFL : c_int = 4;\n+\n             pub static SIGTRAP : c_int = 5;\n             pub static SIGPIPE: c_int = 13;\n             pub static SIG_IGN: size_t = 1;\n@@ -3338,12 +3438,14 @@ pub mod consts {\n             pub static AF_UNIX: c_int = 1;\n             pub static SOCK_STREAM: c_int = 1;\n             pub static SOCK_DGRAM: c_int = 2;\n+            pub static SOCK_RAW: c_int = 3;\n             pub static IPPROTO_TCP: c_int = 6;\n             pub static IPPROTO_IP: c_int = 0;\n             pub static IPPROTO_IPV6: c_int = 41;\n             pub static IP_MULTICAST_TTL: c_int = 10;\n             pub static IP_MULTICAST_LOOP: c_int = 11;\n             pub static IP_TTL: c_int = 4;\n+            pub static IP_HDRINCL: c_int = 2;\n             pub static IP_ADD_MEMBERSHIP: c_int = 12;\n             pub static IP_DROP_MEMBERSHIP: c_int = 13;\n             pub static IPV6_ADD_MEMBERSHIP: c_int = 12;\n@@ -3357,6 +3459,8 @@ pub mod consts {\n             pub static SO_REUSEADDR: c_int = 0x0004;\n             pub static SO_ERROR: c_int = 0x1007;\n \n+            pub static IFF_LOOPBACK: c_int = 0x8;\n+\n             pub static SHUT_RD: c_int = 0;\n             pub static SHUT_WR: c_int = 1;\n             pub static SHUT_RDWR: c_int = 2;\n@@ -3365,6 +3469,7 @@ pub mod consts {\n             use types::os::arch::c95::c_int;\n \n             pub static O_SYNC : c_int = 128;\n+            pub static O_NONBLOCK : c_int = 4;\n             pub static CTL_KERN: c_int = 1;\n             pub static KERN_PROC: c_int = 14;\n             #[cfg(target_os = \"freebsd\")]\n@@ -3379,6 +3484,8 @@ pub mod consts {\n             pub static MAP_STACK : c_int = 0x0400;\n             pub static MAP_NOSYNC : c_int = 0x0800;\n             pub static MAP_NOCORE : c_int = 0x020000;\n+\n+            pub static IPPROTO_RAW : c_int = 255;\n         }\n         pub mod sysconf {\n             use types::os::arch::c95::c_int;\n@@ -3646,6 +3753,12 @@ pub mod consts {\n         pub mod posix01 {\n             use types::os::arch::c95::{c_int, size_t};\n \n+            pub static F_DUPFD : c_int = 0;\n+            pub static F_GETFD : c_int = 1;\n+            pub static F_SETFD : c_int = 2;\n+            pub static F_GETFL : c_int = 3;\n+            pub static F_SETFL : c_int = 4;\n+\n             pub static SIGTRAP : c_int = 5;\n             pub static SIGPIPE: c_int = 13;\n             pub static SIG_IGN: size_t = 1;\n@@ -3728,12 +3841,14 @@ pub mod consts {\n             pub static AF_INET6: c_int = 30;\n             pub static SOCK_STREAM: c_int = 1;\n             pub static SOCK_DGRAM: c_int = 2;\n+            pub static SOCK_RAW: c_int = 3;\n             pub static IPPROTO_TCP: c_int = 6;\n             pub static IPPROTO_IP: c_int = 0;\n             pub static IPPROTO_IPV6: c_int = 41;\n             pub static IP_MULTICAST_TTL: c_int = 10;\n             pub static IP_MULTICAST_LOOP: c_int = 11;\n             pub static IP_TTL: c_int = 4;\n+            pub static IP_HDRINCL: c_int = 2;\n             pub static IP_ADD_MEMBERSHIP: c_int = 12;\n             pub static IP_DROP_MEMBERSHIP: c_int = 13;\n             pub static IPV6_ADD_MEMBERSHIP: c_int = 12;\n@@ -3747,6 +3862,8 @@ pub mod consts {\n             pub static SO_REUSEADDR: c_int = 0x0004;\n             pub static SO_ERROR: c_int = 0x1007;\n \n+            pub static IFF_LOOPBACK: c_int = 0x8;\n+\n             pub static SHUT_RD: c_int = 0;\n             pub static SHUT_WR: c_int = 1;\n             pub static SHUT_RDWR: c_int = 2;\n@@ -3756,6 +3873,7 @@ pub mod consts {\n \n             pub static O_DSYNC : c_int = 4194304;\n             pub static O_SYNC : c_int = 128;\n+            pub static O_NONBLOCK : c_int = 4;\n             pub static F_FULLFSYNC : c_int = 51;\n \n             pub static MAP_COPY : c_int = 0x0002;\n@@ -3766,6 +3884,8 @@ pub mod consts {\n             pub static MAP_NOCACHE : c_int = 0x0400;\n             pub static MAP_JIT : c_int = 0x0800;\n             pub static MAP_STACK : c_int = 0;\n+\n+            pub static IPPROTO_RAW : c_int = 255;\n         }\n         pub mod sysconf {\n             use types::os::arch::c95::c_int;\n@@ -4326,6 +4446,15 @@ pub mod funcs {\n                 pub fn shm_unlink(name: *const c_char) -> c_int;\n             }\n         }\n+\n+        pub mod net {\n+            use types::os::arch::c95::{c_char, c_uint};\n+\n+            extern {\n+                pub fn if_nametoindex(ifname: *const c_char) -> c_uint;\n+            }\n+        }\n+\n     }\n \n     #[cfg(target_os = \"linux\")]\n@@ -4439,6 +4568,9 @@ pub mod funcs {\n \n         pub mod mman {\n         }\n+\n+        pub mod net {\n+        }\n     }\n \n \n@@ -4457,7 +4589,7 @@ pub mod funcs {\n     #[cfg(not(windows))]\n     pub mod bsd43 {\n         use types::common::c95::{c_void};\n-        use types::os::common::bsd44::{socklen_t, sockaddr};\n+        use types::os::common::bsd44::{socklen_t, sockaddr, ifaddrs};\n         use types::os::arch::c95::{c_int, size_t};\n         use types::os::arch::posix88::ssize_t;\n \n@@ -4487,6 +4619,8 @@ pub mod funcs {\n             pub fn sendto(socket: c_int, buf: *const c_void, len: size_t,\n                           flags: c_int, addr: *const sockaddr,\n                           addrlen: socklen_t) -> ssize_t;\n+            pub fn getifaddrs(ifap: *mut *mut ifaddrs) -> c_int;\n+            pub fn freeifaddrs(ifa: *mut ifaddrs);\n             pub fn shutdown(socket: c_int, how: c_int) -> c_int;\n         }\n     }\n@@ -4535,9 +4669,10 @@ pub mod funcs {\n     #[cfg(target_os = \"dragonfly\")]\n     pub mod bsd44 {\n         use types::common::c95::{c_void};\n-        use types::os::arch::c95::{c_char, c_uchar, c_int, c_uint, size_t};\n+        use types::os::arch::c95::{c_char, c_uchar, c_int, c_uint, c_ulong, size_t};\n \n         extern {\n+            pub fn ioctl(d: c_int, request: c_ulong, ...) -> c_int;\n             pub fn sysctl(name: *mut c_int,\n                           namelen: c_uint,\n                           oldp: *mut c_void,\n@@ -4572,6 +4707,7 @@ pub mod funcs {\n \n         extern {\n             pub fn getdtablesize() -> c_int;\n+            pub fn ioctl(d: c_int, request: c_int, ...) -> c_int;\n             pub fn madvise(addr: *mut c_void, len: size_t, advice: c_int)\n                            -> c_int;\n             pub fn mincore(addr: *mut c_void, len: size_t, vec: *mut c_uchar)\n@@ -4815,6 +4951,15 @@ pub mod funcs {\n                                       flags: c_int) -> c_int;\n             }\n         }\n+\n+        pub mod winsock {\n+            use types::os::arch::c95::{c_int, c_long, c_ulong};\n+            use types::os::common::bsd44::SOCKET;\n+\n+            extern \"system\" {\n+                pub fn ioctlsocket(s: SOCKET, cmd: c_long, argp: *mut c_ulong) -> c_int;\n+            }\n+        }\n     }\n }\n "}]}