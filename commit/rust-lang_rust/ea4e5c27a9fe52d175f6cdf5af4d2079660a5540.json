{"sha": "ea4e5c27a9fe52d175f6cdf5af4d2079660a5540", "node_id": "C_kwDOAAsO6NoAKGVhNGU1YzI3YTlmZTUyZDE3NWY2Y2RmNWFmNGQyMDc5NjYwYTU1NDA", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2022-03-16T12:41:11Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2022-03-16T12:51:31Z"}, "message": "BTree: evaluate static type-related check at compile time", "tree": {"sha": "cbfe1f406c62166a8c084d03c66ffbce5ef30077", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbfe1f406c62166a8c084d03c66ffbce5ef30077"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea4e5c27a9fe52d175f6cdf5af4d2079660a5540", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea4e5c27a9fe52d175f6cdf5af4d2079660a5540", "html_url": "https://github.com/rust-lang/rust/commit/ea4e5c27a9fe52d175f6cdf5af4d2079660a5540", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea4e5c27a9fe52d175f6cdf5af4d2079660a5540/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "461e8078010433ff7de2db2aaae8a3cfb0847215", "url": "https://api.github.com/repos/rust-lang/rust/commits/461e8078010433ff7de2db2aaae8a3cfb0847215", "html_url": "https://github.com/rust-lang/rust/commit/461e8078010433ff7de2db2aaae8a3cfb0847215"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "86c46010a4e3bbf251fd9629b67e08d1a3477106", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ea4e5c27a9fe52d175f6cdf5af4d2079660a5540/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4e5c27a9fe52d175f6cdf5af4d2079660a5540/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=ea4e5c27a9fe52d175f6cdf5af4d2079660a5540", "patch": "@@ -315,7 +315,7 @@ impl<BorrowType: marker::BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type>\n     pub fn ascend(\n         self,\n     ) -> Result<Handle<NodeRef<BorrowType, K, V, marker::Internal>, marker::Edge>, Self> {\n-        assert!(BorrowType::PERMITS_TRAVERSAL);\n+        let _ = BorrowType::TRAVERSAL_PERMIT;\n         // We need to use raw pointers to nodes because, if BorrowType is marker::ValMut,\n         // there might be outstanding mutable references to values that we must not invalidate.\n         let leaf_ptr: *const _ = Self::as_leaf_ptr(&self);\n@@ -986,7 +986,7 @@ impl<BorrowType: marker::BorrowType, K, V>\n     /// `edge.descend().ascend().unwrap()` and `node.ascend().unwrap().descend()` should\n     /// both, upon success, do nothing.\n     pub fn descend(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n-        assert!(BorrowType::PERMITS_TRAVERSAL);\n+        let _ = BorrowType::TRAVERSAL_PERMIT;\n         // We need to use raw pointers to nodes because, if BorrowType is\n         // marker::ValMut, there might be outstanding mutable references to\n         // values that we must not invalidate. There's no worry accessing the\n@@ -1637,15 +1637,17 @@ pub mod marker {\n     pub struct ValMut<'a>(PhantomData<&'a mut ()>);\n \n     pub trait BorrowType {\n-        // Whether node references of this borrow type allow traversing\n-        // to other nodes in the tree.\n-        const PERMITS_TRAVERSAL: bool = true;\n+        // If node references of this borrow type allow traversing to other\n+        // nodes in the tree, this constant can be evaluated. Thus reading it\n+        // serves as a compile-time assertion.\n+        const TRAVERSAL_PERMIT: () = ();\n     }\n     impl BorrowType for Owned {\n-        // Traversal isn't needed, it happens using the result of `borrow_mut`.\n+        // Reject evaluation, because traversal isn't needed. Instead traversal\n+        // happens using the result of `borrow_mut`.\n         // By disabling traversal, and only creating new references to roots,\n         // we know that every reference of the `Owned` type is to a root node.\n-        const PERMITS_TRAVERSAL: bool = false;\n+        const TRAVERSAL_PERMIT: () = panic!();\n     }\n     impl BorrowType for Dying {}\n     impl<'a> BorrowType for Immut<'a> {}"}]}