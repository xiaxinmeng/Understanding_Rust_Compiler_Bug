{"sha": "0550b79f73996b69e7f3540fc365b7e49455ca75", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NTBiNzlmNzM5OTZiNjllN2YzNTQwZmMzNjViN2U0OTQ1NWNhNzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-12T07:31:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-12T07:31:52Z"}, "message": "auto merge of #14127 : thestinger/rust/snapshot, r=huonw", "tree": {"sha": "ea9d583a587975c086342c3dfe5717a94d4d602f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea9d583a587975c086342c3dfe5717a94d4d602f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0550b79f73996b69e7f3540fc365b7e49455ca75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0550b79f73996b69e7f3540fc365b7e49455ca75", "html_url": "https://github.com/rust-lang/rust/commit/0550b79f73996b69e7f3540fc365b7e49455ca75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0550b79f73996b69e7f3540fc365b7e49455ca75/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e031ba1028a1705708401a04f5823bcc3e4a439c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e031ba1028a1705708401a04f5823bcc3e4a439c", "html_url": "https://github.com/rust-lang/rust/commit/e031ba1028a1705708401a04f5823bcc3e4a439c"}, {"sha": "8b912bc56be35149a405752f134b8b659366a35c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b912bc56be35149a405752f134b8b659366a35c", "html_url": "https://github.com/rust-lang/rust/commit/8b912bc56be35149a405752f134b8b659366a35c"}], "stats": {"total": 132, "additions": 10, "deletions": 122}, "files": [{"sha": "61b87c77163af6f615c336712b7b85868b762dbb", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0550b79f73996b69e7f3540fc365b7e49455ca75/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0550b79f73996b69e7f3540fc365b7e49455ca75/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=0550b79f73996b69e7f3540fc365b7e49455ca75", "patch": "@@ -341,29 +341,7 @@ struct TypedArenaChunk<T> {\n }\n \n impl<T> TypedArenaChunk<T> {\n-    #[cfg(stage0)]\n     #[inline]\n-    fn new(next: Option<Box<TypedArenaChunk<T>>>, capacity: uint)\n-           -> Box<TypedArenaChunk<T>> {\n-        let mut size = mem::size_of::<TypedArenaChunk<T>>();\n-        size = round_up(size, min_align_of::<T>());\n-        let elem_size = mem::size_of::<T>();\n-        let elems_size = elem_size.checked_mul(&capacity).unwrap();\n-        size = size.checked_add(&elems_size).unwrap();\n-\n-        let mut chunk = unsafe {\n-            let chunk = exchange_malloc(size);\n-            let mut chunk: Box<TypedArenaChunk<T>> = mem::transmute(chunk);\n-            mem::move_val_init(&mut chunk.next, next);\n-            chunk\n-        };\n-\n-        chunk.capacity = capacity;\n-        chunk\n-    }\n-\n-    #[inline]\n-    #[cfg(not(stage0))]\n     fn new(next: Option<Box<TypedArenaChunk<T>>>, capacity: uint)\n            -> Box<TypedArenaChunk<T>> {\n         let mut size = mem::size_of::<TypedArenaChunk<T>>();"}, {"sha": "7ecf53a634893adade859534574d64da1731d478", "filename": "src/libcore/should_not_exist.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0550b79f73996b69e7f3540fc365b7e49455ca75/src%2Flibcore%2Fshould_not_exist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0550b79f73996b69e7f3540fc365b7e49455ca75/src%2Flibcore%2Fshould_not_exist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fshould_not_exist.rs?ref=0550b79f73996b69e7f3540fc365b7e49455ca75", "patch": "@@ -28,26 +28,10 @@ use str::StrSlice;\n \n #[allow(ctypes)]\n extern {\n-    #[cfg(stage0)]\n-    fn rust_malloc(size: uint) -> *u8;\n-    #[cfg(not(stage0))]\n     fn rust_malloc(size: uint, align: uint) -> *u8;\n     fn rust_free(ptr: *u8, size: uint, align: uint);\n }\n \n-#[cfg(stage0)]\n-unsafe fn alloc(cap: uint) -> *mut Vec<()> {\n-    let cap = cap.checked_add(&mem::size_of::<Vec<()>>()).unwrap();\n-    let ret = rust_malloc(cap) as *mut Vec<()>;\n-    if ret.is_null() {\n-        intrinsics::abort();\n-    }\n-    (*ret).fill = 0;\n-    (*ret).alloc = cap;\n-    ret\n-}\n-\n-#[cfg(not(stage0))]\n unsafe fn alloc(cap: uint) -> *mut Vec<()> {\n     let cap = cap.checked_add(&mem::size_of::<Vec<()>>()).unwrap();\n     // this should use the real alignment, but the new representation will take care of that"}, {"sha": "e616b9b8beb89a3a42f3948fbe354e7862dc7ad7", "filename": "src/libstd/rt/heap.rs", "status": "modified", "additions": 2, "deletions": 36, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0550b79f73996b69e7f3540fc365b7e49455ca75/src%2Flibstd%2Frt%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0550b79f73996b69e7f3540fc365b7e49455ca75/src%2Flibstd%2Frt%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fheap.rs?ref=0550b79f73996b69e7f3540fc365b7e49455ca75", "patch": "@@ -114,39 +114,14 @@ pub fn stats_print() {\n }\n \n /// The allocator for unique pointers.\n-#[cfg(stage0)]\n-#[lang=\"exchange_malloc\"]\n-#[inline(always)]\n-pub unsafe fn exchange_malloc_(size: uint) -> *mut u8 {\n-    exchange_malloc(size)\n-}\n-\n-/// The allocator for unique pointers.\n-#[cfg(not(test), not(stage0))]\n+#[cfg(not(test))]\n #[lang=\"exchange_malloc\"]\n #[inline(always)]\n pub unsafe fn exchange_malloc_(size: uint, align: uint) -> *mut u8 {\n     exchange_malloc(size, align)\n }\n \n /// The allocator for unique pointers.\n-#[cfg(stage0)]\n-#[inline]\n-pub unsafe fn exchange_malloc(size: uint) -> *mut u8 {\n-    // The compiler never calls `exchange_free` on ~ZeroSizeType, so zero-size\n-    // allocations can point to this `static`. It would be incorrect to use a null\n-    // pointer, due to enums assuming types like unique pointers are never null.\n-    static EMPTY: () = ();\n-\n-    if size == 0 {\n-        &EMPTY as *() as *mut u8\n-    } else {\n-        allocate(size, 8)\n-    }\n-}\n-\n-/// The allocator for unique pointers.\n-#[cfg(not(stage0))]\n #[inline]\n pub unsafe fn exchange_malloc(size: uint, align: uint) -> *mut u8 {\n     // The compiler never calls `exchange_free` on ~ZeroSizeType, so zero-size\n@@ -187,16 +162,7 @@ unsafe fn closure_exchange_malloc(drop_glue: fn(*mut u8), size: uint, align: uin\n #[no_mangle]\n #[doc(hidden)]\n #[deprecated]\n-#[cfg(stage0, not(test))]\n-pub unsafe extern \"C\" fn rust_malloc(size: uint) -> *mut u8 {\n-    exchange_malloc(size)\n-}\n-\n-// hack for libcore\n-#[no_mangle]\n-#[doc(hidden)]\n-#[deprecated]\n-#[cfg(not(stage0), not(test))]\n+#[cfg(not(test))]\n pub unsafe extern \"C\" fn rust_malloc(size: uint, align: uint) -> *mut u8 {\n     exchange_malloc(size, align)\n }"}, {"sha": "66471ee3923ce2c5c70773fd2de71177950d15f1", "filename": "src/libstd/slice.rs", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0550b79f73996b69e7f3540fc365b7e49455ca75/src%2Flibstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0550b79f73996b69e7f3540fc365b7e49455ca75/src%2Flibstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fslice.rs?ref=0550b79f73996b69e7f3540fc365b7e49455ca75", "patch": "@@ -291,54 +291,6 @@ pub trait CloneableVector<T> {\n impl<'a, T: Clone> CloneableVector<T> for &'a [T] {\n     /// Returns a copy of `v`.\n     #[inline]\n-    #[cfg(stage0)]\n-    fn to_owned(&self) -> ~[T] {\n-        use RawVec = core::raw::Vec;\n-        use num::{CheckedAdd, CheckedMul};\n-        use option::Expect;\n-\n-        let len = self.len();\n-        let data_size = len.checked_mul(&mem::size_of::<T>());\n-        let data_size = data_size.expect(\"overflow in to_owned()\");\n-        let size = mem::size_of::<RawVec<()>>().checked_add(&data_size);\n-        let size = size.expect(\"overflow in to_owned()\");\n-\n-        unsafe {\n-            // this should pass the real required alignment\n-            let ret = exchange_malloc(size) as *mut RawVec<()>;\n-\n-            (*ret).fill = len * mem::nonzero_size_of::<T>();\n-            (*ret).alloc = len * mem::nonzero_size_of::<T>();\n-\n-            // Be careful with the following loop. We want it to be optimized\n-            // to a memcpy (or something similarly fast) when T is Copy. LLVM\n-            // is easily confused, so any extra operations during the loop can\n-            // prevent this optimization.\n-            let mut i = 0;\n-            let p = &mut (*ret).data as *mut _ as *mut T;\n-            try_finally(\n-                &mut i, (),\n-                |i, ()| while *i < len {\n-                    mem::move_val_init(\n-                        &mut(*p.offset(*i as int)),\n-                        self.unsafe_ref(*i).clone());\n-                    *i += 1;\n-                },\n-                |i| if *i < len {\n-                    // we must be failing, clean up after ourselves\n-                    for j in range(0, *i as int) {\n-                        ptr::read(&*p.offset(j));\n-                    }\n-                    // FIXME: #13994 (should pass align and size here)\n-                    deallocate(ret as *mut u8, 0, 8);\n-                });\n-            mem::transmute(ret)\n-        }\n-    }\n-\n-    /// Returns a copy of `v`.\n-    #[inline]\n-    #[cfg(not(stage0))]\n     fn to_owned(&self) -> ~[T] {\n         use RawVec = core::raw::Vec;\n         use num::{CheckedAdd, CheckedMul};"}, {"sha": "e88ae02c1c65b62984578a4cfee3d4957a29bfa0", "filename": "src/snapshots.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0550b79f73996b69e7f3540fc365b7e49455ca75/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/0550b79f73996b69e7f3540fc365b7e49455ca75/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=0550b79f73996b69e7f3540fc365b7e49455ca75", "patch": "@@ -1,3 +1,11 @@\n+S 2014-05-11 72fc4a5\n+  freebsd-x86_64 82db6355b0b7c8023c8845a74e2f224da2831b50\n+  linux-i386 91901299d5f86f5b67377d940073908a1f0e4e82\n+  linux-x86_64 2a80e40bb8d832dba307ad6a43bb63081627c22c\n+  macos-i386 3d7ce9b9201f07cecddae6f1b8025e9c28b10bbf\n+  macos-x86_64 4cfe69a0499d486a7bfdb9cd05c52845ad607dcb\n+  winnt-i386 328d13aeb6c573125c57d7103a12bebd34fadd1f\n+\n S 2014-05-09 47ecc2e\n   freebsd-x86_64 5c085972690e1f9412c3c0c7ec64f6b148fe04fd\n   linux-i386 690d2e310c025f10c54b1f2b9f32c65ea34575ed"}]}