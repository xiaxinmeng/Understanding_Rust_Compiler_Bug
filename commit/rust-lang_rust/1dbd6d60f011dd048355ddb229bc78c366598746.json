{"sha": "1dbd6d60f011dd048355ddb229bc78c366598746", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYmQ2ZDYwZjAxMWRkMDQ4MzU1ZGRiMjI5YmM3OGMzNjY1OTg3NDY=", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-07-28T14:28:58Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-08-19T19:02:40Z"}, "message": "Factor out Unix and WASI fd code into a common module.", "tree": {"sha": "77323066c61c9a24cf4f49968ed8d91dd4d2630c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77323066c61c9a24cf4f49968ed8d91dd4d2630c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dbd6d60f011dd048355ddb229bc78c366598746", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dbd6d60f011dd048355ddb229bc78c366598746", "html_url": "https://github.com/rust-lang/rust/commit/1dbd6d60f011dd048355ddb229bc78c366598746", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dbd6d60f011dd048355ddb229bc78c366598746/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71dab738ac80c2dfadc0d83bb251c70d72d261d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/71dab738ac80c2dfadc0d83bb251c70d72d261d6", "html_url": "https://github.com/rust-lang/rust/commit/71dab738ac80c2dfadc0d83bb251c70d72d261d6"}], "stats": {"total": 858, "additions": 298, "deletions": 560}, "files": [{"sha": "e5a977d9e4044ca1414457e73ec6588c6eed1ac2", "filename": "library/std/src/os/fd.rs", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/rust-lang/rust/blob/1dbd6d60f011dd048355ddb229bc78c366598746/library%2Fstd%2Fsrc%2Fos%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dbd6d60f011dd048355ddb229bc78c366598746/library%2Fstd%2Fsrc%2Fos%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd.rs?ref=1dbd6d60f011dd048355ddb229bc78c366598746", "patch": "@@ -0,0 +1,292 @@\n+//! Owned and borrowed Unix-like file descriptors.\n+\n+#![unstable(feature = \"io_safety\", issue = \"87074\")]\n+#![deny(unsafe_op_in_unsafe_fn)]\n+\n+#[cfg(unix)]\n+use super::unix::io::{AsRawFd, FromRawFd, IntoRawFd, RawFd};\n+#[cfg(target_os = \"wasi\")]\n+use super::wasi::io::{AsRawFd, FromRawFd, IntoRawFd, RawFd};\n+use crate::fmt;\n+use crate::fs;\n+use crate::marker::PhantomData;\n+use crate::mem::forget;\n+use crate::os::raw;\n+use crate::sys_common::{AsInner, FromInner, IntoInner};\n+\n+/// A borrowed file descriptor.\n+///\n+/// This has a lifetime parameter to tie it to the lifetime of something that\n+/// owns the file descriptor.\n+///\n+/// This uses `repr(transparent)` and has the representation of a host file\n+/// descriptor, so it can be used in FFI in places where a file descriptor is\n+/// passed as an argument, it is not captured or consumed, and it never has the\n+/// value `-1`.\n+#[derive(Copy, Clone)]\n+#[repr(transparent)]\n+#[rustc_layout_scalar_valid_range_start(0)]\n+// libstd/os/raw/mod.rs assures me that every libstd-supported platform has a\n+// 32-bit c_int. Below is -2, in two's complement, but that only works out\n+// because c_int is 32 bits.\n+#[rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FE)]\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+pub struct BorrowedFd<'fd> {\n+    fd: RawFd,\n+    _phantom: PhantomData<&'fd OwnedFd>,\n+}\n+\n+/// An owned file descriptor.\n+///\n+/// This closes the file descriptor on drop.\n+///\n+/// This uses `repr(transparent)` and has the representation of a host file\n+/// descriptor, so it can be used in FFI in places where a file descriptor is\n+/// passed as a consumed argument or returned as an owned value, and it never\n+/// has the value `-1`.\n+#[repr(transparent)]\n+#[rustc_layout_scalar_valid_range_start(0)]\n+// libstd/os/raw/mod.rs assures me that every libstd-supported platform has a\n+// 32-bit c_int. Below is -2, in two's complement, but that only works out\n+// because c_int is 32 bits.\n+#[rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FE)]\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+pub struct OwnedFd {\n+    fd: RawFd,\n+}\n+\n+impl BorrowedFd<'_> {\n+    /// Return a `BorrowedFd` holding the given raw file descriptor.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The resource pointed to by `fd` must remain open for the duration of\n+    /// the returned `BorrowedFd`, and it must not have the value `-1`.\n+    #[inline]\n+    #[unstable(feature = \"io_safety\", issue = \"87074\")]\n+    pub unsafe fn borrow_raw_fd(fd: RawFd) -> Self {\n+        assert_ne!(fd, u32::MAX as RawFd);\n+        // SAFETY: we just asserted that the value is in the valid range and isn't `-1` (the only value bigger than `0xFF_FF_FF_FE` unsigned)\n+        unsafe { Self { fd, _phantom: PhantomData } }\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl AsRawFd for BorrowedFd<'_> {\n+    #[inline]\n+    fn as_raw_fd(&self) -> RawFd {\n+        self.fd\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl AsRawFd for OwnedFd {\n+    #[inline]\n+    fn as_raw_fd(&self) -> RawFd {\n+        self.fd\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl IntoRawFd for OwnedFd {\n+    #[inline]\n+    fn into_raw_fd(self) -> RawFd {\n+        let fd = self.fd;\n+        forget(self);\n+        fd\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl FromRawFd for OwnedFd {\n+    /// Constructs a new instance of `Self` from the given raw file descriptor.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The resource pointed to by `fd` must be open and suitable for assuming\n+    /// ownership. The resource must not require any cleanup other than `close`.\n+    #[inline]\n+    unsafe fn from_raw_fd(fd: RawFd) -> Self {\n+        assert_ne!(fd, u32::MAX as RawFd);\n+        // SAFETY: we just asserted that the value is in the valid range and isn't `-1` (the only value bigger than `0xFF_FF_FF_FE` unsigned)\n+        unsafe { Self { fd } }\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl Drop for OwnedFd {\n+    #[inline]\n+    fn drop(&mut self) {\n+        unsafe {\n+            // Note that errors are ignored when closing a file descriptor. The\n+            // reason for this is that if an error occurs we don't actually know if\n+            // the file descriptor was closed or not, and if we retried (for\n+            // something like EINTR), we might close another valid file descriptor\n+            // opened after we closed ours.\n+            let _ = libc::close(self.fd as raw::c_int);\n+        }\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl fmt::Debug for BorrowedFd<'_> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"BorrowedFd\").field(\"fd\", &self.fd).finish()\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl fmt::Debug for OwnedFd {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"OwnedFd\").field(\"fd\", &self.fd).finish()\n+    }\n+}\n+\n+/// A trait to borrow the file descriptor from an underlying object.\n+///\n+/// This is only available on unix platforms and must be imported in order to\n+/// call the method. Windows platforms have a corresponding `AsHandle` and\n+/// `AsSocket` set of traits.\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+pub trait AsFd {\n+    /// Borrows the file descriptor.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust,no_run\n+    /// # #![feature(io_safety)]\n+    /// use std::fs::File;\n+    /// # use std::io;\n+    /// # #[cfg(target_os = \"wasi\")]\n+    /// # use std::os::wasi::io::{AsFd, BorrowedFd};\n+    /// # #[cfg(unix)]\n+    /// # use std::os::unix::io::{AsFd, BorrowedFd};\n+    ///\n+    /// let mut f = File::open(\"foo.txt\")?;\n+    /// let borrowed_fd: BorrowedFd<'_> = f.as_fd();\n+    /// # Ok::<(), io::Error>(())\n+    /// ```\n+    #[unstable(feature = \"io_safety\", issue = \"87074\")]\n+    fn as_fd(&self) -> BorrowedFd<'_>;\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl AsFd for BorrowedFd<'_> {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        *self\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl AsFd for OwnedFd {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        // Safety: `OwnedFd` and `BorrowedFd` have the same validity\n+        // invariants, and the `BorrowdFd` is bounded by the lifetime\n+        // of `&self`.\n+        unsafe { BorrowedFd::borrow_raw_fd(self.as_raw_fd()) }\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl AsFd for fs::File {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        self.as_inner().as_fd()\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl From<fs::File> for OwnedFd {\n+    #[inline]\n+    fn from(file: fs::File) -> OwnedFd {\n+        file.into_inner().into_inner().into_inner()\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl From<OwnedFd> for fs::File {\n+    #[inline]\n+    fn from(owned_fd: OwnedFd) -> Self {\n+        Self::from_inner(FromInner::from_inner(FromInner::from_inner(owned_fd)))\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl AsFd for crate::net::TcpStream {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        self.as_inner().socket().as_fd()\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl From<crate::net::TcpStream> for OwnedFd {\n+    #[inline]\n+    fn from(tcp_stream: crate::net::TcpStream) -> OwnedFd {\n+        tcp_stream.into_inner().into_socket().into_inner().into_inner().into()\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl From<OwnedFd> for crate::net::TcpStream {\n+    #[inline]\n+    fn from(owned_fd: OwnedFd) -> Self {\n+        Self::from_inner(FromInner::from_inner(FromInner::from_inner(FromInner::from_inner(\n+            owned_fd,\n+        ))))\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl AsFd for crate::net::TcpListener {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        self.as_inner().socket().as_fd()\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl From<crate::net::TcpListener> for OwnedFd {\n+    #[inline]\n+    fn from(tcp_listener: crate::net::TcpListener) -> OwnedFd {\n+        tcp_listener.into_inner().into_socket().into_inner().into_inner().into()\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl From<OwnedFd> for crate::net::TcpListener {\n+    #[inline]\n+    fn from(owned_fd: OwnedFd) -> Self {\n+        Self::from_inner(FromInner::from_inner(FromInner::from_inner(FromInner::from_inner(\n+            owned_fd,\n+        ))))\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl AsFd for crate::net::UdpSocket {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        self.as_inner().socket().as_fd()\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl From<crate::net::UdpSocket> for OwnedFd {\n+    #[inline]\n+    fn from(udp_socket: crate::net::UdpSocket) -> OwnedFd {\n+        udp_socket.into_inner().into_socket().into_inner().into_inner().into()\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl From<OwnedFd> for crate::net::UdpSocket {\n+    #[inline]\n+    fn from(owned_fd: OwnedFd) -> Self {\n+        Self::from_inner(FromInner::from_inner(FromInner::from_inner(FromInner::from_inner(\n+            owned_fd,\n+        ))))\n+    }\n+}"}, {"sha": "b68936a89a5825a1ff0b8680f283f632cc0a06f1", "filename": "library/std/src/os/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1dbd6d60f011dd048355ddb229bc78c366598746/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dbd6d60f011dd048355ddb229bc78c366598746/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fmod.rs?ref=1dbd6d60f011dd048355ddb229bc78c366598746", "patch": "@@ -121,3 +121,6 @@ mod imp {\n #[cfg(not(doc))]\n #[stable(feature = \"os\", since = \"1.0.0\")]\n pub use imp::*;\n+\n+#[cfg(any(unix, target_os = \"wasi\"))]\n+mod fd;"}, {"sha": "728b20bfb58c2770966eabd8254d2486ce6de5ed", "filename": "library/std/src/os/unix/io/fd.rs", "status": "modified", "additions": 2, "deletions": 280, "changes": 282, "blob_url": "https://github.com/rust-lang/rust/blob/1dbd6d60f011dd048355ddb229bc78c366598746/library%2Fstd%2Fsrc%2Fos%2Funix%2Fio%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dbd6d60f011dd048355ddb229bc78c366598746/library%2Fstd%2Fsrc%2Fos%2Funix%2Fio%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fio%2Ffd.rs?ref=1dbd6d60f011dd048355ddb229bc78c366598746", "patch": "@@ -6,287 +6,9 @@\n #[cfg(test)]\n mod tests;\n \n-use super::raw::{AsRawFd, FromRawFd, IntoRawFd, RawFd};\n-use crate::fmt;\n-use crate::fs;\n-use crate::marker::PhantomData;\n-use crate::mem::forget;\n-use crate::os::raw;\n-use crate::sys_common::{AsInner, FromInner, IntoInner};\n+use crate::sys_common::{AsInner, IntoInner};\n \n-/// A borrowed file descriptor.\n-///\n-/// This has a lifetime parameter to tie it to the lifetime of something that\n-/// owns the file descriptor.\n-///\n-/// This uses `repr(transparent)` and has the representation of a host file\n-/// descriptor, so it can be used in FFI in places where a file descriptor is\n-/// passed as an argument, it is not captured or consumed, and it never has the\n-/// value `-1`.\n-#[derive(Copy, Clone)]\n-#[repr(transparent)]\n-#[rustc_layout_scalar_valid_range_start(0)]\n-// libstd/os/raw/mod.rs assures me that every libstd-supported platform has a\n-// 32-bit c_int. Below is -2, in two's complement, but that only works out\n-// because c_int is 32 bits.\n-#[rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FE)]\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-pub struct BorrowedFd<'fd> {\n-    fd: RawFd,\n-    _phantom: PhantomData<&'fd OwnedFd>,\n-}\n-\n-/// An owned file descriptor.\n-///\n-/// This closes the file descriptor on drop.\n-///\n-/// This uses `repr(transparent)` and has the representation of a host file\n-/// descriptor, so it can be used in FFI in places where a file descriptor is\n-/// passed as a consumed argument or returned as an owned value, and it never\n-/// has the value `-1`.\n-#[repr(transparent)]\n-#[rustc_layout_scalar_valid_range_start(0)]\n-// libstd/os/raw/mod.rs assures me that every libstd-supported platform has a\n-// 32-bit c_int. Below is -2, in two's complement, but that only works out\n-// because c_int is 32 bits.\n-#[rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FE)]\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-pub struct OwnedFd {\n-    fd: RawFd,\n-}\n-\n-impl BorrowedFd<'_> {\n-    /// Return a `BorrowedFd` holding the given raw file descriptor.\n-    ///\n-    /// # Safety\n-    ///\n-    /// The resource pointed to by `fd` must remain open for the duration of\n-    /// the returned `BorrowedFd`, and it must not have the value `-1`.\n-    #[inline]\n-    #[unstable(feature = \"io_safety\", issue = \"87074\")]\n-    pub unsafe fn borrow_raw_fd(fd: RawFd) -> Self {\n-        assert_ne!(fd, u32::MAX as RawFd);\n-        // SAFETY: we just asserted that the value is in the valid range and isn't `-1` (the only value bigger than `0xFF_FF_FF_FE` unsigned)\n-        unsafe { Self { fd, _phantom: PhantomData } }\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl AsRawFd for BorrowedFd<'_> {\n-    #[inline]\n-    fn as_raw_fd(&self) -> RawFd {\n-        self.fd\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl AsRawFd for OwnedFd {\n-    #[inline]\n-    fn as_raw_fd(&self) -> RawFd {\n-        self.fd\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl IntoRawFd for OwnedFd {\n-    #[inline]\n-    fn into_raw_fd(self) -> RawFd {\n-        let fd = self.fd;\n-        forget(self);\n-        fd\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl FromRawFd for OwnedFd {\n-    /// Constructs a new instance of `Self` from the given raw file descriptor.\n-    ///\n-    /// # Safety\n-    ///\n-    /// The resource pointed to by `fd` must be open and suitable for assuming\n-    /// ownership. The resource must not require any cleanup other than `close`.\n-    #[inline]\n-    unsafe fn from_raw_fd(fd: RawFd) -> Self {\n-        assert_ne!(fd, u32::MAX as RawFd);\n-        // SAFETY: we just asserted that the value is in the valid range and isn't `-1` (the only value bigger than `0xFF_FF_FF_FE` unsigned)\n-        unsafe { Self { fd } }\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl Drop for OwnedFd {\n-    #[inline]\n-    fn drop(&mut self) {\n-        unsafe {\n-            // Note that errors are ignored when closing a file descriptor. The\n-            // reason for this is that if an error occurs we don't actually know if\n-            // the file descriptor was closed or not, and if we retried (for\n-            // something like EINTR), we might close another valid file descriptor\n-            // opened after we closed ours.\n-            let _ = libc::close(self.fd as raw::c_int);\n-        }\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl fmt::Debug for BorrowedFd<'_> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"BorrowedFd\").field(\"fd\", &self.fd).finish()\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl fmt::Debug for OwnedFd {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"OwnedFd\").field(\"fd\", &self.fd).finish()\n-    }\n-}\n-\n-/// A trait to borrow the file descriptor from an underlying object.\n-///\n-/// This is only available on unix platforms and must be imported in order to\n-/// call the method. Windows platforms have a corresponding `AsHandle` and\n-/// `AsSocket` set of traits.\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-pub trait AsFd {\n-    /// Borrows the file descriptor.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust,no_run\n-    /// #![feature(io_safety)]\n-    /// use std::fs::File;\n-    /// # use std::io;\n-    /// use std::os::unix::io::{AsFd, BorrowedFd};\n-    ///\n-    /// let mut f = File::open(\"foo.txt\")?;\n-    /// let borrowed_fd: BorrowedFd<'_> = f.as_fd();\n-    /// # Ok::<(), io::Error>(())\n-    /// ```\n-    #[unstable(feature = \"io_safety\", issue = \"87074\")]\n-    fn as_fd(&self) -> BorrowedFd<'_>;\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl AsFd for BorrowedFd<'_> {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        *self\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl AsFd for OwnedFd {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        // Safety: `OwnedFd` and `BorrowedFd` have the same validity\n-        // invariants, and the `BorrowdFd` is bounded by the lifetime\n-        // of `&self`.\n-        unsafe { BorrowedFd::borrow_raw_fd(self.as_raw_fd()) }\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl AsFd for fs::File {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        self.as_inner().as_fd()\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl From<fs::File> for OwnedFd {\n-    #[inline]\n-    fn from(file: fs::File) -> OwnedFd {\n-        file.into_inner().into_inner().into_inner()\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl From<OwnedFd> for fs::File {\n-    #[inline]\n-    fn from(owned_fd: OwnedFd) -> Self {\n-        Self::from_inner(FromInner::from_inner(FromInner::from_inner(owned_fd)))\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl AsFd for crate::net::TcpStream {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        self.as_inner().socket().as_fd()\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl From<crate::net::TcpStream> for OwnedFd {\n-    #[inline]\n-    fn from(tcp_stream: crate::net::TcpStream) -> OwnedFd {\n-        tcp_stream.into_inner().into_socket().into_inner().into_inner().into()\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl From<OwnedFd> for crate::net::TcpStream {\n-    #[inline]\n-    fn from(owned_fd: OwnedFd) -> Self {\n-        Self::from_inner(FromInner::from_inner(FromInner::from_inner(FromInner::from_inner(\n-            owned_fd,\n-        ))))\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl AsFd for crate::net::TcpListener {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        self.as_inner().socket().as_fd()\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl From<crate::net::TcpListener> for OwnedFd {\n-    #[inline]\n-    fn from(tcp_listener: crate::net::TcpListener) -> OwnedFd {\n-        tcp_listener.into_inner().into_socket().into_inner().into_inner().into()\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl From<OwnedFd> for crate::net::TcpListener {\n-    #[inline]\n-    fn from(owned_fd: OwnedFd) -> Self {\n-        Self::from_inner(FromInner::from_inner(FromInner::from_inner(FromInner::from_inner(\n-            owned_fd,\n-        ))))\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl AsFd for crate::net::UdpSocket {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        self.as_inner().socket().as_fd()\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl From<crate::net::UdpSocket> for OwnedFd {\n-    #[inline]\n-    fn from(udp_socket: crate::net::UdpSocket) -> OwnedFd {\n-        udp_socket.into_inner().into_socket().into_inner().into_inner().into()\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl From<OwnedFd> for crate::net::UdpSocket {\n-    #[inline]\n-    fn from(owned_fd: OwnedFd) -> Self {\n-        Self::from_inner(FromInner::from_inner(FromInner::from_inner(FromInner::from_inner(\n-            owned_fd,\n-        ))))\n-    }\n-}\n+pub use super::super::super::super::fd::*;\n \n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n impl AsFd for crate::process::ChildStdin {"}, {"sha": "e46406e55690d244b0c5751cd2602d60f4cc5f95", "filename": "library/std/src/os/wasi/io/fd.rs", "status": "modified", "additions": 1, "deletions": 280, "changes": 281, "blob_url": "https://github.com/rust-lang/rust/blob/1dbd6d60f011dd048355ddb229bc78c366598746/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dbd6d60f011dd048355ddb229bc78c366598746/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio%2Ffd.rs?ref=1dbd6d60f011dd048355ddb229bc78c366598746", "patch": "@@ -6,283 +6,4 @@\n #[cfg(test)]\n mod tests;\n \n-use super::raw::{AsRawFd, FromRawFd, IntoRawFd, RawFd};\n-use crate::fmt;\n-use crate::fs;\n-use crate::marker::PhantomData;\n-use crate::mem::forget;\n-use crate::os::raw;\n-use crate::sys_common::{AsInner, FromInner, IntoInner};\n-\n-/// A borrowed file descriptor.\n-///\n-/// This has a lifetime parameter to tie it to the lifetime of something that\n-/// owns the file descriptor.\n-///\n-/// This uses `repr(transparent)` and has the representation of a host file\n-/// descriptor, so it can be used in FFI in places where a file descriptor is\n-/// passed as an argument, it is not captured or consumed, and it never has the\n-/// value `-1`.\n-#[derive(Copy, Clone)]\n-#[repr(transparent)]\n-#[rustc_layout_scalar_valid_range_start(0)]\n-// libstd/os/raw/mod.rs assures me that every libstd-supported platform has a\n-// 32-bit c_int. Below is -2, in two's complement, but that only works out\n-// because c_int is 32 bits.\n-#[rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FE)]\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-pub struct BorrowedFd<'fd> {\n-    fd: RawFd,\n-    _phantom: PhantomData<&'fd OwnedFd>,\n-}\n-\n-/// An owned file descriptor.\n-///\n-/// This closes the file descriptor on drop.\n-///\n-/// This uses `repr(transparent)` and has the representation of a host file\n-/// descriptor, so it can be used in FFI in places where a file descriptor is\n-/// passed as a consumed argument or returned as an owned value, and it never\n-/// has the value `-1`.\n-#[repr(transparent)]\n-#[rustc_layout_scalar_valid_range_start(0)]\n-// libstd/os/raw/mod.rs assures me that every libstd-supported platform has a\n-// 32-bit c_int. Below is -2, in two's complement, but that only works out\n-// because c_int is 32 bits.\n-#[rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FE)]\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-pub struct OwnedFd {\n-    fd: RawFd,\n-}\n-\n-impl BorrowedFd<'_> {\n-    /// Return a `BorrowedFd` holding the given raw file descriptor.\n-    ///\n-    /// # Safety\n-    ///\n-    /// The resource pointed to by `fd` must remain open for the duration of\n-    /// the returned `BorrowedFd`, and it must not have the value `-1`.\n-    #[inline]\n-    #[unstable(feature = \"io_safety\", issue = \"87074\")]\n-    pub unsafe fn borrow_raw_fd(fd: RawFd) -> Self {\n-        assert_ne!(fd, u32::MAX as RawFd);\n-        // SAFETY: we just asserted that the value is in the valid range and isn't `-1` (the only value bigger than `0xFF_FF_FF_FE` unsigned)\n-        unsafe { Self { fd, _phantom: PhantomData } }\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl AsRawFd for BorrowedFd<'_> {\n-    #[inline]\n-    fn as_raw_fd(&self) -> RawFd {\n-        self.fd\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl AsRawFd for OwnedFd {\n-    #[inline]\n-    fn as_raw_fd(&self) -> RawFd {\n-        self.fd\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl IntoRawFd for OwnedFd {\n-    #[inline]\n-    fn into_raw_fd(self) -> RawFd {\n-        let fd = self.fd;\n-        forget(self);\n-        fd\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl FromRawFd for OwnedFd {\n-    /// Constructs a new instance of `Self` from the given raw file descriptor.\n-    ///\n-    /// # Safety\n-    ///\n-    /// The resource pointed to by `fd` must be open and suitable for assuming\n-    /// ownership. The resource must not require any cleanup other than `close`.\n-    #[inline]\n-    unsafe fn from_raw_fd(fd: RawFd) -> Self {\n-        assert_ne!(fd, u32::MAX as RawFd);\n-        // SAFETY: we just asserted that the value is in the valid range and isn't `-1` (the only value bigger than `0xFF_FF_FF_FE` unsigned)\n-        unsafe { Self { fd } }\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl Drop for OwnedFd {\n-    #[inline]\n-    fn drop(&mut self) {\n-        unsafe {\n-            // Note that errors are ignored when closing a file descriptor. The\n-            // reason for this is that if an error occurs we don't actually know if\n-            // the file descriptor was closed or not, and if we retried (for\n-            // something like EINTR), we might close another valid file descriptor\n-            // opened after we closed ours.\n-            let _ = libc::close(self.fd as raw::c_int);\n-        }\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl fmt::Debug for BorrowedFd<'_> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"BorrowedFd\").field(\"fd\", &self.fd).finish()\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl fmt::Debug for OwnedFd {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"OwnedFd\").field(\"fd\", &self.fd).finish()\n-    }\n-}\n-\n-/// A trait to borrow the file descriptor from an underlying object.\n-///\n-/// This is only available on unix platforms and must be imported in order to\n-/// call the method. Windows platforms have a corresponding `AsHandle` and\n-/// `AsSocket` set of traits.\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-pub trait AsFd {\n-    /// Borrows the file descriptor.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust,no_run\n-    /// use std::fs::File;\n-    /// # use std::io;\n-    /// use std::os::wasi::io::{AsFd, BorrowedFd};\n-    ///\n-    /// let mut f = File::open(\"foo.txt\")?;\n-    /// let borrowed_fd: BorrowedFd<'_> = f.as_fd();\n-    /// # Ok::<(), io::Error>(())\n-    /// ```\n-    #[unstable(feature = \"io_safety\", issue = \"87074\")]\n-    fn as_fd(&self) -> BorrowedFd<'_>;\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl AsFd for BorrowedFd<'_> {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        *self\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl AsFd for OwnedFd {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        // Safety: `OwnedFd` and `BorrowedFd` have the same validity\n-        // invariants, and the `BorrowdFd` is bounded by the lifetime\n-        // of `&self`.\n-        unsafe { BorrowedFd::borrow_raw_fd(self.as_raw_fd()) }\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl AsFd for fs::File {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        self.as_inner().as_fd()\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl From<fs::File> for OwnedFd {\n-    #[inline]\n-    fn from(file: fs::File) -> OwnedFd {\n-        file.into_inner().into_inner().into_inner()\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl From<OwnedFd> for fs::File {\n-    #[inline]\n-    fn from(owned_fd: OwnedFd) -> Self {\n-        Self::from_inner(FromInner::from_inner(FromInner::from_inner(owned_fd)))\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl AsFd for crate::net::TcpStream {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        self.as_inner().socket().as_fd()\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl From<crate::net::TcpStream> for OwnedFd {\n-    #[inline]\n-    fn from(tcp_stream: crate::net::TcpStream) -> OwnedFd {\n-        tcp_stream.into_inner().into_socket().into_inner().into_inner().into()\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl From<OwnedFd> for crate::net::TcpStream {\n-    #[inline]\n-    fn from(owned_fd: OwnedFd) -> Self {\n-        Self::from_inner(FromInner::from_inner(FromInner::from_inner(FromInner::from_inner(\n-            owned_fd,\n-        ))))\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl AsFd for crate::net::TcpListener {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        self.as_inner().socket().as_fd()\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl From<crate::net::TcpListener> for OwnedFd {\n-    #[inline]\n-    fn from(tcp_listener: crate::net::TcpListener) -> OwnedFd {\n-        tcp_listener.into_inner().into_socket().into_inner().into_inner().into()\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl From<OwnedFd> for crate::net::TcpListener {\n-    #[inline]\n-    fn from(owned_fd: OwnedFd) -> Self {\n-        Self::from_inner(FromInner::from_inner(FromInner::from_inner(FromInner::from_inner(\n-            owned_fd,\n-        ))))\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl AsFd for crate::net::UdpSocket {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        self.as_inner().socket().as_fd()\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl From<crate::net::UdpSocket> for OwnedFd {\n-    #[inline]\n-    fn from(udp_socket: crate::net::UdpSocket) -> OwnedFd {\n-        udp_socket.into_inner().into_socket().into_inner().into_inner().into()\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl From<OwnedFd> for crate::net::UdpSocket {\n-    #[inline]\n-    fn from(owned_fd: OwnedFd) -> Self {\n-        Self::from_inner(FromInner::from_inner(FromInner::from_inner(FromInner::from_inner(\n-            owned_fd,\n-        ))))\n-    }\n-}\n+pub use super::super::super::super::fd::*;"}]}