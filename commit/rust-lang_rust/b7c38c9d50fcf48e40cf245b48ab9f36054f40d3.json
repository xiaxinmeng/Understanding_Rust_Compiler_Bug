{"sha": "b7c38c9d50fcf48e40cf245b48ab9f36054f40d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3YzM4YzlkNTBmY2Y0OGU0MGNmMjQ1YjQ4YWI5ZjM2MDU0ZjQwZDM=", "commit": {"author": {"name": "WhizSid", "email": "whizsid@aol.com", "date": "2020-11-03T03:44:15Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2020-11-29T19:26:58Z"}, "message": "Fixed comment dropped between & and type issue (#4482)\n\n* Fixed comment dropped between & and type issue\r\n\r\n* Reduced nesting levels and avoided duplications\r\n\r\n* Removed extra allocations", "tree": {"sha": "dc2ed34315950b5ea5e2e0a25e4a6d4ac735c15c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc2ed34315950b5ea5e2e0a25e4a6d4ac735c15c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7c38c9d50fcf48e40cf245b48ab9f36054f40d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7c38c9d50fcf48e40cf245b48ab9f36054f40d3", "html_url": "https://github.com/rust-lang/rust/commit/b7c38c9d50fcf48e40cf245b48ab9f36054f40d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7c38c9d50fcf48e40cf245b48ab9f36054f40d3/comments", "author": {"login": "whizsid", "id": 44908250, "node_id": "MDQ6VXNlcjQ0OTA4MjUw", "avatar_url": "https://avatars.githubusercontent.com/u/44908250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whizsid", "html_url": "https://github.com/whizsid", "followers_url": "https://api.github.com/users/whizsid/followers", "following_url": "https://api.github.com/users/whizsid/following{/other_user}", "gists_url": "https://api.github.com/users/whizsid/gists{/gist_id}", "starred_url": "https://api.github.com/users/whizsid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whizsid/subscriptions", "organizations_url": "https://api.github.com/users/whizsid/orgs", "repos_url": "https://api.github.com/users/whizsid/repos", "events_url": "https://api.github.com/users/whizsid/events{/privacy}", "received_events_url": "https://api.github.com/users/whizsid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6455e9de0e165ccd2874cf02f602844d2f63d355", "url": "https://api.github.com/repos/rust-lang/rust/commits/6455e9de0e165ccd2874cf02f602844d2f63d355", "html_url": "https://github.com/rust-lang/rust/commit/6455e9de0e165ccd2874cf02f602844d2f63d355"}], "stats": {"total": 149, "additions": 122, "deletions": 27}, "files": [{"sha": "4b936c1baf5fdb8850a09fe0a5f3c548fe32d05e", "filename": "src/types.rs", "status": "modified", "additions": 62, "deletions": 27, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/b7c38c9d50fcf48e40cf245b48ab9f36054f40d3/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7c38c9d50fcf48e40cf245b48ab9f36054f40d3/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=b7c38c9d50fcf48e40cf245b48ab9f36054f40d3", "patch": "@@ -2,7 +2,7 @@ use std::iter::ExactSizeIterator;\n use std::ops::Deref;\n \n use rustc_ast::ast::{self, FnRetTy, Mutability};\n-use rustc_span::{symbol::kw, BytePos, Span};\n+use rustc_span::{symbol::kw, BytePos, Pos, Span};\n \n use crate::config::lists::*;\n use crate::config::{IndentStyle, TypeDensity, Version};\n@@ -648,37 +648,72 @@ impl Rewrite for ast::Ty {\n             ast::TyKind::Rptr(ref lifetime, ref mt) => {\n                 let mut_str = format_mutability(mt.mutbl);\n                 let mut_len = mut_str.len();\n-                Some(match *lifetime {\n-                    Some(ref lifetime) => {\n-                        let lt_budget = shape.width.checked_sub(2 + mut_len)?;\n-                        let lt_str = lifetime.rewrite(\n+                let mut result = String::with_capacity(128);\n+                result.push_str(\"&\");\n+                let ref_hi = context.snippet_provider.span_after(self.span(), \"&\");\n+                let mut cmnt_lo = ref_hi;\n+\n+                if let Some(ref lifetime) = *lifetime {\n+                    let lt_budget = shape.width.checked_sub(2 + mut_len)?;\n+                    let lt_str = lifetime.rewrite(\n+                        context,\n+                        Shape::legacy(lt_budget, shape.indent + 2 + mut_len),\n+                    )?;\n+                    let before_lt_span = mk_sp(cmnt_lo, lifetime.ident.span.lo());\n+                    if contains_comment(context.snippet(before_lt_span)) {\n+                        result = combine_strs_with_missing_comments(\n                             context,\n-                            Shape::legacy(lt_budget, shape.indent + 2 + mut_len),\n+                            &result,\n+                            &lt_str,\n+                            before_lt_span,\n+                            shape,\n+                            true,\n                         )?;\n-                        let lt_len = lt_str.len();\n-                        let budget = shape.width.checked_sub(2 + mut_len + lt_len)?;\n-                        format!(\n-                            \"&{} {}{}\",\n-                            lt_str,\n-                            mut_str,\n-                            mt.ty.rewrite(\n-                                context,\n-                                Shape::legacy(budget, shape.indent + 2 + mut_len + lt_len)\n-                            )?\n-                        )\n+                    } else {\n+                        result.push_str(&lt_str);\n                     }\n-                    None => {\n-                        let budget = shape.width.checked_sub(1 + mut_len)?;\n-                        format!(\n-                            \"&{}{}\",\n+                    result.push_str(\" \");\n+                    cmnt_lo = lifetime.ident.span.hi();\n+                }\n+\n+                if ast::Mutability::Mut == mt.mutbl {\n+                    let mut_hi = context.snippet_provider.span_after(self.span(), \"mut\");\n+                    let before_mut_span = mk_sp(cmnt_lo, mut_hi - BytePos::from_usize(3));\n+                    if contains_comment(context.snippet(before_mut_span)) {\n+                        result = combine_strs_with_missing_comments(\n+                            context,\n+                            result.trim_end(),\n                             mut_str,\n-                            mt.ty.rewrite(\n-                                context,\n-                                Shape::legacy(budget, shape.indent + 1 + mut_len)\n-                            )?\n-                        )\n+                            before_mut_span,\n+                            shape,\n+                            true,\n+                        )?;\n+                    } else {\n+                        result.push_str(mut_str);\n                     }\n-                })\n+                    cmnt_lo = mut_hi;\n+                }\n+\n+                let before_ty_span = mk_sp(cmnt_lo, mt.ty.span.lo());\n+                if contains_comment(context.snippet(before_ty_span)) {\n+                    result = combine_strs_with_missing_comments(\n+                        context,\n+                        result.trim_end(),\n+                        &mt.ty.rewrite(&context, shape)?,\n+                        before_ty_span,\n+                        shape,\n+                        true,\n+                    )?;\n+                } else {\n+                    let used_width = last_line_width(&result);\n+                    let budget = shape.width.checked_sub(used_width)?;\n+                    let ty_str = mt\n+                        .ty\n+                        .rewrite(&context, Shape::legacy(budget, shape.indent + used_width))?;\n+                    result.push_str(&ty_str);\n+                }\n+\n+                Some(result)\n             }\n             // FIXME: we drop any comments here, even though it's a silly place to put\n             // comments."}, {"sha": "57d7e192d0af61583b3c8d39b4befad6b8d0a80f", "filename": "tests/source/issue-4245.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b7c38c9d50fcf48e40cf245b48ab9f36054f40d3/tests%2Fsource%2Fissue-4245.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7c38c9d50fcf48e40cf245b48ab9f36054f40d3/tests%2Fsource%2Fissue-4245.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4245.rs?ref=b7c38c9d50fcf48e40cf245b48ab9f36054f40d3", "patch": "@@ -0,0 +1,26 @@\n+\n+\n+fn a(a: & // Comment  \n+\t// Another comment\n+    'a File) {}\n+\n+fn b(b: & /* Another Comment */'a File) {}\n+\n+fn c(c: &'a /*Comment */ mut /*Comment */ File){}\n+\n+fn d(c: & // Comment\n+'b // Multi Line\n+// Comment\n+mut // Multi Line\n+// Comment\n+File\n+) {}\n+\n+fn e(c: &// Comment\n+File) {}\n+\n+fn d(c: &// Comment\n+mut // Multi Line\n+// Comment\n+File\n+) {}"}, {"sha": "e3d40eb42674811d6083488ff3b286c860243646", "filename": "tests/target/issue-4245.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b7c38c9d50fcf48e40cf245b48ab9f36054f40d3/tests%2Ftarget%2Fissue-4245.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7c38c9d50fcf48e40cf245b48ab9f36054f40d3/tests%2Ftarget%2Fissue-4245.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4245.rs?ref=b7c38c9d50fcf48e40cf245b48ab9f36054f40d3", "patch": "@@ -0,0 +1,34 @@\n+fn a(\n+    a: & // Comment\n+    // Another comment\n+    'a File,\n+) {\n+}\n+\n+fn b(b: & /* Another Comment */ 'a File) {}\n+\n+fn c(c: &'a /*Comment */ mut /*Comment */ File) {}\n+\n+fn d(\n+    c: & // Comment\n+    'b // Multi Line\n+    // Comment\n+    mut // Multi Line\n+    // Comment\n+    File,\n+) {\n+}\n+\n+fn e(\n+    c: & // Comment\n+    File,\n+) {\n+}\n+\n+fn d(\n+    c: & // Comment\n+    mut // Multi Line\n+    // Comment\n+    File,\n+) {\n+}"}]}