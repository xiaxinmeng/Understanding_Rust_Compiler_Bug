{"sha": "09a04226e4500940be6275de848b2b77dd50a8dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5YTA0MjI2ZTQ1MDA5NDBiZTYyNzVkZTg0OGIyYjc3ZGQ1MGE4ZGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-28T15:19:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-28T15:19:12Z"}, "message": "Auto merge of #4040 - mikerite:fix-build-20190428, r=Manishearth\n\nFix breakage due to rust-lang/rust#60225\n\nWrote this up before I saw that Manish already started on a fix in #4038. It no doubt contains errors. Feel free to close.", "tree": {"sha": "639889d1e04f792fb3b8fe8e9f489b2e7cd56883", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/639889d1e04f792fb3b8fe8e9f489b2e7cd56883"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09a04226e4500940be6275de848b2b77dd50a8dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09a04226e4500940be6275de848b2b77dd50a8dd", "html_url": "https://github.com/rust-lang/rust/commit/09a04226e4500940be6275de848b2b77dd50a8dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09a04226e4500940be6275de848b2b77dd50a8dd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "910d538ef1f643334974aa0c2f45ff44a74d92b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/910d538ef1f643334974aa0c2f45ff44a74d92b1", "html_url": "https://github.com/rust-lang/rust/commit/910d538ef1f643334974aa0c2f45ff44a74d92b1"}, {"sha": "5ad79c2b3dbd75004dec9a5c481e7b8b64e9c228", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ad79c2b3dbd75004dec9a5c481e7b8b64e9c228", "html_url": "https://github.com/rust-lang/rust/commit/5ad79c2b3dbd75004dec9a5c481e7b8b64e9c228"}], "stats": {"total": 152, "additions": 78, "deletions": 74}, "files": [{"sha": "1f6501f74e70c01d69bc4fc944b22cc8d52573a6", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 43, "deletions": 50, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/09a04226e4500940be6275de848b2b77dd50a8dd/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a04226e4500940be6275de848b2b77dd50a8dd/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=09a04226e4500940be6275de848b2b77dd50a8dd", "patch": "@@ -676,7 +676,8 @@ fn never_loop_expr(expr: &Expr, main_loop_id: HirId) -> NeverLoopResult {\n         | ExprKind::Field(ref e, _)\n         | ExprKind::AddrOf(_, ref e)\n         | ExprKind::Struct(_, _, Some(ref e))\n-        | ExprKind::Repeat(ref e, _) => never_loop_expr(e, main_loop_id),\n+        | ExprKind::Repeat(ref e, _)\n+        | ExprKind::Use(ref e) => never_loop_expr(e, main_loop_id),\n         ExprKind::Array(ref es) | ExprKind::MethodCall(_, _, ref es) | ExprKind::Tup(ref es) => {\n             never_loop_expr_all(&mut es.iter(), main_loop_id)\n         },\n@@ -1458,54 +1459,46 @@ fn check_for_loop_explicit_counter<'a, 'tcx>(\n \n     // For each candidate, check the parent block to see if\n     // it's initialized to zero at the start of the loop.\n-    let map = &cx.tcx.hir();\n-    let expr_node_id = expr.hir_id;\n-    let parent_scope = map\n-        .get_enclosing_scope(expr_node_id)\n-        .and_then(|id| map.get_enclosing_scope(id));\n-    if let Some(parent_id) = parent_scope {\n-        if let Node::Block(block) = map.get_by_hir_id(parent_id) {\n-            for (id, _) in visitor.states.iter().filter(|&(_, v)| *v == VarState::IncrOnce) {\n-                let mut visitor2 = InitializeVisitor {\n-                    cx,\n-                    end_expr: expr,\n-                    var_id: *id,\n-                    state: VarState::IncrOnce,\n-                    name: None,\n-                    depth: 0,\n-                    past_loop: false,\n-                };\n-                walk_block(&mut visitor2, block);\n-\n-                if visitor2.state == VarState::Warn {\n-                    if let Some(name) = visitor2.name {\n-                        let mut applicability = Applicability::MachineApplicable;\n-                        span_lint_and_sugg(\n-                            cx,\n-                            EXPLICIT_COUNTER_LOOP,\n-                            expr.span,\n-                            &format!(\"the variable `{}` is used as a loop counter.\", name),\n-                            \"consider using\",\n-                            format!(\n-                                \"for ({}, {}) in {}.enumerate()\",\n-                                name,\n-                                snippet_with_applicability(cx, pat.span, \"item\", &mut applicability),\n-                                if higher::range(cx, arg).is_some() {\n-                                    format!(\n-                                        \"({})\",\n-                                        snippet_with_applicability(cx, arg.span, \"_\", &mut applicability)\n-                                    )\n-                                } else {\n-                                    format!(\n-                                        \"{}\",\n-                                        sugg::Sugg::hir_with_applicability(cx, arg, \"_\", &mut applicability)\n-                                            .maybe_par()\n-                                    )\n-                                }\n-                            ),\n-                            applicability,\n-                        );\n-                    }\n+    if let Some(block) = get_enclosing_block(&cx, expr.hir_id) {\n+        for (id, _) in visitor.states.iter().filter(|&(_, v)| *v == VarState::IncrOnce) {\n+            let mut visitor2 = InitializeVisitor {\n+                cx,\n+                end_expr: expr,\n+                var_id: *id,\n+                state: VarState::IncrOnce,\n+                name: None,\n+                depth: 0,\n+                past_loop: false,\n+            };\n+            walk_block(&mut visitor2, block);\n+\n+            if visitor2.state == VarState::Warn {\n+                if let Some(name) = visitor2.name {\n+                    let mut applicability = Applicability::MachineApplicable;\n+                    span_lint_and_sugg(\n+                        cx,\n+                        EXPLICIT_COUNTER_LOOP,\n+                        expr.span,\n+                        &format!(\"the variable `{}` is used as a loop counter.\", name),\n+                        \"consider using\",\n+                        format!(\n+                            \"for ({}, {}) in {}.enumerate()\",\n+                            name,\n+                            snippet_with_applicability(cx, pat.span, \"item\", &mut applicability),\n+                            if higher::range(cx, arg).is_some() {\n+                                format!(\n+                                    \"({})\",\n+                                    snippet_with_applicability(cx, arg.span, \"_\", &mut applicability)\n+                                )\n+                            } else {\n+                                format!(\n+                                    \"{}\",\n+                                    sugg::Sugg::hir_with_applicability(cx, arg, \"_\", &mut applicability).maybe_par()\n+                                )\n+                            }\n+                        ),\n+                        applicability,\n+                    );\n                 }\n             }\n         }\n@@ -2042,7 +2035,7 @@ fn is_simple_break_expr(expr: &Expr) -> bool {\n // To trigger the EXPLICIT_COUNTER_LOOP lint, a variable must be\n // incremented exactly once in the loop body, and initialized to zero\n // at the start of the loop.\n-#[derive(PartialEq)]\n+#[derive(Debug, PartialEq)]\n enum VarState {\n     Initial,  // Not examined yet\n     IncrOnce, // Incremented exactly once, may be a loop counter"}, {"sha": "3936473f725d38673dbb18bf8679af0dcec9f7ac", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09a04226e4500940be6275de848b2b77dd50a8dd/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a04226e4500940be6275de848b2b77dd50a8dd/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=09a04226e4500940be6275de848b2b77dd50a8dd", "patch": "@@ -495,6 +495,12 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n             ExprKind::Err => {\n                 println!(\"Err = {}\", current);\n             },\n+            ExprKind::Use(ref expr) => {\n+                let expr_pat = self.next(\"expr\");\n+                println!(\"Use(ref {}) = {};\", expr_pat, current);\n+                self.current = expr_pat;\n+                self.visit_expr(expr);\n+            },\n         }\n     }\n "}, {"sha": "71f84d6910fd21c9b632f647a93f789022ffc656", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09a04226e4500940be6275de848b2b77dd50a8dd/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a04226e4500940be6275de848b2b77dd50a8dd/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=09a04226e4500940be6275de848b2b77dd50a8dd", "patch": "@@ -156,6 +156,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n                     && self.eq_block(lb, rb)\n                     && both(ll, rl, |l, r| l.ident.as_str() == r.ident.as_str())\n             },\n+            (&ExprKind::Use(ref le), &ExprKind::Use(ref re)) => self.eq_expr(le, re),\n             _ => false,\n         }\n     }\n@@ -606,6 +607,11 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                 }\n             },\n             ExprKind::Err => {},\n+            ExprKind::Use(ref e) => {\n+                let c: fn(_) -> _ = ExprKind::Use;\n+                c.hash(&mut self.s);\n+                self.hash_expr(e);\n+            },\n         }\n     }\n "}, {"sha": "02725e5106018b87dbadea805a16b49c9231a70f", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09a04226e4500940be6275de848b2b77dd50a8dd/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a04226e4500940be6275de848b2b77dd50a8dd/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=09a04226e4500940be6275de848b2b77dd50a8dd", "patch": "@@ -330,6 +330,10 @@ fn print_expr(cx: &LateContext<'_, '_>, expr: &hir::Expr, indent: usize) {\n         hir::ExprKind::Err => {\n             println!(\"{}Err\", ind);\n         },\n+        hir::ExprKind::Use(ref e) => {\n+            println!(\"{}Use\", ind);\n+            print_expr(cx, e, indent + 1);\n+        },\n     }\n }\n "}, {"sha": "acb996a3c9b8ef5abc580ba8ea4bcc6b33b8cde5", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09a04226e4500940be6275de848b2b77dd50a8dd/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a04226e4500940be6275de848b2b77dd50a8dd/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=09a04226e4500940be6275de848b2b77dd50a8dd", "patch": "@@ -115,6 +115,7 @@ impl<'a> Sugg<'a> {\n             | hir::ExprKind::Struct(..)\n             | hir::ExprKind::Tup(..)\n             | hir::ExprKind::While(..)\n+            | hir::ExprKind::Use(_)\n             | hir::ExprKind::Err => Sugg::NonParen(snippet),\n             hir::ExprKind::Assign(..) => Sugg::BinOp(AssocOp::Assign, snippet),\n             hir::ExprKind::AssignOp(op, ..) => Sugg::BinOp(hirbinop2assignop(op), snippet),"}, {"sha": "9402705355ccf28bcd19057d1b09f6d01c968baa", "filename": "tests/ui/author/for_loop.stdout", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/09a04226e4500940be6275de848b2b77dd50a8dd/tests%2Fui%2Fauthor%2Ffor_loop.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/09a04226e4500940be6275de848b2b77dd50a8dd/tests%2Fui%2Fauthor%2Ffor_loop.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Ffor_loop.stdout?ref=09a04226e4500940be6275de848b2b77dd50a8dd", "patch": "@@ -1,9 +1,7 @@\n if_chain! {\n-    if let ExprKind::Block(ref block) = expr.node;\n-    if let StmtKind::Local(ref local) = block.node;\n-    if let Some(ref init) = local.init;\n-    if let ExprKind::Match(ref expr, ref arms, MatchSource::ForLoopDesugar) = init.node;\n-    if let ExprKind::Call(ref func, ref args) = expr.node;\n+    if let ExprKind::Use(ref expr) = expr.node;\n+    if let ExprKind::Match(ref expr1, ref arms, MatchSource::ForLoopDesugar) = expr.node;\n+    if let ExprKind::Call(ref func, ref args) = expr1.node;\n     if let ExprKind::Path(ref path) = func.node;\n     if match_qpath(path, &[\"{{root}}\", \"std\", \"iter\", \"IntoIterator\", \"into_iter\"]);\n     if args.len() == 1;\n@@ -13,12 +11,12 @@ if_chain! {\n     // unimplemented: field checks\n     if arms.len() == 1;\n     if let ExprKind::Loop(ref body, ref label, LoopSource::ForLoop) = arms[0].body.node;\n-    if let StmtKind::Local(ref local1) = body.node;\n-    if let PatKind::Binding(BindingAnnotation::Mutable, _, name, None) = local1.pat.node;\n+    if let StmtKind::Local(ref local) = body.node;\n+    if let PatKind::Binding(BindingAnnotation::Mutable, _, name, None) = local.pat.node;\n     if name.node.as_str() == \"__next\";\n-    if let StmtKind::Expr(ref e, _) = local1.pat.node\n-    if let ExprKind::Match(ref expr1, ref arms1, MatchSource::ForLoopDesugar) = e.node;\n-    if let ExprKind::Call(ref func1, ref args1) = expr1.node;\n+    if let StmtKind::Expr(ref e, _) = local.pat.node\n+    if let ExprKind::Match(ref expr2, ref arms1, MatchSource::ForLoopDesugar) = e.node;\n+    if let ExprKind::Call(ref func1, ref args1) = expr2.node;\n     if let ExprKind::Path(ref path2) = func1.node;\n     if match_qpath(path2, &[\"{{root}}\", \"std\", \"iter\", \"Iterator\", \"next\"]);\n     if args1.len() == 1;\n@@ -40,27 +38,23 @@ if_chain! {\n     if arms1[1].pats.len() == 1;\n     if let PatKind::Path(ref path7) = arms1[1].pats[0].node;\n     if match_qpath(path7, &[\"{{root}}\", \"std\", \"option\", \"Option\", \"None\"]);\n-    if let StmtKind::Local(ref local2) = path7.node;\n-    if let Some(ref init1) = local2.init;\n-    if let ExprKind::Path(ref path8) = init1.node;\n+    if let StmtKind::Local(ref local1) = path7.node;\n+    if let Some(ref init) = local1.init;\n+    if let ExprKind::Path(ref path8) = init.node;\n     if match_qpath(path8, &[\"__next\"]);\n-    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name1, None) = local2.pat.node;\n+    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name1, None) = local1.pat.node;\n     if name1.node.as_str() == \"y\";\n-    if let StmtKind::Expr(ref e1, _) = local2.pat.node\n-    if let ExprKind::Block(ref block1) = e1.node;\n-    if let StmtKind::Local(ref local3) = block1.node;\n-    if let Some(ref init2) = local3.init;\n-    if let ExprKind::Path(ref path9) = init2.node;\n+    if let StmtKind::Expr(ref e1, _) = local1.pat.node\n+    if let ExprKind::Block(ref block) = e1.node;\n+    if let StmtKind::Local(ref local2) = block.node;\n+    if let Some(ref init1) = local2.init;\n+    if let ExprKind::Path(ref path9) = init1.node;\n     if match_qpath(path9, &[\"y\"]);\n-    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name2, None) = local3.pat.node;\n+    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name2, None) = local2.pat.node;\n     if name2.node.as_str() == \"z\";\n     if arms[0].pats.len() == 1;\n     if let PatKind::Binding(BindingAnnotation::Mutable, _, name3, None) = arms[0].pats[0].node;\n     if name3.node.as_str() == \"iter\";\n-    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name4, None) = local.pat.node;\n-    if name4.node.as_str() == \"_result\";\n-    if let ExprKind::Path(ref path10) = local.pat.node;\n-    if match_qpath(path10, &[\"_result\"]);\n     then {\n         // report your lint here\n     }"}]}