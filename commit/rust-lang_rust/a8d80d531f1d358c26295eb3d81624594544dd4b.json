{"sha": "a8d80d531f1d358c26295eb3d81624594544dd4b", "node_id": "C_kwDOAAsO6NoAKGE4ZDgwZDUzMWYxZDM1OGMyNjI5NWViM2Q4MTYyNDU5NDU0NGRkNGI", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-05T17:44:09Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-08-19T14:29:55Z"}, "message": "Move `GetFirst` into `Methods` lint pass", "tree": {"sha": "432e602e9cd01b52f160876e023e256981d65167", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/432e602e9cd01b52f160876e023e256981d65167"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8d80d531f1d358c26295eb3d81624594544dd4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8d80d531f1d358c26295eb3d81624594544dd4b", "html_url": "https://github.com/rust-lang/rust/commit/a8d80d531f1d358c26295eb3d81624594544dd4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8d80d531f1d358c26295eb3d81624594544dd4b/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3b77974d0025b6900fde9799ad4b2cd324050fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3b77974d0025b6900fde9799ad4b2cd324050fb", "html_url": "https://github.com/rust-lang/rust/commit/e3b77974d0025b6900fde9799ad4b2cd324050fb"}], "stats": {"total": 151, "additions": 76, "deletions": 75}, "files": [{"sha": "529f7babaa5eab516e5f2a7744f4d31cef4afd4a", "filename": "clippy_lints/src/get_first.rs", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/e3b77974d0025b6900fde9799ad4b2cd324050fb/clippy_lints%2Fsrc%2Fget_first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b77974d0025b6900fde9799ad4b2cd324050fb/clippy_lints%2Fsrc%2Fget_first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fget_first.rs?ref=e3b77974d0025b6900fde9799ad4b2cd324050fb", "patch": "@@ -1,68 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{is_slice_of_primitives, match_def_path, paths};\n-use if_chain::if_chain;\n-use rustc_ast::LitKind;\n-use rustc_errors::Applicability;\n-use rustc_hir as hir;\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::source_map::Spanned;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for using `x.get(0)` instead of\n-    /// `x.first()`.\n-    ///\n-    /// ### Why is this bad?\n-    /// Using `x.first()` is easier to read and has the same\n-    /// result.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// let x = vec![2, 3, 5];\n-    /// let first_element = x.get(0);\n-    /// ```\n-    ///\n-    /// Use instead:\n-    /// ```rust\n-    /// let x = vec![2, 3, 5];\n-    /// let first_element = x.first();\n-    /// ```\n-    #[clippy::version = \"1.63.0\"]\n-    pub GET_FIRST,\n-    style,\n-    \"Using `x.get(0)` when `x.first()` is simpler\"\n-}\n-declare_lint_pass!(GetFirst => [GET_FIRST]);\n-\n-impl<'tcx> LateLintPass<'tcx> for GetFirst {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n-        if_chain! {\n-            if let hir::ExprKind::MethodCall(_, [struct_calling_on, method_arg], _) = &expr.kind;\n-            if let Some(expr_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n-            if match_def_path(cx, expr_def_id, &paths::SLICE_GET);\n-\n-            if let Some(_) = is_slice_of_primitives(cx, struct_calling_on);\n-            if let hir::ExprKind::Lit(Spanned { node: LitKind::Int(0, _), .. }) = method_arg.kind;\n-\n-            then {\n-                let mut applicability = Applicability::MachineApplicable;\n-                let slice_name = snippet_with_applicability(\n-                    cx,\n-                    struct_calling_on.span, \"..\",\n-                    &mut applicability,\n-                );\n-                span_lint_and_sugg(\n-                    cx,\n-                    GET_FIRST,\n-                    expr.span,\n-                    &format!(\"accessing first element with `{0}.get(0)`\", slice_name),\n-                    \"try\",\n-                    format!(\"{}.first()\", slice_name),\n-                    applicability,\n-                );\n-            }\n-        }\n-    }\n-}"}, {"sha": "8ce0a26915f7def28af093154e797fd3be0ffc83", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d80d531f1d358c26295eb3d81624594544dd4b/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d80d531f1d358c26295eb3d81624594544dd4b/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=a8d80d531f1d358c26295eb3d81624594544dd4b", "patch": "@@ -81,7 +81,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(functions::NOT_UNSAFE_PTR_ARG_DEREF),\n     LintId::of(functions::RESULT_UNIT_ERR),\n     LintId::of(functions::TOO_MANY_ARGUMENTS),\n-    LintId::of(get_first::GET_FIRST),\n     LintId::of(if_let_mutex::IF_LET_MUTEX),\n     LintId::of(indexing_slicing::OUT_OF_BOUNDS_INDEXING),\n     LintId::of(infinite_iter::INFINITE_ITER),\n@@ -162,6 +161,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(methods::FILTER_MAP_IDENTITY),\n     LintId::of(methods::FILTER_NEXT),\n     LintId::of(methods::FLAT_MAP_IDENTITY),\n+    LintId::of(methods::GET_FIRST),\n     LintId::of(methods::GET_LAST_WITH_LEN),\n     LintId::of(methods::INSPECT_FOR_EACH),\n     LintId::of(methods::INTO_ITER_ON_REF),"}, {"sha": "a6224035ec824572d168224a4b990047e7baee4c", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d80d531f1d358c26295eb3d81624594544dd4b/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d80d531f1d358c26295eb3d81624594544dd4b/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=a8d80d531f1d358c26295eb3d81624594544dd4b", "patch": "@@ -174,7 +174,6 @@ store.register_lints(&[\n     functions::TOO_MANY_ARGUMENTS,\n     functions::TOO_MANY_LINES,\n     future_not_send::FUTURE_NOT_SEND,\n-    get_first::GET_FIRST,\n     if_let_mutex::IF_LET_MUTEX,\n     if_not_else::IF_NOT_ELSE,\n     if_then_some_else_none::IF_THEN_SOME_ELSE_NONE,\n@@ -302,6 +301,7 @@ store.register_lints(&[\n     methods::FLAT_MAP_IDENTITY,\n     methods::FLAT_MAP_OPTION,\n     methods::FROM_ITER_INSTEAD_OF_COLLECT,\n+    methods::GET_FIRST,\n     methods::GET_LAST_WITH_LEN,\n     methods::GET_UNWRAP,\n     methods::IMPLICIT_CLONE,"}, {"sha": "5ddaba2396e75905bee7bc52ded733807b1f7680", "filename": "clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d80d531f1d358c26295eb3d81624594544dd4b/clippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d80d531f1d358c26295eb3d81624594544dd4b/clippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_style.rs?ref=a8d80d531f1d358c26295eb3d81624594544dd4b", "patch": "@@ -29,7 +29,6 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(functions::DOUBLE_MUST_USE),\n     LintId::of(functions::MUST_USE_UNIT),\n     LintId::of(functions::RESULT_UNIT_ERR),\n-    LintId::of(get_first::GET_FIRST),\n     LintId::of(inherent_to_string::INHERENT_TO_STRING),\n     LintId::of(init_numbered_fields::INIT_NUMBERED_FIELDS),\n     LintId::of(len_zero::COMPARISON_TO_EMPTY),\n@@ -62,6 +61,7 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(methods::CHARS_LAST_CMP),\n     LintId::of(methods::CHARS_NEXT_CMP),\n     LintId::of(methods::ERR_EXPECT),\n+    LintId::of(methods::GET_FIRST),\n     LintId::of(methods::INTO_ITER_ON_REF),\n     LintId::of(methods::IS_DIGIT_ASCII_RADIX),\n     LintId::of(methods::ITER_CLONED_COLLECT),"}, {"sha": "3fcdc84113d1ef65314336d805005fbbc66e9c79", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d80d531f1d358c26295eb3d81624594544dd4b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d80d531f1d358c26295eb3d81624594544dd4b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a8d80d531f1d358c26295eb3d81624594544dd4b", "patch": "@@ -233,7 +233,6 @@ mod from_over_into;\n mod from_str_radix_10;\n mod functions;\n mod future_not_send;\n-mod get_first;\n mod if_let_mutex;\n mod if_not_else;\n mod if_then_some_else_none;\n@@ -907,7 +906,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(strings::TrimSplitWhitespace));\n     store.register_late_pass(|| Box::new(rc_clone_in_vec_init::RcCloneInVecInit));\n     store.register_early_pass(|| Box::new(duplicate_mod::DuplicateMod::default()));\n-    store.register_late_pass(|| Box::new(get_first::GetFirst));\n     store.register_early_pass(|| Box::new(unused_rounding::UnusedRounding));\n     store.register_early_pass(move || Box::new(almost_complete_letter_range::AlmostCompleteLetterRange::new(msrv)));\n     store.register_late_pass(|| Box::new(swap_ptr_to_ref::SwapPtrToRef));"}, {"sha": "4de77de74042171a65e7092def7c30cad1895558", "filename": "clippy_lints/src/methods/get_first.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a8d80d531f1d358c26295eb3d81624594544dd4b/clippy_lints%2Fsrc%2Fmethods%2Fget_first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d80d531f1d358c26295eb3d81624594544dd4b/clippy_lints%2Fsrc%2Fmethods%2Fget_first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fget_first.rs?ref=a8d80d531f1d358c26295eb3d81624594544dd4b", "patch": "@@ -0,0 +1,39 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_slice_of_primitives;\n+use clippy_utils::source::snippet_with_applicability;\n+use if_chain::if_chain;\n+use rustc_ast::LitKind;\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+use rustc_span::source_map::Spanned;\n+\n+use super::GET_FIRST;\n+\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx hir::Expr<'_>,\n+    recv: &'tcx hir::Expr<'_>,\n+    arg: &'tcx hir::Expr<'_>,\n+) {\n+    if_chain! {\n+        if let Some(method_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n+        if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n+        if cx.tcx.type_of(impl_id).is_slice();\n+        if let Some(_) = is_slice_of_primitives(cx, recv);\n+        if let hir::ExprKind::Lit(Spanned { node: LitKind::Int(0, _), .. }) = arg.kind;\n+        then {\n+            let mut app = Applicability::MachineApplicable;\n+            let slice_name = snippet_with_applicability(cx, recv.span, \"..\", &mut app);\n+            span_lint_and_sugg(\n+                cx,\n+                GET_FIRST,\n+                expr.span,\n+                &format!(\"accessing first element with `{0}.get(0)`\", slice_name),\n+                \"try\",\n+                format!(\"{}.first()\", slice_name),\n+                app,\n+            );\n+        }\n+    }\n+}"}, {"sha": "c3438426985b67188e0bbab1910025a31152b807", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a8d80d531f1d358c26295eb3d81624594544dd4b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d80d531f1d358c26295eb3d81624594544dd4b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a8d80d531f1d358c26295eb3d81624594544dd4b", "patch": "@@ -24,6 +24,7 @@ mod filter_next;\n mod flat_map_identity;\n mod flat_map_option;\n mod from_iter_instead_of_collect;\n+mod get_first;\n mod get_last_with_len;\n mod get_unwrap;\n mod implicit_clone;\n@@ -2457,6 +2458,32 @@ declare_clippy_lint! {\n     \"Checks for calls to ends_with with case-sensitive file extensions\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for using `x.get(0)` instead of\n+    /// `x.first()`.\n+    ///\n+    /// ### Why is this bad?\n+    /// Using `x.first()` is easier to read and has the same\n+    /// result.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let x = vec![2, 3, 5];\n+    /// let first_element = x.get(0);\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// let x = vec![2, 3, 5];\n+    /// let first_element = x.first();\n+    /// ```\n+    #[clippy::version = \"1.63.0\"]\n+    pub GET_FIRST,\n+    style,\n+    \"Using `x.get(0)` when `x.first()` is simpler\"\n+}\n+\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Option<RustcVersion>,\n@@ -2564,6 +2591,7 @@ impl_lint_pass!(Methods => [\n     NAIVE_BYTECOUNT,\n     BYTES_COUNT_TO_LEN,\n     CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS,\n+    GET_FIRST,\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -2833,7 +2861,8 @@ impl Methods {\n                 },\n                 (\"ends_with\", [arg]) => {\n                     if let ExprKind::MethodCall(_, _, span) = expr.kind {\n-                    case_sensitive_file_extension_comparisons::check(cx, expr, span, recv, arg);\n+                        case_sensitive_file_extension_comparisons::check(cx, expr, span, recv, arg);\n+                    }\n                 },\n                 (\"expect\", [_]) => match method_call(recv) {\n                     Some((\"ok\", [recv], _)) => ok_expect::check(cx, expr, recv),\n@@ -2867,7 +2896,10 @@ impl Methods {\n                         inspect_for_each::check(cx, expr, span2);\n                     }\n                 },\n-                (\"get\", [arg]) => get_last_with_len::check(cx, expr, recv, arg),\n+                (\"get\", [arg]) => {\n+                    get_first::check(cx, expr, recv, arg);\n+                    get_last_with_len::check(cx, expr, recv, arg);\n+                },\n                 (\"get_or_insert_with\", [arg]) => unnecessary_lazy_eval::check(cx, expr, recv, arg, \"get_or_insert\"),\n                 (\"is_file\", []) => filetype_is_file::check(cx, expr, recv),\n                 (\"is_digit\", [radix]) => is_digit_ascii_radix::check(cx, expr, recv, radix, self.msrv),"}]}