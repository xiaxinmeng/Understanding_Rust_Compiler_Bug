{"sha": "80c13ce13403e4aba7a73b765bfd8c40997f196d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwYzEzY2UxMzQwM2U0YWJhN2E3M2I3NjViZmQ4YzQwOTk3ZjE5NmQ=", "commit": {"author": {"name": "Garrett Berg", "email": "googberg@gmail.com", "date": "2017-10-13T16:04:59Z"}, "committer": {"name": "Garrett Berg", "email": "googberg@gmail.com", "date": "2017-10-13T16:15:03Z"}, "message": "fix review comments", "tree": {"sha": "1257b7dd00e6ccd7407e502be457417db251964c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1257b7dd00e6ccd7407e502be457417db251964c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80c13ce13403e4aba7a73b765bfd8c40997f196d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80c13ce13403e4aba7a73b765bfd8c40997f196d", "html_url": "https://github.com/rust-lang/rust/commit/80c13ce13403e4aba7a73b765bfd8c40997f196d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80c13ce13403e4aba7a73b765bfd8c40997f196d/comments", "author": {"login": "vitiral", "id": 5587659, "node_id": "MDQ6VXNlcjU1ODc2NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/5587659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vitiral", "html_url": "https://github.com/vitiral", "followers_url": "https://api.github.com/users/vitiral/followers", "following_url": "https://api.github.com/users/vitiral/following{/other_user}", "gists_url": "https://api.github.com/users/vitiral/gists{/gist_id}", "starred_url": "https://api.github.com/users/vitiral/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vitiral/subscriptions", "organizations_url": "https://api.github.com/users/vitiral/orgs", "repos_url": "https://api.github.com/users/vitiral/repos", "events_url": "https://api.github.com/users/vitiral/events{/privacy}", "received_events_url": "https://api.github.com/users/vitiral/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vitiral", "id": 5587659, "node_id": "MDQ6VXNlcjU1ODc2NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/5587659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vitiral", "html_url": "https://github.com/vitiral", "followers_url": "https://api.github.com/users/vitiral/followers", "following_url": "https://api.github.com/users/vitiral/following{/other_user}", "gists_url": "https://api.github.com/users/vitiral/gists{/gist_id}", "starred_url": "https://api.github.com/users/vitiral/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vitiral/subscriptions", "organizations_url": "https://api.github.com/users/vitiral/orgs", "repos_url": "https://api.github.com/users/vitiral/repos", "events_url": "https://api.github.com/users/vitiral/events{/privacy}", "received_events_url": "https://api.github.com/users/vitiral/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7fe970400042ff09d3eead47fb3850d6a5d63df", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7fe970400042ff09d3eead47fb3850d6a5d63df", "html_url": "https://github.com/rust-lang/rust/commit/f7fe970400042ff09d3eead47fb3850d6a5d63df"}], "stats": {"total": 100, "additions": 51, "deletions": 49}, "files": [{"sha": "0cb920a111dd91ff4df0b25a247a75f6982b1dc0", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/80c13ce13403e4aba7a73b765bfd8c40997f196d/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c13ce13403e4aba7a73b765bfd8c40997f196d/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=80c13ce13403e4aba7a73b765bfd8c40997f196d", "patch": "@@ -39,8 +39,6 @@\n //! previous revision to compare things to.\n //!\n \n-#![allow(dead_code)]\n-\n use std::collections::HashSet;\n use std::iter::FromIterator;\n use std::vec::Vec;\n@@ -141,14 +139,14 @@ const LABELS_CONST: &[&[&str]] = &[\n ];\n \n /// Constant/Typedef in an impl\n-const LABELS_CONST_ASSOCIATED: &[&[&str]] = &[\n+const LABELS_CONST_IN_IMPL: &[&[&str]] = &[\n     BASE_HIR,\n     BASE_CONST,\n     EXTRA_ASSOCIATED,\n ];\n \n /// Trait-Const/Typedef DepNodes\n-const LABELS_CONST_TRAIT: &[&[&str]] = &[\n+const LABELS_CONST_IN_TRAIT: &[&[&str]] = &[\n     BASE_HIR,\n     BASE_CONST,\n     EXTRA_ASSOCIATED,\n@@ -163,15 +161,15 @@ const LABELS_FN: &[&[&str]] = &[\n ];\n \n /// Method DepNodes\n-const LABELS_FN_ASSOCIATED: &[&[&str]] = &[\n+const LABELS_FN_IN_IMPL: &[&[&str]] = &[\n     BASE_HIR,\n     BASE_MIR,\n     BASE_FN,\n     EXTRA_ASSOCIATED,\n ];\n \n /// Trait-Method DepNodes\n-const LABELS_FN_TRAIT: &[&[&str]] = &[\n+const LABELS_FN_IN_TRAIT: &[&[&str]] = &[\n     BASE_HIR,\n     BASE_MIR,\n     BASE_FN,\n@@ -190,13 +188,14 @@ const LABELS_IMPL: &[&[&str]] = &[\n     BASE_IMPL,\n ];\n \n-/// Struct DepNodes\n-const LABELS_STRUCT: &[&[&str]] = &[\n+/// Abstract Data Type (Struct, Enum, Unions) DepNodes\n+const LABELS_ADT: &[&[&str]] = &[\n     BASE_HIR,\n     BASE_STRUCT,\n ];\n \n /// Trait Definition DepNodes\n+#[allow(dead_code)]\n const LABELS_TRAIT: &[&[&str]] = &[\n     BASE_HIR,\n     BASE_TRAIT_DEF,\n@@ -382,16 +381,16 @@ impl<'a, 'tcx> DirtyCleanVisitor<'a, 'tcx> {\n                     HirItem::ItemGlobalAsm(..) => (\"ItemGlobalAsm\", LABELS_HIR_ONLY),\n \n                     // A type alias, e.g. `type Foo = Bar<u8>`\n-                    HirItem::ItemTy(..) => (\"ItemTy\", LABELS_CONST),\n+                    HirItem::ItemTy(..) => (\"ItemTy\", LABELS_HIR_ONLY),\n \n                     // An enum definition, e.g. `enum Foo<A, B> {C<A>, D<B>}`\n-                    HirItem::ItemEnum(..) => (\"ItemEnum\", LABELS_STRUCT),\n+                    HirItem::ItemEnum(..) => (\"ItemEnum\", LABELS_ADT),\n \n                     // A struct definition, e.g. `struct Foo<A> {x: A}`\n-                    HirItem::ItemStruct(..) => (\"ItemStruct\", LABELS_STRUCT),\n+                    HirItem::ItemStruct(..) => (\"ItemStruct\", LABELS_ADT),\n \n                     // A union definition, e.g. `union Foo<A, B> {x: A, y: B}`\n-                    HirItem::ItemUnion(..) => (\"ItemUnion\", LABELS_STRUCT),\n+                    HirItem::ItemUnion(..) => (\"ItemUnion\", LABELS_ADT),\n \n                     // Represents a Trait Declaration\n                     // FIXME(michaelwoerister): trait declaration is buggy because sometimes some of\n@@ -426,16 +425,16 @@ impl<'a, 'tcx> DirtyCleanVisitor<'a, 'tcx> {\n             },\n             HirNode::NodeTraitItem(item) => {\n                 match item.node {\n-                    TraitItemKind::Method(..) => (\"NodeTraitItem\", LABELS_FN_TRAIT),\n-                    TraitItemKind::Const(..) => (\"NodeTraitConst\", LABELS_CONST_TRAIT),\n-                    TraitItemKind::Type(..) => (\"NodeTraitType\", LABELS_CONST_TRAIT),\n+                    TraitItemKind::Method(..) => (\"NodeTraitItem\", LABELS_FN_IN_TRAIT),\n+                    TraitItemKind::Const(..) => (\"NodeTraitConst\", LABELS_CONST_IN_TRAIT),\n+                    TraitItemKind::Type(..) => (\"NodeTraitType\", LABELS_CONST_IN_TRAIT),\n                 }\n             },\n             HirNode::NodeImplItem(item) => {\n                 match item.node {\n-                    ImplItemKind::Method(..) => (\"NodeImplItem\", LABELS_FN_ASSOCIATED),\n-                    ImplItemKind::Const(..) => (\"NodeImplConst\", LABELS_CONST_ASSOCIATED),\n-                    ImplItemKind::Type(..) => (\"NodeImplType\", LABELS_CONST_ASSOCIATED),\n+                    ImplItemKind::Method(..) => (\"NodeImplItem\", LABELS_FN_IN_IMPL),\n+                    ImplItemKind::Const(..) => (\"NodeImplConst\", LABELS_CONST_IN_IMPL),\n+                    ImplItemKind::Type(..) => (\"NodeImplType\", LABELS_CONST_IN_IMPL),\n                 }\n             },\n             _ => self.tcx.sess.span_fatal("}, {"sha": "0090c2aeef9369f57463a1933f8ea04e71c087e8", "filename": "src/test/incremental/hashes/call_expressions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/80c13ce13403e4aba7a73b765bfd8c40997f196d/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c13ce13403e4aba7a73b765bfd8c40997f196d/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs?ref=80c13ce13403e4aba7a73b765bfd8c40997f196d", "patch": "@@ -171,13 +171,13 @@ pub fn change_to_ufcs() {\n     s.method1('x', true);\n }\n \n-// FIXME(vitiral): why would this change anything, doesn't the Mir/Hir expand this\n-// sort of stuff?\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n+// One might think this would be expanded in the HirBody/Mir, but it actually\n+// results in slightly different Hir/Mir.\n pub fn change_to_ufcs() {\n     let s = Struct;\n     Struct::method1(&s, 'x', true);"}, {"sha": "f826d47c3e53f003f6a41ccfc6258abc8c9b6ef4", "filename": "src/test/incremental/hashes/enum_constructors.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/80c13ce13403e4aba7a73b765bfd8c40997f196d/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c13ce13403e4aba7a73b765bfd8c40997f196d/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs?ref=80c13ce13403e4aba7a73b765bfd8c40997f196d", "patch": "@@ -74,6 +74,8 @@ fn change_field_order_struct_like() -> Enum {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n+// FIXME(michaelwoerister):Interesting. I would have thought that that changes the MIR. And it\n+// would if it were not all constants\n fn change_field_order_struct_like() -> Enum {\n     Enum::Struct {\n         y: 4,\n@@ -156,7 +158,8 @@ mod change_constructor_path_indirectly_struct_like {\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"FnSignature,Hir,HirBody,MirOptimized,MirValidated,TypeckTables\"\n+        except=\"FnSignature,Hir,HirBody,MirOptimized,MirValidated,\\\n+                TypeckTables\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n@@ -217,7 +220,10 @@ fn change_constructor_path_tuple_like() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n+#[rustc_clean(\n+    cfg=\"cfail2\",\n+    except=\"HirBody,MirOptimized,MirValidated,TypeckTables\"\n+)]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n@@ -234,7 +240,10 @@ fn change_constructor_variant_tuple_like() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n+#[rustc_clean(\n+    cfg=\"cfail2\",\n+    except=\"HirBody,MirOptimized,MirValidated,TypeckTables\"\n+)]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n@@ -252,7 +261,8 @@ mod change_constructor_path_indirectly_tuple_like {\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"FnSignature,Hir,HirBody,MirOptimized,MirValidated,TypeckTables\"\n+        except=\"FnSignature,Hir,HirBody,MirOptimized,MirValidated,\\\n+                TypeckTables\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n@@ -335,7 +345,8 @@ mod change_constructor_path_indirectly_c_like {\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"FnSignature,Hir,HirBody,MirOptimized,MirValidated,TypeckTables\"\n+        except=\"FnSignature,Hir,HirBody,MirOptimized,MirValidated,\\\n+                TypeckTables\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]"}, {"sha": "22393fad3d074d223ec5b1274b4655f8c685f5ba", "filename": "src/test/incremental/hashes/enum_defs.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/80c13ce13403e4aba7a73b765bfd8c40997f196d/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c13ce13403e4aba7a73b765bfd8c40997f196d/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs?ref=80c13ce13403e4aba7a73b765bfd8c40997f196d", "patch": "@@ -444,7 +444,6 @@ enum EnumChangeNameOfTypeParameter<S> {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-#[repr(C)]\n enum EnumChangeNameOfTypeParameter<T> {\n     Variant1(T),\n }\n@@ -463,7 +462,6 @@ enum EnumAddTypeParameter<S> {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-#[repr(C)]\n enum EnumAddTypeParameter<S, T> {\n     Variant1(S),\n     Variant2(T),\n@@ -482,7 +480,6 @@ enum EnumChangeNameOfLifetimeParameter<'a> {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-#[repr(C)]\n enum EnumChangeNameOfLifetimeParameter<'b> {\n     Variant1(&'b u32),\n }\n@@ -501,7 +498,6 @@ enum EnumAddLifetimeParameter<'a> {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-#[repr(C)]\n enum EnumAddLifetimeParameter<'a, 'b> {\n     Variant1(&'a u32),\n     Variant2(&'b u32),\n@@ -517,11 +513,10 @@ enum EnumAddLifetimeParameterBound<'a, 'b> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\", except=\"GenericsOfItem\")]\n+#[rustc_dirty(cfg=\"cfail2\", except=\"GenericsOfItem,TypeOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-#[repr(C)]\n enum EnumAddLifetimeParameterBound<'a, 'b: 'a> {\n     Variant1(&'a u32),\n     Variant2(&'b u32),\n@@ -535,11 +530,10 @@ enum EnumAddLifetimeBoundToParameter<'a, T> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n+#[rustc_dirty(cfg=\"cfail2\", except=\"TypeOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-#[repr(C)]\n enum EnumAddLifetimeBoundToParameter<'a, T: 'a> {\n     Variant1(T),\n     Variant2(&'a u32),\n@@ -558,7 +552,6 @@ enum EnumAddTraitBound<S> {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-#[repr(C)]\n enum EnumAddTraitBound<T: Sync> {\n     Variant1(T),\n }\n@@ -573,11 +566,10 @@ enum EnumAddLifetimeParameterBoundWhere<'a, 'b> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\", except=\"GenericsOfItem\")]\n+#[rustc_dirty(cfg=\"cfail2\", except=\"GenericsOfItem,TypeOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-#[repr(C)]\n enum EnumAddLifetimeParameterBoundWhere<'a, 'b> where 'b: 'a {\n     Variant1(&'a u32),\n     Variant2(&'b u32),\n@@ -593,11 +585,10 @@ enum EnumAddLifetimeBoundToParameterWhere<'a, T> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n+#[rustc_dirty(cfg=\"cfail2\", except=\"TypeOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-#[repr(C)]\n enum EnumAddLifetimeBoundToParameterWhere<'a, T> where T: 'a {\n     Variant1(T),\n     Variant2(&'a u32),\n@@ -616,7 +607,6 @@ enum EnumAddTraitBoundWhere<S> {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-#[repr(C)]\n enum EnumAddTraitBoundWhere<T> where T: Sync {\n     Variant1(T),\n }"}, {"sha": "5067b571ee68b320706553569466ebce866fad67", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80c13ce13403e4aba7a73b765bfd8c40997f196d/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c13ce13403e4aba7a73b765bfd8c40997f196d/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=80c13ce13403e4aba7a73b765bfd8c40997f196d", "patch": "@@ -370,6 +370,8 @@ impl Foo {\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n+    // FIXME(michaelwoerister): This is curious but an unused lifetime parameter doesn't seem to\n+    // show up in any of the derived data structures.\n     #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_clean(cfg=\"cfail2\")]"}, {"sha": "b0a93eea523cfcf363b394e99203cc0f02da4139", "filename": "src/test/incremental/hashes/type_defs.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/80c13ce13403e4aba7a73b765bfd8c40997f196d/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c13ce13403e4aba7a73b765bfd8c40997f196d/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs?ref=80c13ce13403e4aba7a73b765bfd8c40997f196d", "patch": "@@ -35,7 +35,7 @@\n type ChangePrimitiveType = i32;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n type ChangePrimitiveType = i64;\n@@ -47,7 +47,7 @@ type ChangePrimitiveType = i64;\n type ChangeMutability = &'static i32;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n type ChangeMutability = &'static mut i32;\n@@ -59,7 +59,7 @@ type ChangeMutability = &'static mut i32;\n type ChangeLifetime<'a> = (&'static i32, &'a i32);\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n type ChangeLifetime<'a> = (&'a i32, &'a i32);\n@@ -74,7 +74,7 @@ struct Struct2;\n type ChangeTypeStruct = Struct1;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n type ChangeTypeStruct = Struct2;\n@@ -86,7 +86,7 @@ type ChangeTypeStruct = Struct2;\n type ChangeTypeTuple = (u32, u64);\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n type ChangeTypeTuple = (u32, i64);\n@@ -107,7 +107,7 @@ enum Enum2 {\n type ChangeTypeEnum = Enum1;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n type ChangeTypeEnum = Enum2;\n@@ -119,7 +119,7 @@ type ChangeTypeEnum = Enum2;\n type AddTupleField = (i32, i64);\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n type AddTupleField = (i32, i64, i16);\n@@ -131,7 +131,7 @@ type AddTupleField = (i32, i64, i16);\n type ChangeNestedTupleField = (i32, (i64, i16));\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n type ChangeNestedTupleField = (i32, (i64, i8));\n@@ -143,7 +143,7 @@ type ChangeNestedTupleField = (i32, (i64, i8));\n type AddTypeParam<T1> = (T1, T1);\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n type AddTypeParam<T1, T2> = (T1, T2);\n@@ -179,7 +179,7 @@ type AddTypeParamBoundWhereClause<T1> where T1: Clone+Copy = (T1, u32);\n type AddLifetimeParam<'a> = (&'a u32, &'a u32);\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n type AddLifetimeParam<'a, 'b> = (&'a u32, &'b u32);"}]}