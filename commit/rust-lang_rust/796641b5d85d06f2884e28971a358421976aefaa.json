{"sha": "796641b5d85d06f2884e28971a358421976aefaa", "node_id": "C_kwDOAAsO6NoAKDc5NjY0MWI1ZDg1ZDA2ZjI4ODRlMjg5NzFhMzU4NDIxOTc2YWVmYWE", "commit": {"author": {"name": "Dorian Scheidt", "email": "dorian.scheidt@gmail.com", "date": "2022-07-13T15:20:55Z"}, "committer": {"name": "Dorian Scheidt", "email": "dorian.scheidt@gmail.com", "date": "2022-07-13T19:54:17Z"}, "message": "Make search for applicable generics more precise", "tree": {"sha": "6879ce240ebb7c094190423387eabb26490223a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6879ce240ebb7c094190423387eabb26490223a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/796641b5d85d06f2884e28971a358421976aefaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/796641b5d85d06f2884e28971a358421976aefaa", "html_url": "https://github.com/rust-lang/rust/commit/796641b5d85d06f2884e28971a358421976aefaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/796641b5d85d06f2884e28971a358421976aefaa/comments", "author": {"login": "DorianListens", "id": 5692947, "node_id": "MDQ6VXNlcjU2OTI5NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5692947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DorianListens", "html_url": "https://github.com/DorianListens", "followers_url": "https://api.github.com/users/DorianListens/followers", "following_url": "https://api.github.com/users/DorianListens/following{/other_user}", "gists_url": "https://api.github.com/users/DorianListens/gists{/gist_id}", "starred_url": "https://api.github.com/users/DorianListens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DorianListens/subscriptions", "organizations_url": "https://api.github.com/users/DorianListens/orgs", "repos_url": "https://api.github.com/users/DorianListens/repos", "events_url": "https://api.github.com/users/DorianListens/events{/privacy}", "received_events_url": "https://api.github.com/users/DorianListens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DorianListens", "id": 5692947, "node_id": "MDQ6VXNlcjU2OTI5NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5692947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DorianListens", "html_url": "https://github.com/DorianListens", "followers_url": "https://api.github.com/users/DorianListens/followers", "following_url": "https://api.github.com/users/DorianListens/following{/other_user}", "gists_url": "https://api.github.com/users/DorianListens/gists{/gist_id}", "starred_url": "https://api.github.com/users/DorianListens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DorianListens/subscriptions", "organizations_url": "https://api.github.com/users/DorianListens/orgs", "repos_url": "https://api.github.com/users/DorianListens/repos", "events_url": "https://api.github.com/users/DorianListens/events{/privacy}", "received_events_url": "https://api.github.com/users/DorianListens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "075ab03851d7b4304ddf563d75c4ee3d713f2583", "url": "https://api.github.com/repos/rust-lang/rust/commits/075ab03851d7b4304ddf563d75c4ee3d713f2583", "html_url": "https://github.com/rust-lang/rust/commit/075ab03851d7b4304ddf563d75c4ee3d713f2583"}], "stats": {"total": 67, "additions": 49, "deletions": 18}, "files": [{"sha": "94b638d4c600ec10cc8c6608c2ef68e9b9f16438", "filename": "crates/ide-assists/src/handlers/extract_function.rs", "status": "modified", "additions": 49, "deletions": 18, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/796641b5d85d06f2884e28971a358421976aefaa/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796641b5d85d06f2884e28971a358421976aefaa/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=796641b5d85d06f2884e28971a358421976aefaa", "patch": "@@ -823,8 +823,9 @@ impl FunctionBody {\n             });\n \n         let parent = self.parent()?;\n-        let generic_param_lists = parent_generic_param_lists(&parent);\n-        let where_clauses = parent_where_clauses(&parent);\n+        let parents = generic_parents(&parent);\n+        let generic_param_lists = parents.iter().filter_map(|it| it.generic_param_list()).collect();\n+        let where_clauses = parents.iter().filter_map(|it| it.where_clause()).collect();\n \n         Some(ContainerInfo {\n             is_in_tail,\n@@ -990,24 +991,54 @@ impl FunctionBody {\n     }\n }\n \n-fn parent_where_clauses(parent: &SyntaxNode) -> Vec<ast::WhereClause> {\n-    let mut where_clause: Vec<ast::WhereClause> = parent\n-        .ancestors()\n-        .filter_map(ast::AnyHasGenericParams::cast)\n-        .filter_map(|it| it.where_clause())\n-        .collect();\n-    where_clause.reverse();\n-    where_clause\n+enum GenericParent {\n+    Fn(ast::Fn),\n+    Impl(ast::Impl),\n+    Trait(ast::Trait),\n }\n \n-fn parent_generic_param_lists(parent: &SyntaxNode) -> Vec<ast::GenericParamList> {\n-    let mut generic_param_list: Vec<ast::GenericParamList> = parent\n-        .ancestors()\n-        .filter_map(ast::AnyHasGenericParams::cast)\n-        .filter_map(|it| it.generic_param_list())\n-        .collect();\n-    generic_param_list.reverse();\n-    generic_param_list\n+impl GenericParent {\n+    fn generic_param_list(&self) -> Option<ast::GenericParamList> {\n+        match self {\n+            GenericParent::Fn(fn_) => fn_.generic_param_list(),\n+            GenericParent::Impl(impl_) => impl_.generic_param_list(),\n+            GenericParent::Trait(trait_) => trait_.generic_param_list(),\n+        }\n+    }\n+\n+    fn where_clause(&self) -> Option<ast::WhereClause> {\n+        match self {\n+            GenericParent::Fn(fn_) => fn_.where_clause(),\n+            GenericParent::Impl(impl_) => impl_.where_clause(),\n+            GenericParent::Trait(trait_) => trait_.where_clause(),\n+        }\n+    }\n+}\n+\n+/// Search `parent`'s ancestors for items with potentially applicable generic parameters\n+fn generic_parents(parent: &SyntaxNode) -> Vec<GenericParent> {\n+    let mut list = Vec::new();\n+    if let Some(parent_item) = parent.ancestors().find_map(ast::Item::cast) {\n+        match parent_item {\n+            ast::Item::Fn(ref fn_) => {\n+                if let Some(parent_parent) = parent_item\n+                    .syntax()\n+                    .parent()\n+                    .and_then(|it| it.parent())\n+                    .and_then(ast::Item::cast)\n+                {\n+                    match parent_parent {\n+                        ast::Item::Impl(impl_) => list.push(GenericParent::Impl(impl_)),\n+                        ast::Item::Trait(trait_) => list.push(GenericParent::Trait(trait_)),\n+                        _ => (),\n+                    }\n+                }\n+                list.push(GenericParent::Fn(fn_.clone()));\n+            }\n+            _ => (),\n+        }\n+    }\n+    list\n }\n \n /// checks if relevant var is used with `&mut` access inside body"}]}