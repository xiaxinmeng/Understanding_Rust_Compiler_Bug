{"sha": "e11dd4750301e55f6e0af1726001c7a7589a9cf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMWRkNDc1MDMwMWU1NWY2ZTBhZjE3MjYwMDFjN2E3NTg5YTljZjk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-31T13:32:07Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-03-19T09:15:35Z"}, "message": "rustc: use LocalDefId instead of DefIndex for query keys.", "tree": {"sha": "a09921c2edf05fe00b461f68cb8b8ab30c597bd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a09921c2edf05fe00b461f68cb8b8ab30c597bd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e11dd4750301e55f6e0af1726001c7a7589a9cf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e11dd4750301e55f6e0af1726001c7a7589a9cf9", "html_url": "https://github.com/rust-lang/rust/commit/e11dd4750301e55f6e0af1726001c7a7589a9cf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e11dd4750301e55f6e0af1726001c7a7589a9cf9/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6724d584b8e3b5fa5e06466d1e900cdd60953707", "url": "https://api.github.com/repos/rust-lang/rust/commits/6724d584b8e3b5fa5e06466d1e900cdd60953707", "html_url": "https://github.com/rust-lang/rust/commit/6724d584b8e3b5fa5e06466d1e900cdd60953707"}], "stats": {"total": 70, "additions": 31, "deletions": 39}, "files": [{"sha": "bee85c014e74695f7e5f14a917e4a46596d990ce", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e11dd4750301e55f6e0af1726001c7a7589a9cf9/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11dd4750301e55f6e0af1726001c7a7589a9cf9/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=e11dd4750301e55f6e0af1726001c7a7589a9cf9", "patch": "@@ -63,7 +63,7 @@ use crate::ty::subst::SubstsRef;\n use crate::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n \n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX};\n use rustc_hir::HirId;\n use rustc_span::symbol::Symbol;\n use std::fmt;\n@@ -413,19 +413,19 @@ impl<'tcx> DepNodeParams<'tcx> for DefId {\n     }\n }\n \n-impl<'tcx> DepNodeParams<'tcx> for DefIndex {\n+impl<'tcx> DepNodeParams<'tcx> for LocalDefId {\n     const CAN_RECONSTRUCT_QUERY_KEY: bool = true;\n \n     fn to_fingerprint(&self, tcx: TyCtxt<'_>) -> Fingerprint {\n-        tcx.hir().definitions().def_path_hash(*self).0\n+        self.to_def_id().to_fingerprint(tcx)\n     }\n \n     fn to_debug_str(&self, tcx: TyCtxt<'tcx>) -> String {\n-        tcx.def_path_str(DefId::local(*self))\n+        self.to_def_id().to_debug_str(tcx)\n     }\n \n     fn recover(tcx: TyCtxt<'tcx>, dep_node: &DepNode) -> Option<Self> {\n-        dep_node.extract_def_id(tcx).map(|id| id.index)\n+        dep_node.extract_def_id(tcx).map(|id| id.to_local())\n     }\n }\n "}, {"sha": "f47d22fdffbb72864d0731cde8a22b8f9ccffad6", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e11dd4750301e55f6e0af1726001c7a7589a9cf9/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11dd4750301e55f6e0af1726001c7a7589a9cf9/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=e11dd4750301e55f6e0af1726001c7a7589a9cf9", "patch": "@@ -11,7 +11,7 @@ use crate::ty::query::queries;\n use crate::ty::query::QueryDescription;\n use crate::ty::subst::SubstsRef;\n use crate::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIndex};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId};\n \n use rustc_span::symbol::Symbol;\n use std::borrow::Cow;\n@@ -791,7 +791,7 @@ rustc_queries! {\n         query specializes(_: (DefId, DefId)) -> bool {\n             desc { \"computing whether impls specialize one another\" }\n         }\n-        query in_scope_traits_map(_: DefIndex)\n+        query in_scope_traits_map(_: LocalDefId)\n             -> Option<&'tcx FxHashMap<ItemLocalId, StableVec<TraitCandidate>>> {\n             eval_always\n             desc { \"traits in scope at a block\" }\n@@ -948,15 +948,15 @@ rustc_queries! {\n         query resolve_lifetimes(_: CrateNum) -> &'tcx ResolveLifetimes {\n             desc { \"resolving lifetimes\" }\n         }\n-        query named_region_map(_: DefIndex) ->\n+        query named_region_map(_: LocalDefId) ->\n             Option<&'tcx FxHashMap<ItemLocalId, Region>> {\n             desc { \"looking up a named region\" }\n         }\n-        query is_late_bound_map(_: DefIndex) ->\n+        query is_late_bound_map(_: LocalDefId) ->\n             Option<&'tcx FxHashSet<ItemLocalId>> {\n             desc { \"testing if a region is late bound\" }\n         }\n-        query object_lifetime_defaults_map(_: DefIndex)\n+        query object_lifetime_defaults_map(_: LocalDefId)\n             -> Option<&'tcx FxHashMap<ItemLocalId, Vec<ObjectLifetimeDefault>>> {\n             desc { \"looking up lifetime defaults for a region\" }\n         }"}, {"sha": "25c442a820735504edd2f970f29d5e96e7a7fe63", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e11dd4750301e55f6e0af1726001c7a7589a9cf9/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11dd4750301e55f6e0af1726001c7a7589a9cf9/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=e11dd4750301e55f6e0af1726001c7a7589a9cf9", "patch": "@@ -55,7 +55,7 @@ use rustc_data_structures::stable_hasher::{\n use rustc_data_structures::sync::{self, Lock, Lrc, WorkerLocal};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, DefIndex, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, LocalDefId, LOCAL_CRATE};\n use rustc_hir::{HirId, Node, TraitCandidate};\n use rustc_hir::{ItemKind, ItemLocalId, ItemLocalMap, ItemLocalSet};\n use rustc_index::vec::{Idx, IndexVec};\n@@ -958,7 +958,7 @@ pub struct GlobalCtxt<'tcx> {\n \n     /// Map indicating what traits are in scope for places where this\n     /// is relevant; generated by resolve.\n-    trait_map: FxHashMap<DefIndex, FxHashMap<ItemLocalId, StableVec<TraitCandidate>>>,\n+    trait_map: FxHashMap<LocalDefId, FxHashMap<ItemLocalId, StableVec<TraitCandidate>>>,\n \n     /// Export map produced by name resolution.\n     export_map: FxHashMap<DefId, Vec<Export<hir::HirId>>>,\n@@ -1153,7 +1153,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let mut trait_map: FxHashMap<_, FxHashMap<_, _>> = FxHashMap::default();\n         for (k, v) in resolutions.trait_map {\n             let hir_id = definitions.node_to_hir_id(k);\n-            let map = trait_map.entry(hir_id.owner).or_default();\n+            let map = trait_map.entry(hir_id.owner_local_def_id()).or_default();\n             let v = v\n                 .into_iter()\n                 .map(|tc| tc.map_import_ids(|id| definitions.node_to_hir_id(id)))\n@@ -2631,19 +2631,22 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx StableVec<TraitCandidate>> {\n-        self.in_scope_traits_map(id.owner).and_then(|map| map.get(&id.local_id))\n+        self.in_scope_traits_map(id.owner_local_def_id()).and_then(|map| map.get(&id.local_id))\n     }\n \n     pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {\n-        self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())\n+        self.named_region_map(id.owner_local_def_id())\n+            .and_then(|map| map.get(&id.local_id).cloned())\n     }\n \n     pub fn is_late_bound(self, id: HirId) -> bool {\n-        self.is_late_bound_map(id.owner).map(|set| set.contains(&id.local_id)).unwrap_or(false)\n+        self.is_late_bound_map(id.owner_local_def_id())\n+            .map(|set| set.contains(&id.local_id))\n+            .unwrap_or(false)\n     }\n \n     pub fn object_lifetime_defaults(self, id: HirId) -> Option<&'tcx [ObjectLifetimeDefault]> {\n-        self.object_lifetime_defaults_map(id.owner)\n+        self.object_lifetime_defaults_map(id.owner_local_def_id())\n             .and_then(|map| map.get(&id.local_id).map(|v| &**v))\n     }\n }"}, {"sha": "6073d3a545f6db9c7b6dbb12186e188518037a06", "filename": "src/librustc/ty/query/keys.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e11dd4750301e55f6e0af1726001c7a7589a9cf9/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11dd4750301e55f6e0af1726001c7a7589a9cf9/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs?ref=e11dd4750301e55f6e0af1726001c7a7589a9cf9", "patch": "@@ -7,7 +7,7 @@ use crate::ty::fast_reject::SimplifiedType;\n use crate::ty::query::caches::DefaultCacheSelector;\n use crate::ty::subst::SubstsRef;\n use crate::ty::{self, Ty, TyCtxt};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -84,14 +84,14 @@ impl Key for CrateNum {\n     }\n }\n \n-impl Key for DefIndex {\n+impl Key for LocalDefId {\n     type CacheSelector = DefaultCacheSelector;\n \n     fn query_crate(&self) -> CrateNum {\n-        LOCAL_CRATE\n+        self.to_def_id().query_crate()\n     }\n-    fn default_span(&self, _tcx: TyCtxt<'_>) -> Span {\n-        DUMMY_SP\n+    fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n+        self.to_def_id().default_span(tcx)\n     }\n }\n "}, {"sha": "7ac8358c78a611ed6c38dc9e6cbd3f0c35783bb3", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e11dd4750301e55f6e0af1726001c7a7589a9cf9/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11dd4750301e55f6e0af1726001c7a7589a9cf9/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=e11dd4750301e55f6e0af1726001c7a7589a9cf9", "patch": "@@ -44,7 +44,7 @@ use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, DefIndex};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, LocalDefId};\n use rustc_hir::{Crate, HirIdSet, ItemLocalId, TraitCandidate};\n use rustc_index::vec::IndexVec;\n use rustc_session::config::{EntryFnType, OptLevel, OutputFilenames, SymbolManglingVersion};\n@@ -147,7 +147,7 @@ rustc_query_append! { [define_queries!][<'tcx>] }\n ///\n /// When you implement a new query, it will likely have a corresponding new\n /// `DepKind`, and you'll have to support it here in `force_from_dep_node()`. As\n-/// a rule of thumb, if your query takes a `DefId` or `DefIndex` as sole parameter,\n+/// a rule of thumb, if your query takes a `DefId` or `LocalDefId` as sole parameter,\n /// then `force_from_dep_node()` should not fail for it. Otherwise, you can just\n /// add it to the \"We don't have enough information to reconstruct...\" group in\n /// the match below."}, {"sha": "4cc2a2d45a6920c9be2be286b5968ae17c72d0ec", "filename": "src/librustc_mir/borrow_check/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e11dd4750301e55f6e0af1726001c7a7589a9cf9/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11dd4750301e55f6e0af1726001c7a7589a9cf9/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs?ref=e11dd4750301e55f6e0af1726001c7a7589a9cf9", "patch": "@@ -774,7 +774,7 @@ fn for_each_late_bound_region_defined_on<'tcx>(\n     fn_def_id: DefId,\n     mut f: impl FnMut(ty::Region<'tcx>),\n ) {\n-    if let Some(late_bounds) = tcx.is_late_bound_map(fn_def_id.index) {\n+    if let Some(late_bounds) = tcx.is_late_bound_map(fn_def_id.to_local()) {\n         for late_bound in late_bounds.iter() {\n             let hir_id = HirId { owner: fn_def_id.index, local_id: *late_bound };\n             let name = tcx.hir().name(hir_id);"}, {"sha": "5e8b08167a450088d9644c54d0feb51d599c105e", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e11dd4750301e55f6e0af1726001c7a7589a9cf9/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11dd4750301e55f6e0af1726001c7a7589a9cf9/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=e11dd4750301e55f6e0af1726001c7a7589a9cf9", "patch": "@@ -17,7 +17,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{GenericArg, GenericParam, LifetimeName, Node, ParamName, QPath};\n use rustc_hir::{GenericParamKind, HirIdMap, HirIdSet, LifetimeParamKind};\n@@ -280,25 +280,14 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     *providers = ty::query::Providers {\n         resolve_lifetimes,\n \n-        named_region_map: |tcx, id| {\n-            let id = LocalDefId::from_def_id(DefId::local(id)); // (*)\n-            tcx.resolve_lifetimes(LOCAL_CRATE).defs.get(&id)\n-        },\n-\n-        is_late_bound_map: |tcx, id| {\n-            let id = LocalDefId::from_def_id(DefId::local(id)); // (*)\n-            tcx.resolve_lifetimes(LOCAL_CRATE).late_bound.get(&id)\n-        },\n-\n+        named_region_map: |tcx, id| tcx.resolve_lifetimes(LOCAL_CRATE).defs.get(&id),\n+        is_late_bound_map: |tcx, id| tcx.resolve_lifetimes(LOCAL_CRATE).late_bound.get(&id),\n         object_lifetime_defaults_map: |tcx, id| {\n-            let id = LocalDefId::from_def_id(DefId::local(id)); // (*)\n             tcx.resolve_lifetimes(LOCAL_CRATE).object_lifetime_defaults.get(&id)\n         },\n \n         ..*providers\n     };\n-\n-    // (*) FIXME the query should be defined to take a LocalDefId\n }\n \n /// Computes the `ResolveLifetimes` map that contains data for the"}]}