{"sha": "196b2b920f9094cb78cc041709b3c3456b020fbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NmIyYjkyMGY5MDk0Y2I3OGNjMDQxNzA5YjNjMzQ1NmIwMjBmYmQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-18T14:59:47Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-18T14:59:47Z"}, "message": "Make sure trans translates record fields in the order they appear in code\n\nThis prevents surprising side-effect orders, and makes them easier for\nthe other passes to deal with.", "tree": {"sha": "bf922d8c9491b4b1cc037df43532b7effab23712", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf922d8c9491b4b1cc037df43532b7effab23712"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/196b2b920f9094cb78cc041709b3c3456b020fbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/196b2b920f9094cb78cc041709b3c3456b020fbd", "html_url": "https://github.com/rust-lang/rust/commit/196b2b920f9094cb78cc041709b3c3456b020fbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/196b2b920f9094cb78cc041709b3c3456b020fbd/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68db68c4cccb9204e91ffcd08fd27be0f33f0033", "url": "https://api.github.com/repos/rust-lang/rust/commits/68db68c4cccb9204e91ffcd08fd27be0f33f0033", "html_url": "https://github.com/rust-lang/rust/commit/68db68c4cccb9204e91ffcd08fd27be0f33f0033"}], "stats": {"total": 49, "additions": 25, "deletions": 24}, "files": [{"sha": "8158580fb9ef7764f5d67d179ce871987ce2f733", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/196b2b920f9094cb78cc041709b3c3456b020fbd/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/196b2b920f9094cb78cc041709b3c3456b020fbd/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=196b2b920f9094cb78cc041709b3c3456b020fbd", "patch": "@@ -4035,34 +4035,35 @@ fn trans_rec(bcx: @block_ctxt, fields: [ast::field],\n       save_in(pos) { pos }\n     };\n \n-    let base_val = alt base {\n+    let ty_fields = alt ty::struct(bcx_tcx(bcx), t) { ty::ty_rec(f) { f } };\n+    let temp_cleanups = [];\n+    for fld in fields {\n+        let ix = option::get(vec::position_pred({|ft|\n+            str::eq(fld.node.ident, ft.ident)\n+        }, ty_fields));\n+        let dst = GEP_tup_like_1(bcx, t, addr, [0, ix as int]);\n+        bcx = trans_expr_save_in(dst.bcx, fld.node.expr, dst.val);\n+        add_clean_temp_mem(bcx, dst.val, ty_fields[ix].mt.ty);\n+        temp_cleanups += [dst.val];\n+    }\n+    alt base {\n       some(bexp) {\n-        let base_res = trans_temp_expr(bcx, bexp);\n-        bcx = base_res.bcx;\n-        base_res.val\n+        let {bcx: cx, val: base_val} = trans_temp_expr(bcx, bexp), i = 0;\n+        bcx = cx;\n+        // Copy over inherited fields\n+        for tf in ty_fields {\n+            if !vec::any({|f| str::eq(f.node.ident, tf.ident)}, fields) {\n+                let dst = GEP_tup_like_1(bcx, t, addr, [0, i]);\n+                let base = GEP_tup_like_1(bcx, t, base_val, [0, i]);\n+                let val = load_if_immediate(base.bcx, base.val, tf.mt.ty);\n+                bcx = copy_val(base.bcx, INIT, dst.val, val, tf.mt.ty);\n+            }\n+            i += 1;\n+        }\n       }\n-      none. { C_nil() }\n+      none. {}\n     };\n \n-    let ty_fields = alt ty::struct(bcx_tcx(bcx), t) { ty::ty_rec(f) { f } };\n-    let temp_cleanups = [], i = 0;\n-    for tf in ty_fields {\n-        let dst = GEP_tup_like_1(bcx, t, addr, [0, i]);\n-        bcx = dst.bcx;\n-        alt vec::find({|f| str::eq(f.node.ident, tf.ident)}, fields) {\n-          some(f) {\n-            bcx = trans_expr_save_in(bcx, f.node.expr, dst.val);\n-          }\n-          none. {\n-            let base = GEP_tup_like_1(bcx, t, base_val, [0, i]);\n-            let val = load_if_immediate(base.bcx, base.val, tf.mt.ty);\n-            bcx = copy_val(base.bcx, INIT, dst.val, val, tf.mt.ty);\n-          }\n-        }\n-        add_clean_temp_mem(bcx, dst.val, tf.mt.ty);\n-        temp_cleanups += [dst.val];\n-        i += 1;\n-    }\n     // Now revoke the cleanups as we pass responsibility for the data\n     // structure on to the caller\n     for cleanup in temp_cleanups { revoke_clean(bcx, cleanup); }"}]}