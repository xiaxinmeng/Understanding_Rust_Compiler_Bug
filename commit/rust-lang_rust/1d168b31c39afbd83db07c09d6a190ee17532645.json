{"sha": "1d168b31c39afbd83db07c09d6a190ee17532645", "node_id": "C_kwDOAAsO6NoAKDFkMTY4YjMxYzM5YWZiZDgzZGIwN2MwOWQ2YTE5MGVlMTc1MzI2NDU", "commit": {"author": {"name": "bluthej", "email": "joffrey.bluthe@e.email", "date": "2023-03-26T17:11:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-26T17:11:38Z"}, "message": "Merge branch 'rust-lang:master' into clear-with-drain", "tree": {"sha": "0446f9eded6b983cd90c0e96ec2333f79aa129b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0446f9eded6b983cd90c0e96ec2333f79aa129b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d168b31c39afbd83db07c09d6a190ee17532645", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkIHzKCRBK7hj4Ov3rIwAAjV0IAHOLU0oB1UVFty1IemhemmA2\n/G/Yqxcwv8kDfCeKT4SaflebH2aB0R5Vfaz+PDEpc/WNhVG5hQhoPZiwnz/tXqfC\nRORa96yrkC1KUSksH1k7zrx9uIloTV16u0D81iBPGE56TmTwKRUvwZLaPmOanSMK\n1K3lbEf2sMQ6JrzXZmcG6b8QD7WzURv4hFlsBk4cHLvgHXEA8mU+o/6AsI4/gH+V\nzYivBjVsQmCSM8XaehIR2zvCB0Q3OrRJytjBcCeNe4PlKK5znfAlcxqbLhwcq4eG\n6h5QcsytVPRipUYFBUo9vYOzgbxggpAn8NLd63C9ncYf0IJAcNaNaOo0T1IrAEQ=\n=ObLl\n-----END PGP SIGNATURE-----\n", "payload": "tree 0446f9eded6b983cd90c0e96ec2333f79aa129b7\nparent d56c9417920ffb299cd0dcf8fc7cba1092bb29d7\nparent 5ed64d4c612508ece912f170005abd7988865d10\nauthor bluthej <joffrey.bluthe@e.email> 1679850698 +0200\ncommitter GitHub <noreply@github.com> 1679850698 +0200\n\nMerge branch 'rust-lang:master' into clear-with-drain\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d168b31c39afbd83db07c09d6a190ee17532645", "html_url": "https://github.com/rust-lang/rust/commit/1d168b31c39afbd83db07c09d6a190ee17532645", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d168b31c39afbd83db07c09d6a190ee17532645/comments", "author": {"login": "bluthej", "id": 29771403, "node_id": "MDQ6VXNlcjI5NzcxNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/29771403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluthej", "html_url": "https://github.com/bluthej", "followers_url": "https://api.github.com/users/bluthej/followers", "following_url": "https://api.github.com/users/bluthej/following{/other_user}", "gists_url": "https://api.github.com/users/bluthej/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluthej/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluthej/subscriptions", "organizations_url": "https://api.github.com/users/bluthej/orgs", "repos_url": "https://api.github.com/users/bluthej/repos", "events_url": "https://api.github.com/users/bluthej/events{/privacy}", "received_events_url": "https://api.github.com/users/bluthej/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d56c9417920ffb299cd0dcf8fc7cba1092bb29d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d56c9417920ffb299cd0dcf8fc7cba1092bb29d7", "html_url": "https://github.com/rust-lang/rust/commit/d56c9417920ffb299cd0dcf8fc7cba1092bb29d7"}, {"sha": "5ed64d4c612508ece912f170005abd7988865d10", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ed64d4c612508ece912f170005abd7988865d10", "html_url": "https://github.com/rust-lang/rust/commit/5ed64d4c612508ece912f170005abd7988865d10"}], "stats": {"total": 1036, "additions": 715, "deletions": 321}, "files": [{"sha": "4d80d3ce63dac89aae6de38076d10a9feb89e047", "filename": ".cargo/config.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/.cargo%2Fconfig.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/.cargo%2Fconfig.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.cargo%2Fconfig.toml?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -11,3 +11,6 @@ target-dir = \"target\"\n \n [unstable]\n binary-dep-depinfo = true\n+\n+[profile.dev]\n+split-debuginfo = \"unpacked\""}, {"sha": "93198aabdb5f5ae8f04369e580ee1ca54ce7f00f", "filename": ".github/workflows/clippy_bors.yml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/.github%2Fworkflows%2Fclippy_bors.yml", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/.github%2Fworkflows%2Fclippy_bors.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy_bors.yml?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -180,6 +180,8 @@ jobs:\n \n     # Run\n     - name: Build Integration Test\n+      env:\n+        CARGO_PROFILE_DEV_SPLIT_DEBUGINFO: off\n       run: cargo test --test integration --features integration --no-run\n \n     # Upload"}, {"sha": "8fde8c6d902fa451197ad86f4270aad0775b9e47", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -4988,6 +4988,7 @@ Released 2018-09-13\n [`unnecessary_safety_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_safety_doc\n [`unnecessary_self_imports`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_self_imports\n [`unnecessary_sort_by`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_sort_by\n+[`unnecessary_struct_initialization`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_struct_initialization\n [`unnecessary_to_owned`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_to_owned\n [`unnecessary_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_unwrap\n [`unnecessary_wraps`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps"}, {"sha": "82703b18fd7d25becba833e825aea148bf870aad", "filename": "COPYRIGHT", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/COPYRIGHT", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/COPYRIGHT", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/COPYRIGHT?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -1,7 +1,11 @@\n+// REUSE-IgnoreStart\n+\n Copyright 2014-2022 The Rust Project Developers\n \n Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n option. All files in the project carrying such notice may not be\n copied, modified, or distributed except according to those terms.\n+\n+// REUSE-IgnoreEnd"}, {"sha": "b69ed8900a491371a75fdb3bfb16fb8cd9015f9e", "filename": "README.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -275,10 +275,14 @@ If you want to contribute to Clippy, you can find more information in [CONTRIBUT\n \n ## License\n \n+<!-- REUSE-IgnoreStart -->\n+\n Copyright 2014-2022 The Rust Project Developers\n \n Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n [https://www.apache.org/licenses/LICENSE-2.0](https://www.apache.org/licenses/LICENSE-2.0)> or the MIT license\n <LICENSE-MIT or [https://opensource.org/licenses/MIT](https://opensource.org/licenses/MIT)>, at your\n option. Files in the project may not be\n copied, modified, or distributed except according to those terms.\n+\n+<!-- REUSE-IgnoreEnd -->"}, {"sha": "0f5ee7103de1ae7fc11f04d24b5b516bfaf8961e", "filename": "book/src/development/adding_lints.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/book%2Fsrc%2Fdevelopment%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/book%2Fsrc%2Fdevelopment%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fadding_lints.md?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -18,6 +18,7 @@ because that's clearly a non-descriptive name.\n     - [Cargo lints](#cargo-lints)\n   - [Rustfix tests](#rustfix-tests)\n   - [Testing manually](#testing-manually)\n+  - [Running directly](#running-directly)\n   - [Lint declaration](#lint-declaration)\n   - [Lint registration](#lint-registration)\n   - [Lint passes](#lint-passes)\n@@ -186,6 +187,15 @@ cargo dev lint input.rs\n from the working copy root. With tests in place, let's have a look at\n implementing our lint now.\n \n+## Running directly\n+\n+While it's easier to just use `cargo dev lint`, it might be desirable to get\n+`target/release/cargo-clippy` and `target/release/clippy-driver` to work as well in some cases.\n+By default, they don't work because clippy dynamically links rustc. To help them find rustc,\n+add the path printed by`rustc --print target-libdir` (ran inside this workspace so that the rustc version matches)\n+to your library search path.\n+On linux, this can be done by setting the `LD_LIBRARY_PATH` environment variable to that path.\n+\n ## Lint declaration\n \n Let's start by opening the new file created in the `clippy_lints` crate at"}, {"sha": "29fde9336c0b9fa1f34f821661479f8a05cdb978", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -495,18 +495,19 @@ struct NotSimplificationVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx> Visitor<'tcx> for NotSimplificationVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n-        if let ExprKind::Unary(UnOp::Not, inner) = &expr.kind {\n-            if let Some(suggestion) = simplify_not(self.cx, inner) {\n-                span_lint_and_sugg(\n-                    self.cx,\n-                    NONMINIMAL_BOOL,\n-                    expr.span,\n-                    \"this boolean expression can be simplified\",\n-                    \"try\",\n-                    suggestion,\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n+        if let ExprKind::Unary(UnOp::Not, inner) = &expr.kind &&\n+            !inner.span.from_expansion() &&\n+            let Some(suggestion) = simplify_not(self.cx, inner)\n+        {\n+            span_lint_and_sugg(\n+                self.cx,\n+                NONMINIMAL_BOOL,\n+                expr.span,\n+                \"this boolean expression can be simplified\",\n+                \"try\",\n+                suggestion,\n+                Applicability::MachineApplicable,\n+            );\n         }\n \n         walk_expr(self, expr);"}, {"sha": "95c2ecbf791b5a5262cf308e4ce3338a9a763dd2", "filename": "clippy_lints/src/casts/cast_possible_truncation.rs", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -2,8 +2,9 @@ use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n use clippy_utils::expr_or_init;\n use clippy_utils::source::snippet;\n+use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::{get_discriminant_value, is_isize_or_usize};\n-use rustc_errors::{Applicability, SuggestionStyle};\n+use rustc_errors::{Applicability, Diagnostic, SuggestionStyle};\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::LateContext;\n@@ -163,19 +164,34 @@ pub(super) fn check(\n         _ => return,\n     };\n \n-    let name_of_cast_from = snippet(cx, cast_expr.span, \"..\");\n-    let cast_to_snip = snippet(cx, cast_to_span, \"..\");\n-    let suggestion = format!(\"{cast_to_snip}::try_from({name_of_cast_from})\");\n-\n     span_lint_and_then(cx, CAST_POSSIBLE_TRUNCATION, expr.span, &msg, |diag| {\n         diag.help(\"if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\");\n-        diag.span_suggestion_with_style(\n-            expr.span,\n-            \"... or use `try_from` and handle the error accordingly\",\n-            suggestion,\n-            Applicability::Unspecified,\n-            // always show the suggestion in a separate line\n-            SuggestionStyle::ShowAlways,\n-        );\n+        if !cast_from.is_floating_point() {\n+            offer_suggestion(cx, expr, cast_expr, cast_to_span, diag);\n+        }\n     });\n }\n+\n+fn offer_suggestion(\n+    cx: &LateContext<'_>,\n+    expr: &Expr<'_>,\n+    cast_expr: &Expr<'_>,\n+    cast_to_span: Span,\n+    diag: &mut Diagnostic,\n+) {\n+    let cast_to_snip = snippet(cx, cast_to_span, \"..\");\n+    let suggestion = if cast_to_snip == \"_\" {\n+        format!(\"{}.try_into()\", Sugg::hir(cx, cast_expr, \"..\").maybe_par())\n+    } else {\n+        format!(\"{cast_to_snip}::try_from({})\", Sugg::hir(cx, cast_expr, \"..\"))\n+    };\n+\n+    diag.span_suggestion_with_style(\n+        expr.span,\n+        \"... or use `try_from` and handle the error accordingly\",\n+        suggestion,\n+        Applicability::Unspecified,\n+        // always show the suggestion in a separate line\n+        SuggestionStyle::ShowAlways,\n+    );\n+}"}, {"sha": "a8926b29ac83f3de4694c7e69aaf2328fe58c3e7", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -143,7 +143,7 @@ impl<'tcx> LateLintPass<'tcx> for CognitiveComplexity {\n         span: Span,\n         def_id: LocalDefId,\n     ) {\n-        if !cx.tcx.has_attr(def_id.to_def_id(), sym::test) {\n+        if !cx.tcx.has_attr(def_id, sym::test) {\n             let expr = if is_async_fn(kind) {\n                 match get_async_fn_body(cx.tcx, body) {\n                     Some(b) => b,"}, {"sha": "15b557bded2eda43146116d42818cb6611ded43c", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -619,6 +619,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::unnamed_address::VTABLE_ADDRESS_COMPARISONS_INFO,\n     crate::unnecessary_owned_empty_strings::UNNECESSARY_OWNED_EMPTY_STRINGS_INFO,\n     crate::unnecessary_self_imports::UNNECESSARY_SELF_IMPORTS_INFO,\n+    crate::unnecessary_struct_initialization::UNNECESSARY_STRUCT_INITIALIZATION_INFO,\n     crate::unnecessary_wraps::UNNECESSARY_WRAPS_INFO,\n     crate::unnested_or_patterns::UNNESTED_OR_PATTERNS_INFO,\n     crate::unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME_INFO,"}, {"sha": "8f68f90a2a130ccc8ce1fe4b690297f0ce8efab8", "filename": "clippy_lints/src/derivable_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fderivable_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fderivable_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderivable_impls.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -181,7 +181,7 @@ impl<'tcx> LateLintPass<'tcx> for DerivableImpls {\n                 self_ty,\n                 ..\n             }) = item.kind;\n-            if !cx.tcx.has_attr(item.owner_id.to_def_id(), sym::automatically_derived);\n+            if !cx.tcx.has_attr(item.owner_id, sym::automatically_derived);\n             if !item.span.from_expansion();\n             if let Some(def_id) = trait_ref.trait_def_id();\n             if cx.tcx.is_diagnostic_item(sym::Default, def_id);"}, {"sha": "f425dd5fb70b57fee1abcaf4b11c76a0a928393f", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -212,7 +212,7 @@ impl<'tcx> LateLintPass<'tcx> for Derive {\n         }) = item.kind\n         {\n             let ty = cx.tcx.type_of(item.owner_id).subst_identity();\n-            let is_automatically_derived = cx.tcx.has_attr(item.owner_id.to_def_id(), sym::automatically_derived);\n+            let is_automatically_derived = cx.tcx.has_attr(item.owner_id, sym::automatically_derived);\n \n             check_hash_peq(cx, item.span, trait_ref, ty, is_automatically_derived);\n             check_ord_partial_ord(cx, item.span, trait_ref, ty, is_automatically_derived);"}, {"sha": "c9fad98e43730c167a281aeaaec3e9fbafb3f4f5", "filename": "clippy_lints/src/disallowed_script_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fdisallowed_script_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fdisallowed_script_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_script_idents.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -32,7 +32,7 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// // Assuming that `clippy.toml` contains the following line:\n-    /// // allowed-locales = [\"Latin\", \"Cyrillic\"]\n+    /// // allowed-scripts = [\"Latin\", \"Cyrillic\"]\n     /// let counter = 10; // OK, latin is allowed.\n     /// let \u0441\u0447\u0451\u0442\u0447\u0438\u043a = 10; // OK, cyrillic is allowed.\n     /// let z\u00e4hler = 10; // OK, it's still latin."}, {"sha": "1e9e826631c37227a560b7a60d63739a60b1c91a", "filename": "clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -22,13 +22,13 @@ use super::{DOUBLE_MUST_USE, MUST_USE_CANDIDATE, MUST_USE_UNIT};\n \n pub(super) fn check_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n     let attrs = cx.tcx.hir().attrs(item.hir_id());\n-    let attr = cx.tcx.get_attr(item.owner_id.to_def_id(), sym::must_use);\n+    let attr = cx.tcx.get_attr(item.owner_id, sym::must_use);\n     if let hir::ItemKind::Fn(ref sig, _generics, ref body_id) = item.kind {\n         let is_public = cx.effective_visibilities.is_exported(item.owner_id.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n         if let Some(attr) = attr {\n             check_needless_must_use(cx, sig.decl, item.owner_id, item.span, fn_header_span, attr);\n-        } else if is_public && !is_proc_macro(cx.sess(), attrs) && !attrs.iter().any(|a| a.has_name(sym::no_mangle)) {\n+        } else if is_public && !is_proc_macro(attrs) && !attrs.iter().any(|a| a.has_name(sym::no_mangle)) {\n             check_must_use_candidate(\n                 cx,\n                 sig.decl,\n@@ -47,13 +47,10 @@ pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Imp\n         let is_public = cx.effective_visibilities.is_exported(item.owner_id.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n         let attrs = cx.tcx.hir().attrs(item.hir_id());\n-        let attr = cx.tcx.get_attr(item.owner_id.to_def_id(), sym::must_use);\n+        let attr = cx.tcx.get_attr(item.owner_id, sym::must_use);\n         if let Some(attr) = attr {\n             check_needless_must_use(cx, sig.decl, item.owner_id, item.span, fn_header_span, attr);\n-        } else if is_public\n-            && !is_proc_macro(cx.sess(), attrs)\n-            && trait_ref_of_method(cx, item.owner_id.def_id).is_none()\n-        {\n+        } else if is_public && !is_proc_macro(attrs) && trait_ref_of_method(cx, item.owner_id.def_id).is_none() {\n             check_must_use_candidate(\n                 cx,\n                 sig.decl,\n@@ -73,12 +70,12 @@ pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Tr\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n \n         let attrs = cx.tcx.hir().attrs(item.hir_id());\n-        let attr = cx.tcx.get_attr(item.owner_id.to_def_id(), sym::must_use);\n+        let attr = cx.tcx.get_attr(item.owner_id, sym::must_use);\n         if let Some(attr) = attr {\n             check_needless_must_use(cx, sig.decl, item.owner_id, item.span, fn_header_span, attr);\n         } else if let hir::TraitFn::Provided(eid) = *eid {\n             let body = cx.tcx.hir().body(eid);\n-            if attr.is_none() && is_public && !is_proc_macro(cx.sess(), attrs) {\n+            if attr.is_none() && is_public && !is_proc_macro(attrs) {\n                 check_must_use_candidate(\n                     cx,\n                     sig.decl,"}, {"sha": "ed0bd58c770c7566ca2847cc00fe9162fa73977c", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -9,7 +9,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::{sym, Span};\n use rustc_trait_selection::traits::error_reporting::suggestions::TypeErrCtxtExt;\n-use rustc_trait_selection::traits::{self, FulfillmentError};\n+use rustc_trait_selection::traits::{self, FulfillmentError, ObligationCtxt};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -79,8 +79,10 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                 let send_trait = cx.tcx.get_diagnostic_item(sym::Send).unwrap();\n                 let span = decl.output.span();\n                 let infcx = cx.tcx.infer_ctxt().build();\n+                let ocx = ObligationCtxt::new(&infcx);\n                 let cause = traits::ObligationCause::misc(span, fn_def_id);\n-                let send_errors = traits::fully_solve_bound(&infcx, cause, cx.param_env, ret_ty, send_trait);\n+                ocx.register_bound(cause, cx.param_env, ret_ty, send_trait);\n+                let send_errors = ocx.select_all_or_error();\n                 if !send_errors.is_empty() {\n                     span_lint_and_then(\n                         cx,"}, {"sha": "fe28c526be3507692d42f978ef5f1e680c274abc", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -167,7 +167,7 @@ fn is_infinite(cx: &LateContext<'_>, expr: &Expr<'_>) -> Finiteness {\n             Finite\n         },\n         ExprKind::Block(block, _) => block.expr.as_ref().map_or(Finite, |e| is_infinite(cx, e)),\n-        ExprKind::Box(e) | ExprKind::AddrOf(BorrowKind::Ref, _, e) => is_infinite(cx, e),\n+        ExprKind::AddrOf(BorrowKind::Ref, _, e) => is_infinite(cx, e),\n         ExprKind::Call(path, _) => {\n             if let ExprKind::Path(ref qpath) = path.kind {\n                 cx.qpath_res(qpath, path.hir_id)"}, {"sha": "c9210bf73f896f3c8ca75e417ac71d18cd5c9636", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -302,6 +302,7 @@ mod unit_types;\n mod unnamed_address;\n mod unnecessary_owned_empty_strings;\n mod unnecessary_self_imports;\n+mod unnecessary_struct_initialization;\n mod unnecessary_wraps;\n mod unnested_or_patterns;\n mod unsafe_removed_from_name;\n@@ -938,6 +939,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(let_with_type_underscore::UnderscoreTyped));\n     store.register_late_pass(|_| Box::new(allow_attributes::AllowAttribute));\n     store.register_late_pass(move |_| Box::new(manual_main_separator_str::ManualMainSeparatorStr::new(msrv())));\n+    store.register_late_pass(|_| Box::new(unnecessary_struct_initialization::UnnecessaryStruct));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "f0a1b1dfe56281e29339411eade823f6b21c8bb9", "filename": "clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -124,8 +124,7 @@ fn stmt_to_expr<'tcx>(stmt: &Stmt<'tcx>) -> Option<(&'tcx Expr<'tcx>, Option<&'t\n #[allow(clippy::too_many_lines)]\n fn never_loop_expr(expr: &Expr<'_>, ignore_ids: &mut Vec<HirId>, main_loop_id: HirId) -> NeverLoopResult {\n     match expr.kind {\n-        ExprKind::Box(e)\n-        | ExprKind::Unary(_, e)\n+        ExprKind::Unary(_, e)\n         | ExprKind::Cast(e, _)\n         | ExprKind::Type(e, _)\n         | ExprKind::Field(e, _)"}, {"sha": "577bc1d661dbd50b4bfd88a853738d50a2dd45fe", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -1,5 +1,4 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::match_function_call_with_def_id;\n use clippy_utils::source::{position_before_rarrow, snippet_block, snippet_opt};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -184,16 +183,10 @@ fn captures_all_lifetimes(inputs: &[Ty<'_>], output_lifetimes: &[LifetimeName])\n fn desugared_async_block<'tcx>(cx: &LateContext<'tcx>, block: &'tcx Block<'tcx>) -> Option<&'tcx Body<'tcx>> {\n     if_chain! {\n         if let Some(block_expr) = block.expr;\n-        if let Some(args) = cx\n-            .tcx\n-            .lang_items()\n-            .identity_future_fn()\n-            .and_then(|def_id| match_function_call_with_def_id(cx, block_expr, def_id));\n-        if args.len() == 1;\n         if let Expr {\n             kind: ExprKind::Closure(&Closure { body, .. }),\n             ..\n-        } = args[0];\n+        } = block_expr;\n         let closure_body = cx.tcx.hir().body(body);\n         if closure_body.generator_kind == Some(GeneratorKind::Async(AsyncGeneratorKind::Block));\n         then {"}, {"sha": "04225beeb704b69a20df0f6bcddd73f389381ac8", "filename": "clippy_lints/src/matches/significant_drop_in_scrutinee.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -321,7 +321,6 @@ impl<'a, 'tcx> Visitor<'tcx> for SigDropHelper<'a, 'tcx> {\n                     self.has_significant_drop = true;\n                 }\n             }\n-            ExprKind::Box(..) |\n             ExprKind::Array(..) |\n             ExprKind::Call(..) |\n             ExprKind::Unary(..) |"}, {"sha": "67618f7038addb2dee7b697369f2c088f56e3282", "filename": "clippy_lints/src/methods/unnecessary_sort_by.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_sort_by.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -33,10 +33,6 @@ struct SortByKeyDetection {\n /// contains a and the other replaces it with b)\n fn mirrored_exprs(a_expr: &Expr<'_>, a_ident: &Ident, b_expr: &Expr<'_>, b_ident: &Ident) -> bool {\n     match (&a_expr.kind, &b_expr.kind) {\n-        // Two boxes with mirrored contents\n-        (ExprKind::Box(left_expr), ExprKind::Box(right_expr)) => {\n-            mirrored_exprs(left_expr, a_ident, right_expr, b_ident)\n-        },\n         // Two arrays with mirrored contents\n         (ExprKind::Array(left_exprs), ExprKind::Array(right_exprs)) => {\n             iter::zip(*left_exprs, *right_exprs).all(|(left, right)| mirrored_exprs(left, a_ident, right, b_ident))"}, {"sha": "4c4c003ca469122825ba59a3500beed1a81aac25", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -369,10 +369,10 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n             Node::Item(item) => {\n                 if let ItemKind::Fn(_, _, body_id) = &item.kind\n                 && let output_ty = return_ty(cx, item.owner_id)\n-                && Inherited::build(cx.tcx, item.owner_id.def_id).enter(|inherited| {\n-                    let fn_ctxt = FnCtxt::new(inherited, cx.param_env, item.owner_id.def_id);\n-                    fn_ctxt.can_coerce(ty, output_ty)\n-                }) {\n+                && let inherited = Inherited::new(cx.tcx, item.owner_id.def_id)\n+                && let fn_ctxt = FnCtxt::new(&inherited, cx.param_env, item.owner_id.def_id)\n+                && fn_ctxt.can_coerce(ty, output_ty)\n+                {\n                     if has_lifetime(output_ty) && has_lifetime(ty) {\n                         return false;\n                     }"}, {"sha": "e3712190e67223db03554879d323b2115d0c0fb6", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -127,8 +127,7 @@ fn has_no_effect(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n         | ExprKind::Type(inner, _)\n         | ExprKind::Unary(_, inner)\n         | ExprKind::Field(inner, _)\n-        | ExprKind::AddrOf(_, _, inner)\n-        | ExprKind::Box(inner) => has_no_effect(cx, inner),\n+        | ExprKind::AddrOf(_, _, inner) => has_no_effect(cx, inner),\n         ExprKind::Struct(_, fields, ref base) => {\n             !has_drop(cx, cx.typeck_results().expr_ty(expr))\n                 && fields.iter().all(|field| has_no_effect(cx, field.expr))\n@@ -234,8 +233,7 @@ fn reduce_expression<'a>(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<Vec\n         | ExprKind::Type(inner, _)\n         | ExprKind::Unary(_, inner)\n         | ExprKind::Field(inner, _)\n-        | ExprKind::AddrOf(_, _, inner)\n-        | ExprKind::Box(inner) => reduce_expression(cx, inner).or_else(|| Some(vec![inner])),\n+        | ExprKind::AddrOf(_, _, inner) => reduce_expression(cx, inner).or_else(|| Some(vec![inner])),\n         ExprKind::Struct(_, fields, ref base) => {\n             if has_drop(cx, cx.typeck_results().expr_ty(expr)) {\n                 None"}, {"sha": "a8c4823fe53889d643d2ebbde602cf5037170ab7", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -36,7 +36,7 @@ impl<'tcx> LateLintPass<'tcx> for PartialEqNeImpl {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         if_chain! {\n             if let ItemKind::Impl(Impl { of_trait: Some(ref trait_ref), items: impl_items, .. }) = item.kind;\n-            if !cx.tcx.has_attr(item.owner_id.to_def_id(), sym::automatically_derived);\n+            if !cx.tcx.has_attr(item.owner_id, sym::automatically_derived);\n             if let Some(eq_trait) = cx.tcx.lang_items().eq_trait();\n             if trait_ref.path.res.def_id() == eq_trait;\n             then {"}, {"sha": "ae7d19624ba617a4c695cc2877bb650f8c547c70", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -213,8 +213,7 @@ fn is_self_shadow(cx: &LateContext<'_>, pat: &Pat<'_>, mut expr: &Expr<'_>, hir_\n     }\n     loop {\n         expr = match expr.kind {\n-            ExprKind::Box(e)\n-            | ExprKind::AddrOf(_, _, e)\n+            ExprKind::AddrOf(_, _, e)\n             | ExprKind::Block(\n                 &Block {\n                     stmts: [],"}, {"sha": "869358fb1ba704fb526549c8642bd2e109efcf3e", "filename": "clippy_lints/src/significant_drop_tightening.rs", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -1,9 +1,9 @@\n-use crate::FxHashSet;\n use clippy_utils::{\n     diagnostics::span_lint_and_then,\n     get_attr,\n     source::{indent_of, snippet},\n };\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir::{\n     self as hir,\n@@ -58,6 +58,7 @@ impl_lint_pass!(SignificantDropTightening<'_> => [SIGNIFICANT_DROP_TIGHTENING]);\n pub struct SignificantDropTightening<'tcx> {\n     /// Auxiliary structure used to avoid having to verify the same type multiple times.\n     seen_types: FxHashSet<Ty<'tcx>>,\n+    type_cache: FxHashMap<Ty<'tcx>, bool>,\n }\n \n impl<'tcx> SignificantDropTightening<'tcx> {\n@@ -118,7 +119,7 @@ impl<'tcx> SignificantDropTightening<'tcx> {\n         stmt: &hir::Stmt<'_>,\n         cb: impl Fn(&mut SigDropAuxParams),\n     ) {\n-        let mut sig_drop_finder = SigDropFinder::new(cx, &mut self.seen_types);\n+        let mut sig_drop_finder = SigDropFinder::new(cx, &mut self.seen_types, &mut self.type_cache);\n         sig_drop_finder.visit_expr(expr);\n         if sig_drop_finder.has_sig_drop {\n             cb(sdap);\n@@ -296,15 +297,24 @@ impl Default for SigDropAuxParams {\n struct SigDropChecker<'cx, 'sdt, 'tcx> {\n     cx: &'cx LateContext<'tcx>,\n     seen_types: &'sdt mut FxHashSet<Ty<'tcx>>,\n+    type_cache: &'sdt mut FxHashMap<Ty<'tcx>, bool>,\n }\n \n impl<'cx, 'sdt, 'tcx> SigDropChecker<'cx, 'sdt, 'tcx> {\n-    pub(crate) fn new(cx: &'cx LateContext<'tcx>, seen_types: &'sdt mut FxHashSet<Ty<'tcx>>) -> Self {\n+    pub(crate) fn new(\n+        cx: &'cx LateContext<'tcx>,\n+        seen_types: &'sdt mut FxHashSet<Ty<'tcx>>,\n+        type_cache: &'sdt mut FxHashMap<Ty<'tcx>, bool>,\n+    ) -> Self {\n         seen_types.clear();\n-        Self { cx, seen_types }\n+        Self {\n+            cx,\n+            seen_types,\n+            type_cache,\n+        }\n     }\n \n-    pub(crate) fn has_sig_drop_attr(&mut self, ty: Ty<'tcx>) -> bool {\n+    pub(crate) fn has_sig_drop_attr_uncached(&mut self, ty: Ty<'tcx>) -> bool {\n         if let Some(adt) = ty.ty_adt_def() {\n             let mut iter = get_attr(\n                 self.cx.sess(),\n@@ -340,6 +350,16 @@ impl<'cx, 'sdt, 'tcx> SigDropChecker<'cx, 'sdt, 'tcx> {\n         }\n     }\n \n+    pub(crate) fn has_sig_drop_attr(&mut self, ty: Ty<'tcx>) -> bool {\n+        // The borrow checker prevents us from using something fancier like or_insert_with.\n+        if let Some(ty) = self.type_cache.get(&ty) {\n+            return *ty;\n+        }\n+        let value = self.has_sig_drop_attr_uncached(ty);\n+        self.type_cache.insert(ty, value);\n+        value\n+    }\n+\n     fn has_seen_ty(&mut self, ty: Ty<'tcx>) -> bool {\n         !self.seen_types.insert(ty)\n     }\n@@ -353,11 +373,15 @@ struct SigDropFinder<'cx, 'sdt, 'tcx> {\n }\n \n impl<'cx, 'sdt, 'tcx> SigDropFinder<'cx, 'sdt, 'tcx> {\n-    fn new(cx: &'cx LateContext<'tcx>, seen_types: &'sdt mut FxHashSet<Ty<'tcx>>) -> Self {\n+    fn new(\n+        cx: &'cx LateContext<'tcx>,\n+        seen_types: &'sdt mut FxHashSet<Ty<'tcx>>,\n+        type_cache: &'sdt mut FxHashMap<Ty<'tcx>, bool>,\n+    ) -> Self {\n         Self {\n             cx,\n             has_sig_drop: false,\n-            sig_drop_checker: SigDropChecker::new(cx, seen_types),\n+            sig_drop_checker: SigDropChecker::new(cx, seen_types, type_cache),\n         }\n     }\n }\n@@ -380,7 +404,6 @@ impl<'cx, 'sdt, 'tcx> Visitor<'tcx> for SigDropFinder<'cx, 'sdt, 'tcx> {\n             | hir::ExprKind::Assign(..)\n             | hir::ExprKind::AssignOp(..)\n             | hir::ExprKind::Binary(..)\n-            | hir::ExprKind::Box(..)\n             | hir::ExprKind::Call(..)\n             | hir::ExprKind::Field(..)\n             | hir::ExprKind::If(..)"}, {"sha": "8aa47b62ebff48c4e4aebedb4c2955b2b00eb5e1", "filename": "clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -596,8 +596,7 @@ fn ident_difference_expr_with_base_location(\n         | (MethodCall(_), MethodCall(_))\n         | (Call(_, _), Call(_, _))\n         | (ConstBlock(_), ConstBlock(_))\n-        | (Array(_), Array(_))\n-        | (Box(_), Box(_)) => {\n+        | (Array(_), Array(_)) => {\n             // keep going\n         },\n         _ => {"}, {"sha": "85cd74f23ef7e27c5b57a87332974f459001e2d2", "filename": "clippy_lints/src/transmute/transmutes_expressible_as_ptr_casts.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -2,8 +2,9 @@ use super::utils::check_cast;\n use super::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::sugg::Sugg;\n+use rustc_ast::ExprPrecedence;\n use rustc_errors::Applicability;\n-use rustc_hir::Expr;\n+use rustc_hir::{Expr, Node};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{cast::CastKind, Ty};\n \n@@ -19,7 +20,7 @@ pub(super) fn check<'tcx>(\n ) -> bool {\n     use CastKind::{AddrPtrCast, ArrayPtrCast, FnPtrAddrCast, FnPtrPtrCast, PtrAddrCast, PtrPtrCast};\n     let mut app = Applicability::MachineApplicable;\n-    let sugg = match check_cast(cx, e, from_ty, to_ty) {\n+    let mut sugg = match check_cast(cx, e, from_ty, to_ty) {\n         Some(PtrPtrCast | AddrPtrCast | ArrayPtrCast | FnPtrPtrCast | FnPtrAddrCast) => {\n             Sugg::hir_with_context(cx, arg, e.span.ctxt(), \"..\", &mut app)\n                 .as_ty(to_ty.to_string())\n@@ -39,6 +40,12 @@ pub(super) fn check<'tcx>(\n         _ => return false,\n     };\n \n+    if let Node::Expr(parent) = cx.tcx.hir().get_parent(e.hir_id)\n+        && parent.precedence().order() > ExprPrecedence::Cast.order()\n+    {\n+        sugg = format!(\"({sugg})\");\n+    }\n+\n     span_lint_and_sugg(\n         cx,\n         TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,"}, {"sha": "62efd13b8d909a072232c40757ccd6e9b91de0b4", "filename": "clippy_lints/src/transmute/utils.rs", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -33,38 +33,37 @@ pub(super) fn check_cast<'tcx>(\n     let hir_id = e.hir_id;\n     let local_def_id = hir_id.owner.def_id;\n \n-    Inherited::build(cx.tcx, local_def_id).enter(|inherited| {\n-        let fn_ctxt = FnCtxt::new(inherited, cx.param_env, local_def_id);\n+    let inherited = Inherited::new(cx.tcx, local_def_id);\n+    let fn_ctxt = FnCtxt::new(&inherited, cx.param_env, local_def_id);\n \n-        // If we already have errors, we can't be sure we can pointer cast.\n+    // If we already have errors, we can't be sure we can pointer cast.\n+    assert!(\n+        !fn_ctxt.errors_reported_since_creation(),\n+        \"Newly created FnCtxt contained errors\"\n+    );\n+\n+    if let Ok(check) = cast::CastCheck::new(\n+        &fn_ctxt,\n+        e,\n+        from_ty,\n+        to_ty,\n+        // We won't show any error to the user, so we don't care what the span is here.\n+        DUMMY_SP,\n+        DUMMY_SP,\n+        hir::Constness::NotConst,\n+    ) {\n+        let res = check.do_check(&fn_ctxt);\n+\n+        // do_check's documentation says that it might return Ok and create\n+        // errors in the fcx instead of returning Err in some cases. Those cases\n+        // should be filtered out before getting here.\n         assert!(\n             !fn_ctxt.errors_reported_since_creation(),\n-            \"Newly created FnCtxt contained errors\"\n+            \"`fn_ctxt` contained errors after cast check!\"\n         );\n \n-        if let Ok(check) = cast::CastCheck::new(\n-            &fn_ctxt,\n-            e,\n-            from_ty,\n-            to_ty,\n-            // We won't show any error to the user, so we don't care what the span is here.\n-            DUMMY_SP,\n-            DUMMY_SP,\n-            hir::Constness::NotConst,\n-        ) {\n-            let res = check.do_check(&fn_ctxt);\n-\n-            // do_check's documentation says that it might return Ok and create\n-            // errors in the fcx instead of returning Err in some cases. Those cases\n-            // should be filtered out before getting here.\n-            assert!(\n-                !fn_ctxt.errors_reported_since_creation(),\n-                \"`fn_ctxt` contained errors after cast check!\"\n-            );\n-\n-            res.ok()\n-        } else {\n-            None\n-        }\n-    })\n+        res.ok()\n+    } else {\n+        None\n+    }\n }"}, {"sha": "af0b4b1592f4cbf8faccda4a4c2f86a8edf9600a", "filename": "clippy_lints/src/unnecessary_struct_initialization.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Funnecessary_struct_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Funnecessary_struct_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_struct_initialization.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -0,0 +1,84 @@\n+use clippy_utils::{diagnostics::span_lint_and_sugg, get_parent_expr, path_to_local, source::snippet, ty::is_copy};\n+use rustc_hir::{BindingAnnotation, Expr, ExprKind, Node, PatKind, UnOp};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for initialization of a `struct` by copying a base without setting\n+    /// any field.\n+    ///\n+    /// ### Why is this bad?\n+    /// Readibility suffers from unnecessary struct building.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// struct S { s: String }\n+    ///\n+    /// let a = S { s: String::from(\"Hello, world!\") };\n+    /// let b = S { ..a };\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// struct S { s: String }\n+    ///\n+    /// let a = S { s: String::from(\"Hello, world!\") };\n+    /// let b = a;\n+    /// ```\n+    #[clippy::version = \"1.70.0\"]\n+    pub UNNECESSARY_STRUCT_INITIALIZATION,\n+    complexity,\n+    \"struct built from a base that can be written mode concisely\"\n+}\n+declare_lint_pass!(UnnecessaryStruct => [UNNECESSARY_STRUCT_INITIALIZATION]);\n+\n+impl LateLintPass<'_> for UnnecessaryStruct {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        if let ExprKind::Struct(_, &[], Some(base)) = expr.kind {\n+            if let Some(parent) = get_parent_expr(cx, expr) &&\n+                let parent_ty = cx.typeck_results().expr_ty_adjusted(parent) &&\n+                parent_ty.is_any_ptr()\n+            {\n+                if is_copy(cx, cx.typeck_results().expr_ty(expr)) && path_to_local(base).is_some() {\n+                    // When the type implements `Copy`, a reference to the new struct works on the\n+                    // copy. Using the original would borrow it.\n+                    return;\n+                }\n+\n+                if parent_ty.is_mutable_ptr() && !is_mutable(cx, base) {\n+                    // The original can be used in a mutable reference context only if it is mutable.\n+                    return;\n+                }\n+            }\n+\n+            // TODO: do not propose to replace *XX if XX is not Copy\n+            if let ExprKind::Unary(UnOp::Deref, target) = base.kind &&\n+                matches!(target.kind, ExprKind::Path(..)) &&\n+                !is_copy(cx, cx.typeck_results().expr_ty(expr))\n+            {\n+                // `*base` cannot be used instead of the struct in the general case if it is not Copy.\n+                return;\n+            }\n+\n+            span_lint_and_sugg(\n+                cx,\n+                UNNECESSARY_STRUCT_INITIALIZATION,\n+                expr.span,\n+                \"unnecessary struct building\",\n+                \"replace with\",\n+                snippet(cx, base.span, \"..\").into_owned(),\n+                rustc_errors::Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}\n+\n+fn is_mutable(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    if let Some(hir_id) = path_to_local(expr) &&\n+        let Node::Pat(pat) = cx.tcx.hir().get(hir_id)\n+    {\n+        matches!(pat.kind, PatKind::Binding(BindingAnnotation::MUT, ..))\n+    } else {\n+        true\n+    }\n+}"}, {"sha": "bc4adf1596d44d5fc890642306ae22621d086257", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -395,11 +395,6 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 }\n                 self.expr(field!(let_expr.init));\n             },\n-            ExprKind::Box(inner) => {\n-                bind!(self, inner);\n-                kind!(\"Box({inner})\");\n-                self.expr(inner);\n-            },\n             ExprKind::Array(elements) => {\n                 bind!(self, elements);\n                 kind!(\"Array({elements})\");"}, {"sha": "809d654603a6989473a89b1965c787277e746a2a", "filename": "clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fast_utils.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -143,7 +143,7 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n         (Paren(l), _) => eq_expr(l, r),\n         (_, Paren(r)) => eq_expr(l, r),\n         (Err, Err) => true,\n-        (Box(l), Box(r)) | (Try(l), Try(r)) | (Await(l), Await(r)) => eq_expr(l, r),\n+        (Try(l), Try(r)) | (Await(l), Await(r)) => eq_expr(l, r),\n         (Array(l), Array(r)) => over(l, r, |l, r| eq_expr(l, r)),\n         (Tup(l), Tup(r)) => over(l, r, |l, r| eq_expr(l, r)),\n         (Repeat(le, ls), Repeat(re, rs)) => eq_expr(le, re) && eq_expr(&ls.value, &rs.value),"}, {"sha": "b4ad42a50279f1e39497af6eb7c27430c0c57024", "filename": "clippy_utils/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_utils%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_utils%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fattrs.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -145,8 +145,8 @@ pub fn get_unique_attr<'a>(\n \n /// Return true if the attributes contain any of `proc_macro`,\n /// `proc_macro_derive` or `proc_macro_attribute`, false otherwise\n-pub fn is_proc_macro(sess: &Session, attrs: &[ast::Attribute]) -> bool {\n-    attrs.iter().any(|attr| sess.is_proc_macro_attr(attr))\n+pub fn is_proc_macro(attrs: &[ast::Attribute]) -> bool {\n+    attrs.iter().any(rustc_ast::Attribute::is_proc_macro_attr)\n }\n \n /// Return true if the attributes contain `#[doc(hidden)]`"}, {"sha": "d3a6929f67e2ce5634c1f6769e192f840043eeda", "filename": "clippy_utils/src/check_proc_macro.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -112,7 +112,6 @@ fn qpath_search_pat(path: &QPath<'_>) -> (Pat, Pat) {\n /// Get the search patterns to use for the given expression\n fn expr_search_pat(tcx: TyCtxt<'_>, e: &Expr<'_>) -> (Pat, Pat) {\n     match e.kind {\n-        ExprKind::Box(e) => (Pat::Str(\"box\"), expr_search_pat(tcx, e).1),\n         ExprKind::ConstBlock(_) => (Pat::Str(\"const\"), Pat::Str(\"}\")),\n         ExprKind::Tup([]) => (Pat::Str(\")\"), Pat::Str(\"(\")),\n         ExprKind::Unary(UnOp::Deref, e) => (Pat::Str(\"*\"), expr_search_pat(tcx, e).1),"}, {"sha": "28c857170613593887ec0e72f21fe7214c6bd306", "filename": "clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -199,11 +199,9 @@ fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessS\n                 },\n \n                 // Memory allocation, custom operator, loop, or call to an unknown function\n-                ExprKind::Box(_)\n-                | ExprKind::Unary(..)\n-                | ExprKind::Binary(..)\n-                | ExprKind::Loop(..)\n-                | ExprKind::Call(..) => self.eagerness = Lazy,\n+                ExprKind::Unary(..) | ExprKind::Binary(..) | ExprKind::Loop(..) | ExprKind::Call(..) => {\n+                    self.eagerness = Lazy;\n+                },\n \n                 ExprKind::ConstBlock(_)\n                 | ExprKind::Array(_)"}, {"sha": "3a6d23ca5c10221b7a81c80f9f389f79e2b1e957", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -249,7 +249,6 @@ impl HirEqInterExpr<'_, '_, '_> {\n                 both(&li.label, &ri.label, |l, r| l.ident.name == r.ident.name)\n                     && both(le, re, |l, r| self.eq_expr(l, r))\n             },\n-            (&ExprKind::Box(l), &ExprKind::Box(r)) => self.eq_expr(l, r),\n             (&ExprKind::Call(l_fun, l_args), &ExprKind::Call(r_fun, r_args)) => {\n                 self.inner.allow_side_effects && self.eq_expr(l_fun, r_fun) && self.eq_exprs(l_args, r_args)\n             },\n@@ -628,7 +627,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     self.hash_expr(j);\n                 }\n             },\n-            ExprKind::Box(e) | ExprKind::DropTemps(e) | ExprKind::Yield(e, _) => {\n+            ExprKind::DropTemps(e) | ExprKind::Yield(e, _) => {\n                 self.hash_expr(e);\n             },\n             ExprKind::Call(fun, args) => {"}, {"sha": "e8225feb33d8ded30b4192ad1c9e5a1fd1c7a854", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -1923,16 +1923,7 @@ pub fn is_async_fn(kind: FnKind<'_>) -> bool {\n \n /// Peels away all the compiler generated code surrounding the body of an async function,\n pub fn get_async_fn_body<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'_>) -> Option<&'tcx Expr<'tcx>> {\n-    if let ExprKind::Call(\n-        _,\n-        &[\n-            Expr {\n-                kind: ExprKind::Closure(&Closure { body, .. }),\n-                ..\n-            },\n-        ],\n-    ) = body.value.kind\n-    {\n+    if let ExprKind::Closure(&Closure { body, .. }) = body.value.kind {\n         if let ExprKind::Block(\n             Block {\n                 stmts: [],"}, {"sha": "c0e32068ecaccecb39ee2ca6d5fd476559163f54", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -533,6 +533,14 @@ struct FormatArgsValues<'tcx> {\n }\n \n impl<'tcx> FormatArgsValues<'tcx> {\n+    fn new_empty(format_string_span: SpanData) -> Self {\n+        Self {\n+            value_args: Vec::new(),\n+            pos_to_value_index: Vec::new(),\n+            format_string_span,\n+        }\n+    }\n+\n     fn new(args: &'tcx Expr<'tcx>, format_string_span: SpanData) -> Self {\n         let mut pos_to_value_index = Vec::new();\n         let mut value_args = Vec::new();\n@@ -997,12 +1005,13 @@ impl<'tcx> FormatArgsExpn<'tcx> {\n             .find(|&name| matches!(name, sym::const_format_args | sym::format_args | sym::format_args_nl))?;\n         let newline = macro_name == sym::format_args_nl;\n \n+        // ::core::fmt::Arguments::new_const(pieces)\n         // ::core::fmt::Arguments::new_v1(pieces, args)\n         // ::core::fmt::Arguments::new_v1_formatted(pieces, args, fmt, _unsafe_arg)\n-        if let ExprKind::Call(callee, [pieces, args, rest @ ..]) = expr.kind\n+        if let ExprKind::Call(callee, [pieces, rest @ ..]) = expr.kind\n             && let ExprKind::Path(QPath::TypeRelative(ty, seg)) = callee.kind\n             && let TyKind::Path(QPath::LangItem(LangItem::FormatArguments, _, _)) = ty.kind\n-            && matches!(seg.ident.as_str(), \"new_v1\" | \"new_v1_formatted\")\n+            && matches!(seg.ident.as_str(), \"new_const\" | \"new_v1\" | \"new_v1_formatted\")\n         {\n             let format_string = FormatString::new(cx, pieces)?;\n \n@@ -1026,7 +1035,7 @@ impl<'tcx> FormatArgsExpn<'tcx> {\n                 return None;\n             }\n \n-            let positions = if let Some(fmt_arg) = rest.first() {\n+            let positions = if let Some(fmt_arg) = rest.get(1) {\n                 // If the argument contains format specs, `new_v1_formatted(_, _, fmt, _)`, parse\n                 // them.\n \n@@ -1042,7 +1051,11 @@ impl<'tcx> FormatArgsExpn<'tcx> {\n                 }))\n             };\n \n-            let values = FormatArgsValues::new(args, format_string.span.data());\n+            let values = if let Some(args) = rest.first() {\n+                FormatArgsValues::new(args, format_string.span.data())\n+            } else {\n+                FormatArgsValues::new_empty(format_string.span.data())\n+            };\n \n             let args = izip!(positions, parsed_args, parser.arg_places)\n                 .map(|(position, parsed_arg, arg_span)| {"}, {"sha": "d66640ba0b7a74f00ca309c5240a4de47ab51ac1", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -37,7 +37,7 @@ pub fn is_min_const_fn<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, msrv: &Msrv)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => continue,\n-                ty::PredicateKind::AliasEq(..) => panic!(\"alias eq predicate on function: {predicate:#?}\"),\n+                ty::PredicateKind::AliasRelate(..) => panic!(\"alias relate predicate on function: {predicate:#?}\"),\n                 ty::PredicateKind::ObjectSafe(_) => panic!(\"object safe predicate on function: {predicate:#?}\"),\n                 ty::PredicateKind::ClosureKind(..) => panic!(\"closure kind predicate on function: {predicate:#?}\"),\n                 ty::PredicateKind::Subtype(_) => panic!(\"subtype predicate on function: {predicate:#?}\"),\n@@ -176,6 +176,10 @@ fn check_rvalue<'tcx>(\n             // FIXME(dyn-star)\n             unimplemented!()\n         },\n+        Rvalue::Cast(CastKind::Transmute, _, _) => Err((\n+            span,\n+            \"transmute can attempt to turn pointers into integers, so is unstable in const fn\".into(),\n+        )),\n         // binops are fine on integers\n         Rvalue::BinaryOp(_, box (lhs, rhs)) | Rvalue::CheckedBinaryOp(_, box (lhs, rhs)) => {\n             check_operand(tcx, lhs, span, body)?;\n@@ -241,6 +245,7 @@ fn check_statement<'tcx>(\n         | StatementKind::StorageDead(_)\n         | StatementKind::Retag { .. }\n         | StatementKind::AscribeUserType(..)\n+        | StatementKind::PlaceMention(..)\n         | StatementKind::Coverage(..)\n         | StatementKind::ConstEvalCounter\n         | StatementKind::Nop => Ok(()),"}, {"sha": "a5a4a921d94ec7565626dfbde1135ddf339e5dc9", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -125,7 +125,6 @@ impl<'a> Sugg<'a> {\n \n         match expr.kind {\n             hir::ExprKind::AddrOf(..)\n-            | hir::ExprKind::Box(..)\n             | hir::ExprKind::If(..)\n             | hir::ExprKind::Let(..)\n             | hir::ExprKind::Closure { .. }\n@@ -180,7 +179,6 @@ impl<'a> Sugg<'a> {\n         match expr.kind {\n             _ if expr.span.ctxt() != ctxt => Sugg::NonParen(snippet_with_context(cx, expr.span, ctxt, default, app).0),\n             ast::ExprKind::AddrOf(..)\n-            | ast::ExprKind::Box(..)\n             | ast::ExprKind::Closure { .. }\n             | ast::ExprKind::If(..)\n             | ast::ExprKind::Let(..)"}, {"sha": "1dc19bac98444341636615ca66ee48be34fbe25e", "filename": "clippy_utils/src/visitors.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/clippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fvisitors.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -599,10 +599,7 @@ pub fn for_each_unconsumed_temporary<'tcx, B>(\n             | ExprKind::Let(&Let { init: e, .. }) => {\n                 helper(typeck, false, e, f)?;\n             },\n-            ExprKind::Block(&Block { expr: Some(e), .. }, _)\n-            | ExprKind::Box(e)\n-            | ExprKind::Cast(e, _)\n-            | ExprKind::Unary(_, e) => {\n+            ExprKind::Block(&Block { expr: Some(e), .. }, _) | ExprKind::Cast(e, _) | ExprKind::Unary(_, e) => {\n                 helper(typeck, true, e, f)?;\n             },\n             ExprKind::Call(callee, args) => {"}, {"sha": "0b2458ea00708b3745e62b4fe560c26b70683469", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2023-03-10\"\n+channel = \"nightly-2023-03-24\"\n components = [\"cargo\", \"llvm-tools\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "e197ea048a0af4f343e5d190dde0de2405f0b2c2", "filename": "rustc_tools_util/README.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/rustc_tools_util%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/rustc_tools_util%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustc_tools_util%2FREADME.md?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -49,10 +49,14 @@ The changelog for `rustc_tools_util` is available under:\n \n ## License\n \n+<!-- REUSE-IgnoreStart -->\n+\n Copyright 2014-2022 The Rust Project Developers\n \n Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n option. All files in the project carrying such notice may not be\n copied, modified, or distributed except according to those terms.\n+\n+<!-- REUSE-IgnoreEnd -->"}, {"sha": "b4619e980f303e4a3ceccc32626226400fc1f3b6", "filename": "tests/ui-internal/custom_ice_message.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui-internal%2Fcustom_ice_message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui-internal%2Fcustom_ice_message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fcustom_ice_message.stderr?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -9,3 +9,4 @@ note: we would appreciate a bug report: https://github.com/rust-lang/rust-clippy\n \n note: Clippy version: foo\n \n+thread panicked while panicking. aborting."}, {"sha": "eb3e5189c823847c61ba3bf87df69d6dafd3e908", "filename": "tests/ui/author/blocks.stdout", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Fauthor%2Fblocks.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Fauthor%2Fblocks.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fblocks.stdout?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -43,11 +43,7 @@ if let ExprKind::Block(block, None) = expr.kind\n if let ExprKind::Closure(CaptureBy::Value, fn_decl, body_id, _, None) = expr.kind\n     && let FnRetTy::DefaultReturn(_) = fn_decl.output\n     && expr1 = &cx.tcx.hir().body(body_id).value\n-    && let ExprKind::Call(func, args) = expr1.kind\n-    && let ExprKind::Path(ref qpath) = func.kind\n-    && matches!(qpath, QPath::LangItem(LangItem::IdentityFuture, _))\n-    && args.len() == 1\n-    && let ExprKind::Closure(CaptureBy::Value, fn_decl1, body_id1, _, Some(Movability::Static)) = args[0].kind\n+    && let ExprKind::Closure(CaptureBy::Value, fn_decl1, body_id1, _, Some(Movability::Static)) = expr1.kind\n     && let FnRetTy::DefaultReturn(_) = fn_decl1.output\n     && expr2 = &cx.tcx.hir().body(body_id1).value\n     && let ExprKind::Block(block, None) = expr2.kind"}, {"sha": "79b6d33fc77ca934c351bd6411e97f129a2ceb9b", "filename": "tests/ui/boxed_local.rs", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Fboxed_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Fboxed_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fboxed_local.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -1,4 +1,3 @@\n-#![feature(box_syntax)]\n #![feature(lint_reasons)]\n #![allow(\n     clippy::borrowed_box,\n@@ -34,7 +33,7 @@ fn ok_box_trait(boxed_trait: &Box<dyn Z>) {\n }\n \n fn warn_call() {\n-    let x = box A;\n+    let x = Box::new(A);\n     x.foo();\n }\n \n@@ -43,41 +42,41 @@ fn warn_arg(x: Box<A>) {\n }\n \n fn nowarn_closure_arg() {\n-    let x = Some(box A);\n+    let x = Some(Box::new(A));\n     x.map_or((), |x| take_ref(&x));\n }\n \n fn warn_rename_call() {\n-    let x = box A;\n+    let x = Box::new(A);\n \n     let y = x;\n     y.foo(); // via autoderef\n }\n \n fn warn_notuse() {\n-    let bz = box A;\n+    let bz = Box::new(A);\n }\n \n fn warn_pass() {\n-    let bz = box A;\n+    let bz = Box::new(A);\n     take_ref(&bz); // via deref coercion\n }\n \n fn nowarn_return() -> Box<A> {\n-    box A // moved out, \"escapes\"\n+    Box::new(A) // moved out, \"escapes\"\n }\n \n fn nowarn_move() {\n-    let bx = box A;\n+    let bx = Box::new(A);\n     drop(bx) // moved in, \"escapes\"\n }\n fn nowarn_call() {\n-    let bx = box A;\n+    let bx = Box::new(A);\n     bx.clone(); // method only available to Box, not via autoderef\n }\n \n fn nowarn_pass() {\n-    let bx = box A;\n+    let bx = Box::new(A);\n     take_box(&bx); // fn needs &Box\n }\n \n@@ -86,30 +85,20 @@ fn take_ref(x: &A) {}\n \n fn nowarn_ref_take() {\n     // false positive, should actually warn\n-    let x = box A;\n+    let x = Box::new(A);\n     let y = &x;\n     take_box(y);\n }\n \n fn nowarn_match() {\n-    let x = box A; // moved into a match\n+    let x = Box::new(A); // moved into a match\n     match x {\n         y => drop(y),\n     }\n }\n \n fn warn_match() {\n-    let x = box A;\n-    match &x {\n-        // not moved\n-        y => (),\n-    }\n-}\n-\n-fn nowarn_large_array() {\n-    // should not warn, is large array\n-    // and should not be on stack\n-    let x = box [1; 10000];\n+    let x = Box::new(A);\n     match &x {\n         // not moved\n         y => (),"}, {"sha": "10d78fbc0abb5d2f1c72e86d60c4f464756f22da", "filename": "tests/ui/boxed_local.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Fboxed_local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Fboxed_local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fboxed_local.stderr?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -1,25 +1,25 @@\n error: local variable doesn't need to be boxed here\n-  --> $DIR/boxed_local.rs:41:13\n+  --> $DIR/boxed_local.rs:40:13\n    |\n LL | fn warn_arg(x: Box<A>) {\n    |             ^\n    |\n    = note: `-D clippy::boxed-local` implied by `-D warnings`\n \n error: local variable doesn't need to be boxed here\n-  --> $DIR/boxed_local.rs:132:12\n+  --> $DIR/boxed_local.rs:121:12\n    |\n LL | pub fn new(_needs_name: Box<PeekableSeekable<&()>>) -> () {}\n    |            ^^^^^^^^^^^\n \n error: local variable doesn't need to be boxed here\n-  --> $DIR/boxed_local.rs:196:44\n+  --> $DIR/boxed_local.rs:185:44\n    |\n LL |         fn default_impl_x(self: Box<Self>, x: Box<u32>) -> u32 {\n    |                                            ^\n \n error: local variable doesn't need to be boxed here\n-  --> $DIR/boxed_local.rs:203:16\n+  --> $DIR/boxed_local.rs:192:16\n    |\n LL |         fn foo(x: Box<u32>) {}\n    |                ^"}, {"sha": "a86b85706a345f7b4da741d7fb549a9a6eff7cb2", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -29,6 +29,12 @@ fn main() {\n     1f64 as isize;\n     1f64 as usize;\n     1f32 as u32 as u16;\n+    {\n+        let _x: i8 = 1i32 as _;\n+        1f32 as i32;\n+        1f64 as i32;\n+        1f32 as u8;\n+    }\n     // Test clippy::cast_possible_wrap\n     1u8 as i8;\n     1u16 as i16;"}, {"sha": "65ecf1aa37aaad744a9ba13f6b7c17e449fdfd9e", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 65, "deletions": 47, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -44,10 +44,6 @@ LL |     1f32 as i32;\n    |\n    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n    = note: `-D clippy::cast-possible-truncation` implied by `-D warnings`\n-help: ... or use `try_from` and handle the error accordingly\n-   |\n-LL |     i32::try_from(1f32);\n-   |     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `f32` to `u32` may truncate the value\n   --> $DIR/cast.rs:25:5\n@@ -56,10 +52,6 @@ LL |     1f32 as u32;\n    |     ^^^^^^^^^^^\n    |\n    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n-help: ... or use `try_from` and handle the error accordingly\n-   |\n-LL |     u32::try_from(1f32);\n-   |     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `f32` to `u32` may lose the sign of the value\n   --> $DIR/cast.rs:25:5\n@@ -76,10 +68,6 @@ LL |     1f64 as f32;\n    |     ^^^^^^^^^^^\n    |\n    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n-help: ... or use `try_from` and handle the error accordingly\n-   |\n-LL |     f32::try_from(1f64);\n-   |     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `i32` to `i8` may truncate the value\n   --> $DIR/cast.rs:27:5\n@@ -112,10 +100,6 @@ LL |     1f64 as isize;\n    |     ^^^^^^^^^^^^^\n    |\n    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n-help: ... or use `try_from` and handle the error accordingly\n-   |\n-LL |     isize::try_from(1f64);\n-   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `f64` to `usize` may truncate the value\n   --> $DIR/cast.rs:30:5\n@@ -124,10 +108,6 @@ LL |     1f64 as usize;\n    |     ^^^^^^^^^^^^^\n    |\n    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n-help: ... or use `try_from` and handle the error accordingly\n-   |\n-LL |     usize::try_from(1f64);\n-   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `f64` to `usize` may lose the sign of the value\n   --> $DIR/cast.rs:30:5\n@@ -154,63 +134,101 @@ LL |     1f32 as u32 as u16;\n    |     ^^^^^^^^^^^\n    |\n    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n-help: ... or use `try_from` and handle the error accordingly\n-   |\n-LL |     u32::try_from(1f32) as u16;\n-   |     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `f32` to `u32` may lose the sign of the value\n   --> $DIR/cast.rs:31:5\n    |\n LL |     1f32 as u32 as u16;\n    |     ^^^^^^^^^^^\n \n+error: casting `i32` to `i8` may truncate the value\n+  --> $DIR/cast.rs:33:22\n+   |\n+LL |         let _x: i8 = 1i32 as _;\n+   |                      ^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |         let _x: i8 = 1i32.try_into();\n+   |                      ~~~~~~~~~~~~~~~\n+\n+error: casting `f32` to `i32` may truncate the value\n+  --> $DIR/cast.rs:34:9\n+   |\n+LL |         1f32 as i32;\n+   |         ^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n+\n+error: casting `f64` to `i32` may truncate the value\n+  --> $DIR/cast.rs:35:9\n+   |\n+LL |         1f64 as i32;\n+   |         ^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n+\n+error: casting `f32` to `u8` may truncate the value\n+  --> $DIR/cast.rs:36:9\n+   |\n+LL |         1f32 as u8;\n+   |         ^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n+\n+error: casting `f32` to `u8` may lose the sign of the value\n+  --> $DIR/cast.rs:36:9\n+   |\n+LL |         1f32 as u8;\n+   |         ^^^^^^^^^^\n+\n error: casting `u8` to `i8` may wrap around the value\n-  --> $DIR/cast.rs:33:5\n+  --> $DIR/cast.rs:39:5\n    |\n LL |     1u8 as i8;\n    |     ^^^^^^^^^\n    |\n    = note: `-D clippy::cast-possible-wrap` implied by `-D warnings`\n \n error: casting `u16` to `i16` may wrap around the value\n-  --> $DIR/cast.rs:34:5\n+  --> $DIR/cast.rs:40:5\n    |\n LL |     1u16 as i16;\n    |     ^^^^^^^^^^^\n \n error: casting `u32` to `i32` may wrap around the value\n-  --> $DIR/cast.rs:35:5\n+  --> $DIR/cast.rs:41:5\n    |\n LL |     1u32 as i32;\n    |     ^^^^^^^^^^^\n \n error: casting `u64` to `i64` may wrap around the value\n-  --> $DIR/cast.rs:36:5\n+  --> $DIR/cast.rs:42:5\n    |\n LL |     1u64 as i64;\n    |     ^^^^^^^^^^^\n \n error: casting `usize` to `isize` may wrap around the value\n-  --> $DIR/cast.rs:37:5\n+  --> $DIR/cast.rs:43:5\n    |\n LL |     1usize as isize;\n    |     ^^^^^^^^^^^^^^^\n \n error: casting `i32` to `u32` may lose the sign of the value\n-  --> $DIR/cast.rs:40:5\n+  --> $DIR/cast.rs:46:5\n    |\n LL |     -1i32 as u32;\n    |     ^^^^^^^^^^^^\n \n error: casting `isize` to `usize` may lose the sign of the value\n-  --> $DIR/cast.rs:42:5\n+  --> $DIR/cast.rs:48:5\n    |\n LL |     -1isize as usize;\n    |     ^^^^^^^^^^^^^^^^\n \n error: casting `i64` to `i8` may truncate the value\n-  --> $DIR/cast.rs:109:5\n+  --> $DIR/cast.rs:115:5\n    |\n LL |     (-99999999999i64).min(1) as i8; // should be linted because signed\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -222,7 +240,7 @@ LL |     i8::try_from((-99999999999i64).min(1)); // should be linted because sig\n    |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `u64` to `u8` may truncate the value\n-  --> $DIR/cast.rs:121:5\n+  --> $DIR/cast.rs:127:5\n    |\n LL |     999999u64.clamp(0, 256) as u8; // should still be linted\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -234,7 +252,7 @@ LL |     u8::try_from(999999u64.clamp(0, 256)); // should still be linted\n    |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E2` to `u8` may truncate the value\n-  --> $DIR/cast.rs:142:21\n+  --> $DIR/cast.rs:148:21\n    |\n LL |             let _ = self as u8;\n    |                     ^^^^^^^^^^\n@@ -246,15 +264,15 @@ LL |             let _ = u8::try_from(self);\n    |                     ~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E2::B` to `u8` will truncate the value\n-  --> $DIR/cast.rs:143:21\n+  --> $DIR/cast.rs:149:21\n    |\n LL |             let _ = Self::B as u8;\n    |                     ^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::cast-enum-truncation` implied by `-D warnings`\n \n error: casting `main::E5` to `i8` may truncate the value\n-  --> $DIR/cast.rs:179:21\n+  --> $DIR/cast.rs:185:21\n    |\n LL |             let _ = self as i8;\n    |                     ^^^^^^^^^^\n@@ -266,13 +284,13 @@ LL |             let _ = i8::try_from(self);\n    |                     ~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E5::A` to `i8` will truncate the value\n-  --> $DIR/cast.rs:180:21\n+  --> $DIR/cast.rs:186:21\n    |\n LL |             let _ = Self::A as i8;\n    |                     ^^^^^^^^^^^^^\n \n error: casting `main::E6` to `i16` may truncate the value\n-  --> $DIR/cast.rs:194:21\n+  --> $DIR/cast.rs:200:21\n    |\n LL |             let _ = self as i16;\n    |                     ^^^^^^^^^^^\n@@ -284,7 +302,7 @@ LL |             let _ = i16::try_from(self);\n    |                     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E7` to `usize` may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:209:21\n+  --> $DIR/cast.rs:215:21\n    |\n LL |             let _ = self as usize;\n    |                     ^^^^^^^^^^^^^\n@@ -296,7 +314,7 @@ LL |             let _ = usize::try_from(self);\n    |                     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E10` to `u16` may truncate the value\n-  --> $DIR/cast.rs:250:21\n+  --> $DIR/cast.rs:256:21\n    |\n LL |             let _ = self as u16;\n    |                     ^^^^^^^^^^^\n@@ -308,28 +326,28 @@ LL |             let _ = u16::try_from(self);\n    |                     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `u32` to `u8` may truncate the value\n-  --> $DIR/cast.rs:258:13\n+  --> $DIR/cast.rs:264:13\n    |\n LL |     let c = (q >> 16) as u8;\n    |             ^^^^^^^^^^^^^^^\n    |\n    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n-LL |     let c = u8::try_from((q >> 16));\n-   |             ~~~~~~~~~~~~~~~~~~~~~~~\n+LL |     let c = u8::try_from(q >> 16);\n+   |             ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `u32` to `u8` may truncate the value\n-  --> $DIR/cast.rs:261:13\n+  --> $DIR/cast.rs:267:13\n    |\n LL |     let c = (q / 1000) as u8;\n    |             ^^^^^^^^^^^^^^^^\n    |\n    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n-LL |     let c = u8::try_from((q / 1000));\n-   |             ~~~~~~~~~~~~~~~~~~~~~~~~\n+LL |     let c = u8::try_from(q / 1000);\n+   |             ~~~~~~~~~~~~~~~~~~~~~~\n \n-error: aborting due to 36 previous errors\n+error: aborting due to 41 previous errors\n "}, {"sha": "74985029e008a6c998707e3e54b18462cd6b0e43", "filename": "tests/ui/erasing_op.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Ferasing_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Ferasing_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferasing_op.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -31,13 +31,15 @@ impl core::ops::Mul<i32> for Vec1 {\n \n #[allow(clippy::no_effect)]\n #[warn(clippy::erasing_op)]\n-fn main() {\n-    let x: u8 = 0;\n-\n+fn test(x: u8) {\n     x * 0;\n     0 & x;\n     0 / x;\n     0 * Meter; // no error: Output type is different from the non-zero argument\n     0 * Vec1 { x: 5 };\n     Vec1 { x: 5 } * 0;\n }\n+\n+fn main() {\n+    test(0)\n+}"}, {"sha": "97941252355af1271f8836c7052ccaedbc9f61cc", "filename": "tests/ui/erasing_op.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Ferasing_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Ferasing_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferasing_op.stderr?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -1,31 +1,31 @@\n error: this operation will always return zero. This is likely not the intended outcome\n-  --> $DIR/erasing_op.rs:37:5\n+  --> $DIR/erasing_op.rs:35:5\n    |\n LL |     x * 0;\n    |     ^^^^^\n    |\n    = note: `-D clippy::erasing-op` implied by `-D warnings`\n \n error: this operation will always return zero. This is likely not the intended outcome\n-  --> $DIR/erasing_op.rs:38:5\n+  --> $DIR/erasing_op.rs:36:5\n    |\n LL |     0 & x;\n    |     ^^^^^\n \n error: this operation will always return zero. This is likely not the intended outcome\n-  --> $DIR/erasing_op.rs:39:5\n+  --> $DIR/erasing_op.rs:37:5\n    |\n LL |     0 / x;\n    |     ^^^^^\n \n error: this operation will always return zero. This is likely not the intended outcome\n-  --> $DIR/erasing_op.rs:41:5\n+  --> $DIR/erasing_op.rs:39:5\n    |\n LL |     0 * Vec1 { x: 5 };\n    |     ^^^^^^^^^^^^^^^^^\n \n error: this operation will always return zero. This is likely not the intended outcome\n-  --> $DIR/erasing_op.rs:42:5\n+  --> $DIR/erasing_op.rs:40:5\n    |\n LL |     Vec1 { x: 5 } * 0;\n    |     ^^^^^^^^^^^^^^^^^"}, {"sha": "8dfdee662b9d7f8e21fd2a8d00a75e602c1b25f6", "filename": "tests/ui/integer_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Finteger_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Finteger_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finteger_arithmetic.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -4,7 +4,7 @@\n #[rustfmt::skip]\n fn main() {\n     let mut i = 1i32;\n-    let mut var1 = 0i32;\n+    let mut var1 = 13i32;\n     let mut var2 = -1i32;\n     1 + i;\n     i * 2;"}, {"sha": "4e8517cad1006805621a0a2760b161bad4e7e4c8", "filename": "tests/ui/needless_update.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Fneedless_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Fneedless_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_update.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::needless_update)]\n-#![allow(clippy::no_effect)]\n+#![allow(clippy::no_effect, clippy::unnecessary_struct_initialization)]\n \n struct S {\n     pub a: i32,"}, {"sha": "1e42e1fbabfeb654a31088c344a18185583554e9", "filename": "tests/ui/no_effect.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -1,7 +1,12 @@\n-#![feature(box_syntax, fn_traits, unboxed_closures)]\n+#![feature(fn_traits, unboxed_closures)]\n #![warn(clippy::no_effect_underscore_binding)]\n #![allow(dead_code, path_statements)]\n-#![allow(clippy::deref_addrof, clippy::redundant_field_names, clippy::uninlined_format_args)]\n+#![allow(\n+    clippy::deref_addrof,\n+    clippy::redundant_field_names,\n+    clippy::uninlined_format_args,\n+    clippy::unnecessary_struct_initialization\n+)]\n \n struct Unit;\n struct Tuple(i32);\n@@ -102,7 +107,6 @@ fn main() {\n     *&42;\n     &6;\n     (5, 6, 7);\n-    box 42;\n     ..;\n     5..;\n     ..5;"}, {"sha": "f10f2bcf2a8a0bfa27366425b324091c4b87ee1d", "filename": "tests/ui/no_effect.stderr", "status": "modified", "additions": 30, "deletions": 36, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Fno_effect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Fno_effect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.stderr?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -1,186 +1,180 @@\n error: statement with no effect\n-  --> $DIR/no_effect.rs:92:5\n+  --> $DIR/no_effect.rs:97:5\n    |\n LL |     0;\n    |     ^^\n    |\n    = note: `-D clippy::no-effect` implied by `-D warnings`\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:93:5\n+  --> $DIR/no_effect.rs:98:5\n    |\n LL |     s2;\n    |     ^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:94:5\n+  --> $DIR/no_effect.rs:99:5\n    |\n LL |     Unit;\n    |     ^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:95:5\n+  --> $DIR/no_effect.rs:100:5\n    |\n LL |     Tuple(0);\n    |     ^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:96:5\n+  --> $DIR/no_effect.rs:101:5\n    |\n LL |     Struct { field: 0 };\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:97:5\n+  --> $DIR/no_effect.rs:102:5\n    |\n LL |     Struct { ..s };\n    |     ^^^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:98:5\n+  --> $DIR/no_effect.rs:103:5\n    |\n LL |     Union { a: 0 };\n    |     ^^^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:99:5\n+  --> $DIR/no_effect.rs:104:5\n    |\n LL |     Enum::Tuple(0);\n    |     ^^^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:100:5\n+  --> $DIR/no_effect.rs:105:5\n    |\n LL |     Enum::Struct { field: 0 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:101:5\n+  --> $DIR/no_effect.rs:106:5\n    |\n LL |     5 + 6;\n    |     ^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:102:5\n+  --> $DIR/no_effect.rs:107:5\n    |\n LL |     *&42;\n    |     ^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:103:5\n+  --> $DIR/no_effect.rs:108:5\n    |\n LL |     &6;\n    |     ^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:104:5\n+  --> $DIR/no_effect.rs:109:5\n    |\n LL |     (5, 6, 7);\n    |     ^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:105:5\n-   |\n-LL |     box 42;\n-   |     ^^^^^^^\n-\n-error: statement with no effect\n-  --> $DIR/no_effect.rs:106:5\n+  --> $DIR/no_effect.rs:110:5\n    |\n LL |     ..;\n    |     ^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:107:5\n+  --> $DIR/no_effect.rs:111:5\n    |\n LL |     5..;\n    |     ^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:108:5\n+  --> $DIR/no_effect.rs:112:5\n    |\n LL |     ..5;\n    |     ^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:109:5\n+  --> $DIR/no_effect.rs:113:5\n    |\n LL |     5..6;\n    |     ^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:110:5\n+  --> $DIR/no_effect.rs:114:5\n    |\n LL |     5..=6;\n    |     ^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:111:5\n+  --> $DIR/no_effect.rs:115:5\n    |\n LL |     [42, 55];\n    |     ^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:112:5\n+  --> $DIR/no_effect.rs:116:5\n    |\n LL |     [42, 55][1];\n    |     ^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:113:5\n+  --> $DIR/no_effect.rs:117:5\n    |\n LL |     (42, 55).1;\n    |     ^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:114:5\n+  --> $DIR/no_effect.rs:118:5\n    |\n LL |     [42; 55];\n    |     ^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:115:5\n+  --> $DIR/no_effect.rs:119:5\n    |\n LL |     [42; 55][13];\n    |     ^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:117:5\n+  --> $DIR/no_effect.rs:121:5\n    |\n LL |     || x += 5;\n    |     ^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:119:5\n+  --> $DIR/no_effect.rs:123:5\n    |\n LL |     FooString { s: s };\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: binding to `_` prefixed variable with no side-effect\n-  --> $DIR/no_effect.rs:120:5\n+  --> $DIR/no_effect.rs:124:5\n    |\n LL |     let _unused = 1;\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::no-effect-underscore-binding` implied by `-D warnings`\n \n error: binding to `_` prefixed variable with no side-effect\n-  --> $DIR/no_effect.rs:121:5\n+  --> $DIR/no_effect.rs:125:5\n    |\n LL |     let _penguin = || println!(\"Some helpful closure\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: binding to `_` prefixed variable with no side-effect\n-  --> $DIR/no_effect.rs:122:5\n+  --> $DIR/no_effect.rs:126:5\n    |\n LL |     let _duck = Struct { field: 0 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: binding to `_` prefixed variable with no side-effect\n-  --> $DIR/no_effect.rs:123:5\n+  --> $DIR/no_effect.rs:127:5\n    |\n LL |     let _cat = [2, 4, 6, 8][2];\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 30 previous errors\n+error: aborting due to 29 previous errors\n "}, {"sha": "3b5a374b4a7b4c6be95005679efa27ecd17fd7b5", "filename": "tests/ui/nonminimal_bool.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Fnonminimal_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Fnonminimal_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnonminimal_bool.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -63,3 +63,32 @@ fn issue9428() {\n         println!(\"foo\");\n     }\n }\n+\n+fn issue_10523() {\n+    macro_rules! a {\n+        ($v:expr) => {\n+            $v.is_some()\n+        };\n+    }\n+    let x: Option<u32> = None;\n+    if !a!(x) {}\n+}\n+\n+fn issue_10523_1() {\n+    macro_rules! a {\n+        ($v:expr) => {\n+            !$v.is_some()\n+        };\n+    }\n+    let x: Option<u32> = None;\n+    if a!(x) {}\n+}\n+\n+fn issue_10523_2() {\n+    macro_rules! a {\n+        () => {\n+            !None::<u32>.is_some()\n+        };\n+    }\n+    if a!() {}\n+}"}, {"sha": "e1e30114081ef0cb27d9caeac6c0eb33a12ac113", "filename": "tests/ui/overflow_check_conditional.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foverflow_check_conditional.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -1,9 +1,6 @@\n #![warn(clippy::overflow_check_conditional)]\n \n-fn main() {\n-    let a: u32 = 1;\n-    let b: u32 = 2;\n-    let c: u32 = 3;\n+fn test(a: u32, b: u32, c: u32) {\n     if a + b < a {}\n     if a > a + b {}\n     if a + b < b {}\n@@ -23,3 +20,7 @@ fn main() {\n     if i > i + j {}\n     if i - j < i {}\n }\n+\n+fn main() {\n+    test(1, 2, 3)\n+}"}, {"sha": "92d1d8ef911efcad667698a23b39e761001c70a5", "filename": "tests/ui/overflow_check_conditional.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Foverflow_check_conditional.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Foverflow_check_conditional.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foverflow_check_conditional.stderr?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -1,49 +1,49 @@\n error: you are trying to use classic C overflow conditions that will fail in Rust\n-  --> $DIR/overflow_check_conditional.rs:7:8\n+  --> $DIR/overflow_check_conditional.rs:4:8\n    |\n LL |     if a + b < a {}\n    |        ^^^^^^^^^\n    |\n    = note: `-D clippy::overflow-check-conditional` implied by `-D warnings`\n \n error: you are trying to use classic C overflow conditions that will fail in Rust\n-  --> $DIR/overflow_check_conditional.rs:8:8\n+  --> $DIR/overflow_check_conditional.rs:5:8\n    |\n LL |     if a > a + b {}\n    |        ^^^^^^^^^\n \n error: you are trying to use classic C overflow conditions that will fail in Rust\n-  --> $DIR/overflow_check_conditional.rs:9:8\n+  --> $DIR/overflow_check_conditional.rs:6:8\n    |\n LL |     if a + b < b {}\n    |        ^^^^^^^^^\n \n error: you are trying to use classic C overflow conditions that will fail in Rust\n-  --> $DIR/overflow_check_conditional.rs:10:8\n+  --> $DIR/overflow_check_conditional.rs:7:8\n    |\n LL |     if b > a + b {}\n    |        ^^^^^^^^^\n \n error: you are trying to use classic C underflow conditions that will fail in Rust\n-  --> $DIR/overflow_check_conditional.rs:11:8\n+  --> $DIR/overflow_check_conditional.rs:8:8\n    |\n LL |     if a - b > b {}\n    |        ^^^^^^^^^\n \n error: you are trying to use classic C underflow conditions that will fail in Rust\n-  --> $DIR/overflow_check_conditional.rs:12:8\n+  --> $DIR/overflow_check_conditional.rs:9:8\n    |\n LL |     if b < a - b {}\n    |        ^^^^^^^^^\n \n error: you are trying to use classic C underflow conditions that will fail in Rust\n-  --> $DIR/overflow_check_conditional.rs:13:8\n+  --> $DIR/overflow_check_conditional.rs:10:8\n    |\n LL |     if a - b > a {}\n    |        ^^^^^^^^^\n \n error: you are trying to use classic C underflow conditions that will fail in Rust\n-  --> $DIR/overflow_check_conditional.rs:14:8\n+  --> $DIR/overflow_check_conditional.rs:11:8\n    |\n LL |     if a < a - b {}\n    |        ^^^^^^^^^"}, {"sha": "cc84ba25bd0d79edf9ef503b3ff218ebad3404df", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.fixed", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -4,7 +4,7 @@\n // would otherwise be responsible for\n #![warn(clippy::useless_transmute)]\n #![warn(clippy::transmute_ptr_to_ptr)]\n-#![allow(dead_code, unused_unsafe, clippy::borrow_as_ptr)]\n+#![allow(unused, clippy::borrow_as_ptr)]\n \n use std::mem::{size_of, transmute};\n \n@@ -77,3 +77,9 @@ fn cannot_be_expressed_as_pointer_cast(in_param: Single) -> Pair {\n \n     unsafe { transmute::<Single, Pair>(in_param) }\n }\n+\n+fn issue_10449() {\n+    fn f() {}\n+\n+    let _x: u8 = unsafe { *(f as *const u8) };\n+}"}, {"sha": "aa65ab4dd2475372fa1ba7ab3ddf2a119a279e0e", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -4,7 +4,7 @@\n // would otherwise be responsible for\n #![warn(clippy::useless_transmute)]\n #![warn(clippy::transmute_ptr_to_ptr)]\n-#![allow(dead_code, unused_unsafe, clippy::borrow_as_ptr)]\n+#![allow(unused, clippy::borrow_as_ptr)]\n \n use std::mem::{size_of, transmute};\n \n@@ -77,3 +77,9 @@ fn cannot_be_expressed_as_pointer_cast(in_param: Single) -> Pair {\n \n     unsafe { transmute::<Single, Pair>(in_param) }\n }\n+\n+fn issue_10449() {\n+    fn f() {}\n+\n+    let _x: u8 = unsafe { *std::mem::transmute::<fn(), *const u8>(f) };\n+}"}, {"sha": "58f5162c78e78839bdafd892fa8dd5a096cb3095", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -58,5 +58,11 @@ error: transmute from a reference to a pointer\n LL |     unsafe { transmute::<&[i32; 1], *const u8>(in_param) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `in_param as *const [i32; 1] as *const u8`\n \n-error: aborting due to 9 previous errors\n+error: transmute from `fn()` to `*const u8` which could be expressed as a pointer cast instead\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:84:28\n+   |\n+LL |     let _x: u8 = unsafe { *std::mem::transmute::<fn(), *const u8>(f) };\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(f as *const u8)`\n+\n+error: aborting due to 10 previous errors\n "}, {"sha": "b046694f8c6f63823a928712d7690181f201a07f", "filename": "tests/ui/unnecessary_operation.fixed", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Funnecessary_operation.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Funnecessary_operation.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_operation.fixed?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -1,7 +1,12 @@\n // run-rustfix\n \n-#![feature(box_syntax)]\n-#![allow(clippy::deref_addrof, dead_code, unused, clippy::no_effect)]\n+#![allow(\n+    clippy::deref_addrof,\n+    dead_code,\n+    unused,\n+    clippy::no_effect,\n+    clippy::unnecessary_struct_initialization\n+)]\n #![warn(clippy::unnecessary_operation)]\n \n struct Tuple(i32);\n@@ -59,7 +64,6 @@ fn main() {\n     5;6;get_number();\n     get_number();\n     get_number();\n-    get_number();\n     5;get_number();\n     42;get_number();\n     assert!([42, 55].len() > get_usize());"}, {"sha": "9ed9679e938b0041da85a331d58ed71f5a41d811", "filename": "tests/ui/unnecessary_operation.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Funnecessary_operation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Funnecessary_operation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_operation.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -1,7 +1,12 @@\n // run-rustfix\n \n-#![feature(box_syntax)]\n-#![allow(clippy::deref_addrof, dead_code, unused, clippy::no_effect)]\n+#![allow(\n+    clippy::deref_addrof,\n+    dead_code,\n+    unused,\n+    clippy::no_effect,\n+    clippy::unnecessary_struct_initialization\n+)]\n #![warn(clippy::unnecessary_operation)]\n \n struct Tuple(i32);\n@@ -57,7 +62,6 @@ fn main() {\n     *&get_number();\n     &get_number();\n     (5, 6, get_number());\n-    box get_number();\n     get_number()..;\n     ..get_number();\n     5..get_number();"}, {"sha": "a1d0d93998a6c776b1794e03ab7ce28985b528aa", "filename": "tests/ui/unnecessary_operation.stderr", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Funnecessary_operation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Funnecessary_operation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_operation.stderr?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -1,128 +1,122 @@\n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:51:5\n+  --> $DIR/unnecessary_operation.rs:56:5\n    |\n LL |     Tuple(get_number());\n    |     ^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n    |\n    = note: `-D clippy::unnecessary-operation` implied by `-D warnings`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:52:5\n+  --> $DIR/unnecessary_operation.rs:57:5\n    |\n LL |     Struct { field: get_number() };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:53:5\n+  --> $DIR/unnecessary_operation.rs:58:5\n    |\n LL |     Struct { ..get_struct() };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_struct();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:54:5\n+  --> $DIR/unnecessary_operation.rs:59:5\n    |\n LL |     Enum::Tuple(get_number());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:55:5\n+  --> $DIR/unnecessary_operation.rs:60:5\n    |\n LL |     Enum::Struct { field: get_number() };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:56:5\n+  --> $DIR/unnecessary_operation.rs:61:5\n    |\n LL |     5 + get_number();\n    |     ^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `5;get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:57:5\n+  --> $DIR/unnecessary_operation.rs:62:5\n    |\n LL |     *&get_number();\n    |     ^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:58:5\n+  --> $DIR/unnecessary_operation.rs:63:5\n    |\n LL |     &get_number();\n    |     ^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:59:5\n+  --> $DIR/unnecessary_operation.rs:64:5\n    |\n LL |     (5, 6, get_number());\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `5;6;get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:60:5\n-   |\n-LL |     box get_number();\n-   |     ^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n-\n-error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:61:5\n+  --> $DIR/unnecessary_operation.rs:65:5\n    |\n LL |     get_number()..;\n    |     ^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:62:5\n+  --> $DIR/unnecessary_operation.rs:66:5\n    |\n LL |     ..get_number();\n    |     ^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:63:5\n+  --> $DIR/unnecessary_operation.rs:67:5\n    |\n LL |     5..get_number();\n    |     ^^^^^^^^^^^^^^^^ help: statement can be reduced to: `5;get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:64:5\n+  --> $DIR/unnecessary_operation.rs:68:5\n    |\n LL |     [42, get_number()];\n    |     ^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `42;get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:65:5\n+  --> $DIR/unnecessary_operation.rs:69:5\n    |\n LL |     [42, 55][get_usize()];\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: statement can be written as: `assert!([42, 55].len() > get_usize());`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:66:5\n+  --> $DIR/unnecessary_operation.rs:70:5\n    |\n LL |     (42, get_number()).1;\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `42;get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:67:5\n+  --> $DIR/unnecessary_operation.rs:71:5\n    |\n LL |     [get_number(); 55];\n    |     ^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:68:5\n+  --> $DIR/unnecessary_operation.rs:72:5\n    |\n LL |     [42; 55][get_usize()];\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: statement can be written as: `assert!([42; 55].len() > get_usize());`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:69:5\n+  --> $DIR/unnecessary_operation.rs:73:5\n    |\n LL | /     {\n LL | |         get_number()\n LL | |     };\n    | |______^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:72:5\n+  --> $DIR/unnecessary_operation.rs:76:5\n    |\n LL | /     FooString {\n LL | |         s: String::from(\"blah\"),\n LL | |     };\n    | |______^ help: statement can be reduced to: `String::from(\"blah\");`\n \n-error: aborting due to 20 previous errors\n+error: aborting due to 19 previous errors\n "}, {"sha": "b47129e4a36a881f6aa9caf3157aaabbc4425544", "filename": "tests/ui/unnecessary_struct_initialization.fixed", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Funnecessary_struct_initialization.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Funnecessary_struct_initialization.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_struct_initialization.fixed?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -0,0 +1,73 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::unnecessary_struct_initialization)]\n+\n+struct S {\n+    f: String,\n+}\n+\n+#[derive(Clone, Copy)]\n+struct T {\n+    f: u32,\n+}\n+\n+struct U {\n+    f: u32,\n+}\n+\n+impl Clone for U {\n+    fn clone(&self) -> Self {\n+        // Do not lint: `Self` does not implement `Copy`\n+        Self { ..*self }\n+    }\n+}\n+\n+#[derive(Copy)]\n+struct V {\n+    f: u32,\n+}\n+\n+impl Clone for V {\n+    fn clone(&self) -> Self {\n+        // Lint: `Self` implements `Copy`\n+        *self\n+    }\n+}\n+\n+fn main() {\n+    // Should lint: `a` would be consumed anyway\n+    let a = S { f: String::from(\"foo\") };\n+    let mut b = a;\n+\n+    // Should lint: `b` would be consumed, and is mutable\n+    let c = &mut b;\n+\n+    // Should not lint as `d` is not mutable\n+    let d = S { f: String::from(\"foo\") };\n+    let e = &mut S { ..d };\n+\n+    // Should lint as `f` would be consumed anyway\n+    let f = S { f: String::from(\"foo\") };\n+    let g = &f;\n+\n+    // Should lint: the result of an expression is mutable\n+    let h = &mut *Box::new(S { f: String::from(\"foo\") });\n+\n+    // Should not lint: `m` would be both alive and borrowed\n+    let m = T { f: 17 };\n+    let n = &T { ..m };\n+\n+    // Should not lint: `m` should not be modified\n+    let o = &mut T { ..m };\n+    o.f = 32;\n+    assert_eq!(m.f, 17);\n+\n+    // Should not lint: `m` should not be modified\n+    let o = &mut T { ..m } as *mut T;\n+    unsafe { &mut *o }.f = 32;\n+    assert_eq!(m.f, 17);\n+\n+    // Should lint: the result of an expression is mutable and temporary\n+    let p = &mut *Box::new(T { f: 5 });\n+}"}, {"sha": "63b11c626e5bff36b99da37e7e1c7a9add5ccecd", "filename": "tests/ui/unnecessary_struct_initialization.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Funnecessary_struct_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Funnecessary_struct_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_struct_initialization.rs?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -0,0 +1,77 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::unnecessary_struct_initialization)]\n+\n+struct S {\n+    f: String,\n+}\n+\n+#[derive(Clone, Copy)]\n+struct T {\n+    f: u32,\n+}\n+\n+struct U {\n+    f: u32,\n+}\n+\n+impl Clone for U {\n+    fn clone(&self) -> Self {\n+        // Do not lint: `Self` does not implement `Copy`\n+        Self { ..*self }\n+    }\n+}\n+\n+#[derive(Copy)]\n+struct V {\n+    f: u32,\n+}\n+\n+impl Clone for V {\n+    fn clone(&self) -> Self {\n+        // Lint: `Self` implements `Copy`\n+        Self { ..*self }\n+    }\n+}\n+\n+fn main() {\n+    // Should lint: `a` would be consumed anyway\n+    let a = S { f: String::from(\"foo\") };\n+    let mut b = S { ..a };\n+\n+    // Should lint: `b` would be consumed, and is mutable\n+    let c = &mut S { ..b };\n+\n+    // Should not lint as `d` is not mutable\n+    let d = S { f: String::from(\"foo\") };\n+    let e = &mut S { ..d };\n+\n+    // Should lint as `f` would be consumed anyway\n+    let f = S { f: String::from(\"foo\") };\n+    let g = &S { ..f };\n+\n+    // Should lint: the result of an expression is mutable\n+    let h = &mut S {\n+        ..*Box::new(S { f: String::from(\"foo\") })\n+    };\n+\n+    // Should not lint: `m` would be both alive and borrowed\n+    let m = T { f: 17 };\n+    let n = &T { ..m };\n+\n+    // Should not lint: `m` should not be modified\n+    let o = &mut T { ..m };\n+    o.f = 32;\n+    assert_eq!(m.f, 17);\n+\n+    // Should not lint: `m` should not be modified\n+    let o = &mut T { ..m } as *mut T;\n+    unsafe { &mut *o }.f = 32;\n+    assert_eq!(m.f, 17);\n+\n+    // Should lint: the result of an expression is mutable and temporary\n+    let p = &mut T {\n+        ..*Box::new(T { f: 5 })\n+    };\n+}"}, {"sha": "ca497057702f602cc7829f8d0c542eb324fde917", "filename": "tests/ui/unnecessary_struct_initialization.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Funnecessary_struct_initialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d168b31c39afbd83db07c09d6a190ee17532645/tests%2Fui%2Funnecessary_struct_initialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_struct_initialization.stderr?ref=1d168b31c39afbd83db07c09d6a190ee17532645", "patch": "@@ -0,0 +1,46 @@\n+error: unnecessary struct building\n+  --> $DIR/unnecessary_struct_initialization.rs:34:9\n+   |\n+LL |         Self { ..*self }\n+   |         ^^^^^^^^^^^^^^^^ help: replace with: `*self`\n+   |\n+   = note: `-D clippy::unnecessary-struct-initialization` implied by `-D warnings`\n+\n+error: unnecessary struct building\n+  --> $DIR/unnecessary_struct_initialization.rs:41:17\n+   |\n+LL |     let mut b = S { ..a };\n+   |                 ^^^^^^^^^ help: replace with: `a`\n+\n+error: unnecessary struct building\n+  --> $DIR/unnecessary_struct_initialization.rs:44:18\n+   |\n+LL |     let c = &mut S { ..b };\n+   |                  ^^^^^^^^^ help: replace with: `b`\n+\n+error: unnecessary struct building\n+  --> $DIR/unnecessary_struct_initialization.rs:52:14\n+   |\n+LL |     let g = &S { ..f };\n+   |              ^^^^^^^^^ help: replace with: `f`\n+\n+error: unnecessary struct building\n+  --> $DIR/unnecessary_struct_initialization.rs:55:18\n+   |\n+LL |       let h = &mut S {\n+   |  __________________^\n+LL | |         ..*Box::new(S { f: String::from(\"foo\") })\n+LL | |     };\n+   | |_____^ help: replace with: `*Box::new(S { f: String::from(\"foo\") })`\n+\n+error: unnecessary struct building\n+  --> $DIR/unnecessary_struct_initialization.rs:74:18\n+   |\n+LL |       let p = &mut T {\n+   |  __________________^\n+LL | |         ..*Box::new(T { f: 5 })\n+LL | |     };\n+   | |_____^ help: replace with: `*Box::new(T { f: 5 })`\n+\n+error: aborting due to 6 previous errors\n+"}]}