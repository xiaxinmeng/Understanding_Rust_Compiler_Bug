{"sha": "f0234f1976564c541d6aa1f04312e5acc22b2f3e", "node_id": "C_kwDOAAsO6NoAKGYwMjM0ZjE5NzY1NjRjNTQxZDZhYTFmMDQzMTJlNWFjYzIyYjJmM2U", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-10-27T19:48:34Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-10-29T09:43:29Z"}, "message": "Add missing impl blocks for item reexported from private mod in JSON output", "tree": {"sha": "8ede7770c0f57250346d3de54a684cf72d123243", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ede7770c0f57250346d3de54a684cf72d123243"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0234f1976564c541d6aa1f04312e5acc22b2f3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0234f1976564c541d6aa1f04312e5acc22b2f3e", "html_url": "https://github.com/rust-lang/rust/commit/f0234f1976564c541d6aa1f04312e5acc22b2f3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0234f1976564c541d6aa1f04312e5acc22b2f3e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "607878d069267e1402ad792c9331b426e4c6d0f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/607878d069267e1402ad792c9331b426e4c6d0f9", "html_url": "https://github.com/rust-lang/rust/commit/607878d069267e1402ad792c9331b426e4c6d0f9"}], "stats": {"total": 30, "additions": 25, "deletions": 5}, "files": [{"sha": "89efddf76ef7f487bb63298114278ea4e75c5a53", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f0234f1976564c541d6aa1f04312e5acc22b2f3e/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0234f1976564c541d6aa1f04312e5acc22b2f3e/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=f0234f1976564c541d6aa1f04312e5acc22b2f3e", "patch": "@@ -1,9 +1,11 @@\n //! A collection of utility functions for the `strip_*` passes.\n use rustc_hir::def_id::DefId;\n use rustc_middle::middle::privacy::EffectiveVisibilities;\n+use rustc_span::symbol::sym;\n+\n use std::mem;\n \n-use crate::clean::{self, Item, ItemId, ItemIdSet};\n+use crate::clean::{self, Item, ItemId, ItemIdSet, NestedAttributesExt};\n use crate::fold::{strip_item, DocFolder};\n use crate::formats::cache::Cache;\n \n@@ -151,6 +153,22 @@ pub(crate) struct ImplStripper<'a> {\n     pub(crate) document_private: bool,\n }\n \n+impl<'a> ImplStripper<'a> {\n+    #[inline]\n+    fn should_keep_impl(&self, item: &Item, for_def_id: DefId) -> bool {\n+        if !for_def_id.is_local() || self.retained.contains(&for_def_id.into()) {\n+            true\n+        } else if self.is_json_output {\n+            // If the \"for\" item is exported and the impl block isn't `#[doc(hidden)]`, then we\n+            // need to keep it.\n+            self.cache.access_levels.is_exported(for_def_id)\n+                && !item.attrs.lists(sym::doc).has_word(sym::hidden)\n+        } else {\n+            false\n+        }\n+    }\n+}\n+\n impl<'a> DocFolder for ImplStripper<'a> {\n     fn fold_item(&mut self, i: Item) -> Option<Item> {\n         if let clean::ImplItem(ref imp) = *i.kind {\n@@ -178,23 +196,25 @@ impl<'a> DocFolder for ImplStripper<'a> {\n                     return None;\n                 }\n             }\n+            // Because we don't inline in `maybe_inline_local` if the output format is JSON,\n+            // we need to make a special check for JSON output: we want to keep it unless it has\n+            // a `#[doc(hidden)]` attribute if the `for_` type is exported.\n             if let Some(did) = imp.for_.def_id(self.cache) {\n-                if did.is_local() && !imp.for_.is_assoc_ty() && !self.retained.contains(&did.into())\n-                {\n+                if !imp.for_.is_assoc_ty() && !self.should_keep_impl(&i, did) {\n                     debug!(\"ImplStripper: impl item for stripped type; removing\");\n                     return None;\n                 }\n             }\n             if let Some(did) = imp.trait_.as_ref().map(|t| t.def_id()) {\n-                if did.is_local() && !self.retained.contains(&did.into()) {\n+                if !self.should_keep_impl(&i, did) {\n                     debug!(\"ImplStripper: impl item for stripped trait; removing\");\n                     return None;\n                 }\n             }\n             if let Some(generics) = imp.trait_.as_ref().and_then(|t| t.generics()) {\n                 for typaram in generics {\n                     if let Some(did) = typaram.def_id(self.cache) {\n-                        if did.is_local() && !self.retained.contains(&did.into()) {\n+                        if !self.should_keep_impl(&i, did) {\n                             debug!(\n                                 \"ImplStripper: stripped item in trait's generics; removing impl\"\n                             );"}]}