{"sha": "1f2ae3849cf024457253be745ff514a403e90b44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMmFlMzg0OWNmMDI0NDU3MjUzYmU3NDVmZjUxNGE0MDNlOTBiNDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-10T17:03:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-10T17:03:08Z"}, "message": "Auto merge of #35525 - jonathandturner:rollup, r=jonathandturner\n\nRollup of 15 pull requests\n\n- Successful merges: #35371, #35396, #35446, #35449, #35452, #35458, #35465, #35466, #35470, #35475, #35477, #35484, #35504, #35507, #35524\n- Failed merges: #35395, #35415", "tree": {"sha": "bd176e928c727529bba390a542984c7c8170107c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd176e928c727529bba390a542984c7c8170107c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f2ae3849cf024457253be745ff514a403e90b44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f2ae3849cf024457253be745ff514a403e90b44", "html_url": "https://github.com/rust-lang/rust/commit/1f2ae3849cf024457253be745ff514a403e90b44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f2ae3849cf024457253be745ff514a403e90b44/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae774103501337ed63b42b673c6c4fdbf369e80e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae774103501337ed63b42b673c6c4fdbf369e80e", "html_url": "https://github.com/rust-lang/rust/commit/ae774103501337ed63b42b673c6c4fdbf369e80e"}, {"sha": "fb1c6acc81c3dfb9b4ae3b9747f24d503658c23f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb1c6acc81c3dfb9b4ae3b9747f24d503658c23f", "html_url": "https://github.com/rust-lang/rust/commit/fb1c6acc81c3dfb9b4ae3b9747f24d503658c23f"}], "stats": {"total": 189, "additions": 133, "deletions": 56}, "files": [{"sha": "fcb7e0bc7eacd9e2caff84ff60d71026264c9075", "filename": "src/doc/book/crates-and-modules.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f2ae3849cf024457253be745ff514a403e90b44/src%2Fdoc%2Fbook%2Fcrates-and-modules.md", "raw_url": "https://github.com/rust-lang/rust/raw/1f2ae3849cf024457253be745ff514a403e90b44/src%2Fdoc%2Fbook%2Fcrates-and-modules.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fcrates-and-modules.md?ref=1f2ae3849cf024457253be745ff514a403e90b44", "patch": "@@ -22,6 +22,7 @@ As an example, let\u2019s make a *phrases* crate, which will give us various phrase\n in different languages. To keep things simple, we\u2019ll stick to \u2018greetings\u2019 and\n \u2018farewells\u2019 as two kinds of phrases, and use English and Japanese (\u65e5\u672c\u8a9e) as\n two languages for those phrases to be in. We\u2019ll use this module layout:\n+\n ```text\n                                     +-----------+\n                                 +---| greetings |"}, {"sha": "910b13754767facc46acd73885ae9ba02ef73fd1", "filename": "src/doc/book/patterns.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f2ae3849cf024457253be745ff514a403e90b44/src%2Fdoc%2Fbook%2Fpatterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/1f2ae3849cf024457253be745ff514a403e90b44/src%2Fdoc%2Fbook%2Fpatterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fpatterns.md?ref=1f2ae3849cf024457253be745ff514a403e90b44", "patch": "@@ -109,14 +109,14 @@ struct Point {\n     y: i32,\n }\n \n-let origin = Point { x: 0, y: 0 };\n+let point = Point { x: 2, y: 3 };\n \n-match origin {\n+match point {\n     Point { x, .. } => println!(\"x is {}\", x),\n }\n ```\n \n-This prints `x is 0`.\n+This prints `x is 2`.\n \n You can do this kind of match on any member, not only the first:\n \n@@ -126,14 +126,14 @@ struct Point {\n     y: i32,\n }\n \n-let origin = Point { x: 0, y: 0 };\n+let point = Point { x: 2, y: 3 };\n \n-match origin {\n+match point {\n     Point { y, .. } => println!(\"y is {}\", y),\n }\n ```\n \n-This prints `y is 0`.\n+This prints `y is 3`.\n \n This \u2018destructuring\u2019 behavior works on any compound data type, like\n [tuples][tuples] or [enums][enums]."}, {"sha": "f0ab1488d4015962f432ba4971aeb0b9bc2a2f79", "filename": "src/doc/reference.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f2ae3849cf024457253be745ff514a403e90b44/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/1f2ae3849cf024457253be745ff514a403e90b44/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=1f2ae3849cf024457253be745ff514a403e90b44", "patch": "@@ -3039,7 +3039,7 @@ The precedence of Rust binary operators is ordered as follows, going from\n strong to weak:\n \n ```{.text .precedence}\n-as\n+as :\n * / %\n + -\n << >>\n@@ -3050,6 +3050,7 @@ as\n &&\n ||\n .. ...\n+<-\n =\n ```\n "}, {"sha": "366b58e06c4768050a0763d6f1d05b2b7e919b3e", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f2ae3849cf024457253be745ff514a403e90b44/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2ae3849cf024457253be745ff514a403e90b44/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=1f2ae3849cf024457253be745ff514a403e90b44", "patch": "@@ -316,7 +316,10 @@ fn check_arms(cx: &MatchCheckCtxt,\n                                 let &(ref first_arm_pats, _) = &arms[0];\n                                 let first_pat = &first_arm_pats[0];\n                                 let span = first_pat.span;\n-                                span_err!(cx.tcx.sess, span, E0162, \"irrefutable if-let pattern\");\n+                                struct_span_err!(cx.tcx.sess, span, E0162,\n+                                                \"irrefutable if-let pattern\")\n+                                    .span_label(span, &format!(\"irrefutable pattern\"))\n+                                    .emit();\n                                 printed_if_let_err = true;\n                             }\n                         },"}, {"sha": "07595c5dbe1144cb987de5165a121575e420234a", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1f2ae3849cf024457253be745ff514a403e90b44/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2ae3849cf024457253be745ff514a403e90b44/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=1f2ae3849cf024457253be745ff514a403e90b44", "patch": "@@ -360,8 +360,11 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 self.convert_angle_bracketed_parameters(rscope, span, decl_generics, data)\n             }\n             hir::ParenthesizedParameters(..) => {\n-                span_err!(tcx.sess, span, E0214,\n-                          \"parenthesized parameters may only be used with a trait\");\n+                struct_span_err!(tcx.sess, span, E0214,\n+                          \"parenthesized parameters may only be used with a trait\")\n+                    .span_label(span, &format!(\"only traits may use parentheses\"))\n+                    .emit();\n+\n                 let ty_param_defs = decl_generics.types.get_slice(TypeSpace);\n                 (Substs::empty(),\n                  ty_param_defs.iter().map(|_| tcx.types.err).collect(),\n@@ -1201,10 +1204,13 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         }\n \n         for (trait_def_id, name) in associated_types {\n-            span_err!(tcx.sess, span, E0191,\n+            struct_span_err!(tcx.sess, span, E0191,\n                 \"the value of the associated type `{}` (from the trait `{}`) must be specified\",\n                         name,\n-                        tcx.item_path_str(trait_def_id));\n+                        tcx.item_path_str(trait_def_id))\n+                        .span_label(span, &format!(\n+                            \"missing associated type `{}` value\", name))\n+                        .emit();\n         }\n \n         tcx.mk_trait(object.principal, object.bounds)\n@@ -1281,10 +1287,12 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         }\n \n         if bounds.len() > 1 {\n-            let mut err = struct_span_err!(self.tcx().sess, span, E0221,\n-                                           \"ambiguous associated type `{}` in bounds of `{}`\",\n-                                           assoc_name,\n-                                           ty_param_name);\n+            let mut err = struct_span_err!(\n+                self.tcx().sess, span, E0221,\n+                \"ambiguous associated type `{}` in bounds of `{}`\",\n+                assoc_name,\n+                ty_param_name);\n+            err.span_label(span, &format!(\"ambiguous associated type `{}`\", assoc_name));\n \n             for bound in &bounds {\n                 span_note!(&mut err, span,\n@@ -1584,9 +1592,11 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 return self.tcx().types.err;\n             }\n             _ => {\n-                span_err!(tcx.sess, span, E0248,\n-                          \"found value `{}` used as a type\",\n-                          tcx.item_path_str(def.def_id()));\n+                struct_span_err!(tcx.sess, span, E0248,\n+                           \"found value `{}` used as a type\",\n+                            tcx.item_path_str(def.def_id()))\n+                           .span_label(span, &format!(\"value used as a type\"))\n+                           .emit();\n                 return self.tcx().types.err;\n             }\n         }"}, {"sha": "5f255cc1fb730112b1df500d28a65b18fec18dfb", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1f2ae3849cf024457253be745ff514a403e90b44/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2ae3849cf024457253be745ff514a403e90b44/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=1f2ae3849cf024457253be745ff514a403e90b44", "patch": "@@ -633,10 +633,23 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 self.check_pat(&subpat, field_ty);\n             }\n         } else {\n-            span_err!(tcx.sess, pat.span, E0023,\n-                      \"this pattern has {} field{s}, but the corresponding {} has {} field{s}\",\n-                      subpats.len(), def.kind_name(), variant.fields.len(),\n-                      s = if variant.fields.len() == 1 {\"\"} else {\"s\"});\n+            let subpats_ending = if subpats.len() == 1 {\n+                \"\"\n+            } else {\n+                \"s\"\n+            };\n+            let fields_ending = if variant.fields.len() == 1 {\n+                \"\"\n+            } else {\n+                \"s\"\n+            };\n+            struct_span_err!(tcx.sess, pat.span, E0023,\n+                             \"this pattern has {} field{}, but the corresponding {} has {} field{}\",\n+                             subpats.len(), subpats_ending, def.kind_name(),\n+                             variant.fields.len(),  fields_ending)\n+                .span_label(pat.span, &format!(\"expected {} field{}, found {}\",\n+                                               variant.fields.len(), fields_ending, subpats.len()))\n+                .emit();\n             on_error();\n         }\n     }\n@@ -682,10 +695,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     field_map.get(&field.name)\n                         .map(|f| self.field_ty(span, f, substs))\n                         .unwrap_or_else(|| {\n-                            span_err!(tcx.sess, span, E0026,\n-                                \"struct `{}` does not have a field named `{}`\",\n-                                tcx.item_path_str(variant.did),\n-                                field.name);\n+                            struct_span_err!(tcx.sess, span, E0026,\n+                                             \"struct `{}` does not have a field named `{}`\",\n+                                             tcx.item_path_str(variant.did),\n+                                             field.name)\n+                                .span_label(span,\n+                                            &format!(\"struct `{}` does not have field `{}`\",\n+                                                     tcx.item_path_str(variant.did),\n+                                                     field.name))\n+                                .emit();\n+\n                             tcx.types.err\n                         })\n                 }"}, {"sha": "f11bb3175dab0855793a01103f551254589b39e5", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1f2ae3849cf024457253be745ff514a403e90b44/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2ae3849cf024457253be745ff514a403e90b44/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1f2ae3849cf024457253be745ff514a403e90b44", "patch": "@@ -4372,14 +4372,17 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 if i < type_count {\n                     substs.types.push(space, t);\n                 } else if i == type_count {\n-                    span_err!(self.tcx.sess, typ.span, E0087,\n-                        \"too many type parameters provided: \\\n-                         expected at most {} parameter{}, \\\n-                         found {} parameter{}\",\n-                         type_count,\n-                         if type_count == 1 {\"\"} else {\"s\"},\n-                         data.types.len(),\n-                         if data.types.len() == 1 {\"\"} else {\"s\"});\n+                    struct_span_err!(self.tcx.sess, typ.span, E0087,\n+                                     \"too many type parameters provided: \\\n+                                      expected at most {} parameter{}, \\\n+                                      found {} parameter{}\",\n+                                     type_count,\n+                                     if type_count == 1 {\"\"} else {\"s\"},\n+                                     data.types.len(),\n+                                     if data.types.len() == 1 {\"\"} else {\"s\"})\n+                        .span_label(typ.span , &format!(\"expected {} parameter{}\",\n+                                    type_count,\n+                                    if type_count == 1 {\"\"} else {\"s\"})).emit();\n                     substs.types.truncate(space, 0);\n                     break;\n                 }"}, {"sha": "7a923cd29d0fb9cde009f0a63416fe959fab9cb1", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1f2ae3849cf024457253be745ff514a403e90b44/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2ae3849cf024457253be745ff514a403e90b44/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=1f2ae3849cf024457253be745ff514a403e90b44", "patch": "@@ -321,13 +321,18 @@ impl<'a, 'gcx, 'tcx> CoherenceChecker<'a, 'gcx, 'tcx> {\n \n                 }\n                 Err(CopyImplementationError::InfrigingVariant(name)) => {\n-                       struct_span_err!(tcx.sess, span, E0205,\n-                                 \"the trait `Copy` may not be \\\n-                                          implemented for this type\")\n-                           .span_label(span, &format!(\"variant \\\n-                                          `{}` does not implement `Copy`\",\n-                                         name))\n-                           .emit()\n+                    let item = tcx.map.expect_item(impl_node_id);\n+                    let span = if let ItemImpl(_, _, _, Some(ref tr), _, _) = item.node {\n+                        tr.path.span\n+                    } else {\n+                        span\n+                    };\n+\n+                    struct_span_err!(tcx.sess, span, E0205,\n+                                     \"the trait `Copy` may not be implemented for this type\")\n+                        .span_label(span, &format!(\"variant `{}` does not implement `Copy`\",\n+                                                   name))\n+                        .emit()\n                 }\n                 Err(CopyImplementationError::NotAnAdt) => {\n                     let item = tcx.map.expect_item(impl_node_id);"}, {"sha": "5e733389e24c8b8e520eb61e5319e871d907d76a", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f2ae3849cf024457253be745ff514a403e90b44/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2ae3849cf024457253be745ff514a403e90b44/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=1f2ae3849cf024457253be745ff514a403e90b44", "patch": "@@ -262,9 +262,10 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n                     match it.node {\n                         hir::ItemFn(_,_,_,_,ref ps,_)\n                         if ps.is_parameterized() => {\n-                            struct_span_err!(tcx.sess, start_span, E0132,\n+                            let sp = if let Some(sp) = ps.span() { sp } else { start_span };\n+                            struct_span_err!(tcx.sess, sp, E0132,\n                                 \"start function is not allowed to have type parameters\")\n-                                .span_label(ps.span().unwrap(),\n+                                .span_label(sp,\n                                             &format!(\"start function cannot have type parameters\"))\n                                 .emit();\n                             return;"}, {"sha": "8039421ae77306418d2895f00284e6dad9e6c030", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1f2ae3849cf024457253be745ff514a403e90b44/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2ae3849cf024457253be745ff514a403e90b44/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=1f2ae3849cf024457253be745ff514a403e90b44", "patch": "@@ -199,13 +199,12 @@ fn test_resize_policy() {\n /// A hash map implementation which uses linear probing with Robin\n /// Hood bucket stealing.\n ///\n-/// The hashes are all keyed by the thread-local random number generator\n-/// on creation by default. This means that the ordering of the keys is\n-/// randomized, but makes the tables more resistant to\n-/// denial-of-service attacks (Hash DoS). No guarantees are made to the\n-/// quality of the random data. The implementation uses the best available\n-/// random data from your platform at the time of creation. This behavior\n-/// can be overridden with one of the constructors.\n+/// By default, HashMap uses a somewhat slow hashing algorithm which can provide resistance\n+/// to DoS attacks. Rust makes a best attempt at acquiring random numbers without IO\n+/// blocking from your system. Because of this HashMap is not guaranteed to provide\n+/// DoS resistance since the numbers generated might not be truly random. If you do\n+/// require this behavior you can create your own hashing function using\n+/// [BuildHasherDefault](../hash/struct.BuildHasherDefault.html).\n ///\n /// It is required that the keys implement the `Eq` and `Hash` traits, although\n /// this can frequently be achieved by using `#[derive(PartialEq, Eq, Hash)]`."}, {"sha": "c3623e3177b56207606de2bf18b45f8e38d45aa3", "filename": "src/test/compile-fail/E0023.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f2ae3849cf024457253be745ff514a403e90b44/src%2Ftest%2Fcompile-fail%2FE0023.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2ae3849cf024457253be745ff514a403e90b44/src%2Ftest%2Fcompile-fail%2FE0023.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0023.rs?ref=1f2ae3849cf024457253be745ff514a403e90b44", "patch": "@@ -13,10 +13,15 @@ enum Fruit {\n     Pear(u32),\n }\n \n+\n fn main() {\n     let x = Fruit::Apple(String::new(), String::new());\n     match x {\n         Fruit::Apple(a) => {}, //~ ERROR E0023\n+                               //~| NOTE expected 2 fields, found 1\n         Fruit::Apple(a, b, c) => {}, //~ ERROR E0023\n+                                     //~| NOTE expected 2 fields, found 3\n+        Fruit::Pear(1, 2) => {}, //~ ERROR E0023\n+                                 //~| NOTE expected 1 field, found 2\n     }\n }"}, {"sha": "ac609da4cbdde72a105871b8e8e74a1d6edf4845", "filename": "src/test/compile-fail/E0026.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f2ae3849cf024457253be745ff514a403e90b44/src%2Ftest%2Fcompile-fail%2FE0026.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2ae3849cf024457253be745ff514a403e90b44/src%2Ftest%2Fcompile-fail%2FE0026.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0026.rs?ref=1f2ae3849cf024457253be745ff514a403e90b44", "patch": "@@ -16,6 +16,8 @@ struct Thing {\n fn main() {\n     let thing = Thing { x: 0, y: 0 };\n     match thing {\n-        Thing { x, y, z } => {} //~ ERROR E0026\n+        Thing { x, y, z } => {}\n+        //~^ ERROR struct `Thing` does not have a field named `z` [E0026]\n+        //~| NOTE struct `Thing` does not have field `z`\n     }\n }"}, {"sha": "437ad3698a20664a2f4792e0e28cb67e97a5fc2e", "filename": "src/test/compile-fail/E0087.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f2ae3849cf024457253be745ff514a403e90b44/src%2Ftest%2Fcompile-fail%2FE0087.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2ae3849cf024457253be745ff514a403e90b44/src%2Ftest%2Fcompile-fail%2FE0087.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0087.rs?ref=1f2ae3849cf024457253be745ff514a403e90b44", "patch": "@@ -12,4 +12,5 @@ fn foo<T>() {}\n \n fn main() {\n     foo::<f64, bool>(); //~ ERROR E0087\n+    //~^ NOTE expected\n }"}, {"sha": "0b63d7c3f85c71873a0a405258513b483ac72483", "filename": "src/test/compile-fail/E0162.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f2ae3849cf024457253be745ff514a403e90b44/src%2Ftest%2Fcompile-fail%2FE0162.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2ae3849cf024457253be745ff514a403e90b44/src%2Ftest%2Fcompile-fail%2FE0162.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0162.rs?ref=1f2ae3849cf024457253be745ff514a403e90b44", "patch": "@@ -13,6 +13,7 @@ struct Irrefutable(i32);\n fn main() {\n     let irr = Irrefutable(0);\n     if let Irrefutable(x) = irr { //~ ERROR E0162\n+        //~| NOTE irrefutable pattern\n         println!(\"{}\", x);\n     }\n }"}, {"sha": "dcfe441ab0d00ca0287fde3100f1a3ea3cd4b19c", "filename": "src/test/compile-fail/E0191.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f2ae3849cf024457253be745ff514a403e90b44/src%2Ftest%2Fcompile-fail%2FE0191.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2ae3849cf024457253be745ff514a403e90b44/src%2Ftest%2Fcompile-fail%2FE0191.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0191.rs?ref=1f2ae3849cf024457253be745ff514a403e90b44", "patch": "@@ -13,6 +13,7 @@ trait Trait {\n }\n \n type Foo = Trait; //~ ERROR E0191\n+                  //~| NOTE missing associated type `Bar` value\n \n fn main() {\n }"}, {"sha": "c73e7534301055dd55729582ad1229c5646e1be5", "filename": "src/test/compile-fail/E0205.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f2ae3849cf024457253be745ff514a403e90b44/src%2Ftest%2Fcompile-fail%2FE0205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2ae3849cf024457253be745ff514a403e90b44/src%2Ftest%2Fcompile-fail%2FE0205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0205.rs?ref=1f2ae3849cf024457253be745ff514a403e90b44", "patch": "@@ -14,11 +14,11 @@ enum Foo {\n }\n \n impl Copy for Foo { }\n-//~^ ERROR E0205\n+//~^ ERROR the trait `Copy` may not be implemented for this type\n //~| NOTE variant `Bar` does not implement `Copy`\n \n #[derive(Copy)]\n-//~^ ERROR E0205\n+//~^ ERROR the trait `Copy` may not be implemented for this type\n //~| NOTE variant `Bar` does not implement `Copy`\n //~| NOTE in this expansion of #[derive(Copy)]\n enum Foo2<'a> {"}, {"sha": "e9c3cb72c11b07a7075c5a905ea4f120b2a77a0b", "filename": "src/test/compile-fail/E0214.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f2ae3849cf024457253be745ff514a403e90b44/src%2Ftest%2Fcompile-fail%2FE0214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2ae3849cf024457253be745ff514a403e90b44/src%2Ftest%2Fcompile-fail%2FE0214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0214.rs?ref=1f2ae3849cf024457253be745ff514a403e90b44", "patch": "@@ -9,5 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let v: Vec(&str) = vec![\"foo\"]; //~ ERROR E0214\n+    let v: Vec(&str) = vec![\"foo\"];\n+    //~^ ERROR E0214\n+    //~| NOTE only traits may use parentheses\n }"}, {"sha": "25568a323e161d42a1a6a8d219c76dae51f345dd", "filename": "src/test/compile-fail/E0248.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f2ae3849cf024457253be745ff514a403e90b44/src%2Ftest%2Fcompile-fail%2FE0248.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2ae3849cf024457253be745ff514a403e90b44/src%2Ftest%2Fcompile-fail%2FE0248.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0248.rs?ref=1f2ae3849cf024457253be745ff514a403e90b44", "patch": "@@ -13,6 +13,6 @@ enum Foo {\n }\n \n fn do_something(x: Foo::Bar) { } //~ ERROR E0248\n-\n+                //~| NOTE value used as a type\n fn main() {\n }"}, {"sha": "a2a11c62bb83245a851c7158f7dea07901bcb2b9", "filename": "src/test/compile-fail/associated-type-projection-from-multiple-supertraits.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f2ae3849cf024457253be745ff514a403e90b44/src%2Ftest%2Fcompile-fail%2Fassociated-type-projection-from-multiple-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2ae3849cf024457253be745ff514a403e90b44/src%2Ftest%2Fcompile-fail%2Fassociated-type-projection-from-multiple-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-type-projection-from-multiple-supertraits.rs?ref=1f2ae3849cf024457253be745ff514a403e90b44", "patch": "@@ -28,19 +28,23 @@ pub trait BoxCar : Box + Vehicle {\n \n fn dent<C:BoxCar>(c: C, color: C::Color) {\n     //~^ ERROR ambiguous associated type `Color` in bounds of `C`\n+    //~| NOTE ambiguous associated type `Color`\n     //~| NOTE could derive from `Vehicle`\n     //~| NOTE could derive from `Box`\n }\n \n fn dent_object<COLOR>(c: BoxCar<Color=COLOR>) {\n     //~^ ERROR ambiguous associated type\n     //~| ERROR the value of the associated type `Color` (from the trait `Vehicle`) must be specified\n+    //~| NOTE ambiguous associated type `Color`\n     //~| NOTE could derive from `Vehicle`\n     //~| NOTE could derive from `Box`\n+    //~| NOTE missing associated type `Color` value\n }\n \n fn paint<C:BoxCar>(c: C, d: C::Color) {\n     //~^ ERROR ambiguous associated type `Color` in bounds of `C`\n+    //~| NOTE ambiguous associated type `Color`\n     //~| NOTE could derive from `Vehicle`\n     //~| NOTE could derive from `Box`\n }"}, {"sha": "9b4e1918baea1e4f27465c727927846c61f2b7a9", "filename": "src/test/run-pass/issue-33498.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1f2ae3849cf024457253be745ff514a403e90b44/src%2Ftest%2Frun-pass%2Fissue-33498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2ae3849cf024457253be745ff514a403e90b44/src%2Ftest%2Frun-pass%2Fissue-33498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-33498.rs?ref=1f2ae3849cf024457253be745ff514a403e90b44", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn main() {\n+    let x = (0, 2);\n+\n+    match x {\n+        (0, ref y) => {}\n+        (y, 0) => {}\n+        _ => (),\n+    }\n+}"}]}