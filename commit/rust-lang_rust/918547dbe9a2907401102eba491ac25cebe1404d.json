{"sha": "918547dbe9a2907401102eba491ac25cebe1404d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxODU0N2RiZTlhMjkwNzQwMTEwMmViYTQ5MWFjMjVjZWJlMTQwNGQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-03T22:51:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-03T22:51:17Z"}, "message": "Merge #2911\n\n2911: Implement collecting errors while tokenizing r=matklad a=Veetaha\n\nNow we are collecting errors from `rustc_lexer` and returning them in `ParsedToken { token, error }` and `ParsedTokens { tokens, errors }` structures **([UPD]: this is now simplified, see updates bellow)**.\r\n\r\nThe main changes are introduced in `ra_syntax/parsing/lexer.rs`. It now exposes the following functions and types:\r\n\r\n```rust\r\npub fn tokenize(text: &str) -> ParsedTokens;\r\npub fn tokenize_append(text: &str, parsed_tokens_to_append_to: &mut ParsedTokens);\r\npub fn first_token(text: &str) -> Option<ParsedToken>; // allows any number of tokens in text\r\npub fn single_token(text: &str) -> Option<ParsedToken>; // allows only a single token in text\r\n\r\npub struct ParsedToken  { pub token: Token,       pub error: Option<SyntaxError> }\r\npub struct ParsedTokens { pub tokens: Vec<Token>, pub errors: Vec<SyntaxError>   }\r\n\r\npub enum TokenizeError { /* Simple enum which reflects rustc_lexer tokenization errors */ }\r\n```\r\nIn the first commit I implemented it with iterators, but then decided that since this crate is ad hoc for `rust-analyzer` and we clearly see the places of its usage it would be better to simplify it to vectors.\r\n\r\nThis is currently WIP, because I want to add tests for error messages generated by the lexer.\r\nI'd like to listen to you thoughts how to define these tests in `ra_syntax/test-data` dir.\r\n\r\nRelated issues: #223 \r\n\r\n**[UPD]**\r\n\r\nAfter the PR review the API was simplified:\r\n```rust\r\npub fn tokenize(text: &str) -> (Vec<Token>, Vec<SyntaxError>);\r\n// Both lex functions do not check for unescape errors\r\npub fn lex_single_syntax_kind(text: &str) -> Option<(SyntaxKind, Option<SyntaxError>)>;\r\npub fn lex_single_valid_syntax_kind(text: &str) -> Option<SyntaxKind>;\r\n\r\n// This will be removed in the next PR in favour of simlifying `SyntaxError` to `(String, TextRange)`\r\npub enum TokenizeError { /* Simple enum which reflects rustc_lexer tokenization errors */ }\r\n\r\n// this is private, but may be made public if such demand would exist in future (least privilege principle)\r\nfn lex_first_token(text: &str) -> Option<(Token, Option<SyntaxError>)>;\r\n```\n\nCo-authored-by: Veetaha <gerzoh1@gmail.com>", "tree": {"sha": "e0aa3bdcec597e81f022ac1ce388d42724a92f51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0aa3bdcec597e81f022ac1ce388d42724a92f51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/918547dbe9a2907401102eba491ac25cebe1404d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeOKPlCRBK7hj4Ov3rIwAAdHIIABiJ8dd02e4oeiQlGHSRBdZV\ncrC5WekjK50Kq6tfTJEdVU87RRouly892UOgsttjG15pmVnEvLfri6flUnc9u+qC\noGPpyxjKhH8880UI2jgpnoa2ZbZpJX/aQ9rG1JGQGpFG16gQpXnrjSaNtU4eACvZ\nF3yUQCapRHv6gVME69vmeOQVykw02F/5ZczjO2Ia92y0fDikFvzi6+tC4C1e4NR3\n7dHkiC9uugzZWTBo/m0c5CDp8Ty+MdcMBdT9EiH2omTAOBg6Mjt0RHFzRL+UY5Uv\nto1BOoYQveFr0qHLxl/jomnsOdF3lPJqHGTTSrRof+7SDAyGjfJU8Zz/q1nMRao=\n=hLHx\n-----END PGP SIGNATURE-----\n", "payload": "tree e0aa3bdcec597e81f022ac1ce388d42724a92f51\nparent b090ee5a65f9630146c2842bc51fcfcc8da08da1\nparent a3e5663ae0206270156fbeb926a174a40abbddb0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1580770277 +0000\ncommitter GitHub <noreply@github.com> 1580770277 +0000\n\nMerge #2911\n\n2911: Implement collecting errors while tokenizing r=matklad a=Veetaha\n\nNow we are collecting errors from `rustc_lexer` and returning them in `ParsedToken { token, error }` and `ParsedTokens { tokens, errors }` structures **([UPD]: this is now simplified, see updates bellow)**.\r\n\r\nThe main changes are introduced in `ra_syntax/parsing/lexer.rs`. It now exposes the following functions and types:\r\n\r\n```rust\r\npub fn tokenize(text: &str) -> ParsedTokens;\r\npub fn tokenize_append(text: &str, parsed_tokens_to_append_to: &mut ParsedTokens);\r\npub fn first_token(text: &str) -> Option<ParsedToken>; // allows any number of tokens in text\r\npub fn single_token(text: &str) -> Option<ParsedToken>; // allows only a single token in text\r\n\r\npub struct ParsedToken  { pub token: Token,       pub error: Option<SyntaxError> }\r\npub struct ParsedTokens { pub tokens: Vec<Token>, pub errors: Vec<SyntaxError>   }\r\n\r\npub enum TokenizeError { /* Simple enum which reflects rustc_lexer tokenization errors */ }\r\n```\r\nIn the first commit I implemented it with iterators, but then decided that since this crate is ad hoc for `rust-analyzer` and we clearly see the places of its usage it would be better to simplify it to vectors.\r\n\r\nThis is currently WIP, because I want to add tests for error messages generated by the lexer.\r\nI'd like to listen to you thoughts how to define these tests in `ra_syntax/test-data` dir.\r\n\r\nRelated issues: #223 \r\n\r\n**[UPD]**\r\n\r\nAfter the PR review the API was simplified:\r\n```rust\r\npub fn tokenize(text: &str) -> (Vec<Token>, Vec<SyntaxError>);\r\n// Both lex functions do not check for unescape errors\r\npub fn lex_single_syntax_kind(text: &str) -> Option<(SyntaxKind, Option<SyntaxError>)>;\r\npub fn lex_single_valid_syntax_kind(text: &str) -> Option<SyntaxKind>;\r\n\r\n// This will be removed in the next PR in favour of simlifying `SyntaxError` to `(String, TextRange)`\r\npub enum TokenizeError { /* Simple enum which reflects rustc_lexer tokenization errors */ }\r\n\r\n// this is private, but may be made public if such demand would exist in future (least privilege principle)\r\nfn lex_first_token(text: &str) -> Option<(Token, Option<SyntaxError>)>;\r\n```\n\nCo-authored-by: Veetaha <gerzoh1@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/918547dbe9a2907401102eba491ac25cebe1404d", "html_url": "https://github.com/rust-lang/rust/commit/918547dbe9a2907401102eba491ac25cebe1404d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/918547dbe9a2907401102eba491ac25cebe1404d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b090ee5a65f9630146c2842bc51fcfcc8da08da1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b090ee5a65f9630146c2842bc51fcfcc8da08da1", "html_url": "https://github.com/rust-lang/rust/commit/b090ee5a65f9630146c2842bc51fcfcc8da08da1"}, {"sha": "a3e5663ae0206270156fbeb926a174a40abbddb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3e5663ae0206270156fbeb926a174a40abbddb0", "html_url": "https://github.com/rust-lang/rust/commit/a3e5663ae0206270156fbeb926a174a40abbddb0"}], "stats": {"total": 970, "additions": 798, "deletions": 172}, "files": [{"sha": "9a84c1c8875e2afde662cf6235b797fff6922abb", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -2,7 +2,9 @@\n \n use hir::ModuleSource;\n use ra_db::{RelativePath, RelativePathBuf, SourceDatabase, SourceDatabaseExt};\n-use ra_syntax::{algo::find_node_at_offset, ast, tokenize, AstNode, SyntaxKind, SyntaxNode};\n+use ra_syntax::{\n+    algo::find_node_at_offset, ast, lex_single_valid_syntax_kind, AstNode, SyntaxKind, SyntaxNode,\n+};\n use ra_text_edit::TextEdit;\n \n use crate::{\n@@ -17,11 +19,9 @@ pub(crate) fn rename(\n     position: FilePosition,\n     new_name: &str,\n ) -> Option<RangeInfo<SourceChange>> {\n-    let tokens = tokenize(new_name);\n-    if tokens.len() != 1\n-        || (tokens[0].kind != SyntaxKind::IDENT && tokens[0].kind != SyntaxKind::UNDERSCORE)\n-    {\n-        return None;\n+    match lex_single_valid_syntax_kind(new_name)? {\n+        SyntaxKind::IDENT | SyntaxKind::UNDERSCORE => (),\n+        _ => return None,\n     }\n \n     let parse = db.parse(position.file_id);"}, {"sha": "c9f42b3ddef91400b569207f394e56c1e34e6e2b", "filename": "crates/ra_mbe/src/subtree_source.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n \n use ra_parser::{Token, TokenSource};\n-use ra_syntax::{classify_literal, SmolStr, SyntaxKind, SyntaxKind::*, T};\n+use ra_syntax::{lex_single_valid_syntax_kind, SmolStr, SyntaxKind, SyntaxKind::*, T};\n use std::cell::{Cell, Ref, RefCell};\n use tt::buffer::{Cursor, TokenBuffer};\n \n@@ -129,8 +129,9 @@ fn convert_delim(d: Option<tt::DelimiterKind>, closing: bool) -> TtToken {\n }\n \n fn convert_literal(l: &tt::Literal) -> TtToken {\n-    let kind =\n-        classify_literal(&l.text).map(|tkn| tkn.kind).unwrap_or_else(|| match l.text.as_ref() {\n+    let kind = lex_single_valid_syntax_kind(&l.text)\n+        .filter(|kind| kind.is_literal())\n+        .unwrap_or_else(|| match l.text.as_ref() {\n             \"true\" => T![true],\n             \"false\" => T![false],\n             _ => panic!(\"Fail to convert given literal {:#?}\", &l),"}, {"sha": "acf677e7d78edec061df51cf72441c9dd6196932", "filename": "crates/ra_syntax/src/algo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Falgo.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -81,7 +81,7 @@ impl TreeDiff {\n /// Specifically, returns a map whose keys are descendants of `from` and values\n /// are descendants of `to`, such that  `replace_descendants(from, map) == to`.\n ///\n-/// A trivial solution is a singletom map `{ from: to }`, but this function\n+/// A trivial solution is a singleton map `{ from: to }`, but this function\n /// tries to find a more fine-grained diff.\n pub fn diff(from: &SyntaxNode, to: &SyntaxNode) -> TreeDiff {\n     let mut buf = FxHashMap::default();"}, {"sha": "f8f4b64c1e459e97dcacbc0fcd5861527b6f2048", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -41,7 +41,9 @@ use crate::syntax_node::GreenNode;\n pub use crate::{\n     algo::InsertPosition,\n     ast::{AstNode, AstToken},\n-    parsing::{classify_literal, tokenize, Token},\n+    parsing::{\n+        lex_single_syntax_kind, lex_single_valid_syntax_kind, tokenize, Token, TokenizeError,\n+    },\n     ptr::{AstPtr, SyntaxNodePtr},\n     syntax_error::{Location, SyntaxError, SyntaxErrorKind},\n     syntax_node::{"}, {"sha": "e5eb808500de812a871b430db24d9295d50323b9", "filename": "crates/ra_syntax/src/parsing.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -7,15 +7,23 @@ mod text_tree_sink;\n mod reparsing;\n \n use crate::{syntax_node::GreenNode, SyntaxError};\n+use text_token_source::TextTokenSource;\n+use text_tree_sink::TextTreeSink;\n \n-pub use self::lexer::{classify_literal, tokenize, Token};\n+pub use lexer::*;\n \n pub(crate) use self::reparsing::incremental_reparse;\n \n pub(crate) fn parse_text(text: &str) -> (GreenNode, Vec<SyntaxError>) {\n-    let tokens = tokenize(&text);\n-    let mut token_source = text_token_source::TextTokenSource::new(text, &tokens);\n-    let mut tree_sink = text_tree_sink::TextTreeSink::new(text, &tokens);\n+    let (tokens, lexer_errors) = tokenize(&text);\n+\n+    let mut token_source = TextTokenSource::new(text, &tokens);\n+    let mut tree_sink = TextTreeSink::new(text, &tokens);\n+\n     ra_parser::parse(&mut token_source, &mut tree_sink);\n-    tree_sink.finish()\n+\n+    let (tree, mut parser_errors) = tree_sink.finish();\n+    parser_errors.extend(lexer_errors);\n+\n+    (tree, parser_errors)\n }"}, {"sha": "f889e6a1d63aca64e003c98dc73621643a46a562", "filename": "crates/ra_syntax/src/parsing/lexer.rs", "status": "modified", "additions": 248, "deletions": 76, "changes": 324, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -1,8 +1,10 @@\n-//! FIXME: write short doc here\n+//! Lexer analyzes raw input string and produces lexemes (tokens).\n+//! It is just a bridge to `rustc_lexer`.\n \n use crate::{\n+    SyntaxError, SyntaxErrorKind,\n     SyntaxKind::{self, *},\n-    TextUnit,\n+    TextRange, TextUnit,\n };\n \n /// A token of Rust source.\n@@ -14,91 +16,261 @@ pub struct Token {\n     pub len: TextUnit,\n }\n \n-fn match_literal_kind(kind: rustc_lexer::LiteralKind) -> SyntaxKind {\n-    match kind {\n-        rustc_lexer::LiteralKind::Int { .. } => INT_NUMBER,\n-        rustc_lexer::LiteralKind::Float { .. } => FLOAT_NUMBER,\n-        rustc_lexer::LiteralKind::Char { .. } => CHAR,\n-        rustc_lexer::LiteralKind::Byte { .. } => BYTE,\n-        rustc_lexer::LiteralKind::Str { .. } => STRING,\n-        rustc_lexer::LiteralKind::ByteStr { .. } => BYTE_STRING,\n-        rustc_lexer::LiteralKind::RawStr { .. } => RAW_STRING,\n-        rustc_lexer::LiteralKind::RawByteStr { .. } => RAW_BYTE_STRING,\n+/// Break a string up into its component tokens.\n+/// Beware that it checks for shebang first and its length contributes to resulting\n+/// tokens offsets.\n+pub fn tokenize(text: &str) -> (Vec<Token>, Vec<SyntaxError>) {\n+    // non-empty string is a precondtion of `rustc_lexer::strip_shebang()`.\n+    if text.is_empty() {\n+        return Default::default();\n+    }\n+\n+    let mut tokens = Vec::new();\n+    let mut errors = Vec::new();\n+\n+    let mut offset: usize = rustc_lexer::strip_shebang(text)\n+        .map(|shebang_len| {\n+            tokens.push(Token { kind: SHEBANG, len: TextUnit::from_usize(shebang_len) });\n+            shebang_len\n+        })\n+        .unwrap_or(0);\n+\n+    let text_without_shebang = &text[offset..];\n+\n+    for rustc_token in rustc_lexer::tokenize(text_without_shebang) {\n+        let token_len = TextUnit::from_usize(rustc_token.len);\n+        let token_range = TextRange::offset_len(TextUnit::from_usize(offset), token_len);\n+\n+        let (syntax_kind, error) =\n+            rustc_token_kind_to_syntax_kind(&rustc_token.kind, &text[token_range]);\n+\n+        tokens.push(Token { kind: syntax_kind, len: token_len });\n+\n+        if let Some(error) = error {\n+            errors.push(SyntaxError::new(SyntaxErrorKind::TokenizeError(error), token_range));\n+        }\n+\n+        offset += rustc_token.len;\n     }\n+\n+    (tokens, errors)\n+}\n+\n+/// Returns `SyntaxKind` and `Option<SyntaxError>` of the first token\n+/// encountered at the beginning of the string.\n+///\n+/// Returns `None` if the string contains zero *or two or more* tokens.\n+/// The token is malformed if the returned error is not `None`.\n+///\n+/// Beware that unescape errors are not checked at tokenization time.\n+pub fn lex_single_syntax_kind(text: &str) -> Option<(SyntaxKind, Option<SyntaxError>)> {\n+    lex_first_token(text)\n+        .filter(|(token, _)| token.len.to_usize() == text.len())\n+        .map(|(token, error)| (token.kind, error))\n+}\n+\n+/// The same as `lex_single_syntax_kind()` but returns only `SyntaxKind` and\n+/// returns `None` if any tokenization error occured.\n+///\n+/// Beware that unescape errors are not checked at tokenization time.\n+pub fn lex_single_valid_syntax_kind(text: &str) -> Option<SyntaxKind> {\n+    lex_first_token(text)\n+        .filter(|(token, error)| !error.is_some() && token.len.to_usize() == text.len())\n+        .map(|(token, _error)| token.kind)\n }\n \n-/// Break a string up into its component tokens\n-pub fn tokenize(text: &str) -> Vec<Token> {\n+/// Returns `SyntaxKind` and `Option<SyntaxError>` of the first token\n+/// encountered at the beginning of the string.\n+///\n+/// Returns `None` if the string contains zero tokens or if the token was parsed\n+/// with an error.\n+/// The token is malformed if the returned error is not `None`.\n+///\n+/// Beware that unescape errors are not checked at tokenization time.\n+fn lex_first_token(text: &str) -> Option<(Token, Option<SyntaxError>)> {\n+    // non-empty string is a precondtion of `rustc_lexer::first_token()`.\n     if text.is_empty() {\n-        return vec![];\n-    }\n-    let mut text = text;\n-    let mut acc = Vec::new();\n-    if let Some(len) = rustc_lexer::strip_shebang(text) {\n-        acc.push(Token { kind: SHEBANG, len: TextUnit::from_usize(len) });\n-        text = &text[len..];\n+        return None;\n     }\n-    while !text.is_empty() {\n-        let rustc_token = rustc_lexer::first_token(text);\n-        let kind = match rustc_token.kind {\n-            rustc_lexer::TokenKind::LineComment => COMMENT,\n-            rustc_lexer::TokenKind::BlockComment { .. } => COMMENT,\n-            rustc_lexer::TokenKind::Whitespace => WHITESPACE,\n-            rustc_lexer::TokenKind::Ident => {\n-                let token_text = &text[..rustc_token.len];\n+\n+    let rustc_token = rustc_lexer::first_token(text);\n+    let (syntax_kind, error) = rustc_token_kind_to_syntax_kind(&rustc_token.kind, text);\n+\n+    let token = Token { kind: syntax_kind, len: TextUnit::from_usize(rustc_token.len) };\n+    let error = error.map(|error| {\n+        SyntaxError::new(\n+            SyntaxErrorKind::TokenizeError(error),\n+            TextRange::from_to(TextUnit::from(0), TextUnit::of_str(text)),\n+        )\n+    });\n+\n+    Some((token, error))\n+}\n+\n+// FIXME: simplify TokenizeError to `SyntaxError(String, TextRange)` as per @matklad advice:\n+// https://github.com/rust-analyzer/rust-analyzer/pull/2911/files#r371175067\n+\n+/// Describes the values of `SyntaxErrorKind::TokenizeError` enum variant.\n+/// It describes all the types of errors that may happen during the tokenization\n+/// of Rust source.\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub enum TokenizeError {\n+    /// Base prefix was provided, but there were no digits\n+    /// after it, e.g. `0x`, `0b`.\n+    EmptyInt,\n+    /// Float exponent lacks digits e.g. `12.34e+`, `12.3E+`, `12e-`, `1_E-`,\n+    EmptyExponent,\n+\n+    /// Block comment lacks trailing delimiter `*/`\n+    UnterminatedBlockComment,\n+    /// Character literal lacks trailing delimiter `'`\n+    UnterminatedChar,\n+    /// Characterish byte literal lacks trailing delimiter `'`\n+    UnterminatedByte,\n+    /// String literal lacks trailing delimiter `\"`\n+    UnterminatedString,\n+    /// Byte string literal lacks trailing delimiter `\"`\n+    UnterminatedByteString,\n+    /// Raw literal lacks trailing delimiter e.g. `\"##`\n+    UnterminatedRawString,\n+    /// Raw byte string literal lacks trailing delimiter e.g. `\"##`\n+    UnterminatedRawByteString,\n+\n+    /// Raw string lacks a quote after the pound characters e.g. `r###`\n+    UnstartedRawString,\n+    /// Raw byte string lacks a quote after the pound characters e.g. `br###`\n+    UnstartedRawByteString,\n+\n+    /// Lifetime starts with a number e.g. `'4ever`\n+    LifetimeStartsWithNumber,\n+}\n+\n+fn rustc_token_kind_to_syntax_kind(\n+    rustc_token_kind: &rustc_lexer::TokenKind,\n+    token_text: &str,\n+) -> (SyntaxKind, Option<TokenizeError>) {\n+    // A note on an intended tradeoff:\n+    // We drop some useful infromation here (see patterns with double dots `..`)\n+    // Storing that info in `SyntaxKind` is not possible due to its layout requirements of\n+    // being `u16` that come from `rowan::SyntaxKind`.\n+\n+    let syntax_kind = {\n+        use rustc_lexer::TokenKind as TK;\n+        use TokenizeError as TE;\n+\n+        match rustc_token_kind {\n+            TK::LineComment => COMMENT,\n+\n+            TK::BlockComment { terminated: true } => COMMENT,\n+            TK::BlockComment { terminated: false } => {\n+                return (COMMENT, Some(TE::UnterminatedBlockComment));\n+            }\n+\n+            TK::Whitespace => WHITESPACE,\n+\n+            TK::Ident => {\n                 if token_text == \"_\" {\n                     UNDERSCORE\n                 } else {\n-                    SyntaxKind::from_keyword(&text[..rustc_token.len]).unwrap_or(IDENT)\n+                    SyntaxKind::from_keyword(token_text).unwrap_or(IDENT)\n                 }\n             }\n-            rustc_lexer::TokenKind::RawIdent => IDENT,\n-            rustc_lexer::TokenKind::Literal { kind, .. } => match_literal_kind(kind),\n-            rustc_lexer::TokenKind::Lifetime { .. } => LIFETIME,\n-            rustc_lexer::TokenKind::Semi => SEMI,\n-            rustc_lexer::TokenKind::Comma => COMMA,\n-            rustc_lexer::TokenKind::Dot => DOT,\n-            rustc_lexer::TokenKind::OpenParen => L_PAREN,\n-            rustc_lexer::TokenKind::CloseParen => R_PAREN,\n-            rustc_lexer::TokenKind::OpenBrace => L_CURLY,\n-            rustc_lexer::TokenKind::CloseBrace => R_CURLY,\n-            rustc_lexer::TokenKind::OpenBracket => L_BRACK,\n-            rustc_lexer::TokenKind::CloseBracket => R_BRACK,\n-            rustc_lexer::TokenKind::At => AT,\n-            rustc_lexer::TokenKind::Pound => POUND,\n-            rustc_lexer::TokenKind::Tilde => TILDE,\n-            rustc_lexer::TokenKind::Question => QUESTION,\n-            rustc_lexer::TokenKind::Colon => COLON,\n-            rustc_lexer::TokenKind::Dollar => DOLLAR,\n-            rustc_lexer::TokenKind::Eq => EQ,\n-            rustc_lexer::TokenKind::Not => EXCL,\n-            rustc_lexer::TokenKind::Lt => L_ANGLE,\n-            rustc_lexer::TokenKind::Gt => R_ANGLE,\n-            rustc_lexer::TokenKind::Minus => MINUS,\n-            rustc_lexer::TokenKind::And => AMP,\n-            rustc_lexer::TokenKind::Or => PIPE,\n-            rustc_lexer::TokenKind::Plus => PLUS,\n-            rustc_lexer::TokenKind::Star => STAR,\n-            rustc_lexer::TokenKind::Slash => SLASH,\n-            rustc_lexer::TokenKind::Caret => CARET,\n-            rustc_lexer::TokenKind::Percent => PERCENT,\n-            rustc_lexer::TokenKind::Unknown => ERROR,\n+\n+            TK::RawIdent => IDENT,\n+            TK::Literal { kind, .. } => return match_literal_kind(&kind),\n+\n+            TK::Lifetime { starts_with_number: false } => LIFETIME,\n+            TK::Lifetime { starts_with_number: true } => {\n+                return (LIFETIME, Some(TE::LifetimeStartsWithNumber))\n+            }\n+\n+            TK::Semi => SEMI,\n+            TK::Comma => COMMA,\n+            TK::Dot => DOT,\n+            TK::OpenParen => L_PAREN,\n+            TK::CloseParen => R_PAREN,\n+            TK::OpenBrace => L_CURLY,\n+            TK::CloseBrace => R_CURLY,\n+            TK::OpenBracket => L_BRACK,\n+            TK::CloseBracket => R_BRACK,\n+            TK::At => AT,\n+            TK::Pound => POUND,\n+            TK::Tilde => TILDE,\n+            TK::Question => QUESTION,\n+            TK::Colon => COLON,\n+            TK::Dollar => DOLLAR,\n+            TK::Eq => EQ,\n+            TK::Not => EXCL,\n+            TK::Lt => L_ANGLE,\n+            TK::Gt => R_ANGLE,\n+            TK::Minus => MINUS,\n+            TK::And => AMP,\n+            TK::Or => PIPE,\n+            TK::Plus => PLUS,\n+            TK::Star => STAR,\n+            TK::Slash => SLASH,\n+            TK::Caret => CARET,\n+            TK::Percent => PERCENT,\n+            TK::Unknown => ERROR,\n+        }\n+    };\n+\n+    return (syntax_kind, None);\n+\n+    fn match_literal_kind(kind: &rustc_lexer::LiteralKind) -> (SyntaxKind, Option<TokenizeError>) {\n+        use rustc_lexer::LiteralKind as LK;\n+        use TokenizeError as TE;\n+\n+        #[rustfmt::skip]\n+        let syntax_kind = match *kind {\n+            LK::Int { empty_int: false, .. } => INT_NUMBER,\n+            LK::Int { empty_int: true, .. } => {\n+                return (INT_NUMBER, Some(TE::EmptyInt))\n+            }\n+\n+            LK::Float { empty_exponent: false, .. } => FLOAT_NUMBER,\n+            LK::Float { empty_exponent: true, .. } => {\n+                return (FLOAT_NUMBER, Some(TE::EmptyExponent))\n+            }\n+\n+            LK::Char { terminated: true } => CHAR,\n+            LK::Char { terminated: false } => {\n+                return (CHAR, Some(TE::UnterminatedChar))\n+            }\n+\n+            LK::Byte { terminated: true } => BYTE,\n+            LK::Byte { terminated: false } => {\n+                return (BYTE, Some(TE::UnterminatedByte))\n+            }\n+\n+            LK::Str { terminated: true } => STRING,\n+            LK::Str { terminated: false } => {\n+                return (STRING, Some(TE::UnterminatedString))\n+            }\n+\n+\n+            LK::ByteStr { terminated: true } => BYTE_STRING,\n+            LK::ByteStr { terminated: false } => {\n+                return (BYTE_STRING, Some(TE::UnterminatedByteString))\n+            }\n+\n+            LK::RawStr { started: true, terminated: true, .. } => RAW_STRING,\n+            LK::RawStr { started: true, terminated: false, .. } => {\n+                return (RAW_STRING, Some(TE::UnterminatedRawString))\n+            }\n+            LK::RawStr { started: false, .. } => {\n+                return (RAW_STRING, Some(TE::UnstartedRawString))\n+            }\n+\n+            LK::RawByteStr { started: true, terminated: true, .. } => RAW_BYTE_STRING,\n+            LK::RawByteStr { started: true, terminated: false, .. } => {\n+                return (RAW_BYTE_STRING, Some(TE::UnterminatedRawByteString))\n+            }\n+            LK::RawByteStr { started: false, .. } => {\n+                return (RAW_BYTE_STRING, Some(TE::UnstartedRawByteString))\n+            }\n         };\n-        let token = Token { kind, len: TextUnit::from_usize(rustc_token.len) };\n-        acc.push(token);\n-        text = &text[rustc_token.len..];\n-    }\n-    acc\n-}\n \n-pub fn classify_literal(text: &str) -> Option<Token> {\n-    let t = rustc_lexer::first_token(text);\n-    if t.len != text.len() {\n-        return None;\n+        (syntax_kind, None)\n     }\n-    let kind = match t.kind {\n-        rustc_lexer::TokenKind::Literal { kind, .. } => match_literal_kind(kind),\n-        _ => return None,\n-    };\n-    Some(Token { kind, len: TextUnit::from_usize(t.len) })\n }"}, {"sha": "a86da067545867b05f491e2d72b8225d79459a91", "filename": "crates/ra_syntax/src/parsing/reparsing.rs", "status": "modified", "additions": 33, "deletions": 22, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -12,7 +12,7 @@ use ra_text_edit::AtomTextEdit;\n use crate::{\n     algo,\n     parsing::{\n-        lexer::{tokenize, Token},\n+        lexer::{lex_single_syntax_kind, tokenize, Token},\n         text_token_source::TextTokenSource,\n         text_tree_sink::TextTreeSink,\n     },\n@@ -41,37 +41,42 @@ fn reparse_token<'node>(\n     root: &'node SyntaxNode,\n     edit: &AtomTextEdit,\n ) -> Option<(GreenNode, TextRange)> {\n-    let token = algo::find_covering_element(root, edit.delete).as_token()?.clone();\n-    match token.kind() {\n+    let prev_token = algo::find_covering_element(root, edit.delete).as_token()?.clone();\n+    let prev_token_kind = prev_token.kind();\n+    match prev_token_kind {\n         WHITESPACE | COMMENT | IDENT | STRING | RAW_STRING => {\n-            if token.kind() == WHITESPACE || token.kind() == COMMENT {\n+            if prev_token_kind == WHITESPACE || prev_token_kind == COMMENT {\n                 // removing a new line may extends previous token\n-                if token.text().to_string()[edit.delete - token.text_range().start()].contains('\\n')\n-                {\n+                let deleted_range = edit.delete - prev_token.text_range().start();\n+                if prev_token.text()[deleted_range].contains('\\n') {\n                     return None;\n                 }\n             }\n \n-            let text = get_text_after_edit(token.clone().into(), &edit);\n-            let lex_tokens = tokenize(&text);\n-            let lex_token = match lex_tokens[..] {\n-                [lex_token] if lex_token.kind == token.kind() => lex_token,\n-                _ => return None,\n-            };\n+            let mut new_text = get_text_after_edit(prev_token.clone().into(), &edit);\n+            let (new_token_kind, _error) = lex_single_syntax_kind(&new_text)?;\n \n-            if lex_token.kind == IDENT && is_contextual_kw(&text) {\n+            if new_token_kind != prev_token_kind\n+                || (new_token_kind == IDENT && is_contextual_kw(&new_text))\n+            {\n                 return None;\n             }\n \n-            if let Some(next_char) = root.text().char_at(token.text_range().end()) {\n-                let tokens_with_next_char = tokenize(&format!(\"{}{}\", text, next_char));\n-                if tokens_with_next_char.len() == 1 {\n+            // Check that edited token is not a part of the bigger token.\n+            // E.g. if for source code `bruh\"str\"` the user removed `ruh`, then\n+            // `b` no longer remains an identifier, but becomes a part of byte string literal\n+            if let Some(next_char) = root.text().char_at(prev_token.text_range().end()) {\n+                new_text.push(next_char);\n+                let token_with_next_char = lex_single_syntax_kind(&new_text);\n+                if let Some((_kind, _error)) = token_with_next_char {\n                     return None;\n                 }\n+                new_text.pop();\n             }\n \n-            let new_token = GreenToken::new(rowan::SyntaxKind(token.kind().into()), text.into());\n-            Some((token.replace_with(new_token), token.text_range()))\n+            let new_token =\n+                GreenToken::new(rowan::SyntaxKind(prev_token_kind.into()), new_text.into());\n+            Some((prev_token.replace_with(new_token), prev_token.text_range()))\n         }\n         _ => None,\n     }\n@@ -83,20 +88,26 @@ fn reparse_block<'node>(\n ) -> Option<(GreenNode, Vec<SyntaxError>, TextRange)> {\n     let (node, reparser) = find_reparsable_node(root, edit.delete)?;\n     let text = get_text_after_edit(node.clone().into(), &edit);\n-    let tokens = tokenize(&text);\n+\n+    let (tokens, new_lexer_errors) = tokenize(&text);\n     if !is_balanced(&tokens) {\n         return None;\n     }\n+\n     let mut token_source = TextTokenSource::new(&text, &tokens);\n     let mut tree_sink = TextTreeSink::new(&text, &tokens);\n     reparser.parse(&mut token_source, &mut tree_sink);\n-    let (green, new_errors) = tree_sink.finish();\n-    Some((node.replace_with(green), new_errors, node.text_range()))\n+\n+    let (green, mut new_parser_errors) = tree_sink.finish();\n+    new_parser_errors.extend(new_lexer_errors);\n+\n+    Some((node.replace_with(green), new_parser_errors, node.text_range()))\n }\n \n fn get_text_after_edit(element: SyntaxElement, edit: &AtomTextEdit) -> String {\n     let edit =\n         AtomTextEdit::replace(edit.delete - element.text_range().start(), edit.insert.clone());\n+\n     let text = match element {\n         NodeOrToken::Token(token) => token.text().to_string(),\n         NodeOrToken::Node(node) => node.text().to_string(),\n@@ -113,6 +124,7 @@ fn is_contextual_kw(text: &str) -> bool {\n \n fn find_reparsable_node(node: &SyntaxNode, range: TextRange) -> Option<(SyntaxNode, Reparser)> {\n     let node = algo::find_covering_element(node, range);\n+\n     let mut ancestors = match node {\n         NodeOrToken::Token(it) => it.parent().ancestors(),\n         NodeOrToken::Node(it) => it.ancestors(),\n@@ -182,7 +194,6 @@ mod tests {\n         let fully_reparsed = SourceFile::parse(&after);\n         let incrementally_reparsed: Parse<SourceFile> = {\n             let f = SourceFile::parse(&before);\n-            let edit = AtomTextEdit { delete: range, insert: replace_with.to_string() };\n             let (green, new_errors, range) =\n                 incremental_reparse(f.tree().syntax(), &edit, f.errors.to_vec()).unwrap();\n             assert_eq!(range.len(), reparsed_len.into(), \"reparsed fragment has wrong length\");"}, {"sha": "dd202601d9ed631c0a55cf924165c05a0d677081", "filename": "crates/ra_syntax/src/parsing/text_tree_sink.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -92,8 +92,8 @@ impl<'a> TreeSink for TextTreeSink<'a> {\n }\n \n impl<'a> TextTreeSink<'a> {\n-    pub(super) fn new(text: &'a str, tokens: &'a [Token]) -> TextTreeSink<'a> {\n-        TextTreeSink {\n+    pub(super) fn new(text: &'a str, tokens: &'a [Token]) -> Self {\n+        Self {\n             text,\n             tokens,\n             text_pos: 0.into(),"}, {"sha": "7f9d366184b044430de3c872213035a0939758da", "filename": "crates/ra_syntax/src/syntax_error.rs", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -4,14 +4,18 @@ use std::fmt;\n \n use ra_parser::ParseError;\n \n-use crate::{validation::EscapeError, TextRange, TextUnit};\n+use crate::{validation::EscapeError, TextRange, TextUnit, TokenizeError};\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct SyntaxError {\n     kind: SyntaxErrorKind,\n     location: Location,\n }\n \n+// FIXME: Location should be just `Location(TextRange)`\n+// TextUnit enum member just unnecessarily compicates things,\n+// we should'n treat it specially, it just as a `TextRange { start: x, end: x + 1 }`\n+// see `location_to_range()` in ra_ide/src/diagnostics\n #[derive(Clone, PartialEq, Eq, Hash)]\n pub enum Location {\n     Offset(TextUnit),\n@@ -67,6 +71,10 @@ impl SyntaxError {\n \n         self\n     }\n+\n+    pub fn debug_dump(&self, acc: &mut impl fmt::Write) {\n+        writeln!(acc, \"error {:?}: {}\", self.location(), self.kind()).unwrap();\n+    }\n }\n \n impl fmt::Display for SyntaxError {\n@@ -79,6 +87,10 @@ impl fmt::Display for SyntaxError {\n pub enum SyntaxErrorKind {\n     ParseError(ParseError),\n     EscapeError(EscapeError),\n+    TokenizeError(TokenizeError),\n+    // FIXME: the obvious pattern of this enum dictates that the following enum variants\n+    // should be wrapped into something like `SemmanticError(SemmanticError)`\n+    // or `ValidateError(ValidateError)` or `SemmanticValidateError(...)`\n     InvalidBlockAttr,\n     InvalidMatchInnerAttr,\n     InvalidTupleIndexFormat,\n@@ -101,6 +113,7 @@ impl fmt::Display for SyntaxErrorKind {\n             }\n             ParseError(msg) => write!(f, \"{}\", msg.0),\n             EscapeError(err) => write!(f, \"{}\", err),\n+            TokenizeError(err) => write!(f, \"{}\", err),\n             VisibilityNotAllowed => {\n                 write!(f, \"unnecessary visibility qualifier\")\n             }\n@@ -111,6 +124,51 @@ impl fmt::Display for SyntaxErrorKind {\n     }\n }\n \n+impl fmt::Display for TokenizeError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        #[rustfmt::skip]\n+        let msg = match self {\n+            TokenizeError::EmptyInt => {\n+                \"Missing digits after the integer base prefix\"\n+            }\n+            TokenizeError::EmptyExponent => {\n+                \"Missing digits after the exponent symbol\"\n+            }\n+            TokenizeError::UnterminatedBlockComment => {\n+                \"Missing trailing `*/` symbols to terminate the block comment\"\n+            }\n+            TokenizeError::UnterminatedChar => {\n+                \"Missing trailing `'` symbol to terminate the character literal\"\n+            }\n+            TokenizeError::UnterminatedByte => {\n+                \"Missing trailing `'` symbol to terminate the byte literal\"\n+            }\n+            TokenizeError::UnterminatedString => {\n+                \"Missing trailing `\\\"` symbol to terminate the string literal\"\n+            }\n+            TokenizeError::UnterminatedByteString => {\n+                \"Missing trailing `\\\"` symbol to terminate the byte string literal\"\n+            }\n+            TokenizeError::UnterminatedRawString => {\n+                \"Missing trailing `\\\"` with `#` symbols to terminate the raw string literal\"\n+            }\n+            TokenizeError::UnterminatedRawByteString => {\n+                \"Missing trailing `\\\"` with `#` symbols to terminate the raw byte string literal\"\n+            }\n+            TokenizeError::UnstartedRawString => {\n+                \"Missing `\\\"` symbol after `#` symbols to begin the raw string literal\"\n+            }\n+            TokenizeError::UnstartedRawByteString => {\n+                \"Missing `\\\"` symbol after `#` symbols to begin the raw byte string literal\"\n+            }\n+            TokenizeError::LifetimeStartsWithNumber => {\n+                \"Lifetime name cannot start with a number\"\n+            }\n+        };\n+        write!(f, \"{}\", msg)\n+    }\n+}\n+\n impl fmt::Display for EscapeError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let msg = match self {"}, {"sha": "7c2b18af34e56e46122331340085171f21f8aea2", "filename": "crates/ra_syntax/src/syntax_node.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -4,7 +4,7 @@\n //! `SyntaxNode`, and a basic traversal API (parent, children, siblings).\n //!\n //! The *real* implementation is in the (language-agnostic) `rowan` crate, this\n-//! modules just wraps its API.\n+//! module just wraps its API.\n \n use ra_parser::ParseError;\n use rowan::{GreenNodeBuilder, Language};\n@@ -38,17 +38,12 @@ pub type SyntaxElementChildren = rowan::SyntaxElementChildren<RustLanguage>;\n \n pub use rowan::{Direction, NodeOrToken};\n \n+#[derive(Default)]\n pub struct SyntaxTreeBuilder {\n     errors: Vec<SyntaxError>,\n     inner: GreenNodeBuilder<'static>,\n }\n \n-impl Default for SyntaxTreeBuilder {\n-    fn default() -> SyntaxTreeBuilder {\n-        SyntaxTreeBuilder { errors: Vec::new(), inner: GreenNodeBuilder::new() }\n-    }\n-}\n-\n impl SyntaxTreeBuilder {\n     pub(crate) fn finish_raw(self) -> (GreenNode, Vec<SyntaxError>) {\n         let green = self.inner.finish();"}, {"sha": "fb22b9e54c4739ea7c9f67ee867f3c79def6fc09", "filename": "crates/ra_syntax/src/tests.rs", "status": "modified", "additions": 58, "deletions": 21, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Ftests.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -1,18 +1,28 @@\n use std::{\n     fmt::Write,\n-    path::{Component, PathBuf},\n+    path::{Component, Path, PathBuf},\n };\n \n use test_utils::{collect_tests, dir_tests, project_dir, read_text};\n \n-use crate::{fuzz, SourceFile};\n+use crate::{fuzz, tokenize, Location, SourceFile, SyntaxError, TextRange, Token};\n \n #[test]\n fn lexer_tests() {\n-    dir_tests(&test_data_dir(), &[\"lexer\"], |text, _| {\n-        let tokens = crate::tokenize(text);\n-        dump_tokens(&tokens, text)\n-    })\n+    // FIXME:\n+    // * Add tests for unicode escapes in byte-character and [raw]-byte-string literals\n+    // * Add tests for unescape errors\n+\n+    dir_tests(&test_data_dir(), &[\"lexer/ok\"], |text, path| {\n+        let (tokens, errors) = tokenize(text);\n+        assert_errors_are_absent(&errors, path);\n+        dump_tokens_and_errors(&tokens, &errors, text)\n+    });\n+    dir_tests(&test_data_dir(), &[\"lexer/err\"], |text, path| {\n+        let (tokens, errors) = tokenize(text);\n+        assert_errors_are_present(&errors, path);\n+        dump_tokens_and_errors(&tokens, &errors, text)\n+    });\n }\n \n #[test]\n@@ -32,18 +42,13 @@ fn parser_tests() {\n     dir_tests(&test_data_dir(), &[\"parser/inline/ok\", \"parser/ok\"], |text, path| {\n         let parse = SourceFile::parse(text);\n         let errors = parse.errors();\n-        assert_eq!(\n-            errors,\n-            &[] as &[crate::SyntaxError],\n-            \"There should be no errors in the file {:?}\",\n-            path.display(),\n-        );\n+        assert_errors_are_absent(&errors, path);\n         parse.debug_dump()\n     });\n     dir_tests(&test_data_dir(), &[\"parser/err\", \"parser/inline/err\"], |text, path| {\n         let parse = SourceFile::parse(text);\n         let errors = parse.errors();\n-        assert!(!errors.is_empty(), \"There should be errors in the file {:?}\", path.display());\n+        assert_errors_are_present(&errors, path);\n         parse.debug_dump()\n     });\n }\n@@ -75,7 +80,7 @@ fn self_hosting_parsing() {\n         .into_iter()\n         .filter_entry(|entry| {\n             !entry.path().components().any(|component| {\n-                // Get all files which are not in the crates/ra_syntax/tests/data folder\n+                // Get all files which are not in the crates/ra_syntax/test_data folder\n                 component == Component::Normal(OsStr::new(\"test_data\"))\n             })\n         })\n@@ -101,15 +106,47 @@ fn test_data_dir() -> PathBuf {\n     project_dir().join(\"crates/ra_syntax/test_data\")\n }\n \n-fn dump_tokens(tokens: &[crate::Token], text: &str) -> String {\n+fn assert_errors_are_present(errors: &[SyntaxError], path: &Path) {\n+    assert!(!errors.is_empty(), \"There should be errors in the file {:?}\", path.display());\n+}\n+fn assert_errors_are_absent(errors: &[SyntaxError], path: &Path) {\n+    assert_eq!(\n+        errors,\n+        &[] as &[SyntaxError],\n+        \"There should be no errors in the file {:?}\",\n+        path.display(),\n+    );\n+}\n+\n+fn dump_tokens_and_errors(tokens: &[Token], errors: &[SyntaxError], text: &str) -> String {\n     let mut acc = String::new();\n     let mut offset = 0;\n     for token in tokens {\n-        let len: u32 = token.len.into();\n-        let len = len as usize;\n-        let token_text = &text[offset..offset + len];\n-        offset += len;\n-        write!(acc, \"{:?} {} {:?}\\n\", token.kind, token.len, token_text).unwrap()\n+        let token_len = token.len.to_usize();\n+        let token_text = &text[offset..offset + token_len];\n+        offset += token_len;\n+        writeln!(acc, \"{:?} {} {:?}\", token.kind, token_len, token_text).unwrap();\n+    }\n+    for err in errors {\n+        let err_range = location_to_range(err.location());\n+        writeln!(\n+            acc,\n+            \"> error{:?} token({:?}) msg({})\",\n+            err.location(),\n+            &text[err_range],\n+            err.kind()\n+        )\n+        .unwrap();\n+    }\n+    return acc;\n+\n+    // FIXME: copy-pasted this from `ra_ide/src/diagnostics.rs`\n+    // `Location` will be refactored soon in new PR, see todos here:\n+    // https://github.com/rust-analyzer/rust-analyzer/issues/223\n+    fn location_to_range(location: Location) -> TextRange {\n+        match location {\n+            Location::Offset(offset) => TextRange::offset_len(offset, 1.into()),\n+            Location::Range(range) => range,\n+        }\n     }\n-    acc\n }"}, {"sha": "8a5f0e4b75510f8b29ed5b0c9cf4320cef5a8781", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -94,6 +94,12 @@ impl From<rustc_lexer::unescape::EscapeError> for SyntaxErrorKind {\n }\n \n pub(crate) fn validate(root: &SyntaxNode) -> Vec<SyntaxError> {\n+    // FIXME:\n+    // * Add validation of character literal containing only a single char\n+    // * Add validation of `crate` keyword not appearing in the middle of the symbol path\n+    // * Add validation of doc comments are being attached to nodes\n+    // * Remove validation of unterminated literals (it is already implemented in `tokenize()`)\n+\n     let mut errors = Vec::new();\n     for node in root.descendants() {\n         match_ast! {"}, {"sha": "71bdd1f9c329f17512756af5d49e3958e8c0d44f", "filename": "crates/ra_syntax/test_data/lexer/0010_comments.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b090ee5a65f9630146c2842bc51fcfcc8da08da1/crates%2Fra_syntax%2Ftest_data%2Flexer%2F0010_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b090ee5a65f9630146c2842bc51fcfcc8da08da1/crates%2Fra_syntax%2Ftest_data%2Flexer%2F0010_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2F0010_comments.rs?ref=b090ee5a65f9630146c2842bc51fcfcc8da08da1", "patch": "@@ -1,3 +0,0 @@\n-#!/usr/bin/env bash\n-// hello\n-//! World"}, {"sha": "3c997de3f1d7fd37c432f308b76348b22e5b2dcc", "filename": "crates/ra_syntax/test_data/lexer/0010_comments.txt", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b090ee5a65f9630146c2842bc51fcfcc8da08da1/crates%2Fra_syntax%2Ftest_data%2Flexer%2F0010_comments.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b090ee5a65f9630146c2842bc51fcfcc8da08da1/crates%2Fra_syntax%2Ftest_data%2Flexer%2F0010_comments.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2F0010_comments.txt?ref=b090ee5a65f9630146c2842bc51fcfcc8da08da1", "patch": "@@ -1,6 +0,0 @@\n-SHEBANG 19 \"#!/usr/bin/env bash\"\n-WHITESPACE 1 \"\\n\"\n-COMMENT 8 \"// hello\"\n-WHITESPACE 1 \"\\n\"\n-COMMENT 9 \"//! World\"\n-WHITESPACE 1 \"\\n\""}, {"sha": "9c000707726fce782f96c9c7f5e1de51605a0e16", "filename": "crates/ra_syntax/test_data/lexer/0014_unclosed_char.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b090ee5a65f9630146c2842bc51fcfcc8da08da1/crates%2Fra_syntax%2Ftest_data%2Flexer%2F0014_unclosed_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b090ee5a65f9630146c2842bc51fcfcc8da08da1/crates%2Fra_syntax%2Ftest_data%2Flexer%2F0014_unclosed_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2F0014_unclosed_char.rs?ref=b090ee5a65f9630146c2842bc51fcfcc8da08da1", "patch": "@@ -1 +0,0 @@\n-'1\n\\ No newline at end of file"}, {"sha": "737a300ee788e05525b67a01cfc1b3e885df54c4", "filename": "crates/ra_syntax/test_data/lexer/0014_unclosed_char.txt", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b090ee5a65f9630146c2842bc51fcfcc8da08da1/crates%2Fra_syntax%2Ftest_data%2Flexer%2F0014_unclosed_char.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b090ee5a65f9630146c2842bc51fcfcc8da08da1/crates%2Fra_syntax%2Ftest_data%2Flexer%2F0014_unclosed_char.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2F0014_unclosed_char.txt?ref=b090ee5a65f9630146c2842bc51fcfcc8da08da1", "patch": "@@ -1 +0,0 @@\n-LIFETIME 2 \"\\'1\""}, {"sha": "d771a26d49994fadee2004ba0e456fa5ab8dc1f0", "filename": "crates/ra_syntax/test_data/lexer/0015_unclosed_string.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b090ee5a65f9630146c2842bc51fcfcc8da08da1/crates%2Fra_syntax%2Ftest_data%2Flexer%2F0015_unclosed_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b090ee5a65f9630146c2842bc51fcfcc8da08da1/crates%2Fra_syntax%2Ftest_data%2Flexer%2F0015_unclosed_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2F0015_unclosed_string.rs?ref=b090ee5a65f9630146c2842bc51fcfcc8da08da1", "patch": "@@ -1 +0,0 @@\n-\"hello"}, {"sha": "728c40b6624daa23237e2d7814e0cd438e4fbcc0", "filename": "crates/ra_syntax/test_data/lexer/0015_unclosed_string.txt", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b090ee5a65f9630146c2842bc51fcfcc8da08da1/crates%2Fra_syntax%2Ftest_data%2Flexer%2F0015_unclosed_string.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b090ee5a65f9630146c2842bc51fcfcc8da08da1/crates%2Fra_syntax%2Ftest_data%2Flexer%2F0015_unclosed_string.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2F0015_unclosed_string.txt?ref=b090ee5a65f9630146c2842bc51fcfcc8da08da1", "patch": "@@ -1 +0,0 @@\n-STRING 7 \"\\\"hello\\n\""}, {"sha": "ad2823b48f78a0667817300ddcac54c2f6c385e9", "filename": "crates/ra_syntax/test_data/lexer/err/0001_unclosed_char_at_eof.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0001_unclosed_char_at_eof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0001_unclosed_char_at_eof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0001_unclosed_char_at_eof.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+'\n\\ No newline at end of file"}, {"sha": "f24e1fd32a5f37f9f078f6268e23078618a61b6a", "filename": "crates/ra_syntax/test_data/lexer/err/0001_unclosed_char_at_eof.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0001_unclosed_char_at_eof.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0001_unclosed_char_at_eof.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0001_unclosed_char_at_eof.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+CHAR 1 \"\\'\"\n+> error[0; 1) token(\"\\'\") msg(Missing trailing `'` symbol to terminate the character literal)"}, {"sha": "e264a4152801b9c0475cc725983039da19f15b2a", "filename": "crates/ra_syntax/test_data/lexer/err/0002_unclosed_char_with_ferris.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0002_unclosed_char_with_ferris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0002_unclosed_char_with_ferris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0002_unclosed_char_with_ferris.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+'\ud83e\udd80\n\\ No newline at end of file"}, {"sha": "bd08cfc448981edd652db79e3c2c13beb7a31566", "filename": "crates/ra_syntax/test_data/lexer/err/0002_unclosed_char_with_ferris.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0002_unclosed_char_with_ferris.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0002_unclosed_char_with_ferris.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0002_unclosed_char_with_ferris.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+CHAR 5 \"\\'\ud83e\udd80\"\n+> error[0; 5) token(\"\\'\ud83e\udd80\") msg(Missing trailing `'` symbol to terminate the character literal)"}, {"sha": "cf74b4dad3b89ec75d72ff183be8e1ed7bc2bee6", "filename": "crates/ra_syntax/test_data/lexer/err/0003_unclosed_char_with_ascii_escape.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0003_unclosed_char_with_ascii_escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0003_unclosed_char_with_ascii_escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0003_unclosed_char_with_ascii_escape.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+'\\x7f\n\\ No newline at end of file"}, {"sha": "0ee22912d14845c616fb9096436da3c91201fe73", "filename": "crates/ra_syntax/test_data/lexer/err/0003_unclosed_char_with_ascii_escape.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0003_unclosed_char_with_ascii_escape.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0003_unclosed_char_with_ascii_escape.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0003_unclosed_char_with_ascii_escape.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+CHAR 5 \"\\'\\\\x7f\"\n+> error[0; 5) token(\"\\'\\\\x7f\") msg(Missing trailing `'` symbol to terminate the character literal)"}, {"sha": "50be91f68524873a1aafa2cdf67cbc7a62cc31a6", "filename": "crates/ra_syntax/test_data/lexer/err/0004_unclosed_char_with_unicode_escape.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0004_unclosed_char_with_unicode_escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0004_unclosed_char_with_unicode_escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0004_unclosed_char_with_unicode_escape.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+'\\u{20AA}\n\\ No newline at end of file"}, {"sha": "96fac42ce79a29783b4e599f419a43a3d8417afb", "filename": "crates/ra_syntax/test_data/lexer/err/0004_unclosed_char_with_unicode_escape.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0004_unclosed_char_with_unicode_escape.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0004_unclosed_char_with_unicode_escape.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0004_unclosed_char_with_unicode_escape.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+CHAR 9 \"\\'\\\\u{20AA}\"\n+> error[0; 9) token(\"\\'\\\\u{20AA}\") msg(Missing trailing `'` symbol to terminate the character literal)"}, {"sha": "309ecfe4786464210a9aaaf78df6d9d10ae72537", "filename": "crates/ra_syntax/test_data/lexer/err/0005_unclosed_char_with_space.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0005_unclosed_char_with_space.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0005_unclosed_char_with_space.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0005_unclosed_char_with_space.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+' \n\\ No newline at end of file"}, {"sha": "2059f3f81fc7f197b8968294fc1b1cf5bf64004c", "filename": "crates/ra_syntax/test_data/lexer/err/0005_unclosed_char_with_space.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0005_unclosed_char_with_space.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0005_unclosed_char_with_space.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0005_unclosed_char_with_space.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+CHAR 2 \"\\' \"\n+> error[0; 2) token(\"\\' \") msg(Missing trailing `'` symbol to terminate the character literal)"}, {"sha": "6ba258b10932b6a2147c88b623cffa331623b96b", "filename": "crates/ra_syntax/test_data/lexer/err/0006_unclosed_char_with_slash.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0006_unclosed_char_with_slash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0006_unclosed_char_with_slash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0006_unclosed_char_with_slash.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+'\\\n\\ No newline at end of file"}, {"sha": "7dd376e5971f2a64409325ae8679c045dca9c7df", "filename": "crates/ra_syntax/test_data/lexer/err/0006_unclosed_char_with_slash.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0006_unclosed_char_with_slash.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0006_unclosed_char_with_slash.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0006_unclosed_char_with_slash.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+CHAR 2 \"\\'\\\\\"\n+> error[0; 2) token(\"\\'\\\\\") msg(Missing trailing `'` symbol to terminate the character literal)"}, {"sha": "78bef7e3eb291e0f0826ee0455cbce8dada6990c", "filename": "crates/ra_syntax/test_data/lexer/err/0007_unclosed_char_with_slash_n.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0007_unclosed_char_with_slash_n.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0007_unclosed_char_with_slash_n.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0007_unclosed_char_with_slash_n.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+'\\n\n\\ No newline at end of file"}, {"sha": "ef7a0a147d014dcababb91749382132367efff3f", "filename": "crates/ra_syntax/test_data/lexer/err/0007_unclosed_char_with_slash_n.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0007_unclosed_char_with_slash_n.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0007_unclosed_char_with_slash_n.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0007_unclosed_char_with_slash_n.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+CHAR 3 \"\\'\\\\n\"\n+> error[0; 3) token(\"\\'\\\\n\") msg(Missing trailing `'` symbol to terminate the character literal)"}, {"sha": "a0e722065bd7004922c59f030e495dbd27baafd4", "filename": "crates/ra_syntax/test_data/lexer/err/0008_unclosed_char_with_slash_single_quote.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0008_unclosed_char_with_slash_single_quote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0008_unclosed_char_with_slash_single_quote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0008_unclosed_char_with_slash_single_quote.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+'\\'\n\\ No newline at end of file"}, {"sha": "13fc5ea9ac46a4219ec78a8de186fe5827fc25c6", "filename": "crates/ra_syntax/test_data/lexer/err/0008_unclosed_char_with_slash_single_quote.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0008_unclosed_char_with_slash_single_quote.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0008_unclosed_char_with_slash_single_quote.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0008_unclosed_char_with_slash_single_quote.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+CHAR 3 \"\\'\\\\\\'\"\n+> error[0; 3) token(\"\\'\\\\\\'\") msg(Missing trailing `'` symbol to terminate the character literal)"}, {"sha": "795dc7e25c587d7bc068e2f8b311505b75da2b68", "filename": "crates/ra_syntax/test_data/lexer/err/0009_unclosed_byte_at_eof.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0009_unclosed_byte_at_eof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0009_unclosed_byte_at_eof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0009_unclosed_byte_at_eof.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+b'\n\\ No newline at end of file"}, {"sha": "269d68c74ac93cb5c68adc44cbc2da8401b555ff", "filename": "crates/ra_syntax/test_data/lexer/err/0009_unclosed_byte_at_eof.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0009_unclosed_byte_at_eof.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0009_unclosed_byte_at_eof.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0009_unclosed_byte_at_eof.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+BYTE 2 \"b\\'\"\n+> error[0; 2) token(\"b\\'\") msg(Missing trailing `'` symbol to terminate the byte literal)"}, {"sha": "c9230dc24ea4421b5c88fa4bbb6eb402f7daffa6", "filename": "crates/ra_syntax/test_data/lexer/err/0010_unclosed_byte_with_ferris.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0010_unclosed_byte_with_ferris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0010_unclosed_byte_with_ferris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0010_unclosed_byte_with_ferris.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+b'\ud83e\udd80\n\\ No newline at end of file"}, {"sha": "91a76e479abb3c81ab6cd1cbac36ecc70d774a44", "filename": "crates/ra_syntax/test_data/lexer/err/0010_unclosed_byte_with_ferris.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0010_unclosed_byte_with_ferris.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0010_unclosed_byte_with_ferris.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0010_unclosed_byte_with_ferris.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+BYTE 6 \"b\\'\ud83e\udd80\"\n+> error[0; 6) token(\"b\\'\ud83e\udd80\") msg(Missing trailing `'` symbol to terminate the byte literal)"}, {"sha": "d146a8090d185b63ae752335134f55851dd0b539", "filename": "crates/ra_syntax/test_data/lexer/err/0011_unclosed_byte_with_ascii_escape.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0011_unclosed_byte_with_ascii_escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0011_unclosed_byte_with_ascii_escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0011_unclosed_byte_with_ascii_escape.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+b'\\x7f\n\\ No newline at end of file"}, {"sha": "b8c804a18942987f23b739ad44513b4ee7608310", "filename": "crates/ra_syntax/test_data/lexer/err/0011_unclosed_byte_with_ascii_escape.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0011_unclosed_byte_with_ascii_escape.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0011_unclosed_byte_with_ascii_escape.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0011_unclosed_byte_with_ascii_escape.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+BYTE 6 \"b\\'\\\\x7f\"\n+> error[0; 6) token(\"b\\'\\\\x7f\") msg(Missing trailing `'` symbol to terminate the byte literal)"}, {"sha": "a3dec7c255d0e17d6c55516c6e514bc574e1b083", "filename": "crates/ra_syntax/test_data/lexer/err/0012_unclosed_byte_with_unicode_escape.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0012_unclosed_byte_with_unicode_escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0012_unclosed_byte_with_unicode_escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0012_unclosed_byte_with_unicode_escape.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+b'\\u{20AA}\n\\ No newline at end of file"}, {"sha": "dfca22a59823960216e46bee624715b5850f43aa", "filename": "crates/ra_syntax/test_data/lexer/err/0012_unclosed_byte_with_unicode_escape.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0012_unclosed_byte_with_unicode_escape.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0012_unclosed_byte_with_unicode_escape.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0012_unclosed_byte_with_unicode_escape.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+BYTE 10 \"b\\'\\\\u{20AA}\"\n+> error[0; 10) token(\"b\\'\\\\u{20AA}\") msg(Missing trailing `'` symbol to terminate the byte literal)"}, {"sha": "93b7f9c87c9144783b4a4cf7ba0a093a68e6691d", "filename": "crates/ra_syntax/test_data/lexer/err/0013_unclosed_byte_with_space.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0013_unclosed_byte_with_space.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0013_unclosed_byte_with_space.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0013_unclosed_byte_with_space.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+b' \n\\ No newline at end of file"}, {"sha": "51a1cceabdfbc2557c3efd4c614e2a3e939fda7d", "filename": "crates/ra_syntax/test_data/lexer/err/0013_unclosed_byte_with_space.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0013_unclosed_byte_with_space.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0013_unclosed_byte_with_space.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0013_unclosed_byte_with_space.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+BYTE 3 \"b\\' \"\n+> error[0; 3) token(\"b\\' \") msg(Missing trailing `'` symbol to terminate the byte literal)"}, {"sha": "abffa5037c0daa68a067eb6bc9f1c9a1b6d0f795", "filename": "crates/ra_syntax/test_data/lexer/err/0014_unclosed_byte_with_slash.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0014_unclosed_byte_with_slash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0014_unclosed_byte_with_slash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0014_unclosed_byte_with_slash.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+b'\\\n\\ No newline at end of file"}, {"sha": "24e835c2795b8f9f8d5583676ffacb520a687e96", "filename": "crates/ra_syntax/test_data/lexer/err/0014_unclosed_byte_with_slash.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0014_unclosed_byte_with_slash.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0014_unclosed_byte_with_slash.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0014_unclosed_byte_with_slash.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+BYTE 3 \"b\\'\\\\\"\n+> error[0; 3) token(\"b\\'\\\\\") msg(Missing trailing `'` symbol to terminate the byte literal)"}, {"sha": "4f46836a935e31ab6b65ad8b185d51b34840b500", "filename": "crates/ra_syntax/test_data/lexer/err/0015_unclosed_byte_with_slash_n.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0015_unclosed_byte_with_slash_n.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0015_unclosed_byte_with_slash_n.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0015_unclosed_byte_with_slash_n.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+b'\\n\n\\ No newline at end of file"}, {"sha": "f1e39a41ba0b688b7cc84e70582a12ab3a9c9672", "filename": "crates/ra_syntax/test_data/lexer/err/0015_unclosed_byte_with_slash_n.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0015_unclosed_byte_with_slash_n.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0015_unclosed_byte_with_slash_n.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0015_unclosed_byte_with_slash_n.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+BYTE 4 \"b\\'\\\\n\"\n+> error[0; 4) token(\"b\\'\\\\n\") msg(Missing trailing `'` symbol to terminate the byte literal)"}, {"sha": "645b641eedb669cc85718c4a33665ac042278bc8", "filename": "crates/ra_syntax/test_data/lexer/err/0016_unclosed_byte_with_slash_single_quote.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0016_unclosed_byte_with_slash_single_quote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0016_unclosed_byte_with_slash_single_quote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0016_unclosed_byte_with_slash_single_quote.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+b'\\'\n\\ No newline at end of file"}, {"sha": "f8ffe815d429671a6f1adcc4dcaaeb14519139c2", "filename": "crates/ra_syntax/test_data/lexer/err/0016_unclosed_byte_with_slash_single_quote.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0016_unclosed_byte_with_slash_single_quote.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0016_unclosed_byte_with_slash_single_quote.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0016_unclosed_byte_with_slash_single_quote.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+BYTE 4 \"b\\'\\\\\\'\"\n+> error[0; 4) token(\"b\\'\\\\\\'\") msg(Missing trailing `'` symbol to terminate the byte literal)"}, {"sha": "9d68933c44f13985b9eb19159da6eb3ff0e574bf", "filename": "crates/ra_syntax/test_data/lexer/err/0017_unclosed_string_at_eof.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0017_unclosed_string_at_eof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0017_unclosed_string_at_eof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0017_unclosed_string_at_eof.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+\"\n\\ No newline at end of file"}, {"sha": "823daaf6f7a6856dd3eb18b0f399795eec13d799", "filename": "crates/ra_syntax/test_data/lexer/err/0017_unclosed_string_at_eof.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0017_unclosed_string_at_eof.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0017_unclosed_string_at_eof.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0017_unclosed_string_at_eof.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+STRING 1 \"\\\"\"\n+> error[0; 1) token(\"\\\"\") msg(Missing trailing `\"` symbol to terminate the string literal)"}, {"sha": "d439b8d2a1d6c12e517bb66ffb3ce05f1e09031b", "filename": "crates/ra_syntax/test_data/lexer/err/0018_unclosed_string_with_ferris.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0018_unclosed_string_with_ferris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0018_unclosed_string_with_ferris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0018_unclosed_string_with_ferris.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+\"\ud83e\udd80\n\\ No newline at end of file"}, {"sha": "164580eb35db05b2c43e55f7c6bc88f9f8e4d101", "filename": "crates/ra_syntax/test_data/lexer/err/0018_unclosed_string_with_ferris.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0018_unclosed_string_with_ferris.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0018_unclosed_string_with_ferris.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0018_unclosed_string_with_ferris.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+STRING 5 \"\\\"\ud83e\udd80\"\n+> error[0; 5) token(\"\\\"\ud83e\udd80\") msg(Missing trailing `\"` symbol to terminate the string literal)"}, {"sha": "56186a34444f4986761a67a953d4c35cb1bac065", "filename": "crates/ra_syntax/test_data/lexer/err/0019_unclosed_string_with_ascii_escape.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0019_unclosed_string_with_ascii_escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0019_unclosed_string_with_ascii_escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0019_unclosed_string_with_ascii_escape.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+\"\\x7f\n\\ No newline at end of file"}, {"sha": "4453827c303ec5dc63ef3c8562f8cbc461745601", "filename": "crates/ra_syntax/test_data/lexer/err/0019_unclosed_string_with_ascii_escape.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0019_unclosed_string_with_ascii_escape.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0019_unclosed_string_with_ascii_escape.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0019_unclosed_string_with_ascii_escape.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+STRING 5 \"\\\"\\\\x7f\"\n+> error[0; 5) token(\"\\\"\\\\x7f\") msg(Missing trailing `\"` symbol to terminate the string literal)"}, {"sha": "ed24095c3d4fc8904d1726f52167550ad75cadff", "filename": "crates/ra_syntax/test_data/lexer/err/0020_unclosed_string_with_unicode_escape.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0020_unclosed_string_with_unicode_escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0020_unclosed_string_with_unicode_escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0020_unclosed_string_with_unicode_escape.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+\"\\u{20AA}\n\\ No newline at end of file"}, {"sha": "aa614f3046130683f7dd05e6beafc3ff7f4d7781", "filename": "crates/ra_syntax/test_data/lexer/err/0020_unclosed_string_with_unicode_escape.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0020_unclosed_string_with_unicode_escape.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0020_unclosed_string_with_unicode_escape.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0020_unclosed_string_with_unicode_escape.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+STRING 9 \"\\\"\\\\u{20AA}\"\n+> error[0; 9) token(\"\\\"\\\\u{20AA}\") msg(Missing trailing `\"` symbol to terminate the string literal)"}, {"sha": "72cdc841fbd787e46735053268635236840e9c64", "filename": "crates/ra_syntax/test_data/lexer/err/0021_unclosed_string_with_space.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0021_unclosed_string_with_space.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0021_unclosed_string_with_space.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0021_unclosed_string_with_space.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+\" \n\\ No newline at end of file"}, {"sha": "b7db1236ffa8f26749e0e45cf69045d1e05a48fc", "filename": "crates/ra_syntax/test_data/lexer/err/0021_unclosed_string_with_space.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0021_unclosed_string_with_space.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0021_unclosed_string_with_space.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0021_unclosed_string_with_space.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+STRING 2 \"\\\" \"\n+> error[0; 2) token(\"\\\" \") msg(Missing trailing `\"` symbol to terminate the string literal)"}, {"sha": "00a25840087190c844abad32d4ae185260446822", "filename": "crates/ra_syntax/test_data/lexer/err/0022_unclosed_string_with_slash.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0022_unclosed_string_with_slash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0022_unclosed_string_with_slash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0022_unclosed_string_with_slash.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+\"\\\n\\ No newline at end of file"}, {"sha": "9d3df37991a996bb95e4df93b9fc2affee22127d", "filename": "crates/ra_syntax/test_data/lexer/err/0022_unclosed_string_with_slash.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0022_unclosed_string_with_slash.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0022_unclosed_string_with_slash.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0022_unclosed_string_with_slash.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+STRING 2 \"\\\"\\\\\"\n+> error[0; 2) token(\"\\\"\\\\\") msg(Missing trailing `\"` symbol to terminate the string literal)"}, {"sha": "a0c29b8cff7fc6f2b421683f51266c38e2d0cc2f", "filename": "crates/ra_syntax/test_data/lexer/err/0023_unclosed_string_with_slash_n.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0023_unclosed_string_with_slash_n.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0023_unclosed_string_with_slash_n.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0023_unclosed_string_with_slash_n.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+\"\\n\n\\ No newline at end of file"}, {"sha": "e3eb672b69152b57a9aa521d016b0e7cdc37935d", "filename": "crates/ra_syntax/test_data/lexer/err/0023_unclosed_string_with_slash_n.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0023_unclosed_string_with_slash_n.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0023_unclosed_string_with_slash_n.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0023_unclosed_string_with_slash_n.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+STRING 3 \"\\\"\\\\n\"\n+> error[0; 3) token(\"\\\"\\\\n\") msg(Missing trailing `\"` symbol to terminate the string literal)"}, {"sha": "403c2d6ddc698b0dd413fe92223411cbd8222e98", "filename": "crates/ra_syntax/test_data/lexer/err/0024_unclosed_string_with_slash_double_quote.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0024_unclosed_string_with_slash_double_quote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0024_unclosed_string_with_slash_double_quote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0024_unclosed_string_with_slash_double_quote.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+\"\\\"\n\\ No newline at end of file"}, {"sha": "041d7fb6efcdacb20609ffedd65c4d5a0f0ae21f", "filename": "crates/ra_syntax/test_data/lexer/err/0024_unclosed_string_with_slash_double_quote.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0024_unclosed_string_with_slash_double_quote.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0024_unclosed_string_with_slash_double_quote.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0024_unclosed_string_with_slash_double_quote.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+STRING 3 \"\\\"\\\\\\\"\"\n+> error[0; 3) token(\"\\\"\\\\\\\"\") msg(Missing trailing `\"` symbol to terminate the string literal)"}, {"sha": "36f4f432187d6542e917e3ca4f1614907cd6b25b", "filename": "crates/ra_syntax/test_data/lexer/err/0025_unclosed_byte_string_at_eof.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0025_unclosed_byte_string_at_eof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0025_unclosed_byte_string_at_eof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0025_unclosed_byte_string_at_eof.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+b\"\n\\ No newline at end of file"}, {"sha": "be7970a835bfce07e92a15e58658df4ff6b107ba", "filename": "crates/ra_syntax/test_data/lexer/err/0025_unclosed_byte_string_at_eof.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0025_unclosed_byte_string_at_eof.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0025_unclosed_byte_string_at_eof.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0025_unclosed_byte_string_at_eof.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+BYTE_STRING 2 \"b\\\"\"\n+> error[0; 2) token(\"b\\\"\") msg(Missing trailing `\"` symbol to terminate the byte string literal)"}, {"sha": "3c23a03722873d7d2d0c91271a629bce34550ec2", "filename": "crates/ra_syntax/test_data/lexer/err/0026_unclosed_byte_string_with_ferris.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0026_unclosed_byte_string_with_ferris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0026_unclosed_byte_string_with_ferris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0026_unclosed_byte_string_with_ferris.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+b\"\ud83e\udd80\n\\ No newline at end of file"}, {"sha": "bf9aab132cb272b0bba6dc3e91c9db9b256fe393", "filename": "crates/ra_syntax/test_data/lexer/err/0026_unclosed_byte_string_with_ferris.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0026_unclosed_byte_string_with_ferris.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0026_unclosed_byte_string_with_ferris.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0026_unclosed_byte_string_with_ferris.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+BYTE_STRING 6 \"b\\\"\ud83e\udd80\"\n+> error[0; 6) token(\"b\\\"\ud83e\udd80\") msg(Missing trailing `\"` symbol to terminate the byte string literal)"}, {"sha": "836c112c1572fe38f697b997b159df136cee0503", "filename": "crates/ra_syntax/test_data/lexer/err/0027_unclosed_byte_string_with_ascii_escape.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0027_unclosed_byte_string_with_ascii_escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0027_unclosed_byte_string_with_ascii_escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0027_unclosed_byte_string_with_ascii_escape.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+b\"\\x7f\n\\ No newline at end of file"}, {"sha": "76e16d7d3489d5363ac30bf92f15ba4e80989fc2", "filename": "crates/ra_syntax/test_data/lexer/err/0027_unclosed_byte_string_with_ascii_escape.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0027_unclosed_byte_string_with_ascii_escape.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0027_unclosed_byte_string_with_ascii_escape.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0027_unclosed_byte_string_with_ascii_escape.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+BYTE_STRING 6 \"b\\\"\\\\x7f\"\n+> error[0; 6) token(\"b\\\"\\\\x7f\") msg(Missing trailing `\"` symbol to terminate the byte string literal)"}, {"sha": "1c6df1d00e4e65390deb4dc086bd7dc516272241", "filename": "crates/ra_syntax/test_data/lexer/err/0028_unclosed_byte_string_with_unicode_escape.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0028_unclosed_byte_string_with_unicode_escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0028_unclosed_byte_string_with_unicode_escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0028_unclosed_byte_string_with_unicode_escape.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+b\"\\u{20AA}\n\\ No newline at end of file"}, {"sha": "09adffa160122d6d9ee2eb666543845bc6878e2f", "filename": "crates/ra_syntax/test_data/lexer/err/0028_unclosed_byte_string_with_unicode_escape.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0028_unclosed_byte_string_with_unicode_escape.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0028_unclosed_byte_string_with_unicode_escape.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0028_unclosed_byte_string_with_unicode_escape.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+BYTE_STRING 10 \"b\\\"\\\\u{20AA}\"\n+> error[0; 10) token(\"b\\\"\\\\u{20AA}\") msg(Missing trailing `\"` symbol to terminate the byte string literal)"}, {"sha": "d6898541e623c39b25417cceaba0f0324ea5da3e", "filename": "crates/ra_syntax/test_data/lexer/err/0029_unclosed_byte_string_with_space.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0029_unclosed_byte_string_with_space.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0029_unclosed_byte_string_with_space.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0029_unclosed_byte_string_with_space.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+b\" \n\\ No newline at end of file"}, {"sha": "fcb7253c82b0017193ec338e49e2c2edf9074064", "filename": "crates/ra_syntax/test_data/lexer/err/0029_unclosed_byte_string_with_space.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0029_unclosed_byte_string_with_space.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0029_unclosed_byte_string_with_space.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0029_unclosed_byte_string_with_space.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+BYTE_STRING 3 \"b\\\" \"\n+> error[0; 3) token(\"b\\\" \") msg(Missing trailing `\"` symbol to terminate the byte string literal)"}, {"sha": "cce6615381d5e9e22bbfc2f4f04181d2f865dfa5", "filename": "crates/ra_syntax/test_data/lexer/err/0030_unclosed_byte_string_with_slash.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0030_unclosed_byte_string_with_slash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0030_unclosed_byte_string_with_slash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0030_unclosed_byte_string_with_slash.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+b\"\\\n\\ No newline at end of file"}, {"sha": "0a1b3e26993a39b3da8c3bfb1565da5d7a25fa70", "filename": "crates/ra_syntax/test_data/lexer/err/0030_unclosed_byte_string_with_slash.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0030_unclosed_byte_string_with_slash.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0030_unclosed_byte_string_with_slash.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0030_unclosed_byte_string_with_slash.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+BYTE_STRING 3 \"b\\\"\\\\\"\n+> error[0; 3) token(\"b\\\"\\\\\") msg(Missing trailing `\"` symbol to terminate the byte string literal)"}, {"sha": "5e680aabb7b1c9c085bb39516429236ae2e685cc", "filename": "crates/ra_syntax/test_data/lexer/err/0031_unclosed_byte_string_with_slash_n.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0031_unclosed_byte_string_with_slash_n.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0031_unclosed_byte_string_with_slash_n.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0031_unclosed_byte_string_with_slash_n.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+b\"\\n\n\\ No newline at end of file"}, {"sha": "1fb89d2b6d04f7133a8b21845b6ad296d28032af", "filename": "crates/ra_syntax/test_data/lexer/err/0031_unclosed_byte_string_with_slash_n.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0031_unclosed_byte_string_with_slash_n.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0031_unclosed_byte_string_with_slash_n.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0031_unclosed_byte_string_with_slash_n.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+BYTE_STRING 4 \"b\\\"\\\\n\"\n+> error[0; 4) token(\"b\\\"\\\\n\") msg(Missing trailing `\"` symbol to terminate the byte string literal)"}, {"sha": "f2ff58ba9a883643b6b8e5d69f75344cbee6e9ad", "filename": "crates/ra_syntax/test_data/lexer/err/0032_unclosed_byte_string_with_slash_double_quote.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0032_unclosed_byte_string_with_slash_double_quote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0032_unclosed_byte_string_with_slash_double_quote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0032_unclosed_byte_string_with_slash_double_quote.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+b\"\\\"\n\\ No newline at end of file"}, {"sha": "718d36992998a167dc94499e9fef49661a903c8b", "filename": "crates/ra_syntax/test_data/lexer/err/0032_unclosed_byte_string_with_slash_double_quote.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0032_unclosed_byte_string_with_slash_double_quote.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0032_unclosed_byte_string_with_slash_double_quote.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0032_unclosed_byte_string_with_slash_double_quote.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+BYTE_STRING 4 \"b\\\"\\\\\\\"\"\n+> error[0; 4) token(\"b\\\"\\\\\\\"\") msg(Missing trailing `\"` symbol to terminate the byte string literal)"}, {"sha": "557c59b625190937a1e56e4d04cd37454fa38b5c", "filename": "crates/ra_syntax/test_data/lexer/err/0033_unclosed_raw_string_at_eof.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0033_unclosed_raw_string_at_eof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0033_unclosed_raw_string_at_eof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0033_unclosed_raw_string_at_eof.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+r##\"\n\\ No newline at end of file"}, {"sha": "93348f548fd89b3ea9a38da40d4258208d1d3448", "filename": "crates/ra_syntax/test_data/lexer/err/0033_unclosed_raw_string_at_eof.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0033_unclosed_raw_string_at_eof.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0033_unclosed_raw_string_at_eof.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0033_unclosed_raw_string_at_eof.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+RAW_STRING 4 \"r##\\\"\"\n+> error[0; 4) token(\"r##\\\"\") msg(Missing trailing `\"` with `#` symbols to terminate the raw string literal)"}, {"sha": "bd046e4bb9148e109cbe00519a49c22f16014928", "filename": "crates/ra_syntax/test_data/lexer/err/0034_unclosed_raw_string_with_ferris.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0034_unclosed_raw_string_with_ferris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0034_unclosed_raw_string_with_ferris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0034_unclosed_raw_string_with_ferris.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+r##\"\ud83e\udd80\n\\ No newline at end of file"}, {"sha": "42c70dfe836f0f536150cfc79a32463ffbe6db23", "filename": "crates/ra_syntax/test_data/lexer/err/0034_unclosed_raw_string_with_ferris.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0034_unclosed_raw_string_with_ferris.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0034_unclosed_raw_string_with_ferris.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0034_unclosed_raw_string_with_ferris.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+RAW_STRING 8 \"r##\\\"\ud83e\udd80\"\n+> error[0; 8) token(\"r##\\\"\ud83e\udd80\") msg(Missing trailing `\"` with `#` symbols to terminate the raw string literal)"}, {"sha": "5bec883dc7ae19bff364f58ed3b3df038fecd4aa", "filename": "crates/ra_syntax/test_data/lexer/err/0035_unclosed_raw_string_with_ascii_escape.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0035_unclosed_raw_string_with_ascii_escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0035_unclosed_raw_string_with_ascii_escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0035_unclosed_raw_string_with_ascii_escape.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+r##\"\\x7f\n\\ No newline at end of file"}, {"sha": "2bdeea0ff53abb88966ef7a79cea95c13c7661c4", "filename": "crates/ra_syntax/test_data/lexer/err/0035_unclosed_raw_string_with_ascii_escape.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0035_unclosed_raw_string_with_ascii_escape.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0035_unclosed_raw_string_with_ascii_escape.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0035_unclosed_raw_string_with_ascii_escape.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+RAW_STRING 8 \"r##\\\"\\\\x7f\"\n+> error[0; 8) token(\"r##\\\"\\\\x7f\") msg(Missing trailing `\"` with `#` symbols to terminate the raw string literal)"}, {"sha": "bf05c39134bd08d95d5094ccfe660bf4a0974de2", "filename": "crates/ra_syntax/test_data/lexer/err/0036_unclosed_raw_string_with_unicode_escape.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0036_unclosed_raw_string_with_unicode_escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0036_unclosed_raw_string_with_unicode_escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0036_unclosed_raw_string_with_unicode_escape.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+r##\"\\u{20AA}\n\\ No newline at end of file"}, {"sha": "667d4d79f9fee28bed86c1211ff800e675d6474d", "filename": "crates/ra_syntax/test_data/lexer/err/0036_unclosed_raw_string_with_unicode_escape.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0036_unclosed_raw_string_with_unicode_escape.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0036_unclosed_raw_string_with_unicode_escape.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0036_unclosed_raw_string_with_unicode_escape.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+RAW_STRING 12 \"r##\\\"\\\\u{20AA}\"\n+> error[0; 12) token(\"r##\\\"\\\\u{20AA}\") msg(Missing trailing `\"` with `#` symbols to terminate the raw string literal)"}, {"sha": "f104bae4f2cdfdeb47dec924c57bd0215b99dfdd", "filename": "crates/ra_syntax/test_data/lexer/err/0037_unclosed_raw_string_with_space.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0037_unclosed_raw_string_with_space.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0037_unclosed_raw_string_with_space.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0037_unclosed_raw_string_with_space.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+r##\" \n\\ No newline at end of file"}, {"sha": "dd9597a1a9e0422e489f1cd377c801aef436399e", "filename": "crates/ra_syntax/test_data/lexer/err/0037_unclosed_raw_string_with_space.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0037_unclosed_raw_string_with_space.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0037_unclosed_raw_string_with_space.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0037_unclosed_raw_string_with_space.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+RAW_STRING 5 \"r##\\\" \"\n+> error[0; 5) token(\"r##\\\" \") msg(Missing trailing `\"` with `#` symbols to terminate the raw string literal)"}, {"sha": "9242077b8b7c58f62aa24fd4efcaf8f5b1fe2789", "filename": "crates/ra_syntax/test_data/lexer/err/0038_unclosed_raw_string_with_slash.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0038_unclosed_raw_string_with_slash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0038_unclosed_raw_string_with_slash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0038_unclosed_raw_string_with_slash.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+r##\"\\\n\\ No newline at end of file"}, {"sha": "6ac6e3d623d22619b98b3faa4e784089d43292f1", "filename": "crates/ra_syntax/test_data/lexer/err/0038_unclosed_raw_string_with_slash.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0038_unclosed_raw_string_with_slash.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0038_unclosed_raw_string_with_slash.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0038_unclosed_raw_string_with_slash.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+RAW_STRING 5 \"r##\\\"\\\\\"\n+> error[0; 5) token(\"r##\\\"\\\\\") msg(Missing trailing `\"` with `#` symbols to terminate the raw string literal)"}, {"sha": "db1c16f2ba5ac812292e310602083f67cf77ab56", "filename": "crates/ra_syntax/test_data/lexer/err/0039_unclosed_raw_string_with_slash_n.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0039_unclosed_raw_string_with_slash_n.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0039_unclosed_raw_string_with_slash_n.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0039_unclosed_raw_string_with_slash_n.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+r##\"\\n\n\\ No newline at end of file"}, {"sha": "9d35443f5101680215a8b0e9b36ab6c792c11cec", "filename": "crates/ra_syntax/test_data/lexer/err/0039_unclosed_raw_string_with_slash_n.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0039_unclosed_raw_string_with_slash_n.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0039_unclosed_raw_string_with_slash_n.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0039_unclosed_raw_string_with_slash_n.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+RAW_STRING 6 \"r##\\\"\\\\n\"\n+> error[0; 6) token(\"r##\\\"\\\\n\") msg(Missing trailing `\"` with `#` symbols to terminate the raw string literal)"}, {"sha": "ae5bae62230856c72a718c0388a90fb420ef2f55", "filename": "crates/ra_syntax/test_data/lexer/err/0040_unclosed_raw_byte_string_at_eof.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0040_unclosed_raw_byte_string_at_eof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0040_unclosed_raw_byte_string_at_eof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0040_unclosed_raw_byte_string_at_eof.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+br##\"\n\\ No newline at end of file"}, {"sha": "81fa39ea515f8ff96a67c58eca78f3e898252928", "filename": "crates/ra_syntax/test_data/lexer/err/0040_unclosed_raw_byte_string_at_eof.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0040_unclosed_raw_byte_string_at_eof.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0040_unclosed_raw_byte_string_at_eof.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0040_unclosed_raw_byte_string_at_eof.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+RAW_BYTE_STRING 5 \"br##\\\"\"\n+> error[0; 5) token(\"br##\\\"\") msg(Missing trailing `\"` with `#` symbols to terminate the raw byte string literal)"}, {"sha": "9ef01207a173f33d66653c7c452095a885d7d525", "filename": "crates/ra_syntax/test_data/lexer/err/0041_unclosed_raw_byte_string_with_ferris.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0041_unclosed_raw_byte_string_with_ferris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0041_unclosed_raw_byte_string_with_ferris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0041_unclosed_raw_byte_string_with_ferris.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+br##\"\ud83e\udd80\n\\ No newline at end of file"}, {"sha": "c2503a4d05049147b9c73c6d979635f0e8b7b4f0", "filename": "crates/ra_syntax/test_data/lexer/err/0041_unclosed_raw_byte_string_with_ferris.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0041_unclosed_raw_byte_string_with_ferris.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0041_unclosed_raw_byte_string_with_ferris.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0041_unclosed_raw_byte_string_with_ferris.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+RAW_BYTE_STRING 9 \"br##\\\"\ud83e\udd80\"\n+> error[0; 9) token(\"br##\\\"\ud83e\udd80\") msg(Missing trailing `\"` with `#` symbols to terminate the raw byte string literal)"}, {"sha": "d50270afe1e1cd85d31c59dd38e72d0b70be8db2", "filename": "crates/ra_syntax/test_data/lexer/err/0042_unclosed_raw_byte_string_with_ascii_escape.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0042_unclosed_raw_byte_string_with_ascii_escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0042_unclosed_raw_byte_string_with_ascii_escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0042_unclosed_raw_byte_string_with_ascii_escape.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+br##\"\\x7f\n\\ No newline at end of file"}, {"sha": "3bd3d815296cf89e181463df5d27455f5a016ae2", "filename": "crates/ra_syntax/test_data/lexer/err/0042_unclosed_raw_byte_string_with_ascii_escape.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0042_unclosed_raw_byte_string_with_ascii_escape.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0042_unclosed_raw_byte_string_with_ascii_escape.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0042_unclosed_raw_byte_string_with_ascii_escape.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+RAW_BYTE_STRING 9 \"br##\\\"\\\\x7f\"\n+> error[0; 9) token(\"br##\\\"\\\\x7f\") msg(Missing trailing `\"` with `#` symbols to terminate the raw byte string literal)"}, {"sha": "90e299a1a977cab7edf3c3f4ccd891f258e38ef3", "filename": "crates/ra_syntax/test_data/lexer/err/0043_unclosed_raw_byte_string_with_unicode_escape.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0043_unclosed_raw_byte_string_with_unicode_escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0043_unclosed_raw_byte_string_with_unicode_escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0043_unclosed_raw_byte_string_with_unicode_escape.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+br##\"\\u{20AA}\n\\ No newline at end of file"}, {"sha": "a512f0428f5e5189900dab225d361a09ce834b7a", "filename": "crates/ra_syntax/test_data/lexer/err/0043_unclosed_raw_byte_string_with_unicode_escape.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0043_unclosed_raw_byte_string_with_unicode_escape.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0043_unclosed_raw_byte_string_with_unicode_escape.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0043_unclosed_raw_byte_string_with_unicode_escape.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+RAW_BYTE_STRING 13 \"br##\\\"\\\\u{20AA}\"\n+> error[0; 13) token(\"br##\\\"\\\\u{20AA}\") msg(Missing trailing `\"` with `#` symbols to terminate the raw byte string literal)"}, {"sha": "14c602fd2b35a949b27bd9c6484e08114d90b92f", "filename": "crates/ra_syntax/test_data/lexer/err/0044_unclosed_raw_byte_string_with_space.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0044_unclosed_raw_byte_string_with_space.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0044_unclosed_raw_byte_string_with_space.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0044_unclosed_raw_byte_string_with_space.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+br##\" \n\\ No newline at end of file"}, {"sha": "dc616a623b2b56e3bdbc9f34881a2fecd5538df5", "filename": "crates/ra_syntax/test_data/lexer/err/0044_unclosed_raw_byte_string_with_space.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0044_unclosed_raw_byte_string_with_space.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0044_unclosed_raw_byte_string_with_space.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0044_unclosed_raw_byte_string_with_space.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+RAW_BYTE_STRING 6 \"br##\\\" \"\n+> error[0; 6) token(\"br##\\\" \") msg(Missing trailing `\"` with `#` symbols to terminate the raw byte string literal)"}, {"sha": "0b3c015d74d48df9df99ea1d9398e47913f2641d", "filename": "crates/ra_syntax/test_data/lexer/err/0045_unclosed_raw_byte_string_with_slash.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0045_unclosed_raw_byte_string_with_slash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0045_unclosed_raw_byte_string_with_slash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0045_unclosed_raw_byte_string_with_slash.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+br##\"\\\n\\ No newline at end of file"}, {"sha": "debafe380e449eafd8c2eeb1a0d607a7d5c40230", "filename": "crates/ra_syntax/test_data/lexer/err/0045_unclosed_raw_byte_string_with_slash.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0045_unclosed_raw_byte_string_with_slash.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0045_unclosed_raw_byte_string_with_slash.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0045_unclosed_raw_byte_string_with_slash.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+RAW_BYTE_STRING 6 \"br##\\\"\\\\\"\n+> error[0; 6) token(\"br##\\\"\\\\\") msg(Missing trailing `\"` with `#` symbols to terminate the raw byte string literal)"}, {"sha": "0d8b0e7ab04f79b56c0ed51114ee02318de89347", "filename": "crates/ra_syntax/test_data/lexer/err/0046_unclosed_raw_byte_string_with_slash_n.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0046_unclosed_raw_byte_string_with_slash_n.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0046_unclosed_raw_byte_string_with_slash_n.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0046_unclosed_raw_byte_string_with_slash_n.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+br##\"\\n\n\\ No newline at end of file"}, {"sha": "524e617b77a7e3d626929c2bc0f9c2d16785ef9a", "filename": "crates/ra_syntax/test_data/lexer/err/0046_unclosed_raw_byte_string_with_slash_n.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0046_unclosed_raw_byte_string_with_slash_n.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0046_unclosed_raw_byte_string_with_slash_n.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0046_unclosed_raw_byte_string_with_slash_n.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+RAW_BYTE_STRING 7 \"br##\\\"\\\\n\"\n+> error[0; 7) token(\"br##\\\"\\\\n\") msg(Missing trailing `\"` with `#` symbols to terminate the raw byte string literal)"}, {"sha": "eddf8d0809445b52a740f0329a46753d5c0ab6c9", "filename": "crates/ra_syntax/test_data/lexer/err/0047_unstarted_raw_string_at_eof.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0047_unstarted_raw_string_at_eof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0047_unstarted_raw_string_at_eof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0047_unstarted_raw_string_at_eof.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+r##\n\\ No newline at end of file"}, {"sha": "00b0468405f42f3ac49553616cfb1f538272584e", "filename": "crates/ra_syntax/test_data/lexer/err/0047_unstarted_raw_string_at_eof.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0047_unstarted_raw_string_at_eof.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0047_unstarted_raw_string_at_eof.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0047_unstarted_raw_string_at_eof.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+RAW_STRING 3 \"r##\"\n+> error[0; 3) token(\"r##\") msg(Missing `\"` symbol after `#` symbols to begin the raw string literal)"}, {"sha": "7e8cadf4f4928e457deffc4c63fdd53b9e8f8cb2", "filename": "crates/ra_syntax/test_data/lexer/err/0048_unstarted_raw_byte_string_at_eof.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0048_unstarted_raw_byte_string_at_eof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0048_unstarted_raw_byte_string_at_eof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0048_unstarted_raw_byte_string_at_eof.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+br##\n\\ No newline at end of file"}, {"sha": "33b25e60f8bb8eeb042fa9a0a31ef807d761b664", "filename": "crates/ra_syntax/test_data/lexer/err/0048_unstarted_raw_byte_string_at_eof.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0048_unstarted_raw_byte_string_at_eof.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0048_unstarted_raw_byte_string_at_eof.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0048_unstarted_raw_byte_string_at_eof.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+RAW_BYTE_STRING 4 \"br##\"\n+> error[0; 4) token(\"br##\") msg(Missing `\"` symbol after `#` symbols to begin the raw byte string literal)"}, {"sha": "534668a9b6622683d1476bb839974af766ab3197", "filename": "crates/ra_syntax/test_data/lexer/err/0049_unstarted_raw_string_with_ascii.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0049_unstarted_raw_string_with_ascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0049_unstarted_raw_string_with_ascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0049_unstarted_raw_string_with_ascii.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+r## I lack a quote!\n\\ No newline at end of file"}, {"sha": "782dfd974f65661e7cc329613a27adf2b54bb7c0", "filename": "crates/ra_syntax/test_data/lexer/err/0049_unstarted_raw_string_with_ascii.txt", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0049_unstarted_raw_string_with_ascii.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0049_unstarted_raw_string_with_ascii.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0049_unstarted_raw_string_with_ascii.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,10 @@\n+RAW_STRING 4 \"r## \"\n+IDENT 1 \"I\"\n+WHITESPACE 1 \" \"\n+IDENT 4 \"lack\"\n+WHITESPACE 1 \" \"\n+IDENT 1 \"a\"\n+WHITESPACE 1 \" \"\n+IDENT 5 \"quote\"\n+EXCL 1 \"!\"\n+> error[0; 4) token(\"r## \") msg(Missing `\"` symbol after `#` symbols to begin the raw string literal)"}, {"sha": "d9b55455ac40cde3f42a9962f3d5cb35fd6aa903", "filename": "crates/ra_syntax/test_data/lexer/err/0050_unstarted_raw_byte_string_with_ascii.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0050_unstarted_raw_byte_string_with_ascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0050_unstarted_raw_byte_string_with_ascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0050_unstarted_raw_byte_string_with_ascii.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+br## I lack a quote!\n\\ No newline at end of file"}, {"sha": "59c40cd65ac6c3da87fb0a99d05ac986ed47c798", "filename": "crates/ra_syntax/test_data/lexer/err/0050_unstarted_raw_byte_string_with_ascii.txt", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0050_unstarted_raw_byte_string_with_ascii.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0050_unstarted_raw_byte_string_with_ascii.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0050_unstarted_raw_byte_string_with_ascii.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,10 @@\n+RAW_BYTE_STRING 5 \"br## \"\n+IDENT 1 \"I\"\n+WHITESPACE 1 \" \"\n+IDENT 4 \"lack\"\n+WHITESPACE 1 \" \"\n+IDENT 1 \"a\"\n+WHITESPACE 1 \" \"\n+IDENT 5 \"quote\"\n+EXCL 1 \"!\"\n+> error[0; 5) token(\"br## \") msg(Missing `\"` symbol after `#` symbols to begin the raw byte string literal)"}, {"sha": "22e83649f7d5219bb31ce45bd7e986e57ea4e72e", "filename": "crates/ra_syntax/test_data/lexer/err/0051_unclosed_block_comment_at_eof.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0051_unclosed_block_comment_at_eof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0051_unclosed_block_comment_at_eof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0051_unclosed_block_comment_at_eof.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+/*\n\\ No newline at end of file"}, {"sha": "5d04cdaa4b9ddc8eb5c9106f41851e8d939b3bbd", "filename": "crates/ra_syntax/test_data/lexer/err/0051_unclosed_block_comment_at_eof.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0051_unclosed_block_comment_at_eof.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0051_unclosed_block_comment_at_eof.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0051_unclosed_block_comment_at_eof.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+COMMENT 2 \"/*\"\n+> error[0; 2) token(\"/*\") msg(Missing trailing `*/` symbols to terminate the block comment)"}, {"sha": "c45c2844dbcc1ec5c032faa0b6f252c9a53c1a91", "filename": "crates/ra_syntax/test_data/lexer/err/0052_unclosed_block_comment_with_content.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0052_unclosed_block_comment_with_content.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0052_unclosed_block_comment_with_content.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0052_unclosed_block_comment_with_content.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+/* comment"}, {"sha": "8c6b678e32194c778d03d730407e2d0a94d7f690", "filename": "crates/ra_syntax/test_data/lexer/err/0052_unclosed_block_comment_with_content.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0052_unclosed_block_comment_with_content.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0052_unclosed_block_comment_with_content.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0052_unclosed_block_comment_with_content.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+COMMENT 11 \"/* comment\\n\"\n+> error[0; 11) token(\"/* comment\\n\") msg(Missing trailing `*/` symbols to terminate the block comment)"}, {"sha": "3fcfc96600a7f61bef4f93cea453de5f298dfcd7", "filename": "crates/ra_syntax/test_data/lexer/err/0053_unclosed_nested_block_comment_entirely.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0053_unclosed_nested_block_comment_entirely.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0053_unclosed_nested_block_comment_entirely.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0053_unclosed_nested_block_comment_entirely.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+/* /* /*"}, {"sha": "250de34d9f08c72e18e787e27554379b4a25d1a0", "filename": "crates/ra_syntax/test_data/lexer/err/0053_unclosed_nested_block_comment_entirely.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0053_unclosed_nested_block_comment_entirely.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0053_unclosed_nested_block_comment_entirely.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0053_unclosed_nested_block_comment_entirely.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+COMMENT 9 \"/* /* /*\\n\"\n+> error[0; 9) token(\"/* /* /*\\n\") msg(Missing trailing `*/` symbols to terminate the block comment)"}, {"sha": "26c898f019d6805a2445db2c3aa75b26d88fb736", "filename": "crates/ra_syntax/test_data/lexer/err/0054_unclosed_nested_block_comment_partially.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0054_unclosed_nested_block_comment_partially.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0054_unclosed_nested_block_comment_partially.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0054_unclosed_nested_block_comment_partially.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1 @@\n+/** /*! /* comment */ */"}, {"sha": "f97f2a8c76be7304e501217727e28e7859d52138", "filename": "crates/ra_syntax/test_data/lexer/err/0054_unclosed_nested_block_comment_partially.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0054_unclosed_nested_block_comment_partially.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0054_unclosed_nested_block_comment_partially.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0054_unclosed_nested_block_comment_partially.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+COMMENT 25 \"/** /*! /* comment */ */\\n\"\n+> error[0; 25) token(\"/** /*! /* comment */ */\\n\") msg(Missing trailing `*/` symbols to terminate the block comment)"}, {"sha": "aa2a9fdca17e0f9e15e89939d77e2e319db2e4e5", "filename": "crates/ra_syntax/test_data/lexer/err/0055_empty_int.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0055_empty_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0055_empty_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0055_empty_int.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,17 @@\n+0b\n+0o\n+0x\n+\n+0b_\n+0o_\n+0x_\n+\n+0bnoDigit\n+0onoDigit\n+0xnoDigit\n+\n+0xG\n+0xg\n+\n+0x_g\n+0x_G"}, {"sha": "2fe5bd950a562cbf03f260a8aa07189c0193bb47", "filename": "crates/ra_syntax/test_data/lexer/err/0055_empty_int.txt", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0055_empty_int.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0055_empty_int.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0055_empty_int.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,39 @@\n+INT_NUMBER 2 \"0b\"\n+WHITESPACE 1 \"\\n\"\n+INT_NUMBER 2 \"0o\"\n+WHITESPACE 1 \"\\n\"\n+INT_NUMBER 2 \"0x\"\n+WHITESPACE 2 \"\\n\\n\"\n+INT_NUMBER 3 \"0b_\"\n+WHITESPACE 1 \"\\n\"\n+INT_NUMBER 3 \"0o_\"\n+WHITESPACE 1 \"\\n\"\n+INT_NUMBER 3 \"0x_\"\n+WHITESPACE 2 \"\\n\\n\"\n+INT_NUMBER 9 \"0bnoDigit\"\n+WHITESPACE 1 \"\\n\"\n+INT_NUMBER 9 \"0onoDigit\"\n+WHITESPACE 1 \"\\n\"\n+INT_NUMBER 9 \"0xnoDigit\"\n+WHITESPACE 2 \"\\n\\n\"\n+INT_NUMBER 3 \"0xG\"\n+WHITESPACE 1 \"\\n\"\n+INT_NUMBER 3 \"0xg\"\n+WHITESPACE 2 \"\\n\\n\"\n+INT_NUMBER 4 \"0x_g\"\n+WHITESPACE 1 \"\\n\"\n+INT_NUMBER 4 \"0x_G\"\n+WHITESPACE 1 \"\\n\"\n+> error[0; 2) token(\"0b\") msg(Missing digits after the integer base prefix)\n+> error[3; 5) token(\"0o\") msg(Missing digits after the integer base prefix)\n+> error[6; 8) token(\"0x\") msg(Missing digits after the integer base prefix)\n+> error[10; 13) token(\"0b_\") msg(Missing digits after the integer base prefix)\n+> error[14; 17) token(\"0o_\") msg(Missing digits after the integer base prefix)\n+> error[18; 21) token(\"0x_\") msg(Missing digits after the integer base prefix)\n+> error[23; 32) token(\"0bnoDigit\") msg(Missing digits after the integer base prefix)\n+> error[33; 42) token(\"0onoDigit\") msg(Missing digits after the integer base prefix)\n+> error[43; 52) token(\"0xnoDigit\") msg(Missing digits after the integer base prefix)\n+> error[54; 57) token(\"0xG\") msg(Missing digits after the integer base prefix)\n+> error[58; 61) token(\"0xg\") msg(Missing digits after the integer base prefix)\n+> error[63; 67) token(\"0x_g\") msg(Missing digits after the integer base prefix)\n+> error[68; 72) token(\"0x_G\") msg(Missing digits after the integer base prefix)"}, {"sha": "286584c887f114c2fa3a18cad945b501e5fab846", "filename": "crates/ra_syntax/test_data/lexer/err/0056_empty_exponent.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0056_empty_exponent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0056_empty_exponent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0056_empty_exponent.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,22 @@\n+0e\n+0E\n+\n+42e+\n+42e-\n+42E+\n+42E-\n+\n+42.e+\n+42.e-\n+42.E+\n+42.E-\n+\n+42.2e+\n+42.2e-\n+42.2E+\n+42.2E-\n+\n+42.2e+f32\n+42.2e-f32\n+42.2E+f32\n+42.2E-f32"}, {"sha": "ab35e20a5cecda76637deaba0775c678fb0b3e93", "filename": "crates/ra_syntax/test_data/lexer/err/0056_empty_exponent.txt", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0056_empty_exponent.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0056_empty_exponent.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0056_empty_exponent.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,62 @@\n+FLOAT_NUMBER 2 \"0e\"\n+WHITESPACE 1 \"\\n\"\n+FLOAT_NUMBER 2 \"0E\"\n+WHITESPACE 2 \"\\n\\n\"\n+FLOAT_NUMBER 4 \"42e+\"\n+WHITESPACE 1 \"\\n\"\n+FLOAT_NUMBER 4 \"42e-\"\n+WHITESPACE 1 \"\\n\"\n+FLOAT_NUMBER 4 \"42E+\"\n+WHITESPACE 1 \"\\n\"\n+FLOAT_NUMBER 4 \"42E-\"\n+WHITESPACE 2 \"\\n\\n\"\n+INT_NUMBER 2 \"42\"\n+DOT 1 \".\"\n+IDENT 1 \"e\"\n+PLUS 1 \"+\"\n+WHITESPACE 1 \"\\n\"\n+INT_NUMBER 2 \"42\"\n+DOT 1 \".\"\n+IDENT 1 \"e\"\n+MINUS 1 \"-\"\n+WHITESPACE 1 \"\\n\"\n+INT_NUMBER 2 \"42\"\n+DOT 1 \".\"\n+IDENT 1 \"E\"\n+PLUS 1 \"+\"\n+WHITESPACE 1 \"\\n\"\n+INT_NUMBER 2 \"42\"\n+DOT 1 \".\"\n+IDENT 1 \"E\"\n+MINUS 1 \"-\"\n+WHITESPACE 2 \"\\n\\n\"\n+FLOAT_NUMBER 6 \"42.2e+\"\n+WHITESPACE 1 \"\\n\"\n+FLOAT_NUMBER 6 \"42.2e-\"\n+WHITESPACE 1 \"\\n\"\n+FLOAT_NUMBER 6 \"42.2E+\"\n+WHITESPACE 1 \"\\n\"\n+FLOAT_NUMBER 6 \"42.2E-\"\n+WHITESPACE 2 \"\\n\\n\"\n+FLOAT_NUMBER 9 \"42.2e+f32\"\n+WHITESPACE 1 \"\\n\"\n+FLOAT_NUMBER 9 \"42.2e-f32\"\n+WHITESPACE 1 \"\\n\"\n+FLOAT_NUMBER 9 \"42.2E+f32\"\n+WHITESPACE 1 \"\\n\"\n+FLOAT_NUMBER 9 \"42.2E-f32\"\n+WHITESPACE 1 \"\\n\"\n+> error[0; 2) token(\"0e\") msg(Missing digits after the exponent symbol)\n+> error[3; 5) token(\"0E\") msg(Missing digits after the exponent symbol)\n+> error[7; 11) token(\"42e+\") msg(Missing digits after the exponent symbol)\n+> error[12; 16) token(\"42e-\") msg(Missing digits after the exponent symbol)\n+> error[17; 21) token(\"42E+\") msg(Missing digits after the exponent symbol)\n+> error[22; 26) token(\"42E-\") msg(Missing digits after the exponent symbol)\n+> error[53; 59) token(\"42.2e+\") msg(Missing digits after the exponent symbol)\n+> error[60; 66) token(\"42.2e-\") msg(Missing digits after the exponent symbol)\n+> error[67; 73) token(\"42.2E+\") msg(Missing digits after the exponent symbol)\n+> error[74; 80) token(\"42.2E-\") msg(Missing digits after the exponent symbol)\n+> error[82; 91) token(\"42.2e+f32\") msg(Missing digits after the exponent symbol)\n+> error[92; 101) token(\"42.2e-f32\") msg(Missing digits after the exponent symbol)\n+> error[102; 111) token(\"42.2E+f32\") msg(Missing digits after the exponent symbol)\n+> error[112; 121) token(\"42.2E-f32\") msg(Missing digits after the exponent symbol)"}, {"sha": "a7698a404a87dc1ef9a86344e1dc2ea58ba0e30b", "filename": "crates/ra_syntax/test_data/lexer/err/0057_lifetime_strarts_with_a_number.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0057_lifetime_strarts_with_a_number.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0057_lifetime_strarts_with_a_number.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0057_lifetime_strarts_with_a_number.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,2 @@\n+'1\n+'1lifetime"}, {"sha": "89b38bfacfa5b8c36ccf8c9376c340f8cc7b6bd1", "filename": "crates/ra_syntax/test_data/lexer/err/0057_lifetime_strarts_with_a_number.txt", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0057_lifetime_strarts_with_a_number.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0057_lifetime_strarts_with_a_number.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Ferr%2F0057_lifetime_strarts_with_a_number.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,6 @@\n+LIFETIME 2 \"\\'1\"\n+WHITESPACE 1 \"\\n\"\n+LIFETIME 10 \"\\'1lifetime\"\n+WHITESPACE 1 \"\\n\"\n+> error[0; 2) token(\"\\'1\") msg(Lifetime name cannot start with a number)\n+> error[3; 13) token(\"\\'1lifetime\") msg(Lifetime name cannot start with a number)"}, {"sha": "95d09f2b10159347eece71399a7e2e907ea3df4f", "filename": "crates/ra_syntax/test_data/lexer/ok/0001_hello.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0001_hello.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0001_hello.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0001_hello.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "previous_filename": "crates/ra_syntax/test_data/lexer/0001_hello.rs"}, {"sha": "27a5940a9c1ca360e1e87ce4fb3c507cba120f70", "filename": "crates/ra_syntax/test_data/lexer/ok/0001_hello.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0001_hello.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0001_hello.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0001_hello.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "previous_filename": "crates/ra_syntax/test_data/lexer/0001_hello.txt"}, {"sha": "08fce1418a73608e5513f8173cc4a30749e8c1ea", "filename": "crates/ra_syntax/test_data/lexer/ok/0002_whitespace.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0002_whitespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0002_whitespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0002_whitespace.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "previous_filename": "crates/ra_syntax/test_data/lexer/0002_whitespace.rs"}, {"sha": "01d260918ee57db94ad80f55696e70f6765e32fd", "filename": "crates/ra_syntax/test_data/lexer/ok/0002_whitespace.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0002_whitespace.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0002_whitespace.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0002_whitespace.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "previous_filename": "crates/ra_syntax/test_data/lexer/0002_whitespace.txt"}, {"sha": "c05c9c009d7e69382aae1bb987561c35f759686e", "filename": "crates/ra_syntax/test_data/lexer/ok/0003_ident.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0003_ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0003_ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0003_ident.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "previous_filename": "crates/ra_syntax/test_data/lexer/0003_ident.rs"}, {"sha": "4a0d5c0531205ef09d698894d4874629bc5b750f", "filename": "crates/ra_syntax/test_data/lexer/ok/0003_ident.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0003_ident.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0003_ident.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0003_ident.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "previous_filename": "crates/ra_syntax/test_data/lexer/0003_ident.txt"}, {"sha": "bc761c235d8977fe87cfc258d6ed29ec592ed85d", "filename": "crates/ra_syntax/test_data/lexer/ok/0004_numbers.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0004_numbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0004_numbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0004_numbers.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -1,9 +1,9 @@\n-0 0b 0o 0x 00 0_ 0. 0e 0E 0z\n+0 00 0_ 0. 0z\n 01790 0b1790 0o1790 0x1790aAbBcCdDeEfF 001279 0_1279 0.1279 0e1279 0E1279\n 0..2\n 0.foo()\n 0e+1\n 0.e+1\n 0.0E-2\n 0___0.10000____0000e+111__\n-1i64 92.0f32 11__s\n\\ No newline at end of file\n+1i64 92.0f32 11__s", "previous_filename": "crates/ra_syntax/test_data/lexer/0004_numbers.rs"}, {"sha": "e19fc5789e355026cbf945ea0c88abc89fc4fb24", "filename": "crates/ra_syntax/test_data/lexer/ok/0004_numbers.txt", "status": "renamed", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0004_numbers.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0004_numbers.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0004_numbers.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -1,21 +1,11 @@\n INT_NUMBER 1 \"0\"\n WHITESPACE 1 \" \"\n-INT_NUMBER 2 \"0b\"\n-WHITESPACE 1 \" \"\n-INT_NUMBER 2 \"0o\"\n-WHITESPACE 1 \" \"\n-INT_NUMBER 2 \"0x\"\n-WHITESPACE 1 \" \"\n INT_NUMBER 2 \"00\"\n WHITESPACE 1 \" \"\n INT_NUMBER 2 \"0_\"\n WHITESPACE 1 \" \"\n FLOAT_NUMBER 2 \"0.\"\n WHITESPACE 1 \" \"\n-FLOAT_NUMBER 2 \"0e\"\n-WHITESPACE 1 \" \"\n-FLOAT_NUMBER 2 \"0E\"\n-WHITESPACE 1 \" \"\n INT_NUMBER 2 \"0z\"\n WHITESPACE 1 \"\\n\"\n INT_NUMBER 5 \"01790\"\n@@ -64,3 +54,4 @@ WHITESPACE 1 \" \"\n FLOAT_NUMBER 7 \"92.0f32\"\n WHITESPACE 1 \" \"\n INT_NUMBER 5 \"11__s\"\n+WHITESPACE 1 \"\\n\"", "previous_filename": "crates/ra_syntax/test_data/lexer/0004_numbers.txt"}, {"sha": "487569b5ae3c4d579595ac97668b788cb5bee418", "filename": "crates/ra_syntax/test_data/lexer/ok/0005_symbols.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0005_symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0005_symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0005_symbols.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "previous_filename": "crates/ra_syntax/test_data/lexer/0005_symbols.rs"}, {"sha": "469a90e4222eb527275a06fd527b35207a1b02a6", "filename": "crates/ra_syntax/test_data/lexer/ok/0005_symbols.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0005_symbols.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0005_symbols.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0005_symbols.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "previous_filename": "crates/ra_syntax/test_data/lexer/0005_symbols.txt"}, {"sha": "454ee0a5f61721c71b9d60f8ce931571446cf978", "filename": "crates/ra_syntax/test_data/lexer/ok/0006_chars.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0006_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0006_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0006_chars.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "previous_filename": "crates/ra_syntax/test_data/lexer/0006_chars.rs"}, {"sha": "950954fbc88bdfa3c39ebc9bceaf7617f5e2c219", "filename": "crates/ra_syntax/test_data/lexer/ok/0006_chars.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0006_chars.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0006_chars.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0006_chars.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "previous_filename": "crates/ra_syntax/test_data/lexer/0006_chars.txt"}, {"sha": "b764f1dce3c050a936622b9dfd401c9679cf79fb", "filename": "crates/ra_syntax/test_data/lexer/ok/0007_lifetimes.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0007_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0007_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0007_lifetimes.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "previous_filename": "crates/ra_syntax/test_data/lexer/0007_lifetimes.rs"}, {"sha": "005c29100a060adb07be82b3f1ec7e4ec3a1a734", "filename": "crates/ra_syntax/test_data/lexer/ok/0007_lifetimes.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0007_lifetimes.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0007_lifetimes.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0007_lifetimes.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "previous_filename": "crates/ra_syntax/test_data/lexer/0007_lifetimes.txt"}, {"sha": "b54930f5e699c24bbf5bc2e3a85c478ca8eea605", "filename": "crates/ra_syntax/test_data/lexer/ok/0008_byte_strings.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0008_byte_strings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0008_byte_strings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0008_byte_strings.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "previous_filename": "crates/ra_syntax/test_data/lexer/0008_byte_strings.rs"}, {"sha": "bc03b51a8ab8e5df68ff2a0d8c5f8d10ab47acd5", "filename": "crates/ra_syntax/test_data/lexer/ok/0008_byte_strings.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0008_byte_strings.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0008_byte_strings.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0008_byte_strings.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "previous_filename": "crates/ra_syntax/test_data/lexer/0008_byte_strings.txt"}, {"sha": "4ddb5bffccc55312c51733650d703089c5626b37", "filename": "crates/ra_syntax/test_data/lexer/ok/0009_strings.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0009_strings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0009_strings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0009_strings.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "previous_filename": "crates/ra_syntax/test_data/lexer/0009_strings.rs"}, {"sha": "4cb4d711d6783beff2738cd74d1c78257ebe4513", "filename": "crates/ra_syntax/test_data/lexer/ok/0009_strings.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0009_strings.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0009_strings.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0009_strings.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "previous_filename": "crates/ra_syntax/test_data/lexer/0009_strings.txt"}, {"sha": "4b6653f9cc9d23ce7f98500b92e2de9215094f44", "filename": "crates/ra_syntax/test_data/lexer/ok/0010_single_line_comments.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0010_single_line_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0010_single_line_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0010_single_line_comments.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,12 @@\n+#!/usr/bin/env bash\n+// hello\n+//! World\n+//!! Inner line doc\n+/// Outer line doc\n+//// Just a comment\n+\n+//\n+//!\n+//!!\n+///\n+////"}, {"sha": "98a3818c06c91567ee143790fcfd01cb311472e4", "filename": "crates/ra_syntax/test_data/lexer/ok/0010_single_line_comments.txt", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0010_single_line_comments.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0010_single_line_comments.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0010_single_line_comments.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -0,0 +1,22 @@\n+SHEBANG 19 \"#!/usr/bin/env bash\"\n+WHITESPACE 1 \"\\n\"\n+COMMENT 8 \"// hello\"\n+WHITESPACE 1 \"\\n\"\n+COMMENT 9 \"//! World\"\n+WHITESPACE 1 \"\\n\"\n+COMMENT 19 \"//!! Inner line doc\"\n+WHITESPACE 1 \"\\n\"\n+COMMENT 18 \"/// Outer line doc\"\n+WHITESPACE 1 \"\\n\"\n+COMMENT 19 \"//// Just a comment\"\n+WHITESPACE 2 \"\\n\\n\"\n+COMMENT 2 \"//\"\n+WHITESPACE 1 \"\\n\"\n+COMMENT 3 \"//!\"\n+WHITESPACE 1 \"\\n\"\n+COMMENT 4 \"//!!\"\n+WHITESPACE 1 \"\\n\"\n+COMMENT 3 \"///\"\n+WHITESPACE 1 \"\\n\"\n+COMMENT 4 \"////\"\n+WHITESPACE 1 \"\\n\""}, {"sha": "1e91bff4e7d83b662f500d05976d24f37fff0d3e", "filename": "crates/ra_syntax/test_data/lexer/ok/0011_keywords.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0011_keywords.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0011_keywords.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0011_keywords.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "previous_filename": "crates/ra_syntax/test_data/lexer/0011_keywords.rs"}, {"sha": "22c00eefb62bd818bc9c99029b999064d33f6224", "filename": "crates/ra_syntax/test_data/lexer/ok/0011_keywords.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0011_keywords.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0011_keywords.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0011_keywords.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "previous_filename": "crates/ra_syntax/test_data/lexer/0011_keywords.txt"}, {"sha": "b880a59d952f95ab1a00e91e29b6326e329b82e0", "filename": "crates/ra_syntax/test_data/lexer/ok/0012_block_comment.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0012_block_comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0012_block_comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0012_block_comment.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -1,4 +1,3 @@\n /* */\n /**/\n /* /* */ */\n-/*", "previous_filename": "crates/ra_syntax/test_data/lexer/00012_block_comment.rs"}, {"sha": "2618e287e637c14c6fdf26efeda77a355e4f7a2b", "filename": "crates/ra_syntax/test_data/lexer/ok/0012_block_comment.txt", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0012_block_comment.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0012_block_comment.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0012_block_comment.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "patch": "@@ -4,4 +4,3 @@ COMMENT 4 \"/**/\"\n WHITESPACE 1 \"\\n\"\n COMMENT 11 \"/* /* */ */\"\n WHITESPACE 1 \"\\n\"\n-COMMENT 3 \"/*\\n\"", "previous_filename": "crates/ra_syntax/test_data/lexer/00012_block_comment.txt"}, {"sha": "e5ed0b693b390d94f2826d0bb0af5dee2fd990a2", "filename": "crates/ra_syntax/test_data/lexer/ok/0013_raw_strings.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0013_raw_strings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0013_raw_strings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0013_raw_strings.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "previous_filename": "crates/ra_syntax/test_data/lexer/0013_raw_strings.rs"}, {"sha": "9cf0957d1e69932d371c0cf9518b7e76bdf7993d", "filename": "crates/ra_syntax/test_data/lexer/ok/0013_raw_strings.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0013_raw_strings.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0013_raw_strings.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0013_raw_strings.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "previous_filename": "crates/ra_syntax/test_data/lexer/0013_raw_strings.txt"}, {"sha": "b40a1b6a248d316220d367b92fa33362a34dbd08", "filename": "crates/ra_syntax/test_data/lexer/ok/0014_raw_ident.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0014_raw_ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0014_raw_ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0014_raw_ident.rs?ref=918547dbe9a2907401102eba491ac25cebe1404d", "previous_filename": "crates/ra_syntax/test_data/lexer/0016_raw_ident.rs"}, {"sha": "484689693baf1250f49be3154018e1e1bb78771f", "filename": "crates/ra_syntax/test_data/lexer/ok/0014_raw_ident.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0014_raw_ident.txt", "raw_url": "https://github.com/rust-lang/rust/raw/918547dbe9a2907401102eba491ac25cebe1404d/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0014_raw_ident.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Flexer%2Fok%2F0014_raw_ident.txt?ref=918547dbe9a2907401102eba491ac25cebe1404d", "previous_filename": "crates/ra_syntax/test_data/lexer/0016_raw_ident.txt"}]}