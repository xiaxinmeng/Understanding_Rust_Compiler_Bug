{"sha": "26792f0607bea2b03daa5195c2688fd53289042b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NzkyZjA2MDdiZWEyYjAzZGFhNTE5NWMyNjg4ZmQ1MzI4OTA0MmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-01T04:47:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-01T04:47:46Z"}, "message": "Auto merge of #47540 - Manishearth:suggestion, r=nrc\n\nAdd approximate suggestions for rustfix\n\nThis adds `span_approximate_suggestion()` that lets you emit a\nsuggestion marked as \"non-machine applicable\" in the JSON output. UI\nusers see no difference. This is for when rustc and clippy wish to\n emit suggestions which will make sense to the reader (e.g. they may\nhave placeholders like `<type>`) but are not source-applicable, so that\nrustfix/etc can ignore these.\n\nfixes #39254", "tree": {"sha": "35a3660501f3d9c285d4fbfcdf2efd01777574a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35a3660501f3d9c285d4fbfcdf2efd01777574a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26792f0607bea2b03daa5195c2688fd53289042b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26792f0607bea2b03daa5195c2688fd53289042b", "html_url": "https://github.com/rust-lang/rust/commit/26792f0607bea2b03daa5195c2688fd53289042b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26792f0607bea2b03daa5195c2688fd53289042b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "html_url": "https://github.com/rust-lang/rust/commit/8ccab7eed5f4fc93500fbf242e575073ca70d7cb"}, {"sha": "540f95d9fad41a605e4c8b898d77f47374a76cbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/540f95d9fad41a605e4c8b898d77f47374a76cbd", "html_url": "https://github.com/rust-lang/rust/commit/540f95d9fad41a605e4c8b898d77f47374a76cbd"}], "stats": {"total": 123, "additions": 109, "deletions": 14}, "files": [{"sha": "9543d01597d04b0d6a8769c8de54f9a339711fd8", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26792f0607bea2b03daa5195c2688fd53289042b/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26792f0607bea2b03daa5195c2688fd53289042b/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=26792f0607bea2b03daa5195c2688fd53289042b", "patch": "@@ -1288,6 +1288,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     dep_info_omit_d_target: bool = (false, parse_bool, [TRACKED],\n         \"in dep-info output, omit targets for tracking dependencies of the dep-info files \\\n          themselves\"),\n+    approximate_suggestions: bool = (false, parse_bool, [UNTRACKED],\n+        \"include machine-applicability of suggestions in JSON output\"),\n     unpretty: Option<String> = (None, parse_unpretty, [UNTRACKED],\n         \"Present the input source, unstable (and less-pretty) variants;\n         valid types are any of the types for `--pretty`, as well as:"}, {"sha": "f4a00a43d8d92b5dcb471e5bb1c3e973906bab0b", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26792f0607bea2b03daa5195c2688fd53289042b/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26792f0607bea2b03daa5195c2688fd53289042b/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=26792f0607bea2b03daa5195c2688fd53289042b", "patch": "@@ -913,10 +913,12 @@ pub fn build_session_with_codemap(sopts: config::Options,\n             Box::new(EmitterWriter::new(dst, Some(codemap.clone()), false, false))\n         }\n         (config::ErrorOutputType::Json(pretty), None) => {\n-            Box::new(JsonEmitter::stderr(Some(registry), codemap.clone(), pretty))\n+            Box::new(JsonEmitter::stderr(Some(registry), codemap.clone(),\n+                     pretty, sopts.debugging_opts.approximate_suggestions))\n         }\n         (config::ErrorOutputType::Json(pretty), Some(dst)) => {\n-            Box::new(JsonEmitter::new(dst, Some(registry), codemap.clone(), pretty))\n+            Box::new(JsonEmitter::new(dst, Some(registry), codemap.clone(),\n+                     pretty, sopts.debugging_opts.approximate_suggestions))\n         }\n         (config::ErrorOutputType::Short(color_config), None) => {\n             Box::new(EmitterWriter::stderr(color_config, Some(codemap.clone()), true, false))"}, {"sha": "40e4efb397d305087b223e4cad8d8143f3d771a7", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/26792f0607bea2b03daa5195c2688fd53289042b/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26792f0607bea2b03daa5195c2688fd53289042b/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=26792f0607bea2b03daa5195c2688fd53289042b", "patch": "@@ -222,6 +222,7 @@ impl Diagnostic {\n             }],\n             msg: msg.to_owned(),\n             show_code_when_inline: false,\n+            approximate: false,\n         });\n         self\n     }\n@@ -252,6 +253,7 @@ impl Diagnostic {\n             }],\n             msg: msg.to_owned(),\n             show_code_when_inline: true,\n+            approximate: false,\n         });\n         self\n     }\n@@ -267,6 +269,41 @@ impl Diagnostic {\n             }).collect(),\n             msg: msg.to_owned(),\n             show_code_when_inline: true,\n+            approximate: false,\n+        });\n+        self\n+    }\n+\n+    /// This is a suggestion that may contain mistakes or fillers and should\n+    /// be read and understood by a human.\n+    pub fn span_approximate_suggestion(&mut self, sp: Span, msg: &str,\n+                                       suggestion: String) -> &mut Self {\n+        self.suggestions.push(CodeSuggestion {\n+            substitutions: vec![Substitution {\n+                parts: vec![SubstitutionPart {\n+                    snippet: suggestion,\n+                    span: sp,\n+                }],\n+            }],\n+            msg: msg.to_owned(),\n+            show_code_when_inline: true,\n+            approximate: true,\n+        });\n+        self\n+    }\n+\n+    pub fn span_approximate_suggestions(&mut self, sp: Span, msg: &str,\n+                                        suggestions: Vec<String>) -> &mut Self {\n+        self.suggestions.push(CodeSuggestion {\n+            substitutions: suggestions.into_iter().map(|snippet| Substitution {\n+                parts: vec![SubstitutionPart {\n+                    snippet,\n+                    span: sp,\n+                }],\n+            }).collect(),\n+            msg: msg.to_owned(),\n+            show_code_when_inline: true,\n+            approximate: true,\n         });\n         self\n     }"}, {"sha": "2536fc648c70ad693f8356b6dfc8d2bf9345e11f", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26792f0607bea2b03daa5195c2688fd53289042b/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26792f0607bea2b03daa5195c2688fd53289042b/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=26792f0607bea2b03daa5195c2688fd53289042b", "patch": "@@ -186,6 +186,16 @@ impl<'a> DiagnosticBuilder<'a> {\n                                      msg: &str,\n                                      suggestions: Vec<String>)\n                                      -> &mut Self);\n+    forward!(pub fn span_approximate_suggestion(&mut self,\n+                                                sp: Span,\n+                                                msg: &str,\n+                                                suggestion: String)\n+                                                -> &mut Self);\n+    forward!(pub fn span_approximate_suggestions(&mut self,\n+                                                 sp: Span,\n+                                                 msg: &str,\n+                                                 suggestions: Vec<String>)\n+                                                 -> &mut Self);\n     forward!(pub fn set_span<S: Into<MultiSpan>>(&mut self, sp: S) -> &mut Self);\n     forward!(pub fn code(&mut self, s: DiagnosticId) -> &mut Self);\n "}, {"sha": "236698ed2d45d77ba5099953daf89ba83b626201", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26792f0607bea2b03daa5195c2688fd53289042b/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26792f0607bea2b03daa5195c2688fd53289042b/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=26792f0607bea2b03daa5195c2688fd53289042b", "patch": "@@ -83,6 +83,12 @@ pub struct CodeSuggestion {\n     pub substitutions: Vec<Substitution>,\n     pub msg: String,\n     pub show_code_when_inline: bool,\n+    /// Whether or not the suggestion is approximate\n+    ///\n+    /// Sometimes we may show suggestions with placeholders,\n+    /// which are useful for users but not useful for\n+    /// tools like rustfix\n+    pub approximate: bool,\n }\n \n #[derive(Clone, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]"}, {"sha": "3e523fca92a037a969a38270e74caaa20da2a7c7", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/26792f0607bea2b03daa5195c2688fd53289042b/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26792f0607bea2b03daa5195c2688fd53289042b/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=26792f0607bea2b03daa5195c2688fd53289042b", "patch": "@@ -788,6 +788,11 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                                        is just used for rustc unit tests \\\n                                                        and will never be stable\",\n                                                       cfg_fn!(rustc_attrs))),\n+    (\"rustc_serialize_exclude_null\", Normal, Gated(Stability::Unstable,\n+                                             \"rustc_attrs\",\n+                                             \"the `#[rustc_serialize_exclude_null]` attribute \\\n+                                              is an internal-only feature\",\n+                                             cfg_fn!(rustc_attrs))),\n     (\"rustc_synthetic\", Whitelisted, Gated(Stability::Unstable,\n                                                       \"rustc_attrs\",\n                                                       \"this attribute \\"}, {"sha": "98d5fa8f797fa7e105838655419bfd607feb29b7", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/26792f0607bea2b03daa5195c2688fd53289042b/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26792f0607bea2b03daa5195c2688fd53289042b/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=26792f0607bea2b03daa5195c2688fd53289042b", "patch": "@@ -38,34 +38,41 @@ pub struct JsonEmitter {\n     registry: Option<Registry>,\n     cm: Rc<CodeMapper + 'static>,\n     pretty: bool,\n+    /// Whether \"approximate suggestions\" are enabled in the config\n+    approximate_suggestions: bool,\n }\n \n impl JsonEmitter {\n     pub fn stderr(registry: Option<Registry>,\n                   code_map: Rc<CodeMap>,\n-                  pretty: bool) -> JsonEmitter {\n+                  pretty: bool,\n+                  approximate_suggestions: bool) -> JsonEmitter {\n         JsonEmitter {\n             dst: Box::new(io::stderr()),\n             registry,\n             cm: code_map,\n             pretty,\n+            approximate_suggestions,\n         }\n     }\n \n     pub fn basic(pretty: bool) -> JsonEmitter {\n         let file_path_mapping = FilePathMapping::empty();\n-        JsonEmitter::stderr(None, Rc::new(CodeMap::new(file_path_mapping)), pretty)\n+        JsonEmitter::stderr(None, Rc::new(CodeMap::new(file_path_mapping)),\n+                            pretty, false)\n     }\n \n     pub fn new(dst: Box<Write + Send>,\n                registry: Option<Registry>,\n                code_map: Rc<CodeMap>,\n-               pretty: bool) -> JsonEmitter {\n+               pretty: bool,\n+               approximate_suggestions: bool) -> JsonEmitter {\n         JsonEmitter {\n             dst,\n             registry,\n             cm: code_map,\n             pretty,\n+            approximate_suggestions,\n         }\n     }\n }\n@@ -101,6 +108,7 @@ struct Diagnostic {\n }\n \n #[derive(RustcEncodable)]\n+#[allow(unused_attributes)]\n struct DiagnosticSpan {\n     file_name: String,\n     byte_start: u32,\n@@ -121,6 +129,9 @@ struct DiagnosticSpan {\n     /// If we are suggesting a replacement, this will contain text\n     /// that should be sliced in atop this span.\n     suggested_replacement: Option<String>,\n+    /// If the suggestion is approximate\n+    #[rustc_serialize_exclude_null]\n+    suggestion_approximate: Option<bool>,\n     /// Macro invocations that created the code at this span, if any.\n     expansion: Option<Box<DiagnosticSpanMacroExpansion>>,\n }\n@@ -220,7 +231,7 @@ impl Diagnostic {\n \n impl DiagnosticSpan {\n     fn from_span_label(span: SpanLabel,\n-                       suggestion: Option<&String>,\n+                       suggestion: Option<(&String, bool)>,\n                        je: &JsonEmitter)\n                        -> DiagnosticSpan {\n         Self::from_span_etc(span.span,\n@@ -233,7 +244,7 @@ impl DiagnosticSpan {\n     fn from_span_etc(span: Span,\n                      is_primary: bool,\n                      label: Option<String>,\n-                     suggestion: Option<&String>,\n+                     suggestion: Option<(&String, bool)>,\n                      je: &JsonEmitter)\n                      -> DiagnosticSpan {\n         // obtain the full backtrace from the `macro_backtrace`\n@@ -253,7 +264,7 @@ impl DiagnosticSpan {\n     fn from_span_full(span: Span,\n                       is_primary: bool,\n                       label: Option<String>,\n-                      suggestion: Option<&String>,\n+                      suggestion: Option<(&String, bool)>,\n                       mut backtrace: vec::IntoIter<MacroBacktrace>,\n                       je: &JsonEmitter)\n                       -> DiagnosticSpan {\n@@ -281,6 +292,13 @@ impl DiagnosticSpan {\n                 def_site_span,\n             })\n         });\n+\n+        let suggestion_approximate = if je.approximate_suggestions {\n+             suggestion.map(|x| x.1)\n+        } else {\n+            None\n+        };\n+\n         DiagnosticSpan {\n             file_name: start.file.name.to_string(),\n             byte_start: span.lo().0 - start.file.start_pos.0,\n@@ -291,7 +309,8 @@ impl DiagnosticSpan {\n             column_end: end.col.0 + 1,\n             is_primary,\n             text: DiagnosticSpanLine::from_span(span, je),\n-            suggested_replacement: suggestion.cloned(),\n+            suggested_replacement: suggestion.map(|x| x.0.clone()),\n+            suggestion_approximate,\n             expansion: backtrace_step,\n             label,\n         }\n@@ -309,14 +328,15 @@ impl DiagnosticSpan {\n         suggestion.substitutions\n                       .iter()\n                       .flat_map(|substitution| {\n-                          substitution.parts.iter().map(move |suggestion| {\n+                          substitution.parts.iter().map(move |suggestion_inner| {\n                               let span_label = SpanLabel {\n-                                  span: suggestion.span,\n+                                  span: suggestion_inner.span,\n                                   is_primary: true,\n                                   label: None,\n                               };\n                               DiagnosticSpan::from_span_label(span_label,\n-                                                              Some(&suggestion.snippet),\n+                                                              Some((&suggestion_inner.snippet,\n+                                                                   suggestion.approximate)),\n                                                               je)\n                           })\n                       })"}, {"sha": "9181cca215c848602d3f8bbe1a93a3ac45561588", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26792f0607bea2b03daa5195c2688fd53289042b/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26792f0607bea2b03daa5195c2688fd53289042b/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=26792f0607bea2b03daa5195c2688fd53289042b", "patch": "@@ -25,6 +25,7 @@\n #![feature(match_default_bindings)]\n #![feature(i128_type)]\n #![feature(const_atomic_usize_new)]\n+#![feature(rustc_attrs)]\n \n // See librustc_cratesio_shim/Cargo.toml for a comment explaining this.\n #[allow(unused_extern_crates)]"}, {"sha": "743f22b6b314075a34d3a76c9cc44de77fb6abab", "filename": "src/libsyntax_ext/deriving/encodable.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/26792f0607bea2b03daa5195c2688fd53289042b/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26792f0607bea2b03daa5195c2688fd53289042b/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs?ref=26792f0607bea2b03daa5195c2688fd53289042b", "patch": "@@ -190,7 +190,7 @@ fn encodable_substructure(cx: &mut ExtCtxt,\n         Struct(_, ref fields) => {\n             let emit_struct_field = cx.ident_of(\"emit_struct_field\");\n             let mut stmts = Vec::new();\n-            for (i, &FieldInfo { name, ref self_, span, .. }) in fields.iter().enumerate() {\n+            for (i, &FieldInfo { name, ref self_, span, attrs, .. }) in fields.iter().enumerate() {\n                 let name = match name {\n                     Some(id) => id.name,\n                     None => Symbol::intern(&format!(\"_field{}\", i)),\n@@ -212,7 +212,19 @@ fn encodable_substructure(cx: &mut ExtCtxt,\n                 } else {\n                     cx.expr(span, ExprKind::Ret(Some(call)))\n                 };\n-                stmts.push(cx.stmt_expr(call));\n+\n+                // This exists for https://github.com/rust-lang/rust/pull/47540\n+                //\n+                // If we decide to stabilize that flag this can be removed\n+                let expr = if attrs.iter().any(|a| a.check_name(\"rustc_serialize_exclude_null\")) {\n+                    let is_some = cx.ident_of(\"is_some\");\n+                    let condition = cx.expr_method_call(span, self_.clone(), is_some, vec![]);\n+                    cx.expr_if(span, condition, call, None)\n+                } else {\n+                    call\n+                };\n+                let stmt = cx.stmt_expr(expr);\n+                stmts.push(stmt);\n             }\n \n             // unit structs have no fields and need to return Ok()"}]}