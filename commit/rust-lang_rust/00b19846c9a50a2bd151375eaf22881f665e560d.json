{"sha": "00b19846c9a50a2bd151375eaf22881f665e560d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwYjE5ODQ2YzlhNTBhMmJkMTUxMzc1ZWFmMjI4ODFmNjY1ZTU2MGQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-16T21:04:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-16T21:04:42Z"}, "message": "Merge #10257\n\n10257: assists: turn while into loop r=Veykril a=agluszak\n\nImplements an assist to turn a `while` loop into a `loop` loop, as requested in #10214. \r\nI'm not sure sure what the guidelines are regarding naming assists convert_x_to_y vs replace_x_with_y.\r\n\r\nThis is my first commit to rust-analyzer :D Thank you `@matklad` for your awesome Explaining rust-analyzer series <3\r\n\r\nCloses #10214 \n\nCo-authored-by: Andrzej G\u0142uszak <gluszak.andrzej@gmail.com>", "tree": {"sha": "a6885d6bcce8b1197fb50646efe3dd5aed8f88ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6885d6bcce8b1197fb50646efe3dd5aed8f88ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00b19846c9a50a2bd151375eaf22881f665e560d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhQ7FqCRBK7hj4Ov3rIwAABBQIAIchN7PeKKdggs78iMA8Q5z6\nwXXmbYFWRTQd+vyffiDi/TghPIyI7OarvLW5rGEfaj5T3N2RASiJY4mtqd6P1y/f\nxawwJt8iVn5sqQjhcYNU4Dv5Arj8W1BvRE1USqRnbsjzIxZSiR135EBvktB26edo\nHjCw+9h9Na+zY9+XHpXJJQLd8cQc4dvYJhe/qLJl4ZT8ptelu8AkvIHuUHaSdjM6\nj8AvkuI9LBbY53T8UFVdIynkLiOasFZN/NK/qNVqGnctabQs7TC+/BD6/N2L2Vcd\n+ISRnLnj9PMRQGT2kqBzIy67GjDIr5im5vlkxQfJoRv2P7pZ+qUcF9xz2OLzRJI=\n=ECSA\n-----END PGP SIGNATURE-----\n", "payload": "tree a6885d6bcce8b1197fb50646efe3dd5aed8f88ed\nparent ae36af2bd43906ddb1eeff96d76754f012c0a2c7\nparent 11a56f886bb07a5207f1236536247271cbbe7a12\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1631826282 +0000\ncommitter GitHub <noreply@github.com> 1631826282 +0000\n\nMerge #10257\n\n10257: assists: turn while into loop r=Veykril a=agluszak\n\nImplements an assist to turn a `while` loop into a `loop` loop, as requested in #10214. \r\nI'm not sure sure what the guidelines are regarding naming assists convert_x_to_y vs replace_x_with_y.\r\n\r\nThis is my first commit to rust-analyzer :D Thank you `@matklad` for your awesome Explaining rust-analyzer series <3\r\n\r\nCloses #10214 \n\nCo-authored-by: Andrzej G\u0142uszak <gluszak.andrzej@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00b19846c9a50a2bd151375eaf22881f665e560d", "html_url": "https://github.com/rust-lang/rust/commit/00b19846c9a50a2bd151375eaf22881f665e560d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00b19846c9a50a2bd151375eaf22881f665e560d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae36af2bd43906ddb1eeff96d76754f012c0a2c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae36af2bd43906ddb1eeff96d76754f012c0a2c7", "html_url": "https://github.com/rust-lang/rust/commit/ae36af2bd43906ddb1eeff96d76754f012c0a2c7"}, {"sha": "11a56f886bb07a5207f1236536247271cbbe7a12", "url": "https://api.github.com/repos/rust-lang/rust/commits/11a56f886bb07a5207f1236536247271cbbe7a12", "html_url": "https://github.com/rust-lang/rust/commit/11a56f886bb07a5207f1236536247271cbbe7a12"}], "stats": {"total": 220, "additions": 220, "deletions": 0}, "files": [{"sha": "cbddc106ffb7cc8166ee8f71ffdb7d9dbf409e93", "filename": "crates/ide_assists/src/handlers/convert_while_to_loop.rs", "status": "added", "additions": 189, "deletions": 0, "changes": 189, "blob_url": "https://github.com/rust-lang/rust/blob/00b19846c9a50a2bd151375eaf22881f665e560d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b19846c9a50a2bd151375eaf22881f665e560d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs?ref=00b19846c9a50a2bd151375eaf22881f665e560d", "patch": "@@ -0,0 +1,189 @@\n+use std::iter::once;\n+\n+use syntax::{\n+    ast::{\n+        self,\n+        edit::{AstNodeEdit, IndentLevel},\n+        make, LoopBodyOwner,\n+    },\n+    AstNode, T,\n+};\n+\n+use crate::{\n+    assist_context::{AssistContext, Assists},\n+    utils::invert_boolean_expression,\n+    AssistId, AssistKind,\n+};\n+\n+// Assist: convert_while_to_loop\n+//\n+// Replace a while with a loop.\n+//\n+// ```\n+// fn main() {\n+//     $0while cond {\n+//         foo();\n+//     }\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     loop {\n+//         if !cond {\n+//             break;\n+//         }\n+//         foo();\n+//     }\n+// }\n+// ```\n+pub(crate) fn convert_while_to_loop(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let while_kw = ctx.find_token_syntax_at_offset(T![while])?;\n+    let while_expr: ast::WhileExpr = while_kw.parent().and_then(ast::WhileExpr::cast)?;\n+    let while_body = while_expr.loop_body()?;\n+    let cond = while_expr.condition()?;\n+\n+    // Don't handle while let\n+    if let Some(_) = cond.pat() {\n+        return None;\n+    };\n+\n+    let cond_expr = cond.expr()?;\n+\n+    let target = while_expr.syntax().text_range();\n+    acc.add(\n+        AssistId(\"convert_while_to_loop\", AssistKind::RefactorRewrite),\n+        \"Convert while to loop\",\n+        target,\n+        |edit| {\n+            let while_indent_level = IndentLevel::from_node(while_expr.syntax());\n+\n+            let replacement = {\n+                let if_expr = {\n+                    let cond = invert_boolean_expression(cond_expr);\n+                    let then_branch = make::block_expr(\n+                        once(make::expr_stmt(make::expr_break(None)).into()),\n+                        None,\n+                    );\n+\n+                    make::expr_if(make::condition(cond, None), then_branch, None)\n+                };\n+\n+                let if_expr = if_expr.indent(while_indent_level);\n+                let stmts = once(make::expr_stmt(if_expr).into()).chain(while_body.statements());\n+\n+                let block_expr = make::block_expr(stmts, while_body.tail_expr());\n+\n+                let block_expr = block_expr.indent(while_indent_level);\n+\n+                make::expr_loop(block_expr)\n+            };\n+\n+            edit.replace(target, replacement.syntax().text())\n+        },\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn convert_inside_fn() {\n+        check_assist(\n+            convert_while_to_loop,\n+            r#\"\n+fn main() {\n+    while$0 cond {\n+        foo();\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    loop {\n+        if !cond {\n+            break;\n+        }\n+        foo();\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_busy_wait() {\n+        check_assist(\n+            convert_while_to_loop,\n+            r#\"\n+fn main() {\n+    while$0 cond() {}\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    loop {\n+        if !cond() {\n+            break;\n+        }\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_trailing_expr() {\n+        check_assist(\n+            convert_while_to_loop,\n+            r#\"\n+fn main() {\n+    while$0 cond() {\n+        bar()\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    loop {\n+        if !cond() {\n+            break;\n+        }\n+        bar()\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn ignore_while_let() {\n+        check_assist_not_applicable(\n+            convert_while_to_loop,\n+            r#\"\n+fn main() {\n+    while$0 let Some(_) = foo() {\n+        bar();\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn ignore_cursor_in_body() {\n+        check_assist_not_applicable(\n+            convert_while_to_loop,\n+            r#\"\n+fn main() {\n+    while cond {$0\n+        bar();\n+    }\n+}\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "2fb8cb3492dd3baeb04a2e87bf0e922340d4538f", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00b19846c9a50a2bd151375eaf22881f665e560d/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b19846c9a50a2bd151375eaf22881f665e560d/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=00b19846c9a50a2bd151375eaf22881f665e560d", "patch": "@@ -118,6 +118,7 @@ mod handlers {\n     mod convert_iter_for_each_to_for;\n     mod convert_tuple_struct_to_named_struct;\n     mod convert_to_guarded_return;\n+    mod convert_while_to_loop;\n     mod destructure_tuple_binding;\n     mod expand_glob_import;\n     mod extract_function;\n@@ -191,6 +192,7 @@ mod handlers {\n             convert_iter_for_each_to_for::convert_iter_for_each_to_for,\n             convert_to_guarded_return::convert_to_guarded_return,\n             convert_tuple_struct_to_named_struct::convert_tuple_struct_to_named_struct,\n+            convert_while_to_loop::convert_while_to_loop,\n             destructure_tuple_binding::destructure_tuple_binding,\n             expand_glob_import::expand_glob_import,\n             extract_struct_from_enum_variant::extract_struct_from_enum_variant,"}, {"sha": "01db0162e3a093b466513480a4c481afb3e7d028", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/00b19846c9a50a2bd151375eaf22881f665e560d/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b19846c9a50a2bd151375eaf22881f665e560d/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=00b19846c9a50a2bd151375eaf22881f665e560d", "patch": "@@ -367,6 +367,30 @@ impl Point {\n     )\n }\n \n+#[test]\n+fn doctest_convert_while_to_loop() {\n+    check_doc_test(\n+        \"convert_while_to_loop\",\n+        r#####\"\n+fn main() {\n+    $0while cond {\n+        foo();\n+    }\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    loop {\n+        if !cond {\n+            break;\n+        }\n+        foo();\n+    }\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_destructure_tuple_binding() {\n     check_doc_test("}, {"sha": "819d53982f707234608e5a759efa181ac4c50e6d", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/00b19846c9a50a2bd151375eaf22881f665e560d/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b19846c9a50a2bd151375eaf22881f665e560d/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=00b19846c9a50a2bd151375eaf22881f665e560d", "patch": "@@ -316,6 +316,11 @@ pub fn expr_if(\n pub fn expr_for_loop(pat: ast::Pat, expr: ast::Expr, block: ast::BlockExpr) -> ast::Expr {\n     expr_from_text(&format!(\"for {} in {} {}\", pat, expr, block))\n }\n+\n+pub fn expr_loop(block: ast::BlockExpr) -> ast::Expr {\n+    expr_from_text(&format!(\"loop {}\", block))\n+}\n+\n pub fn expr_prefix(op: SyntaxKind, expr: ast::Expr) -> ast::Expr {\n     let token = token(op);\n     expr_from_text(&format!(\"{}{}\", token, expr))"}]}