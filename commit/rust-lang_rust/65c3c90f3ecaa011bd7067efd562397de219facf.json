{"sha": "65c3c90f3ecaa011bd7067efd562397de219facf", "node_id": "C_kwDOAAsO6NoAKDY1YzNjOTBmM2VjYWEwMTFiZDcwNjdlZmQ1NjIzOTdkZTIxOWZhY2Y", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-21T10:03:12Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-27T22:01:12Z"}, "message": "Restrict amount of ignored locals.", "tree": {"sha": "f51d9c52483a19fb88f551fbf5765e4739a0798f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f51d9c52483a19fb88f551fbf5765e4739a0798f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65c3c90f3ecaa011bd7067efd562397de219facf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65c3c90f3ecaa011bd7067efd562397de219facf", "html_url": "https://github.com/rust-lang/rust/commit/65c3c90f3ecaa011bd7067efd562397de219facf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65c3c90f3ecaa011bd7067efd562397de219facf/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c51fc382bda4b268bccb746f007d46ae615f105a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c51fc382bda4b268bccb746f007d46ae615f105a", "html_url": "https://github.com/rust-lang/rust/commit/c51fc382bda4b268bccb746f007d46ae615f105a"}], "stats": {"total": 148, "additions": 135, "deletions": 13}, "files": [{"sha": "63b8dd055bd5b413f4c02d3e6f3d91449dcd4230", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c3c90f3ecaa011bd7067efd562397de219facf/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c3c90f3ecaa011bd7067efd562397de219facf/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=65c3c90f3ecaa011bd7067efd562397de219facf", "patch": "@@ -902,6 +902,8 @@ pub enum LocalInfo<'tcx> {\n     AggregateTemp,\n     /// A temporary created during the pass `Derefer` to avoid it's retagging\n     DerefTemp,\n+    /// A temporary created for borrow checking.\n+    FakeBorrow,\n }\n \n impl<'tcx> LocalDecl<'tcx> {"}, {"sha": "6155f2bb56ce93bdb0f4c72fa6189e53359254f7", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65c3c90f3ecaa011bd7067efd562397de219facf/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c3c90f3ecaa011bd7067efd562397de219facf/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=65c3c90f3ecaa011bd7067efd562397de219facf", "patch": "@@ -140,8 +140,8 @@ pub struct GeneratorSavedTy<'tcx> {\n     pub ty: Ty<'tcx>,\n     /// Source info corresponding to the local in the original MIR body.\n     pub source_info: SourceInfo,\n-    /// Whether the local was introduced as a raw pointer to a static.\n-    pub is_static_ptr: bool,\n+    /// Whether the local should be ignored for trait bound computations.\n+    pub ignore_for_traits: bool,\n }\n \n /// The layout of generator state."}, {"sha": "796164b0d6af39652c2f64f1f019b54267071a80", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c3c90f3ecaa011bd7067efd562397de219facf/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c3c90f3ecaa011bd7067efd562397de219facf/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=65c3c90f3ecaa011bd7067efd562397de219facf", "patch": "@@ -625,7 +625,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         generator_layout\n             .field_tys\n             .iter()\n-            .filter(|decl| !decl.is_static_ptr)\n+            .filter(|decl| !decl.ignore_for_traits)\n             .map(|decl| ty::EarlyBinder(decl.ty))\n     }\n "}, {"sha": "6b960ebdb16f1291c4a6461049e9347e942daf17", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65c3c90f3ecaa011bd7067efd562397de219facf/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c3c90f3ecaa011bd7067efd562397de219facf/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=65c3c90f3ecaa011bd7067efd562397de219facf", "patch": "@@ -1749,6 +1749,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let fake_borrow_ty = tcx.mk_imm_ref(tcx.lifetimes.re_erased, fake_borrow_deref_ty);\n                 let mut fake_borrow_temp = LocalDecl::new(fake_borrow_ty, temp_span);\n                 fake_borrow_temp.internal = self.local_decls[matched_place.local].internal;\n+                fake_borrow_temp.local_info = Some(Box::new(LocalInfo::FakeBorrow));\n                 let fake_borrow_temp = self.local_decls.push(fake_borrow_temp);\n \n                 (matched_place, fake_borrow_temp)"}, {"sha": "e8871ff37f24ab2d3e67740fc2ffd4f8d354b9cf", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/65c3c90f3ecaa011bd7067efd562397de219facf/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c3c90f3ecaa011bd7067efd562397de219facf/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=65c3c90f3ecaa011bd7067efd562397de219facf", "patch": "@@ -879,7 +879,7 @@ fn sanitize_witness<'tcx>(\n \n     let mut mismatches = Vec::new();\n     for fty in &layout.field_tys {\n-        if fty.is_static_ptr {\n+        if fty.ignore_for_traits {\n             continue;\n         }\n         let decl_ty = tcx.normalize_erasing_regions(param_env, fty.ty);\n@@ -904,6 +904,7 @@ fn sanitize_witness<'tcx>(\n }\n \n fn compute_layout<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n     liveness: LivenessInfo,\n     body: &Body<'tcx>,\n ) -> (\n@@ -923,15 +924,33 @@ fn compute_layout<'tcx>(\n     let mut locals = IndexVec::<GeneratorSavedLocal, _>::new();\n     let mut tys = IndexVec::<GeneratorSavedLocal, _>::new();\n     for (saved_local, local) in saved_locals.iter_enumerated() {\n+        debug!(\"generator saved local {:?} => {:?}\", saved_local, local);\n+\n         locals.push(local);\n         let decl = &body.local_decls[local];\n-        let decl = GeneratorSavedTy {\n-            ty: decl.ty,\n-            source_info: decl.source_info,\n-            is_static_ptr: decl.internal,\n+        debug!(?decl);\n+\n+        let ignore_for_traits = if tcx.sess.opts.unstable_opts.drop_tracking_mir {\n+            match decl.local_info {\n+                // Do not include raw pointers created from accessing `static` items, as those could\n+                // well be re-created by another access to the same static.\n+                Some(box LocalInfo::StaticRef { is_thread_local, .. }) => !is_thread_local,\n+                // Fake borrows are only read by fake reads, so do not have any reality in\n+                // post-analysis MIR.\n+                Some(box LocalInfo::FakeBorrow) => true,\n+                _ => false,\n+            }\n+        } else {\n+            // FIXME(#105084) HIR-based drop tracking does not account for all the temporaries that\n+            // MIR building may introduce. This leads to wrongly ignored types, but this is\n+            // necessary for internal consistency and to avoid ICEs.\n+            decl.internal\n         };\n+        let decl =\n+            GeneratorSavedTy { ty: decl.ty, source_info: decl.source_info, ignore_for_traits };\n+        debug!(?decl);\n+\n         tys.push(decl);\n-        debug!(\"generator saved local {:?} => {:?}\", saved_local, local);\n     }\n \n     // Leave empty variants for the UNRESUMED, RETURNED, and POISONED states.\n@@ -1401,7 +1420,7 @@ pub(crate) fn mir_generator_witnesses<'tcx>(\n     // Extract locals which are live across suspension point into `layout`\n     // `remap` gives a mapping from local indices onto generator struct indices\n     // `storage_liveness` tells us which locals have live storage at suspension points\n-    let (_, generator_layout, _) = compute_layout(liveness_info, body);\n+    let (_, generator_layout, _) = compute_layout(tcx, liveness_info, body);\n \n     if tcx.sess.opts.unstable_opts.drop_tracking_mir {\n         check_suspend_tys(tcx, &generator_layout, &body);\n@@ -1503,7 +1522,7 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n         // Extract locals which are live across suspension point into `layout`\n         // `remap` gives a mapping from local indices onto generator struct indices\n         // `storage_liveness` tells us which locals have live storage at suspension points\n-        let (remap, layout, storage_liveness) = compute_layout(liveness_info, body);\n+        let (remap, layout, storage_liveness) = compute_layout(tcx, liveness_info, body);\n \n         let can_return = can_return(tcx, body, tcx.param_env(body.source.def_id()));\n \n@@ -1700,7 +1719,7 @@ fn check_suspend_tys<'tcx>(tcx: TyCtxt<'tcx>, layout: &GeneratorLayout<'tcx>, bo\n             let decl = &layout.field_tys[local];\n             debug!(?decl);\n \n-            if !decl.is_static_ptr && linted_tys.insert(decl.ty) {\n+            if !decl.ignore_for_traits && linted_tys.insert(decl.ty) {\n                 let Some(hir_id) = decl.source_info.scope.lint_root(&body.source_scopes) else { continue };\n \n                 check_must_not_suspend_ty("}, {"sha": "f7f787dea95b4d970bad5c5cfd4be6bfda3cc210", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c3c90f3ecaa011bd7067efd562397de219facf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c3c90f3ecaa011bd7067efd562397de219facf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=65c3c90f3ecaa011bd7067efd562397de219facf", "patch": "@@ -2389,7 +2389,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 for &local in variant {\n                     let decl = &generator_info.field_tys[local];\n                     debug!(?decl);\n-                    if ty_matches(ty::Binder::dummy(decl.ty)) && !decl.is_static_ptr {\n+                    if ty_matches(ty::Binder::dummy(decl.ty)) && !decl.ignore_for_traits {\n                         interior_or_upvar_span = Some(GeneratorInteriorOrUpvar::Interior(\n                             decl.source_info.span,\n                             Some((None, source_info.span, None, from_awaited_ty)),"}, {"sha": "cfc0cf7cdd7012a6d0c12f6e80dca4696ba28996", "filename": "tests/ui/generator/issue-105084.drop_tracking_mir.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/65c3c90f3ecaa011bd7067efd562397de219facf/tests%2Fui%2Fgenerator%2Fissue-105084.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65c3c90f3ecaa011bd7067efd562397de219facf/tests%2Fui%2Fgenerator%2Fissue-105084.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-105084.drop_tracking_mir.stderr?ref=65c3c90f3ecaa011bd7067efd562397de219facf", "patch": "@@ -0,0 +1,51 @@\n+error[E0382]: borrow of moved value: `g`\n+  --> $DIR/issue-105084.rs:44:14\n+   |\n+LL |     let mut g = || {\n+   |         ----- move occurs because `g` has type `[generator@$DIR/issue-105084.rs:22:17: 22:19]`, which does not implement the `Copy` trait\n+...\n+LL |     let mut h = copy(g);\n+   |                      - value moved here\n+...\n+LL |     Pin::new(&mut g).resume(());\n+   |              ^^^^^^ value borrowed here after move\n+   |\n+note: consider changing this parameter type in function `copy` to borrow instead if owning the value isn't necessary\n+  --> $DIR/issue-105084.rs:17:21\n+   |\n+LL | fn copy<T: Copy>(x: T) -> T {\n+   |    ----             ^ this parameter takes ownership of the value\n+   |    |\n+   |    in this function\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let mut h = copy(g.clone());\n+   |                       ++++++++\n+\n+error[E0277]: the trait bound `Box<(i32, ())>: Copy` is not satisfied in `[generator@$DIR/issue-105084.rs:22:17: 22:19]`\n+  --> $DIR/issue-105084.rs:38:17\n+   |\n+LL |     let mut g = || {\n+   |                 -- within this `[generator@$DIR/issue-105084.rs:22:17: 22:19]`\n+...\n+LL |     let mut h = copy(g);\n+   |                 ^^^^ within `[generator@$DIR/issue-105084.rs:22:17: 22:19]`, the trait `Copy` is not implemented for `Box<(i32, ())>`\n+   |\n+note: generator does not implement `Copy` as this value is used across a yield\n+  --> $DIR/issue-105084.rs:28:25\n+   |\n+LL |         let t = box (5, yield);\n+   |                 --------^^^^^-\n+   |                 |       |\n+   |                 |       yield occurs here, with `box (5, yield)` maybe used later\n+   |                 has type `Box<(i32, ())>` which does not implement `Copy`\n+note: required by a bound in `copy`\n+  --> $DIR/issue-105084.rs:17:12\n+   |\n+LL | fn copy<T: Copy>(x: T) -> T {\n+   |            ^^^^ required by this bound in `copy`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0277, E0382.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "7c9a97b40a5dc6828adb548447456dc1d9641297", "filename": "tests/ui/generator/issue-105084.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/65c3c90f3ecaa011bd7067efd562397de219facf/tests%2Fui%2Fgenerator%2Fissue-105084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c3c90f3ecaa011bd7067efd562397de219facf/tests%2Fui%2Fgenerator%2Fissue-105084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-105084.rs?ref=65c3c90f3ecaa011bd7067efd562397de219facf", "patch": "@@ -0,0 +1,49 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+// [no_drop_tracking] known-bug: #105084\n+// [no_drop_tracking] check-pass\n+// [drop_tracking] known-bug: #105084\n+// [drop_tracking] check-pass\n+\n+#![feature(generators)]\n+#![feature(generator_clone)]\n+#![feature(generator_trait)]\n+#![feature(box_syntax)]\n+\n+use std::ops::Generator;\n+use std::pin::Pin;\n+\n+fn copy<T: Copy>(x: T) -> T {\n+    x\n+}\n+\n+fn main() {\n+    let mut g = || {\n+        // This is desuraged as 4 stages:\n+        // - allocate a `*mut u8` with `exchange_malloc`;\n+        // - create a Box that is ignored for trait computations;\n+        // - compute fields (and yields);\n+        // - assign to `t`.\n+        let t = box (5, yield);\n+        drop(t);\n+    };\n+\n+    // Allocate the temporary box.\n+    Pin::new(&mut g).resume(());\n+\n+    // The temporary box is in generator locals.\n+    // As it is not taken into account for trait computation,\n+    // the generator is `Copy`.\n+    let mut h = copy(g);\n+    //[drop_tracking_mir]~^ ERROR the trait bound `Box<(i32, ())>: Copy` is not satisfied in\n+\n+    // We now have 2 boxes with the same backing allocation:\n+    // one inside `g` and one inside `h`.\n+    // Proceed and drop `t` in `g`.\n+    Pin::new(&mut g).resume(());\n+    //[drop_tracking_mir]~^ ERROR borrow of moved value: `g`\n+\n+    // Proceed and drop `t` in `h` -> double free!\n+    Pin::new(&mut h).resume(());\n+}"}]}