{"sha": "63edd2c35892c81fe3f071e7e259437de9557845", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzZWRkMmMzNTg5MmM4MWZlM2YwNzFlN2UyNTk0MzdkZTk1NTc4NDU=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-05-25T09:11:48Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-06-18T21:54:51Z"}, "message": "Remove the HirId/NodeId from where clauses\n\nAlso give them a span in the HIR", "tree": {"sha": "2a16eeabd1bd81be950d602b3726029940284d12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a16eeabd1bd81be950d602b3726029940284d12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63edd2c35892c81fe3f071e7e259437de9557845", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63edd2c35892c81fe3f071e7e259437de9557845", "html_url": "https://github.com/rust-lang/rust/commit/63edd2c35892c81fe3f071e7e259437de9557845", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63edd2c35892c81fe3f071e7e259437de9557845/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04a3dd8a872633ca1e4c217d11f741cc35cb19a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/04a3dd8a872633ca1e4c217d11f741cc35cb19a5", "html_url": "https://github.com/rust-lang/rust/commit/04a3dd8a872633ca1e4c217d11f741cc35cb19a5"}], "stats": {"total": 51, "additions": 21, "deletions": 30}, "files": [{"sha": "96fa8fe1f269f38f637e2c93e93900c4be321c21", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63edd2c35892c81fe3f071e7e259437de9557845/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63edd2c35892c81fe3f071e7e259437de9557845/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=63edd2c35892c81fe3f071e7e259437de9557845", "patch": "@@ -773,7 +773,6 @@ pub fn walk_generic_param<'v, V: Visitor<'v>>(visitor: &mut V, param: &'v Generi\n \n pub fn walk_generics<'v, V: Visitor<'v>>(visitor: &mut V, generics: &'v Generics) {\n     walk_list!(visitor, visit_generic_param, &generics.params);\n-    visitor.visit_id(generics.where_clause.hir_id);\n     walk_list!(visitor, visit_where_predicate, &generics.where_clause.predicates);\n }\n "}, {"sha": "b764d107929382da98f151587395ed531a56335c", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63edd2c35892c81fe3f071e7e259437de9557845/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63edd2c35892c81fe3f071e7e259437de9557845/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=63edd2c35892c81fe3f071e7e259437de9557845", "patch": "@@ -1727,8 +1727,8 @@ impl<'a> LoweringContext<'a> {\n                 generics: hir::Generics {\n                     params: lifetime_defs,\n                     where_clause: hir::WhereClause {\n-                        hir_id: lctx.next_id(),\n                         predicates: hir_vec![],\n+                        span,\n                     },\n                     span,\n                 },\n@@ -2619,8 +2619,8 @@ impl<'a> LoweringContext<'a> {\n                 generics: hir::Generics {\n                     params: generic_params,\n                     where_clause: hir::WhereClause {\n-                        hir_id: this.next_id(),\n                         predicates: hir_vec![],\n+                        span,\n                     },\n                     span,\n                 },\n@@ -2973,11 +2973,11 @@ impl<'a> LoweringContext<'a> {\n             AnonymousLifetimeMode::ReportError,\n             |this| {\n                 hir::WhereClause {\n-                    hir_id: this.lower_node_id(wc.id),\n                     predicates: wc.predicates\n                         .iter()\n                         .map(|predicate| this.lower_where_predicate(predicate))\n                         .collect(),\n+                    span: wc.span,\n                 }\n             },\n         )"}, {"sha": "2cb0e2fd8cefcab4190ed63ab53c6325321b3686", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/63edd2c35892c81fe3f071e7e259437de9557845/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63edd2c35892c81fe3f071e7e259437de9557845/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=63edd2c35892c81fe3f071e7e259437de9557845", "patch": "@@ -592,8 +592,8 @@ impl Generics {\n         Generics {\n             params: HirVec::new(),\n             where_clause: WhereClause {\n-                hir_id: DUMMY_HIR_ID,\n                 predicates: HirVec::new(),\n+                span: DUMMY_SP,\n             },\n             span: DUMMY_SP,\n         }\n@@ -644,19 +644,18 @@ pub enum SyntheticTyParamKind {\n /// A where-clause in a definition.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub struct WhereClause {\n-    pub hir_id: HirId,\n     pub predicates: HirVec<WherePredicate>,\n+    // Only valid if predicates isn't empty.\n+    span: Span,\n }\n \n impl WhereClause {\n     pub fn span(&self) -> Option<Span> {\n-        self.predicates.iter().map(|predicate| predicate.span())\n-            .fold(None, |acc, i| match (acc, i) {\n-                (None, i) => Some(i),\n-                (Some(acc), i) => {\n-                    Some(acc.to(i))\n-                }\n-            })\n+        if self.predicates.is_empty() {\n+            None\n+        } else {\n+            Some(self.span)\n+        }\n     }\n }\n "}, {"sha": "54ac5abd32197eee21cc4f23981ebc6e96eae873", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63edd2c35892c81fe3f071e7e259437de9557845/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63edd2c35892c81fe3f071e7e259437de9557845/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=63edd2c35892c81fe3f071e7e259437de9557845", "patch": "@@ -2202,8 +2202,8 @@ impl<'a> State<'a> {\n         let generics = hir::Generics {\n             params: hir::HirVec::new(),\n             where_clause: hir::WhereClause {\n-                hir_id: hir::DUMMY_HIR_ID,\n                 predicates: hir::HirVec::new(),\n+                span: syntax_pos::DUMMY_SP,\n             },\n             span: syntax_pos::DUMMY_SP,\n         };"}, {"sha": "b1a62ac81d03314c3d8e35418e3fac9ffc8e7d16", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63edd2c35892c81fe3f071e7e259437de9557845/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63edd2c35892c81fe3f071e7e259437de9557845/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=63edd2c35892c81fe3f071e7e259437de9557845", "patch": "@@ -362,7 +362,6 @@ impl Default for Generics {\n         Generics {\n             params: Vec::new(),\n             where_clause: WhereClause {\n-                id: DUMMY_NODE_ID,\n                 predicates: Vec::new(),\n                 span: DUMMY_SP,\n             },\n@@ -374,7 +373,6 @@ impl Default for Generics {\n /// A where-clause in a definition.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct WhereClause {\n-    pub id: NodeId,\n     pub predicates: Vec<WherePredicate>,\n     pub span: Span,\n }"}, {"sha": "5a5b633e3151ffa55d0f2e539b6cead4376107d2", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63edd2c35892c81fe3f071e7e259437de9557845/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63edd2c35892c81fe3f071e7e259437de9557845/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=63edd2c35892c81fe3f071e7e259437de9557845", "patch": "@@ -750,8 +750,7 @@ pub fn noop_visit_generics<T: MutVisitor>(generics: &mut Generics, vis: &mut T)\n }\n \n pub fn noop_visit_where_clause<T: MutVisitor>(wc: &mut WhereClause, vis: &mut T) {\n-    let WhereClause { id, predicates, span } = wc;\n-    vis.visit_id(id);\n+    let WhereClause { predicates, span } = wc;\n     visit_vec(predicates, |predicate| vis.visit_where_predicate(predicate));\n     vis.visit_span(span);\n }"}, {"sha": "fa697e06d269dcc47bf192a60374a9d5bb5525ae", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63edd2c35892c81fe3f071e7e259437de9557845/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63edd2c35892c81fe3f071e7e259437de9557845/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=63edd2c35892c81fe3f071e7e259437de9557845", "patch": "@@ -5075,7 +5075,6 @@ impl<'a> Parser<'a> {\n         Ok(ast::Generics {\n             params,\n             where_clause: WhereClause {\n-                id: ast::DUMMY_NODE_ID,\n                 predicates: Vec::new(),\n                 span: DUMMY_SP,\n             },\n@@ -5334,7 +5333,6 @@ impl<'a> Parser<'a> {\n     /// ```\n     fn parse_where_clause(&mut self) -> PResult<'a, WhereClause> {\n         let mut where_clause = WhereClause {\n-            id: ast::DUMMY_NODE_ID,\n             predicates: Vec::new(),\n             span: self.prev_span.to(self.prev_span),\n         };"}, {"sha": "0aac4f83658b9d9735dc46200286d0e76ca48fe8", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63edd2c35892c81fe3f071e7e259437de9557845/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63edd2c35892c81fe3f071e7e259437de9557845/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=63edd2c35892c81fe3f071e7e259437de9557845", "patch": "@@ -3042,7 +3042,6 @@ impl<'a> State<'a> {\n         let generics = ast::Generics {\n             params: Vec::new(),\n             where_clause: ast::WhereClause {\n-                id: ast::DUMMY_NODE_ID,\n                 predicates: Vec::new(),\n                 span: syntax_pos::DUMMY_SP,\n             },"}, {"sha": "90d826429da4db27ea777b0ce4e50ed2a55e3ac6", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63edd2c35892c81fe3f071e7e259437de9557845/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63edd2c35892c81fe3f071e7e259437de9557845/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=63edd2c35892c81fe3f071e7e259437de9557845", "patch": "@@ -223,7 +223,6 @@ fn mk_generics(params: Vec<ast::GenericParam>, span: Span) -> Generics {\n     Generics {\n         params,\n         where_clause: ast::WhereClause {\n-            id: ast::DUMMY_NODE_ID,\n             predicates: Vec::new(),\n             span,\n         },"}, {"sha": "069401b3f1829796d9dc1592b69c041b75174b7d", "filename": "src/test/ui/error-codes/E0646.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63edd2c35892c81fe3f071e7e259437de9557845/src%2Ftest%2Fui%2Ferror-codes%2FE0646.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63edd2c35892c81fe3f071e7e259437de9557845/src%2Ftest%2Fui%2Ferror-codes%2FE0646.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0646.stderr?ref=63edd2c35892c81fe3f071e7e259437de9557845", "patch": "@@ -1,8 +1,8 @@\n error[E0646]: `main` function is not allowed to have a `where` clause\n-  --> $DIR/E0646.rs:1:17\n+  --> $DIR/E0646.rs:1:11\n    |\n LL | fn main() where (): Copy {}\n-   |                 ^^^^^^^^ `main` cannot have a `where` clause\n+   |           ^^^^^^^^^^^^^^ `main` cannot have a `where` clause\n \n error: aborting due to previous error\n "}, {"sha": "08cedfaef04ce340ad32317f86562beae575b89b", "filename": "src/test/ui/error-codes/E0647.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63edd2c35892c81fe3f071e7e259437de9557845/src%2Ftest%2Fui%2Ferror-codes%2FE0647.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63edd2c35892c81fe3f071e7e259437de9557845/src%2Ftest%2Fui%2Ferror-codes%2FE0647.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0647.stderr?ref=63edd2c35892c81fe3f071e7e259437de9557845", "patch": "@@ -1,8 +1,8 @@\n error[E0647]: start function is not allowed to have a `where` clause\n-  --> $DIR/E0647.rs:7:56\n+  --> $DIR/E0647.rs:7:50\n    |\n LL | fn start(_: isize, _: *const *const u8) -> isize where (): Copy {\n-   |                                                        ^^^^^^^^ start function cannot have a `where` clause\n+   |                                                  ^^^^^^^^^^^^^^ start function cannot have a `where` clause\n \n error: aborting due to previous error\n "}, {"sha": "28469bee01714b0ffd48a850bc5d76bcde94aa67", "filename": "src/test/ui/issues/issue-50714-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63edd2c35892c81fe3f071e7e259437de9557845/src%2Ftest%2Fui%2Fissues%2Fissue-50714-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63edd2c35892c81fe3f071e7e259437de9557845/src%2Ftest%2Fui%2Fissues%2Fissue-50714-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50714-1.stderr?ref=63edd2c35892c81fe3f071e7e259437de9557845", "patch": "@@ -1,8 +1,8 @@\n error[E0647]: start function is not allowed to have a `where` clause\n-  --> $DIR/issue-50714-1.rs:9:56\n+  --> $DIR/issue-50714-1.rs:9:50\n    |\n LL | fn start(_: isize, _: *const *const u8) -> isize where fn(&()): Eq {\n-   |                                                        ^^^^^^^^^^^ start function cannot have a `where` clause\n+   |                                                  ^^^^^^^^^^^^^^^^^ start function cannot have a `where` clause\n \n error: aborting due to previous error\n "}, {"sha": "a11aceb6211c57d0862483172d8e520900867c81", "filename": "src/test/ui/issues/issue-50714.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63edd2c35892c81fe3f071e7e259437de9557845/src%2Ftest%2Fui%2Fissues%2Fissue-50714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63edd2c35892c81fe3f071e7e259437de9557845/src%2Ftest%2Fui%2Fissues%2Fissue-50714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50714.stderr?ref=63edd2c35892c81fe3f071e7e259437de9557845", "patch": "@@ -1,8 +1,8 @@\n error[E0646]: `main` function is not allowed to have a `where` clause\n-  --> $DIR/issue-50714.rs:3:17\n+  --> $DIR/issue-50714.rs:3:11\n    |\n LL | fn main() where fn(&()): Eq {}\n-   |                 ^^^^^^^^^^^ `main` cannot have a `where` clause\n+   |           ^^^^^^^^^^^^^^^^^ `main` cannot have a `where` clause\n \n error: aborting due to previous error\n "}]}