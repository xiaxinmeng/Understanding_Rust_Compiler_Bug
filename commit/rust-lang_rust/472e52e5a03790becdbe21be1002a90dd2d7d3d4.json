{"sha": "472e52e5a03790becdbe21be1002a90dd2d7d3d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MmU1MmU1YTAzNzkwYmVjZGJlMjFiZTEwMDJhOTBkZDJkN2QzZDQ=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-09-20T06:18:09Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-09-24T01:04:22Z"}, "message": "Fix intra-doc links for primitives\n\n- Add `PrimTy::name` and `PrimTy::name_str`\n- Use those new functions to distinguish between the name in scope and\nthe canonical name\n- Fix diagnostics for primitive types\n- Add tests for primitives", "tree": {"sha": "836bf03336a1fe86d4654436a36231253163b6da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/836bf03336a1fe86d4654436a36231253163b6da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/472e52e5a03790becdbe21be1002a90dd2d7d3d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/472e52e5a03790becdbe21be1002a90dd2d7d3d4", "html_url": "https://github.com/rust-lang/rust/commit/472e52e5a03790becdbe21be1002a90dd2d7d3d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/472e52e5a03790becdbe21be1002a90dd2d7d3d4/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd7b8c85a6a2bffb2cce1c40ba72680a1d7be93b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd7b8c85a6a2bffb2cce1c40ba72680a1d7be93b", "html_url": "https://github.com/rust-lang/rust/commit/dd7b8c85a6a2bffb2cce1c40ba72680a1d7be93b"}], "stats": {"total": 56, "additions": 46, "deletions": 10}, "files": [{"sha": "636f67a77c890a4035373c58d5550110d106948c", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/472e52e5a03790becdbe21be1002a90dd2d7d3d4/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472e52e5a03790becdbe21be1002a90dd2d7d3d4/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=472e52e5a03790becdbe21be1002a90dd2d7d3d4", "patch": "@@ -2004,6 +2004,30 @@ pub enum PrimTy {\n     Char,\n }\n \n+impl PrimTy {\n+    pub fn name_str(self) -> &'static str {\n+        match self {\n+            PrimTy::Int(i) => i.name_str(),\n+            PrimTy::Uint(u) => u.name_str(),\n+            PrimTy::Float(f) => f.name_str(),\n+            PrimTy::Str => \"str\",\n+            PrimTy::Bool => \"bool\",\n+            PrimTy::Char => \"char\",\n+        }\n+    }\n+\n+    pub fn name(self) -> Symbol {\n+        match self {\n+            PrimTy::Int(i) => i.name(),\n+            PrimTy::Uint(u) => u.name(),\n+            PrimTy::Float(f) => f.name(),\n+            PrimTy::Str => sym::str,\n+            PrimTy::Bool => sym::bool,\n+            PrimTy::Char => sym::char,\n+        }\n+    }\n+}\n+\n #[derive(Debug, HashStable_Generic)]\n pub struct BareFnTy<'hir> {\n     pub unsafety: Unsafety,"}, {"sha": "af077e0f5eb6b9a309b3258ff6862f12782992c3", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/472e52e5a03790becdbe21be1002a90dd2d7d3d4/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472e52e5a03790becdbe21be1002a90dd2d7d3d4/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=472e52e5a03790becdbe21be1002a90dd2d7d3d4", "patch": "@@ -273,13 +273,13 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                     return handle_variant(cx, res, extra_fragment);\n                 }\n                 // Not a trait item; just return what we found.\n-                Res::PrimTy(..) => {\n+                Res::PrimTy(ty) => {\n                     if extra_fragment.is_some() {\n                         return Err(ErrorKind::AnchorFailure(\n                             AnchorFailure::RustdocAnchorConflict(res),\n                         ));\n                     }\n-                    return Ok((res, Some(path_str.to_owned())));\n+                    return Ok((res, Some(ty.name_str().to_owned())));\n                 }\n                 Res::Def(DefKind::Mod, _) => {\n                     return Ok((res, extra_fragment.clone()));\n@@ -292,6 +292,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             if value != (ns == ValueNS) {\n                 return Err(ResolutionFailure::WrongNamespace(res, ns).into());\n             }\n+        // FIXME: why is this necessary?\n         } else if let Some((path, prim)) = is_primitive(path_str, ns) {\n             if extra_fragment.is_some() {\n                 return Err(ErrorKind::AnchorFailure(AnchorFailure::RustdocAnchorConflict(prim)));\n@@ -1008,12 +1009,12 @@ impl LinkCollector<'_, '_> {\n                 suggest_disambiguator(resolved, diag, path_str, dox, sp, &link_range);\n             });\n         };\n-        if let Res::PrimTy(_) = res {\n+        if let Res::PrimTy(ty) = res {\n             match disambiguator {\n                 Some(Disambiguator::Primitive | Disambiguator::Namespace(_)) | None => {\n                     item.attrs.links.push(ItemLink {\n                         link: ori_link,\n-                        link_text: path_str.to_owned(),\n+                        link_text,\n                         did: None,\n                         fragment,\n                     });\n@@ -1488,6 +1489,10 @@ fn resolution_failure(\n     link_range: Option<Range<usize>>,\n     kinds: SmallVec<[ResolutionFailure<'_>; 3]>,\n ) {\n+    let has_primitive = kinds.iter().any(|err|\n+        matches!(err, ResolutionFailure::NoPrimitiveAssocItem{..} | ResolutionFailure::NoPrimitiveImpl(_, _))\n+    );\n+\n     report_diagnostic(\n         collector.cx,\n         &format!(\"unresolved link to `{}`\", path_str),\n@@ -1528,6 +1533,7 @@ fn resolution_failure(\n \n                     let module_id = *module_id;\n                     // FIXME(jynelson): this might conflict with my `Self` fix in #76467\n+                    // FIXME: use itertools `collect_tuple` instead\n                     fn split(path: &str) -> Option<(&str, &str)> {\n                         let mut splitter = path.rsplitn(2, \"::\");\n                         splitter.next().and_then(|right| splitter.next().map(|left| (left, right)))\n@@ -1567,7 +1573,6 @@ fn resolution_failure(\n                     };\n                     // See if this was a module: `[path]` or `[std::io::nope]`\n                     if let Some(module) = last_found_module {\n-                        // NOTE: uses an explicit `continue` so the `note:` will come before the `help:`\n                         let module_name = collector.cx.tcx.item_name(module);\n                         let note = format!(\n                             \"the module `{}` contains no item named `{}`\",\n@@ -1595,7 +1600,10 @@ fn resolution_failure(\n                             diagnostic_name = collector.cx.tcx.item_name(def_id).as_str();\n                             (Some(kind), &*diagnostic_name)\n                         }\n-                        Res::PrimTy(_) => (None, name),\n+                        Res::PrimTy(_) => {\n+                            assert!(has_primitive);\n+                            continue;\n+                        }\n                         _ => unreachable!(\"only ADTs and primitives are in scope at module level\"),\n                     };\n                     let path_description = if let Some(kind) = kind {"}, {"sha": "fab8c105a49539834b9a14a644118a1dc36c92db", "filename": "src/test/rustdoc-ui/intra-link-errors.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/472e52e5a03790becdbe21be1002a90dd2d7d3d4/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/472e52e5a03790becdbe21be1002a90dd2d7d3d4/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.stderr?ref=472e52e5a03790becdbe21be1002a90dd2d7d3d4", "patch": "@@ -80,10 +80,7 @@ error: unresolved link to `u8::not_found`\n   --> $DIR/intra-link-errors.rs:55:6\n    |\n LL | /// [u8::not_found]\n-   |      ^^^^^^^^^^^^^\n-   |      |\n-   |      the builtin type `u8` does not have an associated item named `not_found`\n-   |      the builtin type `u8` has no builtin type named `not_found`\n+   |      ^^^^^^^^^^^^^ the builtin type `u8` does not have an associated item named `not_found`\n \n error: unresolved link to `S`\n   --> $DIR/intra-link-errors.rs:59:6"}, {"sha": "8f69b894a223d8af4687fff4f28b014a52a1647b", "filename": "src/test/rustdoc/primitive-link.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/472e52e5a03790becdbe21be1002a90dd2d7d3d4/src%2Ftest%2Frustdoc%2Fprimitive-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472e52e5a03790becdbe21be1002a90dd2d7d3d4/src%2Ftest%2Frustdoc%2Fprimitive-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprimitive-link.rs?ref=472e52e5a03790becdbe21be1002a90dd2d7d3d4", "patch": "@@ -4,6 +4,13 @@\n \n // @has foo/struct.Foo.html '//*[@class=\"docblock\"]/p/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\"]' 'u32'\n // @has foo/struct.Foo.html '//*[@class=\"docblock\"]/p/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\"]' 'i64'\n+// @has foo/struct.Foo.html '//*[@class=\"docblock\"]/p/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\"]' 'std::primitive::i32'\n+// @has foo/struct.Foo.html '//*[@class=\"docblock\"]/p/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\"]' 'std::primitive::str'\n+\n+// FIXME: this doesn't resolve\n+// @ has foo/struct.Foo.html '//*[@class=\"docblock\"]/p/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#associatedconstant.MAX\"]' 'std::primitive::i32::MAX'\n \n /// It contains [`u32`] and [i64].\n+/// It also links to [std::primitive::i32], [std::primitive::str],\n+/// and [`std::primitive::i32::MAX`].\n pub struct Foo;"}]}