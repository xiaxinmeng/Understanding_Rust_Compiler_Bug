{"sha": "0d34a256de5d33565e9a62d53bf149cf59510937", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMzRhMjU2ZGU1ZDMzNTY1ZTlhNjJkNTNiZjE0OWNmNTk1MTA5Mzc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-11T18:12:06Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-11T18:12:06Z"}, "message": "assign ids when converting tt", "tree": {"sha": "bac8f49c3902378a41c647e2a9235c64c0e53050", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bac8f49c3902378a41c647e2a9235c64c0e53050"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d34a256de5d33565e9a62d53bf149cf59510937", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d34a256de5d33565e9a62d53bf149cf59510937", "html_url": "https://github.com/rust-lang/rust/commit/0d34a256de5d33565e9a62d53bf149cf59510937", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d34a256de5d33565e9a62d53bf149cf59510937/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58897dd8ddfd08ef494b7bc05ac15f5b1e3a4e1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/58897dd8ddfd08ef494b7bc05ac15f5b1e3a4e1a", "html_url": "https://github.com/rust-lang/rust/commit/58897dd8ddfd08ef494b7bc05ac15f5b1e3a4e1a"}], "stats": {"total": 46, "additions": 36, "deletions": 10}, "files": [{"sha": "ec2fd1eb5f471c6b8b312e4a9340a47f415b9772", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d34a256de5d33565e9a62d53bf149cf59510937/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d34a256de5d33565e9a62d53bf149cf59510937/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=0d34a256de5d33565e9a62d53bf149cf59510937", "patch": "@@ -144,8 +144,8 @@ impl_froms!(TokenTree: Leaf, Subtree);\n         let macro_invocation =\n             source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n \n-        let definition_tt = ast_to_token_tree(macro_definition.token_tree().unwrap()).unwrap();\n-        let invocation_tt = ast_to_token_tree(macro_invocation.token_tree().unwrap()).unwrap();\n+        let (definition_tt, _) = ast_to_token_tree(macro_definition.token_tree().unwrap()).unwrap();\n+        let (invocation_tt, _) = ast_to_token_tree(macro_invocation.token_tree().unwrap()).unwrap();\n         let rules = crate::MacroRules::parse(&definition_tt).unwrap();\n         let expansion = rules.expand(&invocation_tt).unwrap();\n         assert_eq!(\n@@ -160,7 +160,7 @@ impl_froms!(TokenTree: Leaf, Subtree);\n         let macro_definition =\n             source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n \n-        let definition_tt = ast_to_token_tree(macro_definition.token_tree().unwrap()).unwrap();\n+        let (definition_tt, _) = ast_to_token_tree(macro_definition.token_tree().unwrap()).unwrap();\n         crate::MacroRules::parse(&definition_tt).unwrap()\n     }\n \n@@ -169,7 +169,7 @@ impl_froms!(TokenTree: Leaf, Subtree);\n         let macro_invocation =\n             source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n \n-        let invocation_tt = ast_to_token_tree(macro_invocation.token_tree().unwrap()).unwrap();\n+        let (invocation_tt, _) = ast_to_token_tree(macro_invocation.token_tree().unwrap()).unwrap();\n \n         let expaned = rules.expand(&invocation_tt).unwrap();\n         assert_eq!(expaned.to_string(), expansion);"}, {"sha": "798f9d8fa6c4938635e16ad8a7600d59c2403901", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0d34a256de5d33565e9a62d53bf149cf59510937/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d34a256de5d33565e9a62d53bf149cf59510937/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=0d34a256de5d33565e9a62d53bf149cf59510937", "patch": "@@ -1,10 +1,34 @@\n-use ra_syntax::{ast, AstNode, SyntaxNode, SyntaxKind::*};\n+use ra_syntax::{\n+    AstNode, SyntaxNode, TextRange,\n+    ast, SyntaxKind::*, TextUnit\n+};\n \n-pub fn ast_to_token_tree(ast: &ast::TokenTree) -> Option<tt::Subtree> {\n-    convert_tt(ast.syntax())\n+#[derive(Default)]\n+pub struct TokenMap {\n+    /// Maps `tt::TokenId` to the *relative* source range.\n+    toknes: Vec<TextRange>,\n }\n \n-fn convert_tt(tt: &SyntaxNode) -> Option<tt::Subtree> {\n+pub fn ast_to_token_tree(ast: &ast::TokenTree) -> Option<(tt::Subtree, TokenMap)> {\n+    let mut token_map = TokenMap::default();\n+    let node = ast.syntax();\n+    let tt = convert_tt(&mut token_map, node.range().start(), node)?;\n+    Some((tt, token_map))\n+}\n+\n+impl TokenMap {\n+    fn alloc(&mut self, relative_range: TextRange) -> tt::TokenId {\n+        let id = self.toknes.len();\n+        self.toknes.push(relative_range);\n+        tt::TokenId(id as u32)\n+    }\n+}\n+\n+fn convert_tt(\n+    token_map: &mut TokenMap,\n+    global_offset: TextUnit,\n+    tt: &SyntaxNode,\n+) -> Option<tt::Subtree> {\n     let first_child = tt.first_child()?;\n     let last_child = tt.last_child()?;\n     let delimiter = match (first_child.kind(), last_child.kind()) {\n@@ -34,10 +58,12 @@ fn convert_tt(tt: &SyntaxNode) -> Option<tt::Subtree> {\n             }\n         } else {\n             let child: tt::TokenTree = if child.kind() == TOKEN_TREE {\n-                convert_tt(child)?.into()\n+                convert_tt(token_map, global_offset, child)?.into()\n             } else if child.kind().is_keyword() || child.kind() == IDENT {\n+                let relative_range = child.range() - global_offset;\n+                let id = token_map.alloc(relative_range);\n                 let text = child.leaf_text().unwrap().clone();\n-                tt::Leaf::from(tt::Ident { text, id: tt::TokenId::unspecified() }).into()\n+                tt::Leaf::from(tt::Ident { text, id }).into()\n             } else if child.kind().is_literal() {\n                 tt::Leaf::from(tt::Literal { text: child.leaf_text().unwrap().clone() }).into()\n             } else {"}]}