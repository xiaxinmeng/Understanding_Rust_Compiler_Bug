{"sha": "c6ef53477ee68ace77bead81439971a71669b22f", "node_id": "C_kwDOAAsO6NoAKGM2ZWY1MzQ3N2VlNjhhY2U3N2JlYWQ4MTQzOTk3MWE3MTY2OWIyMmY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-21T05:42:48Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-21T06:06:46Z"}, "message": "CollectAllMismatches relation should respect int/float infer vars", "tree": {"sha": "17e1dce23b0aebc1e602db87e5cfb86abd7a0570", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17e1dce23b0aebc1e602db87e5cfb86abd7a0570"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6ef53477ee68ace77bead81439971a71669b22f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6ef53477ee68ace77bead81439971a71669b22f", "html_url": "https://github.com/rust-lang/rust/commit/c6ef53477ee68ace77bead81439971a71669b22f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6ef53477ee68ace77bead81439971a71669b22f/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "978dd2e3b804ebbb39684aaabcea5c0a39bd59d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/978dd2e3b804ebbb39684aaabcea5c0a39bd59d9", "html_url": "https://github.com/rust-lang/rust/commit/978dd2e3b804ebbb39684aaabcea5c0a39bd59d9"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "27c207528c73537c9c8a5a01e7fa595549dc12b4", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/method_chain.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c6ef53477ee68ace77bead81439971a71669b22f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ef53477ee68ace77bead81439971a71669b22f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs?ref=c6ef53477ee68ace77bead81439971a71669b22f", "patch": "@@ -14,21 +14,27 @@ impl<'a, 'tcx> TypeRelation<'tcx> for CollectAllMismatches<'a, 'tcx> {\n     fn tag(&self) -> &'static str {\n         \"CollectAllMismatches\"\n     }\n+\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n+\n     fn intercrate(&self) -> bool {\n         false\n     }\n+\n     fn param_env(&self) -> ty::ParamEnv<'tcx> {\n         self.param_env\n     }\n+\n     fn a_is_expected(&self) -> bool {\n         true\n-    } // irrelevant\n+    }\n+\n     fn mark_ambiguous(&mut self) {\n         bug!()\n     }\n+\n     fn relate_with_variance<T: Relate<'tcx>>(\n         &mut self,\n         _: ty::Variance,\n@@ -38,22 +44,28 @@ impl<'a, 'tcx> TypeRelation<'tcx> for CollectAllMismatches<'a, 'tcx> {\n     ) -> RelateResult<'tcx, T> {\n         self.relate(a, b)\n     }\n+\n     fn regions(\n         &mut self,\n         a: ty::Region<'tcx>,\n         _b: ty::Region<'tcx>,\n     ) -> RelateResult<'tcx, ty::Region<'tcx>> {\n         Ok(a)\n     }\n+\n     fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n-        if a == b || matches!(a.kind(), ty::Infer(_)) || matches!(b.kind(), ty::Infer(_)) {\n-            return Ok(a);\n-        }\n-        relate::super_relate_tys(self, a, b).or_else(|e| {\n-            self.errors.push(e);\n-            Ok(a)\n+        self.infcx.probe(|_| {\n+            if a.is_ty_infer() || b.is_ty_infer() {\n+                Ok(a)\n+            } else {\n+                self.infcx.super_combine_tys(self, a, b).or_else(|e| {\n+                    self.errors.push(e);\n+                    Ok(a)\n+                })\n+            }\n         })\n     }\n+\n     fn consts(\n         &mut self,\n         a: ty::Const<'tcx>,\n@@ -64,6 +76,7 @@ impl<'a, 'tcx> TypeRelation<'tcx> for CollectAllMismatches<'a, 'tcx> {\n         }\n         relate::super_relate_consts(self, a, b) // could do something similar here for constants!\n     }\n+\n     fn binders<T: Relate<'tcx>>(\n         &mut self,\n         a: ty::Binder<'tcx, T>,"}]}