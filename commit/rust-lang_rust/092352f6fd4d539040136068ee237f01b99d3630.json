{"sha": "092352f6fd4d539040136068ee237f01b99d3630", "node_id": "C_kwDOAAsO6NoAKDA5MjM1MmY2ZmQ0ZDUzOTA0MDEzNjA2OGVlMjM3ZjAxYjk5ZDM2MzA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-24T19:36:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-24T19:36:57Z"}, "message": "Rollup merge of #111841 - matthewjasper:validate-match-guards, r=compiler-errors\n\nRun AST validation on match guards correctly\n\nAST validation was being skipped on match guards other than `if let` guards.", "tree": {"sha": "9dba365f676e5a750889249828f3396bc40c619e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dba365f676e5a750889249828f3396bc40c619e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/092352f6fd4d539040136068ee237f01b99d3630", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkbmdZCRBK7hj4Ov3rIwAALigIABFn6P94c6Q7nQD7AiXtLEfy\nhOl3UKkLD/iydIFXkrxY8lR6ZpONtGfac2MwNYsKM/ICrvw6N6MARLKDtE9257lr\nuk6EuO1egeN4wq5Bo9SWmyZeXDMKH57OvsgbOGkF4FuRSTe2hokGDyNCMoKmX6DJ\nM8bddrU7vFfyt9X7qCUoPcFYDDFPXl9Kn06qkeLKgdUvnzuY8I3XIqRvisxGvI3d\nvmuD03h5+DThYblXDwhQB1xO7KfIdhTStPGjJjltWtZjFhQNGFj8ygv301X/qJrZ\nmQQSBLSPwLZCnEuXY+LGpbHSLZMdE0y+gMN8k2h63/GHUxWbHsM0nk0lrFe7E6I=\n=apT3\n-----END PGP SIGNATURE-----\n", "payload": "tree 9dba365f676e5a750889249828f3396bc40c619e\nparent 52890cc719e7226a5225814e54c548541b6520c9\nparent 72d41f3bd36d3c18c31f719a7f8e2a0ca372c332\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1684957017 +0200\ncommitter GitHub <noreply@github.com> 1684957017 +0200\n\nRollup merge of #111841 - matthewjasper:validate-match-guards, r=compiler-errors\n\nRun AST validation on match guards correctly\n\nAST validation was being skipped on match guards other than `if let` guards.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/092352f6fd4d539040136068ee237f01b99d3630", "html_url": "https://github.com/rust-lang/rust/commit/092352f6fd4d539040136068ee237f01b99d3630", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/092352f6fd4d539040136068ee237f01b99d3630/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52890cc719e7226a5225814e54c548541b6520c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/52890cc719e7226a5225814e54c548541b6520c9", "html_url": "https://github.com/rust-lang/rust/commit/52890cc719e7226a5225814e54c548541b6520c9"}, {"sha": "72d41f3bd36d3c18c31f719a7f8e2a0ca372c332", "url": "https://api.github.com/repos/rust-lang/rust/commits/72d41f3bd36d3c18c31f719a7f8e2a0ca372c332", "html_url": "https://github.com/rust-lang/rust/commit/72d41f3bd36d3c18c31f719a7f8e2a0ca372c332"}], "stats": {"total": 278, "additions": 240, "deletions": 38}, "files": [{"sha": "3a210dc34f60a41999c68aaf1b4ad4555794c523", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/092352f6fd4d539040136068ee237f01b99d3630/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092352f6fd4d539040136068ee237f01b99d3630/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=092352f6fd4d539040136068ee237f01b99d3630", "patch": "@@ -736,11 +736,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         this.visit_expr(&arm.body);\n                         this.visit_pat(&arm.pat);\n                         walk_list!(this, visit_attribute, &arm.attrs);\n-                        if let Some(guard) = &arm.guard && let ExprKind::Let(_, guard_expr, _) = &guard.kind {\n+                        if let Some(guard) = &arm.guard {\n                             this.with_let_management(None, |this, _| {\n-                                this.visit_expr(guard_expr)\n+                                this.visit_expr(guard)\n                             });\n-                            return;\n                         }\n                     }\n                 }"}, {"sha": "744111edb84e4992f1cf85853258f849495d00ab", "filename": "compiler/rustc_mir_build/src/build/expr/as_operand.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/092352f6fd4d539040136068ee237f01b99d3630/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092352f6fd4d539040136068ee237f01b99d3630/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs?ref=092352f6fd4d539040136068ee237f01b99d3630", "patch": "@@ -118,15 +118,19 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let category = Category::of(&expr.kind).unwrap();\n         debug!(?category, ?expr.kind);\n         match category {\n-            Category::Constant if let NeedsTemporary::No = needs_temporary || !expr.ty.needs_drop(this.tcx, this.param_env) => {\n+            Category::Constant\n+                if matches!(needs_temporary, NeedsTemporary::No)\n+                    || !expr.ty.needs_drop(this.tcx, this.param_env) =>\n+            {\n                 let constant = this.as_constant(expr);\n                 block.and(Operand::Constant(Box::new(constant)))\n             }\n             Category::Constant | Category::Place | Category::Rvalue(..) => {\n                 let operand = unpack!(block = this.as_temp(block, scope, expr, Mutability::Mut));\n                 // Overwrite temp local info if we have something more interesting to record.\n                 if !matches!(local_info, LocalInfo::Boring) {\n-                    let decl_info = this.local_decls[operand].local_info.as_mut().assert_crate_local();\n+                    let decl_info =\n+                        this.local_decls[operand].local_info.as_mut().assert_crate_local();\n                     if let LocalInfo::Boring | LocalInfo::BlockTailTemp(_) = **decl_info {\n                         **decl_info = local_info;\n                     }"}, {"sha": "3beb20f0a376bf4fd2b4d2ee91d40b91c92864c9", "filename": "tests/ui/rfc-2294-if-let-guard/feature-gate.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/092352f6fd4d539040136068ee237f01b99d3630/tests%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092352f6fd4d539040136068ee237f01b99d3630/tests%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs?ref=092352f6fd4d539040136068ee237f01b99d3630", "patch": "@@ -10,10 +10,12 @@ fn _if_let_guard() {\n         () if (let 0 = 1) => {}\n         //~^ ERROR `let` expressions in this position are unstable\n         //~| ERROR expected expression, found `let` statement\n+        //~| ERROR `let` expressions are not supported here\n \n         () if (((let 0 = 1))) => {}\n         //~^ ERROR `let` expressions in this position are unstable\n         //~| ERROR expected expression, found `let` statement\n+        //~| ERROR `let` expressions are not supported here\n \n         () if true && let 0 = 1 => {}\n         //~^ ERROR `if let` guards are experimental\n@@ -26,16 +28,20 @@ fn _if_let_guard() {\n         () if (let 0 = 1) && true => {}\n         //~^ ERROR `let` expressions in this position are unstable\n         //~| ERROR expected expression, found `let` statement\n+        //~| ERROR `let` expressions are not supported here\n \n         () if true && (let 0 = 1) => {}\n         //~^ ERROR `let` expressions in this position are unstable\n         //~| ERROR expected expression, found `let` statement\n+        //~| ERROR `let` expressions are not supported here\n \n         () if (let 0 = 1) && (let 0 = 1) => {}\n         //~^ ERROR `let` expressions in this position are unstable\n         //~| ERROR `let` expressions in this position are unstable\n         //~| ERROR expected expression, found `let` statement\n         //~| ERROR expected expression, found `let` statement\n+        //~| ERROR `let` expressions are not supported here\n+        //~| ERROR `let` expressions are not supported here\n \n         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n         //~^ ERROR `if let` guards are experimental\n@@ -47,6 +53,10 @@ fn _if_let_guard() {\n         //~| ERROR expected expression, found `let` statement\n         //~| ERROR expected expression, found `let` statement\n         //~| ERROR expected expression, found `let` statement\n+        //~| ERROR `let` expressions are not supported here\n+        //~| ERROR `let` expressions are not supported here\n+        //~| ERROR `let` expressions are not supported here\n+\n \n         () if let Range { start: _, end: _ } = (true..true) && false => {}\n         //~^ ERROR `if let` guards are experimental\n@@ -68,9 +78,11 @@ fn _macros() {\n     use_expr!((let 0 = 1 && 0 == 0));\n     //~^ ERROR `let` expressions in this position are unstable\n     //~| ERROR expected expression, found `let` statement\n+    //~| ERROR `let` expressions are not supported here\n     use_expr!((let 0 = 1));\n     //~^ ERROR `let` expressions in this position are unstable\n     //~| ERROR expected expression, found `let` statement\n+    //~| ERROR `let` expressions are not supported here\n     match () {\n         #[cfg(FALSE)]\n         () if let 0 = 1 => {}"}, {"sha": "dc182ce464a09043b468109039aca2da762b2da4", "filename": "tests/ui/rfc-2294-if-let-guard/feature-gate.stderr", "status": "modified", "additions": 176, "deletions": 33, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/092352f6fd4d539040136068ee237f01b99d3630/tests%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/092352f6fd4d539040136068ee237f01b99d3630/tests%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr?ref=092352f6fd4d539040136068ee237f01b99d3630", "patch": "@@ -5,67 +5,67 @@ LL |         () if (let 0 = 1) => {}\n    |                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:14:18\n+  --> $DIR/feature-gate.rs:15:18\n    |\n LL |         () if (((let 0 = 1))) => {}\n    |                  ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:26:16\n+  --> $DIR/feature-gate.rs:28:16\n    |\n LL |         () if (let 0 = 1) && true => {}\n    |                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:30:24\n+  --> $DIR/feature-gate.rs:33:24\n    |\n LL |         () if true && (let 0 = 1) => {}\n    |                        ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:34:16\n+  --> $DIR/feature-gate.rs:38:16\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:34:31\n+  --> $DIR/feature-gate.rs:38:31\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                               ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:40:42\n+  --> $DIR/feature-gate.rs:46:42\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                          ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:40:55\n+  --> $DIR/feature-gate.rs:46:55\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                                       ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:40:68\n+  --> $DIR/feature-gate.rs:46:68\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                                                    ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:68:16\n+  --> $DIR/feature-gate.rs:78:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:71:16\n+  --> $DIR/feature-gate.rs:82:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^\n \n error: no rules expected the token `let`\n-  --> $DIR/feature-gate.rs:80:15\n+  --> $DIR/feature-gate.rs:92:15\n    |\n LL |     macro_rules! use_expr {\n    |     --------------------- when calling this macro\n@@ -74,11 +74,154 @@ LL |     use_expr!(let 0 = 1);\n    |               ^^^ no rules expected this token in macro call\n    |\n note: while trying to match meta-variable `$e:expr`\n-  --> $DIR/feature-gate.rs:61:10\n+  --> $DIR/feature-gate.rs:71:10\n    |\n LL |         ($e:expr) => {\n    |          ^^^^^^^\n \n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:10:16\n+   |\n+LL |         () if (let 0 = 1) => {}\n+   |                ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/feature-gate.rs:10:16\n+   |\n+LL |         () if (let 0 = 1) => {}\n+   |                ^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:15:18\n+   |\n+LL |         () if (((let 0 = 1))) => {}\n+   |                  ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/feature-gate.rs:15:18\n+   |\n+LL |         () if (((let 0 = 1))) => {}\n+   |                  ^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:28:16\n+   |\n+LL |         () if (let 0 = 1) && true => {}\n+   |                ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/feature-gate.rs:28:16\n+   |\n+LL |         () if (let 0 = 1) && true => {}\n+   |                ^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:33:24\n+   |\n+LL |         () if true && (let 0 = 1) => {}\n+   |                        ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/feature-gate.rs:33:24\n+   |\n+LL |         () if true && (let 0 = 1) => {}\n+   |                        ^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:38:16\n+   |\n+LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n+   |                ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/feature-gate.rs:38:16\n+   |\n+LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n+   |                ^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:38:31\n+   |\n+LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n+   |                               ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/feature-gate.rs:38:31\n+   |\n+LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n+   |                               ^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:46:42\n+   |\n+LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n+   |                                          ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/feature-gate.rs:46:42\n+   |\n+LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:46:55\n+   |\n+LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n+   |                                                       ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/feature-gate.rs:46:42\n+   |\n+LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:46:68\n+   |\n+LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n+   |                                                                    ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/feature-gate.rs:46:42\n+   |\n+LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:78:16\n+   |\n+LL |     use_expr!((let 0 = 1 && 0 == 0));\n+   |                ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/feature-gate.rs:78:16\n+   |\n+LL |     use_expr!((let 0 = 1 && 0 == 0));\n+   |                ^^^^^^^^^^^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:82:16\n+   |\n+LL |     use_expr!((let 0 = 1));\n+   |                ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/feature-gate.rs:82:16\n+   |\n+LL |     use_expr!((let 0 = 1));\n+   |                ^^^^^^^^^\n+\n error[E0658]: `if let` guards are experimental\n   --> $DIR/feature-gate.rs:7:12\n    |\n@@ -90,7 +233,7 @@ LL |         () if let 0 = 1 => {}\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:18:12\n+  --> $DIR/feature-gate.rs:20:12\n    |\n LL |         () if true && let 0 = 1 => {}\n    |            ^^^^^^^^^^^^^^^^^^^^\n@@ -100,7 +243,7 @@ LL |         () if true && let 0 = 1 => {}\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:22:12\n+  --> $DIR/feature-gate.rs:24:12\n    |\n LL |         () if let 0 = 1 && true => {}\n    |            ^^^^^^^^^^^^^^^^^^^^\n@@ -110,7 +253,7 @@ LL |         () if let 0 = 1 && true => {}\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:40:12\n+  --> $DIR/feature-gate.rs:46:12\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -120,7 +263,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:51:12\n+  --> $DIR/feature-gate.rs:61:12\n    |\n LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -130,7 +273,7 @@ LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:76:12\n+  --> $DIR/feature-gate.rs:88:12\n    |\n LL |         () if let 0 = 1 => {}\n    |            ^^^^^^^^^^^^\n@@ -149,7 +292,7 @@ LL |         () if (let 0 = 1) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:14:18\n+  --> $DIR/feature-gate.rs:15:18\n    |\n LL |         () if (((let 0 = 1))) => {}\n    |                  ^^^^^^^^^\n@@ -158,7 +301,7 @@ LL |         () if (((let 0 = 1))) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:18:23\n+  --> $DIR/feature-gate.rs:20:23\n    |\n LL |         () if true && let 0 = 1 => {}\n    |                       ^^^^^^^^^\n@@ -167,7 +310,7 @@ LL |         () if true && let 0 = 1 => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:22:15\n+  --> $DIR/feature-gate.rs:24:15\n    |\n LL |         () if let 0 = 1 && true => {}\n    |               ^^^^^^^^^\n@@ -176,7 +319,7 @@ LL |         () if let 0 = 1 && true => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:26:16\n+  --> $DIR/feature-gate.rs:28:16\n    |\n LL |         () if (let 0 = 1) && true => {}\n    |                ^^^^^^^^^\n@@ -185,7 +328,7 @@ LL |         () if (let 0 = 1) && true => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:30:24\n+  --> $DIR/feature-gate.rs:33:24\n    |\n LL |         () if true && (let 0 = 1) => {}\n    |                        ^^^^^^^^^\n@@ -194,7 +337,7 @@ LL |         () if true && (let 0 = 1) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:34:16\n+  --> $DIR/feature-gate.rs:38:16\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                ^^^^^^^^^\n@@ -203,7 +346,7 @@ LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:34:31\n+  --> $DIR/feature-gate.rs:38:31\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                               ^^^^^^^^^\n@@ -212,7 +355,7 @@ LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:40:15\n+  --> $DIR/feature-gate.rs:46:15\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |               ^^^^^^^^^\n@@ -221,7 +364,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:40:28\n+  --> $DIR/feature-gate.rs:46:28\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                            ^^^^^^^^^\n@@ -230,7 +373,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:40:42\n+  --> $DIR/feature-gate.rs:46:42\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                          ^^^^^^^^^\n@@ -239,7 +382,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:40:55\n+  --> $DIR/feature-gate.rs:46:55\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                                       ^^^^^^^^^\n@@ -248,7 +391,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:40:68\n+  --> $DIR/feature-gate.rs:46:68\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                                                    ^^^^^^^^^\n@@ -257,7 +400,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:51:15\n+  --> $DIR/feature-gate.rs:61:15\n    |\n LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -266,7 +409,7 @@ LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:68:16\n+  --> $DIR/feature-gate.rs:78:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n@@ -275,14 +418,14 @@ LL |     use_expr!((let 0 = 1 && 0 == 0));\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:71:16\n+  --> $DIR/feature-gate.rs:82:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n-error: aborting due to 34 previous errors\n+error: aborting due to 45 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "e6dee2a1d061313535965d66a68afae66300a2d0", "filename": "tests/ui/rfc-2497-if-let-chains/ast-validate-guards.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/092352f6fd4d539040136068ee237f01b99d3630/tests%2Fui%2Frfc-2497-if-let-chains%2Fast-validate-guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092352f6fd4d539040136068ee237f01b99d3630/tests%2Fui%2Frfc-2497-if-let-chains%2Fast-validate-guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2497-if-let-chains%2Fast-validate-guards.rs?ref=092352f6fd4d539040136068ee237f01b99d3630", "patch": "@@ -0,0 +1,23 @@\n+#![feature(let_chains)]\n+\n+fn let_or_guard(x: Result<Option<i32>, ()>) {\n+    match x {\n+        Ok(opt) if let Some(4) = opt || false  => {}\n+        //~^ ERROR `let` expressions are not supported here\n+        _ => {}\n+    }\n+}\n+\n+fn hiding_unsafe_mod(x: Result<Option<i32>, ()>) {\n+    match x {\n+        Ok(opt)\n+            if {\n+                unsafe mod a {};\n+                //~^ ERROR module cannot be declared unsafe\n+                false\n+            } => {}\n+        _ => {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "26850998cc4efead168be1b93859738380a7538f", "filename": "tests/ui/rfc-2497-if-let-chains/ast-validate-guards.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/092352f6fd4d539040136068ee237f01b99d3630/tests%2Fui%2Frfc-2497-if-let-chains%2Fast-validate-guards.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/092352f6fd4d539040136068ee237f01b99d3630/tests%2Fui%2Frfc-2497-if-let-chains%2Fast-validate-guards.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2497-if-let-chains%2Fast-validate-guards.stderr?ref=092352f6fd4d539040136068ee237f01b99d3630", "patch": "@@ -0,0 +1,21 @@\n+error: `let` expressions are not supported here\n+  --> $DIR/ast-validate-guards.rs:5:20\n+   |\n+LL |         Ok(opt) if let Some(4) = opt || false  => {}\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `||` operators are not supported in let chain expressions\n+  --> $DIR/ast-validate-guards.rs:5:38\n+   |\n+LL |         Ok(opt) if let Some(4) = opt || false  => {}\n+   |                                      ^^\n+\n+error: module cannot be declared unsafe\n+  --> $DIR/ast-validate-guards.rs:15:17\n+   |\n+LL |                 unsafe mod a {};\n+   |                 ^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}