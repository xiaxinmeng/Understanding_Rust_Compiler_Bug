{"sha": "cec1a9b8592b573e40d81ba52d658bdcd9acacb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlYzFhOWI4NTkyYjU3M2U0MGQ4MWJhNTJkNjU4YmRjZDlhY2FjYjM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-19T09:45:29Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-19T09:45:29Z"}, "message": "Properly check kinds when instantiating types\n\nCloses #2011", "tree": {"sha": "df516375ee85683a7af3fb7abef20242a0e64beb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df516375ee85683a7af3fb7abef20242a0e64beb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cec1a9b8592b573e40d81ba52d658bdcd9acacb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cec1a9b8592b573e40d81ba52d658bdcd9acacb3", "html_url": "https://github.com/rust-lang/rust/commit/cec1a9b8592b573e40d81ba52d658bdcd9acacb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cec1a9b8592b573e40d81ba52d658bdcd9acacb3/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c4ac05f02aeba7d0abd421e9a19d1b4083018d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c4ac05f02aeba7d0abd421e9a19d1b4083018d6", "html_url": "https://github.com/rust-lang/rust/commit/4c4ac05f02aeba7d0abd421e9a19d1b4083018d6"}], "stats": {"total": 62, "additions": 41, "deletions": 21}, "files": [{"sha": "d58e0519387e44555c44a1f359e4adf60324ca6c", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cec1a9b8592b573e40d81ba52d658bdcd9acacb3/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec1a9b8592b573e40d81ba52d658bdcd9acacb3/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=cec1a9b8592b573e40d81ba52d658bdcd9acacb3", "patch": "@@ -7,10 +7,10 @@ import core::option::{some, none};\n \n // FIXME: Should not be @; there's a bug somewhere in rustc that requires this\n // to be.\n-type smallintmap<T> = @{mutable v: [mutable option<T>]};\n+type smallintmap<T: copy> = @{mutable v: [mutable option<T>]};\n \n #[doc = \"Create a smallintmap\"]\n-fn mk<T>() -> smallintmap<T> {\n+fn mk<T: copy>() -> smallintmap<T> {\n     let v: [mutable option<T>] = [mutable];\n     ret @{mutable v: v};\n }\n@@ -59,7 +59,7 @@ fn truncate<T: copy>(m: smallintmap<T>, len: uint) {\n     m.v = vec::to_mut(vec::slice::<option<T>>(m.v, 0u, len));\n }\n \n-fn max_key<T>(m: smallintmap<T>) -> uint {\n+fn max_key<T: copy>(m: smallintmap<T>) -> uint {\n     ret vec::len::<option<T>>(m.v);\n }\n \n@@ -116,6 +116,6 @@ impl <V: copy> of map::map<uint, V> for smallintmap<V> {\n }\n \n #[doc = \"Cast the given smallintmap to a map::map\"]\n-fn as_map<V>(s: smallintmap<V>) -> map::map<uint, V> {\n+fn as_map<V: copy>(s: smallintmap<V>) -> map::map<uint, V> {\n     s as map::map::<uint, V>\n }"}, {"sha": "9f19c91d92d56cf32071b6de58f5696139b1d616", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/cec1a9b8592b573e40d81ba52d658bdcd9acacb3/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec1a9b8592b573e40d81ba52d658bdcd9acacb3/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=cec1a9b8592b573e40d81ba52d658bdcd9acacb3", "patch": "@@ -46,7 +46,8 @@ fn check_crate(tcx: ty::ctxt, method_map: typeck::method_map,\n         visit_expr: check_expr,\n         visit_stmt: check_stmt,\n         visit_block: check_block,\n-        visit_fn: check_fn\n+        visit_fn: check_fn,\n+        visit_ty: check_ty\n         with *visit::default_visitor()\n     });\n     visit::visit_crate(*crate, ctx, visit);\n@@ -182,8 +183,7 @@ fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n         }\n       }\n       expr_path(_) | expr_field(_, _, _) {\n-        alt cx.tcx.node_type_substs.find(e.id) {\n-          some(ts) {\n+        option::may(cx.tcx.node_type_substs.find(e.id)) {|ts|\n             let bounds = alt check e.node {\n               expr_path(_) {\n                 let did = ast_util::def_id_of_def(cx.tcx.def_map.get(e.id));\n@@ -205,17 +205,8 @@ fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n               }\n             };\n             vec::iter2(ts, *bounds) {|ty, bound|\n-                let kind = ty::type_kind(cx.tcx, ty);\n-                let p_kind = ty::param_bounds_to_kind(bound);\n-                if !ty::kind_lteq(p_kind, kind) {\n-                    cx.tcx.sess.span_err(e.span, \"instantiating a \" +\n-                                         kind_to_str(p_kind) +\n-                                         \" type parameter with a \"\n-                                         + kind_to_str(kind) + \" type\");\n-                }\n+                check_bounds(cx, e.span, ty, bound)\n             }\n-          }\n-          none {}\n         }\n       }\n       expr_fn(_, _, _, cap_clause) {\n@@ -241,6 +232,33 @@ fn check_stmt(stmt: @stmt, cx: ctx, v: visit::vt<ctx>) {\n     visit::visit_stmt(stmt, cx, v);\n }\n \n+fn check_ty(aty: @ty, cx: ctx, v: visit::vt<ctx>) {\n+    alt aty.node {\n+      ty_path(_, id) {\n+        option::may(cx.tcx.node_type_substs.find(id)) {|ts|\n+            let did = ast_util::def_id_of_def(cx.tcx.def_map.get(id));\n+            let bounds = ty::lookup_item_type(cx.tcx, did).bounds;\n+            vec::iter2(ts, *bounds) {|ty, bound|\n+                check_bounds(cx, aty.span, ty, bound)\n+            }\n+        }\n+      }\n+      _ {}\n+    }\n+    visit::visit_ty(aty, cx, v);\n+}\n+\n+fn check_bounds(cx: ctx, sp: span, ty: ty::t, bounds: ty::param_bounds) {\n+    let kind = ty::type_kind(cx.tcx, ty);\n+    let p_kind = ty::param_bounds_to_kind(bounds);\n+    if !ty::kind_lteq(p_kind, kind) {\n+        cx.tcx.sess.span_err(sp, \"instantiating a \" +\n+                             kind_to_str(p_kind) +\n+                             \" type parameter with a \"\n+                             + kind_to_str(kind) + \" type\");\n+    }\n+}\n+\n fn maybe_copy(cx: ctx, ex: @expr) {\n     check_copy_ex(cx, ex, true);\n }"}, {"sha": "be2dd9c69546ce2806b14328961e35ae67aab0cb", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cec1a9b8592b573e40d81ba52d658bdcd9acacb3/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec1a9b8592b573e40d81ba52d658bdcd9acacb3/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=cec1a9b8592b573e40d81ba52d658bdcd9acacb3", "patch": "@@ -297,7 +297,8 @@ fn ast_ty_to_ty(tcx: ty::ctxt, mode: mode, &&ast_ty: @ast::ty) -> ty::t {\n              mutbl: mt.mutbl};\n     }\n     fn instantiate(tcx: ty::ctxt, use_site: ast::node_id, sp: span,\n-                   mode: mode, id: ast::def_id, args: [@ast::ty]) -> ty::t {\n+                   mode: mode, id: ast::def_id, path_id: ast::node_id,\n+                   args: [@ast::ty]) -> ty::t {\n         let ty_param_bounds_and_ty = getter(tcx, use_site, mode, id);\n         if vec::len(*ty_param_bounds_and_ty.bounds) == 0u {\n             ret ty_param_bounds_and_ty.ty;\n@@ -318,6 +319,7 @@ fn ast_ty_to_ty(tcx: ty::ctxt, mode: mode, &&ast_ty: @ast::ty) -> ty::t {\n         let typ =\n             ty::substitute_type_params(tcx, param_bindings,\n                                        ty_param_bounds_and_ty.ty);\n+        write_substs(tcx, path_id, param_bindings);\n         ret typ;\n     }\n     fn do_ast_ty_to_ty(tcx: ty::ctxt, use_site: ast::node_id, mode: mode,\n@@ -385,9 +387,9 @@ fn ast_ty_to_ty(tcx: ty::ctxt, mode: mode, &&ast_ty: @ast::ty) -> ty::t {\n                                                        path_to_str(path))); }\n               some(d) { d }};\n             alt a_def {\n-              ast::def_ty(id) {\n-                instantiate(tcx, use_site, ast_ty.span, mode, id,\n-                            path.node.types)\n+              ast::def_ty(did) {\n+                instantiate(tcx, use_site, ast_ty.span, mode, did,\n+                            id, path.node.types)\n               }\n               ast::def_prim_ty(nty) {\n                 alt nty {"}]}