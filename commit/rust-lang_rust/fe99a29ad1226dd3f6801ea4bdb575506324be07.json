{"sha": "fe99a29ad1226dd3f6801ea4bdb575506324be07", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlOTlhMjlhZDEyMjZkZDNmNjgwMWVhNGJkYjU3NTUwNjMyNGJlMDc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-25T20:30:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-25T20:30:50Z"}, "message": "Merge #4146\n\n4146: Don't add call parens when an fn type is expected r=matklad a=jonas-schievink\n\nThis is pretty useful when dealing with callback- or fn-pointer-heavy FFI code, as I have recently.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "4294c94e11a4ac689c13e2a3699d3c1aad8c94a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4294c94e11a4ac689c13e2a3699d3c1aad8c94a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe99a29ad1226dd3f6801ea4bdb575506324be07", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJepJ36CRBK7hj4Ov3rIwAAdHIIAAN+8NMkUG7NaZH4YsHZK/pc\nWPXvoZm2X1HmtIf+ZOcz+cUpKrkh84Pz/RUGUa+s3+Y8ZixE9US0VMuHOgve3cUW\nSflT4XLGr3oq192ZA541MWBaK2lEesyEPlqd2RH+TXbvLlXTYNAd+WiaNrEOJTT/\n5EX1NXnlp8jFLIV3rbWoP3d/JVsU5YR/XzT4wPaF0xMlirspog0bsHsboIT5K3JI\nUE6tacRhKj0gJRnCNeUMRu/ZDj3HRHYMHrJCHWbk7+xjn3HtYgbxJ16wPsCTzCce\nyVEH930sisBscGC0JeJnGPYZtt9kA2Ky+93LqF7Q3lGqJNUGMIIkLF9QQQMJXOM=\n=IFuY\n-----END PGP SIGNATURE-----\n", "payload": "tree 4294c94e11a4ac689c13e2a3699d3c1aad8c94a3\nparent 45832b990c7f291abe578dff3c460f4a1232f024\nparent 5a355ff52bc3f05e13a1c675290781da68289bc4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1587846650 +0000\ncommitter GitHub <noreply@github.com> 1587846650 +0000\n\nMerge #4146\n\n4146: Don't add call parens when an fn type is expected r=matklad a=jonas-schievink\n\nThis is pretty useful when dealing with callback- or fn-pointer-heavy FFI code, as I have recently.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe99a29ad1226dd3f6801ea4bdb575506324be07", "html_url": "https://github.com/rust-lang/rust/commit/fe99a29ad1226dd3f6801ea4bdb575506324be07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe99a29ad1226dd3f6801ea4bdb575506324be07/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45832b990c7f291abe578dff3c460f4a1232f024", "url": "https://api.github.com/repos/rust-lang/rust/commits/45832b990c7f291abe578dff3c460f4a1232f024", "html_url": "https://github.com/rust-lang/rust/commit/45832b990c7f291abe578dff3c460f4a1232f024"}, {"sha": "5a355ff52bc3f05e13a1c675290781da68289bc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a355ff52bc3f05e13a1c675290781da68289bc4", "html_url": "https://github.com/rust-lang/rust/commit/5a355ff52bc3f05e13a1c675290781da68289bc4"}], "stats": {"total": 65, "additions": 64, "deletions": 1}, "files": [{"sha": "fb788736d86a0a3be04afc10a14d73ddc39f1963", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fe99a29ad1226dd3f6801ea4bdb575506324be07/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe99a29ad1226dd3f6801ea4bdb575506324be07/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=fe99a29ad1226dd3f6801ea4bdb575506324be07", "patch": "@@ -1136,6 +1136,13 @@ impl Type {\n         matches!(&self.ty.value, Ty::Apply(ApplicationTy { ctor: TypeCtor::Closure { .. }, .. }))\n     }\n \n+    pub fn is_fn(&self) -> bool {\n+        matches!(&self.ty.value,\n+            Ty::Apply(ApplicationTy { ctor: TypeCtor::FnDef(..), .. }) |\n+            Ty::Apply(ApplicationTy { ctor: TypeCtor::FnPtr { .. }, .. })\n+        )\n+    }\n+\n     pub fn contains_unknown(&self) -> bool {\n         return go(&self.ty.value);\n "}, {"sha": "f5b0744612ed88dee1eafb0e645dde2c983a72ef", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/fe99a29ad1226dd3f6801ea4bdb575506324be07/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe99a29ad1226dd3f6801ea4bdb575506324be07/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=fe99a29ad1226dd3f6801ea4bdb575506324be07", "patch": "@@ -349,6 +349,14 @@ impl Builder {\n         if ctx.use_item_syntax.is_some() || ctx.is_call {\n             return self;\n         }\n+\n+        // Don't add parentheses if the expected type is some function reference.\n+        if let Some(ty) = ctx.expected_type_of(&ctx.token.parent()) {\n+            if ty.is_fn() {\n+                return self;\n+            }\n+        }\n+\n         let cap = match ctx.config.snippet_cap {\n             Some(it) => it,\n             None => return self,\n@@ -748,6 +756,54 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn no_call_parens_if_fn_ptr_needed() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                r\"\n+                fn somefn(with: u8, a: u8, lot: u8, of: u8, args: u8) {}\n+\n+                struct ManualVtable {\n+                    method: fn(u8, u8, u8, u8, u8),\n+                }\n+\n+                fn main() -> ManualVtable {\n+                    ManualVtable {\n+                        method: some<|>\n+                    }\n+                }\n+                \"\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"ManualVtable\",\n+                source_range: 295..299,\n+                delete: 295..299,\n+                insert: \"ManualVtable\",\n+                kind: Struct,\n+            },\n+            CompletionItem {\n+                label: \"main\",\n+                source_range: 295..299,\n+                delete: 295..299,\n+                insert: \"main\",\n+                kind: Function,\n+                detail: \"fn main() -> ManualVtable\",\n+            },\n+            CompletionItem {\n+                label: \"somefn\",\n+                source_range: 295..299,\n+                delete: 295..299,\n+                insert: \"somefn\",\n+                kind: Function,\n+                detail: \"fn somefn(with: u8, a: u8, lot: u8, of: u8, args: u8)\",\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n+\n     #[test]\n     fn arg_snippets_for_method_call() {\n         assert_debug_snapshot!(\n@@ -1179,7 +1235,7 @@ mod tests {\n \n     #[test]\n     fn test_struct_field_completion_in_record_lit() {\n-        covers!(test_struct_field_completion_in_func_call);\n+        covers!(test_struct_field_completion_in_record_lit);\n         assert_debug_snapshot!(\n         do_reference_completion(\n                 r\""}]}