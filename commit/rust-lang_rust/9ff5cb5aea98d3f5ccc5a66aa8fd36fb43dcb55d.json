{"sha": "9ff5cb5aea98d3f5ccc5a66aa8fd36fb43dcb55d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZjVjYjVhZWE5OGQzZjVjY2M1YTY2YWE4ZmQzNmZiNDNkY2I1NWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-04T09:41:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-04T09:41:32Z"}, "message": "Auto merge of #48587 - Zoxc:transitive-relation, r=nikomatsakis\n\nMake TransitiveRelation thread safe. Avoid locking by using get_mut in some cases\n\nr? @nikomatsakis", "tree": {"sha": "b88f0b6572045903a1b317634abad8d8da9ae41e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b88f0b6572045903a1b317634abad8d8da9ae41e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ff5cb5aea98d3f5ccc5a66aa8fd36fb43dcb55d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ff5cb5aea98d3f5ccc5a66aa8fd36fb43dcb55d", "html_url": "https://github.com/rust-lang/rust/commit/9ff5cb5aea98d3f5ccc5a66aa8fd36fb43dcb55d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ff5cb5aea98d3f5ccc5a66aa8fd36fb43dcb55d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a316e7483f73ba20c0a0d2abd73d3b9da66bf2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a316e7483f73ba20c0a0d2abd73d3b9da66bf2b", "html_url": "https://github.com/rust-lang/rust/commit/4a316e7483f73ba20c0a0d2abd73d3b9da66bf2b"}, {"sha": "89e55d108c5c6d5f29c4eb0cb829e47bccb8598b", "url": "https://api.github.com/repos/rust-lang/rust/commits/89e55d108c5c6d5f29c4eb0cb829e47bccb8598b", "html_url": "https://github.com/rust-lang/rust/commit/89e55d108c5c6d5f29c4eb0cb829e47bccb8598b"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "6d63bc4436fe874348a4524d9926761fbe92eee1", "filename": "src/librustc_data_structures/transitive_relation.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9ff5cb5aea98d3f5ccc5a66aa8fd36fb43dcb55d/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff5cb5aea98d3f5ccc5a66aa8fd36fb43dcb55d/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftransitive_relation.rs?ref=9ff5cb5aea98d3f5ccc5a66aa8fd36fb43dcb55d", "patch": "@@ -10,16 +10,16 @@\n \n use bitvec::BitMatrix;\n use fx::FxHashMap;\n+use sync::Lock;\n use rustc_serialize::{Encodable, Encoder, Decodable, Decoder};\n use stable_hasher::{HashStable, StableHasher, StableHasherResult};\n-use std::cell::RefCell;\n use std::fmt::Debug;\n use std::hash::Hash;\n use std::mem;\n \n \n #[derive(Clone, Debug)]\n-pub struct TransitiveRelation<T: Clone + Debug + Eq + Hash + Clone> {\n+pub struct TransitiveRelation<T: Clone + Debug + Eq + Hash> {\n     // List of elements. This is used to map from a T to a usize.\n     elements: Vec<T>,\n \n@@ -32,14 +32,14 @@ pub struct TransitiveRelation<T: Clone + Debug + Eq + Hash + Clone> {\n \n     // This is a cached transitive closure derived from the edges.\n     // Currently, we build it lazilly and just throw out any existing\n-    // copy whenever a new edge is added. (The RefCell is to permit\n+    // copy whenever a new edge is added. (The Lock is to permit\n     // the lazy computation.) This is kind of silly, except for the\n     // fact its size is tied to `self.elements.len()`, so I wanted to\n     // wait before building it up to avoid reallocating as new edges\n     // are added with new elements. Perhaps better would be to ask the\n     // user for a batch of edges to minimize this effect, but I\n     // already wrote the code this way. :P -nmatsakis\n-    closure: RefCell<Option<BitMatrix>>,\n+    closure: Lock<Option<BitMatrix>>,\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Debug)]\n@@ -51,13 +51,13 @@ struct Edge {\n     target: Index,\n }\n \n-impl<T: Clone + Debug + Eq + Hash + Clone> TransitiveRelation<T> {\n+impl<T: Clone + Debug + Eq + Hash> TransitiveRelation<T> {\n     pub fn new() -> TransitiveRelation<T> {\n         TransitiveRelation {\n             elements: vec![],\n             map: FxHashMap(),\n             edges: vec![],\n-            closure: RefCell::new(None),\n+            closure: Lock::new(None),\n         }\n     }\n \n@@ -72,7 +72,7 @@ impl<T: Clone + Debug + Eq + Hash + Clone> TransitiveRelation<T> {\n     fn add_index(&mut self, a: T) -> Index {\n         let &mut TransitiveRelation {\n             ref mut elements,\n-            ref closure,\n+            ref mut closure,\n             ref mut map,\n             ..\n         } = self;\n@@ -82,7 +82,7 @@ impl<T: Clone + Debug + Eq + Hash + Clone> TransitiveRelation<T> {\n                elements.push(a);\n \n                // if we changed the dimensions, clear the cache\n-               *closure.borrow_mut() = None;\n+               *closure.get_mut() = None;\n \n                Index(elements.len() - 1)\n            })\n@@ -122,7 +122,7 @@ impl<T: Clone + Debug + Eq + Hash + Clone> TransitiveRelation<T> {\n             self.edges.push(edge);\n \n             // added an edge, clear the cache\n-            *self.closure.borrow_mut() = None;\n+            *self.closure.get_mut() = None;\n         }\n     }\n \n@@ -443,7 +443,7 @@ impl<T> Decodable for TransitiveRelation<T>\n                               .enumerate()\n                               .map(|(index, elem)| (elem.clone(), Index(index)))\n                               .collect();\n-            Ok(TransitiveRelation { elements, edges, map, closure: RefCell::new(None) })\n+            Ok(TransitiveRelation { elements, edges, map, closure: Lock::new(None) })\n         })\n     }\n }"}]}