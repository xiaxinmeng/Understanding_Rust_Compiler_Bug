{"sha": "4c1beb2e453cdd8f3678e399aaa60c2c02980348", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMWJlYjJlNDUzY2RkOGYzNjc4ZTM5OWFhYTYwYzJjMDI5ODAzNDg=", "commit": {"author": {"name": "Samrat Man Singh", "email": "samratmansingh@gmail.com", "date": "2020-07-16T18:33:56Z"}, "committer": {"name": "Samrat Man Singh", "email": "samratmansingh@gmail.com", "date": "2020-07-17T14:48:07Z"}, "message": "Ensure buffer for reading from Stdin is smaller than machine usize\n\nAlso, set appropriate error code on failure", "tree": {"sha": "0f9516c67e4eda2e407b68005704c34a613bd1d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f9516c67e4eda2e407b68005704c34a613bd1d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c1beb2e453cdd8f3678e399aaa60c2c02980348", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c1beb2e453cdd8f3678e399aaa60c2c02980348", "html_url": "https://github.com/rust-lang/rust/commit/4c1beb2e453cdd8f3678e399aaa60c2c02980348", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c1beb2e453cdd8f3678e399aaa60c2c02980348/comments", "author": {"login": "samrat", "id": 480806, "node_id": "MDQ6VXNlcjQ4MDgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/480806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samrat", "html_url": "https://github.com/samrat", "followers_url": "https://api.github.com/users/samrat/followers", "following_url": "https://api.github.com/users/samrat/following{/other_user}", "gists_url": "https://api.github.com/users/samrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/samrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samrat/subscriptions", "organizations_url": "https://api.github.com/users/samrat/orgs", "repos_url": "https://api.github.com/users/samrat/repos", "events_url": "https://api.github.com/users/samrat/events{/privacy}", "received_events_url": "https://api.github.com/users/samrat/received_events", "type": "User", "site_admin": false}, "committer": {"login": "samrat", "id": 480806, "node_id": "MDQ6VXNlcjQ4MDgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/480806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samrat", "html_url": "https://github.com/samrat", "followers_url": "https://api.github.com/users/samrat/followers", "following_url": "https://api.github.com/users/samrat/following{/other_user}", "gists_url": "https://api.github.com/users/samrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/samrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samrat/subscriptions", "organizations_url": "https://api.github.com/users/samrat/orgs", "repos_url": "https://api.github.com/users/samrat/repos", "events_url": "https://api.github.com/users/samrat/events{/privacy}", "received_events_url": "https://api.github.com/users/samrat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74ff4f805a2f6f8f098f1e3323bc57277cfeb2fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/74ff4f805a2f6f8f098f1e3323bc57277cfeb2fa", "html_url": "https://github.com/rust-lang/rust/commit/74ff4f805a2f6f8f098f1e3323bc57277cfeb2fa"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "81708e61b1ab5b3cacc97ba3fb5b5afbc84dda39", "filename": "src/shims/posix/foreign_items.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4c1beb2e453cdd8f3678e399aaa60c2c02980348/src%2Fshims%2Fposix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c1beb2e453cdd8f3678e399aaa60c2c02980348/src%2Fshims%2Fposix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fforeign_items.rs?ref=4c1beb2e453cdd8f3678e399aaa60c2c02980348", "patch": "@@ -1,4 +1,5 @@\n use std::convert::TryFrom;\n+use std::io::{self, Read, Write};\n \n use log::trace;\n \n@@ -11,6 +12,7 @@ use shims::posix::fs::EvalContextExt as _;\n use shims::posix::sync::EvalContextExt as _;\n use shims::posix::thread::EvalContextExt as _;\n \n+\n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn emulate_foreign_item_by_name(\n@@ -67,10 +69,23 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let buf = this.read_scalar(buf)?.not_undef()?;\n                 let count = this.read_scalar(count)?.to_machine_usize(this)?;\n                 let result = if fd == 0 {\n-                    use std::io::{self, Read};\n \n                     this.check_no_isolation(\"read\")?;\n \n+                    // We cap the number of read bytes to the largest\n+                    // value that we are able to fit in both the\n+                    // host's and target's `isize`. This saves us from\n+                    // having to handle overflows later.\n+                    let count = count.min(this.machine_isize_max() as u64).min(isize::MAX as u64);\n+                    // This can never fail because `count` was capped\n+                    // to be smaller than `isize::MAX`.\n+                    let count = isize::try_from(count).unwrap();\n+\n+                    // We want to read at most `count` bytes. We are\n+                    // sure that `count` is not negative because it\n+                    // was a target's `usize`. Also we are sure that\n+                    // its smaller than `usize::MAX` because it is a\n+                    // host's `isize`.\n                     let mut buffer = vec![0; count as usize];\n                     let res = io::stdin()\n                         .read(&mut buffer)\n@@ -83,8 +98,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                             this.memory.write_bytes(buf, buffer)?;\n                             i64::try_from(bytes).unwrap()\n                         },\n-                        // FIXME: set errno to appropriate value\n-                        Err(_) => -1,\n+                        Err(e) => {\n+                            this.set_last_error_from_io_error(e)?;\n+                            -1\n+                        },\n                     }\n                 } else if fd == 1 || fd == 2 {\n                     throw_unsup_format!(\"cannot read from stdout/stderr\")\n@@ -103,7 +120,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     throw_unsup_format!(\"cannot write to stdin\")\n                 } else if fd == 1 || fd == 2 {\n                     // stdout/stderr\n-                    use std::io::{self, Write};\n \n                     let buf_cont = this.memory.read_bytes(buf, Size::from_bytes(count))?;\n                     // We need to flush to make sure this actually appears on the screen"}]}