{"sha": "f15a56d9bcc9712bca842f182e160df1942aea98", "node_id": "C_kwDOAAsO6NoAKGYxNWE1NmQ5YmNjOTcxMmJjYTg0MmYxODJlMTYwZGYxOTQyYWVhOTg", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-06T10:17:21Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-08T15:55:37Z"}, "message": "Implement a proper command parser...\n\n... that grabs things from the front instead of splitting at spaces and colons and hoping for the best", "tree": {"sha": "b7a91ac41ec960978b5481329006c92d1babbbb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7a91ac41ec960978b5481329006c92d1babbbb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f15a56d9bcc9712bca842f182e160df1942aea98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f15a56d9bcc9712bca842f182e160df1942aea98", "html_url": "https://github.com/rust-lang/rust/commit/f15a56d9bcc9712bca842f182e160df1942aea98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f15a56d9bcc9712bca842f182e160df1942aea98/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63916d6f0429718112661e47fac37b2fcfea338e", "url": "https://api.github.com/repos/rust-lang/rust/commits/63916d6f0429718112661e47fac37b2fcfea338e", "html_url": "https://github.com/rust-lang/rust/commit/63916d6f0429718112661e47fac37b2fcfea338e"}], "stats": {"total": 65, "additions": 34, "deletions": 31}, "files": [{"sha": "fa46b54970009abe1e45d2a60bc1ba278e235758", "filename": "ui_test/src/comments.rs", "status": "modified", "additions": 33, "deletions": 30, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/f15a56d9bcc9712bca842f182e160df1942aea98/ui_test%2Fsrc%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f15a56d9bcc9712bca842f182e160df1942aea98/ui_test%2Fsrc%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Fcomments.rs?ref=f15a56d9bcc9712bca842f182e160df1942aea98", "patch": "@@ -98,14 +98,7 @@ impl Comments {\n         line: &str,\n     ) -> Result<()> {\n         if let Some((_, command)) = line.split_once(\"//@\") {\n-            let command = command.trim();\n-            if let Some((command, args)) = command.split_once(':') {\n-                self.parse_command_with_args(command, args, l)\n-            } else if let Some((command, _comments)) = command.split_once(' ') {\n-                self.parse_command(command)\n-            } else {\n-                self.parse_command(command)\n-            }\n+            self.parse_command(command.trim(), l)\n         } else if let Some((_, pattern)) = line.split_once(\"//~\") {\n             self.parse_pattern(pattern, fallthrough_to, l)\n         } else if let Some((_, pattern)) = line.split_once(\"//[\") {\n@@ -189,7 +182,22 @@ impl Comments {\n         Ok(this)\n     }\n \n-    fn parse_command_with_args(&mut self, command: &str, args: &str, l: usize) -> Result<()> {\n+    fn parse_command(&mut self, command: &str, l: usize) -> Result<()> {\n+        // Commands are letters or dashes, grab everything until the first character that is neither of those.\n+        let (command, args) = match command.chars().position(|c: char| !c.is_alphabetic() && c != '-') {\n+            None => (command, \"\"),\n+            Some(i) => {\n+                let (command, args) = command.split_at(i);\n+                let mut args = args.chars();\n+                let next = args.next().expect(\"the `position` above guarantees that there is at least one char\");\n+                let args = match next {\n+                    ':' | ' ' => args.as_str(),\n+                    _ => bail!(\"expected space or `:`, got `{next}`\"),\n+                };\n+                (command, args)\n+            }\n+        };\n+\n         match command {\n             \"revisions\" => {\n                 ensure!(self.revisions.is_none(), \"cannot specifiy revisions twice\");\n@@ -222,30 +230,25 @@ impl Comments {\n                 );\n                 self.error_pattern = Some((args.trim().to_string(), l));\n             }\n-            // Maybe the user just left a comment explaining a command without arguments\n-            _ => self.parse_command(command)?,\n-        }\n-        Ok(())\n-    }\n-\n-    fn parse_command(&mut self, command: &str) -> Result<()> {\n-        if let Some(s) = command.strip_prefix(\"ignore-\") {\n-            self.ignore.push(Condition::parse(s));\n-            return Ok(());\n-        }\n-\n-        if let Some(s) = command.strip_prefix(\"only-\") {\n-            self.only.push(Condition::parse(s));\n-            return Ok(());\n-        }\n+            \"stderr-per-bitwidth\" => {\n+                ensure!(!self.stderr_per_bitwidth, \"cannot specifiy stderr-per-bitwidth twice\");\n+                self.stderr_per_bitwidth = true;\n+            }\n+            command => {\n+                if let Some(s) = command.strip_prefix(\"ignore-\") {\n+                    self.ignore.push(Condition::parse(s));\n+                    return Ok(());\n+                }\n \n-        if command.starts_with(\"stderr-per-bitwidth\") {\n-            ensure!(!self.stderr_per_bitwidth, \"cannot specifiy stderr-per-bitwidth twice\");\n-            self.stderr_per_bitwidth = true;\n-            return Ok(());\n+                if let Some(s) = command.strip_prefix(\"only-\") {\n+                    self.only.push(Condition::parse(s));\n+                    return Ok(());\n+                }\n+                bail!(\"unknown command {command}\");\n+            }\n         }\n \n-        bail!(\"unknown command {command}\");\n+        Ok(())\n     }\n \n     fn parse_pattern("}, {"sha": "15a0aae247b1d08b66da7d6cec7e0ff3a06d64f9", "filename": "ui_test/src/comments/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f15a56d9bcc9712bca842f182e160df1942aea98/ui_test%2Fsrc%2Fcomments%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f15a56d9bcc9712bca842f182e160df1942aea98/ui_test%2Fsrc%2Fcomments%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Fcomments%2Ftests.rs?ref=f15a56d9bcc9712bca842f182e160df1942aea98", "patch": "@@ -44,7 +44,7 @@ use std::mem;\n fn parse_slash_slash_at_fail() -> Result<()> {\n     init();\n     let s = r\"\n-//@  error-pattern  foomp\n+//@  error-patttern  foomp\n use std::mem;\n \n     \";"}]}