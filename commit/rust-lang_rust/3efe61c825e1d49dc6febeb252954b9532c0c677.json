{"sha": "3efe61c825e1d49dc6febeb252954b9532c0c677", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZmU2MWM4MjVlMWQ0OWRjNmZlYmViMjUyOTU0Yjk1MzJjMGM2Nzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-27T11:50:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-27T11:50:10Z"}, "message": "Auto merge of #49305 - SimonSapin:fallible, r=sfackler\n\nStabilize TryFrom / TryInto, and tweak impls for integers\n\nFixes https://github.com/rust-lang/rust/issues/33417 (tracking issue)\n\n----\n\nThis adds:\n\n* `impl From<u16> for usize`\n* `impl From<i16> for isize`\n* `impl From<u8> for isize`\n\n\u2026 replacing corresponding `TryFrom<Error=!>` impls. (`TryFrom` still applies through the generic `impl<T, U> TryFrom<U> for T where T: From<U>`.) Their infallibility is supported by the C99 standard which (indirectly) requires pointers to be at least 16 bits.\n\nThe remaining `TryFrom` impls that define `type Error = !` all involve `usize` or `isize`. This PR changes them to use `TryFromIntError` instead, since having a return type change based on the target is a portability hazard.\n\nNote: if we make similar assumptions about the *maximum* bit size of pointers (for all targets Rust will ever run on in the future), we could have similar `From` impls converting pointer-sized integers to large fixed-size integers. RISC-V considers the possibility of a 128-bit address space (RV128), which would leave only `impl From<usize> for u128` and `impl From<isize> for u128`. I [found](https://www.cl.cam.ac.uk/research/security/ctsrd/pdfs/20171017a-cheri-poster.pdf) some [things](http://www.csl.sri.com/users/neumann/2012resolve-cheri.pdf) about 256-bit \u201ccapabilities\u201d, but I don\u2019t know how relevant that would be to Rust\u2019s `usize` and `isize` types.\n\nI chose conservatively to make no assumption about the future there. Users making their portability decisions and using something like `.try_into().unwrap()`.\n\n----\n\nSince this feature already went through FCP in the tracking issue https://github.com/rust-lang/rust/issues/33417, this PR also proposes **stabilize** the following items:\n\n* The `convert::TryFrom` trait\n* The `convert::TryFrom` trait\n* `impl<T> TryFrom<&[T]> for &[T; $N]` (for `$N` up to 32)\n* `impl<T> TryFrom<&mut [T]> for &mut [T; $N]` (for `$N` up to 32)\n* The `array::TryFromSliceError` struct, with impls of `Debug`, `Copy`, `Clone`, and `Error`\n* `impl TryFrom<u32> for char`\n* The `char::CharTryFromError` struct, with impls of `Copy`, `Clone`, `Debug`, `PartialEq`, `Eq`, `Display`, and `Error`\n* Impls of `TryFrom` for all (?) combinations of primitive integer types where `From` isn\u2019t implemented.\n* The `num::TryFromIntError` struct, with impls of `Debug`, `Copy`, `Clone`, `Display`, `From<!>`, and `Error`\n\nSome minor remaining questions that I hope can be resolved in this PR:\n\n* Should the impls for error types be unified?\n* ~Should `TryFrom` and `TryInto` be in the prelude? `From` and `Into` are.~ (Yes.)", "tree": {"sha": "344ae0b1c79ccf598fde261fce7fa23bf56f7cb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/344ae0b1c79ccf598fde261fce7fa23bf56f7cb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3efe61c825e1d49dc6febeb252954b9532c0c677", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3efe61c825e1d49dc6febeb252954b9532c0c677", "html_url": "https://github.com/rust-lang/rust/commit/3efe61c825e1d49dc6febeb252954b9532c0c677", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3efe61c825e1d49dc6febeb252954b9532c0c677/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14ac1b5faab32d268a85dfde6c6592b7183c5864", "url": "https://api.github.com/repos/rust-lang/rust/commits/14ac1b5faab32d268a85dfde6c6592b7183c5864", "html_url": "https://github.com/rust-lang/rust/commit/14ac1b5faab32d268a85dfde6c6592b7183c5864"}, {"sha": "837d6c70233715a0ae8e15c703d40e3046a2f36a", "url": "https://api.github.com/repos/rust-lang/rust/commits/837d6c70233715a0ae8e15c703d40e3046a2f36a", "html_url": "https://github.com/rust-lang/rust/commit/837d6c70233715a0ae8e15c703d40e3046a2f36a"}], "stats": {"total": 370, "additions": 147, "deletions": 223}, "files": [{"sha": "87144c27c9e11b1b71749f832c354cba97ff59f6", "filename": "src/libcore/array.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=3efe61c825e1d49dc6febeb252954b9532c0c677", "patch": "@@ -59,7 +59,7 @@ unsafe impl<T, A: Unsize<[T]>> FixedSizeArray<T> for A {\n }\n \n /// The error type returned when a conversion from a slice to an array fails.\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n #[derive(Debug, Copy, Clone)]\n pub struct TryFromSliceError(());\n \n@@ -148,7 +148,7 @@ macro_rules! array_impls {\n                 }\n             }\n \n-            #[unstable(feature = \"try_from\", issue = \"33417\")]\n+            #[stable(feature = \"try_from\", since = \"1.26.0\")]\n             impl<'a, T> TryFrom<&'a [T]> for &'a [T; $N] {\n                 type Error = TryFromSliceError;\n \n@@ -162,7 +162,7 @@ macro_rules! array_impls {\n                 }\n             }\n \n-            #[unstable(feature = \"try_from\", issue = \"33417\")]\n+            #[stable(feature = \"try_from\", since = \"1.26.0\")]\n             impl<'a, T> TryFrom<&'a mut [T]> for &'a mut [T; $N] {\n                 type Error = TryFromSliceError;\n "}, {"sha": "bbeebf52a73c19ddeda47bfcc44187b4532ed7a0", "filename": "src/libcore/char.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=3efe61c825e1d49dc6febeb252954b9532c0c677", "patch": "@@ -265,7 +265,7 @@ impl FromStr for char {\n }\n \n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n impl TryFrom<u32> for char {\n     type Error = CharTryFromError;\n \n@@ -280,11 +280,11 @@ impl TryFrom<u32> for char {\n }\n \n /// The error type returned when a conversion from u32 to char fails.\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub struct CharTryFromError(());\n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n impl fmt::Display for CharTryFromError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         \"converted integer out of range for `char`\".fmt(f)"}, {"sha": "637213957848c6b7c01bf35fb791a96356669a76", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=3efe61c825e1d49dc6febeb252954b9532c0c677", "patch": "@@ -322,22 +322,26 @@ pub trait From<T>: Sized {\n ///\n /// [`TryFrom`]: trait.TryFrom.html\n /// [`Into`]: trait.Into.html\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n pub trait TryInto<T>: Sized {\n     /// The type returned in the event of a conversion error.\n+    #[stable(feature = \"try_from\", since = \"1.26.0\")]\n     type Error;\n \n     /// Performs the conversion.\n+    #[stable(feature = \"try_from\", since = \"1.26.0\")]\n     fn try_into(self) -> Result<T, Self::Error>;\n }\n \n /// Attempt to construct `Self` via a conversion.\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n pub trait TryFrom<T>: Sized {\n     /// The type returned in the event of a conversion error.\n+    #[stable(feature = \"try_from\", since = \"1.26.0\")]\n     type Error;\n \n     /// Performs the conversion.\n+    #[stable(feature = \"try_from\", since = \"1.26.0\")]\n     fn try_from(value: T) -> Result<Self, Self::Error>;\n }\n \n@@ -405,7 +409,7 @@ impl<T> From<T> for T {\n \n \n // TryFrom implies TryInto\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n impl<T, U> TryInto<U> for T where U: TryFrom<T>\n {\n     type Error = U::Error;\n@@ -417,7 +421,7 @@ impl<T, U> TryInto<U> for T where U: TryFrom<T>\n \n // Infallible conversions are semantically equivalent to fallible conversions\n // with an uninhabited error type.\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n impl<T, U> TryFrom<U> for T where T: From<U> {\n     type Error = !;\n "}, {"sha": "72b48b565719c90271a57d61cd7a806fe4d5c51c", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 72, "deletions": 2, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=3efe61c825e1d49dc6febeb252954b9532c0c677", "patch": "@@ -91,7 +91,7 @@ macro_rules! step_impl_unsigned {\n             #[inline]\n             #[allow(unreachable_patterns)]\n             fn add_usize(&self, n: usize) -> Option<Self> {\n-                match <$t>::try_from(n) {\n+                match <$t>::private_try_from(n) {\n                     Ok(n_as_t) => self.checked_add(n_as_t),\n                     Err(_) => None,\n                 }\n@@ -123,7 +123,7 @@ macro_rules! step_impl_signed {\n             #[inline]\n             #[allow(unreachable_patterns)]\n             fn add_usize(&self, n: usize) -> Option<Self> {\n-                match <$unsigned>::try_from(n) {\n+                match <$unsigned>::private_try_from(n) {\n                     Ok(n_as_unsigned) => {\n                         // Wrapping in unsigned space handles cases like\n                         // `-120_i8.add_usize(200) == Some(80_i8)`,\n@@ -461,3 +461,73 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<A: Step> FusedIterator for ops::RangeInclusive<A> {}\n+\n+/// Compensate removal of some impls per\n+/// https://github.com/rust-lang/rust/pull/49305#issuecomment-376293243\n+trait PrivateTryFromUsize: Sized {\n+    fn private_try_from(n: usize) -> Result<Self, ()>;\n+}\n+\n+impl<T> PrivateTryFromUsize for T where T: TryFrom<usize> {\n+    #[inline]\n+    fn private_try_from(n: usize) -> Result<Self, ()> {\n+        T::try_from(n).map_err(|_| ())\n+    }\n+}\n+\n+// no possible bounds violation\n+macro_rules! try_from_unbounded {\n+    ($($target:ty),*) => {$(\n+        impl PrivateTryFromUsize for $target {\n+            #[inline]\n+            fn private_try_from(value: usize) -> Result<Self, ()> {\n+                Ok(value as $target)\n+            }\n+        }\n+    )*}\n+}\n+\n+// unsigned to signed (only positive bound)\n+macro_rules! try_from_upper_bounded {\n+    ($($target:ty),*) => {$(\n+        impl PrivateTryFromUsize for $target {\n+            #[inline]\n+            fn private_try_from(u: usize) -> Result<$target, ()> {\n+                if u > (<$target>::max_value() as usize) {\n+                    Err(())\n+                } else {\n+                    Ok(u as $target)\n+                }\n+            }\n+        }\n+    )*}\n+}\n+\n+\n+#[cfg(target_pointer_width = \"16\")]\n+mod ptr_try_from_impls {\n+    use super::PrivateTryFromUsize;\n+\n+    try_from_unbounded!(u16, u32, u64, u128);\n+    try_from_unbounded!(i32, i64, i128);\n+}\n+\n+#[cfg(target_pointer_width = \"32\")]\n+mod ptr_try_from_impls {\n+    use super::PrivateTryFromUsize;\n+\n+    try_from_upper_bounded!(u16);\n+    try_from_unbounded!(u32, u64, u128);\n+    try_from_upper_bounded!(i32);\n+    try_from_unbounded!(i64, i128);\n+}\n+\n+#[cfg(target_pointer_width = \"64\")]\n+mod ptr_try_from_impls {\n+    use super::PrivateTryFromUsize;\n+\n+    try_from_upper_bounded!(u16, u32);\n+    try_from_unbounded!(u64, u128);\n+    try_from_upper_bounded!(i32, i64);\n+    try_from_unbounded!(i128);\n+}"}, {"sha": "ee041e1e4f1d9e82d5573a15d0d99a9181496ff6", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 30, "deletions": 69, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=3efe61c825e1d49dc6febeb252954b9532c0c677", "patch": "@@ -3647,7 +3647,7 @@ macro_rules! from_str_radix_int_impl {\n from_str_radix_int_impl! { isize i8 i16 i32 i64 i128 usize u8 u16 u32 u64 u128 }\n \n /// The error type returned when a checked integral type conversion fails.\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n #[derive(Debug, Copy, Clone)]\n pub struct TryFromIntError(());\n \n@@ -3662,39 +3662,24 @@ impl TryFromIntError {\n     }\n }\n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n impl fmt::Display for TryFromIntError {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         self.__description().fmt(fmt)\n     }\n }\n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n impl From<!> for TryFromIntError {\n     fn from(never: !) -> TryFromIntError {\n         never\n     }\n }\n \n-// no possible bounds violation\n-macro_rules! try_from_unbounded {\n-    ($source:ty, $($target:ty),*) => {$(\n-        #[unstable(feature = \"try_from\", issue = \"33417\")]\n-        impl TryFrom<$source> for $target {\n-            type Error = !;\n-\n-            #[inline]\n-            fn try_from(value: $source) -> Result<Self, Self::Error> {\n-                Ok(value as $target)\n-            }\n-        }\n-    )*}\n-}\n-\n // only negative bounds\n macro_rules! try_from_lower_bounded {\n     ($source:ty, $($target:ty),*) => {$(\n-        #[unstable(feature = \"try_from\", issue = \"33417\")]\n+        #[stable(feature = \"try_from\", since = \"1.26.0\")]\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n \n@@ -3713,7 +3698,7 @@ macro_rules! try_from_lower_bounded {\n // unsigned to signed (only positive bound)\n macro_rules! try_from_upper_bounded {\n     ($source:ty, $($target:ty),*) => {$(\n-        #[unstable(feature = \"try_from\", issue = \"33417\")]\n+        #[stable(feature = \"try_from\", since = \"1.26.0\")]\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n \n@@ -3732,7 +3717,7 @@ macro_rules! try_from_upper_bounded {\n // all other cases\n macro_rules! try_from_both_bounded {\n     ($source:ty, $($target:ty),*) => {$(\n-        #[unstable(feature = \"try_from\", issue = \"33417\")]\n+        #[stable(feature = \"try_from\", since = \"1.26.0\")]\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n \n@@ -3789,82 +3774,44 @@ try_from_both_bounded!(i128, u64, u32, u16, u8);\n try_from_upper_bounded!(usize, isize);\n try_from_lower_bounded!(isize, usize);\n \n+try_from_upper_bounded!(usize, u8);\n+try_from_upper_bounded!(usize, i8, i16);\n+try_from_both_bounded!(isize, u8);\n+try_from_both_bounded!(isize, i8);\n+\n #[cfg(target_pointer_width = \"16\")]\n mod ptr_try_from_impls {\n     use super::TryFromIntError;\n     use convert::TryFrom;\n \n-    try_from_upper_bounded!(usize, u8);\n-    try_from_unbounded!(usize, u16, u32, u64, u128);\n-    try_from_upper_bounded!(usize, i8, i16);\n-    try_from_unbounded!(usize, i32, i64, i128);\n-\n-    try_from_both_bounded!(isize, u8);\n+    // Fallible across platfoms, only implementation differs\n     try_from_lower_bounded!(isize, u16, u32, u64, u128);\n-    try_from_both_bounded!(isize, i8);\n-    try_from_unbounded!(isize, i16, i32, i64, i128);\n-\n-    rev!(try_from_unbounded, usize, u16);\n-    rev!(try_from_upper_bounded, usize, u32, u64, u128);\n     rev!(try_from_lower_bounded, usize, i8, i16);\n     rev!(try_from_both_bounded, usize, i32, i64, i128);\n-\n-    rev!(try_from_unbounded, isize, u8);\n-    rev!(try_from_upper_bounded, isize, u16, u32, u64, u128);\n-    rev!(try_from_unbounded, isize, i16);\n-    rev!(try_from_both_bounded, isize, i32, i64, i128);\n }\n \n #[cfg(target_pointer_width = \"32\")]\n mod ptr_try_from_impls {\n     use super::TryFromIntError;\n     use convert::TryFrom;\n \n-    try_from_upper_bounded!(usize, u8, u16);\n-    try_from_unbounded!(usize, u32, u64, u128);\n-    try_from_upper_bounded!(usize, i8, i16, i32);\n-    try_from_unbounded!(usize, i64, i128);\n-\n-    try_from_both_bounded!(isize, u8, u16);\n+    // Fallible across platfoms, only implementation differs\n+    try_from_both_bounded!(isize, u16);\n     try_from_lower_bounded!(isize, u32, u64, u128);\n-    try_from_both_bounded!(isize, i8, i16);\n-    try_from_unbounded!(isize, i32, i64, i128);\n-\n-    rev!(try_from_unbounded, usize, u16, u32);\n-    rev!(try_from_upper_bounded, usize, u64, u128);\n     rev!(try_from_lower_bounded, usize, i8, i16, i32);\n     rev!(try_from_both_bounded, usize, i64, i128);\n-\n-    rev!(try_from_unbounded, isize, u8, u16);\n-    rev!(try_from_upper_bounded, isize, u32, u64, u128);\n-    rev!(try_from_unbounded, isize, i16, i32);\n-    rev!(try_from_both_bounded, isize, i64, i128);\n }\n \n #[cfg(target_pointer_width = \"64\")]\n mod ptr_try_from_impls {\n     use super::TryFromIntError;\n     use convert::TryFrom;\n \n-    try_from_upper_bounded!(usize, u8, u16, u32);\n-    try_from_unbounded!(usize, u64, u128);\n-    try_from_upper_bounded!(usize, i8, i16, i32, i64);\n-    try_from_unbounded!(usize, i128);\n-\n-    try_from_both_bounded!(isize, u8, u16, u32);\n+    // Fallible across platfoms, only implementation differs\n+    try_from_both_bounded!(isize, u16, u32);\n     try_from_lower_bounded!(isize, u64, u128);\n-    try_from_both_bounded!(isize, i8, i16, i32);\n-    try_from_unbounded!(isize, i64, i128);\n-\n-    rev!(try_from_unbounded, usize, u16, u32, u64);\n-    rev!(try_from_upper_bounded, usize, u128);\n     rev!(try_from_lower_bounded, usize, i8, i16, i32, i64);\n     rev!(try_from_both_bounded, usize, i128);\n-\n-    rev!(try_from_unbounded, isize, u8, u16, u32);\n-    rev!(try_from_upper_bounded, isize, u64, u128);\n-    rev!(try_from_unbounded, isize, i16, i32, i64);\n-    rev!(try_from_both_bounded, isize, i128);\n }\n \n #[doc(hidden)]\n@@ -4074,6 +4021,20 @@ impl_from! { u32, i64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")]\n impl_from! { u32, i128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n impl_from! { u64, i128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n \n+// The C99 standard defines bounds on INTPTR_MIN, INTPTR_MAX, and UINTPTR_MAX\n+// which imply that pointer-sized integers must be at least 16 bits:\n+// https://port70.net/~nsz/c/c99/n1256.html#7.18.2.4\n+impl_from! { u16, usize, #[stable(feature = \"lossless_iusize_conv\", since = \"1.26.0\")] }\n+impl_from! { u8, isize, #[stable(feature = \"lossless_iusize_conv\", since = \"1.26.0\")] }\n+impl_from! { i16, isize, #[stable(feature = \"lossless_iusize_conv\", since = \"1.26.0\")] }\n+\n+// RISC-V defines the possibility of a 128-bit address space (RV128).\n+\n+// CHERI proposes 256-bit \u201ccapabilities\u201d. Unclear if this would be relevant to usize/isize.\n+// https://www.cl.cam.ac.uk/research/security/ctsrd/pdfs/20171017a-cheri-poster.pdf\n+// http://www.csl.sri.com/users/neumann/2012resolve-cheri.pdf\n+\n+\n // Note: integers can only be represented with full precision in a float if\n // they fit in the significand, which is 24 bits in f32 and 53 bits in f64.\n // Lossy float conversions are not implemented at this time."}, {"sha": "2c8e27abac9c0e3afeb2274b27612c6568f8bfda", "filename": "src/libcore/prelude/v1.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibcore%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibcore%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude%2Fv1.rs?ref=3efe61c825e1d49dc6febeb252954b9532c0c677", "patch": "@@ -39,6 +39,9 @@ pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n pub use convert::{AsRef, AsMut, Into, From};\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[doc(no_inline)]\n+pub use convert::{TryFrom, TryInto};\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n pub use default::Default;"}, {"sha": "1a68f04532d204a91a920d5d07b928936d051b65", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=3efe61c825e1d49dc6febeb252954b9532c0c677", "patch": "@@ -43,7 +43,6 @@\n #![feature(step_trait)]\n #![feature(test)]\n #![feature(trusted_len)]\n-#![feature(try_from)]\n #![feature(try_trait)]\n #![feature(exact_chunks)]\n #![feature(atomic_nand)]"}, {"sha": "c7edb55b378c36ce1208c32a96ef6b448f15c778", "filename": "src/libcore/tests/num/mod.rs", "status": "modified", "additions": 0, "deletions": 127, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs?ref=3efe61c825e1d49dc6febeb252954b9532c0c677", "patch": "@@ -37,15 +37,6 @@ mod flt2dec;\n mod dec2flt;\n mod bignum;\n \n-\n-/// Adds the attribute to all items in the block.\n-macro_rules! cfg_block {\n-    ($(#[$attr:meta]{$($it:item)*})*) => {$($(\n-        #[$attr]\n-        $it\n-    )*)*}\n-}\n-\n /// Groups items that assume the pointer width is either 16/32/64, and has to be altered if\n /// support for larger/smaller pointer widths are added in the future.\n macro_rules! assume_usize_width {\n@@ -318,42 +309,6 @@ assume_usize_width! {\n \n     test_impl_try_from_always_ok! { test_try_u16usize, u16, usize }\n     test_impl_try_from_always_ok! { test_try_i16isize, i16, isize }\n-\n-    test_impl_try_from_always_ok! { test_try_usizeu64, usize, u64 }\n-    test_impl_try_from_always_ok! { test_try_usizeu128, usize, u128 }\n-    test_impl_try_from_always_ok! { test_try_usizei128, usize, i128 }\n-\n-    test_impl_try_from_always_ok! { test_try_isizei64, isize, i64 }\n-    test_impl_try_from_always_ok! { test_try_isizei128, isize, i128 }\n-\n-    cfg_block!(\n-        #[cfg(target_pointer_width = \"16\")] {\n-            test_impl_try_from_always_ok! { test_try_usizeu16, usize, u16 }\n-            test_impl_try_from_always_ok! { test_try_isizei16, isize, i16 }\n-            test_impl_try_from_always_ok! { test_try_usizeu32, usize, u32 }\n-            test_impl_try_from_always_ok! { test_try_usizei32, usize, i32 }\n-            test_impl_try_from_always_ok! { test_try_isizei32, isize, i32 }\n-            test_impl_try_from_always_ok! { test_try_usizei64, usize, i64 }\n-        }\n-\n-        #[cfg(target_pointer_width = \"32\")] {\n-            test_impl_try_from_always_ok! { test_try_u16isize, u16, isize }\n-            test_impl_try_from_always_ok! { test_try_usizeu32, usize, u32 }\n-            test_impl_try_from_always_ok! { test_try_isizei32, isize, i32 }\n-            test_impl_try_from_always_ok! { test_try_u32usize, u32, usize }\n-            test_impl_try_from_always_ok! { test_try_i32isize, i32, isize }\n-            test_impl_try_from_always_ok! { test_try_usizei64, usize, i64 }\n-        }\n-\n-        #[cfg(target_pointer_width = \"64\")] {\n-            test_impl_try_from_always_ok! { test_try_u16isize, u16, isize }\n-            test_impl_try_from_always_ok! { test_try_u32usize, u32, usize }\n-            test_impl_try_from_always_ok! { test_try_u32isize, u32, isize }\n-            test_impl_try_from_always_ok! { test_try_i32isize, i32, isize }\n-            test_impl_try_from_always_ok! { test_try_u64usize, u64, usize }\n-            test_impl_try_from_always_ok! { test_try_i64isize, i64, isize }\n-        }\n-    );\n }\n \n /// Conversions where max of $source can be represented as $target,\n@@ -402,24 +357,6 @@ assume_usize_width! {\n     test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_isizeu64, isize, u64 }\n     test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_isizeu128, isize, u128 }\n     test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_isizeusize, isize, usize }\n-\n-    cfg_block!(\n-        #[cfg(target_pointer_width = \"16\")] {\n-            test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_isizeu16, isize, u16 }\n-            test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_isizeu32, isize, u32 }\n-        }\n-\n-        #[cfg(target_pointer_width = \"32\")] {\n-            test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_isizeu32, isize, u32 }\n-\n-            test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_i32usize, i32, usize }\n-        }\n-\n-        #[cfg(target_pointer_width = \"64\")] {\n-            test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_i32usize, i32, usize }\n-            test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_i64usize, i64, usize }\n-        }\n-    );\n }\n \n /// Conversions where max of $source can not be represented as $target,\n@@ -461,29 +398,9 @@ test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u128i64, u128, i64 }\n test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u128i128, u128, i128 }\n \n assume_usize_width! {\n-    test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u64isize, u64, isize }\n-    test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u128isize, u128, isize }\n-\n     test_impl_try_from_unsigned_to_signed_upper_err! { test_try_usizei8, usize, i8 }\n     test_impl_try_from_unsigned_to_signed_upper_err! { test_try_usizei16, usize, i16 }\n     test_impl_try_from_unsigned_to_signed_upper_err! { test_try_usizeisize, usize, isize }\n-\n-    cfg_block!(\n-        #[cfg(target_pointer_width = \"16\")] {\n-            test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u16isize, u16, isize }\n-            test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u32isize, u32, isize }\n-        }\n-\n-        #[cfg(target_pointer_width = \"32\")] {\n-            test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u32isize, u32, isize }\n-            test_impl_try_from_unsigned_to_signed_upper_err! { test_try_usizei32, usize, i32 }\n-        }\n-\n-        #[cfg(target_pointer_width = \"64\")] {\n-            test_impl_try_from_unsigned_to_signed_upper_err! { test_try_usizei32, usize, i32 }\n-            test_impl_try_from_unsigned_to_signed_upper_err! { test_try_usizei64, usize, i64 }\n-        }\n-    );\n }\n \n /// Conversions where min/max of $source can not be represented as $target.\n@@ -543,34 +460,6 @@ test_impl_try_from_same_sign_err! { test_try_i128i64, i128, i64 }\n \n assume_usize_width! {\n     test_impl_try_from_same_sign_err! { test_try_usizeu8, usize, u8 }\n-    test_impl_try_from_same_sign_err! { test_try_u128usize, u128, usize }\n-    test_impl_try_from_same_sign_err! { test_try_i128isize, i128, isize }\n-\n-    cfg_block!(\n-        #[cfg(target_pointer_width = \"16\")] {\n-            test_impl_try_from_same_sign_err! { test_try_u32usize, u32, usize }\n-            test_impl_try_from_same_sign_err! { test_try_u64usize, u64, usize }\n-\n-            test_impl_try_from_same_sign_err! { test_try_i32isize, i32, isize }\n-            test_impl_try_from_same_sign_err! { test_try_i64isize, i64, isize }\n-        }\n-\n-        #[cfg(target_pointer_width = \"32\")] {\n-            test_impl_try_from_same_sign_err! { test_try_u64usize, u64, usize }\n-            test_impl_try_from_same_sign_err! { test_try_usizeu16, usize, u16 }\n-\n-            test_impl_try_from_same_sign_err! { test_try_i64isize, i64, isize }\n-            test_impl_try_from_same_sign_err! { test_try_isizei16, isize, i16 }\n-        }\n-\n-        #[cfg(target_pointer_width = \"64\")] {\n-            test_impl_try_from_same_sign_err! { test_try_usizeu16, usize, u16 }\n-            test_impl_try_from_same_sign_err! { test_try_usizeu32, usize, u32 }\n-\n-            test_impl_try_from_same_sign_err! { test_try_isizei16, isize, i16 }\n-            test_impl_try_from_same_sign_err! { test_try_isizei32, isize, i32 }\n-        }\n-    );\n }\n \n /// Conversions where neither the min nor the max of $source can be represented by\n@@ -615,22 +504,6 @@ test_impl_try_from_signed_to_unsigned_err! { test_try_i128u64, i128, u64 }\n assume_usize_width! {\n     test_impl_try_from_signed_to_unsigned_err! { test_try_isizeu8, isize, u8 }\n     test_impl_try_from_signed_to_unsigned_err! { test_try_i128usize, i128, usize }\n-\n-    cfg_block! {\n-        #[cfg(target_pointer_width = \"16\")] {\n-            test_impl_try_from_signed_to_unsigned_err! { test_try_i32usize, i32, usize }\n-            test_impl_try_from_signed_to_unsigned_err! { test_try_i64usize, i64, usize }\n-        }\n-        #[cfg(target_pointer_width = \"32\")] {\n-            test_impl_try_from_signed_to_unsigned_err! { test_try_i64usize, i64, usize }\n-\n-            test_impl_try_from_signed_to_unsigned_err! { test_try_isizeu16, isize, u16 }\n-        }\n-        #[cfg(target_pointer_width = \"64\")] {\n-            test_impl_try_from_signed_to_unsigned_err! { test_try_isizeu16, isize, u16 }\n-            test_impl_try_from_signed_to_unsigned_err! { test_try_isizeu32, isize, u32 }\n-        }\n-    }\n }\n \n macro_rules! test_float {"}, {"sha": "6f08fcf702595eb49957fc70ff8c43516c6925c9", "filename": "src/librustc_apfloat/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibrustc_apfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibrustc_apfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Flib.rs?ref=3efe61c825e1d49dc6febeb252954b9532c0c677", "patch": "@@ -48,7 +48,7 @@\n \n #![cfg_attr(stage0, feature(slice_patterns))]\n #![cfg_attr(stage0, feature(i128_type))]\n-#![feature(try_from)]\n+#![cfg_attr(stage0, feature(try_from))]\n \n // See librustc_cratesio_shim/Cargo.toml for a comment explaining this.\n #[allow(unused_extern_crates)]"}, {"sha": "3d0c96585b55209b95c2d38dfd0591643cbd3ca0", "filename": "src/libstd/error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=3efe61c825e1d49dc6febeb252954b9532c0c677", "patch": "@@ -275,14 +275,14 @@ impl Error for num::ParseIntError {\n     }\n }\n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n impl Error for num::TryFromIntError {\n     fn description(&self) -> &str {\n         self.__description()\n     }\n }\n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n impl Error for array::TryFromSliceError {\n     fn description(&self) -> &str {\n         self.__description()\n@@ -356,7 +356,7 @@ impl Error for cell::BorrowMutError {\n     }\n }\n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n impl Error for char::CharTryFromError {\n     fn description(&self) -> &str {\n         \"converted integer out of range for `char`\""}, {"sha": "2673f3ccfa3abd9cff77660e554a8938b5330a0d", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=3efe61c825e1d49dc6febeb252954b9532c0c677", "patch": "@@ -10,7 +10,6 @@\n \n use io::prelude::*;\n \n-use core::convert::TryInto;\n use cmp;\n use io::{self, Initializer, SeekFrom, Error, ErrorKind};\n \n@@ -260,9 +259,26 @@ fn slice_write(pos_mut: &mut u64, slice: &mut [u8], buf: &[u8]) -> io::Result<us\n     Ok(amt)\n }\n \n+/// Compensate removal of some impls per\n+/// https://github.com/rust-lang/rust/pull/49305#issuecomment-376293243\n+#[cfg(any(target_pointer_width = \"16\",\n+          target_pointer_width = \"32\"))]\n+fn try_into(n: u64) -> Result<usize, ()> {\n+    if n <= (<usize>::max_value() as u64) {\n+        Ok(n as usize)\n+    } else {\n+        Err(())\n+    }\n+}\n+\n+#[cfg(any(target_pointer_width = \"64\"))]\n+fn try_into(n: u64) -> Result<usize, ()> {\n+    Ok(n as usize)\n+}\n+\n // Resizing write implementation\n fn vec_write(pos_mut: &mut u64, vec: &mut Vec<u8>, buf: &[u8]) -> io::Result<usize> {\n-    let pos: usize = (*pos_mut).try_into().map_err(|_| {\n+    let pos: usize = try_into(*pos_mut).map_err(|_| {\n         Error::new(ErrorKind::InvalidInput,\n                     \"cursor position exceeds maximum possible vector length\")\n     })?;"}, {"sha": "15a22443b6af76ae90ceb006677d650ef3301f9e", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=3efe61c825e1d49dc6febeb252954b9532c0c677", "patch": "@@ -310,7 +310,6 @@\n #![feature(test, rustc_private)]\n #![feature(thread_local)]\n #![feature(toowned_clone_into)]\n-#![feature(try_from)]\n #![feature(try_reserve)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]"}, {"sha": "d5b7c68a3fa86b64a839cd6b83e34ec0d785a2b7", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=3efe61c825e1d49dc6febeb252954b9532c0c677", "patch": "@@ -35,6 +35,8 @@\n #[doc(no_inline)] pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)] pub use convert::{AsRef, AsMut, Into, From};\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[doc(no_inline)] pub use convert::{TryFrom, TryInto};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)] pub use default::Default;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "33e47ade8cb9cd30a7ac25d2c6a4cbc5a977cc81", "filename": "src/libstd_unicode/char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibstd_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibstd_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Fchar.rs?ref=3efe61c825e1d49dc6febeb252954b9532c0c677", "patch": "@@ -42,7 +42,7 @@ pub use core::char::{EscapeDebug, EscapeDefault, EscapeUnicode};\n pub use core::char::ParseCharError;\n \n // unstable re-exports\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.26.0\")]\n pub use core::char::CharTryFromError;\n #[unstable(feature = \"decode_utf8\", issue = \"33906\")]\n pub use core::char::{DecodeUtf8, decode_utf8};"}, {"sha": "c22ea1671fa590131310a79241383043169d31d0", "filename": "src/libstd_unicode/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibstd_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Flibstd_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Flib.rs?ref=3efe61c825e1d49dc6febeb252954b9532c0c677", "patch": "@@ -39,7 +39,6 @@\n #![feature(lang_items)]\n #![feature(non_exhaustive)]\n #![feature(staged_api)]\n-#![feature(try_from)]\n #![feature(unboxed_closures)]\n \n mod bool_trie;"}, {"sha": "a9f747d09ec2dd7b4cb15ae8a184ccda312b383d", "filename": "src/test/ui/e0119/conflict-with-std.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.rs?ref=3efe61c825e1d49dc6febeb252954b9532c0c677", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(try_from)]\n-\n use std::marker::PhantomData;\n use std::convert::{TryFrom, AsRef};\n "}, {"sha": "417ff1de3f8173ff958459981f405225f673dafa", "filename": "src/test/ui/e0119/conflict-with-std.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3efe61c825e1d49dc6febeb252954b9532c0c677/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr?ref=3efe61c825e1d49dc6febeb252954b9532c0c677", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `std::convert::AsRef<Q>` for type `std::boxed::Box<Q>`:\n-  --> $DIR/conflict-with-std.rs:17:1\n+  --> $DIR/conflict-with-std.rs:15:1\n    |\n LL | impl AsRef<Q> for Box<Q> { //~ ERROR conflicting implementations\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -9,7 +9,7 @@ LL | impl AsRef<Q> for Box<Q> { //~ ERROR conflicting implementations\n              where T: ?Sized;\n \n error[E0119]: conflicting implementations of trait `std::convert::From<S>` for type `S`:\n-  --> $DIR/conflict-with-std.rs:24:1\n+  --> $DIR/conflict-with-std.rs:22:1\n    |\n LL | impl From<S> for S { //~ ERROR conflicting implementations\n    | ^^^^^^^^^^^^^^^^^^\n@@ -18,7 +18,7 @@ LL | impl From<S> for S { //~ ERROR conflicting implementations\n            - impl<T> std::convert::From<T> for T;\n \n error[E0119]: conflicting implementations of trait `std::convert::TryFrom<X>` for type `X`:\n-  --> $DIR/conflict-with-std.rs:31:1\n+  --> $DIR/conflict-with-std.rs:29:1\n    |\n LL | impl TryFrom<X> for X { //~ ERROR conflicting implementations\n    | ^^^^^^^^^^^^^^^^^^^^^"}]}