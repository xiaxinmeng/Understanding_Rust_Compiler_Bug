{"sha": "a7d31b55a4292f55851bc75265643b2ae2e675df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZDMxYjU1YTQyOTJmNTU4NTFiYzc1MjY1NjQzYjJhZTJlNjc1ZGY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-15T18:25:29Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-15T18:25:29Z"}, "message": "Simplify walk", "tree": {"sha": "a3888bf27291e4336510347b86934fa243effb68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3888bf27291e4336510347b86934fa243effb68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7d31b55a4292f55851bc75265643b2ae2e675df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7d31b55a4292f55851bc75265643b2ae2e675df", "html_url": "https://github.com/rust-lang/rust/commit/a7d31b55a4292f55851bc75265643b2ae2e675df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7d31b55a4292f55851bc75265643b2ae2e675df/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324", "html_url": "https://github.com/rust-lang/rust/commit/9f6cf42c5fd0bd98dd3445239f2c6414e8fd9324"}], "stats": {"total": 33, "additions": 13, "deletions": 20}, "files": [{"sha": "d8797c453c263da1f34b8747a3d2166407c1e7a3", "filename": "crates/libsyntax2/src/algo/walk.rs", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a7d31b55a4292f55851bc75265643b2ae2e675df/crates%2Flibsyntax2%2Fsrc%2Falgo%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d31b55a4292f55851bc75265643b2ae2e675df/crates%2Flibsyntax2%2Fsrc%2Falgo%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Falgo%2Fwalk.rs?ref=a7d31b55a4292f55851bc75265643b2ae2e675df", "patch": "@@ -1,4 +1,7 @@\n-use SyntaxNodeRef;\n+use {\n+    SyntaxNodeRef,\n+    algo::generate,\n+};\n \n pub fn preorder<'a>(root: SyntaxNodeRef<'a>) -> impl Iterator<Item = SyntaxNodeRef<'a>> {\n     walk(root).filter_map(|event| match event {\n@@ -14,32 +17,22 @@ pub enum WalkEvent<'a> {\n }\n \n pub fn walk<'a>(root: SyntaxNodeRef<'a>) -> impl Iterator<Item = WalkEvent<'a>> {\n-    let mut done = false;\n-    ::itertools::unfold(WalkEvent::Enter(root), move |pos| {\n-        if done {\n-            return None;\n-        }\n-        let res = *pos;\n-        *pos = match *pos {\n+    generate(Some(WalkEvent::Enter(root)), |pos| {\n+        let next = match *pos {\n             WalkEvent::Enter(node) => match node.first_child() {\n                 Some(child) => WalkEvent::Enter(child),\n                 None => WalkEvent::Exit(node),\n             },\n             WalkEvent::Exit(node) => {\n-                if node == root {\n-                    done = true;\n-                    WalkEvent::Exit(node)\n-                } else {\n-                    match node.next_sibling() {\n-                        Some(sibling) => WalkEvent::Enter(sibling),\n-                        None => match node.parent() {\n-                            Some(node) => WalkEvent::Exit(node),\n-                            None => WalkEvent::Exit(node),\n-                        },\n-                    }\n+                match node.next_sibling() {\n+                    Some(sibling) => WalkEvent::Enter(sibling),\n+                    None => match node.parent() {\n+                        Some(node) => WalkEvent::Exit(node),\n+                        None => return None,\n+                    },\n                 }\n             }\n         };\n-        Some(res)\n+        Some(next)\n     })\n }"}]}