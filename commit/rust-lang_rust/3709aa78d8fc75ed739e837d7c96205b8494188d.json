{"sha": "3709aa78d8fc75ed739e837d7c96205b8494188d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MDlhYTc4ZDhmYzc1ZWQ3MzllODM3ZDdjOTYyMDViODQ5NDE4OGQ=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-28T02:37:20Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-28T03:56:49Z"}, "message": "std::vec: Remove functions concat, connect\n\nstd::vec::{concat, connect, concat_slices, connect_slices} are replaced\nby the already existing trait methods .concat_vec() and .connect_vec().", "tree": {"sha": "a78cae19a7b867116e4363be971c742803203140", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a78cae19a7b867116e4363be971c742803203140"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3709aa78d8fc75ed739e837d7c96205b8494188d", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3709aa78d8fc75ed739e837d7c96205b8494188d", "html_url": "https://github.com/rust-lang/rust/commit/3709aa78d8fc75ed739e837d7c96205b8494188d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3709aa78d8fc75ed739e837d7c96205b8494188d/comments", "author": null, "committer": null, "parents": [{"sha": "24a4d0daf0ba954b94eeeb9eb83355cd2f16ede5", "url": "https://api.github.com/repos/rust-lang/rust/commits/24a4d0daf0ba954b94eeeb9eb83355cd2f16ede5", "html_url": "https://github.com/rust-lang/rust/commit/24a4d0daf0ba954b94eeeb9eb83355cd2f16ede5"}], "stats": {"total": 40, "additions": 12, "deletions": 28}, "files": [{"sha": "c9eded645fa2d84a45f8690285b1a71036fce532", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3709aa78d8fc75ed739e837d7c96205b8494188d/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3709aa78d8fc75ed739e837d7c96205b8494188d/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=3709aa78d8fc75ed739e837d7c96205b8494188d", "patch": "@@ -773,12 +773,12 @@ pub fn specialize(cx: &MatchCheckCtxt,\n                         let num_elements = before.len() + after.len();\n                         if num_elements < arity && slice.is_some() {\n                             Some(vec::append(\n-                                vec::concat(&[\n+                                [\n                                     before,\n                                     vec::from_elem(\n                                         arity - num_elements, wild()),\n                                     after\n-                                ]),\n+                                ].concat_vec(),\n                                 r.tail()\n                             ))\n                         } else if num_elements == arity {"}, {"sha": "70f1815b462ed60d7fc41cfe41da1cb9a9850619", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3709aa78d8fc75ed739e837d7c96205b8494188d/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3709aa78d8fc75ed739e837d7c96205b8494188d/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=3709aa78d8fc75ed739e837d7c96205b8494188d", "patch": "@@ -173,12 +173,11 @@ impl Clean<Item> for doctree::Module {\n             visibility: self.vis.clean(),\n             id: self.id,\n             inner: ModuleItem(Module {\n-               items: std::vec::concat(&[self.structs.clean(),\n-                              self.enums.clean(), self.fns.clean(),\n-                              std::vec::concat(self.foreigns.clean()),\n-                              self.mods.clean(), self.typedefs.clean(),\n-                              self.statics.clean(), self.traits.clean(),\n-                              self.impls.clean(), self.view_items.clean()])\n+               items: [self.structs.clean(), self.enums.clean(),\n+                       self.fns.clean(), self.foreigns.clean().concat_vec(),\n+                       self.mods.clean(), self.typedefs.clean(),\n+                       self.statics.clean(), self.traits.clean(),\n+                       self.impls.clean(), self.view_items.clean()].concat_vec()\n             })\n         }\n     }"}, {"sha": "1398f08bb7c9b6a3de6b3f10fd983a32d9ff4a12", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3709aa78d8fc75ed739e837d7c96205b8494188d/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3709aa78d8fc75ed739e837d7c96205b8494188d/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=3709aa78d8fc75ed739e837d7c96205b8494188d", "patch": "@@ -340,18 +340,6 @@ pub fn flat_map<T, U>(v: &[T], f: &fn(t: &T) -> ~[U]) -> ~[U] {\n     result\n }\n \n-/// Flattens a vector of vectors of T into a single vector of T.\n-pub fn concat<T:Clone>(v: &[~[T]]) -> ~[T] { v.concat_vec() }\n-\n-/// Concatenate a vector of vectors, placing a given separator between each\n-pub fn connect<T:Clone>(v: &[~[T]], sep: &T) -> ~[T] { v.connect_vec(sep) }\n-\n-/// Flattens a vector of vectors of T into a single vector of T.\n-pub fn concat_slices<T:Clone>(v: &[&[T]]) -> ~[T] { v.concat_vec() }\n-\n-/// Concatenate a vector of vectors, placing a given separator between each\n-pub fn connect_slices<T:Clone>(v: &[&[T]], sep: &T) -> ~[T] { v.connect_vec(sep) }\n-\n #[allow(missing_doc)]\n pub trait VectorVector<T> {\n     // FIXME #5898: calling these .concat and .connect conflicts with\n@@ -3098,24 +3086,21 @@ mod tests {\n \n     #[test]\n     fn test_concat() {\n-        assert_eq!(concat([~[1], ~[2,3]]), ~[1, 2, 3]);\n+        let v: [~[int], ..0] = [];\n+        assert_eq!(v.concat_vec(), ~[]);\n         assert_eq!([~[1], ~[2,3]].concat_vec(), ~[1, 2, 3]);\n \n-        assert_eq!(concat_slices([&[1], &[2,3]]), ~[1, 2, 3]);\n         assert_eq!([&[1], &[2,3]].concat_vec(), ~[1, 2, 3]);\n     }\n \n     #[test]\n     fn test_connect() {\n-        assert_eq!(connect([], &0), ~[]);\n-        assert_eq!(connect([~[1], ~[2, 3]], &0), ~[1, 0, 2, 3]);\n-        assert_eq!(connect([~[1], ~[2], ~[3]], &0), ~[1, 0, 2, 0, 3]);\n+        let v: [~[int], ..0] = [];\n+        assert_eq!(v.connect_vec(&0), ~[]);\n         assert_eq!([~[1], ~[2, 3]].connect_vec(&0), ~[1, 0, 2, 3]);\n         assert_eq!([~[1], ~[2], ~[3]].connect_vec(&0), ~[1, 0, 2, 0, 3]);\n \n-        assert_eq!(connect_slices([], &0), ~[]);\n-        assert_eq!(connect_slices([&[1], &[2, 3]], &0), ~[1, 0, 2, 3]);\n-        assert_eq!(connect_slices([&[1], &[2], &[3]], &0), ~[1, 0, 2, 0, 3]);\n+        assert_eq!(v.connect_vec(&0), ~[]);\n         assert_eq!([&[1], &[2, 3]].connect_vec(&0), ~[1, 0, 2, 3]);\n         assert_eq!([&[1], &[2], &[3]].connect_vec(&0), ~[1, 0, 2, 0, 3]);\n     }"}]}