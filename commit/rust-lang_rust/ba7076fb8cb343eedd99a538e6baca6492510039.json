{"sha": "ba7076fb8cb343eedd99a538e6baca6492510039", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNzA3NmZiOGNiMzQzZWVkZDk5YTUzOGU2YmFjYTY0OTI1MTAwMzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-10T18:07:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-10T18:07:03Z"}, "message": "Auto merge of #5447 - phansch:rustuppp, r=matthiaskrgr\n\nRustup to https://github.com/rust-lang/rust/pull/70913\n\nchangelog: none", "tree": {"sha": "14f6f330059d63605687b83df34ee0acf04b3465", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14f6f330059d63605687b83df34ee0acf04b3465"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba7076fb8cb343eedd99a538e6baca6492510039", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba7076fb8cb343eedd99a538e6baca6492510039", "html_url": "https://github.com/rust-lang/rust/commit/ba7076fb8cb343eedd99a538e6baca6492510039", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba7076fb8cb343eedd99a538e6baca6492510039/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34763a5f3632b1d9081ba0245a729174996f0b38", "url": "https://api.github.com/repos/rust-lang/rust/commits/34763a5f3632b1d9081ba0245a729174996f0b38", "html_url": "https://github.com/rust-lang/rust/commit/34763a5f3632b1d9081ba0245a729174996f0b38"}, {"sha": "3ef1dab211f92b238fda40749fa5602521d7af10", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ef1dab211f92b238fda40749fa5602521d7af10", "html_url": "https://github.com/rust-lang/rust/commit/3ef1dab211f92b238fda40749fa5602521d7af10"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "bab3cf8ecb185df6de23e4a9b725c2d78b88de3d", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba7076fb8cb343eedd99a538e6baca6492510039/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7076fb8cb343eedd99a538e6baca6492510039/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=ba7076fb8cb343eedd99a538e6baca6492510039", "patch": "@@ -3425,12 +3425,12 @@ enum SelfKind {\n \n impl SelfKind {\n     fn matches<'a>(self, cx: &LateContext<'_, 'a>, parent_ty: Ty<'a>, ty: Ty<'a>) -> bool {\n-        fn matches_value(parent_ty: Ty<'_>, ty: Ty<'_>) -> bool {\n+        fn matches_value<'a>(cx: &LateContext<'_, 'a>, parent_ty: Ty<'_>, ty: Ty<'_>) -> bool {\n             if ty == parent_ty {\n                 true\n             } else if ty.is_box() {\n                 ty.boxed_ty() == parent_ty\n-            } else if ty.is_rc() || ty.is_arc() {\n+            } else if is_type_diagnostic_item(cx, ty, sym::Rc) || is_type_diagnostic_item(cx, ty, sym::Arc) {\n                 if let ty::Adt(_, substs) = ty.kind {\n                     substs.types().next().map_or(false, |t| t == parent_ty)\n                 } else {\n@@ -3464,7 +3464,7 @@ impl SelfKind {\n         }\n \n         match self {\n-            Self::Value => matches_value(parent_ty, ty),\n+            Self::Value => matches_value(cx, parent_ty, ty),\n             Self::Ref => matches_ref(cx, hir::Mutability::Not, parent_ty, ty) || ty == parent_ty && is_copy(cx, ty),\n             Self::RefMut => matches_ref(cx, hir::Mutability::Mut, parent_ty, ty),\n             Self::No => ty != parent_ty,"}, {"sha": "67399fb64683ce730bc314c86c96626d43be32b0", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba7076fb8cb343eedd99a538e6baca6492510039/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7076fb8cb343eedd99a538e6baca6492510039/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=ba7076fb8cb343eedd99a538e6baca6492510039", "patch": "@@ -347,7 +347,7 @@ impl Types {\n                             );\n                             return; // don't recurse into the type\n                         }\n-                    } else if Some(def_id) == cx.tcx.lang_items().rc() {\n+                    } else if cx.tcx.is_diagnostic_item(sym::Rc, def_id) {\n                         if let Some(span) = match_type_parameter(cx, qpath, &paths::RC) {\n                             span_lint_and_sugg(\n                                 cx,"}]}