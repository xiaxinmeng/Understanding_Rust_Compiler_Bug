{"sha": "3f1e51b3f4a7bfb42c442caf2cb836ba62e2ba53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMWU1MWIzZjRhN2JmYjQyYzQ0MmNhZjJjYjgzNmJhNjJlMmJhNTM=", "commit": {"author": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-04-27T06:57:36Z"}, "committer": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-04-27T06:57:36Z"}, "message": "Rename `negate` to `sign` and make it strong types then make `art1` &str", "tree": {"sha": "a9f90f6a855c95be5457e1cfec0c11dd44ae2d21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9f90f6a855c95be5457e1cfec0c11dd44ae2d21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f1e51b3f4a7bfb42c442caf2cb836ba62e2ba53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f1e51b3f4a7bfb42c442caf2cb836ba62e2ba53", "html_url": "https://github.com/rust-lang/rust/commit/3f1e51b3f4a7bfb42c442caf2cb836ba62e2ba53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f1e51b3f4a7bfb42c442caf2cb836ba62e2ba53/comments", "author": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dd0f3459f558c1b557223a042f549b378cacae9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dd0f3459f558c1b557223a042f549b378cacae9", "html_url": "https://github.com/rust-lang/rust/commit/7dd0f3459f558c1b557223a042f549b378cacae9"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "321d5265d0c2501c6d1924bebc592cf219f427db", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3f1e51b3f4a7bfb42c442caf2cb836ba62e2ba53/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f1e51b3f4a7bfb42c442caf2cb836ba62e2ba53/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=3f1e51b3f4a7bfb42c442caf2cb836ba62e2ba53", "patch": "@@ -786,20 +786,29 @@ fn same_var<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &Expr<'_>, var: HirId) -\n     }\n }\n \n+#[derive(Clone, Copy)]\n+enum OffsetSign {\n+    Positive,\n+    Negative,\n+}\n+\n struct Offset {\n     value: String,\n-    negate: bool,\n+    sign: OffsetSign,\n }\n \n impl Offset {\n-    fn negative(s: String) -> Self {\n-        Self { value: s, negate: true }\n+    fn negative(value: String) -> Self {\n+        Self {\n+            value,\n+            sign: OffsetSign::Negative,\n+        }\n     }\n \n-    fn positive(s: String) -> Self {\n+    fn positive(value: String) -> Self {\n         Self {\n-            value: s,\n-            negate: false,\n+            value,\n+            sign: OffsetSign::Positive,\n         }\n     }\n }\n@@ -949,31 +958,23 @@ fn detect_manual_memcpy<'a, 'tcx>(\n     {\n         // the var must be a single name\n         if let PatKind::Binding(_, canonical_id, _, _) = pat.kind {\n-            let print_sum = |arg1: &Offset, arg2: &Offset| -> String {\n-                match (&arg1.value[..], arg1.negate, &arg2.value[..], arg2.negate) {\n-                    (\"0\", _, \"0\", _) => \"0\".into(),\n-                    (\"0\", _, x, false) | (x, false, \"0\", _) => x.into(),\n-                    (\"0\", _, x, true) => format!(\"-{}\", x),\n-                    (x, false, y, false) => format!(\"({} + {})\", x, y),\n-                    (x, false, y, true) => {\n+            let print_sum = |arg1: &str, arg2: &Offset| -> String {\n+                match (arg1, &arg2.value[..], arg2.sign) {\n+                    (\"0\", \"0\", _) => \"0\".into(),\n+                    (\"0\", x, OffsetSign::Positive) | (x, \"0\", _) => x.into(),\n+                    (\"0\", x, OffsetSign::Negative) => format!(\"-{}\", x),\n+                    (x, y, OffsetSign::Positive) => format!(\"({} + {})\", x, y),\n+                    (x, y, OffsetSign::Negative) => {\n                         if x == y {\n                             \"0\".into()\n                         } else {\n                             format!(\"({} - {})\", x, y)\n                         }\n                     },\n-                    (x, true, y, false) => {\n-                        if x == y {\n-                            \"0\".into()\n-                        } else {\n-                            format!(\"({} - {})\", y, x)\n-                        }\n-                    },\n-                    (x, true, y, true) => format!(\"-({} + {})\", x, y),\n                 }\n             };\n \n-            let print_offset = |start_str: &Offset, inline_offset: &Offset| -> String {\n+            let print_offset = |start_str: &str, inline_offset: &Offset| -> String {\n                 let offset = print_sum(start_str, inline_offset);\n                 if offset.as_str() == \"0\" {\n                     \"\".into()\n@@ -990,10 +991,9 @@ fn detect_manual_memcpy<'a, 'tcx>(\n                     if let Some(arg) = len_args.get(0);\n                     if snippet(cx, arg.span, \"??\") == var_name;\n                     then {\n-                        if offset.negate {\n-                            format!(\"({} - {})\", snippet(cx, end.span, \"<src>.len()\"), offset.value)\n-                        } else {\n-                            String::new()\n+                        match offset.sign {\n+                            OffsetSign::Negative => format!(\"({} - {})\", snippet(cx, end.span, \"<src>.len()\"), offset.value),\n+                            OffsetSign::Positive => \"\".into(),\n                         }\n                     } else {\n                         let end_str = match limits {\n@@ -1004,7 +1004,7 @@ fn detect_manual_memcpy<'a, 'tcx>(\n                             ast::RangeLimits::HalfOpen => format!(\"{}\", snippet(cx, end.span, \"..\")),\n                         };\n \n-                        print_sum(&Offset::positive(end_str), &offset)\n+                        print_sum(&end_str, &offset)\n                     }\n                 }\n             };\n@@ -1016,7 +1016,7 @@ fn detect_manual_memcpy<'a, 'tcx>(\n             let big_sugg = manual_copies\n                 .into_iter()\n                 .map(|(dst_var, src_var)| {\n-                    let start_str = Offset::positive(snippet(cx, start.span, \"\").to_string());\n+                    let start_str = snippet(cx, start.span, \"\").to_string();\n                     let dst_offset = print_offset(&start_str, &dst_var.offset);\n                     let dst_limit = print_limit(end, dst_var.offset, &dst_var.var_name);\n                     let src_offset = print_offset(&start_str, &src_var.offset);"}]}