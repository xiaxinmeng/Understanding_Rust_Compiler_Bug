{"sha": "b5817fada28cf21199ce4911b5cbde8bd1007c0d", "node_id": "C_kwDOAAsO6NoAKGI1ODE3ZmFkYTI4Y2YyMTE5OWNlNDkxMWI1Y2JkZThiZDEwMDdjMGQ", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-08T02:26:37Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-08T02:26:37Z"}, "message": "rustdoc: Remove top-level wrappers for `ImplKind` methods\n\nThe `ImplKind` methods can just be used directly instead.", "tree": {"sha": "7afeda14023f99016f3b217a207f3ce10700dc0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7afeda14023f99016f3b217a207f3ce10700dc0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5817fada28cf21199ce4911b5cbde8bd1007c0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5817fada28cf21199ce4911b5cbde8bd1007c0d", "html_url": "https://github.com/rust-lang/rust/commit/b5817fada28cf21199ce4911b5cbde8bd1007c0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5817fada28cf21199ce4911b5cbde8bd1007c0d/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c7bf451eb986623d8fc4a8c4ab427393b3ab846", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c7bf451eb986623d8fc4a8c4ab427393b3ab846", "html_url": "https://github.com/rust-lang/rust/commit/7c7bf451eb986623d8fc4a8c4ab427393b3ab846"}], "stats": {"total": 28, "additions": 8, "deletions": 20}, "files": [{"sha": "0dc1c24b16e195c6a03743bc1ce07535ec6d1558", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b5817fada28cf21199ce4911b5cbde8bd1007c0d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5817fada28cf21199ce4911b5cbde8bd1007c0d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=b5817fada28cf21199ce4911b5cbde8bd1007c0d", "patch": "@@ -2182,18 +2182,6 @@ crate struct Impl {\n }\n \n impl Impl {\n-    crate fn is_auto_impl(&self) -> bool {\n-        self.kind.is_auto()\n-    }\n-\n-    crate fn is_blanket_impl(&self) -> bool {\n-        self.kind.is_blanket()\n-    }\n-\n-    crate fn blanket_impl_ty(&self) -> Option<&Type> {\n-        self.kind.as_blanket_ty()\n-    }\n-\n     crate fn provided_trait_methods(&self, tcx: TyCtxt<'_>) -> FxHashSet<Symbol> {\n         self.trait_\n             .as_ref()"}, {"sha": "a929cd094f8c3bcb6417d1f35c937786540c4888", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5817fada28cf21199ce4911b5cbde8bd1007c0d/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5817fada28cf21199ce4911b5cbde8bd1007c0d/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=b5817fada28cf21199ce4911b5cbde8bd1007c0d", "patch": "@@ -228,7 +228,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n         // Collect all the implementors of traits.\n         if let clean::ImplItem(ref i) = *item.kind {\n             if let Some(trait_) = &i.trait_ {\n-                if !i.is_blanket_impl() {\n+                if !i.kind.is_blanket() {\n                     self.cache\n                         .implementors\n                         .entry(trait_.def_id())"}, {"sha": "4f2049132046d8a534a9c8e9069a15d836d5be84", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5817fada28cf21199ce4911b5cbde8bd1007c0d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5817fada28cf21199ce4911b5cbde8bd1007c0d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=b5817fada28cf21199ce4911b5cbde8bd1007c0d", "patch": "@@ -999,7 +999,7 @@ impl clean::Impl {\n                 write!(f, \" for \")?;\n             }\n \n-            if let Some(ref ty) = self.blanket_impl_ty() {\n+            if let Some(ref ty) = self.kind.as_blanket_ty() {\n                 fmt_type(ty, f, use_absolute, cx)?;\n             } else {\n                 fmt_type(&self.for_, f, use_absolute, cx)?;"}, {"sha": "fdadc68998dc663f98609c190841b75d3f09f5f8", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b5817fada28cf21199ce4911b5cbde8bd1007c0d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5817fada28cf21199ce4911b5cbde8bd1007c0d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=b5817fada28cf21199ce4911b5cbde8bd1007c0d", "patch": "@@ -1148,9 +1148,9 @@ fn render_assoc_items_inner(\n         }\n \n         let (synthetic, concrete): (Vec<&&Impl>, Vec<&&Impl>) =\n-            traits.iter().partition(|t| t.inner_impl().is_auto_impl());\n+            traits.iter().partition(|t| t.inner_impl().kind.is_auto());\n         let (blanket_impl, concrete): (Vec<&&Impl>, _) =\n-            concrete.into_iter().partition(|t| t.inner_impl().is_blanket_impl());\n+            concrete.into_iter().partition(|t| t.inner_impl().kind.is_blanket());\n \n         let mut impls = Buffer::empty_from(w);\n         render_impls(cx, &mut impls, &concrete, containing_item);\n@@ -2059,9 +2059,9 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n             };\n \n             let (synthetic, concrete): (Vec<&Impl>, Vec<&Impl>) =\n-                v.iter().partition::<Vec<_>, _>(|i| i.inner_impl().is_auto_impl());\n+                v.iter().partition::<Vec<_>, _>(|i| i.inner_impl().kind.is_auto());\n             let (blanket_impl, concrete): (Vec<&Impl>, Vec<&Impl>) =\n-                concrete.into_iter().partition::<Vec<_>, _>(|i| i.inner_impl().is_blanket_impl());\n+                concrete.into_iter().partition::<Vec<_>, _>(|i| i.inner_impl().kind.is_blanket());\n \n             let concrete_format = format_impls(concrete);\n             let synthetic_format = format_impls(synthetic);"}, {"sha": "7ef773fe5ff29dde2338ef963426cb4d5b2b419f", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5817fada28cf21199ce4911b5cbde8bd1007c0d/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5817fada28cf21199ce4911b5cbde8bd1007c0d/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=b5817fada28cf21199ce4911b5cbde8bd1007c0d", "patch": "@@ -746,7 +746,7 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         });\n \n         let (mut synthetic, mut concrete): (Vec<&&Impl>, Vec<&&Impl>) =\n-            local.iter().partition(|i| i.inner_impl().is_auto_impl());\n+            local.iter().partition(|i| i.inner_impl().kind.is_auto());\n \n         synthetic.sort_by(|a, b| compare_impl(a, b, cx));\n         concrete.sort_by(|a, b| compare_impl(a, b, cx));"}, {"sha": "2d3b2490677e9b3e029cbad752a3a58368f6a965", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5817fada28cf21199ce4911b5cbde8bd1007c0d/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5817fada28cf21199ce4911b5cbde8bd1007c0d/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=b5817fada28cf21199ce4911b5cbde8bd1007c0d", "patch": "@@ -585,7 +585,7 @@ pub(super) fn write_shared(\n                 } else {\n                     Some(Implementor {\n                         text: imp.inner_impl().print(false, cx).to_string(),\n-                        synthetic: imp.inner_impl().is_auto_impl(),\n+                        synthetic: imp.inner_impl().kind.is_auto(),\n                         types: collect_paths_for_type(imp.inner_impl().for_.clone(), cache),\n                     })\n                 }"}]}