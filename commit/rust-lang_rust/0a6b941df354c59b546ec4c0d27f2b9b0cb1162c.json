{"sha": "0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "node_id": "C_kwDOAAsO6NoAKDBhNmI5NDFkZjM1NGM1OWI1NDZlYzRjMGQyN2YyYjliMGNiMTE2MmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-26T14:12:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-26T14:12:16Z"}, "message": "Auto merge of #103572 - Dylan-DPC:rollup-a8bnxrw, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #95710 (Stabilize arbitrary_enum_discriminant, take 2)\n - #102706 (Support excluding the generation of the standalone docs)\n - #103428 (Removed verbose printing from the `PrettyPrinter` when printing constants)\n - #103543 (Update books)\n - #103546 (interpret: a bit of cast cleanup)\n - #103554 (rustdoc: add visible focus outline to rustdoc-toggle)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "54d7e69a23086191d8c755260e36da8e60c8c295", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54d7e69a23086191d8c755260e36da8e60c8c295"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "html_url": "https://github.com/rust-lang/rust/commit/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43dd3d514b6b11c5195de2fd8e665828801d0972", "url": "https://api.github.com/repos/rust-lang/rust/commits/43dd3d514b6b11c5195de2fd8e665828801d0972", "html_url": "https://github.com/rust-lang/rust/commit/43dd3d514b6b11c5195de2fd8e665828801d0972"}, {"sha": "74a4c679b37ee687cba88534c1e2b22da55f55be", "url": "https://api.github.com/repos/rust-lang/rust/commits/74a4c679b37ee687cba88534c1e2b22da55f55be", "html_url": "https://github.com/rust-lang/rust/commit/74a4c679b37ee687cba88534c1e2b22da55f55be"}], "stats": {"total": 416, "additions": 131, "deletions": 285}, "files": [{"sha": "546010135a72532fa0324c2adbaa4bc1a16781c6", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 61, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -1,7 +1,7 @@\n use rustc_ast as ast;\n use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n use rustc_ast::{AssocConstraint, AssocConstraintKind, NodeId};\n-use rustc_ast::{PatKind, RangeEnd, VariantData};\n+use rustc_ast::{PatKind, RangeEnd};\n use rustc_errors::{struct_span_err, Applicability, StashKey};\n use rustc_feature::{AttributeGate, BuiltinAttribute, Features, GateIssue, BUILTIN_ATTRIBUTE_MAP};\n use rustc_session::parse::{feature_err, feature_err_issue, feature_warn};\n@@ -116,46 +116,6 @@ impl<'a> PostExpansionVisitor<'a> {\n         }\n     }\n \n-    fn maybe_report_invalid_custom_discriminants(&self, variants: &[ast::Variant]) {\n-        let has_fields = variants.iter().any(|variant| match variant.data {\n-            VariantData::Tuple(..) | VariantData::Struct(..) => true,\n-            VariantData::Unit(..) => false,\n-        });\n-\n-        let discriminant_spans = variants\n-            .iter()\n-            .filter(|variant| match variant.data {\n-                VariantData::Tuple(..) | VariantData::Struct(..) => false,\n-                VariantData::Unit(..) => true,\n-            })\n-            .filter_map(|variant| variant.disr_expr.as_ref().map(|c| c.value.span))\n-            .collect::<Vec<_>>();\n-\n-        if !discriminant_spans.is_empty() && has_fields {\n-            let mut err = feature_err(\n-                &self.sess.parse_sess,\n-                sym::arbitrary_enum_discriminant,\n-                discriminant_spans.clone(),\n-                \"custom discriminant values are not allowed in enums with tuple or struct variants\",\n-            );\n-            for sp in discriminant_spans {\n-                err.span_label(sp, \"disallowed custom discriminant\");\n-            }\n-            for variant in variants.iter() {\n-                match &variant.data {\n-                    VariantData::Struct(..) => {\n-                        err.span_label(variant.span, \"struct variant defined here\");\n-                    }\n-                    VariantData::Tuple(..) => {\n-                        err.span_label(variant.span, \"tuple variant defined here\");\n-                    }\n-                    VariantData::Unit(..) => {}\n-                }\n-            }\n-            err.emit();\n-        }\n-    }\n-\n     /// Feature gate `impl Trait` inside `type Alias = $type_expr;`.\n     fn check_impl_trait(&self, ty: &ast::Ty) {\n         struct ImplTraitVisitor<'a> {\n@@ -273,26 +233,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 }\n             }\n \n-            ast::ItemKind::Enum(ast::EnumDef { ref variants, .. }, ..) => {\n-                for variant in variants {\n-                    match (&variant.data, &variant.disr_expr) {\n-                        (ast::VariantData::Unit(..), _) => {}\n-                        (_, Some(disr_expr)) => gate_feature_post!(\n-                            &self,\n-                            arbitrary_enum_discriminant,\n-                            disr_expr.value.span,\n-                            \"discriminants on non-unit variants are experimental\"\n-                        ),\n-                        _ => {}\n-                    }\n-                }\n-\n-                let has_feature = self.features.arbitrary_enum_discriminant;\n-                if !has_feature && !i.span.allows_unstable(sym::arbitrary_enum_discriminant) {\n-                    self.maybe_report_invalid_custom_discriminants(&variants);\n-                }\n-            }\n-\n             ast::ItemKind::Impl(box ast::Impl { polarity, defaultness, ref of_trait, .. }) => {\n                 if let ast::ImplPolarity::Negative(span) = polarity {\n                     gate_feature_post!("}, {"sha": "269ae15d4974547f929544764313ce900982ecc0", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 30, "deletions": 31, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -138,21 +138,19 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(())\n     }\n \n+    /// Handles 'IntToInt' and 'IntToFloat' casts.\n     pub fn int_to_int_or_float(\n         &self,\n         src: &ImmTy<'tcx, M::Provenance>,\n         cast_ty: Ty<'tcx>,\n     ) -> InterpResult<'tcx, Immediate<M::Provenance>> {\n-        if (src.layout.ty.is_integral() || src.layout.ty.is_char() || src.layout.ty.is_bool())\n-            && (cast_ty.is_floating_point() || cast_ty.is_integral() || cast_ty.is_char())\n-        {\n-            let scalar = src.to_scalar();\n-            Ok(self.cast_from_int_like(scalar, src.layout, cast_ty)?.into())\n-        } else {\n-            bug!(\"Unexpected cast from type {:?}\", src.layout.ty)\n-        }\n+        assert!(src.layout.ty.is_integral() || src.layout.ty.is_char() || src.layout.ty.is_bool());\n+        assert!(cast_ty.is_floating_point() || cast_ty.is_integral() || cast_ty.is_char());\n+\n+        Ok(self.cast_from_int_like(src.to_scalar(), src.layout, cast_ty)?.into())\n     }\n \n+    /// Handles 'FloatToFloat' and 'FloatToInt' casts.\n     pub fn float_to_float_or_int(\n         &self,\n         src: &ImmTy<'tcx, M::Provenance>,\n@@ -180,31 +178,29 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         src: &ImmTy<'tcx, M::Provenance>,\n         cast_ty: Ty<'tcx>,\n     ) -> InterpResult<'tcx, Immediate<M::Provenance>> {\n+        assert!(src.layout.ty.is_any_ptr());\n+        assert!(cast_ty.is_unsafe_ptr());\n         // Handle casting any ptr to raw ptr (might be a fat ptr).\n-        if src.layout.ty.is_any_ptr() && cast_ty.is_unsafe_ptr() {\n-            let dest_layout = self.layout_of(cast_ty)?;\n-            if dest_layout.size == src.layout.size {\n-                // Thin or fat pointer that just hast the ptr kind of target type changed.\n-                return Ok(**src);\n-            } else {\n-                // Casting the metadata away from a fat ptr.\n-                assert_eq!(src.layout.size, 2 * self.pointer_size());\n-                assert_eq!(dest_layout.size, self.pointer_size());\n-                assert!(src.layout.ty.is_unsafe_ptr());\n-                return match **src {\n-                    Immediate::ScalarPair(data, _) => Ok(data.into()),\n-                    Immediate::Scalar(..) => span_bug!(\n-                        self.cur_span(),\n-                        \"{:?} input to a fat-to-thin cast ({:?} -> {:?})\",\n-                        *src,\n-                        src.layout.ty,\n-                        cast_ty\n-                    ),\n-                    Immediate::Uninit => throw_ub!(InvalidUninitBytes(None)),\n-                };\n-            }\n+        let dest_layout = self.layout_of(cast_ty)?;\n+        if dest_layout.size == src.layout.size {\n+            // Thin or fat pointer that just hast the ptr kind of target type changed.\n+            return Ok(**src);\n         } else {\n-            bug!(\"Can't cast 'Ptr' or 'FnPtr' into {:?}\", cast_ty);\n+            // Casting the metadata away from a fat ptr.\n+            assert_eq!(src.layout.size, 2 * self.pointer_size());\n+            assert_eq!(dest_layout.size, self.pointer_size());\n+            assert!(src.layout.ty.is_unsafe_ptr());\n+            return match **src {\n+                Immediate::ScalarPair(data, _) => Ok(data.into()),\n+                Immediate::Scalar(..) => span_bug!(\n+                    self.cur_span(),\n+                    \"{:?} input to a fat-to-thin cast ({:?} -> {:?})\",\n+                    *src,\n+                    src.layout.ty,\n+                    cast_ty\n+                ),\n+                Immediate::Uninit => throw_ub!(InvalidUninitBytes(None)),\n+            };\n         }\n     }\n \n@@ -243,6 +239,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(Scalar::from_maybe_pointer(ptr, self).into())\n     }\n \n+    /// Low-level cast helper function. This works directly on scalars and can take 'int-like' input\n+    /// type (basically everything with a scalar layout) to int/float/char types.\n     pub fn cast_from_int_like(\n         &self,\n         scalar: Scalar<M::Provenance>, // input value (there is no ScalarTy so we separate data+layout)\n@@ -282,6 +280,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         })\n     }\n \n+    /// Low-level cast helper function. Converts an apfloat `f` into int or float types.\n     fn cast_from_float<F>(&self, f: F, dest_ty: Ty<'tcx>) -> Scalar<M::Provenance>\n     where\n         F: Float + Into<Scalar<M::Provenance>> + FloatConvert<Single> + FloatConvert<Double>,"}, {"sha": "ffdb8de5b6c8c355b1fad36cb5b0e09f20932f67", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::definitions::DisambiguatedDefPathData;\n use rustc_middle::mir::interpret::{Allocation, ConstAllocation};\n use rustc_middle::ty::{\n     self,\n-    print::{PrettyPrinter, Print, Printer},\n+    print::{with_no_verbose_constants, PrettyPrinter, Print, Printer},\n     subst::{GenericArg, GenericArgKind},\n     Ty, TyCtxt,\n };\n@@ -190,7 +190,9 @@ impl Write for AbsolutePathPrinter<'_> {\n \n /// Directly returns an `Allocation` containing an absolute path representation of the given type.\n pub(crate) fn alloc_type_name<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> ConstAllocation<'tcx> {\n-    let path = AbsolutePathPrinter { tcx, path: String::new() }.print_type(ty).unwrap().path;\n+    let path = with_no_verbose_constants!(\n+        AbsolutePathPrinter { tcx, path: String::new() }.print_type(ty).unwrap().path\n+    );\n     let alloc = Allocation::from_bytes_byte_aligned_immutable(path.into_bytes());\n     tcx.intern_const_alloc(alloc)\n }"}, {"sha": "9536fdbf0df87362eac7e509c289361d8be95c73", "filename": "compiler/rustc_error_codes/src/error_codes/E0732.md", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0732.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0732.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0732.md?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -3,8 +3,6 @@ An `enum` with a discriminant must specify a `#[repr(inttype)]`.\n Erroneous code example:\n \n ```compile_fail,E0732\n-#![feature(arbitrary_enum_discriminant)]\n-\n enum Enum { // error!\n     Unit = 1,\n     Tuple() = 2,\n@@ -20,8 +18,6 @@ is a well-defined way to extract a variant's discriminant from a value;\n for instance:\n \n ```\n-#![feature(arbitrary_enum_discriminant)]\n-\n #[repr(u8)]\n enum Enum {\n     Unit = 3,"}, {"sha": "db289a64046a7dac4f38c3642259761e0236c30f", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -53,6 +53,8 @@ declare_features! (\n     (accepted, abi_sysv64, \"1.24.0\", Some(36167), None),\n     /// Allows using ADX intrinsics from `core::arch::{x86, x86_64}`.\n     (accepted, adx_target_feature, \"1.61.0\", Some(44839), None),\n+    /// Allows explicit discriminants on non-unit enum variants.\n+    (accepted, arbitrary_enum_discriminant, \"CURRENT_RUSTC_VERSION\", Some(60553), None),\n     /// Allows using `sym` operands in inline assembly.\n     (accepted, asm_sym, \"CURRENT_RUSTC_VERSION\", Some(93333), None),\n     /// Allows the definition of associated constants in `trait` or `impl` blocks."}, {"sha": "4facb6140a300046e710b06a9aa82c35c6c15115", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -292,8 +292,6 @@ declare_features! (\n     (incomplete, adt_const_params, \"1.56.0\", Some(95174), None),\n     /// Allows defining an `#[alloc_error_handler]`.\n     (active, alloc_error_handler, \"1.29.0\", Some(51540), None),\n-    /// Allows explicit discriminants on non-unit enum variants.\n-    (active, arbitrary_enum_discriminant, \"1.37.0\", Some(60553), None),\n     /// Allows trait methods with arbitrary self types.\n     (active, arbitrary_self_types, \"1.23.0\", Some(44874), None),\n     /// Allows using `const` operands in inline assembly."}, {"sha": "b302cee4816fbf29f6b31235216f663a6bababab", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -1180,7 +1180,7 @@ fn check_enum<'tcx>(tcx: TyCtxt<'tcx>, vs: &'tcx [hir::Variant<'tcx>], def_id: L\n         }\n     }\n \n-    if tcx.adt_def(def_id).repr().int.is_none() && tcx.features().arbitrary_enum_discriminant {\n+    if tcx.adt_def(def_id).repr().int.is_none() {\n         let is_unit = |var: &hir::Variant<'_>| matches!(var.data, hir::VariantData::Unit(..));\n \n         let has_disr = |var: &hir::Variant<'_>| var.disr_expr.is_some();"}, {"sha": "c1c2e162f28399bd1c43563edc4d4c9dfad734e1", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -63,6 +63,7 @@ thread_local! {\n     static NO_TRIMMED_PATH: Cell<bool> = const { Cell::new(false) };\n     static NO_QUERIES: Cell<bool> = const { Cell::new(false) };\n     static NO_VISIBLE_PATH: Cell<bool> = const { Cell::new(false) };\n+    static NO_VERBOSE_CONSTANTS: Cell<bool> = const { Cell::new(false) };\n }\n \n macro_rules! define_helper {\n@@ -117,6 +118,9 @@ define_helper!(\n     /// Prevent selection of visible paths. `Display` impl of DefId will prefer\n     /// visible (public) reexports of types as paths.\n     fn with_no_visible_paths(NoVisibleGuard, NO_VISIBLE_PATH);\n+    /// Prevent verbose printing of constants. Verbose printing of constants is\n+    /// never desirable in some contexts like `std::any::type_name`.\n+    fn with_no_verbose_constants(NoVerboseConstantsGuard, NO_VERBOSE_CONSTANTS);\n );\n \n /// The \"region highlights\" are used to control region printing during\n@@ -759,7 +763,7 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             ty::Array(ty, sz) => {\n                 p!(\"[\", print(ty), \"; \");\n-                if self.tcx().sess.verbose() {\n+                if !NO_VERBOSE_CONSTANTS.with(|flag| flag.get()) && self.tcx().sess.verbose() {\n                     p!(write(\"{:?}\", sz));\n                 } else if let ty::ConstKind::Unevaluated(..) = sz.kind() {\n                     // Do not try to evaluate unevaluated constants. If we are const evaluating an\n@@ -1181,7 +1185,7 @@ pub trait PrettyPrinter<'tcx>:\n     ) -> Result<Self::Const, Self::Error> {\n         define_scoped_cx!(self);\n \n-        if self.tcx().sess.verbose() {\n+        if !NO_VERBOSE_CONSTANTS.with(|flag| flag.get()) && self.tcx().sess.verbose() {\n             p!(write(\"Const({:?}: {:?})\", ct.kind(), ct.ty()));\n             return Ok(self);\n         }\n@@ -1416,7 +1420,7 @@ pub trait PrettyPrinter<'tcx>:\n     ) -> Result<Self::Const, Self::Error> {\n         define_scoped_cx!(self);\n \n-        if self.tcx().sess.verbose() {\n+        if !NO_VERBOSE_CONSTANTS.with(|flag| flag.get()) && self.tcx().sess.verbose() {\n             p!(write(\"ValTree({:?}: \", valtree), print(ty), \")\");\n             return Ok(self);\n         }"}, {"sha": "ea06caf9c3311e95a093a1a02567b5cab93c47dc", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 48, "deletions": 18, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -228,7 +228,7 @@ impl Step for TheBook {\n         }\n \n         // build the version info page and CSS\n-        builder.ensure(Standalone { compiler, target });\n+        let shared_assets = builder.ensure(SharedAssets { target });\n \n         // build the redirect pages\n         builder.info(&format!(\"Documenting book redirect pages ({})\", target));\n@@ -237,7 +237,7 @@ impl Step for TheBook {\n             let path = file.path();\n             let path = path.to_str().unwrap();\n \n-            invoke_rustdoc(builder, compiler, target, path);\n+            invoke_rustdoc(builder, compiler, &shared_assets, target, path);\n         }\n \n         if builder.was_invoked_explicitly::<Self>(Kind::Doc) {\n@@ -251,6 +251,7 @@ impl Step for TheBook {\n fn invoke_rustdoc(\n     builder: &Builder<'_>,\n     compiler: Compiler,\n+    shared_assets: &SharedAssetsPaths,\n     target: TargetSelection,\n     markdown: &str,\n ) {\n@@ -260,7 +261,6 @@ fn invoke_rustdoc(\n \n     let header = builder.src.join(\"src/doc/redirect.inc\");\n     let footer = builder.src.join(\"src/doc/footer.inc\");\n-    let version_info = out.join(\"version_info.html\");\n \n     let mut cmd = builder.rustdoc_cmd(compiler);\n \n@@ -269,7 +269,7 @@ fn invoke_rustdoc(\n     cmd.arg(\"--html-after-content\")\n         .arg(&footer)\n         .arg(\"--html-before-content\")\n-        .arg(&version_info)\n+        .arg(&shared_assets.version_info)\n         .arg(\"--html-in-header\")\n         .arg(&header)\n         .arg(\"--markdown-no-toc\")\n@@ -300,7 +300,7 @@ impl Step for Standalone {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let builder = run.builder;\n-        run.path(\"src/doc\").default_condition(builder.config.docs)\n+        run.path(\"src/doc\").alias(\"standalone\").default_condition(builder.config.docs)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -325,21 +325,11 @@ impl Step for Standalone {\n         let out = builder.doc_out(target);\n         t!(fs::create_dir_all(&out));\n \n+        let version_info = builder.ensure(SharedAssets { target: self.target }).version_info;\n+\n         let favicon = builder.src.join(\"src/doc/favicon.inc\");\n         let footer = builder.src.join(\"src/doc/footer.inc\");\n         let full_toc = builder.src.join(\"src/doc/full-toc.inc\");\n-        t!(fs::copy(builder.src.join(\"src/doc/rust.css\"), out.join(\"rust.css\")));\n-\n-        let version_input = builder.src.join(\"src/doc/version_info.html.template\");\n-        let version_info = out.join(\"version_info.html\");\n-\n-        if !builder.config.dry_run && !up_to_date(&version_input, &version_info) {\n-            let info = t!(fs::read_to_string(&version_input))\n-                .replace(\"VERSION\", &builder.rust_release())\n-                .replace(\"SHORT_HASH\", builder.rust_info.sha_short().unwrap_or(\"\"))\n-                .replace(\"STAMP\", builder.rust_info.sha().unwrap_or(\"\"));\n-            t!(fs::write(&version_info, &info));\n-        }\n \n         for file in t!(fs::read_dir(builder.src.join(\"src/doc\"))) {\n             let file = t!(file);\n@@ -401,6 +391,45 @@ impl Step for Standalone {\n     }\n }\n \n+#[derive(Debug, Clone)]\n+pub struct SharedAssetsPaths {\n+    pub version_info: PathBuf,\n+}\n+\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct SharedAssets {\n+    target: TargetSelection,\n+}\n+\n+impl Step for SharedAssets {\n+    type Output = SharedAssetsPaths;\n+    const DEFAULT: bool = false;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        // Other tasks depend on this, no need to execute it on its own\n+        run.never()\n+    }\n+\n+    // Generate shared resources used by other pieces of documentation.\n+    fn run(self, builder: &Builder<'_>) -> Self::Output {\n+        let out = builder.doc_out(self.target);\n+\n+        let version_input = builder.src.join(\"src\").join(\"doc\").join(\"version_info.html.template\");\n+        let version_info = out.join(\"version_info.html\");\n+        if !builder.config.dry_run && !up_to_date(&version_input, &version_info) {\n+            let info = t!(fs::read_to_string(&version_input))\n+                .replace(\"VERSION\", &builder.rust_release())\n+                .replace(\"SHORT_HASH\", builder.rust_info.sha_short().unwrap_or(\"\"))\n+                .replace(\"STAMP\", builder.rust_info.sha().unwrap_or(\"\"));\n+            t!(fs::write(&version_info, &info));\n+        }\n+\n+        builder.copy(&builder.src.join(\"src\").join(\"doc\").join(\"rust.css\"), &out.join(\"rust.css\"));\n+\n+        SharedAssetsPaths { version_info }\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Std {\n     pub stage: u32,\n@@ -429,7 +458,8 @@ impl Step for Std {\n         let target = self.target;\n         let out = builder.doc_out(target);\n         t!(fs::create_dir_all(&out));\n-        t!(fs::copy(builder.src.join(\"src/doc/rust.css\"), out.join(\"rust.css\")));\n+\n+        builder.ensure(SharedAssets { target: self.target });\n \n         let index_page = builder.src.join(\"src/doc/index.md\").into_os_string();\n         let mut extra_args = vec!["}, {"sha": "aa5ee485bd6bd80d205da7c82fcdd776f92fdd51", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -1 +1 @@\n-Subproject commit f1e5ad844d0c61738006cdef26227beeb136948e\n+Subproject commit aa5ee485bd6bd80d205da7c82fcdd776f92fdd51"}, {"sha": "4ea7c5def38ac81df33a9e48e5637a82a5ac404d", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -1 +1 @@\n-Subproject commit f6ed74f582bddcec73f753eafaab3749c4f7df61\n+Subproject commit 4ea7c5def38ac81df33a9e48e5637a82a5ac404d"}, {"sha": "03491f33375c5a2a1661c7fa4be671fe95ce1249", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -1 +1 @@\n-Subproject commit 5e7b296d6c345addbd748f242aae28c42555c015\n+Subproject commit 03491f33375c5a2a1661c7fa4be671fe95ce1249"}, {"sha": "51a37ad19a15709d0601afbac6581f5aea6a45da", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -1 +1 @@\n-Subproject commit 7518c3445dc02df0d196f5f84e568d633c5141fb\n+Subproject commit 51a37ad19a15709d0601afbac6581f5aea6a45da"}, {"sha": "e0bb782270e22821f416ac44a45d91236e985ffd", "filename": "src/doc/unstable-book/src/language-features/arbitrary-enum-discriminant.md", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/43dd3d514b6b11c5195de2fd8e665828801d0972/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Farbitrary-enum-discriminant.md", "raw_url": "https://github.com/rust-lang/rust/raw/43dd3d514b6b11c5195de2fd8e665828801d0972/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Farbitrary-enum-discriminant.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Farbitrary-enum-discriminant.md?ref=43dd3d514b6b11c5195de2fd8e665828801d0972", "patch": "@@ -1,37 +0,0 @@\n-# `arbitrary_enum_discriminant`\n-\n-The tracking issue for this feature is: [#60553]\n-\n-[#60553]: https://github.com/rust-lang/rust/issues/60553\n-\n-------------------------\n-\n-The `arbitrary_enum_discriminant` feature permits tuple-like and\n-struct-like enum variants with `#[repr(<int-type>)]` to have explicit discriminants.\n-\n-## Examples\n-\n-```rust\n-#![feature(arbitrary_enum_discriminant)]\n-\n-#[allow(dead_code)]\n-#[repr(u8)]\n-enum Enum {\n-    Unit = 3,\n-    Tuple(u16) = 2,\n-    Struct {\n-        a: u8,\n-        b: u16,\n-    } = 1,\n-}\n-\n-impl Enum {\n-    fn tag(&self) -> u8 {\n-        unsafe { *(self as *const Self as *const u8) }\n-    }\n-}\n-\n-assert_eq!(3, Enum::Unit.tag());\n-assert_eq!(2, Enum::Tuple(5).tag());\n-assert_eq!(1, Enum::Struct{a: 7, b: 11}.tag());\n-```"}, {"sha": "8424b2c4e2932a6766c2bfe0202c8b3673d9396f", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -1585,6 +1585,15 @@ details.rustdoc-toggle > summary:hover::before {\n \topacity: 1;\n }\n \n+details.rustdoc-toggle > summary:focus-visible::before {\n+\t/* The SVG is black, and gets turned white using a filter in the dark themes.\n+\t   Do the same with the outline.\n+\t   The dotted 1px style is copied from Firefox's focus ring style.\n+\t*/\n+\toutline: 1px dotted #000;\n+\toutline-offset: 1px;\n+}\n+\n details.rustdoc-toggle.top-doc > summary,\n details.rustdoc-toggle.top-doc > summary::before,\n details.rustdoc-toggle.non-exhaustive > summary,"}, {"sha": "1679793ee6834e0404fad5e3ee7d37dd9eb92a2f", "filename": "src/test/ui/cast/issue-88621.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Fcast%2Fissue-88621.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Fcast%2Fissue-88621.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-88621.rs?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -1,5 +1,3 @@\n-#![feature(arbitrary_enum_discriminant)]\n-\n #[repr(u8)]\n enum Kind2 {\n     Foo() = 1,"}, {"sha": "886145c1bafee4b4d8afe3729087dd68fd2fc3e4", "filename": "src/test/ui/cast/issue-88621.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Fcast%2Fissue-88621.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Fcast%2Fissue-88621.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-88621.stderr?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -1,5 +1,5 @@\n error[E0605]: non-primitive cast: `Kind2` as `u8`\n-  --> $DIR/issue-88621.rs:11:13\n+  --> $DIR/issue-88621.rs:9:13\n    |\n LL |     let _ = Kind2::Foo() as u8;\n    |             ^^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object"}, {"sha": "a6e5f70fdefa63dc66b816a3316a41d0e7d77ca1", "filename": "src/test/ui/enum-discriminant/arbitrary_enum_discriminant-no-repr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.rs?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -1,5 +1,4 @@\n #![crate_type=\"lib\"]\n-#![feature(arbitrary_enum_discriminant)]\n \n enum Enum {\n //~^ ERROR `#[repr(inttype)]` must be specified"}, {"sha": "8cee74696295c5b3ab20c47b50dc399da5dbaeb5", "filename": "src/test/ui/enum-discriminant/arbitrary_enum_discriminant-no-repr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.stderr?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -1,5 +1,5 @@\n error[E0732]: `#[repr(inttype)]` must be specified\n-  --> $DIR/arbitrary_enum_discriminant-no-repr.rs:4:1\n+  --> $DIR/arbitrary_enum_discriminant-no-repr.rs:3:1\n    |\n LL | enum Enum {\n    | ^^^^^^^^^"}, {"sha": "83e74a6e685a7dbcc3ee65d4f10c15a94cdfee86", "filename": "src/test/ui/enum-discriminant/arbitrary_enum_discriminant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant.rs?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(arbitrary_enum_discriminant, test)]\n+#![feature(test)]\n \n extern crate test;\n "}, {"sha": "f3dfac298ad7b4b70c090d67b537d8dd0b87006e", "filename": "src/test/ui/enum-discriminant/discriminant_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value.rs?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n #![allow(stable_features)]\n-#![feature(arbitrary_enum_discriminant, core, core_intrinsics)]\n+#![feature(core, core_intrinsics)]\n \n extern crate core;\n use core::intrinsics::discriminant_value;"}, {"sha": "3e90af4d36af3fddc8a6de00a048e8ff1eb9d4be", "filename": "src/test/ui/enum-discriminant/feature-gate-arbitrary_enum_discriminant.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/43dd3d514b6b11c5195de2fd8e665828801d0972/src%2Ftest%2Fui%2Fenum-discriminant%2Ffeature-gate-arbitrary_enum_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43dd3d514b6b11c5195de2fd8e665828801d0972/src%2Ftest%2Fui%2Fenum-discriminant%2Ffeature-gate-arbitrary_enum_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Ffeature-gate-arbitrary_enum_discriminant.rs?ref=43dd3d514b6b11c5195de2fd8e665828801d0972", "patch": "@@ -1,10 +0,0 @@\n-#![crate_type=\"lib\"]\n-\n-enum Enum {\n-  Unit = 1,\n-  //~^ ERROR custom discriminant values are not allowed in enums with tuple or struct variants\n-  Tuple() = 2,\n-  //~^ ERROR discriminants on non-unit variants are experimental\n-  Struct{} = 3,\n-  //~^ ERROR discriminants on non-unit variants are experimental\n-}"}, {"sha": "b5f61e6e991d842efbe57f34b6f89a008ab2c3a3", "filename": "src/test/ui/enum-discriminant/feature-gate-arbitrary_enum_discriminant.stderr", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/43dd3d514b6b11c5195de2fd8e665828801d0972/src%2Ftest%2Fui%2Fenum-discriminant%2Ffeature-gate-arbitrary_enum_discriminant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43dd3d514b6b11c5195de2fd8e665828801d0972/src%2Ftest%2Fui%2Fenum-discriminant%2Ffeature-gate-arbitrary_enum_discriminant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Ffeature-gate-arbitrary_enum_discriminant.stderr?ref=43dd3d514b6b11c5195de2fd8e665828801d0972", "patch": "@@ -1,36 +0,0 @@\n-error[E0658]: discriminants on non-unit variants are experimental\n-  --> $DIR/feature-gate-arbitrary_enum_discriminant.rs:6:13\n-   |\n-LL |   Tuple() = 2,\n-   |             ^\n-   |\n-   = note: see issue #60553 <https://github.com/rust-lang/rust/issues/60553> for more information\n-   = help: add `#![feature(arbitrary_enum_discriminant)]` to the crate attributes to enable\n-\n-error[E0658]: discriminants on non-unit variants are experimental\n-  --> $DIR/feature-gate-arbitrary_enum_discriminant.rs:8:14\n-   |\n-LL |   Struct{} = 3,\n-   |              ^\n-   |\n-   = note: see issue #60553 <https://github.com/rust-lang/rust/issues/60553> for more information\n-   = help: add `#![feature(arbitrary_enum_discriminant)]` to the crate attributes to enable\n-\n-error[E0658]: custom discriminant values are not allowed in enums with tuple or struct variants\n-  --> $DIR/feature-gate-arbitrary_enum_discriminant.rs:4:10\n-   |\n-LL |   Unit = 1,\n-   |          ^ disallowed custom discriminant\n-LL |\n-LL |   Tuple() = 2,\n-   |   ----------- tuple variant defined here\n-LL |\n-LL |   Struct{} = 3,\n-   |   ------------ struct variant defined here\n-   |\n-   = note: see issue #60553 <https://github.com/rust-lang/rust/issues/60553> for more information\n-   = help: add `#![feature(arbitrary_enum_discriminant)]` to the crate attributes to enable\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "ad9fcc25b4127da69aee30dd033a9aa853a61750", "filename": "src/test/ui/enum-discriminant/issue-70453-generics-in-discr-ice-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.rs?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -1,4 +1,4 @@\n-#![feature(arbitrary_enum_discriminant, core_intrinsics)]\n+#![feature(core_intrinsics)]\n \n extern crate core;\n use core::intrinsics::discriminant_value;"}, {"sha": "42a062239d34addbc5f30a5ac616d268eaada333", "filename": "src/test/ui/enum-discriminant/issue-70453-polymorphic-ctfe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.rs?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -1,4 +1,4 @@\n-#![feature(arbitrary_enum_discriminant, core_intrinsics)]\n+#![feature(core_intrinsics)]\n \n extern crate core;\n use core::intrinsics::discriminant_value;"}, {"sha": "3adac7b72621ccc0cc5709420bf025392e652db5", "filename": "src/test/ui/enum-discriminant/issue-70509-partial_eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70509-partial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70509-partial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70509-partial_eq.rs?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(repr128, arbitrary_enum_discriminant)]\n+#![feature(repr128)]\n //~^ WARN the feature `repr128` is incomplete\n \n #[derive(PartialEq, Debug)]"}, {"sha": "2eef930c3943439d8a5d8c3d6ec8b59d8de87df7", "filename": "src/test/ui/enum-discriminant/issue-70509-partial_eq.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70509-partial_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70509-partial_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70509-partial_eq.stderr?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -1,7 +1,7 @@\n warning: the feature `repr128` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-70509-partial_eq.rs:2:12\n    |\n-LL | #![feature(repr128, arbitrary_enum_discriminant)]\n+LL | #![feature(repr128)]\n    |            ^^^^^^^\n    |\n    = note: see issue #56071 <https://github.com/rust-lang/rust/issues/56071> for more information"}, {"sha": "ec3860a322fc53bf9b8bbcc9c113a367dae288c2", "filename": "src/test/ui/intrinsics/panic-uninitialized-zeroed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -7,7 +7,7 @@\n \n // This test checks panic emitted from `mem::{uninitialized,zeroed}`.\n \n-#![feature(never_type, arbitrary_enum_discriminant)]\n+#![feature(never_type)]\n #![allow(deprecated, invalid_value)]\n \n use std::{"}, {"sha": "ab14c35893d0a74d759e8ad1085eae2cea73c045", "filename": "src/test/ui/macros/macros-nonfatal-errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -4,7 +4,7 @@\n // immediately, so that we get more errors listed at a time.\n \n #![feature(trace_macros, concat_idents)]\n-#![feature(stmt_expr_attributes, arbitrary_enum_discriminant)]\n+#![feature(stmt_expr_attributes)]\n \n use std::arch::asm;\n "}, {"sha": "7bf0e64f2c0a30eecf3963b7bee955d7059ce399", "filename": "src/test/ui/parser/issues/issue-17383.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/43dd3d514b6b11c5195de2fd8e665828801d0972/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-17383.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43dd3d514b6b11c5195de2fd8e665828801d0972/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-17383.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-17383.rs?ref=43dd3d514b6b11c5195de2fd8e665828801d0972", "patch": "@@ -1,7 +0,0 @@\n-enum X {\n-    A = 3,\n-    //~^ ERROR custom discriminant values are not allowed in enums with tuple or struct variants\n-    B(usize)\n-}\n-\n-fn main() {}"}, {"sha": "265d6e14866149a674cc7a6cb9818b7628463709", "filename": "src/test/ui/parser/issues/issue-17383.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/43dd3d514b6b11c5195de2fd8e665828801d0972/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-17383.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43dd3d514b6b11c5195de2fd8e665828801d0972/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-17383.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-17383.stderr?ref=43dd3d514b6b11c5195de2fd8e665828801d0972", "patch": "@@ -1,15 +0,0 @@\n-error[E0658]: custom discriminant values are not allowed in enums with tuple or struct variants\n-  --> $DIR/issue-17383.rs:2:9\n-   |\n-LL |     A = 3,\n-   |         ^ disallowed custom discriminant\n-LL |\n-LL |     B(usize)\n-   |     -------- tuple variant defined here\n-   |\n-   = note: see issue #60553 <https://github.com/rust-lang/rust/issues/60553> for more information\n-   = help: add `#![feature(arbitrary_enum_discriminant)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "a9cfdd549c752233f40a6608474f7a9d362ee375", "filename": "src/test/ui/parser/tag-variant-disr-non-nullary.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/43dd3d514b6b11c5195de2fd8e665828801d0972/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43dd3d514b6b11c5195de2fd8e665828801d0972/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.rs?ref=43dd3d514b6b11c5195de2fd8e665828801d0972", "patch": "@@ -1,12 +0,0 @@\n-enum Color {\n-    Red = 0xff0000,\n-    //~^ ERROR custom discriminant values are not allowed in enums with tuple or struct variants\n-    Green = 0x00ff00,\n-    Blue = 0x0000ff,\n-    Black = 0x000000,\n-    White = 0xffffff,\n-    Other(usize),\n-    Other2(usize, usize),\n-}\n-\n-fn main() {}"}, {"sha": "79f044a0675b7b075f3756eaf7d51be8fbdce74f", "filename": "src/test/ui/parser/tag-variant-disr-non-nullary.stderr", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/43dd3d514b6b11c5195de2fd8e665828801d0972/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43dd3d514b6b11c5195de2fd8e665828801d0972/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.stderr?ref=43dd3d514b6b11c5195de2fd8e665828801d0972", "patch": "@@ -1,25 +0,0 @@\n-error[E0658]: custom discriminant values are not allowed in enums with tuple or struct variants\n-  --> $DIR/tag-variant-disr-non-nullary.rs:2:11\n-   |\n-LL |     Red = 0xff0000,\n-   |           ^^^^^^^^ disallowed custom discriminant\n-LL |\n-LL |     Green = 0x00ff00,\n-   |             ^^^^^^^^ disallowed custom discriminant\n-LL |     Blue = 0x0000ff,\n-   |            ^^^^^^^^ disallowed custom discriminant\n-LL |     Black = 0x000000,\n-   |             ^^^^^^^^ disallowed custom discriminant\n-LL |     White = 0xffffff,\n-   |             ^^^^^^^^ disallowed custom discriminant\n-LL |     Other(usize),\n-   |     ------------ tuple variant defined here\n-LL |     Other2(usize, usize),\n-   |     -------------------- tuple variant defined here\n-   |\n-   = note: see issue #60553 <https://github.com/rust-lang/rust/issues/60553> for more information\n-   = help: add `#![feature(arbitrary_enum_discriminant)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "1335cc9d2b17ec16acc72f0e305daa0320f84af5", "filename": "src/test/ui/transmutability/enums/should_order_correctly.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_order_correctly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_order_correctly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_order_correctly.rs?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -2,7 +2,6 @@\n //! The payloads of an enum variant should be ordered after its tag.\n \n #![crate_type = \"lib\"]\n-#![feature(arbitrary_enum_discriminant)]\n #![feature(transmutability)]\n #![allow(dead_code)]\n "}, {"sha": "f3567b405f4044bb7915d899db8ddc9715c02974", "filename": "src/test/ui/transmutability/enums/should_respect_endianness.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.rs?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -2,7 +2,6 @@\n //! an enum with a multi-byte tag.\n \n #![crate_type = \"lib\"]\n-#![feature(arbitrary_enum_discriminant)]\n #![feature(transmutability)]\n #![allow(dead_code)]\n "}, {"sha": "0845a5edf32e5ceb516f8aa7763da4e2269c3106", "filename": "src/test/ui/transmutability/enums/should_respect_endianness.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.stderr?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -1,12 +1,12 @@\n error[E0277]: `Src` cannot be safely transmuted into `Unexpected` in the defining scope of `assert::Context`.\n-  --> $DIR/should_respect_endianness.rs:37:36\n+  --> $DIR/should_respect_endianness.rs:36:36\n    |\n LL |     assert::is_transmutable::<Src, Unexpected>();\n    |                                    ^^^^^^^^^^ `Src` cannot be safely transmuted into `Unexpected` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<Src, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `Unexpected`\n note: required by a bound in `is_transmutable`\n-  --> $DIR/should_respect_endianness.rs:15:14\n+  --> $DIR/should_respect_endianness.rs:14:14\n    |\n LL |       pub fn is_transmutable<Src, Dst>()\n    |              --------------- required by a bound in this"}, {"sha": "902ef5ade2b0eb01844c9634f01aa06e3285582d", "filename": "src/test/ui/type/issue-94187-verbose-type-name.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Ftype%2Fissue-94187-verbose-type-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6b941df354c59b546ec4c0d27f2b9b0cb1162c/src%2Ftest%2Fui%2Ftype%2Fissue-94187-verbose-type-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-94187-verbose-type-name.rs?ref=0a6b941df354c59b546ec4c0d27f2b9b0cb1162c", "patch": "@@ -0,0 +1,13 @@\n+// Check to insure that the output of `std::any::type_name` does not change based on -Zverbose\n+// when printing constants\n+// run-pass\n+// edition: 2018\n+// revisions: normal verbose\n+// [verbose]compile-flags:-Zverbose\n+\n+struct Wrapper<const VALUE: usize>;\n+\n+fn main() {\n+    assert_eq!(std::any::type_name::<[u32; 0]>(), \"[u32; 0]\");\n+    assert_eq!(std::any::type_name::<Wrapper<0>>(), \"issue_94187_verbose_type_name::Wrapper<0>\");\n+}"}]}