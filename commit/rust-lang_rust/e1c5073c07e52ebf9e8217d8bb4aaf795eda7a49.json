{"sha": "e1c5073c07e52ebf9e8217d8bb4aaf795eda7a49", "node_id": "C_kwDOAAsO6NoAKGUxYzUwNzNjMDdlNTJlYmY5ZTgyMTdkOGJiNGFhZjc5NWVkYTdhNDk", "commit": {"author": {"name": "TheOddGarlic", "email": "umutinanerdogan@pm.me", "date": "2022-08-29T07:06:50Z"}, "committer": {"name": "mejrs", "email": "", "date": "2022-12-17T18:08:25Z"}, "message": "Migrate pattern bindings with variant name lint", "tree": {"sha": "91d18ec2f3758331d24913b1e16c086c93dd64ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91d18ec2f3758331d24913b1e16c086c93dd64ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1c5073c07e52ebf9e8217d8bb4aaf795eda7a49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1c5073c07e52ebf9e8217d8bb4aaf795eda7a49", "html_url": "https://github.com/rust-lang/rust/commit/e1c5073c07e52ebf9e8217d8bb4aaf795eda7a49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1c5073c07e52ebf9e8217d8bb4aaf795eda7a49/comments", "author": {"login": "AsyaTheAbove", "id": 40492846, "node_id": "MDQ6VXNlcjQwNDkyODQ2", "avatar_url": "https://avatars.githubusercontent.com/u/40492846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AsyaTheAbove", "html_url": "https://github.com/AsyaTheAbove", "followers_url": "https://api.github.com/users/AsyaTheAbove/followers", "following_url": "https://api.github.com/users/AsyaTheAbove/following{/other_user}", "gists_url": "https://api.github.com/users/AsyaTheAbove/gists{/gist_id}", "starred_url": "https://api.github.com/users/AsyaTheAbove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AsyaTheAbove/subscriptions", "organizations_url": "https://api.github.com/users/AsyaTheAbove/orgs", "repos_url": "https://api.github.com/users/AsyaTheAbove/repos", "events_url": "https://api.github.com/users/AsyaTheAbove/events{/privacy}", "received_events_url": "https://api.github.com/users/AsyaTheAbove/received_events", "type": "User", "site_admin": false}, "committer": {}, "parents": [{"sha": "6f82a00aa1a3dc26e2ba919e539bbc2504ebf22a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f82a00aa1a3dc26e2ba919e539bbc2504ebf22a", "html_url": "https://github.com/rust-lang/rust/commit/6f82a00aa1a3dc26e2ba919e539bbc2504ebf22a"}], "stats": {"total": 47, "additions": 24, "deletions": 23}, "files": [{"sha": "539794086ee263dccac7246a415fe0a351ef66db", "filename": "compiler/rustc_error_messages/locales/en-US/mir_build.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1c5073c07e52ebf9e8217d8bb4aaf795eda7a49/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/e1c5073c07e52ebf9e8217d8bb4aaf795eda7a49/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl?ref=e1c5073c07e52ebf9e8217d8bb4aaf795eda7a49", "patch": "@@ -233,3 +233,7 @@ mir_build_trailing_irrefutable_let_patterns = trailing irrefutable {$count ->\n         [one] it\n         *[other] them\n     } into the body\n+\n+mir_build_bindings_with_variant_name =\n+    pattern binding `{$ident}` is named the same as one of the variants of the type `{$ty_path}`\n+    .suggestion = to match on the variant, qualify the path"}, {"sha": "085511a9d7c0aba2bde779f234658b7476b69807", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e1c5073c07e52ebf9e8217d8bb4aaf795eda7a49/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c5073c07e52ebf9e8217d8bb4aaf795eda7a49/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=e1c5073c07e52ebf9e8217d8bb4aaf795eda7a49", "patch": "@@ -3,7 +3,7 @@ use rustc_errors::{error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed\n use rustc_macros::{LintDiagnostic, SessionDiagnostic, SessionSubdiagnostic};\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{parse::ParseSess, SessionDiagnostic};\n-use rustc_span::Span;\n+use rustc_span::{symbol::Ident, Span};\n \n #[derive(LintDiagnostic)]\n #[diag(mir_build::unconditional_recursion)]\n@@ -513,3 +513,12 @@ pub struct LeadingIrrefutableLetPatterns {\n pub struct TrailingIrrefutableLetPatterns {\n     pub count: usize,\n }\n+\n+#[derive(LintDiagnostic)]\n+#[diag(mir_build::bindings_with_variant_name, code = \"E0170\")]\n+pub struct BindingsWithVariantName {\n+    #[suggestion(code = \"{ty_path}::{ident}\", applicability = \"machine-applicable\")]\n+    pub suggestion: Option<Span>,\n+    pub ty_path: String,\n+    pub ident: Ident,\n+}"}, {"sha": "a62c1a232fac1598db8997f56454dfced99053a2", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e1c5073c07e52ebf9e8217d8bb4aaf795eda7a49/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c5073c07e52ebf9e8217d8bb4aaf795eda7a49/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=e1c5073c07e52ebf9e8217d8bb4aaf795eda7a49", "patch": "@@ -9,8 +9,8 @@ use crate::errors::*;\n use rustc_arena::TypedArena;\n use rustc_ast::Mutability;\n use rustc_errors::{\n-    error_code, pluralize, struct_span_err, Applicability, DelayDm, Diagnostic, DiagnosticBuilder,\n-    ErrorGuaranteed, MultiSpan,\n+    pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n+    MultiSpan,\n };\n use rustc_hir as hir;\n use rustc_hir::def::*;\n@@ -547,32 +547,20 @@ fn check_for_bindings_named_same_as_variants(\n             })\n         {\n             let variant_count = edef.variants().len();\n-            cx.tcx.struct_span_lint_hir(\n+            let ty_path = cx.tcx.def_path_str(edef.did());\n+            cx.tcx.emit_spanned_lint(\n                 BINDINGS_WITH_VARIANT_NAME,\n                 p.hir_id,\n                 p.span,\n-                DelayDm(|| format!(\n-                    \"pattern binding `{}` is named the same as one \\\n-                        of the variants of the type `{}`\",\n-                    ident, cx.tcx.def_path_str(edef.did())\n-                )),\n-                |lint| {\n-                    let ty_path = cx.tcx.def_path_str(edef.did());\n-                    lint.code(error_code!(E0170));\n-\n+                BindingsWithVariantName {\n                     // If this is an irrefutable pattern, and there's > 1 variant,\n                     // then we can't actually match on this. Applying the below\n                     // suggestion would produce code that breaks on `check_irrefutable`.\n-                    if rf == Refutable || variant_count == 1 {\n-                        lint.span_suggestion(\n-                            p.span,\n-                            \"to match on the variant, qualify the path\",\n-                            format!(\"{}::{}\", ty_path, ident),\n-                            Applicability::MachineApplicable,\n-                        );\n-                    }\n-\n-                    lint\n+                    suggestion: if rf == Refutable || variant_count == 1 {\n+                        Some(p.span)\n+                    } else { None },\n+                    ty_path,\n+                    ident,\n                 },\n             )\n         }"}]}