{"sha": "b46ef3dd0308bd75e4aa0cc0eca5203842bf5561", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NmVmM2RkMDMwOGJkNzVlNGFhMGNjMGVjYTUyMDM4NDJiZjU1NjE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-15T14:40:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-15T14:40:13Z"}, "message": "Rollup merge of #70013 - ecstatic-morse:check-consts-feature-gate, r=oli-obk\n\nReturn feature gate as a `Symbol`\n\nA minor refactoring that will be needed for #68940. That PR is blocked on me changing the error comments in a whole lot of UI tests.\n\nr? @oli-obk", "tree": {"sha": "efc3e9fea0605ecdc651f7d4fff420ea9bb097fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efc3e9fea0605ecdc651f7d4fff420ea9bb097fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b46ef3dd0308bd75e4aa0cc0eca5203842bf5561", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJebj5NCRBK7hj4Ov3rIwAAdHIIAI6WneKmoc6fAHEBwihCXzvc\nUnmsybuCfJQ32S1/fGRorYv3og9mr6IgACeioZHaiNiEsjOpE5I1ZegJg7YQB3wM\nmzxIW78MXQTUPc8G8RKQz1YqNZqOClxj99nSRwrHh6LAIIx8bezPkrNUDM8PYlF2\nlPDg812lCerTaoik+tl8J/lczgFTF1MzaFLhaeIQRY2xIXM44Y0d8OOMNjeVZJbk\nWnBF6LwU3yU+DyE5AJ5eCpoxjGYaCqeN81vc84paTaO7PkqX4dlPY7ZHyMQHzd7K\nJDYXI3peKYxESh70SsBlw9Wtk+r1zPnKkd4SJOOvoAPoGcjP8VMckkgKIpMHm6Q=\n=Gu9F\n-----END PGP SIGNATURE-----\n", "payload": "tree efc3e9fea0605ecdc651f7d4fff420ea9bb097fe\nparent d74c5cd07cc5626d52d3364084e9f92d2b4f70ae\nparent d7e6649326080219fbdad6465468086e46e69377\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584283213 +0100\ncommitter GitHub <noreply@github.com> 1584283213 +0100\n\nRollup merge of #70013 - ecstatic-morse:check-consts-feature-gate, r=oli-obk\n\nReturn feature gate as a `Symbol`\n\nA minor refactoring that will be needed for #68940. That PR is blocked on me changing the error comments in a whole lot of UI tests.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b46ef3dd0308bd75e4aa0cc0eca5203842bf5561", "html_url": "https://github.com/rust-lang/rust/commit/b46ef3dd0308bd75e4aa0cc0eca5203842bf5561", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b46ef3dd0308bd75e4aa0cc0eca5203842bf5561/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d74c5cd07cc5626d52d3364084e9f92d2b4f70ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/d74c5cd07cc5626d52d3364084e9f92d2b4f70ae", "html_url": "https://github.com/rust-lang/rust/commit/d74c5cd07cc5626d52d3364084e9f92d2b4f70ae"}, {"sha": "d7e6649326080219fbdad6465468086e46e69377", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7e6649326080219fbdad6465468086e46e69377", "html_url": "https://github.com/rust-lang/rust/commit/d7e6649326080219fbdad6465468086e46e69377"}], "stats": {"total": 61, "additions": 32, "deletions": 29}, "files": [{"sha": "d06a2aa44f2316a2b0bbf5e363105281c7a185df", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 31, "deletions": 28, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/b46ef3dd0308bd75e4aa0cc0eca5203842bf5561/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b46ef3dd0308bd75e4aa0cc0eca5203842bf5561/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=b46ef3dd0308bd75e4aa0cc0eca5203842bf5561", "patch": "@@ -2,7 +2,6 @@\n \n use rustc::session::config::nightly_options;\n use rustc::session::parse::feature_err;\n-use rustc::ty::TyCtxt;\n use rustc_errors::struct_span_err;\n use rustc_hir::def_id::DefId;\n use rustc_span::symbol::sym;\n@@ -15,18 +14,21 @@ pub trait NonConstOp: std::fmt::Debug {\n     /// Whether this operation can be evaluated by miri.\n     const IS_SUPPORTED_IN_MIRI: bool = true;\n \n-    /// Returns a boolean indicating whether the feature gate that would allow this operation is\n-    /// enabled, or `None` if such a feature gate does not exist.\n-    fn feature_gate(_tcx: TyCtxt<'tcx>) -> Option<bool> {\n+    /// Returns the `Symbol` corresponding to the feature gate that would enable this operation,\n+    /// or `None` if such a feature gate does not exist.\n+    fn feature_gate() -> Option<Symbol> {\n         None\n     }\n \n     /// Returns `true` if this operation is allowed in the given item.\n     ///\n     /// This check should assume that we are not in a non-const `fn`, where all operations are\n     /// legal.\n+    ///\n+    /// By default, it returns `true` if and only if this operation has a corresponding feature\n+    /// gate and that gate is enabled.\n     fn is_allowed_in_item(&self, item: &Item<'_, '_>) -> bool {\n-        Self::feature_gate(item.tcx).unwrap_or(false)\n+        Self::feature_gate().map_or(false, |gate| item.tcx.features().enabled(gate))\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n@@ -55,8 +57,8 @@ pub trait NonConstOp: std::fmt::Debug {\n #[derive(Debug)]\n pub struct Downcast;\n impl NonConstOp for Downcast {\n-    fn feature_gate(tcx: TyCtxt<'_>) -> Option<bool> {\n-        Some(tcx.features().const_if_match)\n+    fn feature_gate() -> Option<Symbol> {\n+        Some(sym::const_if_match)\n     }\n }\n \n@@ -147,8 +149,8 @@ impl NonConstOp for HeapAllocation {\n #[derive(Debug)]\n pub struct IfOrMatch;\n impl NonConstOp for IfOrMatch {\n-    fn feature_gate(tcx: TyCtxt<'_>) -> Option<bool> {\n-        Some(tcx.features().const_if_match)\n+    fn feature_gate() -> Option<Symbol> {\n+        Some(sym::const_if_match)\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n@@ -175,8 +177,8 @@ impl NonConstOp for LiveDrop {\n #[derive(Debug)]\n pub struct Loop;\n impl NonConstOp for Loop {\n-    fn feature_gate(tcx: TyCtxt<'_>) -> Option<bool> {\n-        Some(tcx.features().const_loop)\n+    fn feature_gate() -> Option<Symbol> {\n+        Some(sym::const_loop)\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n@@ -203,8 +205,8 @@ impl NonConstOp for CellBorrow {\n #[derive(Debug)]\n pub struct MutBorrow;\n impl NonConstOp for MutBorrow {\n-    fn feature_gate(tcx: TyCtxt<'_>) -> Option<bool> {\n-        Some(tcx.features().const_mut_refs)\n+    fn feature_gate() -> Option<Symbol> {\n+        Some(sym::const_mut_refs)\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n@@ -238,8 +240,8 @@ impl NonConstOp for MutBorrow {\n #[derive(Debug)]\n pub struct MutAddressOf;\n impl NonConstOp for MutAddressOf {\n-    fn feature_gate(tcx: TyCtxt<'_>) -> Option<bool> {\n-        Some(tcx.features().const_mut_refs)\n+    fn feature_gate() -> Option<Symbol> {\n+        Some(sym::const_mut_refs)\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n@@ -256,16 +258,16 @@ impl NonConstOp for MutAddressOf {\n #[derive(Debug)]\n pub struct MutDeref;\n impl NonConstOp for MutDeref {\n-    fn feature_gate(tcx: TyCtxt<'_>) -> Option<bool> {\n-        Some(tcx.features().const_mut_refs)\n+    fn feature_gate() -> Option<Symbol> {\n+        Some(sym::const_mut_refs)\n     }\n }\n \n #[derive(Debug)]\n pub struct Panic;\n impl NonConstOp for Panic {\n-    fn feature_gate(tcx: TyCtxt<'_>) -> Option<bool> {\n-        Some(tcx.features().const_panic)\n+    fn feature_gate() -> Option<Symbol> {\n+        Some(sym::const_panic)\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n@@ -282,8 +284,8 @@ impl NonConstOp for Panic {\n #[derive(Debug)]\n pub struct RawPtrComparison;\n impl NonConstOp for RawPtrComparison {\n-    fn feature_gate(tcx: TyCtxt<'_>) -> Option<bool> {\n-        Some(tcx.features().const_compare_raw_pointers)\n+    fn feature_gate() -> Option<Symbol> {\n+        Some(sym::const_compare_raw_pointers)\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n@@ -300,8 +302,8 @@ impl NonConstOp for RawPtrComparison {\n #[derive(Debug)]\n pub struct RawPtrDeref;\n impl NonConstOp for RawPtrDeref {\n-    fn feature_gate(tcx: TyCtxt<'_>) -> Option<bool> {\n-        Some(tcx.features().const_raw_ptr_deref)\n+    fn feature_gate() -> Option<Symbol> {\n+        Some(sym::const_raw_ptr_deref)\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n@@ -318,8 +320,8 @@ impl NonConstOp for RawPtrDeref {\n #[derive(Debug)]\n pub struct RawPtrToIntCast;\n impl NonConstOp for RawPtrToIntCast {\n-    fn feature_gate(tcx: TyCtxt<'_>) -> Option<bool> {\n-        Some(tcx.features().const_raw_ptr_to_usize_cast)\n+    fn feature_gate() -> Option<Symbol> {\n+        Some(sym::const_raw_ptr_to_usize_cast)\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n@@ -386,11 +388,12 @@ pub struct UnionAccess;\n impl NonConstOp for UnionAccess {\n     fn is_allowed_in_item(&self, item: &Item<'_, '_>) -> bool {\n         // Union accesses are stable in all contexts except `const fn`.\n-        item.const_kind() != ConstKind::ConstFn || Self::feature_gate(item.tcx).unwrap()\n+        item.const_kind() != ConstKind::ConstFn\n+            || item.tcx.features().enabled(Self::feature_gate().unwrap())\n     }\n \n-    fn feature_gate(tcx: TyCtxt<'_>) -> Option<bool> {\n-        Some(tcx.features().const_fn_union)\n+    fn feature_gate() -> Option<Symbol> {\n+        Some(sym::const_fn_union)\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {"}, {"sha": "bfd97fcff3f28a8f35481e3f5487643da5b66802", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b46ef3dd0308bd75e4aa0cc0eca5203842bf5561/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b46ef3dd0308bd75e4aa0cc0eca5203842bf5561/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=b46ef3dd0308bd75e4aa0cc0eca5203842bf5561", "patch": "@@ -213,7 +213,7 @@ impl Validator<'a, 'mir, 'tcx> {\n \n         // If an operation is supported in miri (and is not already controlled by a feature gate) it\n         // can be turned on with `-Zunleash-the-miri-inside-of-you`.\n-        let is_unleashable = O::IS_SUPPORTED_IN_MIRI && O::feature_gate(self.tcx).is_none();\n+        let is_unleashable = O::IS_SUPPORTED_IN_MIRI && O::feature_gate().is_none();\n \n         if is_unleashable && self.tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you {\n             self.tcx.sess.span_warn(span, \"skipping const checks\");"}]}