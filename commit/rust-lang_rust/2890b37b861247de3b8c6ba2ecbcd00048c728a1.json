{"sha": "2890b37b861247de3b8c6ba2ecbcd00048c728a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4OTBiMzdiODYxMjQ3ZGUzYjhjNmJhMmVjYmNkMDAwNDhjNzI4YTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-06T17:52:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-06T17:52:52Z"}, "message": "Auto merge of #69753 - pnkfelix:issue-69191-ice-on-uninhabited-enum-field, r=oli\n\nDo not ICE when matching an uninhabited enum's field\n\nFix #69191", "tree": {"sha": "55557297edb5bff5cbc09c94b42ff9cb236415b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55557297edb5bff5cbc09c94b42ff9cb236415b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2890b37b861247de3b8c6ba2ecbcd00048c728a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2890b37b861247de3b8c6ba2ecbcd00048c728a1", "html_url": "https://github.com/rust-lang/rust/commit/2890b37b861247de3b8c6ba2ecbcd00048c728a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2890b37b861247de3b8c6ba2ecbcd00048c728a1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "865b44a3e330f3ef8be0f6edf69896c9ed957ac0", "url": "https://api.github.com/repos/rust-lang/rust/commits/865b44a3e330f3ef8be0f6edf69896c9ed957ac0", "html_url": "https://github.com/rust-lang/rust/commit/865b44a3e330f3ef8be0f6edf69896c9ed957ac0"}, {"sha": "b4422fb14b9e0c030e9da6fa943f0e4850b25a85", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4422fb14b9e0c030e9da6fa943f0e4850b25a85", "html_url": "https://github.com/rust-lang/rust/commit/b4422fb14b9e0c030e9da6fa943f0e4850b25a85"}], "stats": {"total": 99, "additions": 99, "deletions": 0}, "files": [{"sha": "721766cc932d3e8ab00ea3bba9d54651fcdf1d97", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2890b37b861247de3b8c6ba2ecbcd00048c728a1/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2890b37b861247de3b8c6ba2ecbcd00048c728a1/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=2890b37b861247de3b8c6ba2ecbcd00048c728a1", "patch": "@@ -410,6 +410,14 @@ where\n                 stride * field\n             }\n             layout::FieldPlacement::Union(count) => {\n+                // This is a narrow bug-fix for rust-lang/rust#69191: if we are\n+                // trying to access absent field of uninhabited variant, then\n+                // signal UB (but don't ICE the compiler).\n+                // FIXME temporary hack to work around incoherence between\n+                // layout computation and MIR building\n+                if field >= count as u64 && base.layout.abi == layout::Abi::Uninhabited {\n+                    throw_ub!(Unreachable);\n+                }\n                 assert!(\n                     field < count as u64,\n                     \"Tried to access field {} of union {:#?} with {} fields\","}, {"sha": "5b7c7be42cf065d490add8b19fcda61e442a2742", "filename": "src/test/ui/consts/issue-69191-ice-on-uninhabited-enum-field.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/2890b37b861247de3b8c6ba2ecbcd00048c728a1/src%2Ftest%2Fui%2Fconsts%2Fissue-69191-ice-on-uninhabited-enum-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2890b37b861247de3b8c6ba2ecbcd00048c728a1/src%2Ftest%2Fui%2Fconsts%2Fissue-69191-ice-on-uninhabited-enum-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-69191-ice-on-uninhabited-enum-field.rs?ref=2890b37b861247de3b8c6ba2ecbcd00048c728a1", "patch": "@@ -0,0 +1,91 @@\n+// build-pass\n+//\n+// (this is deliberately *not* check-pass; I have confirmed that the bug in\n+// question does not replicate when one uses `cargo check` alone.)\n+\n+pub enum Void {}\n+\n+enum UninhabitedUnivariant {\n+    _Variant(Void),\n+}\n+\n+enum UninhabitedMultivariant2 {\n+    _Variant(Void),\n+    _Warriont(Void),\n+}\n+\n+enum UninhabitedMultivariant3 {\n+    _Variant(Void),\n+    _Warriont(Void),\n+    _Worrynot(Void),\n+}\n+\n+#[repr(C)]\n+enum UninhabitedUnivariantC {\n+    _Variant(Void),\n+}\n+\n+#[repr(i32)]\n+enum UninhabitedUnivariant32 {\n+    _Variant(Void),\n+}\n+\n+fn main() {\n+    let _seed: UninhabitedUnivariant = None.unwrap();\n+    match _seed {\n+        UninhabitedUnivariant::_Variant(_x) => {}\n+    }\n+\n+    let _seed: UninhabitedMultivariant2 = None.unwrap();\n+    match _seed {\n+        UninhabitedMultivariant2::_Variant(_x) => {}\n+        UninhabitedMultivariant2::_Warriont(_x) => {}\n+    }\n+\n+    let _seed: UninhabitedMultivariant2 = None.unwrap();\n+    match _seed {\n+        UninhabitedMultivariant2::_Variant(_x) => {}\n+        _ => {}\n+    }\n+\n+    let _seed: UninhabitedMultivariant2 = None.unwrap();\n+    match _seed {\n+        UninhabitedMultivariant2::_Warriont(_x) => {}\n+        _ => {}\n+    }\n+\n+    let _seed: UninhabitedMultivariant3 = None.unwrap();\n+    match _seed {\n+        UninhabitedMultivariant3::_Variant(_x) => {}\n+        UninhabitedMultivariant3::_Warriont(_x) => {}\n+        UninhabitedMultivariant3::_Worrynot(_x) => {}\n+    }\n+\n+    let _seed: UninhabitedMultivariant3 = None.unwrap();\n+    match _seed {\n+        UninhabitedMultivariant3::_Variant(_x) => {}\n+        _ => {}\n+    }\n+\n+    let _seed: UninhabitedMultivariant3 = None.unwrap();\n+    match _seed {\n+        UninhabitedMultivariant3::_Warriont(_x) => {}\n+        _ => {}\n+    }\n+\n+    let _seed: UninhabitedMultivariant3 = None.unwrap();\n+    match _seed {\n+        UninhabitedMultivariant3::_Worrynot(_x) => {}\n+        _ => {}\n+    }\n+\n+    let _seed: UninhabitedUnivariantC = None.unwrap();\n+    match _seed {\n+        UninhabitedUnivariantC::_Variant(_x) => {}\n+    }\n+\n+    let _seed: UninhabitedUnivariant32 = None.unwrap();\n+    match _seed {\n+        UninhabitedUnivariant32::_Variant(_x) => {}\n+    }\n+}"}]}