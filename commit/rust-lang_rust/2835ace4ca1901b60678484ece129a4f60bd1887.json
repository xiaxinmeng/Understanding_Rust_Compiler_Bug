{"sha": "2835ace4ca1901b60678484ece129a4f60bd1887", "node_id": "C_kwDOAAsO6NoAKDI4MzVhY2U0Y2ExOTAxYjYwNjc4NDg0ZWNlMTI5YTRmNjBiZDE4ODc", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-01-13T06:04:39Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-01-13T06:04:39Z"}, "message": "Improve suggestions for type errors with string concatenation\n\nNow, multipart suggestions are used instead of `span_to_snippet`, which\nimproves code quality, makes the suggestion work even without access to\nsource code, and, most importantly, improves the rendering of the\nsuggestion.", "tree": {"sha": "8cbe4bae81541e7759f200bf9bde866c1352c8e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cbe4bae81541e7759f200bf9bde866c1352c8e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2835ace4ca1901b60678484ece129a4f60bd1887", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2835ace4ca1901b60678484ece129a4f60bd1887", "html_url": "https://github.com/rust-lang/rust/commit/2835ace4ca1901b60678484ece129a4f60bd1887", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2835ace4ca1901b60678484ece129a4f60bd1887/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "124555a69e5f65173ec7840000eb8e953d046740", "url": "https://api.github.com/repos/rust-lang/rust/commits/124555a69e5f65173ec7840000eb8e953d046740", "html_url": "https://github.com/rust-lang/rust/commit/124555a69e5f65173ec7840000eb8e953d046740"}], "stats": {"total": 112, "additions": 47, "deletions": 65}, "files": [{"sha": "838f8b0a61d176dbbb93bd126cb6dfca376b1e9e", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 29, "deletions": 49, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/2835ace4ca1901b60678484ece129a4f60bd1887/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2835ace4ca1901b60678484ece129a4f60bd1887/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=2835ace4ca1901b60678484ece129a4f60bd1887", "patch": "@@ -549,7 +549,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         is_assign: IsAssign,\n         op: hir::BinOp,\n     ) -> bool {\n-        let source_map = self.tcx.sess.source_map();\n         let remove_borrow_msg = \"String concatenation appends the string on the right to the \\\n                                  string on the left and may require reallocation. This \\\n                                  requires ownership of the string on the left\";\n@@ -574,31 +573,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ) =>\n             {\n                 if let IsAssign::No = is_assign { // Do not supply this message if `&str += &str`\n-                    err.span_label(\n-                        op.span,\n-                        \"`+` cannot be used to concatenate two `&str` strings\",\n-                    );\n-                    match source_map.span_to_snippet(lhs_expr.span) {\n-                        Ok(lstring) => {\n-                            err.span_suggestion(\n-                                lhs_expr.span,\n-                                if lstring.starts_with('&') {\n-                                    remove_borrow_msg\n-                                } else {\n-                                    msg\n-                                },\n-                                if let Some(stripped) = lstring.strip_prefix('&') {\n-                                    // let a = String::new();\n-                                    // let _ = &a + \"bar\";\n-                                    stripped.to_string()\n-                                } else {\n-                                    format!(\"{}.to_owned()\", lstring)\n-                                },\n-                                Applicability::MachineApplicable,\n-                            )\n-                        }\n-                        _ => err.help(msg),\n-                    };\n+                    err.span_label(op.span, \"`+` cannot be used to concatenate two `&str` strings\");\n+                    if let hir::ExprKind::AddrOf(_,_,lhs_inner_expr) = lhs_expr.kind {\n+                        err.span_suggestion(\n+                            lhs_expr.span.until(lhs_inner_expr.span),\n+                            remove_borrow_msg,\n+                            \"\".to_owned(),\n+                            Applicability::MachineApplicable\n+                        );\n+                    } else {\n+                        err.span_suggestion(\n+                            lhs_expr.span.shrink_to_hi(),\n+                            msg,\n+                            \".to_owned()\".to_owned(),\n+                            Applicability::MachineApplicable\n+                        );\n+                    }\n                 }\n                 true\n             }\n@@ -609,32 +599,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     op.span,\n                     \"`+` cannot be used to concatenate a `&str` with a `String`\",\n                 );\n-                match (\n-                    source_map.span_to_snippet(lhs_expr.span),\n-                    source_map.span_to_snippet(rhs_expr.span),\n-                    is_assign,\n-                ) {\n-                    (Ok(l), Ok(r), IsAssign::No) => {\n-                        let to_string = if let Some(stripped) = l.strip_prefix('&') {\n-                            // let a = String::new(); let b = String::new();\n-                            // let _ = &a + b;\n-                            stripped.to_string()\n-                        } else {\n-                            format!(\"{}.to_owned()\", l)\n-                        };\n-                        err.multipart_suggestion(\n-                            msg,\n-                            vec![\n-                                (lhs_expr.span, to_string),\n-                                (rhs_expr.span, format!(\"&{}\", r)),\n-                            ],\n-                            Applicability::MachineApplicable,\n-                        );\n+                match is_assign {\n+                    IsAssign::No => {\n+                        let suggestions = vec![\n+                            if let hir::ExprKind::AddrOf(_, _, lhs_inner_expr) = lhs_expr.kind {\n+                                (lhs_expr.span.until(lhs_inner_expr.span), \"\".to_owned())\n+                            } else {\n+                                (lhs_expr.span.shrink_to_hi(), \".to_owned()\".to_owned())\n+                            },\n+                            (rhs_expr.span.shrink_to_lo(), \"&\".to_owned()),\n+                        ];\n+                        err.multipart_suggestion(msg, suggestions, Applicability::MachineApplicable);\n                     }\n-                    _ => {\n+                    IsAssign::Yes => {\n                         err.help(msg);\n                     }\n-                };\n+                }\n                 true\n             }\n             _ => false,"}, {"sha": "2c17a19779f8ff4fb4645dacf147b7c1c3194995", "filename": "src/test/ui/issues/issue-47377.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2835ace4ca1901b60678484ece129a4f60bd1887/src%2Ftest%2Fui%2Fissues%2Fissue-47377.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2835ace4ca1901b60678484ece129a4f60bd1887/src%2Ftest%2Fui%2Fissues%2Fissue-47377.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47377.stderr?ref=2835ace4ca1901b60678484ece129a4f60bd1887", "patch": "@@ -10,7 +10,7 @@ LL |      let _a = b + \", World!\";\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |      let _a = b.to_owned() + \", World!\";\n-   |               ~~~~~~~~~~~~\n+   |                +++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "417206e6cc4fb19bbb2f66902f1fcb846ae3458f", "filename": "src/test/ui/issues/issue-47380.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2835ace4ca1901b60678484ece129a4f60bd1887/src%2Ftest%2Fui%2Fissues%2Fissue-47380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2835ace4ca1901b60678484ece129a4f60bd1887/src%2Ftest%2Fui%2Fissues%2Fissue-47380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47380.stderr?ref=2835ace4ca1901b60678484ece129a4f60bd1887", "patch": "@@ -10,7 +10,7 @@ LL |     println!(\"\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\"); let _a = b + \", World!\";\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     println!(\"\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\"); let _a = b.to_owned() + \", World!\";\n-   |                                      ~~~~~~~~~~~~\n+   |                                       +++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "444d037571e1885b4daffd36e2ae9a194da782a7", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2835ace4ca1901b60678484ece129a4f60bd1887/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2835ace4ca1901b60678484ece129a4f60bd1887/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=2835ace4ca1901b60678484ece129a4f60bd1887", "patch": "@@ -10,7 +10,7 @@ LL |     let x = \"Hello \" + \"World!\";\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let x = \"Hello \".to_owned() + \"World!\";\n-   |             ~~~~~~~~~~~~~~~~~~~\n+   |                     +++++++++++\n \n error[E0369]: cannot add `World` to `World`\n   --> $DIR/issue-39018.rs:8:26\n@@ -49,7 +49,7 @@ LL |     let x = \"Hello \" + \"World!\".to_owned();\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let x = \"Hello \".to_owned() + &\"World!\".to_owned();\n-   |             ~~~~~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~\n+   |                     +++++++++++   +\n \n error[E0369]: cannot add `&String` to `&String`\n   --> $DIR/issue-39018.rs:26:16\n@@ -62,8 +62,9 @@ LL |     let _ = &a + &b;\n    |\n help: String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n-LL |     let _ = a + &b;\n-   |             ~\n+LL -     let _ = &a + &b;\n+LL +     let _ = a + &b;\n+   | \n \n error[E0369]: cannot add `String` to `&String`\n   --> $DIR/issue-39018.rs:27:16\n@@ -76,8 +77,9 @@ LL |     let _ = &a + b;\n    |\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n-LL |     let _ = a + &b;\n-   |             ~   ~~\n+LL -     let _ = &a + b;\n+LL +     let _ = a + &b;\n+   | \n \n error[E0308]: mismatched types\n   --> $DIR/issue-39018.rs:29:17\n@@ -100,7 +102,7 @@ LL |     let _ = e + b;\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let _ = e.to_owned() + &b;\n-   |             ~~~~~~~~~~~~   ~~\n+   |              +++++++++++   +\n \n error[E0369]: cannot add `&String` to `&String`\n   --> $DIR/issue-39018.rs:31:15\n@@ -114,7 +116,7 @@ LL |     let _ = e + &b;\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let _ = e.to_owned() + &b;\n-   |             ~~~~~~~~~~~~\n+   |              +++++++++++\n \n error[E0369]: cannot add `&str` to `&String`\n   --> $DIR/issue-39018.rs:32:15\n@@ -128,7 +130,7 @@ LL |     let _ = e + d;\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let _ = e.to_owned() + d;\n-   |             ~~~~~~~~~~~~\n+   |              +++++++++++\n \n error[E0369]: cannot add `&&str` to `&String`\n   --> $DIR/issue-39018.rs:33:15\n@@ -142,7 +144,7 @@ LL |     let _ = e + &d;\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let _ = e.to_owned() + &d;\n-   |             ~~~~~~~~~~~~\n+   |              +++++++++++\n \n error[E0369]: cannot add `&&str` to `&&str`\n   --> $DIR/issue-39018.rs:34:16\n@@ -172,7 +174,7 @@ LL |     let _ = c + &d;\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let _ = c.to_owned() + &d;\n-   |             ~~~~~~~~~~~~\n+   |              +++++++++++\n \n error[E0369]: cannot add `&str` to `&str`\n   --> $DIR/issue-39018.rs:37:15\n@@ -186,7 +188,7 @@ LL |     let _ = c + d;\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let _ = c.to_owned() + d;\n-   |             ~~~~~~~~~~~~\n+   |              +++++++++++\n \n error: aborting due to 14 previous errors\n "}, {"sha": "cc9456be901699454db1a9ec9f7beeaf3612b58b", "filename": "src/test/ui/str/str-concat-on-double-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2835ace4ca1901b60678484ece129a4f60bd1887/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2835ace4ca1901b60678484ece129a4f60bd1887/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.stderr?ref=2835ace4ca1901b60678484ece129a4f60bd1887", "patch": "@@ -10,7 +10,7 @@ LL |     let c = a + b;\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let c = a.to_owned() + b;\n-   |             ~~~~~~~~~~~~\n+   |              +++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "2da3db4a7fa8157373dca98005038e592b530283", "filename": "src/test/ui/terminal-width/non-1-width-unicode-multiline-label.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2835ace4ca1901b60678484ece129a4f60bd1887/src%2Ftest%2Fui%2Fterminal-width%2Fnon-1-width-unicode-multiline-label.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2835ace4ca1901b60678484ece129a4f60bd1887/src%2Ftest%2Fui%2Fterminal-width%2Fnon-1-width-unicode-multiline-label.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-1-width-unicode-multiline-label.stderr?ref=2835ace4ca1901b60678484ece129a4f60bd1887", "patch": "@@ -10,7 +10,7 @@ LL | ...\u0f7d\u0f7e\u0f7f\u0f80\u0f81\u0f82\u0f83\u0f84\u0f85\u0f86\u0f87\u0f88\u0f89\u0f8a\u0f8b\u0f8c\u0f8d\u0f8e\u0f8f\u0f90\u0f91\u0f92\u0f93\u0f94\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let _ = \"\u0f00\u0f01\u0f02\u0f03\u0f04\u0f05\u0f06\u0f07\u0f08\u0f09\u0f0a\u0f0b\u0f0c\u0f0d\u0f0e\u0f0f\u0f10\u0f11\u0f12\u0f13\u0f14\u0f15\u0f16\u0f17\u0f18\u0f19\u0f1a\u0f1b\u0f1c\u0f1d\u0f1e\u0f1f\u0f20\u0f21\u0f22\u0f23\u0f24\u0f25\u0f26\u0f27\u0f28\u0f29\u0f2a\u0f2b\u0f2c\u0f2d\u0f2e\u0f2f\u0f30\u0f31\u0f32\u0f33\u0f34\u0f35\u0f36\u0f37\u0f38\u0f39\u0f3a\u0f3b\u0f3c\u0f3d\u0f3e\u0f3f\u0f40\u0f41\u0f42\u0f43\u0f44\u0f45\u0f46\u0f47\u0f48\u0f49\u0f4a\u0f4b\u0f4c\u0f4d\u0f4e\u0f4f\u0f50\u0f51\u0f52\u0f53\u0f54\u0f55\u0f56\u0f57\u0f58\u0f59\u0f5a\u0f5b\u0f5c\u0f5d\u0f5e\u0f5f\u0f60\u0f61\u0f62\u0f63\u0f64\u0f65\u0f66\u0f67\u0f68\u0f69\u0f6a\u0f6b\u0f6c\u0f6d\u0f6e\u0f6f\u0f70\u0f71\u0f72\u0f73\u0f74\u0f75\u0f76\u0f77\u0f78\u0f79\u0f7a\u0f7b\u0f7c\u0f7d\u0f7e\u0f7f\u0f80\u0f81\u0f82\u0f83\u0f84\u0f85\u0f86\u0f87\u0f88\u0f89\u0f8a\u0f8b\u0f8c\u0f8d\u0f8e\u0f8f\u0f90\u0f91\u0f92\u0f93\u0f94\u0f95\u0f96\u0f97\u0f98\u0f99\u0f9a\u0f9b\u0f9c\u0f9d\u0f9e\u0f9f\u0fa0\u0fa1\u0fa2\u0fa3\u0fa4\u0fa5\u0fa6\u0fa7\u0fa8\u0fa9\u0faa\u0fab\u0fac\u0fad\u0fae\u0faf\u0fb0\u0fb1\u0fb2\u0fb3\u0fb4\u0fb5\u0fb6\u0fb7\u0fb8\u0fb9\u0fba\u0fbb\u0fbc\u0fbd\u0fbe\u0fbf\u0fc0\u0fc1\u0fc2\u0fc3\u0fc4\u0fc5\u0fc6\u0fc7\u0fc8\u0fc9\u0fca\u0fcb\u0fcc\u0fcd\u0fce\u0fcf\u0fd0\u0fd1\u0fd2\u0fd3\u0fd4\u0fd5\u0fd6\u0fd7\u0fd8\u0fd9\u0fda\"; let _a = unicode_is_fun.to_owned() + \" really fun!\";\n-   |                                                                                                                                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                                                                                                                                                                                         +++++++++++\n \n error: aborting due to previous error\n "}]}