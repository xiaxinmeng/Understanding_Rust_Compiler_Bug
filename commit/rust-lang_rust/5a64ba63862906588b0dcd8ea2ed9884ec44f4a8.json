{"sha": "5a64ba63862906588b0dcd8ea2ed9884ec44f4a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNjRiYTYzODYyOTA2NTg4YjBkY2Q4ZWEyZWQ5ODg0ZWM0NGY0YTg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-30T23:20:41Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-31T03:33:34Z"}, "message": "parser: span_fatal -> struct_span_err", "tree": {"sha": "0cd9756514dc9433cebbebbdc55d231d93809634", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cd9756514dc9433cebbebbdc55d231d93809634"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a64ba63862906588b0dcd8ea2ed9884ec44f4a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a64ba63862906588b0dcd8ea2ed9884ec44f4a8", "html_url": "https://github.com/rust-lang/rust/commit/5a64ba63862906588b0dcd8ea2ed9884ec44f4a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a64ba63862906588b0dcd8ea2ed9884ec44f4a8/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6fc87c5b9af5d626e2b85d008c7146a29733536", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6fc87c5b9af5d626e2b85d008c7146a29733536", "html_url": "https://github.com/rust-lang/rust/commit/b6fc87c5b9af5d626e2b85d008c7146a29733536"}], "stats": {"total": 20, "additions": 8, "deletions": 12}, "files": [{"sha": "630087fb7e80d4f3b8f56f47363c4130d3b099a7", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a64ba63862906588b0dcd8ea2ed9884ec44f4a8/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a64ba63862906588b0dcd8ea2ed9884ec44f4a8/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=5a64ba63862906588b0dcd8ea2ed9884ec44f4a8", "patch": "@@ -158,11 +158,7 @@ crate enum ConsumeClosingDelim {\n \n impl<'a> Parser<'a> {\n     pub fn fatal(&self, m: &str) -> DiagnosticBuilder<'a> {\n-        self.span_fatal(self.token.span, m)\n-    }\n-\n-    crate fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, m: &str) -> DiagnosticBuilder<'a> {\n-        self.sess.span_diagnostic.struct_span_fatal(sp, m)\n+        self.sess.span_diagnostic.struct_span_fatal(self.token.span, m)\n     }\n \n     pub(super) fn span_fatal_err<S: Into<MultiSpan>>("}, {"sha": "49ca5abe97f6446b60046cd554b326692e55c2d2", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a64ba63862906588b0dcd8ea2ed9884ec44f4a8/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a64ba63862906588b0dcd8ea2ed9884ec44f4a8/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=5a64ba63862906588b0dcd8ea2ed9884ec44f4a8", "patch": "@@ -1137,7 +1137,7 @@ impl<'a> Parser<'a> {\n     pub(super) fn parse_lit(&mut self) -> PResult<'a, Lit> {\n         self.parse_opt_lit().ok_or_else(|| {\n             let msg = format!(\"unexpected token: {}\", super::token_descr(&self.token));\n-            self.span_fatal(self.token.span, &msg)\n+            self.struct_span_err(self.token.span, &msg)\n         })\n     }\n "}, {"sha": "d7b242f61012924f8aa9e9e172caa48606d2444b", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a64ba63862906588b0dcd8ea2ed9884ec44f4a8/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a64ba63862906588b0dcd8ea2ed9884ec44f4a8/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=5a64ba63862906588b0dcd8ea2ed9884ec44f4a8", "patch": "@@ -445,9 +445,7 @@ impl<'a> Parser<'a> {\n         // FAILURE TO PARSE ITEM\n         match visibility.node {\n             VisibilityKind::Inherited => {}\n-            _ => {\n-                return Err(self.span_fatal(self.prev_span, \"unmatched visibility `pub`\"));\n-            }\n+            _ => return Err(self.struct_span_err(self.prev_span, \"unmatched visibility `pub`\")),\n         }\n \n         if !attributes_allowed && !attrs.is_empty() {"}, {"sha": "1b7d54a1c1e0f44f46adccdbaa7c93b0b3673c21", "filename": "src/librustc_parse/parser/module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a64ba63862906588b0dcd8ea2ed9884ec44f4a8/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a64ba63862906588b0dcd8ea2ed9884ec44f4a8/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmodule.rs?ref=5a64ba63862906588b0dcd8ea2ed9884ec44f4a8", "patch": "@@ -262,7 +262,7 @@ impl<'a> Parser<'a> {\n                 err.push_str(\" -> \");\n             }\n             err.push_str(&path.to_string_lossy());\n-            return Err(self.span_fatal(id_sp, &err[..]));\n+            return Err(self.struct_span_err(id_sp, &err[..]));\n         }\n         included_mod_stack.push(path.clone());\n         drop(included_mod_stack);"}, {"sha": "4895d5428df34ecb8f99dccc2b4d5d2ac97ef517", "filename": "src/librustc_parse/parser/pat.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a64ba63862906588b0dcd8ea2ed9884ec44f4a8/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a64ba63862906588b0dcd8ea2ed9884ec44f4a8/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpat.rs?ref=5a64ba63862906588b0dcd8ea2ed9884ec44f4a8", "patch": "@@ -796,7 +796,9 @@ impl<'a> Parser<'a> {\n         // binding mode then we do not end up here, because the lookahead\n         // will direct us over to `parse_enum_variant()`.\n         if self.token == token::OpenDelim(token::Paren) {\n-            return Err(self.span_fatal(self.prev_span, \"expected identifier, found enum pattern\"));\n+            return Err(\n+                self.struct_span_err(self.prev_span, \"expected identifier, found enum pattern\")\n+            );\n         }\n \n         Ok(PatKind::Ident(binding_mode, ident, sub))"}, {"sha": "1f72c66ea03d6a4b844f9354636caac1cdb29d83", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a64ba63862906588b0dcd8ea2ed9884ec44f4a8/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a64ba63862906588b0dcd8ea2ed9884ec44f4a8/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=5a64ba63862906588b0dcd8ea2ed9884ec44f4a8", "patch": "@@ -325,7 +325,7 @@ impl<'a> Parser<'a> {\n     fn error_block_no_opening_brace<T>(&mut self) -> PResult<'a, T> {\n         let sp = self.token.span;\n         let tok = super::token_descr(&self.token);\n-        let mut e = self.span_fatal(sp, &format!(\"expected `{{`, found {}\", tok));\n+        let mut e = self.struct_span_err(sp, &format!(\"expected `{{`, found {}\", tok));\n         let do_not_suggest_help = self.token.is_keyword(kw::In) || self.token == token::Colon;\n \n         // Check to see if the user has written something like"}]}