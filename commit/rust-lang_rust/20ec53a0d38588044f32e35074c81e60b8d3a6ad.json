{"sha": "20ec53a0d38588044f32e35074c81e60b8d3a6ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwZWM1M2EwZDM4NTg4MDQ0ZjMyZTM1MDc0YzgxZTYwYjhkM2E2YWQ=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-12-19T14:51:52Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-01-06T11:57:52Z"}, "message": "Fix ReturnPointer generation for void return types\n\nFixes #30480", "tree": {"sha": "862a0178669b72c682cacedb1c7a59276c076b0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/862a0178669b72c682cacedb1c7a59276c076b0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20ec53a0d38588044f32e35074c81e60b8d3a6ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20ec53a0d38588044f32e35074c81e60b8d3a6ad", "html_url": "https://github.com/rust-lang/rust/commit/20ec53a0d38588044f32e35074c81e60b8d3a6ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20ec53a0d38588044f32e35074c81e60b8d3a6ad/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "924bb1e5ebeab4189c3c48dabae4915825b097b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/924bb1e5ebeab4189c3c48dabae4915825b097b0", "html_url": "https://github.com/rust-lang/rust/commit/924bb1e5ebeab4189c3c48dabae4915825b097b0"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "f7245879e2dcee6dee4e4e374a02f0bf7e83d92e", "filename": "src/librustc_trans/trans/mir/lvalue.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/20ec53a0d38588044f32e35074c81e60b8d3a6ad/src%2Flibrustc_trans%2Ftrans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ec53a0d38588044f32e35074c81e60b8d3a6ad/src%2Flibrustc_trans%2Ftrans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Flvalue.rs?ref=20ec53a0d38588044f32e35074c81e60b8d3a6ad", "patch": "@@ -18,6 +18,8 @@ use trans::build;\n use trans::common::{self, Block};\n use trans::debuginfo::DebugLoc;\n use trans::machine;\n+use trans::type_of;\n+use llvm;\n \n use std::ptr;\n \n@@ -91,10 +93,23 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                     const_ty)\n             },\n             mir::Lvalue::ReturnPointer => {\n-                let return_ty = bcx.monomorphize(&self.mir.return_ty);\n-                let llval = fcx.get_ret_slot(bcx, return_ty, \"return\");\n-                LvalueRef::new_sized(llval, LvalueTy::from_ty(return_ty.unwrap()))\n-            }\n+                let fn_return_ty = bcx.monomorphize(&self.mir.return_ty);\n+                let return_ty = fn_return_ty.unwrap();\n+                let llval = if !common::return_type_is_void(bcx.ccx(), return_ty) {\n+                    fcx.get_ret_slot(bcx, fn_return_ty, \"\")\n+                } else {\n+                    // This is a void return; that is, there\u2019s no place to store the value and\n+                    // there cannot really be one (or storing into it doesn\u2019t make sense, anyway).\n+                    // Ergo, we return an undef ValueRef, so we do not have to special-case every\n+                    // place using lvalues, and could use it the same way you use a regular\n+                    // ReturnPointer LValue (i.e. store into it, load from it etc).\n+                    let llty = type_of::type_of(bcx.ccx(), return_ty).ptr_to();\n+                    unsafe {\n+                        llvm::LLVMGetUndef(llty.to_ref())\n+                    }\n+                };\n+                LvalueRef::new_sized(llval, LvalueTy::from_ty(return_ty))\n+            },\n             mir::Lvalue::Projection(ref projection) => {\n                 let tr_base = self.trans_lvalue(bcx, &projection.base);\n                 let projected_ty = tr_base.ty.projection_ty(tcx, &projection.elem);"}]}