{"sha": "7d30472180855735929e42595aefb4344b4c8562", "node_id": "C_kwDOAAsO6NoAKDdkMzA0NzIxODA4NTU3MzU5MjllNDI1OTVhZWZiNDM0NGI0Yzg1NjI", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-05T00:22:01Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-05T00:24:48Z"}, "message": "Remove `mk_name_value_item{,_str}`.\n\nThere are better ways to create the meta items.\n- In the rustdoc tests, the commit adds `dummy_meta_item_name_value`,\n  which matches the existing `dummy_meta_item_word` function and\n  `dummy_meta_item_list` macro.\n- In `types.rs` the commit clones the existing meta item and then\n  modifies the clone.", "tree": {"sha": "cd6dfe55d0b0b7cea4e49d0ef248f02a1b19bd4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd6dfe55d0b0b7cea4e49d0ef248f02a1b19bd4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d30472180855735929e42595aefb4344b4c8562", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d30472180855735929e42595aefb4344b4c8562", "html_url": "https://github.com/rust-lang/rust/commit/7d30472180855735929e42595aefb4344b4c8562", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d30472180855735929e42595aefb4344b4c8562/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5526ff40d3213f6138c1c1311d0c1a0f5c40133", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5526ff40d3213f6138c1c1311d0c1a0f5c40133", "html_url": "https://github.com/rust-lang/rust/commit/d5526ff40d3213f6138c1c1311d0c1a0f5c40133"}], "stats": {"total": 49, "additions": 20, "deletions": 29}, "files": [{"sha": "c47b756c26ad1217b91a05f0c942df1d353c2ff6", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7d30472180855735929e42595aefb4344b4c8562/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d30472180855735929e42595aefb4344b4c8562/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=7d30472180855735929e42595aefb4344b4c8562", "patch": "@@ -1,6 +1,5 @@\n //! Functions dealing with attributes and meta items.\n \n-use crate::ast;\n use crate::ast::{AttrArgs, AttrArgsEq, AttrId, AttrItem, AttrKind, AttrStyle, AttrVec, Attribute};\n use crate::ast::{DelimArgs, Expr, ExprKind, LitKind, MetaItemLit};\n use crate::ast::{MacDelimiter, MetaItem, MetaItemKind, NestedMetaItem, NormalAttr};\n@@ -321,20 +320,6 @@ impl Attribute {\n     }\n }\n \n-/* Constructors */\n-\n-pub fn mk_name_value_item_str(ident: Ident, str: Symbol, str_span: Span) -> MetaItem {\n-    mk_name_value_item(ident, LitKind::Str(str, ast::StrStyle::Cooked), str_span)\n-}\n-\n-pub fn mk_name_value_item(ident: Ident, kind: LitKind, lit_span: Span) -> MetaItem {\n-    let token_lit = kind.synthesize_token_lit();\n-    let lit =\n-        MetaItemLit { symbol: token_lit.symbol, suffix: token_lit.suffix, kind, span: lit_span };\n-    let span = ident.span.to(lit_span);\n-    MetaItem { path: Path::from_ident(ident), kind: MetaItemKind::NameValue(lit), span }\n-}\n-\n pub struct AttrIdGenerator(WorkerLocal<Cell<u32>>);\n \n #[cfg(debug_assertions)]"}, {"sha": "81f6767243683eb9fb26909ec5eaece2502db971", "filename": "src/librustdoc/clean/cfg/tests.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7d30472180855735929e42595aefb4344b4c8562/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d30472180855735929e42595aefb4344b4c8562/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs?ref=7d30472180855735929e42595aefb4344b4c8562", "patch": "@@ -1,9 +1,8 @@\n use super::*;\n \n-use rustc_ast::attr;\n-use rustc_ast::Path;\n+use rustc_ast::{LitKind, MetaItemLit, Path, StrStyle};\n use rustc_span::create_default_session_globals_then;\n-use rustc_span::symbol::{Ident, Symbol};\n+use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::DUMMY_SP;\n \n fn word_cfg(s: &str) -> Cfg {\n@@ -22,6 +21,15 @@ fn dummy_meta_item_word(name: &str) -> MetaItem {\n     }\n }\n \n+fn dummy_meta_item_name_value(name: &str, symbol: Symbol, kind: LitKind) -> MetaItem {\n+    let lit = MetaItemLit { symbol, suffix: None, kind, span: DUMMY_SP };\n+    MetaItem {\n+        path: Path::from_ident(Ident::from_str(name)),\n+        kind: MetaItemKind::NameValue(lit),\n+        span: DUMMY_SP,\n+    }\n+}\n+\n macro_rules! dummy_meta_item_list {\n     ($name:ident, [$($list:ident),* $(,)?]) => {\n         MetaItem {\n@@ -242,8 +250,8 @@ fn test_parse_ok() {\n         let mi = dummy_meta_item_word(\"all\");\n         assert_eq!(Cfg::parse(&mi), Ok(word_cfg(\"all\")));\n \n-        let mi =\n-            attr::mk_name_value_item_str(Ident::from_str(\"all\"), Symbol::intern(\"done\"), DUMMY_SP);\n+        let done = Symbol::intern(\"done\");\n+        let mi = dummy_meta_item_name_value(\"all\", done, LitKind::Str(done, StrStyle::Cooked));\n         assert_eq!(Cfg::parse(&mi), Ok(name_value_cfg(\"all\", \"done\")));\n \n         let mi = dummy_meta_item_list!(all, [a, b]);\n@@ -272,7 +280,7 @@ fn test_parse_ok() {\n #[test]\n fn test_parse_err() {\n     create_default_session_globals_then(|| {\n-        let mi = attr::mk_name_value_item(Ident::from_str(\"foo\"), LitKind::Bool(false), DUMMY_SP);\n+        let mi = dummy_meta_item_name_value(\"foo\", kw::False, LitKind::Bool(false));\n         assert!(Cfg::parse(&mi).is_err());\n \n         let mi = dummy_meta_item_list!(not, [a, b]);"}, {"sha": "8c3b289d34628e4b354adedb535b2aa557e38162", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7d30472180855735929e42595aefb4344b4c8562/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d30472180855735929e42595aefb4344b4c8562/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=7d30472180855735929e42595aefb4344b4c8562", "patch": "@@ -10,7 +10,6 @@ use std::{cmp, fmt, iter};\n use arrayvec::ArrayVec;\n use thin_vec::ThinVec;\n \n-use rustc_ast::attr;\n use rustc_ast::util::comments::beautify_doc_string;\n use rustc_ast::{self as ast, AttrStyle};\n use rustc_attr::{ConstStability, Deprecation, Stability, StabilityLevel};\n@@ -27,7 +26,6 @@ use rustc_middle::ty::fast_reject::SimplifiedType;\n use rustc_middle::ty::{self, DefIdTree, TyCtxt, Visibility};\n use rustc_session::Session;\n use rustc_span::hygiene::MacroKind;\n-use rustc_span::source_map::DUMMY_SP;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{self, FileName, Loc};\n use rustc_target::abi::VariantIdx;\n@@ -979,12 +977,12 @@ impl AttributesExt for [ast::Attribute] {\n         // #[doc(cfg(target_feature = \"feat\"))] attributes as well\n         for attr in self.lists(sym::target_feature) {\n             if attr.has_name(sym::enable) {\n-                if let Some(feat) = attr.value_str() {\n-                    let meta = attr::mk_name_value_item_str(\n-                        Ident::with_dummy_span(sym::target_feature),\n-                        feat,\n-                        DUMMY_SP,\n-                    );\n+                if attr.value_str().is_some() {\n+                    // Clone `enable = \"feat\"`, change to `target_feature = \"feat\"`.\n+                    // Unwrap is safe because `value_str` succeeded above.\n+                    let mut meta = attr.meta_item().unwrap().clone();\n+                    meta.path = ast::Path::from_ident(Ident::with_dummy_span(sym::target_feature));\n+\n                     if let Ok(feat_cfg) = Cfg::parse(&meta) {\n                         cfg &= feat_cfg;\n                     }"}]}