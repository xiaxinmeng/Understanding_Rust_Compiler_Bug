{"sha": "96254b4090a86767d1a3b387158464ece44160fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MjU0YjQwOTBhODY3NjdkMWEzYjM4NzE1ODQ2NGVjZTQ0MTYwZmE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-08-11T17:23:40Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-08-11T17:23:40Z"}, "message": "libsyntax: Update from `@Object` to `@mut Object` as required", "tree": {"sha": "c299e56f668f18257056e84b487082f62f2fa6ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c299e56f668f18257056e84b487082f62f2fa6ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96254b4090a86767d1a3b387158464ece44160fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96254b4090a86767d1a3b387158464ece44160fa", "html_url": "https://github.com/rust-lang/rust/commit/96254b4090a86767d1a3b387158464ece44160fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96254b4090a86767d1a3b387158464ece44160fa/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eebcff1493a98524e72bbf0c79b004fc286d58d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/eebcff1493a98524e72bbf0c79b004fc286d58d7", "html_url": "https://github.com/rust-lang/rust/commit/eebcff1493a98524e72bbf0c79b004fc286d58d7"}], "stats": {"total": 311, "additions": 156, "deletions": 155}, "files": [{"sha": "1fea0c2e6f92db4a1e099ede69a4df1863c8f7ad", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=96254b4090a86767d1a3b387158464ece44160fa", "patch": "@@ -85,7 +85,7 @@ pub type map = @mut HashMap<NodeId, ast_node>;\n pub struct Ctx {\n     map: map,\n     path: path,\n-    diag: @span_handler,\n+    diag: @mut span_handler,\n }\n \n impl Ctx {\n@@ -141,7 +141,7 @@ impl Ctx {\n             }\n         }\n \n-        visit::visit_expr(self as @Visitor<()>, ex, ());\n+        visit::visit_expr(self as @mut Visitor<()>, ex, ());\n     }\n \n     fn map_fn(@mut self,\n@@ -153,18 +153,18 @@ impl Ctx {\n         for a in decl.inputs.iter() {\n             self.map.insert(a.id, node_arg);\n         }\n-        visit::visit_fn(self as @Visitor<()>, fk, decl, body, sp, id, ());\n+        visit::visit_fn(self as @mut Visitor<()>, fk, decl, body, sp, id, ());\n     }\n \n     fn map_stmt(@mut self, stmt: @stmt) {\n         self.map.insert(stmt_id(stmt), node_stmt(stmt));\n-        visit::visit_stmt(self as @Visitor<()>, stmt, ());\n+        visit::visit_stmt(self as @mut Visitor<()>, stmt, ());\n     }\n \n     fn map_block(@mut self, b: &Block) {\n         // clone is FIXME #2543\n         self.map.insert(b.id, node_block((*b).clone()));\n-        visit::visit_block(self as @Visitor<()>, b, ());\n+        visit::visit_block(self as @mut Visitor<()>, b, ());\n     }\n \n     fn map_pat(@mut self, pat: @pat) {\n@@ -177,7 +177,7 @@ impl Ctx {\n             _ => ()\n         }\n \n-        visit::visit_pat(self as @Visitor<()>, pat, ());\n+        visit::visit_pat(self as @mut Visitor<()>, pat, ());\n     }\n }\n \n@@ -254,13 +254,13 @@ impl Visitor<()> for Ctx {\n             }\n             _ => self.path.push(path_name(i.ident))\n         }\n-        visit::visit_item(self as @Visitor<()>, i, ());\n+        visit::visit_item(self as @mut Visitor<()>, i, ());\n         self.path.pop();\n     }\n \n     fn visit_pat(@mut self, pat: @pat, _: ()) {\n         self.map_pat(pat);\n-        visit::visit_pat(self as @Visitor<()>, pat, ())\n+        visit::visit_pat(self as @mut Visitor<()>, pat, ())\n     }\n \n     fn visit_expr(@mut self, expr: @expr, _: ()) {\n@@ -288,39 +288,39 @@ impl Visitor<()> for Ctx {\n     // XXX: Methods below can become default methods.\n \n     fn visit_mod(@mut self, module: &_mod, _: span, _: NodeId, _: ()) {\n-        visit::visit_mod(self as @Visitor<()>, module, ())\n+        visit::visit_mod(self as @mut Visitor<()>, module, ())\n     }\n \n     fn visit_view_item(@mut self, view_item: &view_item, _: ()) {\n-        visit::visit_view_item(self as @Visitor<()>, view_item, ())\n+        visit::visit_view_item(self as @mut Visitor<()>, view_item, ())\n     }\n \n     fn visit_foreign_item(@mut self, foreign_item: @foreign_item, _: ()) {\n-        visit::visit_foreign_item(self as @Visitor<()>, foreign_item, ())\n+        visit::visit_foreign_item(self as @mut Visitor<()>, foreign_item, ())\n     }\n \n     fn visit_local(@mut self, local: @Local, _: ()) {\n-        visit::visit_local(self as @Visitor<()>, local, ())\n+        visit::visit_local(self as @mut Visitor<()>, local, ())\n     }\n \n     fn visit_arm(@mut self, arm: &arm, _: ()) {\n-        visit::visit_arm(self as @Visitor<()>, arm, ())\n+        visit::visit_arm(self as @mut Visitor<()>, arm, ())\n     }\n \n     fn visit_decl(@mut self, decl: @decl, _: ()) {\n-        visit::visit_decl(self as @Visitor<()>, decl, ())\n+        visit::visit_decl(self as @mut Visitor<()>, decl, ())\n     }\n \n     fn visit_expr_post(@mut self, _: @expr, _: ()) {\n         // Empty!\n     }\n \n     fn visit_ty(@mut self, typ: &Ty, _: ()) {\n-        visit::visit_ty(self as @Visitor<()>, typ, ())\n+        visit::visit_ty(self as @mut Visitor<()>, typ, ())\n     }\n \n     fn visit_generics(@mut self, generics: &Generics, _: ()) {\n-        visit::visit_generics(self as @Visitor<()>, generics, ())\n+        visit::visit_generics(self as @mut Visitor<()>, generics, ())\n     }\n \n     fn visit_fn(@mut self,\n@@ -330,7 +330,7 @@ impl Visitor<()> for Ctx {\n                 span: span,\n                 node_id: NodeId,\n                 _: ()) {\n-        visit::visit_fn(self as @Visitor<()>,\n+        visit::visit_fn(self as @mut Visitor<()>,\n                         function_kind,\n                         function_declaration,\n                         block,\n@@ -340,11 +340,11 @@ impl Visitor<()> for Ctx {\n     }\n \n     fn visit_ty_method(@mut self, ty_method: &TypeMethod, _: ()) {\n-        visit::visit_ty_method(self as @Visitor<()>, ty_method, ())\n+        visit::visit_ty_method(self as @mut Visitor<()>, ty_method, ())\n     }\n \n     fn visit_trait_method(@mut self, trait_method: &trait_method, _: ()) {\n-        visit::visit_trait_method(self as @Visitor<()>, trait_method, ())\n+        visit::visit_trait_method(self as @mut Visitor<()>, trait_method, ())\n     }\n \n     fn visit_struct_def(@mut self,\n@@ -353,7 +353,7 @@ impl Visitor<()> for Ctx {\n                         generics: &Generics,\n                         node_id: NodeId,\n                         _: ()) {\n-        visit::visit_struct_def(self as @Visitor<()>,\n+        visit::visit_struct_def(self as @mut Visitor<()>,\n                                 struct_def,\n                                 ident,\n                                 generics,\n@@ -362,24 +362,24 @@ impl Visitor<()> for Ctx {\n     }\n \n     fn visit_struct_field(@mut self, struct_field: @struct_field, _: ()) {\n-        visit::visit_struct_field(self as @Visitor<()>, struct_field, ())\n+        visit::visit_struct_field(self as @mut Visitor<()>, struct_field, ())\n     }\n }\n \n-pub fn map_crate(diag: @span_handler, c: &Crate) -> map {\n+pub fn map_crate(diag: @mut span_handler, c: &Crate) -> map {\n     let cx = @mut Ctx {\n         map: @mut HashMap::new(),\n         path: ~[],\n         diag: diag,\n     };\n-    visit::visit_crate(cx as @Visitor<()>, c, ());\n+    visit::visit_crate(cx as @mut Visitor<()>, c, ());\n     cx.map\n }\n \n // Used for items loaded from external crate that are being inlined into this\n // crate.  The `path` should be the path to the item but should not include\n // the item itself.\n-pub fn map_decoded_item(diag: @span_handler,\n+pub fn map_decoded_item(diag: @mut span_handler,\n                         map: map,\n                         path: path,\n                         ii: &inlined_item) {\n@@ -409,7 +409,7 @@ pub fn map_decoded_item(diag: @span_handler,\n     }\n \n     // visit the item / method contents and add those to the map:\n-    ii.accept((), cx as @Visitor<()>);\n+    ii.accept((), cx as @mut Visitor<()>);\n }\n \n pub fn node_id_to_str(map: map, id: NodeId, itr: @ident_interner) -> ~str {"}, {"sha": "d99f8cab4937fad51167888fa80d1660e84e4bc8", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=96254b4090a86767d1a3b387158464ece44160fa", "patch": "@@ -298,7 +298,7 @@ pub fn struct_field_visibility(field: ast::struct_field) -> visibility {\n pub trait inlined_item_utils {\n     fn ident(&self) -> ident;\n     fn id(&self) -> ast::NodeId;\n-    fn accept<E: Clone>(&self, e: E, v: @Visitor<E>);\n+    fn accept<E: Clone>(&self, e: E, v: @mut Visitor<E>);\n }\n \n impl inlined_item_utils for inlined_item {\n@@ -318,7 +318,7 @@ impl inlined_item_utils for inlined_item {\n         }\n     }\n \n-    fn accept<E: Clone>(&self, e: E, v: @Visitor<E>) {\n+    fn accept<E: Clone>(&self, e: E, v: @mut Visitor<E>) {\n         match *self {\n             ii_item(i) => v.visit_item(i, e),\n             ii_foreign(i) => v.visit_foreign_item(i, e),\n@@ -414,7 +414,7 @@ impl Visitor<()> for IdVisitor {\n                  node_id: NodeId,\n                  env: ()) {\n         (self.visit_callback)(node_id);\n-        visit::visit_mod(self as @Visitor<()>, module, env)\n+        visit::visit_mod(self as @mut Visitor<()>, module, env)\n     }\n \n     fn visit_view_item(@mut self, view_item: &view_item, env: ()) {\n@@ -439,12 +439,12 @@ impl Visitor<()> for IdVisitor {\n                 }\n             }\n         }\n-        visit::visit_view_item(self as @Visitor<()>, view_item, env)\n+        visit::visit_view_item(self as @mut Visitor<()>, view_item, env)\n     }\n \n     fn visit_foreign_item(@mut self, foreign_item: @foreign_item, env: ()) {\n         (self.visit_callback)(foreign_item.id);\n-        visit::visit_foreign_item(self as @Visitor<()>, foreign_item, env)\n+        visit::visit_foreign_item(self as @mut Visitor<()>, foreign_item, env)\n     }\n \n     fn visit_item(@mut self, item: @item, env: ()) {\n@@ -466,39 +466,39 @@ impl Visitor<()> for IdVisitor {\n             _ => {}\n         }\n \n-        visit::visit_item(self as @Visitor<()>, item, env);\n+        visit::visit_item(self as @mut Visitor<()>, item, env);\n \n         self.visited_outermost = false\n     }\n \n     fn visit_local(@mut self, local: @Local, env: ()) {\n         (self.visit_callback)(local.id);\n-        visit::visit_local(self as @Visitor<()>, local, env)\n+        visit::visit_local(self as @mut Visitor<()>, local, env)\n     }\n \n     fn visit_block(@mut self, block: &Block, env: ()) {\n         (self.visit_callback)(block.id);\n-        visit::visit_block(self as @Visitor<()>, block, env)\n+        visit::visit_block(self as @mut Visitor<()>, block, env)\n     }\n \n     fn visit_stmt(@mut self, statement: @stmt, env: ()) {\n         (self.visit_callback)(ast_util::stmt_id(statement));\n-        visit::visit_stmt(self as @Visitor<()>, statement, env)\n+        visit::visit_stmt(self as @mut Visitor<()>, statement, env)\n     }\n \n     // XXX: Default\n     fn visit_arm(@mut self, arm: &arm, env: ()) {\n-        visit::visit_arm(self as @Visitor<()>, arm, env)\n+        visit::visit_arm(self as @mut Visitor<()>, arm, env)\n     }\n \n     fn visit_pat(@mut self, pattern: @pat, env: ()) {\n         (self.visit_callback)(pattern.id);\n-        visit::visit_pat(self as @Visitor<()>, pattern, env)\n+        visit::visit_pat(self as @mut Visitor<()>, pattern, env)\n     }\n \n     // XXX: Default\n     fn visit_decl(@mut self, declaration: @decl, env: ()) {\n-        visit::visit_decl(self as @Visitor<()>, declaration, env)\n+        visit::visit_decl(self as @mut Visitor<()>, declaration, env)\n     }\n \n     fn visit_expr(@mut self, expression: @expr, env: ()) {\n@@ -509,7 +509,7 @@ impl Visitor<()> for IdVisitor {\n             }\n         }\n         (self.visit_callback)(expression.id);\n-        visit::visit_expr(self as @Visitor<()>, expression, env)\n+        visit::visit_expr(self as @mut Visitor<()>, expression, env)\n     }\n \n     // XXX: Default\n@@ -523,12 +523,12 @@ impl Visitor<()> for IdVisitor {\n             ty_path(_, _, id) => (self.visit_callback)(id),\n             _ => {}\n         }\n-        visit::visit_ty(self as @Visitor<()>, typ, env)\n+        visit::visit_ty(self as @mut Visitor<()>, typ, env)\n     }\n \n     fn visit_generics(@mut self, generics: &Generics, env: ()) {\n         self.visit_generics_helper(generics);\n-        visit::visit_generics(self as @Visitor<()>, generics, env)\n+        visit::visit_generics(self as @mut Visitor<()>, generics, env)\n     }\n \n     fn visit_fn(@mut self,\n@@ -563,7 +563,7 @@ impl Visitor<()> for IdVisitor {\n             (self.visit_callback)(argument.id)\n         }\n \n-        visit::visit_fn(self as @Visitor<()>,\n+        visit::visit_fn(self as @mut Visitor<()>,\n                         function_kind,\n                         function_declaration,\n                         block,\n@@ -581,12 +581,12 @@ impl Visitor<()> for IdVisitor {\n \n     // XXX: Default\n     fn visit_ty_method(@mut self, type_method: &TypeMethod, env: ()) {\n-        visit::visit_ty_method(self as @Visitor<()>, type_method, env)\n+        visit::visit_ty_method(self as @mut Visitor<()>, type_method, env)\n     }\n \n     // XXX: Default\n     fn visit_trait_method(@mut self, trait_method: &trait_method, env: ()) {\n-        visit::visit_trait_method(self as @Visitor<()>, trait_method, env)\n+        visit::visit_trait_method(self as @mut Visitor<()>, trait_method, env)\n     }\n \n     // XXX: Default\n@@ -596,7 +596,7 @@ impl Visitor<()> for IdVisitor {\n                         generics: &Generics,\n                         node_id: NodeId,\n                         env: ()) {\n-        visit::visit_struct_def(self as @Visitor<()>,\n+        visit::visit_struct_def(self as @mut Visitor<()>,\n                                 struct_definition,\n                                 identifier,\n                                 generics,\n@@ -606,18 +606,18 @@ impl Visitor<()> for IdVisitor {\n \n     fn visit_struct_field(@mut self, struct_field: @struct_field, env: ()) {\n         (self.visit_callback)(struct_field.node.id);\n-        visit::visit_struct_field(self as @Visitor<()>, struct_field, env)\n+        visit::visit_struct_field(self as @mut Visitor<()>, struct_field, env)\n     }\n }\n \n pub fn id_visitor(vfn: @fn(NodeId), pass_through_items: bool)\n-                  -> @Visitor<()> {\n-    let visitor = @IdVisitor {\n+                  -> @mut Visitor<()> {\n+    let visitor = @mut IdVisitor {\n         visit_callback: vfn,\n         pass_through_items: pass_through_items,\n         visited_outermost: false,\n     };\n-    visitor as @Visitor<()>\n+    visitor as @mut Visitor<()>\n }\n \n pub fn visit_ids_for_inlined_item(item: &inlined_item, vfn: @fn(NodeId)) {\n@@ -757,9 +757,9 @@ impl EachViewItem for ast::Crate {\n             callback: f,\n         };\n         let visitor = @mut SimpleVisitorVisitor {\n-            simple_visitor: data as @SimpleVisitor,\n+            simple_visitor: data as @mut SimpleVisitor,\n         };\n-        visit::visit_crate(visitor as @Visitor<()>, self, ());\n+        visit::visit_crate(visitor as @mut Visitor<()>, self, ());\n         true\n     }\n }"}, {"sha": "47d8ebecca06a313fb68f3c49b07d6c7c116bbc6", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=96254b4090a86767d1a3b387158464ece44160fa", "patch": "@@ -313,7 +313,7 @@ pub fn test_cfg<AM: AttrMetaMethods, It: Iterator<AM>>\n     no_cfgs || some_cfg_matches\n }\n \n-pub fn require_unique_names(diagnostic: @span_handler,\n+pub fn require_unique_names(diagnostic: @mut span_handler,\n                             metas: &[@MetaItem]) {\n     let mut set = HashSet::new();\n     for meta in metas.iter() {"}, {"sha": "5cdfe8e0f110b5298879198d58fe7d2d8d11a63d", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=96254b4090a86767d1a3b387158464ece44160fa", "patch": "@@ -50,7 +50,7 @@ pub trait span_handler {\n     fn span_note(@mut self, sp: span, msg: &str);\n     fn span_bug(@mut self, sp: span, msg: &str) -> !;\n     fn span_unimpl(@mut self, sp: span, msg: &str) -> !;\n-    fn handler(@mut self) -> @handler;\n+    fn handler(@mut self) -> @mut handler;\n }\n \n struct HandlerT {\n@@ -59,7 +59,7 @@ struct HandlerT {\n }\n \n struct CodemapT {\n-    handler: @handler,\n+    handler: @mut handler,\n     cm: @codemap::CodeMap,\n }\n \n@@ -84,7 +84,7 @@ impl span_handler for CodemapT {\n     fn span_unimpl(@mut self, sp: span, msg: &str) -> ! {\n         self.span_bug(sp, ~\"unimplemented \" + msg);\n     }\n-    fn handler(@mut self) -> @handler {\n+    fn handler(@mut self) -> @mut handler {\n         self.handler\n     }\n }\n@@ -143,12 +143,12 @@ pub fn ice_msg(msg: &str) -> ~str {\n     fmt!(\"internal compiler error: %s\", msg)\n }\n \n-pub fn mk_span_handler(handler: @handler, cm: @codemap::CodeMap)\n-                    -> @span_handler {\n-    @mut CodemapT { handler: handler, cm: cm } as @span_handler\n+pub fn mk_span_handler(handler: @mut handler, cm: @codemap::CodeMap)\n+                    -> @mut span_handler {\n+    @mut CodemapT { handler: handler, cm: cm } as @mut span_handler\n }\n \n-pub fn mk_handler(emitter: Option<Emitter>) -> @handler {\n+pub fn mk_handler(emitter: Option<Emitter>) -> @mut handler {\n     let emit: Emitter = match emitter {\n         Some(e) => e,\n         None => {\n@@ -157,7 +157,7 @@ pub fn mk_handler(emitter: Option<Emitter>) -> @handler {\n         }\n     };\n \n-    @mut HandlerT { err_count: 0, emit: emit } as @handler\n+    @mut HandlerT { err_count: 0, emit: emit } as @mut handler\n }\n \n #[deriving(Eq)]\n@@ -341,7 +341,7 @@ fn print_macro_backtrace(cm: @codemap::CodeMap, sp: span) {\n     }\n }\n \n-pub fn expect<T:Clone>(diag: @span_handler,\n+pub fn expect<T:Clone>(diag: @mut span_handler,\n                        opt: Option<T>,\n                        msg: &fn() -> ~str) -> T {\n     match opt {"}, {"sha": "1547446957ed4a194da272b0d5c1a30ded60f57b", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=96254b4090a86767d1a3b387158464ece44160fa", "patch": "@@ -548,64 +548,64 @@ impl Visitor<()> for NewNameFinderContext {\n                 }\n             }\n             // use the default traversal for non-pat_idents\n-            _ => visit::visit_pat(self as @Visitor<()>, pattern, ())\n+            _ => visit::visit_pat(self as @mut Visitor<()>, pattern, ())\n         }\n     }\n \n     // XXX: Methods below can become default methods.\n \n     fn visit_mod(@mut self, module: &ast::_mod, _: span, _: NodeId, _: ()) {\n-        visit::visit_mod(self as @Visitor<()>, module, ())\n+        visit::visit_mod(self as @mut Visitor<()>, module, ())\n     }\n \n     fn visit_view_item(@mut self, view_item: &ast::view_item, _: ()) {\n-        visit::visit_view_item(self as @Visitor<()>, view_item, ())\n+        visit::visit_view_item(self as @mut Visitor<()>, view_item, ())\n     }\n \n     fn visit_item(@mut self, item: @ast::item, _: ()) {\n-        visit::visit_item(self as @Visitor<()>, item, ())\n+        visit::visit_item(self as @mut Visitor<()>, item, ())\n     }\n \n     fn visit_foreign_item(@mut self,\n                           foreign_item: @ast::foreign_item,\n                           _: ()) {\n-        visit::visit_foreign_item(self as @Visitor<()>, foreign_item, ())\n+        visit::visit_foreign_item(self as @mut Visitor<()>, foreign_item, ())\n     }\n \n     fn visit_local(@mut self, local: @ast::Local, _: ()) {\n-        visit::visit_local(self as @Visitor<()>, local, ())\n+        visit::visit_local(self as @mut Visitor<()>, local, ())\n     }\n \n     fn visit_block(@mut self, block: &ast::Block, _: ()) {\n-        visit::visit_block(self as @Visitor<()>, block, ())\n+        visit::visit_block(self as @mut Visitor<()>, block, ())\n     }\n \n     fn visit_stmt(@mut self, stmt: @ast::stmt, _: ()) {\n-        visit::visit_stmt(self as @Visitor<()>, stmt, ())\n+        visit::visit_stmt(self as @mut Visitor<()>, stmt, ())\n     }\n \n     fn visit_arm(@mut self, arm: &ast::arm, _: ()) {\n-        visit::visit_arm(self as @Visitor<()>, arm, ())\n+        visit::visit_arm(self as @mut Visitor<()>, arm, ())\n     }\n \n     fn visit_decl(@mut self, decl: @ast::decl, _: ()) {\n-        visit::visit_decl(self as @Visitor<()>, decl, ())\n+        visit::visit_decl(self as @mut Visitor<()>, decl, ())\n     }\n \n     fn visit_expr(@mut self, expr: @ast::expr, _: ()) {\n-        visit::visit_expr(self as @Visitor<()>, expr, ())\n+        visit::visit_expr(self as @mut Visitor<()>, expr, ())\n     }\n \n     fn visit_expr_post(@mut self, _: @ast::expr, _: ()) {\n         // Empty!\n     }\n \n     fn visit_ty(@mut self, typ: &ast::Ty, _: ()) {\n-        visit::visit_ty(self as @Visitor<()>, typ, ())\n+        visit::visit_ty(self as @mut Visitor<()>, typ, ())\n     }\n \n     fn visit_generics(@mut self, generics: &ast::Generics, _: ()) {\n-        visit::visit_generics(self as @Visitor<()>, generics, ())\n+        visit::visit_generics(self as @mut Visitor<()>, generics, ())\n     }\n \n     fn visit_fn(@mut self,\n@@ -615,7 +615,7 @@ impl Visitor<()> for NewNameFinderContext {\n                 span: span,\n                 node_id: NodeId,\n                 _: ()) {\n-        visit::visit_fn(self as @Visitor<()>,\n+        visit::visit_fn(self as @mut Visitor<()>,\n                         function_kind,\n                         function_declaration,\n                         block,\n@@ -625,13 +625,13 @@ impl Visitor<()> for NewNameFinderContext {\n     }\n \n     fn visit_ty_method(@mut self, ty_method: &ast::TypeMethod, _: ()) {\n-        visit::visit_ty_method(self as @Visitor<()>, ty_method, ())\n+        visit::visit_ty_method(self as @mut Visitor<()>, ty_method, ())\n     }\n \n     fn visit_trait_method(@mut self,\n                           trait_method: &ast::trait_method,\n                           _: ()) {\n-        visit::visit_trait_method(self as @Visitor<()>, trait_method, ())\n+        visit::visit_trait_method(self as @mut Visitor<()>, trait_method, ())\n     }\n \n     fn visit_struct_def(@mut self,\n@@ -640,7 +640,7 @@ impl Visitor<()> for NewNameFinderContext {\n                         generics: &ast::Generics,\n                         node_id: NodeId,\n                         _: ()) {\n-        visit::visit_struct_def(self as @Visitor<()>,\n+        visit::visit_struct_def(self as @mut Visitor<()>,\n                                 struct_def,\n                                 ident,\n                                 generics,\n@@ -651,18 +651,18 @@ impl Visitor<()> for NewNameFinderContext {\n     fn visit_struct_field(@mut self,\n                           struct_field: @ast::struct_field,\n                           _: ()) {\n-        visit::visit_struct_field(self as @Visitor<()>, struct_field, ())\n+        visit::visit_struct_field(self as @mut Visitor<()>, struct_field, ())\n     }\n }\n \n // return a visitor that extracts the pat_ident paths\n // from a given pattern and puts them in a mutable\n // array (passed in to the traversal)\n-pub fn new_name_finder(idents: @mut ~[ast::ident]) -> @Visitor<()> {\n+pub fn new_name_finder(idents: @mut ~[ast::ident]) -> @mut Visitor<()> {\n     let context = @mut NewNameFinderContext {\n         ident_accumulator: idents,\n     };\n-    context as @Visitor<()>\n+    context as @mut Visitor<()>\n }\n \n pub fn expand_block(extsbox: @mut SyntaxEnv,"}, {"sha": "f3e7613d96a34547605a0624032e089e515fbfe4", "filename": "src/libsyntax/ext/trace_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftrace_macros.rs?ref=96254b4090a86767d1a3b387158464ece44160fa", "patch": "@@ -25,7 +25,7 @@ pub fn expand_trace_macros(cx: @ExtCtxt,\n     let tt_rdr = new_tt_reader(cx.parse_sess().span_diagnostic,\n                                None,\n                                tt.to_owned());\n-    let rdr = tt_rdr as @reader;\n+    let rdr = tt_rdr as @mut reader;\n     let rust_parser = Parser(sess, cfg.clone(), rdr.dup());\n \n     if rust_parser.is_keyword(keywords::True) {"}, {"sha": "c4a19a0daca165c0167d63df44323fa0a3f3580d", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=96254b4090a86767d1a3b387158464ece44160fa", "patch": "@@ -224,7 +224,7 @@ pub enum parse_result {\n pub fn parse_or_else(\n     sess: @mut ParseSess,\n     cfg: ast::CrateConfig,\n-    rdr: @reader,\n+    rdr: @mut reader,\n     ms: ~[matcher]\n ) -> HashMap<ident, @named_match> {\n     match parse(sess, cfg, rdr, ms) {\n@@ -237,7 +237,7 @@ pub fn parse_or_else(\n pub fn parse(\n     sess: @mut ParseSess,\n     cfg: ast::CrateConfig,\n-    rdr: @reader,\n+    rdr: @mut reader,\n     ms: &[matcher]\n ) -> parse_result {\n     let mut cur_eis = ~[];"}, {"sha": "54ac1f1e48f44a698a6510a021cc7b5cbfb2b4d6", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=96254b4090a86767d1a3b387158464ece44160fa", "patch": "@@ -59,7 +59,7 @@ pub fn add_new_extension(cx: @ExtCtxt,\n                                    arg.clone());\n     let argument_map = parse_or_else(cx.parse_sess(),\n                                      cx.cfg(),\n-                                     arg_reader as @reader,\n+                                     arg_reader as @mut reader,\n                                      argument_gram);\n \n     // Extract the arguments:\n@@ -101,7 +101,7 @@ pub fn add_new_extension(cx: @ExtCtxt,\n                     s_d,\n                     None,\n                     arg.to_owned()\n-                ) as @reader;\n+                ) as @mut reader;\n                 match parse(cx.parse_sess(), cx.cfg(), arg_rdr, *mtcs) {\n                   success(named_matches) => {\n                     let rhs = match rhses[i] {\n@@ -123,7 +123,7 @@ pub fn add_new_extension(cx: @ExtCtxt,\n                                                rhs);\n                     let p = @Parser(cx.parse_sess(),\n                                     cx.cfg(),\n-                                    trncbr as @reader);\n+                                    trncbr as @mut reader);\n \n                     // Let the context choose how to interpret the result.\n                     // Weird, but useful for X-macros."}, {"sha": "ba0c0e33e832c758ee41fa2cdf95faad41effaa9", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=96254b4090a86767d1a3b387158464ece44160fa", "patch": "@@ -30,7 +30,7 @@ struct TtFrame {\n }\n \n pub struct TtReader {\n-    sp_diag: @span_handler,\n+    sp_diag: @mut span_handler,\n     // the unzipped tree:\n     stack: @mut TtFrame,\n     /* for MBE-style macro transcription */\n@@ -45,7 +45,7 @@ pub struct TtReader {\n /** This can do Macro-By-Example transcription. On the other hand, if\n  *  `src` contains no `tt_seq`s and `tt_nonterminal`s, `interp` can (and\n  *  should) be none. */\n-pub fn new_tt_reader(sp_diag: @span_handler,\n+pub fn new_tt_reader(sp_diag: @mut span_handler,\n                      interp: Option<HashMap<ident,@named_match>>,\n                      src: ~[ast::token_tree])\n                   -> @mut TtReader {"}, {"sha": "9a9164f510210376cc2a9fcfe0497e213e49c41a", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=96254b4090a86767d1a3b387158464ece44160fa", "patch": "@@ -267,7 +267,7 @@ fn read_block_comment(rdr: @mut StringReader,\n         while level > 0 {\n             debug!(\"=== block comment level %d\", level);\n             if is_eof(rdr) {\n-                (rdr as @reader).fatal(~\"unterminated block comment\");\n+                (rdr as @mut reader).fatal(~\"unterminated block comment\");\n             }\n             if rdr.curr == '\\n' {\n                 trim_whitespace_prefix_and_push_line(&mut lines, curr_line,\n@@ -334,7 +334,7 @@ pub struct lit {\n // it appears this function is called only from pprust... that's\n // probably not a good thing.\n pub fn gather_comments_and_literals(span_diagnostic:\n-                                    @diagnostic::span_handler,\n+                                    @mut diagnostic::span_handler,\n                                     path: @str,\n                                     srdr: @io::Reader)\n                                  -> (~[cmnt], ~[lit]) {"}, {"sha": "d0041021f7cc77158a8e1fa130a1c8bf4a361e75", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=96254b4090a86767d1a3b387158464ece44160fa", "patch": "@@ -28,9 +28,9 @@ pub trait reader {\n     fn is_eof(@mut self) -> bool;\n     fn next_token(@mut self) -> TokenAndSpan;\n     fn fatal(@mut self, ~str) -> !;\n-    fn span_diag(@mut self) -> @span_handler;\n+    fn span_diag(@mut self) -> @mut span_handler;\n     fn peek(@mut self) -> TokenAndSpan;\n-    fn dup(@mut self) -> @reader;\n+    fn dup(@mut self) -> @mut reader;\n }\n \n #[deriving(Clone, Eq)]\n@@ -40,7 +40,7 @@ pub struct TokenAndSpan {\n }\n \n pub struct StringReader {\n-    span_diagnostic: @span_handler,\n+    span_diagnostic: @mut span_handler,\n     src: @str,\n     // The absolute offset within the codemap of the next character to read\n     pos: BytePos,\n@@ -56,7 +56,7 @@ pub struct StringReader {\n     peek_span: span\n }\n \n-pub fn new_string_reader(span_diagnostic: @span_handler,\n+pub fn new_string_reader(span_diagnostic: @mut span_handler,\n                          filemap: @codemap::FileMap)\n                       -> @mut StringReader {\n     let r = new_low_level_string_reader(span_diagnostic, filemap);\n@@ -65,13 +65,14 @@ pub fn new_string_reader(span_diagnostic: @span_handler,\n }\n \n /* For comments.rs, which hackily pokes into 'pos' and 'curr' */\n-pub fn new_low_level_string_reader(span_diagnostic: @span_handler,\n+pub fn new_low_level_string_reader(span_diagnostic: @mut span_handler,\n                                    filemap: @codemap::FileMap)\n                                 -> @mut StringReader {\n     // Force the initial reader bump to start on a fresh line\n     let initial_char = '\\n';\n     let r = @mut StringReader {\n-        span_diagnostic: span_diagnostic, src: filemap.src,\n+        span_diagnostic: span_diagnostic,\n+        src: filemap.src,\n         pos: filemap.start_pos,\n         last_pos: filemap.start_pos,\n         col: CharPos(0),\n@@ -116,15 +117,15 @@ impl reader for StringReader {\n     fn fatal(@mut self, m: ~str) -> ! {\n         self.span_diagnostic.span_fatal(self.peek_span, m)\n     }\n-    fn span_diag(@mut self) -> @span_handler { self.span_diagnostic }\n+    fn span_diag(@mut self) -> @mut span_handler { self.span_diagnostic }\n     fn peek(@mut self) -> TokenAndSpan {\n         // XXX(pcwalton): Bad copy!\n         TokenAndSpan {\n             tok: self.peek_tok.clone(),\n             sp: self.peek_span,\n         }\n     }\n-    fn dup(@mut self) -> @reader { dup_string_reader(self) as @reader }\n+    fn dup(@mut self) -> @mut reader { dup_string_reader(self) as @mut reader }\n }\n \n impl reader for TtReader {\n@@ -137,14 +138,14 @@ impl reader for TtReader {\n     fn fatal(@mut self, m: ~str) -> ! {\n         self.sp_diag.span_fatal(self.cur_span, m);\n     }\n-    fn span_diag(@mut self) -> @span_handler { self.sp_diag }\n+    fn span_diag(@mut self) -> @mut span_handler { self.sp_diag }\n     fn peek(@mut self) -> TokenAndSpan {\n         TokenAndSpan {\n             tok: self.cur_tok.clone(),\n             sp: self.cur_span,\n         }\n     }\n-    fn dup(@mut self) -> @reader { dup_tt_reader(self) as @reader }\n+    fn dup(@mut self) -> @mut reader { dup_tt_reader(self) as @mut reader }\n }\n \n // EFFECT: advance peek_tok and peek_span to refer to the next token."}, {"sha": "23c6a8b97208b014aa3f782fa96d2a7ec61a6980", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=96254b4090a86767d1a3b387158464ece44160fa", "patch": "@@ -43,7 +43,7 @@ pub mod obsolete;\n pub struct ParseSess {\n     cm: @codemap::CodeMap, // better be the same as the one in the reader!\n     next_id: NodeId,\n-    span_diagnostic: @span_handler, // better be the same as the one in the reader!\n+    span_diagnostic: @mut span_handler, // better be the same as the one in the reader!\n     /// Used to determine and report recursive mod inclusions\n     included_mod_stack: ~[Path],\n }\n@@ -58,7 +58,7 @@ pub fn new_parse_sess(demitter: Option<Emitter>) -> @mut ParseSess {\n     }\n }\n \n-pub fn new_parse_sess_special_handler(sh: @span_handler,\n+pub fn new_parse_sess_special_handler(sh: @mut span_handler,\n                                       cm: @codemap::CodeMap)\n                                    -> @mut ParseSess {\n     @mut ParseSess {\n@@ -306,7 +306,7 @@ pub fn filemap_to_tts(sess: @mut ParseSess, filemap: @FileMap)\n     // parsing tt's probably shouldn't require a parser at all.\n     let cfg = ~[];\n     let srdr = lexer::new_string_reader(sess.span_diagnostic, filemap);\n-    let p1 = Parser(sess, cfg, srdr as @reader);\n+    let p1 = Parser(sess, cfg, srdr as @mut reader);\n     p1.parse_all_token_trees()\n }\n \n@@ -315,7 +315,7 @@ pub fn tts_to_parser(sess: @mut ParseSess,\n                      tts: ~[ast::token_tree],\n                      cfg: ast::CrateConfig) -> Parser {\n     let trdr = lexer::new_tt_reader(sess.span_diagnostic, None, tts);\n-    Parser(sess, cfg, trdr as @reader)\n+    Parser(sess, cfg, trdr as @mut reader)\n }\n \n // abort if necessary"}, {"sha": "557249f1f664f8f459efee3f12553d62f3813b1b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=96254b4090a86767d1a3b387158464ece44160fa", "patch": "@@ -265,7 +265,7 @@ struct ParsedItemsAndViewItems {\n \n pub fn Parser(sess: @mut ParseSess,\n               cfg: ast::CrateConfig,\n-              rdr: @reader)\n+              rdr: @mut reader)\n            -> Parser {\n     let tok0 = rdr.next_token();\n     let interner = get_ident_interner();\n@@ -315,7 +315,7 @@ pub struct Parser {\n     tokens_consumed: @mut uint,\n     restriction: @mut restriction,\n     quote_depth: @mut uint, // not (yet) related to the quasiquoter\n-    reader: @reader,\n+    reader: @mut reader,\n     interner: @token::ident_interner,\n     /// The set of seen errors about obsolete syntax. Used to suppress\n     /// extra detail when the same error is seen twice"}, {"sha": "6a3d829aca0b037d8231ef90cc04e2dac0066220", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=96254b4090a86767d1a3b387158464ece44160fa", "patch": "@@ -104,7 +104,7 @@ pub static default_columns: uint = 78u;\n // copy forward.\n pub fn print_crate(cm: @CodeMap,\n                    intr: @ident_interner,\n-                   span_diagnostic: @diagnostic::span_handler,\n+                   span_diagnostic: @mut diagnostic::span_handler,\n                    crate: &ast::Crate,\n                    filename: @str,\n                    input: @io::Reader,"}, {"sha": "c3a5ba7116d9197cd9a207aded1c286829e045cd", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96254b4090a86767d1a3b387158464ece44160fa/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=96254b4090a86767d1a3b387158464ece44160fa", "patch": "@@ -88,11 +88,11 @@ pub trait Visitor<E> {\n     fn visit_struct_field(@mut self, @struct_field, E);\n }\n \n-pub fn visit_crate<E:Clone>(visitor: @Visitor<E>, crate: &Crate, env: E) {\n+pub fn visit_crate<E:Clone>(visitor: @mut Visitor<E>, crate: &Crate, env: E) {\n     visitor.visit_mod(&crate.module, crate.span, CRATE_NODE_ID, env)\n }\n \n-pub fn visit_mod<E:Clone>(visitor: @Visitor<E>, module: &_mod, env: E) {\n+pub fn visit_mod<E:Clone>(visitor: @mut Visitor<E>, module: &_mod, env: E) {\n     for view_item in module.view_items.iter() {\n         visitor.visit_view_item(view_item, env.clone())\n     }\n@@ -101,11 +101,11 @@ pub fn visit_mod<E:Clone>(visitor: @Visitor<E>, module: &_mod, env: E) {\n     }\n }\n \n-pub fn visit_view_item<E:Clone>(_: @Visitor<E>, _: &view_item, _: E) {\n+pub fn visit_view_item<E:Clone>(_: @mut Visitor<E>, _: &view_item, _: E) {\n     // Empty!\n }\n \n-pub fn visit_local<E:Clone>(visitor: @Visitor<E>, local: &Local, env: E) {\n+pub fn visit_local<E:Clone>(visitor: @mut Visitor<E>, local: &Local, env: E) {\n     visitor.visit_pat(local.pat, env.clone());\n     visitor.visit_ty(&local.ty, env.clone());\n     match local.init {\n@@ -114,13 +114,13 @@ pub fn visit_local<E:Clone>(visitor: @Visitor<E>, local: &Local, env: E) {\n     }\n }\n \n-fn visit_trait_ref<E:Clone>(visitor: @Visitor<E>,\n+fn visit_trait_ref<E:Clone>(visitor: @mut Visitor<E>,\n                             trait_ref: &ast::trait_ref,\n                             env: E) {\n     visit_path(visitor, &trait_ref.path, env)\n }\n \n-pub fn visit_item<E:Clone>(visitor: @Visitor<E>, item: &item, env: E) {\n+pub fn visit_item<E:Clone>(visitor: @mut Visitor<E>, item: &item, env: E) {\n     match item.node {\n         item_static(ref typ, _, expr) => {\n             visitor.visit_ty(typ, env.clone());\n@@ -187,7 +187,7 @@ pub fn visit_item<E:Clone>(visitor: @Visitor<E>, item: &item, env: E) {\n     }\n }\n \n-pub fn visit_enum_def<E:Clone>(visitor: @Visitor<E>,\n+pub fn visit_enum_def<E:Clone>(visitor: @mut Visitor<E>,\n                                enum_definition: &ast::enum_def,\n                                generics: &Generics,\n                                env: E) {\n@@ -209,11 +209,11 @@ pub fn visit_enum_def<E:Clone>(visitor: @Visitor<E>,\n     }\n }\n \n-pub fn skip_ty<E>(_: @Visitor<E>, _: &Ty, _: E) {\n+pub fn skip_ty<E>(_: @mut Visitor<E>, _: &Ty, _: E) {\n     // Empty!\n }\n \n-pub fn visit_ty<E:Clone>(visitor: @Visitor<E>, typ: &Ty, env: E) {\n+pub fn visit_ty<E:Clone>(visitor: @mut Visitor<E>, typ: &Ty, env: E) {\n     match typ.node {\n         ty_box(ref mutable_type) | ty_uniq(ref mutable_type) |\n         ty_vec(ref mutable_type) | ty_ptr(ref mutable_type) |\n@@ -254,13 +254,13 @@ pub fn visit_ty<E:Clone>(visitor: @Visitor<E>, typ: &Ty, env: E) {\n     }\n }\n \n-pub fn visit_path<E:Clone>(visitor: @Visitor<E>, path: &Path, env: E) {\n+pub fn visit_path<E:Clone>(visitor: @mut Visitor<E>, path: &Path, env: E) {\n     for typ in path.types.iter() {\n         visitor.visit_ty(typ, env.clone())\n     }\n }\n \n-pub fn visit_pat<E:Clone>(visitor: @Visitor<E>, pattern: &pat, env: E) {\n+pub fn visit_pat<E:Clone>(visitor: @mut Visitor<E>, pattern: &pat, env: E) {\n     match pattern.node {\n         pat_enum(ref path, ref children) => {\n             visit_path(visitor, path, env.clone());\n@@ -313,7 +313,7 @@ pub fn visit_pat<E:Clone>(visitor: @Visitor<E>, pattern: &pat, env: E) {\n     }\n }\n \n-pub fn visit_foreign_item<E:Clone>(visitor: @Visitor<E>,\n+pub fn visit_foreign_item<E:Clone>(visitor: @mut Visitor<E>,\n                                    foreign_item: &foreign_item,\n                                    env: E) {\n     match foreign_item.node {\n@@ -325,7 +325,7 @@ pub fn visit_foreign_item<E:Clone>(visitor: @Visitor<E>,\n     }\n }\n \n-pub fn visit_ty_param_bounds<E:Clone>(visitor: @Visitor<E>,\n+pub fn visit_ty_param_bounds<E:Clone>(visitor: @mut Visitor<E>,\n                                       bounds: &OptVec<TyParamBound>,\n                                       env: E) {\n     for bound in bounds.iter() {\n@@ -338,15 +338,15 @@ pub fn visit_ty_param_bounds<E:Clone>(visitor: @Visitor<E>,\n     }\n }\n \n-pub fn visit_generics<E:Clone>(visitor: @Visitor<E>,\n+pub fn visit_generics<E:Clone>(visitor: @mut Visitor<E>,\n                                generics: &Generics,\n                                env: E) {\n     for type_parameter in generics.ty_params.iter() {\n         visit_ty_param_bounds(visitor, &type_parameter.bounds, env.clone())\n     }\n }\n \n-pub fn visit_fn_decl<E:Clone>(visitor: @Visitor<E>,\n+pub fn visit_fn_decl<E:Clone>(visitor: @mut Visitor<E>,\n                               function_declaration: &fn_decl,\n                               env: E) {\n     for argument in function_declaration.inputs.iter() {\n@@ -360,7 +360,7 @@ pub fn visit_fn_decl<E:Clone>(visitor: @Visitor<E>,\n // visit_fn() and check for fk_method().  I named this visit_method_helper()\n // because it is not a default impl of any method, though I doubt that really\n // clarifies anything. - Niko\n-pub fn visit_method_helper<E:Clone>(visitor: @Visitor<E>,\n+pub fn visit_method_helper<E:Clone>(visitor: @mut Visitor<E>,\n                                     method: &method,\n                                     env: E) {\n     visitor.visit_fn(&fk_method(method.ident, &method.generics, method),\n@@ -371,7 +371,7 @@ pub fn visit_method_helper<E:Clone>(visitor: @Visitor<E>,\n                      env)\n }\n \n-pub fn visit_fn<E:Clone>(visitor: @Visitor<E>,\n+pub fn visit_fn<E:Clone>(visitor: @mut Visitor<E>,\n                          function_kind: &fn_kind,\n                          function_declaration: &fn_decl,\n                          function_body: &Block,\n@@ -384,7 +384,7 @@ pub fn visit_fn<E:Clone>(visitor: @Visitor<E>,\n     visitor.visit_block(function_body, env)\n }\n \n-pub fn visit_ty_method<E:Clone>(visitor: @Visitor<E>,\n+pub fn visit_ty_method<E:Clone>(visitor: @mut Visitor<E>,\n                                 method_type: &TypeMethod,\n                                 env: E) {\n     for argument_type in method_type.decl.inputs.iter() {\n@@ -394,7 +394,7 @@ pub fn visit_ty_method<E:Clone>(visitor: @Visitor<E>,\n     visitor.visit_ty(&method_type.decl.output, env.clone())\n }\n \n-pub fn visit_trait_method<E:Clone>(visitor: @Visitor<E>,\n+pub fn visit_trait_method<E:Clone>(visitor: @mut Visitor<E>,\n                                    trait_method: &trait_method,\n                                    env: E) {\n     match *trait_method {\n@@ -405,7 +405,7 @@ pub fn visit_trait_method<E:Clone>(visitor: @Visitor<E>,\n     }\n }\n \n-pub fn visit_struct_def<E:Clone>(visitor: @Visitor<E>,\n+pub fn visit_struct_def<E:Clone>(visitor: @mut Visitor<E>,\n                                  struct_definition: @struct_def,\n                                  _: ast::ident,\n                                  _: &Generics,\n@@ -416,13 +416,13 @@ pub fn visit_struct_def<E:Clone>(visitor: @Visitor<E>,\n     }\n }\n \n-pub fn visit_struct_field<E:Clone>(visitor: @Visitor<E>,\n+pub fn visit_struct_field<E:Clone>(visitor: @mut Visitor<E>,\n                                    struct_field: &struct_field,\n                                    env: E) {\n     visitor.visit_ty(&struct_field.node.ty, env)\n }\n \n-pub fn visit_block<E:Clone>(visitor: @Visitor<E>, block: &Block, env: E) {\n+pub fn visit_block<E:Clone>(visitor: @mut Visitor<E>, block: &Block, env: E) {\n     for view_item in block.view_items.iter() {\n         visitor.visit_view_item(view_item, env.clone())\n     }\n@@ -432,7 +432,7 @@ pub fn visit_block<E:Clone>(visitor: @Visitor<E>, block: &Block, env: E) {\n     visit_expr_opt(visitor, block.expr, env)\n }\n \n-pub fn visit_stmt<E>(visitor: @Visitor<E>, statement: &stmt, env: E) {\n+pub fn visit_stmt<E>(visitor: @mut Visitor<E>, statement: &stmt, env: E) {\n     match statement.node {\n         stmt_decl(declaration, _) => visitor.visit_decl(declaration, env),\n         stmt_expr(expression, _) | stmt_semi(expression, _) => {\n@@ -442,14 +442,14 @@ pub fn visit_stmt<E>(visitor: @Visitor<E>, statement: &stmt, env: E) {\n     }\n }\n \n-pub fn visit_decl<E:Clone>(visitor: @Visitor<E>, declaration: &decl, env: E) {\n+pub fn visit_decl<E:Clone>(visitor: @mut Visitor<E>, declaration: &decl, env: E) {\n     match declaration.node {\n         decl_local(ref local) => visitor.visit_local(*local, env),\n         decl_item(item) => visitor.visit_item(item, env),\n     }\n }\n \n-pub fn visit_expr_opt<E>(visitor: @Visitor<E>,\n+pub fn visit_expr_opt<E>(visitor: @mut Visitor<E>,\n                          optional_expression: Option<@expr>,\n                          env: E) {\n     match optional_expression {\n@@ -458,19 +458,19 @@ pub fn visit_expr_opt<E>(visitor: @Visitor<E>,\n     }\n }\n \n-pub fn visit_exprs<E:Clone>(visitor: @Visitor<E>,\n+pub fn visit_exprs<E:Clone>(visitor: @mut Visitor<E>,\n                             expressions: &[@expr],\n                             env: E) {\n     for expression in expressions.iter() {\n         visitor.visit_expr(*expression, env.clone())\n     }\n }\n \n-pub fn visit_mac<E>(_: @Visitor<E>, _: &mac, _: E) {\n+pub fn visit_mac<E>(_: @mut Visitor<E>, _: &mac, _: E) {\n     // Empty!\n }\n \n-pub fn visit_expr<E:Clone>(visitor: @Visitor<E>, expression: @expr, env: E) {\n+pub fn visit_expr<E:Clone>(visitor: @mut Visitor<E>, expression: @expr, env: E) {\n     match expression.node {\n         expr_vstore(subexpression, _) => {\n             visitor.visit_expr(subexpression, env.clone())\n@@ -595,7 +595,7 @@ pub fn visit_expr<E:Clone>(visitor: @Visitor<E>, expression: @expr, env: E) {\n     visitor.visit_expr_post(expression, env.clone())\n }\n \n-pub fn visit_arm<E:Clone>(visitor: @Visitor<E>, arm: &arm, env: E) {\n+pub fn visit_arm<E:Clone>(visitor: @mut Visitor<E>, arm: &arm, env: E) {\n     for pattern in arm.pats.iter() {\n         visitor.visit_pat(*pattern, env.clone())\n     }\n@@ -630,7 +630,7 @@ pub trait SimpleVisitor {\n }\n \n pub struct SimpleVisitorVisitor {\n-    simple_visitor: @SimpleVisitor,\n+    simple_visitor: @mut SimpleVisitor,\n }\n \n impl Visitor<()> for SimpleVisitorVisitor {\n@@ -640,58 +640,58 @@ impl Visitor<()> for SimpleVisitorVisitor {\n                  node_id: NodeId,\n                  env: ()) {\n         self.simple_visitor.visit_mod(module, span, node_id);\n-        visit_mod(self as @Visitor<()>, module, env)\n+        visit_mod(self as @mut Visitor<()>, module, env)\n     }\n     fn visit_view_item(@mut self, view_item: &view_item, env: ()) {\n         self.simple_visitor.visit_view_item(view_item);\n-        visit_view_item(self as @Visitor<()>, view_item, env)\n+        visit_view_item(self as @mut Visitor<()>, view_item, env)\n     }\n     fn visit_foreign_item(@mut self, foreign_item: @foreign_item, env: ()) {\n         self.simple_visitor.visit_foreign_item(foreign_item);\n-        visit_foreign_item(self as @Visitor<()>, foreign_item, env)\n+        visit_foreign_item(self as @mut Visitor<()>, foreign_item, env)\n     }\n     fn visit_item(@mut self, item: @item, env: ()) {\n         self.simple_visitor.visit_item(item);\n-        visit_item(self as @Visitor<()>, item, env)\n+        visit_item(self as @mut Visitor<()>, item, env)\n     }\n     fn visit_local(@mut self, local: @Local, env: ()) {\n         self.simple_visitor.visit_local(local);\n-        visit_local(self as @Visitor<()>, local, env)\n+        visit_local(self as @mut Visitor<()>, local, env)\n     }\n     fn visit_block(@mut self, block: &Block, env: ()) {\n         self.simple_visitor.visit_block(block);\n-        visit_block(self as @Visitor<()>, block, env)\n+        visit_block(self as @mut Visitor<()>, block, env)\n     }\n     fn visit_stmt(@mut self, statement: @stmt, env: ()) {\n         self.simple_visitor.visit_stmt(statement);\n-        visit_stmt(self as @Visitor<()>, statement, env)\n+        visit_stmt(self as @mut Visitor<()>, statement, env)\n     }\n     fn visit_arm(@mut self, arm: &arm, env: ()) {\n         self.simple_visitor.visit_arm(arm);\n-        visit_arm(self as @Visitor<()>, arm, env)\n+        visit_arm(self as @mut Visitor<()>, arm, env)\n     }\n     fn visit_pat(@mut self, pattern: @pat, env: ()) {\n         self.simple_visitor.visit_pat(pattern);\n-        visit_pat(self as @Visitor<()>, pattern, env)\n+        visit_pat(self as @mut Visitor<()>, pattern, env)\n     }\n     fn visit_decl(@mut self, declaration: @decl, env: ()) {\n         self.simple_visitor.visit_decl(declaration);\n-        visit_decl(self as @Visitor<()>, declaration, env)\n+        visit_decl(self as @mut Visitor<()>, declaration, env)\n     }\n     fn visit_expr(@mut self, expression: @expr, env: ()) {\n         self.simple_visitor.visit_expr(expression);\n-        visit_expr(self as @Visitor<()>, expression, env)\n+        visit_expr(self as @mut Visitor<()>, expression, env)\n     }\n     fn visit_expr_post(@mut self, expression: @expr, _: ()) {\n         self.simple_visitor.visit_expr_post(expression)\n     }\n     fn visit_ty(@mut self, typ: &Ty, env: ()) {\n         self.simple_visitor.visit_ty(typ);\n-        visit_ty(self as @Visitor<()>, typ, env)\n+        visit_ty(self as @mut Visitor<()>, typ, env)\n     }\n     fn visit_generics(@mut self, generics: &Generics, env: ()) {\n         self.simple_visitor.visit_generics(generics);\n-        visit_generics(self as @Visitor<()>, generics, env)\n+        visit_generics(self as @mut Visitor<()>, generics, env)\n     }\n     fn visit_fn(@mut self,\n                 function_kind: &fn_kind,\n@@ -705,7 +705,7 @@ impl Visitor<()> for SimpleVisitorVisitor {\n                                      block,\n                                      span,\n                                      node_id);\n-        visit_fn(self as @Visitor<()>,\n+        visit_fn(self as @mut Visitor<()>,\n                  function_kind,\n                  function_declaration,\n                  block,\n@@ -715,11 +715,11 @@ impl Visitor<()> for SimpleVisitorVisitor {\n     }\n     fn visit_ty_method(@mut self, method_type: &TypeMethod, env: ()) {\n         self.simple_visitor.visit_ty_method(method_type);\n-        visit_ty_method(self as @Visitor<()>, method_type, env)\n+        visit_ty_method(self as @mut Visitor<()>, method_type, env)\n     }\n     fn visit_trait_method(@mut self, trait_method: &trait_method, env: ()) {\n         self.simple_visitor.visit_trait_method(trait_method);\n-        visit_trait_method(self as @Visitor<()>, trait_method, env)\n+        visit_trait_method(self as @mut Visitor<()>, trait_method, env)\n     }\n     fn visit_struct_def(@mut self,\n                         struct_definition: @struct_def,\n@@ -731,7 +731,7 @@ impl Visitor<()> for SimpleVisitorVisitor {\n                                              identifier,\n                                              generics,\n                                              node_id);\n-        visit_struct_def(self as @Visitor<()>,\n+        visit_struct_def(self as @mut Visitor<()>,\n                          struct_definition,\n                          identifier,\n                          generics,\n@@ -740,7 +740,7 @@ impl Visitor<()> for SimpleVisitorVisitor {\n     }\n     fn visit_struct_field(@mut self, struct_field: @struct_field, env: ()) {\n         self.simple_visitor.visit_struct_field(struct_field);\n-        visit_struct_field(self as @Visitor<()>, struct_field, env)\n+        visit_struct_field(self as @mut Visitor<()>, struct_field, env)\n     }\n }\n "}]}