{"sha": "d2f398cd76659425c9d48185a1be92ee9a9332c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyZjM5OGNkNzY2NTk0MjVjOWQ0ODE4NWExYmU5MmVlOWE5MzMyYzI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-24T17:51:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-24T17:51:46Z"}, "message": "Merge #6624\n\n6624: Check structs for match exhaustiveness r=Veykril a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "d0f3f77261cf35f0ee7f1d3b0dce8ebd13f93191", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0f3f77261cf35f0ee7f1d3b0dce8ebd13f93191"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2f398cd76659425c9d48185a1be92ee9a9332c2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfvUgyCRBK7hj4Ov3rIwAAdHIIAAo3jGIQcp36kWPkIEY6I0Lk\n4k4QcHktTAlRnp3tQ7R1nUr/RiPqE9s9tZZXDcq2HM0OQXcdeGmQwbxHFPZGXaIP\n1iGkqK7K2+KotW6MeV6f474NXZBmUumUlu5ZRVdaHGJsarTT46SwqP6/E88B9MS3\njAyr1+7gXcmB2I4G03TGXj2kwNaBEFqBDNkAF0Q3jEDCpiHbgIDpLI5r6NLQG51F\nU9hu3jQ8+vRWGDC8vcQlY6i1SKNwM1HZrvRPNCPZycvSSxAflbHCLWUj43Bex8Xy\n4Gm16vr2otNxAVrhZ4TyZWXesImR3IWBxzhOnxEOc9xn5Txck4sRt3jrgVStfOs=\n=YXBW\n-----END PGP SIGNATURE-----\n", "payload": "tree d0f3f77261cf35f0ee7f1d3b0dce8ebd13f93191\nparent b769f5da6e51d1da2c981f00c48fb2585f933138\nparent 377fa7db3f1664dcc46213402b4fb7bd98923475\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1606240306 +0000\ncommitter GitHub <noreply@github.com> 1606240306 +0000\n\nMerge #6624\n\n6624: Check structs for match exhaustiveness r=Veykril a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2f398cd76659425c9d48185a1be92ee9a9332c2", "html_url": "https://github.com/rust-lang/rust/commit/d2f398cd76659425c9d48185a1be92ee9a9332c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2f398cd76659425c9d48185a1be92ee9a9332c2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b769f5da6e51d1da2c981f00c48fb2585f933138", "url": "https://api.github.com/repos/rust-lang/rust/commits/b769f5da6e51d1da2c981f00c48fb2585f933138", "html_url": "https://github.com/rust-lang/rust/commit/b769f5da6e51d1da2c981f00c48fb2585f933138"}, {"sha": "377fa7db3f1664dcc46213402b4fb7bd98923475", "url": "https://api.github.com/repos/rust-lang/rust/commits/377fa7db3f1664dcc46213402b4fb7bd98923475", "html_url": "https://github.com/rust-lang/rust/commit/377fa7db3f1664dcc46213402b4fb7bd98923475"}], "stats": {"total": 151, "additions": 120, "deletions": 31}, "files": [{"sha": "62c329731d4802ad0ed7e0009c125f578e8409c7", "filename": "crates/hir_ty/src/diagnostics/match_check.rs", "status": "modified", "additions": 120, "deletions": 31, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/d2f398cd76659425c9d48185a1be92ee9a9332c2/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2f398cd76659425c9d48185a1be92ee9a9332c2/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs?ref=d2f398cd76659425c9d48185a1be92ee9a9332c2", "patch": "@@ -223,7 +223,7 @@ use hir_def::{\n     adt::VariantData,\n     body::Body,\n     expr::{Expr, Literal, Pat, PatId},\n-    AdtId, EnumVariantId, VariantId,\n+    AdtId, EnumVariantId, StructId, VariantId,\n };\n use smallvec::{smallvec, SmallVec};\n \n@@ -391,21 +391,28 @@ impl PatStack {\n                 }\n             }\n             (Pat::Wild, constructor) => Some(self.expand_wildcard(cx, constructor)?),\n-            (Pat::Path(_), Constructor::Enum(constructor)) => {\n+            (Pat::Path(_), constructor) => {\n                 // unit enum variants become `Pat::Path`\n                 let pat_id = head.as_id().expect(\"we know this isn't a wild\");\n-                if !enum_variant_matches(cx, pat_id, *constructor) {\n+                let variant_id: VariantId = match constructor {\n+                    &Constructor::Enum(e) => e.into(),\n+                    &Constructor::Struct(s) => s.into(),\n+                    _ => return Err(MatchCheckErr::NotImplemented),\n+                };\n+                if Some(variant_id) != cx.infer.variant_resolution_for_pat(pat_id) {\n                     None\n                 } else {\n                     Some(self.to_tail())\n                 }\n             }\n-            (\n-                Pat::TupleStruct { args: ref pat_ids, ellipsis, .. },\n-                Constructor::Enum(enum_constructor),\n-            ) => {\n+            (Pat::TupleStruct { args: ref pat_ids, ellipsis, .. }, constructor) => {\n                 let pat_id = head.as_id().expect(\"we know this isn't a wild\");\n-                if !enum_variant_matches(cx, pat_id, *enum_constructor) {\n+                let variant_id: VariantId = match constructor {\n+                    &Constructor::Enum(e) => e.into(),\n+                    &Constructor::Struct(s) => s.into(),\n+                    _ => return Err(MatchCheckErr::MalformedMatchArm),\n+                };\n+                if Some(variant_id) != cx.infer.variant_resolution_for_pat(pat_id) {\n                     None\n                 } else {\n                     let constructor_arity = constructor.arity(cx)?;\n@@ -443,12 +450,22 @@ impl PatStack {\n                     }\n                 }\n             }\n-            (Pat::Record { args: ref arg_patterns, .. }, Constructor::Enum(e)) => {\n+            (Pat::Record { args: ref arg_patterns, .. }, constructor) => {\n                 let pat_id = head.as_id().expect(\"we know this isn't a wild\");\n-                if !enum_variant_matches(cx, pat_id, *e) {\n+                let (variant_id, variant_data) = match constructor {\n+                    &Constructor::Enum(e) => (\n+                        e.into(),\n+                        cx.db.enum_data(e.parent).variants[e.local_id].variant_data.clone(),\n+                    ),\n+                    &Constructor::Struct(s) => {\n+                        (s.into(), cx.db.struct_data(s).variant_data.clone())\n+                    }\n+                    _ => return Err(MatchCheckErr::MalformedMatchArm),\n+                };\n+                if Some(variant_id) != cx.infer.variant_resolution_for_pat(pat_id) {\n                     None\n                 } else {\n-                    match cx.db.enum_data(e.parent).variants[e.local_id].variant_data.as_ref() {\n+                    match variant_data.as_ref() {\n                         VariantData::Record(struct_field_arena) => {\n                             // Here we treat any missing fields in the record as the wild pattern, as\n                             // if the record has ellipsis. We want to do this here even if the\n@@ -727,6 +744,7 @@ enum Constructor {\n     Bool(bool),\n     Tuple { arity: usize },\n     Enum(EnumVariantId),\n+    Struct(StructId),\n }\n \n impl Constructor {\n@@ -741,6 +759,11 @@ impl Constructor {\n                     VariantData::Unit => 0,\n                 }\n             }\n+            &Constructor::Struct(s) => match cx.db.struct_data(s).variant_data.as_ref() {\n+                VariantData::Tuple(struct_field_data) => struct_field_data.len(),\n+                VariantData::Record(struct_field_data) => struct_field_data.len(),\n+                VariantData::Unit => 0,\n+            },\n         };\n \n         Ok(arity)\n@@ -749,7 +772,7 @@ impl Constructor {\n     fn all_constructors(&self, cx: &MatchCheckCtx) -> Vec<Constructor> {\n         match self {\n             Constructor::Bool(_) => vec![Constructor::Bool(true), Constructor::Bool(false)],\n-            Constructor::Tuple { .. } => vec![*self],\n+            Constructor::Tuple { .. } | Constructor::Struct(_) => vec![*self],\n             Constructor::Enum(e) => cx\n                 .db\n                 .enum_data(e.parent)\n@@ -786,6 +809,7 @@ fn pat_constructor(cx: &MatchCheckCtx, pat: PatIdOrWild) -> MatchCheckResult<Opt\n                 VariantId::EnumVariantId(enum_variant_id) => {\n                     Some(Constructor::Enum(enum_variant_id))\n                 }\n+                VariantId::StructId(struct_id) => Some(Constructor::Struct(struct_id)),\n                 _ => return Err(MatchCheckErr::NotImplemented),\n             }\n         }\n@@ -830,13 +854,13 @@ fn all_constructors_covered(\n \n             false\n         }),\n+        &Constructor::Struct(s) => used_constructors.iter().any(|constructor| match constructor {\n+            &Constructor::Struct(sid) => sid == s,\n+            _ => false,\n+        }),\n     }\n }\n \n-fn enum_variant_matches(cx: &MatchCheckCtx, pat_id: PatId, enum_variant_id: EnumVariantId) -> bool {\n-    Some(enum_variant_id.into()) == cx.infer.variant_resolution_for_pat(pat_id)\n-}\n-\n #[cfg(test)]\n mod tests {\n     use crate::diagnostics::tests::check_diagnostics;\n@@ -848,8 +872,8 @@ mod tests {\n fn main() {\n     match () { }\n         //^^ Missing match arm\n-   match (()) { }\n-       //^^^^ Missing match arm\n+    match (()) { }\n+        //^^^^ Missing match arm\n \n     match () { _ => (), }\n     match () { () => (), }\n@@ -1393,6 +1417,84 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn record_struct() {\n+        check_diagnostics(\n+            r#\"struct Foo { a: bool }\n+fn main(f: Foo) {\n+    match f {}\n+        //^ Missing match arm\n+    match f { Foo { a: true } => () }\n+        //^ Missing match arm\n+    match &f { Foo { a: true } => () }\n+        //^^ Missing match arm\n+    match f { Foo { a: _ } => () }\n+    match f {\n+        Foo { a: true } => (),\n+        Foo { a: false } => (),\n+    }\n+    match &f {\n+        Foo { a: true } => (),\n+        Foo { a: false } => (),\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn tuple_struct() {\n+        check_diagnostics(\n+            r#\"struct Foo(bool);\n+fn main(f: Foo) {\n+    match f {}\n+        //^ Missing match arm\n+    match f { Foo(true) => () }\n+        //^ Missing match arm\n+    match f {\n+        Foo(true) => (),\n+        Foo(false) => (),\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn unit_struct() {\n+        check_diagnostics(\n+            r#\"struct Foo;\n+fn main(f: Foo) {\n+    match f {}\n+        //^ Missing match arm\n+    match f { Foo => () }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn record_struct_ellipsis() {\n+        check_diagnostics(\n+            r#\"struct Foo { foo: bool, bar: bool }\n+fn main(f: Foo) {\n+    match f { Foo { foo: true, .. } => () }\n+        //^ Missing match arm\n+    match f {\n+        //^ Missing match arm\n+        Foo { foo: true, .. } => (),\n+        Foo { bar: false, .. } => ()\n+    }\n+    match f { Foo { .. } => () }\n+    match f {\n+        Foo { foo: true, .. } => (),\n+        Foo { foo: false, .. } => ()\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     mod false_negatives {\n         //! The implementation of match checking here is a work in progress. As we roll this out, we\n         //! prefer false negatives to false positives (ideally there would be no false positives). This\n@@ -1431,19 +1533,6 @@ fn main() {\n         Either::A(true | false) => (),\n     }\n }\n-\"#,\n-            );\n-        }\n-\n-        #[test]\n-        fn struct_missing_arm() {\n-            // We don't currently handle structs.\n-            check_diagnostics(\n-                r#\"\n-struct Foo { a: bool }\n-fn main(f: Foo) {\n-    match f { Foo { a: true } => () }\n-}\n \"#,\n             );\n         }"}]}