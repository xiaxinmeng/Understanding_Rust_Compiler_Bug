{"sha": "c99090761c71b7c1c59ce889df5f1b4f78376538", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5OTA5MDc2MWM3MWI3YzFjNTljZTg4OWRmNWYxYjRmNzgzNzY1Mzg=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-04-11T07:22:02Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-05-22T08:52:30Z"}, "message": "rustc_metadata: parametrize schema::CrateRoot by 'tcx.", "tree": {"sha": "3ea19f57df2cae3d1c1f268fbebcf85ba58bf8de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ea19f57df2cae3d1c1f268fbebcf85ba58bf8de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c99090761c71b7c1c59ce889df5f1b4f78376538", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c99090761c71b7c1c59ce889df5f1b4f78376538", "html_url": "https://github.com/rust-lang/rust/commit/c99090761c71b7c1c59ce889df5f1b4f78376538", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c99090761c71b7c1c59ce889df5f1b4f78376538/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cc822c261f5c94a41eb725755fdda7ca6efbda2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cc822c261f5c94a41eb725755fdda7ca6efbda2", "html_url": "https://github.com/rust-lang/rust/commit/1cc822c261f5c94a41eb725755fdda7ca6efbda2"}], "stats": {"total": 82, "additions": 36, "deletions": 46}, "files": [{"sha": "991bebc647d0f7ca48822c1af358f2010ba1c2e7", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c99090761c71b7c1c59ce889df5f1b4f78376538/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c99090761c71b7c1c59ce889df5f1b4f78376538/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=c99090761c71b7c1c59ce889df5f1b4f78376538", "patch": "@@ -162,7 +162,7 @@ impl<'a> CrateLoader<'a> {\n \n     fn verify_no_symbol_conflicts(&self,\n                                   span: Span,\n-                                  root: &CrateRoot) {\n+                                  root: &CrateRoot<'_>) {\n         // Check for (potential) conflicts with the local crate\n         if self.local_crate_name == root.name &&\n            self.sess.local_crate_disambiguator() == root.disambiguator {\n@@ -476,7 +476,7 @@ impl<'a> CrateLoader<'a> {\n     // Go through the crate metadata and load any crates that it references\n     fn resolve_crate_deps(&mut self,\n                           root: &Option<CratePaths>,\n-                          crate_root: &CrateRoot,\n+                          crate_root: &CrateRoot<'_>,\n                           metadata: &MetadataBlob,\n                           krate: CrateNum,\n                           span: Span,\n@@ -582,7 +582,7 @@ impl<'a> CrateLoader<'a> {\n     /// implemented as dynamic libraries, but we have a possible future where\n     /// custom derive (and other macro-1.1 style features) are implemented via\n     /// executables and custom IPC.\n-    fn load_derive_macros(&mut self, root: &CrateRoot, dylib: Option<PathBuf>, span: Span)\n+    fn load_derive_macros(&mut self, root: &CrateRoot<'_>, dylib: Option<PathBuf>, span: Span)\n                           -> Vec<(ast::Name, Lrc<SyntaxExtension>)> {\n         use std::{env, mem};\n         use crate::dynamic_lib::DynamicLibrary;"}, {"sha": "5d8fabc7e69aeac1d01c3fc74c311948d3d2078a", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c99090761c71b7c1c59ce889df5f1b4f78376538/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c99090761c71b7c1c59ce889df5f1b4f78376538/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=c99090761c71b7c1c59ce889df5f1b4f78376538", "patch": "@@ -64,7 +64,11 @@ pub struct CrateMetadata {\n     /// Used for decoding interpret::AllocIds in a cached & thread-safe manner.\n     pub alloc_decoding_state: AllocDecodingState,\n \n-    pub root: schema::CrateRoot,\n+    // NOTE(eddyb) we pass `'static` to a `'tcx` parameter because this\n+    // lifetime is only used behind `Lazy` / `LazySeq`, and therefore\n+    // acts like an universal (`for<'tcx>`), that is paired up with\n+    // whichever `TyCtxt` is being used to decode those values.\n+    pub root: schema::CrateRoot<'static>,\n \n     /// For each public item in this crate, we encode a key. When the\n     /// crate is loaded, we read all the keys and put them in this"}, {"sha": "49f93c4014dc06ad40724f724d9372bb346820dc", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c99090761c71b7c1c59ce889df5f1b4f78376538/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c99090761c71b7c1c59ce889df5f1b4f78376538/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=c99090761c71b7c1c59ce889df5f1b4f78376538", "patch": "@@ -246,12 +246,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n \n     used_crate_source => { Lrc::new(cdata.source.clone()) }\n \n-    exported_symbols => {\n-        let cnum = cdata.cnum;\n-        assert!(cnum != LOCAL_CRATE);\n-\n-        Arc::new(cdata.exported_symbols(tcx))\n-    }\n+    exported_symbols => { Arc::new(cdata.exported_symbols(tcx)) }\n }\n \n pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {"}, {"sha": "cf21e9bd920140ad4e080bd4387ebfb1f5db4a15", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c99090761c71b7c1c59ce889df5f1b4f78376538/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c99090761c71b7c1c59ce889df5f1b4f78376538/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=c99090761c71b7c1c59ce889df5f1b4f78376538", "patch": "@@ -365,7 +365,7 @@ for DecodeContext<'a, 'tcx> {\n \n implement_ty_decoder!( DecodeContext<'a, 'tcx> );\n \n-impl<'a, 'tcx> MetadataBlob {\n+impl<'tcx> MetadataBlob {\n     pub fn is_compatible(&self) -> bool {\n         self.raw_bytes().starts_with(METADATA_HEADER)\n     }\n@@ -374,7 +374,7 @@ impl<'a, 'tcx> MetadataBlob {\n         Lazy::with_position(METADATA_HEADER.len() + 4).decode(self)\n     }\n \n-    pub fn get_root(&self) -> CrateRoot {\n+    pub fn get_root(&self) -> CrateRoot<'tcx> {\n         let slice = self.raw_bytes();\n         let offset = METADATA_HEADER.len();\n         let pos = (((slice[offset + 0] as u32) << 24) | ((slice[offset + 1] as u32) << 16) |\n@@ -444,7 +444,7 @@ impl<'tcx> EntryKind<'tcx> {\n ///  |- proc macro #0 (DefIndex 1:N)\n ///  |- proc macro #1 (DefIndex 1:N+1)\n ///  \\- ...\n-crate fn proc_macro_def_path_table(crate_root: &CrateRoot,\n+crate fn proc_macro_def_path_table(crate_root: &CrateRoot<'_>,\n                                    proc_macros: &[(ast::Name, Lrc<SyntaxExtension>)])\n                                    -> DefPathTable\n {\n@@ -1126,10 +1126,7 @@ impl<'a, 'tcx> CrateMetadata {\n             // link those in so we skip those crates.\n             vec![]\n         } else {\n-            let lazy_seq: LazySeq<(ExportedSymbol<'tcx>, SymbolExportLevel)> =\n-                LazySeq::with_position_and_length(self.root.exported_symbols.position,\n-                                                  self.root.exported_symbols.len);\n-            lazy_seq.decode((self, tcx)).collect()\n+            self.root.exported_symbols.decode((self, tcx)).collect()\n         }\n     }\n "}, {"sha": "4fda3e769e01437447b74479b3f5de1b4d6a2635", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c99090761c71b7c1c59ce889df5f1b4f78376538/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c99090761c71b7c1c59ce889df5f1b4f78376538/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=c99090761c71b7c1c59ce889df5f1b4f78376538", "patch": "@@ -309,7 +309,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         op(&mut IsolatedEncoder::new(self), data)\n     }\n \n-    fn encode_info_for_items(&mut self) -> Index {\n+    fn encode_info_for_items(&mut self) -> Index<'tcx> {\n         let krate = self.tcx.hir().krate();\n         let mut index = IndexBuilder::new(self);\n         let vis = Spanned { span: syntax_pos::DUMMY_SP, node: hir::VisibilityKind::Public };\n@@ -371,7 +371,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         self.lazy_seq_ref(adapted.iter().map(|rc| &**rc))\n     }\n \n-    fn encode_crate_root(&mut self) -> Lazy<CrateRoot> {\n+    fn encode_crate_root(&mut self) -> Lazy<CrateRoot<'tcx>> {\n         let mut i = self.position();\n \n         let crate_deps = self.tracked(IsolatedEncoder::encode_crate_deps, ());\n@@ -1595,13 +1595,13 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n     // symbol associated with them (they weren't translated) or if they're an FFI\n     // definition (as that's not defined in this crate).\n     fn encode_exported_symbols(&mut self,\n-                               exported_symbols: &[(ExportedSymbol<'_>, SymbolExportLevel)])\n-                               -> EncodedExportedSymbols {\n+                               exported_symbols: &[(ExportedSymbol<'tcx>, SymbolExportLevel)])\n+                               -> LazySeq<(ExportedSymbol<'tcx>, SymbolExportLevel)> {\n         // The metadata symbol name is special. It should not show up in\n         // downstream crates.\n         let metadata_symbol_name = SymbolName::new(&metadata_symbol_name(self.tcx));\n \n-        let lazy_seq = self.lazy_seq(exported_symbols\n+        self.lazy_seq(exported_symbols\n             .iter()\n             .filter(|&&(ref exported_symbol, _)| {\n                 match *exported_symbol {\n@@ -1611,12 +1611,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                     _ => true,\n                 }\n             })\n-            .cloned());\n-\n-        EncodedExportedSymbols {\n-            len: lazy_seq.len,\n-            position: lazy_seq.position,\n-        }\n+            .cloned())\n     }\n \n     fn encode_dylib_dependency_formats(&mut self, _: ()) -> LazySeq<Option<LinkagePreference>> {"}, {"sha": "dd2f59922ef9238ca34d6276dce219ab8fed9f03", "filename": "src/librustc_metadata/index.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c99090761c71b7c1c59ce889df5f1b4f78376538/src%2Flibrustc_metadata%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c99090761c71b7c1c59ce889df5f1b4f78376538/src%2Flibrustc_metadata%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex.rs?ref=c99090761c71b7c1c59ce889df5f1b4f78376538", "patch": "@@ -2,6 +2,7 @@ use crate::schema::*;\n \n use rustc::hir::def_id::{DefId, DefIndex};\n use rustc_serialize::opaque::Encoder;\n+use std::marker::PhantomData;\n use std::u32;\n use log::debug;\n \n@@ -74,23 +75,25 @@ impl FixedSizeEncoding for u32 {\n /// `u32::MAX`. Whenever an index is visited, we fill in the\n /// appropriate spot by calling `record_position`. We should never\n /// visit the same index twice.\n-pub struct Index {\n+pub struct Index<'tcx> {\n     positions: Vec<u8>,\n+    _marker: PhantomData<&'tcx ()>,\n }\n \n-impl Index {\n-    pub fn new(max_index: usize) -> Index {\n+impl Index<'tcx> {\n+    pub fn new(max_index: usize) -> Self {\n         Index {\n             positions: vec![0xff; max_index * 4],\n+            _marker: PhantomData,\n         }\n     }\n \n-    pub fn record(&mut self, def_id: DefId, entry: Lazy<Entry<'_>>) {\n+    pub fn record(&mut self, def_id: DefId, entry: Lazy<Entry<'tcx>>) {\n         assert!(def_id.is_local());\n         self.record_index(def_id.index, entry);\n     }\n \n-    pub fn record_index(&mut self, item: DefIndex, entry: Lazy<Entry<'_>>) {\n+    pub fn record_index(&mut self, item: DefIndex, entry: Lazy<Entry<'tcx>>) {\n         assert!(entry.position < (u32::MAX as usize));\n         let position = entry.position as u32;\n         let array_index = item.index();\n@@ -105,7 +108,7 @@ impl Index {\n         position.write_to_bytes_at(positions, array_index)\n     }\n \n-    pub fn write_index(&self, buf: &mut Encoder) -> LazySeq<Index> {\n+    pub fn write_index(&self, buf: &mut Encoder) -> LazySeq<Self> {\n         let pos = buf.position();\n \n         // First we write the length of the lower range ...\n@@ -116,7 +119,7 @@ impl Index {\n     }\n }\n \n-impl<'tcx> LazySeq<Index> {\n+impl LazySeq<Index<'tcx>> {\n     /// Given the metadata, extract out the offset of a particular\n     /// DefIndex (if any).\n     #[inline(never)]"}, {"sha": "ee928968cb4283d865d63bad51be26b994c378eb", "filename": "src/librustc_metadata/index_builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c99090761c71b7c1c59ce889df5f1b4f78376538/src%2Flibrustc_metadata%2Findex_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c99090761c71b7c1c59ce889df5f1b4f78376538/src%2Flibrustc_metadata%2Findex_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex_builder.rs?ref=c99090761c71b7c1c59ce889df5f1b4f78376538", "patch": "@@ -60,7 +60,7 @@ use std::ops::{Deref, DerefMut};\n /// Builder that can encode new items, adding them into the index.\n /// Item encoding cannot be nested.\n pub struct IndexBuilder<'a, 'b: 'a, 'tcx: 'b> {\n-    items: Index,\n+    items: Index<'tcx>,\n     pub ecx: &'a mut EncodeContext<'b, 'tcx>,\n }\n \n@@ -123,7 +123,7 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n         })\n     }\n \n-    pub fn into_items(self) -> Index {\n+    pub fn into_items(self) -> Index<'tcx> {\n         self.items\n     }\n }"}, {"sha": "0faadd23f47ac416b0f25e0f878708985522569c", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c99090761c71b7c1c59ce889df5f1b4f78376538/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c99090761c71b7c1c59ce889df5f1b4f78376538/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=c99090761c71b7c1c59ce889df5f1b4f78376538", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(box_patterns)]\n #![feature(drain_filter)]\n+#![feature(in_band_lifetimes)]\n #![feature(libc)]\n #![feature(nll)]\n #![feature(proc_macro_internals)]"}, {"sha": "b2f6fd65ed4451c31a4c457ac4647e2936135c34", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c99090761c71b7c1c59ce889df5f1b4f78376538/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c99090761c71b7c1c59ce889df5f1b4f78376538/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=c99090761c71b7c1c59ce889df5f1b4f78376538", "patch": "@@ -4,6 +4,7 @@ use rustc::hir;\n use rustc::hir::def::{self, CtorKind};\n use rustc::hir::def_id::{DefIndex, DefId, CrateNum};\n use rustc::ich::StableHashingContext;\n+use rustc::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc::middle::cstore::{DepKind, LinkagePreference, NativeLibrary, ForeignModule};\n use rustc::middle::lang_items;\n use rustc::mir;\n@@ -174,7 +175,7 @@ pub enum LazyState {\n }\n \n #[derive(RustcEncodable, RustcDecodable)]\n-pub struct CrateRoot {\n+pub struct CrateRoot<'tcx> {\n     pub name: Symbol,\n     pub triple: TargetTriple,\n     pub extra_filename: String,\n@@ -199,10 +200,10 @@ pub struct CrateRoot {\n     pub source_map: LazySeq<syntax_pos::SourceFile>,\n     pub def_path_table: Lazy<hir::map::definitions::DefPathTable>,\n     pub impls: LazySeq<TraitImpls>,\n-    pub exported_symbols: EncodedExportedSymbols,\n+    pub exported_symbols: LazySeq<(ExportedSymbol<'tcx>, SymbolExportLevel)>,\n     pub interpret_alloc_index: LazySeq<u32>,\n \n-    pub index: LazySeq<index::Index>,\n+    pub index: LazySeq<index::Index<'tcx>>,\n \n     pub compiler_builtins: bool,\n     pub needs_allocator: bool,\n@@ -577,9 +578,3 @@ impl_stable_hash_for!(struct GeneratorData<'tcx> { layout });\n // Tags used for encoding Spans:\n pub const TAG_VALID_SPAN: u8 = 0;\n pub const TAG_INVALID_SPAN: u8 = 1;\n-\n-#[derive(RustcEncodable, RustcDecodable)]\n-pub struct EncodedExportedSymbols {\n-    pub position: usize,\n-    pub len: usize,\n-}"}]}