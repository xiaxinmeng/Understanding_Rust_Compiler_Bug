{"sha": "280e16787e6a9bd769754f29c37c045bc18016f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4MGUxNjc4N2U2YTliZDc2OTc1NGYyOWMzN2MwNDViYzE4MDE2ZjQ=", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-01T01:10:57Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-01T03:32:19Z"}, "message": "Remove unhelpful `expect()` message", "tree": {"sha": "c6921a2eddd63c5b9ab9a3a8dfac0bc477c568e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6921a2eddd63c5b9ab9a3a8dfac0bc477c568e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/280e16787e6a9bd769754f29c37c045bc18016f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/280e16787e6a9bd769754f29c37c045bc18016f4", "html_url": "https://github.com/rust-lang/rust/commit/280e16787e6a9bd769754f29c37c045bc18016f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/280e16787e6a9bd769754f29c37c045bc18016f4/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d1240e6f7709d06caddc396f689ba0bc77f80a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d1240e6f7709d06caddc396f689ba0bc77f80a3", "html_url": "https://github.com/rust-lang/rust/commit/2d1240e6f7709d06caddc396f689ba0bc77f80a3"}], "stats": {"total": 6, "additions": 2, "deletions": 4}, "files": [{"sha": "9217209fcf0516a8348fdfc35854c4bbcaeffd20", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/280e16787e6a9bd769754f29c37c045bc18016f4/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/280e16787e6a9bd769754f29c37c045bc18016f4/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=280e16787e6a9bd769754f29c37c045bc18016f4", "patch": "@@ -350,10 +350,8 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             .into_iter()\n             .flat_map(|(ty, mut bounds)| {\n                 if let Some(data) = ty_to_fn.get(&ty) {\n-                    let (poly_trait, output) = (\n-                        data.0.as_ref().expect(\"as_ref failed\").clone(),\n-                        data.1.as_ref().cloned().map(Box::new),\n-                    );\n+                    let (poly_trait, output) =\n+                        (data.0.as_ref().unwrap().clone(), data.1.as_ref().cloned().map(Box::new));\n                     let new_ty = match poly_trait.trait_ {\n                         Type::ResolvedPath { ref path, ref did, ref is_generic } => {\n                             let mut new_path = path.clone();"}]}