{"sha": "c8b9ec8e62d9f560a6557496bc4b579019ccb509", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4YjllYzhlNjJkOWY1NjBhNjU1NzQ5NmJjNGI1NzkwMTljY2I1MDk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-02-12T21:55:27Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-02-16T16:17:32Z"}, "message": "Implement utf8 offsets", "tree": {"sha": "e3fdf968a8fcfb018319c94f524b0cb1b9ba3e67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3fdf968a8fcfb018319c94f524b0cb1b9ba3e67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8b9ec8e62d9f560a6557496bc4b579019ccb509", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8b9ec8e62d9f560a6557496bc4b579019ccb509", "html_url": "https://github.com/rust-lang/rust/commit/c8b9ec8e62d9f560a6557496bc4b579019ccb509", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8b9ec8e62d9f560a6557496bc4b579019ccb509/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0025836f262ee410050ba79b6ea09d75f76449ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/0025836f262ee410050ba79b6ea09d75f76449ac", "html_url": "https://github.com/rust-lang/rust/commit/0025836f262ee410050ba79b6ea09d75f76449ac"}], "stats": {"total": 60, "additions": 45, "deletions": 15}, "files": [{"sha": "4f3ae8cc3a93300aa499ef556a0549aec9418c04", "filename": "crates/rust-analyzer/src/from_proto.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c8b9ec8e62d9f560a6557496bc4b579019ccb509/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b9ec8e62d9f560a6557496bc4b579019ccb509/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs?ref=c8b9ec8e62d9f560a6557496bc4b579019ccb509", "patch": "@@ -1,13 +1,16 @@\n //! Conversion lsp_types types to rust-analyzer specific ones.\n use std::convert::TryFrom;\n \n-use ide::{Annotation, AnnotationKind, AssistKind, LineColUtf16};\n+use ide::{Annotation, AnnotationKind, AssistKind, LineCol, LineColUtf16};\n use ide_db::base_db::{FileId, FilePosition, FileRange};\n use syntax::{TextRange, TextSize};\n use vfs::AbsPathBuf;\n \n use crate::{\n-    from_json, global_state::GlobalStateSnapshot, line_endings::LineIndex, lsp_ext, Result,\n+    from_json,\n+    global_state::GlobalStateSnapshot,\n+    line_endings::{LineIndex, OffsetEncoding},\n+    lsp_ext, Result,\n };\n \n pub(crate) fn abs_path(url: &lsp_types::Url) -> Result<AbsPathBuf> {\n@@ -20,8 +23,16 @@ pub(crate) fn vfs_path(url: &lsp_types::Url) -> Result<vfs::VfsPath> {\n }\n \n pub(crate) fn offset(line_index: &LineIndex, position: lsp_types::Position) -> TextSize {\n-    let line_col = LineColUtf16 { line: position.line as u32, col: position.character as u32 };\n-    let line_col = line_index.index.to_utf8(line_col);\n+    let line_col = match line_index.encoding {\n+        OffsetEncoding::Utf8 => {\n+            LineCol { line: position.line as u32, col: position.character as u32 }\n+        }\n+        OffsetEncoding::Utf16 => {\n+            let line_col =\n+                LineColUtf16 { line: position.line as u32, col: position.character as u32 };\n+            line_index.index.to_utf8(line_col)\n+        }\n+    };\n     line_index.index.offset(line_col)\n }\n "}, {"sha": "d26e5ef482104ea0d5aeaca298f76ca2a2936842", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8b9ec8e62d9f560a6557496bc4b579019ccb509/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b9ec8e62d9f560a6557496bc4b579019ccb509/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=c8b9ec8e62d9f560a6557496bc4b579019ccb509", "patch": "@@ -22,7 +22,7 @@ use crate::{\n     diagnostics::{CheckFixes, DiagnosticCollection},\n     document::DocumentData,\n     from_proto,\n-    line_endings::{LineEndings, LineIndex},\n+    line_endings::{LineEndings, LineIndex, OffsetEncoding},\n     main_loop::Task,\n     op_queue::OpQueue,\n     reload::SourceRootConfig,\n@@ -274,7 +274,7 @@ impl GlobalStateSnapshot {\n     pub(crate) fn file_line_index(&self, file_id: FileId) -> Cancelable<LineIndex> {\n         let endings = self.vfs.read().1[&file_id];\n         let index = self.analysis.file_line_index(file_id)?;\n-        let res = LineIndex { index, endings };\n+        let res = LineIndex { index, endings, encoding: OffsetEncoding::Utf16 };\n         Ok(res)\n     }\n "}, {"sha": "7b6cba43e5164799f95827487b176fe46de1a54d", "filename": "crates/rust-analyzer/src/line_endings.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c8b9ec8e62d9f560a6557496bc4b579019ccb509/crates%2Frust-analyzer%2Fsrc%2Fline_endings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b9ec8e62d9f560a6557496bc4b579019ccb509/crates%2Frust-analyzer%2Fsrc%2Fline_endings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fline_endings.rs?ref=c8b9ec8e62d9f560a6557496bc4b579019ccb509", "patch": "@@ -4,9 +4,16 @@\n \n use std::sync::Arc;\n \n+pub(crate) enum OffsetEncoding {\n+    #[allow(unused)]\n+    Utf8,\n+    Utf16,\n+}\n+\n pub(crate) struct LineIndex {\n     pub(crate) index: Arc<ide::LineIndex>,\n     pub(crate) endings: LineEndings,\n+    pub(crate) encoding: OffsetEncoding,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]"}, {"sha": "6b8e347b9f7fc33fc242db3749a8667812094021", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c8b9ec8e62d9f560a6557496bc4b579019ccb509/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b9ec8e62d9f560a6557496bc4b579019ccb509/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=c8b9ec8e62d9f560a6557496bc4b579019ccb509", "patch": "@@ -7,7 +7,7 @@ use lsp_server::Notification;\n use crate::{\n     from_proto,\n     global_state::GlobalState,\n-    line_endings::{LineEndings, LineIndex},\n+    line_endings::{LineEndings, LineIndex, OffsetEncoding},\n };\n \n pub(crate) fn is_canceled(e: &(dyn Error + 'static)) -> bool {\n@@ -95,8 +95,9 @@ pub(crate) fn apply_document_changes(\n ) {\n     let mut line_index = LineIndex {\n         index: Arc::new(ide::LineIndex::new(old_text)),\n-        // We don't care about line endings here.\n+        // We don't care about line endings or offset encoding here.\n         endings: LineEndings::Unix,\n+        encoding: OffsetEncoding::Utf16,\n     };\n \n     // The changes we got must be applied sequentially, but can cross lines so we"}, {"sha": "368d916e71a7fa635c8351b8eddf3fd2c920ef72", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c8b9ec8e62d9f560a6557496bc4b579019ccb509/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b9ec8e62d9f560a6557496bc4b579019ccb509/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=c8b9ec8e62d9f560a6557496bc4b579019ccb509", "patch": "@@ -17,14 +17,19 @@ use serde_json::to_value;\n use crate::{\n     cargo_target_spec::CargoTargetSpec,\n     global_state::GlobalStateSnapshot,\n-    line_endings::{LineEndings, LineIndex},\n+    line_endings::{LineEndings, LineIndex, OffsetEncoding},\n     lsp_ext, semantic_tokens, Result,\n };\n \n pub(crate) fn position(line_index: &LineIndex, offset: TextSize) -> lsp_types::Position {\n     let line_col = line_index.index.line_col(offset);\n-    let line_col = line_index.index.to_utf16(line_col);\n-    lsp_types::Position::new(line_col.line, line_col.col)\n+    match line_index.encoding {\n+        OffsetEncoding::Utf8 => lsp_types::Position::new(line_col.line, line_col.col),\n+        OffsetEncoding::Utf16 => {\n+            let line_col = line_index.index.to_utf16(line_col);\n+            lsp_types::Position::new(line_col.line, line_col.col)\n+        }\n+    }\n }\n \n pub(crate) fn range(line_index: &LineIndex, range: TextRange) -> lsp_types::Range {\n@@ -1068,8 +1073,11 @@ mod tests {\n         }\"#;\n \n         let (offset, text) = test_utils::extract_offset(fixture);\n-        let line_index =\n-            LineIndex { index: Arc::new(ide::LineIndex::new(&text)), endings: LineEndings::Unix };\n+        let line_index = LineIndex {\n+            index: Arc::new(ide::LineIndex::new(&text)),\n+            endings: LineEndings::Unix,\n+            encoding: OffsetEncoding::Utf16,\n+        };\n         let (analysis, file_id) = Analysis::from_single_file(text);\n         let completions: Vec<(String, Option<String>)> = analysis\n             .completions(\n@@ -1125,8 +1133,11 @@ fn main() {\n         let folds = analysis.folding_ranges(file_id).unwrap();\n         assert_eq!(folds.len(), 4);\n \n-        let line_index =\n-            LineIndex { index: Arc::new(ide::LineIndex::new(&text)), endings: LineEndings::Unix };\n+        let line_index = LineIndex {\n+            index: Arc::new(ide::LineIndex::new(&text)),\n+            endings: LineEndings::Unix,\n+            encoding: OffsetEncoding::Utf16,\n+        };\n         let converted: Vec<lsp_types::FoldingRange> =\n             folds.into_iter().map(|it| folding_range(&text, &line_index, true, it)).collect();\n "}]}