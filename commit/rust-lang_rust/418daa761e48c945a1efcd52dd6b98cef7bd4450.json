{"sha": "418daa761e48c945a1efcd52dd6b98cef7bd4450", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxOGRhYTc2MWU0OGM5NDVhMWVmY2Q1MmRkNmI5OGNlZjdiZDQ0NTA=", "commit": {"author": {"name": "Sean Leffler", "email": "sean@errno.com", "date": "2016-01-31T19:31:06Z"}, "committer": {"name": "Sean Leffler", "email": "sean@errno.com", "date": "2016-01-31T19:31:06Z"}, "message": "Fix 31267, add rpass tests", "tree": {"sha": "fca76a073348f5466ee1d604e8624eed3b0183c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fca76a073348f5466ee1d604e8624eed3b0183c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/418daa761e48c945a1efcd52dd6b98cef7bd4450", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/418daa761e48c945a1efcd52dd6b98cef7bd4450", "html_url": "https://github.com/rust-lang/rust/commit/418daa761e48c945a1efcd52dd6b98cef7bd4450", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/418daa761e48c945a1efcd52dd6b98cef7bd4450/comments", "author": {"login": "sdleffler", "id": 5241142, "node_id": "MDQ6VXNlcjUyNDExNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/5241142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdleffler", "html_url": "https://github.com/sdleffler", "followers_url": "https://api.github.com/users/sdleffler/followers", "following_url": "https://api.github.com/users/sdleffler/following{/other_user}", "gists_url": "https://api.github.com/users/sdleffler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdleffler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdleffler/subscriptions", "organizations_url": "https://api.github.com/users/sdleffler/orgs", "repos_url": "https://api.github.com/users/sdleffler/repos", "events_url": "https://api.github.com/users/sdleffler/events{/privacy}", "received_events_url": "https://api.github.com/users/sdleffler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sdleffler", "id": 5241142, "node_id": "MDQ6VXNlcjUyNDExNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/5241142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdleffler", "html_url": "https://github.com/sdleffler", "followers_url": "https://api.github.com/users/sdleffler/followers", "following_url": "https://api.github.com/users/sdleffler/following{/other_user}", "gists_url": "https://api.github.com/users/sdleffler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdleffler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdleffler/subscriptions", "organizations_url": "https://api.github.com/users/sdleffler/orgs", "repos_url": "https://api.github.com/users/sdleffler/repos", "events_url": "https://api.github.com/users/sdleffler/events{/privacy}", "received_events_url": "https://api.github.com/users/sdleffler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9041b930585806b948b4cc68933047ffdc96f6f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9041b930585806b948b4cc68933047ffdc96f6f9", "html_url": "https://github.com/rust-lang/rust/commit/9041b930585806b948b4cc68933047ffdc96f6f9"}], "stats": {"total": 72, "additions": 70, "deletions": 2}, "files": [{"sha": "61cf9ff1d9229aae9d7a8225cdb65168edebf71b", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/418daa761e48c945a1efcd52dd6b98cef7bd4450/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/418daa761e48c945a1efcd52dd6b98cef7bd4450/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=418daa761e48c945a1efcd52dd6b98cef7bd4450", "patch": "@@ -149,6 +149,20 @@ pub fn trans_into<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                     },\n                 }\n             }\n+\n+            // If we see a const here, that's because it evaluates to a type with zero size. We\n+            // should be able to just discard it, since const expressions are guaranteed not to\n+            // have side effects. This seems to be reached through tuple struct constructors being\n+            // passed zero-size constants.\n+            if let hir::ExprPath(..) = expr.node {\n+                match bcx.def(expr.id) {\n+                    Def::Const(_) | Def::AssociatedConst(_) => {\n+                        return bcx;\n+                    }\n+                    _ => {}\n+                }\n+            }\n+\n             // Even if we don't have a value to emit, and the expression\n             // doesn't have any side-effects, we still have to translate the\n             // body of any closures.\n@@ -160,7 +174,7 @@ pub fn trans_into<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             match expr.node {\n                 hir::ExprPath(..) => {\n                     match bcx.def(expr.id) {\n-                        Def::Const(did) => {\n+                        Def::Const(did) | Def::AssociatedConst(did) => {\n                             let empty_substs = bcx.tcx().mk_substs(Substs::trans_empty());\n                             let const_expr = consts::get_const_expr(bcx.ccx(), did, expr,\n                                                                     empty_substs);\n@@ -896,7 +910,7 @@ fn trans_def<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             let lval = Lvalue::new(\"expr::trans_def\");\n             DatumBlock::new(bcx, Datum::new(val, const_ty, LvalueExpr(lval)))\n         }\n-        Def::Const(_) => {\n+        Def::Const(_) | Def::AssociatedConst(_) => {\n             bcx.sess().span_bug(ref_expr.span,\n                 \"constant expression should not reach expr::trans_def\")\n         }"}, {"sha": "a6b42525887869d207154583c9a753dbf718feda", "filename": "src/test/run-pass/issue-31267-additional.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/418daa761e48c945a1efcd52dd6b98cef7bd4450/src%2Ftest%2Frun-pass%2Fissue-31267-additional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/418daa761e48c945a1efcd52dd6b98cef7bd4450/src%2Ftest%2Frun-pass%2Fissue-31267-additional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-31267-additional.rs?ref=418daa761e48c945a1efcd52dd6b98cef7bd4450", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(associated_consts)]\n+\n+#[derive(Clone, Copy, Debug)]\n+struct Bar;\n+\n+const BAZ: Bar = Bar;\n+\n+#[derive(Debug)]\n+struct Foo([Bar; 1]);\n+\n+struct Biz;\n+\n+impl Biz {\n+    const BAZ: Foo = Foo([BAZ; 1]);\n+}\n+\n+fn main() {\n+    let foo = Biz::BAZ;\n+    println!(\"{:?}\", foo);\n+}"}, {"sha": "90eb0f6c841eeacc32699f3b16341f9bfccfc6b6", "filename": "src/test/run-pass/issue-31267.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/418daa761e48c945a1efcd52dd6b98cef7bd4450/src%2Ftest%2Frun-pass%2Fissue-31267.rs", "raw_url": "https://github.com/rust-lang/rust/raw/418daa761e48c945a1efcd52dd6b98cef7bd4450/src%2Ftest%2Frun-pass%2Fissue-31267.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-31267.rs?ref=418daa761e48c945a1efcd52dd6b98cef7bd4450", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for issue #31267\n+\n+#![feature(associated_consts)]\n+\n+struct Foo;\n+\n+impl Foo {\n+    const FOO: [i32; 3] = [0; 3];\n+}\n+\n+pub fn main() {\n+    let foo = Foo::FOO;\n+    assert_eq!(foo, [0i32, 0, 0]);\n+}"}]}