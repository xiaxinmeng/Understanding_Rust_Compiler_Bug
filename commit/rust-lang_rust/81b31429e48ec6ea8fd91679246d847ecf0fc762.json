{"sha": "81b31429e48ec6ea8fd91679246d847ecf0fc762", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxYjMxNDI5ZTQ4ZWM2ZWE4ZmQ5MTY3OTI0NmQ4NDdlY2YwZmM3NjI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-31T21:59:45Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-31T23:24:08Z"}, "message": "Remove more uses of str from std::run. Issue #855", "tree": {"sha": "a0e167d32d7baaa41b5533c5c4654fa27895bf06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0e167d32d7baaa41b5533c5c4654fa27895bf06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81b31429e48ec6ea8fd91679246d847ecf0fc762", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81b31429e48ec6ea8fd91679246d847ecf0fc762", "html_url": "https://github.com/rust-lang/rust/commit/81b31429e48ec6ea8fd91679246d847ecf0fc762", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81b31429e48ec6ea8fd91679246d847ecf0fc762/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1772ee3c43656729f096d8902d7cf6f4d9cacc8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1772ee3c43656729f096d8902d7cf6f4d9cacc8d", "html_url": "https://github.com/rust-lang/rust/commit/1772ee3c43656729f096d8902d7cf6f4d9cacc8d"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "4e53f79a6bb492e173036d1176615e6d8af9b6f4", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/81b31429e48ec6ea8fd91679246d847ecf0fc762/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b31429e48ec6ea8fd91679246d847ecf0fc762/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=81b31429e48ec6ea8fd91679246d847ecf0fc762", "patch": "@@ -197,51 +197,51 @@ fn check_whole_compiler(code: &str) {\n \n     //log_err #ifmt(\"Status: %d\", p.status);\n     //log_err \"Output: \" + p.out;\n-    if p.err != \"\" {\n-        if contains(p.err, \"argument of incompatible type\") {\n+    if p.err != ~\"\" {\n+        if contains(istr::to_estr(p.err), \"argument of incompatible type\") {\n             log_err \"https://github.com/graydon/rust/issues/769\";\n-        } else if contains(p.err,\n+        } else if contains(istr::to_estr(p.err),\n                            \"Cannot create binary operator with two operands of differing type\")\n          {\n             log_err \"https://github.com/graydon/rust/issues/770\";\n-        } else if contains(p.err, \"May only branch on boolean predicates!\") {\n+        } else if contains(istr::to_estr(p.err), \"May only branch on boolean predicates!\") {\n             log_err \"https://github.com/graydon/rust/issues/770 or https://github.com/graydon/rust/issues/776\";\n-        } else if contains(p.err, \"Invalid constantexpr cast!\") &&\n+        } else if contains(istr::to_estr(p.err), \"Invalid constantexpr cast!\") &&\n                       contains(code, \"!\") {\n             log_err \"https://github.com/graydon/rust/issues/777\";\n-        } else if contains(p.err,\n+        } else if contains(istr::to_estr(p.err),\n                            \"Both operands to ICmp instruction are not of the same type!\")\n                       && contains(code, \"!\") {\n             log_err \"https://github.com/graydon/rust/issues/777 #issuecomment-1678487\";\n-        } else if contains(p.err, \"Ptr must be a pointer to Val type!\") &&\n+        } else if contains(istr::to_estr(p.err), \"Ptr must be a pointer to Val type!\") &&\n                       contains(code, \"!\") {\n             log_err \"https://github.com/graydon/rust/issues/779\";\n-        } else if contains(p.err, \"Calling a function with bad signature!\") &&\n+        } else if contains(istr::to_estr(p.err), \"Calling a function with bad signature!\") &&\n                       (contains(code, \"iter\") || contains(code, \"range\")) {\n             log_err \"https://github.com/graydon/rust/issues/771 - calling an iter fails\";\n-        } else if contains(p.err, \"Calling a function with a bad signature!\")\n+        } else if contains(istr::to_estr(p.err), \"Calling a function with a bad signature!\")\n                       && contains(code, \"empty\") {\n             log_err \"https://github.com/graydon/rust/issues/775 - possibly a modification of run-pass/import-glob-crate.rs\";\n-        } else if contains(p.err, \"Invalid type for pointer element!\") &&\n+        } else if contains(istr::to_estr(p.err), \"Invalid type for pointer element!\") &&\n                       contains(code, \"put\") {\n             log_err \"https://github.com/graydon/rust/issues/773 - put put ()\";\n-        } else if contains(p.err, \"pointer being freed was not allocated\") &&\n-                      contains(p.out, \"Out of stack space, sorry\") {\n+        } else if contains(istr::to_estr(p.err), \"pointer being freed was not allocated\") &&\n+                      contains(istr::to_estr(p.out), \"Out of stack space, sorry\") {\n             log_err \"https://github.com/graydon/rust/issues/768 + https://github.com/graydon/rust/issues/778\"\n         } else {\n-            log_err \"Stderr: \" + p.err;\n+            log_err ~\"Stderr: \" + p.err;\n             fail \"Unfamiliar error message\";\n         }\n-    } else if contains(p.out, \"non-exhaustive match failure\") &&\n-                  contains(p.out, \"alias.rs\") {\n+    } else if contains(istr::to_estr(p.out), \"non-exhaustive match failure\") &&\n+                  contains(istr::to_estr(p.out), \"alias.rs\") {\n         log_err \"https://github.com/graydon/rust/issues/772\";\n-    } else if contains(p.out, \"non-exhaustive match failure\") &&\n-                  contains(p.out, \"trans.rs\") && contains(code, \"put\") {\n+    } else if contains(istr::to_estr(p.out), \"non-exhaustive match failure\") &&\n+                  contains(istr::to_estr(p.out), \"trans.rs\") && contains(code, \"put\") {\n         log_err \"https://github.com/graydon/rust/issues/774\";\n-    } else if contains(p.out, \"Out of stack space, sorry\") {\n+    } else if contains(istr::to_estr(p.out), \"Out of stack space, sorry\") {\n         log_err \"Possibly a variant of https://github.com/graydon/rust/issues/768\";\n     } else if p.status == 256 {\n-        if !contains(p.out, \"error:\") {\n+        if !contains(istr::to_estr(p.out), \"error:\") {\n             fail \"Exited with status 256 without a span-error\";\n         }\n     } else if p.status == 11 {"}, {"sha": "f8dfa56d950e90d852e345ef0f0402a3d29e1308", "filename": "src/lib/run_program.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81b31429e48ec6ea8fd91679246d847ecf0fc762/src%2Flib%2Frun_program.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b31429e48ec6ea8fd91679246d847ecf0fc762/src%2Flib%2Frun_program.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Frun_program.rs?ref=81b31429e48ec6ea8fd91679246d847ecf0fc762", "patch": "@@ -100,17 +100,17 @@ fn start_program(prog: &istr, args: &[istr]) -> @program_res {\n                                  os::fd_FILE(pipe_err.in), false));\n }\n \n-fn read_all(rd: &io::reader) -> str {\n-    let buf = \"\";\n+fn read_all(rd: &io::reader) -> istr {\n+    let buf = ~\"\";\n     while !rd.eof() {\n         let bytes = rd.read_bytes(4096u);\n-        buf += str::unsafe_from_bytes(bytes);\n+        buf += istr::unsafe_from_bytes(bytes);\n     }\n     ret buf;\n }\n \n fn program_output(prog: &istr, args: &[istr]) ->\n-   {status: int, out: str, err: str} {\n+   {status: int, out: istr, err: istr} {\n     let pr = start_program(prog, args);\n     pr.close_input();\n     ret {status: pr.finish(),"}]}