{"sha": "9aeb67987c93c611be7e74b39630dd81c57acefb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZWI2Nzk4N2M5M2M2MTFiZTdlNzRiMzk2MzBkZDgxYzU3YWNlZmI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-29T19:16:14Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-29T19:16:14Z"}, "message": "rustc: Temporarily add a switch and a corresponding makefile variable to disable typestate", "tree": {"sha": "92932fd6049aea0db2d4ec42b03541816f87148b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92932fd6049aea0db2d4ec42b03541816f87148b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9aeb67987c93c611be7e74b39630dd81c57acefb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9aeb67987c93c611be7e74b39630dd81c57acefb", "html_url": "https://github.com/rust-lang/rust/commit/9aeb67987c93c611be7e74b39630dd81c57acefb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9aeb67987c93c611be7e74b39630dd81c57acefb/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "648c4ae2ba0dc44284112fd91544cda598ce0603", "url": "https://api.github.com/repos/rust-lang/rust/commits/648c4ae2ba0dc44284112fd91544cda598ce0603", "html_url": "https://github.com/rust-lang/rust/commit/648c4ae2ba0dc44284112fd91544cda598ce0603"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "408a1ecf0009cba9c517d1579c1b39997459b268", "filename": "Makefile.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9aeb67987c93c611be7e74b39630dd81c57acefb/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/9aeb67987c93c611be7e74b39630dd81c57acefb/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=9aeb67987c93c611be7e74b39630dd81c57acefb", "patch": "@@ -27,6 +27,9 @@ endif\n ifdef TIME_PASSES\n   CFG_RUSTC_FLAGS += --time-passes\n endif\n+ifdef NO_TYPESTATE\n+  CFG_RUSTC_FLAGS += --no-typestate\n+endif\n \n # On Darwin, we need to run dsymutil so the debugging information ends\n # up in the right place.  On other platforms, it automatically gets"}, {"sha": "4e0ec099f47ae43a8556a1bbedb2e48edd324a59", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9aeb67987c93c611be7e74b39630dd81c57acefb/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeb67987c93c611be7e74b39630dd81c57acefb/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=9aeb67987c93c611be7e74b39630dd81c57acefb", "patch": "@@ -85,6 +85,7 @@ fn compile_input(session.session sess,\n                         bool save_temps,\n                         trans.output_type ot,\n                         bool time_passes,\n+                        bool run_typestate,\n                         vec[str] library_search_paths) {\n     auto def = tup(0, 0);\n     auto p = parser.new_parser(sess, env, def, input, 0u);\n@@ -106,8 +107,10 @@ fn compile_input(session.session sess,\n     crate = typeck_result._0;\n     auto type_cache = typeck_result._1;\n \n-    crate = time[@ast.crate](time_passes, \"typestate checking\",\n-        bind typestate_check.check_crate(crate));\n+    if (run_typestate) {\n+        crate = time[@ast.crate](time_passes, \"typestate checking\",\n+            bind typestate_check.check_crate(crate));\n+    }\n \n     time[()](time_passes, \"translation\",\n         bind trans.trans_crate(sess, crate, ty_cx, type_cache, output, shared,\n@@ -140,6 +143,7 @@ options:\n     -c                 compile and assemble, but do not link\n     --save-temps       write intermediate files in addition to normal output\n     --time-passes      time the individual phases of the compiler\n+    --no-typestate     don't run the typestate pass (unsafe!)\n     -h                 display this message\\n\\n\");\n }\n \n@@ -170,7 +174,7 @@ fn main(vec[str] args) {\n                     optflag(\"O\"), optflag(\"shared\"), optmulti(\"L\"),\n                     optflag(\"S\"), optflag(\"c\"), optopt(\"o\"),\n                     optflag(\"save-temps\"), optflag(\"time-passes\"),\n-                    optflag(\"noverify\"));\n+                    optflag(\"no-typestate\"), optflag(\"noverify\"));\n     auto binary = _vec.shift[str](args);\n     auto match;\n     alt (GetOpts.getopts(args, opts)) {\n@@ -201,6 +205,7 @@ fn main(vec[str] args) {\n     // FIXME: Maybe we should support -O0, -O1, -Os, etc\n     auto optimize = opt_present(match, \"O\");\n     auto time_passes = opt_present(match, \"time-passes\");\n+    auto run_typestate = !opt_present(match, \"no-typestate\");\n     auto n_inputs = _vec.len[str](match.free);\n \n     if (glue) {\n@@ -233,12 +238,14 @@ fn main(vec[str] args) {\n                 auto ofile = _str.concat(parts);\n                 compile_input(sess, env, ifile, ofile, shared,\n                               optimize, verify, save_temps, ot,\n-                              time_passes, library_search_paths);\n+                              time_passes, run_typestate,\n+                              library_search_paths);\n             }\n             case (some[str](?ofile)) {\n                 compile_input(sess, env, ifile, ofile, shared,\n                               optimize, verify, save_temps, ot,\n-                              time_passes, library_search_paths);\n+                              time_passes, run_typestate,\n+                              library_search_paths);\n             }\n         }\n     }"}]}