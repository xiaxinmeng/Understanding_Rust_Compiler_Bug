{"sha": "009cce88ebcbdb5825c86fd7f3ff84216a2d3fec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwOWNjZTg4ZWJjYmRiNTgyNWM4NmZkN2YzZmY4NDIxNmEyZDNmZWM=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-08-28T01:24:57Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-08-28T11:00:27Z"}, "message": "Extract `Decoder::entry_unless_proc_macro()`", "tree": {"sha": "ddbcb987fdcf4dd91cd20c55094d6ae018f8db84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddbcb987fdcf4dd91cd20c55094d6ae018f8db84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/009cce88ebcbdb5825c86fd7f3ff84216a2d3fec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/009cce88ebcbdb5825c86fd7f3ff84216a2d3fec", "html_url": "https://github.com/rust-lang/rust/commit/009cce88ebcbdb5825c86fd7f3ff84216a2d3fec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/009cce88ebcbdb5825c86fd7f3ff84216a2d3fec/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30b29ab0f7c54a2ca74de5117395371101fa9518", "url": "https://api.github.com/repos/rust-lang/rust/commits/30b29ab0f7c54a2ca74de5117395371101fa9518", "html_url": "https://github.com/rust-lang/rust/commit/30b29ab0f7c54a2ca74de5117395371101fa9518"}], "stats": {"total": 42, "additions": 20, "deletions": 22}, "files": [{"sha": "4d2f9f58226d78f25aebbebce4c56f12888705e2", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/009cce88ebcbdb5825c86fd7f3ff84216a2d3fec/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009cce88ebcbdb5825c86fd7f3ff84216a2d3fec/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=009cce88ebcbdb5825c86fd7f3ff84216a2d3fec", "patch": "@@ -450,11 +450,19 @@ impl<'a, 'tcx> CrateMetadata {\n     pub fn is_proc_macro_crate(&self) -> bool {\n         self.root.proc_macro_decls_static.is_some()\n     }\n+\n     fn is_proc_macro(&self, id: DefIndex) -> bool {\n         self.is_proc_macro_crate() &&\n             self.root.proc_macro_data.unwrap().decode(self).find(|x| *x == id).is_some()\n     }\n \n+    fn entry_unless_proc_macro(&self, id: DefIndex) -> Option<Entry<'tcx>> {\n+        match self.is_proc_macro(id) {\n+            true => None,\n+            false => Some(self.entry(id)),\n+        }\n+    }\n+\n     fn maybe_entry(&self, item_id: DefIndex) -> Option<Lazy<Entry<'tcx>>> {\n         self.root.entries_index.lookup(self.blob.raw_bytes(), item_id)\n     }\n@@ -704,10 +712,8 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     pub fn get_deprecation(&self, id: DefIndex) -> Option<attr::Deprecation> {\n-        match self.is_proc_macro(id) {\n-            true => None,\n-            false => self.entry(id).deprecation.map(|depr| depr.decode(self)),\n-        }\n+        self.entry_unless_proc_macro(id)\n+            .and_then(|entry| entry.deprecation.map(|depr| depr.decode(self)))\n     }\n \n     pub fn get_visibility(&self, id: DefIndex) -> ty::Visibility {\n@@ -918,31 +924,23 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     pub fn get_optimized_mir(&self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {\n-        let mir =\n-            match self.is_proc_macro(id) {\n-                true => None,\n-                false => self.entry(id).mir.map(|mir| mir.decode((self, tcx))),\n-            };\n-\n-        mir.unwrap_or_else(|| {\n-            bug!(\"get_optimized_mir: missing MIR for `{:?}`\", self.local_def_id(id))\n-        })\n+        self.entry_unless_proc_macro(id)\n+            .and_then(|entry| entry.mir.map(|mir| mir.decode((self, tcx))))\n+            .unwrap_or_else(|| {\n+                bug!(\"get_optimized_mir: missing MIR for `{:?}\", self.local_def_id(id))\n+            })\n     }\n \n     pub fn get_promoted_mir(\n         &self,\n         tcx: TyCtxt<'tcx>,\n         id: DefIndex,\n     ) -> IndexVec<Promoted, Body<'tcx>> {\n-        let promoted =\n-            match self.is_proc_macro(id) {\n-                true => None,\n-                false => self.entry(id).promoted_mir.map(|promoted| promoted.decode((self, tcx)))\n-            };\n-\n-        promoted.unwrap_or_else(|| {\n-            bug!(\"get_promoted_mir: missing MIR for `{:?}`\", self.local_def_id(id))\n-        })\n+        self.entry_unless_proc_macro(id)\n+            .and_then(|entry| entry.promoted_mir.map(|promoted| promoted.decode((self, tcx))))\n+            .unwrap_or_else(|| {\n+                bug!(\"get_promoted_mir: missing MIR for `{:?}`\", self.local_def_id(id))\n+            })\n     }\n \n     pub fn mir_const_qualif(&self, id: DefIndex) -> u8 {"}]}