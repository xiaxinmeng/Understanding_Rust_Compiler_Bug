{"sha": "e47c9743cfa7f6b3e271b4f5957d8c0913ce8520", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0N2M5NzQzY2ZhN2Y2YjNlMjcxYjRmNTk1N2Q4YzA5MTNjZTg1MjA=", "commit": {"author": {"name": "elkowar", "email": "5300871+elkowar@users.noreply.github.com", "date": "2021-08-21T10:02:21Z"}, "committer": {"name": "elkowar", "email": "5300871+elkowar@users.noreply.github.com", "date": "2021-08-21T10:02:21Z"}, "message": "Fix smaller nitpicks", "tree": {"sha": "d715fa7b6bae6981a84d1fc3c8b7179d59c3a65c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d715fa7b6bae6981a84d1fc3c8b7179d59c3a65c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e47c9743cfa7f6b3e271b4f5957d8c0913ce8520", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEtViXQSiCDLRzvZgH4yGtcbHR8n8FAmEgzy0ACgkQ4yGtcbHR\n8n9Rlgv/S7CKRiNvgteFMszKvjqKTGzC5Hk/MSMZDZH0oDtkykp2KY2IWkvF2+Xn\nTGls8EBdFIsnT8pqUN8ZePpJzHzomTL9GQHxAMDTln7p1mmYthOwtVlBB10tIzXr\nzMyVlrOgK+EsQdj8RUReOtTsN5j8jltdqgtY7uOUkVQycH3viOxDwMWUuG6TONLK\ncKvfP4ZjGdYo1Osvp5N3wgTwamBp1xwmTtgPN+4bUjfmx1hkXTVAwlcqnKEegyrL\nR7QTd+HB8kasrILXUuzFysl8HEPJ1R7jRwdyQrnk1iyUb8ch70rKwGYI6tiWDIyE\nKhYJ7Wl4k49MIeWOIgk7ltsL4ZHh3oCCf6BAkpdAQ6XR/GG1HPkoCDSGYj6+4jpk\nD/innf+n32GSFEQhYVTpsIq7UX59GaRSJ7UlsUkNIoLyms/4RAipXo+rbkHVQ414\n0Txe2ahy+A8qyU4wgr6q8SqnlHVYWZCpn6YyiJHJdn7qcFIC6arjO+eBDj4ltcQu\nZlvOwb2p\n=nEEx\n-----END PGP SIGNATURE-----", "payload": "tree d715fa7b6bae6981a84d1fc3c8b7179d59c3a65c\nparent 7cff9303937dc5a292f246c5d1b99c3f5351841a\nauthor elkowar <5300871+elkowar@users.noreply.github.com> 1629540141 +0200\ncommitter elkowar <5300871+elkowar@users.noreply.github.com> 1629540141 +0200\n\nFix smaller nitpicks\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e47c9743cfa7f6b3e271b4f5957d8c0913ce8520", "html_url": "https://github.com/rust-lang/rust/commit/e47c9743cfa7f6b3e271b4f5957d8c0913ce8520", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e47c9743cfa7f6b3e271b4f5957d8c0913ce8520/comments", "author": {"login": "elkowar", "id": 5300871, "node_id": "MDQ6VXNlcjUzMDA4NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/5300871?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elkowar", "html_url": "https://github.com/elkowar", "followers_url": "https://api.github.com/users/elkowar/followers", "following_url": "https://api.github.com/users/elkowar/following{/other_user}", "gists_url": "https://api.github.com/users/elkowar/gists{/gist_id}", "starred_url": "https://api.github.com/users/elkowar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elkowar/subscriptions", "organizations_url": "https://api.github.com/users/elkowar/orgs", "repos_url": "https://api.github.com/users/elkowar/repos", "events_url": "https://api.github.com/users/elkowar/events{/privacy}", "received_events_url": "https://api.github.com/users/elkowar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "elkowar", "id": 5300871, "node_id": "MDQ6VXNlcjUzMDA4NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/5300871?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elkowar", "html_url": "https://github.com/elkowar", "followers_url": "https://api.github.com/users/elkowar/followers", "following_url": "https://api.github.com/users/elkowar/following{/other_user}", "gists_url": "https://api.github.com/users/elkowar/gists{/gist_id}", "starred_url": "https://api.github.com/users/elkowar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elkowar/subscriptions", "organizations_url": "https://api.github.com/users/elkowar/orgs", "repos_url": "https://api.github.com/users/elkowar/repos", "events_url": "https://api.github.com/users/elkowar/events{/privacy}", "received_events_url": "https://api.github.com/users/elkowar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cff9303937dc5a292f246c5d1b99c3f5351841a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cff9303937dc5a292f246c5d1b99c3f5351841a", "html_url": "https://github.com/rust-lang/rust/commit/7cff9303937dc5a292f246c5d1b99c3f5351841a"}], "stats": {"total": 15, "additions": 5, "deletions": 10}, "files": [{"sha": "5ce2ad3193e6723713b0577624b645205eb3eaa2", "filename": "crates/ide_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e47c9743cfa7f6b3e271b4f5957d8c0913ce8520/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47c9743cfa7f6b3e271b4f5957d8c0913ce8520/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=e47c9743cfa7f6b3e271b4f5957d8c0913ce8520", "patch": "@@ -241,7 +241,6 @@ fn pick_pattern_and_expr_order(\n             (true, true) => return None,\n             (true, false) => (pat, expr, expr2),\n             (false, true) => (pat2, expr2, expr),\n-            _ if is_sad_pat(sema, &pat2) => (pat, expr, expr2),\n             _ if is_sad_pat(sema, &pat) => (pat2, expr2, expr),\n             (false, false) => (pat, expr, expr2),\n         },\n@@ -251,9 +250,7 @@ fn pick_pattern_and_expr_order(\n \n fn is_empty_expr(expr: &ast::Expr) -> bool {\n     match expr {\n-        ast::Expr::BlockExpr(expr) => {\n-            expr.statements().next().is_none() && expr.tail_expr().is_none()\n-        }\n+        ast::Expr::BlockExpr(expr) => expr.is_empty(),\n         ast::Expr::TupleExpr(expr) => expr.fields().next().is_none(),\n         _ => false,\n     }\n@@ -262,12 +259,10 @@ fn is_empty_expr(expr: &ast::Expr) -> bool {\n fn binds_name(sema: &hir::Semantics<RootDatabase>, pat: &ast::Pat) -> bool {\n     let binds_name_v = |pat| binds_name(&sema, &pat);\n     match pat {\n-        ast::Pat::IdentPat(pat) => {\n-            match pat.name().and_then(|name| NameClass::classify(sema, &name)) {\n-                Some(NameClass::ConstReference(_)) => false,\n-                _ => true,\n-            }\n-        }\n+        ast::Pat::IdentPat(pat) => !matches!(\n+            pat.name().and_then(|name| NameClass::classify(sema, &name)),\n+            Some(NameClass::ConstReference(_))\n+        ),\n         ast::Pat::MacroPat(_) => true,\n         ast::Pat::OrPat(pat) => pat.pats().any(binds_name_v),\n         ast::Pat::SlicePat(pat) => pat.pats().any(binds_name_v),"}]}