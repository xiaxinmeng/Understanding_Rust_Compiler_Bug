{"sha": "dfb5d16fb33948746d5d0c83eecb3acb5c49a49b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYjVkMTZmYjMzOTQ4NzQ2ZDVkMGM4M2VlY2IzYWNiNWM0OWE0OWI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-29T10:03:30Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-11T12:56:00Z"}, "message": "Use bitcast to transmute where possible", "tree": {"sha": "28862016259c6bfbeb605cb4a971f3c5491ad012", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28862016259c6bfbeb605cb4a971f3c5491ad012"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfb5d16fb33948746d5d0c83eecb3acb5c49a49b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfb5d16fb33948746d5d0c83eecb3acb5c49a49b", "html_url": "https://github.com/rust-lang/rust/commit/dfb5d16fb33948746d5d0c83eecb3acb5c49a49b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfb5d16fb33948746d5d0c83eecb3acb5c49a49b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cf1bcea5c9bcb697a2988dcd2d575be68a8062f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cf1bcea5c9bcb697a2988dcd2d575be68a8062f", "html_url": "https://github.com/rust-lang/rust/commit/9cf1bcea5c9bcb697a2988dcd2d575be68a8062f"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "d5315ac3b8add334972f9958ea68e978c4bee359", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/dfb5d16fb33948746d5d0c83eecb3acb5c49a49b/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb5d16fb33948746d5d0c83eecb3acb5c49a49b/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=dfb5d16fb33948746d5d0c83eecb3acb5c49a49b", "patch": "@@ -631,12 +631,29 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n             ret.write_cvalue(fx, CValue::by_val(res, base.layout()));\n         };\n \n-        transmute, <src_ty, dst_ty> (c from) {\n-            assert_eq!(from.layout().ty, src_ty);\n-            let (addr, meta) = from.force_stack(fx);\n-            assert!(meta.is_none());\n-            let dst_layout = fx.layout_of(dst_ty);\n-            ret.write_cvalue(fx, CValue::by_ref(addr, dst_layout))\n+        transmute, (c from) {\n+            assert_eq!(from.layout().size, ret.layout().size);\n+            if from.layout().ty.kind == ret.layout().ty.kind {\n+                ret.write_cvalue(fx, from);\n+            } else if let (Some(src_ty), Some(dst_ty)) = (fx.clif_type(from.layout().ty), fx.clif_type(ret.layout().ty)) {\n+                let from = from.load_scalar(fx);\n+                let val = match (src_ty, dst_ty) {\n+                    (_, _) if src_ty == dst_ty => from,\n+                    (types::I32, types::F32) | (types::F32, types::I32)\n+                    | (types::I64, types::F64) | (types::F64, types::I64) => {\n+                        fx.bcx.ins().bitcast(dst_ty, from)\n+                    }\n+                    (_, _) if src_ty.is_vector() && dst_ty.is_vector() => {\n+                        fx.bcx.ins().raw_bitcast(dst_ty, from)\n+                    }\n+                    _ => unreachable!(\"{:?} -> {:?}\", src_ty, dst_ty),\n+                };\n+                ret.write_cvalue(fx, CValue::by_val(val, ret.layout()));\n+            } else {\n+                let (addr, meta) = from.force_stack(fx);\n+                assert!(meta.is_none());\n+                ret.write_cvalue(fx, CValue::by_ref(addr, ret.layout()));\n+            }\n         };\n         write_bytes, (c dst, v val, v count) {\n             let pointee_ty = dst.layout().ty.builtin_deref(true).unwrap().ty;"}]}