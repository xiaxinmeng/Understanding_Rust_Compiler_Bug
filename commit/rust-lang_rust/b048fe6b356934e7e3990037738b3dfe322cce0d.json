{"sha": "b048fe6b356934e7e3990037738b3dfe322cce0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNDhmZTZiMzU2OTM0ZTdlMzk5MDAzNzczOGIzZGZlMzIyY2NlMGQ=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-16T09:56:32Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-17T06:26:59Z"}, "message": "Format source codes", "tree": {"sha": "7362a55da849bbfd9e331b0db95139618a30dad3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7362a55da849bbfd9e331b0db95139618a30dad3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b048fe6b356934e7e3990037738b3dfe322cce0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b048fe6b356934e7e3990037738b3dfe322cce0d", "html_url": "https://github.com/rust-lang/rust/commit/b048fe6b356934e7e3990037738b3dfe322cce0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b048fe6b356934e7e3990037738b3dfe322cce0d/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee0e9aeaae127513e89885c1aa7361d2e250a093", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee0e9aeaae127513e89885c1aa7361d2e250a093", "html_url": "https://github.com/rust-lang/rust/commit/ee0e9aeaae127513e89885c1aa7361d2e250a093"}], "stats": {"total": 177, "additions": 78, "deletions": 99}, "files": [{"sha": "5a4a404bfdb3e0d942dbefb913d606a721cde032", "filename": "src/chains.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b048fe6b356934e7e3990037738b3dfe322cce0d/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b048fe6b356934e7e3990037738b3dfe322cce0d/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=b048fe6b356934e7e3990037738b3dfe322cce0d", "patch": "@@ -165,9 +165,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n     );\n \n     let child_shape_iter = Some(first_child_shape).into_iter().chain(\n-        ::std::iter::repeat(\n-            other_child_shape,\n-        ).take(subexpr_list.len() - 1),\n+        ::std::iter::repeat(other_child_shape).take(subexpr_list.len() - 1),\n     );\n     let iter = subexpr_list.iter().rev().zip(child_shape_iter);\n     let mut rewrites = try_opt!(\n@@ -178,9 +176,10 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n \n     // Total of all items excluding the last.\n     let last_non_try_index = rewrites.len() - (1 + trailing_try_num);\n-    let almost_total = rewrites[..last_non_try_index]\n-        .iter()\n-        .fold(0, |a, b| a + first_line_width(b)) + parent_rewrite.len();\n+    let almost_total = rewrites[..last_non_try_index].iter().fold(\n+        0,\n+        |a, b| a + first_line_width(b),\n+    ) + parent_rewrite.len();\n     let one_line_len = rewrites.iter().fold(0, |a, r| a + first_line_width(r)) +\n         parent_rewrite.len();\n "}, {"sha": "ce4b45009a2a5805e50520ade4009617cbf4058f", "filename": "src/comment.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b048fe6b356934e7e3990037738b3dfe322cce0d/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b048fe6b356934e7e3990037738b3dfe322cce0d/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=b048fe6b356934e7e3990037738b3dfe322cce0d", "patch": "@@ -45,9 +45,10 @@ pub enum CommentStyle<'a> {\n \n fn custom_opener(s: &str) -> &str {\n     s.lines().next().map_or(\"\", |first_line| {\n-        first_line\n-            .find(' ')\n-            .map_or(first_line, |space_index| &first_line[0..space_index + 1])\n+        first_line.find(' ').map_or(\n+            first_line,\n+            |space_index| &first_line[0..space_index + 1],\n+        )\n     })\n }\n "}, {"sha": "6b4669a70e709ef74c67f65ec45036725128f6c9", "filename": "src/expr.rs", "status": "modified", "additions": 29, "deletions": 41, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/b048fe6b356934e7e3990037738b3dfe322cce0d/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b048fe6b356934e7e3990037738b3dfe322cce0d/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=b048fe6b356934e7e3990037738b3dfe322cce0d", "patch": "@@ -298,9 +298,7 @@ fn format_expr(\n             Some(format!(\n                 \"{}{}\",\n                 \"do catch \",\n-                try_opt!(\n-                    block.rewrite(&context, Shape::legacy(budget, shape.indent))\n-                )\n+                try_opt!(block.rewrite(&context, Shape::legacy(budget, shape.indent)))\n             ))\n         }\n     };\n@@ -941,13 +939,9 @@ fn to_control_flow<'a>(expr: &'a ast::Expr, expr_type: ExprType) -> Option<Contr\n         ast::ExprKind::Loop(ref block, label) => Some(\n             ControlFlow::new_loop(block, label, expr.span),\n         ),\n-        ast::ExprKind::While(ref cond, ref block, label) => Some(ControlFlow::new_while(\n-            None,\n-            cond,\n-            block,\n-            label,\n-            expr.span,\n-        )),\n+        ast::ExprKind::While(ref cond, ref block, label) => Some(\n+            ControlFlow::new_while(None, cond, block, label, expr.span),\n+        ),\n         ast::ExprKind::WhileLet(ref pat, ref cond, ref block, label) => {\n             Some(ControlFlow::new_while(\n                 Some(pat),\n@@ -1302,14 +1296,13 @@ impl<'a> Rewrite for ControlFlow<'a> {\n                 }\n             };\n \n-            let between_kwd_else_block =\n-                mk_sp(\n-                    self.block.span.hi,\n-                    context.codemap.span_before(\n-                        mk_sp(self.block.span.hi, else_block.span.lo),\n-                        \"else\",\n-                    ),\n-                );\n+            let between_kwd_else_block = mk_sp(\n+                self.block.span.hi,\n+                context.codemap.span_before(\n+                    mk_sp(self.block.span.hi, else_block.span.lo),\n+                    \"else\",\n+                ),\n+            );\n             let between_kwd_else_block_comment =\n                 extract_comment(between_kwd_else_block, context, shape);\n \n@@ -1434,10 +1427,9 @@ fn rewrite_match_arm_comment(\n     result.push_str(&missed_str[..first_brk]);\n     let missed_str = &missed_str[first_brk..]; // If missed_str had one newline, it starts with it\n \n-    let first = missed_str.find(|c: char| !c.is_whitespace()).unwrap_or(\n-        missed_str\n-            .len(),\n-    );\n+    let first = missed_str\n+        .find(|c: char| !c.is_whitespace())\n+        .unwrap_or(missed_str.len());\n     if missed_str[..first].chars().filter(|c| c == &'\\n').count() >= 2 {\n         // Excessive vertical whitespace before comment should be preserved\n         // FIXME handle vertical whitespace better\n@@ -2053,20 +2045,16 @@ where\n     Ok(format!(\n         \"{}{}\",\n         callee_str,\n-        wrap_args_with_parens(\n-            context,\n-            &list_str,\n-            extendable,\n-            args_shape,\n-            nested_shape,\n-        )\n+        wrap_args_with_parens(context, &list_str, extendable, args_shape, nested_shape)\n     ))\n }\n \n fn need_block_indent(s: &str, shape: Shape) -> bool {\n     s.lines().skip(1).any(|s| {\n-        s.find(|c| !char::is_whitespace(c))\n-            .map_or(false, |w| w + 1 < shape.indent.width())\n+        s.find(|c| !char::is_whitespace(c)).map_or(\n+            false,\n+            |w| w + 1 < shape.indent.width(),\n+        )\n     })\n }\n \n@@ -2408,10 +2396,12 @@ fn rewrite_index(\n     let indent = indent.to_string(&context.config);\n     // FIXME this is not right, since we don't take into account that shape.width\n     // might be reduced from max_width by something on the right.\n-    let budget = try_opt!(context.config.max_width().checked_sub(\n-        indent.len() + lbr.len() +\n-            rbr.len(),\n-    ));\n+    let budget = try_opt!(\n+        context\n+            .config\n+            .max_width()\n+            .checked_sub(indent.len() + lbr.len() + rbr.len())\n+    );\n     let index_str = try_opt!(index.rewrite(context, Shape::legacy(budget, shape.indent)));\n     Some(format!(\n         \"{}\\n{}{}{}{}\",\n@@ -2603,12 +2593,10 @@ where\n         // 3 = \"(\" + \",)\"\n         let nested_shape = try_opt!(shape.sub_width(3)).visual_indent(1);\n         return items.next().unwrap().rewrite(context, nested_shape).map(\n-            |s| {\n-                if context.config.spaces_within_parens() {\n-                    format!(\"( {}, )\", s)\n-                } else {\n-                    format!(\"({},)\", s)\n-                }\n+            |s| if context.config.spaces_within_parens() {\n+                format!(\"( {}, )\", s)\n+            } else {\n+                format!(\"({},)\", s)\n             },\n         );\n     }"}, {"sha": "02a352861178623ffc9478185d3b9b3d87206fa7", "filename": "src/items.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b048fe6b356934e7e3990037738b3dfe322cce0d/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b048fe6b356934e7e3990037738b3dfe322cce0d/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=b048fe6b356934e7e3990037738b3dfe322cce0d", "patch": "@@ -803,10 +803,9 @@ fn format_impl_ref_and_type(\n             Style::Legacy => new_line_offset + trait_ref_overhead,\n             Style::Rfc => new_line_offset,\n         };\n-        result.push_str(&*try_opt!(self_ty.rewrite(\n-            context,\n-            Shape::legacy(budget, type_offset),\n-        )));\n+        result.push_str(&*try_opt!(\n+            self_ty.rewrite(context, Shape::legacy(budget, type_offset))\n+        ));\n         Some(result)\n     } else {\n         unreachable!();\n@@ -967,8 +966,7 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n             where_density,\n             \"{\",\n             !has_body,\n-            trait_bound_str.is_empty() &&\n-                last_line_width(&generics_str) == 1,\n+            trait_bound_str.is_empty() && last_line_width(&generics_str) == 1,\n             None,\n         ));\n         // If the where clause cannot fit on the same line,\n@@ -1260,10 +1258,12 @@ fn format_tuple_struct(\n             context.codemap.span_after(span, \"(\"),\n             span.hi,\n         );\n-        let body_budget = try_opt!(context.config.max_width().checked_sub(\n-            offset.block_only().width() +\n-                result.len() + 3,\n-        ));\n+        let body_budget = try_opt!(\n+            context\n+                .config\n+                .max_width()\n+                .checked_sub(offset.block_only().width() + result.len() + 3)\n+        );\n         let body = try_opt!(list_helper(\n             items,\n             // TODO budget is wrong in block case\n@@ -1548,8 +1548,7 @@ pub fn rewrite_static(\n     let ty_str = try_opt!(ty.rewrite(\n         context,\n         Shape::legacy(\n-            context.config.max_width() - offset.block_indent -\n-                prefix.len() - 2,\n+            context.config.max_width() - offset.block_indent - prefix.len() - 2,\n             offset.block_only(),\n         ),\n     ));\n@@ -1613,8 +1612,7 @@ pub fn rewrite_associated_type(\n         let ty_str = try_opt!(ty.rewrite(\n             context,\n             Shape::legacy(\n-                context.config.max_width() - indent.block_indent -\n-                    prefix.len() - 2,\n+                context.config.max_width() - indent.block_indent - prefix.len() - 2,\n                 indent.block_only(),\n             ),\n         ));\n@@ -1857,8 +1855,7 @@ fn rewrite_fn_base(\n         2\n     };\n     let shape = try_opt!(\n-        Shape::indented(indent + last_line_width(&result), context.config)\n-            .sub_width(overhead)\n+        Shape::indented(indent + last_line_width(&result), context.config).sub_width(overhead)\n     );\n     let g_span = mk_sp(span.lo, span_for_return(&fd.output).lo);\n     let generics_str = try_opt!(rewrite_generics(context, generics, shape, g_span));\n@@ -1979,10 +1976,10 @@ fn rewrite_fn_base(\n         }\n         // If the last line of args contains comment, we cannot put the closing paren\n         // on the same line.\n-        if arg_str\n-            .lines()\n-            .last()\n-            .map_or(false, |last_line| last_line.contains(\"//\"))\n+        if arg_str.lines().last().map_or(\n+            false,\n+            |last_line| last_line.contains(\"//\"),\n+        )\n         {\n             args_last_line_contains_comment = true;\n             result.push('\\n');\n@@ -2055,13 +2052,14 @@ fn rewrite_fn_base(\n             let snippet_hi = span.hi;\n             let snippet = context.snippet(mk_sp(snippet_lo, snippet_hi));\n             // Try to preserve the layout of the original snippet.\n-            let original_starts_with_newline =\n-                snippet\n-                    .find(|c| c != ' ')\n-                    .map_or(false, |i| snippet[i..].starts_with('\\n'));\n-            let original_ends_with_newline = snippet\n-                .rfind(|c| c != ' ')\n-                .map_or(false, |i| snippet[i..].ends_with('\\n'));\n+            let original_starts_with_newline = snippet.find(|c| c != ' ').map_or(\n+                false,\n+                |i| snippet[i..].starts_with('\\n'),\n+            );\n+            let original_ends_with_newline = snippet.rfind(|c| c != ' ').map_or(\n+                false,\n+                |i| snippet[i..].ends_with('\\n'),\n+            );\n             let snippet = snippet.trim();\n             if !snippet.is_empty() {\n                 result.push(if original_starts_with_newline {"}, {"sha": "da412211233772a91589be54ea85075a38336331", "filename": "src/lists.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b048fe6b356934e7e3990037738b3dfe322cce0d/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b048fe6b356934e7e3990037738b3dfe322cce0d/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=b048fe6b356934e7e3990037738b3dfe322cce0d", "patch": "@@ -132,9 +132,10 @@ impl ListItem {\n     }\n \n     pub fn has_line_pre_comment(&self) -> bool {\n-        self.pre_comment\n-            .as_ref()\n-            .map_or(false, |comment| comment.starts_with(\"//\"))\n+        self.pre_comment.as_ref().map_or(\n+            false,\n+            |comment| comment.starts_with(\"//\"),\n+        )\n     }\n \n     pub fn from_str<S: Into<String>>(s: S) -> ListItem {\n@@ -419,10 +420,9 @@ where\n                     }\n                 }\n                 None => {\n-                    post_snippet.find_uncommented(self.terminator).unwrap_or(\n-                        post_snippet\n-                            .len(),\n-                    )\n+                    post_snippet\n+                        .find_uncommented(self.terminator)\n+                        .unwrap_or(post_snippet.len())\n                 }\n             };\n \n@@ -435,10 +435,9 @@ where\n                 let first_newline = test_snippet.find('\\n').unwrap_or(test_snippet.len());\n                 // From the end of the first line of comments.\n                 let test_snippet = &test_snippet[first_newline..];\n-                let first = test_snippet.find(|c: char| !c.is_whitespace()).unwrap_or(\n-                    test_snippet\n-                        .len(),\n-                );\n+                let first = test_snippet\n+                    .find(|c: char| !c.is_whitespace())\n+                    .unwrap_or(test_snippet.len());\n                 // From the end of the first line of comments to the next non-whitespace char.\n                 let test_snippet = &test_snippet[..first];\n "}, {"sha": "723317a1040317e94270be838d0ecda2b5c6b462", "filename": "src/types.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b048fe6b356934e7e3990037738b3dfe322cce0d/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b048fe6b356934e7e3990037738b3dfe322cce0d/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=b048fe6b356934e7e3990037738b3dfe322cce0d", "patch": "@@ -590,10 +590,7 @@ impl Rewrite for ast::PolyTraitRef {\n             let max_path_width = try_opt!(shape.width.checked_sub(extra_offset));\n             let path_str = try_opt!(self.trait_ref.rewrite(\n                 context,\n-                Shape::legacy(\n-                    max_path_width,\n-                    shape.indent + extra_offset,\n-                ),\n+                Shape::legacy(max_path_width, shape.indent + extra_offset),\n             ));\n \n             Some(if context.config.spaces_within_angle_brackets() &&\n@@ -645,10 +642,7 @@ impl Rewrite for ast::Ty {\n                             mut_str,\n                             try_opt!(mt.ty.rewrite(\n                                 context,\n-                                Shape::legacy(\n-                                    budget,\n-                                    shape.indent + 2 + mut_len + lt_len,\n-                                ),\n+                                Shape::legacy(budget, shape.indent + 2 + mut_len + lt_len),\n                             ))\n                         )\n                     }"}, {"sha": "a303e099f7a711b82e3a20d4452d261797d19665", "filename": "src/visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b048fe6b356934e7e3990037738b3dfe322cce0d/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b048fe6b356934e7e3990037738b3dfe322cce0d/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=b048fe6b356934e7e3990037738b3dfe322cce0d", "patch": "@@ -782,8 +782,8 @@ impl Rewrite for ast::MetaItem {\n \n impl Rewrite for ast::Attribute {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        try_opt!(self.meta()).rewrite(context, shape).map(|rw| {\n-            if rw.starts_with(\"///\") {\n+        try_opt!(self.meta()).rewrite(context, shape).map(\n+            |rw| if rw.starts_with(\"///\") {\n                 rw\n             } else {\n                 let original = context.snippet(self.span);\n@@ -793,7 +793,7 @@ impl Rewrite for ast::Attribute {\n                     format!(\"#[{}]\", rw)\n                 }\n             }\n-        })\n+        )\n     }\n }\n "}]}