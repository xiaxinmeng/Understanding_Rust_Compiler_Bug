{"sha": "06d752e28dcc4b343f9d437e59d7ebbedff3fde8", "node_id": "C_kwDOAAsO6NoAKDA2ZDc1MmUyOGRjYzRiMzQzZjlkNDM3ZTU5ZDdlYmJlZGZmM2ZkZTg", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-06T00:49:03Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-08-19T14:54:55Z"}, "message": "Move `RepeatOnce` into `Methods` lint pass", "tree": {"sha": "e59b76195e7c3e029b6882eab55c894e762ce98e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e59b76195e7c3e029b6882eab55c894e762ce98e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06d752e28dcc4b343f9d437e59d7ebbedff3fde8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06d752e28dcc4b343f9d437e59d7ebbedff3fde8", "html_url": "https://github.com/rust-lang/rust/commit/06d752e28dcc4b343f9d437e59d7ebbedff3fde8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06d752e28dcc4b343f9d437e59d7ebbedff3fde8/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd5376194a4b74021ef01b7f2c96898ea204b75d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd5376194a4b74021ef01b7f2c96898ea204b75d", "html_url": "https://github.com/rust-lang/rust/commit/fd5376194a4b74021ef01b7f2c96898ea204b75d"}], "stats": {"total": 186, "additions": 92, "deletions": 94}, "files": [{"sha": "812a89d33e534650d2b53363bc3d449bdce19aaa", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06d752e28dcc4b343f9d437e59d7ebbedff3fde8/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d752e28dcc4b343f9d437e59d7ebbedff3fde8/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=06d752e28dcc4b343f9d437e59d7ebbedff3fde8", "patch": "@@ -197,6 +197,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(methods::OR_FUN_CALL),\n     LintId::of(methods::OR_THEN_UNWRAP),\n     LintId::of(methods::RANGE_ZIP_WITH_LEN),\n+    LintId::of(methods::REPEAT_ONCE),\n     LintId::of(methods::RESULT_MAP_OR_INTO_OPTION),\n     LintId::of(methods::SEARCH_IS_SOME),\n     LintId::of(methods::SHOULD_IMPLEMENT_TRAIT),\n@@ -287,7 +288,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES),\n     LintId::of(reference::DEREF_ADDROF),\n     LintId::of(regex::INVALID_REGEX),\n-    LintId::of(repeat_once::REPEAT_ONCE),\n     LintId::of(returns::LET_AND_RETURN),\n     LintId::of(returns::NEEDLESS_RETURN),\n     LintId::of(self_named_constructors::SELF_NAMED_CONSTRUCTORS),"}, {"sha": "f79105f4960f2a49fbd1b8da15083818e2c7ab1c", "filename": "clippy_lints/src/lib.register_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06d752e28dcc4b343f9d437e59d7ebbedff3fde8/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d752e28dcc4b343f9d437e59d7ebbedff3fde8/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_complexity.rs?ref=06d752e28dcc4b343f9d437e59d7ebbedff3fde8", "patch": "@@ -52,6 +52,7 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(methods::OPTION_FILTER_MAP),\n     LintId::of(methods::OR_THEN_UNWRAP),\n     LintId::of(methods::RANGE_ZIP_WITH_LEN),\n+    LintId::of(methods::REPEAT_ONCE),\n     LintId::of(methods::SEARCH_IS_SOME),\n     LintId::of(methods::SKIP_WHILE_NEXT),\n     LintId::of(methods::UNNECESSARY_FILTER_MAP),\n@@ -80,7 +81,6 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(redundant_closure_call::REDUNDANT_CLOSURE_CALL),\n     LintId::of(redundant_slicing::REDUNDANT_SLICING),\n     LintId::of(reference::DEREF_ADDROF),\n-    LintId::of(repeat_once::REPEAT_ONCE),\n     LintId::of(strings::STRING_FROM_UTF8_AS_BYTES),\n     LintId::of(strlen_on_c_strings::STRLEN_ON_C_STRINGS),\n     LintId::of(swap::MANUAL_SWAP),"}, {"sha": "659f0288d1742b583007c8071287f5faad5f8164", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06d752e28dcc4b343f9d437e59d7ebbedff3fde8/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d752e28dcc4b343f9d437e59d7ebbedff3fde8/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=06d752e28dcc4b343f9d437e59d7ebbedff3fde8", "patch": "@@ -346,6 +346,7 @@ store.register_lints(&[\n     methods::OR_THEN_UNWRAP,\n     methods::PATH_BUF_PUSH_OVERWRITE,\n     methods::RANGE_ZIP_WITH_LEN,\n+    methods::REPEAT_ONCE,\n     methods::RESULT_MAP_OR_INTO_OPTION,\n     methods::SEARCH_IS_SOME,\n     methods::SHOULD_IMPLEMENT_TRAIT,\n@@ -489,7 +490,6 @@ store.register_lints(&[\n     reference::DEREF_ADDROF,\n     regex::INVALID_REGEX,\n     regex::TRIVIAL_REGEX,\n-    repeat_once::REPEAT_ONCE,\n     return_self_not_must_use::RETURN_SELF_NOT_MUST_USE,\n     returns::LET_AND_RETURN,\n     returns::NEEDLESS_RETURN,"}, {"sha": "40c77ede9ad3c5c54efeacc0c72764b5d6f3d869", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06d752e28dcc4b343f9d437e59d7ebbedff3fde8/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d752e28dcc4b343f9d437e59d7ebbedff3fde8/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=06d752e28dcc4b343f9d437e59d7ebbedff3fde8", "patch": "@@ -343,7 +343,6 @@ mod redundant_static_lifetimes;\n mod ref_option_ref;\n mod reference;\n mod regex;\n-mod repeat_once;\n mod return_self_not_must_use;\n mod returns;\n mod same_name_method;\n@@ -824,7 +823,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(macro_use::MacroUseImports::default()));\n     store.register_late_pass(|| Box::new(pattern_type_mismatch::PatternTypeMismatch));\n     store.register_late_pass(|| Box::new(stable_sort_primitive::StableSortPrimitive));\n-    store.register_late_pass(|| Box::new(repeat_once::RepeatOnce));\n     store.register_late_pass(|| Box::new(unwrap_in_result::UnwrapInResult));\n     store.register_late_pass(|| Box::new(semicolon_if_nothing_returned::SemicolonIfNothingReturned));\n     store.register_late_pass(|| Box::new(async_yields_async::AsyncYieldsAsync));"}, {"sha": "bbd6f56c5eaee281f16cc5b48bade973669d4767", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/06d752e28dcc4b343f9d437e59d7ebbedff3fde8/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d752e28dcc4b343f9d437e59d7ebbedff3fde8/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=06d752e28dcc4b343f9d437e59d7ebbedff3fde8", "patch": "@@ -65,6 +65,7 @@ mod or_fun_call;\n mod or_then_unwrap;\n mod path_buf_push_overwrite;\n mod range_zip_with_len;\n+mod repeat_once;\n mod search_is_some;\n mod single_char_add_str;\n mod single_char_insert_string;\n@@ -2760,6 +2761,38 @@ declare_clippy_lint! {\n     \"zipping iterator with a range when `enumerate()` would do\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for usage of `.repeat(1)` and suggest the following method for each types.\n+    /// - `.to_string()` for `str`\n+    /// - `.clone()` for `String`\n+    /// - `.to_vec()` for `slice`\n+    ///\n+    /// The lint will evaluate constant expressions and values as arguments of `.repeat(..)` and emit a message if\n+    /// they are equivalent to `1`. (Related discussion in [rust-clippy#7306](https://github.com/rust-lang/rust-clippy/issues/7306))\n+    ///\n+    /// ### Why is this bad?\n+    /// For example, `String.repeat(1)` is equivalent to `.clone()`. If cloning\n+    /// the string is the intention behind this, `clone()` should be used.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// fn main() {\n+    ///     let x = String::from(\"hello world\").repeat(1);\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn main() {\n+    ///     let x = String::from(\"hello world\").clone();\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.47.0\"]\n+    pub REPEAT_ONCE,\n+    complexity,\n+    \"using `.repeat(1)` instead of `String.clone()`, `str.to_string()` or `slice.to_vec()` \"\n+}\n+\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Option<RustcVersion>,\n@@ -2875,6 +2908,7 @@ impl_lint_pass!(Methods => [\n     NONSENSICAL_OPEN_OPTIONS,\n     PATH_BUF_PUSH_OVERWRITE,\n     RANGE_ZIP_WITH_LEN,\n+    REPEAT_ONCE,\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -3263,6 +3297,9 @@ impl Methods {\n                 (\"push\", [arg]) => {\n                     path_buf_push_overwrite::check(cx, expr, arg);\n                 },\n+                (\"repeat\", [arg]) => {\n+                    repeat_once::check(cx, expr, recv, arg);\n+                },\n                 (\"splitn\" | \"rsplitn\", [count_arg, pat_arg]) => {\n                     if let Some((Constant::Int(count), _)) = constant(cx, cx.typeck_results(), count_arg) {\n                         suspicious_splitn::check(cx, name, expr, recv, count);"}, {"sha": "0a14f9216ab383f44f197a25820471a84c09f29f", "filename": "clippy_lints/src/methods/repeat_once.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/06d752e28dcc4b343f9d437e59d7ebbedff3fde8/clippy_lints%2Fsrc%2Fmethods%2Frepeat_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d752e28dcc4b343f9d437e59d7ebbedff3fde8/clippy_lints%2Fsrc%2Fmethods%2Frepeat_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Frepeat_once.rs?ref=06d752e28dcc4b343f9d437e59d7ebbedff3fde8", "patch": "@@ -0,0 +1,52 @@\n+use clippy_utils::consts::{constant_context, Constant};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use rustc_errors::Applicability;\n+use rustc_hir::Expr;\n+use rustc_lint::LateContext;\n+use rustc_span::sym;\n+\n+use super::REPEAT_ONCE;\n+\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx Expr<'_>,\n+    recv: &'tcx Expr<'_>,\n+    repeat_arg: &'tcx Expr<'_>,\n+) {\n+    if constant_context(cx, cx.typeck_results()).expr(repeat_arg) == Some(Constant::Int(1)) {\n+        let ty = cx.typeck_results().expr_ty(recv).peel_refs();\n+        if ty.is_str() {\n+            span_lint_and_sugg(\n+                cx,\n+                REPEAT_ONCE,\n+                expr.span,\n+                \"calling `repeat(1)` on str\",\n+                \"consider using `.to_string()` instead\",\n+                format!(\"{}.to_string()\", snippet(cx, recv.span, r#\"\"...\"\"#)),\n+                Applicability::MachineApplicable,\n+            );\n+        } else if ty.builtin_index().is_some() {\n+            span_lint_and_sugg(\n+                cx,\n+                REPEAT_ONCE,\n+                expr.span,\n+                \"calling `repeat(1)` on slice\",\n+                \"consider using `.to_vec()` instead\",\n+                format!(\"{}.to_vec()\", snippet(cx, recv.span, r#\"\"...\"\"#)),\n+                Applicability::MachineApplicable,\n+            );\n+        } else if is_type_diagnostic_item(cx, ty, sym::String) {\n+            span_lint_and_sugg(\n+                cx,\n+                REPEAT_ONCE,\n+                expr.span,\n+                \"calling `repeat(1)` on a string literal\",\n+                \"consider using `.clone()` instead\",\n+                format!(\"{}.clone()\", snippet(cx, recv.span, r#\"\"...\"\"#)),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}"}, {"sha": "898c70ace66f35776c42c3b6a866022af81c7751", "filename": "clippy_lints/src/repeat_once.rs", "status": "removed", "additions": 0, "deletions": 89, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/fd5376194a4b74021ef01b7f2c96898ea204b75d/clippy_lints%2Fsrc%2Frepeat_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5376194a4b74021ef01b7f2c96898ea204b75d/clippy_lints%2Fsrc%2Frepeat_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Frepeat_once.rs?ref=fd5376194a4b74021ef01b7f2c96898ea204b75d", "patch": "@@ -1,89 +0,0 @@\n-use clippy_utils::consts::{constant_context, Constant};\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::snippet;\n-use clippy_utils::ty::is_type_diagnostic_item;\n-use if_chain::if_chain;\n-use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::sym;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for usage of `.repeat(1)` and suggest the following method for each types.\n-    /// - `.to_string()` for `str`\n-    /// - `.clone()` for `String`\n-    /// - `.to_vec()` for `slice`\n-    ///\n-    /// The lint will evaluate constant expressions and values as arguments of `.repeat(..)` and emit a message if\n-    /// they are equivalent to `1`. (Related discussion in [rust-clippy#7306](https://github.com/rust-lang/rust-clippy/issues/7306))\n-    ///\n-    /// ### Why is this bad?\n-    /// For example, `String.repeat(1)` is equivalent to `.clone()`. If cloning\n-    /// the string is the intention behind this, `clone()` should be used.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// fn main() {\n-    ///     let x = String::from(\"hello world\").repeat(1);\n-    /// }\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// fn main() {\n-    ///     let x = String::from(\"hello world\").clone();\n-    /// }\n-    /// ```\n-    #[clippy::version = \"1.47.0\"]\n-    pub REPEAT_ONCE,\n-    complexity,\n-    \"using `.repeat(1)` instead of `String.clone()`, `str.to_string()` or `slice.to_vec()` \"\n-}\n-\n-declare_lint_pass!(RepeatOnce => [REPEAT_ONCE]);\n-\n-impl<'tcx> LateLintPass<'tcx> for RepeatOnce {\n-    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'tcx Expr<'_>) {\n-        if_chain! {\n-            if let ExprKind::MethodCall(path, [receiver, count], _) = &expr.kind;\n-            if path.ident.name == sym!(repeat);\n-            if constant_context(cx, cx.typeck_results()).expr(count) == Some(Constant::Int(1));\n-            if !receiver.span.from_expansion();\n-            then {\n-                let ty = cx.typeck_results().expr_ty(receiver).peel_refs();\n-                if ty.is_str() {\n-                    span_lint_and_sugg(\n-                        cx,\n-                        REPEAT_ONCE,\n-                        expr.span,\n-                        \"calling `repeat(1)` on str\",\n-                        \"consider using `.to_string()` instead\",\n-                        format!(\"{}.to_string()\", snippet(cx, receiver.span, r#\"\"...\"\"#)),\n-                        Applicability::MachineApplicable,\n-                    );\n-                } else if ty.builtin_index().is_some() {\n-                    span_lint_and_sugg(\n-                        cx,\n-                        REPEAT_ONCE,\n-                        expr.span,\n-                        \"calling `repeat(1)` on slice\",\n-                        \"consider using `.to_vec()` instead\",\n-                        format!(\"{}.to_vec()\", snippet(cx, receiver.span, r#\"\"...\"\"#)),\n-                        Applicability::MachineApplicable,\n-                    );\n-                } else if is_type_diagnostic_item(cx, ty, sym::String) {\n-                    span_lint_and_sugg(\n-                        cx,\n-                        REPEAT_ONCE,\n-                        expr.span,\n-                        \"calling `repeat(1)` on a string literal\",\n-                        \"consider using `.clone()` instead\",\n-                        format!(\"{}.clone()\", snippet(cx, receiver.span, r#\"\"...\"\"#)),\n-                        Applicability::MachineApplicable,\n-                    );\n-                }\n-            }\n-        }\n-    }\n-}"}]}