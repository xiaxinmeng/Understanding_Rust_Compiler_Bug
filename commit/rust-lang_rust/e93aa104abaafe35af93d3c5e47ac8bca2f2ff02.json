{"sha": "e93aa104abaafe35af93d3c5e47ac8bca2f2ff02", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5M2FhMTA0YWJhYWZlMzVhZjkzZDNjNWU0N2FjOGJjYTJmMmZmMDI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-27T10:55:33Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-12-03T13:55:21Z"}, "message": "rustc_codegen_llvm: privatize as much of attributes::* as possible.", "tree": {"sha": "84237642d53688f37703419080b2dda4dab355f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84237642d53688f37703419080b2dda4dab355f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e93aa104abaafe35af93d3c5e47ac8bca2f2ff02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e93aa104abaafe35af93d3c5e47ac8bca2f2ff02", "html_url": "https://github.com/rust-lang/rust/commit/e93aa104abaafe35af93d3c5e47ac8bca2f2ff02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e93aa104abaafe35af93d3c5e47ac8bca2f2ff02/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd3c324b0714ed744220da1419d91a6d9efefc04", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd3c324b0714ed744220da1419d91a6d9efefc04", "html_url": "https://github.com/rust-lang/rust/commit/cd3c324b0714ed744220da1419d91a6d9efefc04"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "22ff0379624dccd55249e2659d079fb400d669f0", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e93aa104abaafe35af93d3c5e47ac8bca2f2ff02/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e93aa104abaafe35af93d3c5e47ac8bca2f2ff02/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=e93aa104abaafe35af93d3c5e47ac8bca2f2ff02", "patch": "@@ -26,7 +26,7 @@ use crate::value::Value;\n \n /// Mark LLVM function to use provided inline heuristic.\n #[inline]\n-pub fn inline(cx: &CodegenCx<'ll, '_>, val: &'ll Value, inline: InlineAttr) {\n+fn inline(cx: &CodegenCx<'ll, '_>, val: &'ll Value, inline: InlineAttr) {\n     use self::InlineAttr::*;\n     match inline {\n         Hint   => Attribute::InlineHint.apply_llfn(Function, val),\n@@ -58,7 +58,7 @@ fn unwind(val: &'ll Value, can_unwind: bool) {\n \n /// Tell LLVM if this function should be 'naked', i.e., skip the epilogue and prologue.\n #[inline]\n-pub fn naked(val: &'ll Value, is_naked: bool) {\n+fn naked(val: &'ll Value, is_naked: bool) {\n     Attribute::Naked.toggle_llfn(Function, val, is_naked);\n }\n \n@@ -72,7 +72,7 @@ pub fn set_frame_pointer_elimination(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value)\n \n /// Tell LLVM what instrument function to insert.\n #[inline]\n-pub fn set_instrument_function(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n+fn set_instrument_function(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n     if cx.sess().instrument_mcount() {\n         // Similar to `clang -pg` behavior. Handled by the\n         // `post-inline-ee-instrument` LLVM pass.\n@@ -88,7 +88,7 @@ pub fn set_instrument_function(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n     }\n }\n \n-pub fn set_probestack(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n+fn set_probestack(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n     // Only use stack probes if the target specification indicates that we\n     // should be using stack probes\n     if !cx.sess().target.target.options.stack_probes {"}]}