{"sha": "33ed8b5b24caf1e3d1d4d8020f61ca65102c87f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzZWQ4YjViMjRjYWYxZTNkMWQ0ZDgwMjBmNjFjYTY1MTAyYzg3Zjg=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-04-26T20:49:25Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-04-26T21:02:11Z"}, "message": "Remove needless_question_mark MSRV", "tree": {"sha": "d5072eac7f72e4dc7a5a4f3a93710d179e28cab6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5072eac7f72e4dc7a5a4f3a93710d179e28cab6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33ed8b5b24caf1e3d1d4d8020f61ca65102c87f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33ed8b5b24caf1e3d1d4d8020f61ca65102c87f8", "html_url": "https://github.com/rust-lang/rust/commit/33ed8b5b24caf1e3d1d4d8020f61ca65102c87f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33ed8b5b24caf1e3d1d4d8020f61ca65102c87f8/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a362a4d1d0edb66aef186c1d27b28c60573078f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a362a4d1d0edb66aef186c1d27b28c60573078f4", "html_url": "https://github.com/rust-lang/rust/commit/a362a4d1d0edb66aef186c1d27b28c60573078f4"}], "stats": {"total": 212, "additions": 13, "deletions": 199}, "files": [{"sha": "c84890299df09aaf38bf2237244b0f211c3154eb", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33ed8b5b24caf1e3d1d4d8020f61ca65102c87f8/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ed8b5b24caf1e3d1d4d8020f61ca65102c87f8/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=33ed8b5b24caf1e3d1d4d8020f61ca65102c87f8", "patch": "@@ -1076,7 +1076,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || box from_over_into::FromOverInto::new(msrv));\n     store.register_late_pass(move || box use_self::UseSelf::new(msrv));\n     store.register_late_pass(move || box missing_const_for_fn::MissingConstForFn::new(msrv));\n-    store.register_late_pass(move || box needless_question_mark::NeedlessQuestionMark::new(msrv));\n+    store.register_late_pass(move || box needless_question_mark::NeedlessQuestionMark);\n     store.register_late_pass(move || box casts::Casts::new(msrv));\n     store.register_early_pass(move || box unnested_or_patterns::UnnestedOrPatterns::new(msrv));\n "}, {"sha": "7b156a8c49dd9d93aec449e7898ce3acb7c09dba", "filename": "clippy_lints/src/needless_question_mark.rs", "status": "modified", "additions": 9, "deletions": 33, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/33ed8b5b24caf1e3d1d4d8020f61ca65102c87f8/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ed8b5b24caf1e3d1d4d8020f61ca65102c87f8/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_question_mark.rs?ref=33ed8b5b24caf1e3d1d4d8020f61ca65102c87f8", "patch": "@@ -1,15 +1,13 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::is_lang_ctor;\n use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{differing_macro_contexts, meets_msrv};\n+use clippy_utils::{differing_macro_contexts, is_lang_ctor};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::LangItem::{OptionSome, ResultOk};\n use rustc_hir::{Body, Expr, ExprKind, LangItem, MatchSource, QPath};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_semver::RustcVersion;\n-use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n declare_clippy_lint! {\n@@ -63,21 +61,7 @@ declare_clippy_lint! {\n     \"Suggest `value.inner_option` instead of `Some(value.inner_option?)`. The same goes for `Result<T, E>`.\"\n }\n \n-const NEEDLESS_QUESTION_MARK_RESULT_MSRV: RustcVersion = RustcVersion::new(1, 13, 0);\n-const NEEDLESS_QUESTION_MARK_OPTION_MSRV: RustcVersion = RustcVersion::new(1, 22, 0);\n-\n-pub struct NeedlessQuestionMark {\n-    msrv: Option<RustcVersion>,\n-}\n-\n-impl NeedlessQuestionMark {\n-    #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n-        Self { msrv }\n-    }\n-}\n-\n-impl_lint_pass!(NeedlessQuestionMark => [NEEDLESS_QUESTION_MARK]);\n+declare_lint_pass!(NeedlessQuestionMark => [NEEDLESS_QUESTION_MARK]);\n \n #[derive(Debug)]\n enum SomeOkCall<'a> {\n@@ -111,7 +95,7 @@ impl LateLintPass<'_> for NeedlessQuestionMark {\n             _ => return,\n         };\n \n-        if let Some(ok_some_call) = is_some_or_ok_call(self, cx, e) {\n+        if let Some(ok_some_call) = is_some_or_ok_call(cx, e) {\n             emit_lint(cx, &ok_some_call);\n         }\n     }\n@@ -127,14 +111,12 @@ impl LateLintPass<'_> for NeedlessQuestionMark {\n \n         if_chain! {\n             if let Some(expr) = expr_opt;\n-            if let Some(ok_some_call) = is_some_or_ok_call(self, cx, expr);\n+            if let Some(ok_some_call) = is_some_or_ok_call(cx, expr);\n             then {\n                 emit_lint(cx, &ok_some_call);\n             }\n         };\n     }\n-\n-    extract_msrv_attr!(LateContext);\n }\n \n fn emit_lint(cx: &LateContext<'_>, expr: &SomeOkCall<'_>) {\n@@ -153,11 +135,7 @@ fn emit_lint(cx: &LateContext<'_>, expr: &SomeOkCall<'_>) {\n     );\n }\n \n-fn is_some_or_ok_call<'a>(\n-    nqml: &NeedlessQuestionMark,\n-    cx: &'a LateContext<'_>,\n-    expr: &'a Expr<'_>,\n-) -> Option<SomeOkCall<'a>> {\n+fn is_some_or_ok_call<'a>(cx: &'a LateContext<'_>, expr: &'a Expr<'_>) -> Option<SomeOkCall<'a>> {\n     if_chain! {\n         // Check outer expression matches CALL_IDENT(ARGUMENT) format\n         if let ExprKind::Call(path, args) = &expr.kind;\n@@ -188,8 +166,7 @@ fn is_some_or_ok_call<'a>(\n             let inner_is_some = is_type_diagnostic_item(cx, inner_ty, sym::option_type);\n \n             // Check for Option MSRV\n-            let meets_option_msrv = meets_msrv(nqml.msrv.as_ref(), &NEEDLESS_QUESTION_MARK_OPTION_MSRV);\n-            if outer_is_some && inner_is_some && meets_option_msrv {\n+            if outer_is_some && inner_is_some {\n                 return Some(SomeOkCall::SomeCall(expr, inner_expr));\n             }\n \n@@ -202,8 +179,7 @@ fn is_some_or_ok_call<'a>(\n             let does_not_call_from = !has_implicit_error_from(cx, expr, inner_expr);\n \n             // Must meet Result MSRV\n-            let meets_result_msrv = meets_msrv(nqml.msrv.as_ref(), &NEEDLESS_QUESTION_MARK_RESULT_MSRV);\n-            if outer_is_result && inner_is_result && does_not_call_from && meets_result_msrv {\n+            if outer_is_result && inner_is_result && does_not_call_from {\n                 return Some(SomeOkCall::OkCall(expr, inner_expr));\n             }\n         }"}, {"sha": "d56855a71c159b2e1cdc351d7708e9f8371b3e46", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33ed8b5b24caf1e3d1d4d8020f61ca65102c87f8/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ed8b5b24caf1e3d1d4d8020f61ca65102c87f8/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=33ed8b5b24caf1e3d1d4d8020f61ca65102c87f8", "patch": "@@ -106,7 +106,7 @@ macro_rules! define_Conf {\n \n pub use self::helpers::Conf;\n define_Conf! {\n-    /// Lint: CLONED_INSTEAD_OF_COPIED, REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS, FROM_OVER_INTO, NEEDLESS_QUESTION_MARK, PTR_AS_PTR. The minimum rust version that the project supports\n+    /// Lint: CLONED_INSTEAD_OF_COPIED, REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS, FROM_OVER_INTO, PTR_AS_PTR. The minimum rust version that the project supports\n     (msrv, \"msrv\": Option<String>, None),\n     /// Lint: BLACKLISTED_NAME. The list of blacklisted names to lint about. NB: `bar` is not here since it has legitimate uses\n     (blacklisted_names, \"blacklisted_names\": Vec<String>, [\"foo\", \"baz\", \"quux\"].iter().map(ToString::to_string).collect()),"}, {"sha": "52ddd9d2dc8266ac128e0c9bcc17f9d7394ecd21", "filename": "tests/ui/needless_question_mark.fixed", "status": "modified", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/33ed8b5b24caf1e3d1d4d8020f61ca65102c87f8/tests%2Fui%2Fneedless_question_mark.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/33ed8b5b24caf1e3d1d4d8020f61ca65102c87f8/tests%2Fui%2Fneedless_question_mark.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_question_mark.fixed?ref=33ed8b5b24caf1e3d1d4d8020f61ca65102c87f8", "patch": "@@ -96,78 +96,6 @@ where\n \n fn main() {}\n \n-mod question_mark_none {\n-    #![clippy::msrv = \"1.12.0\"]\n-    fn needless_question_mark_option() -> Option<usize> {\n-        struct TO {\n-            magic: Option<usize>,\n-        }\n-        let to = TO { magic: None };\n-        Some(to.magic?) // should not be triggered\n-    }\n-\n-    fn needless_question_mark_result() -> Result<usize, bool> {\n-        struct TO {\n-            magic: Result<usize, bool>,\n-        }\n-        let to = TO { magic: Ok(1_usize) };\n-        Ok(to.magic?) // should not be triggered\n-    }\n-\n-    fn main() {\n-        needless_question_mark_option();\n-        needless_question_mark_result();\n-    }\n-}\n-\n-mod question_mark_result {\n-    #![clippy::msrv = \"1.21.0\"]\n-    fn needless_question_mark_option() -> Option<usize> {\n-        struct TO {\n-            magic: Option<usize>,\n-        }\n-        let to = TO { magic: None };\n-        Some(to.magic?) // should not be triggered\n-    }\n-\n-    fn needless_question_mark_result() -> Result<usize, bool> {\n-        struct TO {\n-            magic: Result<usize, bool>,\n-        }\n-        let to = TO { magic: Ok(1_usize) };\n-        to.magic // should be triggered\n-    }\n-\n-    fn main() {\n-        needless_question_mark_option();\n-        needless_question_mark_result();\n-    }\n-}\n-\n-mod question_mark_both {\n-    #![clippy::msrv = \"1.22.0\"]\n-    fn needless_question_mark_option() -> Option<usize> {\n-        struct TO {\n-            magic: Option<usize>,\n-        }\n-        let to = TO { magic: None };\n-        to.magic // should be triggered\n-    }\n-\n-    fn needless_question_mark_result() -> Result<usize, bool> {\n-        struct TO {\n-            magic: Result<usize, bool>,\n-        }\n-        let to = TO { magic: Ok(1_usize) };\n-        to.magic // should be triggered\n-    }\n-\n-    fn main() {\n-        needless_question_mark_option();\n-        needless_question_mark_result();\n-    }\n-}\n-\n // #6921 if a macro wraps an expr in Some(  ) and the ? is in the macro use,\n // the suggestion fails to apply; do not lint\n macro_rules! some_in_macro {"}, {"sha": "1ea4ba0d83fd76da23c3ac13bb4dcb3caf9cc801", "filename": "tests/ui/needless_question_mark.rs", "status": "modified", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/33ed8b5b24caf1e3d1d4d8020f61ca65102c87f8/tests%2Fui%2Fneedless_question_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ed8b5b24caf1e3d1d4d8020f61ca65102c87f8/tests%2Fui%2Fneedless_question_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_question_mark.rs?ref=33ed8b5b24caf1e3d1d4d8020f61ca65102c87f8", "patch": "@@ -96,78 +96,6 @@ where\n \n fn main() {}\n \n-mod question_mark_none {\n-    #![clippy::msrv = \"1.12.0\"]\n-    fn needless_question_mark_option() -> Option<usize> {\n-        struct TO {\n-            magic: Option<usize>,\n-        }\n-        let to = TO { magic: None };\n-        Some(to.magic?) // should not be triggered\n-    }\n-\n-    fn needless_question_mark_result() -> Result<usize, bool> {\n-        struct TO {\n-            magic: Result<usize, bool>,\n-        }\n-        let to = TO { magic: Ok(1_usize) };\n-        Ok(to.magic?) // should not be triggered\n-    }\n-\n-    fn main() {\n-        needless_question_mark_option();\n-        needless_question_mark_result();\n-    }\n-}\n-\n-mod question_mark_result {\n-    #![clippy::msrv = \"1.21.0\"]\n-    fn needless_question_mark_option() -> Option<usize> {\n-        struct TO {\n-            magic: Option<usize>,\n-        }\n-        let to = TO { magic: None };\n-        Some(to.magic?) // should not be triggered\n-    }\n-\n-    fn needless_question_mark_result() -> Result<usize, bool> {\n-        struct TO {\n-            magic: Result<usize, bool>,\n-        }\n-        let to = TO { magic: Ok(1_usize) };\n-        Ok(to.magic?) // should be triggered\n-    }\n-\n-    fn main() {\n-        needless_question_mark_option();\n-        needless_question_mark_result();\n-    }\n-}\n-\n-mod question_mark_both {\n-    #![clippy::msrv = \"1.22.0\"]\n-    fn needless_question_mark_option() -> Option<usize> {\n-        struct TO {\n-            magic: Option<usize>,\n-        }\n-        let to = TO { magic: None };\n-        Some(to.magic?) // should be triggered\n-    }\n-\n-    fn needless_question_mark_result() -> Result<usize, bool> {\n-        struct TO {\n-            magic: Result<usize, bool>,\n-        }\n-        let to = TO { magic: Ok(1_usize) };\n-        Ok(to.magic?) // should be triggered\n-    }\n-\n-    fn main() {\n-        needless_question_mark_option();\n-        needless_question_mark_result();\n-    }\n-}\n-\n // #6921 if a macro wraps an expr in Some(  ) and the ? is in the macro use,\n // the suggestion fails to apply; do not lint\n macro_rules! some_in_macro {"}, {"sha": "afd68d91e51fe54c022487f30388a72ea434511e", "filename": "tests/ui/needless_question_mark.stderr", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/33ed8b5b24caf1e3d1d4d8020f61ca65102c87f8/tests%2Fui%2Fneedless_question_mark.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33ed8b5b24caf1e3d1d4d8020f61ca65102c87f8/tests%2Fui%2Fneedless_question_mark.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_question_mark.stderr?ref=33ed8b5b24caf1e3d1d4d8020f61ca65102c87f8", "patch": "@@ -67,25 +67,7 @@ LL |         return Ok(t.magic?);\n    |                ^^^^^^^^^^^^ help: try: `t.magic`\n \n error: question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:138:9\n-   |\n-LL |         Ok(to.magic?) // should be triggered\n-   |         ^^^^^^^^^^^^^ help: try: `to.magic`\n-\n-error: question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:154:9\n-   |\n-LL |         Some(to.magic?) // should be triggered\n-   |         ^^^^^^^^^^^^^^^ help: try: `to.magic`\n-\n-error: question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:162:9\n-   |\n-LL |         Ok(to.magic?) // should be triggered\n-   |         ^^^^^^^^^^^^^ help: try: `to.magic`\n-\n-error: question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:187:27\n+  --> $DIR/needless_question_mark.rs:115:27\n    |\n LL |         || -> Option<_> { Some(Some($expr)?) }()\n    |                           ^^^^^^^^^^^^^^^^^^ help: try: `Some($expr)`\n@@ -95,5 +77,5 @@ LL |     let _x = some_and_qmark_in_macro!(x?);\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 12 previous errors\n "}]}