{"sha": "01172eedfab32b24e38aa86ba0cba24453e842fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMTcyZWVkZmFiMzJiMjRlMzhhYTg2YmEwY2JhMjQ0NTNlODQyZmI=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2015-01-20T19:10:55Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2015-01-31T10:38:48Z"}, "message": "Add tests for MultiItemDecorator", "tree": {"sha": "0273c0505e836f136856021009762a2ddc5d671a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0273c0505e836f136856021009762a2ddc5d671a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01172eedfab32b24e38aa86ba0cba24453e842fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01172eedfab32b24e38aa86ba0cba24453e842fb", "html_url": "https://github.com/rust-lang/rust/commit/01172eedfab32b24e38aa86ba0cba24453e842fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01172eedfab32b24e38aa86ba0cba24453e842fb/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e07b0d6be3d2ffcfb154b5cbbe02bc166014172", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e07b0d6be3d2ffcfb154b5cbbe02bc166014172", "html_url": "https://github.com/rust-lang/rust/commit/2e07b0d6be3d2ffcfb154b5cbbe02bc166014172"}], "stats": {"total": 137, "additions": 134, "deletions": 3}, "files": [{"sha": "d3c9659a1f1701ddda65b6d891528f1abf3218bd", "filename": "src/test/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 82, "deletions": 3, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/01172eedfab32b24e38aa86ba0cba24453e842fb/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01172eedfab32b24e38aa86ba0cba24453e842fb/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs?ref=01172eedfab32b24e38aa86ba0cba24453e842fb", "patch": "@@ -16,11 +16,10 @@\n extern crate syntax;\n extern crate rustc;\n \n-use syntax::ast::{TokenTree, Item, MetaItem, ImplItem, TraitItem, Method};\n+use syntax::ast::{self, TokenTree, Item, MetaItem, ImplItem, TraitItem, Method};\n use syntax::codemap::Span;\n use syntax::ext::base::*;\n-use syntax::parse::token;\n-use syntax::parse;\n+use syntax::parse::{self, token};\n use syntax::ptr::P;\n use rustc::plugin::Registry;\n \n@@ -40,6 +39,9 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_syntax_extension(\n         token::intern(\"into_multi_foo\"),\n         MultiModifier(box expand_into_foo_multi));\n+    reg.register_syntax_extension(\n+        token::intern(\"duplicate\"),\n+        MultiDecorator(box expand_duplicate));\n }\n \n fn expand_make_a_1(cx: &mut ExtCtxt, sp: Span, tts: &[TokenTree])\n@@ -92,6 +94,83 @@ fn expand_into_foo_multi(cx: &mut ExtCtxt,\n     }\n }\n \n+// Create a duplicate of the annotatable, based on the MetaItem\n+fn expand_duplicate(cx: &mut ExtCtxt,\n+                    sp: Span,\n+                    mi: &MetaItem,\n+                    it: &Annotatable,\n+                    mut push: Box<FnMut(Annotatable)>)\n+{\n+    let copy_name = match mi.node {\n+        ast::MetaItem_::MetaList(_, ref xs) => {\n+            if let ast::MetaItem_::MetaWord(ref w) = xs[0].node {\n+                token::str_to_ident(w.get())\n+            } else {\n+                cx.span_err(mi.span, \"Expected word\");\n+                return;\n+            }\n+        }\n+        _ => {\n+            cx.span_err(mi.span, \"Expected list\");\n+            return;\n+        }\n+    };\n+\n+    // Duplicate the item but replace its ident by the MetaItem\n+    match it.clone() {\n+        Annotatable::Item(it) => {\n+            let mut new_it = (*it).clone();\n+            new_it.attrs.clear();\n+            new_it.ident = copy_name;\n+            push(Annotatable::Item(P(new_it)));\n+        }\n+        Annotatable::ImplItem(it) => {\n+            match it {\n+                ImplItem::MethodImplItem(m) => {\n+                    let mut new_m = (*m).clone();\n+                    new_m.attrs.clear();\n+                    replace_method_name(&mut new_m.node, copy_name);\n+                    push(Annotatable::ImplItem(ImplItem::MethodImplItem(P(new_m))));\n+                }\n+                ImplItem::TypeImplItem(t) => {\n+                    let mut new_t = (*t).clone();\n+                    new_t.attrs.clear();\n+                    new_t.ident = copy_name;\n+                    push(Annotatable::ImplItem(ImplItem::TypeImplItem(P(new_t))));\n+                }\n+            }\n+        }\n+        Annotatable::TraitItem(it) => {\n+            match it {\n+                TraitItem::RequiredMethod(rm) => {\n+                    let mut new_rm = rm.clone();\n+                    new_rm.attrs.clear();\n+                    new_rm.ident = copy_name;\n+                    push(Annotatable::TraitItem(TraitItem::RequiredMethod(new_rm)));\n+                }\n+                TraitItem::ProvidedMethod(pm) => {\n+                    let mut new_pm = (*pm).clone();\n+                    new_pm.attrs.clear();\n+                    replace_method_name(&mut new_pm.node, copy_name);\n+                    push(Annotatable::TraitItem(TraitItem::ProvidedMethod(P(new_pm))));\n+                }\n+                TraitItem::TypeTraitItem(t) => {\n+                    let mut new_t = (*t).clone();\n+                    new_t.attrs.clear();\n+                    new_t.ty_param.ident = copy_name;\n+                    push(Annotatable::TraitItem(TraitItem::TypeTraitItem(P(new_t))));\n+                }\n+            }\n+        }\n+    }\n+\n+    fn replace_method_name(m: &mut ast::Method_, i: ast::Ident) {\n+        if let &mut ast::Method_::MethDecl(ref mut ident, _, _, _, _, _, _, _) = m {\n+            *ident = i\n+        }\n+    }\n+}\n+\n fn expand_forged_ident(cx: &mut ExtCtxt, sp: Span, tts: &[TokenTree]) -> Box<MacResult+'static> {\n     use syntax::ext::quote::rt::*;\n "}, {"sha": "45341d12d074318c67cdea36bfe3fa244a27b9b3", "filename": "src/test/run-pass-fulldeps/macro-crate-multi-decorator.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/01172eedfab32b24e38aa86ba0cba24453e842fb/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-multi-decorator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01172eedfab32b24e38aa86ba0cba24453e842fb/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-multi-decorator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-multi-decorator.rs?ref=01172eedfab32b24e38aa86ba0cba24453e842fb", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:macro_crate_test.rs\n+// ignore-stage1\n+\n+#![feature(plugin)]\n+\n+#[plugin] #[no_link]\n+extern crate macro_crate_test;\n+\n+// The duplicate macro will create a copy of the item with the given identifier\n+#[duplicate(MyCopy)]\n+struct MyStruct {\n+    number: i32\n+}\n+\n+trait TestTrait {\n+    #[duplicate(TestType2)]\n+    type TestType;\n+\n+    #[duplicate(required_fn2)]\n+    fn required_fn(&self);\n+\n+    #[duplicate(provided_fn2)]\n+    fn provided_fn(&self) { }\n+}\n+\n+impl TestTrait for MyStruct {\n+    #[duplicate(TestType2)]\n+    type TestType = f64;\n+\n+    #[duplicate(required_fn2)]\n+    fn required_fn(&self) { }\n+}\n+\n+fn main() {\n+    let s = MyStruct { number: 42 };\n+    s.required_fn();\n+    s.required_fn2();\n+    s.provided_fn();\n+    s.provided_fn2();\n+\n+    let s = MyCopy { number: 42 };\n+}"}]}