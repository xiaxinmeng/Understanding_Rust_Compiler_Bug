{"sha": "505cf52c537c0d64ecf72e12e9853e8693b30406", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNWNmNTJjNTM3YzBkNjRlY2Y3MmUxMmU5ODUzZTg2OTNiMzA0MDY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-23T20:10:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-23T20:10:07Z"}, "message": "Rollup merge of #73523 - jyn514:everybody_loops, r=ecstatic-morse\n\nFix -Z unpretty=everybody_loops\n\nIt turns out that this has not been working for who knows how long.\nPreviously:\n\n```\npub fn h() { 1 + 2; }\n```\n\nAfter this change:\n\n```\npub fn h() { loop { } }\n```\n\nThis only affected the pass when run with the command line\npretty-printing option, so rustdoc was still replacing bodies with\n`loop {}`.", "tree": {"sha": "4fb2bd3f5ca240249ce799feb31c88eecb852a42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fb2bd3f5ca240249ce799feb31c88eecb852a42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/505cf52c537c0d64ecf72e12e9853e8693b30406", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe8mGgCRBK7hj4Ov3rIwAAdHIIAKKpCUFJzxrNc5zwvLo8dmAt\nwTLzZXkqkVm8z6CeJxN3IxJYbmqNQMTeJ5r7RoKAaYNaxihXG2Yyi9GJx/HLIPpP\nndz4672KjVICioovrWvt8c6sDHyQROIxY8WOhY6Aim/CpH8ZEiSF9zNbKn1QIldg\nkhujHAB+IbCDgD8LGAEvrCxWhyFCVIw7Q5lUys3HeSDEb9IeeintqGQUvr4qUf/1\nK6qgrdBcQ7g8iA3BOOR/Q8I5U7+PmwQM7puPF+pHWbMu2NJceN7amDEaVEb74CY3\nk1M63/jV5w55wzPAnVsoGsRIFCBIIjrX1XkY69OyPc/XaSeHivCqyQL4LAURP1M=\n=DZ/D\n-----END PGP SIGNATURE-----\n", "payload": "tree 4fb2bd3f5ca240249ce799feb31c88eecb852a42\nparent f5e46fe46c2931fa6c0eea78d7fb424ab01606fc\nparent 95f8daa82b52e95081b66d58953c2329a9f0458e\nauthor Manish Goregaokar <manishsmail@gmail.com> 1592943007 -0700\ncommitter GitHub <noreply@github.com> 1592943007 -0700\n\nRollup merge of #73523 - jyn514:everybody_loops, r=ecstatic-morse\n\nFix -Z unpretty=everybody_loops\n\nIt turns out that this has not been working for who knows how long.\nPreviously:\n\n```\npub fn h() { 1 + 2; }\n```\n\nAfter this change:\n\n```\npub fn h() { loop { } }\n```\n\nThis only affected the pass when run with the command line\npretty-printing option, so rustdoc was still replacing bodies with\n`loop {}`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/505cf52c537c0d64ecf72e12e9853e8693b30406", "html_url": "https://github.com/rust-lang/rust/commit/505cf52c537c0d64ecf72e12e9853e8693b30406", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/505cf52c537c0d64ecf72e12e9853e8693b30406/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5e46fe46c2931fa6c0eea78d7fb424ab01606fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5e46fe46c2931fa6c0eea78d7fb424ab01606fc", "html_url": "https://github.com/rust-lang/rust/commit/f5e46fe46c2931fa6c0eea78d7fb424ab01606fc"}, {"sha": "95f8daa82b52e95081b66d58953c2329a9f0458e", "url": "https://api.github.com/repos/rust-lang/rust/commits/95f8daa82b52e95081b66d58953c2329a9f0458e", "html_url": "https://github.com/rust-lang/rust/commit/95f8daa82b52e95081b66d58953c2329a9f0458e"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "b45ab0f80ffac4a4cd2c4b3b1c4068d3b0b32a26", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/505cf52c537c0d64ecf72e12e9853e8693b30406/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/505cf52c537c0d64ecf72e12e9853e8693b30406/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=505cf52c537c0d64ecf72e12e9853e8693b30406", "patch": "@@ -307,6 +307,7 @@ pub fn run_compiler(\n                         compiler.output_file().as_ref().map(|p| &**p),\n                     );\n                 }\n+                trace!(\"finished pretty-printing\");\n                 return early_exit();\n             }\n "}, {"sha": "920cc6021e68781d3933c7c697cc616019095c8f", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/505cf52c537c0d64ecf72e12e9853e8693b30406/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/505cf52c537c0d64ecf72e12e9853e8693b30406/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=505cf52c537c0d64ecf72e12e9853e8693b30406", "patch": "@@ -202,6 +202,7 @@ pub fn run_compiler_in_existing_thread_pool<R>(\n }\n \n pub fn run_compiler<R: Send>(mut config: Config, f: impl FnOnce(&Compiler) -> R + Send) -> R {\n+    log::trace!(\"run_compiler\");\n     let stderr = config.stderr.take();\n     util::spawn_thread_pool(\n         config.opts.edition,"}, {"sha": "c0a67f20a1e8c4ea09c4241adc109ee1b2203c81", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/505cf52c537c0d64ecf72e12e9853e8693b30406/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/505cf52c537c0d64ecf72e12e9853e8693b30406/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=505cf52c537c0d64ecf72e12e9853e8693b30406", "patch": "@@ -101,6 +101,7 @@ pub fn configure_and_expand(\n     krate: ast::Crate,\n     crate_name: &str,\n ) -> Result<(ast::Crate, BoxedResolver)> {\n+    log::trace!(\"configure_and_expand\");\n     // Currently, we ignore the name resolution data structures for the purposes of dependency\n     // tracking. Instead we will run name resolution and include its output in the hash of each\n     // item, much like we do for macro expansion. In other words, the hash reflects not just\n@@ -230,6 +231,7 @@ fn configure_and_expand_inner<'a>(\n     resolver_arenas: &'a ResolverArenas<'a>,\n     metadata_loader: &'a MetadataLoaderDyn,\n ) -> Result<(ast::Crate, Resolver<'a>)> {\n+    log::trace!(\"configure_and_expand_inner\");\n     pre_expansion_lint(sess, lint_store, &krate);\n \n     let mut resolver = Resolver::new(sess, &krate, crate_name, metadata_loader, &resolver_arenas);\n@@ -357,6 +359,7 @@ fn configure_and_expand_inner<'a>(\n         should_loop |= true;\n     }\n     if should_loop {\n+        log::debug!(\"replacing bodies with loop {{}}\");\n         util::ReplaceBodyWithLoop::new(&mut resolver).visit_crate(&mut krate);\n     }\n "}, {"sha": "4a41c3e97cafc3c99ee59ad811c8d9a01688b9ac", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/505cf52c537c0d64ecf72e12e9853e8693b30406/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/505cf52c537c0d64ecf72e12e9853e8693b30406/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=505cf52c537c0d64ecf72e12e9853e8693b30406", "patch": "@@ -169,6 +169,7 @@ impl<'tcx> Queries<'tcx> {\n     pub fn expansion(\n         &self,\n     ) -> Result<&Query<(ast::Crate, Steal<Rc<RefCell<BoxedResolver>>>, Lrc<LintStore>)>> {\n+        log::trace!(\"expansion\");\n         self.expansion.compute(|| {\n             let crate_name = self.crate_name()?.peek().clone();\n             let (krate, lint_store) = self.register_plugins()?.take();"}, {"sha": "c5a866817cb4a1930a5b085f22f32d11d50212c2", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/505cf52c537c0d64ecf72e12e9853e8693b30406/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/505cf52c537c0d64ecf72e12e9853e8693b30406/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=505cf52c537c0d64ecf72e12e9853e8693b30406", "patch": "@@ -1849,6 +1849,7 @@ fn parse_pretty(\n                 }\n             }\n         };\n+        log::debug!(\"got unpretty option: {:?}\", first);\n         first\n     }\n }\n@@ -1977,9 +1978,11 @@ impl PpMode {\n         use PpMode::*;\n         use PpSourceMode::*;\n         match *self {\n-            PpmSource(PpmNormal | PpmEveryBodyLoops | PpmIdentified) => false,\n+            PpmSource(PpmNormal | PpmIdentified) => false,\n \n-            PpmSource(PpmExpanded | PpmExpandedIdentified | PpmExpandedHygiene)\n+            PpmSource(\n+                PpmExpanded | PpmEveryBodyLoops | PpmExpandedIdentified | PpmExpandedHygiene,\n+            )\n             | PpmHir(_)\n             | PpmHirTree(_)\n             | PpmMir"}]}