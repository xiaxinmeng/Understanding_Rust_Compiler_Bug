{"sha": "4b01d11f92133f62bff230f91ed01692f9886c9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMDFkMTFmOTIxMzNmNjJiZmYyMzBmOTFlZDAxNjkyZjk4ODZjOWU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-02T03:48:44Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-02T03:48:44Z"}, "message": "Organize std.rc and make exports explicit", "tree": {"sha": "e644060cffbf9a3e52bea4825e9d31f2b6e219e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e644060cffbf9a3e52bea4825e9d31f2b6e219e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b01d11f92133f62bff230f91ed01692f9886c9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b01d11f92133f62bff230f91ed01692f9886c9e", "html_url": "https://github.com/rust-lang/rust/commit/4b01d11f92133f62bff230f91ed01692f9886c9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b01d11f92133f62bff230f91ed01692f9886c9e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35affdfa61b7440137d545436498324ee1b761f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/35affdfa61b7440137d545436498324ee1b761f9", "html_url": "https://github.com/rust-lang/rust/commit/35affdfa61b7440137d545436498324ee1b761f9"}], "stats": {"total": 128, "additions": 77, "deletions": 51}, "files": [{"sha": "75b3798ae6c0250dea7852a5b754b163b6aedc53", "filename": "src/lib/std.rc", "status": "modified", "additions": 77, "deletions": 51, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/4b01d11f92133f62bff230f91ed01692f9886c9e/src%2Flib%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/4b01d11f92133f62bff230f91ed01692f9886c9e/src%2Flib%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstd.rc?ref=4b01d11f92133f62bff230f91ed01692f9886c9e", "patch": "@@ -3,50 +3,91 @@\n        uuid = \"122bed0b-c19b-4b82-b0b7-7ae8aead7297\",\n        url = \"http://rust-lang.org/src/std\")];\n \n-#[comment = \"Rust standard library\"];\n+#[comment = \"The Rust standard library\"];\n #[license = \"BSD\"];\n \n-// Built-in types support modules.\n \n+export box, char, float, int, str, ptr, uint, u8, u32, u64, vec;\n+export aio, comm, fs, io, net, run, sio, sys, task;\n+export ctypes, either, option, result, util;\n+export bitv, deque, fun_treemap, list, map, smallintmap, sort, treemap, ufind;\n+export ebml, dbg, getopts, math, rand, sha1, term, time, unsafe;\n+export extfmt, test;\n+// FIXME: generic_os and os_fs shouldn't be exported\n+export generic_os, os, os_fs;\n+\n+\n+// Built-in types support modules\n+\n+mod box;\n mod char;\n+mod float;\n mod int;\n+mod str;\n+mod ptr;\n mod uint;\n mod u8;\n mod u32;\n mod u64;\n mod vec;\n-mod str;\n-mod float;\n \n-// General io and system-services modules.\n \n+// General io and system-services modules\n+\n+mod aio;\n+mod comm;\n+mod fs;\n mod io;\n+mod net;\n+mod run = \"run_program.rs\";\n+mod sio;\n mod sys;\n mod task;\n-mod comm;\n \n-// Utility modules.\n \n+// Utility modules\n+\n+mod ctypes;\n mod either;\n mod option;\n+mod result;\n mod util;\n-mod ctypes;\n \n-// Authorize various rule-bendings.\n \n-auth io = unsafe;\n-auth fs = unsafe;\n-auth os_fs = unsafe;\n-auth run = unsafe;\n-auth str = unsafe;\n-auth vec = unsafe;\n-auth task = unsafe;\n+// Collections\n \n-auth dbg = unsafe;\n+mod bitv;\n+mod deque;\n+mod fun_treemap;\n+mod list;\n+mod map;\n+mod smallintmap;\n+mod sort;\n+mod treemap;\n+mod ufind;\n+\n+\n+// And ... other stuff\n+\n+mod ebml;\n+mod dbg;\n+mod getopts;\n+mod math;\n+mod rand;\n+mod sha1;\n+mod term;\n+mod time;\n+mod unsafe;\n+\n+#[cfg(unicode)]\n+mod unicode;\n+\n+\n+// Compiler support modules\n+\n+mod extfmt;\n+mod test;\n \n-auth uint::next_power_of_two = unsafe;\n-auth map::mk_hashmap = unsafe;\n-auth rand::mk_rng = unsafe;\n \n // Target-os module.\n \n@@ -68,39 +109,24 @@ mod os = \"linux_os.rs\";\n #[cfg(target_os = \"linux\")]\n mod os_fs = \"posix_fs.rs\";\n \n-mod run = \"run_program.rs\";\n-mod fs;\n-mod aio;\n-mod sio;\n-mod net;\n \n-// FIXME: parametric\n-mod map;\n-mod treemap;\n-mod fun_treemap;\n-mod deque;\n-mod list;\n-mod rand;\n-mod dbg;\n-mod bitv;\n-mod sort;\n-mod sha1;\n-mod ebml;\n-mod ufind;\n-mod extfmt;\n-mod box;\n-mod getopts;\n-mod time;\n-mod smallintmap;\n-mod ptr;\n-mod test;\n-mod unsafe;\n-mod term;\n-mod math;\n-mod result;\n+// FIXME: This doesn't do anything.\n+// Authorize various rule-bendings.\n+\n+auth io = unsafe;\n+auth fs = unsafe;\n+auth os_fs = unsafe;\n+auth run = unsafe;\n+auth str = unsafe;\n+auth vec = unsafe;\n+auth task = unsafe;\n+\n+auth dbg = unsafe;\n+\n+auth uint::next_power_of_two = unsafe;\n+auth map::mk_hashmap = unsafe;\n+auth rand::mk_rng = unsafe;\n \n-#[cfg(unicode)]\n-mod unicode;\n \n // Local Variables:\n // mode: rust;"}]}