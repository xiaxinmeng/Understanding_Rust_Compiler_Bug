{"sha": "a722f70207cf8419150c52cbf79ef5b9eadb1639", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MjJmNzAyMDdjZjg0MTkxNTBjNTJjYmY3OWVmNWI5ZWFkYjE2Mzk=", "commit": {"author": {"name": "Valerii Hiora", "email": "valerii.hiora@gmail.com", "date": "2014-11-07T17:12:43Z"}, "committer": {"name": "Valerii Hiora", "email": "valerii.hiora@gmail.com", "date": "2014-11-07T17:14:22Z"}, "message": "Properly static lib packaging\n\nFixes #18574", "tree": {"sha": "6641747d1516f46ff60e855e2584643fed9d4c40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6641747d1516f46ff60e855e2584643fed9d4c40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a722f70207cf8419150c52cbf79ef5b9eadb1639", "comment_count": 7, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a722f70207cf8419150c52cbf79ef5b9eadb1639", "html_url": "https://github.com/rust-lang/rust/commit/a722f70207cf8419150c52cbf79ef5b9eadb1639", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a722f70207cf8419150c52cbf79ef5b9eadb1639/comments", "author": {"login": "vhbit", "id": 140199, "node_id": "MDQ6VXNlcjE0MDE5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/140199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vhbit", "html_url": "https://github.com/vhbit", "followers_url": "https://api.github.com/users/vhbit/followers", "following_url": "https://api.github.com/users/vhbit/following{/other_user}", "gists_url": "https://api.github.com/users/vhbit/gists{/gist_id}", "starred_url": "https://api.github.com/users/vhbit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vhbit/subscriptions", "organizations_url": "https://api.github.com/users/vhbit/orgs", "repos_url": "https://api.github.com/users/vhbit/repos", "events_url": "https://api.github.com/users/vhbit/events{/privacy}", "received_events_url": "https://api.github.com/users/vhbit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vhbit", "id": 140199, "node_id": "MDQ6VXNlcjE0MDE5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/140199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vhbit", "html_url": "https://github.com/vhbit", "followers_url": "https://api.github.com/users/vhbit/followers", "following_url": "https://api.github.com/users/vhbit/following{/other_user}", "gists_url": "https://api.github.com/users/vhbit/gists{/gist_id}", "starred_url": "https://api.github.com/users/vhbit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vhbit/subscriptions", "organizations_url": "https://api.github.com/users/vhbit/orgs", "repos_url": "https://api.github.com/users/vhbit/repos", "events_url": "https://api.github.com/users/vhbit/events{/privacy}", "received_events_url": "https://api.github.com/users/vhbit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "223ca7643976c89c76d78337a5f7a9b1677cc0f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/223ca7643976c89c76d78337a5f7a9b1677cc0f1", "html_url": "https://github.com/rust-lang/rust/commit/223ca7643976c89c76d78337a5f7a9b1677cc0f1"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "30c76a7bf5f4c641ce9b239cfb2138f718bab922", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a722f70207cf8419150c52cbf79ef5b9eadb1639/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a722f70207cf8419150c52cbf79ef5b9eadb1639/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=a722f70207cf8419150c52cbf79ef5b9eadb1639", "patch": "@@ -734,7 +734,7 @@ fn link_staticlib(sess: &Session, obj_filename: &Path, out_filename: &Path) {\n     let mut all_native_libs = vec![];\n \n     for &(cnum, ref path) in crates.iter() {\n-        let name = sess.cstore.get_crate_data(cnum).name.clone();\n+        let ref name = sess.cstore.get_crate_data(cnum).name;\n         let p = match *path {\n             Some(ref p) => p.clone(), None => {\n                 sess.err(format!(\"could not find rlib for: `{}`\","}, {"sha": "03b439b32c0138cc51722eb78f30da79661be316", "filename": "src/librustc_back/archive.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a722f70207cf8419150c52cbf79ef5b9eadb1639/src%2Flibrustc_back%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a722f70207cf8419150c52cbf79ef5b9eadb1639/src%2Flibrustc_back%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Farchive.rs?ref=a722f70207cf8419150c52cbf79ef5b9eadb1639", "patch": "@@ -183,7 +183,7 @@ impl<'a> ArchiveBuilder<'a> {\n                                     self.archive.slib_suffix.as_slice(),\n                                     self.archive.lib_search_paths.as_slice(),\n                                     self.archive.handler);\n-        self.add_archive(&location, name, [])\n+        self.add_archive(&location, name, |_| false)\n     }\n \n     /// Adds all of the contents of the rlib at the specified path to this\n@@ -193,13 +193,20 @@ impl<'a> ArchiveBuilder<'a> {\n     /// then the object file also isn't added.\n     pub fn add_rlib(&mut self, rlib: &Path, name: &str,\n                     lto: bool) -> io::IoResult<()> {\n-        let object = format!(\"{}.o\", name);\n-        let bytecode = format!(\"{}.bytecode.deflate\", name);\n-        let mut ignore = vec!(bytecode.as_slice(), METADATA_FILENAME);\n-        if lto {\n-            ignore.push(object.as_slice());\n-        }\n-        self.add_archive(rlib, name, ignore.as_slice())\n+        // Ignoring obj file starting with the crate name\n+        // as simple comparison is not enough - there\n+        // might be also an extra name suffix\n+        let obj_start = format!(\"{}\", name);\n+        let obj_start = obj_start.as_slice();\n+        // Ignoring all bytecode files, no matter of\n+        // name\n+        let bc_ext = \".bytecode.deflate\";\n+\n+        self.add_archive(rlib, name.as_slice(), |fname: &str| {\n+            let skip_obj = lto && fname.starts_with(obj_start)\n+                && fname.ends_with(\".o\");\n+            skip_obj || fname.ends_with(bc_ext) || fname == METADATA_FILENAME\n+        })\n     }\n \n     /// Adds an arbitrary file to this archive\n@@ -273,7 +280,7 @@ impl<'a> ArchiveBuilder<'a> {\n     }\n \n     fn add_archive(&mut self, archive: &Path, name: &str,\n-                   skip: &[&str]) -> io::IoResult<()> {\n+                   skip: |&str| -> bool) -> io::IoResult<()> {\n         let loc = TempDir::new(\"rsar\").unwrap();\n \n         // First, extract the contents of the archive to a temporary directory.\n@@ -295,7 +302,7 @@ impl<'a> ArchiveBuilder<'a> {\n         let files = try!(fs::readdir(loc.path()));\n         for file in files.iter() {\n             let filename = file.filename_str().unwrap();\n-            if skip.iter().any(|s| *s == filename) { continue }\n+            if skip(filename) { continue }\n             if filename.contains(\".SYMDEF\") { continue }\n \n             let filename = format!(\"r-{}-{}\", name, filename);"}]}