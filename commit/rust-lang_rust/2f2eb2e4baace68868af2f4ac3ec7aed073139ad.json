{"sha": "2f2eb2e4baace68868af2f4ac3ec7aed073139ad", "node_id": "C_kwDOAAsO6NoAKDJmMmViMmU0YmFhY2U2ODg2OGFmMmY0YWMzZWM3YWVkMDczMTM5YWQ", "commit": {"author": {"name": "Nadir Fejzic", "email": "nadirfejzo@gmail.com", "date": "2022-11-07T19:58:49Z"}, "committer": {"name": "Nadir Fejzic", "email": "nadirfejzo@gmail.com", "date": "2022-11-10T14:47:12Z"}, "message": "refactor: lint man. instant elapsed and unch. dur. subtr. in single pass", "tree": {"sha": "0bac51761e870780fdf96a4a71c23780f8f97650", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bac51761e870780fdf96a4a71c23780f8f97650"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f2eb2e4baace68868af2f4ac3ec7aed073139ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f2eb2e4baace68868af2f4ac3ec7aed073139ad", "html_url": "https://github.com/rust-lang/rust/commit/2f2eb2e4baace68868af2f4ac3ec7aed073139ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f2eb2e4baace68868af2f4ac3ec7aed073139ad/comments", "author": {"login": "nfejzic", "id": 40841816, "node_id": "MDQ6VXNlcjQwODQxODE2", "avatar_url": "https://avatars.githubusercontent.com/u/40841816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nfejzic", "html_url": "https://github.com/nfejzic", "followers_url": "https://api.github.com/users/nfejzic/followers", "following_url": "https://api.github.com/users/nfejzic/following{/other_user}", "gists_url": "https://api.github.com/users/nfejzic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nfejzic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nfejzic/subscriptions", "organizations_url": "https://api.github.com/users/nfejzic/orgs", "repos_url": "https://api.github.com/users/nfejzic/repos", "events_url": "https://api.github.com/users/nfejzic/events{/privacy}", "received_events_url": "https://api.github.com/users/nfejzic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nfejzic", "id": 40841816, "node_id": "MDQ6VXNlcjQwODQxODE2", "avatar_url": "https://avatars.githubusercontent.com/u/40841816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nfejzic", "html_url": "https://github.com/nfejzic", "followers_url": "https://api.github.com/users/nfejzic/followers", "following_url": "https://api.github.com/users/nfejzic/following{/other_user}", "gists_url": "https://api.github.com/users/nfejzic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nfejzic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nfejzic/subscriptions", "organizations_url": "https://api.github.com/users/nfejzic/orgs", "repos_url": "https://api.github.com/users/nfejzic/repos", "events_url": "https://api.github.com/users/nfejzic/events{/privacy}", "received_events_url": "https://api.github.com/users/nfejzic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b485832b16a388dbcfd3c42030356959e7662a3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b485832b16a388dbcfd3c42030356959e7662a3d", "html_url": "https://github.com/rust-lang/rust/commit/b485832b16a388dbcfd3c42030356959e7662a3d"}], "stats": {"total": 152, "additions": 71, "deletions": 81}, "files": [{"sha": "8cc5643c9a7b8ae43ad9e20f833a3a885d104f26", "filename": "clippy_lints/src/instant_subtraction.rs", "status": "renamed", "additions": 69, "deletions": 9, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/2f2eb2e4baace68868af2f4ac3ec7aed073139ad/clippy_lints%2Fsrc%2Finstant_subtraction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f2eb2e4baace68868af2f4ac3ec7aed073139ad/clippy_lints%2Fsrc%2Finstant_subtraction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finstant_subtraction.rs?ref=2f2eb2e4baace68868af2f4ac3ec7aed073139ad", "patch": "@@ -1,17 +1,48 @@\n-use clippy_utils::{diagnostics, meets_msrv, msrvs, source, ty};\n+use clippy_utils::{\n+    diagnostics::{self, span_lint_and_sugg},\n+    meets_msrv, msrvs, source, ty,\n+};\n use rustc_errors::Applicability;\n-use rustc_hir::*;\n+use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::symbol::sym;\n+use rustc_span::{source_map::Spanned, sym};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Lints subtraction between `Instant::now()` and another `Instant`.\n+    ///\n+    /// ### Why is this bad?\n+    /// It is easy to accidentally write `prev_instant - Instant::now()`, which will always be 0ns\n+    /// as `Instant` subtraction saturates.\n+    ///\n+    /// `prev_instant.elapsed()` also more clearly signals intention.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// use std::time::Instant;\n+    /// let prev_instant = Instant::now();\n+    /// let duration = Instant::now() - prev_instant;\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// use std::time::Instant;\n+    /// let prev_instant = Instant::now();\n+    /// let duration = prev_instant.elapsed();\n+    /// ```\n+    #[clippy::version = \"1.64.0\"]\n+    pub MANUAL_INSTANT_ELAPSED,\n+    pedantic,\n+    \"subtraction between `Instant::now()` and previous `Instant`\"\n+}\n \n declare_clippy_lint! {\n     /// ### What it does\n     /// Finds patterns of unchecked subtraction of [`Duration`] from [`Instant::now()`].\n     ///\n     /// ### Why is this bad?\n-    /// Unchecked subtraction could cause underflow on certain platforms, leading to bugs and/or\n+    /// Unchecked subtraction could cause underflow on certain platforms, leading to\n     /// unintentional panics.\n     ///\n     /// ### Example\n@@ -32,21 +63,39 @@ declare_clippy_lint! {\n     \"finds unchecked subtraction of a 'Duration' from an 'Instant'\"\n }\n \n-pub struct UncheckedDurationSubtraction {\n+pub struct InstantSubtraction {\n     msrv: Option<RustcVersion>,\n }\n \n-impl UncheckedDurationSubtraction {\n+impl InstantSubtraction {\n     #[must_use]\n     pub fn new(msrv: Option<RustcVersion>) -> Self {\n         Self { msrv }\n     }\n }\n \n-impl_lint_pass!(UncheckedDurationSubtraction => [UNCHECKED_DURATION_SUBTRACTION]);\n+impl_lint_pass!(InstantSubtraction => [MANUAL_INSTANT_ELAPSED, UNCHECKED_DURATION_SUBTRACTION]);\n+\n+impl LateLintPass<'_> for InstantSubtraction {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'_ Expr<'_>) {\n+        if let ExprKind::Binary(Spanned {node: BinOpKind::Sub, ..}, lhs, rhs) = expr.kind\n+            && check_instant_now_call(cx, lhs)\n+            && let ty_resolved = cx.typeck_results().expr_ty(rhs)\n+            && let rustc_middle::ty::Adt(def, _) = ty_resolved.kind()\n+            && clippy_utils::match_def_path(cx, def.did(), &clippy_utils::paths::INSTANT)\n+            && let Some(sugg) = clippy_utils::sugg::Sugg::hir_opt(cx, rhs)\n+        {\n+            span_lint_and_sugg(\n+                cx,\n+                MANUAL_INSTANT_ELAPSED,\n+                expr.span,\n+                \"manual implementation of `Instant::elapsed`\",\n+                \"try\",\n+                format!(\"{}.elapsed()\", sugg.maybe_par()),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n \n-impl<'tcx> LateLintPass<'tcx> for UncheckedDurationSubtraction {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n         if expr.span.from_expansion() || !meets_msrv(self.msrv, msrvs::TRY_FROM) {\n             return;\n         }\n@@ -67,6 +116,17 @@ impl<'tcx> LateLintPass<'tcx> for UncheckedDurationSubtraction {\n     }\n }\n \n+fn check_instant_now_call(cx: &LateContext<'_>, expr_block: &'_ Expr<'_>) -> bool {\n+    if let ExprKind::Call(fn_expr, []) = expr_block.kind\n+        && let Some(fn_id) = clippy_utils::path_def_id(cx, fn_expr)\n+        && clippy_utils::match_def_path(cx, fn_id, &clippy_utils::paths::INSTANT_NOW)\n+    {\n+        true\n+    } else {\n+        false\n+    }\n+}\n+\n fn is_an_instant(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     let expr_ty = cx.typeck_results().expr_ty(expr);\n ", "previous_filename": "clippy_lints/src/unchecked_duration_subtraction.rs"}, {"sha": "ce0e7ebfbf1b63e6761654c7711a370e3e606f8e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f2eb2e4baace68868af2f4ac3ec7aed073139ad/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f2eb2e4baace68868af2f4ac3ec7aed073139ad/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=2f2eb2e4baace68868af2f4ac3ec7aed073139ad", "patch": "@@ -151,6 +151,7 @@ mod inherent_impl;\n mod inherent_to_string;\n mod init_numbered_fields;\n mod inline_fn_without_body;\n+mod instant_subtraction;\n mod int_plus_one;\n mod invalid_upcast_comparisons;\n mod invalid_utf8_in_unchecked;\n@@ -172,7 +173,6 @@ mod manual_assert;\n mod manual_async_fn;\n mod manual_bits;\n mod manual_clamp;\n-mod manual_instant_elapsed;\n mod manual_is_ascii_check;\n mod manual_let_else;\n mod manual_non_exhaustive;\n@@ -279,7 +279,6 @@ mod trailing_empty_array;\n mod trait_bounds;\n mod transmute;\n mod types;\n-mod unchecked_duration_subtraction;\n mod undocumented_unsafe_blocks;\n mod unicode;\n mod uninit_vec;\n@@ -908,7 +907,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move |_| Box::new(operators::Operators::new(verbose_bit_mask_threshold)));\n     store.register_late_pass(|_| Box::new(invalid_utf8_in_unchecked::InvalidUtf8InUnchecked));\n     store.register_late_pass(|_| Box::<std_instead_of_core::StdReexports>::default());\n-    store.register_late_pass(|_| Box::new(manual_instant_elapsed::ManualInstantElapsed));\n+    store.register_late_pass(move |_| Box::new(instant_subtraction::InstantSubtraction::new(msrv)));\n     store.register_late_pass(|_| Box::new(partialeq_to_none::PartialeqToNone));\n     store.register_late_pass(move |_| Box::new(manual_clamp::ManualClamp::new(msrv)));\n     store.register_late_pass(|_| Box::new(manual_string_new::ManualStringNew));"}, {"sha": "1e60aa02d3cad9e69c56b26c2f3f160b169a6a87", "filename": "clippy_lints/src/manual_instant_elapsed.rs", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/b485832b16a388dbcfd3c42030356959e7662a3d/clippy_lints%2Fsrc%2Fmanual_instant_elapsed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b485832b16a388dbcfd3c42030356959e7662a3d/clippy_lints%2Fsrc%2Fmanual_instant_elapsed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_instant_elapsed.rs?ref=b485832b16a388dbcfd3c42030356959e7662a3d", "patch": "@@ -1,69 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use rustc_errors::Applicability;\n-use rustc_hir::{BinOpKind, Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::source_map::Spanned;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Lints subtraction between `Instant::now()` and another `Instant`.\n-    ///\n-    /// ### Why is this bad?\n-    /// It is easy to accidentally write `prev_instant - Instant::now()`, which will always be 0ns\n-    /// as `Instant` subtraction saturates.\n-    ///\n-    /// `prev_instant.elapsed()` also more clearly signals intention.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// use std::time::Instant;\n-    /// let prev_instant = Instant::now();\n-    /// let duration = Instant::now() - prev_instant;\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// use std::time::Instant;\n-    /// let prev_instant = Instant::now();\n-    /// let duration = prev_instant.elapsed();\n-    /// ```\n-    #[clippy::version = \"1.65.0\"]\n-    pub MANUAL_INSTANT_ELAPSED,\n-    pedantic,\n-    \"subtraction between `Instant::now()` and previous `Instant`\"\n-}\n-\n-declare_lint_pass!(ManualInstantElapsed => [MANUAL_INSTANT_ELAPSED]);\n-\n-impl LateLintPass<'_> for ManualInstantElapsed {\n-    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'_ Expr<'_>) {\n-        if let ExprKind::Binary(Spanned {node: BinOpKind::Sub, ..}, lhs, rhs) = expr.kind\n-            && check_instant_now_call(cx, lhs)\n-            && let ty_resolved = cx.typeck_results().expr_ty(rhs)\n-            && let rustc_middle::ty::Adt(def, _) = ty_resolved.kind()\n-            && clippy_utils::match_def_path(cx, def.did(), &clippy_utils::paths::INSTANT)\n-            && let Some(sugg) = clippy_utils::sugg::Sugg::hir_opt(cx, rhs)\n-        {\n-            span_lint_and_sugg(\n-                cx,\n-                MANUAL_INSTANT_ELAPSED,\n-                expr.span,\n-                \"manual implementation of `Instant::elapsed`\",\n-                \"try\",\n-                format!(\"{}.elapsed()\", sugg.maybe_par()),\n-                Applicability::MachineApplicable,\n-            );\n-        }\n-    }\n-}\n-\n-fn check_instant_now_call(cx: &LateContext<'_>, expr_block: &'_ Expr<'_>) -> bool {\n-    if let ExprKind::Call(fn_expr, []) = expr_block.kind\n-        && let Some(fn_id) = clippy_utils::path_def_id(cx, fn_expr)\n-        && clippy_utils::match_def_path(cx, fn_id, &clippy_utils::paths::INSTANT_NOW)\n-    {\n-        true\n-    } else {\n-        false\n-    }\n-}"}]}