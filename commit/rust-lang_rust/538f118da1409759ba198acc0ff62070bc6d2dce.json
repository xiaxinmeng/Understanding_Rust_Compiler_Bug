{"sha": "538f118da1409759ba198acc0ff62070bc6d2dce", "node_id": "C_kwDOAAsO6NoAKDUzOGYxMThkYTE0MDk3NTliYTE5OGFjYzBmZjYyMDcwYmM2ZDJkY2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-12T14:39:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-12T14:39:43Z"}, "message": "Auto merge of #102732 - RalfJung:assert_unsafe_precondition2, r=bjorn3\n\nnicer errors from assert_unsafe_precondition\n\nThis makes the errors shown by cargo-careful nicer, and since `panic_no_unwind` is `nounwind noreturn` it hopefully doesn't have bad codegen impact. Thanks to `@bjorn3` for the hint!\n\nWould be nice if we could somehow supply our own (static) message to print, currently it always prints `panic in a function that cannot unwind`. But still, this is better than before.", "tree": {"sha": "3becd0807c9f252f25ed5c7936e8bfc0f2f1fdff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3becd0807c9f252f25ed5c7936e8bfc0f2f1fdff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/538f118da1409759ba198acc0ff62070bc6d2dce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/538f118da1409759ba198acc0ff62070bc6d2dce", "html_url": "https://github.com/rust-lang/rust/commit/538f118da1409759ba198acc0ff62070bc6d2dce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/538f118da1409759ba198acc0ff62070bc6d2dce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50f6d337c632cbb5bd1dc3a80b5d428cebd8dce4", "url": "https://api.github.com/repos/rust-lang/rust/commits/50f6d337c632cbb5bd1dc3a80b5d428cebd8dce4", "html_url": "https://github.com/rust-lang/rust/commit/50f6d337c632cbb5bd1dc3a80b5d428cebd8dce4"}, {"sha": "38c78a9ac17caefd4c5e6d0b332814b2ac2cf3a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/38c78a9ac17caefd4c5e6d0b332814b2ac2cf3a8", "html_url": "https://github.com/rust-lang/rust/commit/38c78a9ac17caefd4c5e6d0b332814b2ac2cf3a8"}], "stats": {"total": 161, "additions": 90, "deletions": 71}, "files": [{"sha": "92d0fb1aec83f4aebf733385de9cfdcfadb26e07", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/538f118da1409759ba198acc0ff62070bc6d2dce/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538f118da1409759ba198acc0ff62070bc6d2dce/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=538f118da1409759ba198acc0ff62070bc6d2dce", "patch": "@@ -536,7 +536,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // ==========================================================================\n \n     rustc_attr!(rustc_allocator, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n-    rustc_attr!(rustc_allocator_nounwind, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n+    rustc_attr!(rustc_nounwind, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n     rustc_attr!(rustc_reallocator, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n     rustc_attr!(rustc_deallocator, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n     rustc_attr!(rustc_allocator_zeroed, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),"}, {"sha": "5c76016c6625883110b62875d45eb390479eb6a3", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/538f118da1409759ba198acc0ff62070bc6d2dce/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538f118da1409759ba198acc0ff62070bc6d2dce/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=538f118da1409759ba198acc0ff62070bc6d2dce", "patch": "@@ -1582,13 +1582,6 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n         codegen_fn_attrs.flags |= CodegenFnAttrFlags::TRACK_CALLER;\n     }\n \n-    // The panic_no_unwind function called by TerminatorKind::Abort will never\n-    // unwind. If the panic handler that it invokes unwind then it will simply\n-    // call the panic handler again.\n-    if Some(did.to_def_id()) == tcx.lang_items().panic_no_unwind() {\n-        codegen_fn_attrs.flags |= CodegenFnAttrFlags::NEVER_UNWIND;\n-    }\n-\n     let supported_target_features = tcx.supported_target_features(LOCAL_CRATE);\n \n     let mut inline_span = None;\n@@ -1649,7 +1642,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n                 )\n                 .emit();\n             }\n-        } else if attr.has_name(sym::rustc_allocator_nounwind) {\n+        } else if attr.has_name(sym::rustc_nounwind) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::NEVER_UNWIND;\n         } else if attr.has_name(sym::rustc_reallocator) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::REALLOCATOR;"}, {"sha": "c6711b603b6839ae06cf4d9744619dd53352bdc4", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/538f118da1409759ba198acc0ff62070bc6d2dce/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538f118da1409759ba198acc0ff62070bc6d2dce/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=538f118da1409759ba198acc0ff62070bc6d2dce", "patch": "@@ -1231,7 +1231,6 @@ symbols! {\n         rust_oom,\n         rustc,\n         rustc_allocator,\n-        rustc_allocator_nounwind,\n         rustc_allocator_zeroed,\n         rustc_allow_const_fn_unstable,\n         rustc_allow_incoherent_impl,\n@@ -1278,6 +1277,7 @@ symbols! {\n         rustc_mir,\n         rustc_must_implement_one_of,\n         rustc_nonnull_optimization_guaranteed,\n+        rustc_nounwind,\n         rustc_object_lifetime_default,\n         rustc_on_unimplemented,\n         rustc_outlives,"}, {"sha": "8187517ccfbb4bac946e740e45b89bbbb90b47f1", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/538f118da1409759ba198acc0ff62070bc6d2dce/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538f118da1409759ba198acc0ff62070bc6d2dce/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=538f118da1409759ba198acc0ff62070bc6d2dce", "patch": "@@ -28,16 +28,20 @@ extern \"Rust\" {\n     // The rustc fork of LLVM 14 and earlier also special-cases these function names to be able to optimize them\n     // like `malloc`, `realloc`, and `free`, respectively.\n     #[rustc_allocator]\n-    #[rustc_allocator_nounwind]\n+    #[cfg_attr(not(bootstrap), rustc_nounwind)]\n+    #[cfg_attr(bootstrap, rustc_allocator_nounwind)]\n     fn __rust_alloc(size: usize, align: usize) -> *mut u8;\n     #[rustc_deallocator]\n-    #[rustc_allocator_nounwind]\n+    #[cfg_attr(not(bootstrap), rustc_nounwind)]\n+    #[cfg_attr(bootstrap, rustc_allocator_nounwind)]\n     fn __rust_dealloc(ptr: *mut u8, size: usize, align: usize);\n     #[rustc_reallocator]\n-    #[rustc_allocator_nounwind]\n+    #[cfg_attr(not(bootstrap), rustc_nounwind)]\n+    #[cfg_attr(bootstrap, rustc_allocator_nounwind)]\n     fn __rust_realloc(ptr: *mut u8, old_size: usize, align: usize, new_size: usize) -> *mut u8;\n     #[rustc_allocator_zeroed]\n-    #[rustc_allocator_nounwind]\n+    #[cfg_attr(not(bootstrap), rustc_nounwind)]\n+    #[cfg_attr(bootstrap, rustc_allocator_nounwind)]\n     fn __rust_alloc_zeroed(size: usize, align: usize) -> *mut u8;\n }\n "}, {"sha": "2399262c05b4663bf2fc727147a46d9166715407", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/538f118da1409759ba198acc0ff62070bc6d2dce/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538f118da1409759ba198acc0ff62070bc6d2dce/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=538f118da1409759ba198acc0ff62070bc6d2dce", "patch": "@@ -2210,8 +2210,8 @@ macro_rules! assert_unsafe_precondition {\n             #[inline(always)]\n             fn runtime$(<$($tt)*>)?($($i:$ty),*) {\n                 if !$e {\n-                    // abort instead of panicking to reduce impact on code size\n-                    ::core::intrinsics::abort();\n+                    // don't unwind to reduce impact on code size\n+                    ::core::panicking::panic_str_nounwind(\"unsafe precondition violated\");\n                 }\n             }\n             #[allow(non_snake_case)]"}, {"sha": "a9de7c94e5a11ac25a7d6de036b1134bee3805f9", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 74, "deletions": 52, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/538f118da1409759ba198acc0ff62070bc6d2dce/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538f118da1409759ba198acc0ff62070bc6d2dce/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=538f118da1409759ba198acc0ff62070bc6d2dce", "patch": "@@ -29,6 +29,73 @@\n use crate::fmt;\n use crate::panic::{Location, PanicInfo};\n \n+// First we define the two main entry points that all panics go through.\n+// In the end both are just convenience wrappers around `panic_impl`.\n+\n+/// The entry point for panicking with a formatted message.\n+///\n+/// This is designed to reduce the amount of code required at the call\n+/// site as much as possible (so that `panic!()` has as low an impact\n+/// on (e.g.) the inlining of other functions as possible), by moving\n+/// the actual formatting into this shared place.\n+#[cold]\n+// If panic_immediate_abort, inline the abort call,\n+// otherwise avoid inlining because of it is cold path.\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n+#[track_caller]\n+#[lang = \"panic_fmt\"] // needed for const-evaluated panics\n+#[rustc_do_not_const_check] // hooked by const-eval\n+#[rustc_const_unstable(feature = \"core_panic\", issue = \"none\")]\n+pub const fn panic_fmt(fmt: fmt::Arguments<'_>) -> ! {\n+    if cfg!(feature = \"panic_immediate_abort\") {\n+        super::intrinsics::abort()\n+    }\n+\n+    // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call\n+    // that gets resolved to the `#[panic_handler]` function.\n+    extern \"Rust\" {\n+        #[lang = \"panic_impl\"]\n+        fn panic_impl(pi: &PanicInfo<'_>) -> !;\n+    }\n+\n+    let pi = PanicInfo::internal_constructor(Some(&fmt), Location::caller(), true);\n+\n+    // SAFETY: `panic_impl` is defined in safe Rust code and thus is safe to call.\n+    unsafe { panic_impl(&pi) }\n+}\n+\n+/// Like panic_fmt, but without unwinding and track_caller to reduce the impact on codesize.\n+/// Also just works on `str`, as a `fmt::Arguments` needs more space to be passed.\n+#[cold]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n+#[cfg_attr(not(bootstrap), rustc_nounwind)]\n+#[cfg_attr(bootstrap, rustc_allocator_nounwind)]\n+pub fn panic_str_nounwind(msg: &'static str) -> ! {\n+    if cfg!(feature = \"panic_immediate_abort\") {\n+        super::intrinsics::abort()\n+    }\n+\n+    // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call\n+    // that gets resolved to the `#[panic_handler]` function.\n+    extern \"Rust\" {\n+        #[lang = \"panic_impl\"]\n+        fn panic_impl(pi: &PanicInfo<'_>) -> !;\n+    }\n+\n+    // PanicInfo with the `can_unwind` flag set to false forces an abort.\n+    let pieces = [msg];\n+    let fmt = fmt::Arguments::new_v1(&pieces, &[]);\n+    let pi = PanicInfo::internal_constructor(Some(&fmt), Location::caller(), false);\n+\n+    // SAFETY: `panic_impl` is defined in safe Rust code and thus is safe to call.\n+    unsafe { panic_impl(&pi) }\n+}\n+\n+// Next we define a bunch of higher-level wrappers that all bottom out in the two core functions\n+// above.\n+\n /// The underlying implementation of libcore's `panic!` macro when no formatting is used.\n #[cold]\n // never inline unless panic_immediate_abort to avoid code\n@@ -84,62 +151,17 @@ fn panic_bounds_check(index: usize, len: usize) -> ! {\n     panic!(\"index out of bounds: the len is {len} but the index is {index}\")\n }\n \n-// This function is called directly by the codegen backend, and must not have\n-// any extra arguments (including those synthesized by track_caller).\n+/// Panic because we cannot unwind out of a function.\n+///\n+/// This function is called directly by the codegen backend, and must not have\n+/// any extra arguments (including those synthesized by track_caller).\n #[cold]\n #[inline(never)]\n #[lang = \"panic_no_unwind\"] // needed by codegen for panic in nounwind function\n+#[cfg_attr(not(bootstrap), rustc_nounwind)]\n+#[cfg_attr(bootstrap, rustc_allocator_nounwind)]\n fn panic_no_unwind() -> ! {\n-    if cfg!(feature = \"panic_immediate_abort\") {\n-        super::intrinsics::abort()\n-    }\n-\n-    // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call\n-    // that gets resolved to the `#[panic_handler]` function.\n-    extern \"Rust\" {\n-        #[lang = \"panic_impl\"]\n-        fn panic_impl(pi: &PanicInfo<'_>) -> !;\n-    }\n-\n-    // PanicInfo with the `can_unwind` flag set to false forces an abort.\n-    let fmt = format_args!(\"panic in a function that cannot unwind\");\n-    let pi = PanicInfo::internal_constructor(Some(&fmt), Location::caller(), false);\n-\n-    // SAFETY: `panic_impl` is defined in safe Rust code and thus is safe to call.\n-    unsafe { panic_impl(&pi) }\n-}\n-\n-/// The entry point for panicking with a formatted message.\n-///\n-/// This is designed to reduce the amount of code required at the call\n-/// site as much as possible (so that `panic!()` has as low an impact\n-/// on (e.g.) the inlining of other functions as possible), by moving\n-/// the actual formatting into this shared place.\n-#[cold]\n-// If panic_immediate_abort, inline the abort call,\n-// otherwise avoid inlining because of it is cold path.\n-#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n-#[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n-#[track_caller]\n-#[lang = \"panic_fmt\"] // needed for const-evaluated panics\n-#[rustc_do_not_const_check] // hooked by const-eval\n-#[rustc_const_unstable(feature = \"core_panic\", issue = \"none\")]\n-pub const fn panic_fmt(fmt: fmt::Arguments<'_>) -> ! {\n-    if cfg!(feature = \"panic_immediate_abort\") {\n-        super::intrinsics::abort()\n-    }\n-\n-    // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call\n-    // that gets resolved to the `#[panic_handler]` function.\n-    extern \"Rust\" {\n-        #[lang = \"panic_impl\"]\n-        fn panic_impl(pi: &PanicInfo<'_>) -> !;\n-    }\n-\n-    let pi = PanicInfo::internal_constructor(Some(&fmt), Location::caller(), true);\n-\n-    // SAFETY: `panic_impl` is defined in safe Rust code and thus is safe to call.\n-    unsafe { panic_impl(&pi) }\n+    panic_str_nounwind(\"panic in a function that cannot unwind\")\n }\n \n /// This function is used instead of panic_fmt in const eval."}, {"sha": "f85ad5ae5072fb3619b9668739bc3d7313489124", "filename": "src/tools/miri/tests/fail/function_calls/exported_symbol_bad_unwind2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/538f118da1409759ba198acc0ff62070bc6d2dce/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538f118da1409759ba198acc0ff62070bc6d2dce/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.rs?ref=538f118da1409759ba198acc0ff62070bc6d2dce", "patch": "@@ -1,7 +1,7 @@\n //@revisions: extern_block definition both\n #![feature(rustc_attrs, c_unwind)]\n \n-#[cfg_attr(any(definition, both), rustc_allocator_nounwind)]\n+#[cfg_attr(any(definition, both), rustc_nounwind)]\n #[no_mangle]\n extern \"C-unwind\" fn nounwind() {\n     //[definition]~^ ERROR: abnormal termination: the program aborted execution\n@@ -11,7 +11,7 @@ extern \"C-unwind\" fn nounwind() {\n \n fn main() {\n     extern \"C-unwind\" {\n-        #[cfg_attr(any(extern_block, both), rustc_allocator_nounwind)]\n+        #[cfg_attr(any(extern_block, both), rustc_nounwind)]\n         fn nounwind();\n     }\n     unsafe { nounwind() }"}, {"sha": "39581b33a8da2b7a3b5387de6ee50333d7b0e634", "filename": "src/tools/rust-analyzer/crates/hir-def/src/builtin_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/538f118da1409759ba198acc0ff62070bc6d2dce/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-def%2Fsrc%2Fbuiltin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538f118da1409759ba198acc0ff62070bc6d2dce/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-def%2Fsrc%2Fbuiltin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-def%2Fsrc%2Fbuiltin_attr.rs?ref=538f118da1409759ba198acc0ff62070bc6d2dce", "patch": "@@ -379,7 +379,7 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // ==========================================================================\n \n     rustc_attr!(rustc_allocator, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n-    rustc_attr!(rustc_allocator_nounwind, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n+    rustc_attr!(rustc_nounwind, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n     gated!(\n         alloc_error_handler, Normal, template!(Word), WarnFollowing,\n         experimental!(alloc_error_handler)"}]}