{"sha": "24255e5b3dbabe7eaec1a42668d50d96d6b1aa0f", "node_id": "C_kwDOAAsO6NoAKDI0MjU1ZTViM2RiYWJlN2VhZWMxYTQyNjY4ZDUwZDk2ZDZiMWFhMGY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-21T13:08:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-21T13:08:31Z"}, "message": "Merge #11481\n\n11481: Display parameter names when hovering over a function pointer r=Veykril a=Vannevelj\n\nImplements #11474\r\n\r\nThe idea is pretty straightforward: previously we constructed the hover based on just the parameter types, now we pass in the parameter names as well. I went for a quick-hit approach here but I expect someone will be able to point me to a better way of resolving the identifier.\r\n\r\nI haven't figured out yet how to actually run my rust-analyzer locally so I can see it in action but the unit test indicates it should work.\n\nCo-authored-by: Jeroen Vannevel <jer_vannevel@outlook.com>", "tree": {"sha": "9de4cefeddbca76b0e79f1c589219c588c2d2844", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9de4cefeddbca76b0e79f1c589219c588c2d2844"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24255e5b3dbabe7eaec1a42668d50d96d6b1aa0f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiE47PCRBK7hj4Ov3rIwAA0HwIADm+CpENZ8KXtUMN2zy9ZBGS\nuqbjV5cMsgMqIJOR9NtiX1kDGyEVX7RoCsOpwc0/GzAS91KcfzJ0lklkOAH90vWr\nZESJ1osuK6Dvfu4hzXY/zmr4soMOt8d4qoytISnI9KEavLbaIL9JYv40iXiIVmoR\nVPNW3F4FOAs8QqwG2tn/LwuzQNCyoUWofL1qJPtsCM1ca6pQrqn+nY/VLILQNB/G\nib0D4HYeTQkJSD3pHdDogdKz/LNSk2Qk+nc4n6IlBS2IBH1pCqYPwuasblkWVuf3\n55/qGrnToINXFcGq/LoDkPT25RC9DDy6rSn2iWiTJ7jAfOPl1Zl3DRSa1LAIlSk=\n=4SAB\n-----END PGP SIGNATURE-----\n", "payload": "tree 9de4cefeddbca76b0e79f1c589219c588c2d2844\nparent 8c718a47c1229e959d46887806f57c5314e9785b\nparent 9c6542f2097df1cfcc9491036ec607c6a2842070\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1645448911 +0000\ncommitter GitHub <noreply@github.com> 1645448911 +0000\n\nMerge #11481\n\n11481: Display parameter names when hovering over a function pointer r=Veykril a=Vannevelj\n\nImplements #11474\r\n\r\nThe idea is pretty straightforward: previously we constructed the hover based on just the parameter types, now we pass in the parameter names as well. I went for a quick-hit approach here but I expect someone will be able to point me to a better way of resolving the identifier.\r\n\r\nI haven't figured out yet how to actually run my rust-analyzer locally so I can see it in action but the unit test indicates it should work.\n\nCo-authored-by: Jeroen Vannevel <jer_vannevel@outlook.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24255e5b3dbabe7eaec1a42668d50d96d6b1aa0f", "html_url": "https://github.com/rust-lang/rust/commit/24255e5b3dbabe7eaec1a42668d50d96d6b1aa0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24255e5b3dbabe7eaec1a42668d50d96d6b1aa0f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c718a47c1229e959d46887806f57c5314e9785b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c718a47c1229e959d46887806f57c5314e9785b", "html_url": "https://github.com/rust-lang/rust/commit/8c718a47c1229e959d46887806f57c5314e9785b"}, {"sha": "9c6542f2097df1cfcc9491036ec607c6a2842070", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c6542f2097df1cfcc9491036ec607c6a2842070", "html_url": "https://github.com/rust-lang/rust/commit/9c6542f2097df1cfcc9491036ec607c6a2842070"}], "stats": {"total": 129, "additions": 105, "deletions": 24}, "files": [{"sha": "0df6e97dd463234f0128a271283266583bb1963a", "filename": "crates/hir_def/src/item_tree/pretty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24255e5b3dbabe7eaec1a42668d50d96d6b1aa0f/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24255e5b3dbabe7eaec1a42668d50d96d6b1aa0f/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs?ref=24255e5b3dbabe7eaec1a42668d50d96d6b1aa0f", "patch": "@@ -493,14 +493,14 @@ impl<'a> Printer<'a> {\n                 w!(self, \"]\");\n             }\n             TypeRef::Fn(args_and_ret, varargs) => {\n-                let (ret, args) =\n+                let ((_, return_type), args) =\n                     args_and_ret.split_last().expect(\"TypeRef::Fn is missing return type\");\n                 w!(self, \"fn(\");\n-                for (i, arg) in args.iter().enumerate() {\n+                for (i, (_, typeref)) in args.iter().enumerate() {\n                     if i != 0 {\n                         w!(self, \", \");\n                     }\n-                    self.print_type_ref(arg);\n+                    self.print_type_ref(&typeref);\n                 }\n                 if *varargs {\n                     if !args.is_empty() {\n@@ -509,7 +509,7 @@ impl<'a> Printer<'a> {\n                     w!(self, \"...\");\n                 }\n                 w!(self, \") -> \");\n-                self.print_type_ref(ret);\n+                self.print_type_ref(&return_type);\n             }\n             TypeRef::Macro(_ast_id) => {\n                 w!(self, \"<macro>\");"}, {"sha": "ee8ef6caa306a1dc72e8db72441741b94a09aa01", "filename": "crates/hir_def/src/type_ref.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/24255e5b3dbabe7eaec1a42668d50d96d6b1aa0f/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24255e5b3dbabe7eaec1a42668d50d96d6b1aa0f/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs?ref=24255e5b3dbabe7eaec1a42668d50d96d6b1aa0f", "patch": "@@ -1,9 +1,12 @@\n //! HIR for references to types. Paths in these are not yet resolved. They can\n //! be directly created from an ast::TypeRef, without further queries.\n \n-use hir_expand::{name::Name, AstId, InFile};\n+use hir_expand::{\n+    name::{AsName, Name},\n+    AstId, InFile,\n+};\n use std::convert::TryInto;\n-use syntax::ast;\n+use syntax::ast::{self, HasName};\n \n use crate::{body::LowerCtx, intern::Interned, path::Path};\n \n@@ -89,7 +92,7 @@ pub enum TypeRef {\n     Array(Box<TypeRef>, ConstScalar),\n     Slice(Box<TypeRef>),\n     /// A fn pointer. Last element of the vector is the return type.\n-    Fn(Vec<TypeRef>, bool /*varargs*/),\n+    Fn(Vec<(Option<Name>, TypeRef)>, bool /*varargs*/),\n     // For\n     ImplTrait(Vec<Interned<TypeBound>>),\n     DynTrait(Vec<Interned<TypeBound>>),\n@@ -188,11 +191,22 @@ impl TypeRef {\n                         is_varargs = param.dotdotdot_token().is_some();\n                     }\n \n-                    pl.params().map(|p| p.ty()).map(|it| TypeRef::from_ast_opt(ctx, it)).collect()\n+                    pl.params()\n+                        .map(|it| {\n+                            let type_ref = TypeRef::from_ast_opt(ctx, it.ty());\n+                            let name = match it.pat() {\n+                                Some(ast::Pat::IdentPat(it)) => Some(\n+                                    it.name().map(|nr| nr.as_name()).unwrap_or_else(Name::missing),\n+                                ),\n+                                _ => None,\n+                            };\n+                            (name, type_ref)\n+                        })\n+                        .collect()\n                 } else {\n                     Vec::new()\n                 };\n-                params.push(ret_ty);\n+                params.push((None, ret_ty));\n                 TypeRef::Fn(params, is_varargs)\n             }\n             // for types are close enough for our purposes to the inner type for now...\n@@ -230,9 +244,10 @@ impl TypeRef {\n         fn go(type_ref: &TypeRef, f: &mut impl FnMut(&TypeRef)) {\n             f(type_ref);\n             match type_ref {\n-                TypeRef::Fn(types, _) | TypeRef::Tuple(types) => {\n-                    types.iter().for_each(|t| go(t, f))\n+                TypeRef::Fn(params, _) => {\n+                    params.iter().for_each(|(_, param_type)| go(&param_type, f))\n                 }\n+                TypeRef::Tuple(types) => types.iter().for_each(|t| go(t, f)),\n                 TypeRef::RawPtr(type_ref, _)\n                 | TypeRef::Reference(type_ref, ..)\n                 | TypeRef::Array(type_ref, _)"}, {"sha": "0e75ddeabcdff4c028b85c44bc50570da71478a5", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/24255e5b3dbabe7eaec1a42668d50d96d6b1aa0f/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24255e5b3dbabe7eaec1a42668d50d96d6b1aa0f/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=24255e5b3dbabe7eaec1a42668d50d96d6b1aa0f", "patch": "@@ -1094,20 +1094,32 @@ impl HirDisplay for TypeRef {\n                 inner.hir_fmt(f)?;\n                 write!(f, \"]\")?;\n             }\n-            TypeRef::Fn(tys, is_varargs) => {\n+            TypeRef::Fn(parameters, is_varargs) => {\n                 // FIXME: Function pointer qualifiers.\n                 write!(f, \"fn(\")?;\n-                f.write_joined(&tys[..tys.len() - 1], \", \")?;\n-                if *is_varargs {\n-                    write!(f, \"{}...\", if tys.len() == 1 { \"\" } else { \", \" })?;\n-                }\n-                write!(f, \")\")?;\n-                let ret_ty = tys.last().unwrap();\n-                match ret_ty {\n-                    TypeRef::Tuple(tup) if tup.is_empty() => {}\n-                    _ => {\n-                        write!(f, \" -> \")?;\n-                        ret_ty.hir_fmt(f)?;\n+                if let Some(((_, return_type), function_parameters)) = parameters.split_last() {\n+                    for index in 0..function_parameters.len() {\n+                        let (param_name, param_type) = &function_parameters[index];\n+                        if let Some(name) = param_name {\n+                            write!(f, \"{}: \", name)?;\n+                        }\n+\n+                        param_type.hir_fmt(f)?;\n+\n+                        if index != function_parameters.len() - 1 {\n+                            write!(f, \", \")?;\n+                        }\n+                    }\n+                    if *is_varargs {\n+                        write!(f, \"{}...\", if parameters.len() == 1 { \"\" } else { \", \" })?;\n+                    }\n+                    write!(f, \")\")?;\n+                    match &return_type {\n+                        TypeRef::Tuple(tup) if tup.is_empty() => {}\n+                        _ => {\n+                            write!(f, \" -> \")?;\n+                            return_type.hir_fmt(f)?;\n+                        }\n                     }\n                 }\n             }"}, {"sha": "a140dd4057c625fe6d27e25b1f7184cb1c908393", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24255e5b3dbabe7eaec1a42668d50d96d6b1aa0f/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24255e5b3dbabe7eaec1a42668d50d96d6b1aa0f/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=24255e5b3dbabe7eaec1a42668d50d96d6b1aa0f", "patch": "@@ -201,7 +201,7 @@ impl<'a> TyLoweringContext<'a> {\n             TypeRef::Placeholder => TyKind::Error.intern(Interner),\n             TypeRef::Fn(params, is_varargs) => {\n                 let substs = self.with_shifted_in(DebruijnIndex::ONE, |ctx| {\n-                    Substitution::from_iter(Interner, params.iter().map(|tr| ctx.lower_ty(tr)))\n+                    Substitution::from_iter(Interner, params.iter().map(|(_, tr)| ctx.lower_ty(tr)))\n                 });\n                 TyKind::Function(FnPointer {\n                     num_binders: 0, // FIXME lower `for<'a> fn()` correctly"}, {"sha": "c5c531c30b1a4896ed4e0c392c12457f5c0be30b", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/24255e5b3dbabe7eaec1a42668d50d96d6b1aa0f/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24255e5b3dbabe7eaec1a42668d50d96d6b1aa0f/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=24255e5b3dbabe7eaec1a42668d50d96d6b1aa0f", "patch": "@@ -1310,6 +1310,60 @@ fn test_hover_function_show_qualifiers() {\n     );\n }\n \n+#[test]\n+fn test_hover_function_show_types() {\n+    check(\n+        r#\"fn foo$0(a: i32, b:i32) -> i32 { 0 }\"#,\n+        expect![[r#\"\n+                *foo*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                fn foo(a: i32, b: i32) -> i32\n+                ```\n+            \"#]],\n+    );\n+}\n+\n+#[test]\n+fn test_hover_function_pointer_show_identifiers() {\n+    check(\n+        r#\"type foo$0 = fn(a: i32, b: i32) -> i32;\"#,\n+        expect![[r#\"\n+                *foo*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                type foo = fn(a: i32, b: i32) -> i32\n+                ```\n+            \"#]],\n+    );\n+}\n+\n+#[test]\n+fn test_hover_function_pointer_no_identifier() {\n+    check(\n+        r#\"type foo$0 = fn(i32, _: i32) -> i32;\"#,\n+        expect![[r#\"\n+                *foo*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                type foo = fn(i32, i32) -> i32\n+                ```\n+            \"#]],\n+    );\n+}\n+\n #[test]\n fn test_hover_trait_show_qualifiers() {\n     check_actions("}]}