{"sha": "f21728fee4eb11ec7e73801bc60e78dbb08bf71a", "node_id": "C_kwDOAAsO6NoAKGYyMTcyOGZlZTRlYjExZWM3ZTczODAxYmM2MGU3OGRiYjA4YmY3MWE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-25T21:19:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-25T21:19:51Z"}, "message": "Rollup merge of #105345 - yanchen4791:issue-103582-fix, r=jackh726\n\nAdd hint for missing lifetime bound on trait object when type alias is used\n\nFix issue #103582.\n\nThe problem: When a type alias is used to specify the return type of the method in a trait impl, the suggestion for fixing the problem of \"missing lifetime bound on trait object\" of the trait impl will not be created. The issue caused by the code which searches for the return trait objects when constructing the hint suggestion is not able to find the trait objects since they are specified in the type alias path instead of the return path of the trait impl.\n\nThe solution: Trace the trait objects in the type alias path and provide them along with the alias span to generate the suggestion in case the type alias is used in return type of the method in the trait impl.", "tree": {"sha": "b52492509b83c46bb47eddd23be2d380091ab3c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b52492509b83c46bb47eddd23be2d380091ab3c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f21728fee4eb11ec7e73801bc60e78dbb08bf71a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj0Zz3CRBK7hj4Ov3rIwAAnq4IAImg64tuo/n6UpOQJJl0VADA\n6mshET/kmYxCfDseJjjP0mI+nOfnOKNQkU+xXoMUDM3+PPIM3bNxuDw7sBSj98zI\nMdKQ/NgGIGk0NHUO1kca8VOr2+cYtJ6q2d1dpWV66St4vZsHUSVXiAQSJm2zH5Mk\nrietwVhffcF0KHG2dXLPxyh/IxvCyTIbrGz8cLlzJXmUMQrMb6rhke/0h+WIc9uA\nW54TyvqG9DnWA6AJZDKrtP9mBnGH9/VCqLNaq0nKelhUTlrAVgLrIFBUR7NM+OLj\nZ55pgDnp9r7+w0P8uzlzvveiFDeynglbuJDIqPlW7JXZrYSFLcr31Lklmkn57AA=\n=VsWx\n-----END PGP SIGNATURE-----\n", "payload": "tree b52492509b83c46bb47eddd23be2d380091ab3c2\nparent 027c8507b4265dcf285b0b503e2a49214b929f7b\nparent 62a1e76d2beaa87d7f02a55e2d7faa03cdd5fd7f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674681591 +0100\ncommitter GitHub <noreply@github.com> 1674681591 +0100\n\nRollup merge of #105345 - yanchen4791:issue-103582-fix, r=jackh726\n\nAdd hint for missing lifetime bound on trait object when type alias is used\n\nFix issue #103582.\n\nThe problem: When a type alias is used to specify the return type of the method in a trait impl, the suggestion for fixing the problem of \"missing lifetime bound on trait object\" of the trait impl will not be created. The issue caused by the code which searches for the return trait objects when constructing the hint suggestion is not able to find the trait objects since they are specified in the type alias path instead of the return path of the trait impl.\n\nThe solution: Trace the trait objects in the type alias path and provide them along with the alias span to generate the suggestion in case the type alias is used in return type of the method in the trait impl.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f21728fee4eb11ec7e73801bc60e78dbb08bf71a", "html_url": "https://github.com/rust-lang/rust/commit/f21728fee4eb11ec7e73801bc60e78dbb08bf71a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f21728fee4eb11ec7e73801bc60e78dbb08bf71a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "027c8507b4265dcf285b0b503e2a49214b929f7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/027c8507b4265dcf285b0b503e2a49214b929f7b", "html_url": "https://github.com/rust-lang/rust/commit/027c8507b4265dcf285b0b503e2a49214b929f7b"}, {"sha": "62a1e76d2beaa87d7f02a55e2d7faa03cdd5fd7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/62a1e76d2beaa87d7f02a55e2d7faa03cdd5fd7f", "html_url": "https://github.com/rust-lang/rust/commit/62a1e76d2beaa87d7f02a55e2d7faa03cdd5fd7f"}], "stats": {"total": 195, "additions": 176, "deletions": 19}, "files": [{"sha": "87db08ef5b5108e3b6439883ce5d8bb869f90967", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 40, "deletions": 19, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/f21728fee4eb11ec7e73801bc60e78dbb08bf71a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21728fee4eb11ec7e73801bc60e78dbb08bf71a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=f21728fee4eb11ec7e73801bc60e78dbb08bf71a", "patch": "@@ -813,17 +813,10 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             if *outlived_f != ty::ReStatic {\n                 return;\n             }\n+            let suitable_region = self.infcx.tcx.is_suitable_region(f);\n+            let Some(suitable_region) = suitable_region else { return; };\n \n-            let fn_returns = self\n-                .infcx\n-                .tcx\n-                .is_suitable_region(f)\n-                .map(|r| self.infcx.tcx.return_type_impl_or_dyn_traits(r.def_id))\n-                .unwrap_or_default();\n-\n-            if fn_returns.is_empty() {\n-                return;\n-            }\n+            let fn_returns = self.infcx.tcx.return_type_impl_or_dyn_traits(suitable_region.def_id);\n \n             let param = if let Some(param) = find_param_with_region(self.infcx.tcx, f, outlived_f) {\n                 param\n@@ -839,15 +832,43 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             };\n             let captures = format!(\"captures data from {arg}\");\n \n-            return nice_region_error::suggest_new_region_bound(\n-                self.infcx.tcx,\n-                diag,\n-                fn_returns,\n-                lifetime.to_string(),\n-                Some(arg),\n-                captures,\n-                Some((param.param_ty_span, param.param_ty.to_string())),\n-                self.infcx.tcx.is_suitable_region(f).map(|r| r.def_id),\n+            if !fn_returns.is_empty() {\n+                nice_region_error::suggest_new_region_bound(\n+                    self.infcx.tcx,\n+                    diag,\n+                    fn_returns,\n+                    lifetime.to_string(),\n+                    Some(arg),\n+                    captures,\n+                    Some((param.param_ty_span, param.param_ty.to_string())),\n+                    Some(suitable_region.def_id),\n+                );\n+                return;\n+            }\n+\n+            let Some((alias_tys, alias_span)) = self\n+                .infcx\n+                .tcx\n+                .return_type_impl_or_dyn_traits_with_type_alias(suitable_region.def_id) else { return; };\n+\n+            // in case the return type of the method is a type alias\n+            let mut spans_suggs: Vec<_> = Vec::new();\n+            for alias_ty in alias_tys {\n+                if alias_ty.span.desugaring_kind().is_some() {\n+                    // Skip `async` desugaring `impl Future`.\n+                    ()\n+                }\n+                if let TyKind::TraitObject(_, lt, _) = alias_ty.kind {\n+                    spans_suggs.push((lt.ident.span.shrink_to_hi(), \" + 'a\".to_string()));\n+                }\n+            }\n+            spans_suggs.push((alias_span.shrink_to_hi(), \"<'a>\".to_string()));\n+            diag.multipart_suggestion_verbose(\n+                &format!(\n+                    \"to declare that the trait object {captures}, you can add a lifetime parameter `'a` in the type alias\"\n+                ),\n+                spans_suggs,\n+                Applicability::MaybeIncorrect,\n             );\n         }\n     }"}, {"sha": "b456bd08048db153a3e8e10e95d940d2f11cedd5", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f21728fee4eb11ec7e73801bc60e78dbb08bf71a/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21728fee4eb11ec7e73801bc60e78dbb08bf71a/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=f21728fee4eb11ec7e73801bc60e78dbb08bf71a", "patch": "@@ -3524,6 +3524,13 @@ impl<'hir> Node<'hir> {\n         }\n     }\n \n+    pub fn alias_ty(self) -> Option<&'hir Ty<'hir>> {\n+        match self {\n+            Node::Item(Item { kind: ItemKind::TyAlias(ty, ..), .. }) => Some(ty),\n+            _ => None,\n+        }\n+    }\n+\n     pub fn body_id(&self) -> Option<BodyId> {\n         match self {\n             Node::TraitItem(TraitItem {"}, {"sha": "0b16270ea987445e6e762ef5fcc817ec64b9ff21", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f21728fee4eb11ec7e73801bc60e78dbb08bf71a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21728fee4eb11ec7e73801bc60e78dbb08bf71a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=f21728fee4eb11ec7e73801bc60e78dbb08bf71a", "patch": "@@ -997,6 +997,30 @@ impl<'tcx> TyCtxt<'tcx> {\n         v.0\n     }\n \n+    /// Given a `DefId` for an `fn`, return all the `dyn` and `impl` traits in its return type and associated alias span when type alias is used\n+    pub fn return_type_impl_or_dyn_traits_with_type_alias(\n+        self,\n+        scope_def_id: LocalDefId,\n+    ) -> Option<(Vec<&'tcx hir::Ty<'tcx>>, Span)> {\n+        let hir_id = self.hir().local_def_id_to_hir_id(scope_def_id);\n+        let mut v = TraitObjectVisitor(vec![], self.hir());\n+        // when the return type is a type alias\n+        if let Some(hir::FnDecl { output: hir::FnRetTy::Return(hir_output), .. }) = self.hir().fn_decl_by_hir_id(hir_id)\n+            && let hir::TyKind::Path(hir::QPath::Resolved(\n+                None,\n+                hir::Path { res: hir::def::Res::Def(DefKind::TyAlias, def_id), .. }, )) = hir_output.kind\n+            && let Some(local_id) = def_id.as_local()\n+            && let Some(alias_ty) = self.hir().get_by_def_id(local_id).alias_ty() // it is type alias\n+            && let Some(alias_generics) = self.hir().get_by_def_id(local_id).generics()\n+        {\n+            v.visit_ty(alias_ty);\n+            if !v.0.is_empty() {\n+                return Some((v.0, alias_generics.span));\n+            }\n+        }\n+        return None;\n+    }\n+\n     pub fn return_type_impl_trait(self, scope_def_id: LocalDefId) -> Option<(Ty<'tcx>, Span)> {\n         // `type_of()` will fail on these (#55796, #86483), so only allow `fn`s or closures.\n         match self.hir().get_by_def_id(scope_def_id) {"}, {"sha": "aa3bce2945b68cf842de72900d4c0101de562c26", "filename": "tests/ui/lifetimes/issue-103582-hint-for-missing-lifetime-bound-on-trait-object-using-type-alias.fixed", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f21728fee4eb11ec7e73801bc60e78dbb08bf71a/tests%2Fui%2Flifetimes%2Fissue-103582-hint-for-missing-lifetime-bound-on-trait-object-using-type-alias.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f21728fee4eb11ec7e73801bc60e78dbb08bf71a/tests%2Fui%2Flifetimes%2Fissue-103582-hint-for-missing-lifetime-bound-on-trait-object-using-type-alias.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-103582-hint-for-missing-lifetime-bound-on-trait-object-using-type-alias.fixed?ref=f21728fee4eb11ec7e73801bc60e78dbb08bf71a", "patch": "@@ -0,0 +1,45 @@\n+// run-rustfix\n+\n+trait Greeter0 {\n+    fn greet(&self);\n+}\n+\n+trait Greeter1 {\n+    fn greet(&self);\n+}\n+\n+type BoxedGreeter<'a> = (Box<dyn Greeter0 + 'a>, Box<dyn Greeter1 + 'a>);\n+//~^ HELP to declare that the trait object captures data from argument `self`, you can add a lifetime parameter `'a` in the type alias\n+\n+struct FixedGreeter<'a>(pub &'a str);\n+\n+impl Greeter0 for FixedGreeter<'_> {\n+    fn greet(&self) {\n+        println!(\"0 {}\", self.0)\n+    }\n+}\n+\n+impl Greeter1 for FixedGreeter<'_> {\n+    fn greet(&self) {\n+        println!(\"1 {}\", self.0)\n+    }\n+}\n+\n+struct Greetings(pub Vec<String>);\n+\n+impl Greetings {\n+    pub fn get(&self, i: usize) -> BoxedGreeter {\n+        (Box::new(FixedGreeter(&self.0[i])), Box::new(FixedGreeter(&self.0[i])))\n+        //~^ ERROR lifetime may not live long enough\n+    }\n+}\n+\n+fn main() {\n+    let mut g = Greetings {0 : vec!()};\n+    g.0.push(\"a\".to_string());\n+    g.0.push(\"b\".to_string());\n+    g.get(0).0.greet();\n+    g.get(0).1.greet();\n+    g.get(1).0.greet();\n+    g.get(1).1.greet();\n+}"}, {"sha": "20c88ec69813a0feae6a96af227a07b80ff8f7ca", "filename": "tests/ui/lifetimes/issue-103582-hint-for-missing-lifetime-bound-on-trait-object-using-type-alias.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f21728fee4eb11ec7e73801bc60e78dbb08bf71a/tests%2Fui%2Flifetimes%2Fissue-103582-hint-for-missing-lifetime-bound-on-trait-object-using-type-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21728fee4eb11ec7e73801bc60e78dbb08bf71a/tests%2Fui%2Flifetimes%2Fissue-103582-hint-for-missing-lifetime-bound-on-trait-object-using-type-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-103582-hint-for-missing-lifetime-bound-on-trait-object-using-type-alias.rs?ref=f21728fee4eb11ec7e73801bc60e78dbb08bf71a", "patch": "@@ -0,0 +1,45 @@\n+// run-rustfix\n+\n+trait Greeter0 {\n+    fn greet(&self);\n+}\n+\n+trait Greeter1 {\n+    fn greet(&self);\n+}\n+\n+type BoxedGreeter = (Box<dyn Greeter0>, Box<dyn Greeter1>);\n+//~^ HELP to declare that the trait object captures data from argument `self`, you can add a lifetime parameter `'a` in the type alias\n+\n+struct FixedGreeter<'a>(pub &'a str);\n+\n+impl Greeter0 for FixedGreeter<'_> {\n+    fn greet(&self) {\n+        println!(\"0 {}\", self.0)\n+    }\n+}\n+\n+impl Greeter1 for FixedGreeter<'_> {\n+    fn greet(&self) {\n+        println!(\"1 {}\", self.0)\n+    }\n+}\n+\n+struct Greetings(pub Vec<String>);\n+\n+impl Greetings {\n+    pub fn get(&self, i: usize) -> BoxedGreeter {\n+        (Box::new(FixedGreeter(&self.0[i])), Box::new(FixedGreeter(&self.0[i])))\n+        //~^ ERROR lifetime may not live long enough\n+    }\n+}\n+\n+fn main() {\n+    let mut g = Greetings {0 : vec!()};\n+    g.0.push(\"a\".to_string());\n+    g.0.push(\"b\".to_string());\n+    g.get(0).0.greet();\n+    g.get(0).1.greet();\n+    g.get(1).0.greet();\n+    g.get(1).1.greet();\n+}"}, {"sha": "808d8bb905885c315824fabbcf1ad39706f7a426", "filename": "tests/ui/lifetimes/issue-103582-hint-for-missing-lifetime-bound-on-trait-object-using-type-alias.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f21728fee4eb11ec7e73801bc60e78dbb08bf71a/tests%2Fui%2Flifetimes%2Fissue-103582-hint-for-missing-lifetime-bound-on-trait-object-using-type-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f21728fee4eb11ec7e73801bc60e78dbb08bf71a/tests%2Fui%2Flifetimes%2Fissue-103582-hint-for-missing-lifetime-bound-on-trait-object-using-type-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-103582-hint-for-missing-lifetime-bound-on-trait-object-using-type-alias.stderr?ref=f21728fee4eb11ec7e73801bc60e78dbb08bf71a", "patch": "@@ -0,0 +1,15 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-103582-hint-for-missing-lifetime-bound-on-trait-object-using-type-alias.rs:32:9\n+   |\n+LL |     pub fn get(&self, i: usize) -> BoxedGreeter {\n+   |                - let's call the lifetime of this reference `'1`\n+LL |         (Box::new(FixedGreeter(&self.0[i])), Box::new(FixedGreeter(&self.0[i])))\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'static`\n+   |\n+help: to declare that the trait object captures data from argument `self`, you can add a lifetime parameter `'a` in the type alias\n+   |\n+LL | type BoxedGreeter<'a> = (Box<dyn Greeter0 + 'a>, Box<dyn Greeter1 + 'a>);\n+   |                  ++++                     ++++                    ++++\n+\n+error: aborting due to previous error\n+"}]}