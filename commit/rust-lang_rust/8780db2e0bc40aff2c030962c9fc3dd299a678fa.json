{"sha": "8780db2e0bc40aff2c030962c9fc3dd299a678fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ODBkYjJlMGJjNDBhZmYyYzAzMDk2MmM5ZmMzZGQyOTlhNjc4ZmE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-26T19:45:02Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-29T23:43:18Z"}, "message": "rustc: Delete some unused invoke code", "tree": {"sha": "a6a754d99f3f849cec0eb86571efd802adbac0e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6a754d99f3f849cec0eb86571efd802adbac0e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8780db2e0bc40aff2c030962c9fc3dd299a678fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8780db2e0bc40aff2c030962c9fc3dd299a678fa", "html_url": "https://github.com/rust-lang/rust/commit/8780db2e0bc40aff2c030962c9fc3dd299a678fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8780db2e0bc40aff2c030962c9fc3dd299a678fa/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b420f46f0309ff9fe681fc7f6b4d5412ab40a439", "url": "https://api.github.com/repos/rust-lang/rust/commits/b420f46f0309ff9fe681fc7f6b4d5412ab40a439", "html_url": "https://github.com/rust-lang/rust/commit/b420f46f0309ff9fe681fc7f6b4d5412ab40a439"}], "stats": {"total": 24, "additions": 3, "deletions": 21}, "files": [{"sha": "7834f19ebd63102280c98e05da23769075e12abd", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8780db2e0bc40aff2c030962c9fc3dd299a678fa/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8780db2e0bc40aff2c030962c9fc3dd299a678fa/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=8780db2e0bc40aff2c030962c9fc3dd299a678fa", "patch": "@@ -2730,7 +2730,7 @@ fn trans_call_inner(in_cx: block, fn_expr_ty: ty::t, ret_ty: ty::t,\n         then one or more of the args has\n         type _|_. Since that means it diverges, the code\n         for the call itself is unreachable. */\n-        bcx = invoke_full(bcx, faddr, llargs);\n+        bcx = invoke(bcx, faddr, llargs);\n         alt dest {\n           ignore {\n             if llvm::LLVMIsUndef(llretslot) != lib::llvm::True {\n@@ -2759,31 +2759,13 @@ fn trans_call_inner(in_cx: block, fn_expr_ty: ty::t, ret_ty: ty::t,\n     }\n }\n \n-fn invoke(bcx: block, llfn: ValueRef,\n-          llargs: [ValueRef]) -> block {\n-    ret invoke_(bcx, llfn, llargs, Invoke);\n-}\n-\n-fn invoke_full(bcx: block, llfn: ValueRef, llargs: [ValueRef])\n-    -> block {\n-    ret invoke_(bcx, llfn, llargs, Invoke);\n-}\n-\n-fn invoke_(bcx: block, llfn: ValueRef, llargs: [ValueRef],\n-           invoker: fn(block, ValueRef, [ValueRef],\n-                       BasicBlockRef, BasicBlockRef)) -> block {\n+fn invoke(bcx: block, llfn: ValueRef, llargs: [ValueRef]) -> block {\n     let _icx = bcx.insn_ctxt(\"invoke_\");\n     // FIXME: May be worth turning this into a plain call when there are no\n     // cleanups to run\n     if bcx.unreachable { ret bcx; }\n     let normal_bcx = sub_block(bcx, \"normal return\");\n-    /*io::println(\"fn: \" + lib::llvm::type_to_str(bcx.ccx().tn,\n-                                                val_ty(llfn)));\n-    for a in llargs {\n-        io::println(\" a: \" + lib::llvm::type_to_str(bcx.ccx().tn,\n-                                                    val_ty(a)));\n-    }*/\n-    invoker(bcx, llfn, llargs, normal_bcx.llbb, get_landing_pad(bcx));\n+    Invoke(bcx, llfn, llargs, normal_bcx.llbb, get_landing_pad(bcx));\n     ret normal_bcx;\n }\n "}]}