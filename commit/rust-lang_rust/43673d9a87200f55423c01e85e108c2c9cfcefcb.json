{"sha": "43673d9a87200f55423c01e85e108c2c9cfcefcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNjczZDlhODcyMDBmNTU0MjNjMDFlODVlMTA4YzJjOWNmY2VmY2I=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-11-11T09:29:10Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-11-11T09:29:10Z"}, "message": "rustup", "tree": {"sha": "821f8c67d5f8581479e2e65af7bae0e0ee60ed8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/821f8c67d5f8581479e2e65af7bae0e0ee60ed8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43673d9a87200f55423c01e85e108c2c9cfcefcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43673d9a87200f55423c01e85e108c2c9cfcefcb", "html_url": "https://github.com/rust-lang/rust/commit/43673d9a87200f55423c01e85e108c2c9cfcefcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43673d9a87200f55423c01e85e108c2c9cfcefcb/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0459f0be9e30304d6eef8ba46038e952601dd9fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/0459f0be9e30304d6eef8ba46038e952601dd9fe", "html_url": "https://github.com/rust-lang/rust/commit/0459f0be9e30304d6eef8ba46038e952601dd9fe"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "e19cca38c040772d21ed64349ce3fe4637e5e8fe", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43673d9a87200f55423c01e85e108c2c9cfcefcb/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/43673d9a87200f55423c01e85e108c2c9cfcefcb/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=43673d9a87200f55423c01e85e108c2c9cfcefcb", "patch": "@@ -1 +1 @@\n-cf9cf7c923eb01146971429044f216a3ca905e06\n+38030ffb4e735b26260848b744c0910a5641e1db"}, {"sha": "4c989db0170b5408c71116555a8fcfc0702aab17", "filename": "src/helpers.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43673d9a87200f55423c01e85e108c2c9cfcefcb/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43673d9a87200f55423c01e85e108c2c9cfcefcb/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=43673d9a87200f55423c01e85e108c2c9cfcefcb", "patch": "@@ -387,7 +387,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// if this is not the case.\n     fn assert_target_os(&self, target_os: &str, name: &str) {\n         assert_eq!(\n-            self.eval_context_ref().tcx.sess.target.target_os,\n+            self.eval_context_ref().tcx.sess.target.os,\n             target_os,\n             \"`{}` is only available on the `{}` target OS\",\n             name,\n@@ -431,8 +431,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         use std::io::ErrorKind::*;\n         let this = self.eval_context_mut();\n         let target = &this.tcx.sess.target;\n-        let target_os = &target.target_os;\n-        let last_error = if target.options.target_family == Some(\"unix\".to_owned()) {\n+        let target_os = &target.os;\n+        let last_error = if target.os_family == Some(\"unix\".to_owned()) {\n             this.eval_libc(match e.kind() {\n                 ConnectionRefused => \"ECONNREFUSED\",\n                 ConnectionReset => \"ECONNRESET\","}, {"sha": "2537956228adb9f646c0b49735194ca3b6d5b402", "filename": "src/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43673d9a87200f55423c01e85e108c2c9cfcefcb/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43673d9a87200f55423c01e85e108c2c9cfcefcb/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=43673d9a87200f55423c01e85e108c2c9cfcefcb", "patch": "@@ -172,7 +172,7 @@ impl MemoryExtra {\n     pub fn init_extern_statics<'tcx, 'mir>(\n         this: &mut MiriEvalContext<'mir, 'tcx>,\n     ) -> InterpResult<'tcx> {\n-        match this.tcx.sess.target.target_os.as_str() {\n+        match this.tcx.sess.target.os.as_str() {\n             \"linux\" => {\n                 // \"__cxa_thread_atexit_impl\"\n                 // This should be all-zero, pointer-sized."}, {"sha": "12d1cda96da0446a0bc20a82f045dd1f2d1bb35d", "filename": "src/shims/env.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/43673d9a87200f55423c01e85e108c2c9cfcefcb/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43673d9a87200f55423c01e85e108c2c9cfcefcb/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=43673d9a87200f55423c01e85e108c2c9cfcefcb", "patch": "@@ -38,7 +38,7 @@ impl<'tcx> EnvVars<'tcx> {\n         ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'mir, 'tcx>>,\n         mut excluded_env_vars: Vec<String>,\n     ) -> InterpResult<'tcx> {\n-        let target_os = ecx.tcx.sess.target.target_os.as_str();\n+        let target_os = ecx.tcx.sess.target.os.as_str();\n         if target_os == \"windows\" {\n             // Temporary hack: Exclude `TERM` var to avoid terminfo trying to open the termcap file.\n             // Can be removed once https://github.com/rust-lang/miri/issues/1013 is resolved.\n@@ -101,7 +101,7 @@ impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mi\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn getenv(&mut self, name_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, Scalar<Tag>> {\n         let this = self.eval_context_mut();\n-        let target_os = &this.tcx.sess.target.target_os;\n+        let target_os = &this.tcx.sess.target.os;\n         assert!(target_os == \"linux\" || target_os == \"macos\", \"`getenv` is only available for the UNIX target family\");\n \n         let name_ptr = this.read_scalar(name_op)?.check_init()?;\n@@ -185,7 +185,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         value_op: OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, i32> {\n         let mut this = self.eval_context_mut();\n-        let target_os = &this.tcx.sess.target.target_os;\n+        let target_os = &this.tcx.sess.target.os;\n         assert!(target_os == \"linux\" || target_os == \"macos\", \"`setenv` is only available for the UNIX target family\");\n \n         let name_ptr = this.read_scalar(name_op)?.check_init()?;\n@@ -258,7 +258,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n     fn unsetenv(&mut self, name_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n-        let target_os = &this.tcx.sess.target.target_os;\n+        let target_os = &this.tcx.sess.target.os;\n         assert!(target_os == \"linux\" || target_os == \"macos\", \"`unsetenv` is only available for the UNIX target family\");\n \n         let name_ptr = this.read_scalar(name_op)?.check_init()?;\n@@ -290,7 +290,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         size_op: OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, Scalar<Tag>> {\n         let this = self.eval_context_mut();\n-        let target_os = &this.tcx.sess.target.target_os;\n+        let target_os = &this.tcx.sess.target.os;\n         assert!(target_os == \"linux\" || target_os == \"macos\", \"`getcwd` is only available for the UNIX target family\");\n \n         this.check_no_isolation(\"`getcwd`\")?;\n@@ -336,7 +336,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n     fn chdir(&mut self, path_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n-        let target_os = &this.tcx.sess.target.target_os;\n+        let target_os = &this.tcx.sess.target.os;\n         assert!(target_os == \"linux\" || target_os == \"macos\", \"`getcwd` is only available for the UNIX target family\");\n \n         this.check_no_isolation(\"`chdir`\")?;"}, {"sha": "24fa119446e85bc63a60c5c617246d80832bf50c", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43673d9a87200f55423c01e85e108c2c9cfcefcb/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43673d9a87200f55423c01e85e108c2c9cfcefcb/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=43673d9a87200f55423c01e85e108c2c9cfcefcb", "patch": "@@ -486,7 +486,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             // Platform-specific shims\n-            _ => match this.tcx.sess.target.target_os.as_str() {\n+            _ => match this.tcx.sess.target.os.as_str() {\n                 \"linux\" | \"macos\" => return shims::posix::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest, ret),\n                 \"windows\" => return shims::windows::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest, ret),\n                 target => throw_unsup_format!(\"the target `{}` is not supported\", target),"}, {"sha": "21b5a876463e92236b586229aeea3fe3952f25b3", "filename": "src/shims/os_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43673d9a87200f55423c01e85e108c2c9cfcefcb/src%2Fshims%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43673d9a87200f55423c01e85e108c2c9cfcefcb/src%2Fshims%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fos_str.rs?ref=43673d9a87200f55423c01e85e108c2c9cfcefcb", "patch": "@@ -234,7 +234,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         direction: PathConversion,\n     ) -> Cow<'a, OsStr> {\n         let this = self.eval_context_ref();\n-        let target_os = &this.tcx.sess.target.target_os;\n+        let target_os = &this.tcx.sess.target.os;\n         #[cfg(windows)]\n         return if target_os == \"windows\" {\n             // Windows-on-Windows, all fine."}, {"sha": "aac164b709b21da21d9f831794c3ec937f9e810e", "filename": "src/shims/posix/foreign_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43673d9a87200f55423c01e85e108c2c9cfcefcb/src%2Fshims%2Fposix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43673d9a87200f55423c01e85e108c2c9cfcefcb/src%2Fshims%2Fposix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fforeign_items.rs?ref=43673d9a87200f55423c01e85e108c2c9cfcefcb", "patch": "@@ -165,7 +165,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.read_scalar(handle)?.to_machine_usize(this)?;\n                 let symbol = this.read_scalar(symbol)?.check_init()?;\n                 let symbol_name = this.memory.read_c_str(symbol)?;\n-                if let Some(dlsym) = Dlsym::from_str(symbol_name, &this.tcx.sess.target.target_os)? {\n+                if let Some(dlsym) = Dlsym::from_str(symbol_name, &this.tcx.sess.target.os)? {\n                     let ptr = this.memory.create_fn_alloc(FnVal::Other(dlsym));\n                     this.write_scalar(Scalar::from(ptr), dest)?;\n                 } else {\n@@ -452,7 +452,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Platform-specific shims\n             _ => {\n-                match this.tcx.sess.target.target_os.as_str() {\n+                match this.tcx.sess.target.os.as_str() {\n                     \"linux\" => return shims::posix::linux::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest, ret),\n                     \"macos\" => return shims::posix::macos::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest, ret),\n                     _ => unreachable!(),"}, {"sha": "50589ca322dbea792a53fa320f9d45e5d9e1baa6", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43673d9a87200f55423c01e85e108c2c9cfcefcb/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43673d9a87200f55423c01e85e108c2c9cfcefcb/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=43673d9a87200f55423c01e85e108c2c9cfcefcb", "patch": "@@ -555,7 +555,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 },\n                 None => return this.handle_not_found(),\n             }\n-        } else if this.tcx.sess.target.target_os == \"macos\"\n+        } else if this.tcx.sess.target.os == \"macos\"\n             && cmd == this.eval_libc_i32(\"F_FULLFSYNC\")?\n         {\n             let &[_, _] = check_arg_count(args)?;\n@@ -989,7 +989,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.check_no_isolation(\"`mkdir`\")?;\n \n         #[cfg_attr(not(unix), allow(unused_variables))]\n-        let mode = if this.tcx.sess.target.target_os == \"macos\" {\n+        let mode = if this.tcx.sess.target.os == \"macos\" {\n             u32::from(this.read_scalar(mode_op)?.check_init()?.to_u16()?)\n         } else {\n             this.read_scalar(mode_op)?.to_u32()?"}, {"sha": "ca5cf3ffe8f34223f5f1c45a5a9b07b9176a5310", "filename": "src/shims/posix/linux/dlsym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43673d9a87200f55423c01e85e108c2c9cfcefcb/src%2Fshims%2Fposix%2Flinux%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43673d9a87200f55423c01e85e108c2c9cfcefcb/src%2Fshims%2Fposix%2Flinux%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fdlsym.rs?ref=43673d9a87200f55423c01e85e108c2c9cfcefcb", "patch": "@@ -27,7 +27,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         let (_dest, _ret) = ret.expect(\"we don't support any diverging dlsym\");\n-        assert!(this.tcx.sess.target.target_os == \"linux\");\n+        assert!(this.tcx.sess.target.os == \"linux\");\n \n         match dlsym {}\n     }"}, {"sha": "5b59cf27ee3be9ef93ad8cb833282532d68ea7ee", "filename": "src/shims/posix/macos/dlsym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43673d9a87200f55423c01e85e108c2c9cfcefcb/src%2Fshims%2Fposix%2Fmacos%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43673d9a87200f55423c01e85e108c2c9cfcefcb/src%2Fshims%2Fposix%2Fmacos%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fmacos%2Fdlsym.rs?ref=43673d9a87200f55423c01e85e108c2c9cfcefcb", "patch": "@@ -32,7 +32,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         let (dest, ret) = ret.expect(\"we don't support any diverging dlsym\");\n-        assert!(this.tcx.sess.target.target_os == \"macos\");\n+        assert!(this.tcx.sess.target.os == \"macos\");\n \n         match dlsym {\n             Dlsym::getentropy => {"}, {"sha": "2ca860367effe0c8330ab55eaf06840039d42698", "filename": "src/shims/tls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43673d9a87200f55423c01e85e108c2c9cfcefcb/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43673d9a87200f55423c01e85e108c2c9cfcefcb/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=43673d9a87200f55423c01e85e108c2c9cfcefcb", "patch": "@@ -340,7 +340,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // This is the first time we got asked to schedule a destructor. The\n             // Windows schedule destructor function must be called exactly once,\n             // this is why it is in this block.\n-            if this.tcx.sess.target.target_os == \"windows\" {\n+            if this.tcx.sess.target.os == \"windows\" {\n                 // On Windows, we signal that the thread quit by starting the\n                 // relevant function, reenabling the thread, and going back to\n                 // the scheduler."}, {"sha": "415299c51fc66d5c6ccde98aab828a279a5ed15d", "filename": "src/shims/windows/dlsym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43673d9a87200f55423c01e85e108c2c9cfcefcb/src%2Fshims%2Fwindows%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43673d9a87200f55423c01e85e108c2c9cfcefcb/src%2Fshims%2Fwindows%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fdlsym.rs?ref=43673d9a87200f55423c01e85e108c2c9cfcefcb", "patch": "@@ -44,7 +44,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         let (dest, ret) = ret.expect(\"we don't support any diverging dlsym\");\n-        assert!(this.tcx.sess.target.target_os == \"windows\");\n+        assert!(this.tcx.sess.target.os == \"windows\");\n \n         match dlsym {\n             Dlsym::AcquireSRWLockExclusive => {"}, {"sha": "12b714880b359ffedabc6c2f6358b1542f1ea9f0", "filename": "src/shims/windows/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43673d9a87200f55423c01e85e108c2c9cfcefcb/src%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43673d9a87200f55423c01e85e108c2c9cfcefcb/src%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fforeign_items.rs?ref=43673d9a87200f55423c01e85e108c2c9cfcefcb", "patch": "@@ -213,7 +213,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let &[hModule, lpProcName] = check_arg_count(args)?;\n                 this.read_scalar(hModule)?.to_machine_isize(this)?;\n                 let name = this.memory.read_c_str(this.read_scalar(lpProcName)?.check_init()?)?;\n-                if let Some(dlsym) = Dlsym::from_str(name, &this.tcx.sess.target.target_os)? {\n+                if let Some(dlsym) = Dlsym::from_str(name, &this.tcx.sess.target.os)? {\n                     let ptr = this.memory.create_fn_alloc(FnVal::Other(dlsym));\n                     this.write_scalar(Scalar::from(ptr), dest)?;\n                 } else {"}]}