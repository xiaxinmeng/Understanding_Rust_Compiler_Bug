{"sha": "6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYjI1NDVmNzdiNzIyYThjZGU1Y2I4N2IyODljZDhiODc2NDNhN2E=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2017-02-16T01:27:58Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2017-02-22T02:12:55Z"}, "message": "TRPL Nightly -> Unstable Book\n\nPort the chapters from TRPL's \"Nightly Rust\" section to the Unstable\nBook, and remove it from TRPL.", "tree": {"sha": "5fb9f767e37887c746d1a67d60a1a094f2814b7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fb9f767e37887c746d1a67d60a1a094f2814b7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "html_url": "https://github.com/rust-lang/rust/commit/6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aba4bf60f5129af31ef7271e3499dadaadd2071d", "url": "https://api.github.com/repos/rust-lang/rust/commits/aba4bf60f5129af31ef7271e3499dadaadd2071d", "html_url": "https://github.com/rust-lang/rust/commit/aba4bf60f5129af31ef7271e3499dadaadd2071d"}], "stats": {"total": 2354, "additions": 1261, "deletions": 1093}, "files": [{"sha": "c3763cdf9d6d7ad7f3a0706c8b1747c27d53b499", "filename": "src/doc/book/src/SUMMARY.md", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Fbook%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Fbook%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2FSUMMARY.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -55,18 +55,6 @@\n     * [Release Channels](release-channels.md)\n     * [Using Rust without the standard library](using-rust-without-the-standard-library.md)\n     * [Procedural Macros (and custom derive)](procedural-macros.md)\n-* [Nightly Rust](nightly-rust.md)\n-    * [Compiler Plugins](compiler-plugins.md)\n-    * [Inline Assembly](inline-assembly.md)\n-    * [No stdlib](no-stdlib.md)\n-    * [Intrinsics](intrinsics.md)\n-    * [Lang items](lang-items.md)\n-    * [Advanced linking](advanced-linking.md)\n-    * [Benchmark Tests](benchmark-tests.md)\n-    * [Box Syntax and Patterns](box-syntax-and-patterns.md)\n-    * [Slice Patterns](slice-patterns.md)\n-    * [Associated Constants](associated-constants.md)\n-    * [Custom Allocators](custom-allocators.md)\n * [Glossary](glossary.md)\n * [Syntax Index](syntax-index.md)\n * [Bibliography](bibliography.md)"}, {"sha": "a882d6d2ebe0779a565f418d9a4070944939d223", "filename": "src/doc/book/src/advanced-linking.md", "status": "removed", "additions": 0, "deletions": 145, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/aba4bf60f5129af31ef7271e3499dadaadd2071d/src%2Fdoc%2Fbook%2Fsrc%2Fadvanced-linking.md", "raw_url": "https://github.com/rust-lang/rust/raw/aba4bf60f5129af31ef7271e3499dadaadd2071d/src%2Fdoc%2Fbook%2Fsrc%2Fadvanced-linking.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fadvanced-linking.md?ref=aba4bf60f5129af31ef7271e3499dadaadd2071d", "patch": "@@ -1,145 +0,0 @@\n-# Advanced Linking\n-\n-The common cases of linking with Rust have been covered earlier in this book,\n-but supporting the range of linking possibilities made available by other\n-languages is important for Rust to achieve seamless interaction with native\n-libraries.\n-\n-# Link args\n-\n-There is one other way to tell `rustc` how to customize linking, and that is via\n-the `link_args` attribute. This attribute is applied to `extern` blocks and\n-specifies raw flags which need to get passed to the linker when producing an\n-artifact. An example usage would be:\n-\n-```rust,no_run\n-#![feature(link_args)]\n-\n-#[link_args = \"-foo -bar -baz\"]\n-extern {}\n-# fn main() {}\n-```\n-\n-Note that this feature is currently hidden behind the `feature(link_args)` gate\n-because this is not a sanctioned way of performing linking. Right now `rustc`\n-shells out to the system linker (`gcc` on most systems, `link.exe` on MSVC),\n-so it makes sense to provide extra command line\n-arguments, but this will not always be the case. In the future `rustc` may use\n-LLVM directly to link native libraries, in which case `link_args` will have no\n-meaning. You can achieve the same effect as the `link_args` attribute with the\n-`-C link-args` argument to `rustc`.\n-\n-It is highly recommended to *not* use this attribute, and rather use the more\n-formal `#[link(...)]` attribute on `extern` blocks instead.\n-\n-# Static linking\n-\n-Static linking refers to the process of creating output that contains all\n-required libraries and so doesn't need libraries installed on every system where\n-you want to use your compiled project. Pure-Rust dependencies are statically\n-linked by default so you can use created binaries and libraries without\n-installing Rust everywhere. By contrast, native libraries\n-(e.g. `libc` and `libm`) are usually dynamically linked, but it is possible to\n-change this and statically link them as well.\n-\n-Linking is a very platform-dependent topic, and static linking may not even be\n-possible on some platforms! This section assumes some basic familiarity with\n-linking on your platform of choice.\n-\n-## Linux\n-\n-By default, all Rust programs on Linux will link to the system `libc` along with\n-a number of other libraries. Let's look at an example on a 64-bit Linux machine\n-with GCC and `glibc` (by far the most common `libc` on Linux):\n-\n-```text\n-$ cat example.rs\n-fn main() {}\n-$ rustc example.rs\n-$ ldd example\n-        linux-vdso.so.1 =>  (0x00007ffd565fd000)\n-        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fa81889c000)\n-        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fa81867e000)\n-        librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007fa818475000)\n-        libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007fa81825f000)\n-        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fa817e9a000)\n-        /lib64/ld-linux-x86-64.so.2 (0x00007fa818cf9000)\n-        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007fa817b93000)\n-```\n-\n-Dynamic linking on Linux can be undesirable if you wish to use new library\n-features on old systems or target systems which do not have the required\n-dependencies for your program to run.\n-\n-Static linking is supported via an alternative `libc`, [`musl`](http://www.musl-libc.org). You can compile\n-your own version of Rust with `musl` enabled and install it into a custom\n-directory with the instructions below:\n-\n-```text\n-$ mkdir musldist\n-$ PREFIX=$(pwd)/musldist\n-$\n-$ # Build musl\n-$ curl -O http://www.musl-libc.org/releases/musl-1.1.10.tar.gz\n-$ tar xf musl-1.1.10.tar.gz\n-$ cd musl-1.1.10/\n-musl-1.1.10 $ ./configure --disable-shared --prefix=$PREFIX\n-musl-1.1.10 $ make\n-musl-1.1.10 $ make install\n-musl-1.1.10 $ cd ..\n-$ du -h musldist/lib/libc.a\n-2.2M    musldist/lib/libc.a\n-$\n-$ # Build libunwind.a\n-$ curl -O http://llvm.org/releases/3.7.0/llvm-3.7.0.src.tar.xz\n-$ tar xf llvm-3.7.0.src.tar.xz\n-$ cd llvm-3.7.0.src/projects/\n-llvm-3.7.0.src/projects $ curl http://llvm.org/releases/3.7.0/libunwind-3.7.0.src.tar.xz | tar xJf -\n-llvm-3.7.0.src/projects $ mv libunwind-3.7.0.src libunwind\n-llvm-3.7.0.src/projects $ mkdir libunwind/build\n-llvm-3.7.0.src/projects $ cd libunwind/build\n-llvm-3.7.0.src/projects/libunwind/build $ cmake -DLLVM_PATH=../../.. -DLIBUNWIND_ENABLE_SHARED=0 ..\n-llvm-3.7.0.src/projects/libunwind/build $ make\n-llvm-3.7.0.src/projects/libunwind/build $ cp lib/libunwind.a $PREFIX/lib/\n-llvm-3.7.0.src/projects/libunwind/build $ cd ../../../../\n-$ du -h musldist/lib/libunwind.a\n-164K    musldist/lib/libunwind.a\n-$\n-$ # Build musl-enabled rust\n-$ git clone https://github.com/rust-lang/rust.git muslrust\n-$ cd muslrust\n-muslrust $ ./configure --target=x86_64-unknown-linux-musl --musl-root=$PREFIX --prefix=$PREFIX\n-muslrust $ make\n-muslrust $ make install\n-muslrust $ cd ..\n-$ du -h musldist/bin/rustc\n-12K     musldist/bin/rustc\n-```\n-\n-You now have a build of a `musl`-enabled Rust! Because we've installed it to a\n-custom prefix we need to make sure our system can find the binaries and appropriate\n-libraries when we try and run it:\n-\n-```text\n-$ export PATH=$PREFIX/bin:$PATH\n-$ export LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH\n-```\n-\n-Let's try it out!\n-\n-```text\n-$ echo 'fn main() { println!(\"hi!\"); panic!(\"failed\"); }' > example.rs\n-$ rustc --target=x86_64-unknown-linux-musl example.rs\n-$ ldd example\n-        not a dynamic executable\n-$ ./example\n-hi!\n-thread 'main' panicked at 'failed', example.rs:1\n-```\n-\n-Success! This binary can be copied to almost any Linux machine with the same\n-machine architecture and run without issues.\n-\n-`cargo build` also permits the `--target` option so you should be able to build\n-your crates as normal. However, you may need to recompile your native libraries\n-against `musl` before they can be linked against."}, {"sha": "61bad3d39489589ec8cae03e19f7cf34e24b8ace", "filename": "src/doc/book/src/associated-constants.md", "status": "removed", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/aba4bf60f5129af31ef7271e3499dadaadd2071d/src%2Fdoc%2Fbook%2Fsrc%2Fassociated-constants.md", "raw_url": "https://github.com/rust-lang/rust/raw/aba4bf60f5129af31ef7271e3499dadaadd2071d/src%2Fdoc%2Fbook%2Fsrc%2Fassociated-constants.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fassociated-constants.md?ref=aba4bf60f5129af31ef7271e3499dadaadd2071d", "patch": "@@ -1,79 +0,0 @@\n-# Associated Constants\n-\n-With the `associated_consts` feature, you can define constants like this:\n-\n-```rust\n-#![feature(associated_consts)]\n-\n-trait Foo {\n-    const ID: i32;\n-}\n-\n-impl Foo for i32 {\n-    const ID: i32 = 1;\n-}\n-\n-fn main() {\n-    assert_eq!(1, i32::ID);\n-}\n-```\n-\n-Any implementor of `Foo` will have to define `ID`. Without the definition:\n-\n-```rust,ignore\n-#![feature(associated_consts)]\n-\n-trait Foo {\n-    const ID: i32;\n-}\n-\n-impl Foo for i32 {\n-}\n-```\n-\n-gives\n-\n-```text\n-error: not all trait items implemented, missing: `ID` [E0046]\n-     impl Foo for i32 {\n-     }\n-```\n-\n-A default value can be implemented as well:\n-\n-```rust\n-#![feature(associated_consts)]\n-\n-trait Foo {\n-    const ID: i32 = 1;\n-}\n-\n-impl Foo for i32 {\n-}\n-\n-impl Foo for i64 {\n-    const ID: i32 = 5;\n-}\n-\n-fn main() {\n-    assert_eq!(1, i32::ID);\n-    assert_eq!(5, i64::ID);\n-}\n-```\n-\n-As you can see, when implementing `Foo`, you can leave it unimplemented, as\n-with `i32`. It will then use the default value. But, as in `i64`, we can also\n-add our own definition.\n-\n-Associated constants don\u2019t have to be associated with a trait. An `impl` block\n-for a `struct` or an `enum` works fine too:\n-\n-```rust\n-#![feature(associated_consts)]\n-\n-struct Foo;\n-\n-impl Foo {\n-    const FOO: u32 = 3;\n-}\n-```"}, {"sha": "f03e881f47404300c47ebc313468a6658f4bfef6", "filename": "src/doc/book/src/box-syntax-and-patterns.md", "status": "removed", "additions": 0, "deletions": 100, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/aba4bf60f5129af31ef7271e3499dadaadd2071d/src%2Fdoc%2Fbook%2Fsrc%2Fbox-syntax-and-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/aba4bf60f5129af31ef7271e3499dadaadd2071d/src%2Fdoc%2Fbook%2Fsrc%2Fbox-syntax-and-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fbox-syntax-and-patterns.md?ref=aba4bf60f5129af31ef7271e3499dadaadd2071d", "patch": "@@ -1,100 +0,0 @@\n-#  Box Syntax and Patterns\n-\n-Currently the only stable way to create a `Box` is via the `Box::new` method.\n-Also it is not possible in stable Rust to destructure a `Box` in a match\n-pattern. The unstable `box` keyword can be used to both create and destructure\n-a `Box`. An example usage would be:\n-\n-```rust\n-#![feature(box_syntax, box_patterns)]\n-\n-fn main() {\n-    let b = Some(box 5);\n-    match b {\n-        Some(box n) if n < 0 => {\n-            println!(\"Box contains negative number {}\", n);\n-        },\n-        Some(box n) if n >= 0 => {\n-            println!(\"Box contains non-negative number {}\", n);\n-        },\n-        None => {\n-            println!(\"No box\");\n-        },\n-        _ => unreachable!()\n-    }\n-}\n-```\n-\n-Note that these features are currently hidden behind the `box_syntax` (box\n-creation) and `box_patterns` (destructuring and pattern matching) gates\n-because the syntax may still change in the future.\n-\n-# Returning Pointers\n-\n-In many languages with pointers, you'd return a pointer from a function\n-so as to avoid copying a large data structure. For example:\n-\n-```rust\n-struct BigStruct {\n-    one: i32,\n-    two: i32,\n-    // Etc.\n-    one_hundred: i32,\n-}\n-\n-fn foo(x: Box<BigStruct>) -> Box<BigStruct> {\n-    Box::new(*x)\n-}\n-\n-fn main() {\n-    let x = Box::new(BigStruct {\n-        one: 1,\n-        two: 2,\n-        one_hundred: 100,\n-    });\n-\n-    let y = foo(x);\n-}\n-```\n-\n-The idea is that by passing around a box, you're only copying a pointer, rather\n-than the hundred `i32`s that make up the `BigStruct`.\n-\n-This is an antipattern in Rust. Instead, write this:\n-\n-```rust\n-#![feature(box_syntax)]\n-\n-struct BigStruct {\n-    one: i32,\n-    two: i32,\n-    // Etc.\n-    one_hundred: i32,\n-}\n-\n-fn foo(x: Box<BigStruct>) -> BigStruct {\n-    *x\n-}\n-\n-fn main() {\n-    let x = Box::new(BigStruct {\n-        one: 1,\n-        two: 2,\n-        one_hundred: 100,\n-    });\n-\n-    let y: Box<BigStruct> = box foo(x);\n-}\n-```\n-\n-This gives you flexibility without sacrificing performance.\n-\n-You may think that this gives us terrible performance: return a value and then\n-immediately box it up ?! Isn't this pattern the worst of both worlds? Rust is\n-smarter than that. There is no copy in this code. `main` allocates enough room\n-for the `box`, passes a pointer to that memory into `foo` as `x`, and then\n-`foo` writes the value straight into the `Box<T>`.\n-\n-This is important enough that it bears repeating: pointers are not for\n-optimizing returning values from your code. Allow the caller to choose how they\n-want to use your output."}, {"sha": "154b5f0f4e256a8892f18a2fb3220c524c594c25", "filename": "src/doc/book/src/custom-allocators.md", "status": "removed", "additions": 0, "deletions": 171, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/aba4bf60f5129af31ef7271e3499dadaadd2071d/src%2Fdoc%2Fbook%2Fsrc%2Fcustom-allocators.md", "raw_url": "https://github.com/rust-lang/rust/raw/aba4bf60f5129af31ef7271e3499dadaadd2071d/src%2Fdoc%2Fbook%2Fsrc%2Fcustom-allocators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fcustom-allocators.md?ref=aba4bf60f5129af31ef7271e3499dadaadd2071d", "patch": "@@ -1,171 +0,0 @@\n-# Custom Allocators\n-\n-Allocating memory isn't always the easiest thing to do, and while Rust generally\n-takes care of this by default it often becomes necessary to customize how\n-allocation occurs. The compiler and standard library currently allow switching\n-out the default global allocator in use at compile time. The design is currently\n-spelled out in [RFC 1183][rfc] but this will walk you through how to get your\n-own allocator up and running.\n-\n-[rfc]: https://github.com/rust-lang/rfcs/blob/master/text/1183-swap-out-jemalloc.md\n-\n-# Default Allocator\n-\n-The compiler currently ships two default allocators: `alloc_system` and\n-`alloc_jemalloc` (some targets don't have jemalloc, however). These allocators\n-are normal Rust crates and contain an implementation of the routines to\n-allocate and deallocate memory. The standard library is not compiled assuming\n-either one, and the compiler will decide which allocator is in use at\n-compile-time depending on the type of output artifact being produced.\n-\n-Binaries generated by the compiler will use `alloc_jemalloc` by default (where\n-available). In this situation the compiler \"controls the world\" in the sense of\n-it has power over the final link. Primarily this means that the allocator\n-decision can be left up the compiler.\n-\n-Dynamic and static libraries, however, will use `alloc_system` by default. Here\n-Rust is typically a 'guest' in another application or another world where it\n-cannot authoritatively decide what allocator is in use. As a result it resorts\n-back to the standard APIs (e.g. `malloc` and `free`) for acquiring and releasing\n-memory.\n-\n-# Switching Allocators\n-\n-Although the compiler's default choices may work most of the time, it's often\n-necessary to tweak certain aspects. Overriding the compiler's decision about\n-which allocator is in use is done simply by linking to the desired allocator:\n-\n-```rust,no_run\n-#![feature(alloc_system)]\n-\n-extern crate alloc_system;\n-\n-fn main() {\n-    let a = Box::new(4); // Allocates from the system allocator.\n-    println!(\"{}\", a);\n-}\n-```\n-\n-In this example the binary generated will not link to jemalloc by default but\n-instead use the system allocator. Conversely to generate a dynamic library which\n-uses jemalloc by default one would write:\n-\n-```rust,ignore\n-#![feature(alloc_jemalloc)]\n-#![crate_type = \"dylib\"]\n-\n-extern crate alloc_jemalloc;\n-\n-pub fn foo() {\n-    let a = Box::new(4); // Allocates from jemalloc.\n-    println!(\"{}\", a);\n-}\n-# fn main() {}\n-```\n-\n-# Writing a custom allocator\n-\n-Sometimes even the choices of jemalloc vs the system allocator aren't enough and\n-an entirely new custom allocator is required. In this you'll write your own\n-crate which implements the allocator API (e.g. the same as `alloc_system` or\n-`alloc_jemalloc`). As an example, let's take a look at a simplified and\n-annotated version of `alloc_system`\n-\n-```rust,no_run\n-# // Only needed for rustdoc --test down below.\n-# #![feature(lang_items)]\n-// The compiler needs to be instructed that this crate is an allocator in order\n-// to realize that when this is linked in another allocator like jemalloc should\n-// not be linked in.\n-#![feature(allocator)]\n-#![allocator]\n-\n-// Allocators are not allowed to depend on the standard library which in turn\n-// requires an allocator in order to avoid circular dependencies. This crate,\n-// however, can use all of libcore.\n-#![no_std]\n-\n-// Let's give a unique name to our custom allocator:\n-#![crate_name = \"my_allocator\"]\n-#![crate_type = \"rlib\"]\n-\n-// Our system allocator will use the in-tree libc crate for FFI bindings. Note\n-// that currently the external (crates.io) libc cannot be used because it links\n-// to the standard library (e.g. `#![no_std]` isn't stable yet), so that's why\n-// this specifically requires the in-tree version.\n-#![feature(libc)]\n-extern crate libc;\n-\n-// Listed below are the five allocation functions currently required by custom\n-// allocators. Their signatures and symbol names are not currently typechecked\n-// by the compiler, but this is a future extension and are required to match\n-// what is found below.\n-//\n-// Note that the standard `malloc` and `realloc` functions do not provide a way\n-// to communicate alignment so this implementation would need to be improved\n-// with respect to alignment in that aspect.\n-\n-#[no_mangle]\n-pub extern fn __rust_allocate(size: usize, _align: usize) -> *mut u8 {\n-    unsafe { libc::malloc(size as libc::size_t) as *mut u8 }\n-}\n-\n-#[no_mangle]\n-pub extern fn __rust_deallocate(ptr: *mut u8, _old_size: usize, _align: usize) {\n-    unsafe { libc::free(ptr as *mut libc::c_void) }\n-}\n-\n-#[no_mangle]\n-pub extern fn __rust_reallocate(ptr: *mut u8, _old_size: usize, size: usize,\n-                                _align: usize) -> *mut u8 {\n-    unsafe {\n-        libc::realloc(ptr as *mut libc::c_void, size as libc::size_t) as *mut u8\n-    }\n-}\n-\n-#[no_mangle]\n-pub extern fn __rust_reallocate_inplace(_ptr: *mut u8, old_size: usize,\n-                                        _size: usize, _align: usize) -> usize {\n-    old_size // This api is not supported by libc.\n-}\n-\n-#[no_mangle]\n-pub extern fn __rust_usable_size(size: usize, _align: usize) -> usize {\n-    size\n-}\n-\n-# // Only needed to get rustdoc to test this:\n-# fn main() {}\n-# #[lang = \"panic_fmt\"] fn panic_fmt() {}\n-# #[lang = \"eh_personality\"] fn eh_personality() {}\n-# #[lang = \"eh_unwind_resume\"] extern fn eh_unwind_resume() {}\n-# #[no_mangle] pub extern fn rust_eh_register_frames () {}\n-# #[no_mangle] pub extern fn rust_eh_unregister_frames () {}\n-```\n-\n-After we compile this crate, it can be used as follows:\n-\n-```rust,ignore\n-extern crate my_allocator;\n-\n-fn main() {\n-    let a = Box::new(8); // Allocates memory via our custom allocator crate.\n-    println!(\"{}\", a);\n-}\n-```\n-\n-# Custom allocator limitations\n-\n-There are a few restrictions when working with custom allocators which may cause\n-compiler errors:\n-\n-* Any one artifact may only be linked to at most one allocator. Binaries,\n-  dylibs, and staticlibs must link to exactly one allocator, and if none have\n-  been explicitly chosen the compiler will choose one. On the other hand rlibs\n-  do not need to link to an allocator (but still can).\n-\n-* A consumer of an allocator is tagged with `#![needs_allocator]` (e.g. the\n-  `liballoc` crate currently) and an `#[allocator]` crate cannot transitively\n-  depend on a crate which needs an allocator (e.g. circular dependencies are not\n-  allowed). This basically means that allocators must restrict themselves to\n-  libcore currently."}, {"sha": "4262289acbfde70578ec1e16c7105a75bc23b925", "filename": "src/doc/book/src/inline-assembly.md", "status": "removed", "additions": 0, "deletions": 184, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/aba4bf60f5129af31ef7271e3499dadaadd2071d/src%2Fdoc%2Fbook%2Fsrc%2Finline-assembly.md", "raw_url": "https://github.com/rust-lang/rust/raw/aba4bf60f5129af31ef7271e3499dadaadd2071d/src%2Fdoc%2Fbook%2Fsrc%2Finline-assembly.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Finline-assembly.md?ref=aba4bf60f5129af31ef7271e3499dadaadd2071d", "patch": "@@ -1,184 +0,0 @@\n-# Inline Assembly\n-\n-For extremely low-level manipulations and performance reasons, one\n-might wish to control the CPU directly. Rust supports using inline\n-assembly to do this via the `asm!` macro.\n-\n-```rust,ignore\n-asm!(assembly template\n-   : output operands\n-   : input operands\n-   : clobbers\n-   : options\n-   );\n-```\n-\n-Any use of `asm` is feature gated (requires `#![feature(asm)]` on the\n-crate to allow) and of course requires an `unsafe` block.\n-\n-> **Note**: the examples here are given in x86/x86-64 assembly, but\n-> all platforms are supported.\n-\n-## Assembly template\n-\n-The `assembly template` is the only required parameter and must be a\n-literal string (i.e. `\"\"`)\n-\n-```rust\n-#![feature(asm)]\n-\n-#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-fn foo() {\n-    unsafe {\n-        asm!(\"NOP\");\n-    }\n-}\n-\n-// Other platforms:\n-#[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n-fn foo() { /* ... */ }\n-\n-fn main() {\n-    // ...\n-    foo();\n-    // ...\n-}\n-```\n-\n-(The `feature(asm)` and `#[cfg]`s are omitted from now on.)\n-\n-Output operands, input operands, clobbers and options are all optional\n-but you must add the right number of `:` if you skip them:\n-\n-```rust\n-# #![feature(asm)]\n-# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-# fn main() { unsafe {\n-asm!(\"xor %eax, %eax\"\n-    :\n-    :\n-    : \"eax\"\n-   );\n-# } }\n-# #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n-# fn main() {}\n-```\n-\n-Whitespace also doesn't matter:\n-\n-```rust\n-# #![feature(asm)]\n-# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-# fn main() { unsafe {\n-asm!(\"xor %eax, %eax\" ::: \"eax\");\n-# } }\n-# #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n-# fn main() {}\n-```\n-\n-## Operands\n-\n-Input and output operands follow the same format: `:\n-\"constraints1\"(expr1), \"constraints2\"(expr2), ...\"`. Output operand\n-expressions must be mutable lvalues, or not yet assigned:\n-\n-```rust\n-# #![feature(asm)]\n-# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-fn add(a: i32, b: i32) -> i32 {\n-    let c: i32;\n-    unsafe {\n-        asm!(\"add $2, $0\"\n-             : \"=r\"(c)\n-             : \"0\"(a), \"r\"(b)\n-             );\n-    }\n-    c\n-}\n-# #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n-# fn add(a: i32, b: i32) -> i32 { a + b }\n-\n-fn main() {\n-    assert_eq!(add(3, 14159), 14162)\n-}\n-```\n-\n-If you would like to use real operands in this position, however,\n-you are required to put curly braces `{}` around the register that\n-you want, and you are required to put the specific size of the\n-operand. This is useful for very low level programming, where\n-which register you use is important:\n-\n-```rust\n-# #![feature(asm)]\n-# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-# unsafe fn read_byte_in(port: u16) -> u8 {\n-let result: u8;\n-asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\"(port));\n-result\n-# }\n-```\n-\n-## Clobbers\n-\n-Some instructions modify registers which might otherwise have held\n-different values so we use the clobbers list to indicate to the\n-compiler not to assume any values loaded into those registers will\n-stay valid.\n-\n-```rust\n-# #![feature(asm)]\n-# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-# fn main() { unsafe {\n-// Put the value 0x200 in eax:\n-asm!(\"mov $$0x200, %eax\" : /* no outputs */ : /* no inputs */ : \"eax\");\n-# } }\n-# #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n-# fn main() {}\n-```\n-\n-Input and output registers need not be listed since that information\n-is already communicated by the given constraints. Otherwise, any other\n-registers used either implicitly or explicitly should be listed.\n-\n-If the assembly changes the condition code register `cc` should be\n-specified as one of the clobbers. Similarly, if the assembly modifies\n-memory, `memory` should also be specified.\n-\n-## Options\n-\n-The last section, `options` is specific to Rust. The format is comma\n-separated literal strings (i.e. `:\"foo\", \"bar\", \"baz\"`). It's used to\n-specify some extra info about the inline assembly:\n-\n-Current valid options are:\n-\n-1. *volatile* - specifying this is analogous to\n-   `__asm__ __volatile__ (...)` in gcc/clang.\n-2. *alignstack* - certain instructions expect the stack to be\n-   aligned a certain way (i.e. SSE) and specifying this indicates to\n-   the compiler to insert its usual stack alignment code\n-3. *intel* - use intel syntax instead of the default AT&T.\n-\n-```rust\n-# #![feature(asm)]\n-# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-# fn main() {\n-let result: i32;\n-unsafe {\n-   asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")\n-}\n-println!(\"eax is currently {}\", result);\n-# }\n-# #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n-# fn main() {}\n-```\n-\n-## More Information\n-\n-The current implementation of the `asm!` macro is a direct binding to [LLVM's\n-inline assembler expressions][llvm-docs], so be sure to check out [their\n-documentation as well][llvm-docs] for more information about clobbers,\n-constraints, etc.\n-\n-[llvm-docs]: http://llvm.org/docs/LangRef.html#inline-assembler-expressions"}, {"sha": "e1edce3e80f714dfda16b833d8327d29ae0995e9", "filename": "src/doc/book/src/intrinsics.md", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/aba4bf60f5129af31ef7271e3499dadaadd2071d/src%2Fdoc%2Fbook%2Fsrc%2Fintrinsics.md", "raw_url": "https://github.com/rust-lang/rust/raw/aba4bf60f5129af31ef7271e3499dadaadd2071d/src%2Fdoc%2Fbook%2Fsrc%2Fintrinsics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fintrinsics.md?ref=aba4bf60f5129af31ef7271e3499dadaadd2071d", "patch": "@@ -1,25 +0,0 @@\n-# Intrinsics\n-\n-> **Note**: intrinsics will forever have an unstable interface, it is\n-> recommended to use the stable interfaces of libcore rather than intrinsics\n-> directly.\n-\n-These are imported as if they were FFI functions, with the special\n-`rust-intrinsic` ABI. For example, if one was in a freestanding\n-context, but wished to be able to `transmute` between types, and\n-perform efficient pointer arithmetic, one would import those functions\n-via a declaration like\n-\n-```rust\n-#![feature(intrinsics)]\n-# fn main() {}\n-\n-extern \"rust-intrinsic\" {\n-    fn transmute<T, U>(x: T) -> U;\n-\n-    fn offset<T>(dst: *const T, offset: isize) -> *const T;\n-}\n-```\n-\n-As with any other FFI functions, these are always `unsafe` to call.\n-"}, {"sha": "9bd64d3817955a472baac17a9928103604e813f2", "filename": "src/doc/book/src/lang-items.md", "status": "removed", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/aba4bf60f5129af31ef7271e3499dadaadd2071d/src%2Fdoc%2Fbook%2Fsrc%2Flang-items.md", "raw_url": "https://github.com/rust-lang/rust/raw/aba4bf60f5129af31ef7271e3499dadaadd2071d/src%2Fdoc%2Fbook%2Fsrc%2Flang-items.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Flang-items.md?ref=aba4bf60f5129af31ef7271e3499dadaadd2071d", "patch": "@@ -1,84 +0,0 @@\n-# Lang items\n-\n-> **Note**: lang items are often provided by crates in the Rust distribution,\n-> and lang items themselves have an unstable interface. It is recommended to use\n-> officially distributed crates instead of defining your own lang items.\n-\n-The `rustc` compiler has certain pluggable operations, that is,\n-functionality that isn't hard-coded into the language, but is\n-implemented in libraries, with a special marker to tell the compiler\n-it exists. The marker is the attribute `#[lang = \"...\"]` and there are\n-various different values of `...`, i.e. various different 'lang\n-items'.\n-\n-For example, `Box` pointers require two lang items, one for allocation\n-and one for deallocation. A freestanding program that uses the `Box`\n-sugar for dynamic allocations via `malloc` and `free`:\n-\n-```rust,ignore\n-#![feature(lang_items, box_syntax, start, libc, core_intrinsics)]\n-#![no_std]\n-use core::intrinsics;\n-\n-extern crate libc;\n-\n-#[lang = \"owned_box\"]\n-pub struct Box<T>(*mut T);\n-\n-#[lang = \"exchange_malloc\"]\n-unsafe fn allocate(size: usize, _align: usize) -> *mut u8 {\n-    let p = libc::malloc(size as libc::size_t) as *mut u8;\n-\n-    // Check if `malloc` failed:\n-    if p as usize == 0 {\n-        intrinsics::abort();\n-    }\n-\n-    p\n-}\n-\n-#[lang = \"exchange_free\"]\n-unsafe fn deallocate(ptr: *mut u8, _size: usize, _align: usize) {\n-    libc::free(ptr as *mut libc::c_void)\n-}\n-\n-#[lang = \"box_free\"]\n-unsafe fn box_free<T: ?Sized>(ptr: *mut T) {\n-    deallocate(ptr as *mut u8, ::core::mem::size_of_val(&*ptr), ::core::mem::align_of_val(&*ptr));\n-}\n-\n-#[start]\n-fn main(argc: isize, argv: *const *const u8) -> isize {\n-    let x = box 1;\n-\n-    0\n-}\n-\n-#[lang = \"eh_personality\"] extern fn rust_eh_personality() {}\n-#[lang = \"panic_fmt\"] extern fn rust_begin_panic() -> ! { unsafe { intrinsics::abort() } }\n-# #[lang = \"eh_unwind_resume\"] extern fn rust_eh_unwind_resume() {}\n-# #[no_mangle] pub extern fn rust_eh_register_frames () {}\n-# #[no_mangle] pub extern fn rust_eh_unregister_frames () {}\n-```\n-\n-Note the use of `abort`: the `exchange_malloc` lang item is assumed to\n-return a valid pointer, and so needs to do the check internally.\n-\n-Other features provided by lang items include:\n-\n-- overloadable operators via traits: the traits corresponding to the\n-  `==`, `<`, dereferencing (`*`) and `+` (etc.) operators are all\n-  marked with lang items; those specific four are `eq`, `ord`,\n-  `deref`, and `add` respectively.\n-- stack unwinding and general failure; the `eh_personality`,\n-  `eh_unwind_resume`, `fail` and `fail_bounds_checks` lang items.\n-- the traits in `std::marker` used to indicate types of\n-  various kinds; lang items `send`, `sync` and `copy`.\n-- the marker types and variance indicators found in\n-  `std::marker`; lang items `covariant_type`,\n-  `contravariant_lifetime`, etc.\n-\n-Lang items are loaded lazily by the compiler; e.g. if one never uses\n-`Box` then there is no need to define functions for `exchange_malloc`\n-and `exchange_free`. `rustc` will emit an error when an item is needed\n-but not found in the current crate or any that it depends on."}, {"sha": "5dfaa9e0fa8009551a2bc19067b294adf2c5ab39", "filename": "src/doc/book/src/nightly-rust.md", "status": "removed", "additions": 0, "deletions": 100, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/aba4bf60f5129af31ef7271e3499dadaadd2071d/src%2Fdoc%2Fbook%2Fsrc%2Fnightly-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/aba4bf60f5129af31ef7271e3499dadaadd2071d/src%2Fdoc%2Fbook%2Fsrc%2Fnightly-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fnightly-rust.md?ref=aba4bf60f5129af31ef7271e3499dadaadd2071d", "patch": "@@ -1,100 +0,0 @@\n-# Nightly Rust\n-\n-Rust provides three distribution channels for Rust: nightly, beta, and stable.\n-Unstable features are only available on nightly Rust. For more details on this\n-process, see [Stability as a deliverable][stability].\n-\n-[stability]: http://blog.rust-lang.org/2014/10/30/Stability.html\n-\n-To install nightly Rust, you can use [rustup.rs][rustup]:\n-\n-[rustup]: https://rustup.rs\n-\n-```bash\n-$ curl https://sh.rustup.rs -sSf | sh\n-$ rustup install nightly\n-```\n-\n-If you're concerned about the [potential insecurity][insecurity] of using `curl\n-| sh`, please keep reading and see our disclaimer below. And feel free to\n-use a two-step version of the installation and examine our installation script:\n-\n-```bash\n-$ curl https://sh.rustup.rs -sSf -o rustup.sh\n-$ sh rustup.sh\n-$ rustup install nightly\n-```\n-\n-[insecurity]: http://curlpipesh.tumblr.com\n-\n-If you're on Windows, please download the [rustup installer][installer]\n-and run it.\n-\n-[installer]: https://win.rustup.rs\n-\n-## Uninstalling\n-\n-If you decide you don't want Rust anymore, we'll be a bit sad, but that's okay.\n-Not every programming language is great for everyone. Just run the uninstall\n-command:\n-\n-```bash\n-$ rustup self uninstall\n-```\n-\n-Some people, and somewhat rightfully so, get very upset when we tell you to\n-`curl | sh`. Basically, when you do this, you are trusting that the good\n-people who maintain Rust aren't going to hack your computer and do bad things.\n-That's a good instinct! If you're one of those people, please check out the\n-documentation on [building Rust from Source][from-source], or [the official\n-binary downloads][install-page].\n-\n-[from-source]: https://github.com/rust-lang/rust#building-from-source\n-[install-page]: https://www.rust-lang.org/install.html\n-\n-Oh, we should also mention the officially supported platforms:\n-\n-* Windows (7+)\n-* Linux (2.6.18 or later, various distributions), x86 and x86-64\n-* OSX 10.7 (Lion) or greater, x86 and x86-64\n-\n-We extensively test Rust on these platforms, and a few others, too, like\n-Android. But these are the ones most likely to work, as they have the most\n-testing.\n-\n-Finally, a comment about Windows. Rust considers Windows to be a first-class\n-platform upon release, but if we're honest, the Windows experience isn't as\n-integrated as the Linux/OS X experience is. We're working on it! If anything\n-does not work, it is a bug. Please let us know if that happens. Each and every\n-commit is tested against Windows like any other platform.\n-\n-If you've got Rust installed, you can open up a shell, and type this:\n-\n-```bash\n-$ rustc --version\n-```\n-\n-You should see the version number, commit hash, commit date and build date:\n-\n-```bash\n-rustc 1.0.0-nightly (f11f3e7ba 2015-01-04) (built 2015-01-06)\n-```\n-\n-If you did, Rust has been installed successfully! Congrats!\n-\n-This installer also installs a copy of the documentation locally, so you can\n-read it offline. On UNIX systems, `/usr/local/share/doc/rust` is the location.\n-On Windows, it's in a `share/doc` directory, inside wherever you installed Rust\n-to.\n-\n-If not, there are a number of places where you can get help. The easiest is\n-[the #rust IRC channel on irc.mozilla.org][irc], which you can access through\n-[Mibbit][mibbit]. Click that link, and you'll be chatting with other Rustaceans\n-(a silly nickname we call ourselves), and we can help you out. Other great\n-resources include [the users forum][users], and [Stack Overflow][stackoverflow].\n-\n-[irc]: irc://irc.mozilla.org/#rust\n-[mibbit]: http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust\n-[users]: https://users.rust-lang.org/\n-[stackoverflow]: http://stackoverflow.com/questions/tagged/rust\n-"}, {"sha": "dcb0fbc8005347349ffcde7b7a7b10f68534399f", "filename": "src/doc/book/src/no-stdlib.md", "status": "removed", "additions": 0, "deletions": 145, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/aba4bf60f5129af31ef7271e3499dadaadd2071d/src%2Fdoc%2Fbook%2Fsrc%2Fno-stdlib.md", "raw_url": "https://github.com/rust-lang/rust/raw/aba4bf60f5129af31ef7271e3499dadaadd2071d/src%2Fdoc%2Fbook%2Fsrc%2Fno-stdlib.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fno-stdlib.md?ref=aba4bf60f5129af31ef7271e3499dadaadd2071d", "patch": "@@ -1,145 +0,0 @@\n-# No stdlib\n-\n-Rust\u2019s standard library provides a lot of useful functionality, but assumes\n-support for various features of its host system: threads, networking, heap\n-allocation, and others. There are systems that do not have these features,\n-however, and Rust can work with those too! To do so, we tell Rust that we\n-don\u2019t want to use the standard library via an attribute: `#![no_std]`.\n-\n-> Note: This feature is technically stable, but there are some caveats. For\n-> one, you can build a `#![no_std]` _library_ on stable, but not a _binary_.\n-> For details on libraries without the standard library, see [the chapter on\n-> `#![no_std]`](using-rust-without-the-standard-library.html)\n-\n-Obviously there's more to life than just libraries: one can use\n-`#[no_std]` with an executable.\n-\n-### Using libc\n-\n-In order to build a `#[no_std]` executable we will need libc as a dependency. We can specify\n-this using our `Cargo.toml` file:\n-\n-```toml\n-[dependencies]\n-libc = { version = \"0.2.14\", default-features = false }\n-```\n-\n-Note that the default features have been disabled. This is a critical step -\n-**the default features of libc include the standard library and so must be\n-disabled.**\n-\n-### Writing an executable without stdlib\n-\n-Controlling the entry point is possible in two ways: the `#[start]` attribute,\n-or overriding the default shim for the C `main` function with your own.\n-\n-The function marked `#[start]` is passed the command line parameters\n-in the same format as C:\n-\n-```rust,ignore\n-#![feature(lang_items, core_intrinsics)]\n-#![feature(start)]\n-#![no_std]\n-use core::intrinsics;\n-\n-// Pull in the system libc library for what crt0.o likely requires.\n-extern crate libc;\n-\n-// Entry point for this program.\n-#[start]\n-fn start(_argc: isize, _argv: *const *const u8) -> isize {\n-    0\n-}\n-\n-// These functions are used by the compiler, but not\n-// for a bare-bones hello world. These are normally\n-// provided by libstd.\n-#[lang = \"eh_personality\"]\n-#[no_mangle]\n-pub extern fn rust_eh_personality() {\n-}\n-\n-// This function may be needed based on the compilation target.\n-#[lang = \"eh_unwind_resume\"]\n-#[no_mangle]\n-pub extern fn rust_eh_unwind_resume() {\n-}\n-\n-#[lang = \"panic_fmt\"]\n-#[no_mangle]\n-pub extern fn rust_begin_panic(_msg: core::fmt::Arguments,\n-                               _file: &'static str,\n-                               _line: u32) -> ! {\n-    unsafe { intrinsics::abort() }\n-}\n-```\n-\n-To override the compiler-inserted `main` shim, one has to disable it\n-with `#![no_main]` and then create the appropriate symbol with the\n-correct ABI and the correct name, which requires overriding the\n-compiler's name mangling too:\n-\n-```rust,ignore\n-#![feature(lang_items, core_intrinsics)]\n-#![feature(start)]\n-#![no_std]\n-#![no_main]\n-use core::intrinsics;\n-\n-// Pull in the system libc library for what crt0.o likely requires.\n-extern crate libc;\n-\n-// Entry point for this program.\n-#[no_mangle] // ensure that this symbol is called `main` in the output\n-pub extern fn main(_argc: i32, _argv: *const *const u8) -> i32 {\n-    0\n-}\n-\n-// These functions are used by the compiler, but not\n-// for a bare-bones hello world. These are normally\n-// provided by libstd.\n-#[lang = \"eh_personality\"]\n-#[no_mangle]\n-pub extern fn rust_eh_personality() {\n-}\n-\n-// This function may be needed based on the compilation target.\n-#[lang = \"eh_unwind_resume\"]\n-#[no_mangle]\n-pub extern fn rust_eh_unwind_resume() {\n-}\n-\n-#[lang = \"panic_fmt\"]\n-#[no_mangle]\n-pub extern fn rust_begin_panic(_msg: core::fmt::Arguments,\n-                               _file: &'static str,\n-                               _line: u32) -> ! {\n-    unsafe { intrinsics::abort() }\n-}\n-```\n-\n-## More about the language items\n-\n-The compiler currently makes a few assumptions about symbols which are\n-available in the executable to call. Normally these functions are provided by\n-the standard library, but without it you must define your own. These symbols\n-are called \"language items\", and they each have an internal name, and then a\n-signature that an implementation must conform to.\n-\n-The first of these functions, `rust_eh_personality`, is used by the failure\n-mechanisms of the compiler. This is often mapped to GCC's personality function\n-(see the [libstd implementation][unwind] for more information), but crates\n-which do not trigger a panic can be assured that this function is never\n-called. The language item's name is `eh_personality`.\n-\n-[unwind]: https://github.com/rust-lang/rust/blob/master/src/libpanic_unwind/gcc.rs\n-\n-The second function, `rust_begin_panic`, is also used by the failure mechanisms of the\n-compiler. When a panic happens, this controls the message that's displayed on\n-the screen. While the language item's name is `panic_fmt`, the symbol name is\n-`rust_begin_panic`.\n-\n-A third function, `rust_eh_unwind_resume`, is also needed if the `custom_unwind_resume`\n-flag is set in the options of the compilation target. It allows customizing the\n-process of resuming unwind at the end of the landing pads. The language item's name\n-is `eh_unwind_resume`."}, {"sha": "3f7398dde5e20ca788ed24052ff2fb46d0158681", "filename": "src/doc/book/src/slice-patterns.md", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/aba4bf60f5129af31ef7271e3499dadaadd2071d/src%2Fdoc%2Fbook%2Fsrc%2Fslice-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/aba4bf60f5129af31ef7271e3499dadaadd2071d/src%2Fdoc%2Fbook%2Fsrc%2Fslice-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fslice-patterns.md?ref=aba4bf60f5129af31ef7271e3499dadaadd2071d", "patch": "@@ -1,42 +0,0 @@\n-# Slice patterns\n-\n-If you want to match against a slice or array, you can use `&` with the\n-`slice_patterns` feature:\n-\n-```rust\n-#![feature(slice_patterns)]\n-\n-fn main() {\n-    let v = vec![\"match_this\", \"1\"];\n-\n-    match &v[..] {\n-        &[\"match_this\", second] => println!(\"The second element is {}\", second),\n-        _ => {},\n-    }\n-}\n-```\n-\n-The `advanced_slice_patterns` gate lets you use `..` to indicate any number of\n-elements inside a pattern matching a slice. This wildcard can only be used once\n-for a given array. If there's an identifier before the `..`, the result of the\n-slice will be bound to that name. For example:\n-\n-```rust\n-#![feature(advanced_slice_patterns, slice_patterns)]\n-\n-fn is_symmetric(list: &[u32]) -> bool {\n-    match list {\n-        &[] | &[_] => true,\n-        &[x, ref inside.., y] if x == y => is_symmetric(inside),\n-        _ => false\n-    }\n-}\n-\n-fn main() {\n-    let sym = &[0, 1, 4, 2, 4, 1, 0];\n-    assert!(is_symmetric(sym));\n-\n-    let not_sym = &[0, 1, 7, 2, 4, 1, 0];\n-    assert!(!is_symmetric(not_sym));\n-}\n-```"}, {"sha": "ee8ae9a9839e9f409b38d15cce65baa1df64d908", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -1,6 +1,9 @@\n [The Unstable Book](the-unstable-book.md)\n \n - [asm](asm.md)\n+- [alloc_system](alloc-system.md)\n+- [alloc_jemalloc](alloc-jemalloc.md)\n+- [test](test.md)\n - [concat_idents](concat-idents.md)\n - [link_args](link-args.md)\n - [log_syntax](log-syntax.md)"}, {"sha": "9b2c7f298979d016ec2927f099185b4d54fadbc5", "filename": "src/doc/unstable-book/src/abi-msp430-interrupt.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-msp430-interrupt.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-msp430-interrupt.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-msp430-interrupt.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -3,3 +3,5 @@\n The tracking issue for this feature is: [#38487]\n \n [#38487]: https://github.com/rust-lang/rust/issues/38487\n+\n+------------------------"}, {"sha": "9c1b8868aceb4bd5d208cf14691f4d781abd4874", "filename": "src/doc/unstable-book/src/abi-ptx.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-ptx.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-ptx.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-ptx.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -2,3 +2,4 @@\n \n The tracking issue for this feature is: None.\n \n+------------------------"}, {"sha": "27f61d56342cf786aaed6548c852d338b86f0e4f", "filename": "src/doc/unstable-book/src/abi-sysv64.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-sysv64.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-sysv64.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-sysv64.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,4 @@ The tracking issue for this feature is: [#36167]\n \n [#36167]: https://github.com/rust-lang/rust/issues/36167\n \n-\n-\n+------------------------"}, {"sha": "2e3113abdbf2bcff759c868dede0d62d16a4392a", "filename": "src/doc/unstable-book/src/abi-unadjusted.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-unadjusted.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-unadjusted.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-unadjusted.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -2,3 +2,5 @@\n \n The tracking issue for this feature is: none.\n \n+------------------------\n+"}, {"sha": "3e36b1569fd4a4c8ad846316cdfb37ca199e7fa8", "filename": "src/doc/unstable-book/src/abi-vectorcall.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-vectorcall.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-vectorcall.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-vectorcall.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -2,4 +2,6 @@\n \n The tracking issue for this feature is: none.\n \n+------------------------\n+\n "}, {"sha": "30d22ca8208bff24c1b24f3ce7c3833e9a33609a", "filename": "src/doc/unstable-book/src/advanced-slice-patterns.md", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fadvanced-slice-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fadvanced-slice-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fadvanced-slice-patterns.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,32 @@ The tracking issue for this feature is: [#23121]\n \n [#23121]: https://github.com/rust-lang/rust/issues/23121\n \n+See also [`slice_patterns`](slice-patterns.html).\n \n+------------------------\n \n+\n+The `advanced_slice_patterns` gate lets you use `..` to indicate any number of\n+elements inside a pattern matching a slice. This wildcard can only be used once\n+for a given array. If there's an identifier before the `..`, the result of the\n+slice will be bound to that name. For example:\n+\n+```rust\n+#![feature(advanced_slice_patterns, slice_patterns)]\n+\n+fn is_symmetric(list: &[u32]) -> bool {\n+    match list {\n+        &[] | &[_] => true,\n+        &[x, ref inside.., y] if x == y => is_symmetric(inside),\n+        _ => false\n+    }\n+}\n+\n+fn main() {\n+    let sym = &[0, 1, 4, 2, 4, 1, 0];\n+    assert!(is_symmetric(sym));\n+\n+    let not_sym = &[0, 1, 7, 2, 4, 1, 0];\n+    assert!(!is_symmetric(not_sym));\n+}\n+```"}, {"sha": "47c44ddc3747c50173ce7ba7e9125028bc13dea8", "filename": "src/doc/unstable-book/src/alloc-jemalloc.md", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Falloc-jemalloc.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Falloc-jemalloc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Falloc-jemalloc.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -0,0 +1,62 @@\n+# `alloc_jemalloc`\n+\n+The tracking issue for this feature is: [#33082]\n+\n+[#33082]: https://github.com/rust-lang/rust/issues/33082\n+\n+See also [`alloc_system`](alloc-system.md).\n+\n+------------------------\n+\n+The compiler currently ships two default allocators: `alloc_system` and\n+`alloc_jemalloc` (some targets don't have jemalloc, however). These allocators\n+are normal Rust crates and contain an implementation of the routines to\n+allocate and deallocate memory. The standard library is not compiled assuming\n+either one, and the compiler will decide which allocator is in use at\n+compile-time depending on the type of output artifact being produced.\n+\n+Binaries generated by the compiler will use `alloc_jemalloc` by default (where\n+available). In this situation the compiler \"controls the world\" in the sense of\n+it has power over the final link. Primarily this means that the allocator\n+decision can be left up the compiler.\n+\n+Dynamic and static libraries, however, will use `alloc_system` by default. Here\n+Rust is typically a 'guest' in another application or another world where it\n+cannot authoritatively decide what allocator is in use. As a result it resorts\n+back to the standard APIs (e.g. `malloc` and `free`) for acquiring and releasing\n+memory.\n+\n+# Switching Allocators\n+\n+Although the compiler's default choices may work most of the time, it's often\n+necessary to tweak certain aspects. Overriding the compiler's decision about\n+which allocator is in use is done simply by linking to the desired allocator:\n+\n+```rust,no_run\n+#![feature(alloc_system)]\n+\n+extern crate alloc_system;\n+\n+fn main() {\n+    let a = Box::new(4); // Allocates from the system allocator.\n+    println!(\"{}\", a);\n+}\n+```\n+\n+In this example the binary generated will not link to jemalloc by default but\n+instead use the system allocator. Conversely to generate a dynamic library which\n+uses jemalloc by default one would write:\n+\n+```rust,ignore\n+#![feature(alloc_jemalloc)]\n+#![crate_type = \"dylib\"]\n+\n+extern crate alloc_jemalloc;\n+\n+pub fn foo() {\n+    let a = Box::new(4); // Allocates from jemalloc.\n+    println!(\"{}\", a);\n+}\n+# fn main() {}\n+```\n+"}, {"sha": "f7d648c375987e124d7a9c5f498d591ce5331664", "filename": "src/doc/unstable-book/src/alloc-system.md", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Falloc-system.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Falloc-system.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Falloc-system.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -0,0 +1,62 @@\n+# `alloc_system`\n+\n+The tracking issue for this feature is: [#33082]\n+\n+[#33082]: https://github.com/rust-lang/rust/issues/33082\n+\n+See also [`alloc_jemalloc`](alloc-jemalloc.md).\n+\n+------------------------\n+\n+The compiler currently ships two default allocators: `alloc_system` and\n+`alloc_jemalloc` (some targets don't have jemalloc, however). These allocators\n+are normal Rust crates and contain an implementation of the routines to\n+allocate and deallocate memory. The standard library is not compiled assuming\n+either one, and the compiler will decide which allocator is in use at\n+compile-time depending on the type of output artifact being produced.\n+\n+Binaries generated by the compiler will use `alloc_jemalloc` by default (where\n+available). In this situation the compiler \"controls the world\" in the sense of\n+it has power over the final link. Primarily this means that the allocator\n+decision can be left up the compiler.\n+\n+Dynamic and static libraries, however, will use `alloc_system` by default. Here\n+Rust is typically a 'guest' in another application or another world where it\n+cannot authoritatively decide what allocator is in use. As a result it resorts\n+back to the standard APIs (e.g. `malloc` and `free`) for acquiring and releasing\n+memory.\n+\n+# Switching Allocators\n+\n+Although the compiler's default choices may work most of the time, it's often\n+necessary to tweak certain aspects. Overriding the compiler's decision about\n+which allocator is in use is done simply by linking to the desired allocator:\n+\n+```rust,no_run\n+#![feature(alloc_system)]\n+\n+extern crate alloc_system;\n+\n+fn main() {\n+    let a = Box::new(4); // Allocates from the system allocator.\n+    println!(\"{}\", a);\n+}\n+```\n+\n+In this example the binary generated will not link to jemalloc by default but\n+instead use the system allocator. Conversely to generate a dynamic library which\n+uses jemalloc by default one would write:\n+\n+```rust,ignore\n+#![feature(alloc_jemalloc)]\n+#![crate_type = \"dylib\"]\n+\n+extern crate alloc_jemalloc;\n+\n+pub fn foo() {\n+    let a = Box::new(4); // Allocates from jemalloc.\n+    println!(\"{}\", a);\n+}\n+# fn main() {}\n+```\n+"}, {"sha": "7261641698f48ff0080d18d91f5f00d81ce0cd7e", "filename": "src/doc/unstable-book/src/allocator.md", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fallocator.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fallocator.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fallocator.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,111 @@ The tracking issue for this feature is: [#27389]\n \n [#27389]: https://github.com/rust-lang/rust/issues/27389\n \n+------------------------\n+\n+Sometimes even the choices of jemalloc vs the system allocator aren't enough and\n+an entirely new custom allocator is required. In this you'll write your own\n+crate which implements the allocator API (e.g. the same as `alloc_system` or\n+`alloc_jemalloc`). As an example, let's take a look at a simplified and\n+annotated version of `alloc_system`\n+\n+```rust,no_run\n+# // Only needed for rustdoc --test down below.\n+# #![feature(lang_items)]\n+// The compiler needs to be instructed that this crate is an allocator in order\n+// to realize that when this is linked in another allocator like jemalloc should\n+// not be linked in.\n+#![feature(allocator)]\n+#![allocator]\n+\n+// Allocators are not allowed to depend on the standard library which in turn\n+// requires an allocator in order to avoid circular dependencies. This crate,\n+// however, can use all of libcore.\n+#![no_std]\n+\n+// Let's give a unique name to our custom allocator:\n+#![crate_name = \"my_allocator\"]\n+#![crate_type = \"rlib\"]\n+\n+// Our system allocator will use the in-tree libc crate for FFI bindings. Note\n+// that currently the external (crates.io) libc cannot be used because it links\n+// to the standard library (e.g. `#![no_std]` isn't stable yet), so that's why\n+// this specifically requires the in-tree version.\n+#![feature(libc)]\n+extern crate libc;\n+\n+// Listed below are the five allocation functions currently required by custom\n+// allocators. Their signatures and symbol names are not currently typechecked\n+// by the compiler, but this is a future extension and are required to match\n+// what is found below.\n+//\n+// Note that the standard `malloc` and `realloc` functions do not provide a way\n+// to communicate alignment so this implementation would need to be improved\n+// with respect to alignment in that aspect.\n+\n+#[no_mangle]\n+pub extern fn __rust_allocate(size: usize, _align: usize) -> *mut u8 {\n+    unsafe { libc::malloc(size as libc::size_t) as *mut u8 }\n+}\n+\n+#[no_mangle]\n+pub extern fn __rust_deallocate(ptr: *mut u8, _old_size: usize, _align: usize) {\n+    unsafe { libc::free(ptr as *mut libc::c_void) }\n+}\n+\n+#[no_mangle]\n+pub extern fn __rust_reallocate(ptr: *mut u8, _old_size: usize, size: usize,\n+                                _align: usize) -> *mut u8 {\n+    unsafe {\n+        libc::realloc(ptr as *mut libc::c_void, size as libc::size_t) as *mut u8\n+    }\n+}\n+\n+#[no_mangle]\n+pub extern fn __rust_reallocate_inplace(_ptr: *mut u8, old_size: usize,\n+                                        _size: usize, _align: usize) -> usize {\n+    old_size // This api is not supported by libc.\n+}\n+\n+#[no_mangle]\n+pub extern fn __rust_usable_size(size: usize, _align: usize) -> usize {\n+    size\n+}\n+\n+# // Only needed to get rustdoc to test this:\n+# fn main() {}\n+# #[lang = \"panic_fmt\"] fn panic_fmt() {}\n+# #[lang = \"eh_personality\"] fn eh_personality() {}\n+# #[lang = \"eh_unwind_resume\"] extern fn eh_unwind_resume() {}\n+# #[no_mangle] pub extern fn rust_eh_register_frames () {}\n+# #[no_mangle] pub extern fn rust_eh_unregister_frames () {}\n+```\n+\n+After we compile this crate, it can be used as follows:\n+\n+```rust,ignore\n+extern crate my_allocator;\n+\n+fn main() {\n+    let a = Box::new(8); // Allocates memory via our custom allocator crate.\n+    println!(\"{}\", a);\n+}\n+```\n+\n+## Custom allocator limitations\n+\n+There are a few restrictions when working with custom allocators which may cause\n+compiler errors:\n+\n+* Any one artifact may only be linked to at most one allocator. Binaries,\n+  dylibs, and staticlibs must link to exactly one allocator, and if none have\n+  been explicitly chosen the compiler will choose one. On the other hand rlibs\n+  do not need to link to an allocator (but still can).\n+\n+* A consumer of an allocator is tagged with `#![needs_allocator]` (e.g. the\n+  `liballoc` crate currently) and an `#[allocator]` crate cannot transitively\n+  depend on a crate which needs an allocator (e.g. circular dependencies are not\n+  allowed). This basically means that allocators must restrict themselves to\n+  libcore currently.\n \n "}, {"sha": "74709ad5aeb4dedad1e77836a93e88031d08e43f", "filename": "src/doc/unstable-book/src/allow-internal-unstable.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fallow-internal-unstable.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fallow-internal-unstable.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fallow-internal-unstable.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -2,3 +2,5 @@\n \n The tracking issue for this feature is: None.\n \n+------------------------\n+"}, {"sha": "032d9d81240266ec346bcf03dceaf1ac46de3fb6", "filename": "src/doc/unstable-book/src/asm.md", "status": "modified", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fasm.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,188 @@ The tracking issue for this feature is: [#29722]\n \n [#29722]: https://github.com/rust-lang/rust/issues/29722\n \n+------------------------\n \n+For extremely low-level manipulations and performance reasons, one\n+might wish to control the CPU directly. Rust supports using inline\n+assembly to do this via the `asm!` macro.\n+\n+```rust,ignore\n+asm!(assembly template\n+   : output operands\n+   : input operands\n+   : clobbers\n+   : options\n+   );\n+```\n+\n+Any use of `asm` is feature gated (requires `#![feature(asm)]` on the\n+crate to allow) and of course requires an `unsafe` block.\n+\n+> **Note**: the examples here are given in x86/x86-64 assembly, but\n+> all platforms are supported.\n+\n+## Assembly template\n+\n+The `assembly template` is the only required parameter and must be a\n+literal string (i.e. `\"\"`)\n+\n+```rust\n+#![feature(asm)]\n+\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn foo() {\n+    unsafe {\n+        asm!(\"NOP\");\n+    }\n+}\n+\n+// Other platforms:\n+#[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n+fn foo() { /* ... */ }\n+\n+fn main() {\n+    // ...\n+    foo();\n+    // ...\n+}\n+```\n+\n+(The `feature(asm)` and `#[cfg]`s are omitted from now on.)\n+\n+Output operands, input operands, clobbers and options are all optional\n+but you must add the right number of `:` if you skip them:\n+\n+```rust\n+# #![feature(asm)]\n+# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+# fn main() { unsafe {\n+asm!(\"xor %eax, %eax\"\n+    :\n+    :\n+    : \"eax\"\n+   );\n+# } }\n+# #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n+# fn main() {}\n+```\n+\n+Whitespace also doesn't matter:\n+\n+```rust\n+# #![feature(asm)]\n+# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+# fn main() { unsafe {\n+asm!(\"xor %eax, %eax\" ::: \"eax\");\n+# } }\n+# #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n+# fn main() {}\n+```\n+\n+## Operands\n+\n+Input and output operands follow the same format: `:\n+\"constraints1\"(expr1), \"constraints2\"(expr2), ...\"`. Output operand\n+expressions must be mutable lvalues, or not yet assigned:\n+\n+```rust\n+# #![feature(asm)]\n+# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn add(a: i32, b: i32) -> i32 {\n+    let c: i32;\n+    unsafe {\n+        asm!(\"add $2, $0\"\n+             : \"=r\"(c)\n+             : \"0\"(a), \"r\"(b)\n+             );\n+    }\n+    c\n+}\n+# #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n+# fn add(a: i32, b: i32) -> i32 { a + b }\n+\n+fn main() {\n+    assert_eq!(add(3, 14159), 14162)\n+}\n+```\n+\n+If you would like to use real operands in this position, however,\n+you are required to put curly braces `{}` around the register that\n+you want, and you are required to put the specific size of the\n+operand. This is useful for very low level programming, where\n+which register you use is important:\n+\n+```rust\n+# #![feature(asm)]\n+# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+# unsafe fn read_byte_in(port: u16) -> u8 {\n+let result: u8;\n+asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\"(port));\n+result\n+# }\n+```\n+\n+## Clobbers\n+\n+Some instructions modify registers which might otherwise have held\n+different values so we use the clobbers list to indicate to the\n+compiler not to assume any values loaded into those registers will\n+stay valid.\n+\n+```rust\n+# #![feature(asm)]\n+# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+# fn main() { unsafe {\n+// Put the value 0x200 in eax:\n+asm!(\"mov $$0x200, %eax\" : /* no outputs */ : /* no inputs */ : \"eax\");\n+# } }\n+# #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n+# fn main() {}\n+```\n+\n+Input and output registers need not be listed since that information\n+is already communicated by the given constraints. Otherwise, any other\n+registers used either implicitly or explicitly should be listed.\n+\n+If the assembly changes the condition code register `cc` should be\n+specified as one of the clobbers. Similarly, if the assembly modifies\n+memory, `memory` should also be specified.\n+\n+## Options\n+\n+The last section, `options` is specific to Rust. The format is comma\n+separated literal strings (i.e. `:\"foo\", \"bar\", \"baz\"`). It's used to\n+specify some extra info about the inline assembly:\n+\n+Current valid options are:\n+\n+1. *volatile* - specifying this is analogous to\n+   `__asm__ __volatile__ (...)` in gcc/clang.\n+2. *alignstack* - certain instructions expect the stack to be\n+   aligned a certain way (i.e. SSE) and specifying this indicates to\n+   the compiler to insert its usual stack alignment code\n+3. *intel* - use intel syntax instead of the default AT&T.\n+\n+```rust\n+# #![feature(asm)]\n+# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+# fn main() {\n+let result: i32;\n+unsafe {\n+   asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")\n+}\n+println!(\"eax is currently {}\", result);\n+# }\n+# #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n+# fn main() {}\n+```\n+\n+## More Information\n+\n+The current implementation of the `asm!` macro is a direct binding to [LLVM's\n+inline assembler expressions][llvm-docs], so be sure to check out [their\n+documentation as well][llvm-docs] for more information about clobbers,\n+constraints, etc.\n+\n+[llvm-docs]: http://llvm.org/docs/LangRef.html#inline-assembler-expressions\n "}, {"sha": "d661108e7d95ed7517cdaecb67e8deab12c1eccb", "filename": "src/doc/unstable-book/src/associated-consts.md", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fassociated-consts.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fassociated-consts.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fassociated-consts.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,82 @@ The tracking issue for this feature is: [#29646]\n \n [#29646]: https://github.com/rust-lang/rust/issues/29646\n \n+------------------------\n \n+With the `associated_consts` feature, you can define constants like this:\n \n+```rust\n+#![feature(associated_consts)]\n+\n+trait Foo {\n+    const ID: i32;\n+}\n+\n+impl Foo for i32 {\n+    const ID: i32 = 1;\n+}\n+\n+fn main() {\n+    assert_eq!(1, i32::ID);\n+}\n+```\n+\n+Any implementor of `Foo` will have to define `ID`. Without the definition:\n+\n+```rust,ignore\n+#![feature(associated_consts)]\n+\n+trait Foo {\n+    const ID: i32;\n+}\n+\n+impl Foo for i32 {\n+}\n+```\n+\n+gives\n+\n+```text\n+error: not all trait items implemented, missing: `ID` [E0046]\n+     impl Foo for i32 {\n+     }\n+```\n+\n+A default value can be implemented as well:\n+\n+```rust\n+#![feature(associated_consts)]\n+\n+trait Foo {\n+    const ID: i32 = 1;\n+}\n+\n+impl Foo for i32 {\n+}\n+\n+impl Foo for i64 {\n+    const ID: i32 = 5;\n+}\n+\n+fn main() {\n+    assert_eq!(1, i32::ID);\n+    assert_eq!(5, i64::ID);\n+}\n+```\n+\n+As you can see, when implementing `Foo`, you can leave it unimplemented, as\n+with `i32`. It will then use the default value. But, as in `i64`, we can also\n+add our own definition.\n+\n+Associated constants don\u2019t have to be associated with a trait. An `impl` block\n+for a `struct` or an `enum` works fine too:\n+\n+```rust\n+#![feature(associated_consts)]\n+\n+struct Foo;\n+\n+impl Foo {\n+    const FOO: u32 = 3;\n+}\n+```"}, {"sha": "56cc8a5b3060aac34be6ea9bd100e74ef1dd7254", "filename": "src/doc/unstable-book/src/associated-type-defaults.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fassociated-type-defaults.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fassociated-type-defaults.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fassociated-type-defaults.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#29661]\n \n [#29661]: https://github.com/rust-lang/rust/issues/29661\n \n+------------------------\n+\n \n "}, {"sha": "67eee214a4f247e4f012fe59dd0e5574d0b60519", "filename": "src/doc/unstable-book/src/attr-literals.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fattr-literals.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fattr-literals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fattr-literals.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#34981]\n \n [#34981]: https://github.com/rust-lang/rust/issues/34981\n \n+------------------------\n+\n \n "}, {"sha": "86346364a71356caf4d19ad45f82c36d05d4d5c3", "filename": "src/doc/unstable-book/src/box-patterns.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fbox-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fbox-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fbox-patterns.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,29 @@ The tracking issue for this feature is: [#29641]\n \n [#29641]: https://github.com/rust-lang/rust/issues/29641\n \n+See also [`box_syntax`](box-syntax.html)\n \n+------------------------\n \n+Box patterns let you match on `Box<T>`s:\n+\n+\n+```rust\n+#![feature(box_patterns)]\n+\n+fn main() {\n+    let b = Some(Box::new(5));\n+    match b {\n+        Some(box n) if n < 0 => {\n+            println!(\"Box contains negative number {}\", n);\n+        },\n+        Some(box n) if n >= 0 => {\n+            println!(\"Box contains non-negative number {}\", n);\n+        },\n+        None => {\n+            println!(\"No box\");\n+        },\n+        _ => unreachable!()\n+    }\n+}\n+```"}, {"sha": "47aade0d04563016192fac4f0d8a8c0a6f930a79", "filename": "src/doc/unstable-book/src/box-syntax.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fbox-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fbox-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fbox-syntax.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,19 @@ The tracking issue for this feature is: [#27779]\n \n [#27779]: https://github.com/rust-lang/rust/issues/27779\n \n+See also [`box_patterns`](box-patterns.html)\n \n+------------------------\n \n+Currently the only stable way to create a `Box` is via the `Box::new` method.\n+Also it is not possible in stable Rust to destructure a `Box` in a match\n+pattern. The unstable `box` keyword can be used to create a `Box`. An example\n+usage would be:\n+\n+```rust\n+#![feature(box_syntax)]\n+\n+fn main() {\n+    let b = box 5;\n+}\n+```"}, {"sha": "ddd88bdc2cb17e257db75a708b4a7f0c87534f10", "filename": "src/doc/unstable-book/src/cfg-target-feature.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fcfg-target-feature.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fcfg-target-feature.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcfg-target-feature.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#29717]\n \n [#29717]: https://github.com/rust-lang/rust/issues/29717\n \n+------------------------\n+\n \n "}, {"sha": "7496e42e1cd84a6e3d3955146a9c9ec286d75c30", "filename": "src/doc/unstable-book/src/cfg-target-has-atomic.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fcfg-target-has-atomic.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fcfg-target-has-atomic.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcfg-target-has-atomic.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#32976]\n \n [#32976]: https://github.com/rust-lang/rust/issues/32976\n \n+------------------------\n+\n \n "}, {"sha": "a5adb38db3df0040ce42fbbc9853b37d284b0ef8", "filename": "src/doc/unstable-book/src/cfg-target-thread-local.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fcfg-target-thread-local.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fcfg-target-thread-local.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcfg-target-thread-local.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#29594]\n \n [#29594]: https://github.com/rust-lang/rust/issues/29594\n \n+------------------------\n+\n \n "}, {"sha": "ddd88bdc2cb17e257db75a708b4a7f0c87534f10", "filename": "src/doc/unstable-book/src/cfg-target-vendor.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fcfg-target-vendor.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fcfg-target-vendor.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcfg-target-vendor.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#29717]\n \n [#29717]: https://github.com/rust-lang/rust/issues/29717\n \n+------------------------\n+\n \n "}, {"sha": "3ec3cba257a99f10b7a2b541a63783c180741dae", "filename": "src/doc/unstable-book/src/compiler-builtins.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-builtins.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-builtins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-builtins.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -2,3 +2,5 @@\n \n The tracking issue for this feature is: None.\n \n+------------------------\n+"}, {"sha": "c9a48293dba684c2105ae6e83a77b047df5810b8", "filename": "src/doc/unstable-book/src/concat-idents.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fconcat-idents.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fconcat-idents.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fconcat-idents.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#29599]\n \n [#29599]: https://github.com/rust-lang/rust/issues/29599\n \n+------------------------\n+\n \n "}, {"sha": "7d8bda439bd347219eafa33e3c70c62302e05d8a", "filename": "src/doc/unstable-book/src/conservative-impl-trait.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fconservative-impl-trait.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fconservative-impl-trait.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fconservative-impl-trait.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#34511]\n \n [#34511]: https://github.com/rust-lang/rust/issues/34511\n \n+------------------------\n+\n \n "}, {"sha": "9b7942c408a2483fdb871c77653fe0c80bac699d", "filename": "src/doc/unstable-book/src/const-fn.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fconst-fn.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fconst-fn.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fconst-fn.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#24111]\n \n [#24111]: https://github.com/rust-lang/rust/issues/24111\n \n+------------------------\n+\n \n "}, {"sha": "bd92b0b1b478fdc3422f261f4aaa6162d6634d1b", "filename": "src/doc/unstable-book/src/const-indexing.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fconst-indexing.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fconst-indexing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fconst-indexing.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#29947]\n \n [#29947]: https://github.com/rust-lang/rust/issues/29947\n \n+------------------------\n+\n \n "}, {"sha": "838f09670d2cd2cd6d079133134597dbbf1b6d1b", "filename": "src/doc/unstable-book/src/custom-attribute.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fcustom-attribute.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fcustom-attribute.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcustom-attribute.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#29642]\n \n [#29642]: https://github.com/rust-lang/rust/issues/29642\n \n+------------------------\n+\n \n "}, {"sha": "d5fdd2b708bb8c5c869d610ee017e096f8cec28a", "filename": "src/doc/unstable-book/src/custom-derive.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fcustom-derive.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fcustom-derive.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcustom-derive.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#29644]\n \n [#29644]: https://github.com/rust-lang/rust/issues/29644\n \n+------------------------\n+\n \n "}, {"sha": "fd16dbf898537141e0c2a5412b9c36ae8d8be119", "filename": "src/doc/unstable-book/src/default-type-parameter-fallback.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fdefault-type-parameter-fallback.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fdefault-type-parameter-fallback.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fdefault-type-parameter-fallback.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#27336]\n \n [#27336]: https://github.com/rust-lang/rust/issues/27336\n \n+------------------------\n+\n \n "}, {"sha": "b3367d0df4459f877259ad9676003c9d275a3ad3", "filename": "src/doc/unstable-book/src/drop-types-in-const.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fdrop-types-in-const.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fdrop-types-in-const.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fdrop-types-in-const.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#33156]\n \n [#33156]: https://github.com/rust-lang/rust/issues/33156\n \n+------------------------\n+\n \n "}, {"sha": "2f189e9b6454ad6707197b0f0925d38c4d8d3c13", "filename": "src/doc/unstable-book/src/dropck-eyepatch.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fdropck-eyepatch.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fdropck-eyepatch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fdropck-eyepatch.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#34761]\n \n [#34761]: https://github.com/rust-lang/rust/issues/34761\n \n+------------------------\n+\n \n "}, {"sha": "c5ae721954b82c11ae19ecec4786fd90ef2b21b6", "filename": "src/doc/unstable-book/src/dropck-parametricity.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fdropck-parametricity.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fdropck-parametricity.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fdropck-parametricity.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#28498]\n \n [#28498]: https://github.com/rust-lang/rust/issues/28498\n \n+------------------------\n+\n \n "}, {"sha": "b669ce83132d460ea5e9c8f569721e30dfd6698e", "filename": "src/doc/unstable-book/src/exclusive-range-pattern.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fexclusive-range-pattern.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fexclusive-range-pattern.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fexclusive-range-pattern.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#37854]\n \n [#37854]: https://github.com/rust-lang/rust/issues/37854\n \n+------------------------\n+\n \n "}, {"sha": "e737dbaa4ec02cbeb7e24c347a72bdb9441cb48e", "filename": "src/doc/unstable-book/src/field-init-shorthand.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Ffield-init-shorthand.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Ffield-init-shorthand.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffield-init-shorthand.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#37340]\n \n [#37340]: https://github.com/rust-lang/rust/issues/37340\n \n+------------------------\n+\n \n "}, {"sha": "a068dadf95d12fef85e97707b2bba1e79415b82b", "filename": "src/doc/unstable-book/src/fundamental.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Ffundamental.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Ffundamental.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffundamental.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#29635]\n \n [#29635]: https://github.com/rust-lang/rust/issues/29635\n \n+------------------------\n+\n \n "}, {"sha": "ba49c850e4d600cf14d780a301e7b73e68fab0e6", "filename": "src/doc/unstable-book/src/generic-param-attrs.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fgeneric-param-attrs.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fgeneric-param-attrs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fgeneric-param-attrs.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#34761]\n \n [#34761]: https://github.com/rust-lang/rust/issues/34761\n \n+------------------------\n+\n \n "}, {"sha": "ffcf45feb2ad7ef5d1b570f887cbd6d21bdc3611", "filename": "src/doc/unstable-book/src/i128-type.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fi128-type.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fi128-type.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fi128-type.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#35118]\n \n [#35118]: https://github.com/rust-lang/rust/issues/35118\n \n+------------------------\n+\n \n "}, {"sha": "74d85536399d72f93096fce8091cb67d6167ddbe", "filename": "src/doc/unstable-book/src/inclusive-range-syntax.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Finclusive-range-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Finclusive-range-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Finclusive-range-syntax.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#28237]\n \n [#28237]: https://github.com/rust-lang/rust/issues/28237\n \n+------------------------\n+\n \n "}, {"sha": "bc35c2a0305332c3a84037ad967f15dc160286ec", "filename": "src/doc/unstable-book/src/intrinsics.md", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fintrinsics.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fintrinsics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fintrinsics.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -1,3 +1,30 @@\n # `intrinsics`\n \n The tracking issue for this feature is: None.\n+\n+Intrinsics are never intended to be stable directly, but intrinsics are often\n+exported in some sort of stable manner. Prefer using the stable interfaces to\n+the intrinsic directly when you can.\n+\n+------------------------\n+\n+\n+These are imported as if they were FFI functions, with the special\n+`rust-intrinsic` ABI. For example, if one was in a freestanding\n+context, but wished to be able to `transmute` between types, and\n+perform efficient pointer arithmetic, one would import those functions\n+via a declaration like\n+\n+```rust\n+#![feature(intrinsics)]\n+# fn main() {}\n+\n+extern \"rust-intrinsic\" {\n+    fn transmute<T, U>(x: T) -> U;\n+\n+    fn offset<T>(dst: *const T, offset: isize) -> *const T;\n+}\n+```\n+\n+As with any other FFI functions, these are always `unsafe` to call.\n+"}, {"sha": "375b8bd6b8224170b25a61d8e72433ae7430cb62", "filename": "src/doc/unstable-book/src/lang-items.md", "status": "modified", "additions": 215, "deletions": 0, "changes": 215, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Flang-items.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Flang-items.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flang-items.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -2,3 +2,218 @@\n \n The tracking issue for this feature is: None.\n \n+------------------------\n+\n+The `rustc` compiler has certain pluggable operations, that is,\n+functionality that isn't hard-coded into the language, but is\n+implemented in libraries, with a special marker to tell the compiler\n+it exists. The marker is the attribute `#[lang = \"...\"]` and there are\n+various different values of `...`, i.e. various different 'lang\n+items'.\n+\n+For example, `Box` pointers require two lang items, one for allocation\n+and one for deallocation. A freestanding program that uses the `Box`\n+sugar for dynamic allocations via `malloc` and `free`:\n+\n+```rust,ignore\n+#![feature(lang_items, box_syntax, start, libc, core_intrinsics)]\n+#![no_std]\n+use core::intrinsics;\n+\n+extern crate libc;\n+\n+#[lang = \"owned_box\"]\n+pub struct Box<T>(*mut T);\n+\n+#[lang = \"exchange_malloc\"]\n+unsafe fn allocate(size: usize, _align: usize) -> *mut u8 {\n+    let p = libc::malloc(size as libc::size_t) as *mut u8;\n+\n+    // Check if `malloc` failed:\n+    if p as usize == 0 {\n+        intrinsics::abort();\n+    }\n+\n+    p\n+}\n+\n+#[lang = \"exchange_free\"]\n+unsafe fn deallocate(ptr: *mut u8, _size: usize, _align: usize) {\n+    libc::free(ptr as *mut libc::c_void)\n+}\n+\n+#[lang = \"box_free\"]\n+unsafe fn box_free<T: ?Sized>(ptr: *mut T) {\n+    deallocate(ptr as *mut u8, ::core::mem::size_of_val(&*ptr), ::core::mem::align_of_val(&*ptr));\n+}\n+\n+#[start]\n+fn main(argc: isize, argv: *const *const u8) -> isize {\n+    let x = box 1;\n+\n+    0\n+}\n+\n+#[lang = \"eh_personality\"] extern fn rust_eh_personality() {}\n+#[lang = \"panic_fmt\"] extern fn rust_begin_panic() -> ! { unsafe { intrinsics::abort() } }\n+# #[lang = \"eh_unwind_resume\"] extern fn rust_eh_unwind_resume() {}\n+# #[no_mangle] pub extern fn rust_eh_register_frames () {}\n+# #[no_mangle] pub extern fn rust_eh_unregister_frames () {}\n+```\n+\n+Note the use of `abort`: the `exchange_malloc` lang item is assumed to\n+return a valid pointer, and so needs to do the check internally.\n+\n+Other features provided by lang items include:\n+\n+- overloadable operators via traits: the traits corresponding to the\n+  `==`, `<`, dereferencing (`*`) and `+` (etc.) operators are all\n+  marked with lang items; those specific four are `eq`, `ord`,\n+  `deref`, and `add` respectively.\n+- stack unwinding and general failure; the `eh_personality`,\n+  `eh_unwind_resume`, `fail` and `fail_bounds_checks` lang items.\n+- the traits in `std::marker` used to indicate types of\n+  various kinds; lang items `send`, `sync` and `copy`.\n+- the marker types and variance indicators found in\n+  `std::marker`; lang items `covariant_type`,\n+  `contravariant_lifetime`, etc.\n+\n+Lang items are loaded lazily by the compiler; e.g. if one never uses\n+`Box` then there is no need to define functions for `exchange_malloc`\n+and `exchange_free`. `rustc` will emit an error when an item is needed\n+but not found in the current crate or any that it depends on.\n+\n+Most lang items are defined by `libcore`, but if you're trying to build\n+an executable without the standard library, you'll run into the need\n+for lang items. The rest of this page focuses on this use-case, even though\n+lang items are a bit broader than that.\n+\n+### Using libc\n+\n+In order to build a `#[no_std]` executable we will need libc as a dependency.\n+We can specify this using our `Cargo.toml` file:\n+\n+```toml\n+[dependencies]\n+libc = { version = \"0.2.14\", default-features = false }\n+```\n+\n+Note that the default features have been disabled. This is a critical step -\n+**the default features of libc include the standard library and so must be\n+disabled.**\n+\n+### Writing an executable without stdlib\n+\n+Controlling the entry point is possible in two ways: the `#[start]` attribute,\n+or overriding the default shim for the C `main` function with your own.\n+\n+The function marked `#[start]` is passed the command line parameters\n+in the same format as C:\n+\n+```rust,ignore\n+#![feature(lang_items, core_intrinsics)]\n+#![feature(start)]\n+#![no_std]\n+use core::intrinsics;\n+\n+// Pull in the system libc library for what crt0.o likely requires.\n+extern crate libc;\n+\n+// Entry point for this program.\n+#[start]\n+fn start(_argc: isize, _argv: *const *const u8) -> isize {\n+    0\n+}\n+\n+// These functions are used by the compiler, but not\n+// for a bare-bones hello world. These are normally\n+// provided by libstd.\n+#[lang = \"eh_personality\"]\n+#[no_mangle]\n+pub extern fn rust_eh_personality() {\n+}\n+\n+// This function may be needed based on the compilation target.\n+#[lang = \"eh_unwind_resume\"]\n+#[no_mangle]\n+pub extern fn rust_eh_unwind_resume() {\n+}\n+\n+#[lang = \"panic_fmt\"]\n+#[no_mangle]\n+pub extern fn rust_begin_panic(_msg: core::fmt::Arguments,\n+                               _file: &'static str,\n+                               _line: u32) -> ! {\n+    unsafe { intrinsics::abort() }\n+}\n+```\n+\n+To override the compiler-inserted `main` shim, one has to disable it\n+with `#![no_main]` and then create the appropriate symbol with the\n+correct ABI and the correct name, which requires overriding the\n+compiler's name mangling too:\n+\n+```rust,ignore\n+#![feature(lang_items, core_intrinsics)]\n+#![feature(start)]\n+#![no_std]\n+#![no_main]\n+use core::intrinsics;\n+\n+// Pull in the system libc library for what crt0.o likely requires.\n+extern crate libc;\n+\n+// Entry point for this program.\n+#[no_mangle] // ensure that this symbol is called `main` in the output\n+pub extern fn main(_argc: i32, _argv: *const *const u8) -> i32 {\n+    0\n+}\n+\n+// These functions are used by the compiler, but not\n+// for a bare-bones hello world. These are normally\n+// provided by libstd.\n+#[lang = \"eh_personality\"]\n+#[no_mangle]\n+pub extern fn rust_eh_personality() {\n+}\n+\n+// This function may be needed based on the compilation target.\n+#[lang = \"eh_unwind_resume\"]\n+#[no_mangle]\n+pub extern fn rust_eh_unwind_resume() {\n+}\n+\n+#[lang = \"panic_fmt\"]\n+#[no_mangle]\n+pub extern fn rust_begin_panic(_msg: core::fmt::Arguments,\n+                               _file: &'static str,\n+                               _line: u32) -> ! {\n+    unsafe { intrinsics::abort() }\n+}\n+```\n+\n+## More about the language items\n+\n+The compiler currently makes a few assumptions about symbols which are\n+available in the executable to call. Normally these functions are provided by\n+the standard library, but without it you must define your own. These symbols\n+are called \"language items\", and they each have an internal name, and then a\n+signature that an implementation must conform to.\n+\n+The first of these functions, `rust_eh_personality`, is used by the failure\n+mechanisms of the compiler. This is often mapped to GCC's personality function\n+(see the [libstd implementation][unwind] for more information), but crates\n+which do not trigger a panic can be assured that this function is never\n+called. The language item's name is `eh_personality`.\n+\n+[unwind]: https://github.com/rust-lang/rust/blob/master/src/libpanic_unwind/gcc.rs\n+\n+The second function, `rust_begin_panic`, is also used by the failure mechanisms of the\n+compiler. When a panic happens, this controls the message that's displayed on\n+the screen. While the language item's name is `panic_fmt`, the symbol name is\n+`rust_begin_panic`.\n+\n+A third function, `rust_eh_unwind_resume`, is also needed if the `custom_unwind_resume`\n+flag is set in the options of the compilation target. It allows customizing the\n+process of resuming unwind at the end of the landing pads. The language item's name\n+is `eh_unwind_resume`."}, {"sha": "2507197661a9de4d76efc9391dce8c692bedd2e9", "filename": "src/doc/unstable-book/src/link-args.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Flink-args.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Flink-args.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flink-args.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,29 @@ The tracking issue for this feature is: [#29596]\n \n [#29596]: https://github.com/rust-lang/rust/issues/29596\n \n+------------------------\n \n+You can tell `rustc` how to customize linking, and that is via the `link_args`\n+attribute. This attribute is applied to `extern` blocks and specifies raw flags\n+which need to get passed to the linker when producing an artifact. An example\n+usage would be:\n \n+```rust,no_run\n+#![feature(link_args)]\n+\n+#[link_args = \"-foo -bar -baz\"]\n+extern {}\n+# fn main() {}\n+```\n+\n+Note that this feature is currently hidden behind the `feature(link_args)` gate\n+because this is not a sanctioned way of performing linking. Right now `rustc`\n+shells out to the system linker (`gcc` on most systems, `link.exe` on MSVC), so\n+it makes sense to provide extra command line arguments, but this will not\n+always be the case. In the future `rustc` may use LLVM directly to link native\n+libraries, in which case `link_args` will have no meaning. You can achieve the\n+same effect as the `link_args` attribute with the `-C link-args` argument to\n+`rustc`.\n+\n+It is highly recommended to *not* use this attribute, and rather use the more\n+formal `#[link(...)]` attribute on `extern` blocks instead."}, {"sha": "7393d0628e4f5b716a2135c801921e33ae0ef195", "filename": "src/doc/unstable-book/src/link-cfg.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Flink-cfg.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Flink-cfg.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flink-cfg.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#37406]\n \n [#37406]: https://github.com/rust-lang/rust/issues/37406\n \n+------------------------\n+\n \n "}, {"sha": "ba639cb57fc6d2e9ccab9b14bcd05192650ca079", "filename": "src/doc/unstable-book/src/link-llvm-intrinsics.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Flink-llvm-intrinsics.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Flink-llvm-intrinsics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flink-llvm-intrinsics.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#29602]\n \n [#29602]: https://github.com/rust-lang/rust/issues/29602\n \n+------------------------\n+\n \n "}, {"sha": "5773d28a00ecc2cc7e9e52438331d74972c9f32d", "filename": "src/doc/unstable-book/src/linkage.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Flinkage.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Flinkage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flinkage.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#29603]\n \n [#29603]: https://github.com/rust-lang/rust/issues/29603\n \n+------------------------\n+\n \n "}, {"sha": "b13f5ccfd9179a343bc9813f6768b4aee86a8fb1", "filename": "src/doc/unstable-book/src/log-syntax.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Flog-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Flog-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flog-syntax.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#29598]\n \n [#29598]: https://github.com/rust-lang/rust/issues/29598\n \n+------------------------\n+\n \n "}, {"sha": "54d6e62ce4c526b088fbfb2d22940bddd35d4b57", "filename": "src/doc/unstable-book/src/loop-break-value.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Floop-break-value.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Floop-break-value.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Floop-break-value.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#37339]\n \n [#37339]: https://github.com/rust-lang/rust/issues/37339\n \n+------------------------\n+\n \n "}, {"sha": "32ffa3b4c31e52a9dce64323578f35da6821ee5d", "filename": "src/doc/unstable-book/src/macro-reexport.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fmacro-reexport.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fmacro-reexport.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fmacro-reexport.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#29638]\n \n [#29638]: https://github.com/rust-lang/rust/issues/29638\n \n+------------------------\n+\n \n "}, {"sha": "579aabfff88b90c98639d86ce36d33c46a1da6d9", "filename": "src/doc/unstable-book/src/main.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fmain.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fmain.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fmain.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#29634]\n \n [#29634]: https://github.com/rust-lang/rust/issues/29634\n \n+------------------------\n+\n \n "}, {"sha": "e56ce4770aab00a78565e78e5d055243143e5465", "filename": "src/doc/unstable-book/src/naked-functions.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fnaked-functions.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fnaked-functions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fnaked-functions.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#32408]\n \n [#32408]: https://github.com/rust-lang/rust/issues/32408\n \n+------------------------\n+\n \n "}, {"sha": "22aa10b2183cb2f580a5e9c962cf007aaf0b079f", "filename": "src/doc/unstable-book/src/needs-allocator.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fneeds-allocator.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fneeds-allocator.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fneeds-allocator.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#27389]\n \n [#27389]: https://github.com/rust-lang/rust/issues/27389\n \n+------------------------\n+\n \n "}, {"sha": "627c946c1bb271fd9fd91b457ae7d85465fcb6d4", "filename": "src/doc/unstable-book/src/needs-panic-runtime.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fneeds-panic-runtime.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fneeds-panic-runtime.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fneeds-panic-runtime.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#32837]\n \n [#32837]: https://github.com/rust-lang/rust/issues/32837\n \n+------------------------\n+\n \n "}, {"sha": "3b3729a4b21d79ee0ce5b218cca43fe3919be5e2", "filename": "src/doc/unstable-book/src/never-type.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fnever-type.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fnever-type.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fnever-type.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#35121]\n \n [#35121]: https://github.com/rust-lang/rust/issues/35121\n \n+------------------------\n+\n \n "}, {"sha": "6238753447c9cdd01ab7868451bf2956e0d8411c", "filename": "src/doc/unstable-book/src/no-core.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fno-core.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fno-core.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fno-core.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#29639]\n \n [#29639]: https://github.com/rust-lang/rust/issues/29639\n \n+------------------------\n+\n \n "}, {"sha": "7536ed9d4e106e3469db46bc0ec5639cf28c4838", "filename": "src/doc/unstable-book/src/no-debug.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fno-debug.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fno-debug.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fno-debug.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#29721]\n \n [#29721]: https://github.com/rust-lang/rust/issues/29721\n \n+------------------------\n+\n \n "}, {"sha": "f426022ab3a5161cc05a24b30912ad84605b7270", "filename": "src/doc/unstable-book/src/non-ascii-idents.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fnon-ascii-idents.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fnon-ascii-idents.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fnon-ascii-idents.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#28979]\n \n [#28979]: https://github.com/rust-lang/rust/issues/28979\n \n+------------------------\n+\n \n "}, {"sha": "d8ac520fcb5e2cd1e008566fdbacbfd7482cbb00", "filename": "src/doc/unstable-book/src/omit-gdb-pretty-printer-section.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fomit-gdb-pretty-printer-section.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fomit-gdb-pretty-printer-section.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fomit-gdb-pretty-printer-section.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -2,3 +2,5 @@\n \n The tracking issue for this feature is: None.\n \n+------------------------\n+"}, {"sha": "81f284d0a6a3e0bb52573dd92ba162ea2ebb2d3a", "filename": "src/doc/unstable-book/src/on-unimplemented.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fon-unimplemented.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fon-unimplemented.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fon-unimplemented.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#29628]\n \n [#29628]: https://github.com/rust-lang/rust/issues/29628\n \n+------------------------\n+\n \n "}, {"sha": "0b2d60accd59a95a3049cf7d5dd7ddc5c0342b2b", "filename": "src/doc/unstable-book/src/optin-builtin-traits.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Foptin-builtin-traits.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Foptin-builtin-traits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Foptin-builtin-traits.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,6 @@ The tracking issue for this feature is: [#13231]\n \n [#13231]: https://github.com/rust-lang/rust/issues/13231\n \n+------------------------\n \n "}, {"sha": "65b067e8296131e8ade4df36e8ba7b2b9a9369d2", "filename": "src/doc/unstable-book/src/panic-runtime.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fpanic-runtime.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fpanic-runtime.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fpanic-runtime.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#32837]\n \n [#32837]: https://github.com/rust-lang/rust/issues/32837\n \n+------------------------\n+\n \n "}, {"sha": "da12559a01b86b0935695b1b84c798621d6ec48e", "filename": "src/doc/unstable-book/src/placement-in-syntax.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fplacement-in-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fplacement-in-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fplacement-in-syntax.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#27779]\n \n [#27779]: https://github.com/rust-lang/rust/issues/27779\n \n+------------------------\n+\n \n "}, {"sha": "377ac8f7342ef0e36698392230981d27198e31d8", "filename": "src/doc/unstable-book/src/platform-intrinsics.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fplatform-intrinsics.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fplatform-intrinsics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fplatform-intrinsics.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#27731]\n \n [#27731]: https://github.com/rust-lang/rust/issues/27731\n \n+------------------------\n+\n \n "}, {"sha": "ca3738bd93f831dbb5b5955f2d227468f121c7f9", "filename": "src/doc/unstable-book/src/plugin-registrar.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fplugin-registrar.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fplugin-registrar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fplugin-registrar.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,10 @@ The tracking issue for this feature is: [#29597]\n \n [#29597]: https://github.com/rust-lang/rust/issues/29597\n \n+This feature is part of \"compiler plugins.\" It will often be used with the\n+[`plugin`] and `rustc_private` features as well. For more details, see\n+their docs.\n \n+[`plugin`]: plugin.html\n \n+------------------------"}, {"sha": "1ec28bbcf03720b6be1a2456b916dda25568b522", "filename": "src/doc/unstable-book/src/plugin.md", "status": "modified", "additions": 254, "deletions": 0, "changes": 254, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fplugin.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -5,4 +5,258 @@ The tracking issue for this feature is: [#29597]\n [#29597]: https://github.com/rust-lang/rust/issues/29597\n \n \n+This feature is part of \"compiler plugins.\" It will often be used with the\n+[`plugin_registrar`] and `rustc_private` features.\n \n+[`plugin_registrar`]: plugin-registrar.html\n+\n+------------------------\n+\n+`rustc` can load compiler plugins, which are user-provided libraries that\n+extend the compiler's behavior with new syntax extensions, lint checks, etc.\n+\n+A plugin is a dynamic library crate with a designated *registrar* function that\n+registers extensions with `rustc`. Other crates can load these extensions using\n+the crate attribute `#![plugin(...)]`.  See the\n+`rustc_plugin` documentation for more about the\n+mechanics of defining and loading a plugin.\n+\n+If present, arguments passed as `#![plugin(foo(... args ...))]` are not\n+interpreted by rustc itself.  They are provided to the plugin through the\n+`Registry`'s `args` method.\n+\n+In the vast majority of cases, a plugin should *only* be used through\n+`#![plugin]` and not through an `extern crate` item.  Linking a plugin would\n+pull in all of libsyntax and librustc as dependencies of your crate.  This is\n+generally unwanted unless you are building another plugin.  The\n+`plugin_as_library` lint checks these guidelines.\n+\n+The usual practice is to put compiler plugins in their own crate, separate from\n+any `macro_rules!` macros or ordinary Rust code meant to be used by consumers\n+of a library.\n+\n+# Syntax extensions\n+\n+Plugins can extend Rust's syntax in various ways. One kind of syntax extension\n+is the procedural macro. These are invoked the same way as [ordinary\n+macros](macros.html), but the expansion is performed by arbitrary Rust\n+code that manipulates syntax trees at\n+compile time.\n+\n+Let's write a plugin\n+[`roman_numerals.rs`](https://github.com/rust-lang/rust/blob/master/src/test/run-pass-fulldeps/auxiliary/roman_numerals.rs)\n+that implements Roman numeral integer literals.\n+\n+```rust,ignore\n+#![crate_type=\"dylib\"]\n+#![feature(plugin_registrar, rustc_private)]\n+\n+extern crate syntax;\n+extern crate rustc;\n+extern crate rustc_plugin;\n+\n+use syntax::parse::token;\n+use syntax::tokenstream::TokenTree;\n+use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacEager};\n+use syntax::ext::build::AstBuilder;  // A trait for expr_usize.\n+use syntax::ext::quote::rt::Span;\n+use rustc_plugin::Registry;\n+\n+fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n+        -> Box<MacResult + 'static> {\n+\n+    static NUMERALS: &'static [(&'static str, usize)] = &[\n+        (\"M\", 1000), (\"CM\", 900), (\"D\", 500), (\"CD\", 400),\n+        (\"C\",  100), (\"XC\",  90), (\"L\",  50), (\"XL\",  40),\n+        (\"X\",   10), (\"IX\",   9), (\"V\",   5), (\"IV\",   4),\n+        (\"I\",    1)];\n+\n+    if args.len() != 1 {\n+        cx.span_err(\n+            sp,\n+            &format!(\"argument should be a single identifier, but got {} arguments\", args.len()));\n+        return DummyResult::any(sp);\n+    }\n+\n+    let text = match args[0] {\n+        TokenTree::Token(_, token::Ident(s)) => s.to_string(),\n+        _ => {\n+            cx.span_err(sp, \"argument should be a single identifier\");\n+            return DummyResult::any(sp);\n+        }\n+    };\n+\n+    let mut text = &*text;\n+    let mut total = 0;\n+    while !text.is_empty() {\n+        match NUMERALS.iter().find(|&&(rn, _)| text.starts_with(rn)) {\n+            Some(&(rn, val)) => {\n+                total += val;\n+                text = &text[rn.len()..];\n+            }\n+            None => {\n+                cx.span_err(sp, \"invalid Roman numeral\");\n+                return DummyResult::any(sp);\n+            }\n+        }\n+    }\n+\n+    MacEager::expr(cx.expr_usize(sp, total))\n+}\n+\n+#[plugin_registrar]\n+pub fn plugin_registrar(reg: &mut Registry) {\n+    reg.register_macro(\"rn\", expand_rn);\n+}\n+```\n+\n+Then we can use `rn!()` like any other macro:\n+\n+```rust,ignore\n+#![feature(plugin)]\n+#![plugin(roman_numerals)]\n+\n+fn main() {\n+    assert_eq!(rn!(MMXV), 2015);\n+}\n+```\n+\n+The advantages over a simple `fn(&str) -> u32` are:\n+\n+* The (arbitrarily complex) conversion is done at compile time.\n+* Input validation is also performed at compile time.\n+* It can be extended to allow use in patterns, which effectively gives\n+  a way to define new literal syntax for any data type.\n+\n+In addition to procedural macros, you can define new\n+[`derive`](../reference.html#derive)-like attributes and other kinds of\n+extensions.  See `Registry::register_syntax_extension` and the `SyntaxExtension`\n+enum.  For a more involved macro example, see\n+[`regex_macros`](https://github.com/rust-lang/regex/blob/master/regex_macros/src/lib.rs).\n+\n+\n+## Tips and tricks\n+\n+Some of the [macro debugging tips](macros.html#Debugging%20macro%20code) are applicable.\n+\n+You can use `syntax::parse` to turn token trees into\n+higher-level syntax elements like expressions:\n+\n+```rust,ignore\n+fn expand_foo(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n+        -> Box<MacResult+'static> {\n+\n+    let mut parser = cx.new_parser_from_tts(args);\n+\n+    let expr: P<Expr> = parser.parse_expr();\n+```\n+\n+Looking through [`libsyntax` parser\n+code](https://github.com/rust-lang/rust/blob/master/src/libsyntax/parse/parser.rs)\n+will give you a feel for how the parsing infrastructure works.\n+\n+Keep the `Span`s of everything you parse, for better error reporting. You can\n+wrap `Spanned` around your custom data structures.\n+\n+Calling `ExtCtxt::span_fatal` will immediately abort compilation. It's better to\n+instead call `ExtCtxt::span_err` and return `DummyResult` so that the compiler\n+can continue and find further errors.\n+\n+To print syntax fragments for debugging, you can use `span_note` together with\n+`syntax::print::pprust::*_to_string`.\n+\n+The example above produced an integer literal using `AstBuilder::expr_usize`.\n+As an alternative to the `AstBuilder` trait, `libsyntax` provides a set of\n+quasiquote macros. They are undocumented and very rough around the edges.\n+However, the implementation may be a good starting point for an improved\n+quasiquote as an ordinary plugin library.\n+\n+\n+# Lint plugins\n+\n+Plugins can extend [Rust's lint\n+infrastructure](../reference.html#lint-check-attributes) with additional checks for\n+code style, safety, etc. Now let's write a plugin\n+[`lint_plugin_test.rs`](https://github.com/rust-lang/rust/blob/master/src/test/run-pass-fulldeps/auxiliary/lint_plugin_test.rs)\n+that warns about any item named `lintme`.\n+\n+```rust,ignore\n+#![feature(plugin_registrar)]\n+#![feature(box_syntax, rustc_private)]\n+\n+extern crate syntax;\n+\n+// Load rustc as a plugin to get macros\n+#[macro_use]\n+extern crate rustc;\n+extern crate rustc_plugin;\n+\n+use rustc::lint::{EarlyContext, LintContext, LintPass, EarlyLintPass,\n+                  EarlyLintPassObject, LintArray};\n+use rustc_plugin::Registry;\n+use syntax::ast;\n+\n+declare_lint!(TEST_LINT, Warn, \"Warn about items named 'lintme'\");\n+\n+struct Pass;\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(TEST_LINT)\n+    }\n+}\n+\n+impl EarlyLintPass for Pass {\n+    fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {\n+        if it.ident.name.as_str() == \"lintme\" {\n+            cx.span_lint(TEST_LINT, it.span, \"item is named 'lintme'\");\n+        }\n+    }\n+}\n+\n+#[plugin_registrar]\n+pub fn plugin_registrar(reg: &mut Registry) {\n+    reg.register_early_lint_pass(box Pass as EarlyLintPassObject);\n+}\n+```\n+\n+Then code like\n+\n+```rust,ignore\n+#![plugin(lint_plugin_test)]\n+\n+fn lintme() { }\n+```\n+\n+will produce a compiler warning:\n+\n+```txt\n+foo.rs:4:1: 4:16 warning: item is named 'lintme', #[warn(test_lint)] on by default\n+foo.rs:4 fn lintme() { }\n+         ^~~~~~~~~~~~~~~\n+```\n+\n+The components of a lint plugin are:\n+\n+* one or more `declare_lint!` invocations, which define static `Lint` structs;\n+\n+* a struct holding any state needed by the lint pass (here, none);\n+\n+* a `LintPass`\n+  implementation defining how to check each syntax element. A single\n+  `LintPass` may call `span_lint` for several different `Lint`s, but should\n+  register them all through the `get_lints` method.\n+\n+Lint passes are syntax traversals, but they run at a late stage of compilation\n+where type information is available. `rustc`'s [built-in\n+lints](https://github.com/rust-lang/rust/blob/master/src/librustc/lint/builtin.rs)\n+mostly use the same infrastructure as lint plugins, and provide examples of how\n+to access type information.\n+\n+Lints defined by plugins are controlled by the usual [attributes and compiler\n+flags](../reference.html#lint-check-attributes), e.g. `#[allow(test_lint)]` or\n+`-A test-lint`. These identifiers are derived from the first argument to\n+`declare_lint!`, with appropriate case and punctuation conversion.\n+\n+You can run `rustc -W help foo.rs` to see a list of lints known to `rustc`,\n+including those provided by plugins loaded by `foo.rs`."}, {"sha": "75dae5cfb7401b0c8766dfb1cd0adea459b0bf00", "filename": "src/doc/unstable-book/src/prelude-import.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fprelude-import.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fprelude-import.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fprelude-import.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -2,3 +2,5 @@\n \n The tracking issue for this feature is: None.\n \n+------------------------\n+"}, {"sha": "f8b53bd5a2fd398a9119c3b1506dff84550f4db3", "filename": "src/doc/unstable-book/src/proc-macro.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fproc-macro.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fproc-macro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fproc-macro.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#38356]\n \n [#38356]: https://github.com/rust-lang/rust/issues/38356\n \n+------------------------\n+\n \n "}, {"sha": "730461813cbec5fe56e6aeae9d2a670683e012d9", "filename": "src/doc/unstable-book/src/pub-restricted.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fpub-restricted.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fpub-restricted.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fpub-restricted.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#32409]\n \n [#32409]: https://github.com/rust-lang/rust/issues/32409\n \n+------------------------\n+\n \n "}, {"sha": "b4e078d920c4eec9f12852cb9a36cbf4c22cb003", "filename": "src/doc/unstable-book/src/quote.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fquote.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fquote.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fquote.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#29601]\n \n [#29601]: https://github.com/rust-lang/rust/issues/29601\n \n+------------------------\n+\n \n "}, {"sha": "170570e06a2ed828c583c5033c5237e973f02345", "filename": "src/doc/unstable-book/src/relaxed-adts.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Frelaxed-adts.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Frelaxed-adts.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Frelaxed-adts.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#35626]\n \n [#35626]: https://github.com/rust-lang/rust/issues/35626\n \n+------------------------\n+\n \n "}, {"sha": "c6f051e4fffc1220b137bf8947c49b25d46bf6f5", "filename": "src/doc/unstable-book/src/repr-simd.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Frepr-simd.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Frepr-simd.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Frepr-simd.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#27731]\n \n [#27731]: https://github.com/rust-lang/rust/issues/27731\n \n+------------------------\n+\n \n "}, {"sha": "d1f18cead068372c9c7991ca8f6afe570cd9587f", "filename": "src/doc/unstable-book/src/rustc-attrs.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Frustc-attrs.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Frustc-attrs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Frustc-attrs.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#29642]\n \n [#29642]: https://github.com/rust-lang/rust/issues/29642\n \n+------------------------\n+\n \n "}, {"sha": "0df6ca12089eebf94b7ed3243c74ae2b0ec2497d", "filename": "src/doc/unstable-book/src/rustc-diagnostic-macros.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Frustc-diagnostic-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Frustc-diagnostic-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Frustc-diagnostic-macros.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -2,3 +2,5 @@\n \n The tracking issue for this feature is: None.\n \n+------------------------\n+"}, {"sha": "f19504de58e120ff98c04ca921bc071a7735d9ba", "filename": "src/doc/unstable-book/src/sanitizer-runtime.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fsanitizer-runtime.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fsanitizer-runtime.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fsanitizer-runtime.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -2,3 +2,5 @@\n \n The tracking issue for this feature is: None.\n \n+------------------------\n+"}, {"sha": "d85779c3d3dc9c9171d7e7df869a0a21733c18f5", "filename": "src/doc/unstable-book/src/simd-ffi.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fsimd-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fsimd-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fsimd-ffi.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#27731]\n \n [#27731]: https://github.com/rust-lang/rust/issues/27731\n \n+------------------------\n+\n \n "}, {"sha": "13c9722c5243a0250c51d82eac5b80f27740fbe2", "filename": "src/doc/unstable-book/src/simd.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fsimd.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fsimd.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fsimd.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#27731]\n \n [#27731]: https://github.com/rust-lang/rust/issues/27731\n \n+------------------------\n+\n \n "}, {"sha": "1e9e1eaafda46dade9f4c92cc49035259251d6e0", "filename": "src/doc/unstable-book/src/slice-patterns.md", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fslice-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fslice-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fslice-patterns.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,24 @@ The tracking issue for this feature is: [#23121]\n \n [#23121]: https://github.com/rust-lang/rust/issues/23121\n \n+See also [`advanced_slice_patterns`](advanced-slice-patterns.html).\n \n+------------------------\n+\n+\n+If you want to match against a slice or array, you can use `&` with the\n+`slice_patterns` feature:\n+\n+```rust\n+#![feature(slice_patterns)]\n+\n+fn main() {\n+    let v = vec![\"match_this\", \"1\"];\n+\n+    match &v[..] {\n+        &[\"match_this\", second] => println!(\"The second element is {}\", second),\n+        _ => {},\n+    }\n+}\n+```\n "}, {"sha": "59f27343b66df37f6075f3182d98753500f2739c", "filename": "src/doc/unstable-book/src/specialization.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fspecialization.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fspecialization.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fspecialization.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -2,7 +2,7 @@\n \n The tracking issue for this feature is: [#31844]\n \n-[#31844]: https://github.com/rust-lang/rust/issues/31844\n+------------------------\n \n \n "}, {"sha": "1409e570e887ba1cfe6ae87834e6d6d481000d93", "filename": "src/doc/unstable-book/src/staged-api.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fstaged-api.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fstaged-api.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fstaged-api.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -2,3 +2,5 @@\n \n The tracking issue for this feature is: None.\n \n+------------------------\n+"}, {"sha": "1ea6d59c78d5b46362ce83fdb334b3fc08c56874", "filename": "src/doc/unstable-book/src/start.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fstart.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fstart.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fstart.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#29633]\n \n [#29633]: https://github.com/rust-lang/rust/issues/29633\n \n+------------------------\n+\n \n "}, {"sha": "97b9d71d433a4b5a2e8089ccc3956968def71681", "filename": "src/doc/unstable-book/src/static-nobundle.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fstatic-nobundle.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fstatic-nobundle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fstatic-nobundle.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#37403]\n \n [#37403]: https://github.com/rust-lang/rust/issues/37403\n \n+------------------------\n+\n \n "}, {"sha": "d419ea41c6ffb264b330ec100b6ab386078f6c3e", "filename": "src/doc/unstable-book/src/static-recursion.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fstatic-recursion.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fstatic-recursion.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fstatic-recursion.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#29719]\n \n [#29719]: https://github.com/rust-lang/rust/issues/29719\n \n+------------------------\n+\n \n "}, {"sha": "71092fcf29040e5635b95db92fcedbde94c9b011", "filename": "src/doc/unstable-book/src/stmt-expr-attributes.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fstmt-expr-attributes.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fstmt-expr-attributes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fstmt-expr-attributes.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#15701]\n \n [#15701]: https://github.com/rust-lang/rust/issues/15701\n \n+------------------------\n+\n \n "}, {"sha": "1a94562968d192a11db9be21bda24c6f2e7f081e", "filename": "src/doc/unstable-book/src/struct-field-attributes.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fstruct-field-attributes.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fstruct-field-attributes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fstruct-field-attributes.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#38814]\n \n [#38814]: https://github.com/rust-lang/rust/issues/38814\n \n+------------------------\n+\n \n "}, {"sha": "b3ca26e6474deffcc886999d9ccfdd4841b7ccca", "filename": "src/doc/unstable-book/src/structural-match.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fstructural-match.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fstructural-match.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fstructural-match.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#31434]\n \n [#31434]: https://github.com/rust-lang/rust/issues/31434\n \n+------------------------\n+\n \n "}, {"sha": "85ab1ab39efe643901cdd7e1a7fe4457dca80f99", "filename": "src/doc/unstable-book/src/target-feature.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Ftarget-feature.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Ftarget-feature.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ftarget-feature.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -2,3 +2,5 @@\n \n The tracking issue for this feature is: None.\n \n+------------------------\n+"}, {"sha": "6b4a3a677db61a75427365a435901103b6c09b7b", "filename": "src/doc/unstable-book/src/test.md", "status": "renamed", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Ftest.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Ftest.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ftest.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -1,7 +1,13 @@\n-# Benchmark tests\n+# `test`\n \n-Rust supports benchmark tests, which can test the performance of your\n-code. Let's make our `src/lib.rs` look like this (comments elided):\n+The tracking issue for this feature is: None.\n+\n+------------------------\n+\n+The internals of the `test` crate are unstable, behind the `test` flag.  The\n+most widely used part of the `test` crate are benchmark tests, which can test\n+the performance of your code.  Let's make our `src/lib.rs` look like this\n+(comments elided):\n \n ```rust,ignore\n #![feature(test)]", "previous_filename": "src/doc/book/src/benchmark-tests.md"}, {"sha": "83de2f9cd4b5471a88f99711ffd193eda0c0e85c", "filename": "src/doc/unstable-book/src/thread-local.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fthread-local.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fthread-local.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fthread-local.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#29594]\n \n [#29594]: https://github.com/rust-lang/rust/issues/29594\n \n+------------------------\n+\n \n "}, {"sha": "856f1b0a7bbb05446adfaaeffa7f37c69777cba4", "filename": "src/doc/unstable-book/src/trace-macros.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Ftrace-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Ftrace-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ftrace-macros.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#29598]\n \n [#29598]: https://github.com/rust-lang/rust/issues/29598\n \n+------------------------\n+\n \n "}, {"sha": "3ebd0d87ccff995850e909133571ebe1d4482be2", "filename": "src/doc/unstable-book/src/type-ascription.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Ftype-ascription.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Ftype-ascription.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ftype-ascription.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#23416]\n \n [#23416]: https://github.com/rust-lang/rust/issues/23416\n \n+------------------------\n+\n \n "}, {"sha": "2cbb436ce0bb16446d45fb2299fc85ee09cc530d", "filename": "src/doc/unstable-book/src/unboxed-closures.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Funboxed-closures.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Funboxed-closures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Funboxed-closures.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#29625]\n \n [#29625]: https://github.com/rust-lang/rust/issues/29625\n \n+------------------------\n+\n \n "}, {"sha": "6fe4f088ac237fcf9b0e83b3ec439af1a9067cf3", "filename": "src/doc/unstable-book/src/untagged-unions.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Funtagged-unions.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Funtagged-unions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Funtagged-unions.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#32836]\n \n [#32836]: https://github.com/rust-lang/rust/issues/32836\n \n+------------------------\n+\n \n "}, {"sha": "0167a33b081a568bf32c0f46daea4b86bf3714d1", "filename": "src/doc/unstable-book/src/unwind-attributes.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Funwind-attributes.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Funwind-attributes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Funwind-attributes.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -2,3 +2,5 @@\n \n The tracking issue for this feature is: None.\n \n+------------------------\n+"}, {"sha": "bc6149115028f393940206e04a62ea25df39314b", "filename": "src/doc/unstable-book/src/use-extern-macros.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fuse-extern-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fuse-extern-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fuse-extern-macros.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#35896]\n \n [#35896]: https://github.com/rust-lang/rust/issues/35896\n \n+------------------------\n+\n \n "}, {"sha": "80583352fbf967d5a77b9d525b3d993f7a2525fc", "filename": "src/doc/unstable-book/src/windows-subsystem.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-subsystem.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2545f77b722a8cde5cb87b289cd8b87643a7a/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-subsystem.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-subsystem.md?ref=6fb2545f77b722a8cde5cb87b289cd8b87643a7a", "patch": "@@ -4,5 +4,7 @@ The tracking issue for this feature is: [#37499]\n \n [#37499]: https://github.com/rust-lang/rust/issues/37499\n \n+------------------------\n+\n \n "}]}