{"sha": "808b848eafb5583192653504898f47a4431b89ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwOGI4NDhlYWZiNTU4MzE5MjY1MzUwNDg5OGY0N2E0NDMxYjg5ZWE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-06-23T23:44:41Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-25T00:23:05Z"}, "message": "std: Add stability attributes to primitive numeric modules\n\nThe following are unstable:\n\n- core::int, i8, i16, i32, i64\n- core::uint, u8, u16, u32, u64\n- core::int::{BITS, BYTES, MIN, MAX}, etc.\n- std::int, i8, i16, i32, i64\n- std::uint, u8, u16, u32, u64\n\nThe following are experimental:\n- std::from_str::FromStr and impls - may need to return Result instead of Option\n- std::int::parse_bytes, etc. - ditto\n- std::num::FromStrRadix and impls - ditto\n- std::num::from_str_radix - ditto\n\nThe following are deprecated:\n- std::num::ToStrRadix and imples - Wrapper around fmt::radix. Wrong name (Str vs String)\n\nSee https://github.com/rust-lang/rust/wiki/Meeting-API-review-2014-06-23#uint", "tree": {"sha": "429dcf9cb01327c2ff0eb0c73a799d26529403d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/429dcf9cb01327c2ff0eb0c73a799d26529403d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/808b848eafb5583192653504898f47a4431b89ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/808b848eafb5583192653504898f47a4431b89ea", "html_url": "https://github.com/rust-lang/rust/commit/808b848eafb5583192653504898f47a4431b89ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/808b848eafb5583192653504898f47a4431b89ea/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "250e2362de46c2390e0870a70643a0271ee5c537", "url": "https://api.github.com/repos/rust-lang/rust/commits/250e2362de46c2390e0870a70643a0271ee5c537", "html_url": "https://github.com/rust-lang/rust/commit/250e2362de46c2390e0870a70643a0271ee5c537"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "39e5c99b97becd1a280cbc1987fb114703681a98", "filename": "src/libcore/num/i16.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/808b848eafb5583192653504898f47a4431b89ea/src%2Flibcore%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b848eafb5583192653504898f47a4431b89ea/src%2Flibcore%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi16.rs?ref=808b848eafb5583192653504898f47a4431b89ea", "patch": "@@ -10,6 +10,7 @@\n \n //! Operations and constants for signed 16-bits integers (`i16` type)\n \n+#![unstable]\n #![doc(primitive = \"i16\")]\n \n int_module!(i16, 16)"}, {"sha": "1ad9b51b6acf7e0b6ba3aa87fab5284447771887", "filename": "src/libcore/num/i32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/808b848eafb5583192653504898f47a4431b89ea/src%2Flibcore%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b848eafb5583192653504898f47a4431b89ea/src%2Flibcore%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi32.rs?ref=808b848eafb5583192653504898f47a4431b89ea", "patch": "@@ -10,6 +10,7 @@\n \n //! Operations and constants for signed 32-bits integers (`i32` type)\n \n+#![unstable]\n #![doc(primitive = \"i32\")]\n \n int_module!(i32, 32)"}, {"sha": "7c3b05df7e84f52af9b8e69261fbad66f5c44677", "filename": "src/libcore/num/i64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/808b848eafb5583192653504898f47a4431b89ea/src%2Flibcore%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b848eafb5583192653504898f47a4431b89ea/src%2Flibcore%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi64.rs?ref=808b848eafb5583192653504898f47a4431b89ea", "patch": "@@ -10,6 +10,7 @@\n \n //! Operations and constants for signed 64-bits integers (`i64` type)\n \n+#![unstable]\n #![doc(primitive = \"i64\")]\n \n int_module!(i64, 64)"}, {"sha": "b88e78d66bf348488d3a6e4f7fdc7335aa080a3b", "filename": "src/libcore/num/i8.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/808b848eafb5583192653504898f47a4431b89ea/src%2Flibcore%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b848eafb5583192653504898f47a4431b89ea/src%2Flibcore%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi8.rs?ref=808b848eafb5583192653504898f47a4431b89ea", "patch": "@@ -10,6 +10,7 @@\n \n //! Operations and constants for signed 8-bits integers (`i8` type)\n \n+#![unstable]\n #![doc(primitive = \"i8\")]\n \n int_module!(i8, 8)"}, {"sha": "835246684dff13402596c5cca0c459ed94f8e236", "filename": "src/libcore/num/int.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/808b848eafb5583192653504898f47a4431b89ea/src%2Flibcore%2Fnum%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b848eafb5583192653504898f47a4431b89ea/src%2Flibcore%2Fnum%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint.rs?ref=808b848eafb5583192653504898f47a4431b89ea", "patch": "@@ -10,6 +10,7 @@\n \n //! Operations and constants for architecture-sized signed integers (`int` type)\n \n+#![unstable]\n #![doc(primitive = \"int\")]\n \n #[cfg(target_word_size = \"32\")] int_module!(int, 32)"}, {"sha": "ef10c9abe1141b2b8a37c71c1ca5de184824f9d3", "filename": "src/libcore/num/int_macros.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/808b848eafb5583192653504898f47a4431b89ea/src%2Flibcore%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b848eafb5583192653504898f47a4431b89ea/src%2Flibcore%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint_macros.rs?ref=808b848eafb5583192653504898f47a4431b89ea", "patch": "@@ -15,17 +15,21 @@ macro_rules! int_module (($T:ty, $bits:expr) => (\n \n // FIXME(#11621): Should be deprecated once CTFE is implemented in favour of\n // calling the `mem::size_of` function.\n+#[unstable]\n pub static BITS : uint = $bits;\n // FIXME(#11621): Should be deprecated once CTFE is implemented in favour of\n // calling the `mem::size_of` function.\n+#[unstable]\n pub static BYTES : uint = ($bits / 8);\n \n // FIXME(#11621): Should be deprecated once CTFE is implemented in favour of\n // calling the `Bounded::min_value` function.\n+#[unstable]\n pub static MIN: $T = (-1 as $T) << (BITS - 1);\n // FIXME(#9837): Compute MIN like this so the high bits that shouldn't exist are 0.\n // FIXME(#11621): Should be deprecated once CTFE is implemented in favour of\n // calling the `Bounded::max_value` function.\n+#[unstable]\n pub static MAX: $T = !MIN;\n \n #[cfg(test)]"}, {"sha": "28dc9dacbe6a50a31b54e9191f40b4656b1ff122", "filename": "src/libcore/num/u16.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/808b848eafb5583192653504898f47a4431b89ea/src%2Flibcore%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b848eafb5583192653504898f47a4431b89ea/src%2Flibcore%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu16.rs?ref=808b848eafb5583192653504898f47a4431b89ea", "patch": "@@ -10,6 +10,7 @@\n \n //! Operations and constants for unsigned 16-bits integers (`u16` type)\n \n+#![unstable]\n #![doc(primitive = \"u16\")]\n \n uint_module!(u16, i16, 16)"}, {"sha": "5763ebc4e4674d9c5b799996e7b2789fee5a7b20", "filename": "src/libcore/num/u32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/808b848eafb5583192653504898f47a4431b89ea/src%2Flibcore%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b848eafb5583192653504898f47a4431b89ea/src%2Flibcore%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu32.rs?ref=808b848eafb5583192653504898f47a4431b89ea", "patch": "@@ -10,6 +10,7 @@\n \n //! Operations and constants for unsigned 32-bits integers (`u32` type)\n \n+#![unstable]\n #![doc(primitive = \"u32\")]\n \n uint_module!(u32, i32, 32)"}, {"sha": "f48807f8851c3d4a3822afd8bc9f09bd71534ed1", "filename": "src/libcore/num/u64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/808b848eafb5583192653504898f47a4431b89ea/src%2Flibcore%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b848eafb5583192653504898f47a4431b89ea/src%2Flibcore%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu64.rs?ref=808b848eafb5583192653504898f47a4431b89ea", "patch": "@@ -10,6 +10,7 @@\n \n //! Operations and constants for unsigned 64-bits integer (`u64` type)\n \n+#![unstable]\n #![doc(primitive = \"u64\")]\n \n uint_module!(u64, i64, 64)"}, {"sha": "f4e99948923353e2fc8509b7944ca203a098187f", "filename": "src/libcore/num/u8.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/808b848eafb5583192653504898f47a4431b89ea/src%2Flibcore%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b848eafb5583192653504898f47a4431b89ea/src%2Flibcore%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu8.rs?ref=808b848eafb5583192653504898f47a4431b89ea", "patch": "@@ -10,6 +10,7 @@\n \n //! Operations and constants for unsigned 8-bits integers (`u8` type)\n \n+#![unstable]\n #![doc(primitive = \"u8\")]\n \n uint_module!(u8, i8, 8)"}, {"sha": "62d2f11e541992e702afa8a6fb5475583f273104", "filename": "src/libcore/num/uint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/808b848eafb5583192653504898f47a4431b89ea/src%2Flibcore%2Fnum%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b848eafb5583192653504898f47a4431b89ea/src%2Flibcore%2Fnum%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint.rs?ref=808b848eafb5583192653504898f47a4431b89ea", "patch": "@@ -10,6 +10,7 @@\n \n //! Operations and constants for architecture-sized unsigned integers (`uint` type)\n \n+#![unstable]\n #![doc(primitive = \"uint\")]\n \n uint_module!(uint, int, ::int::BITS)"}, {"sha": "5828697ddad507c54abaf31179a9ee1c42fcab40", "filename": "src/libcore/num/uint_macros.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/808b848eafb5583192653504898f47a4431b89ea/src%2Flibcore%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b848eafb5583192653504898f47a4431b89ea/src%2Flibcore%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint_macros.rs?ref=808b848eafb5583192653504898f47a4431b89ea", "patch": "@@ -13,10 +13,14 @@\n \n macro_rules! uint_module (($T:ty, $T_SIGNED:ty, $bits:expr) => (\n \n+#[unstable]\n pub static BITS : uint = $bits;\n+#[unstable]\n pub static BYTES : uint = ($bits / 8);\n \n+#[unstable]\n pub static MIN: $T = 0 as $T;\n+#[unstable]\n pub static MAX: $T = 0 as $T - 1 as $T;\n \n #[cfg(test)]"}, {"sha": "1e82da5ef8de47c2902ec11d83a04ae4ef943162", "filename": "src/libnum/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/808b848eafb5583192653504898f47a4431b89ea/src%2Flibnum%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b848eafb5583192653504898f47a4431b89ea/src%2Flibnum%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Flib.rs?ref=808b848eafb5583192653504898f47a4431b89ea", "patch": "@@ -54,6 +54,8 @@\n        html_root_url = \"http://doc.rust-lang.org/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n+#![allow(deprecated)] // from_str_radix\n+\n extern crate rand;\n \n pub use bigint::{BigInt, BigUint};"}, {"sha": "642bec48b836bda2f8beb086ba48428f9d2f76a3", "filename": "src/libstd/from_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/808b848eafb5583192653504898f47a4431b89ea/src%2Flibstd%2Ffrom_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b848eafb5583192653504898f47a4431b89ea/src%2Flibstd%2Ffrom_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffrom_str.rs?ref=808b848eafb5583192653504898f47a4431b89ea", "patch": "@@ -16,6 +16,7 @@ use str::StrAllocating;\n \n /// A trait to abstract the idea of creating a new instance of a type from a\n /// string.\n+#[experimental = \"might need to return Result\"]\n pub trait FromStr {\n     /// Parses a string `s` to return an optional value of this type. If the\n     /// string is ill-formatted, the None is returned."}, {"sha": "9b97513935c80dc87e5d6fdabe48a7d475649264", "filename": "src/libstd/num/i16.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/808b848eafb5583192653504898f47a4431b89ea/src%2Flibstd%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b848eafb5583192653504898f47a4431b89ea/src%2Flibstd%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi16.rs?ref=808b848eafb5583192653504898f47a4431b89ea", "patch": "@@ -10,6 +10,7 @@\n \n //! Operations and constants for signed 16-bits integers (`i16` type)\n \n+#![unstable]\n #![doc(primitive = \"i16\")]\n \n use from_str::FromStr;"}, {"sha": "03dcbb0f6d671927aec39d3e0c3cd6941c788b5c", "filename": "src/libstd/num/i32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/808b848eafb5583192653504898f47a4431b89ea/src%2Flibstd%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b848eafb5583192653504898f47a4431b89ea/src%2Flibstd%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi32.rs?ref=808b848eafb5583192653504898f47a4431b89ea", "patch": "@@ -10,6 +10,7 @@\n \n //! Operations and constants for signed 32-bits integers (`i32` type)\n \n+#![unstable]\n #![doc(primitive = \"i32\")]\n \n use from_str::FromStr;"}, {"sha": "347b5b4b93ce7f6a14d1ed51b6a1df26f7bd8dfc", "filename": "src/libstd/num/i64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/808b848eafb5583192653504898f47a4431b89ea/src%2Flibstd%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b848eafb5583192653504898f47a4431b89ea/src%2Flibstd%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi64.rs?ref=808b848eafb5583192653504898f47a4431b89ea", "patch": "@@ -10,6 +10,7 @@\n \n //! Operations and constants for signed 64-bits integers (`i64` type)\n \n+#![unstable]\n #![doc(primitive = \"i64\")]\n \n use from_str::FromStr;"}, {"sha": "fd6f96a0f97be8a9b6b16c24331bcdf69c0cd1d1", "filename": "src/libstd/num/i8.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/808b848eafb5583192653504898f47a4431b89ea/src%2Flibstd%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b848eafb5583192653504898f47a4431b89ea/src%2Flibstd%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi8.rs?ref=808b848eafb5583192653504898f47a4431b89ea", "patch": "@@ -10,6 +10,7 @@\n \n //! Operations and constants for signed 8-bits integers (`i8` type)\n \n+#![unstable]\n #![doc(primitive = \"i8\")]\n \n use from_str::FromStr;"}, {"sha": "1888d6a519e398e727f157a8740fd3970a52387f", "filename": "src/libstd/num/int.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/808b848eafb5583192653504898f47a4431b89ea/src%2Flibstd%2Fnum%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b848eafb5583192653504898f47a4431b89ea/src%2Flibstd%2Fnum%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint.rs?ref=808b848eafb5583192653504898f47a4431b89ea", "patch": "@@ -10,6 +10,7 @@\n \n //! Operations and constants for architecture-sized signed integers (`int` type)\n \n+#![unstable]\n #![doc(primitive = \"int\")]\n \n use from_str::FromStr;"}, {"sha": "1a22ed03a452e60d7c63ea1ec448459219d2793e", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/808b848eafb5583192653504898f47a4431b89ea/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b848eafb5583192653504898f47a4431b89ea/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=808b848eafb5583192653504898f47a4431b89ea", "patch": "@@ -26,11 +26,13 @@ macro_rules! int_module (($T:ty) => (\n /// assert!(num == Some(123456789));\n /// ```\n #[inline]\n+#[experimental = \"might need to return Result\"]\n pub fn parse_bytes(buf: &[u8], radix: uint) -> Option<$T> {\n     strconv::from_str_bytes_common(buf, radix, true, false, false,\n                                strconv::ExpNone, false, false)\n }\n \n+#[experimental = \"might need to return Result\"]\n impl FromStr for $T {\n     #[inline]\n     fn from_str(s: &str) -> Option<$T> {\n@@ -39,6 +41,7 @@ impl FromStr for $T {\n     }\n }\n \n+#[experimental = \"might need to return Result\"]\n impl FromStrRadix for $T {\n     #[inline]\n     fn from_str_radix(s: &str, radix: uint) -> Option<$T> {\n@@ -61,6 +64,7 @@ impl FromStrRadix for $T {\n /// });\n /// ```\n #[inline]\n+#[deprecated = \"just use .to_string(), or a BufWriter with write! if you mustn't allocate\"]\n pub fn to_str_bytes<U>(n: $T, radix: uint, f: |v: &[u8]| -> U) -> U {\n     use io::{Writer, Seek};\n     // The radix can be as low as 2, so we need at least 64 characters for a\n@@ -74,6 +78,7 @@ pub fn to_str_bytes<U>(n: $T, radix: uint, f: |v: &[u8]| -> U) -> U {\n     f(buf.slice(0, amt))\n }\n \n+#[deprecated = \"use fmt::radix\"]\n impl ToStrRadix for $T {\n     /// Convert to a string in a given base.\n     #[inline]"}, {"sha": "65056652e3f97860ba05665c05475dc48a39d07c", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/808b848eafb5583192653504898f47a4431b89ea/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b848eafb5583192653504898f47a4431b89ea/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=808b848eafb5583192653504898f47a4431b89ea", "patch": "@@ -111,16 +111,19 @@ pub trait FloatMath: Float {\n }\n \n /// A generic trait for converting a value to a string with a radix (base)\n+#[deprecated = \"use fmt::radix\"]\n pub trait ToStrRadix {\n     fn to_str_radix(&self, radix: uint) -> String;\n }\n \n /// A generic trait for converting a string with a radix (base) to a value\n+#[experimental = \"might need to return Result\"]\n pub trait FromStrRadix {\n     fn from_str_radix(str: &str, radix: uint) -> Option<Self>;\n }\n \n /// A utility function that just calls FromStrRadix::from_str_radix.\n+#[experimental = \"might need to return Result\"]\n pub fn from_str_radix<T: FromStrRadix>(str: &str, radix: uint) -> Option<T> {\n     FromStrRadix::from_str_radix(str, radix)\n }"}, {"sha": "727d756106276acb409bbf6551247ace868109fd", "filename": "src/libstd/num/u16.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/808b848eafb5583192653504898f47a4431b89ea/src%2Flibstd%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b848eafb5583192653504898f47a4431b89ea/src%2Flibstd%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu16.rs?ref=808b848eafb5583192653504898f47a4431b89ea", "patch": "@@ -10,6 +10,7 @@\n \n //! Operations and constants for unsigned 16-bits integers (`u16` type)\n \n+#![unstable]\n #![doc(primitive = \"u16\")]\n \n use from_str::FromStr;"}, {"sha": "d18bfdf9fbac0e110330f9acefca44fed673fae6", "filename": "src/libstd/num/u32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/808b848eafb5583192653504898f47a4431b89ea/src%2Flibstd%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b848eafb5583192653504898f47a4431b89ea/src%2Flibstd%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu32.rs?ref=808b848eafb5583192653504898f47a4431b89ea", "patch": "@@ -10,6 +10,7 @@\n \n //! Operations and constants for unsigned 32-bits integers (`u32` type)\n \n+#![unstable]\n #![doc(primitive = \"u32\")]\n \n use from_str::FromStr;"}, {"sha": "53e88a96f332d0ce1fe944474289cafda2a71f35", "filename": "src/libstd/num/u64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/808b848eafb5583192653504898f47a4431b89ea/src%2Flibstd%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b848eafb5583192653504898f47a4431b89ea/src%2Flibstd%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu64.rs?ref=808b848eafb5583192653504898f47a4431b89ea", "patch": "@@ -10,6 +10,7 @@\n \n //! Operations and constants for unsigned 64-bits integer (`u64` type)\n \n+#![unstable]\n #![doc(primitive = \"u64\")]\n \n use from_str::FromStr;"}, {"sha": "e6cbd14bf417ddf9bd57b78c8aa1ac6dce6751f8", "filename": "src/libstd/num/u8.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/808b848eafb5583192653504898f47a4431b89ea/src%2Flibstd%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b848eafb5583192653504898f47a4431b89ea/src%2Flibstd%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu8.rs?ref=808b848eafb5583192653504898f47a4431b89ea", "patch": "@@ -10,6 +10,7 @@\n \n //! Operations and constants for unsigned 8-bits integers (`u8` type)\n \n+#![unstable]\n #![doc(primitive = \"u8\")]\n \n use from_str::FromStr;"}, {"sha": "41c4caf4006f1403e88fb7d655429698253a9df2", "filename": "src/libstd/num/uint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/808b848eafb5583192653504898f47a4431b89ea/src%2Flibstd%2Fnum%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b848eafb5583192653504898f47a4431b89ea/src%2Flibstd%2Fnum%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint.rs?ref=808b848eafb5583192653504898f47a4431b89ea", "patch": "@@ -10,6 +10,7 @@\n \n //! Operations and constants for architecture-sized unsigned integers (`uint` type)\n \n+#![unstable]\n #![doc(primitive = \"uint\")]\n \n use from_str::FromStr;"}, {"sha": "3b456caa0996d806cad7829c7dbf8807065d77c7", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/808b848eafb5583192653504898f47a4431b89ea/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808b848eafb5583192653504898f47a4431b89ea/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=808b848eafb5583192653504898f47a4431b89ea", "patch": "@@ -27,11 +27,13 @@ macro_rules! uint_module (($T:ty) => (\n /// assert!(num == Some(123456789));\n /// ```\n #[inline]\n+#[experimental = \"might need to return Result\"]\n pub fn parse_bytes(buf: &[u8], radix: uint) -> Option<$T> {\n     strconv::from_str_bytes_common(buf, radix, false, false, false,\n                                    strconv::ExpNone, false, false)\n }\n \n+#[experimental = \"might need to return Result\"]\n impl FromStr for $T {\n     #[inline]\n     fn from_str(s: &str) -> Option<$T> {\n@@ -40,6 +42,7 @@ impl FromStr for $T {\n     }\n }\n \n+#[experimental = \"might need to return Result\"]\n impl FromStrRadix for $T {\n     #[inline]\n     fn from_str_radix(s: &str, radix: uint) -> Option<$T> {\n@@ -62,6 +65,7 @@ impl FromStrRadix for $T {\n /// });\n /// ```\n #[inline]\n+#[deprecated = \"just use .to_string(), or a BufWriter with write! if you mustn't allocate\"]\n pub fn to_str_bytes<U>(n: $T, radix: uint, f: |v: &[u8]| -> U) -> U {\n     use io::{Writer, Seek};\n     // The radix can be as low as 2, so we need at least 64 characters for a\n@@ -75,6 +79,7 @@ pub fn to_str_bytes<U>(n: $T, radix: uint, f: |v: &[u8]| -> U) -> U {\n     f(buf.slice(0, amt))\n }\n \n+#[deprecated = \"use fmt::radix\"]\n impl ToStrRadix for $T {\n     /// Convert to a string in a given base.\n     #[inline]"}]}