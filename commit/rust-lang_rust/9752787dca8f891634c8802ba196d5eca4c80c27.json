{"sha": "9752787dca8f891634c8802ba196d5eca4c80c27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NTI3ODdkY2E4Zjg5MTYzNGM4ODAyYmExOTZkNWVjYTRjODBjMjc=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-08-18T17:40:03Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-10-15T11:51:49Z"}, "message": "mangling: non-monomorphic `#[rustc_symbol_name]`\n\nThis commit adjust `#[rustc_symbol_name]` so that it can be applied to\nnon-monomorphic functions without producing an ICE.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "9e7f270993a2ca8cc0f2882670d5918543ceda49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e7f270993a2ca8cc0f2882670d5918543ceda49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9752787dca8f891634c8802ba196d5eca4c80c27", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl+IN9UACgkQJZLnbIc4\nH9lGuQ/8D7XjdiId0Qk1f7RBWmIBI9XAeF8TjU9K+7nlABqpOVquIsC/D06Mv+nG\nE2kTGWDeYpJLWMuUlRuJv2/DAbsWx6KWbYpOeTA3xNJXAxFJm38dEX48VnaB3+8/\nm3aas0tuELRbpX/yxJ4r49Xl7t0QYJnAp2qaZNJeO+RADEAYBCaJ+89VS2C+ICoq\n4UuUAt8VvTLXVw1aAQeMBJEgyiPNFcoa+NIGKr8i37o1yMisrdC6PTRRwFrZ90pO\nP0Dfi9vdzfOgPcIfQf+MQ/AzHOOL9L/diDoLRhxv1alFdi9NX5WDhqByz/2mz2Q1\nipimo9QdxL5/cJ+QVjaKCZUqLOwdKxUs9MW+avMWfO3MDrjIOzz4lTczoi1Lx9iL\n6ciygSOojoaE/d+v0jN55aRBxKYoD4jmW/SgtN4EeQF3VZ/Uy3KjT32GsqvzFpap\nV4U+Ig91Aol9HsJZSoOcqa5Lbsn2JBJkx6JRKoPADc1N06vNy5wAa+W2FW6uyCM9\n2M3sJ/dvw+ba6+QciszcJpw6oeVhb0JtbELOnt2FOgHSTkcsaRGnYoTgeV9KoS8l\ncbSB7pp9XV+nke13Wow1W03G75HetIVu7ePZhWT6PAqGrH3iUBaPZBHDsFEaqdZI\n26q6IZuP+h0M/1wIDNiZHaCqDIhG2/vRl3enu00HO55vAlB2+C4=\n=159D\n-----END PGP SIGNATURE-----", "payload": "tree 9e7f270993a2ca8cc0f2882670d5918543ceda49\nparent 5565241f65cf402c3dbcb55dd492f172c473d4ce\nauthor David Wood <david@davidtw.co> 1597772403 +0100\ncommitter David Wood <david@davidtw.co> 1602762709 +0100\n\nmangling: non-monomorphic `#[rustc_symbol_name]`\n\nThis commit adjust `#[rustc_symbol_name]` so that it can be applied to\nnon-monomorphic functions without producing an ICE.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9752787dca8f891634c8802ba196d5eca4c80c27", "html_url": "https://github.com/rust-lang/rust/commit/9752787dca8f891634c8802ba196d5eca4c80c27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9752787dca8f891634c8802ba196d5eca4c80c27/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5565241f65cf402c3dbcb55dd492f172c473d4ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/5565241f65cf402c3dbcb55dd492f172c473d4ce", "html_url": "https://github.com/rust-lang/rust/commit/5565241f65cf402c3dbcb55dd492f172c473d4ce"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "4a2c97b4a400f6a2b5f9c5acced34241cdd37476", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9752787dca8f891634c8802ba196d5eca4c80c27/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9752787dca8f891634c8802ba196d5eca4c80c27/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=9752787dca8f891634c8802ba196d5eca4c80c27", "patch": "@@ -291,7 +291,17 @@ impl<'tcx> Instance<'tcx> {\n     }\n \n     pub fn mono(tcx: TyCtxt<'tcx>, def_id: DefId) -> Instance<'tcx> {\n-        Instance::new(def_id, tcx.empty_substs_for_def_id(def_id))\n+        let substs = InternalSubsts::for_item(tcx, def_id, |param, _| match param.kind {\n+            ty::GenericParamDefKind::Lifetime => tcx.lifetimes.re_erased.into(),\n+            ty::GenericParamDefKind::Type { .. } => {\n+                bug!(\"Instance::mono: {:?} has type parameters\", def_id)\n+            }\n+            ty::GenericParamDefKind::Const { .. } => {\n+                bug!(\"Instance::mono: {:?} has const parameters\", def_id)\n+            }\n+        });\n+\n+        Instance::new(def_id, substs)\n     }\n \n     #[inline]"}, {"sha": "b0f0f0ba57fad745d638307aabe7b76f338832a7", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9752787dca8f891634c8802ba196d5eca4c80c27/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9752787dca8f891634c8802ba196d5eca4c80c27/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=9752787dca8f891634c8802ba196d5eca4c80c27", "patch": "@@ -6,9 +6,9 @@ use crate::mir::interpret::{sign_extend, truncate};\n use crate::ty::fold::TypeFolder;\n use crate::ty::layout::IntegerExt;\n use crate::ty::query::TyCtxtAt;\n-use crate::ty::subst::{GenericArgKind, InternalSubsts, Subst, SubstsRef};\n+use crate::ty::subst::{GenericArgKind, Subst, SubstsRef};\n use crate::ty::TyKind::*;\n-use crate::ty::{self, DefIdTree, GenericParamDefKind, List, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{self, DefIdTree, List, Ty, TyCtxt, TypeFoldable};\n use rustc_apfloat::Float as _;\n use rustc_ast as ast;\n use rustc_attr::{self as attr, SignedInt, UnsignedInt};\n@@ -509,20 +509,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         Some(ty::Binder::bind(env_ty))\n     }\n \n-    /// Given the `DefId` of some item that has no type or const parameters, make\n-    /// a suitable \"empty substs\" for it.\n-    pub fn empty_substs_for_def_id(self, item_def_id: DefId) -> SubstsRef<'tcx> {\n-        InternalSubsts::for_item(self, item_def_id, |param, _| match param.kind {\n-            GenericParamDefKind::Lifetime => self.lifetimes.re_erased.into(),\n-            GenericParamDefKind::Type { .. } => {\n-                bug!(\"empty_substs_for_def_id: {:?} has type parameters\", item_def_id)\n-            }\n-            GenericParamDefKind::Const { .. } => {\n-                bug!(\"empty_substs_for_def_id: {:?} has const parameters\", item_def_id)\n-            }\n-        })\n-    }\n-\n     /// Returns `true` if the node pointed to by `def_id` is a `static` item.\n     pub fn is_static(self, def_id: DefId) -> bool {\n         self.static_mutability(def_id).is_some()"}, {"sha": "2c9caf73b8e425318ff856fbc5aca328f9125a55", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9752787dca8f891634c8802ba196d5eca4c80c27/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9752787dca8f891634c8802ba196d5eca4c80c27/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=9752787dca8f891634c8802ba196d5eca4c80c27", "patch": "@@ -115,7 +115,6 @@ fn get_symbol_hash<'tcx>(\n         }\n \n         // also include any type parameters (for generic items)\n-        assert!(!substs.has_erasable_regions());\n         substs.hash_stable(&mut hcx, &mut hasher);\n \n         if let Some(instantiating_crate) = instantiating_crate {"}, {"sha": "822a835293474a654ad5c1d0118e9e0fa752b0f1", "filename": "compiler/rustc_symbol_mangling/src/test.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9752787dca8f891634c8802ba196d5eca4c80c27/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9752787dca8f891634c8802ba196d5eca4c80c27/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs?ref=9752787dca8f891634c8802ba196d5eca4c80c27", "patch": "@@ -6,7 +6,7 @@\n \n use rustc_hir as hir;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::{Instance, TyCtxt};\n+use rustc_middle::ty::{subst::InternalSubsts, Instance, TyCtxt};\n use rustc_span::symbol::{sym, Symbol};\n \n const SYMBOL_NAME: Symbol = sym::rustc_symbol_name;\n@@ -36,8 +36,11 @@ impl SymbolNamesTest<'tcx> {\n         let def_id = tcx.hir().local_def_id(hir_id);\n         for attr in tcx.get_attrs(def_id.to_def_id()).iter() {\n             if tcx.sess.check_name(attr, SYMBOL_NAME) {\n-                // for now, can only use on monomorphic names\n-                let instance = Instance::mono(tcx, def_id.to_def_id());\n+                let def_id = def_id.to_def_id();\n+                let instance = Instance::new(\n+                    def_id,\n+                    tcx.erase_regions(&InternalSubsts::identity_for_item(tcx, def_id)),\n+                );\n                 let mangled = tcx.symbol_name(instance);\n                 tcx.sess.span_err(attr.span, &format!(\"symbol-name({})\", mangled));\n                 if let Ok(demangling) = rustc_demangle::try_demangle(mangled.name) {"}]}