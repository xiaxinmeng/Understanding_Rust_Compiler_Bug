{"sha": "1c4d43715843a5ff5af4657c798b5d5cc85ca523", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNGQ0MzcxNTg0M2E1ZmY1YWY0NjU3Yzc5OGI1ZDVjYzg1Y2E1MjM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-08T14:43:56Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-11T11:34:48Z"}, "message": "[breaking-change] don't glob export ast::ExplicitSelf_ variants", "tree": {"sha": "1461108315e399cf470545ee8f6833bd2cc5ef2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1461108315e399cf470545ee8f6833bd2cc5ef2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c4d43715843a5ff5af4657c798b5d5cc85ca523", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c4d43715843a5ff5af4657c798b5d5cc85ca523", "html_url": "https://github.com/rust-lang/rust/commit/1c4d43715843a5ff5af4657c798b5d5cc85ca523", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c4d43715843a5ff5af4657c798b5d5cc85ca523/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79fa657abc6b8885ceb4023099b4e0026c5ef28f", "url": "https://api.github.com/repos/rust-lang/rust/commits/79fa657abc6b8885ceb4023099b4e0026c5ef28f", "html_url": "https://github.com/rust-lang/rust/commit/79fa657abc6b8885ceb4023099b4e0026c5ef28f"}], "stats": {"total": 119, "additions": 59, "deletions": 60}, "files": [{"sha": "de2da35f85631a7893360494588a48e3e60c6276", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c4d43715843a5ff5af4657c798b5d5cc85ca523/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c4d43715843a5ff5af4657c798b5d5cc85ca523/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=1c4d43715843a5ff5af4657c798b5d5cc85ca523", "patch": "@@ -408,17 +408,17 @@ pub fn lower_local(lctx: &LoweringContext, l: &Local) -> P<hir::Local> {\n }\n \n pub fn lower_explicit_self_underscore(lctx: &LoweringContext,\n-                                      es: &ExplicitSelf_)\n+                                      es: &SelfKind)\n                                       -> hir::ExplicitSelf_ {\n     match *es {\n-        SelfStatic => hir::SelfStatic,\n-        SelfValue(v) => hir::SelfValue(v.name),\n-        SelfRegion(ref lifetime, m, ident) => {\n+        SelfKind::Static => hir::SelfStatic,\n+        SelfKind::Value(v) => hir::SelfValue(v.name),\n+        SelfKind::Region(ref lifetime, m, ident) => {\n             hir::SelfRegion(lower_opt_lifetime(lctx, lifetime),\n                             lower_mutability(lctx, m),\n                             ident.name)\n         }\n-        SelfExplicit(ref typ, ident) => {\n+        SelfKind::Explicit(ref typ, ident) => {\n             hir::SelfExplicit(lower_ty(lctx, typ), ident.name)\n         }\n     }"}, {"sha": "979c856871259cf7487a879f8cfb9294feaf095e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1c4d43715843a5ff5af4657c798b5d5cc85ca523/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c4d43715843a5ff5af4657c798b5d5cc85ca523/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1c4d43715843a5ff5af4657c798b5d5cc85ca523", "patch": "@@ -10,7 +10,6 @@\n \n // The Rust abstract syntax tree.\n \n-pub use self::ExplicitSelf_::*;\n pub use self::Expr_::*;\n pub use self::FloatTy::*;\n pub use self::ForeignItem_::*;\n@@ -1747,18 +1746,18 @@ impl FunctionRetTy {\n \n /// Represents the kind of 'self' associated with a method\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum ExplicitSelf_ {\n+pub enum SelfKind {\n     /// No self\n-    SelfStatic,\n+    Static,\n     /// `self`\n-    SelfValue(Ident),\n+    Value(Ident),\n     /// `&'lt self`, `&'lt mut self`\n-    SelfRegion(Option<Lifetime>, Mutability, Ident),\n+    Region(Option<Lifetime>, Mutability, Ident),\n     /// `self: TYPE`\n-    SelfExplicit(P<Ty>, Ident),\n+    Explicit(P<Ty>, Ident),\n }\n \n-pub type ExplicitSelf = Spanned<ExplicitSelf_>;\n+pub type ExplicitSelf = Spanned<SelfKind>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Mod {"}, {"sha": "3332941d0add17f881f6d8374f9120169bb4c3d9", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1c4d43715843a5ff5af4657c798b5d5cc85ca523/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c4d43715843a5ff5af4657c798b5d5cc85ca523/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=1c4d43715843a5ff5af4657c798b5d5cc85ca523", "patch": "@@ -184,8 +184,8 @@ pub trait Folder : Sized {\n         noop_fold_explicit_self(es, self)\n     }\n \n-    fn fold_explicit_self_underscore(&mut self, es: ExplicitSelf_) -> ExplicitSelf_ {\n-        noop_fold_explicit_self_underscore(es, self)\n+    fn fold_explicit_self_kind(&mut self, es: SelfKind) -> SelfKind {\n+        noop_fold_explicit_self_kind(es, self)\n     }\n \n     fn fold_lifetime(&mut self, l: Lifetime) -> Lifetime {\n@@ -520,23 +520,23 @@ pub fn noop_fold_attribute<T: Folder>(at: Attribute, fld: &mut T) -> Option<Attr\n     })\n }\n \n-pub fn noop_fold_explicit_self_underscore<T: Folder>(es: ExplicitSelf_, fld: &mut T)\n-                                                     -> ExplicitSelf_ {\n+pub fn noop_fold_explicit_self_kind<T: Folder>(es: SelfKind, fld: &mut T)\n+                                                     -> SelfKind {\n     match es {\n-        SelfStatic | SelfValue(_) => es,\n-        SelfRegion(lifetime, m, ident) => {\n-            SelfRegion(fld.fold_opt_lifetime(lifetime), m, ident)\n+        SelfKind::Static | SelfKind::Value(_) => es,\n+        SelfKind::Region(lifetime, m, ident) => {\n+            SelfKind::Region(fld.fold_opt_lifetime(lifetime), m, ident)\n         }\n-        SelfExplicit(typ, ident) => {\n-            SelfExplicit(fld.fold_ty(typ), ident)\n+        SelfKind::Explicit(typ, ident) => {\n+            SelfKind::Explicit(fld.fold_ty(typ), ident)\n         }\n     }\n }\n \n pub fn noop_fold_explicit_self<T: Folder>(Spanned {span, node}: ExplicitSelf, fld: &mut T)\n                                           -> ExplicitSelf {\n     Spanned {\n-        node: fld.fold_explicit_self_underscore(node),\n+        node: fld.fold_explicit_self_kind(node),\n         span: fld.new_span(span)\n     }\n }"}, {"sha": "98b1cc21ef8df4354c1267cb582ae2840f058b45", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1c4d43715843a5ff5af4657c798b5d5cc85ca523/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c4d43715843a5ff5af4657c798b5d5cc85ca523/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1c4d43715843a5ff5af4657c798b5d5cc85ca523", "patch": "@@ -46,7 +46,7 @@ use ast::{PolyTraitRef, QSelf};\n use ast::{Stmt, StmtDecl};\n use ast::{StmtExpr, StmtSemi, StmtMac, VariantData, StructField};\n use ast::StrStyle;\n-use ast::{SelfExplicit, SelfRegion, SelfStatic, SelfValue};\n+use ast::SelfKind;\n use ast::{Delimited, SequenceRepetition, TokenTree, TraitItem, TraitRef};\n use ast::{Ty, Ty_, TypeBinding, TyMac};\n use ast::{TyFixedLengthVec, TyBareFn, TyTypeof, TyInfer};\n@@ -4411,7 +4411,7 @@ impl<'a> Parser<'a> {\n         F: FnMut(&mut Parser<'a>) -> PResult<'a,  Arg>,\n     {\n         fn maybe_parse_borrowed_explicit_self<'b>(this: &mut Parser<'b>)\n-                                                  -> PResult<'b,  ast::ExplicitSelf_> {\n+                                                  -> PResult<'b, ast::SelfKind> {\n             // The following things are possible to see here:\n             //\n             //     fn(&mut self)\n@@ -4423,26 +4423,26 @@ impl<'a> Parser<'a> {\n \n             if this.look_ahead(1, |t| t.is_keyword(keywords::SelfValue)) {\n                 this.bump();\n-                Ok(SelfRegion(None, MutImmutable, try!(this.expect_self_ident())))\n+                Ok(SelfKind::Region(None, MutImmutable, try!(this.expect_self_ident())))\n             } else if this.look_ahead(1, |t| t.is_mutability()) &&\n                       this.look_ahead(2, |t| t.is_keyword(keywords::SelfValue)) {\n                 this.bump();\n                 let mutability = try!(this.parse_mutability());\n-                Ok(SelfRegion(None, mutability, try!(this.expect_self_ident())))\n+                Ok(SelfKind::Region(None, mutability, try!(this.expect_self_ident())))\n             } else if this.look_ahead(1, |t| t.is_lifetime()) &&\n                       this.look_ahead(2, |t| t.is_keyword(keywords::SelfValue)) {\n                 this.bump();\n                 let lifetime = try!(this.parse_lifetime());\n-                Ok(SelfRegion(Some(lifetime), MutImmutable, try!(this.expect_self_ident())))\n+                Ok(SelfKind::Region(Some(lifetime), MutImmutable, try!(this.expect_self_ident())))\n             } else if this.look_ahead(1, |t| t.is_lifetime()) &&\n                       this.look_ahead(2, |t| t.is_mutability()) &&\n                       this.look_ahead(3, |t| t.is_keyword(keywords::SelfValue)) {\n                 this.bump();\n                 let lifetime = try!(this.parse_lifetime());\n                 let mutability = try!(this.parse_mutability());\n-                Ok(SelfRegion(Some(lifetime), mutability, try!(this.expect_self_ident())))\n+                Ok(SelfKind::Region(Some(lifetime), mutability, try!(this.expect_self_ident())))\n             } else {\n-                Ok(SelfStatic)\n+                Ok(SelfKind::Static)\n             }\n         }\n \n@@ -4477,7 +4477,7 @@ impl<'a> Parser<'a> {\n                     self.bump();\n                 }\n                 // error case, making bogus self ident:\n-                SelfValue(special_idents::self_)\n+                SelfKind::Value(special_idents::self_)\n             }\n             token::Ident(..) => {\n                 if self.is_self_ident() {\n@@ -4486,9 +4486,9 @@ impl<'a> Parser<'a> {\n                     // Determine whether this is the fully explicit form, `self:\n                     // TYPE`.\n                     if self.eat(&token::Colon) {\n-                        SelfExplicit(try!(self.parse_ty_sum()), self_ident)\n+                        SelfKind::Explicit(try!(self.parse_ty_sum()), self_ident)\n                     } else {\n-                        SelfValue(self_ident)\n+                        SelfKind::Value(self_ident)\n                     }\n                 } else if self.token.is_mutability() &&\n                         self.look_ahead(1, |t| t.is_keyword(keywords::SelfValue)) {\n@@ -4498,15 +4498,15 @@ impl<'a> Parser<'a> {\n                     // Determine whether this is the fully explicit form,\n                     // `self: TYPE`.\n                     if self.eat(&token::Colon) {\n-                        SelfExplicit(try!(self.parse_ty_sum()), self_ident)\n+                        SelfKind::Explicit(try!(self.parse_ty_sum()), self_ident)\n                     } else {\n-                        SelfValue(self_ident)\n+                        SelfKind::Value(self_ident)\n                     }\n                 } else {\n-                    SelfStatic\n+                    SelfKind::Static\n                 }\n             }\n-            _ => SelfStatic,\n+            _ => SelfKind::Static,\n         };\n \n         let explicit_self_sp = mk_sp(self_ident_lo, self_ident_hi);\n@@ -4542,14 +4542,14 @@ impl<'a> Parser<'a> {\n         }\n \n         let fn_inputs = match explicit_self {\n-            SelfStatic =>  {\n+            SelfKind::Static =>  {\n                 let sep = seq_sep_trailing_allowed(token::Comma);\n                 try!(self.parse_seq_to_before_end(&token::CloseDelim(token::Paren),\n                                                   sep, parse_arg_fn))\n             }\n-            SelfValue(id) => parse_remaining_arguments!(id),\n-            SelfRegion(_,_,id) => parse_remaining_arguments!(id),\n-            SelfExplicit(_,id) => parse_remaining_arguments!(id),\n+            SelfKind::Value(id) => parse_remaining_arguments!(id),\n+            SelfKind::Region(_,_,id) => parse_remaining_arguments!(id),\n+            SelfKind::Explicit(_,id) => parse_remaining_arguments!(id),\n         };\n \n "}, {"sha": "68e9266a2b0c93ad3be9bc4fa987a98a1a09765b", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1c4d43715843a5ff5af4657c798b5d5cc85ca523/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c4d43715843a5ff5af4657c798b5d5cc85ca523/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=1c4d43715843a5ff5af4657c798b5d5cc85ca523", "patch": "@@ -382,7 +382,7 @@ pub fn fun_to_string(decl: &ast::FnDecl,\n                      unsafety: ast::Unsafety,\n                      constness: ast::Constness,\n                      name: ast::Ident,\n-                     opt_explicit_self: Option<&ast::ExplicitSelf_>,\n+                     opt_explicit_self: Option<&ast::SelfKind>,\n                      generics: &ast::Generics)\n                      -> String {\n     to_string(|s| {\n@@ -416,7 +416,7 @@ pub fn lit_to_string(l: &ast::Lit) -> String {\n     to_string(|s| s.print_literal(l))\n }\n \n-pub fn explicit_self_to_string(explicit_self: &ast::ExplicitSelf_) -> String {\n+pub fn explicit_self_to_string(explicit_self: &ast::SelfKind) -> String {\n     to_string(|s| s.print_explicit_self(explicit_self, ast::MutImmutable).map(|_| {}))\n }\n \n@@ -2625,21 +2625,21 @@ impl<'a> State<'a> {\n \n     // Returns whether it printed anything\n     fn print_explicit_self(&mut self,\n-                           explicit_self: &ast::ExplicitSelf_,\n+                           explicit_self: &ast::SelfKind,\n                            mutbl: ast::Mutability) -> io::Result<bool> {\n         try!(self.print_mutability(mutbl));\n         match *explicit_self {\n-            ast::SelfStatic => { return Ok(false); }\n-            ast::SelfValue(_) => {\n+            ast::SelfKind::Static => { return Ok(false); }\n+            ast::SelfKind::Value(_) => {\n                 try!(word(&mut self.s, \"self\"));\n             }\n-            ast::SelfRegion(ref lt, m, _) => {\n+            ast::SelfKind::Region(ref lt, m, _) => {\n                 try!(word(&mut self.s, \"&\"));\n                 try!(self.print_opt_lifetime(lt));\n                 try!(self.print_mutability(m));\n                 try!(word(&mut self.s, \"self\"));\n             }\n-            ast::SelfExplicit(ref typ, _) => {\n+            ast::SelfKind::Explicit(ref typ, _) => {\n                 try!(word(&mut self.s, \"self\"));\n                 try!(self.word_space(\":\"));\n                 try!(self.print_type(&**typ));\n@@ -2655,7 +2655,7 @@ impl<'a> State<'a> {\n                     abi: abi::Abi,\n                     name: Option<ast::Ident>,\n                     generics: &ast::Generics,\n-                    opt_explicit_self: Option<&ast::ExplicitSelf_>,\n+                    opt_explicit_self: Option<&ast::SelfKind>,\n                     vis: ast::Visibility) -> io::Result<()> {\n         try!(self.print_fn_header_info(unsafety, constness, abi, vis));\n \n@@ -2669,15 +2669,15 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_fn_args(&mut self, decl: &ast::FnDecl,\n-                         opt_explicit_self: Option<&ast::ExplicitSelf_>,\n+                         opt_explicit_self: Option<&ast::SelfKind>,\n                          is_closure: bool) -> io::Result<()> {\n         // It is unfortunate to duplicate the commasep logic, but we want the\n         // self type and the args all in the same box.\n         try!(self.rbox(0, Inconsistent));\n         let mut first = true;\n         if let Some(explicit_self) = opt_explicit_self {\n             let m = match *explicit_self {\n-                ast::SelfStatic => ast::MutImmutable,\n+                ast::SelfKind::Static => ast::MutImmutable,\n                 _ => match decl.inputs[0].pat.node {\n                     ast::PatIdent(ast::BindingMode::ByValue(m), _, _) => m,\n                     _ => ast::MutImmutable\n@@ -2702,7 +2702,7 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_fn_args_and_ret(&mut self, decl: &ast::FnDecl,\n-                                 opt_explicit_self: Option<&ast::ExplicitSelf_>)\n+                                 opt_explicit_self: Option<&ast::SelfKind>)\n         -> io::Result<()> {\n         try!(self.popen());\n         try!(self.print_fn_args(decl, opt_explicit_self, false));\n@@ -3016,7 +3016,7 @@ impl<'a> State<'a> {\n                        decl: &ast::FnDecl,\n                        name: Option<ast::Ident>,\n                        generics: &ast::Generics,\n-                       opt_explicit_self: Option<&ast::ExplicitSelf_>)\n+                       opt_explicit_self: Option<&ast::SelfKind>)\n                        -> io::Result<()> {\n         try!(self.ibox(INDENT_UNIT));\n         if !generics.lifetimes.is_empty() || !generics.ty_params.is_empty() {"}, {"sha": "e38997931aaa5b71cb1824311591aa537ce1c256", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c4d43715843a5ff5af4657c798b5d5cc85ca523/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c4d43715843a5ff5af4657c798b5d5cc85ca523/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=1c4d43715843a5ff5af4657c798b5d5cc85ca523", "patch": "@@ -196,15 +196,15 @@ pub fn walk_lifetime_def<'v, V: Visitor<'v>>(visitor: &mut V,\n pub fn walk_explicit_self<'v, V: Visitor<'v>>(visitor: &mut V,\n                                               explicit_self: &'v ExplicitSelf) {\n     match explicit_self.node {\n-        SelfStatic => {},\n-        SelfValue(ident) => {\n+        SelfKind::Static => {},\n+        SelfKind::Value(ident) => {\n             visitor.visit_ident(explicit_self.span, ident)\n         }\n-        SelfRegion(ref opt_lifetime, _, ident) => {\n+        SelfKind::Region(ref opt_lifetime, _, ident) => {\n             visitor.visit_ident(explicit_self.span, ident);\n             walk_list!(visitor, visit_lifetime, opt_lifetime);\n         }\n-        SelfExplicit(ref typ, ident) => {\n+        SelfKind::Explicit(ref typ, ident) => {\n             visitor.visit_ident(explicit_self.span, ident);\n             visitor.visit_ty(typ)\n         }"}, {"sha": "3903f6a8085ec518fad2a94d87bda0208112f4e3", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c4d43715843a5ff5af4657c798b5d5cc85ca523/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c4d43715843a5ff5af4657c798b5d5cc85ca523/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=1c4d43715843a5ff5af4657c798b5d5cc85ca523", "patch": "@@ -821,7 +821,7 @@ impl<'a> MethodDef<'a> {\n \n                 explicit_self\n             }\n-            None => codemap::respan(trait_.span, ast::SelfStatic),\n+            None => codemap::respan(trait_.span, ast::SelfKind::Static),\n         };\n \n         for (i, ty) in self.args.iter().enumerate() {\n@@ -862,7 +862,7 @@ impl<'a> MethodDef<'a> {\n         let fn_generics = self.generics.to_generics(cx, trait_.span, type_ident, generics);\n \n         let self_arg = match explicit_self.node {\n-            ast::SelfStatic => None,\n+            ast::SelfKind::Static => None,\n             // creating fresh self id\n             _ => Some(ast::Arg::new_self(trait_.span, ast::MutImmutable, special_idents::self_))\n         };"}, {"sha": "543beeb5da0c57de818e805e164d93ebe634b20c", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c4d43715843a5ff5af4657c798b5d5cc85ca523/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c4d43715843a5ff5af4657c798b5d5cc85ca523/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=1c4d43715843a5ff5af4657c798b5d5cc85ca523", "patch": "@@ -264,15 +264,15 @@ pub fn get_explicit_self(cx: &ExtCtxt, span: Span, self_ptr: &Option<PtrTy>)\n     let self_path = cx.expr_self(span);\n     match *self_ptr {\n         None => {\n-            (self_path, respan(span, ast::SelfValue(special_idents::self_)))\n+            (self_path, respan(span, ast::SelfKind::Value(special_idents::self_)))\n         }\n         Some(ref ptr) => {\n             let self_ty = respan(\n                 span,\n                 match *ptr {\n                     Borrowed(ref lt, mutbl) => {\n                         let lt = lt.map(|s| cx.lifetime(span, cx.ident_of(s).name));\n-                        ast::SelfRegion(lt, mutbl, special_idents::self_)\n+                        ast::SelfKind::Region(lt, mutbl, special_idents::self_)\n                     }\n                     Raw(_) => cx.span_bug(span, \"attempted to use *self in deriving definition\")\n                 });"}]}