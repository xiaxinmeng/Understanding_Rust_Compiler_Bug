{"sha": "6e6c42c61c5535ffd748b0b1c71b14f2e962da3e", "node_id": "C_kwDOAAsO6NoAKDZlNmM0MmM2MWM1NTM1ZmZkNzQ4YjBiMWM3MWIxNGYyZTk2MmRhM2U", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-27T15:03:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-27T15:03:08Z"}, "message": "Rollup merge of #104931 - Swatinem:async-pretty, r=eholk\n\nPretty-print generators with their `generator_kind`\n\nAfter removing `GenFuture`, I special-cased async generators to pretty-print as `impl Future<Output = X>` mainly to avoid too much diagnostics changes originally.\n\nThis now reverses that change so that async fn/blocks are pretty-printed as `[$async-type@$source-position]` in various diagnostics, and updates the tests that this touches.", "tree": {"sha": "5375097616878957e63518741c742518a91beadc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5375097616878957e63518741c742518a91beadc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjg3wsCRBK7hj4Ov3rIwAAMdsIAJN18DnHQ5kxpWDlhX0Uw9eR\nQvYCy3l5JO7jQXNF8HEcqmlkjzBqEiHx3+ffNxVgUYmGfAEOvAPHhvzjkV72RWvk\nBjbBB8w6nMY2LRma+Z9WynE0aPLl5st4BXGLbV0pmjhlYmgh+rYyj3YkH30O57zo\nSgRQVbKV3h+tlqeFu01Od/keH/e/nmKUrWPRI39LbNWTSemoTaDW0/56Dclk7F9M\nCW9GX9GyEox+6IMuZ4B2nGcgvxgnl1U/Lk4sponHZEFy6t3FDYklqIaV+YjRm2HZ\nQUTYozr+9FpPBXvvM6eKbe+Y17do/mHDIfHY3KdR14vtLAvWuPQaiIKQ+LJ+wBU=\n=grFz\n-----END PGP SIGNATURE-----\n", "payload": "tree 5375097616878957e63518741c742518a91beadc\nparent 9ebffb7c3c89471633494f432822eb1175be2b23\nparent c96d888bdfb23122c7823445f471b3d284dd07e6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1669561388 +0100\ncommitter GitHub <noreply@github.com> 1669561388 +0100\n\nRollup merge of #104931 - Swatinem:async-pretty, r=eholk\n\nPretty-print generators with their `generator_kind`\n\nAfter removing `GenFuture`, I special-cased async generators to pretty-print as `impl Future<Output = X>` mainly to avoid too much diagnostics changes originally.\n\nThis now reverses that change so that async fn/blocks are pretty-printed as `[$async-type@$source-position]` in various diagnostics, and updates the tests that this touches.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e", "html_url": "https://github.com/rust-lang/rust/commit/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ebffb7c3c89471633494f432822eb1175be2b23", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ebffb7c3c89471633494f432822eb1175be2b23", "html_url": "https://github.com/rust-lang/rust/commit/9ebffb7c3c89471633494f432822eb1175be2b23"}, {"sha": "c96d888bdfb23122c7823445f471b3d284dd07e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c96d888bdfb23122c7823445f471b3d284dd07e6", "html_url": "https://github.com/rust-lang/rust/commit/c96d888bdfb23122c7823445f471b3d284dd07e6"}], "stats": {"total": 175, "additions": 85, "deletions": 90}, "files": [{"sha": "f4e1f84bfb3714d41447fd31fd95a4ec25860e33", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=6e6c42c61c5535ffd748b0b1c71b14f2e962da3e", "patch": "@@ -376,7 +376,7 @@ impl<'tcx> NonConstOp<'tcx> for Generator {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        let msg = format!(\"{}s are not allowed in {}s\", self.0, ccx.const_kind());\n+        let msg = format!(\"{}s are not allowed in {}s\", self.0.descr(), ccx.const_kind());\n         if let hir::GeneratorKind::Async(hir::AsyncGeneratorKind::Block) = self.0 {\n             ccx.tcx.sess.create_feature_err(\n                 UnallowedOpInConstContext { span, msg },"}, {"sha": "3ed599fd2cc6f2b59655558ea05e7a034de3a01a", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=6e6c42c61c5535ffd748b0b1c71b14f2e962da3e", "patch": "@@ -1514,9 +1514,9 @@ pub enum AsyncGeneratorKind {\n impl fmt::Display for AsyncGeneratorKind {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(match self {\n-            AsyncGeneratorKind::Block => \"`async` block\",\n-            AsyncGeneratorKind::Closure => \"`async` closure body\",\n-            AsyncGeneratorKind::Fn => \"`async fn` body\",\n+            AsyncGeneratorKind::Block => \"async block\",\n+            AsyncGeneratorKind::Closure => \"async closure body\",\n+            AsyncGeneratorKind::Fn => \"async fn body\",\n         })\n     }\n }"}, {"sha": "4e044d39d50a1e81d13b166d4eb91eb883f49a7f", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=6e6c42c61c5535ffd748b0b1c71b14f2e962da3e", "patch": "@@ -118,7 +118,8 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n                 } else {\n                     let note = format!(\n                         \"the type is part of the {} because of this {}\",\n-                        self.kind, yield_data.source\n+                        self.kind.descr(),\n+                        yield_data.source\n                     );\n \n                     self.fcx"}, {"sha": "bd6d573c162273edda3b1393b1e622545b8ef36d", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=6e6c42c61c5535ffd748b0b1c71b14f2e962da3e", "patch": "@@ -681,25 +681,20 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             ty::Str => p!(\"str\"),\n             ty::Generator(did, substs, movability) => {\n-                // FIXME(swatinem): async constructs used to be pretty printed\n-                // as `impl Future` previously due to the `from_generator` wrapping.\n-                // lets special case this here for now to avoid churn in diagnostics.\n-                let generator_kind = self.tcx().generator_kind(did);\n-                if matches!(generator_kind, Some(hir::GeneratorKind::Async(..))) {\n-                    let return_ty = substs.as_generator().return_ty();\n-                    p!(write(\"impl Future<Output = {}>\", return_ty));\n-\n-                    return Ok(self);\n-                }\n-\n                 p!(write(\"[\"));\n-                match movability {\n-                    hir::Movability::Movable => {}\n-                    hir::Movability::Static => p!(\"static \"),\n+                let generator_kind = self.tcx().generator_kind(did).unwrap();\n+                let should_print_movability =\n+                    self.should_print_verbose() || generator_kind == hir::GeneratorKind::Gen;\n+\n+                if should_print_movability {\n+                    match movability {\n+                        hir::Movability::Movable => {}\n+                        hir::Movability::Static => p!(\"static \"),\n+                    }\n                 }\n \n                 if !self.should_print_verbose() {\n-                    p!(\"generator\");\n+                    p!(write(\"{}\", generator_kind));\n                     // FIXME(eddyb) should use `def_span`.\n                     if let Some(did) = did.as_local() {\n                         let span = self.tcx().def_span(did);"}, {"sha": "b7728b054e4e043c40de2f83f32571a1a2eccd05", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=6e6c42c61c5535ffd748b0b1c71b14f2e962da3e", "patch": "@@ -2673,7 +2673,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 let sp = self.tcx.def_span(def_id);\n \n                                 // Special-case this to say \"async block\" instead of `[static generator]`.\n-                                let kind = tcx.generator_kind(def_id).unwrap();\n+                                let kind = tcx.generator_kind(def_id).unwrap().descr();\n                                 err.span_note(\n                                     sp,\n                                     &format!(\"required because it's used within this {}\", kind),"}, {"sha": "bc9d127931d59347e26acafda5fe4fe0eefa3ec4", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs?ref=6e6c42c61c5535ffd748b0b1c71b14f2e962da3e", "patch": "@@ -15,7 +15,7 @@ fn return_targets_async_block_not_fn() -> u8 {\n         return 0u8;\n     };\n     let _: &dyn Future<Output = ()> = &block;\n-    //~^ ERROR expected `impl Future<Output = u8>` to be a future that resolves to `()`, but it resolves to `u8`\n+    //~^ ERROR to be a future that resolves to `()`, but it resolves to `u8`\n }\n \n async fn return_targets_async_block_not_async_fn() -> u8 {\n@@ -24,7 +24,7 @@ async fn return_targets_async_block_not_async_fn() -> u8 {\n         return 0u8;\n     };\n     let _: &dyn Future<Output = ()> = &block;\n-    //~^ ERROR expected `impl Future<Output = u8>` to be a future that resolves to `()`, but it resolves to `u8`\n+    //~^ ERROR to be a future that resolves to `()`, but it resolves to `u8`\n }\n \n fn no_break_in_async_block() {"}, {"sha": "c4487eb840abcab9eb8a698ba66970ad12d76848", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=6e6c42c61c5535ffd748b0b1c71b14f2e962da3e", "patch": "@@ -29,13 +29,13 @@ LL | |\n LL | | }\n    | |_^ expected `u8`, found `()`\n \n-error[E0271]: expected `impl Future<Output = u8>` to be a future that resolves to `()`, but it resolves to `u8`\n+error[E0271]: expected `[async block@$DIR/async-block-control-flow-static-semantics.rs:23:17: 25:6]` to be a future that resolves to `()`, but it resolves to `u8`\n   --> $DIR/async-block-control-flow-static-semantics.rs:26:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n    |                                       ^^^^^^ expected `()`, found `u8`\n    |\n-   = note: required for the cast from `impl Future<Output = u8>` to the object type `dyn Future<Output = ()>`\n+   = note: required for the cast from `[async block@$DIR/async-block-control-flow-static-semantics.rs:23:17: 25:6]` to the object type `dyn Future<Output = ()>`\n \n error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:12:43\n@@ -45,13 +45,13 @@ LL | fn return_targets_async_block_not_fn() -> u8 {\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n \n-error[E0271]: expected `impl Future<Output = u8>` to be a future that resolves to `()`, but it resolves to `u8`\n+error[E0271]: expected `[async block@$DIR/async-block-control-flow-static-semantics.rs:14:17: 16:6]` to be a future that resolves to `()`, but it resolves to `u8`\n   --> $DIR/async-block-control-flow-static-semantics.rs:17:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n    |                                       ^^^^^^ expected `()`, found `u8`\n    |\n-   = note: required for the cast from `impl Future<Output = u8>` to the object type `dyn Future<Output = ()>`\n+   = note: required for the cast from `[async block@$DIR/async-block-control-flow-static-semantics.rs:14:17: 16:6]` to the object type `dyn Future<Output = ()>`\n \n error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:49:44"}, {"sha": "1686153acf9a63aa8a9cddb14e64f0a990a5cade", "filename": "src/test/ui/async-await/generator-desc.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr?ref=6e6c42c61c5535ffd748b0b1c71b14f2e962da3e", "patch": "@@ -8,8 +8,8 @@ LL |     fun(async {}, async {});\n    |         |         arguments to this function are incorrect\n    |         the expected `async` block\n    |\n-   = note: expected `async` block `impl Future<Output = ()>` (`async` block)\n-              found `async` block `impl Future<Output = ()>` (`async` block)\n+   = note: expected `async` block `[async block@$DIR/generator-desc.rs:10:9: 10:17]`\n+              found `async` block `[async block@$DIR/generator-desc.rs:10:19: 10:27]`\n note: function defined here\n   --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n    |\n@@ -53,8 +53,8 @@ LL |     fun((async || {})(), (async || {})());\n    |     |             the expected `async` closure body\n    |     arguments to this function are incorrect\n    |\n-   = note: expected `async` closure body `impl Future<Output = ()>` (`async` closure body)\n-              found `async` closure body `impl Future<Output = ()>` (`async` closure body)\n+   = note: expected `async` closure body `[async closure body@$DIR/generator-desc.rs:14:19: 14:21]`\n+              found `async` closure body `[async closure body@$DIR/generator-desc.rs:14:36: 14:38]`\n note: function defined here\n   --> $DIR/generator-desc.rs:8:4\n    |"}, {"sha": "fcba4410ba9a53fec35b35fb2a35e1522c2d4081", "filename": "src/test/ui/async-await/issue-67252-unnamed-future.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr?ref=6e6c42c61c5535ffd748b0b1c71b14f2e962da3e", "patch": "@@ -8,7 +8,7 @@ LL | |         AFuture.await;\n LL | |     });\n    | |_____^ future created by async block is not `Send`\n    |\n-   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `*mut ()`\n+   = help: within `[async block@$DIR/issue-67252-unnamed-future.rs:18:11: 21:6]`, the trait `Send` is not implemented for `*mut ()`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-67252-unnamed-future.rs:20:16\n    |"}, {"sha": "8c2c06da25cc4bbfff24cd481fb5550b28cf01a9", "filename": "src/test/ui/async-await/issue-86507.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.stderr?ref=6e6c42c61c5535ffd748b0b1c71b14f2e962da3e", "patch": "@@ -13,7 +13,7 @@ note: captured value is not `Send` because `&` references cannot be sent unless\n    |\n LL |                     let x = x;\n    |                             ^ has type `&T` which is not `Send`, because `T` is not `Sync`\n-   = note: required for the cast from `impl Future<Output = ()>` to the object type `dyn Future<Output = ()> + Send`\n+   = note: required for the cast from `[async block@$DIR/issue-86507.rs:18:17: 20:18]` to the object type `dyn Future<Output = ()> + Send`\n help: consider further restricting this bound\n    |\n LL |     fn bar<'me, 'async_trait, T: Send + std::marker::Sync>(x: &'me T)"}, {"sha": "ab196dca20cc460bbf61e21bcbdd6ad43eb384cb", "filename": "src/test/ui/async-await/issues/issue-65436-raw-ptr-not-send.no_drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.no_drop_tracking.stderr?ref=6e6c42c61c5535ffd748b0b1c71b14f2e962da3e", "patch": "@@ -8,7 +8,7 @@ LL | |         bar(Foo(std::ptr::null())).await;\n LL | |     })\n    | |_____^ future created by async block is not `Send`\n    |\n-   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `*const u8`\n+   = help: within `[async block@$DIR/issue-65436-raw-ptr-not-send.rs:16:17: 19:6]`, the trait `Send` is not implemented for `*const u8`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-65436-raw-ptr-not-send.rs:18:35\n    |"}, {"sha": "4804df133401b89ff13e53d2be426491469f223e", "filename": "src/test/ui/chalkify/bugs/async.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr?ref=6e6c42c61c5535ffd748b0b1c71b14f2e962da3e", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: `impl Future<Output = u32>` is not a future\n+error[E0277]: `[async fn body@$DIR/async.rs:7:29: 9:2]` is not a future\n   --> $DIR/async.rs:7:29\n    |\n LL |   async fn foo(x: u32) -> u32 {\n@@ -7,18 +7,18 @@ LL | |     x\n LL | | }\n    | | ^\n    | | |\n-   | |_`impl Future<Output = u32>` is not a future\n+   | |_`[async fn body@$DIR/async.rs:7:29: 9:2]` is not a future\n    |   required by a bound introduced by this call\n    |\n-   = help: the trait `Future` is not implemented for `impl Future<Output = u32>`\n-   = note: impl Future<Output = u32> must be a future or must implement `IntoFuture` to be awaited\n+   = help: the trait `Future` is not implemented for `[async fn body@$DIR/async.rs:7:29: 9:2]`\n+   = note: [async fn body@$DIR/async.rs:7:29: 9:2] must be a future or must implement `IntoFuture` to be awaited\n note: required by a bound in `identity_future`\n   --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n    |\n LL | pub const fn identity_future<O, Fut: Future<Output = O>>(f: Fut) -> Fut {\n    |                                      ^^^^^^^^^^^^^^^^^^ required by this bound in `identity_future`\n \n-error[E0277]: the size for values of type `<impl Future<Output = u32> as Future>::Output` cannot be known at compilation time\n+error[E0277]: the size for values of type `<[async fn body@$DIR/async.rs:7:29: 9:2] as Future>::Output` cannot be known at compilation time\n   --> $DIR/async.rs:7:29\n    |\n LL |   async fn foo(x: u32) -> u32 {\n@@ -27,23 +27,23 @@ LL | |     x\n LL | | }\n    | |_^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `Sized` is not implemented for `<impl Future<Output = u32> as Future>::Output`\n+   = help: the trait `Sized` is not implemented for `<[async fn body@$DIR/async.rs:7:29: 9:2] as Future>::Output`\n note: required by a bound in `identity_future`\n   --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n    |\n LL | pub const fn identity_future<O, Fut: Future<Output = O>>(f: Fut) -> Fut {\n    |                              ^ required by this bound in `identity_future`\n \n-error[E0277]: `impl Future<Output = u32>` is not a future\n+error[E0277]: `[async fn body@$DIR/async.rs:7:29: 9:2]` is not a future\n   --> $DIR/async.rs:7:25\n    |\n LL | async fn foo(x: u32) -> u32 {\n-   |                         ^^^ `impl Future<Output = u32>` is not a future\n+   |                         ^^^ `[async fn body@$DIR/async.rs:7:29: 9:2]` is not a future\n    |\n-   = help: the trait `Future` is not implemented for `impl Future<Output = u32>`\n-   = note: impl Future<Output = u32> must be a future or must implement `IntoFuture` to be awaited\n+   = help: the trait `Future` is not implemented for `[async fn body@$DIR/async.rs:7:29: 9:2]`\n+   = note: [async fn body@$DIR/async.rs:7:29: 9:2] must be a future or must implement `IntoFuture` to be awaited\n \n-error[E0280]: the requirement `<impl Future<Output = u32> as Future>::Output == u32` is not satisfied\n+error[E0280]: the requirement `<[async fn body@$DIR/async.rs:7:29: 9:2] as Future>::Output == u32` is not satisfied\n   --> $DIR/async.rs:7:25\n    |\n LL | async fn foo(x: u32) -> u32 {"}, {"sha": "9e9b59d3633f236027fd94edcb0c850b291ac1e7", "filename": "src/test/ui/generator/clone-impl-async.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl-async.rs?ref=6e6c42c61c5535ffd748b0b1c71b14f2e962da3e", "patch": "@@ -15,42 +15,42 @@ fn main() {\n         drop(non_clone);\n     };\n     check_copy(&inner_non_clone);\n-    //~^ ERROR the trait bound `impl Future<Output = ()>: Copy` is not satisfied\n+    //~^ ERROR : Copy` is not satisfied\n     check_clone(&inner_non_clone);\n-    //~^ ERROR the trait bound `impl Future<Output = ()>: Clone` is not satisfied\n+    //~^ ERROR : Clone` is not satisfied\n \n     let non_clone = NonClone;\n     let outer_non_clone = async move {\n         drop(non_clone);\n     };\n     check_copy(&outer_non_clone);\n-    //~^ ERROR the trait bound `impl Future<Output = ()>: Copy` is not satisfied\n+    //~^ ERROR : Copy` is not satisfied\n     check_clone(&outer_non_clone);\n-    //~^ ERROR the trait bound `impl Future<Output = ()>: Clone` is not satisfied\n+    //~^ ERROR : Clone` is not satisfied\n \n     let maybe_copy_clone = async move {};\n     check_copy(&maybe_copy_clone);\n-    //~^ ERROR the trait bound `impl Future<Output = ()>: Copy` is not satisfied\n+    //~^ ERROR : Copy` is not satisfied\n     check_clone(&maybe_copy_clone);\n-    //~^ ERROR the trait bound `impl Future<Output = ()>: Clone` is not satisfied\n+    //~^ ERROR : Clone` is not satisfied\n \n     let inner_non_clone_fn = the_inner_non_clone_fn();\n     check_copy(&inner_non_clone_fn);\n-    //~^ ERROR the trait bound `impl Future<Output = ()>: Copy` is not satisfied\n+    //~^ ERROR : Copy` is not satisfied\n     check_clone(&inner_non_clone_fn);\n-    //~^ ERROR the trait bound `impl Future<Output = ()>: Clone` is not satisfied\n+    //~^ ERROR : Clone` is not satisfied\n \n     let outer_non_clone_fn = the_outer_non_clone_fn(NonClone);\n     check_copy(&outer_non_clone_fn);\n-    //~^ ERROR the trait bound `impl Future<Output = ()>: Copy` is not satisfied\n+    //~^ ERROR : Copy` is not satisfied\n     check_clone(&outer_non_clone_fn);\n-    //~^ ERROR the trait bound `impl Future<Output = ()>: Clone` is not satisfied\n+    //~^ ERROR : Clone` is not satisfied\n \n     let maybe_copy_clone_fn = the_maybe_copy_clone_fn();\n     check_copy(&maybe_copy_clone_fn);\n-    //~^ ERROR the trait bound `impl Future<Output = ()>: Copy` is not satisfied\n+    //~^ ERROR : Copy` is not satisfied\n     check_clone(&maybe_copy_clone_fn);\n-    //~^ ERROR the trait bound `impl Future<Output = ()>: Clone` is not satisfied\n+    //~^ ERROR : Clone` is not satisfied\n }\n \n async fn the_inner_non_clone_fn() {\n@@ -64,8 +64,7 @@ async fn the_outer_non_clone_fn(non_clone: NonClone) {\n     drop(non_clone);\n }\n \n-async fn the_maybe_copy_clone_fn() {\n-}\n+async fn the_maybe_copy_clone_fn() {}\n \n fn check_copy<T: Copy>(_x: &T) {}\n fn check_clone<T: Clone>(_x: &T) {}"}, {"sha": "9854728876f64ebec1f6da752c267dd1d437a606", "filename": "src/test/ui/generator/clone-impl-async.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl-async.stderr?ref=6e6c42c61c5535ffd748b0b1c71b14f2e962da3e", "patch": "@@ -1,83 +1,83 @@\n-error[E0277]: the trait bound `impl Future<Output = ()>: Copy` is not satisfied\n+error[E0277]: the trait bound `[async block@$DIR/clone-impl-async.rs:12:27: 16:6]: Copy` is not satisfied\n   --> $DIR/clone-impl-async.rs:17:16\n    |\n LL |     check_copy(&inner_non_clone);\n-   |     ---------- ^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `impl Future<Output = ()>`\n+   |     ---------- ^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `[async block@$DIR/clone-impl-async.rs:12:27: 16:6]`\n    |     |\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `check_copy`\n-  --> $DIR/clone-impl-async.rs:70:18\n+  --> $DIR/clone-impl-async.rs:69:18\n    |\n LL | fn check_copy<T: Copy>(_x: &T) {}\n    |                  ^^^^ required by this bound in `check_copy`\n \n-error[E0277]: the trait bound `impl Future<Output = ()>: Clone` is not satisfied\n+error[E0277]: the trait bound `[async block@$DIR/clone-impl-async.rs:12:27: 16:6]: Clone` is not satisfied\n   --> $DIR/clone-impl-async.rs:19:17\n    |\n LL |     check_clone(&inner_non_clone);\n-   |     ----------- ^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `impl Future<Output = ()>`\n+   |     ----------- ^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `[async block@$DIR/clone-impl-async.rs:12:27: 16:6]`\n    |     |\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `check_clone`\n-  --> $DIR/clone-impl-async.rs:71:19\n+  --> $DIR/clone-impl-async.rs:70:19\n    |\n LL | fn check_clone<T: Clone>(_x: &T) {}\n    |                   ^^^^^ required by this bound in `check_clone`\n \n-error[E0277]: the trait bound `impl Future<Output = ()>: Copy` is not satisfied\n+error[E0277]: the trait bound `[async block@$DIR/clone-impl-async.rs:23:27: 25:6]: Copy` is not satisfied\n   --> $DIR/clone-impl-async.rs:26:16\n    |\n LL |     check_copy(&outer_non_clone);\n-   |     ---------- ^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `impl Future<Output = ()>`\n+   |     ---------- ^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `[async block@$DIR/clone-impl-async.rs:23:27: 25:6]`\n    |     |\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `check_copy`\n-  --> $DIR/clone-impl-async.rs:70:18\n+  --> $DIR/clone-impl-async.rs:69:18\n    |\n LL | fn check_copy<T: Copy>(_x: &T) {}\n    |                  ^^^^ required by this bound in `check_copy`\n \n-error[E0277]: the trait bound `impl Future<Output = ()>: Clone` is not satisfied\n+error[E0277]: the trait bound `[async block@$DIR/clone-impl-async.rs:23:27: 25:6]: Clone` is not satisfied\n   --> $DIR/clone-impl-async.rs:28:17\n    |\n LL |     check_clone(&outer_non_clone);\n-   |     ----------- ^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `impl Future<Output = ()>`\n+   |     ----------- ^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `[async block@$DIR/clone-impl-async.rs:23:27: 25:6]`\n    |     |\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `check_clone`\n-  --> $DIR/clone-impl-async.rs:71:19\n+  --> $DIR/clone-impl-async.rs:70:19\n    |\n LL | fn check_clone<T: Clone>(_x: &T) {}\n    |                   ^^^^^ required by this bound in `check_clone`\n \n-error[E0277]: the trait bound `impl Future<Output = ()>: Copy` is not satisfied\n+error[E0277]: the trait bound `[async block@$DIR/clone-impl-async.rs:31:28: 31:41]: Copy` is not satisfied\n   --> $DIR/clone-impl-async.rs:32:16\n    |\n LL |     check_copy(&maybe_copy_clone);\n-   |     ---------- ^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `impl Future<Output = ()>`\n+   |     ---------- ^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `[async block@$DIR/clone-impl-async.rs:31:28: 31:41]`\n    |     |\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `check_copy`\n-  --> $DIR/clone-impl-async.rs:70:18\n+  --> $DIR/clone-impl-async.rs:69:18\n    |\n LL | fn check_copy<T: Copy>(_x: &T) {}\n    |                  ^^^^ required by this bound in `check_copy`\n \n-error[E0277]: the trait bound `impl Future<Output = ()>: Clone` is not satisfied\n+error[E0277]: the trait bound `[async block@$DIR/clone-impl-async.rs:31:28: 31:41]: Clone` is not satisfied\n   --> $DIR/clone-impl-async.rs:34:17\n    |\n LL |     check_clone(&maybe_copy_clone);\n-   |     ----------- ^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `impl Future<Output = ()>`\n+   |     ----------- ^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `[async block@$DIR/clone-impl-async.rs:31:28: 31:41]`\n    |     |\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `check_clone`\n-  --> $DIR/clone-impl-async.rs:71:19\n+  --> $DIR/clone-impl-async.rs:70:19\n    |\n LL | fn check_clone<T: Clone>(_x: &T) {}\n    |                   ^^^^^ required by this bound in `check_clone`\n@@ -91,7 +91,7 @@ LL |     check_copy(&inner_non_clone_fn);\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `check_copy`\n-  --> $DIR/clone-impl-async.rs:70:18\n+  --> $DIR/clone-impl-async.rs:69:18\n    |\n LL | fn check_copy<T: Copy>(_x: &T) {}\n    |                  ^^^^ required by this bound in `check_copy`\n@@ -105,7 +105,7 @@ LL |     check_clone(&inner_non_clone_fn);\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `check_clone`\n-  --> $DIR/clone-impl-async.rs:71:19\n+  --> $DIR/clone-impl-async.rs:70:19\n    |\n LL | fn check_clone<T: Clone>(_x: &T) {}\n    |                   ^^^^^ required by this bound in `check_clone`\n@@ -119,7 +119,7 @@ LL |     check_copy(&outer_non_clone_fn);\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `check_copy`\n-  --> $DIR/clone-impl-async.rs:70:18\n+  --> $DIR/clone-impl-async.rs:69:18\n    |\n LL | fn check_copy<T: Copy>(_x: &T) {}\n    |                  ^^^^ required by this bound in `check_copy`\n@@ -133,7 +133,7 @@ LL |     check_clone(&outer_non_clone_fn);\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `check_clone`\n-  --> $DIR/clone-impl-async.rs:71:19\n+  --> $DIR/clone-impl-async.rs:70:19\n    |\n LL | fn check_clone<T: Clone>(_x: &T) {}\n    |                   ^^^^^ required by this bound in `check_clone`\n@@ -147,7 +147,7 @@ LL |     check_copy(&maybe_copy_clone_fn);\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `check_copy`\n-  --> $DIR/clone-impl-async.rs:70:18\n+  --> $DIR/clone-impl-async.rs:69:18\n    |\n LL | fn check_copy<T: Copy>(_x: &T) {}\n    |                  ^^^^ required by this bound in `check_copy`\n@@ -161,7 +161,7 @@ LL |     check_clone(&maybe_copy_clone_fn);\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `check_clone`\n-  --> $DIR/clone-impl-async.rs:71:19\n+  --> $DIR/clone-impl-async.rs:70:19\n    |\n LL | fn check_clone<T: Clone>(_x: &T) {}\n    |                   ^^^^^ required by this bound in `check_clone`"}, {"sha": "91811df93cd4a1df96f9dac70973f1964bbcdfd3", "filename": "src/test/ui/impl-trait/issue-55872-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.rs?ref=6e6c42c61c5535ffd748b0b1c71b14f2e962da3e", "patch": "@@ -12,7 +12,7 @@ pub trait Bar {\n impl<S> Bar for S {\n     type E = impl std::marker::Copy;\n     fn foo<T>() -> Self::E {\n-    //~^ ERROR the trait bound `impl Future<Output = ()>: Copy` is not satisfied [E0277]\n+        //~^ ERROR : Copy` is not satisfied [E0277]\n         async {}\n     }\n }"}, {"sha": "c6e10f0f3504fb6d3ae7218eb6454644c9af2761", "filename": "src/test/ui/impl-trait/issue-55872-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.stderr?ref=6e6c42c61c5535ffd748b0b1c71b14f2e962da3e", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `impl Future<Output = ()>: Copy` is not satisfied\n+error[E0277]: the trait bound `[async block@$DIR/issue-55872-3.rs:16:9: 16:17]: Copy` is not satisfied\n   --> $DIR/issue-55872-3.rs:14:20\n    |\n LL |     fn foo<T>() -> Self::E {\n-   |                    ^^^^^^^ the trait `Copy` is not implemented for `impl Future<Output = ()>`\n+   |                    ^^^^^^^ the trait `Copy` is not implemented for `[async block@$DIR/issue-55872-3.rs:16:9: 16:17]`\n \n error: aborting due to previous error\n "}, {"sha": "78233f300bdd05ab4d6c821adb0d85fb3a11abe5", "filename": "src/test/ui/impl-trait/issues/issue-78722.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs?ref=6e6c42c61c5535ffd748b0b1c71b14f2e962da3e", "patch": "@@ -7,7 +7,7 @@ type F = impl core::future::Future<Output = u8>;\n struct Bug {\n     V1: [(); {\n         fn concrete_use() -> F {\n-            //~^ ERROR expected `impl Future<Output = ()>` to be a future that resolves to `u8`, but it resolves to `()`\n+            //~^ ERROR to be a future that resolves to `u8`, but it resolves to `()`\n             async {}\n         }\n         let f: F = async { 1 };"}, {"sha": "c00df8087e8950b382e8f28c0a8c4e5649f0f09e", "filename": "src/test/ui/impl-trait/issues/issue-78722.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr?ref=6e6c42c61c5535ffd748b0b1c71b14f2e962da3e", "patch": "@@ -16,7 +16,7 @@ LL |         let f: F = async { 1 };\n LL |     }],\n    |     - value is dropped here\n \n-error[E0271]: expected `impl Future<Output = ()>` to be a future that resolves to `u8`, but it resolves to `()`\n+error[E0271]: expected `[async block@$DIR/issue-78722.rs:11:13: 11:21]` to be a future that resolves to `u8`, but it resolves to `()`\n   --> $DIR/issue-78722.rs:9:30\n    |\n LL |         fn concrete_use() -> F {"}, {"sha": "dea7c4695cc181b84a86dc949390cf494ec7da6e", "filename": "src/test/ui/pattern/non-structural-match-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.stderr?ref=6e6c42c61c5535ffd748b0b1c71b14f2e962da3e", "patch": "@@ -4,7 +4,7 @@ error: `[closure@$DIR/non-structural-match-types.rs:9:17: 9:19]` cannot be used\n LL |         const { || {} } => {},\n    |         ^^^^^^^^^^^^^^^\n \n-error: `impl Future<Output = ()>` cannot be used in patterns\n+error: `[async block@$DIR/non-structural-match-types.rs:12:17: 12:25]` cannot be used in patterns\n   --> $DIR/non-structural-match-types.rs:12:9\n    |\n LL |         const { async {} } => {},"}, {"sha": "34ff59a9bb0508185e9f889c124c8bb9c0afd458", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e6c42c61c5535ffd748b0b1c71b14f2e962da3e/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=6e6c42c61c5535ffd748b0b1c71b14f2e962da3e", "patch": "@@ -87,7 +87,7 @@ LL | |     }\n    |       arguments to this function are incorrect\n    |\n    = note:     expected struct `Pin<Box<dyn Future<Output = i32> + Send>>`\n-           found `async` block `impl Future<Output = {integer}>`\n+           found `async` block `[async block@$DIR/expected-boxed-future-isnt-pinned.rs:28:5: 30:6]`\n note: function defined here\n   --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n    |"}]}