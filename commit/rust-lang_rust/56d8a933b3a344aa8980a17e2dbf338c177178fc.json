{"sha": "56d8a933b3a344aa8980a17e2dbf338c177178fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZDhhOTMzYjNhMzQ0YWE4OTgwYTE3ZTJkYmYzMzhjMTc3MTc4ZmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-14T04:07:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-14T04:07:08Z"}, "message": "Auto merge of #76195 - lcnr:const-Self, r=varkor\n\nallow concrete self types in consts\n\nThis is quite a bad hack to fix #75486. There might be a better way to check if the self type depends on generic parameters, but I wasn't able to come up with one.\n\nr? `@varkor` cc `@petrochenkov`", "tree": {"sha": "7d89bab8ef1e4f4a80c167087fca199dbd2f62df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d89bab8ef1e4f4a80c167087fca199dbd2f62df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56d8a933b3a344aa8980a17e2dbf338c177178fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56d8a933b3a344aa8980a17e2dbf338c177178fc", "html_url": "https://github.com/rust-lang/rust/commit/56d8a933b3a344aa8980a17e2dbf338c177178fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56d8a933b3a344aa8980a17e2dbf338c177178fc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b65a3d0a6a3ae8d1f35d95f18210f894a1d6c98", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b65a3d0a6a3ae8d1f35d95f18210f894a1d6c98", "html_url": "https://github.com/rust-lang/rust/commit/0b65a3d0a6a3ae8d1f35d95f18210f894a1d6c98"}, {"sha": "90dd798cf53320b3478119d06d2d8c47880c9247", "url": "https://api.github.com/repos/rust-lang/rust/commits/90dd798cf53320b3478119d06d2d8c47880c9247", "html_url": "https://github.com/rust-lang/rust/commit/90dd798cf53320b3478119d06d2d8c47880c9247"}], "stats": {"total": 166, "additions": 146, "deletions": 20}, "files": [{"sha": "96fde48d96cc12c1b00b3a5f0f8aa6d08e4b6d9f", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/56d8a933b3a344aa8980a17e2dbf338c177178fc/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d8a933b3a344aa8980a17e2dbf338c177178fc/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=56d8a933b3a344aa8980a17e2dbf338c177178fc", "patch": "@@ -199,7 +199,16 @@ pub enum Res<Id = hir::HirId> {\n \n     // Type namespace\n     PrimTy(hir::PrimTy),\n-    SelfTy(Option<DefId> /* trait */, Option<DefId> /* impl */),\n+    /// `Self`, with both an optional trait and impl `DefId`.\n+    ///\n+    /// HACK(min_const_generics): impl self types also have an optional requirement to not mention\n+    /// any generic parameters to allow the following with `min_const_generics`:\n+    /// ```rust\n+    /// impl Foo { fn test() -> [u8; std::mem::size_of::<Self>()] {} }\n+    /// ```\n+    ///\n+    /// FIXME(lazy_normalization_consts): Remove this bodge once this feature is stable.\n+    SelfTy(Option<DefId> /* trait */, Option<(DefId, bool)> /* impl */),\n     ToolMod, // e.g., `rustfmt` in `#[rustfmt::skip]`\n \n     // Value namespace"}, {"sha": "fe6653e98da89cb0d72ff77dfaed2e37be78fdbf", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56d8a933b3a344aa8980a17e2dbf338c177178fc/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d8a933b3a344aa8980a17e2dbf338c177178fc/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=56d8a933b3a344aa8980a17e2dbf338c177178fc", "patch": "@@ -104,7 +104,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n                 if let Some(t) = t {\n                     self.check_def_id(t);\n                 }\n-                if let Some(i) = i {\n+                if let Some((i, _)) = i {\n                     self.check_def_id(i);\n                 }\n             }"}, {"sha": "b80da64149150e0f67a759b441aec7355d5c98c4", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56d8a933b3a344aa8980a17e2dbf338c177178fc/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d8a933b3a344aa8980a17e2dbf338c177178fc/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=56d8a933b3a344aa8980a17e2dbf338c177178fc", "patch": "@@ -112,7 +112,7 @@ impl<'a> Resolver<'a> {\n                 match outer_res {\n                     Res::SelfTy(maybe_trait_defid, maybe_impl_defid) => {\n                         if let Some(impl_span) =\n-                            maybe_impl_defid.and_then(|def_id| self.opt_span(def_id))\n+                            maybe_impl_defid.and_then(|(def_id, _)| self.opt_span(def_id))\n                         {\n                             err.span_label(\n                                 reduce_impl_span_to_impl_keyword(sm, impl_span),"}, {"sha": "6788df9be7820489bbcdb694f4c5debc6517ded9", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/56d8a933b3a344aa8980a17e2dbf338c177178fc/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d8a933b3a344aa8980a17e2dbf338c177178fc/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=56d8a933b3a344aa8980a17e2dbf338c177178fc", "patch": "@@ -110,6 +110,9 @@ crate enum RibKind<'a> {\n     ItemRibKind(HasGenericParams),\n \n     /// We're in a constant item. Can't refer to dynamic stuff.\n+    ///\n+    /// The `bool` indicates if this constant may reference generic parameters\n+    /// and is used to only allow generic parameters to be used in trivial constant expressions.\n     ConstantItemRibKind(bool),\n \n     /// We passed through a module.\n@@ -848,7 +851,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         self.with_current_self_item(item, |this| {\n             this.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n                 let item_def_id = this.r.local_def_id(item.id).to_def_id();\n-                this.with_self_rib(Res::SelfTy(None, Some(item_def_id)), |this| {\n+                this.with_self_rib(Res::SelfTy(None, Some((item_def_id, false))), |this| {\n                     visit::walk_item(this, item);\n                 });\n             });\n@@ -1215,7 +1218,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 // Resolve the trait reference, if necessary.\n                 this.with_optional_trait_ref(opt_trait_reference.as_ref(), |this, trait_id| {\n                     let item_def_id = this.r.local_def_id(item_id).to_def_id();\n-                    this.with_self_rib(Res::SelfTy(trait_id, Some(item_def_id)), |this| {\n+                    this.with_self_rib(Res::SelfTy(trait_id, Some((item_def_id, false))), |this| {\n                         if let Some(trait_ref) = opt_trait_reference.as_ref() {\n                             // Resolve type arguments in the trait path.\n                             visit::walk_trait_ref(this, trait_ref);"}, {"sha": "00a37d908cd07ee600d3eaf92e8e8e84531f9588", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/56d8a933b3a344aa8980a17e2dbf338c177178fc/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d8a933b3a344aa8980a17e2dbf338c177178fc/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=56d8a933b3a344aa8980a17e2dbf338c177178fc", "patch": "@@ -2539,7 +2539,7 @@ impl<'a> Resolver<'a> {\n         &mut self,\n         rib_index: usize,\n         rib_ident: Ident,\n-        res: Res,\n+        mut res: Res,\n         record_used: bool,\n         span: Span,\n         all_ribs: &[Rib<'a>],\n@@ -2629,13 +2629,22 @@ impl<'a> Resolver<'a> {\n                         ConstantItemRibKind(trivial) => {\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n                             if !trivial && self.session.features_untracked().min_const_generics {\n-                                if record_used {\n-                                    self.report_error(\n-                                        span,\n-                                        ResolutionError::ParamInNonTrivialAnonConst(rib_ident.name),\n-                                    );\n+                                // HACK(min_const_generics): If we encounter `Self` in an anonymous constant\n+                                // we can't easily tell if it's generic at this stage, so we instead remember\n+                                // this and then enforce the self type to be concrete later on.\n+                                if let Res::SelfTy(trait_def, Some((impl_def, _))) = res {\n+                                    res = Res::SelfTy(trait_def, Some((impl_def, true)));\n+                                } else {\n+                                    if record_used {\n+                                        self.report_error(\n+                                            span,\n+                                            ResolutionError::ParamInNonTrivialAnonConst(\n+                                                rib_ident.name,\n+                                            ),\n+                                        );\n+                                    }\n+                                    return Res::Err;\n                                 }\n-                                return Res::Err;\n                             }\n \n                             if in_ty_param_default {"}, {"sha": "a743dc1cd2086fda39b467b26293979e6ec74415", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/56d8a933b3a344aa8980a17e2dbf338c177178fc/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d8a933b3a344aa8980a17e2dbf338c177178fc/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=56d8a933b3a344aa8980a17e2dbf338c177178fc", "patch": "@@ -1460,7 +1460,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         // Find the type of the associated item, and the trait where the associated\n         // item is declared.\n         let bound = match (&qself_ty.kind(), qself_res) {\n-            (_, Res::SelfTy(Some(_), Some(impl_def_id))) => {\n+            (_, Res::SelfTy(Some(_), Some((impl_def_id, _)))) => {\n                 // `Self` in an impl of a trait -- we have a concrete self type and a\n                 // trait reference.\n                 let trait_ref = match tcx.impl_trait_ref(impl_def_id) {\n@@ -1917,12 +1917,29 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 self.prohibit_generics(path.segments);\n                 tcx.types.self_param\n             }\n-            Res::SelfTy(_, Some(def_id)) => {\n+            Res::SelfTy(_, Some((def_id, forbid_generic))) => {\n                 // `Self` in impl (we know the concrete type).\n                 assert_eq!(opt_self_ty, None);\n                 self.prohibit_generics(path.segments);\n                 // Try to evaluate any array length constants.\n-                self.normalize_ty(span, tcx.at(span).type_of(def_id))\n+                let normalized_ty = self.normalize_ty(span, tcx.at(span).type_of(def_id));\n+                if forbid_generic && normalized_ty.needs_subst() {\n+                    let mut err = tcx.sess.struct_span_err(\n+                        path.span,\n+                        \"generic `Self` types are currently not permitted in anonymous constants\",\n+                    );\n+                    if let Some(hir::Node::Item(&hir::Item {\n+                        kind: hir::ItemKind::Impl { self_ty, .. },\n+                        ..\n+                    })) = tcx.hir().get_if_local(def_id)\n+                    {\n+                        err.span_note(self_ty.span, \"not a concrete type\");\n+                    }\n+                    err.emit();\n+                    tcx.ty_error()\n+                } else {\n+                    normalized_ty\n+                }\n             }\n             Res::Def(DefKind::AssocTy, def_id) => {\n                 debug_assert!(path.segments.len() >= 2);"}, {"sha": "58b76d24a5bdbb94405ed4fe6e4bf62b4ae08d9c", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56d8a933b3a344aa8980a17e2dbf338c177178fc/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d8a933b3a344aa8980a17e2dbf338c177178fc/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=56d8a933b3a344aa8980a17e2dbf338c177178fc", "patch": "@@ -601,7 +601,7 @@ pub fn register_res(cx: &DocContext<'_>, res: Res) -> DefId {\n         },\n         Res::Def(DefKind::TraitAlias, i) => (i, TypeKind::TraitAlias),\n         Res::SelfTy(Some(def_id), _) => (def_id, TypeKind::Trait),\n-        Res::SelfTy(_, Some(impl_def_id)) => return impl_def_id,\n+        Res::SelfTy(_, Some((impl_def_id, _))) => return impl_def_id,\n         _ => return res.def_id(),\n     };\n     if did.is_local() {"}, {"sha": "8f794312834b244b9088e1f95b3a833d70fea403", "filename": "src/test/ui/const-generics/issues/issue-62504.min.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/56d8a933b3a344aa8980a17e2dbf338c177178fc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56d8a933b3a344aa8980a17e2dbf338c177178fc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.min.stderr?ref=56d8a933b3a344aa8980a17e2dbf338c177178fc", "patch": "@@ -1,10 +1,14 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic `Self` types are currently not permitted in anonymous constants\n   --> $DIR/issue-62504.rs:19:25\n    |\n LL |         ArrayHolder([0; Self::SIZE])\n-   |                         ^^^^^^^^^^ non-trivial anonymous constants must not depend on the parameter `Self`\n+   |                         ^^^^^^^^^^\n    |\n-   = help: it is currently only allowed to use either `Self` or `{ Self }` as generic constants\n+note: not a concrete type\n+  --> $DIR/issue-62504.rs:17:22\n+   |\n+LL | impl<const X: usize> ArrayHolder<X> {\n+   |                      ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "015f170f00d1ce8ec797bf39c2dae9c69f1fbec8", "filename": "src/test/ui/const-generics/issues/issue-62504.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56d8a933b3a344aa8980a17e2dbf338c177178fc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d8a933b3a344aa8980a17e2dbf338c177178fc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs?ref=56d8a933b3a344aa8980a17e2dbf338c177178fc", "patch": "@@ -18,7 +18,7 @@ impl<const X: usize> ArrayHolder<X> {\n     pub const fn new() -> Self {\n         ArrayHolder([0; Self::SIZE])\n         //[full]~^ ERROR constant expression depends on a generic parameter\n-        //[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+        //[min]~^^ ERROR generic `Self` types are currently\n     }\n }\n "}, {"sha": "0973b373c122c6cc42b5862f4cb2f3d13b080f51", "filename": "src/test/ui/const-generics/min_const_generics/self-ty-in-const-1.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/56d8a933b3a344aa8980a17e2dbf338c177178fc/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d8a933b3a344aa8980a17e2dbf338c177178fc/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.rs?ref=56d8a933b3a344aa8980a17e2dbf338c177178fc", "patch": "@@ -0,0 +1,27 @@\n+#![feature(min_const_generics)]\n+\n+trait Foo {\n+    fn t1() -> [u8; std::mem::size_of::<Self>()]; //~ERROR generic parameters\n+}\n+\n+struct Bar<T>(T);\n+\n+impl Bar<u8> {\n+    fn t2() -> [u8; std::mem::size_of::<Self>()] { todo!() } // ok\n+}\n+\n+impl<T> Bar<T> {\n+    fn t3() -> [u8; std::mem::size_of::<Self>()] {} //~ERROR generic `Self`\n+}\n+\n+trait Baz {\n+    fn hey();\n+}\n+\n+impl Baz for u16 {\n+    fn hey() {\n+        let _: [u8; std::mem::size_of::<Self>()]; // ok\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "89ce58564e465d04d6b5d7380acafb784b999dd6", "filename": "src/test/ui/const-generics/min_const_generics/self-ty-in-const-1.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/56d8a933b3a344aa8980a17e2dbf338c177178fc/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56d8a933b3a344aa8980a17e2dbf338c177178fc/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr?ref=56d8a933b3a344aa8980a17e2dbf338c177178fc", "patch": "@@ -0,0 +1,22 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/self-ty-in-const-1.rs:4:41\n+   |\n+LL |     fn t1() -> [u8; std::mem::size_of::<Self>()];\n+   |                                         ^^^^ non-trivial anonymous constants must not depend on the parameter `Self`\n+   |\n+   = help: it is currently only allowed to use either `Self` or `{ Self }` as generic constants\n+\n+error: generic `Self` types are currently not permitted in anonymous constants\n+  --> $DIR/self-ty-in-const-1.rs:14:41\n+   |\n+LL |     fn t3() -> [u8; std::mem::size_of::<Self>()] {}\n+   |                                         ^^^^\n+   |\n+note: not a concrete type\n+  --> $DIR/self-ty-in-const-1.rs:13:9\n+   |\n+LL | impl<T> Bar<T> {\n+   |         ^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "e7f80d50082b367755cd94feab63b2aa64f780be", "filename": "src/test/ui/const-generics/min_const_generics/self-ty-in-const-2.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/56d8a933b3a344aa8980a17e2dbf338c177178fc/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d8a933b3a344aa8980a17e2dbf338c177178fc/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-2.rs?ref=56d8a933b3a344aa8980a17e2dbf338c177178fc", "patch": "@@ -0,0 +1,21 @@\n+#![feature(min_const_generics)]\n+\n+struct Bar<T>(T);\n+\n+trait Baz {\n+    fn hey();\n+}\n+\n+impl Baz for u16 {\n+    fn hey() {\n+        let _: [u8; std::mem::size_of::<Self>()]; // ok\n+    }\n+}\n+\n+impl<T> Baz for Bar<T> {\n+    fn hey() {\n+        let _: [u8; std::mem::size_of::<Self>()]; //~ERROR generic `Self`\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "9ac6410a290a525978058ed3dfb49adc5269db15", "filename": "src/test/ui/const-generics/min_const_generics/self-ty-in-const-2.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/56d8a933b3a344aa8980a17e2dbf338c177178fc/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56d8a933b3a344aa8980a17e2dbf338c177178fc/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-2.stderr?ref=56d8a933b3a344aa8980a17e2dbf338c177178fc", "patch": "@@ -0,0 +1,14 @@\n+error: generic `Self` types are currently not permitted in anonymous constants\n+  --> $DIR/self-ty-in-const-2.rs:17:41\n+   |\n+LL |         let _: [u8; std::mem::size_of::<Self>()];\n+   |                                         ^^^^\n+   |\n+note: not a concrete type\n+  --> $DIR/self-ty-in-const-2.rs:15:17\n+   |\n+LL | impl<T> Baz for Bar<T> {\n+   |                 ^^^^^^\n+\n+error: aborting due to previous error\n+"}]}