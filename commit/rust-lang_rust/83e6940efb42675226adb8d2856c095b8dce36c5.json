{"sha": "83e6940efb42675226adb8d2856c095b8dce36c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZTY5NDBlZmI0MjY3NTIyNmFkYjhkMjg1NmMwOTViOGRjZTM2YzU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-16T20:01:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-16T20:01:20Z"}, "message": "Merge #8062\n\n8062: pit-of-successify tree editor r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "4720353e96dd2b7e200da91896dd7d155d661bd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4720353e96dd2b7e200da91896dd7d155d661bd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83e6940efb42675226adb8d2856c095b8dce36c5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgUQ6QCRBK7hj4Ov3rIwAAdHIIAK4E2DPOXSyL6EnmL0hem6V4\nyq+2EBCx3/NRzOcaGlA5UrsY4sCUU66YZTPhTAgfAg37Tyi9yQb0mlyJDzgX1Cug\nQsQ5W8se7E6cHprSihYD18Y3PQNcfu7F+xtAAu8Db20I9/LNwx6umr1XUvqH1dvd\nWkJG6moGZUW+WCcbBMwAYFYALrj/fPYqAd7LNn7SgS9OLOitMOqXwl/Ft/YMssYZ\nkNFyFECRjyFfbu3/mx1yclQbk52JzO0H6Q0p8iO7Y66fNiEZr+NEgoOzavPQGv47\nRl8gOinRC3P75XnQPgFaTyXF2cdo9LbPV7N4+G3OOhcT+ZourVJRj8cRto7nYDk=\n=4N4w\n-----END PGP SIGNATURE-----\n", "payload": "tree 4720353e96dd2b7e200da91896dd7d155d661bd4\nparent 2f9ce4f663b47c69fbf924f3300713773f5f4c10\nparent 186a430853176f0ff5f69c4323bd12fb6f07d6ed\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615924880 +0000\ncommitter GitHub <noreply@github.com> 1615924880 +0000\n\nMerge #8062\n\n8062: pit-of-successify tree editor r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83e6940efb42675226adb8d2856c095b8dce36c5", "html_url": "https://github.com/rust-lang/rust/commit/83e6940efb42675226adb8d2856c095b8dce36c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83e6940efb42675226adb8d2856c095b8dce36c5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f9ce4f663b47c69fbf924f3300713773f5f4c10", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f9ce4f663b47c69fbf924f3300713773f5f4c10", "html_url": "https://github.com/rust-lang/rust/commit/2f9ce4f663b47c69fbf924f3300713773f5f4c10"}, {"sha": "186a430853176f0ff5f69c4323bd12fb6f07d6ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/186a430853176f0ff5f69c4323bd12fb6f07d6ed", "html_url": "https://github.com/rust-lang/rust/commit/186a430853176f0ff5f69c4323bd12fb6f07d6ed"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "449b058fbc9becb38324077d3f1b97293a2e8079", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83e6940efb42675226adb8d2856c095b8dce36c5/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e6940efb42675226adb8d2856c095b8dce36c5/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=83e6940efb42675226adb8d2856c095b8dce36c5", "patch": "@@ -102,17 +102,17 @@ impl GenericParamsOwnerEdit for ast::Enum {\n fn create_where_clause(position: Position) {\n     let where_clause: SyntaxElement =\n         make::where_clause(empty()).clone_for_update().syntax().clone().into();\n-    ted::insert_ws(position, where_clause);\n+    ted::insert(position, where_clause);\n }\n \n impl ast::WhereClause {\n     pub fn add_predicate(&self, predicate: ast::WherePred) {\n         if let Some(pred) = self.predicates().last() {\n             if !pred.syntax().siblings_with_tokens(Direction::Next).any(|it| it.kind() == T![,]) {\n-                ted::append_child(self.syntax().clone(), make::token(T![,]));\n+                ted::append_child_raw(self.syntax().clone(), make::token(T![,]));\n             }\n         }\n-        ted::append_child_ws(self.syntax().clone(), predicate.syntax().clone())\n+        ted::append_child(self.syntax().clone(), predicate.syntax().clone())\n     }\n }\n "}, {"sha": "76f950ef9b62a0917ae86a39f179a94a300b56d6", "filename": "crates/syntax/src/ted.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/83e6940efb42675226adb8d2856c095b8dce36c5/crates%2Fsyntax%2Fsrc%2Fted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e6940efb42675226adb8d2856c095b8dce36c5/crates%2Fsyntax%2Fsrc%2Fted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fted.rs?ref=83e6940efb42675226adb8d2856c095b8dce36c5", "patch": "@@ -1,4 +1,7 @@\n-//! Primitive tree editor, ed for trees\n+//! Primitive tree editor, ed for trees.\n+//!\n+//! The `_raw`-suffixed functions insert elements as is, unsuffixed versions fix\n+//! up elements around the edges.\n use std::ops::RangeInclusive;\n \n use parser::T;\n@@ -43,13 +46,13 @@ impl Position {\n     }\n }\n \n-pub fn insert_ws(position: Position, elem: impl Into<SyntaxElement>) {\n-    insert_all_ws(position, vec![elem.into()])\n-}\n pub fn insert(position: Position, elem: impl Into<SyntaxElement>) {\n     insert_all(position, vec![elem.into()])\n }\n-pub fn insert_all_ws(position: Position, mut elements: Vec<SyntaxElement>) {\n+pub fn insert_raw(position: Position, elem: impl Into<SyntaxElement>) {\n+    insert_all_raw(position, vec![elem.into()])\n+}\n+pub fn insert_all(position: Position, mut elements: Vec<SyntaxElement>) {\n     if let Some(first) = elements.first() {\n         if let Some(ws) = ws_before(&position, first) {\n             elements.insert(0, ws.into())\n@@ -60,9 +63,9 @@ pub fn insert_all_ws(position: Position, mut elements: Vec<SyntaxElement>) {\n             elements.push(ws.into())\n         }\n     }\n-    insert_all(position, elements)\n+    insert_all_raw(position, elements)\n }\n-pub fn insert_all(position: Position, elements: Vec<SyntaxElement>) {\n+pub fn insert_all_raw(position: Position, elements: Vec<SyntaxElement>) {\n     let (parent, index) = match position.repr {\n         PositionRepr::FirstChild(parent) => (parent, 0),\n         PositionRepr::After(child) => (child.parent().unwrap(), child.index() + 1),\n@@ -89,14 +92,14 @@ pub fn replace_all(range: RangeInclusive<SyntaxElement>, new: Vec<SyntaxElement>\n     parent.splice_children(start..end + 1, new)\n }\n \n-pub fn append_child_ws(node: impl Into<SyntaxNode>, child: impl Into<SyntaxElement>) {\n-    let position = Position::last_child_of(node);\n-    insert_ws(position, child)\n-}\n pub fn append_child(node: impl Into<SyntaxNode>, child: impl Into<SyntaxElement>) {\n     let position = Position::last_child_of(node);\n     insert(position, child)\n }\n+pub fn append_child_raw(node: impl Into<SyntaxNode>, child: impl Into<SyntaxElement>) {\n+    let position = Position::last_child_of(node);\n+    insert_raw(position, child)\n+}\n \n fn ws_before(position: &Position, new: &SyntaxElement) -> Option<SyntaxToken> {\n     let prev = match &position.repr {"}]}