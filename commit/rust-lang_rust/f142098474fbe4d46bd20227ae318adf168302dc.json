{"sha": "f142098474fbe4d46bd20227ae318adf168302dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNDIwOTg0NzRmYmU0ZDQ2YmQyMDIyN2FlMzE4YWRmMTY4MzAyZGM=", "commit": {"author": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2018-10-01T11:47:06Z"}, "committer": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2018-10-02T11:47:38Z"}, "message": "Correct false positive in wrong_self_convention lint for to_mut", "tree": {"sha": "89bcf9a32ca74838cdd70ee95abef9ee2b03a463", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89bcf9a32ca74838cdd70ee95abef9ee2b03a463"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f142098474fbe4d46bd20227ae318adf168302dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f142098474fbe4d46bd20227ae318adf168302dc", "html_url": "https://github.com/rust-lang/rust/commit/f142098474fbe4d46bd20227ae318adf168302dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f142098474fbe4d46bd20227ae318adf168302dc/comments", "author": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f9af5f69c81367e32deae49e5c200826bab0954", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f9af5f69c81367e32deae49e5c200826bab0954", "html_url": "https://github.com/rust-lang/rust/commit/5f9af5f69c81367e32deae49e5c200826bab0954"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "e0d858bd270ad453fa482ae8c0fa01c3301f1656", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f142098474fbe4d46bd20227ae318adf168302dc/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f142098474fbe4d46bd20227ae318adf168302dc/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=f142098474fbe4d46bd20227ae318adf168302dc", "patch": "@@ -882,12 +882,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                 let ty = cx.tcx.type_of(def_id);\n                 let is_copy = is_copy(cx, ty);\n                 for &(ref conv, self_kinds) in &CONVENTIONS {\n-                    if_chain! {\n-                        if conv.check(&name.as_str());\n+                    if conv.check(&name.as_str()) {\n                         if !self_kinds\n-                            .iter()\n-                            .any(|k| k.matches(cx, first_arg_ty, first_arg, self_ty, is_copy, &implitem.generics));\n-                        then {\n+                                .iter()\n+                                .any(|k| k.matches(cx, first_arg_ty, first_arg, self_ty, is_copy, &implitem.generics)) {\n                             let lint = if item.vis.node.is_pub() {\n                                 WRONG_PUB_SELF_CONVENTION\n                             } else {\n@@ -904,6 +902,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                                                           .collect::<Vec<_>>()\n                                                           .join(\" or \")));\n                         }\n+\n+                        // Only check the first convention to match (CONVENTIONS should be listed from most to least specific)\n+                        break;\n                     }\n                 }\n \n@@ -1183,8 +1184,8 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr, arg: &hir::Exp\n                         Applicability::MaybeIncorrect,\n                     );\n                     db.span_suggestion_with_applicability(\n-                        expr.span, \n-                        \"or try being explicit about what type to clone\", \n+                        expr.span,\n+                        \"or try being explicit about what type to clone\",\n                         explicit,\n                         Applicability::MaybeIncorrect,\n                     );\n@@ -2067,12 +2068,13 @@ enum Convention {\n }\n \n #[rustfmt::skip]\n-const CONVENTIONS: [(Convention, &[SelfKind]); 6] = [\n+const CONVENTIONS: [(Convention, &[SelfKind]); 7] = [\n     (Convention::Eq(\"new\"), &[SelfKind::No]),\n     (Convention::StartsWith(\"as_\"), &[SelfKind::Ref, SelfKind::RefMut]),\n     (Convention::StartsWith(\"from_\"), &[SelfKind::No]),\n     (Convention::StartsWith(\"into_\"), &[SelfKind::Value]),\n     (Convention::StartsWith(\"is_\"), &[SelfKind::Ref, SelfKind::No]),\n+    (Convention::Eq(\"to_mut\"), &[SelfKind::RefMut]),\n     (Convention::StartsWith(\"to_\"), &[SelfKind::Ref]),\n ];\n "}, {"sha": "2fb33d08619ac3d49aa31c34a25c54c16e2ecbfb", "filename": "tests/ui/wrong_self_convention.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f142098474fbe4d46bd20227ae318adf168302dc/tests%2Fui%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f142098474fbe4d46bd20227ae318adf168302dc/tests%2Fui%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.rs?ref=f142098474fbe4d46bd20227ae318adf168302dc", "patch": "@@ -59,4 +59,5 @@ impl Bar {\n     fn is_(self) {}\n     fn to_(self) {}\n     fn from_(self) {}\n+    fn to_mut(&mut self) {}\n }"}]}