{"sha": "6e87828756d970e9c25635aa9f71f0a90cc8ff65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlODc4Mjg3NTZkOTcwZTljMjU2MzVhYTlmNzFmMGE5MGNjOGZmNjU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-06T17:23:53Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-06T17:23:53Z"}, "message": "YAGNI active_resolve_capabilities\n\nThis leaks a lot of LSP details into ide layer, which we want to avoid:\n\nhttps://github.com/rust-analyzer/rust-analyzer/tree/c9cec381bcfd97e5f3536e31a9c546ab5c0665e6/docs/dev#lsp-independence\n\nAdditionally, all what this infra does is providing a toggle for\nauto-import completion, but we already have one!", "tree": {"sha": "5d35a8f66b79103cb50a6174b015907d0c65a231", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d35a8f66b79103cb50a6174b015907d0c65a231"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e87828756d970e9c25635aa9f71f0a90cc8ff65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e87828756d970e9c25635aa9f71f0a90cc8ff65", "html_url": "https://github.com/rust-lang/rust/commit/6e87828756d970e9c25635aa9f71f0a90cc8ff65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e87828756d970e9c25635aa9f71f0a90cc8ff65/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edf03548e365f2ebd89517713aac9b531b43ed24", "url": "https://api.github.com/repos/rust-lang/rust/commits/edf03548e365f2ebd89517713aac9b531b43ed24", "html_url": "https://github.com/rust-lang/rust/commit/edf03548e365f2ebd89517713aac9b531b43ed24"}], "stats": {"total": 110, "additions": 32, "deletions": 78}, "files": [{"sha": "896f167ffab38e0174a7efefd2926dd905d23743", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e87828756d970e9c25635aa9f71f0a90cc8ff65/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e87828756d970e9c25635aa9f71f0a90cc8ff65/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=6e87828756d970e9c25635aa9f71f0a90cc8ff65", "patch": "@@ -46,7 +46,7 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n         acc.add_resolution(ctx, name.to_string(), &res)\n     });\n \n-    if ctx.config.enable_autoimport_completions && ctx.config.resolve_additional_edits_lazily() {\n+    if ctx.config.enable_autoimport_completions {\n         fuzzy_completion(acc, ctx);\n     }\n }\n@@ -206,11 +206,7 @@ mod tests {\n     }\n \n     fn fuzzy_completion_config() -> CompletionConfig {\n-        let mut completion_config = CompletionConfig::default();\n-        completion_config\n-            .active_resolve_capabilities\n-            .insert(crate::CompletionResolveCapability::AdditionalTextEdits);\n-        completion_config\n+        CompletionConfig::default()\n     }\n \n     #[test]"}, {"sha": "9f82b0346663025d47e4709a3652b7a3ff9a8da1", "filename": "crates/completion/src/config.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6e87828756d970e9c25635aa9f71f0a90cc8ff65/crates%2Fcompletion%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e87828756d970e9c25635aa9f71f0a90cc8ff65/crates%2Fcompletion%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fconfig.rs?ref=6e87828756d970e9c25635aa9f71f0a90cc8ff65", "patch": "@@ -5,7 +5,6 @@\n //! completions if we are allowed to.\n \n use ide_db::helpers::insert_use::MergeBehavior;\n-use rustc_hash::FxHashSet;\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct CompletionConfig {\n@@ -15,32 +14,12 @@ pub struct CompletionConfig {\n     pub add_call_argument_snippets: bool,\n     pub snippet_cap: Option<SnippetCap>,\n     pub merge: Option<MergeBehavior>,\n-    /// A set of capabilities, enabled on the client and supported on the server.\n-    pub active_resolve_capabilities: FxHashSet<CompletionResolveCapability>,\n-}\n-\n-/// A resolve capability, supported on the server.\n-/// If the client registers any completion resolve capabilities,\n-/// the server is able to render completion items' corresponding fields later,\n-/// not during an initial completion item request.\n-/// See https://github.com/rust-analyzer/rust-analyzer/issues/6366 for more details.\n-#[derive(Debug, Copy, Clone, Hash, Eq, PartialEq)]\n-pub enum CompletionResolveCapability {\n-    Documentation,\n-    Detail,\n-    AdditionalTextEdits,\n }\n \n impl CompletionConfig {\n     pub fn allow_snippets(&mut self, yes: bool) {\n         self.snippet_cap = if yes { Some(SnippetCap { _private: () }) } else { None }\n     }\n-\n-    /// Whether the completions' additional edits are calculated when sending an initional completions list\n-    /// or later, in a separate resolve request.\n-    pub fn resolve_additional_edits_lazily(&self) -> bool {\n-        self.active_resolve_capabilities.contains(&CompletionResolveCapability::AdditionalTextEdits)\n-    }\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq)]\n@@ -57,7 +36,6 @@ impl Default for CompletionConfig {\n             add_call_argument_snippets: true,\n             snippet_cap: Some(SnippetCap { _private: () }),\n             merge: Some(MergeBehavior::Full),\n-            active_resolve_capabilities: FxHashSet::default(),\n         }\n     }\n }"}, {"sha": "366aced714b3d31ebdda965ab6ec01836c779b13", "filename": "crates/completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e87828756d970e9c25635aa9f71f0a90cc8ff65/crates%2Fcompletion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e87828756d970e9c25635aa9f71f0a90cc8ff65/crates%2Fcompletion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Flib.rs?ref=6e87828756d970e9c25635aa9f71f0a90cc8ff65", "patch": "@@ -20,7 +20,7 @@ use text_edit::TextEdit;\n use crate::{completions::Completions, context::CompletionContext, item::CompletionKind};\n \n pub use crate::{\n-    config::{CompletionConfig, CompletionResolveCapability},\n+    config::CompletionConfig,\n     item::{CompletionItem, CompletionItemKind, CompletionScore, ImportEdit, InsertTextFormat},\n };\n "}, {"sha": "72c8bfd0921875829790ab26d549c42f9b07571c", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e87828756d970e9c25635aa9f71f0a90cc8ff65/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e87828756d970e9c25635aa9f71f0a90cc8ff65/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=6e87828756d970e9c25635aa9f71f0a90cc8ff65", "patch": "@@ -82,8 +82,8 @@ pub use crate::{\n };\n pub use assists::{Assist, AssistConfig, AssistId, AssistKind};\n pub use completion::{\n-    CompletionConfig, CompletionItem, CompletionItemKind, CompletionResolveCapability,\n-    CompletionScore, ImportEdit, InsertTextFormat,\n+    CompletionConfig, CompletionItem, CompletionItemKind, CompletionScore, ImportEdit,\n+    InsertTextFormat,\n };\n pub use hir::{Documentation, Semantics};\n pub use ide_db::base_db::{"}, {"sha": "3db0d55c5a8e0c4df964a39751ac79737552ea04", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 19, "deletions": 27, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6e87828756d970e9c25635aa9f71f0a90cc8ff65/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e87828756d970e9c25635aa9f71f0a90cc8ff65/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=6e87828756d970e9c25635aa9f71f0a90cc8ff65", "patch": "@@ -1,7 +1,6 @@\n //! Advertizes the capabilities of the LSP Server.\n use std::env;\n \n-use ide::CompletionResolveCapability;\n use lsp_types::{\n     CallHierarchyServerCapability, ClientCapabilities, CodeActionKind, CodeActionOptions,\n     CodeActionProviderCapability, CodeLensOptions, CompletionOptions,\n@@ -14,7 +13,6 @@ use lsp_types::{\n     WorkDoneProgressOptions, WorkspaceFileOperationsServerCapabilities,\n     WorkspaceServerCapabilities,\n };\n-use rustc_hash::FxHashSet;\n use serde_json::json;\n \n use crate::semantic_tokens;\n@@ -118,37 +116,31 @@ pub fn server_capabilities(client_caps: &ClientCapabilities) -> ServerCapabiliti\n }\n \n fn completions_resolve_provider(client_caps: &ClientCapabilities) -> Option<bool> {\n-    if enabled_completions_resolve_capabilities(client_caps)?.is_empty() {\n+    if completion_item_edit_resolve(client_caps) {\n+        Some(true)\n+    } else {\n         log::info!(\"No `additionalTextEdits` completion resolve capability was found in the client capabilities, autoimport completion is disabled\");\n         None\n-    } else {\n-        Some(true)\n     }\n }\n \n /// Parses client capabilities and returns all completion resolve capabilities rust-analyzer supports.\n-pub(crate) fn enabled_completions_resolve_capabilities(\n-    caps: &ClientCapabilities,\n-) -> Option<FxHashSet<CompletionResolveCapability>> {\n-    Some(\n-        caps.text_document\n-            .as_ref()?\n-            .completion\n-            .as_ref()?\n-            .completion_item\n-            .as_ref()?\n-            .resolve_support\n-            .as_ref()?\n-            .properties\n-            .iter()\n-            .filter_map(|cap_string| match cap_string.as_str() {\n-                \"additionalTextEdits\" => Some(CompletionResolveCapability::AdditionalTextEdits),\n-                \"detail\" => Some(CompletionResolveCapability::Detail),\n-                \"documentation\" => Some(CompletionResolveCapability::Documentation),\n-                _unsupported => None,\n-            })\n-            .collect(),\n-    )\n+pub(crate) fn completion_item_edit_resolve(caps: &ClientCapabilities) -> bool {\n+    (|| {\n+        Some(\n+            caps.text_document\n+                .as_ref()?\n+                .completion\n+                .as_ref()?\n+                .completion_item\n+                .as_ref()?\n+                .resolve_support\n+                .as_ref()?\n+                .properties\n+                .iter()\n+                .any(|cap_string| cap_string.as_str() == \"additionalTextEdits\"),\n+        )\n+    })() == Some(true)\n }\n \n fn code_action_capabilities(client_caps: &ClientCapabilities) -> CodeActionProviderCapability {"}, {"sha": "ce9526315698d41bd6719161cf1fde99f09d8c6d", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6e87828756d970e9c25635aa9f71f0a90cc8ff65/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e87828756d970e9c25635aa9f71f0a90cc8ff65/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=6e87828756d970e9c25635aa9f71f0a90cc8ff65", "patch": "@@ -20,7 +20,7 @@ use rustc_hash::FxHashSet;\n use serde::{de::DeserializeOwned, Deserialize};\n use vfs::AbsPathBuf;\n \n-use crate::{caps::enabled_completions_resolve_capabilities, diagnostics::DiagnosticsMapConfig};\n+use crate::{caps::completion_item_edit_resolve, diagnostics::DiagnosticsMapConfig};\n \n config_data! {\n     struct ConfigData {\n@@ -536,12 +536,11 @@ impl Config {\n     pub fn completion(&self) -> CompletionConfig {\n         let mut res = CompletionConfig::default();\n         res.enable_postfix_completions = self.data.completion_postfix_enable;\n-        res.enable_autoimport_completions = self.data.completion_autoimport_enable;\n+        res.enable_autoimport_completions =\n+            self.data.completion_autoimport_enable && completion_item_edit_resolve(&self.caps);\n         res.add_call_parenthesis = self.data.completion_addCallParenthesis;\n         res.add_call_argument_snippets = self.data.completion_addCallArgumentSnippets;\n         res.merge = self.merge_behavior();\n-        res.active_resolve_capabilities =\n-            enabled_completions_resolve_capabilities(&self.caps).unwrap_or_default();\n \n         res.allow_snippets(try_or!(\n             self.caps"}, {"sha": "a7bf0ec6a824a357471a33d13d6d0e7a02d72de2", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6e87828756d970e9c25635aa9f71f0a90cc8ff65/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e87828756d970e9c25635aa9f71f0a90cc8ff65/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=6e87828756d970e9c25635aa9f71f0a90cc8ff65", "patch": "@@ -9,9 +9,8 @@ use std::{\n };\n \n use ide::{\n-    CompletionResolveCapability, FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData,\n-    LineIndex, NavigationTarget, Query, RangeInfo, Runnable, RunnableKind, SearchScope,\n-    SourceChange, SymbolKind, TextEdit,\n+    FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData, LineIndex, NavigationTarget,\n+    Query, RangeInfo, Runnable, RunnableKind, SearchScope, SourceChange, SymbolKind, TextEdit,\n };\n use itertools::Itertools;\n use lsp_server::ErrorCode;\n@@ -634,10 +633,9 @@ pub(crate) fn handle_completion(\n             let mut new_completion_items =\n                 to_proto::completion_item(&line_index, line_endings, item.clone());\n \n-            if completion_config.resolve_additional_edits_lazily() {\n+            if completion_config.enable_autoimport_completions {\n                 for new_item in &mut new_completion_items {\n-                    let _ = fill_resolve_data(&mut new_item.data, &item, &text_document_position)\n-                        .take();\n+                    fill_resolve_data(&mut new_item.data, &item, &text_document_position);\n                 }\n             }\n \n@@ -663,15 +661,6 @@ pub(crate) fn handle_completion_resolve(\n         .into());\n     }\n \n-    // FIXME resolve the other capabilities also?\n-    let completion_config = &snap.config.completion();\n-    if !completion_config\n-        .active_resolve_capabilities\n-        .contains(&CompletionResolveCapability::AdditionalTextEdits)\n-    {\n-        return Ok(original_completion);\n-    }\n-\n     let resolve_data = match original_completion\n         .data\n         .take()\n@@ -690,7 +679,7 @@ pub(crate) fn handle_completion_resolve(\n     let additional_edits = snap\n         .analysis\n         .resolve_completion_edits(\n-            &completion_config,\n+            &snap.config.completion(),\n             FilePosition { file_id, offset },\n             &resolve_data.full_import_path,\n             resolve_data.imported_name,"}]}