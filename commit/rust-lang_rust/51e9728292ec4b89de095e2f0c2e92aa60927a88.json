{"sha": "51e9728292ec4b89de095e2f0c2e92aa60927a88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxZTk3MjgyOTJlYzRiODlkZTA5NWUyZjBjMmU5MmFhNjA5MjdhODg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-28T22:58:22Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-08-13T18:31:47Z"}, "message": "std: Change time::MAX to time::MAX_DURATION, etc.", "tree": {"sha": "217b57145b2c7e699a7936fbda1197fd56f616c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/217b57145b2c7e699a7936fbda1197fd56f616c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51e9728292ec4b89de095e2f0c2e92aa60927a88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51e9728292ec4b89de095e2f0c2e92aa60927a88", "html_url": "https://github.com/rust-lang/rust/commit/51e9728292ec4b89de095e2f0c2e92aa60927a88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51e9728292ec4b89de095e2f0c2e92aa60927a88/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cb2093f7496a2539e343677b6f7f5dd2fa5f091", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cb2093f7496a2539e343677b6f7f5dd2fa5f091", "html_url": "https://github.com/rust-lang/rust/commit/6cb2093f7496a2539e343677b6f7f5dd2fa5f091"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "8050891e2a921fa18c60cbcf331ce8f0be3b67f8", "filename": "src/libstd/time.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/51e9728292ec4b89de095e2f0c2e92aa60927a88/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51e9728292ec4b89de095e2f0c2e92aa60927a88/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=51e9728292ec4b89de095e2f0c2e92aa60927a88", "patch": "@@ -44,9 +44,9 @@ pub struct Duration {\n }\n \n /// The minimum possible `Duration`.\n-pub static MIN: Duration = Duration { days: MIN_DAYS, secs: 0, nanos: 0 };\n+pub static MIN_DURATION: Duration = Duration { days: MIN_DAYS, secs: 0, nanos: 0 };\n /// The maximum possible `Duration`.\n-pub static MAX: Duration = Duration { days: MAX_DAYS, secs: SECS_PER_DAY as u32 - 1,\n+pub static MAX_DURATION: Duration = Duration { days: MAX_DAYS, secs: SECS_PER_DAY as u32 - 1,\n                                       nanos: NANOS_PER_SEC as u32 - 1 };\n \n impl Duration {\n@@ -280,8 +280,8 @@ impl Duration {\n }\n \n impl num::Bounded for Duration {\n-    #[inline] fn min_value() -> Duration { MIN }\n-    #[inline] fn max_value() -> Duration { MAX }\n+    #[inline] fn min_value() -> Duration { MIN_DURATION }\n+    #[inline] fn max_value() -> Duration { MAX_DURATION }\n }\n \n impl num::Zero for Duration {\n@@ -502,7 +502,7 @@ fn div_rem_64(this: i64, other: i64) -> (i64, i64) {\n \n #[cfg(test)]\n mod tests {\n-    use super::{Duration, MIN_DAYS, MAX_DAYS, MIN, MAX};\n+    use super::{Duration, MIN_DAYS, MAX_DAYS, MIN_DURATION, MAX_DURATION};\n     use std::{i32, i64};\n \n     #[test]\n@@ -534,8 +534,8 @@ mod tests {\n         assert_eq!(Duration::new(-1, -2, -3_004_005).num_days(), -1);\n         assert_eq!(Duration::days(i32::MAX).num_days(), i32::MAX);\n         assert_eq!(Duration::days(i32::MIN).num_days(), i32::MIN);\n-        assert_eq!(MAX.num_days(), MAX_DAYS);\n-        assert_eq!(MIN.num_days(), MIN_DAYS);\n+        assert_eq!(MAX_DURATION.num_days(), MAX_DAYS);\n+        assert_eq!(MIN_DURATION.num_days(), MIN_DAYS);\n     }\n \n     #[test]\n@@ -551,8 +551,8 @@ mod tests {\n         assert_eq!(Duration::new(-1, -2, -3_004_005).num_seconds(), -86402);\n         assert_eq!(Duration::seconds(i32::MAX).num_seconds(), i32::MAX as i64);\n         assert_eq!(Duration::seconds(i32::MIN).num_seconds(), i32::MIN as i64);\n-        assert_eq!(MAX.num_seconds(), (MAX_DAYS as i64 + 1) * 86400 - 1);\n-        assert_eq!(MIN.num_seconds(), MIN_DAYS as i64 * 86400);\n+        assert_eq!(MAX_DURATION.num_seconds(), (MAX_DAYS as i64 + 1) * 86400 - 1);\n+        assert_eq!(MIN_DURATION.num_seconds(), MIN_DAYS as i64 * 86400);\n     }\n \n     #[test]\n@@ -568,8 +568,8 @@ mod tests {\n         assert_eq!(Duration::new(-1, -2, -3_004_005).num_milliseconds(), -86402_003);\n         assert_eq!(Duration::milliseconds(i32::MAX).num_milliseconds(), i32::MAX as i64);\n         assert_eq!(Duration::milliseconds(i32::MIN).num_milliseconds(), i32::MIN as i64);\n-        assert_eq!(MAX.num_milliseconds(), (MAX_DAYS as i64 + 1) * 86400_000 - 1);\n-        assert_eq!(MIN.num_milliseconds(), MIN_DAYS as i64 * 86400_000);\n+        assert_eq!(MAX_DURATION.num_milliseconds(), (MAX_DAYS as i64 + 1) * 86400_000 - 1);\n+        assert_eq!(MIN_DURATION.num_milliseconds(), MIN_DAYS as i64 * 86400_000);\n     }\n \n     #[test]\n@@ -585,8 +585,8 @@ mod tests {\n         assert_eq!(Duration::new(-1, -2, -3_004_005).num_microseconds(), Some(-86402_003_004));\n         assert_eq!(Duration::microseconds(i32::MAX).num_microseconds(), Some(i32::MAX as i64));\n         assert_eq!(Duration::microseconds(i32::MIN).num_microseconds(), Some(i32::MIN as i64));\n-        assert_eq!(MAX.num_microseconds(), None);\n-        assert_eq!(MIN.num_microseconds(), None);\n+        assert_eq!(MAX_DURATION.num_microseconds(), None);\n+        assert_eq!(MIN_DURATION.num_microseconds(), None);\n \n         // overflow checks\n         static MICROS_PER_DAY: i64 = 86400_000_000;\n@@ -607,8 +607,8 @@ mod tests {\n         assert_eq!(Duration::new(-1, -2, -3_004_005).num_nanoseconds(), Some(-86402_003_004_005));\n         assert_eq!(Duration::nanoseconds(i32::MAX).num_nanoseconds(), Some(i32::MAX as i64));\n         assert_eq!(Duration::nanoseconds(i32::MIN).num_nanoseconds(), Some(i32::MIN as i64));\n-        assert_eq!(MAX.num_nanoseconds(), None);\n-        assert_eq!(MIN.num_nanoseconds(), None);\n+        assert_eq!(MAX_DURATION.num_nanoseconds(), None);\n+        assert_eq!(MIN_DURATION.num_nanoseconds(), None);\n \n         // overflow checks\n         static NANOS_PER_DAY: i64 = 86400_000_000_000;"}]}