{"sha": "3a795fba038bf64452abb8c2240fd1221185e274", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNzk1ZmJhMDM4YmY2NDQ1MmFiYjhjMjI0MGZkMTIyMTE4NWUyNzQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-13T20:36:35Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-03T01:23:46Z"}, "message": "On type mismatch involving associated type, suggest constraint\n\nWhen an associated type is found when a specific type was expected, if\npossible provide a structured suggestion constraining the associated\ntype in a bound.\n\n```\nerror[E0271]: type mismatch resolving `<T as Foo>::Y == i32`\n  --> $DIR/associated-types-multiple-types-one-trait.rs:13:5\n   |\nLL |     want_y(t);\n   |     ^^^^^^ expected `i32`, found associated type\n...\nLL | fn want_y<T:Foo<Y=i32>>(t: &T) { }\n   |                 ----- required by this bound in `want_y`\n   |\n   = note:         expected type `i32`\n           found associated type `<T as Foo>::Y`\nhelp: consider constraining the associated type `<T as Foo>::Y` to `i32`\n   |\nLL | fn have_x_want_y<T:Foo<X=u32, Y = i32>>(t: &T)\n   |                             ^^^^^^^^^\n```\n\n```\nerror[E0308]: mismatched types\n  --> $DIR/trait-with-missing-associated-type-restriction.rs:12:9\n   |\nLL |     qux(x.func())\n   |         ^^^^^^^^ expected `usize`, found associated type\n   |\n   = note:         expected type `usize`\n           found associated type `<impl Trait as Trait>::A`\nhelp: consider constraining the associated type `<impl Trait as Trait>::A` to `usize`\n   |\nLL | fn foo(x: impl Trait<A = usize>) {\n   |                     ^^^^^^^^^^\n```", "tree": {"sha": "defaca2ad8117c2d681ab31e0e44b5b18b54f1a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/defaca2ad8117c2d681ab31e0e44b5b18b54f1a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a795fba038bf64452abb8c2240fd1221185e274", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a795fba038bf64452abb8c2240fd1221185e274", "html_url": "https://github.com/rust-lang/rust/commit/3a795fba038bf64452abb8c2240fd1221185e274", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a795fba038bf64452abb8c2240fd1221185e274/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f05a5240440b3eaef1684a7965860fab40301947", "url": "https://api.github.com/repos/rust-lang/rust/commits/f05a5240440b3eaef1684a7965860fab40301947", "html_url": "https://github.com/rust-lang/rust/commit/f05a5240440b3eaef1684a7965860fab40301947"}], "stats": {"total": 535, "additions": 469, "deletions": 66}, "files": [{"sha": "eb5a5702c456e0775ee871c89a9892f14cd33699", "filename": "src/librustc_middle/ty/error.rs", "status": "modified", "additions": 134, "deletions": 10, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/3a795fba038bf64452abb8c2240fd1221185e274/src%2Flibrustc_middle%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a795fba038bf64452abb8c2240fd1221185e274/src%2Flibrustc_middle%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ferror.rs?ref=3a795fba038bf64452abb8c2240fd1221185e274", "patch": "@@ -4,7 +4,7 @@ use rustc_errors::{pluralize, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_span::symbol::sym;\n-use rustc_span::Span;\n+use rustc_span::{BytePos, Span};\n use rustc_target::spec::abi;\n \n use std::borrow::Cow;\n@@ -401,7 +401,10 @@ impl<'tcx> TyCtxt<'tcx> {\n                     (ty::Param(_), ty::Projection(_)) | (ty::Projection(_), ty::Param(_)) => {\n                         db.note(\"you might be missing a type parameter or trait bound\");\n                     }\n-                    (ty::Param(p), _) | (_, ty::Param(p)) => {\n+                    (ty::Param(p), ty::Dynamic(..))\n+                    | (ty::Dynamic(..), ty::Param(p))\n+                    | (ty::Param(p), ty::Opaque(..))\n+                    | (ty::Opaque(..), ty::Param(p)) => {\n                         let generics = self.generics_of(body_owner_def_id);\n                         let p_span = self.def_span(generics.type_param(p, self).def_id);\n                         if !sp.contains(p_span) {\n@@ -441,11 +444,18 @@ impl<T> Trait<T> for X {\n                                  #traits-as-parameters\",\n                         );\n                     }\n+                    (ty::Param(p), _) | (_, ty::Param(p)) => {\n+                        let generics = self.generics_of(body_owner_def_id);\n+                        let p_span = self.def_span(generics.type_param(p, self).def_id);\n+                        if !sp.contains(p_span) {\n+                            db.span_label(p_span, \"this type parameter\");\n+                        }\n+                    }\n                     (ty::Projection(_), _) => {\n                         db.note(&format!(\n                             \"consider constraining the associated type `{}` to `{}` or calling a \\\n-                             method that returns `{}`\",\n-                            values.expected, values.found, values.expected,\n+                             method that returns `{0}`\",\n+                            values.expected, values.found,\n                         ));\n                         if self.sess.teach(&db.get_code().unwrap()) {\n                             db.help(\n@@ -470,15 +480,18 @@ impl Trait for X {\n                                  https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\",\n                         );\n                     }\n-                    (_, ty::Projection(_)) => {\n-                        db.note(&format!(\n+                    (_, ty::Projection(proj_ty)) => {\n+                        let msg = format!(\n                             \"consider constraining the associated type `{}` to `{}`\",\n                             values.found, values.expected,\n-                        ));\n-                        db.note(\n-                            \"for more information, visit \\\n-                                 https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\",\n                         );\n+                        if !self.suggest_constraint(db, &msg, body_owner_def_id, proj_ty, values) {\n+                            db.help(&msg);\n+                            db.note(\n+                                \"for more information, visit \\\n+                                https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\",\n+                            );\n+                        }\n                     }\n                     _ => {}\n                 }\n@@ -513,4 +526,115 @@ impl Trait for X {\n             _ => {}\n         }\n     }\n+\n+    fn suggest_constraint(\n+        &self,\n+        db: &mut DiagnosticBuilder<'_>,\n+        msg: &str,\n+        body_owner_def_id: DefId,\n+        proj_ty: &ty::ProjectionTy<'tcx>,\n+        values: &ExpectedFound<Ty<'tcx>>,\n+    ) -> bool {\n+        let assoc = self.associated_item(proj_ty.item_def_id);\n+        let trait_ref = proj_ty.trait_ref(*self);\n+        if let Some(item) = self.hir().get_if_local(body_owner_def_id) {\n+            if let Some(hir_generics) = item.generics() {\n+                // Get the `DefId` for the type parameter corresponding to `A` in `<A as T>::Foo`.\n+                // This will also work for `impl Trait`.\n+                let def_id = if let ty::Param(param_ty) = proj_ty.self_ty().kind {\n+                    let generics = self.generics_of(body_owner_def_id);\n+                    generics.type_param(&param_ty, *self).def_id\n+                } else {\n+                    return false;\n+                };\n+\n+                // First look in the `where` clause, as this might be\n+                // `fn foo<T>(x: T) where T: Trait`.\n+                for predicate in hir_generics.where_clause.predicates {\n+                    if let hir::WherePredicate::BoundPredicate(pred) = predicate {\n+                        if let hir::TyKind::Path(hir::QPath::Resolved(None, path)) =\n+                            pred.bounded_ty.kind\n+                        {\n+                            if path.res.opt_def_id() == Some(def_id) {\n+                                // This predicate is binding type param `A` in `<A as T>::Foo` to\n+                                // something, potentially `T`.\n+                            } else {\n+                                continue;\n+                            }\n+                        } else {\n+                            continue;\n+                        }\n+\n+                        if self.constrain_associated_type_structured_suggestion(\n+                            db,\n+                            &trait_ref,\n+                            pred.bounds,\n+                            &assoc,\n+                            values,\n+                            msg,\n+                        ) {\n+                            return true;\n+                        }\n+                    }\n+                }\n+                for param in hir_generics.params {\n+                    if self.hir().opt_local_def_id(param.hir_id).map(|id| id.to_def_id())\n+                        == Some(def_id)\n+                    {\n+                        // This is type param `A` in `<A as T>::Foo`.\n+                        return self.constrain_associated_type_structured_suggestion(\n+                            db,\n+                            &trait_ref,\n+                            param.bounds,\n+                            &assoc,\n+                            values,\n+                            msg,\n+                        );\n+                    }\n+                }\n+            }\n+        }\n+        false\n+    }\n+\n+    fn constrain_associated_type_structured_suggestion(\n+        &self,\n+        db: &mut DiagnosticBuilder<'_>,\n+        trait_ref: &ty::TraitRef<'tcx>,\n+        bounds: hir::GenericBounds<'_>,\n+        assoc: &ty::AssocItem,\n+        values: &ExpectedFound<Ty<'tcx>>,\n+        msg: &str,\n+    ) -> bool {\n+        for bound in bounds {\n+            match bound {\n+                hir::GenericBound::Trait(ptr, hir::TraitBoundModifier::None) => {\n+                    // Relate the type param against `T` in `<A as T>::Foo`.\n+                    if ptr.trait_ref.trait_def_id() == Some(trait_ref.def_id) {\n+                        if let Ok(has_params) = self\n+                            .sess\n+                            .source_map()\n+                            .span_to_snippet(ptr.span)\n+                            .map(|snippet| snippet.ends_with('>'))\n+                        {\n+                            let (span, sugg) = if has_params {\n+                                let pos = ptr.span.hi() - BytePos(1);\n+                                let span = Span::new(pos, pos, ptr.span.ctxt());\n+                                (span, format!(\", {} = {}\", assoc.ident, values.expected))\n+                            } else {\n+                                (\n+                                    ptr.span.shrink_to_hi(),\n+                                    format!(\"<{} = {}>\", assoc.ident, values.expected),\n+                                )\n+                            };\n+                            db.span_suggestion(span, msg, sugg, Applicability::MaybeIncorrect);\n+                            return true;\n+                        }\n+                    }\n+                }\n+                _ => {}\n+            }\n+        }\n+        false\n+    }\n }"}, {"sha": "dffa4780a09ff0c41441b39ff11fcbb6ba81514a", "filename": "src/test/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=3a795fba038bf64452abb8c2240fd1221185e274", "patch": "@@ -8,8 +8,10 @@ LL |     let _: Bar = x.boo();\n    |\n    = note:       expected struct `Bar`\n            found associated type `<I as Foo>::A`\n-   = note: consider constraining the associated type `<I as Foo>::A` to `Bar`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+help: consider constraining the associated type `<I as Foo>::A` to `Bar`\n+   |\n+LL | fn foo2<I: Foo<A = Bar>>(x: I) {\n+   |               ^^^^^^^^^\n \n error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n   --> $DIR/associated-types-eq-3.rs:38:5"}, {"sha": "db35c1af171471dcae59345f24764f19220c3f1b", "filename": "src/test/ui/associated-types/associated-types-issue-20346.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr?ref=3a795fba038bf64452abb8c2240fd1221185e274", "patch": "@@ -12,8 +12,6 @@ LL |     is_iterator_of::<Option<T>, _>(&adapter);\n    |\n    = note: expected enum `std::option::Option<T>`\n               found type `T`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "b8f20d00ff8e45bee6d94ab34a55148a8541c0e1", "filename": "src/test/ui/associated-types/associated-types-multiple-types-one-trait.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr?ref=3a795fba038bf64452abb8c2240fd1221185e274", "patch": "@@ -9,8 +9,10 @@ LL | fn want_y<T:Foo<Y=i32>>(t: &T) { }\n    |\n    = note:         expected type `i32`\n            found associated type `<T as Foo>::Y`\n-   = note: consider constraining the associated type `<T as Foo>::Y` to `i32`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+help: consider constraining the associated type `<T as Foo>::Y` to `i32`\n+   |\n+LL | fn have_x_want_y<T:Foo<X=u32, Y = i32>>(t: &T)\n+   |                             ^^^^^^^^^\n \n error[E0271]: type mismatch resolving `<T as Foo>::X == u32`\n   --> $DIR/associated-types-multiple-types-one-trait.rs:18:5\n@@ -23,8 +25,10 @@ LL | fn want_x<T:Foo<X=u32>>(t: &T) { }\n    |\n    = note:         expected type `u32`\n            found associated type `<T as Foo>::X`\n-   = note: consider constraining the associated type `<T as Foo>::X` to `u32`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+help: consider constraining the associated type `<T as Foo>::X` to `u32`\n+   |\n+LL | fn have_y_want_x<T:Foo<Y=i32, X = u32>>(t: &T)\n+   |                             ^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4a839ac4bcb6adfb8d746498f3051dac6c861135", "filename": "src/test/ui/generic-associated-types/iterable.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr?ref=3a795fba038bf64452abb8c2240fd1221185e274", "patch": "@@ -6,7 +6,7 @@ LL |     type Item<'a> where T: 'a = <std::slice::Iter<'a, T> as Iterator>::Item\n    |\n    = note:    expected reference `&T`\n            found associated type `<std::vec::Vec<T> as Iterable>::Item<'_>`\n-   = note: consider constraining the associated type `<std::vec::Vec<T> as Iterable>::Item<'_>` to `&_`\n+   = help: consider constraining the associated type `<std::vec::Vec<T> as Iterable>::Item<'_>` to `&_`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `for<'a> <<[T] as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <[T] as Iterable>::Item<'a>`\n@@ -17,7 +17,7 @@ LL |     type Item<'a> where T: 'a = <std::slice::Iter<'a, T> as Iterator>::Item\n    |\n    = note:    expected reference `&T`\n            found associated type `<[T] as Iterable>::Item<'_>`\n-   = note: consider constraining the associated type `<[T] as Iterable>::Item<'_>` to `&_`\n+   = help: consider constraining the associated type `<[T] as Iterable>::Item<'_>` to `&_`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `for<'a> <<std::vec::Vec<T> as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <std::vec::Vec<T> as Iterable>::Item<'a>`"}, {"sha": "1c7bfa65d7cfe5916c830b24dec19bb5bbeb0ed0", "filename": "src/test/ui/hrtb/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr?ref=3a795fba038bf64452abb8c2240fd1221185e274", "patch": "@@ -6,7 +6,7 @@ LL |     let v = Unit2.m(\n    |\n    = note:       expected struct `Unit4`\n            found associated type `<_ as Ty<'_>>::V`\n-   = note: consider constraining the associated type `<_ as Ty<'_>>::V` to `Unit4`\n+   = help: consider constraining the associated type `<_ as Ty<'_>>::V` to `Unit4`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39] as std::ops::FnOnce<((&u8,),)>>::Output == Unit3`"}, {"sha": "f5092044627f62631135f9ba062edef49eef387b", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=3a795fba038bf64452abb8c2240fd1221185e274", "patch": "@@ -14,9 +14,11 @@ LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n    |\n    = note:         expected type `()`\n            found associated type `<T as impl_trait::Trait>::Assoc`\n-   = note: consider constraining the associated type `<T as impl_trait::Trait>::Assoc` to `()`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n    = note: the return type of a function must have a statically known size\n+help: consider constraining the associated type `<T as impl_trait::Trait>::Assoc` to `()`\n+   |\n+LL |     fn foo_fail<T: Trait<Assoc = ()>>() -> impl FooLike<Output=T::Assoc> {\n+   |                         ^^^^^^^^^^^^\n \n error: `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n   --> $DIR/bound-normalization-fail.rs:43:41\n@@ -32,9 +34,11 @@ LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n    |\n    = note:         expected type `()`\n            found associated type `<T as lifetimes::Trait<'static>>::Assoc`\n-   = note: consider constraining the associated type `<T as lifetimes::Trait<'static>>::Assoc` to `()`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n    = note: the return type of a function must have a statically known size\n+help: consider constraining the associated type `<T as lifetimes::Trait<'static>>::Assoc` to `()`\n+   |\n+LL |     fn foo2_fail<'a, T: Trait<'a, Assoc = ()>>() -> impl FooLike<Output=T::Assoc> {\n+   |                                 ^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors; 1 warning emitted\n "}, {"sha": "2454c218ffc8ba4e6805dbe60971998f655b97bc", "filename": "src/test/ui/impl-trait/equality2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr?ref=3a795fba038bf64452abb8c2240fd1221185e274", "patch": "@@ -25,7 +25,7 @@ LL |     let _: i32 = Leak::leak(hide(0_i32));\n    |\n    = note:         expected type `i32`\n            found associated type `<impl Foo as Leak>::T`\n-   = note: consider constraining the associated type `<impl Foo as Leak>::T` to `i32`\n+   = help: consider constraining the associated type `<impl Foo as Leak>::T` to `i32`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types"}, {"sha": "a12b01b4d2b0d4e9c161fd3456aa1941ae30f1e3", "filename": "src/test/ui/impl-trait/universal-mismatched-type.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr?ref=3a795fba038bf64452abb8c2240fd1221185e274", "patch": "@@ -10,8 +10,6 @@ LL |     x\n    |\n    = note:      expected struct `std::string::String`\n            found type parameter `impl Debug`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "3f1b955dddb2b2de74e2a297d0216be2cf0f3504", "filename": "src/test/ui/issues/issue-13853.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr?ref=3a795fba038bf64452abb8c2240fd1221185e274", "patch": "@@ -9,8 +9,6 @@ LL |         self.iter()\n    |\n    = note: expected type parameter `I`\n                       found struct `std::slice::Iter<'_, N>`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0599]: no method named `iter` found for reference `&G` in the current scope\n   --> $DIR/issue-13853.rs:27:23"}, {"sha": "3bcc50ded84256c3aab89ed97229ecb66b51e59b", "filename": "src/test/ui/issues/issue-20225.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr?ref=3a795fba038bf64452abb8c2240fd1221185e274", "patch": "@@ -8,8 +8,6 @@ LL |   extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n    |\n    = note: expected fn pointer `extern \"rust-call\" fn(&Foo, (&'a T,))`\n               found fn pointer `extern \"rust-call\" fn(&Foo, (T,))`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0053]: method `call_mut` has an incompatible type for trait\n   --> $DIR/issue-20225.rs:11:3\n@@ -21,8 +19,6 @@ LL |   extern \"rust-call\" fn call_mut(&mut self, (_,): (T,)) {}\n    |\n    = note: expected fn pointer `extern \"rust-call\" fn(&mut Foo, (&'a T,))`\n               found fn pointer `extern \"rust-call\" fn(&mut Foo, (T,))`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0053]: method `call_once` has an incompatible type for trait\n   --> $DIR/issue-20225.rs:18:3\n@@ -35,8 +31,6 @@ LL |   extern \"rust-call\" fn call_once(self, (_,): (T,)) {}\n    |\n    = note: expected fn pointer `extern \"rust-call\" fn(Foo, (&'a T,))`\n               found fn pointer `extern \"rust-call\" fn(Foo, (T,))`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to 3 previous errors\n "}, {"sha": "58e85ec700d2df9ef2f93a20fe4846e456d885e5", "filename": "src/test/ui/issues/issue-69306.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fissues%2Fissue-69306.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fissues%2Fissue-69306.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69306.stderr?ref=3a795fba038bf64452abb8c2240fd1221185e274", "patch": "@@ -8,8 +8,6 @@ LL |     const C: S0<u8> = Self(0);\n    |\n    = note: expected type parameter `T`\n                         found type `{integer}`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0308]: mismatched types\n   --> $DIR/issue-69306.rs:5:23\n@@ -21,8 +19,6 @@ LL |     const C: S0<u8> = Self(0);\n    |\n    = note: expected struct `S0<u8>`\n               found struct `S0<T>`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0308]: mismatched types\n   --> $DIR/issue-69306.rs:10:14\n@@ -35,8 +31,6 @@ LL |         Self(0);\n    |\n    = note: expected type parameter `T`\n                         found type `{integer}`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0308]: mismatched types\n   --> $DIR/issue-69306.rs:27:14\n@@ -49,8 +43,6 @@ LL |         Self(0);\n    |\n    = note: expected type parameter `T`\n                         found type `{integer}`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0308]: mismatched types\n   --> $DIR/issue-69306.rs:33:32\n@@ -62,8 +54,6 @@ LL |     const C: S1<u8, u8> = Self(0, 1);\n    |\n    = note: expected type parameter `T`\n                         found type `{integer}`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0308]: mismatched types\n   --> $DIR/issue-69306.rs:33:27\n@@ -75,8 +65,6 @@ LL |     const C: S1<u8, u8> = Self(0, 1);\n    |\n    = note: expected struct `S1<u8, _>`\n               found struct `S1<T, _>`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0308]: mismatched types\n   --> $DIR/issue-69306.rs:41:14"}, {"sha": "9f4e4398984aed92cd5507aafdb11c567b9f0964", "filename": "src/test/ui/mismatched_types/issue-35030.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr?ref=3a795fba038bf64452abb8c2240fd1221185e274", "patch": "@@ -9,8 +9,6 @@ LL |         Some(true)\n    |\n    = note: expected type parameter `bool` (type parameter `bool`)\n                         found type `bool` (`bool`)\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "4344fe23bbcc4e9aa432ea3f75eaa663e64c9aca", "filename": "src/test/ui/specialization/specialization-default-projection.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr?ref=3a795fba038bf64452abb8c2240fd1221185e274", "patch": "@@ -25,7 +25,7 @@ LL |     generic::<()>()\n    |\n    = note:    expected unit type `()`\n            found associated type `<() as Foo>::Assoc`\n-   = note: consider constraining the associated type `<() as Foo>::Assoc` to `()`\n+   = help: consider constraining the associated type `<() as Foo>::Assoc` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to 2 previous errors"}, {"sha": "d66aaa962748933ea4bab62322e393b59e634c7b", "filename": "src/test/ui/specialization/specialization-default-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.stderr?ref=3a795fba038bf64452abb8c2240fd1221185e274", "patch": "@@ -21,7 +21,7 @@ LL |     Example::generate(t)\n    |\n    = note:       expected struct `std::boxed::Box<T>`\n            found associated type `<T as Example>::Output`\n-   = note: consider constraining the associated type `<T as Example>::Output` to `std::boxed::Box<T>`\n+   = help: consider constraining the associated type `<T as Example>::Output` to `std::boxed::Box<T>`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to 2 previous errors"}, {"sha": "0e68e81d7ab8ed4876355676e188b27b931ede82", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=3a795fba038bf64452abb8c2240fd1221185e274", "patch": "@@ -12,8 +12,6 @@ LL |     x\n    |\n    = note:      expected struct `std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = i32> + std::marker::Send + 'static)>>`\n            found type parameter `F`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0308]: mismatched types\n   --> $DIR/expected-boxed-future-isnt-pinned.rs:18:5"}, {"sha": "8ef7e34ab30501d57f556e278e41de7627f20781", "filename": "src/test/ui/suggestions/trait-with-missing-associated-type-restriction-fixable.fixed", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction-fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction-fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction-fixable.fixed?ref=3a795fba038bf64452abb8c2240fd1221185e274", "patch": "@@ -0,0 +1,43 @@\n+// run-rustfix\n+#![allow(unused)] // for the fixed file\n+\n+trait Trait<T = Self> {\n+    type A;\n+\n+    fn func(&self) -> Self::A;\n+}\n+\n+struct S<T>(T);\n+impl<K> S<K> {\n+    fn foo<'a, T: Trait + 'a>(&self, _: impl Trait, x: impl Trait<A = usize>, _: T) {\n+        qux(x.func()) //~ ERROR mismatched types\n+    }\n+\n+    fn ban<T>(x: T) where T: Trait<A = usize> {\n+        qux(x.func()) //~ ERROR mismatched types\n+    }\n+}\n+\n+fn foo<'a, T: Trait + 'a>(_: impl Trait, x: impl Trait<A = usize>, _: T) {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn bar<T: Trait<A = usize>>(x: T) {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn foo2(x: impl Trait<i32, A = usize>) {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn bar2<T: Trait<i32, A = usize>>(x: T) {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn ban<T>(x: T) where T: Trait<A = usize> {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn qux(_: usize) {}\n+\n+fn main() {}"}, {"sha": "7bd38d0d45d90c1314bb0aeea83487b6c6a908c2", "filename": "src/test/ui/suggestions/trait-with-missing-associated-type-restriction-fixable.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction-fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction-fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction-fixable.rs?ref=3a795fba038bf64452abb8c2240fd1221185e274", "patch": "@@ -0,0 +1,43 @@\n+// run-rustfix\n+#![allow(unused)] // for the fixed file\n+\n+trait Trait<T = Self> {\n+    type A;\n+\n+    fn func(&self) -> Self::A;\n+}\n+\n+struct S<T>(T);\n+impl<K> S<K> {\n+    fn foo<'a, T: Trait + 'a>(&self, _: impl Trait, x: impl Trait, _: T) {\n+        qux(x.func()) //~ ERROR mismatched types\n+    }\n+\n+    fn ban<T>(x: T) where T: Trait {\n+        qux(x.func()) //~ ERROR mismatched types\n+    }\n+}\n+\n+fn foo<'a, T: Trait + 'a>(_: impl Trait, x: impl Trait, _: T) {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn bar<T: Trait>(x: T) {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn foo2(x: impl Trait<i32>) {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn bar2<T: Trait<i32>>(x: T) {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn ban<T>(x: T) where T: Trait {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn qux(_: usize) {}\n+\n+fn main() {}"}, {"sha": "f785f7b84a76fae8bef31422b5d82344546c9e43", "filename": "src/test/ui/suggestions/trait-with-missing-associated-type-restriction-fixable.stderr", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction-fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction-fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction-fixable.stderr?ref=3a795fba038bf64452abb8c2240fd1221185e274", "patch": "@@ -0,0 +1,94 @@\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:13:13\n+   |\n+LL |         qux(x.func())\n+   |             ^^^^^^^^ expected `usize`, found associated type\n+   |\n+   = note:         expected type `usize`\n+           found associated type `<impl Trait as Trait>::A`\n+help: consider constraining the associated type `<impl Trait as Trait>::A` to `usize`\n+   |\n+LL |     fn foo<'a, T: Trait + 'a>(&self, _: impl Trait, x: impl Trait<A = usize>, _: T) {\n+   |                                                                  ^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:17:13\n+   |\n+LL |         qux(x.func())\n+   |             ^^^^^^^^ expected `usize`, found associated type\n+   |\n+   = note:         expected type `usize`\n+           found associated type `<T as Trait>::A`\n+help: consider constraining the associated type `<T as Trait>::A` to `usize`\n+   |\n+LL |     fn ban<T>(x: T) where T: Trait<A = usize> {\n+   |                                   ^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:22:9\n+   |\n+LL |     qux(x.func())\n+   |         ^^^^^^^^ expected `usize`, found associated type\n+   |\n+   = note:         expected type `usize`\n+           found associated type `<impl Trait as Trait>::A`\n+help: consider constraining the associated type `<impl Trait as Trait>::A` to `usize`\n+   |\n+LL | fn foo<'a, T: Trait + 'a>(_: impl Trait, x: impl Trait<A = usize>, _: T) {\n+   |                                                       ^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:26:9\n+   |\n+LL |     qux(x.func())\n+   |         ^^^^^^^^ expected `usize`, found associated type\n+   |\n+   = note:         expected type `usize`\n+           found associated type `<T as Trait>::A`\n+help: consider constraining the associated type `<T as Trait>::A` to `usize`\n+   |\n+LL | fn bar<T: Trait<A = usize>>(x: T) {\n+   |                ^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:30:9\n+   |\n+LL |     qux(x.func())\n+   |         ^^^^^^^^ expected `usize`, found associated type\n+   |\n+   = note:         expected type `usize`\n+           found associated type `<impl Trait<i32> as Trait<i32>>::A`\n+help: consider constraining the associated type `<impl Trait<i32> as Trait<i32>>::A` to `usize`\n+   |\n+LL | fn foo2(x: impl Trait<i32, A = usize>) {\n+   |                          ^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:34:9\n+   |\n+LL |     qux(x.func())\n+   |         ^^^^^^^^ expected `usize`, found associated type\n+   |\n+   = note:         expected type `usize`\n+           found associated type `<T as Trait<i32>>::A`\n+help: consider constraining the associated type `<T as Trait<i32>>::A` to `usize`\n+   |\n+LL | fn bar2<T: Trait<i32, A = usize>>(x: T) {\n+   |                     ^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:38:9\n+   |\n+LL |     qux(x.func())\n+   |         ^^^^^^^^ expected `usize`, found associated type\n+   |\n+   = note:         expected type `usize`\n+           found associated type `<T as Trait>::A`\n+help: consider constraining the associated type `<T as Trait>::A` to `usize`\n+   |\n+LL | fn ban<T>(x: T) where T: Trait<A = usize> {\n+   |                               ^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "1166785d7399652c789187c652cd15bf8cd2f5ba", "filename": "src/test/ui/suggestions/trait-with-missing-associated-type-restriction.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.rs?ref=3a795fba038bf64452abb8c2240fd1221185e274", "patch": "@@ -0,0 +1,41 @@\n+// These are all the possible variations of this error I could think of for.\n+// `trait-with-missing-associated-type-restriction-fixable.rs` contains the subset of these that\n+// can be fixed with `rustfix`.\n+\n+trait Trait<T = Self> {\n+    type A;\n+\n+    fn func(&self) -> Self::A;\n+}\n+\n+fn foo(_: impl Trait, x: impl Trait) {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn bar<T: Trait>(x: T) {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn foo2(x: impl Trait<i32>) {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn bar2<T: Trait<i32>>(x: T) {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn baz<D: std::fmt::Debug, T: Trait<A = D>>(x: T) {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn bat(x: &mut dyn Trait<(), A = ()>) {\n+    qux(x) //~ ERROR mismatched types\n+}\n+\n+fn ban<T>(x: T) where T: Trait {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn qux(_: usize) {}\n+\n+fn main() {}"}, {"sha": "08788db6ec9083ca8e07cda10a676c1dab7d08ac", "filename": "src/test/ui/suggestions/trait-with-missing-associated-type-restriction.stderr", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.stderr?ref=3a795fba038bf64452abb8c2240fd1221185e274", "patch": "@@ -0,0 +1,88 @@\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:12:9\n+   |\n+LL |     qux(x.func())\n+   |         ^^^^^^^^ expected `usize`, found associated type\n+   |\n+   = note:         expected type `usize`\n+           found associated type `<impl Trait as Trait>::A`\n+help: consider constraining the associated type `<impl Trait as Trait>::A` to `usize`\n+   |\n+LL | fn foo(_: impl Trait, x: impl Trait<A = usize>) {\n+   |                                    ^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:16:9\n+   |\n+LL |     qux(x.func())\n+   |         ^^^^^^^^ expected `usize`, found associated type\n+   |\n+   = note:         expected type `usize`\n+           found associated type `<T as Trait>::A`\n+help: consider constraining the associated type `<T as Trait>::A` to `usize`\n+   |\n+LL | fn bar<T: Trait<A = usize>>(x: T) {\n+   |                ^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:20:9\n+   |\n+LL |     qux(x.func())\n+   |         ^^^^^^^^ expected `usize`, found associated type\n+   |\n+   = note:         expected type `usize`\n+           found associated type `<impl Trait<i32> as Trait<i32>>::A`\n+help: consider constraining the associated type `<impl Trait<i32> as Trait<i32>>::A` to `usize`\n+   |\n+LL | fn foo2(x: impl Trait<i32, A = usize>) {\n+   |                          ^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:24:9\n+   |\n+LL |     qux(x.func())\n+   |         ^^^^^^^^ expected `usize`, found associated type\n+   |\n+   = note:         expected type `usize`\n+           found associated type `<T as Trait<i32>>::A`\n+help: consider constraining the associated type `<T as Trait<i32>>::A` to `usize`\n+   |\n+LL | fn bar2<T: Trait<i32, A = usize>>(x: T) {\n+   |                     ^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:28:9\n+   |\n+LL | fn baz<D: std::fmt::Debug, T: Trait<A = D>>(x: T) {\n+   |        - this type parameter\n+LL |     qux(x.func())\n+   |         ^^^^^^^^ expected `usize`, found type parameter `D`\n+   |\n+   = note:        expected type `usize`\n+           found type parameter `D`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:32:9\n+   |\n+LL |     qux(x)\n+   |         ^ expected `usize`, found mutable reference\n+   |\n+   = note:           expected type `usize`\n+           found mutable reference `&mut dyn Trait<(), A = ()>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:36:9\n+   |\n+LL |     qux(x.func())\n+   |         ^^^^^^^^ expected `usize`, found associated type\n+   |\n+   = note:         expected type `usize`\n+           found associated type `<T as Trait>::A`\n+help: consider constraining the associated type `<T as Trait>::A` to `usize`\n+   |\n+LL | fn ban<T>(x: T) where T: Trait<A = usize> {\n+   |                               ^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "caea791e6536b9eb6403f35c66f801a00111cbdb", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a795fba038bf64452abb8c2240fd1221185e274/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr?ref=3a795fba038bf64452abb8c2240fd1221185e274", "patch": "@@ -9,8 +9,6 @@ LL |         Self::TSVariant(());\n    |\n    = note: expected type parameter `T`\n                    found unit type `()`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:15:27\n@@ -35,8 +33,6 @@ LL |         Self::<()>::TSVariant(());\n    |\n    = note: expected type parameter `T`\n                    found unit type `()`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:20:16\n@@ -61,8 +57,6 @@ LL |         Self::SVariant { v: () };\n    |\n    = note: expected type parameter `T`\n                    found unit type `()`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:28:26\n@@ -81,8 +75,6 @@ LL |         Self::SVariant::<()> { v: () };\n    |\n    = note: expected type parameter `T`\n                    found unit type `()`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:31:16\n@@ -101,8 +93,6 @@ LL |         Self::<()>::SVariant { v: () };\n    |\n    = note: expected type parameter `T`\n                    found unit type `()`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:34:16\n@@ -127,8 +117,6 @@ LL |         Self::<()>::SVariant::<()> { v: () };\n    |\n    = note: expected type parameter `T`\n                    found unit type `()`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:41:26"}]}