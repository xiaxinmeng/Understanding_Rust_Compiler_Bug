{"sha": "0a9ea782ebbf4c63db629c9704895e990d8ce1c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhOWVhNzgyZWJiZjRjNjNkYjYyOWM5NzA0ODk1ZTk5MGQ4Y2UxYzc=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-03-14T19:48:36Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-03-14T19:48:36Z"}, "message": "Fix completion of trait items\n\nTrait items should be public by default.", "tree": {"sha": "c7d960445ceca78863217d3e9b5202b2b3b6bea1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7d960445ceca78863217d3e9b5202b2b3b6bea1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a9ea782ebbf4c63db629c9704895e990d8ce1c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a9ea782ebbf4c63db629c9704895e990d8ce1c7", "html_url": "https://github.com/rust-lang/rust/commit/0a9ea782ebbf4c63db629c9704895e990d8ce1c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a9ea782ebbf4c63db629c9704895e990d8ce1c7/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf0c3ec67e0f2bc232924923ef3bd55aa3bd0cbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf0c3ec67e0f2bc232924923ef3bd55aa3bd0cbd", "html_url": "https://github.com/rust-lang/rust/commit/bf0c3ec67e0f2bc232924923ef3bd55aa3bd0cbd"}], "stats": {"total": 91, "additions": 80, "deletions": 11}, "files": [{"sha": "85df07e607cf2d395bcae7d2d1384e99da3b47ec", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0a9ea782ebbf4c63db629c9704895e990d8ce1c7/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a9ea782ebbf4c63db629c9704895e990d8ce1c7/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=0a9ea782ebbf4c63db629c9704895e990d8ce1c7", "patch": "@@ -34,7 +34,8 @@ pub struct FunctionData {\n \n impl FunctionData {\n     pub(crate) fn fn_data_query(db: &impl DefDatabase, func: FunctionId) -> Arc<FunctionData> {\n-        let src = func.lookup(db).source(db);\n+        let loc = func.lookup(db);\n+        let src = loc.source(db);\n         let name = src.value.name().map(|n| n.as_name()).unwrap_or_else(Name::missing);\n         let mut params = Vec::new();\n         let mut has_self_param = false;\n@@ -76,7 +77,9 @@ impl FunctionData {\n             ret_type\n         };\n \n-        let visibility = RawVisibility::from_ast(db, src.map(|s| s.visibility()));\n+        let vis_default = RawVisibility::default_for_container(loc.container);\n+        let visibility =\n+            RawVisibility::from_ast_with_default(db, vis_default, src.map(|s| s.visibility()));\n \n         let sig = FunctionData { name, params, ret_type, has_self_param, visibility };\n         Arc::new(sig)\n@@ -105,10 +108,13 @@ impl TypeAliasData {\n         db: &impl DefDatabase,\n         typ: TypeAliasId,\n     ) -> Arc<TypeAliasData> {\n-        let node = typ.lookup(db).source(db);\n+        let loc = typ.lookup(db);\n+        let node = loc.source(db);\n         let name = node.value.name().map_or_else(Name::missing, |n| n.as_name());\n         let type_ref = node.value.type_ref().map(TypeRef::from_ast);\n-        let visibility = RawVisibility::from_ast(db, node.map(|n| n.visibility()));\n+        let vis_default = RawVisibility::default_for_container(loc.container);\n+        let visibility =\n+            RawVisibility::from_ast_with_default(db, vis_default, node.map(|n| n.visibility()));\n         Arc::new(TypeAliasData { name, type_ref, visibility })\n     }\n }\n@@ -230,22 +236,26 @@ pub struct ConstData {\n \n impl ConstData {\n     pub(crate) fn const_data_query(db: &impl DefDatabase, konst: ConstId) -> Arc<ConstData> {\n-        let node = konst.lookup(db).source(db);\n-        Arc::new(ConstData::new(db, node))\n+        let loc = konst.lookup(db);\n+        let node = loc.source(db);\n+        let vis_default = RawVisibility::default_for_container(loc.container);\n+        Arc::new(ConstData::new(db, vis_default, node))\n     }\n \n     pub(crate) fn static_data_query(db: &impl DefDatabase, konst: StaticId) -> Arc<ConstData> {\n         let node = konst.lookup(db).source(db);\n-        Arc::new(ConstData::new(db, node))\n+        Arc::new(ConstData::new(db, RawVisibility::private(), node))\n     }\n \n     fn new<N: NameOwner + TypeAscriptionOwner + VisibilityOwner>(\n         db: &impl DefDatabase,\n+        vis_default: RawVisibility,\n         node: InFile<N>,\n     ) -> ConstData {\n         let name = node.value.name().map(|n| n.as_name());\n         let type_ref = TypeRef::from_ast_opt(node.value.ascribed_type());\n-        let visibility = RawVisibility::from_ast(db, node.map(|n| n.visibility()));\n+        let visibility =\n+            RawVisibility::from_ast_with_default(db, vis_default, node.map(|n| n.visibility()));\n         ConstData { name, type_ref, visibility }\n     }\n }"}, {"sha": "e0c59e9056dba04bcec7e972b981ed102e27035b", "filename": "crates/ra_hir_def/src/visibility.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0a9ea782ebbf4c63db629c9704895e990d8ce1c7/crates%2Fra_hir_def%2Fsrc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a9ea782ebbf4c63db629c9704895e990d8ce1c7/crates%2Fra_hir_def%2Fsrc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fvisibility.rs?ref=0a9ea782ebbf4c63db629c9704895e990d8ce1c7", "patch": "@@ -6,7 +6,7 @@ use ra_syntax::ast;\n use crate::{\n     db::DefDatabase,\n     path::{ModPath, PathKind},\n-    ModuleId,\n+    AssocContainerId, ModuleId,\n };\n \n /// Visibility of an item, not yet resolved.\n@@ -20,11 +20,30 @@ pub enum RawVisibility {\n }\n \n impl RawVisibility {\n-    const fn private() -> RawVisibility {\n+    pub(crate) const fn private() -> RawVisibility {\n         let path = ModPath { kind: PathKind::Super(0), segments: Vec::new() };\n         RawVisibility::Module(path)\n     }\n \n+    pub(crate) fn default_for_container(container_id: AssocContainerId) -> Self {\n+        match container_id {\n+            AssocContainerId::TraitId(_) => RawVisibility::Public,\n+            _ => RawVisibility::private(),\n+        }\n+    }\n+\n+    pub(crate) fn from_ast_with_default(\n+        db: &impl DefDatabase,\n+        default: RawVisibility,\n+        node: InFile<Option<ast::Visibility>>,\n+    ) -> RawVisibility {\n+        Self::from_ast_with_hygiene_and_default(\n+            node.value,\n+            default,\n+            &Hygiene::new(db, node.file_id),\n+        )\n+    }\n+\n     pub(crate) fn from_ast(\n         db: &impl DefDatabase,\n         node: InFile<Option<ast::Visibility>>,\n@@ -35,9 +54,17 @@ impl RawVisibility {\n     pub(crate) fn from_ast_with_hygiene(\n         node: Option<ast::Visibility>,\n         hygiene: &Hygiene,\n+    ) -> RawVisibility {\n+        Self::from_ast_with_hygiene_and_default(node, RawVisibility::private(), hygiene)\n+    }\n+\n+    pub(crate) fn from_ast_with_hygiene_and_default(\n+        node: Option<ast::Visibility>,\n+        default: RawVisibility,\n+        hygiene: &Hygiene,\n     ) -> RawVisibility {\n         let node = match node {\n-            None => return RawVisibility::private(),\n+            None => return default,\n             Some(node) => node,\n         };\n         match node.kind() {"}, {"sha": "f07611d88dfa924becc3bfdc4771d90e73dd1a4d", "filename": "crates/ra_ide/src/completion/complete_dot.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0a9ea782ebbf4c63db629c9704895e990d8ce1c7/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a9ea782ebbf4c63db629c9704895e990d8ce1c7/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=0a9ea782ebbf4c63db629c9704895e990d8ce1c7", "patch": "@@ -401,6 +401,38 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn completes_trait_method_from_other_module() {\n+        assert_debug_snapshot!(\n+            do_ref_completion(\n+                r\"\n+            struct A {}\n+            mod m {\n+                pub trait Trait { fn the_method(&self); }\n+            }\n+            use m::Trait;\n+            impl Trait for A {}\n+            fn foo(a: A) {\n+               a.<|>\n+            }\n+            \",\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"the_method()\",\n+                source_range: [219; 219),\n+                delete: [219; 219),\n+                insert: \"the_method()$0\",\n+                kind: Method,\n+                lookup: \"the_method\",\n+                detail: \"fn the_method(&self)\",\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n+\n     #[test]\n     fn test_no_non_self_method() {\n         assert_debug_snapshot!("}]}