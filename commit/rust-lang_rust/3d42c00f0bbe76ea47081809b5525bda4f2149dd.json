{"sha": "3d42c00f0bbe76ea47081809b5525bda4f2149dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNDJjMDBmMGJiZTc2ZWE0NzA4MTgwOWI1NTI1YmRhNGYyMTQ5ZGQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-12-17T02:43:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-17T02:43:57Z"}, "message": "Rollup merge of #79877 - bstrie:depinfut, r=oli-obk\n\nAllow `since=\"TBD\"` for rustc_deprecated\n\nCloses #78381.\n\nThis PR only affects `#[rustc_deprecated]`, not `#[deprecated]`, so there is no effect on any stable language feature.\n\nLikewise this PR only implements `since=\"TBD\"`, it does not actually tag any library functions with it, so there is no effect on any stable API.\n\nOverview of changes:\n\n* `rustc_middle/stability.rs`:\n    * change `deprecation_in_effect` function to return `false` when `since=\"TBD\"`\n    * tidy up the compiler output when a deprecated item has `since=\"TBD\"`\n* `rustc_passes/stability.rs`:\n    * allow `since=\"TBD\"` to pass the sanity check for stable_version < deprecated_version\n    * refactor the \"invalid stability version\" and \"invalid deprecation version\" error into separate errors\n* rustdoc: make `since=\"TBD\"` message on a deprecated item's page match the command-line deprecation output\n* tests:\n    * test rustdoc output\n    * test that the `deprecated_in_future` lint fires when `since=\"TBD\"`\n    * test the new \"invalid deprecation version\" error message", "tree": {"sha": "1a64983feb7844006ebea6a49367c9cfa503c339", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a64983feb7844006ebea6a49367c9cfa503c339"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d42c00f0bbe76ea47081809b5525bda4f2149dd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf2sXtCRBK7hj4Ov3rIwAAdHIIACSUbhXfzPEeoObBqXUEGdnT\nIgpHNvt4OFqCBgZpMi8KJNVqJnV/tvWj+IKRmLSpgHf8zrl1yrUlywOBCQK18G1F\nd39hU/h0GdFbyxnrlo5Alnj6Xj5DG7tkjOR3Po5Ot3ZsfocMA7YW3YvAVup5mc+R\nTF0YWWjrp0UZkfimKuF4bB9Ru3foFtOOOk74ValjuXDeIyHkdd78r7HTSzBuqPx6\nixFBE2B4AJ8fTzt9PlRtM6N3te8ihjdb41bwZ7lLl/PrT/h6ESQ1gCFo74uZwGVl\nfj8SUd9ReL9WGyqYyrgxcs23BBO29Wrr7XWNhQjETW3gSHila7s1/f2HfoxFypo=\n=rgyR\n-----END PGP SIGNATURE-----\n", "payload": "tree 1a64983feb7844006ebea6a49367c9cfa503c339\nparent 1e1ba7c936ac3c83c3831b493ab138b7e180a0b6\nparent 1e1ca28f395b4c43cc2781676dafffd4f3269989\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1608173037 +0900\ncommitter GitHub <noreply@github.com> 1608173037 +0900\n\nRollup merge of #79877 - bstrie:depinfut, r=oli-obk\n\nAllow `since=\"TBD\"` for rustc_deprecated\n\nCloses #78381.\n\nThis PR only affects `#[rustc_deprecated]`, not `#[deprecated]`, so there is no effect on any stable language feature.\n\nLikewise this PR only implements `since=\"TBD\"`, it does not actually tag any library functions with it, so there is no effect on any stable API.\n\nOverview of changes:\n\n* `rustc_middle/stability.rs`:\n    * change `deprecation_in_effect` function to return `false` when `since=\"TBD\"`\n    * tidy up the compiler output when a deprecated item has `since=\"TBD\"`\n* `rustc_passes/stability.rs`:\n    * allow `since=\"TBD\"` to pass the sanity check for stable_version < deprecated_version\n    * refactor the \"invalid stability version\" and \"invalid deprecation version\" error into separate errors\n* rustdoc: make `since=\"TBD\"` message on a deprecated item's page match the command-line deprecation output\n* tests:\n    * test rustdoc output\n    * test that the `deprecated_in_future` lint fires when `since=\"TBD\"`\n    * test the new \"invalid deprecation version\" error message\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d42c00f0bbe76ea47081809b5525bda4f2149dd", "html_url": "https://github.com/rust-lang/rust/commit/3d42c00f0bbe76ea47081809b5525bda4f2149dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d42c00f0bbe76ea47081809b5525bda4f2149dd/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "html_url": "https://github.com/rust-lang/rust/commit/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6"}, {"sha": "1e1ca28f395b4c43cc2781676dafffd4f3269989", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e1ca28f395b4c43cc2781676dafffd4f3269989", "html_url": "https://github.com/rust-lang/rust/commit/1e1ca28f395b4c43cc2781676dafffd4f3269989"}], "stats": {"total": 180, "additions": 111, "deletions": 69}, "files": [{"sha": "4f08057a7e3235cf7724499911f8b67b1f3bfb3a", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 40, "deletions": 35, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/3d42c00f0bbe76ea47081809b5525bda4f2149dd/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d42c00f0bbe76ea47081809b5525bda4f2149dd/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=3d42c00f0bbe76ea47081809b5525bda4f2149dd", "patch": "@@ -132,37 +132,37 @@ pub fn report_unstable(\n /// Checks whether an item marked with `deprecated(since=\"X\")` is currently\n /// deprecated (i.e., whether X is not greater than the current rustc version).\n pub fn deprecation_in_effect(is_since_rustc_version: bool, since: Option<&str>) -> bool {\n-    let since = if let Some(since) = since {\n-        if is_since_rustc_version {\n-            since\n-        } else {\n-            // We assume that the deprecation is in effect if it's not a\n-            // rustc version.\n-            return true;\n-        }\n-    } else {\n-        // If since attribute is not set, then we're definitely in effect.\n-        return true;\n-    };\n     fn parse_version(ver: &str) -> Vec<u32> {\n         // We ignore non-integer components of the version (e.g., \"nightly\").\n         ver.split(|c| c == '.' || c == '-').flat_map(|s| s.parse()).collect()\n     }\n \n-    if let Some(rustc) = option_env!(\"CFG_RELEASE\") {\n-        let since: Vec<u32> = parse_version(&since);\n-        let rustc: Vec<u32> = parse_version(rustc);\n-        // We simply treat invalid `since` attributes as relating to a previous\n-        // Rust version, thus always displaying the warning.\n-        if since.len() != 3 {\n-            return true;\n-        }\n-        since <= rustc\n-    } else {\n-        // By default, a deprecation warning applies to\n-        // the current version of the compiler.\n-        true\n+    if !is_since_rustc_version {\n+        // The `since` field doesn't have semantic purpose in the stable `deprecated`\n+        // attribute, only in `rustc_deprecated`.\n+        return true;\n     }\n+\n+    if let Some(since) = since {\n+        if since == \"TBD\" {\n+            return false;\n+        }\n+\n+        if let Some(rustc) = option_env!(\"CFG_RELEASE\") {\n+            let since: Vec<u32> = parse_version(&since);\n+            let rustc: Vec<u32> = parse_version(rustc);\n+            // We simply treat invalid `since` attributes as relating to a previous\n+            // Rust version, thus always displaying the warning.\n+            if since.len() != 3 {\n+                return true;\n+            }\n+            return since <= rustc;\n+        }\n+    };\n+\n+    // Assume deprecation is in effect if \"since\" field is missing\n+    // or if we can't determine the current Rust version.\n+    true\n }\n \n pub fn deprecation_suggestion(\n@@ -182,19 +182,24 @@ pub fn deprecation_suggestion(\n }\n \n pub fn deprecation_message(depr: &Deprecation, kind: &str, path: &str) -> (String, &'static Lint) {\n-    let (message, lint) = if deprecation_in_effect(\n-        depr.is_since_rustc_version,\n-        depr.since.map(Symbol::as_str).as_deref(),\n-    ) {\n+    let since = depr.since.map(Symbol::as_str);\n+    let (message, lint) = if deprecation_in_effect(depr.is_since_rustc_version, since.as_deref()) {\n         (format!(\"use of deprecated {} `{}`\", kind, path), DEPRECATED)\n     } else {\n         (\n-            format!(\n-                \"use of {} `{}` that will be deprecated in future version {}\",\n-                kind,\n-                path,\n-                depr.since.unwrap()\n-            ),\n+            if since.as_deref() == Some(\"TBD\") {\n+                format!(\n+                    \"use of {} `{}` that will be deprecated in a future Rust version\",\n+                    kind, path\n+                )\n+            } else {\n+                format!(\n+                    \"use of {} `{}` that will be deprecated in future version {}\",\n+                    kind,\n+                    path,\n+                    since.unwrap()\n+                )\n+            },\n             DEPRECATED_IN_FUTURE,\n         )\n     };"}, {"sha": "3c2462aab26b7feeeff193a4fe79b5293981bc66", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3d42c00f0bbe76ea47081809b5525bda4f2149dd/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d42c00f0bbe76ea47081809b5525bda4f2149dd/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=3d42c00f0bbe76ea47081809b5525bda4f2149dd", "patch": "@@ -182,28 +182,32 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n                 for (dep_v, stab_v) in\n                     dep_since.as_str().split('.').zip(stab_since.as_str().split('.'))\n                 {\n-                    if let (Ok(dep_v), Ok(stab_v)) = (dep_v.parse::<u64>(), stab_v.parse()) {\n-                        match dep_v.cmp(&stab_v) {\n-                            Ordering::Less => {\n-                                self.tcx.sess.span_err(\n-                                    item_sp,\n-                                    \"An API can't be stabilized \\\n-                                                                 after it is deprecated\",\n-                                );\n+                    match stab_v.parse::<u64>() {\n+                        Err(_) => {\n+                            self.tcx.sess.span_err(item_sp, \"Invalid stability version found\");\n+                            break;\n+                        }\n+                        Ok(stab_vp) => match dep_v.parse::<u64>() {\n+                            Ok(dep_vp) => match dep_vp.cmp(&stab_vp) {\n+                                Ordering::Less => {\n+                                    self.tcx.sess.span_err(\n+                                        item_sp,\n+                                        \"An API can't be stabilized after it is deprecated\",\n+                                    );\n+                                    break;\n+                                }\n+                                Ordering::Equal => continue,\n+                                Ordering::Greater => break,\n+                            },\n+                            Err(_) => {\n+                                if dep_v != \"TBD\" {\n+                                    self.tcx\n+                                        .sess\n+                                        .span_err(item_sp, \"Invalid deprecation version found\");\n+                                }\n                                 break;\n                             }\n-                            Ordering::Equal => continue,\n-                            Ordering::Greater => break,\n-                        }\n-                    } else {\n-                        // Act like it isn't less because the question is now nonsensical,\n-                        // and this makes us not do anything else interesting.\n-                        self.tcx.sess.span_err(\n-                            item_sp,\n-                            \"Invalid stability or deprecation \\\n-                                                         version found\",\n-                        );\n-                        break;\n+                        },\n                     }\n                 }\n             }"}, {"sha": "00294878fe5fb674a01321978289b7c6b384fdaf", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d42c00f0bbe76ea47081809b5525bda4f2149dd/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d42c00f0bbe76ea47081809b5525bda4f2149dd/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=3d42c00f0bbe76ea47081809b5525bda4f2149dd", "patch": "@@ -2279,7 +2279,11 @@ fn short_item_info(item: &clean::Item, cx: &Context, parent: Option<&clean::Item\n         let mut message = if let Some(since) = since {\n             let since = &since.as_str();\n             if !stability::deprecation_in_effect(is_since_rustc_version, Some(since)) {\n-                format!(\"Deprecating in {}\", Escape(since))\n+                if *since == \"TBD\" {\n+                    format!(\"Deprecating in a future Rust version\")\n+                } else {\n+                    format!(\"Deprecating in {}\", Escape(since))\n+                }\n             } else {\n                 format!(\"Deprecated since {}\", Escape(since))\n             }"}, {"sha": "95a767a8329ac7677b8b66e34bdc6aa7f4454dce", "filename": "src/test/rustdoc/rustc_deprecated-future.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3d42c00f0bbe76ea47081809b5525bda4f2149dd/src%2Ftest%2Frustdoc%2Frustc_deprecated-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d42c00f0bbe76ea47081809b5525bda4f2149dd/src%2Ftest%2Frustdoc%2Frustc_deprecated-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frustc_deprecated-future.rs?ref=3d42c00f0bbe76ea47081809b5525bda4f2149dd", "patch": "@@ -4,8 +4,16 @@\n \n // @has rustc_deprecated_future/index.html '//*[@class=\"stab deprecated\"]' \\\n //      'Deprecation planned'\n-// @has rustc_deprecated_future/struct.S.html '//*[@class=\"stab deprecated\"]' \\\n+// @has rustc_deprecated_future/struct.S1.html '//*[@class=\"stab deprecated\"]' \\\n //      'Deprecating in 99.99.99: effectively never'\n #[rustc_deprecated(since = \"99.99.99\", reason = \"effectively never\")]\n #[stable(feature = \"rustc_deprecated-future-test\", since = \"1.0.0\")]\n-pub struct S;\n+pub struct S1;\n+\n+// @has rustc_deprecated_future/index.html '//*[@class=\"stab deprecated\"]' \\\n+//      'Deprecation planned'\n+// @has rustc_deprecated_future/struct.S2.html '//*[@class=\"stab deprecated\"]' \\\n+//      'Deprecating in a future Rust version: literally never'\n+#[rustc_deprecated(since = \"TBD\", reason = \"literally never\")]\n+#[stable(feature = \"rustc_deprecated-future-test\", since = \"1.0.0\")]\n+pub struct S2;"}, {"sha": "11f7960b757860fa64952048c33ee454e9b0a5fa", "filename": "src/test/ui/deprecation/rustc_deprecation-in-future.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3d42c00f0bbe76ea47081809b5525bda4f2149dd/src%2Ftest%2Fui%2Fdeprecation%2Frustc_deprecation-in-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d42c00f0bbe76ea47081809b5525bda4f2149dd/src%2Ftest%2Fui%2Fdeprecation%2Frustc_deprecation-in-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Frustc_deprecation-in-future.rs?ref=3d42c00f0bbe76ea47081809b5525bda4f2149dd", "patch": "@@ -8,8 +8,13 @@\n \n #[rustc_deprecated(since = \"99.99.99\", reason = \"effectively never\")]\n #[stable(feature = \"rustc_deprecation-in-future-test\", since = \"1.0.0\")]\n-pub struct S;\n+pub struct S1;\n+\n+#[rustc_deprecated(since = \"TBD\", reason = \"literally never\")]\n+#[stable(feature = \"rustc_deprecation-in-future-test\", since = \"1.0.0\")]\n+pub struct S2;\n \n fn main() {\n-    let _ = S; //~ ERROR use of unit struct `S` that will be deprecated in future version 99.99.99: effectively never\n+    let _ = S1; //~ ERROR use of unit struct `S1` that will be deprecated in future version 99.99.99: effectively never\n+    let _ = S2; //~ ERROR use of unit struct `S2` that will be deprecated in a future Rust version: literally never\n }"}, {"sha": "b5a7dd3c28daf78df0b83d4aa788bb9bbe09e89f", "filename": "src/test/ui/deprecation/rustc_deprecation-in-future.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3d42c00f0bbe76ea47081809b5525bda4f2149dd/src%2Ftest%2Fui%2Fdeprecation%2Frustc_deprecation-in-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d42c00f0bbe76ea47081809b5525bda4f2149dd/src%2Ftest%2Fui%2Fdeprecation%2Frustc_deprecation-in-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Frustc_deprecation-in-future.stderr?ref=3d42c00f0bbe76ea47081809b5525bda4f2149dd", "patch": "@@ -1,14 +1,20 @@\n-error: use of unit struct `S` that will be deprecated in future version 99.99.99: effectively never\n-  --> $DIR/rustc_deprecation-in-future.rs:14:13\n+error: use of unit struct `S1` that will be deprecated in future version 99.99.99: effectively never\n+  --> $DIR/rustc_deprecation-in-future.rs:18:13\n    |\n-LL |     let _ = S;\n-   |             ^\n+LL |     let _ = S1;\n+   |             ^^\n    |\n note: the lint level is defined here\n   --> $DIR/rustc_deprecation-in-future.rs:3:9\n    |\n LL | #![deny(deprecated_in_future)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: use of unit struct `S2` that will be deprecated in a future Rust version: literally never\n+  --> $DIR/rustc_deprecation-in-future.rs:19:13\n+   |\n+LL |     let _ = S2;\n+   |             ^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "0c40f8ae1c67ea3b6a9c95df9d5f30196d9b2c41", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d42c00f0bbe76ea47081809b5525bda4f2149dd/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d42c00f0bbe76ea47081809b5525bda4f2149dd/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs?ref=3d42c00f0bbe76ea47081809b5525bda4f2149dd", "patch": "@@ -63,7 +63,11 @@ fn multiple3() { }\n #[rustc_const_unstable(feature = \"c\", issue = \"none\")]\n #[rustc_const_unstable(feature = \"d\", issue = \"none\")] //~ ERROR multiple stability levels\n pub const fn multiple4() { }\n-//~^ ERROR Invalid stability or deprecation version found\n+//~^ ERROR Invalid stability version found\n+\n+#[stable(feature = \"a\", since = \"1.0.0\")]\n+#[rustc_deprecated(since = \"invalid\", reason = \"text\")]\n+fn invalid_deprecation_version() {} //~ ERROR Invalid deprecation version found\n \n #[rustc_deprecated(since = \"a\", reason = \"text\")]\n fn deprecated_without_unstable_or_stable() { }"}, {"sha": "ee9a93359f0329aebe01f036c5c559adde49d83e", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3d42c00f0bbe76ea47081809b5525bda4f2149dd/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d42c00f0bbe76ea47081809b5525bda4f2149dd/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr?ref=3d42c00f0bbe76ea47081809b5525bda4f2149dd", "patch": "@@ -96,19 +96,25 @@ error[E0544]: multiple stability levels\n LL | #[rustc_const_unstable(feature = \"d\", issue = \"none\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: Invalid stability or deprecation version found\n+error: Invalid stability version found\n   --> $DIR/stability-attribute-sanity.rs:65:1\n    |\n LL | pub const fn multiple4() { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: Invalid deprecation version found\n+  --> $DIR/stability-attribute-sanity.rs:70:1\n+   |\n+LL | fn invalid_deprecation_version() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0549]: rustc_deprecated attribute must be paired with either stable or unstable attribute\n-  --> $DIR/stability-attribute-sanity.rs:68:1\n+  --> $DIR/stability-attribute-sanity.rs:72:1\n    |\n LL | #[rustc_deprecated(since = \"a\", reason = \"text\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 18 previous errors\n+error: aborting due to 19 previous errors\n \n Some errors have detailed explanations: E0539, E0541, E0546, E0550.\n For more information about an error, try `rustc --explain E0539`."}]}