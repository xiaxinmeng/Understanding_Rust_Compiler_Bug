{"sha": "8a298eed7a2f68fdf014f92e5b5a7010dcae1f0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMjk4ZWVkN2EyZjY4ZmRmMDE0ZjkyZTViNWE3MDEwZGNhZTFmMGI=", "commit": {"author": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-05-10T18:44:14Z"}, "committer": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-05-10T18:44:14Z"}, "message": "Resolve todos about refs and empty statements", "tree": {"sha": "cd7aa849f635d031d78c8e4b8eecd60a00beb831", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd7aa849f635d031d78c8e4b8eecd60a00beb831"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a298eed7a2f68fdf014f92e5b5a7010dcae1f0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a298eed7a2f68fdf014f92e5b5a7010dcae1f0b", "html_url": "https://github.com/rust-lang/rust/commit/8a298eed7a2f68fdf014f92e5b5a7010dcae1f0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a298eed7a2f68fdf014f92e5b5a7010dcae1f0b/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5e2e02aa9864f5c929ff36f99cde5fd4be2544e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5e2e02aa9864f5c929ff36f99cde5fd4be2544e", "html_url": "https://github.com/rust-lang/rust/commit/f5e2e02aa9864f5c929ff36f99cde5fd4be2544e"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "22de5aae47db619eafd5a299cedcc1c2de52f43f", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a298eed7a2f68fdf014f92e5b5a7010dcae1f0b/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a298eed7a2f68fdf014f92e5b5a7010dcae1f0b/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=8a298eed7a2f68fdf014f92e5b5a7010dcae1f0b", "patch": "@@ -1515,9 +1515,9 @@ impl ParenPat {\n ///\n /// ```\n /// let \u2770 &mut foo \u2771 = bar;\n+///\n+/// let \u2770 & \u2770 &mut \u2770 &_ \u2771 \u2771 \u2771 = baz;\n /// ```\n-/// // TODO: clarify on the special case of double reference pattern\n-/// // described in the link bellow\n ///\n /// [Reference](https://doc.rust-lang.org/reference/patterns.html#reference-patterns)\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -2069,14 +2069,12 @@ pub struct Abi {\n }\n impl Abi {}\n /// Expression statement.\n-/// Note: may be empty (i.e. only semicolon).\n ///\n /// ```\n /// \u2770 42; \u2771\n /// \u2770 foo(); \u2771\n /// \u2770 (); \u2771\n /// \u2770 {}; \u2771\n-/// \u2770 /* empty */; \u2771\n ///\n /// // constructions with trailing curly brace can omit the semicolon // TODO: clarify\n /// \u2770 if bool_cond { } \u2771\n@@ -2707,6 +2705,8 @@ pub enum AttrInput {\n     TokenTree(TokenTree),\n }\n /// Any kind of statement\n+/// Note: there are no empty statements, these are just represented as\n+/// bare semicolons without a dedicated statement ast node.\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum Stmt {\n     LetStmt(LetStmt),"}, {"sha": "deb9f690d46eefe4ffe67850be0257f203fd6cb8", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a298eed7a2f68fdf014f92e5b5a7010dcae1f0b/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a298eed7a2f68fdf014f92e5b5a7010dcae1f0b/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=8a298eed7a2f68fdf014f92e5b5a7010dcae1f0b", "patch": "@@ -1349,9 +1349,9 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         ///\n         /// ```\n         /// let \u2770 &mut foo \u2771 = bar;\n+        ///\n+        /// let \u2770 & \u2770 &mut \u2770 &_ \u2771 \u2771 \u2771 = baz;\n         /// ```\n-        /// // TODO: clarify on the special case of double reference pattern\n-        /// // described in the link bellow\n         ///\n         /// [Reference](https://doc.rust-lang.org/reference/patterns.html#reference-patterns)\n         struct RefPat { T![&], T![mut], Pat }\n@@ -1714,16 +1714,13 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         /// - [FFI function pointers reference](https://doc.rust-lang.org/reference/items/functions.html#functions)\n         struct Abi { /*String*/ }\n \n-        // TODO: clarify how empty statements are handled\n         /// Expression statement.\n-        /// Note: may be empty (i.e. only semicolon).\n         ///\n         /// ```\n         /// \u2770 42; \u2771\n         /// \u2770 foo(); \u2771\n         /// \u2770 (); \u2771\n         /// \u2770 {}; \u2771\n-        /// \u2770 /* empty */; \u2771\n         ///\n         /// // constructions with trailing curly brace can omit the semicolon // TODO: clarify\n         /// \u2770 if bool_cond { } \u2771\n@@ -2201,6 +2198,8 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         enum AttrInput { Literal, TokenTree }\n \n         /// Any kind of statement\n+        /// Note: there are no empty statements, these are just represented as\n+        /// bare semicolons without a dedicated statement ast node.\n         enum Stmt {\n             LetStmt,\n             ExprStmt,"}]}