{"sha": "72a9dcf4025ac54b26b30a827eccd423de5ba229", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyYTlkY2Y0MDI1YWM1NGIyNmIzMGE4MjdlY2NkNDIzZGU1YmEyMjk=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-10-14T19:07:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-14T19:07:08Z"}, "message": "Rollup merge of #37122 - srinivasreddy:liblog, r=alexcrichton\n\nrun rustfmt on liblog", "tree": {"sha": "56f92e030d4ab9f4274d1688eb47494d79410dc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56f92e030d4ab9f4274d1688eb47494d79410dc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72a9dcf4025ac54b26b30a827eccd423de5ba229", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72a9dcf4025ac54b26b30a827eccd423de5ba229", "html_url": "https://github.com/rust-lang/rust/commit/72a9dcf4025ac54b26b30a827eccd423de5ba229", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72a9dcf4025ac54b26b30a827eccd423de5ba229/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6822769263e22dbf5c0eda74c88f4681f1f2f430", "url": "https://api.github.com/repos/rust-lang/rust/commits/6822769263e22dbf5c0eda74c88f4681f1f2f430", "html_url": "https://github.com/rust-lang/rust/commit/6822769263e22dbf5c0eda74c88f4681f1f2f430"}, {"sha": "6a738c6a8adb6912c70721ae891637d36b927d48", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a738c6a8adb6912c70721ae891637d36b927d48", "html_url": "https://github.com/rust-lang/rust/commit/6a738c6a8adb6912c70721ae891637d36b927d48"}], "stats": {"total": 57, "additions": 28, "deletions": 29}, "files": [{"sha": "eb50d6e6135ef2124e10987519d18225fdf566f4", "filename": "src/liblog/directive.rs", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/72a9dcf4025ac54b26b30a827eccd423de5ba229/src%2Fliblog%2Fdirective.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a9dcf4025ac54b26b30a827eccd423de5ba229/src%2Fliblog%2Fdirective.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fdirective.rs?ref=72a9dcf4025ac54b26b30a827eccd423de5ba229", "patch": "@@ -22,12 +22,12 @@ pub const LOG_LEVEL_NAMES: [&'static str; 5] = [\"ERROR\", \"WARN\", \"INFO\", \"DEBUG\"\n /// Parse an individual log level that is either a number or a symbolic log level\n fn parse_log_level(level: &str) -> Option<u32> {\n     level.parse::<u32>()\n-         .ok()\n-         .or_else(|| {\n-             let pos = LOG_LEVEL_NAMES.iter().position(|&name| name.eq_ignore_ascii_case(level));\n-             pos.map(|p| p as u32 + 1)\n-         })\n-         .map(|p| cmp::min(p, ::MAX_LOG_LEVEL))\n+        .ok()\n+        .or_else(|| {\n+            let pos = LOG_LEVEL_NAMES.iter().position(|&name| name.eq_ignore_ascii_case(level));\n+            pos.map(|p| p as u32 + 1)\n+        })\n+        .map(|p| cmp::min(p, ::MAX_LOG_LEVEL))\n }\n \n /// Parse a logging specification string (e.g: \"crate1,crate2::mod3,crate3::x=1/foo\")\n@@ -52,32 +52,31 @@ pub fn parse_logging_spec(spec: &str) -> (Vec<LogDirective>, Option<String>) {\n                 continue;\n             }\n             let mut parts = s.split('=');\n-            let (log_level, name) = match (parts.next(),\n-                                           parts.next().map(|s| s.trim()),\n-                                           parts.next()) {\n-                (Some(part0), None, None) => {\n-                    // if the single argument is a log-level string or number,\n-                    // treat that as a global fallback\n-                    match parse_log_level(part0) {\n-                        Some(num) => (num, None),\n-                        None => (::MAX_LOG_LEVEL, Some(part0)),\n+            let (log_level, name) =\n+                match (parts.next(), parts.next().map(|s| s.trim()), parts.next()) {\n+                    (Some(part0), None, None) => {\n+                        // if the single argument is a log-level string or number,\n+                        // treat that as a global fallback\n+                        match parse_log_level(part0) {\n+                            Some(num) => (num, None),\n+                            None => (::MAX_LOG_LEVEL, Some(part0)),\n+                        }\n                     }\n-                }\n-                (Some(part0), Some(\"\"), None) => (::MAX_LOG_LEVEL, Some(part0)),\n-                (Some(part0), Some(part1), None) => {\n-                    match parse_log_level(part1) {\n-                        Some(num) => (num, Some(part0)),\n-                        _ => {\n-                            println!(\"warning: invalid logging spec '{}', ignoring it\", part1);\n-                            continue;\n+                    (Some(part0), Some(\"\"), None) => (::MAX_LOG_LEVEL, Some(part0)),\n+                    (Some(part0), Some(part1), None) => {\n+                        match parse_log_level(part1) {\n+                            Some(num) => (num, Some(part0)),\n+                            _ => {\n+                                println!(\"warning: invalid logging spec '{}', ignoring it\", part1);\n+                                continue;\n+                            }\n                         }\n                     }\n-                }\n-                _ => {\n-                    println!(\"warning: invalid logging spec '{}', ignoring it\", s);\n-                    continue;\n-                }\n-            };\n+                    _ => {\n+                        println!(\"warning: invalid logging spec '{}', ignoring it\", s);\n+                        continue;\n+                    }\n+                };\n             dirs.push(LogDirective {\n                 name: name.map(str::to_owned),\n                 level: log_level,"}]}