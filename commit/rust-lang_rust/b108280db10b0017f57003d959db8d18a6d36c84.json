{"sha": "b108280db10b0017f57003d959db8d18a6d36c84", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMDgyODBkYjEwYjAwMTdmNTcwMDNkOTU5ZGI4ZDE4YTZkMzZjODQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-05T22:52:08Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-06T18:09:08Z"}, "message": "rustc: Move middle::tstate::collect_locals over to interior vectors", "tree": {"sha": "6e086b37eeb739326ab60f4fb2f8c463b3df2f66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e086b37eeb739326ab60f4fb2f8c463b3df2f66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b108280db10b0017f57003d959db8d18a6d36c84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b108280db10b0017f57003d959db8d18a6d36c84", "html_url": "https://github.com/rust-lang/rust/commit/b108280db10b0017f57003d959db8d18a6d36c84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b108280db10b0017f57003d959db8d18a6d36c84/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48438ba1ae88fd96941a12e35951a333fc58245e", "url": "https://api.github.com/repos/rust-lang/rust/commits/48438ba1ae88fd96941a12e35951a333fc58245e", "html_url": "https://github.com/rust-lang/rust/commit/48438ba1ae88fd96941a12e35951a333fc58245e"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "526a730fd4b05717744e09ae9c6791f1430913ae", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b108280db10b0017f57003d959db8d18a6d36c84/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b108280db10b0017f57003d959db8d18a6d36c84/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=b108280db10b0017f57003d959db8d18a6d36c84", "patch": "@@ -1,6 +1,6 @@\n \n+import std::ivec;\n import std::vec;\n-import std::vec::plus_option;\n import syntax::ast::*;\n import util::ppaux::fn_ident_to_string;\n import std::option::*;\n@@ -26,22 +26,22 @@ import util::common::new_def_hash;\n import syntax::codemap::span;\n import syntax::ast::respan;\n \n-type ctxt = rec(@mutable vec[aux::constr] cs, ty::ctxt tcx);\n+type ctxt = rec(@mutable (aux::constr[]) cs, ty::ctxt tcx);\n \n fn collect_local(&@local loc, &ctxt cx, &visit::vt[ctxt] v) {\n     log \"collect_local: pushing \" + loc.node.ident;\n-    vec::push(*cx.cs,\n-              respan(loc.span, rec(id=loc.node.id, c=ninit(loc.node.ident))));\n+    *cx.cs += ~[respan(loc.span, rec(id=loc.node.id,\n+                                     c=ninit(loc.node.ident)))];\n     visit::visit_local(loc, cx, v);\n }\n \n fn collect_pred(&@expr e, &ctxt cx, &visit::vt[ctxt] v) {\n     alt (e.node) {\n         case (expr_check(_, ?ch)) {\n-            vec::push(*cx.cs, expr_to_constr(cx.tcx, ch));\n+            *cx.cs += ~[expr_to_constr(cx.tcx, ch)];\n         }\n         case (expr_if_check(?ex, _, _)) {\n-            vec::push(*cx.cs, expr_to_constr(cx.tcx, ex));\n+            *cx.cs += ~[expr_to_constr(cx.tcx, ex)];\n         }\n         // If it's a call, generate appropriate instances of the\n         // call's constraints.\n@@ -55,7 +55,7 @@ fn collect_pred(&@expr e, &ctxt cx, &visit::vt[ctxt] v) {\n                       rec(id=c.node.id._1,\n                           c=aux::substitute_constr_args(cx.tcx,\n                                                         operands_ivec, c)));\n-                vec::push(*cx.cs, ct);\n+                *cx.cs += ~[ct];\n             }\n         }\n         case (_) { }\n@@ -71,7 +71,7 @@ fn do_nothing(&_fn f, &vec[ty_param] tp, &span sp, &fn_ident i,\n fn find_locals(&ty::ctxt tcx, &_fn f, &vec[ty_param] tps,\n                &span sp, &fn_ident i, node_id id)\n     -> ctxt {\n-    let ctxt cx = rec(cs=@mutable vec::alloc(0u), tcx=tcx);\n+    let ctxt cx = rec(cs=@mutable ~[], tcx=tcx);\n     auto visitor = visit::default_visitor[ctxt]();\n \n     visitor =\n@@ -140,7 +140,7 @@ fn mk_fn_info(&crate_ctxt ccx, &_fn f, &vec[ty_param] tp,\n     let @mutable node_id[] v = @mutable ~[];\n     auto rslt =\n         rec(constrs=res_map,\n-            num_constraints=vec::len(*cx.cs) + 1u,\n+            num_constraints=ivec::len(*cx.cs) + 1u,\n             cf=f.decl.cf,\n             used_vars=v);\n     ccx.fm.insert(id, rslt);"}]}