{"sha": "68d04eda7b493668d34d5764dcaf46c5c996450a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZDA0ZWRhN2I0OTM2NjhkMzRkNTc2NGRjYWY0NmM1Yzk5NjQ1MGE=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-03-01T06:30:58Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-03-03T14:03:25Z"}, "message": "Copy from CONTRIBUTING.md: author lint, rustfix tests, rustfmt\n\nAnd adapt the wording a bit so that it fits in the overall guide.", "tree": {"sha": "19e6e336a65da1634e3901e4ed23a055ebe6fde2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19e6e336a65da1634e3901e4ed23a055ebe6fde2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68d04eda7b493668d34d5764dcaf46c5c996450a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlx73rMACgkQtvoGpuDi\nZlvpfA/9HVqqCmMfZDmVz44fYlgLe2gDRclmvoaGBxxi1MDAwGTCgsQMqgNbbXdQ\nsYvVyxYy02Dzk+bQaS1d0ftNQiI700pHk6bjhl8+uqV+AZVnZSDnKioyj6WGi9Mb\nh4yLAAy31LVcgiaMNetkJz+pz/ucwyKTcEygZtyVN4YJ5IxnuG3Tb5W+vxFtdW+1\nxd0ip38LGl8BoWLuXmoo8/dON4XfOv9GCfTlCKk623qWOFg7+UMrdO43AWXqSOPb\nh85WTklptv/9CoHljJdJX+p/qQGOtjClcf578ba8RkDlEfJ21xYYfBk4Q3/qWCi0\noGViGLIxwQg5nMvJRebjjPTrl378iG3lOMSa0gMYNX2DUr1Gv8rnPx75FzjCPZgs\n8lDqH9+hL8XgEhn2xXxqklbhiYSUuDpNBSZPa0uVQmqx+x8w1O6hWMw9l6gmWorm\nY90MyfuXsK/vH76IjvQ4mXRd7Lci8fkiXRY39yYY9qF6XvPQJkAp8zWlPvRFVJgq\nvBIFz4SYRt5j0ygqTFoDOyD8ZI+bFphfa7sxqYuh9v4I++yYar4RjDfzJuOw2hIF\niH9iK06semPHmo+x2LM7taGYvIeBCIbxj9MR0PExMi2vbeeVMjIwThxya+tMAQTA\ntKvvwLzKgu4V/DcLfsZVIei3u+lVCOrBMSS1XABt6ItistdIFlw=\n=X5+K\n-----END PGP SIGNATURE-----", "payload": "tree 19e6e336a65da1634e3901e4ed23a055ebe6fde2\nparent ca35e6750e3a3be5d6a5137a16e2d10b964b8185\nauthor Philipp Hansch <dev@phansch.net> 1551421858 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1551621805 +0100\n\nCopy from CONTRIBUTING.md: author lint, rustfix tests, rustfmt\n\nAnd adapt the wording a bit so that it fits in the overall guide.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68d04eda7b493668d34d5764dcaf46c5c996450a", "html_url": "https://github.com/rust-lang/rust/commit/68d04eda7b493668d34d5764dcaf46c5c996450a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68d04eda7b493668d34d5764dcaf46c5c996450a/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca35e6750e3a3be5d6a5137a16e2d10b964b8185", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca35e6750e3a3be5d6a5137a16e2d10b964b8185", "html_url": "https://github.com/rust-lang/rust/commit/ca35e6750e3a3be5d6a5137a16e2d10b964b8185"}], "stats": {"total": 85, "additions": 81, "deletions": 4}, "files": [{"sha": "ea53332605bf0e194abbe085251d033d1f9c9a4e", "filename": "doc/adding_lints.md", "status": "modified", "additions": 81, "deletions": 4, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/68d04eda7b493668d34d5764dcaf46c5c996450a/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/68d04eda7b493668d34d5764dcaf46c5c996450a/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=68d04eda7b493668d34d5764dcaf46c5c996450a", "patch": "@@ -7,16 +7,25 @@ creating an example lint from scratch.\n To get started, we will create a lint that detects functions called `foo`,\n because that's clearly a non-descriptive name.\n \n+* [Setup](#Setup)\n * [Testing](#Testing)\n+* [Rustfix tests](#Rustfix-tests)\n * [Lint declaration](#Lint-declaration)\n * [Lint passes](#Lint-passes)\n * [Emitting a lint](#Emitting-a-lint)\n * [Adding the lint logic](#Adding-the-lint-logic)\n * [Documentation](#Documentation)\n+* [Running rustfmt](#Running-rustfmt)\n * [Debugging](#Debugging)\n * [PR Checklist](#PR-Checklist)\n * [Cheatsheet](#Cheatsheet)\n \n+### Setup\n+\n+Clippy depends on the current git master version of rustc, which can change rapidly. Make sure you're\n+working near rust-clippy's master, and use the `setup-toolchain.sh` script to configure the appropriate\n+toolchain for this directory.\n+\n ### Testing\n \n Let's write some tests first that we can execute while we iterate on our lint.\n@@ -75,7 +84,25 @@ Once you are satisfied with the output, you need to run\n Running `TESTNAME=ui/foo_functions cargo uitest` should pass then. When you\n commit your lint, be sure to commit the `*.stderr` files, too.\n \n-Let's have a look at implementing our lint now.\n+### Rustfix tests\n+\n+If the lint you are working on is making use of structured suggestions, the\n+test file should include a `// run-rustfix` comment at the top. This will\n+additionally run [rustfix](https://github.com/rust-lang-nursery/rustfix) for\n+that test. Rustfix will apply the suggestions from the lint to the code of the\n+test file and compare that to the contents of a `.fixed` file.\n+\n+Use `tests/ui/update-all-references.sh` to automatically generate the\n+`.fixed` file after running `cargo test`.\n+\n+With tests in place, let's have a look at implementing our lint now.\n+\n+### Testing manually\n+\n+Manually testing against an example file is useful if you have added some\n+`println!`s and test suite output becomes unreadable.  To try Clippy with your\n+local modifications, run `env CLIPPY_TESTS=true cargo run --bin clippy-driver -- -L ./target/debug input.rs`\n+from the working copy root.\n \n ### Lint declaration\n \n@@ -278,7 +305,44 @@ impl LintPass for Pass { /* .. */ }\n ```\n \n That should be it for the lint implementation. Running `cargo test` should now\n-pass and we can finish up our work by adding some documentation.\n+pass.\n+\n+### Author lint\n+\n+If you have trouble implementing your lint, there is also the internal `author`\n+lint to generate Clippy code that detects the offending pattern. It does not\n+work for all of the Rust syntax, but can give a good starting point.\n+\n+First, create a new UI test file in the `tests/ui/` directory with the pattern\n+you want to match:\n+\n+```rust\n+// ./tests/ui/my_lint.rs\n+fn main() {\n+    #[clippy::author]\n+    let arr: [i32; 1] = [7]; // Replace line with the code you want to match\n+}\n+```\n+\n+Now you run `TESTNAME=ui/my_lint cargo uitest` to produce a `.stdout` file with\n+the generated code:\n+\n+```rust\n+// ./tests/ui/my_lint.stdout\n+\n+if_chain! {\n+    if let ExprKind::Array(ref elements) = stmt.node;\n+    if elements.len() == 1;\n+    if let ExprKind::Lit(ref lit) = elements[0].node;\n+    if let LitKind::Int(7, _) = lit.node;\n+    then {\n+        // report your lint here\n+    }\n+}\n+```\n+\n+If the command was executed successfully, you can copy the code over to where\n+you are implementing your lint.\n \n ### Documentation\n \n@@ -309,6 +373,19 @@ declare_clippy_lint! { /* ... */ }\n Once your lint is merged, this documentation will show up in the [lint\n list][lint_list].\n \n+### Running rustfmt\n+\n+[Rustfmt](https://github.com/rust-lang/rustfmt) is a tool for formatting Rust code according\n+to style guidelines. Your code has to be formatted by `rustfmt` before a PR can be merged.\n+\n+It can be installed via `rustup`:\n+\n+```bash\n+rustup component add rustfmt\n+```\n+\n+Use `cargo fmt --all` to format the whole codebase.\n+\n ### Debugging\n \n If you want to debug parts of your lint implementation, you can use the `dbg!`\n@@ -317,7 +394,7 @@ output in the `stdout` part.\n \n ### PR Checklist\n \n-TODO: Prose\n+Before submitting your PR make sure you followed all of the basic requirements:\n \n - [ ] Followed [lint naming conventions][lint_naming]\n - [ ] Added passing UI tests (including committed `.stderr` file)\n@@ -329,7 +406,7 @@ TODO: Prose\n Here are some pointers to things you are likely going to need for every lint:\n \n * [Clippy utils][utils] - Various helper functions. Maybe the function you need\n-  is already in here. (`implements_trait`, `match_path`, `snippet`, etc)\n+  is already in here (`implements_trait`, `match_path`, `snippet`, etc)\n * [Clippy diagnostics][diagnostics]\n * [The `if_chain` macro][if_chain]\n * [`in_macro`][in_macro] and [`in_external_macro`][in_external_macro]"}]}