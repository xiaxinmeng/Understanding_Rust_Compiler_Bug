{"sha": "0853c33c3b489d5bf0045bf306d6555097f595f4", "node_id": "C_kwDOAAsO6NoAKDA4NTNjMzNjM2I0ODlkNWJmMDA0NWJmMzA2ZDY1NTUwOTdmNTk1ZjQ", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-10-22T03:12:20Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-10-22T20:07:43Z"}, "message": "Use `def_id_full()` where easily possible\n\nIn general, it should be preferred over `Type::def_id()`. See each\nmethod's docs for more.", "tree": {"sha": "5a673501c3dd8c7de7a19aa8f6d7c49299290b1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a673501c3dd8c7de7a19aa8f6d7c49299290b1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0853c33c3b489d5bf0045bf306d6555097f595f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0853c33c3b489d5bf0045bf306d6555097f595f4", "html_url": "https://github.com/rust-lang/rust/commit/0853c33c3b489d5bf0045bf306d6555097f595f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0853c33c3b489d5bf0045bf306d6555097f595f4/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf0cc9005085fbf19aad215db96a519f3836d15f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf0cc9005085fbf19aad215db96a519f3836d15f", "html_url": "https://github.com/rust-lang/rust/commit/bf0cc9005085fbf19aad215db96a519f3836d15f"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "3d5c1fee168b08f4bf20a420e7e67b29b7db28e5", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0853c33c3b489d5bf0045bf306d6555097f595f4/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0853c33c3b489d5bf0045bf306d6555097f595f4/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=0853c33c3b489d5bf0045bf306d6555097f595f4", "patch": "@@ -374,7 +374,7 @@ crate fn build_impl(\n     // Only inline impl if the implementing type is\n     // reachable in rustdoc generated documentation\n     if !did.is_local() {\n-        if let Some(did) = for_.def_id() {\n+        if let Some(did) = for_.def_id_full(&cx.cache) {\n             if !cx.cache.access_levels.is_public(did) {\n                 return;\n             }\n@@ -462,7 +462,7 @@ crate fn build_impl(\n     }\n \n     while let Some(ty) = stack.pop() {\n-        if let Some(did) = ty.def_id() {\n+        if let Some(did) = ty.def_id_full(&cx.cache) {\n             if tcx.get_attrs(did).lists(sym::doc).has_word(sym::hidden) {\n                 return;\n             }"}, {"sha": "d34cbb44339f46bfeae44d6fcf74584ec4e18142", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0853c33c3b489d5bf0045bf306d6555097f595f4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0853c33c3b489d5bf0045bf306d6555097f595f4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=0853c33c3b489d5bf0045bf306d6555097f595f4", "patch": "@@ -385,7 +385,7 @@ impl<'tcx> Clean<Type> for ty::ProjectionTy<'tcx> {\n         let self_type = self.self_ty().clean(cx);\n         Type::QPath {\n             name: cx.tcx.associated_item(self.item_def_id).ident.name,\n-            self_def_id: self_type.def_id(),\n+            self_def_id: self_type.def_id_full(&cx.cache),\n             self_type: box self_type,\n             trait_,\n         }\n@@ -1887,7 +1887,7 @@ fn clean_impl(impl_: &hir::Impl<'_>, hir_id: hir::HirId, cx: &mut DocContext<'_>\n     }\n \n     let for_ = impl_.self_ty.clean(cx);\n-    let type_alias = for_.def_id().and_then(|did| match tcx.def_kind(did) {\n+    let type_alias = for_.def_id_full(&cx.cache).and_then(|did| match tcx.def_kind(did) {\n         DefKind::TyAlias => Some(tcx.type_of(did).clean(cx)),\n         _ => None,\n     });"}, {"sha": "afaeded88b4524828b92829ec4f0102c13273213", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0853c33c3b489d5bf0045bf306d6555097f595f4/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0853c33c3b489d5bf0045bf306d6555097f595f4/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=0853c33c3b489d5bf0045bf306d6555097f595f4", "patch": "@@ -206,7 +206,9 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                 || i.trait_\n                     .as_ref()\n                     .map_or(false, |t| self.cache.masked_crates.contains(&t.def_id().krate))\n-                || i.for_.def_id().map_or(false, |d| self.cache.masked_crates.contains(&d.krate))\n+                || i.for_\n+                    .def_id_full(self.cache)\n+                    .map_or(false, |d| self.cache.masked_crates.contains(&d.krate))\n             {\n                 return None;\n             }\n@@ -454,7 +456,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n \n             if let Some(generics) = i.trait_.as_ref().and_then(|t| t.generics()) {\n                 for bound in generics {\n-                    if let Some(did) = bound.def_id() {\n+                    if let Some(did) = bound.def_id_full(self.cache) {\n                         dids.insert(did);\n                     }\n                 }"}, {"sha": "f8f5118042f3b3f94cfadd35a28ee982574fd857", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0853c33c3b489d5bf0045bf306d6555097f595f4/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0853c33c3b489d5bf0045bf306d6555097f595f4/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=0853c33c3b489d5bf0045bf306d6555097f595f4", "patch": "@@ -70,7 +70,7 @@ crate fn collect_trait_impls(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n \n                 if let Some(prim) = target.primitive_type() {\n                     cleaner.prims.insert(prim);\n-                } else if let Some(did) = target.def_id() {\n+                } else if let Some(did) = target.def_id_full(&cx.cache) {\n                     cleaner.items.insert(did.into());\n                 }\n             }"}]}