{"sha": "21fde9a9d177ddffa34d58e049bc27d4c404469b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZmRlOWE5ZDE3N2RkZmZhMzRkNThlMDQ5YmMyN2Q0YzQwNDQ2OWI=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-01-17T04:52:00Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-01-17T04:52:00Z"}, "message": "Merge branch 'master' into option_option_pr", "tree": {"sha": "1cbcc1f76de41d089a21f7a954146f857be681a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cbcc1f76de41d089a21f7a954146f857be681a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21fde9a9d177ddffa34d58e049bc27d4c404469b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21fde9a9d177ddffa34d58e049bc27d4c404469b", "html_url": "https://github.com/rust-lang/rust/commit/21fde9a9d177ddffa34d58e049bc27d4c404469b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21fde9a9d177ddffa34d58e049bc27d4c404469b/comments", "author": null, "committer": null, "parents": [{"sha": "6737bae9b117f875907f037df90c66318efd496b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6737bae9b117f875907f037df90c66318efd496b", "html_url": "https://github.com/rust-lang/rust/commit/6737bae9b117f875907f037df90c66318efd496b"}, {"sha": "3d2d94b9c99fa0b0cc3b42f2e2f328e5ebfc7f42", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d2d94b9c99fa0b0cc3b42f2e2f328e5ebfc7f42", "html_url": "https://github.com/rust-lang/rust/commit/3d2d94b9c99fa0b0cc3b42f2e2f328e5ebfc7f42"}], "stats": {"total": 1545, "additions": 1066, "deletions": 479}, "files": [{"sha": "92d481012546660742bbfb46cf13cc0344c62832", "filename": ".travis.yml", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -14,6 +14,15 @@ env:\n    - secure: dj8SwwuRGuzbo2wZq5z7qXIf7P3p7cbSGs1I3pvXQmB6a58gkLiRn/qBcIIegdt/nzXs+Z0Nug+DdesYVeUPxk1hIa/eeU8p6mpyTtZ+30H4QVgVzd0VCthB5F/NUiPVxTgpGpEgCM9/p72xMwTn7AAJfsGqk7AJ4FS5ZZKhqFI=\n    - RUST_BACKTRACE=1\n \n+before_install:\n+ - |\n+    # work-around for issue https://github.com/travis-ci/travis-ci/issues/6307\n+    # might not be necessary in the future\n+    if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then\n+     command curl -sSL https://rvm.io/mpapis.asc | gpg --import -\n+     rvm get stable\n+    fi\n+\n install:\n   - . $HOME/.nvm/nvm.sh\n   - nvm install stable"}, {"sha": "77e9babf9d4a5a6441d7458b18d09edf4d0928fa", "filename": "CHANGELOG.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -1,6 +1,15 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n+## 0.0.180\n+* Rustup to *rustc 1.25.0-nightly (3f92e8d89 2018-01-14)*\n+\n+## 0.0.179\n+* Rustup to *rustc 1.25.0-nightly (61452e506 2018-01-09)*\n+\n+## 0.0.178\n+* Rustup to *rustc 1.25.0-nightly (ee220daca 2018-01-07)*\n+\n ## 0.0.177\n * Rustup to *rustc 1.24.0-nightly (250b49205 2017-12-21)*\n * New lint: [`match_as_ref`]\n@@ -664,6 +673,7 @@ All notable changes to this project will be documented in this file.\n [`redundant_closure_call`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#redundant_closure_call\n [`redundant_pattern`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#redundant_pattern\n [`regex_macro`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#regex_macro\n+[`replace_consts`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#replace_consts\n [`result_map_unwrap_or_else`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#result_map_unwrap_or_else\n [`result_unwrap_used`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#result_unwrap_used\n [`reverse_range_loop`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#reverse_range_loop"}, {"sha": "e2a4f0f1fbb3acc30cc1c13ba599378af030f391", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.0.177\"\n+version = \"0.0.180\"\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\",\n \t\"Andre Bogus <bogusandre@gmail.com>\",\n@@ -37,7 +37,7 @@ path = \"src/driver.rs\"\n \n [dependencies]\n # begin automatic update\n-clippy_lints = { version = \"0.0.177\", path = \"clippy_lints\" }\n+clippy_lints = { version = \"0.0.180\", path = \"clippy_lints\" }\n # end automatic update\n cargo_metadata = \"0.2\"\n regex = \"0.2\""}, {"sha": "e4f0f3547cebaa573aee2310a8a2845800aa7bb2", "filename": "README.md", "status": "modified", "additions": 34, "deletions": 24, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -26,18 +26,35 @@ as an included feature during build. All of these options are detailed below.\n \n As a general rule clippy will only work with the *latest* Rust nightly for now.\n \n-### Optional dependency\n+### As a cargo subcommand (`cargo clippy`)\n+\n+One way to use clippy is by installing clippy through cargo as a cargo\n+subcommand.\n+\n+```terminal\n+cargo +nightly install clippy\n+```\n+\n+(The `+nightly` is not necessary if your default `rustup` install is nightly)\n \n-If you want to make clippy an optional dependency, you can do the following:\n+Now you can run clippy by invoking `cargo +nightly clippy`.\n \n-In your `Cargo.toml`:\n+In case you are not using rustup, you need to set the environment flag\n+`SYSROOT` during installation so clippy knows where to find `librustc` and\n+similar crates.\n+\n+```terminal\n+SYSROOT=/path/to/rustc/sysroot cargo install clippy\n+```\n+\n+### Optional dependency\n+\n+In some cases you might want to include clippy in your project directly, as an\n+optional dependency. To do this, just modify `Cargo.toml`:\n \n ```toml\n [dependencies]\n-clippy = {version = \"*\", optional = true}\n-\n-[features]\n-default = []\n+clippy = { version = \"*\", optional = true }\n ```\n \n And, in your `main.rs` or `lib.rs`, add these lines:\n@@ -54,25 +71,18 @@ Instead of adding the `cfg_attr` attributes you can also run clippy on demand:\n (the `-Z no trans`, while not necessary, will stop the compilation process after\n typechecking (and lints) have completed, which can significantly reduce the runtime).\n \n-### As a cargo subcommand (`cargo clippy`)\n-\n-An alternate way to use clippy is by installing clippy through cargo as a cargo\n-subcommand.\n+Alternatively, to only run clippy when testing:\n \n-```terminal\n-cargo install clippy\n+```toml\n+[dev-dependencies]\n+clippy = { version = \"*\" }\n ```\n \n-Now you can run clippy by invoking `cargo clippy`, or\n-`rustup run nightly cargo clippy` directly from a directory that is usually\n-compiled with stable.\n+and add to `main.rs` or  `lib.rs`:\n \n-In case you are not using rustup, you need to set the environment flag\n-`SYSROOT` during installation so clippy knows where to find `librustc` and\n-similar crates.\n-\n-```terminal\n-SYSROOT=/path/to/rustc/sysroot cargo install clippy\n+```\n+#![cfg_attr(test, feature(plugin))]\n+#![cfg_attr(test, plugin(clippy))]\n ```\n \n ### Running clippy from the command line without installing\n@@ -143,7 +153,7 @@ blacklisted-names = [\"toto\", \"tata\", \"titi\"]\n cyclomatic-complexity-threshold = 30\n ```\n \n-See the wiki for more information about which lints can be configured and the\n+See the [list of lints](https://rust-lang-nursery.github.io/rust-clippy/master/index.html) for more information about which lints can be configured and the\n meaning of the variables.\n \n You can also specify the path to the configuration file with:\n@@ -152,7 +162,7 @@ You can also specify the path to the configuration file with:\n #![plugin(clippy(conf_file=\"path/to/clippy's/configuration\"))]\n ```\n \n-To deactivate the \u201cfor further information visit *wiki-link*\u201d message you can\n+To deactivate the \u201cfor further information visit *lint-link*\u201d message you can\n define the `CLIPPY_DISABLE_DOCS_LINKS` environment variable.\n \n ### Allowing/denying lints"}, {"sha": "87d7c7aee66e071447d688b687cd1a815471667d", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"clippy_lints\"\n # begin automatic update\n-version = \"0.0.177\"\n+version = \"0.0.180\"\n # end automatic update\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\","}, {"sha": "293d63daaaa12f181760854b4a06233b945b170b", "filename": "clippy_lints/src/const_static_lifetime.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -1,6 +1,6 @@\n use syntax::ast::{Item, ItemKind, Ty, TyKind};\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use utils::{in_macro, span_lint_and_then};\n+use utils::{in_macro, snippet, span_lint_and_then};\n \n /// **What it does:** Checks for constants with an explicit `'static` lifetime.\n ///\n@@ -51,14 +51,15 @@ impl StaticConst {\n                         TyKind::Path(..) | TyKind::Slice(..) | TyKind::Array(..) |\n                         TyKind::Tup(..) => {\n                             if lifetime.ident.name == \"'static\" {\n-                                let mut sug: String = String::new();\n+                                let snip = snippet(cx, borrow_type.ty.span, \"<type>\");\n+                                let sugg = format!(\"&{}\", snip);\n                                 span_lint_and_then(\n                                     cx,\n                                     CONST_STATIC_LIFETIME,\n                                     lifetime.span,\n                                     \"Constants have by default a `'static` lifetime\",\n                                     |db| {\n-                                        db.span_suggestion(lifetime.span, \"consider removing `'static`\", sug);\n+                                        db.span_suggestion(ty.span, \"consider removing `'static`\", sugg);\n                                     },\n                                 );\n                             }"}, {"sha": "d327d0570f1aebcc685707f0a5e2dd3ba5064c2e", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -148,6 +148,13 @@ fn check_copy_clone<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item: &Item, trait_ref\n                         return;\n                     }\n                 }\n+                for subst in substs {\n+                    if let Some(subst) = subst.as_type() {\n+                        if let ty::TyParam(_) = subst.sty {\n+                            return;\n+                        }\n+                    }\n+                }\n             },\n             _ => (),\n         }"}, {"sha": "3df037f332974cfd56880908556babf588c0cc6c", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -86,7 +86,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n         use rustc::hir::map::Node::*;\n \n         let is_impl = if let Some(NodeItem(item)) = cx.tcx.hir.find(cx.tcx.hir.get_parent_node(nodeid)) {\n-            matches!(item.node, hir::ItemImpl(_, _, _, _, Some(_), _, _) | hir::ItemAutoImpl(..))\n+            matches!(item.node, hir::ItemImpl(_, _, _, _, Some(_), _, _))\n         } else {\n             false\n         };"}, {"sha": "1254743edd690f2bc40decc3f81fbb87e388e7f4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -150,6 +150,7 @@ pub mod ptr;\n pub mod ranges;\n pub mod reference;\n pub mod regex;\n+pub mod replace_consts;\n pub mod returns;\n pub mod serde_api;\n pub mod shadow;\n@@ -361,6 +362,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box types::ImplicitHasher);\n     reg.register_early_lint_pass(box const_static_lifetime::StaticConst);\n     reg.register_late_lint_pass(box fallible_impl_from::FallibleImplFrom);\n+    reg.register_late_lint_pass(box replace_consts::ReplaceConsts);\n \n     reg.register_lint_group(\"clippy_restrictions\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -399,6 +401,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         print::PRINT_STDOUT,\n         print::USE_DEBUG,\n         ranges::RANGE_PLUS_ONE,\n+        replace_consts::REPLACE_CONSTS,\n         shadow::SHADOW_REUSE,\n         shadow::SHADOW_SAME,\n         shadow::SHADOW_UNRELATED,"}, {"sha": "8a92e49340f4e3f60d7f1899330144d6b6683fb3", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -361,9 +361,8 @@ declare_lint! {\n /// ```rust\n /// x.clone()\n /// ```\n-declare_lint! {\n+declare_restriction_lint! {\n     pub CLONE_ON_REF_PTR,\n-    Warn,\n     \"using 'clone' on a ref-counted pointer\"\n }\n \n@@ -1013,24 +1012,26 @@ fn lint_clone_on_copy(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr, arg_t\n fn lint_clone_on_ref_ptr(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr) {\n     let (obj_ty, _) = walk_ptrs_ty_depth(cx.tables.expr_ty(arg));\n \n-    let caller_type = if match_type(cx, obj_ty, &paths::RC) {\n-        \"Rc\"\n-    } else if match_type(cx, obj_ty, &paths::ARC) {\n-        \"Arc\"\n-    } else if match_type(cx, obj_ty, &paths::WEAK_RC) || match_type(cx, obj_ty, &paths::WEAK_ARC) {\n-        \"Weak\"\n-    } else {\n-        return;\n-    };\n+    if let ty::TyAdt(_, subst) = obj_ty.sty {\n+        let caller_type = if match_type(cx, obj_ty, &paths::RC) {\n+            \"Rc\"\n+        } else if match_type(cx, obj_ty, &paths::ARC) {\n+            \"Arc\"\n+        } else if match_type(cx, obj_ty, &paths::WEAK_RC) || match_type(cx, obj_ty, &paths::WEAK_ARC) {\n+            \"Weak\"\n+        } else {\n+            return;\n+        };\n \n-    span_lint_and_sugg(\n-        cx,\n-        CLONE_ON_REF_PTR,\n-        expr.span,\n-        \"using '.clone()' on a ref-counted pointer\",\n-        \"try this\",\n-        format!(\"{}::clone(&{})\", caller_type, snippet(cx, arg.span, \"_\")),\n-    );\n+        span_lint_and_sugg(\n+            cx,\n+            CLONE_ON_REF_PTR,\n+            expr.span,\n+            \"using '.clone()' on a ref-counted pointer\",\n+            \"try this\",\n+            format!(\"{}::<{}>::clone(&{})\", caller_type, subst.type_at(0), snippet(cx, arg.span, \"_\")),\n+        );\n+    }\n }\n \n "}, {"sha": "82df78ec23483fd90e26d4276560ffb527279a69", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -124,7 +124,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n         let desc = match it.node {\n             hir::ItemConst(..) => \"a constant\",\n             hir::ItemEnum(..) => \"an enum\",\n-            hir::ItemFn(..) => \"a function\",\n+            hir::ItemFn(..) => {\n+                // ignore main()\n+                if it.name == \"main\" {\n+                    let def_id = cx.tcx.hir.local_def_id(it.id);\n+                    let def_key = cx.tcx.hir.def_key(def_id);\n+                    if def_key.parent == Some(hir::def_id::CRATE_DEF_INDEX) {\n+                        return;\n+                    }\n+                }\n+                \"a function\"\n+            },\n             hir::ItemMod(..) => \"a module\",\n             hir::ItemStatic(..) => \"a static\",\n             hir::ItemStruct(..) => \"a struct\",\n@@ -133,7 +143,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n             hir::ItemGlobalAsm(..) => \"an assembly blob\",\n             hir::ItemTy(..) => \"a type alias\",\n             hir::ItemUnion(..) => \"a union\",\n-            hir::ItemAutoImpl(..) |\n             hir::ItemExternCrate(..) |\n             hir::ItemForeignMod(..) |\n             hir::ItemImpl(..) |"}, {"sha": "3a1ecfbefc783cde927904f8ed5efb54ca2e67e4", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -69,8 +69,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutexAtomic {\n                         atomic_name\n                     );\n                     match mutex_param.sty {\n-                        ty::TyUint(t) if t != ast::UintTy::Us => span_lint(cx, MUTEX_INTEGER, expr.span, &msg),\n-                        ty::TyInt(t) if t != ast::IntTy::Is => span_lint(cx, MUTEX_INTEGER, expr.span, &msg),\n+                        ty::TyUint(t) if t != ast::UintTy::Usize => span_lint(cx, MUTEX_INTEGER, expr.span, &msg),\n+                        ty::TyInt(t) if t != ast::IntTy::Isize => span_lint(cx, MUTEX_INTEGER, expr.span, &msg),\n                         _ => span_lint(cx, MUTEX_ATOMIC, expr.span, &msg),\n                     };\n                 }"}, {"sha": "f0e5db6d4046a7ca09b9710a262195897bd4a54e", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -38,7 +38,7 @@ use utils::{in_macro, snippet, span_lint_and_then};\n ///     let mut v = Vec::<String>::new();\n ///     let _ = v.iter_mut().filter(|&ref a| a.is_empty());\n /// ```\n-/// This clojure takes a reference on something that has been matched as a\n+/// This closure takes a reference on something that has been matched as a\n /// reference and\n /// de-referenced.\n /// As such, it could just be |a| a.is_empty()"}, {"sha": "f7c93e7907a3b469571b45b95f9ce70bd981ea2f", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -87,7 +87,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n \n         // Exclude non-inherent impls\n         if let Some(NodeItem(item)) = cx.tcx.hir.find(cx.tcx.hir.get_parent_node(node_id)) {\n-            if matches!(item.node, ItemImpl(_, _, _, _, Some(_), _, _) | ItemAutoImpl(..) |\n+            if matches!(item.node, ItemImpl(_, _, _, _, Some(_), _, _) |\n                 ItemTrait(..))\n             {\n                 return;"}, {"sha": "5512a2092b45b26412c3bfad760645fce7626601", "filename": "clippy_lints/src/needless_update.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Fneedless_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Fneedless_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_update.rs?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -35,7 +35,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         if let ExprStruct(_, ref fields, Some(ref base)) = expr.node {\n             let ty = cx.tables.expr_ty(expr);\n             if let ty::TyAdt(def, _) = ty.sty {\n-                if fields.len() == def.struct_variant().fields.len() {\n+                if fields.len() == def.non_enum_variant().fields.len() {\n                     span_lint(\n                         cx,\n                         NEEDLESS_UPDATE,"}, {"sha": "451b27033ea326664b306f66e800af2e26df72f6", "filename": "clippy_lints/src/print.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprint.rs?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -5,7 +5,7 @@ use rustc::lint::*;\n use syntax::ast::LitKind;\n use syntax::symbol::InternedString;\n use syntax_pos::Span;\n-use utils::{is_expn_of, match_def_path, match_path, resolve_node, span_lint};\n+use utils::{is_expn_of, match_def_path, match_path, resolve_node, span_lint, span_lint_and_sugg};\n use utils::{opt_def_id, paths};\n \n /// **What it does:** This lint warns when you using `println!(\"\")` to\n@@ -182,8 +182,14 @@ fn check_println<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, span: Span, fmtstr: Inter\n         if let Ok(snippet) = cx.sess().codemap().span_to_snippet(span);\n         if snippet.contains(\"\\\"\\\"\");\n         then {\n-            span_lint(cx, PRINT_WITH_NEWLINE, span,\n-                      \"using `println!(\\\"\\\")`, consider using `println!()` instead\");\n+            span_lint_and_sugg(\n+                cx,\n+                PRINT_WITH_NEWLINE,\n+                span,\n+                \"using `println!(\\\"\\\")`\",\n+                \"replace it with\",\n+                \"println!()\".to_string(),\n+            );\n          }\n     }\n }"}, {"sha": "511dbf7a40f98729ef155a598f4da7a359250183", "filename": "clippy_lints/src/replace_consts.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freplace_consts.rs?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -0,0 +1,102 @@\n+use rustc::lint::*;\n+use rustc::hir;\n+use rustc::hir::def::Def;\n+use utils::{match_def_path, span_lint_and_sugg};\n+\n+/// **What it does:** Checks for usage of `ATOMIC_X_INIT`, `ONCE_INIT`, and\n+/// `uX/iX::MIN/MAX`.\n+///\n+/// **Why is this bad?** `const fn`s exist\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// static FOO: AtomicIsize = ATOMIC_ISIZE_INIT;\n+/// ```\n+///\n+/// Could be written:\n+///\n+/// ```rust\n+/// static FOO: AtomicIsize = AtomicIsize::new(0);\n+/// ```\n+declare_lint! {\n+    pub REPLACE_CONSTS,\n+    Allow,\n+    \"Lint usages of standard library `const`s that could be replaced by `const fn`s\"\n+}\n+\n+pub struct ReplaceConsts;\n+\n+impl LintPass for ReplaceConsts {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(REPLACE_CONSTS)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ReplaceConsts {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n+        if_chain! {\n+            if let hir::ExprPath(ref qp) = expr.node;\n+            if let Def::Const(def_id) = cx.tables.qpath_def(qp, expr.hir_id);\n+            then {\n+                for &(const_path, repl_snip) in REPLACEMENTS {\n+                    if match_def_path(cx.tcx, def_id, const_path) {\n+                        span_lint_and_sugg(\n+                            cx,\n+                            REPLACE_CONSTS,\n+                            expr.span,\n+                            &format!(\"using `{}`\", const_path.last().expect(\"empty path\")),\n+                            \"try this\",\n+                            repl_snip.to_string(),\n+                        );\n+                        return;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+const REPLACEMENTS: &[(&[&str], &str)] = &[\n+    // Once\n+    (&[\"core\", \"sync\",  \"ONCE_INIT\"], \"Once::new()\"),\n+    // Atomic\n+    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_BOOL_INIT\"],  \"AtomicBool::new(false)\"),\n+    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_ISIZE_INIT\"], \"AtomicIsize::new(0)\"),\n+    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_I8_INIT\"],    \"AtomicI8::new(0)\"),\n+    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_I16_INIT\"],   \"AtomicI16::new(0)\"),\n+    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_I32_INIT\"],   \"AtomicI32::new(0)\"),\n+    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_I64_INIT\"],   \"AtomicI64::new(0)\"),\n+    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_USIZE_INIT\"], \"AtomicUsize::new(0)\"),\n+    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_U8_INIT\"],    \"AtomicU8::new(0)\"),\n+    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_U16_INIT\"],   \"AtomicU16::new(0)\"),\n+    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_U32_INIT\"],   \"AtomicU32::new(0)\"),\n+    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_U64_INIT\"],   \"AtomicU64::new(0)\"),\n+    // Min\n+    (&[\"core\", \"isize\", \"MIN\"], \"isize::min_value()\"),\n+    (&[\"core\", \"i8\",    \"MIN\"], \"i8::min_value()\"),\n+    (&[\"core\", \"i16\",   \"MIN\"], \"i16::min_value()\"),\n+    (&[\"core\", \"i32\",   \"MIN\"], \"i32::min_value()\"),\n+    (&[\"core\", \"i64\",   \"MIN\"], \"i64::min_value()\"),\n+    (&[\"core\", \"i128\",  \"MIN\"], \"i128::min_value()\"),\n+    (&[\"core\", \"usize\", \"MIN\"], \"usize::min_value()\"),\n+    (&[\"core\", \"u8\",    \"MIN\"], \"u8::min_value()\"),\n+    (&[\"core\", \"u16\",   \"MIN\"], \"u16::min_value()\"),\n+    (&[\"core\", \"u32\",   \"MIN\"], \"u32::min_value()\"),\n+    (&[\"core\", \"u64\",   \"MIN\"], \"u64::min_value()\"),\n+    (&[\"core\", \"u128\",  \"MIN\"], \"u128::min_value()\"),\n+    // Max\n+    (&[\"core\", \"isize\", \"MAX\"], \"isize::max_value()\"),\n+    (&[\"core\", \"i8\",    \"MAX\"], \"i8::max_value()\"),\n+    (&[\"core\", \"i16\",   \"MAX\"], \"i16::max_value()\"),\n+    (&[\"core\", \"i32\",   \"MAX\"], \"i32::max_value()\"),\n+    (&[\"core\", \"i64\",   \"MAX\"], \"i64::max_value()\"),\n+    (&[\"core\", \"i128\",  \"MAX\"], \"i128::max_value()\"),\n+    (&[\"core\", \"usize\", \"MAX\"], \"usize::max_value()\"),\n+    (&[\"core\", \"u8\",    \"MAX\"], \"u8::max_value()\"),\n+    (&[\"core\", \"u16\",   \"MAX\"], \"u16::max_value()\"),\n+    (&[\"core\", \"u32\",   \"MAX\"], \"u32::max_value()\"),\n+    (&[\"core\", \"u64\",   \"MAX\"], \"u64::max_value()\"),\n+    (&[\"core\", \"u128\",  \"MAX\"], \"u128::max_value()\"),\n+];"}, {"sha": "c8b564e4228eed3dbbc857d813a930162e4f8e7e", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 58, "deletions": 14, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -36,6 +36,14 @@ pub struct TypePass;\n ///     values: Box<Vec<Foo>>,\n /// }\n /// ```\n+///\n+/// Better:\n+///\n+/// ```rust\n+/// struct X {\n+///     values: Vec<Foo>,\n+/// }\n+/// ```\n declare_lint! {\n     pub BOX_VEC,\n     Warn,\n@@ -109,6 +117,12 @@ declare_lint! {\n /// ```rust\n /// fn foo(bar: &Box<T>) { ... }\n /// ```\n+///\n+/// Better:\n+///\n+/// ```rust\n+/// fn foo(bar: &T) { ... }\n+/// ```\n declare_lint! {\n     pub BORROWED_BOX,\n     Warn,\n@@ -553,6 +567,12 @@ declare_lint! {\n /// ```rust\n /// fn as_u64(x: u8) -> u64 { x as u64 }\n /// ```\n+///\n+/// Using `::from` would look like this:\n+///\n+/// ```rust\n+/// fn as_u64(x: u8) -> u64 { u64::from(x) }\n+/// ```\n declare_lint! {\n     pub CAST_LOSSLESS,\n     Warn,\n@@ -580,15 +600,15 @@ declare_lint! {\n fn int_ty_to_nbits(typ: Ty, tcx: TyCtxt) -> u64 {\n     match typ.sty {\n         ty::TyInt(i) => match i {\n-            IntTy::Is => tcx.data_layout.pointer_size.bits(),\n+            IntTy::Isize => tcx.data_layout.pointer_size.bits(),\n             IntTy::I8 => 8,\n             IntTy::I16 => 16,\n             IntTy::I32 => 32,\n             IntTy::I64 => 64,\n             IntTy::I128 => 128,\n         },\n         ty::TyUint(i) => match i {\n-            UintTy::Us => tcx.data_layout.pointer_size.bits(),\n+            UintTy::Usize => tcx.data_layout.pointer_size.bits(),\n             UintTy::U8 => 8,\n             UintTy::U16 => 16,\n             UintTy::U32 => 32,\n@@ -601,7 +621,7 @@ fn int_ty_to_nbits(typ: Ty, tcx: TyCtxt) -> u64 {\n \n fn is_isize_or_usize(typ: Ty) -> bool {\n     match typ.sty {\n-        ty::TyInt(IntTy::Is) | ty::TyUint(UintTy::Us) => true,\n+        ty::TyInt(IntTy::Isize) | ty::TyUint(UintTy::Usize) => true,\n         _ => false,\n     }\n }\n@@ -1033,6 +1053,12 @@ impl<'tcx> Visitor<'tcx> for TypeComplexityVisitor {\n /// ```rust\n /// 'x' as u8\n /// ```\n+///\n+/// A better version, using the byte literal:\n+///\n+/// ```rust\n+/// b'x'\n+/// ```\n declare_lint! {\n     pub CHAR_LIT_AS_U8,\n     Warn,\n@@ -1119,6 +1145,20 @@ enum AbsurdComparisonResult {\n }\n \n \n+fn is_cast_between_fixed_and_target<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    expr: &'tcx Expr\n+) -> bool {\n+\n+    if let ExprCast(ref cast_exp, _) = expr.node {\n+        let precast_ty = cx.tables.expr_ty(cast_exp);\n+        let cast_ty = cx.tables.expr_ty(expr);\n+\n+        return is_isize_or_usize(precast_ty) != is_isize_or_usize(cast_ty)\n+    }\n+\n+    return false;\n+}\n \n fn detect_absurd_comparison<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n@@ -1136,6 +1176,11 @@ fn detect_absurd_comparison<'a, 'tcx>(\n         return None;\n     }\n \n+    // comparisons between fix sized types and target sized types are considered unanalyzable\n+    if is_cast_between_fixed_and_target(cx, lhs) || is_cast_between_fixed_and_target(cx, rhs) {\n+        return None;\n+    }\n+\n     let normalized = normalize_comparison(op, lhs, rhs);\n     let (rel, normalized_lhs, normalized_rhs) = if let Some(val) = normalized {\n         val\n@@ -1190,31 +1235,31 @@ fn detect_extreme_expr<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) -\n \n     let which = match (&ty.sty, cv.val) {\n         (&ty::TyBool, Bool(false)) |\n-        (&ty::TyInt(IntTy::Is), Integral(Isize(Is32(::std::i32::MIN)))) |\n-        (&ty::TyInt(IntTy::Is), Integral(Isize(Is64(::std::i64::MIN)))) |\n+        (&ty::TyInt(IntTy::Isize), Integral(Isize(Is32(::std::i32::MIN)))) |\n+        (&ty::TyInt(IntTy::Isize), Integral(Isize(Is64(::std::i64::MIN)))) |\n         (&ty::TyInt(IntTy::I8), Integral(I8(::std::i8::MIN))) |\n         (&ty::TyInt(IntTy::I16), Integral(I16(::std::i16::MIN))) |\n         (&ty::TyInt(IntTy::I32), Integral(I32(::std::i32::MIN))) |\n         (&ty::TyInt(IntTy::I64), Integral(I64(::std::i64::MIN))) |\n         (&ty::TyInt(IntTy::I128), Integral(I128(::std::i128::MIN))) |\n-        (&ty::TyUint(UintTy::Us), Integral(Usize(Us32(::std::u32::MIN)))) |\n-        (&ty::TyUint(UintTy::Us), Integral(Usize(Us64(::std::u64::MIN)))) |\n+        (&ty::TyUint(UintTy::Usize), Integral(Usize(Us32(::std::u32::MIN)))) |\n+        (&ty::TyUint(UintTy::Usize), Integral(Usize(Us64(::std::u64::MIN)))) |\n         (&ty::TyUint(UintTy::U8), Integral(U8(::std::u8::MIN))) |\n         (&ty::TyUint(UintTy::U16), Integral(U16(::std::u16::MIN))) |\n         (&ty::TyUint(UintTy::U32), Integral(U32(::std::u32::MIN))) |\n         (&ty::TyUint(UintTy::U64), Integral(U64(::std::u64::MIN))) |\n         (&ty::TyUint(UintTy::U128), Integral(U128(::std::u128::MIN))) => Minimum,\n \n         (&ty::TyBool, Bool(true)) |\n-        (&ty::TyInt(IntTy::Is), Integral(Isize(Is32(::std::i32::MAX)))) |\n-        (&ty::TyInt(IntTy::Is), Integral(Isize(Is64(::std::i64::MAX)))) |\n+        (&ty::TyInt(IntTy::Isize), Integral(Isize(Is32(::std::i32::MAX)))) |\n+        (&ty::TyInt(IntTy::Isize), Integral(Isize(Is64(::std::i64::MAX)))) |\n         (&ty::TyInt(IntTy::I8), Integral(I8(::std::i8::MAX))) |\n         (&ty::TyInt(IntTy::I16), Integral(I16(::std::i16::MAX))) |\n         (&ty::TyInt(IntTy::I32), Integral(I32(::std::i32::MAX))) |\n         (&ty::TyInt(IntTy::I64), Integral(I64(::std::i64::MAX))) |\n         (&ty::TyInt(IntTy::I128), Integral(I128(::std::i128::MAX))) |\n-        (&ty::TyUint(UintTy::Us), Integral(Usize(Us32(::std::u32::MAX)))) |\n-        (&ty::TyUint(UintTy::Us), Integral(Usize(Us64(::std::u64::MAX)))) |\n+        (&ty::TyUint(UintTy::Usize), Integral(Usize(Us32(::std::u32::MAX)))) |\n+        (&ty::TyUint(UintTy::Usize), Integral(Usize(Us64(::std::u64::MAX)))) |\n         (&ty::TyUint(UintTy::U8), Integral(U8(::std::u8::MAX))) |\n         (&ty::TyUint(UintTy::U16), Integral(U16(::std::u16::MAX))) |\n         (&ty::TyUint(UintTy::U32), Integral(U32(::std::u32::MAX))) |\n@@ -1368,7 +1413,7 @@ fn numeric_cast_precast_bounds<'a>(cx: &LateContext, expr: &'a Expr) -> Option<(\n                     FullInt::S(i128::from(i64::max_value())),\n                 ),\n                 IntTy::I128 => (FullInt::S(i128::min_value() as i128), FullInt::S(i128::max_value() as i128)),\n-                IntTy::Is => (FullInt::S(isize::min_value() as i128), FullInt::S(isize::max_value() as i128)),\n+                IntTy::Isize => (FullInt::S(isize::min_value() as i128), FullInt::S(isize::max_value() as i128)),\n             }),\n             ty::TyUint(uint_ty) => Some(match uint_ty {\n                 UintTy::U8 => (FullInt::U(u128::from(u8::min_value())), FullInt::U(u128::from(u8::max_value()))),\n@@ -1385,7 +1430,7 @@ fn numeric_cast_precast_bounds<'a>(cx: &LateContext, expr: &'a Expr) -> Option<(\n                     FullInt::U(u128::from(u64::max_value())),\n                 ),\n                 UintTy::U128 => (FullInt::U(u128::min_value() as u128), FullInt::U(u128::max_value() as u128)),\n-                UintTy::Us => (FullInt::U(usize::min_value() as u128), FullInt::U(usize::max_value() as u128)),\n+                UintTy::Usize => (FullInt::U(usize::min_value() as u128), FullInt::U(usize::max_value() as u128)),\n             }),\n             _ => None,\n         }\n@@ -1634,7 +1679,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n \n                         let mut ctr_vis = ImplicitHasherConstructorVisitor::new(cx, target);\n                         ctr_vis.visit_body(body);\n-                        assert!(ctr_vis.suggestions.is_empty());\n \n                         span_lint_and_then(\n                             cx,"}, {"sha": "b13ceb8692a16e0dd4e378e247e53daeb4459797", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -152,10 +152,10 @@ define_Conf! {\n         \"DirectX\",\n         \"ECMAScript\",\n         \"GPLv2\", \"GPLv3\",\n-        \"GitHub\",\n+        \"GitHub\", \"GitLab\",\n         \"IPv4\", \"IPv6\",\n         \"JavaScript\",\n-        \"NaN\",\n+        \"NaN\", \"NaNs\",\n         \"OAuth\",\n         \"OpenGL\", \"OpenSSH\", \"OpenSSL\", \"OpenStreetMap\",\n         \"TrueType\","}, {"sha": "9ade2778e0c1059b472a09b1e9d27fe2be7af90c", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -406,9 +406,6 @@ fn print_item(cx: &LateContext, item: &hir::Item) {\n         hir::ItemTraitAlias(..) => {\n             println!(\"trait alias\");\n         }\n-        hir::ItemAutoImpl(_, ref _trait_ref) => {\n-            println!(\"auto impl\");\n-        },\n         hir::ItemImpl(_, _, _, _, Some(ref _trait_ref), _, _) => {\n             println!(\"trait impl\");\n         },"}, {"sha": "8c036e6c072557c3a4c257a39dc7098a19cf01c9", "filename": "tests/ui/absurd-extreme-comparisons.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.rs?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -50,3 +50,8 @@ impl PartialOrd<u32> for U {\n pub fn foo(val: U) -> bool {\n     val > std::u32::MAX\n }\n+\n+pub fn bar(len: u64) -> bool {\n+    // This is OK as we are casting from target sized to fixed size\n+    len >= std::usize::MAX as u64\n+}"}, {"sha": "833e5a557807688408e27ff19f99af1e7d8e9e4d", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -25,36 +25,6 @@ fn main() {\n     1u32 as i32;\n     1u64 as i64;\n     1usize as isize;\n-    // Test cast_lossless with casts to integer types\n-    1i8 as i16;\n-    1i8 as i32;\n-    1i8 as i64;\n-    1u8 as i16;\n-    1u8 as i32;\n-    1u8 as i64;\n-    1u8 as u16;\n-    1u8 as u32;\n-    1u8 as u64;\n-    1i16 as i32;\n-    1i16 as i64;\n-    1u16 as i32;\n-    1u16 as i64;\n-    1u16 as u32;\n-    1u16 as u64;\n-    1i32 as i64;\n-    1u32 as i64;\n-    1u32 as u64;\n-    // Test cast_lossless with casts to floating-point types\n-    1i8 as f32;\n-    1i8 as f64;\n-    1u8 as f32;\n-    1u8 as f64;\n-    1i16 as f32;\n-    1i16 as f64;\n-    1u16 as f32;\n-    1u16 as f64;\n-    1i32 as f64;\n-    1u32 as f64;\n     // Test cast_lossless with casts from floating-point types\n     1.0f32 as f64;\n     // Test cast_lossless with an expression wrapped in parens\n@@ -63,25 +33,6 @@ fn main() {\n     1i32 as u32;\n     1isize as usize;\n     // Extra checks for *size\n-    // Casting from *size\n-    1isize as i8;\n-    1isize as f64;\n-    1usize as f64;\n-    1isize as f32;\n-    1usize as f32;\n-    1isize as i32;\n-    1isize as u32;\n-    1usize as u32;\n-    1usize as i32;\n-    // Casting to *size\n-    1i64 as isize;\n-    1i64 as usize;\n-    1u64 as isize;\n-    1u64 as usize;\n-    1u32 as isize;\n-    1u32 as usize; // Should not trigger any lint\n-    1i32 as isize; // Neither should this\n-    1i32 as usize;\n     // Test cast_unnecessary\n     1i32 as i32;\n     1f32 as f32;"}, {"sha": "ac409a813cce943f5ac958b83b16bafa34789d9b", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 15, "deletions": 297, "changes": 312, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -132,331 +132,49 @@ error: casting usize to isize may wrap around the value\n 27 |     1usize as isize;\n    |     ^^^^^^^^^^^^^^^\n \n-error: casting i8 to i16 may become silently lossy if types change\n+error: casting f32 to f64 may become silently lossy if types change\n   --> $DIR/cast.rs:29:5\n    |\n-29 |     1i8 as i16;\n-   |     ^^^^^^^^^^ help: try: `i16::from(1i8)`\n+29 |     1.0f32 as f64;\n+   |     ^^^^^^^^^^^^^ help: try: `f64::from(1.0f32)`\n    |\n    = note: `-D cast-lossless` implied by `-D warnings`\n \n-error: casting i8 to i32 may become silently lossy if types change\n-  --> $DIR/cast.rs:30:5\n-   |\n-30 |     1i8 as i32;\n-   |     ^^^^^^^^^^ help: try: `i32::from(1i8)`\n-\n-error: casting i8 to i64 may become silently lossy if types change\n-  --> $DIR/cast.rs:31:5\n-   |\n-31 |     1i8 as i64;\n-   |     ^^^^^^^^^^ help: try: `i64::from(1i8)`\n-\n-error: casting u8 to i16 may become silently lossy if types change\n-  --> $DIR/cast.rs:32:5\n-   |\n-32 |     1u8 as i16;\n-   |     ^^^^^^^^^^ help: try: `i16::from(1u8)`\n-\n-error: casting u8 to i32 may become silently lossy if types change\n-  --> $DIR/cast.rs:33:5\n-   |\n-33 |     1u8 as i32;\n-   |     ^^^^^^^^^^ help: try: `i32::from(1u8)`\n-\n-error: casting u8 to i64 may become silently lossy if types change\n-  --> $DIR/cast.rs:34:5\n-   |\n-34 |     1u8 as i64;\n-   |     ^^^^^^^^^^ help: try: `i64::from(1u8)`\n-\n error: casting u8 to u16 may become silently lossy if types change\n-  --> $DIR/cast.rs:35:5\n-   |\n-35 |     1u8 as u16;\n-   |     ^^^^^^^^^^ help: try: `u16::from(1u8)`\n-\n-error: casting u8 to u32 may become silently lossy if types change\n-  --> $DIR/cast.rs:36:5\n-   |\n-36 |     1u8 as u32;\n-   |     ^^^^^^^^^^ help: try: `u32::from(1u8)`\n-\n-error: casting u8 to u64 may become silently lossy if types change\n-  --> $DIR/cast.rs:37:5\n-   |\n-37 |     1u8 as u64;\n-   |     ^^^^^^^^^^ help: try: `u64::from(1u8)`\n-\n-error: casting i16 to i32 may become silently lossy if types change\n-  --> $DIR/cast.rs:38:5\n-   |\n-38 |     1i16 as i32;\n-   |     ^^^^^^^^^^^ help: try: `i32::from(1i16)`\n-\n-error: casting i16 to i64 may become silently lossy if types change\n-  --> $DIR/cast.rs:39:5\n-   |\n-39 |     1i16 as i64;\n-   |     ^^^^^^^^^^^ help: try: `i64::from(1i16)`\n-\n-error: casting u16 to i32 may become silently lossy if types change\n-  --> $DIR/cast.rs:40:5\n-   |\n-40 |     1u16 as i32;\n-   |     ^^^^^^^^^^^ help: try: `i32::from(1u16)`\n-\n-error: casting u16 to i64 may become silently lossy if types change\n-  --> $DIR/cast.rs:41:5\n-   |\n-41 |     1u16 as i64;\n-   |     ^^^^^^^^^^^ help: try: `i64::from(1u16)`\n-\n-error: casting u16 to u32 may become silently lossy if types change\n-  --> $DIR/cast.rs:42:5\n-   |\n-42 |     1u16 as u32;\n-   |     ^^^^^^^^^^^ help: try: `u32::from(1u16)`\n-\n-error: casting u16 to u64 may become silently lossy if types change\n-  --> $DIR/cast.rs:43:5\n-   |\n-43 |     1u16 as u64;\n-   |     ^^^^^^^^^^^ help: try: `u64::from(1u16)`\n-\n-error: casting i32 to i64 may become silently lossy if types change\n-  --> $DIR/cast.rs:44:5\n-   |\n-44 |     1i32 as i64;\n-   |     ^^^^^^^^^^^ help: try: `i64::from(1i32)`\n-\n-error: casting u32 to i64 may become silently lossy if types change\n-  --> $DIR/cast.rs:45:5\n-   |\n-45 |     1u32 as i64;\n-   |     ^^^^^^^^^^^ help: try: `i64::from(1u32)`\n-\n-error: casting u32 to u64 may become silently lossy if types change\n-  --> $DIR/cast.rs:46:5\n-   |\n-46 |     1u32 as u64;\n-   |     ^^^^^^^^^^^ help: try: `u64::from(1u32)`\n-\n-error: casting i8 to f32 may become silently lossy if types change\n-  --> $DIR/cast.rs:48:5\n-   |\n-48 |     1i8 as f32;\n-   |     ^^^^^^^^^^ help: try: `f32::from(1i8)`\n-\n-error: casting i8 to f64 may become silently lossy if types change\n-  --> $DIR/cast.rs:49:5\n-   |\n-49 |     1i8 as f64;\n-   |     ^^^^^^^^^^ help: try: `f64::from(1i8)`\n-\n-error: casting u8 to f32 may become silently lossy if types change\n-  --> $DIR/cast.rs:50:5\n-   |\n-50 |     1u8 as f32;\n-   |     ^^^^^^^^^^ help: try: `f32::from(1u8)`\n-\n-error: casting u8 to f64 may become silently lossy if types change\n-  --> $DIR/cast.rs:51:5\n-   |\n-51 |     1u8 as f64;\n-   |     ^^^^^^^^^^ help: try: `f64::from(1u8)`\n-\n-error: casting i16 to f32 may become silently lossy if types change\n-  --> $DIR/cast.rs:52:5\n-   |\n-52 |     1i16 as f32;\n-   |     ^^^^^^^^^^^ help: try: `f32::from(1i16)`\n-\n-error: casting i16 to f64 may become silently lossy if types change\n-  --> $DIR/cast.rs:53:5\n-   |\n-53 |     1i16 as f64;\n-   |     ^^^^^^^^^^^ help: try: `f64::from(1i16)`\n-\n-error: casting u16 to f32 may become silently lossy if types change\n-  --> $DIR/cast.rs:54:5\n-   |\n-54 |     1u16 as f32;\n-   |     ^^^^^^^^^^^ help: try: `f32::from(1u16)`\n-\n-error: casting u16 to f64 may become silently lossy if types change\n-  --> $DIR/cast.rs:55:5\n-   |\n-55 |     1u16 as f64;\n-   |     ^^^^^^^^^^^ help: try: `f64::from(1u16)`\n-\n-error: casting i32 to f64 may become silently lossy if types change\n-  --> $DIR/cast.rs:56:5\n-   |\n-56 |     1i32 as f64;\n-   |     ^^^^^^^^^^^ help: try: `f64::from(1i32)`\n-\n-error: casting u32 to f64 may become silently lossy if types change\n-  --> $DIR/cast.rs:57:5\n-   |\n-57 |     1u32 as f64;\n-   |     ^^^^^^^^^^^ help: try: `f64::from(1u32)`\n-\n-error: casting f32 to f64 may become silently lossy if types change\n-  --> $DIR/cast.rs:59:5\n-   |\n-59 |     1.0f32 as f64;\n-   |     ^^^^^^^^^^^^^ help: try: `f64::from(1.0f32)`\n-\n-error: casting u8 to u16 may become silently lossy if types change\n-  --> $DIR/cast.rs:61:5\n+  --> $DIR/cast.rs:31:5\n    |\n-61 |     (1u8 + 1u8) as u16;\n+31 |     (1u8 + 1u8) as u16;\n    |     ^^^^^^^^^^^^^^^^^^ help: try: `u16::from(1u8 + 1u8)`\n \n error: casting i32 to u32 may lose the sign of the value\n-  --> $DIR/cast.rs:63:5\n+  --> $DIR/cast.rs:33:5\n    |\n-63 |     1i32 as u32;\n+33 |     1i32 as u32;\n    |     ^^^^^^^^^^^\n \n error: casting isize to usize may lose the sign of the value\n-  --> $DIR/cast.rs:64:5\n+  --> $DIR/cast.rs:34:5\n    |\n-64 |     1isize as usize;\n+34 |     1isize as usize;\n    |     ^^^^^^^^^^^^^^^\n \n-error: casting isize to i8 may truncate the value\n-  --> $DIR/cast.rs:67:5\n-   |\n-67 |     1isize as i8;\n-   |     ^^^^^^^^^^^^\n-\n-error: casting isize to f64 causes a loss of precision on targets with 64-bit wide pointers (isize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-  --> $DIR/cast.rs:68:5\n-   |\n-68 |     1isize as f64;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting usize to f64 causes a loss of precision on targets with 64-bit wide pointers (usize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-  --> $DIR/cast.rs:69:5\n-   |\n-69 |     1usize as f64;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting isize to f32 causes a loss of precision (isize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n-  --> $DIR/cast.rs:70:5\n-   |\n-70 |     1isize as f32;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting usize to f32 causes a loss of precision (usize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n-  --> $DIR/cast.rs:71:5\n-   |\n-71 |     1usize as f32;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting isize to i32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:72:5\n-   |\n-72 |     1isize as i32;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting isize to u32 may lose the sign of the value\n-  --> $DIR/cast.rs:73:5\n-   |\n-73 |     1isize as u32;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting isize to u32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:73:5\n-   |\n-73 |     1isize as u32;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting usize to u32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:74:5\n-   |\n-74 |     1usize as u32;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting usize to i32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:75:5\n-   |\n-75 |     1usize as i32;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting usize to i32 may wrap around the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:75:5\n-   |\n-75 |     1usize as i32;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting i64 to isize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:77:5\n-   |\n-77 |     1i64 as isize;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting i64 to usize may lose the sign of the value\n-  --> $DIR/cast.rs:78:5\n-   |\n-78 |     1i64 as usize;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting i64 to usize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:78:5\n-   |\n-78 |     1i64 as usize;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting u64 to isize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:79:5\n-   |\n-79 |     1u64 as isize;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting u64 to isize may wrap around the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:79:5\n-   |\n-79 |     1u64 as isize;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting u64 to usize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:80:5\n-   |\n-80 |     1u64 as usize;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting u32 to isize may wrap around the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:81:5\n-   |\n-81 |     1u32 as isize;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting i32 to usize may lose the sign of the value\n-  --> $DIR/cast.rs:84:5\n-   |\n-84 |     1i32 as usize;\n-   |     ^^^^^^^^^^^^^\n-\n error: casting to the same type is unnecessary (`i32` -> `i32`)\n-  --> $DIR/cast.rs:86:5\n+  --> $DIR/cast.rs:37:5\n    |\n-86 |     1i32 as i32;\n+37 |     1i32 as i32;\n    |     ^^^^^^^^^^^\n    |\n    = note: `-D unnecessary-cast` implied by `-D warnings`\n \n error: casting to the same type is unnecessary (`f32` -> `f32`)\n-  --> $DIR/cast.rs:87:5\n+  --> $DIR/cast.rs:38:5\n    |\n-87 |     1f32 as f32;\n+38 |     1f32 as f32;\n    |     ^^^^^^^^^^^\n \n error: casting to the same type is unnecessary (`bool` -> `bool`)\n-  --> $DIR/cast.rs:88:5\n+  --> $DIR/cast.rs:39:5\n    |\n-88 |     false as bool;\n+39 |     false as bool;\n    |     ^^^^^^^^^^^^^\n "}, {"sha": "9e61059b630c56af76c8a01f87f9ca984c283485", "filename": "tests/ui/cast_lossless_float.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fcast_lossless_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fcast_lossless_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_float.rs?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -0,0 +1,15 @@\n+#[warn(cast_lossless)]\n+#[allow(no_effect, unnecessary_operation)]\n+fn main() {\n+    // Test cast_lossless with casts to floating-point types\n+    1i8 as f32;\n+    1i8 as f64;\n+    1u8 as f32;\n+    1u8 as f64;\n+    1i16 as f32;\n+    1i16 as f64;\n+    1u16 as f32;\n+    1u16 as f64;\n+    1i32 as f64;\n+    1u32 as f64;\n+}"}, {"sha": "781d9c897672cb849405edfd7f53bf4baafa9408", "filename": "tests/ui/cast_lossless_float.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fcast_lossless_float.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fcast_lossless_float.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_float.stderr?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -0,0 +1,62 @@\n+error: casting i8 to f32 may become silently lossy if types change\n+ --> $DIR/cast_lossless_float.rs:5:5\n+  |\n+5 |     1i8 as f32;\n+  |     ^^^^^^^^^^ help: try: `f32::from(1i8)`\n+  |\n+  = note: `-D cast-lossless` implied by `-D warnings`\n+\n+error: casting i8 to f64 may become silently lossy if types change\n+ --> $DIR/cast_lossless_float.rs:6:5\n+  |\n+6 |     1i8 as f64;\n+  |     ^^^^^^^^^^ help: try: `f64::from(1i8)`\n+\n+error: casting u8 to f32 may become silently lossy if types change\n+ --> $DIR/cast_lossless_float.rs:7:5\n+  |\n+7 |     1u8 as f32;\n+  |     ^^^^^^^^^^ help: try: `f32::from(1u8)`\n+\n+error: casting u8 to f64 may become silently lossy if types change\n+ --> $DIR/cast_lossless_float.rs:8:5\n+  |\n+8 |     1u8 as f64;\n+  |     ^^^^^^^^^^ help: try: `f64::from(1u8)`\n+\n+error: casting i16 to f32 may become silently lossy if types change\n+ --> $DIR/cast_lossless_float.rs:9:5\n+  |\n+9 |     1i16 as f32;\n+  |     ^^^^^^^^^^^ help: try: `f32::from(1i16)`\n+\n+error: casting i16 to f64 may become silently lossy if types change\n+  --> $DIR/cast_lossless_float.rs:10:5\n+   |\n+10 |     1i16 as f64;\n+   |     ^^^^^^^^^^^ help: try: `f64::from(1i16)`\n+\n+error: casting u16 to f32 may become silently lossy if types change\n+  --> $DIR/cast_lossless_float.rs:11:5\n+   |\n+11 |     1u16 as f32;\n+   |     ^^^^^^^^^^^ help: try: `f32::from(1u16)`\n+\n+error: casting u16 to f64 may become silently lossy if types change\n+  --> $DIR/cast_lossless_float.rs:12:5\n+   |\n+12 |     1u16 as f64;\n+   |     ^^^^^^^^^^^ help: try: `f64::from(1u16)`\n+\n+error: casting i32 to f64 may become silently lossy if types change\n+  --> $DIR/cast_lossless_float.rs:13:5\n+   |\n+13 |     1i32 as f64;\n+   |     ^^^^^^^^^^^ help: try: `f64::from(1i32)`\n+\n+error: casting u32 to f64 may become silently lossy if types change\n+  --> $DIR/cast_lossless_float.rs:14:5\n+   |\n+14 |     1u32 as f64;\n+   |     ^^^^^^^^^^^ help: try: `f64::from(1u32)`\n+"}, {"sha": "5f89d057c3325dab9ed49049d1f3052c7f73253d", "filename": "tests/ui/cast_lossless_integer.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fcast_lossless_integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fcast_lossless_integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_integer.rs?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -0,0 +1,24 @@\n+\n+#[warn(cast_lossless)]\n+#[allow(no_effect, unnecessary_operation)]\n+fn main() {\n+    // Test cast_lossless with casts to integer types\n+    1i8 as i16;\n+    1i8 as i32;\n+    1i8 as i64;\n+    1u8 as i16;\n+    1u8 as i32;\n+    1u8 as i64;\n+    1u8 as u16;\n+    1u8 as u32;\n+    1u8 as u64;\n+    1i16 as i32;\n+    1i16 as i64;\n+    1u16 as i32;\n+    1u16 as i64;\n+    1u16 as u32;\n+    1u16 as u64;\n+    1i32 as i64;\n+    1u32 as i64;\n+    1u32 as u64;\n+}"}, {"sha": "fdd915979e4866af4fc5744245f28e23d14d66d5", "filename": "tests/ui/cast_lossless_integer.stderr", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fcast_lossless_integer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fcast_lossless_integer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_integer.stderr?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -0,0 +1,110 @@\n+error: casting i8 to i16 may become silently lossy if types change\n+ --> $DIR/cast_lossless_integer.rs:6:5\n+  |\n+6 |     1i8 as i16;\n+  |     ^^^^^^^^^^ help: try: `i16::from(1i8)`\n+  |\n+  = note: `-D cast-lossless` implied by `-D warnings`\n+\n+error: casting i8 to i32 may become silently lossy if types change\n+ --> $DIR/cast_lossless_integer.rs:7:5\n+  |\n+7 |     1i8 as i32;\n+  |     ^^^^^^^^^^ help: try: `i32::from(1i8)`\n+\n+error: casting i8 to i64 may become silently lossy if types change\n+ --> $DIR/cast_lossless_integer.rs:8:5\n+  |\n+8 |     1i8 as i64;\n+  |     ^^^^^^^^^^ help: try: `i64::from(1i8)`\n+\n+error: casting u8 to i16 may become silently lossy if types change\n+ --> $DIR/cast_lossless_integer.rs:9:5\n+  |\n+9 |     1u8 as i16;\n+  |     ^^^^^^^^^^ help: try: `i16::from(1u8)`\n+\n+error: casting u8 to i32 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:10:5\n+   |\n+10 |     1u8 as i32;\n+   |     ^^^^^^^^^^ help: try: `i32::from(1u8)`\n+\n+error: casting u8 to i64 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:11:5\n+   |\n+11 |     1u8 as i64;\n+   |     ^^^^^^^^^^ help: try: `i64::from(1u8)`\n+\n+error: casting u8 to u16 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:12:5\n+   |\n+12 |     1u8 as u16;\n+   |     ^^^^^^^^^^ help: try: `u16::from(1u8)`\n+\n+error: casting u8 to u32 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:13:5\n+   |\n+13 |     1u8 as u32;\n+   |     ^^^^^^^^^^ help: try: `u32::from(1u8)`\n+\n+error: casting u8 to u64 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:14:5\n+   |\n+14 |     1u8 as u64;\n+   |     ^^^^^^^^^^ help: try: `u64::from(1u8)`\n+\n+error: casting i16 to i32 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:15:5\n+   |\n+15 |     1i16 as i32;\n+   |     ^^^^^^^^^^^ help: try: `i32::from(1i16)`\n+\n+error: casting i16 to i64 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:16:5\n+   |\n+16 |     1i16 as i64;\n+   |     ^^^^^^^^^^^ help: try: `i64::from(1i16)`\n+\n+error: casting u16 to i32 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:17:5\n+   |\n+17 |     1u16 as i32;\n+   |     ^^^^^^^^^^^ help: try: `i32::from(1u16)`\n+\n+error: casting u16 to i64 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:18:5\n+   |\n+18 |     1u16 as i64;\n+   |     ^^^^^^^^^^^ help: try: `i64::from(1u16)`\n+\n+error: casting u16 to u32 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:19:5\n+   |\n+19 |     1u16 as u32;\n+   |     ^^^^^^^^^^^ help: try: `u32::from(1u16)`\n+\n+error: casting u16 to u64 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:20:5\n+   |\n+20 |     1u16 as u64;\n+   |     ^^^^^^^^^^^ help: try: `u64::from(1u16)`\n+\n+error: casting i32 to i64 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:21:5\n+   |\n+21 |     1i32 as i64;\n+   |     ^^^^^^^^^^^ help: try: `i64::from(1i32)`\n+\n+error: casting u32 to i64 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:22:5\n+   |\n+22 |     1u32 as i64;\n+   |     ^^^^^^^^^^^ help: try: `i64::from(1u32)`\n+\n+error: casting u32 to u64 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:23:5\n+   |\n+23 |     1u32 as u64;\n+   |     ^^^^^^^^^^^ help: try: `u64::from(1u32)`\n+"}, {"sha": "d0bef860c709ccb8d689ea1b84d9e9de42b10cbc", "filename": "tests/ui/cast_size.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fcast_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fcast_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size.rs?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -0,0 +1,23 @@\n+#[warn(cast_precision_loss, cast_possible_truncation, cast_sign_loss, cast_possible_wrap, cast_lossless)]\n+#[allow(no_effect, unnecessary_operation)]\n+fn main() {\n+    // Casting from *size\n+    1isize as i8;\n+    1isize as f64;\n+    1usize as f64;\n+    1isize as f32;\n+    1usize as f32;\n+    1isize as i32;\n+    1isize as u32;\n+    1usize as u32;\n+    1usize as i32;\n+    // Casting to *size\n+    1i64 as isize;\n+    1i64 as usize;\n+    1u64 as isize;\n+    1u64 as usize;\n+    1u32 as isize;\n+    1u32 as usize; // Should not trigger any lint\n+    1i32 as isize; // Neither should this\n+    1i32 as usize;\n+}"}, {"sha": "a6aac1300a32b093d2d41d37cfe39a0d47576373", "filename": "tests/ui/cast_size.stderr", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fcast_size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fcast_size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size.stderr?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -0,0 +1,122 @@\n+error: casting isize to i8 may truncate the value\n+ --> $DIR/cast_size.rs:5:5\n+  |\n+5 |     1isize as i8;\n+  |     ^^^^^^^^^^^^\n+  |\n+  = note: `-D cast-possible-truncation` implied by `-D warnings`\n+\n+error: casting isize to f64 causes a loss of precision on targets with 64-bit wide pointers (isize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+ --> $DIR/cast_size.rs:6:5\n+  |\n+6 |     1isize as f64;\n+  |     ^^^^^^^^^^^^^\n+  |\n+  = note: `-D cast-precision-loss` implied by `-D warnings`\n+\n+error: casting usize to f64 causes a loss of precision on targets with 64-bit wide pointers (usize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+ --> $DIR/cast_size.rs:7:5\n+  |\n+7 |     1usize as f64;\n+  |     ^^^^^^^^^^^^^\n+\n+error: casting isize to f32 causes a loss of precision (isize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n+ --> $DIR/cast_size.rs:8:5\n+  |\n+8 |     1isize as f32;\n+  |     ^^^^^^^^^^^^^\n+\n+error: casting usize to f32 causes a loss of precision (usize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n+ --> $DIR/cast_size.rs:9:5\n+  |\n+9 |     1usize as f32;\n+  |     ^^^^^^^^^^^^^\n+\n+error: casting isize to i32 may truncate the value on targets with 64-bit wide pointers\n+  --> $DIR/cast_size.rs:10:5\n+   |\n+10 |     1isize as i32;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting isize to u32 may lose the sign of the value\n+  --> $DIR/cast_size.rs:11:5\n+   |\n+11 |     1isize as u32;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: `-D cast-sign-loss` implied by `-D warnings`\n+\n+error: casting isize to u32 may truncate the value on targets with 64-bit wide pointers\n+  --> $DIR/cast_size.rs:11:5\n+   |\n+11 |     1isize as u32;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting usize to u32 may truncate the value on targets with 64-bit wide pointers\n+  --> $DIR/cast_size.rs:12:5\n+   |\n+12 |     1usize as u32;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting usize to i32 may truncate the value on targets with 64-bit wide pointers\n+  --> $DIR/cast_size.rs:13:5\n+   |\n+13 |     1usize as i32;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting usize to i32 may wrap around the value on targets with 32-bit wide pointers\n+  --> $DIR/cast_size.rs:13:5\n+   |\n+13 |     1usize as i32;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: `-D cast-possible-wrap` implied by `-D warnings`\n+\n+error: casting i64 to isize may truncate the value on targets with 32-bit wide pointers\n+  --> $DIR/cast_size.rs:15:5\n+   |\n+15 |     1i64 as isize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting i64 to usize may lose the sign of the value\n+  --> $DIR/cast_size.rs:16:5\n+   |\n+16 |     1i64 as usize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting i64 to usize may truncate the value on targets with 32-bit wide pointers\n+  --> $DIR/cast_size.rs:16:5\n+   |\n+16 |     1i64 as usize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting u64 to isize may truncate the value on targets with 32-bit wide pointers\n+  --> $DIR/cast_size.rs:17:5\n+   |\n+17 |     1u64 as isize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting u64 to isize may wrap around the value on targets with 64-bit wide pointers\n+  --> $DIR/cast_size.rs:17:5\n+   |\n+17 |     1u64 as isize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting u64 to usize may truncate the value on targets with 32-bit wide pointers\n+  --> $DIR/cast_size.rs:18:5\n+   |\n+18 |     1u64 as usize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting u32 to isize may wrap around the value on targets with 32-bit wide pointers\n+  --> $DIR/cast_size.rs:19:5\n+   |\n+19 |     1u32 as isize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting i32 to usize may lose the sign of the value\n+  --> $DIR/cast_size.rs:22:5\n+   |\n+22 |     1i32 as usize;\n+   |     ^^^^^^^^^^^^^\n+"}, {"sha": "e21441640f34a1c34b0b64cc1b317dc85f823be4", "filename": "tests/ui/clone_on_copy_impl.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fclone_on_copy_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fclone_on_copy_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclone_on_copy_impl.rs?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -0,0 +1,22 @@\n+use std::marker::PhantomData;\n+use std::fmt;\n+\n+pub struct Key<T> {\n+    #[doc(hidden)]\n+    pub __name: &'static str,\n+    #[doc(hidden)]\n+    pub __phantom: PhantomData<T>,\n+}\n+\n+impl<T> Copy for Key<T> {}\n+\n+impl<T> Clone for Key<T> {\n+    fn clone(&self) -> Self {\n+        Key {\n+            __name: self.__name,\n+            __phantom: self.__phantom,\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "66c32aed07aedac2042416c4ae174d12222b21b0", "filename": "tests/ui/conf_bad_arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fconf_bad_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fconf_bad_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_arg.stderr?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -1,4 +1,4 @@\n-error: compiler plugins are experimental and possibly buggy (see issue #29597)\n+error[E0658]: compiler plugins are experimental and possibly buggy (see issue #29597)\n  --> $DIR/conf_bad_arg.rs:4:1\n   |\n 4 | #![plugin(clippy(conf_file))]"}, {"sha": "f2a741c70759ea22b364198f4c96a6abe7d53e80", "filename": "tests/ui/conf_bad_toml.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fconf_bad_toml.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fconf_bad_toml.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_toml.stderr?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -1,4 +1,4 @@\n-error: compiler plugins are experimental and possibly buggy (see issue #29597)\n+error[E0658]: compiler plugins are experimental and possibly buggy (see issue #29597)\n  --> $DIR/conf_bad_toml.rs:4:1\n   |\n 4 | #![plugin(clippy(conf_file=\"../ui/conf_bad_toml.toml\"))]"}, {"sha": "679418f38b7e406fd41bbfaaba4fada00d3b92a9", "filename": "tests/ui/conf_bad_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fconf_bad_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fconf_bad_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_type.stderr?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -1,4 +1,4 @@\n-error: compiler plugins are experimental and possibly buggy (see issue #29597)\n+error[E0658]: compiler plugins are experimental and possibly buggy (see issue #29597)\n  --> $DIR/conf_bad_type.rs:4:1\n   |\n 4 | #![plugin(clippy(conf_file=\"../ui/conf_bad_type.toml\"))]"}, {"sha": "71c0d578a6c42cd0a14964335353e6ff1ba3211a", "filename": "tests/ui/conf_french_blacklisted_name.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fconf_french_blacklisted_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fconf_french_blacklisted_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_french_blacklisted_name.stderr?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -1,4 +1,4 @@\n-error: compiler plugins are experimental and possibly buggy (see issue #29597)\n+error[E0658]: compiler plugins are experimental and possibly buggy (see issue #29597)\n  --> $DIR/conf_french_blacklisted_name.rs:2:1\n   |\n 2 | #![plugin(clippy(conf_file=\"../auxiliary/conf_french_blacklisted_name.toml\"))]"}, {"sha": "f1f679e6b0a72aa820e62add997494e609281330", "filename": "tests/ui/conf_path_non_string.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fconf_path_non_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fconf_path_non_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_path_non_string.stderr?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -1,4 +1,4 @@\n-error: compiler plugins are experimental and possibly buggy (see issue #29597)\n+error[E0658]: compiler plugins are experimental and possibly buggy (see issue #29597)\n  --> $DIR/conf_path_non_string.rs:3:1\n   |\n 3 | #![plugin(clippy(conf_file=42))]"}, {"sha": "fc1c33426f5518dff75903967069ab3f30868d38", "filename": "tests/ui/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_unknown_key.stderr?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -1,4 +1,4 @@\n-error: compiler plugins are experimental and possibly buggy (see issue #29597)\n+error[E0658]: compiler plugins are experimental and possibly buggy (see issue #29597)\n  --> $DIR/conf_unknown_key.rs:4:1\n   |\n 4 | #![plugin(clippy(conf_file=\"../auxiliary/conf_unknown_key.toml\"))]"}, {"sha": "448d83ee92159851021e49502fd27baea0f4eacd", "filename": "tests/ui/const_static_lifetime.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fconst_static_lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fconst_static_lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst_static_lifetime.stderr?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -2,79 +2,79 @@ error: Constants have by default a `'static` lifetime\n  --> $DIR/const_static_lifetime.rs:4:17\n   |\n 4 | const VAR_ONE: &'static str = \"Test constant #1\"; // ERROR Consider removing 'static.\n-  |                 ^^^^^^^ help: consider removing `'static`\n+  |                -^^^^^^^---- help: consider removing `'static`: `&str`\n   |\n   = note: `-D const-static-lifetime` implied by `-D warnings`\n \n error: Constants have by default a `'static` lifetime\n  --> $DIR/const_static_lifetime.rs:8:21\n   |\n 8 | const VAR_THREE: &[&'static str] = &[\"one\", \"two\"]; // ERROR Consider removing 'static\n-  |                     ^^^^^^^ help: consider removing `'static`\n+  |                    -^^^^^^^---- help: consider removing `'static`: `&str`\n \n error: Constants have by default a `'static` lifetime\n   --> $DIR/const_static_lifetime.rs:10:32\n    |\n 10 | const VAR_FOUR: (&str, (&str, &'static str), &'static str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n-   |                                ^^^^^^^ help: consider removing `'static`\n+   |                               -^^^^^^^---- help: consider removing `'static`: `&str`\n \n error: Constants have by default a `'static` lifetime\n   --> $DIR/const_static_lifetime.rs:10:47\n    |\n 10 | const VAR_FOUR: (&str, (&str, &'static str), &'static str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n-   |                                               ^^^^^^^ help: consider removing `'static`\n+   |                                              -^^^^^^^---- help: consider removing `'static`: `&str`\n \n error: Constants have by default a `'static` lifetime\n   --> $DIR/const_static_lifetime.rs:12:18\n    |\n 12 | const VAR_FIVE: &'static [&[&'static str]] = &[&[\"test\"], &[\"other one\"]]; // ERROR Consider removing 'static\n-   |                  ^^^^^^^ help: consider removing `'static`\n+   |                 -^^^^^^^------------------ help: consider removing `'static`: `&[&[&'static str]]`\n \n error: Constants have by default a `'static` lifetime\n   --> $DIR/const_static_lifetime.rs:12:30\n    |\n 12 | const VAR_FIVE: &'static [&[&'static str]] = &[&[\"test\"], &[\"other one\"]]; // ERROR Consider removing 'static\n-   |                              ^^^^^^^ help: consider removing `'static`\n+   |                             -^^^^^^^---- help: consider removing `'static`: `&str`\n \n error: Constants have by default a `'static` lifetime\n   --> $DIR/const_static_lifetime.rs:14:17\n    |\n 14 | const VAR_SIX: &'static u8 = &5;\n-   |                 ^^^^^^^ help: consider removing `'static`\n+   |                -^^^^^^^--- help: consider removing `'static`: `&u8`\n \n error: Constants have by default a `'static` lifetime\n   --> $DIR/const_static_lifetime.rs:16:29\n    |\n 16 | const VAR_SEVEN: &[&(&str, &'static [&'static str])] = &[&(\"one\", &[\"other one\"])];\n-   |                             ^^^^^^^ help: consider removing `'static`\n+   |                            -^^^^^^^--------------- help: consider removing `'static`: `&[&'static str]`\n \n error: Constants have by default a `'static` lifetime\n   --> $DIR/const_static_lifetime.rs:16:39\n    |\n 16 | const VAR_SEVEN: &[&(&str, &'static [&'static str])] = &[&(\"one\", &[\"other one\"])];\n-   |                                       ^^^^^^^ help: consider removing `'static`\n+   |                                      -^^^^^^^---- help: consider removing `'static`: `&str`\n \n error: Constants have by default a `'static` lifetime\n   --> $DIR/const_static_lifetime.rs:18:20\n    |\n 18 | const VAR_HEIGHT: &'static Foo = &Foo {};\n-   |                    ^^^^^^^ help: consider removing `'static`\n+   |                   -^^^^^^^---- help: consider removing `'static`: `&Foo`\n \n error: Constants have by default a `'static` lifetime\n   --> $DIR/const_static_lifetime.rs:20:19\n    |\n 20 | const VAR_SLICE: &'static [u8] = b\"Test constant #1\"; // ERROR Consider removing 'static.\n-   |                   ^^^^^^^ help: consider removing `'static`\n+   |                  -^^^^^^^----- help: consider removing `'static`: `&[u8]`\n \n error: Constants have by default a `'static` lifetime\n   --> $DIR/const_static_lifetime.rs:22:19\n    |\n 22 | const VAR_TUPLE: &'static (u8, u8) = &(1, 2); // ERROR Consider removing 'static.\n-   |                   ^^^^^^^ help: consider removing `'static`\n+   |                  -^^^^^^^--------- help: consider removing `'static`: `&(u8, u8)`\n \n error: Constants have by default a `'static` lifetime\n   --> $DIR/const_static_lifetime.rs:24:19\n    |\n 24 | const VAR_ARRAY: &'static [u8; 1] = b\"T\"; // ERROR Consider removing 'static.\n-   |                   ^^^^^^^ help: consider removing `'static`\n+   |                  -^^^^^^^-------- help: consider removing `'static`: `&[u8; 1]`\n "}, {"sha": "340a53386f977def04c4297d3dd8c766021c9eac", "filename": "tests/ui/missing-doc.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fmissing-doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fmissing-doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing-doc.stderr?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -264,9 +264,3 @@ error: missing documentation for a function\n 191 |         fn also_undocumented2() {}\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: missing documentation for a function\n-   --> $DIR/missing-doc.rs:202:1\n-    |\n-202 | fn main() {}\n-    | ^^^^^^^^^^^^\n-"}, {"sha": "2036d7d976bff26198c9b8b857d7928a66a8bb15", "filename": "tests/ui/println_empty_string.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fprintln_empty_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Fprintln_empty_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprintln_empty_string.stderr?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -1,8 +1,8 @@\n-error: using `println!(\"\")`, consider using `println!()` instead\n+error: using `println!(\"\")`\n  --> $DIR/println_empty_string.rs:3:5\n   |\n 3 |     println!(\"\");\n-  |     ^^^^^^^^^^^^^\n+  |     ^^^^^^^^^^^^^ help: replace it with: `println!()`\n   |\n   = note: `-D print-with-newline` implied by `-D warnings`\n "}, {"sha": "31c58b4bb4e78aabd136cd873b8a20385878b61a", "filename": "tests/ui/replace_consts.rs", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freplace_consts.rs?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -0,0 +1,96 @@\n+#![feature(integer_atomics, i128, i128_type)]\n+#![allow(blacklisted_name)]\n+#![deny(replace_consts)]\n+use std::sync::atomic::*;\n+use std::sync::{ONCE_INIT, Once};\n+\n+fn bad() {\n+    // Once\n+    { let foo = ONCE_INIT; };\n+    // Atomic\n+    { let foo = ATOMIC_BOOL_INIT; };\n+    { let foo = ATOMIC_ISIZE_INIT; };\n+    { let foo = ATOMIC_I8_INIT; };\n+    { let foo = ATOMIC_I16_INIT; };\n+    { let foo = ATOMIC_I32_INIT; };\n+    { let foo = ATOMIC_I64_INIT; };\n+    { let foo = ATOMIC_USIZE_INIT; };\n+    { let foo = ATOMIC_U8_INIT; };\n+    { let foo = ATOMIC_U16_INIT; };\n+    { let foo = ATOMIC_U32_INIT; };\n+    { let foo = ATOMIC_U64_INIT; };\n+    // Min\n+    { let foo = std::isize::MIN; };\n+    { let foo = std::i8::MIN; };\n+    { let foo = std::i16::MIN; };\n+    { let foo = std::i32::MIN; };\n+    { let foo = std::i64::MIN; };\n+    { let foo = std::i128::MIN; };\n+    { let foo = std::usize::MIN; };\n+    { let foo = std::u8::MIN; };\n+    { let foo = std::u16::MIN; };\n+    { let foo = std::u32::MIN; };\n+    { let foo = std::u64::MIN; };\n+    { let foo = std::u128::MIN; };\n+    // Max\n+    { let foo = std::isize::MAX; };\n+    { let foo = std::i8::MAX; };\n+    { let foo = std::i16::MAX; };\n+    { let foo = std::i32::MAX; };\n+    { let foo = std::i64::MAX; };\n+    { let foo = std::i128::MAX; };\n+    { let foo = std::usize::MAX; };\n+    { let foo = std::u8::MAX; };\n+    { let foo = std::u16::MAX; };\n+    { let foo = std::u32::MAX; };\n+    { let foo = std::u64::MAX; };\n+    { let foo = std::u128::MAX; };\n+}\n+\n+fn good() {\n+    // Once\n+    { let foo = Once::new(); };\n+    // Atomic\n+    { let foo = AtomicBool::new(false); };\n+    { let foo = AtomicIsize::new(0); };\n+    { let foo = AtomicI8::new(0); };\n+    { let foo = AtomicI16::new(0); };\n+    { let foo = AtomicI32::new(0); };\n+    { let foo = AtomicI64::new(0); };\n+    { let foo = AtomicUsize::new(0); };\n+    { let foo = AtomicU8::new(0); };\n+    { let foo = AtomicU16::new(0); };\n+    { let foo = AtomicU32::new(0); };\n+    { let foo = AtomicU64::new(0); };\n+    // Min\n+    { let foo = isize::min_value(); };\n+    { let foo = i8::min_value(); };\n+    { let foo = i16::min_value(); };\n+    { let foo = i32::min_value(); };\n+    { let foo = i64::min_value(); };\n+    { let foo = i128::min_value(); };\n+    { let foo = usize::min_value(); };\n+    { let foo = u8::min_value(); };\n+    { let foo = u16::min_value(); };\n+    { let foo = u32::min_value(); };\n+    { let foo = u64::min_value(); };\n+    { let foo = u128::min_value(); };\n+    // Max\n+    { let foo = isize::max_value(); };\n+    { let foo = i8::max_value(); };\n+    { let foo = i16::max_value(); };\n+    { let foo = i32::max_value(); };\n+    { let foo = i64::max_value(); };\n+    { let foo = i128::max_value(); };\n+    { let foo = usize::max_value(); };\n+    { let foo = u8::max_value(); };\n+    { let foo = u16::max_value(); };\n+    { let foo = u32::max_value(); };\n+    { let foo = u64::max_value(); };\n+    { let foo = u128::max_value(); };\n+}\n+\n+fn main() {\n+    bad();\n+    good();\n+}"}, {"sha": "a8e3dd2d00eba1a49181a3e556a2d8d763491c4e", "filename": "tests/ui/replace_consts.stderr", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Freplace_consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Freplace_consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freplace_consts.stderr?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -0,0 +1,216 @@\n+error: using `ATOMIC_BOOL_INIT`\n+  --> $DIR/replace_consts.rs:11:17\n+   |\n+11 |     { let foo = ATOMIC_BOOL_INIT; };\n+   |                 ^^^^^^^^^^^^^^^^ help: try this: `AtomicBool::new(false)`\n+   |\n+note: lint level defined here\n+  --> $DIR/replace_consts.rs:3:9\n+   |\n+3  | #![deny(replace_consts)]\n+   |         ^^^^^^^^^^^^^^\n+\n+error: using `ATOMIC_ISIZE_INIT`\n+  --> $DIR/replace_consts.rs:12:17\n+   |\n+12 |     { let foo = ATOMIC_ISIZE_INIT; };\n+   |                 ^^^^^^^^^^^^^^^^^ help: try this: `AtomicIsize::new(0)`\n+\n+error: using `ATOMIC_I8_INIT`\n+  --> $DIR/replace_consts.rs:13:17\n+   |\n+13 |     { let foo = ATOMIC_I8_INIT; };\n+   |                 ^^^^^^^^^^^^^^ help: try this: `AtomicI8::new(0)`\n+\n+error: using `ATOMIC_I16_INIT`\n+  --> $DIR/replace_consts.rs:14:17\n+   |\n+14 |     { let foo = ATOMIC_I16_INIT; };\n+   |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicI16::new(0)`\n+\n+error: using `ATOMIC_I32_INIT`\n+  --> $DIR/replace_consts.rs:15:17\n+   |\n+15 |     { let foo = ATOMIC_I32_INIT; };\n+   |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicI32::new(0)`\n+\n+error: using `ATOMIC_I64_INIT`\n+  --> $DIR/replace_consts.rs:16:17\n+   |\n+16 |     { let foo = ATOMIC_I64_INIT; };\n+   |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicI64::new(0)`\n+\n+error: using `ATOMIC_USIZE_INIT`\n+  --> $DIR/replace_consts.rs:17:17\n+   |\n+17 |     { let foo = ATOMIC_USIZE_INIT; };\n+   |                 ^^^^^^^^^^^^^^^^^ help: try this: `AtomicUsize::new(0)`\n+\n+error: using `ATOMIC_U8_INIT`\n+  --> $DIR/replace_consts.rs:18:17\n+   |\n+18 |     { let foo = ATOMIC_U8_INIT; };\n+   |                 ^^^^^^^^^^^^^^ help: try this: `AtomicU8::new(0)`\n+\n+error: using `ATOMIC_U16_INIT`\n+  --> $DIR/replace_consts.rs:19:17\n+   |\n+19 |     { let foo = ATOMIC_U16_INIT; };\n+   |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicU16::new(0)`\n+\n+error: using `ATOMIC_U32_INIT`\n+  --> $DIR/replace_consts.rs:20:17\n+   |\n+20 |     { let foo = ATOMIC_U32_INIT; };\n+   |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicU32::new(0)`\n+\n+error: using `ATOMIC_U64_INIT`\n+  --> $DIR/replace_consts.rs:21:17\n+   |\n+21 |     { let foo = ATOMIC_U64_INIT; };\n+   |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicU64::new(0)`\n+\n+error: using `MIN`\n+  --> $DIR/replace_consts.rs:23:17\n+   |\n+23 |     { let foo = std::isize::MIN; };\n+   |                 ^^^^^^^^^^^^^^^ help: try this: `isize::min_value()`\n+\n+error: using `MIN`\n+  --> $DIR/replace_consts.rs:24:17\n+   |\n+24 |     { let foo = std::i8::MIN; };\n+   |                 ^^^^^^^^^^^^ help: try this: `i8::min_value()`\n+\n+error: using `MIN`\n+  --> $DIR/replace_consts.rs:25:17\n+   |\n+25 |     { let foo = std::i16::MIN; };\n+   |                 ^^^^^^^^^^^^^ help: try this: `i16::min_value()`\n+\n+error: using `MIN`\n+  --> $DIR/replace_consts.rs:26:17\n+   |\n+26 |     { let foo = std::i32::MIN; };\n+   |                 ^^^^^^^^^^^^^ help: try this: `i32::min_value()`\n+\n+error: using `MIN`\n+  --> $DIR/replace_consts.rs:27:17\n+   |\n+27 |     { let foo = std::i64::MIN; };\n+   |                 ^^^^^^^^^^^^^ help: try this: `i64::min_value()`\n+\n+error: using `MIN`\n+  --> $DIR/replace_consts.rs:28:17\n+   |\n+28 |     { let foo = std::i128::MIN; };\n+   |                 ^^^^^^^^^^^^^^ help: try this: `i128::min_value()`\n+\n+error: using `MIN`\n+  --> $DIR/replace_consts.rs:29:17\n+   |\n+29 |     { let foo = std::usize::MIN; };\n+   |                 ^^^^^^^^^^^^^^^ help: try this: `usize::min_value()`\n+\n+error: using `MIN`\n+  --> $DIR/replace_consts.rs:30:17\n+   |\n+30 |     { let foo = std::u8::MIN; };\n+   |                 ^^^^^^^^^^^^ help: try this: `u8::min_value()`\n+\n+error: using `MIN`\n+  --> $DIR/replace_consts.rs:31:17\n+   |\n+31 |     { let foo = std::u16::MIN; };\n+   |                 ^^^^^^^^^^^^^ help: try this: `u16::min_value()`\n+\n+error: using `MIN`\n+  --> $DIR/replace_consts.rs:32:17\n+   |\n+32 |     { let foo = std::u32::MIN; };\n+   |                 ^^^^^^^^^^^^^ help: try this: `u32::min_value()`\n+\n+error: using `MIN`\n+  --> $DIR/replace_consts.rs:33:17\n+   |\n+33 |     { let foo = std::u64::MIN; };\n+   |                 ^^^^^^^^^^^^^ help: try this: `u64::min_value()`\n+\n+error: using `MIN`\n+  --> $DIR/replace_consts.rs:34:17\n+   |\n+34 |     { let foo = std::u128::MIN; };\n+   |                 ^^^^^^^^^^^^^^ help: try this: `u128::min_value()`\n+\n+error: using `MAX`\n+  --> $DIR/replace_consts.rs:36:17\n+   |\n+36 |     { let foo = std::isize::MAX; };\n+   |                 ^^^^^^^^^^^^^^^ help: try this: `isize::max_value()`\n+\n+error: using `MAX`\n+  --> $DIR/replace_consts.rs:37:17\n+   |\n+37 |     { let foo = std::i8::MAX; };\n+   |                 ^^^^^^^^^^^^ help: try this: `i8::max_value()`\n+\n+error: using `MAX`\n+  --> $DIR/replace_consts.rs:38:17\n+   |\n+38 |     { let foo = std::i16::MAX; };\n+   |                 ^^^^^^^^^^^^^ help: try this: `i16::max_value()`\n+\n+error: using `MAX`\n+  --> $DIR/replace_consts.rs:39:17\n+   |\n+39 |     { let foo = std::i32::MAX; };\n+   |                 ^^^^^^^^^^^^^ help: try this: `i32::max_value()`\n+\n+error: using `MAX`\n+  --> $DIR/replace_consts.rs:40:17\n+   |\n+40 |     { let foo = std::i64::MAX; };\n+   |                 ^^^^^^^^^^^^^ help: try this: `i64::max_value()`\n+\n+error: using `MAX`\n+  --> $DIR/replace_consts.rs:41:17\n+   |\n+41 |     { let foo = std::i128::MAX; };\n+   |                 ^^^^^^^^^^^^^^ help: try this: `i128::max_value()`\n+\n+error: using `MAX`\n+  --> $DIR/replace_consts.rs:42:17\n+   |\n+42 |     { let foo = std::usize::MAX; };\n+   |                 ^^^^^^^^^^^^^^^ help: try this: `usize::max_value()`\n+\n+error: using `MAX`\n+  --> $DIR/replace_consts.rs:43:17\n+   |\n+43 |     { let foo = std::u8::MAX; };\n+   |                 ^^^^^^^^^^^^ help: try this: `u8::max_value()`\n+\n+error: using `MAX`\n+  --> $DIR/replace_consts.rs:44:17\n+   |\n+44 |     { let foo = std::u16::MAX; };\n+   |                 ^^^^^^^^^^^^^ help: try this: `u16::max_value()`\n+\n+error: using `MAX`\n+  --> $DIR/replace_consts.rs:45:17\n+   |\n+45 |     { let foo = std::u32::MAX; };\n+   |                 ^^^^^^^^^^^^^ help: try this: `u32::max_value()`\n+\n+error: using `MAX`\n+  --> $DIR/replace_consts.rs:46:17\n+   |\n+46 |     { let foo = std::u64::MAX; };\n+   |                 ^^^^^^^^^^^^^ help: try this: `u64::max_value()`\n+\n+error: using `MAX`\n+  --> $DIR/replace_consts.rs:47:17\n+   |\n+47 |     { let foo = std::u128::MAX; };\n+   |                 ^^^^^^^^^^^^^^ help: try this: `u128::max_value()`\n+"}, {"sha": "10d1c490ee6a04c34c3ee8d8d839bf7a26c14f44", "filename": "tests/ui/types.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypes.rs?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -0,0 +1,10 @@\n+// should not warn on lossy casting in constant types\n+// because not supported yet\n+const C : i32 = 42;\n+const C_I64 : i64 = C as i64;\n+\n+fn main() {\n+    // should suggest i64::from(c)\n+    let c : i32 = 42;\n+    let c_i64 : i64 = c as i64;\n+}"}, {"sha": "a2f4ede5ca2a72f42bb7761739df05e22586b195", "filename": "tests/ui/types.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Ftypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Ftypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypes.stderr?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -0,0 +1,8 @@\n+error: casting i32 to i64 may become silently lossy if types change\n+ --> $DIR/types.rs:9:23\n+  |\n+9 |     let c_i64 : i64 = c as i64;\n+  |                       ^^^^^^^^ help: try: `i64::from(c)`\n+  |\n+  = note: `-D cast-lossless` implied by `-D warnings`\n+"}, {"sha": "96166ed4f139aa5c2e518bbbaa13f983d4772cdf", "filename": "tests/ui/unnecessary_clone.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Funnecessary_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Funnecessary_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.rs?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -1,10 +1,15 @@\n+#![warn(clone_on_ref_ptr)]\n #![allow(unused)]\n \n use std::collections::HashSet;\n use std::collections::VecDeque;\n use std::rc::{self, Rc};\n use std::sync::{self, Arc};\n \n+trait SomeTrait {}\n+struct SomeImpl;\n+impl SomeTrait for SomeImpl {}\n+\n fn main() {}\n \n fn clone_on_copy() {\n@@ -34,7 +39,8 @@ fn clone_on_ref_ptr() {\n     arc_weak.clone();\n     sync::Weak::clone(&arc_weak);\n \n-\n+    let x = Arc::new(SomeImpl);\n+    let _: Arc<SomeTrait> = x.clone(); \n }\n \n fn clone_on_copy_generic<T: Copy>(t: T) {"}, {"sha": "bb78bfa164ea06967e6b8592efb268d80b287a3f", "filename": "tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 32, "deletions": 26, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21fde9a9d177ddffa34d58e049bc27d4c404469b/tests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.stderr?ref=21fde9a9d177ddffa34d58e049bc27d4c404469b", "patch": "@@ -1,75 +1,81 @@\n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:11:5\n+  --> $DIR/unnecessary_clone.rs:16:5\n    |\n-11 |     42.clone();\n+16 |     42.clone();\n    |     ^^^^^^^^^^ help: try removing the `clone` call: `42`\n    |\n    = note: `-D clone-on-copy` implied by `-D warnings`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:15:5\n+  --> $DIR/unnecessary_clone.rs:20:5\n    |\n-15 |     (&42).clone();\n+20 |     (&42).clone();\n    |     ^^^^^^^^^^^^^ help: try dereferencing it: `*(&42)`\n \n error: using '.clone()' on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:25:5\n+  --> $DIR/unnecessary_clone.rs:30:5\n    |\n-25 |     rc.clone();\n-   |     ^^^^^^^^^^ help: try this: `Rc::clone(&rc)`\n+30 |     rc.clone();\n+   |     ^^^^^^^^^^ help: try this: `Rc::<bool>::clone(&rc)`\n    |\n    = note: `-D clone-on-ref-ptr` implied by `-D warnings`\n \n error: using '.clone()' on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:28:5\n+  --> $DIR/unnecessary_clone.rs:33:5\n    |\n-28 |     arc.clone();\n-   |     ^^^^^^^^^^^ help: try this: `Arc::clone(&arc)`\n+33 |     arc.clone();\n+   |     ^^^^^^^^^^^ help: try this: `Arc::<bool>::clone(&arc)`\n \n error: using '.clone()' on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:31:5\n+  --> $DIR/unnecessary_clone.rs:36:5\n    |\n-31 |     rcweak.clone();\n-   |     ^^^^^^^^^^^^^^ help: try this: `Weak::clone(&rcweak)`\n+36 |     rcweak.clone();\n+   |     ^^^^^^^^^^^^^^ help: try this: `Weak::<bool>::clone(&rcweak)`\n \n error: using '.clone()' on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:34:5\n+  --> $DIR/unnecessary_clone.rs:39:5\n    |\n-34 |     arc_weak.clone();\n-   |     ^^^^^^^^^^^^^^^^ help: try this: `Weak::clone(&arc_weak)`\n+39 |     arc_weak.clone();\n+   |     ^^^^^^^^^^^^^^^^ help: try this: `Weak::<bool>::clone(&arc_weak)`\n+\n+error: using '.clone()' on a ref-counted pointer\n+  --> $DIR/unnecessary_clone.rs:43:29\n+   |\n+43 |     let _: Arc<SomeTrait> = x.clone(); \n+   |                             ^^^^^^^^^ help: try this: `Arc::<SomeImpl>::clone(&x)`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:41:5\n+  --> $DIR/unnecessary_clone.rs:47:5\n    |\n-41 |     t.clone();\n+47 |     t.clone();\n    |     ^^^^^^^^^ help: try removing the `clone` call: `t`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:43:5\n+  --> $DIR/unnecessary_clone.rs:49:5\n    |\n-43 |     Some(t).clone();\n+49 |     Some(t).clone();\n    |     ^^^^^^^^^^^^^^^ help: try removing the `clone` call: `Some(t)`\n \n error: using `clone` on a double-reference; this will copy the reference instead of cloning the inner type\n-  --> $DIR/unnecessary_clone.rs:49:22\n+  --> $DIR/unnecessary_clone.rs:55:22\n    |\n-49 |     let z: &Vec<_> = y.clone();\n+55 |     let z: &Vec<_> = y.clone();\n    |                      ^^^^^^^^^\n    |\n    = note: `-D clone-double-ref` implied by `-D warnings`\n help: try dereferencing it\n    |\n-49 |     let z: &Vec<_> = &(*y).clone();\n+55 |     let z: &Vec<_> = &(*y).clone();\n    |                      ^^^^^^^^^^^^^\n help: or try being explicit about what type to clone\n    |\n-49 |     let z: &Vec<_> = &std::vec::Vec<i32>::clone(y);\n+55 |     let z: &Vec<_> = &std::vec::Vec<i32>::clone(y);\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n-  --> $DIR/unnecessary_clone.rs:56:27\n+  --> $DIR/unnecessary_clone.rs:62:27\n    |\n-56 |     let v2 : Vec<isize> = v.iter().cloned().collect();\n+62 |     let v2 : Vec<isize> = v.iter().cloned().collect();\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D iter-cloned-collect` implied by `-D warnings`"}]}