{"sha": "6007797ed6f712576bccac799d0fc79a2eb61ae7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMDc3OTdlZDZmNzEyNTc2YmNjYWM3OTlkMGZjNzlhMmViNjFhZTc=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-07-06T23:02:48Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-07-08T22:15:46Z"}, "message": "replace idents with names", "tree": {"sha": "d34f09717a583c61b284314275e565119fa1b3c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d34f09717a583c61b284314275e565119fa1b3c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6007797ed6f712576bccac799d0fc79a2eb61ae7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6007797ed6f712576bccac799d0fc79a2eb61ae7", "html_url": "https://github.com/rust-lang/rust/commit/6007797ed6f712576bccac799d0fc79a2eb61ae7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6007797ed6f712576bccac799d0fc79a2eb61ae7/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1b8b3c35c1e59c475412864c230491843b52ab1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1b8b3c35c1e59c475412864c230491843b52ab1", "html_url": "https://github.com/rust-lang/rust/commit/c1b8b3c35c1e59c475412864c230491843b52ab1"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "129a5b7c6bed394c8b0f25cfdfd8467af5291ec3", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6007797ed6f712576bccac799d0fc79a2eb61ae7/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6007797ed6f712576bccac799d0fc79a2eb61ae7/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=6007797ed6f712576bccac799d0fc79a2eb61ae7", "patch": "@@ -25,6 +25,7 @@ use syntax::ast;\n use syntax::ast_util::{local_def};\n use syntax::ast_util::{walk_pat, trait_method_to_ty_method};\n use syntax::ext::mtwt;\n+use syntax::parse::token::special_names;\n use syntax::parse::token::special_idents;\n use syntax::parse::token;\n use syntax::codemap::{Span, DUMMY_SP, Pos};\n@@ -830,9 +831,9 @@ struct Resolver<'a> {\n     current_self_type: Option<Ty>,\n \n     // The ident for the keyword \"self\".\n-    self_ident: Ident,\n+    self_name: Name,\n     // The ident for the non-keyword \"Self\".\n-    type_self_ident: Ident,\n+    type_self_name: Name,\n \n     // The idents for the primitive types.\n     primitive_type_table: PrimitiveTypeTable,\n@@ -926,8 +927,8 @@ impl<'a> Resolver<'a> {\n             current_trait_ref: None,\n             current_self_type: None,\n \n-            self_ident: special_idents::self_,\n-            type_self_ident: special_idents::type_self,\n+            self_name: special_names::self_,\n+            type_self_name: special_names::type_self,\n \n             primitive_type_table: PrimitiveTypeTable::new(),\n \n@@ -3628,8 +3629,8 @@ impl<'a> Resolver<'a> {\n                 // Create a new rib for the self type.\n                 let self_type_rib = Rib::new(ItemRibKind);\n \n-                // plain insert (no renaming)\n-                let name = self.type_self_ident.name;\n+                // plain insert (no renaming, types are not currently hygienic....)\n+                let name = self.type_self_name;\n                 self_type_rib.bindings.borrow_mut()\n                              .insert(name, DlDef(DefSelfTy(item.id)));\n                 self.type_ribs.borrow_mut().push(self_type_rib);\n@@ -5159,8 +5160,8 @@ impl<'a> Resolver<'a> {\n                                     false // Stop advancing\n                                 });\n \n-                                if method_scope && token::get_name(self.self_ident.name).get()\n-                                                                        == wrong_name.as_slice() {\n+                                if method_scope && token::get_name(self.self_name).get()\n+                                                                   == wrong_name.as_slice() {\n                                         self.resolve_error(\n                                             expr.span,\n                                             \"`self` is not available \\\n@@ -5532,6 +5533,7 @@ impl<'a> Resolver<'a> {\n                     collect_mod(idents, &*module.upgrade().unwrap());\n                 }\n                 BlockParentLink(ref module, _) => {\n+                    // danger, shouldn't be ident?\n                     idents.push(special_idents::opaque);\n                     collect_mod(idents, &*module.upgrade().unwrap());\n                 }"}, {"sha": "55db3482a61a731a1d2eb91066d0f70ea9d9f088", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6007797ed6f712576bccac799d0fc79a2eb61ae7/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6007797ed6f712576bccac799d0fc79a2eb61ae7/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=6007797ed6f712576bccac799d0fc79a2eb61ae7", "patch": "@@ -405,6 +405,11 @@ macro_rules! declare_special_idents_and_keywords {(\n         $( pub static $si_static: Ident = Ident { name: $si_name, ctxt: 0 }; )*\n     }\n \n+    pub mod special_names {\n+        use ast::Name;\n+        $( pub static $si_static: Name =  $si_name; )*\n+    }\n+\n     /**\n      * All the valid words that have meaning in the Rust language.\n      *"}]}