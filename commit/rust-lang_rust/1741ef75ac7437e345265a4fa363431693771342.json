{"sha": "1741ef75ac7437e345265a4fa363431693771342", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NDFlZjc1YWM3NDM3ZTM0NTI2NWE0ZmEzNjM0MzE2OTM3NzEzNDI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-02T12:26:51Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-02T14:15:28Z"}, "message": "Write out vtables for interface implementations\n\nIssue #1227", "tree": {"sha": "045c919ddce00aaaf728f7fc986ea80be660c89d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/045c919ddce00aaaf728f7fc986ea80be660c89d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1741ef75ac7437e345265a4fa363431693771342", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1741ef75ac7437e345265a4fa363431693771342", "html_url": "https://github.com/rust-lang/rust/commit/1741ef75ac7437e345265a4fa363431693771342", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1741ef75ac7437e345265a4fa363431693771342/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "371b61a23dc0a5d4fba336a177bebcb59e1369e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/371b61a23dc0a5d4fba336a177bebcb59e1369e9", "html_url": "https://github.com/rust-lang/rust/commit/371b61a23dc0a5d4fba336a177bebcb59e1369e9"}], "stats": {"total": 91, "additions": 78, "deletions": 13}, "files": [{"sha": "65decadfc97f85b8af25ab0e48089d78f2aafaeb", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1741ef75ac7437e345265a4fa363431693771342/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1741ef75ac7437e345265a4fa363431693771342/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=1741ef75ac7437e345265a4fa363431693771342", "patch": "@@ -80,13 +80,12 @@ fn type_of_explicit_args(cx: @crate_ctxt, sp: span, inputs: [ty::arg]) ->\n //  - create_llargs_for_fn_args.\n //  - new_fn_ctxt\n //  - trans_args\n-fn type_of_fn(cx: @crate_ctxt, sp: span,\n-              is_method: bool, inputs: [ty::arg],\n-              output: ty::t, params: [ty::param_bounds])\n-   : non_ty_var(cx, output) -> TypeRef {\n+fn type_of_fn(cx: @crate_ctxt, sp: span, is_method: bool, inputs: [ty::arg],\n+              output: ty::t, params: [ty::param_bounds]) -> TypeRef {\n     let atys: [TypeRef] = [];\n \n     // Arg 0: Output pointer.\n+    check non_ty_var(cx, output);\n     let out_ty = T_ptr(type_of_inner(cx, sp, output));\n     atys += [out_ty];\n \n@@ -117,7 +116,6 @@ fn type_of_fn_from_ty(cx: @crate_ctxt, sp: span, fty: ty::t,\n     // by returns_non_ty_var(t). Make that a postcondition\n     // (see Issue #586)\n     let ret_ty = ty::ty_fn_ret(cx.tcx, fty);\n-    check non_ty_var(cx, ret_ty);\n     ret type_of_fn(cx, sp, false, ty::ty_fn_args(cx.tcx, fty),\n                    ret_ty, param_bounds);\n }\n@@ -2771,8 +2769,6 @@ fn trans_object_field_inner(bcx: @block_ctxt, o: ValueRef,\n     let fn_ty: ty::t = ty::mk_fn(tcx, mths[ix].fty);\n     let ret_ty = ty::ty_fn_ret(tcx, fn_ty);\n     // FIXME: constrain ty_obj?\n-    check non_ty_var(ccx, ret_ty);\n-\n     let ll_fn_ty = type_of_fn(ccx, bcx.sp, true,\n                               ty::ty_fn_args(tcx, fn_ty), ret_ty, []);\n     v = Load(bcx, PointerCast(bcx, v, T_ptr(T_ptr(ll_fn_ty))));\n@@ -5123,8 +5119,6 @@ fn create_main_wrapper(ccx: @crate_ctxt, sp: span, main_llfn: ValueRef,\n              ty: ty::mk_vec(ccx.tcx, {ty: unit_ty, mut: ast::imm})};\n         // FIXME: mk_nil should have a postcondition\n         let nt = ty::mk_nil(ccx.tcx);\n-        check non_ty_var(ccx, nt);\n-\n         let llfty = type_of_fn(ccx, sp, false, [vecarg_ty], nt, []);\n         let llfdecl = decl_fn(ccx.llmod, \"_rust_main\",\n                               lib::llvm::LLVMCCallConv, llfty);\n@@ -5223,7 +5217,6 @@ fn native_fn_wrapper_type(cx: @crate_ctxt, sp: span,\n                           x: ty::t) -> TypeRef {\n     alt ty::struct(cx.tcx, x) {\n       ty::ty_native_fn(args, out) {\n-        check non_ty_var(cx, out);\n         ret type_of_fn(cx, sp, false, args, out, param_bounds);\n       }\n     }\n@@ -5377,7 +5370,7 @@ fn trans_constant(ccx: @crate_ctxt, it: @ast::item, &&pt: [str],\n       ast::item_tag(variants, _) {\n         let i = 0u;\n         for variant in variants {\n-            let p = new_pt + [it.ident, variant.node.name, \"discrim\"];\n+            let p = new_pt + [variant.node.name, \"discrim\"];\n             let s = mangle_exported_name(ccx, p, ty::mk_int(ccx.tcx));\n             let discrim_gvar = str::as_buf(s, {|buf|\n                 llvm::LLVMAddGlobal(ccx.llmod, ccx.int_type, buf)\n@@ -5390,6 +5383,28 @@ fn trans_constant(ccx: @crate_ctxt, it: @ast::item, &&pt: [str],\n             i += 1u;\n         }\n       }\n+      ast::item_impl(tps, some(@{node: ast::ty_path(_, id), _}), _, ms) {\n+        let i_did = ast_util::def_id_of_def(ccx.tcx.def_map.get(id));\n+        let ty = ty::lookup_item_type(ccx.tcx, i_did).ty;\n+        // FIXME[impl] use the same name as used in collect_items, for\n+        // slightly more consistent symbol names?\n+        let new_pt = pt + [ccx.names.next(it.ident)];\n+        let extra_tps = vec::map(tps, {|p| param_bounds(ccx, p)});\n+        let tbl = C_struct(vec::map(*ty::iface_methods(ccx.tcx, i_did), {|im|\n+            alt vec::find(ms, {|m| m.ident == im.ident}) {\n+              some(m) {\n+                trans_impl::trans_wrapper(ccx, new_pt, extra_tps, m)\n+              }\n+            }\n+        }));\n+        let s = mangle_exported_name(ccx, new_pt + [\"!vtable\"], ty);\n+        let vt_gvar = str::as_buf(s, {|buf|\n+            llvm::LLVMAddGlobal(ccx.llmod, val_ty(tbl), buf)\n+        });\n+        llvm::LLVMSetInitializer(vt_gvar, tbl);\n+        llvm::LLVMSetGlobalConstant(vt_gvar, True);\n+        ccx.item_ids.insert(it.id, vt_gvar);\n+      }\n       _ { }\n     }\n }"}, {"sha": "65dcd539510bb543dc78b107889b39fe57271218", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1741ef75ac7437e345265a4fa363431693771342/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1741ef75ac7437e345265a4fa363431693771342/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=1741ef75ac7437e345265a4fa363431693771342", "patch": "@@ -405,7 +405,7 @@ fn ty_str(tn: type_names, t: TypeRef) -> str {\n     ret lib::llvm::type_to_str(tn, t);\n }\n \n-fn val_ty(v: ValueRef) -> TypeRef { ret llvm::LLVMTypeOf(v); }\n+fn val_ty(&&v: ValueRef) -> TypeRef { ret llvm::LLVMTypeOf(v); }\n \n fn val_str(tn: type_names, v: ValueRef) -> str { ret ty_str(tn, val_ty(v)); }\n "}, {"sha": "095c73922874404b287ad140506c7a4828568d71", "filename": "src/comp/middle/trans_impl.rs", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1741ef75ac7437e345265a4fa363431693771342/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1741ef75ac7437e345265a4fa363431693771342/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs?ref=1741ef75ac7437e345265a4fa363431693771342", "patch": "@@ -2,8 +2,10 @@ import trans::*;\n import trans_common::*;\n import trans_build::*;\n import option::{some, none};\n-import syntax::ast;\n+import syntax::{ast, ast_util};\n+import back::link;\n import lib::llvm;\n+import llvm::llvm::{ValueRef, TypeRef, LLVMGetParam};\n \n fn trans_impl(cx: @local_ctxt, name: ast::ident, methods: [@ast::method],\n               id: ast::node_id, tps: [ast::ty_param],\n@@ -19,3 +21,51 @@ fn trans_impl(cx: @local_ctxt, name: ast::ident, methods: [@ast::method],\n         }\n     }\n }\n+\n+fn llfn_arg_tys(ft: TypeRef) -> {inputs: [TypeRef], output: TypeRef} {\n+    let out_ty = llvm::llvm::LLVMGetReturnType(ft);\n+    let n_args = llvm::llvm::LLVMCountParamTypes(ft);\n+    let args = vec::init_elt(0 as TypeRef, n_args);\n+    unsafe { llvm::llvm::LLVMGetParamTypes(ft, vec::to_ptr(args)); }\n+    {inputs: args, output: out_ty}\n+}\n+\n+fn trans_wrapper(ccx: @crate_ctxt, pt: [ast::ident],\n+                 extra_tps: [ty::param_bounds], m: @ast::method) -> ValueRef {\n+    let real_fn = ccx.item_ids.get(m.id);\n+    let {inputs: real_args, output: real_ret} =\n+        llfn_arg_tys(llvm::llvm::LLVMGetElementType(val_ty(real_fn)));\n+    let env_ty = T_ptr(T_struct([T_ptr(T_i8())] +\n+                                vec::map(extra_tps,\n+                                         {|_p| T_ptr(ccx.tydesc_type)})));\n+    // FIXME[impl] filter and pass along dicts for bounds\n+    let wrap_args = [env_ty] + vec::slice(real_args, 0u, 2u) +\n+        vec::slice(real_args, 2u + vec::len(extra_tps), vec::len(real_args));\n+    let llfn_ty = T_fn(wrap_args, real_ret);\n+\n+    let lcx = @{path: pt + [\"wrapper\", m.ident], module_path: [],\n+                obj_typarams: [], obj_fields: [], ccx: ccx};\n+    let name = link::mangle_internal_name_by_path_and_seq(ccx, pt, m.ident);\n+    let llfn = decl_internal_cdecl_fn(ccx.llmod, name, llfn_ty);\n+    let fcx = new_fn_ctxt(lcx, ast_util::dummy_sp(), llfn);\n+    let bcx = new_top_block_ctxt(fcx), lltop = bcx.llbb;\n+\n+    let dict = LLVMGetParam(llfn, 0u);\n+    // retptr, self\n+    let args = [LLVMGetParam(llfn, 1u), LLVMGetParam(llfn, 2u)], i = 1;\n+    // saved tydescs/dicts\n+    for extra_tp in extra_tps {\n+        args += [load_inbounds(bcx, dict, [0, i])];\n+        i += 1;\n+    }\n+    // the rest of the parameters\n+    let i = 3u, params_total = llvm::llvm::LLVMCountParamTypes(llfn_ty);\n+    while i < params_total {\n+        args += [LLVMGetParam(llfn, i)];\n+        i += 1u;\n+    }\n+    Call(bcx, ccx.item_ids.get(m.id), args);\n+    finish_fn(fcx, lltop);\n+    ret llfn;\n+}\n+"}]}