{"sha": "2f270e47c6733810cea0b62183a4d928f60aa0bb", "node_id": "C_kwDOAAsO6NoAKDJmMjcwZTQ3YzY3MzM4MTBjZWEwYjYyMTgzYTRkOTI4ZjYwYWEwYmI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-15T00:28:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-15T00:28:07Z"}, "message": "Rollup merge of #91870 - rusticstuff:macosx_min_version_revert, r=Mark-Simulacrum\n\nRevert setting a default for the MACOSX_DEPLOYMENT_TARGET env var for linking\n\nThis reverts commit b376f5621b801460b911a75048a70698021bbc69, which is the main part of #90499, because it turns out that this causes a good amount of breakage in crates relying on the old behavior. In particular `winit`, `coreaudio` and crates that depend on them are affected. Fixes #91372.\n\nBackground:\nBefore #90499 the behavior was the following: If MACOSX_DEPLOYMENT_TARGET is not set,  we pass the minimum supported OS version to LLVM but not to the linker. The linker default depends on the Xcode version and the version of the OS it is running on. That caused one known problem in libcurl with the most recent Xcode versions. #90499 passed the minumum supported version (10.7 for Macos x86-64) to the linker instead. This has shown to be problematic because some crates such as winit, coreaudio implicitly expect a newer minimum OS version. The libcurl issue has been fixed independently (see https://github.com/alexcrichton/curl-rust/issues/417), so a revert should not really be problematic.\n\nEventually we should probably mimic clang's behavior and fall back to the default of the currently configured Macos SDK for both the LLVM min os target version and MACOSX_DEPLOYMENT_TARGET for linking. That would entail looking at the `Version` property of the `SDKSettings.json` in the currently configured SDK.", "tree": {"sha": "3031b6e0b75e1f88ff6e4a208c8ff4b9adabaed9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3031b6e0b75e1f88ff6e4a208c8ff4b9adabaed9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f270e47c6733810cea0b62183a4d928f60aa0bb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhuTaXCRBK7hj4Ov3rIwAAAm0IACt4pufloxjiCSIKUjLn4Dya\nqNIr3hzBM+ZWkcdCeLvZp41kzdJyBql1XnppSbSiSRsEpgwD182SQSmJ6ji4t1Bl\nxw/SMhI1rI25CntG9b9BOqE14SdWBrjtJbM4Q6bnLR/G8JXdqWeYHX+tK1z7186f\nNVF2OZqlFy9w7f86sYLzQNl1xLBuvFjh3r5ZceDjInt9z0hLCr0/+i3a7NfiDoW7\nXWx03JFzJuo1pOps0+PYCKzsTAucGfMlVovA4noKKD5QgRbcId/8X6xEvD1JLXsN\nt5YTx6r3VGYS/mYaTHHoIchOSdLvZoNE1A85dlHg/LUABG/j1S8xxjd3CG2/pNQ=\n=leW0\n-----END PGP SIGNATURE-----\n", "payload": "tree 3031b6e0b75e1f88ff6e4a208c8ff4b9adabaed9\nparent ccfc22b6d8f5241b64802a846cf2617d789925f4\nparent 301115457306e3a17a33a04e1e4e1866497e6305\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639528087 +0100\ncommitter GitHub <noreply@github.com> 1639528087 +0100\n\nRollup merge of #91870 - rusticstuff:macosx_min_version_revert, r=Mark-Simulacrum\n\nRevert setting a default for the MACOSX_DEPLOYMENT_TARGET env var for linking\n\nThis reverts commit b376f5621b801460b911a75048a70698021bbc69, which is the main part of #90499, because it turns out that this causes a good amount of breakage in crates relying on the old behavior. In particular `winit`, `coreaudio` and crates that depend on them are affected. Fixes #91372.\n\nBackground:\nBefore #90499 the behavior was the following: If MACOSX_DEPLOYMENT_TARGET is not set,  we pass the minimum supported OS version to LLVM but not to the linker. The linker default depends on the Xcode version and the version of the OS it is running on. That caused one known problem in libcurl with the most recent Xcode versions. #90499 passed the minumum supported version (10.7 for Macos x86-64) to the linker instead. This has shown to be problematic because some crates such as winit, coreaudio implicitly expect a newer minimum OS version. The libcurl issue has been fixed independently (see https://github.com/alexcrichton/curl-rust/issues/417), so a revert should not really be problematic.\n\nEventually we should probably mimic clang's behavior and fall back to the default of the currently configured Macos SDK for both the LLVM min os target version and MACOSX_DEPLOYMENT_TARGET for linking. That would entail looking at the `Version` property of the `SDKSettings.json` in the currently configured SDK.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f270e47c6733810cea0b62183a4d928f60aa0bb", "html_url": "https://github.com/rust-lang/rust/commit/2f270e47c6733810cea0b62183a4d928f60aa0bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f270e47c6733810cea0b62183a4d928f60aa0bb/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccfc22b6d8f5241b64802a846cf2617d789925f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccfc22b6d8f5241b64802a846cf2617d789925f4", "html_url": "https://github.com/rust-lang/rust/commit/ccfc22b6d8f5241b64802a846cf2617d789925f4"}, {"sha": "301115457306e3a17a33a04e1e4e1866497e6305", "url": "https://api.github.com/repos/rust-lang/rust/commits/301115457306e3a17a33a04e1e4e1866497e6305", "html_url": "https://github.com/rust-lang/rust/commit/301115457306e3a17a33a04e1e4e1866497e6305"}], "stats": {"total": 15, "additions": 0, "deletions": 15}, "files": [{"sha": "f01ff02da072f2bb5c281c403c7dde5ebb858a7c", "filename": "compiler/rustc_target/src/spec/aarch64_apple_darwin.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f270e47c6733810cea0b62183a4d928f60aa0bb/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f270e47c6733810cea0b62183a4d928f60aa0bb/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs?ref=2f270e47c6733810cea0b62183a4d928f60aa0bb", "patch": "@@ -9,7 +9,6 @@ pub fn target() -> Target {\n     base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::THREAD;\n \n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-arch\".to_string(), \"arm64\".to_string()]);\n-    base.link_env.extend(super::apple_base::macos_link_env(\"arm64\"));\n     base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n \n     // Clang automatically chooses a more specific target based on"}, {"sha": "db6aee59a5dd30cece69887ca7cb238285fd9384", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2f270e47c6733810cea0b62183a4d928f60aa0bb/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f270e47c6733810cea0b62183a4d928f60aa0bb/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=2f270e47c6733810cea0b62183a4d928f60aa0bb", "patch": "@@ -79,18 +79,6 @@ pub fn macos_llvm_target(arch: &str) -> String {\n     format!(\"{}-apple-macosx{}.{}.0\", arch, major, minor)\n }\n \n-pub fn macos_link_env(arch: &str) -> Vec<(String, String)> {\n-    // Use the default deployment target for linking just as with the LLVM target if not\n-    // specified via MACOSX_DEPLOYMENT_TARGET, otherwise the system linker would use its\n-    // default which varies with Xcode version.\n-    if env::var(\"MACOSX_DEPLOYMENT_TARGET\").is_err() {\n-        let default = macos_default_deployment_target(arch);\n-        vec![(\"MACOSX_DEPLOYMENT_TARGET\".to_string(), format!(\"{}.{}\", default.0, default.1))]\n-    } else {\n-        vec![]\n-    }\n-}\n-\n pub fn macos_link_env_remove() -> Vec<String> {\n     let mut env_remove = Vec::with_capacity(2);\n     // Remove the `SDKROOT` environment variable if it's clearly set for the wrong platform, which"}, {"sha": "f2635f0656d7a738445df4d41d1dda6302f935ed", "filename": "compiler/rustc_target/src/spec/i686_apple_darwin.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f270e47c6733810cea0b62183a4d928f60aa0bb/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f270e47c6733810cea0b62183a4d928f60aa0bb/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs?ref=2f270e47c6733810cea0b62183a4d928f60aa0bb", "patch": "@@ -5,7 +5,6 @@ pub fn target() -> Target {\n     base.cpu = \"yonah\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m32\".to_string()]);\n-    base.link_env.extend(super::apple_base::macos_link_env(\"i686\"));\n     base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;"}, {"sha": "22fdaabfcb89b68821fde9b65c7a137c2b1439ba", "filename": "compiler/rustc_target/src/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f270e47c6733810cea0b62183a4d928f60aa0bb/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f270e47c6733810cea0b62183a4d928f60aa0bb/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs?ref=2f270e47c6733810cea0b62183a4d928f60aa0bb", "patch": "@@ -10,7 +10,6 @@ pub fn target() -> Target {\n         LinkerFlavor::Gcc,\n         vec![\"-m64\".to_string(), \"-arch\".to_string(), \"x86_64\".to_string()],\n     );\n-    base.link_env.extend(super::apple_base::macos_link_env(\"x86_64\"));\n     base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;"}]}