{"sha": "7937905dbf2a4578cc778370d1e1b0fed385024c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5Mzc5MDVkYmYyYTQ1NzhjYzc3ODM3MGQxZTFiMGZlZDM4NTAyNGM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-23T04:50:02Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-23T04:50:08Z"}, "message": "tutorial: Merge sections 'Types' and 'Using types'\n\nMost of this material is covered elsewhere", "tree": {"sha": "653ca13d0af97b038d1084419f1d16d005534f36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/653ca13d0af97b038d1084419f1d16d005534f36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7937905dbf2a4578cc778370d1e1b0fed385024c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7937905dbf2a4578cc778370d1e1b0fed385024c", "html_url": "https://github.com/rust-lang/rust/commit/7937905dbf2a4578cc778370d1e1b0fed385024c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7937905dbf2a4578cc778370d1e1b0fed385024c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36602a1f7192db32420170415c037d96a0bc60f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/36602a1f7192db32420170415c037d96a0bc60f2", "html_url": "https://github.com/rust-lang/rust/commit/36602a1f7192db32420170415c037d96a0bc60f2"}], "stats": {"total": 28, "additions": 6, "deletions": 22}, "files": [{"sha": "646a7ee4c076beb5de5ba43b1b84c82035a17066", "filename": "doc/tutorial.md", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7937905dbf2a4578cc778370d1e1b0fed385024c/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/7937905dbf2a4578cc778370d1e1b0fed385024c/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=7937905dbf2a4578cc778370d1e1b0fed385024c", "patch": "@@ -389,6 +389,12 @@ of:\n `[mut T]`                 Mutable vector with unknown size\n ------------------------- -----------------------------------------------\n \n+In function types, the return type is specified with an arrow, as in\n+the type `fn() -> bool` or the function declaration `fn foo() -> bool\n+{ }`.  For functions that do not return a meaningful value, you can\n+optionally write `-> ()`, but usually the return annotation is simply\n+left off, as in `fn main() { ... }`.\n+\n Types can be given names with `type` declarations:\n \n ~~~~\n@@ -402,28 +408,6 @@ error. Read about [single-variant enums](#single_variant_enum)\n further on if you need to create a type name that's not just a\n synonym.\n \n-## Using types\n-\n-The `-> bool` in the `is_four` example is the way a function's return\n-type is written. For functions that do not return a meaningful value,\n-you can optionally say `-> ()`, but usually the return annotation is simply\n-left off, as in the `fn main() { ... }` examples we've seen earlier.\n-\n-Every argument to a function must have its type declared (for example,\n-`x: int`). Inside the function, type inference will be able to\n-automatically deduce the type of most locals (generic functions, which\n-we'll come back to later, will occasionally need additional\n-annotation). Locals can be written either with or without a type\n-annotation:\n-\n-~~~~\n-// The type of this vector will be inferred based on its use.\n-let x = [];\n-# vec::map(x, fn&(_y: &int) -> int { *_y });\n-// Explicitly say this is a vector of zero integers.\n-let y: [int * 0] = [];\n-~~~~\n-\n ## Numeric literals\n \n Integers can be written in decimal (`144`), hexadecimal (`0x90`), and"}]}