{"sha": "b21b48062f114317025c986fe35af21b15c675d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMWI0ODA2MmYxMTQzMTcwMjVjOTg2ZmUzNWFmMjFiMTVjNjc1ZDk=", "commit": {"author": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-23T19:11:51Z"}, "committer": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-23T19:11:51Z"}, "message": "rollup merge of #19194: aturon/stab-ascii\n\nThis is an initial API stabilization pass for `std::ascii`. Aside from\nsome renaming to match conversion conventions, and deprecations in favor\nof using iterators directly, almost nothing is changed here. However,\nthe static case conversion tables that were previously public are now private.\n\nThe stabilization of the (rather large!) set of extension traits is left\nto a follow-up pass, because we hope to land some more general machinery\nthat will provide the same functionality without custom traits.\n\n[breaking-change]", "tree": {"sha": "3f728835680e5e16f7cf01ddc4b400c9050d1e30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f728835680e5e16f7cf01ddc4b400c9050d1e30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b21b48062f114317025c986fe35af21b15c675d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b21b48062f114317025c986fe35af21b15c675d9", "html_url": "https://github.com/rust-lang/rust/commit/b21b48062f114317025c986fe35af21b15c675d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b21b48062f114317025c986fe35af21b15c675d9/comments", "author": null, "committer": null, "parents": [{"sha": "77d1f0b83ba8505d67532cb18be8d4c74a083cb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/77d1f0b83ba8505d67532cb18be8d4c74a083cb4", "html_url": "https://github.com/rust-lang/rust/commit/77d1f0b83ba8505d67532cb18be8d4c74a083cb4"}, {"sha": "6733d8b483d26d305397b528c5afb834027f40ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/6733d8b483d26d305397b528c5afb834027f40ce", "html_url": "https://github.com/rust-lang/rust/commit/6733d8b483d26d305397b528c5afb834027f40ce"}], "stats": {"total": 110, "additions": 79, "deletions": 31}, "files": [{"sha": "c795e69a44deabe93ea19e6217008fae18723f11", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b21b48062f114317025c986fe35af21b15c675d9/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21b48062f114317025c986fe35af21b15c675d9/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=b21b48062f114317025c986fe35af21b15c675d9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::ascii::AsciiExt;\n use std::io::{BufferedReader, File};\n use regex::Regex;\n \n@@ -31,7 +32,7 @@ pub fn load_errors(re: &Regex, testfile: &Path) -> Vec<ExpectedError> {\n fn parse_expected(line_num: uint, line: &str, re: &Regex) -> Option<ExpectedError> {\n     re.captures(line).and_then(|caps| {\n         let adjusts = caps.name(\"adjusts\").len();\n-        let kind = caps.name(\"kind\").to_ascii().to_lowercase().into_string();\n+        let kind = caps.name(\"kind\").to_ascii_lower();\n         let msg = caps.name(\"msg\").trim().to_string();\n \n         debug!(\"line={} kind={} msg={}\", line_num, kind, msg);"}, {"sha": "07b58e1b66c2aa22275a3606116921327c14f43e", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b21b48062f114317025c986fe35af21b15c675d9/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21b48062f114317025c986fe35af21b15c675d9/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=b21b48062f114317025c986fe35af21b15c675d9", "patch": "@@ -28,6 +28,7 @@\n #![allow(non_camel_case_types)]\n \n use libc;\n+use std::ascii::AsciiExt;\n use std::cell::{RefCell, Cell};\n use std::fmt;\n use std::slice;\n@@ -223,12 +224,8 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n         };\n \n         // Transform the contents of the header into a hyphenated string\n-        let id = s.as_slice().words().map(|s| {\n-            match s.to_ascii_opt() {\n-                Some(s) => s.to_lowercase().into_string(),\n-                None => s.to_string()\n-            }\n-        }).collect::<Vec<String>>().connect(\"-\");\n+        let id = s.as_slice().words().map(|s| s.to_ascii_lower())\n+            .collect::<Vec<String>>().connect(\"-\");\n \n         // This is a terrible hack working around how hoedown gives us rendered\n         // html for text rather than the raw text."}, {"sha": "9754e673d3849787eca7e815e2bdcccff2979a63", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 60, "deletions": 9, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/b21b48062f114317025c986fe35af21b15c675d9/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21b48062f114317025c986fe35af21b15c675d9/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=b21b48062f114317025c986fe35af21b15c675d9", "patch": "@@ -12,7 +12,8 @@\n \n //! Operations on ASCII strings and characters\n \n-#![experimental]\n+#![unstable = \"unsure about placement and naming\"]\n+#![allow(deprecated)]\n \n use core::kinds::Sized;\n use fmt;\n@@ -31,30 +32,47 @@ pub struct Ascii { chr: u8 }\n impl Ascii {\n     /// Converts an ascii character into a `u8`.\n     #[inline]\n-    pub fn to_byte(self) -> u8 {\n+    #[unstable = \"recently renamed\"]\n+    pub fn as_byte(&self) -> u8 {\n         self.chr\n     }\n \n+    /// Deprecated: use `as_byte` isntead.\n+    #[deprecated = \"use as_byte\"]\n+    pub fn to_byte(self) -> u8 {\n+        self.as_byte()\n+    }\n+\n     /// Converts an ascii character into a `char`.\n     #[inline]\n-    pub fn to_char(self) -> char {\n+    #[unstable = \"recently renamed\"]\n+    pub fn as_char(&self) -> char {\n         self.chr as char\n     }\n \n+    /// Deprecated: use `as_char` isntead.\n+    #[deprecated = \"use as_char\"]\n+    pub fn to_char(self) -> char {\n+        self.as_char()\n+    }\n+\n     /// Convert to lowercase.\n     #[inline]\n-    pub fn to_lowercase(self) -> Ascii {\n+    #[stable]\n+    pub fn to_lowercase(&self) -> Ascii {\n         Ascii{chr: ASCII_LOWER_MAP[self.chr as uint]}\n     }\n \n     /// Convert to uppercase.\n     #[inline]\n-    pub fn to_uppercase(self) -> Ascii {\n+    #[stable]\n+    pub fn to_uppercase(&self) -> Ascii {\n         Ascii{chr: ASCII_UPPER_MAP[self.chr as uint]}\n     }\n \n     /// Compares two ascii characters of equality, ignoring case.\n     #[inline]\n+    #[deprecated = \"normalize with to_lowercase\"]\n     pub fn eq_ignore_case(self, other: Ascii) -> bool {\n         ASCII_LOWER_MAP[self.chr as uint] == ASCII_LOWER_MAP[other.chr as uint]\n     }\n@@ -63,66 +81,77 @@ impl Ascii {\n \n     /// Check if the character is a letter (a-z, A-Z)\n     #[inline]\n+    #[stable]\n     pub fn is_alphabetic(&self) -> bool {\n         (self.chr >= 0x41 && self.chr <= 0x5A) || (self.chr >= 0x61 && self.chr <= 0x7A)\n     }\n \n     /// Check if the character is a number (0-9)\n     #[inline]\n+    #[unstable = \"may be renamed\"]\n     pub fn is_digit(&self) -> bool {\n         self.chr >= 0x30 && self.chr <= 0x39\n     }\n \n     /// Check if the character is a letter or number\n     #[inline]\n+    #[stable]\n     pub fn is_alphanumeric(&self) -> bool {\n         self.is_alphabetic() || self.is_digit()\n     }\n \n     /// Check if the character is a space or horizontal tab\n     #[inline]\n+    #[experimental = \"likely to be removed\"]\n     pub fn is_blank(&self) -> bool {\n         self.chr == b' ' || self.chr == b'\\t'\n     }\n \n     /// Check if the character is a control character\n     #[inline]\n+    #[stable]\n     pub fn is_control(&self) -> bool {\n         self.chr < 0x20 || self.chr == 0x7F\n     }\n \n     /// Checks if the character is printable (except space)\n     #[inline]\n+    #[experimental = \"unsure about naming, or whether this is needed\"]\n     pub fn is_graph(&self) -> bool {\n         (self.chr - 0x21) < 0x5E\n     }\n \n     /// Checks if the character is printable (including space)\n     #[inline]\n+    #[unstable = \"unsure about naming\"]\n     pub fn is_print(&self) -> bool {\n         (self.chr - 0x20) < 0x5F\n     }\n \n-    /// Checks if the character is lowercase\n+    /// Checks if the character is alphabetic and lowercase\n     #[inline]\n+    #[stable]\n     pub fn is_lowercase(&self) -> bool {\n         (self.chr - b'a') < 26\n     }\n \n-    /// Checks if the character is uppercase\n+    /// Checks if the character is alphabetic and uppercase\n     #[inline]\n+    #[stable]\n     pub fn is_uppercase(&self) -> bool {\n         (self.chr - b'A') < 26\n     }\n \n     /// Checks if the character is punctuation\n     #[inline]\n+    #[stable]\n     pub fn is_punctuation(&self) -> bool {\n         self.is_graph() && !self.is_alphanumeric()\n     }\n \n     /// Checks if the character is a valid hex digit\n     #[inline]\n+    #[stable]\n     pub fn is_hex(&self) -> bool {\n         self.is_digit() || ((self.chr | 32u8) - b'a') < 6\n     }\n@@ -135,6 +164,7 @@ impl<'a> fmt::Show for Ascii {\n }\n \n /// Trait for converting into an ascii type.\n+#[experimental = \"may be replaced by generic conversion traits\"]\n pub trait AsciiCast<T> {\n     /// Convert to an ascii type, panic on non-ASCII input.\n     #[inline]\n@@ -160,6 +190,7 @@ pub trait AsciiCast<T> {\n     fn is_ascii(&self) -> bool;\n }\n \n+#[experimental = \"may be replaced by generic conversion traits\"]\n impl<'a> AsciiCast<&'a[Ascii]> for &'a [u8] {\n     #[inline]\n     unsafe fn to_ascii_nocheck(&self) -> &'a[Ascii] {\n@@ -175,6 +206,7 @@ impl<'a> AsciiCast<&'a[Ascii]> for &'a [u8] {\n     }\n }\n \n+#[experimental = \"may be replaced by generic conversion traits\"]\n impl<'a> AsciiCast<&'a [Ascii]> for &'a str {\n     #[inline]\n     unsafe fn to_ascii_nocheck(&self) -> &'a [Ascii] {\n@@ -187,6 +219,7 @@ impl<'a> AsciiCast<&'a [Ascii]> for &'a str {\n     }\n }\n \n+#[experimental = \"may be replaced by generic conversion traits\"]\n impl AsciiCast<Ascii> for u8 {\n     #[inline]\n     unsafe fn to_ascii_nocheck(&self) -> Ascii {\n@@ -199,6 +232,7 @@ impl AsciiCast<Ascii> for u8 {\n     }\n }\n \n+#[experimental = \"may be replaced by generic conversion traits\"]\n impl AsciiCast<Ascii> for char {\n     #[inline]\n     unsafe fn to_ascii_nocheck(&self) -> Ascii {\n@@ -212,6 +246,7 @@ impl AsciiCast<Ascii> for char {\n }\n \n /// Trait for copyless casting to an ascii vector.\n+#[experimental = \"may be replaced by generic conversion traits\"]\n pub trait OwnedAsciiCast {\n     /// Check if convertible to ascii\n     fn is_ascii(&self) -> bool;\n@@ -241,6 +276,7 @@ pub trait OwnedAsciiCast {\n     unsafe fn into_ascii_nocheck(self) -> Vec<Ascii>;\n }\n \n+#[experimental = \"may be replaced by generic conversion traits\"]\n impl OwnedAsciiCast for String {\n     #[inline]\n     fn is_ascii(&self) -> bool {\n@@ -253,6 +289,7 @@ impl OwnedAsciiCast for String {\n     }\n }\n \n+#[experimental = \"may be replaced by generic conversion traits\"]\n impl OwnedAsciiCast for Vec<u8> {\n     #[inline]\n     fn is_ascii(&self) -> bool {\n@@ -274,6 +311,7 @@ impl OwnedAsciiCast for Vec<u8> {\n \n /// Trait for converting an ascii type to a string. Needed to convert\n /// `&[Ascii]` to `&str`.\n+#[experimental = \"may be replaced by generic conversion traits\"]\n pub trait AsciiStr for Sized? {\n     /// Convert to a string.\n     fn as_str_ascii<'a>(&'a self) -> &'a str;\n@@ -283,19 +321,23 @@ pub trait AsciiStr for Sized? {\n     fn to_lower(&self) -> Vec<Ascii>;\n \n     /// Convert to vector representing a lower cased ascii string.\n+    #[deprecated = \"use iterators instead\"]\n     fn to_lowercase(&self) -> Vec<Ascii>;\n \n     /// Deprecated: use `to_uppercase`\n     #[deprecated=\"renamed `to_uppercase`\"]\n     fn to_upper(&self) -> Vec<Ascii>;\n \n     /// Convert to vector representing a upper cased ascii string.\n+    #[deprecated = \"use iterators instead\"]\n     fn to_uppercase(&self) -> Vec<Ascii>;\n \n     /// Compares two Ascii strings ignoring case.\n+    #[deprecated = \"use iterators instead\"]\n     fn eq_ignore_case(&self, other: &[Ascii]) -> bool;\n }\n \n+#[experimental = \"may be replaced by generic conversion traits\"]\n impl AsciiStr for [Ascii] {\n     #[inline]\n     fn as_str_ascii<'a>(&'a self) -> &'a str {\n@@ -336,11 +378,13 @@ impl IntoString for Vec<Ascii> {\n }\n \n /// Trait to convert to an owned byte vector by consuming self\n+#[experimental = \"may be replaced by generic conversion traits\"]\n pub trait IntoBytes {\n     /// Converts to an owned byte vector by consuming self\n     fn into_bytes(self) -> Vec<u8>;\n }\n \n+#[experimental = \"may be replaced by generic conversion traits\"]\n impl IntoBytes for Vec<Ascii> {\n     fn into_bytes(self) -> Vec<u8> {\n         unsafe {\n@@ -358,6 +402,7 @@ impl IntoBytes for Vec<Ascii> {\n \n \n /// Extension methods for ASCII-subset only operations on owned strings\n+#[experimental = \"would prefer to do this in a more general way\"]\n pub trait OwnedAsciiExt {\n     /// Convert the string to ASCII upper case:\n     /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n@@ -371,6 +416,7 @@ pub trait OwnedAsciiExt {\n }\n \n /// Extension methods for ASCII-subset only operations on string slices\n+#[experimental = \"would prefer to do this in a more general way\"]\n pub trait AsciiExt<T> for Sized? {\n     /// Makes a copy of the string in ASCII upper case:\n     /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n@@ -388,6 +434,7 @@ pub trait AsciiExt<T> for Sized? {\n     fn eq_ignore_ascii_case(&self, other: &Self) -> bool;\n }\n \n+#[experimental = \"would prefer to do this in a more general way\"]\n impl AsciiExt<String> for str {\n     #[inline]\n     fn to_ascii_upper(&self) -> String {\n@@ -407,6 +454,7 @@ impl AsciiExt<String> for str {\n     }\n }\n \n+#[experimental = \"would prefer to do this in a more general way\"]\n impl OwnedAsciiExt for String {\n     #[inline]\n     fn into_ascii_upper(self) -> String {\n@@ -421,6 +469,7 @@ impl OwnedAsciiExt for String {\n     }\n }\n \n+#[experimental = \"would prefer to do this in a more general way\"]\n impl AsciiExt<Vec<u8>> for [u8] {\n     #[inline]\n     fn to_ascii_upper(&self) -> Vec<u8> {\n@@ -443,6 +492,7 @@ impl AsciiExt<Vec<u8>> for [u8] {\n     }\n }\n \n+#[experimental = \"would prefer to do this in a more general way\"]\n impl OwnedAsciiExt for Vec<u8> {\n     #[inline]\n     fn into_ascii_upper(mut self) -> Vec<u8> {\n@@ -472,6 +522,7 @@ impl OwnedAsciiExt for Vec<u8> {\n /// - Any other chars in the range [0x20,0x7e] are not escaped.\n /// - Any other chars are given hex escapes.\n /// - Unicode escapes are never generated by this function.\n+#[unstable = \"needs to be updated to use an iterator\"]\n pub fn escape_default(c: u8, f: |u8|) {\n     match c {\n         b'\\t' => { f(b'\\\\'); f(b't'); }\n@@ -494,7 +545,7 @@ pub fn escape_default(c: u8, f: |u8|) {\n     }\n }\n \n-pub static ASCII_LOWER_MAP: [u8, ..256] = [\n+static ASCII_LOWER_MAP: [u8, ..256] = [\n     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n     0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n     0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n@@ -533,7 +584,7 @@ pub static ASCII_LOWER_MAP: [u8, ..256] = [\n     0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,\n ];\n \n-pub static ASCII_UPPER_MAP: [u8, ..256] = [\n+static ASCII_UPPER_MAP: [u8, ..256] = [\n     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n     0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n     0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,"}, {"sha": "9f81de72980ce0f3c549fff1eb947a18d515d996", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b21b48062f114317025c986fe35af21b15c675d9/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21b48062f114317025c986fe35af21b15c675d9/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=b21b48062f114317025c986fe35af21b15c675d9", "patch": "@@ -235,10 +235,10 @@ impl GenericPathUnsafe for Path {\n             let repr = me.repr.as_slice();\n             match me.prefix {\n                 Some(DiskPrefix) => {\n-                    repr.as_bytes()[0] == path.as_bytes()[0].to_ascii().to_uppercase().to_byte()\n+                    repr.as_bytes()[0] == path.as_bytes()[0].to_ascii().to_uppercase().as_byte()\n                 }\n                 Some(VerbatimDiskPrefix) => {\n-                    repr.as_bytes()[4] == path.as_bytes()[0].to_ascii().to_uppercase().to_byte()\n+                    repr.as_bytes()[4] == path.as_bytes()[0].to_ascii().to_uppercase().as_byte()\n                 }\n                 _ => false\n             }\n@@ -673,14 +673,17 @@ impl Path {\n         match (self.prefix, other.prefix) {\n             (Some(DiskPrefix), Some(VerbatimDiskPrefix)) => {\n                 self.is_absolute() &&\n-                    s_repr.as_bytes()[0].to_ascii().eq_ignore_case(o_repr.as_bytes()[4].to_ascii())\n+                    s_repr.as_bytes()[0].to_ascii().to_lowercase() ==\n+                        o_repr.as_bytes()[4].to_ascii().to_lowercase()\n             }\n             (Some(VerbatimDiskPrefix), Some(DiskPrefix)) => {\n                 other.is_absolute() &&\n-                    s_repr.as_bytes()[4].to_ascii().eq_ignore_case(o_repr.as_bytes()[0].to_ascii())\n+                    s_repr.as_bytes()[4].to_ascii().to_lowercase() ==\n+                        o_repr.as_bytes()[0].to_ascii().to_lowercase()\n             }\n             (Some(VerbatimDiskPrefix), Some(VerbatimDiskPrefix)) => {\n-                s_repr.as_bytes()[4].to_ascii().eq_ignore_case(o_repr.as_bytes()[4].to_ascii())\n+                s_repr.as_bytes()[4].to_ascii().to_lowercase() ==\n+                    o_repr.as_bytes()[4].to_ascii().to_lowercase()\n             }\n             (Some(UNCPrefix(_,_)), Some(VerbatimUNCPrefix(_,_))) => {\n                 s_repr.slice(2, self.prefix_len()) == o_repr.slice(8, other.prefix_len())\n@@ -747,10 +750,7 @@ impl Path {\n                                 let mut s = String::from_str(s.slice_to(len));\n                                 unsafe {\n                                     let v = s.as_mut_vec();\n-                                    v[0] = (*v)[0]\n-                                                     .to_ascii()\n-                                                     .to_uppercase()\n-                                                     .to_byte();\n+                                    v[0] = (*v)[0].to_ascii().to_uppercase().as_byte();\n                                 }\n                                 if is_abs {\n                                     // normalize C:/ to C:\\\n@@ -765,7 +765,7 @@ impl Path {\n                                 let mut s = String::from_str(s.slice_to(len));\n                                 unsafe {\n                                     let v = s.as_mut_vec();\n-                                    v[4] = (*v)[4].to_ascii().to_uppercase().to_byte();\n+                                    v[4] = (*v)[4].to_ascii().to_uppercase().as_byte();\n                                 }\n                                 Some(s)\n                             }\n@@ -787,13 +787,13 @@ impl Path {\n                         match prefix {\n                             Some(DiskPrefix) => {\n                                 s.push(prefix_.as_bytes()[0].to_ascii()\n-                                                   .to_uppercase().to_char());\n+                                                   .to_uppercase().as_char());\n                                 s.push(':');\n                             }\n                             Some(VerbatimDiskPrefix) => {\n                                 s.push_str(prefix_.slice_to(4));\n                                 s.push(prefix_.as_bytes()[4].to_ascii()\n-                                                   .to_uppercase().to_char());\n+                                                   .to_uppercase().as_char());\n                                 s.push_str(prefix_.slice_from(5));\n                             }\n                             Some(UNCPrefix(a,b)) => {"}, {"sha": "cfb4c3bc40322b79d28c387b33d62700feaef2f3", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b21b48062f114317025c986fe35af21b15c675d9/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21b48062f114317025c986fe35af21b15c675d9/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=b21b48062f114317025c986fe35af21b15c675d9", "patch": "@@ -533,9 +533,8 @@ fn format(val: Param, op: FormatOp, flags: Flags) -> Result<Vec<u8> ,String> {\n                 FormatHEX => {\n                     s = s.as_slice()\n                          .to_ascii()\n-                         .to_uppercase()\n-                         .into_bytes()\n-                         .into_iter()\n+                         .iter()\n+                         .map(|b| b.to_uppercase().as_byte())\n                          .collect();\n                     if flags.alternate {\n                         let s_ = replace(&mut s, vec!(b'0', b'X'));"}]}