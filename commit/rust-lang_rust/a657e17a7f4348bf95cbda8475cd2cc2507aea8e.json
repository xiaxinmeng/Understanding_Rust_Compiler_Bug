{"sha": "a657e17a7f4348bf95cbda8475cd2cc2507aea8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NTdlMTdhN2Y0MzQ4YmY5NWNiZGE4NDc1Y2QyY2MyNTA3YWVhOGU=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2021-04-23T22:09:26Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2021-04-23T22:09:26Z"}, "message": "Add test for issue #33017", "tree": {"sha": "b900d20ac82586b8b8edf74adf2ad8a674b5812f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b900d20ac82586b8b8edf74adf2ad8a674b5812f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a657e17a7f4348bf95cbda8475cd2cc2507aea8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a657e17a7f4348bf95cbda8475cd2cc2507aea8e", "html_url": "https://github.com/rust-lang/rust/commit/a657e17a7f4348bf95cbda8475cd2cc2507aea8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a657e17a7f4348bf95cbda8475cd2cc2507aea8e/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a352326112e4fd993e339cbd4eabae06d4979b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a352326112e4fd993e339cbd4eabae06d4979b9", "html_url": "https://github.com/rust-lang/rust/commit/9a352326112e4fd993e339cbd4eabae06d4979b9"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "4d19230df6badfacbed2d791e4fb94bb56fdf3c8", "filename": "src/test/ui/specialization/issue-33017.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a657e17a7f4348bf95cbda8475cd2cc2507aea8e/src%2Ftest%2Fui%2Fspecialization%2Fissue-33017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a657e17a7f4348bf95cbda8475cd2cc2507aea8e/src%2Ftest%2Fui%2Fspecialization%2Fissue-33017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-33017.rs?ref=a657e17a7f4348bf95cbda8475cd2cc2507aea8e", "patch": "@@ -0,0 +1,45 @@\n+// Test to ensure that trait bounds are propertly\n+// checked on specializable associated types\n+\n+#![allow(incomplete_features)]\n+#![feature(specialization)]\n+\n+trait UncheckedCopy: Sized {\n+    type Output: From<Self> + Copy + Into<Self>;\n+}\n+\n+impl<T> UncheckedCopy for T {\n+    default type Output = Self;\n+    //~^ ERROR: the trait bound `T: Copy` is not satisfied\n+}\n+\n+fn unchecked_copy<T: UncheckedCopy>(other: &T::Output) -> T {\n+    (*other).into()\n+}\n+\n+fn bug(origin: String) {\n+    // Turn the String into it's Output type...\n+    // Which we can just do by `.into()`, the assoc type states `From<Self>`.\n+    let origin_output = origin.into();\n+\n+    // Make a copy of String::Output, which is a String...\n+    let mut copy: String = unchecked_copy::<String>(&origin_output);\n+\n+    // Turn the Output type into a String again,\n+    // Which we can just do by `.into()`, the assoc type states `Into<Self>`.\n+    let mut origin: String = origin_output.into();\n+\n+    // assert both Strings use the same buffer.\n+    assert_eq!(copy.as_ptr(), origin.as_ptr());\n+\n+    // Any use of the copy we made becomes invalid,\n+    drop(origin);\n+\n+    // OH NO! UB UB UB UB!\n+    copy.push_str(\" world!\");\n+    println!(\"{}\", copy);\n+}\n+\n+fn main() {\n+    bug(String::from(\"hello\"));\n+}"}, {"sha": "bff4618d0be4c3b7294a43c6ce551623bf78871e", "filename": "src/test/ui/specialization/issue-33017.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a657e17a7f4348bf95cbda8475cd2cc2507aea8e/src%2Ftest%2Fui%2Fspecialization%2Fissue-33017.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a657e17a7f4348bf95cbda8475cd2cc2507aea8e/src%2Ftest%2Fui%2Fspecialization%2Fissue-33017.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-33017.stderr?ref=a657e17a7f4348bf95cbda8475cd2cc2507aea8e", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the trait bound `T: Copy` is not satisfied\n+  --> $DIR/issue-33017.rs:12:5\n+   |\n+LL |     type Output: From<Self> + Copy + Into<Self>;\n+   |                               ---- required by this bound in `UncheckedCopy::Output`\n+...\n+LL |     default type Output = Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | impl<T: std::marker::Copy> UncheckedCopy for T {\n+   |       ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}