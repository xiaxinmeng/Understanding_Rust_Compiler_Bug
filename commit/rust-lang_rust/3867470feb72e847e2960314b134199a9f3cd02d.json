{"sha": "3867470feb72e847e2960314b134199a9f3cd02d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4Njc0NzBmZWI3MmU4NDdlMjk2MDMxNGIxMzQxOTlhOWYzY2QwMmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-23T04:09:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-23T04:09:49Z"}, "message": "auto merge of #6013 : gifnksm/rust/bigint-quot-rem, r=graydon\n\nBigInt had been supported quot/rem and div/mod correctly, but after merging #5990 they have been broken.\r\nThis commit fixes it.", "tree": {"sha": "a6befa5e5f297514cc8e1e4b1a09a4ecf714dd4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6befa5e5f297514cc8e1e4b1a09a4ecf714dd4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3867470feb72e847e2960314b134199a9f3cd02d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3867470feb72e847e2960314b134199a9f3cd02d", "html_url": "https://github.com/rust-lang/rust/commit/3867470feb72e847e2960314b134199a9f3cd02d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3867470feb72e847e2960314b134199a9f3cd02d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "309f0c5603b369021bf887bf427670b83d8e75f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/309f0c5603b369021bf887bf427670b83d8e75f7", "html_url": "https://github.com/rust-lang/rust/commit/309f0c5603b369021bf887bf427670b83d8e75f7"}, {"sha": "a117cf03bc90addb9c0b6364db8ff7e54b10d753", "url": "https://api.github.com/repos/rust-lang/rust/commits/a117cf03bc90addb9c0b6364db8ff7e54b10d753", "html_url": "https://github.com/rust-lang/rust/commit/a117cf03bc90addb9c0b6364db8ff7e54b10d753"}], "stats": {"total": 113, "additions": 57, "deletions": 56}, "files": [{"sha": "ee9749af5320e0bc17b028db8f66e2c943b75ca2", "filename": "src/libstd/num/bigint.rs", "status": "modified", "additions": 57, "deletions": 56, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/3867470feb72e847e2960314b134199a9f3cd02d/src%2Flibstd%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3867470feb72e847e2960314b134199a9f3cd02d/src%2Flibstd%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fbigint.rs?ref=3867470feb72e847e2960314b134199a9f3cd02d", "patch": "@@ -264,15 +264,15 @@ impl Mul<BigUint, BigUint> for BigUint {\n \n impl Quot<BigUint, BigUint> for BigUint {\n     fn quot(&self, other: &BigUint) -> BigUint {\n-        let (d, _) = self.quot_rem(other);\n-        return d;\n+        let (q, _) = self.quot_rem(other);\n+        return q;\n     }\n }\n \n impl Rem<BigUint, BigUint> for BigUint {\n     fn rem(&self, other: &BigUint) -> BigUint {\n-        let (_, m) = self.quot_rem(other);\n-        return m;\n+        let (_, r) = self.quot_rem(other);\n+        return r;\n     }\n }\n \n@@ -302,14 +302,14 @@ impl ToStrRadix for BigUint {\n         fn convert_base(n: BigUint, base: uint) -> ~[BigDigit] {\n             let divider    = BigUint::from_uint(base);\n             let mut result = ~[];\n-            let mut r      = n;\n-            while r > divider {\n-                let (d, r0) = r.quot_rem(&divider);\n-                result += [r0.to_uint() as BigDigit];\n-                r = d;\n+            let mut m      = n;\n+            while m > divider {\n+                let (d, m0) = m.div_mod(&divider);\n+                result += [m0.to_uint() as BigDigit];\n+                m = d;\n             }\n-            if r.is_not_zero() {\n-                result += [r.to_uint() as BigDigit];\n+            if m.is_not_zero() {\n+                result += [m.to_uint() as BigDigit];\n             }\n             return result;\n         }\n@@ -384,7 +384,16 @@ pub impl BigUint {\n \n     fn abs(&self) -> BigUint { copy *self }\n \n-    fn quot_rem(&self, other: &BigUint) -> (BigUint, BigUint) {\n+    fn div(&self, other: &BigUint) -> BigUint {\n+        let (d, _) = self.div_mod(other);\n+        return d;\n+    }\n+    fn modulo(&self, other: &BigUint) -> BigUint {\n+        let (_, m) = self.div_mod(other);\n+        return m;\n+    }\n+\n+    fn div_mod(&self, other: &BigUint) -> (BigUint, BigUint) {\n         if other.is_zero() { fail!() }\n         if self.is_zero() { return (Zero::zero(), Zero::zero()); }\n         if *other == One::one() { return (copy *self, Zero::zero()); }\n@@ -402,17 +411,17 @@ pub impl BigUint {\n             shift += 1;\n         }\n         assert!(shift < BigDigit::bits);\n-        let (d, m) = quot_rem_inner(self << shift, other << shift);\n+        let (d, m) = div_mod_inner(self << shift, other << shift);\n         return (d, m >> shift);\n \n-        fn quot_rem_inner(a: BigUint, b: BigUint) -> (BigUint, BigUint) {\n-            let mut r = a;\n+        fn div_mod_inner(a: BigUint, b: BigUint) -> (BigUint, BigUint) {\n+            let mut m = a;\n             let mut d = Zero::zero::<BigUint>();\n             let mut n = 1;\n-            while r >= b {\n-                let mut (d0, d_unit, b_unit) = div_estimate(&r, &b, n);\n+            while m >= b {\n+                let mut (d0, d_unit, b_unit) = div_estimate(&m, &b, n);\n                 let mut prod = b * d0;\n-                while prod > r {\n+                while prod > m {\n                     d0   -= d_unit;\n                     prod -= b_unit;\n                 }\n@@ -422,9 +431,9 @@ pub impl BigUint {\n                 }\n                 n = 1;\n                 d += d0;\n-                r -= prod;\n+                m -= prod;\n             }\n-            return (d, r);\n+            return (d, m);\n         }\n \n         fn div_estimate(a: &BigUint, b: &BigUint, n: uint)\n@@ -455,16 +464,8 @@ pub impl BigUint {\n         }\n     }\n \n-    fn quot(&self, other: &BigUint) -> BigUint {\n-        let (q, _) = self.quotrem(other);\n-        return q;\n-    }\n-    fn rem(&self, other: &BigUint) -> BigUint {\n-        let (_, r) = self.quotrem(other);\n-        return r;\n-    }\n-    fn quotrem(&self, other: &BigUint) -> (BigUint, BigUint) {\n-        self.quot_rem(other)\n+    fn quot_rem(&self, other: &BigUint) -> (BigUint, BigUint) {\n+        self.div_mod(other)\n     }\n \n     fn is_zero(&self) -> bool { self.data.is_empty() }\n@@ -739,15 +740,15 @@ impl Mul<BigInt, BigInt> for BigInt {\n \n impl Quot<BigInt, BigInt> for BigInt {\n     fn quot(&self, other: &BigInt) -> BigInt {\n-        let (d, _) = self.quot_rem(other);\n-        return d;\n+        let (q, _) = self.quot_rem(other);\n+        return q;\n     }\n }\n \n impl Rem<BigInt, BigInt> for BigInt {\n     fn rem(&self, other: &BigInt) -> BigInt {\n-        let (_, m) = self.quot_rem(other);\n-        return m;\n+        let (_, r) = self.quot_rem(other);\n+        return r;\n     }\n }\n \n@@ -841,7 +842,16 @@ pub impl BigInt {\n         BigInt::from_biguint(Plus, copy self.data)\n     }\n \n-    fn quot_rem(&self, other: &BigInt) -> (BigInt, BigInt) {\n+    fn div(&self, other: &BigInt) -> BigInt {\n+        let (d, _) = self.div_mod(other);\n+        return d;\n+    }\n+    fn modulo(&self, other: &BigInt) -> BigInt {\n+        let (_, m) = self.div_mod(other);\n+        return m;\n+    }\n+\n+    fn div_mod(&self, other: &BigInt) -> (BigInt, BigInt) {\n         // m.sign == other.sign\n         let (d_ui, m_ui) = self.data.quot_rem(&other.data);\n         let d = BigInt::from_biguint(Plus, d_ui),\n@@ -863,18 +873,9 @@ pub impl BigInt {\n         }\n     }\n \n-    fn quot(&self, other: &BigInt) -> BigInt {\n-        let (q, _) = self.quotrem(other);\n-        return q;\n-    }\n-    fn rem(&self, other: &BigInt) -> BigInt {\n-        let (_, r) = self.quotrem(other);\n-        return r;\n-    }\n-\n-    fn quotrem(&self, other: &BigInt) -> (BigInt, BigInt) {\n+    fn quot_rem(&self, other: &BigInt) -> (BigInt, BigInt) {\n         // r.sign == self.sign\n-        let (q_ui, r_ui) = self.data.quotrem(&other.data);\n+        let (q_ui, r_ui) = self.data.div_mod(&other.data);\n         let q = BigInt::from_biguint(Plus, q_ui);\n         let r = BigInt::from_biguint(Plus, r_ui);\n         match (self.sign, other.sign) {\n@@ -1151,9 +1152,9 @@ mod biguint_tests {\n     ];\n \n     static quot_rem_quadruples: &'static [(&'static [BigDigit],\n-                                         &'static [BigDigit],\n-                                         &'static [BigDigit],\n-                                         &'static [BigDigit])]\n+                                           &'static [BigDigit],\n+                                           &'static [BigDigit],\n+                                           &'static [BigDigit])]\n         = &[\n             (&[ 1],        &[ 2], &[],               &[1]),\n             (&[ 1,  1],    &[ 2], &[-1/2+1],         &[1]),\n@@ -1517,9 +1518,9 @@ mod bigint_tests {\n     ];\n \n     static quot_rem_quadruples: &'static [(&'static [BigDigit],\n-                                         &'static [BigDigit],\n-                                         &'static [BigDigit],\n-                                         &'static [BigDigit])]\n+                                           &'static [BigDigit],\n+                                           &'static [BigDigit],\n+                                           &'static [BigDigit])]\n         = &[\n             (&[ 1],        &[ 2], &[],               &[1]),\n             (&[ 1,  1],    &[ 2], &[-1/2+1],         &[1]),\n@@ -1556,9 +1557,9 @@ mod bigint_tests {\n     }\n \n     #[test]\n-    fn test_quot_rem() {\n+    fn test_div_mod() {\n         fn check_sub(a: &BigInt, b: &BigInt, ans_d: &BigInt, ans_m: &BigInt) {\n-            let (d, m) = a.quot_rem(b);\n+            let (d, m) = a.div_mod(b);\n             if m.is_not_zero() {\n                 assert!(m.sign == b.sign);\n             }\n@@ -1607,9 +1608,9 @@ mod bigint_tests {\n \n \n     #[test]\n-    fn test_quotrem() {\n+    fn test_quot_rem() {\n         fn check_sub(a: &BigInt, b: &BigInt, ans_q: &BigInt, ans_r: &BigInt) {\n-            let (q, r) = a.quotrem(b);\n+            let (q, r) = a.quot_rem(b);\n             if r.is_not_zero() {\n                 assert!(r.sign == a.sign);\n             }"}]}