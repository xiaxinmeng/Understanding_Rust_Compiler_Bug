{"sha": "8443816176199e3b552f26050aa67ea3c3a2173d", "node_id": "C_kwDOAAsO6NoAKDg0NDM4MTYxNzYxOTllM2I1NTJmMjYwNTBhYTY3ZWEzYzNhMjE3M2Q", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-20T16:59:05Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-20T17:11:28Z"}, "message": "Inline QueryStateShard into QueryState", "tree": {"sha": "f72034fbde7dac466a51b5cd82ad7c8563774e31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f72034fbde7dac466a51b5cd82ad7c8563774e31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8443816176199e3b552f26050aa67ea3c3a2173d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8443816176199e3b552f26050aa67ea3c3a2173d", "html_url": "https://github.com/rust-lang/rust/commit/8443816176199e3b552f26050aa67ea3c3a2173d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8443816176199e3b552f26050aa67ea3c3a2173d/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75ef06892089e0cf53b4a86419c7ff3b3c1f3c4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/75ef06892089e0cf53b4a86419c7ff3b3c1f3c4c", "html_url": "https://github.com/rust-lang/rust/commit/75ef06892089e0cf53b4a86419c7ff3b3c1f3c4c"}], "stats": {"total": 24, "additions": 7, "deletions": 17}, "files": [{"sha": "aa79b5a64d7c83ba77bcb2736c2ad59b8145213f", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8443816176199e3b552f26050aa67ea3c3a2173d/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8443816176199e3b552f26050aa67ea3c3a2173d/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=8443816176199e3b552f26050aa67ea3c3a2173d", "patch": "@@ -33,18 +33,8 @@ fn hash_for_shard<K: Hash>(key: &K) -> u64 {\n     hasher.finish()\n }\n \n-struct QueryStateShard<K> {\n-    active: FxHashMap<K, QueryResult>,\n-}\n-\n-impl<K> Default for QueryStateShard<K> {\n-    fn default() -> QueryStateShard<K> {\n-        QueryStateShard { active: Default::default() }\n-    }\n-}\n-\n pub struct QueryState<K> {\n-    shards: Sharded<QueryStateShard<K>>,\n+    shards: Sharded<FxHashMap<K, QueryResult>>,\n }\n \n /// Indicates the state of a query for a given key in a query map.\n@@ -63,7 +53,7 @@ where\n {\n     pub fn all_inactive(&self) -> bool {\n         let shards = self.shards.lock_shards();\n-        shards.iter().all(|shard| shard.active.is_empty())\n+        shards.iter().all(|shard| shard.is_empty())\n     }\n \n     pub fn try_collect_active_jobs<CTX: Copy>(\n@@ -76,7 +66,7 @@ where\n         // deadlock handler, and this shouldn't be locked.\n         let shards = self.shards.try_lock_shards()?;\n         for shard in shards.iter() {\n-            for (k, v) in shard.active.iter() {\n+            for (k, v) in shard.iter() {\n                 if let QueryResult::Started(ref job) = *v {\n                     let query = make_query(tcx, k.clone());\n                     jobs.insert(job.id, QueryJobInfo { query, job: job.clone() });\n@@ -148,7 +138,7 @@ where\n         let mut state_lock = state.shards.get_shard_by_value(&key).lock();\n         let lock = &mut *state_lock;\n \n-        match lock.active.entry(key) {\n+        match lock.entry(key) {\n             Entry::Vacant(entry) => {\n                 let id = tcx.next_job_id();\n                 let job = tcx.current_query_job();\n@@ -220,7 +210,7 @@ where\n             let shard = get_shard_index_by_hash(key_hash);\n             let job = {\n                 let mut lock = state.shards.get_shard_by_index(shard).lock();\n-                match lock.active.remove(&key).unwrap() {\n+                match lock.remove(&key).unwrap() {\n                     QueryResult::Started(job) => job,\n                     QueryResult::Poisoned => panic!(),\n                 }\n@@ -246,11 +236,11 @@ where\n         let shard = state.shards.get_shard_by_value(&self.key);\n         let job = {\n             let mut shard = shard.lock();\n-            let job = match shard.active.remove(&self.key).unwrap() {\n+            let job = match shard.remove(&self.key).unwrap() {\n                 QueryResult::Started(job) => job,\n                 QueryResult::Poisoned => panic!(),\n             };\n-            shard.active.insert(self.key.clone(), QueryResult::Poisoned);\n+            shard.insert(self.key.clone(), QueryResult::Poisoned);\n             job\n         };\n         // Also signal the completion of the job, so waiters"}]}