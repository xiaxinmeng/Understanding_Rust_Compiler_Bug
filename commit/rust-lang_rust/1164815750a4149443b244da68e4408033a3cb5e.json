{"sha": "1164815750a4149443b244da68e4408033a3cb5e", "node_id": "C_kwDOAAsO6NoAKDExNjQ4MTU3NTBhNDE0OTQ0M2IyNDRkYTY4ZTQ0MDgwMzNhM2NiNWU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-08T15:32:49Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-08T15:32:49Z"}, "message": "make cargo-miri show_error a bit nicer to use", "tree": {"sha": "3b2a5f8851d404da327346fcdc46df5bbe8cc7fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b2a5f8851d404da327346fcdc46df5bbe8cc7fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1164815750a4149443b244da68e4408033a3cb5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1164815750a4149443b244da68e4408033a3cb5e", "html_url": "https://github.com/rust-lang/rust/commit/1164815750a4149443b244da68e4408033a3cb5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1164815750a4149443b244da68e4408033a3cb5e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12e3f75fd49e094ba5ec2f51576a78a88f2bafeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/12e3f75fd49e094ba5ec2f51576a78a88f2bafeb", "html_url": "https://github.com/rust-lang/rust/commit/12e3f75fd49e094ba5ec2f51576a78a88f2bafeb"}], "stats": {"total": 69, "additions": 35, "deletions": 34}, "files": [{"sha": "30b03c57dbab6e4f992e01b289b35354a0bafa04", "filename": "cargo-miri/src/main.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1164815750a4149443b244da68e4408033a3cb5e/cargo-miri%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1164815750a4149443b244da68e4408033a3cb5e/cargo-miri%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fsrc%2Fmain.rs?ref=1164815750a4149443b244da68e4408033a3cb5e", "patch": "@@ -1,10 +1,12 @@\n #![feature(let_else)]\n #![allow(clippy::useless_format, clippy::derive_partial_eq_without_eq, rustc::internal)]\n \n+#[macro_use]\n+mod util;\n+\n mod arg;\n mod phases;\n mod setup;\n-mod util;\n mod version;\n \n use std::{env, iter};\n@@ -73,9 +75,9 @@ fn main() {\n     }\n \n     let Some(first) = args.next() else {\n-        show_error(format!(\n+        show_error!(\n             \"`cargo-miri` called without first argument; please only invoke this binary through `cargo miri`\"\n-        ))\n+        )\n     };\n     match first.as_str() {\n         \"miri\" => phase_cargo_miri(args),"}, {"sha": "93eb3cb174659c7d8337f67be296971a59886169", "filename": "cargo-miri/src/phases.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1164815750a4149443b244da68e4408033a3cb5e/cargo-miri%2Fsrc%2Fphases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1164815750a4149443b244da68e4408033a3cb5e/cargo-miri%2Fsrc%2Fphases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fsrc%2Fphases.rs?ref=1164815750a4149443b244da68e4408033a3cb5e", "patch": "@@ -77,15 +77,15 @@ pub fn phase_cargo_miri(mut args: impl Iterator<Item = String>) {\n     // We cannot know which of those flags take arguments and which do not,\n     // so we cannot detect subcommands later.\n     let Some(subcommand) = args.next() else {\n-        show_error(format!(\"`cargo miri` needs to be called with a subcommand (`run`, `test`)\"));\n+        show_error!(\"`cargo miri` needs to be called with a subcommand (`run`, `test`)\");\n     };\n     let subcommand = match &*subcommand {\n         \"setup\" => MiriCommand::Setup,\n         \"test\" | \"t\" | \"run\" | \"r\" | \"nextest\" => MiriCommand::Forward(subcommand),\n         _ =>\n-            show_error(format!(\n+            show_error!(\n                 \"`cargo miri` supports the following subcommands: `run`, `test`, `nextest`, and `setup`.\"\n-            )),\n+            ),\n     };\n     let verbose = num_arg_flag(\"-v\");\n \n@@ -123,7 +123,7 @@ pub fn phase_cargo_miri(mut args: impl Iterator<Item = String>) {\n         match arg {\n             Ok(value) => {\n                 if target_dir.is_some() {\n-                    show_error(format!(\"`--target-dir` is provided more than once\"));\n+                    show_error!(\"`--target-dir` is provided more than once\");\n                 }\n                 target_dir = Some(value.into());\n             }\n@@ -456,16 +456,13 @@ pub fn phase_runner(mut binary_args: impl Iterator<Item = String>, phase: Runner\n \n     let binary = binary_args.next().unwrap();\n     let file = File::open(&binary)\n-        .unwrap_or_else(|_| show_error(format!(\n+        .unwrap_or_else(|_| show_error!(\n             \"file {:?} not found or `cargo-miri` invoked incorrectly; please only invoke this binary through `cargo miri`\", binary\n-        )));\n+        ));\n     let file = BufReader::new(file);\n \n     let info = serde_json::from_reader(file).unwrap_or_else(|_| {\n-        show_error(format!(\n-            \"file {:?} contains outdated or invalid JSON; try `cargo clean`\",\n-            binary\n-        ))\n+        show_error!(\"file {:?} contains outdated or invalid JSON; try `cargo clean`\", binary)\n     });\n     let info = match info {\n         CrateRunInfo::RunWith(info) => info,\n@@ -562,7 +559,7 @@ pub fn phase_rustdoc(mut args: impl Iterator<Item = String>) {\n             // An existing --runtool flag indicates cargo is running in cross-target mode, which we don't support.\n             // Note that this is only passed when cargo is run with the unstable -Zdoctest-xcompile flag;\n             // otherwise, we won't be called as rustdoc at all.\n-            show_error(format!(\"cross-interpreting doctests is not currently supported by Miri.\"));\n+            show_error!(\"cross-interpreting doctests is not currently supported by Miri.\");\n         } else {\n             cmd.arg(arg);\n         }"}, {"sha": "62d6e25a53e0cce51a9dd1f6b184d7d9b8571136", "filename": "cargo-miri/src/setup.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1164815750a4149443b244da68e4408033a3cb5e/cargo-miri%2Fsrc%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1164815750a4149443b244da68e4408033a3cb5e/cargo-miri%2Fsrc%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fsrc%2Fsetup.rs?ref=1164815750a4149443b244da68e4408033a3cb5e", "patch": "@@ -73,7 +73,7 @@ pub fn setup(subcommand: &MiriCommand, host: &str, target: &str) {\n     if xargo_version().map_or(true, |v| v < XARGO_MIN_VERSION) {\n         if std::env::var_os(\"XARGO_CHECK\").is_some() {\n             // The user manually gave us a xargo binary; don't do anything automatically.\n-            show_error(format!(\"xargo is too old; please upgrade to the latest version\"))\n+            show_error!(\"xargo is too old; please upgrade to the latest version\")\n         }\n         let mut cmd = cargo();\n         cmd.args(&[\"install\", \"xargo\"]);\n@@ -97,10 +97,10 @@ pub fn setup(subcommand: &MiriCommand, host: &str, target: &str) {\n                 .output()\n                 .expect(\"failed to determine sysroot\");\n             if !output.status.success() {\n-                show_error(format!(\n+                show_error!(\n                     \"Failed to determine sysroot; Miri said:\\n{}\",\n                     String::from_utf8_lossy(&output.stderr).trim_end()\n-                ));\n+                );\n             }\n             let sysroot = std::str::from_utf8(&output.stdout).unwrap();\n             let sysroot = Path::new(sysroot.trim_end_matches('\\n'));\n@@ -121,14 +121,14 @@ pub fn setup(subcommand: &MiriCommand, host: &str, target: &str) {\n         }\n     };\n     if !rust_src.exists() {\n-        show_error(format!(\"given Rust source directory `{}` does not exist.\", rust_src.display()));\n+        show_error!(\"given Rust source directory `{}` does not exist.\", rust_src.display());\n     }\n     if rust_src.file_name().and_then(OsStr::to_str) != Some(\"library\") {\n-        show_error(format!(\n+        show_error!(\n             \"given Rust source directory `{}` does not seem to be the `library` subdirectory of \\\n              a Rust source checkout.\",\n             rust_src.display()\n-        ));\n+        );\n     }\n \n     // Next, we need our own libstd. Prepare a xargo project for that purpose.\n@@ -226,11 +226,9 @@ path = \"lib.rs\"\n     // Finally run it!\n     if command.status().expect(\"failed to run xargo\").success().not() {\n         if only_setup {\n-            show_error(format!(\"failed to run xargo, see error details above\"))\n+            show_error!(\"failed to run xargo, see error details above\")\n         } else {\n-            show_error(format!(\n-                \"failed to run xargo; run `cargo miri setup` to see the error details\"\n-            ))\n+            show_error!(\"failed to run xargo; run `cargo miri setup` to see the error details\")\n         }\n     }\n "}, {"sha": "8095958d21d1dec0c2ba845277d5040616016d8b", "filename": "cargo-miri/src/util.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1164815750a4149443b244da68e4408033a3cb5e/cargo-miri%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1164815750a4149443b244da68e4408033a3cb5e/cargo-miri%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fsrc%2Futil.rs?ref=1164815750a4149443b244da68e4408033a3cb5e", "patch": "@@ -14,6 +14,15 @@ use serde::{Deserialize, Serialize};\n \n pub use crate::arg::*;\n \n+pub fn show_error(msg: &str) -> ! {\n+    eprintln!(\"fatal error: {msg}\");\n+    std::process::exit(1)\n+}\n+\n+macro_rules! show_error {\n+    ($($tt:tt)*) => { show_error(&format!($($tt)*)) };\n+}\n+\n /// The information to run a crate with the given environment.\n #[derive(Clone, Serialize, Deserialize)]\n pub struct CrateRunEnv {\n@@ -55,10 +64,10 @@ pub enum CrateRunInfo {\n impl CrateRunInfo {\n     pub fn store(&self, filename: &Path) {\n         let file = File::create(filename)\n-            .unwrap_or_else(|_| show_error(format!(\"cannot create `{}`\", filename.display())));\n+            .unwrap_or_else(|_| show_error!(\"cannot create `{}`\", filename.display()));\n         let file = BufWriter::new(file);\n         serde_json::ser::to_writer(file, self)\n-            .unwrap_or_else(|_| show_error(format!(\"cannot write to `{}`\", filename.display())));\n+            .unwrap_or_else(|_| show_error!(\"cannot write to `{}`\", filename.display()));\n     }\n }\n \n@@ -70,11 +79,6 @@ pub enum MiriCommand {\n     Forward(String),\n }\n \n-pub fn show_error(msg: String) -> ! {\n-    eprintln!(\"fatal error: {}\", msg);\n-    std::process::exit(1)\n-}\n-\n /// Escapes `s` in a way that is suitable for using it as a string literal in TOML syntax.\n pub fn escape_for_toml(s: &str) -> String {\n     // We want to surround this string in quotes `\"`. So we first escape all quotes,\n@@ -187,15 +191,15 @@ pub fn ask_to_run(mut cmd: Command, ask: bool, text: &str) {\n         match buf.trim().to_lowercase().as_ref() {\n             // Proceed.\n             \"\" | \"y\" | \"yes\" => {}\n-            \"n\" | \"no\" => show_error(format!(\"aborting as per your request\")),\n-            a => show_error(format!(\"invalid answer `{}`\", a)),\n+            \"n\" | \"no\" => show_error!(\"aborting as per your request\"),\n+            a => show_error!(\"invalid answer `{}`\", a),\n         };\n     } else {\n         eprintln!(\"Running `{:?}` to {}.\", cmd, text);\n     }\n \n     if cmd.status().unwrap_or_else(|_| panic!(\"failed to execute {:?}\", cmd)).success().not() {\n-        show_error(format!(\"failed to {}\", text));\n+        show_error!(\"failed to {}\", text);\n     }\n }\n "}]}