{"sha": "506ae934f808c2cf664f289dc29f7e90d253a454", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNmFlOTM0ZjgwOGMyY2Y2NjRmMjg5ZGMyOWY3ZTkwZDI1M2E0NTQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-28T00:03:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-28T00:03:38Z"}, "message": "Reorder std::vec so the documentation renders better\n\nPut all types first, then predicates, then functions", "tree": {"sha": "9a5814dd9efe391b420d8dbeb1752f8105fdffce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a5814dd9efe391b420d8dbeb1752f8105fdffce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/506ae934f808c2cf664f289dc29f7e90d253a454", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/506ae934f808c2cf664f289dc29f7e90d253a454", "html_url": "https://github.com/rust-lang/rust/commit/506ae934f808c2cf664f289dc29f7e90d253a454", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/506ae934f808c2cf664f289dc29f7e90d253a454/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b85817af8bc4bdfbb155f15367c3ebee09eb743", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b85817af8bc4bdfbb155f15367c3ebee09eb743", "html_url": "https://github.com/rust-lang/rust/commit/2b85817af8bc4bdfbb155f15367c3ebee09eb743"}], "stats": {"total": 69, "additions": 35, "deletions": 34}, "files": [{"sha": "fd6e594e1ad0a19ef39a57615d5c47b989a9b65c", "filename": "src/lib/vec.rs", "status": "modified", "additions": 35, "deletions": 34, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/506ae934f808c2cf664f289dc29f7e90d253a454/src%2Flib%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/506ae934f808c2cf664f289dc29f7e90d253a454/src%2Flib%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fvec.rs?ref=506ae934f808c2cf664f289dc29f7e90d253a454", "patch": "@@ -19,6 +19,41 @@ native \"c-stack-cdecl\" mod rustrt {\n                               count: uint) -> [T];\n }\n \n+/*\n+Type: init_op\n+\n+A function used to initialize the elements of a vector.\n+*/\n+type init_op<T> = block(uint) -> T;\n+\n+\n+/*\n+Predicate: is_empty\n+\n+Returns true if a vector contains no elements.\n+*/\n+pure fn is_empty<T>(v: [mutable? T]) -> bool {\n+    // FIXME: This would be easier if we could just call len\n+    for t: T in v { ret false; }\n+    ret true;\n+}\n+\n+/*\n+Predicate: is_not_empty\n+\n+Returns true if a vector contains some elements.\n+*/\n+pure fn is_not_empty<T>(v: [mutable? T]) -> bool { ret !is_empty(v); }\n+\n+/*\n+Predicate: same_length\n+\n+Returns true if two vectors have the same length\n+*/\n+pure fn same_length<T, U>(xs: [T], ys: [U]) -> bool {\n+    vec::len(xs) == vec::len(ys)\n+}\n+\n /*\n Function: reserve\n \n@@ -43,13 +78,6 @@ Returns the length of a vector\n */\n pure fn len<T>(v: [mutable? T]) -> uint { unchecked { rusti::vec_len(v) } }\n \n-/*\n-Type: init_op\n-\n-A function used to initialize the elements of a vector.\n-*/\n-type init_op<T> = block(uint) -> T;\n-\n /*\n Function: init_fn\n \n@@ -141,24 +169,6 @@ fn from_mut<T>(v: [mutable T]) -> [T] {\n     ret vres;\n }\n \n-/*\n-Predicate: is_empty\n-\n-Returns true if a vector contains no elements.\n-*/\n-pure fn is_empty<T>(v: [mutable? T]) -> bool {\n-    // FIXME: This would be easier if we could just call len\n-    for t: T in v { ret false; }\n-    ret true;\n-}\n-\n-/*\n-Predicate: is_not_empty\n-\n-Returns true if a vector contains some elements.\n-*/\n-pure fn is_not_empty<T>(v: [mutable? T]) -> bool { ret !is_empty(v); }\n-\n // Accessors\n \n /*\n@@ -519,15 +529,6 @@ fn position_pred<T>(f: block(T) -> bool, v: [T]) -> option::t<uint> {\n     ret none;\n }\n \n-/*\n-Predicate: same_length\n-\n-Returns true if two vectors have the same length\n-*/\n-pure fn same_length<T, U>(xs: [T], ys: [U]) -> bool {\n-    vec::len(xs) == vec::len(ys)\n-}\n-\n // FIXME: if issue #586 gets implemented, could have a postcondition\n // saying the two result lists have the same length -- or, could\n // return a nominal record with a constraint saying that, instead of"}]}