{"sha": "e241f2996dcf99f3d9fd2f9e277e435782c65a61", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNDFmMjk5NmRjZjk5ZjNkOWZkMmY5ZTI3N2U0MzU3ODJjNjVhNjE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-08-25T00:24:58Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-08-26T00:23:35Z"}, "message": "Allow pure fns to have any return type", "tree": {"sha": "cc86000e235ab08c5b0ac9a3f3b719736df1d068", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc86000e235ab08c5b0ac9a3f3b719736df1d068"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e241f2996dcf99f3d9fd2f9e277e435782c65a61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e241f2996dcf99f3d9fd2f9e277e435782c65a61", "html_url": "https://github.com/rust-lang/rust/commit/e241f2996dcf99f3d9fd2f9e277e435782c65a61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e241f2996dcf99f3d9fd2f9e277e435782c65a61/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dd23f24d65e05169594bfcb45b84adfe4e52516", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dd23f24d65e05169594bfcb45b84adfe4e52516", "html_url": "https://github.com/rust-lang/rust/commit/4dd23f24d65e05169594bfcb45b84adfe4e52516"}], "stats": {"total": 62, "additions": 47, "deletions": 15}, "files": [{"sha": "e65265e640f7e4cfef6dc7549f58dc2d8b3a7533", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e241f2996dcf99f3d9fd2f9e277e435782c65a61/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e241f2996dcf99f3d9fd2f9e277e435782c65a61/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=e241f2996dcf99f3d9fd2f9e277e435782c65a61", "patch": "@@ -55,6 +55,7 @@ export hash_ty;\n export idx_nil;\n export is_lval;\n export is_binopable;\n+export is_pred_ty;\n export item_table;\n export lookup_item_type;\n export method;\n@@ -1737,6 +1738,12 @@ fn is_fn_ty(cx: &ctxt, fty: t) -> bool {\n     }\n }\n \n+// Just checks whether it's a fn that returns bool,\n+// not its purity.\n+fn is_pred_ty(cx: &ctxt, fty:t) -> bool {\n+    is_fn_ty(cx, fty) && type_is_bool(cx, ty_fn_ret(cx, fty))\n+}\n+\n fn ty_var_id(cx: &ctxt, typ: t) -> int {\n     alt struct(cx, typ) {\n       ty::ty_var(vid) { ret vid; }"}, {"sha": "ad199ba5cb3ddc77f3eeba9c2c2757a69f9f1cec", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e241f2996dcf99f3d9fd2f9e277e435782c65a61/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e241f2996dcf99f3d9fd2f9e277e435782c65a61/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=e241f2996dcf99f3d9fd2f9e277e435782c65a61", "patch": "@@ -1715,6 +1715,11 @@ fn check_expr_with_unifier(fcx: &@fn_ctxt, expr: &@ast::expr, unify: &unifier,\n            literals or slots */\n         alt e.node {\n           ast::expr_call(operator, operands) {\n+            if !ty::is_pred_ty(fcx.ccx.tcx, expr_ty(fcx.ccx.tcx, operator)) {\n+                    fcx.ccx.tcx.sess.span_fatal(operator.span,\n+                     \"Operator in constraint has non-boolean return type\");\n+            }\n+\n             alt operator.node {\n               ast::expr_path(oper_name) {\n                 alt fcx.ccx.tcx.def_map.find(operator.id) {\n@@ -1723,7 +1728,7 @@ fn check_expr_with_unifier(fcx: &@fn_ctxt, expr: &@ast::expr, unify: &unifier,\n                   }\n                   _ {\n                     fcx.ccx.tcx.sess.span_fatal(operator.span,\n-                                                \"non-predicate as operator \\\n+                                           \"Impure function as operator \\\n                                        in constraint\");\n                   }\n                 }\n@@ -2596,18 +2601,6 @@ fn check_fn(ccx: &@crate_ctxt, f: &ast::_fn, id: &ast::node_id,\n           mutable fixups: fixups,\n           ccx: ccx};\n     check_block(fcx, body);\n-    alt decl.purity {\n-      ast::pure_fn. {\n-\n-        // This just checks that the declared type is bool, and trusts\n-        // that that's the actual return type.\n-        if !ty::type_is_bool(ccx.tcx, fcx.ret_ty) {\n-            ccx.tcx.sess.span_err(body.span,\n-                                  \"Non-boolean return type in pred\");\n-        }\n-      }\n-      _ { }\n-    }\n \n     // For non-iterator fns, we unify the tail expr's type with the\n     // function result type, if there is a tail expr."}, {"sha": "9891360af9e6908376d83bd7d624c8cc266b42b4", "filename": "src/test/compile-fail/not-a-pred-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e241f2996dcf99f3d9fd2f9e277e435782c65a61/src%2Ftest%2Fcompile-fail%2Fnot-a-pred-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e241f2996dcf99f3d9fd2f9e277e435782c65a61/src%2Ftest%2Fcompile-fail%2Fnot-a-pred-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-a-pred-check.rs?ref=e241f2996dcf99f3d9fd2f9e277e435782c65a61", "patch": "@@ -1,5 +1,5 @@\n // -*- rust -*-\n-// error-pattern: non-predicate\n+// error-pattern: Impure function as operator\n \n fn f(q: int) -> bool { ret true; }\n "}, {"sha": "61477258bb4b6b1900724aeb50008b7d9326bebf", "filename": "src/test/run-pass/non-boolean-pure-fns.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e241f2996dcf99f3d9fd2f9e277e435782c65a61/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e241f2996dcf99f3d9fd2f9e277e435782c65a61/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs?ref=e241f2996dcf99f3d9fd2f9e277e435782c65a61", "patch": "@@ -0,0 +1,32 @@\n+use std;\n+\n+import std::list::*;\n+\n+pure fn pure_length_go<@T>(ls: &list<T>, acc: uint) -> uint {\n+    alt ls {\n+      nil. { acc }\n+      cons(_, tl) { pure_length_go(*tl, acc + 1u) }\n+    }\n+}\n+\n+pure fn pure_length<@T>(ls: &list<T>) -> uint {\n+    pure_length_go(ls, 0u)\n+}\n+\n+pure fn nonempty_list<@T>(ls: &list<T>) -> bool {\n+    pure_length(ls) > 0u\n+}\n+\n+ // Of course, the compiler can't take advantage of the\n+    // knowledge that ls is a cons node. Future work.\n+    // Also, this is pretty contrived since nonempty_list\n+    // could be a \"tag refinement\", if we implement those.\n+fn safe_head<@T>(ls: &list<T>) : nonempty_list(ls) -> T { car(ls) }\n+\n+fn main() {\n+    let mylist = cons(@1u, @nil);\n+    // Again, a way to eliminate such \"obvious\" checks seems\n+    // desirable. (Tags could have postconditions.)\n+    check(nonempty_list(mylist));\n+    assert (*(safe_head(mylist)) == 1u);\n+}\n\\ No newline at end of file"}, {"sha": "1f70cb73f600528bc8246043c721d78927aa492f", "filename": "src/test/run-pass/pred-not-bool.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e241f2996dcf99f3d9fd2f9e277e435782c65a61/src%2Ftest%2Frun-pass%2Fpred-not-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e241f2996dcf99f3d9fd2f9e277e435782c65a61/src%2Ftest%2Frun-pass%2Fpred-not-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpred-not-bool.rs?ref=e241f2996dcf99f3d9fd2f9e277e435782c65a61", "patch": "@@ -5,6 +5,6 @@\n // this checks that a pred with a non-bool return\n // type is rejected, even if the pred is never used\n \n-pred bad(a: int) -> int { ret 37; }\n+pure fn bad(a: int) -> int { ret 37; }\n \n fn main() { }", "previous_filename": "src/test/compile-fail/pred-not-bool.rs"}]}