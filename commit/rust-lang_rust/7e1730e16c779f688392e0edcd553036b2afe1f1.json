{"sha": "7e1730e16c779f688392e0edcd553036b2afe1f1", "node_id": "C_kwDOAAsO6NoAKDdlMTczMGUxNmM3NzlmNjg4MzkyZTBlZGNkNTUzMDM2YjJhZmUxZjE", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-06-06T10:36:57Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-06-06T10:36:57Z"}, "message": "Fix `#[expect]` for `same_name_method`", "tree": {"sha": "709385689e806686ba93d11de7dc42ac214b3b3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/709385689e806686ba93d11de7dc42ac214b3b3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e1730e16c779f688392e0edcd553036b2afe1f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEwgBEOx3xlHwII7PG9cWdDmaeUwIFAmKd2MkACgkQ9cWdDmae\nUwJTfRAAlPYoV+uu3HE6Hfqi9+5CTbSlYLm5AiwYusP1Gm9oCnU+XDfZ3xtqJc+W\nigs2yr2KqhKJ4NrcX0p/zY+vpL1xijp2X6yp+kztD6ZtUA21LQCsPHXqOmgf6cba\nJaZd06eTe8jHFYaDDuDarMdDcu6X3veUrvbuCT59Mmxjn6Yi6jUoEac9z/AAg09x\nvGcBRD7tN2LsUyMOqlVVWgZM7FI29aLXkw1D6+Ch8dWbKNW3bcO8zu754xum7cBm\ng8JrTAyuyb/T5k4/mZyQZSoGakDtHdqGHRjgnN+r9gqngUWesey79Lggvu8MaePO\nnnJS7aI0zvZVQBgpEd4bMIgkUH0RdyjbjJLj/MypFiUFmouS/HrzS0ppIVgHC9U6\nobIeCENn7/Lxi3tBBFFKyyar64SCu/sbg7Ybh4tcNepW9XYCwWGFILmWBrPiVd07\ntHn/DZBLeeh2jFjJN6ZDv1Qf2ovSwA0OqrtKGgXq6sJgErWymTOg7VT3W2YlfQqF\no/V4mtjbbZX78gM/tdHWk5alSXOcK7v07kITqC2ZN7odM4pZQz0trFvfC0q51VGQ\nCCT5TEBioQSF46qOrQSmSn4a0xmw7HRIKY8WkCgq1ON1LzrIvp479YIw5aU1T0UN\n3Y/kcHEwOEPIeu22dmS9QFa1qC5x2jdlMaB3BGs7XptT5d1x2nA=\n=HtYM\n-----END PGP SIGNATURE-----", "payload": "tree 709385689e806686ba93d11de7dc42ac214b3b3c\nparent a613460e8ade73dc387c19b0a45588681de46fef\nauthor xFrednet <xFrednet@gmail.com> 1654511817 +0200\ncommitter xFrednet <xFrednet@gmail.com> 1654511817 +0200\n\nFix `#[expect]` for `same_name_method`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e1730e16c779f688392e0edcd553036b2afe1f1", "html_url": "https://github.com/rust-lang/rust/commit/7e1730e16c779f688392e0edcd553036b2afe1f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e1730e16c779f688392e0edcd553036b2afe1f1/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a613460e8ade73dc387c19b0a45588681de46fef", "url": "https://api.github.com/repos/rust-lang/rust/commits/a613460e8ade73dc387c19b0a45588681de46fef", "html_url": "https://github.com/rust-lang/rust/commit/a613460e8ade73dc387c19b0a45588681de46fef"}], "stats": {"total": 53, "additions": 36, "deletions": 17}, "files": [{"sha": "04d9ee7d912f3501220e48fefbae5ef3555aa690", "filename": "clippy_lints/src/same_name_method.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7e1730e16c779f688392e0edcd553036b2afe1f1/clippy_lints%2Fsrc%2Fsame_name_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1730e16c779f688392e0edcd553036b2afe1f1/clippy_lints%2Fsrc%2Fsame_name_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsame_name_method.rs?ref=7e1730e16c779f688392e0edcd553036b2afe1f1", "patch": "@@ -1,7 +1,7 @@\n-use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::diagnostics::span_lint_hir_and_then;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::{Impl, ItemKind, Node, Path, QPath, TraitRef, TyKind};\n+use rustc_hir::{HirId, Impl, ItemKind, Node, Path, QPath, TraitRef, TyKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::AssocKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -42,7 +42,7 @@ declare_clippy_lint! {\n declare_lint_pass!(SameNameMethod => [SAME_NAME_METHOD]);\n \n struct ExistingName {\n-    impl_methods: BTreeMap<Symbol, Span>,\n+    impl_methods: BTreeMap<Symbol, (Span, HirId)>,\n     trait_methods: BTreeMap<Symbol, Vec<Span>>,\n }\n \n@@ -97,10 +97,11 @@ impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n                         };\n \n                         let mut check_trait_method = |method_name: Symbol, trait_method_span: Span| {\n-                            if let Some(impl_span) = existing_name.impl_methods.get(&method_name) {\n-                                span_lint_and_then(\n+                            if let Some((impl_span, hir_id)) = existing_name.impl_methods.get(&method_name) {\n+                                span_lint_hir_and_then(\n                                     cx,\n                                     SAME_NAME_METHOD,\n+                                    *hir_id,\n                                     *impl_span,\n                                     \"method's name is the same as an existing method in a trait\",\n                                     |diag| {\n@@ -136,10 +137,12 @@ impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n                         }) {\n                             let method_name = impl_item_ref.ident.name;\n                             let impl_span = impl_item_ref.span;\n+                            let hir_id = impl_item_ref.id.hir_id();\n                             if let Some(trait_spans) = existing_name.trait_methods.get(&method_name) {\n-                                span_lint_and_then(\n+                                span_lint_hir_and_then(\n                                     cx,\n                                     SAME_NAME_METHOD,\n+                                    hir_id,\n                                     impl_span,\n                                     \"method's name is the same as an existing method in a trait\",\n                                     |diag| {\n@@ -152,7 +155,7 @@ impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n                                     },\n                                 );\n                             }\n-                            existing_name.impl_methods.insert(method_name, impl_span);\n+                            existing_name.impl_methods.insert(method_name, (impl_span, hir_id));\n                         }\n                     },\n                 }"}, {"sha": "9562b47f0c4ff28610caf5f78856225725642d77", "filename": "tests/ui/same_name_method.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7e1730e16c779f688392e0edcd553036b2afe1f1/tests%2Fui%2Fsame_name_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1730e16c779f688392e0edcd553036b2afe1f1/tests%2Fui%2Fsame_name_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_name_method.rs?ref=7e1730e16c779f688392e0edcd553036b2afe1f1", "patch": "@@ -1,3 +1,4 @@\n+#![feature(lint_reasons)]\n #![warn(clippy::same_name_method)]\n #![allow(dead_code, non_camel_case_types)]\n \n@@ -108,4 +109,19 @@ mod should_not_lint {\n     }\n }\n \n+mod check_expect_suppression {\n+    use crate::T1;\n+\n+    struct S;\n+\n+    impl S {\n+        #[expect(clippy::same_name_method)]\n+        fn foo() {}\n+    }\n+\n+    impl T1 for S {\n+        fn foo() {}\n+    }\n+}\n+\n fn main() {}"}, {"sha": "f55ec9f3cc66b8306f9e6723612dd769646e0475", "filename": "tests/ui/same_name_method.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7e1730e16c779f688392e0edcd553036b2afe1f1/tests%2Fui%2Fsame_name_method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e1730e16c779f688392e0edcd553036b2afe1f1/tests%2Fui%2Fsame_name_method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_name_method.stderr?ref=7e1730e16c779f688392e0edcd553036b2afe1f1", "patch": "@@ -1,61 +1,61 @@\n error: method's name is the same as an existing method in a trait\n-  --> $DIR/same_name_method.rs:20:13\n+  --> $DIR/same_name_method.rs:21:13\n    |\n LL |             fn foo() {}\n    |             ^^^^^^^^^^^\n    |\n    = note: `-D clippy::same-name-method` implied by `-D warnings`\n note: existing `foo` defined here\n-  --> $DIR/same_name_method.rs:24:13\n+  --> $DIR/same_name_method.rs:25:13\n    |\n LL |             fn foo() {}\n    |             ^^^^^^^^^^^\n \n error: method's name is the same as an existing method in a trait\n-  --> $DIR/same_name_method.rs:34:13\n+  --> $DIR/same_name_method.rs:35:13\n    |\n LL |             fn clone() {}\n    |             ^^^^^^^^^^^^^\n    |\n note: existing `clone` defined here\n-  --> $DIR/same_name_method.rs:30:18\n+  --> $DIR/same_name_method.rs:31:18\n    |\n LL |         #[derive(Clone)]\n    |                  ^^^^^\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: method's name is the same as an existing method in a trait\n-  --> $DIR/same_name_method.rs:44:13\n+  --> $DIR/same_name_method.rs:45:13\n    |\n LL |             fn foo() {}\n    |             ^^^^^^^^^^^\n    |\n note: existing `foo` defined here\n-  --> $DIR/same_name_method.rs:48:13\n+  --> $DIR/same_name_method.rs:49:13\n    |\n LL |             fn foo() {}\n    |             ^^^^^^^^^^^\n \n error: method's name is the same as an existing method in a trait\n-  --> $DIR/same_name_method.rs:58:13\n+  --> $DIR/same_name_method.rs:59:13\n    |\n LL |             fn foo() {}\n    |             ^^^^^^^^^^^\n    |\n note: existing `foo` defined here\n-  --> $DIR/same_name_method.rs:61:9\n+  --> $DIR/same_name_method.rs:62:9\n    |\n LL |         impl T1 for S {}\n    |         ^^^^^^^^^^^^^^^^\n \n error: method's name is the same as an existing method in a trait\n-  --> $DIR/same_name_method.rs:70:13\n+  --> $DIR/same_name_method.rs:71:13\n    |\n LL |             fn foo() {}\n    |             ^^^^^^^^^^^\n    |\n note: existing `foo` defined here\n-  --> $DIR/same_name_method.rs:73:9\n+  --> $DIR/same_name_method.rs:74:9\n    |\n LL |         impl T1 for S {}\n    |         ^^^^^^^^^^^^^^^^"}]}