{"sha": "1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhN2RjMGEyY2I4ZGRmOGM3NjdkYWZiMjg4MDY5Y2VlZDdhYjkyZTM=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-12T12:58:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-07-12T12:58:44Z"}, "message": "Rollup merge of #43000 - estebank:on-unimplemented-path, r=arielb1\n\n`rustc_on_unimplemented` supports referring to trait\n\nAdd support to `rustc_on_unimplemented` to reference the full path of\nthe annotated trait. For the following code:\n\n```rust\npub mod Bar {\n    #[rustc_on_unimplemented = \"test error `{Self}` with `{Bar}` `{Baz}` `{Quux}` in `{Foo}`\"]\n    pub trait Foo<Bar, Baz, Quux> {}\n}\n```\n\nthe error message will be:\n\n```\ntest error `std::string::String` with `u8` `_` `u32` in `Bar::Foo`\n```", "tree": {"sha": "783b7336358b6cf8a25ae4db507175e91a8fbd5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/783b7336358b6cf8a25ae4db507175e91a8fbd5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3", "html_url": "https://github.com/rust-lang/rust/commit/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0926f9b72fc3deed0e9d06261b08646425a158f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0926f9b72fc3deed0e9d06261b08646425a158f8", "html_url": "https://github.com/rust-lang/rust/commit/0926f9b72fc3deed0e9d06261b08646425a158f8"}, {"sha": "05d352613226e890b7017b84edbc5b0ea4d6d147", "url": "https://api.github.com/repos/rust-lang/rust/commits/05d352613226e890b7017b84edbc5b0ea4d6d147", "html_url": "https://github.com/rust-lang/rust/commit/05d352613226e890b7017b84edbc5b0ea4d6d147"}], "stats": {"total": 151, "additions": 147, "deletions": 4}, "files": [{"sha": "c02d1394f6bb56e70ec1e754fa1614c6a13f97aa", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3", "patch": "@@ -330,6 +330,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             .filter(|a| a.check_name(\"rustc_on_unimplemented\"))\n             .next()\n         {\n+            let name = self.tcx.item_name(def_id).as_str();\n             let err_sp = item.span.substitute_dummy(span);\n             let trait_str = self.tcx.item_path_str(trait_ref.def_id);\n             if let Some(istring) = item.value_str() {\n@@ -347,6 +348,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         Piece::NextArgument(a) => match a.position {\n                             Position::ArgumentNamed(s) => match generic_map.get(s) {\n                                 Some(val) => Some(val),\n+                                None if s == name => {\n+                                    Some(&trait_str)\n+                                }\n                                 None => {\n                                     span_err!(self.tcx.sess, err_sp, E0272,\n                                               \"the #[rustc_on_unimplemented] attribute on trait \\"}, {"sha": "cdbe5e14e90948fabb469189226f1d6465283578", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3", "patch": "@@ -1167,6 +1167,7 @@ fn check_on_unimplemented<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }) {\n         if let Some(istring) = attr.value_str() {\n             let istring = istring.as_str();\n+            let name = tcx.item_name(def_id).as_str();\n             let parser = Parser::new(&istring);\n             let types = &generics.types;\n             for token in parser {\n@@ -1175,13 +1176,14 @@ fn check_on_unimplemented<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     Piece::NextArgument(a) => match a.position {\n                         // `{Self}` is allowed\n                         Position::ArgumentNamed(s) if s == \"Self\" => (),\n+                        // `{ThisTraitsName}` is allowed\n+                        Position::ArgumentNamed(s) if s == name => (),\n                         // So is `{A}` if A is a type parameter\n                         Position::ArgumentNamed(s) => match types.iter().find(|t| {\n                             t.name == s\n                         }) {\n                             Some(_) => (),\n                             None => {\n-                                let name = tcx.item_name(def_id);\n                                 span_err!(tcx.sess, attr.span, E0230,\n                                                  \"there is no type parameter \\\n                                                           {} on trait {}\","}, {"sha": "8580749084d22da1b39a356468d43611f01a0c57", "filename": "src/test/ui/on-unimplemented/bad-annotation.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.rs?ref=1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3", "previous_filename": "src/test/compile-fail/on-unimplemented/bad-annotation.rs"}, {"sha": "8599477e8ed7eb05277f6b8e49d6b51d254190ab", "filename": "src/test/ui/on-unimplemented/bad-annotation.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.stderr?ref=1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3", "patch": "@@ -0,0 +1,22 @@\n+error[E0232]: this attribute must have a value\n+  --> $DIR/bad-annotation.rs:26:1\n+   |\n+26 | #[rustc_on_unimplemented] //~ ERROR this attribute must have a value\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ attribute requires a value\n+   |\n+   = note: eg `#[rustc_on_unimplemented = \"foo\"]`\n+\n+error[E0230]: there is no type parameter C on trait BadAnnotation2\n+  --> $DIR/bad-annotation.rs:30:1\n+   |\n+30 | #[rustc_on_unimplemented = \"Unimplemented trait error on `{Self}` with params `<{A},{B},{C}>`\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0231]: only named substitution parameters are allowed\n+  --> $DIR/bad-annotation.rs:35:1\n+   |\n+35 | #[rustc_on_unimplemented = \"Unimplemented trait error on `{Self}` with params `<{A},{B},{}>`\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "15375936b898c80de754ba8191984790bda0e5e4", "filename": "src/test/ui/on-unimplemented/multiple-impls.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.rs?ref=1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3", "previous_filename": "src/test/compile-fail/on-unimplemented/multiple-impls.rs"}, {"sha": "a1fa8b720a82944bbf893b0ac955eb314037e0c3", "filename": "src/test/ui/on-unimplemented/multiple-impls.stderr", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr?ref=1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3", "patch": "@@ -0,0 +1,53 @@\n+error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n+  --> $DIR/multiple-impls.rs:43:5\n+   |\n+43 |     Index::index(&[] as &[i32], 2u32);\n+   |     ^^^^^^^^^^^^ trait message\n+   |\n+   = help: the trait `Index<u32>` is not implemented for `[i32]`\n+   = note: required by `Index::index`\n+\n+error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n+  --> $DIR/multiple-impls.rs:43:5\n+   |\n+43 |     Index::index(&[] as &[i32], 2u32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ trait message\n+   |\n+   = help: the trait `Index<u32>` is not implemented for `[i32]`\n+\n+error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n+  --> $DIR/multiple-impls.rs:49:5\n+   |\n+49 |     Index::index(&[] as &[i32], Foo(2u32));\n+   |     ^^^^^^^^^^^^ on impl for Foo\n+   |\n+   = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n+   = note: required by `Index::index`\n+\n+error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n+  --> $DIR/multiple-impls.rs:49:5\n+   |\n+49 |     Index::index(&[] as &[i32], Foo(2u32));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ on impl for Foo\n+   |\n+   = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n+\n+error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n+  --> $DIR/multiple-impls.rs:55:5\n+   |\n+55 |     Index::index(&[] as &[i32], Bar(2u32));\n+   |     ^^^^^^^^^^^^ on impl for Bar\n+   |\n+   = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n+   = note: required by `Index::index`\n+\n+error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n+  --> $DIR/multiple-impls.rs:55:5\n+   |\n+55 |     Index::index(&[] as &[i32], Bar(2u32));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ on impl for Bar\n+   |\n+   = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "66d612baab4e8648b80a6275cf9c318e8aba0988", "filename": "src/test/ui/on-unimplemented/on-impl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.rs?ref=1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3", "previous_filename": "src/test/compile-fail/on-unimplemented/on-impl.rs"}, {"sha": "c8c06bf44fd6fe9d2f9be3e62bc8b122b028d720", "filename": "src/test/ui/on-unimplemented/on-impl.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr?ref=1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n+  --> $DIR/on-impl.rs:32:5\n+   |\n+32 |     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n+   |     ^^^^^^^^^^^^^^^^^^^ a usize is required to index into a slice\n+   |\n+   = help: the trait `Index<u32>` is not implemented for `[i32]`\n+   = note: required by `Index::index`\n+\n+error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n+  --> $DIR/on-impl.rs:32:5\n+   |\n+32 |     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a usize is required to index into a slice\n+   |\n+   = help: the trait `Index<u32>` is not implemented for `[i32]`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "ed7ec9b1436890c90f87196553bdb310aba21d3d", "filename": "src/test/ui/on-unimplemented/on-trait.rs", "status": "renamed", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.rs?ref=1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3", "patch": "@@ -11,9 +11,12 @@\n \n #![feature(on_unimplemented)]\n \n-#[rustc_on_unimplemented = \"test error `{Self}` with `{Bar}` `{Baz}` `{Quux}`\"]\n-trait Foo<Bar, Baz, Quux>\n-{}\n+pub mod Bar {\n+  #[rustc_on_unimplemented = \"test error `{Self}` with `{Bar}` `{Baz}` `{Quux}` in `{Foo}`\"]\n+  pub trait Foo<Bar, Baz, Quux> {}\n+}\n+\n+use Bar::Foo;\n \n fn foobar<U: Clone, T: Foo<u8, U, u32>>() -> T {\n     panic!()", "previous_filename": "src/test/compile-fail/on-unimplemented/on-trait.rs"}, {"sha": "84986c1ecfdd326ff0e2f9452236a81fb138a5a1", "filename": "src/test/ui/on-unimplemented/on-trait.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr?ref=1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3", "patch": "@@ -0,0 +1,20 @@\n+error[E0277]: the trait bound `std::option::Option<std::vec::Vec<u8>>: MyFromIterator<&u8>` is not satisfied\n+  --> $DIR/on-trait.rs:37:30\n+   |\n+37 |     let y: Option<Vec<u8>> = collect(x.iter()); // this should give approximately the same error for x.iter().collect()\n+   |                              ^^^^^^^ a collection of type `std::option::Option<std::vec::Vec<u8>>` cannot be built from an iterator over elements of type `&u8`\n+   |\n+   = help: the trait `MyFromIterator<&u8>` is not implemented for `std::option::Option<std::vec::Vec<u8>>`\n+   = note: required by `collect`\n+\n+error[E0277]: the trait bound `std::string::String: Bar::Foo<u8, _, u32>` is not satisfied\n+  --> $DIR/on-trait.rs:42:21\n+   |\n+42 |     let x: String = foobar(); //~ ERROR\n+   |                     ^^^^^^ test error `std::string::String` with `u8` `_` `u32` in `Bar::Foo`\n+   |\n+   = help: the trait `Bar::Foo<u8, _, u32>` is not implemented for `std::string::String`\n+   = note: required by `foobar`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "5d30c2e982ef719e30a0894788cf32af3fa8bf4c", "filename": "src/test/ui/on-unimplemented/slice-index.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.rs?ref=1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3", "previous_filename": "src/test/compile-fail/on-unimplemented/slice-index.rs"}, {"sha": "68789f77f750cf7ef99ccf4253136ed3deb85c27", "filename": "src/test/ui/on-unimplemented/slice-index.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr?ref=1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3", "patch": "@@ -0,0 +1,20 @@\n+error[E0277]: the trait bound `i32: std::slice::SliceIndex<[i32]>` is not satisfied\n+  --> $DIR/slice-index.rs:21:5\n+   |\n+21 |     x[1i32]; //~ ERROR E0277\n+   |     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |\n+   = help: the trait `std::slice::SliceIndex<[i32]>` is not implemented for `i32`\n+   = note: required because of the requirements on the impl of `std::ops::Index<i32>` for `[i32]`\n+\n+error[E0277]: the trait bound `std::ops::RangeTo<i32>: std::slice::SliceIndex<[i32]>` is not satisfied\n+  --> $DIR/slice-index.rs:24:5\n+   |\n+24 |     x[..1i32]; //~ ERROR E0277\n+   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |\n+   = help: the trait `std::slice::SliceIndex<[i32]>` is not implemented for `std::ops::RangeTo<i32>`\n+   = note: required because of the requirements on the impl of `std::ops::Index<std::ops::RangeTo<i32>>` for `[i32]`\n+\n+error: aborting due to 2 previous errors\n+"}]}