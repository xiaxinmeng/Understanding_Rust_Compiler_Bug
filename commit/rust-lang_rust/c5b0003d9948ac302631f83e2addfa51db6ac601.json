{"sha": "c5b0003d9948ac302631f83e2addfa51db6ac601", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1YjAwMDNkOTk0OGFjMzAyNjMxZjgzZTJhZGRmYTUxZGI2YWM2MDE=", "commit": {"author": {"name": "Kyle Strand", "email": "kyle.strand@rms.com", "date": "2019-08-28T15:41:45Z"}, "committer": {"name": "Kyle Strand", "email": "kyle.strand@rms.com", "date": "2019-08-28T15:41:45Z"}, "message": "Annotate functions taking extra args", "tree": {"sha": "dbcaa3aa3c3e395e699fee3dd444f002ad3bc6a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbcaa3aa3c3e395e699fee3dd444f002ad3bc6a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5b0003d9948ac302631f83e2addfa51db6ac601", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5b0003d9948ac302631f83e2addfa51db6ac601", "html_url": "https://github.com/rust-lang/rust/commit/c5b0003d9948ac302631f83e2addfa51db6ac601", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5b0003d9948ac302631f83e2addfa51db6ac601/comments", "author": null, "committer": null, "parents": [{"sha": "ba2a1fa898c4af38469f4861392defcfb1da00bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba2a1fa898c4af38469f4861392defcfb1da00bb", "html_url": "https://github.com/rust-lang/rust/commit/ba2a1fa898c4af38469f4861392defcfb1da00bb"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "142558a9f0aa9caf0f3e5000b4a8ffc2d63adda9", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5b0003d9948ac302631f83e2addfa51db6ac601/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5b0003d9948ac302631f83e2addfa51db6ac601/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=c5b0003d9948ac302631f83e2addfa51db6ac601", "patch": "@@ -220,8 +220,8 @@ impl f32 {\n     ///\n     /// assert!(f32::NAN.copysign(1.0).is_nan());\n     /// ```\n-    #[inline]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n+    #[inline]\n     #[stable(feature = \"copysign\", since = \"1.35.0\")]\n     pub fn copysign(self, sign: f32) -> f32 {\n         unsafe { intrinsics::copysignf32(self, sign) }\n@@ -247,6 +247,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn mul_add(self, a: f32, b: f32) -> f32 {\n@@ -270,6 +271,7 @@ impl f32 {\n     /// assert_eq!(a.div_euclid(-b), -1.0); // 7.0 >= -4.0 * -1.0\n     /// assert_eq!((-a).div_euclid(-b), 2.0); // -7.0 >= -4.0 * 2.0\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[inline]\n     #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n     pub fn div_euclid(self, rhs: f32) -> f32 {\n@@ -303,6 +305,7 @@ impl f32 {\n     /// // limitation due to round-off error\n     /// assert!((-std::f32::EPSILON).rem_euclid(3.0) != 0.0);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[inline]\n     #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n     pub fn rem_euclid(self, rhs: f32) -> f32 {\n@@ -329,6 +332,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn powi(self, n: i32) -> f32 {\n@@ -347,6 +351,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn powf(self, n: f32) -> f32 {\n@@ -478,6 +483,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn log(self, base: f32) -> f32 { self.ln() / base.ln() }\n@@ -550,6 +556,7 @@ impl f32 {\n     /// assert!(abs_difference_x <= f32::EPSILON);\n     /// assert!(abs_difference_y <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     #[rustc_deprecated(since = \"1.10.0\",\n@@ -601,6 +608,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn hypot(self, other: f32) -> f32 {\n@@ -770,6 +778,7 @@ impl f32 {\n     /// assert!(abs_difference_1 <= f32::EPSILON);\n     /// assert!(abs_difference_2 <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn atan2(self, other: f32) -> f32 {\n@@ -1006,6 +1015,7 @@ impl f32 {\n     /// assert!((2.0f32).clamp(-2.0, 1.0) == 1.0);\n     /// assert!((std::f32::NAN).clamp(-2.0, 1.0).is_nan());\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[unstable(feature = \"clamp\", issue = \"44095\")]\n     #[inline]\n     pub fn clamp(self, min: f32, max: f32) -> f32 {"}, {"sha": "d46cef149f14ca4a85fa5824f9244197c4bcfd37", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c5b0003d9948ac302631f83e2addfa51db6ac601/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5b0003d9948ac302631f83e2addfa51db6ac601/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=c5b0003d9948ac302631f83e2addfa51db6ac601", "patch": "@@ -198,9 +198,9 @@ impl f64 {\n     ///\n     /// assert!(f64::NAN.copysign(1.0).is_nan());\n     /// ```\n-    #[inline]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"copysign\", since = \"1.35.0\")]\n+    #[inline]\n     pub fn copysign(self, sign: f64) -> f64 {\n         unsafe { intrinsics::copysignf64(self, sign) }\n     }\n@@ -223,6 +223,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn mul_add(self, a: f64, b: f64) -> f64 {\n@@ -246,6 +247,7 @@ impl f64 {\n     /// assert_eq!(a.div_euclid(-b), -1.0); // 7.0 >= -4.0 * -1.0\n     /// assert_eq!((-a).div_euclid(-b), 2.0); // -7.0 >= -4.0 * 2.0\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[inline]\n     #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n     pub fn div_euclid(self, rhs: f64) -> f64 {\n@@ -279,6 +281,7 @@ impl f64 {\n     /// // limitation due to round-off error\n     /// assert!((-std::f64::EPSILON).rem_euclid(3.0) != 0.0);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[inline]\n     #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n     pub fn rem_euclid(self, rhs: f64) -> f64 {\n@@ -302,6 +305,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn powi(self, n: i32) -> f64 {\n@@ -318,6 +322,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn powf(self, n: f64) -> f64 {\n@@ -427,6 +432,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn log(self, base: f64) -> f64 { self.ln() / base.ln() }\n@@ -491,6 +497,7 @@ impl f64 {\n     /// assert!(abs_difference_x < 1e-10);\n     /// assert!(abs_difference_y < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     #[rustc_deprecated(since = \"1.10.0\",\n@@ -538,6 +545,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn hypot(self, other: f64) -> f64 {\n@@ -697,6 +705,7 @@ impl f64 {\n     /// assert!(abs_difference_1 < 1e-10);\n     /// assert!(abs_difference_2 < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn atan2(self, other: f64) -> f64 {"}]}