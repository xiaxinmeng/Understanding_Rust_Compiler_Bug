{"sha": "e5655418244cac9b3be0ef1b83aab1f8b00fe548", "node_id": "C_kwDOAAsO6NoAKGU1NjU1NDE4MjQ0Y2FjOWIzYmUwZWYxYjgzYWFiMWY4YjAwZmU1NDg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-14T08:35:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-14T08:35:32Z"}, "message": "Rollup merge of #98042 - DrMeepster:winfred_std_changes, r=ChrisDenton\n\nFix compat_fn option method on miri\n\nThis change is required to make `WaitOnAddress` work with rust-lang/miri#2231", "tree": {"sha": "9bd731ad633dd071eec984426acb6e1876446b60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bd731ad633dd071eec984426acb6e1876446b60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5655418244cac9b3be0ef1b83aab1f8b00fe548", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiqEhUCRBK7hj4Ov3rIwAAilwIAJOUUKMR2w5CGb3G3dv4jL3Q\nAp/5c3EfGfg49MsenDYjTsxPDkN/nB4CGcfH5XPViHZB6Ons5hcPbMUYfW+te1tf\nO07Q3KJBcpsOpcnrR8TmhW5XgFV2HsHyvrowhQdIu08FrtfydnNSLG53ryXqfgCa\nxDNVNApMn8lz/wWk+dKA/ikbG0iB7bul2ZY2+Gld51NcSQiYvUkmozw5+MZilHTV\nNDd54MhiLDa5LZKrt8bLmscWNbSrL5aWkVpBGDNUfaOR0ZNagMhJSAccGBQviX2F\n9aK+zF2gYQJCZaCjT2t+p6M1pZlDUQMrz2/1fudi4mTnPgfLd7hDAw73k8tgS+o=\n=LXlZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 9bd731ad633dd071eec984426acb6e1876446b60\nparent d8333a7b59c7b1308955bbd5a37ceabf86ec7dea\nparent 5470a389214381917ff7215c5fe700e9045fb838\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1655195732 +0200\ncommitter GitHub <noreply@github.com> 1655195732 +0200\n\nRollup merge of #98042 - DrMeepster:winfred_std_changes, r=ChrisDenton\n\nFix compat_fn option method on miri\n\nThis change is required to make `WaitOnAddress` work with rust-lang/miri#2231\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5655418244cac9b3be0ef1b83aab1f8b00fe548", "html_url": "https://github.com/rust-lang/rust/commit/e5655418244cac9b3be0ef1b83aab1f8b00fe548", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5655418244cac9b3be0ef1b83aab1f8b00fe548/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8333a7b59c7b1308955bbd5a37ceabf86ec7dea", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8333a7b59c7b1308955bbd5a37ceabf86ec7dea", "html_url": "https://github.com/rust-lang/rust/commit/d8333a7b59c7b1308955bbd5a37ceabf86ec7dea"}, {"sha": "5470a389214381917ff7215c5fe700e9045fb838", "url": "https://api.github.com/repos/rust-lang/rust/commits/5470a389214381917ff7215c5fe700e9045fb838", "html_url": "https://github.com/rust-lang/rust/commit/5470a389214381917ff7215c5fe700e9045fb838"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "ded97bb7eaaeda398f4e48764c57739016909148", "filename": "library/std/src/sys/windows/compat.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e5655418244cac9b3be0ef1b83aab1f8b00fe548/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5655418244cac9b3be0ef1b83aab1f8b00fe548/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs?ref=e5655418244cac9b3be0ef1b83aab1f8b00fe548", "patch": "@@ -102,21 +102,23 @@ macro_rules! compat_fn {\n             }\n \n             #[allow(dead_code)]\n+            #[inline(always)]\n             pub fn option() -> Option<F> {\n-                unsafe { PTR }\n+                unsafe {\n+                    if cfg!(miri) {\n+                        // Miri does not run `init`, so we just call `get_f` each time.\n+                        get_f()\n+                    } else {\n+                        PTR\n+                    }\n+                }\n             }\n \n             #[allow(dead_code)]\n             pub unsafe fn call($($argname: $argtype),*) -> $rettype {\n-                if let Some(ptr) = PTR {\n+                if let Some(ptr) = option() {\n                     return ptr($($argname),*);\n                 }\n-                if cfg!(miri) {\n-                    // Miri does not run `init`, so we just call `get_f` each time.\n-                    if let Some(ptr) = get_f() {\n-                        return ptr($($argname),*);\n-                    }\n-                }\n                 $fallback_body\n             }\n         }"}]}