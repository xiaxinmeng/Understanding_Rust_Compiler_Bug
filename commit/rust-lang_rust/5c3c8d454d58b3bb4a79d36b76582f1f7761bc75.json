{"sha": "5c3c8d454d58b3bb4a79d36b76582f1f7761bc75", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjM2M4ZDQ1NGQ1OGIzYmI0YTc5ZDM2Yjc2NTgyZjFmNzc2MWJjNzU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-03T00:47:21Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-03T02:10:24Z"}, "message": "rt: Do all signalling while holding a lock\n\nThis will matter once the scheduler is changed to not wake up on a timer", "tree": {"sha": "895bd975518bbb0cc64c391e992572aa47508c8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/895bd975518bbb0cc64c391e992572aa47508c8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c3c8d454d58b3bb4a79d36b76582f1f7761bc75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c3c8d454d58b3bb4a79d36b76582f1f7761bc75", "html_url": "https://github.com/rust-lang/rust/commit/5c3c8d454d58b3bb4a79d36b76582f1f7761bc75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c3c8d454d58b3bb4a79d36b76582f1f7761bc75/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5449b886d34c1ddbba60986d56d6896543a6b87f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5449b886d34c1ddbba60986d56d6896543a6b87f", "html_url": "https://github.com/rust-lang/rust/commit/5449b886d34c1ddbba60986d56d6896543a6b87f"}], "stats": {"total": 14, "additions": 5, "deletions": 9}, "files": [{"sha": "a52c2d48eed649d65e3be1254c1b9fe5c2535bc9", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c3c8d454d58b3bb4a79d36b76582f1f7761bc75/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5c3c8d454d58b3bb4a79d36b76582f1f7761bc75/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=5c3c8d454d58b3bb4a79d36b76582f1f7761bc75", "patch": "@@ -191,7 +191,9 @@ rust_kernel::release_task_id(rust_task_id id) {\n \n void rust_kernel::wakeup_schedulers() {\n     for(size_t i = 0; i < num_threads; ++i) {\n-        threads[i]->lock.signal_all();\n+        rust_scheduler *sched = threads[i];\n+        scoped_lock with(sched->lock);\n+        sched->lock.signal_all();\n     }\n }\n "}, {"sha": "a22b3ebc47a1b21eae0001f49a34e617e676c33c", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5c3c8d454d58b3bb4a79d36b76582f1f7761bc75/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5c3c8d454d58b3bb4a79d36b76582f1f7761bc75/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=5c3c8d454d58b3bb4a79d36b76582f1f7761bc75", "patch": "@@ -394,7 +394,6 @@ rust_task::start(spawn_fn spawnee_fn,\n void rust_task::start()\n {\n     transition(&sched->newborn_tasks, &sched->running_tasks);\n-    sched->lock.signal();\n }\n \n // Only run this on the rust stack\n@@ -429,8 +428,6 @@ rust_task::kill() {\n     // Unblock the task so it can unwind.\n     unblock();\n \n-    sched->lock.signal();\n-\n     LOG(this, task, \"preparing to unwind task: 0x%\" PRIxPTR, this);\n     // run_on_resume(rust_unwind_glue);\n }\n@@ -551,6 +548,7 @@ rust_task::transition(rust_task_list *src, rust_task_list *dst) {\n     src->remove(this);\n     dst->append(this);\n     state = dst;\n+    sched->lock.signal();\n     if(unlock)\n         sched->lock.unlock();\n }\n@@ -578,20 +576,16 @@ rust_task::wakeup(rust_cond *from) {\n                         (uintptr_t) cond, (uintptr_t) from);\n     A(sched, cond == from, \"Cannot wake up blocked task on wrong condition.\");\n \n-    transition(&sched->blocked_tasks, &sched->running_tasks);\n-    I(sched, cond == from);\n     cond = NULL;\n     cond_name = \"none\";\n-\n-    sched->lock.signal();\n+    transition(&sched->blocked_tasks, &sched->running_tasks);\n }\n \n void\n rust_task::die() {\n     I(sched, !lock.lock_held_by_current_thread());\n     scoped_lock with(lock);\n     transition(&sched->running_tasks, &sched->dead_tasks);\n-    sched->lock.signal();\n }\n \n void"}]}