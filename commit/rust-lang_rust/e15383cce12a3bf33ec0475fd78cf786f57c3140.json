{"sha": "e15383cce12a3bf33ec0475fd78cf786f57c3140", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNTM4M2NjZTEyYTNiZjMzZWMwNDc1ZmQ3OGNmNzg2ZjU3YzMxNDA=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-28T12:51:37Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-05-01T12:48:14Z"}, "message": "Move the DepNode construction to librustc_query_system.", "tree": {"sha": "859ba2f752eda44f83e98c3ee7b1f5994f26588f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/859ba2f752eda44f83e98c3ee7b1f5994f26588f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e15383cce12a3bf33ec0475fd78cf786f57c3140", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e15383cce12a3bf33ec0475fd78cf786f57c3140", "html_url": "https://github.com/rust-lang/rust/commit/e15383cce12a3bf33ec0475fd78cf786f57c3140", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e15383cce12a3bf33ec0475fd78cf786f57c3140/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f3e96d6589fad610107fa05ba80fc708965561b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f3e96d6589fad610107fa05ba80fc708965561b", "html_url": "https://github.com/rust-lang/rust/commit/8f3e96d6589fad610107fa05ba80fc708965561b"}], "stats": {"total": 82, "additions": 46, "deletions": 36}, "files": [{"sha": "330379008801057ffd765b411d3219ceb080ed0a", "filename": "src/librustc_middle/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e15383cce12a3bf33ec0475fd78cf786f57c3140/src%2Flibrustc_middle%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15383cce12a3bf33ec0475fd78cf786f57c3140/src%2Flibrustc_middle%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fdep_graph%2Fdep_node.rs?ref=e15383cce12a3bf33ec0475fd78cf786f57c3140", "patch": "@@ -183,31 +183,10 @@ macro_rules! define_dep_nodes {\n                     // tuple args\n                     $({\n                         erase!($tuple_arg_ty);\n-                        let hash = DepNodeParams::to_fingerprint(&arg, _tcx);\n-                        let dep_node = DepNode {\n-                            kind: DepKind::$variant,\n-                            hash\n-                        };\n-\n-                        #[cfg(debug_assertions)]\n-                        {\n-                            if !dep_node.kind.can_reconstruct_query_key() &&\n-                            (_tcx.sess.opts.debugging_opts.incremental_info ||\n-                                _tcx.sess.opts.debugging_opts.query_dep_graph)\n-                            {\n-                                _tcx.dep_graph.register_dep_node_debug_str(dep_node, || {\n-                                    arg.to_debug_str(_tcx)\n-                                });\n-                            }\n-                        }\n-\n-                        return dep_node;\n+                        return DepNode::construct(_tcx, DepKind::$variant, &arg)\n                     })*\n \n-                    DepNode {\n-                        kind: DepKind::$variant,\n-                        hash: Fingerprint::ZERO,\n-                    }\n+                    return DepNode::construct(_tcx, DepKind::$variant, &())\n                 }\n             )*\n         }"}, {"sha": "207c6d0fbff0fd83f00ac6777f74a8e08b14ea57", "filename": "src/librustc_middle/dep_graph/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e15383cce12a3bf33ec0475fd78cf786f57c3140/src%2Flibrustc_middle%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15383cce12a3bf33ec0475fd78cf786f57c3140/src%2Flibrustc_middle%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fdep_graph%2Fmod.rs?ref=e15383cce12a3bf33ec0475fd78cf786f57c3140", "patch": "@@ -98,6 +98,10 @@ impl<'tcx> DepContext for TyCtxt<'tcx> {\n     fn debug_dep_tasks(&self) -> bool {\n         self.sess.opts.debugging_opts.dep_tasks\n     }\n+    fn debug_dep_node(&self) -> bool {\n+        self.sess.opts.debugging_opts.incremental_info\n+            || self.sess.opts.debugging_opts.query_dep_graph\n+    }\n \n     fn try_force_from_dep_node(&self, dep_node: &DepNode) -> bool {\n         // FIXME: This match is just a workaround for incremental bugs and should"}, {"sha": "105b0f8f2cf3af7a9faa7897e0673f7db3ad7bc4", "filename": "src/librustc_middle/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e15383cce12a3bf33ec0475fd78cf786f57c3140/src%2Flibrustc_middle%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15383cce12a3bf33ec0475fd78cf786f57c3140/src%2Flibrustc_middle%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fmod.rs?ref=e15383cce12a3bf33ec0475fd78cf786f57c3140", "patch": "@@ -1,4 +1,4 @@\n-use crate::dep_graph::{self, DepConstructor, DepNode, DepNodeParams};\n+use crate::dep_graph::{self, DepNode, DepNodeParams};\n use crate::hir::exports::Export;\n use crate::hir::map;\n use crate::infer::canonical::{self, Canonical};"}, {"sha": "d6d4335e9388d7bdaf653b2ea0a0f210225f7edd", "filename": "src/librustc_middle/ty/query/plumbing.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e15383cce12a3bf33ec0475fd78cf786f57c3140/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15383cce12a3bf33ec0475fd78cf786f57c3140/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs?ref=e15383cce12a3bf33ec0475fd78cf786f57c3140", "patch": "@@ -348,12 +348,6 @@ macro_rules! define_queries_inner {\n                 &tcx.queries.$name\n             }\n \n-            #[allow(unused)]\n-            #[inline(always)]\n-            fn to_dep_node(tcx: TyCtxt<$tcx>, key: &Self::Key) -> DepNode {\n-                DepConstructor::$node(tcx, *key)\n-            }\n-\n             #[inline]\n             fn compute(tcx: TyCtxt<'tcx>, key: Self::Key) -> Self::Value {\n                 let provider = tcx.queries.providers.get(key.query_crate())"}, {"sha": "36343365ab6c44d1686189fd403b9babb50a9f70", "filename": "src/librustc_query_system/dep_graph/dep_node.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e15383cce12a3bf33ec0475fd78cf786f57c3140/src%2Flibrustc_query_system%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15383cce12a3bf33ec0475fd78cf786f57c3140/src%2Flibrustc_query_system%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fdep_graph%2Fdep_node.rs?ref=e15383cce12a3bf33ec0475fd78cf786f57c3140", "patch": "@@ -64,6 +64,24 @@ impl<K: DepKind> DepNode<K> {\n         debug_assert!(!kind.has_params());\n         DepNode { kind, hash: Fingerprint::ZERO }\n     }\n+\n+    pub fn construct<Ctxt, Key>(tcx: Ctxt, kind: K, arg: &Key) -> DepNode<K>\n+    where\n+        Ctxt: crate::query::QueryContext<DepKind = K>,\n+        Key: DepNodeParams<Ctxt>,\n+    {\n+        let hash = arg.to_fingerprint(tcx);\n+        let dep_node = DepNode { kind, hash };\n+\n+        #[cfg(debug_assertions)]\n+        {\n+            if !kind.can_reconstruct_query_key() && tcx.debug_dep_node() {\n+                tcx.dep_graph().register_dep_node_debug_str(dep_node, || arg.to_debug_str(tcx));\n+            }\n+        }\n+\n+        return dep_node;\n+    }\n }\n \n impl<K: DepKind> fmt::Debug for DepNode<K> {\n@@ -120,6 +138,12 @@ where\n     }\n }\n \n+impl<Ctxt: DepContext> DepNodeParams<Ctxt> for () {\n+    fn to_fingerprint(&self, _: Ctxt) -> Fingerprint {\n+        Fingerprint::ZERO\n+    }\n+}\n+\n /// A \"work product\" corresponds to a `.o` (or other) file that we\n /// save in between runs. These IDs do not have a `DefId` but rather\n /// some independent path or string that persists between runs without"}, {"sha": "f571e902211cd1996640f60bb02bb2c07b27caf9", "filename": "src/librustc_query_system/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e15383cce12a3bf33ec0475fd78cf786f57c3140/src%2Flibrustc_query_system%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15383cce12a3bf33ec0475fd78cf786f57c3140/src%2Flibrustc_query_system%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fdep_graph%2Fmod.rs?ref=e15383cce12a3bf33ec0475fd78cf786f57c3140", "patch": "@@ -28,6 +28,7 @@ pub trait DepContext: Copy {\n     fn create_stable_hashing_context(&self) -> Self::StableHashingContext;\n \n     fn debug_dep_tasks(&self) -> bool;\n+    fn debug_dep_node(&self) -> bool;\n \n     /// Try to force a dep node to execute and see if it's green.\n     fn try_force_from_dep_node(&self, dep_node: &DepNode<Self::DepKind>) -> bool;"}, {"sha": "f031b54346fa9b9eba98f91444985d3ff89f6155", "filename": "src/librustc_query_system/query/config.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e15383cce12a3bf33ec0475fd78cf786f57c3140/src%2Flibrustc_query_system%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15383cce12a3bf33ec0475fd78cf786f57c3140/src%2Flibrustc_query_system%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fquery%2Fconfig.rs?ref=e15383cce12a3bf33ec0475fd78cf786f57c3140", "patch": "@@ -28,7 +28,6 @@ pub(crate) struct QueryVtable<CTX: QueryContext, K, V> {\n     pub anon: bool,\n     pub dep_kind: CTX::DepKind,\n     pub eval_always: bool,\n-    pub to_dep_node: fn(CTX, &K) -> DepNode<CTX::DepKind>,\n \n     // Don't use this method to compute query results, instead use the methods on TyCtxt\n     pub compute: fn(CTX, K) -> V,\n@@ -40,8 +39,11 @@ pub(crate) struct QueryVtable<CTX: QueryContext, K, V> {\n }\n \n impl<CTX: QueryContext, K, V> QueryVtable<CTX, K, V> {\n-    pub(crate) fn to_dep_node(&self, tcx: CTX, key: &K) -> DepNode<CTX::DepKind> {\n-        (self.to_dep_node)(tcx, key)\n+    pub(crate) fn to_dep_node(&self, tcx: CTX, key: &K) -> DepNode<CTX::DepKind>\n+    where\n+        K: crate::dep_graph::DepNodeParams<CTX>,\n+    {\n+        DepNode::construct(tcx, self.dep_kind, key)\n     }\n \n     pub(crate) fn compute(&self, tcx: CTX, key: K) -> V {\n@@ -79,7 +81,12 @@ pub trait QueryAccessors<CTX: QueryContext>: QueryConfig<CTX> {\n     // Don't use this method to access query results, instead use the methods on TyCtxt\n     fn query_state<'a>(tcx: CTX) -> &'a QueryState<CTX, Self::Cache>;\n \n-    fn to_dep_node(tcx: CTX, key: &Self::Key) -> DepNode<CTX::DepKind>;\n+    fn to_dep_node(tcx: CTX, key: &Self::Key) -> DepNode<CTX::DepKind>\n+    where\n+        Self::Key: crate::dep_graph::DepNodeParams<CTX>,\n+    {\n+        DepNode::construct(tcx, Self::DEP_KIND, key)\n+    }\n \n     // Don't use this method to compute query results, instead use the methods on TyCtxt\n     fn compute(tcx: CTX, key: Self::Key) -> Self::Value;\n@@ -117,7 +124,6 @@ where\n     const VTABLE: QueryVtable<CTX, Q::Key, Q::Value> = QueryVtable {\n         anon: Q::ANON,\n         dep_kind: Q::DEP_KIND,\n-        to_dep_node: Q::to_dep_node,\n         eval_always: Q::EVAL_ALWAYS,\n         compute: Q::compute,\n         hash_result: Q::hash_result,"}, {"sha": "d94f6bc300b2d092d6d9ace799916d2172e3bf00", "filename": "src/librustc_query_system/query/plumbing.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e15383cce12a3bf33ec0475fd78cf786f57c3140/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15383cce12a3bf33ec0475fd78cf786f57c3140/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs?ref=e15383cce12a3bf33ec0475fd78cf786f57c3140", "patch": "@@ -392,7 +392,7 @@ fn try_execute_query<CTX, C>(\n ) -> C::Stored\n where\n     C: QueryCache,\n-    C::Key: Eq + Clone + Debug,\n+    C::Key: Eq + Clone + Debug + crate::dep_graph::DepNodeParams<CTX>,\n     C::Stored: Clone,\n     CTX: QueryContext,\n {\n@@ -616,6 +616,7 @@ where\n pub fn get_query<Q, CTX>(tcx: CTX, span: Span, key: Q::Key) -> Q::Stored\n where\n     Q: QueryDescription<CTX>,\n+    Q::Key: crate::dep_graph::DepNodeParams<CTX>,\n     CTX: QueryContext,\n {\n     debug!(\"ty::query::get_query<{}>(key={:?}, span={:?})\", Q::NAME, key, span);\n@@ -642,6 +643,7 @@ where\n pub fn ensure_query<Q, CTX>(tcx: CTX, key: Q::Key)\n where\n     Q: QueryDescription<CTX>,\n+    Q::Key: crate::dep_graph::DepNodeParams<CTX>,\n     CTX: QueryContext,\n {\n     if Q::EVAL_ALWAYS {"}]}