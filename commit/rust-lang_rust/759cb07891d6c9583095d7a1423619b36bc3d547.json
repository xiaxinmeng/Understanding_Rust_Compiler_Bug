{"sha": "759cb07891d6c9583095d7a1423619b36bc3d547", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1OWNiMDc4OTFkNmM5NTgzMDk1ZDdhMTQyMzYxOWIzNmJjM2Q1NDc=", "commit": {"author": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-05-31T18:04:18Z"}, "committer": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-05-31T18:26:38Z"}, "message": "hir_ty: use correct receiver_ty in method resolution", "tree": {"sha": "c0811e9bd561f44418da38a6ff4ca263ddcb3f3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0811e9bd561f44418da38a6ff4ca263ddcb3f3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/759cb07891d6c9583095d7a1423619b36bc3d547", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/759cb07891d6c9583095d7a1423619b36bc3d547", "html_url": "https://github.com/rust-lang/rust/commit/759cb07891d6c9583095d7a1423619b36bc3d547", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/759cb07891d6c9583095d7a1423619b36bc3d547/comments", "author": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c1d8ca63510bb719fd91bbf38692e45b19c04d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c1d8ca63510bb719fd91bbf38692e45b19c04d6", "html_url": "https://github.com/rust-lang/rust/commit/7c1d8ca63510bb719fd91bbf38692e45b19c04d6"}], "stats": {"total": 94, "additions": 82, "deletions": 12}, "files": [{"sha": "f73bf43b2154a1e3e07b26b0e477cc24232d60ad", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/759cb07891d6c9583095d7a1423619b36bc3d547/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759cb07891d6c9583095d7a1423619b36bc3d547/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=759cb07891d6c9583095d7a1423619b36bc3d547", "patch": "@@ -890,7 +890,7 @@ impl<'a> InferenceContext<'a> {\n                 method_name,\n             )\n         });\n-        let (derefed_receiver_ty, method_ty, substs) = match resolved {\n+        let (receiver_ty, method_ty, substs) = match resolved {\n             Some((ty, func)) => {\n                 let ty = canonicalized_receiver.decanonicalize_ty(ty);\n                 let generics = generics(self.db.upcast(), func.into());\n@@ -916,16 +916,7 @@ impl<'a> InferenceContext<'a> {\n             }\n             None => (self.err_ty(), Vec::new(), self.err_ty()),\n         };\n-        // Apply autoref so the below unification works correctly\n-        // FIXME: return correct autorefs from lookup_method\n-        let actual_receiver_ty = match self.resolve_ty_shallow(&expected_receiver_ty).as_reference()\n-        {\n-            Some((_, lifetime, mutability)) => {\n-                TyKind::Ref(mutability, lifetime, derefed_receiver_ty).intern(&Interner)\n-            }\n-            _ => derefed_receiver_ty,\n-        };\n-        self.unify(&expected_receiver_ty, &actual_receiver_ty);\n+        self.unify(&expected_receiver_ty, &receiver_ty);\n \n         self.check_call_arguments(args, &param_tys);\n         self.normalize_associated_types_in(ret_ty)"}, {"sha": "af6b6cda7092fcd130471750949a1a3ab60b29ed", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/759cb07891d6c9583095d7a1423619b36bc3d547/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759cb07891d6c9583095d7a1423619b36bc3d547/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=759cb07891d6c9583095d7a1423619b36bc3d547", "patch": "@@ -721,7 +721,8 @@ fn iterate_inherent_methods(\n                     cov_mark::hit!(impl_self_type_match_without_receiver);\n                     continue;\n                 }\n-                if callback(&self_ty.value, item) {\n+                let receiver_ty = receiver_ty.map(|x| &x.value).unwrap_or(&self_ty.value);\n+                if callback(receiver_ty, item) {\n                     return true;\n                 }\n             }"}, {"sha": "ac312981df0d650cfeb8e84e14c71952ea97d575", "filename": "crates/hir_ty/src/tests/simple.rs", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/759cb07891d6c9583095d7a1423619b36bc3d547/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759cb07891d6c9583095d7a1423619b36bc3d547/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=759cb07891d6c9583095d7a1423619b36bc3d547", "patch": "@@ -2634,3 +2634,81 @@ fn f() {\n         \"#]],\n     )\n }\n+\n+#[test]\n+fn infer_boxed_self_receiver() {\n+    check_infer(\n+        r#\"\n+#[lang = \"deref\"]\n+pub trait Deref {\n+    type Target;\n+    fn deref(&self) -> &Self::Target;\n+}\n+\n+struct Box<T>(T);\n+\n+impl<T> Deref for Box<T> {\n+    type Target = T;\n+    fn deref(&self) -> &Self::Target;\n+}\n+\n+struct Foo<T>(T);\n+\n+impl<T> Foo<T> {\n+    fn get_inner<'a>(self: &'a Box<Self>) -> &'a T {}\n+\n+    fn get_self<'a>(self: &'a Box<Self>) -> &'a Self {}\n+\n+    fn into_inner(self: Box<Self>) -> Self {}\n+}\n+\n+fn main() {\n+    let boxed = Box(Foo(0_i32));\n+\n+    let bad1 = boxed.get_inner();\n+    let good1 = Foo::get_inner(&boxed);\n+\n+    let bad2 = boxed.get_self();\n+    let good2 = Foo::get_self(&boxed);\n+\n+    let inner = boxed.into_inner();\n+}\n+        \"#,\n+        expect![[r#\"\n+            67..71 'self': &Self\n+            175..179 'self': &Box<T>\n+            259..263 'self': &Box<Foo<T>>\n+            289..291 '{}': ()\n+            313..317 'self': &Box<Foo<T>>\n+            346..348 '{}': ()\n+            368..372 'self': Box<Foo<T>>\n+            393..395 '{}': ()\n+            409..630 '{     ...r(); }': ()\n+            419..424 'boxed': Box<Foo<i32>>\n+            427..430 'Box': Box<Foo<i32>>(Foo<i32>) -> Box<Foo<i32>>\n+            427..442 'Box(Foo(0_i32))': Box<Foo<i32>>\n+            431..434 'Foo': Foo<i32>(i32) -> Foo<i32>\n+            431..441 'Foo(0_i32)': Foo<i32>\n+            435..440 '0_i32': i32\n+            453..457 'bad1': &i32\n+            460..465 'boxed': Box<Foo<i32>>\n+            460..477 'boxed....nner()': &i32\n+            487..492 'good1': &i32\n+            495..509 'Foo::get_inner': fn get_inner<i32>(&Box<Foo<i32>>) -> &i32\n+            495..517 'Foo::g...boxed)': &i32\n+            510..516 '&boxed': &Box<Foo<i32>>\n+            511..516 'boxed': Box<Foo<i32>>\n+            528..532 'bad2': &Foo<i32>\n+            535..540 'boxed': Box<Foo<i32>>\n+            535..551 'boxed....self()': &Foo<i32>\n+            561..566 'good2': &Foo<i32>\n+            569..582 'Foo::get_self': fn get_self<i32>(&Box<Foo<i32>>) -> &Foo<i32>\n+            569..590 'Foo::g...boxed)': &Foo<i32>\n+            583..589 '&boxed': &Box<Foo<i32>>\n+            584..589 'boxed': Box<Foo<i32>>\n+            601..606 'inner': Foo<i32>\n+            609..614 'boxed': Box<Foo<i32>>\n+            609..627 'boxed....nner()': Foo<i32>\n+        \"#]],\n+    );\n+}"}]}