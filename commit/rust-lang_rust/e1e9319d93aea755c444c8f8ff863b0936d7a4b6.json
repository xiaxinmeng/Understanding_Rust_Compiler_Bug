{"sha": "e1e9319d93aea755c444c8f8ff863b0936d7a4b6", "node_id": "C_kwDOAAsO6NoAKGUxZTkzMTlkOTNhZWE3NTVjNDQ0YzhmOGZmODYzYjA5MzZkN2E0YjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-14T16:23:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-14T16:23:10Z"}, "message": "Auto merge of #89882 - matthiaskrgr:rollup-1dh7pz8, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #89390 (Fix incorrect Box::pin suggestion)\n - #89433 (Fix ctrl-c causing reads of stdin to return empty on Windows.)\n - #89823 (Switch order of terms to prevent overflow)\n - #89865 (Allow static linking LLVM with ThinLTO)\n - #89873 (Add missing word to `FromStr` trait documentation)\n - #89878 (Fix missing remaining compiler specific cfg information)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "1b4c2feb07a917fc7d0340f992dfc42c27ed1536", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b4c2feb07a917fc7d0340f992dfc42c27ed1536"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1e9319d93aea755c444c8f8ff863b0936d7a4b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1e9319d93aea755c444c8f8ff863b0936d7a4b6", "html_url": "https://github.com/rust-lang/rust/commit/e1e9319d93aea755c444c8f8ff863b0936d7a4b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00", "html_url": "https://github.com/rust-lang/rust/commit/0a56eb11fafdd3c9d86c100b6b90505f5f9fdb00"}, {"sha": "d6eff5ac4c3dcb3eb5c83a1a2a6ea8437450f25b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6eff5ac4c3dcb3eb5c83a1a2a6ea8437450f25b", "html_url": "https://github.com/rust-lang/rust/commit/d6eff5ac4c3dcb3eb5c83a1a2a6ea8437450f25b"}], "stats": {"total": 169, "additions": 120, "deletions": 49}, "files": [{"sha": "db8a6d962049540f9e257c8e50b1e6a136697dfe", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=e1e9319d93aea755c444c8f8ff863b0936d7a4b6", "patch": "@@ -558,7 +558,7 @@ impl<'me, 'tcx> BoundVarReplacer<'me, 'tcx> {\n     fn universe_for(&mut self, debruijn: ty::DebruijnIndex) -> ty::UniverseIndex {\n         let infcx = self.infcx;\n         let index =\n-            self.universe_indices.len() - debruijn.as_usize() + self.current_index.as_usize() - 1;\n+            self.universe_indices.len() + self.current_index.as_usize() - debruijn.as_usize() - 1;\n         let universe = self.universe_indices[index].unwrap_or_else(|| {\n             for i in self.universe_indices.iter_mut().take(index + 1) {\n                 *i = i.or_else(|| Some(infcx.create_next_universe()))"}, {"sha": "a87318ff34e6dc0a20d1e8718e6d262350a15c94", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=e1e9319d93aea755c444c8f8ff863b0936d7a4b6", "patch": "@@ -42,7 +42,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{Coercion, InferOk, InferResult};\n-use rustc_infer::traits::Obligation;\n+use rustc_infer::traits::{Obligation, TraitEngine, TraitEngineExt};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability, PointerCast,\n@@ -146,6 +146,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             .and_then(|InferOk { value: ty, obligations }| success(f(ty), ty, obligations))\n     }\n \n+    #[instrument(skip(self))]\n     fn coerce(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> CoerceResult<'tcx> {\n         // First, remove any resolved type variables (at the top level, at least):\n         let a = self.shallow_resolve(a);\n@@ -933,14 +934,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     /// Same as `try_coerce()`, but without side-effects.\n+    ///\n+    /// Returns false if the coercion creates any obligations that result in\n+    /// errors.\n     pub fn can_coerce(&self, expr_ty: Ty<'tcx>, target: Ty<'tcx>) -> bool {\n         let source = self.resolve_vars_with_obligations(expr_ty);\n-        debug!(\"coercion::can({:?} -> {:?})\", source, target);\n+        debug!(\"coercion::can_with_predicates({:?} -> {:?})\", source, target);\n \n         let cause = self.cause(rustc_span::DUMMY_SP, ObligationCauseCode::ExprAssignable);\n         // We don't ever need two-phase here since we throw out the result of the coercion\n         let coerce = Coerce::new(self, cause, AllowTwoPhase::No);\n-        self.probe(|_| coerce.coerce(source, target)).is_ok()\n+        self.probe(|_| {\n+            let ok = match coerce.coerce(source, target) {\n+                Ok(ok) => ok,\n+                _ => return false,\n+            };\n+            let mut fcx = traits::FulfillmentContext::new_in_snapshot();\n+            fcx.register_predicate_obligations(self, ok.obligations);\n+            fcx.select_where_possible(&self).is_ok()\n+        })\n     }\n \n     /// Given a type and a target type, this function will calculate and return"}, {"sha": "339c46616a590b944c01528381c3b174a1b299f5", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=e1e9319d93aea755c444c8f8ff863b0936d7a4b6", "patch": "@@ -341,7 +341,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 for (sp, label) in spans_and_labels {\n                     multi_span.push_span_label(sp, label);\n                 }\n-                err.span_note(multi_span, \"closures can only be coerced to `fn` types if they do not capture any variables\");\n+                err.span_note(\n+                    multi_span,\n+                    \"closures can only be coerced to `fn` types if they do not capture any variables\"\n+                );\n             }\n         }\n     }\n@@ -361,15 +364,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return false;\n         }\n         let pin_did = self.tcx.lang_items().pin_type();\n+        // This guards the `unwrap` and `mk_box` below.\n+        if pin_did.is_none() || self.tcx.lang_items().owned_box().is_none() {\n+            return false;\n+        }\n         match expected.kind() {\n-            ty::Adt(def, _) if Some(def.did) != pin_did => return false,\n-            // This guards the `unwrap` and `mk_box` below.\n-            _ if pin_did.is_none() || self.tcx.lang_items().owned_box().is_none() => return false,\n-            _ => {}\n+            ty::Adt(def, _) if Some(def.did) == pin_did => (),\n+            _ => return false,\n         }\n-        let boxed_found = self.tcx.mk_box(found);\n-        let new_found = self.tcx.mk_lang_item(boxed_found, LangItem::Pin).unwrap();\n-        if self.can_coerce(new_found, expected) {\n+        let box_found = self.tcx.mk_box(found);\n+        let pin_box_found = self.tcx.mk_lang_item(box_found, LangItem::Pin).unwrap();\n+        let pin_found = self.tcx.mk_lang_item(found, LangItem::Pin).unwrap();\n+        if self.can_coerce(pin_box_found, expected) {\n+            debug!(\"can coerce {:?} to {:?}, suggesting Box::pin\", pin_box_found, expected);\n             match found.kind() {\n                 ty::Adt(def, _) if def.is_box() => {\n                     err.help(\"use `Box::pin`\");\n@@ -381,11 +388,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             (expr.span.shrink_to_lo(), \"Box::pin(\".to_string()),\n                             (expr.span.shrink_to_hi(), \")\".to_string()),\n                         ],\n-                        Applicability::MachineApplicable,\n+                        Applicability::MaybeIncorrect,\n                     );\n                 }\n             }\n             true\n+        } else if self.can_coerce(pin_found, expected) {\n+            match found.kind() {\n+                ty::Adt(def, _) if def.is_box() => {\n+                    err.help(\"use `Box::pin`\");\n+                    true\n+                }\n+                _ => false,\n+            }\n         } else {\n             false\n         }"}, {"sha": "e86c41b1ff88727a17b9c315e1b55d1802d84e09", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=e1e9319d93aea755c444c8f8ff863b0936d7a4b6", "patch": "@@ -74,6 +74,7 @@\n         not(any(test, bootstrap)),\n         any(not(feature = \"miri-test-libstd\"), test, doctest),\n         no_global_oom_handling,\n+        not(no_global_oom_handling),\n         target_has_atomic = \"ptr\"\n     ))\n )]"}, {"sha": "e225776bc647fe6d11e7d4e0f19e49d747303963", "filename": "library/core/src/str/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs?ref=e1e9319d93aea755c444c8f8ff863b0936d7a4b6", "patch": "@@ -536,7 +536,7 @@ pub trait FromStr: Sized {\n     ///\n     /// If parsing succeeds, return the value inside [`Ok`], otherwise\n     /// when the string is ill-formatted return an error specific to the\n-    /// inside [`Err`]. The error type is specific to implementation of the trait.\n+    /// inside [`Err`]. The error type is specific to the implementation of the trait.\n     ///\n     /// # Examples\n     ///"}, {"sha": "1d2d26b8f004699ee26939e4d469100c62525f7c", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=e1e9319d93aea755c444c8f8ff863b0936d7a4b6", "patch": "@@ -195,7 +195,15 @@\n     test(no_crate_inject, attr(deny(warnings))),\n     test(attr(allow(dead_code, deprecated, unused_variables, unused_mut)))\n )]\n-#![cfg_attr(not(bootstrap), doc(cfg_hide(not(test), not(any(test, bootstrap)))))]\n+#![cfg_attr(\n+    not(bootstrap),\n+    doc(cfg_hide(\n+        not(test),\n+        not(any(test, bootstrap)),\n+        no_global_oom_handling,\n+        not(no_global_oom_handling)\n+    ))\n+)]\n // Don't link to std. We are std.\n #![no_std]\n #![warn(deprecated_in_future)]"}, {"sha": "a4fe5f67f699a22600520bf22e76ffe4fb7b74fb", "filename": "library/std/src/sys/windows/stdio.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs?ref=e1e9319d93aea755c444c8f8ff863b0936d7a4b6", "patch": "@@ -291,15 +291,25 @@ fn read_u16s(handle: c::HANDLE, buf: &mut [u16]) -> io::Result<usize> {\n     };\n \n     let mut amount = 0;\n-    cvt(unsafe {\n-        c::ReadConsoleW(\n-            handle,\n-            buf.as_mut_ptr() as c::LPVOID,\n-            buf.len() as u32,\n-            &mut amount,\n-            &mut input_control as c::PCONSOLE_READCONSOLE_CONTROL,\n-        )\n-    })?;\n+    loop {\n+        cvt(unsafe {\n+            c::SetLastError(0);\n+            c::ReadConsoleW(\n+                handle,\n+                buf.as_mut_ptr() as c::LPVOID,\n+                buf.len() as u32,\n+                &mut amount,\n+                &mut input_control as c::PCONSOLE_READCONSOLE_CONTROL,\n+            )\n+        })?;\n+\n+        // ReadConsoleW returns success with ERROR_OPERATION_ABORTED for Ctrl-C or Ctrl-Break.\n+        // Explicitly check for that case here and try again.\n+        if amount == 0 && unsafe { c::GetLastError() } == c::ERROR_OPERATION_ABORTED {\n+            continue;\n+        }\n+        break;\n+    }\n \n     if amount > 0 && buf[amount as usize - 1] == CTRL_Z {\n         amount -= 1;"}, {"sha": "e658d958d0a26970895091a507d8fb7010f8545d", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=e1e9319d93aea755c444c8f8ff863b0936d7a4b6", "patch": "@@ -825,15 +825,10 @@ impl Config {\n                 };\n             }\n \n-            if config.llvm_thin_lto {\n-                // If we're building with ThinLTO on, we want to link to LLVM\n-                // shared, to avoid re-doing ThinLTO (which happens in the link\n-                // step) with each stage.\n-                assert_ne!(\n-                    llvm.link_shared,\n-                    Some(false),\n-                    \"setting link-shared=false is incompatible with thin-lto=true\"\n-                );\n+            if config.llvm_thin_lto && llvm.link_shared.is_none() {\n+                // If we're building with ThinLTO on, by default we want to link\n+                // to LLVM shared, to avoid re-doing ThinLTO (which happens in\n+                // the link step) with each stage.\n                 config.llvm_link_shared = true;\n             }\n         }"}, {"sha": "81f309eae087c9755687a1dc426efa5c6e535528", "filename": "src/test/ui/cross/cross-borrow-trait.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.stderr?ref=e1e9319d93aea755c444c8f8ff863b0936d7a4b6", "patch": "@@ -2,10 +2,8 @@ error[E0308]: mismatched types\n   --> $DIR/cross-borrow-trait.rs:10:26\n    |\n LL |     let _y: &dyn Trait = x;\n-   |             ----------   ^\n-   |             |            |\n-   |             |            expected `&dyn Trait`, found struct `Box`\n-   |             |            help: consider borrowing here: `&x`\n+   |             ----------   ^ expected `&dyn Trait`, found struct `Box`\n+   |             |\n    |             expected due to this\n    |\n    = note: expected reference `&dyn Trait`"}, {"sha": "01f862ed516e9d9ef25735436c67c6e8891cc65b", "filename": "src/test/ui/dst/dst-bad-coercions.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coercions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coercions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coercions.stderr?ref=e1e9319d93aea755c444c8f8ff863b0936d7a4b6", "patch": "@@ -13,10 +13,8 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coercions.rs:15:21\n    |\n LL |     let y: &dyn T = x;\n-   |            ------   ^\n-   |            |        |\n-   |            |        expected `&dyn T`, found *-ptr\n-   |            |        help: consider borrowing here: `&x`\n+   |            ------   ^ expected `&dyn T`, found *-ptr\n+   |            |\n    |            expected due to this\n    |\n    = note: expected reference `&dyn T`\n@@ -37,10 +35,8 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coercions.rs:20:21\n    |\n LL |     let y: &dyn T = x;\n-   |            ------   ^\n-   |            |        |\n-   |            |        expected `&dyn T`, found *-ptr\n-   |            |        help: consider borrowing here: `&x`\n+   |            ------   ^ expected `&dyn T`, found *-ptr\n+   |            |\n    |            expected due to this\n    |\n    = note: expected reference `&dyn T`"}, {"sha": "d49819fcb14cfe9832d853e6c37e2a5b2dbd0a55", "filename": "src/test/ui/suggestions/box-future-wrong-output.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/src%2Ftest%2Fui%2Fsuggestions%2Fbox-future-wrong-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/src%2Ftest%2Fui%2Fsuggestions%2Fbox-future-wrong-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fbox-future-wrong-output.rs?ref=e1e9319d93aea755c444c8f8ff863b0936d7a4b6", "patch": "@@ -0,0 +1,22 @@\n+// Issue #72117\n+// edition:2018\n+\n+use core::future::Future;\n+use core::pin::Pin;\n+\n+pub type BoxFuture<'a, T> = Pin<Box<dyn Future<Output = T> + Send + 'a>>;\n+\n+impl<T: ?Sized> FutureExt for T where T: Future {}\n+trait FutureExt: Future {\n+    fn boxed<'a>(self) -> BoxFuture<'a, Self::Output>\n+    where\n+        Self: Sized + Send + 'a,\n+    {\n+        Box::pin(self)\n+    }\n+}\n+\n+fn main() {\n+    let _: BoxFuture<'static, bool> = async {}.boxed();\n+    //~^ ERROR: mismatched types\n+}"}, {"sha": "e0c57af25b3d2c4cc52fb52eaa74c037bfef3e64", "filename": "src/test/ui/suggestions/box-future-wrong-output.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/src%2Ftest%2Fui%2Fsuggestions%2Fbox-future-wrong-output.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/src%2Ftest%2Fui%2Fsuggestions%2Fbox-future-wrong-output.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fbox-future-wrong-output.stderr?ref=e1e9319d93aea755c444c8f8ff863b0936d7a4b6", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/box-future-wrong-output.rs:20:39\n+   |\n+LL |     let _: BoxFuture<'static, bool> = async {}.boxed();\n+   |            ------------------------   ^^^^^^^^^^^^^^^^ expected `bool`, found `()`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected struct `Pin<Box<(dyn Future<Output = bool> + Send + 'static)>>`\n+              found struct `Pin<Box<dyn Future<Output = ()> + Send>>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "89a36e89b0acf513c92f6588b5e4323aae4b4d79", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs?ref=e1e9319d93aea755c444c8f8ff863b0936d7a4b6", "patch": "@@ -11,13 +11,13 @@ fn foo<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32>\n     x //~ ERROR mismatched types\n }\n \n-// This case is still subpar:\n-// `Pin::new(x)`: store this in the heap by calling `Box::new`: `Box::new(x)`\n-// Should suggest changing the code from `Pin::new` to `Box::pin`.\n fn bar<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n     Box::new(x) //~ ERROR mismatched types\n }\n \n+// This case is still subpar:\n+// `Pin::new(x)`: store this in the heap by calling `Box::new`: `Box::new(x)`\n+// Should suggest changing the code from `Pin::new` to `Box::pin`.\n fn baz<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n     Pin::new(x) //~ ERROR mismatched types\n     //~^ ERROR E0277"}, {"sha": "f0af37e0cbe8af7e47f7b276e0ceb804c04a9dcf", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1e9319d93aea755c444c8f8ff863b0936d7a4b6/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=e1e9319d93aea755c444c8f8ff863b0936d7a4b6", "patch": "@@ -15,7 +15,7 @@ LL |     Box::pin(x)\n    |     +++++++++ +\n \n error[E0308]: mismatched types\n-  --> $DIR/expected-boxed-future-isnt-pinned.rs:18:5\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:15:5\n    |\n LL | fn bar<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n    |                                                         ----------------------- expected `Pin<Box<(dyn Future<Output = i32> + Send + 'static)>>` because of return type"}]}