{"sha": "5a0de2f828db7c06624f55f69877197f9b26c753", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMGRlMmY4MjhkYjdjMDY2MjRmNTVmNjk4NzcxOTdmOWIyNmM3NTM=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-08-09T14:43:24Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-08-09T14:43:24Z"}, "message": "Improve safety comments for usize, fix some other unclear parts", "tree": {"sha": "b0936291ff4af8255f8622d48e184da39db6a63b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0936291ff4af8255f8622d48e184da39db6a63b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a0de2f828db7c06624f55f69877197f9b26c753", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a0de2f828db7c06624f55f69877197f9b26c753", "html_url": "https://github.com/rust-lang/rust/commit/5a0de2f828db7c06624f55f69877197f9b26c753", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a0de2f828db7c06624f55f69877197f9b26c753/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a709fe7021218b613aa7fdce7794df5a8ff0da5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a709fe7021218b613aa7fdce7794df5a8ff0da5", "html_url": "https://github.com/rust-lang/rust/commit/3a709fe7021218b613aa7fdce7794df5a8ff0da5"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "f028d68baeaee799b50fecbeab714e58942f9060", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5a0de2f828db7c06624f55f69877197f9b26c753/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0de2f828db7c06624f55f69877197f9b26c753/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=5a0de2f828db7c06624f55f69877197f9b26c753", "patch": "@@ -561,11 +561,15 @@ impl<T> [T] {\n             while i + chunk - 1 < ln / 2 {\n                 // SAFETY: An unaligned usize can be read from `i` if `i + 1 < ln`\n                 // (and obviously `i < ln`), because each element is 1 byte and\n-                // we're reading 2.\n+                // we're reading `chunk`.\n+                //\n+                // Since we checked for the `x86` and `x86_64` target before\n+                // getting here so `chunk` is at most 8 bytes.\n                 //\n                 // `i + chunk - 1 < ln / 2` # while condition\n-                // `i + 2 - 1 < ln / 2`\n-                // `i + 1 < ln / 2`\n+                // `i + 8 - 1 < ln / 2`\n+                // `i + 7 < ln / 2`\n+                // so obviously `i + 1 < ln / 2`\n                 //\n                 // Since it's less than the length divided by 2, then it must be\n                 // in bounds.\n@@ -656,8 +660,9 @@ impl<T> [T] {\n         let ptr = self.as_ptr();\n         // SAFETY: There are several things here:\n         //\n-        // `ptr` has been checked for nullity before being passed to `NonNull` via\n-        // `new_unchecked`.\n+        // `ptr` has been obtained by `self.as_ptr()` where `self` is a valid\n+        // reference thus it is non-NUL and safe to use and pass to\n+        // `NonNull::new_unchecked` .\n         //\n         // Adding `self.len()` to the starting pointer gives a pointer\n         // at the end of `self`. `end` will never be dereferenced, only checked\n@@ -699,8 +704,9 @@ impl<T> [T] {\n         let ptr = self.as_mut_ptr();\n         // SAFETY: There are several things here:\n         //\n-        // `ptr` has been checked for nullity before being passed to `NonNull` via\n-        // `new_unchecked`.\n+        // `ptr` has been obtained by `self.as_ptr()` where `self` is a valid\n+        // reference thus it is non-NUL and safe to use and pass to\n+        // `NonNull::new_unchecked` .\n         //\n         // Adding `self.len()` to the starting pointer gives a pointer\n         // at the end of `self`. `end` will never be dereferenced, only checked\n@@ -2296,8 +2302,8 @@ impl<T> [T] {\n         let k = self.len() - mid;\n         let p = self.as_mut_ptr();\n \n-        // SAFETY: `[mid; mid+k]` corresponds to the entire\n-        // `self` slice, thus is valid for reads and writes.\n+        // SAFETY: The range `[p.add(mid) - mid, p.add(mid) + k)` is trivially\n+        // valid for reading and writing, as required by `ptr_rotate`.\n         unsafe {\n             rotate::ptr_rotate(mid, p.add(mid), k);\n         }\n@@ -2339,8 +2345,8 @@ impl<T> [T] {\n         let mid = self.len() - k;\n         let p = self.as_mut_ptr();\n \n-        // SAFETY: `[mid; mid+k]` corresponds to the entire\n-        // `self` slice, thus is valid for reads and writes.\n+        // SAFETY: The range `[p.add(mid) - mid, p.add(mid) + k)` is trivially\n+        // valid for reading and writing, as required by `ptr_rotate`.\n         unsafe {\n             rotate::ptr_rotate(mid, p.add(mid), k);\n         }"}]}