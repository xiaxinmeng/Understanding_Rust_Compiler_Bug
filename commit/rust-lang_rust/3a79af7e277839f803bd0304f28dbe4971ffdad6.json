{"sha": "3a79af7e277839f803bd0304f28dbe4971ffdad6", "node_id": "C_kwDOAAsO6NoAKDNhNzlhZjdlMjc3ODM5ZjgwM2JkMDMwNGYyOGRiZTQ5NzFmZmRhZDY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-14T22:41:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-14T22:41:06Z"}, "message": "Merge #10491\n\n10491: Support nested type on replace if let with match r=k-nasa a=k-nasa\n\n## Why\r\n\r\nclose: https://github.com/rust-analyzer/rust-analyzer/issues/8690\r\n\r\nNow, Replacing if-let with match cant't output exhaustive patterns code.\r\nThis was because the `else` conversion used specific types (ex. Option, Result) instead of wildcards.\r\n\r\nI thought it was more of a problem to generate non-exhaustive patterns than the benefits of using the concrete one.\r\n\r\nHow about using wildcards in `else`? \r\nIs this change policy acceptable?\r\n\r\n## What\r\n\r\n- using wildcards on `make_else_arm`\r\n- Change test cases\n\nCo-authored-by: k-nasa <htilcs1115@gmail.com>", "tree": {"sha": "457e5a6a94502727d645ee7987c807636041caef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/457e5a6a94502727d645ee7987c807636041caef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a79af7e277839f803bd0304f28dbe4971ffdad6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhaLICCRBK7hj4Ov3rIwAAC/EIAKXuzvrvq458cXvMTcEUC0hb\n2nqQl8qCHN7I8f+6elB87m6uIw0EiYB+m6tlX43Fude3keblbzgxigH4kUXye22s\n3XwjOao+qIVws1pjjSf5186xFYDlsoBWfnO0x+hDgIBujAdMH4e3vemMcnDO4haa\nXh5qg2PKByXRZXoNj5KGbpUTUqWsnB8GLD4pR6xPcvys8IUUCo1AKHp5CTcZf/h7\nVZy46m65dbwetIPFKah9QzWP6TPu7W6zVNChqptf27HHf8OPDqWsJbsUO6S4NJ8k\nmF88fffrqEUe3ggG8+Cp1zgxpzRNvAXgXqLuEbmdlEcvkNhkNW5Cdo+aTo6fIMQ=\n=KTnx\n-----END PGP SIGNATURE-----\n", "payload": "tree 457e5a6a94502727d645ee7987c807636041caef\nparent bfb8f73fb3f8a1a7fadfa31bda98a17549a91093\nparent bd9bab87ed72779c3bf407137928b75555f5d2a9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1634251266 +0000\ncommitter GitHub <noreply@github.com> 1634251266 +0000\n\nMerge #10491\n\n10491: Support nested type on replace if let with match r=k-nasa a=k-nasa\n\n## Why\r\n\r\nclose: https://github.com/rust-analyzer/rust-analyzer/issues/8690\r\n\r\nNow, Replacing if-let with match cant't output exhaustive patterns code.\r\nThis was because the `else` conversion used specific types (ex. Option, Result) instead of wildcards.\r\n\r\nI thought it was more of a problem to generate non-exhaustive patterns than the benefits of using the concrete one.\r\n\r\nHow about using wildcards in `else`? \r\nIs this change policy acceptable?\r\n\r\n## What\r\n\r\n- using wildcards on `make_else_arm`\r\n- Change test cases\n\nCo-authored-by: k-nasa <htilcs1115@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a79af7e277839f803bd0304f28dbe4971ffdad6", "html_url": "https://github.com/rust-lang/rust/commit/3a79af7e277839f803bd0304f28dbe4971ffdad6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a79af7e277839f803bd0304f28dbe4971ffdad6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfb8f73fb3f8a1a7fadfa31bda98a17549a91093", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfb8f73fb3f8a1a7fadfa31bda98a17549a91093", "html_url": "https://github.com/rust-lang/rust/commit/bfb8f73fb3f8a1a7fadfa31bda98a17549a91093"}, {"sha": "bd9bab87ed72779c3bf407137928b75555f5d2a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd9bab87ed72779c3bf407137928b75555f5d2a9", "html_url": "https://github.com/rust-lang/rust/commit/bd9bab87ed72779c3bf407137928b75555f5d2a9"}], "stats": {"total": 72, "additions": 71, "deletions": 1}, "files": [{"sha": "47d1fbe144a8836ef571aa52d4893d67ee8987e6", "filename": "crates/ide_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3a79af7e277839f803bd0304f28dbe4971ffdad6/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a79af7e277839f803bd0304f28dbe4971ffdad6/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=3a79af7e277839f803bd0304f28dbe4971ffdad6", "patch": "@@ -12,7 +12,7 @@ use syntax::{\n };\n \n use crate::{\n-    utils::{does_pat_match_variant, unwrap_trivial_block},\n+    utils::{does_nested_pattern, does_pat_match_variant, unwrap_trivial_block},\n     AssistContext, AssistId, AssistKind, Assists,\n };\n \n@@ -143,6 +143,8 @@ fn make_else_arm(\n             Some((it, pat)) => {\n                 if does_pat_match_variant(pat, &it.sad_pattern()) {\n                     it.happy_pattern_wildcard()\n+                } else if does_nested_pattern(pat) {\n+                    make::wildcard_pat().into()\n                 } else {\n                     it.sad_pattern()\n                 }\n@@ -574,6 +576,33 @@ fn main() {\n         )\n     }\n \n+    #[test]\n+    fn nested_type() {\n+        check_assist(\n+            replace_if_let_with_match,\n+            r#\"\n+//- minicore: result\n+fn foo(x: Result<i32, ()>) {\n+    let bar: Result<_, ()> = Ok(Some(1));\n+    $0if let Ok(Some(_)) = bar {\n+        ()\n+    } else {\n+        ()\n+    }\n+}\n+\"#,\n+            r#\"\n+fn foo(x: Result<i32, ()>) {\n+    let bar: Result<_, ()> = Ok(Some(1));\n+    match bar {\n+        Ok(Some(_)) => (),\n+        _ => (),\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_replace_match_with_if_let_unwraps_simple_expressions() {\n         check_assist("}, {"sha": "6866186d34209ee94ba5c3f07ac7bd4cf03dce03", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/3a79af7e277839f803bd0304f28dbe4971ffdad6/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a79af7e277839f803bd0304f28dbe4971ffdad6/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=3a79af7e277839f803bd0304f28dbe4971ffdad6", "patch": "@@ -285,6 +285,47 @@ pub(crate) fn does_pat_match_variant(pat: &ast::Pat, var: &ast::Pat) -> bool {\n     pat_head == var_head\n }\n \n+pub(crate) fn does_nested_pattern(pat: &ast::Pat) -> bool {\n+    let depth = calc_depth(pat, 0);\n+\n+    if 1 < depth {\n+        return true;\n+    }\n+    false\n+}\n+\n+fn calc_depth(pat: &ast::Pat, depth: usize) -> usize {\n+    match pat {\n+        ast::Pat::IdentPat(_)\n+        | ast::Pat::BoxPat(_)\n+        | ast::Pat::RestPat(_)\n+        | ast::Pat::LiteralPat(_)\n+        | ast::Pat::MacroPat(_)\n+        | ast::Pat::OrPat(_)\n+        | ast::Pat::ParenPat(_)\n+        | ast::Pat::PathPat(_)\n+        | ast::Pat::WildcardPat(_)\n+        | ast::Pat::RangePat(_)\n+        | ast::Pat::RecordPat(_)\n+        | ast::Pat::RefPat(_)\n+        | ast::Pat::SlicePat(_)\n+        | ast::Pat::TuplePat(_)\n+        | ast::Pat::ConstBlockPat(_) => depth,\n+\n+        // FIXME: Other patterns may also be nested. Currently it simply supports only `TupleStructPat`\n+        ast::Pat::TupleStructPat(pat) => {\n+            let mut max_depth = depth;\n+            for p in pat.fields() {\n+                let d = calc_depth(&p, depth + 1);\n+                if d > max_depth {\n+                    max_depth = d\n+                }\n+            }\n+            max_depth\n+        }\n+    }\n+}\n+\n // Uses a syntax-driven approach to find any impl blocks for the struct that\n // exist within the module/file\n //"}]}