{"sha": "4971667f175e7e3d84b7a87f46633b3e069e48ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NzE2NjdmMTc1ZTdlM2Q4NGI3YTg3ZjQ2NjMzYjNlMDY5ZTQ4YmE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-21T23:11:01Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-21T23:11:01Z"}, "message": "review comments", "tree": {"sha": "8c3abdea1fb113083b2f92ae197bca6024b0f9bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c3abdea1fb113083b2f92ae197bca6024b0f9bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4971667f175e7e3d84b7a87f46633b3e069e48ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4971667f175e7e3d84b7a87f46633b3e069e48ba", "html_url": "https://github.com/rust-lang/rust/commit/4971667f175e7e3d84b7a87f46633b3e069e48ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4971667f175e7e3d84b7a87f46633b3e069e48ba/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c07d7814d2eb2cab14e5c57313e68880b60a14d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c07d7814d2eb2cab14e5c57313e68880b60a14d", "html_url": "https://github.com/rust-lang/rust/commit/8c07d7814d2eb2cab14e5c57313e68880b60a14d"}], "stats": {"total": 87, "additions": 36, "deletions": 51}, "files": [{"sha": "f80e527dfd9b70b131778f9f889d690984f690b6", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4971667f175e7e3d84b7a87f46633b3e069e48ba/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4971667f175e7e3d84b7a87f46633b3e069e48ba/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=4971667f175e7e3d84b7a87f46633b3e069e48ba", "patch": "@@ -515,20 +515,16 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn get_module(&self, module: DefId) -> (&'hir Mod, Span, HirId) {\n-        self.get_if_module(module).expect(\"not a module\")\n-    }\n-\n-    pub fn get_if_module(&self, module: DefId) -> Option<(&'hir Mod, Span, HirId)> {\n         let hir_id = self.as_local_hir_id(module).unwrap();\n         self.read(hir_id);\n         match self.find_entry(hir_id).unwrap().node {\n             Node::Item(&Item {\n                 span,\n                 node: ItemKind::Mod(ref m),\n                 ..\n-            }) => Some((m, span, hir_id)),\n-            Node::Crate => Some((&self.forest.krate.module, self.forest.krate.span, hir_id)),\n-            _ => None,\n+            }) => (m, span, hir_id),\n+            Node::Crate => (&self.forest.krate.module, self.forest.krate.span, hir_id),\n+            node => panic!(\"not a module: {:?}\", node),\n         }\n     }\n \n@@ -682,6 +678,16 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    /// Wether `hir_id` corresponds to a `mod` or a crate.\n+    pub fn is_hir_id_module(&self, hir_id: HirId) -> bool {\n+        match self.lookup(hir_id) {\n+            Some(Entry { node: Node::Item(Item { node: ItemKind::Mod(_), .. }), .. }) |\n+            Some(Entry { node: Node::Crate, .. }) => true,\n+            _ => false,\n+        }\n+    }\n+\n+\n     /// If there is some error when walking the parents (e.g., a node does not\n     /// have a parent in the map or a node can't be found), then we return the\n     /// last good `HirId` we found. Note that reaching the crate root (`id == 0`),"}, {"sha": "146058963b69dd67e549c6f01ae81dd587194ef6", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 21, "deletions": 33, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4971667f175e7e3d84b7a87f46633b3e069e48ba/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4971667f175e7e3d84b7a87f46633b3e069e48ba/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=4971667f175e7e3d84b7a87f46633b3e069e48ba", "patch": "@@ -509,44 +509,28 @@ impl EmbargoVisitor<'tcx> {\n     }\n \n     fn update_macro_reachable_mod(&mut self, reachable_mod: hir::HirId, defining_mod: DefId) {\n-        let set_vis = |this: &mut Self, hir_id: hir::HirId| {\n-            let item_def_id = this.tcx.hir().local_def_id(hir_id);\n-            if let Some(def_kind) = this.tcx.def_kind(item_def_id) {\n-                let item = this.tcx.hir().expect_item(hir_id);\n-                let vis = ty::Visibility::from_hir(&item.vis, hir_id, this.tcx);\n-                this.update_macro_reachable_def(hir_id, def_kind, vis, defining_mod);\n-            }\n-        };\n-\n         let module_def_id = self.tcx.hir().local_def_id(reachable_mod);\n-        if let Some((module, _, _)) = self.tcx.hir().get_if_module(module_def_id) {\n-            for item_id in &module.item_ids {\n-                let hir_id = item_id.id;\n-                set_vis(self, hir_id);\n+        let module = self.tcx.hir().get_module(module_def_id).0;\n+        for item_id in &module.item_ids {\n+            let hir_id = item_id.id;\n+            let item_def_id = self.tcx.hir().local_def_id(hir_id);\n+            if let Some(def_kind) = self.tcx.def_kind(item_def_id) {\n+                let item = self.tcx.hir().expect_item(hir_id);\n+                let vis = ty::Visibility::from_hir(&item.vis, hir_id, self.tcx);\n+                self.update_macro_reachable_def(hir_id, def_kind, vis, defining_mod);\n             }\n-            if let Some(exports) = self.tcx.module_exports(module_def_id) {\n-                for export in exports {\n-                    if export.vis.is_accessible_from(defining_mod, self.tcx) {\n-                        if let Res::Def(def_kind, def_id) = export.res {\n-                            let vis = def_id_visibility(self.tcx, def_id).0;\n-                            if let Some(hir_id) = self.tcx.hir().as_local_hir_id(def_id) {\n-                                self.update_macro_reachable_def(\n-                                    hir_id,\n-                                    def_kind,\n-                                    vis,\n-                                    defining_mod,\n-                                );\n-                            }\n+        }\n+        if let Some(exports) = self.tcx.module_exports(module_def_id) {\n+            for export in exports {\n+                if export.vis.is_accessible_from(defining_mod, self.tcx) {\n+                    if let Res::Def(def_kind, def_id) = export.res {\n+                        let vis = def_id_visibility(self.tcx, def_id).0;\n+                        if let Some(hir_id) = self.tcx.hir().as_local_hir_id(def_id) {\n+                            self.update_macro_reachable_def(hir_id, def_kind, vis, defining_mod);\n                         }\n                     }\n                 }\n             }\n-        } else if let Some(hir::Node::Item(hir::Item {\n-            hir_id,\n-            ..\n-        })) = self.tcx.hir().get_if_local(module_def_id) { // #63164\n-            // `macro` defined inside of an item is only visible inside of that item's scope.\n-            set_vis(self, *hir_id);\n         }\n     }\n \n@@ -898,10 +882,14 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             self.tcx.hir().local_def_id(md.hir_id)\n         ).unwrap();\n         let mut module_id = self.tcx.hir().as_local_hir_id(macro_module_def_id).unwrap();\n+        if !self.tcx.hir().is_hir_id_module(module_id) {\n+            // `module_id` doesn't correspond to a `mod`, return early (#63164).\n+            return;\n+        }\n         let level = if md.vis.node.is_pub() { self.get(module_id) } else { None };\n         let new_level = self.update(md.hir_id, level);\n         if new_level.is_none() {\n-            return\n+            return;\n         }\n \n         loop {"}, {"sha": "d354fe4a7dbfa509d462c96712cf2b5375992d9f", "filename": "src/test/ui/macros/macro-in-fn.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4971667f175e7e3d84b7a87f46633b3e069e48ba/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4971667f175e7e3d84b7a87f46633b3e069e48ba/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-fn.rs?ref=4971667f175e7e3d84b7a87f46633b3e069e48ba", "patch": "@@ -1,9 +1,8 @@\n+// run-pass\n #![feature(decl_macro)]\n \n pub fn moo() {\n     pub macro ABC() {{}}\n }\n \n-fn main() {\n-    ABC!(); //~ ERROR cannot find macro `ABC!` in this scope\n-}\n+fn main() {}"}, {"sha": "0c35fe65aa2852a929ea020c568a19d9d6c489ed", "filename": "src/test/ui/macros/macro-in-fn.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8c07d7814d2eb2cab14e5c57313e68880b60a14d/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c07d7814d2eb2cab14e5c57313e68880b60a14d/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-fn.stderr?ref=8c07d7814d2eb2cab14e5c57313e68880b60a14d", "patch": "@@ -1,8 +0,0 @@\n-error: cannot find macro `ABC!` in this scope\n-  --> $DIR/macro-in-fn.rs:8:5\n-   |\n-LL |     ABC!();\n-   |     ^^^\n-\n-error: aborting due to previous error\n-"}]}