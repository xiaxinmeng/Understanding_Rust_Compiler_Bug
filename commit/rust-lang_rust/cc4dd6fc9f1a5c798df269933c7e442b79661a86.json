{"sha": "cc4dd6fc9f1a5c798df269933c7e442b79661a86", "node_id": "C_kwDOAAsO6NoAKGNjNGRkNmZjOWYxYTVjNzk4ZGYyNjk5MzNjN2U0NDJiNzk2NjFhODY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-09T11:05:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-09T11:05:42Z"}, "message": "Auto merge of #100089 - JakobDegen:no-invalidate-visitor, r=tmiasko\n\nAdd option to `mir::MutVisitor` to not invalidate CFG.\n\nThis also applies that option to some uses of the visitor. I had considered a design more similar to #100087 in which we detect if the CFG needs to be invalidated, but that is more difficult with the visitor API and so I decided against it. Another alternative to this design is to offer an API for \"saving\" and \"restoring\" CFG caches across arbitrary code. Such an API is more general, and so we may eventually want it anyway, but it seems overkill for this use case.\n\nr? `@tmiasko`", "tree": {"sha": "a840aa633ef8e3443f86d21e239432139e2a4f3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a840aa633ef8e3443f86d21e239432139e2a4f3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc4dd6fc9f1a5c798df269933c7e442b79661a86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc4dd6fc9f1a5c798df269933c7e442b79661a86", "html_url": "https://github.com/rust-lang/rust/commit/cc4dd6fc9f1a5c798df269933c7e442b79661a86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc4dd6fc9f1a5c798df269933c7e442b79661a86/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5af97e8b0b9649ed14b0b4528a610ff841b6365e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5af97e8b0b9649ed14b0b4528a610ff841b6365e", "html_url": "https://github.com/rust-lang/rust/commit/5af97e8b0b9649ed14b0b4528a610ff841b6365e"}, {"sha": "7547084ff673dcfdb2c6bcf7dc7a81190513ed40", "url": "https://api.github.com/repos/rust-lang/rust/commits/7547084ff673dcfdb2c6bcf7dc7a81190513ed40", "html_url": "https://github.com/rust-lang/rust/commit/7547084ff673dcfdb2c6bcf7dc7a81190513ed40"}], "stats": {"total": 173, "additions": 101, "deletions": 72}, "files": [{"sha": "4a85defb1ed84518d20c48c301375235c2ba93c8", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 92, "deletions": 63, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/cc4dd6fc9f1a5c798df269933c7e442b79661a86/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc4dd6fc9f1a5c798df269933c7e442b79661a86/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=cc4dd6fc9f1a5c798df269933c7e442b79661a86", "patch": "@@ -80,6 +80,8 @@ macro_rules! make_mir_visitor {\n                 self.super_body(body);\n             }\n \n+            extra_body_methods!($($mutability)?);\n+\n             fn visit_basic_block_data(\n                 &mut self,\n                 block: BasicBlock,\n@@ -287,63 +289,7 @@ macro_rules! make_mir_visitor {\n                 &mut self,\n                 body: &$($mutability)? Body<'tcx>,\n             ) {\n-                let span = body.span;\n-                if let Some(gen) = &$($mutability)? body.generator {\n-                    if let Some(yield_ty) = $(& $mutability)? gen.yield_ty {\n-                        self.visit_ty(\n-                            yield_ty,\n-                            TyContext::YieldTy(SourceInfo::outermost(span))\n-                        );\n-                    }\n-                }\n-\n-                // for best performance, we want to use an iterator rather\n-                // than a for-loop, to avoid calling `body::Body::invalidate` for\n-                // each basic block.\n-                #[allow(unused_macro_rules)]\n-                macro_rules! basic_blocks {\n-                    (mut) => (body.basic_blocks_mut().iter_enumerated_mut());\n-                    () => (body.basic_blocks().iter_enumerated());\n-                }\n-                for (bb, data) in basic_blocks!($($mutability)?) {\n-                    self.visit_basic_block_data(bb, data);\n-                }\n-\n-                for scope in &$($mutability)? body.source_scopes {\n-                    self.visit_source_scope_data(scope);\n-                }\n-\n-                self.visit_ty(\n-                    $(& $mutability)? body.return_ty(),\n-                    TyContext::ReturnTy(SourceInfo::outermost(body.span))\n-                );\n-\n-                for local in body.local_decls.indices() {\n-                    self.visit_local_decl(local, & $($mutability)? body.local_decls[local]);\n-                }\n-\n-                #[allow(unused_macro_rules)]\n-                macro_rules! type_annotations {\n-                    (mut) => (body.user_type_annotations.iter_enumerated_mut());\n-                    () => (body.user_type_annotations.iter_enumerated());\n-                }\n-\n-                for (index, annotation) in type_annotations!($($mutability)?) {\n-                    self.visit_user_type_annotation(\n-                        index, annotation\n-                    );\n-                }\n-\n-                for var_debug_info in &$($mutability)? body.var_debug_info {\n-                    self.visit_var_debug_info(var_debug_info);\n-                }\n-\n-                self.visit_span($(& $mutability)? body.span);\n-\n-                for const_ in &$($mutability)? body.required_consts {\n-                    let location = START_BLOCK.start_location();\n-                    self.visit_constant(const_, location);\n-                }\n+                super_body!(self, body, $($mutability, true)?);\n             }\n \n             fn super_basic_block_data(&mut self,\n@@ -982,12 +928,7 @@ macro_rules! make_mir_visitor {\n                 body: &$($mutability)? Body<'tcx>,\n                 location: Location\n             ) {\n-                #[allow(unused_macro_rules)]\n-                macro_rules! basic_blocks {\n-                    (mut) => (body.basic_blocks_mut());\n-                    () => (body.basic_blocks());\n-                }\n-                let basic_block = & $($mutability)? basic_blocks!($($mutability)?)[location.block];\n+                let basic_block = & $($mutability)? basic_blocks!(body, $($mutability, true)?)[location.block];\n                 if basic_block.statements.len() == location.statement_index {\n                     if let Some(ref $($mutability)? terminator) = basic_block.terminator {\n                         self.visit_terminator(terminator, location)\n@@ -1002,6 +943,94 @@ macro_rules! make_mir_visitor {\n     }\n }\n \n+macro_rules! basic_blocks {\n+    ($body:ident, mut, true) => {\n+        $body.basic_blocks.as_mut()\n+    };\n+    ($body:ident, mut, false) => {\n+        $body.basic_blocks.as_mut_preserves_cfg()\n+    };\n+    ($body:ident,) => {\n+        $body.basic_blocks()\n+    };\n+}\n+\n+macro_rules! basic_blocks_iter {\n+    ($body:ident, mut, $invalidate:tt) => {\n+        basic_blocks!($body, mut, $invalidate).iter_enumerated_mut()\n+    };\n+    ($body:ident,) => {\n+        basic_blocks!($body,).iter_enumerated()\n+    };\n+}\n+\n+macro_rules! extra_body_methods {\n+    (mut) => {\n+        fn visit_body_preserves_cfg(&mut self, body: &mut Body<'tcx>) {\n+            self.super_body_preserves_cfg(body);\n+        }\n+\n+        fn super_body_preserves_cfg(&mut self, body: &mut Body<'tcx>) {\n+            super_body!(self, body, mut, false);\n+        }\n+    };\n+    () => {};\n+}\n+\n+macro_rules! super_body {\n+    ($self:ident, $body:ident, $($mutability:ident, $invalidate:tt)?) => {\n+        let span = $body.span;\n+        if let Some(gen) = &$($mutability)? $body.generator {\n+            if let Some(yield_ty) = $(& $mutability)? gen.yield_ty {\n+                $self.visit_ty(\n+                    yield_ty,\n+                    TyContext::YieldTy(SourceInfo::outermost(span))\n+                );\n+            }\n+        }\n+\n+        for (bb, data) in basic_blocks_iter!($body, $($mutability, $invalidate)?) {\n+            $self.visit_basic_block_data(bb, data);\n+        }\n+\n+        for scope in &$($mutability)? $body.source_scopes {\n+            $self.visit_source_scope_data(scope);\n+        }\n+\n+        $self.visit_ty(\n+            $(& $mutability)? $body.return_ty(),\n+            TyContext::ReturnTy(SourceInfo::outermost($body.span))\n+        );\n+\n+        for local in $body.local_decls.indices() {\n+            $self.visit_local_decl(local, & $($mutability)? $body.local_decls[local]);\n+        }\n+\n+        #[allow(unused_macro_rules)]\n+        macro_rules! type_annotations {\n+            (mut) => ($body.user_type_annotations.iter_enumerated_mut());\n+            () => ($body.user_type_annotations.iter_enumerated());\n+        }\n+\n+        for (index, annotation) in type_annotations!($($mutability)?) {\n+            $self.visit_user_type_annotation(\n+                index, annotation\n+            );\n+        }\n+\n+        for var_debug_info in &$($mutability)? $body.var_debug_info {\n+            $self.visit_var_debug_info(var_debug_info);\n+        }\n+\n+        $self.visit_span($(& $mutability)? $body.span);\n+\n+        for const_ in &$($mutability)? $body.required_consts {\n+            let location = START_BLOCK.start_location();\n+            $self.visit_constant(const_, location);\n+        }\n+    }\n+}\n+\n macro_rules! visit_place_fns {\n     (mut) => {\n         fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;"}, {"sha": "3378923c22c367c1a9396ab54e07d0ba3279e282", "filename": "compiler/rustc_mir_transform/src/cleanup_post_borrowck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc4dd6fc9f1a5c798df269933c7e442b79661a86/compiler%2Frustc_mir_transform%2Fsrc%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc4dd6fc9f1a5c798df269933c7e442b79661a86/compiler%2Frustc_mir_transform%2Fsrc%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcleanup_post_borrowck.rs?ref=cc4dd6fc9f1a5c798df269933c7e442b79661a86", "patch": "@@ -33,7 +33,7 @@ pub struct DeleteNonCodegenStatements<'tcx> {\n impl<'tcx> MirPass<'tcx> for CleanupNonCodegenStatements {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         let mut delete = DeleteNonCodegenStatements { tcx };\n-        delete.visit_body(body);\n+        delete.visit_body_preserves_cfg(body);\n         body.user_type_annotations.raw.clear();\n \n         for decl in &mut body.local_decls {"}, {"sha": "98016659a05f7bc268938bbfc0d7a66fc98ed218", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc4dd6fc9f1a5c798df269933c7e442b79661a86/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc4dd6fc9f1a5c798df269933c7e442b79661a86/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=cc4dd6fc9f1a5c798df269933c7e442b79661a86", "patch": "@@ -951,7 +951,7 @@ impl<'tcx> MutVisitor<'tcx> for ConstPropagator<'_, 'tcx> {\n     }\n \n     fn visit_body(&mut self, body: &mut Body<'tcx>) {\n-        for (bb, data) in body.basic_blocks_mut().iter_enumerated_mut() {\n+        for (bb, data) in body.basic_blocks.as_mut_preserves_cfg().iter_enumerated_mut() {\n             self.visit_basic_block_data(bb, data);\n         }\n     }"}, {"sha": "87d7b664015a9cc939309be93584b7a2af9dcd8e", "filename": "compiler/rustc_mir_transform/src/deref_separator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc4dd6fc9f1a5c798df269933c7e442b79661a86/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc4dd6fc9f1a5c798df269933c7e442b79661a86/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs?ref=cc4dd6fc9f1a5c798df269933c7e442b79661a86", "patch": "@@ -90,7 +90,7 @@ pub fn deref_finder<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     let patch = MirPatch::new(body);\n     let mut checker = DerefChecker { tcx, patcher: patch, local_decls: body.local_decls.clone() };\n \n-    for (bb, data) in body.basic_blocks_mut().iter_enumerated_mut() {\n+    for (bb, data) in body.basic_blocks.as_mut_preserves_cfg().iter_enumerated_mut() {\n         checker.visit_basic_block_data(bb, data);\n     }\n "}, {"sha": "76b4cdd2ecd3cce3f20e628d6e4fce10d185ff24", "filename": "compiler/rustc_mir_transform/src/elaborate_box_derefs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc4dd6fc9f1a5c798df269933c7e442b79661a86/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc4dd6fc9f1a5c798df269933c7e442b79661a86/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs?ref=cc4dd6fc9f1a5c798df269933c7e442b79661a86", "patch": "@@ -116,7 +116,7 @@ impl<'tcx> MirPass<'tcx> for ElaborateBoxDerefs {\n                 ElaborateBoxDerefVisitor { tcx, unique_did, nonnull_did, local_decls, patch };\n \n             for (block, BasicBlockData { statements, terminator, .. }) in\n-                body.basic_blocks.as_mut().iter_enumerated_mut()\n+                body.basic_blocks.as_mut_preserves_cfg().iter_enumerated_mut()\n             {\n                 let mut index = 0;\n                 for statement in statements {"}, {"sha": "42d732730ecccf0b38966919a1b7e16dd6512d20", "filename": "compiler/rustc_mir_transform/src/nrvo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc4dd6fc9f1a5c798df269933c7e442b79661a86/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc4dd6fc9f1a5c798df269933c7e442b79661a86/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs?ref=cc4dd6fc9f1a5c798df269933c7e442b79661a86", "patch": "@@ -53,10 +53,10 @@ impl<'tcx> MirPass<'tcx> for RenameReturnPlace {\n             def_id, returned_local\n         );\n \n-        RenameToReturnPlace { tcx, to_rename: returned_local }.visit_body(body);\n+        RenameToReturnPlace { tcx, to_rename: returned_local }.visit_body_preserves_cfg(body);\n \n         // Clean up the `NOP`s we inserted for statements made useless by our renaming.\n-        for block_data in body.basic_blocks_mut() {\n+        for block_data in body.basic_blocks.as_mut_preserves_cfg() {\n             block_data.statements.retain(|stmt| stmt.kind != mir::StatementKind::Nop);\n         }\n "}, {"sha": "abe6cb285f50591be8776c03c25319eada650ead", "filename": "compiler/rustc_mir_transform/src/reveal_all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc4dd6fc9f1a5c798df269933c7e442b79661a86/compiler%2Frustc_mir_transform%2Fsrc%2Freveal_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc4dd6fc9f1a5c798df269933c7e442b79661a86/compiler%2Frustc_mir_transform%2Fsrc%2Freveal_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Freveal_all.rs?ref=cc4dd6fc9f1a5c798df269933c7e442b79661a86", "patch": "@@ -19,7 +19,7 @@ impl<'tcx> MirPass<'tcx> for RevealAll {\n         }\n \n         let param_env = tcx.param_env_reveal_all_normalized(body.source.def_id());\n-        RevealAllVisitor { tcx, param_env }.visit_body(body);\n+        RevealAllVisitor { tcx, param_env }.visit_body_preserves_cfg(body);\n     }\n }\n "}, {"sha": "7a6ca917d0ffd5ca2aac703c6fd31a56967d6320", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc4dd6fc9f1a5c798df269933c7e442b79661a86/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc4dd6fc9f1a5c798df269933c7e442b79661a86/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=cc4dd6fc9f1a5c798df269933c7e442b79661a86", "patch": "@@ -412,7 +412,7 @@ pub fn simplify_locals<'tcx>(body: &mut Body<'tcx>, tcx: TyCtxt<'tcx>) {\n     if map.iter().any(Option::is_none) {\n         // Update references to all vars and tmps now\n         let mut updater = LocalUpdater { map, tcx };\n-        updater.visit_body(body);\n+        updater.visit_body_preserves_cfg(body);\n \n         body.local_decls.shrink_to_fit();\n     }\n@@ -548,7 +548,7 @@ fn remove_unused_definitions(used_locals: &mut UsedLocals, body: &mut Body<'_>)\n     while modified {\n         modified = false;\n \n-        for data in body.basic_blocks_mut() {\n+        for data in body.basic_blocks.as_mut_preserves_cfg() {\n             // Remove unnecessary StorageLive and StorageDead annotations.\n             data.statements.retain(|statement| {\n                 let keep = match &statement.kind {"}]}