{"sha": "33cc3f5116e2f1813a54d5038151e0898a670af2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzY2MzZjUxMTZlMmYxODEzYTU0ZDUwMzgxNTFlMDg5OGE2NzBhZjI=", "commit": {"author": {"name": "Folyd", "email": "lyshuhow@gmail.com", "date": "2021-04-18T11:52:20Z"}, "committer": {"name": "Folyd", "email": "lyshuhow@gmail.com", "date": "2021-04-19T06:23:35Z"}, "message": "Stablize {HashMap,BTreeMap}::into_{keys,values}", "tree": {"sha": "9bb9c71a1e9f1dabee534f254c590e7f17de2340", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bb9c71a1e9f1dabee534f254c590e7f17de2340"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33cc3f5116e2f1813a54d5038151e0898a670af2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33cc3f5116e2f1813a54d5038151e0898a670af2", "html_url": "https://github.com/rust-lang/rust/commit/33cc3f5116e2f1813a54d5038151e0898a670af2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33cc3f5116e2f1813a54d5038151e0898a670af2/comments", "author": {"login": "Folyd", "id": 3369694, "node_id": "MDQ6VXNlcjMzNjk2OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3369694?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Folyd", "html_url": "https://github.com/Folyd", "followers_url": "https://api.github.com/users/Folyd/followers", "following_url": "https://api.github.com/users/Folyd/following{/other_user}", "gists_url": "https://api.github.com/users/Folyd/gists{/gist_id}", "starred_url": "https://api.github.com/users/Folyd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Folyd/subscriptions", "organizations_url": "https://api.github.com/users/Folyd/orgs", "repos_url": "https://api.github.com/users/Folyd/repos", "events_url": "https://api.github.com/users/Folyd/events{/privacy}", "received_events_url": "https://api.github.com/users/Folyd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Folyd", "id": 3369694, "node_id": "MDQ6VXNlcjMzNjk2OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3369694?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Folyd", "html_url": "https://github.com/Folyd", "followers_url": "https://api.github.com/users/Folyd/followers", "following_url": "https://api.github.com/users/Folyd/following{/other_user}", "gists_url": "https://api.github.com/users/Folyd/gists{/gist_id}", "starred_url": "https://api.github.com/users/Folyd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Folyd/subscriptions", "organizations_url": "https://api.github.com/users/Folyd/orgs", "repos_url": "https://api.github.com/users/Folyd/repos", "events_url": "https://api.github.com/users/Folyd/events{/privacy}", "received_events_url": "https://api.github.com/users/Folyd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7c338641466d54bf8d4b2eae5d6865483e1d3f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7c338641466d54bf8d4b2eae5d6865483e1d3f4", "html_url": "https://github.com/rust-lang/rust/commit/d7c338641466d54bf8d4b2eae5d6865483e1d3f4"}], "stats": {"total": 60, "additions": 26, "deletions": 34}, "files": [{"sha": "02e2924623c9d1979164f8c22c4c961f2b1724d8", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/33cc3f5116e2f1813a54d5038151e0898a670af2/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33cc3f5116e2f1813a54d5038151e0898a670af2/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=33cc3f5116e2f1813a54d5038151e0898a670af2", "patch": "@@ -398,12 +398,12 @@ impl<K, V: fmt::Debug> fmt::Debug for ValuesMut<'_, K, V> {\n /// See its documentation for more.\n ///\n /// [`into_keys`]: BTreeMap::into_keys\n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.53.0\")]\n pub struct IntoKeys<K, V> {\n     inner: IntoIter<K, V>,\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.53.0\")]\n impl<K: fmt::Debug, V> fmt::Debug for IntoKeys<K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self.inner.iter().map(|(key, _)| key)).finish()\n@@ -416,12 +416,12 @@ impl<K: fmt::Debug, V> fmt::Debug for IntoKeys<K, V> {\n /// See its documentation for more.\n ///\n /// [`into_values`]: BTreeMap::into_values\n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.53.0\")]\n pub struct IntoValues<K, V> {\n     inner: IntoIter<K, V>,\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.53.0\")]\n impl<K, V: fmt::Debug> fmt::Debug for IntoValues<K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self.inner.iter().map(|(_, val)| val)).finish()\n@@ -1242,7 +1242,6 @@ impl<K, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(map_into_keys_values)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut a = BTreeMap::new();\n@@ -1253,7 +1252,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// assert_eq!(keys, [1, 2]);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+    #[stable(feature = \"map_into_keys_values\", since = \"1.53.0\")]\n     pub fn into_keys(self) -> IntoKeys<K, V> {\n         IntoKeys { inner: self.into_iter() }\n     }\n@@ -1265,7 +1264,6 @@ impl<K, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(map_into_keys_values)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut a = BTreeMap::new();\n@@ -1276,7 +1274,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// assert_eq!(values, [\"hello\", \"goodbye\"]);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+    #[stable(feature = \"map_into_keys_values\", since = \"1.53.0\")]\n     pub fn into_values(self) -> IntoValues<K, V> {\n         IntoValues { inner: self.into_iter() }\n     }\n@@ -1776,7 +1774,7 @@ impl<'a, K, V> Range<'a, K, V> {\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.53.0\")]\n impl<K, V> Iterator for IntoKeys<K, V> {\n     type Item = K;\n \n@@ -1801,24 +1799,24 @@ impl<K, V> Iterator for IntoKeys<K, V> {\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.53.0\")]\n impl<K, V> DoubleEndedIterator for IntoKeys<K, V> {\n     fn next_back(&mut self) -> Option<K> {\n         self.inner.next_back().map(|(k, _)| k)\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.53.0\")]\n impl<K, V> ExactSizeIterator for IntoKeys<K, V> {\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.53.0\")]\n impl<K, V> FusedIterator for IntoKeys<K, V> {}\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.53.0\")]\n impl<K, V> Iterator for IntoValues<K, V> {\n     type Item = V;\n \n@@ -1835,21 +1833,21 @@ impl<K, V> Iterator for IntoValues<K, V> {\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.53.0\")]\n impl<K, V> DoubleEndedIterator for IntoValues<K, V> {\n     fn next_back(&mut self) -> Option<V> {\n         self.inner.next_back().map(|(_, v)| v)\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.53.0\")]\n impl<K, V> ExactSizeIterator for IntoValues<K, V> {\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.53.0\")]\n impl<K, V> FusedIterator for IntoValues<K, V> {}\n \n #[stable(feature = \"btree_range\", since = \"1.17.0\")]"}, {"sha": "32c868fb4ab04e69e11fa94310726670786f2878", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/33cc3f5116e2f1813a54d5038151e0898a670af2/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33cc3f5116e2f1813a54d5038151e0898a670af2/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=33cc3f5116e2f1813a54d5038151e0898a670af2", "patch": "@@ -962,7 +962,6 @@ where\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(map_into_keys_values)]\n     /// use std::collections::HashMap;\n     ///\n     /// let mut map = HashMap::new();\n@@ -973,7 +972,7 @@ where\n     /// let vec: Vec<&str> = map.into_keys().collect();\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+    #[stable(feature = \"map_into_keys_values\", since = \"1.53.0\")]\n     pub fn into_keys(self) -> IntoKeys<K, V> {\n         IntoKeys { inner: self.into_iter() }\n     }\n@@ -985,7 +984,6 @@ where\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(map_into_keys_values)]\n     /// use std::collections::HashMap;\n     ///\n     /// let mut map = HashMap::new();\n@@ -996,7 +994,7 @@ where\n     /// let vec: Vec<i32> = map.into_values().collect();\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+    #[stable(feature = \"map_into_keys_values\", since = \"1.53.0\")]\n     pub fn into_values(self) -> IntoValues<K, V> {\n         IntoValues { inner: self.into_iter() }\n     }\n@@ -1405,15 +1403,13 @@ pub struct ValuesMut<'a, K: 'a, V: 'a> {\n /// # Example\n ///\n /// ```\n-/// #![feature(map_into_keys_values)]\n-///\n /// use std::collections::HashMap;\n ///\n /// let mut map = HashMap::new();\n /// map.insert(\"a\", 1);\n /// let iter_keys = map.into_keys();\n /// ```\n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.53.0\")]\n pub struct IntoKeys<K, V> {\n     inner: IntoIter<K, V>,\n }\n@@ -1428,15 +1424,13 @@ pub struct IntoKeys<K, V> {\n /// # Example\n ///\n /// ```\n-/// #![feature(map_into_keys_values)]\n-///\n /// use std::collections::HashMap;\n ///\n /// let mut map = HashMap::new();\n /// map.insert(\"a\", 1);\n /// let iter_keys = map.into_values();\n /// ```\n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.53.0\")]\n pub struct IntoValues<K, V> {\n     inner: IntoIter<K, V>,\n }\n@@ -2137,7 +2131,7 @@ impl<K, V: fmt::Debug> fmt::Debug for ValuesMut<'_, K, V> {\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.53.0\")]\n impl<K, V> Iterator for IntoKeys<K, V> {\n     type Item = K;\n \n@@ -2150,24 +2144,24 @@ impl<K, V> Iterator for IntoKeys<K, V> {\n         self.inner.size_hint()\n     }\n }\n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.53.0\")]\n impl<K, V> ExactSizeIterator for IntoKeys<K, V> {\n     #[inline]\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.53.0\")]\n impl<K, V> FusedIterator for IntoKeys<K, V> {}\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.53.0\")]\n impl<K: Debug, V> fmt::Debug for IntoKeys<K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self.inner.iter().map(|(k, _)| k)).finish()\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.53.0\")]\n impl<K, V> Iterator for IntoValues<K, V> {\n     type Item = V;\n \n@@ -2180,17 +2174,17 @@ impl<K, V> Iterator for IntoValues<K, V> {\n         self.inner.size_hint()\n     }\n }\n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.53.0\")]\n impl<K, V> ExactSizeIterator for IntoValues<K, V> {\n     #[inline]\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.53.0\")]\n impl<K, V> FusedIterator for IntoValues<K, V> {}\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.53.0\")]\n impl<K, V: Debug> fmt::Debug for IntoValues<K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self.inner.iter().map(|(_, v)| v)).finish()"}]}