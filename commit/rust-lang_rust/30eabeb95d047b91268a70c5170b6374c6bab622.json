{"sha": "30eabeb95d047b91268a70c5170b6374c6bab622", "node_id": "C_kwDOAAsO6NoAKDMwZWFiZWI5NWQwNDdiOTEyNjhhNzBjNTE3MGI2Mzc0YzZiYWI2MjI", "commit": {"author": {"name": "Dorian Scheidt", "email": "dorian.scheidt@gmail.com", "date": "2022-08-18T23:14:51Z"}, "committer": {"name": "Dorian Scheidt", "email": "dorian.scheidt@gmail.com", "date": "2022-08-18T23:14:51Z"}, "message": "extract fn_target_info", "tree": {"sha": "051af425e84819ae4d58c48fbbc47bc9218e331d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/051af425e84819ae4d58c48fbbc47bc9218e331d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30eabeb95d047b91268a70c5170b6374c6bab622", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30eabeb95d047b91268a70c5170b6374c6bab622", "html_url": "https://github.com/rust-lang/rust/commit/30eabeb95d047b91268a70c5170b6374c6bab622", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30eabeb95d047b91268a70c5170b6374c6bab622/comments", "author": {"login": "DorianListens", "id": 5692947, "node_id": "MDQ6VXNlcjU2OTI5NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5692947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DorianListens", "html_url": "https://github.com/DorianListens", "followers_url": "https://api.github.com/users/DorianListens/followers", "following_url": "https://api.github.com/users/DorianListens/following{/other_user}", "gists_url": "https://api.github.com/users/DorianListens/gists{/gist_id}", "starred_url": "https://api.github.com/users/DorianListens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DorianListens/subscriptions", "organizations_url": "https://api.github.com/users/DorianListens/orgs", "repos_url": "https://api.github.com/users/DorianListens/repos", "events_url": "https://api.github.com/users/DorianListens/events{/privacy}", "received_events_url": "https://api.github.com/users/DorianListens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DorianListens", "id": 5692947, "node_id": "MDQ6VXNlcjU2OTI5NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5692947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DorianListens", "html_url": "https://github.com/DorianListens", "followers_url": "https://api.github.com/users/DorianListens/followers", "following_url": "https://api.github.com/users/DorianListens/following{/other_user}", "gists_url": "https://api.github.com/users/DorianListens/gists{/gist_id}", "starred_url": "https://api.github.com/users/DorianListens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DorianListens/subscriptions", "organizations_url": "https://api.github.com/users/DorianListens/orgs", "repos_url": "https://api.github.com/users/DorianListens/repos", "events_url": "https://api.github.com/users/DorianListens/events{/privacy}", "received_events_url": "https://api.github.com/users/DorianListens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61308607893b1a3c2a9de19d2f80c811d7ad643b", "url": "https://api.github.com/repos/rust-lang/rust/commits/61308607893b1a3c2a9de19d2f80c811d7ad643b", "html_url": "https://github.com/rust-lang/rust/commit/61308607893b1a3c2a9de19d2f80c811d7ad643b"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "ba8bfe0c19bc98c3d4e72cd1eab5a62fffe14f6c", "filename": "crates/ide-assists/src/handlers/generate_function.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/30eabeb95d047b91268a70c5170b6374c6bab622/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30eabeb95d047b91268a70c5170b6374c6bab622/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=30eabeb95d047b91268a70c5170b6374c6bab622", "patch": "@@ -61,9 +61,31 @@ fn gen_fn(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n     }\n \n     let fn_name = &*name_ref.text();\n+    let (target_module, adt_name, target, file, insert_offset) =\n+        fn_target_info(path, ctx, &call, fn_name)?;\n+    let function_builder = FunctionBuilder::from_call(ctx, &call, fn_name, target_module, target)?;\n+    let text_range = call.syntax().text_range();\n+    let label = format!(\"Generate {} function\", function_builder.fn_name);\n+    add_func_to_accumulator(\n+        acc,\n+        ctx,\n+        text_range,\n+        function_builder,\n+        insert_offset,\n+        file,\n+        adt_name,\n+        label,\n+    )\n+}\n+\n+fn fn_target_info(\n+    path: ast::Path,\n+    ctx: &AssistContext<'_>,\n+    call: &CallExpr,\n+    fn_name: &str,\n+) -> Option<(Option<Module>, Option<hir::Name>, GeneratedFunctionTarget, FileId, TextSize)> {\n     let mut target_module = None;\n     let mut adt_name = None;\n-\n     let (target, file, insert_offset) = match path.qualifier() {\n         Some(qualifier) => match ctx.sema.resolve_path(&qualifier) {\n             Some(hir::PathResolution::Def(hir::ModuleDef::Module(module))) => {\n@@ -78,11 +100,11 @@ fn gen_fn(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n                     }\n                 }\n \n-                assoc_fn_target(ctx, &call, adt, &mut target_module, fn_name, &mut adt_name)?\n+                assoc_fn_target(ctx, call, adt, &mut target_module, fn_name, &mut adt_name)?\n             }\n             Some(hir::PathResolution::SelfType(impl_)) => {\n                 let adt = impl_.self_ty(ctx.db()).as_adt()?;\n-                assoc_fn_target(ctx, &call, adt, &mut target_module, fn_name, &mut adt_name)?\n+                assoc_fn_target(ctx, call, adt, &mut target_module, fn_name, &mut adt_name)?\n             }\n             _ => {\n                 return None;\n@@ -93,19 +115,7 @@ fn gen_fn(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n             get_fn_target(ctx, &target_module, call.clone())?\n         }\n     };\n-    let function_builder = FunctionBuilder::from_call(ctx, &call, fn_name, target_module, target)?;\n-    let text_range = call.syntax().text_range();\n-    let label = format!(\"Generate {} function\", function_builder.fn_name);\n-    add_func_to_accumulator(\n-        acc,\n-        ctx,\n-        text_range,\n-        function_builder,\n-        insert_offset,\n-        file,\n-        adt_name,\n-        label,\n-    )\n+    Some((target_module, adt_name, target, file, insert_offset))\n }\n \n fn gen_method(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {"}]}