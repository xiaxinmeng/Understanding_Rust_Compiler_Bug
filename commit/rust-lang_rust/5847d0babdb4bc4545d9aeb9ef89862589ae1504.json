{"sha": "5847d0babdb4bc4545d9aeb9ef89862589ae1504", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NDdkMGJhYmRiNGJjNDU0NWQ5YWViOWVmODk4NjI1ODlhZTE1MDQ=", "commit": {"author": {"name": "Jonathan Strong", "email": "jstrong@legis.io", "date": "2017-12-07T17:19:24Z"}, "committer": {"name": "Jonathan Strong", "email": "jstrong@legis.io", "date": "2017-12-07T17:19:24Z"}, "message": "adds links to methods, removes trailing whitespace", "tree": {"sha": "287c2946af427e4555cd22b98b7ab9a8f7e9a247", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/287c2946af427e4555cd22b98b7ab9a8f7e9a247"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5847d0babdb4bc4545d9aeb9ef89862589ae1504", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5847d0babdb4bc4545d9aeb9ef89862589ae1504", "html_url": "https://github.com/rust-lang/rust/commit/5847d0babdb4bc4545d9aeb9ef89862589ae1504", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5847d0babdb4bc4545d9aeb9ef89862589ae1504/comments", "author": null, "committer": null, "parents": [{"sha": "9307917d6abc115faf7d2cb625c550cb509b5c4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9307917d6abc115faf7d2cb625c550cb509b5c4d", "html_url": "https://github.com/rust-lang/rust/commit/9307917d6abc115faf7d2cb625c550cb509b5c4d"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "0d7ec6071fbad161728fc73cce0c5fbbbb124714", "filename": "src/libcore/option.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5847d0babdb4bc4545d9aeb9ef89862589ae1504/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5847d0babdb4bc4545d9aeb9ef89862589ae1504/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=5847d0babdb4bc4545d9aeb9ef89862589ae1504", "patch": "@@ -338,9 +338,11 @@ impl<T> Option<T> {\n \n     /// Returns the contained value or a default.\n     ///\n-    /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing \n-    /// the result of a function call, it is recommended to use `unwrap_or_else`, \n-    /// which is lazily evaluated. \n+    /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing\n+    /// the result of a function call, it is recommended to use [`unwrap_or_else`],\n+    /// which is lazily evaluated.\n+    ///\n+    /// [`unwrap_or_else`]: #method.unwrap_or_else\n     ///\n     /// # Examples\n     ///\n@@ -456,14 +458,15 @@ impl<T> Option<T> {\n     /// [`Ok(v)`] and [`None`] to [`Err(err)`].\n     ///\n     /// Arguments passed to `ok_or` are eagerly evaluated; if you are passing the\n-    /// result of a function call, it is recommended to use `ok_or_else`, which is\n+    /// result of a function call, it is recommended to use [`ok_or_else`], which is\n     /// lazily evaluated.\n     ///\n     /// [`Result<T, E>`]: ../../std/result/enum.Result.html\n     /// [`Ok(v)`]: ../../std/result/enum.Result.html#variant.Ok\n     /// [`Err(err)`]: ../../std/result/enum.Result.html#variant.Err\n     /// [`None`]: #variant.None\n     /// [`Some(v)`]: #variant.Some\n+    /// [`ok_or_else`]: #method.ok_or_else\n     ///\n     /// # Examples\n     ///\n@@ -618,9 +621,11 @@ impl<T> Option<T> {\n     /// Returns the option if it contains a value, otherwise returns `optb`.\n     ///\n     /// Arguments passed to `or` are eagerly evaluated; if you are passing the\n-    /// result of a function call, it is recommended to use `or_else`, which is\n+    /// result of a function call, it is recommended to use [`or_else`], which is\n     /// lazily evaluated.\n     ///\n+    /// [`or_else`]: #method.or_else\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "97cfc2b4dbc53d0a4a59e82c254af056eb645ec6", "filename": "src/libcore/result.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5847d0babdb4bc4545d9aeb9ef89862589ae1504/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5847d0babdb4bc4545d9aeb9ef89862589ae1504/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=5847d0babdb4bc4545d9aeb9ef89862589ae1504", "patch": "@@ -626,11 +626,12 @@ impl<T, E> Result<T, E> {\n     /// Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.\n     ///\n     /// Arguments passed to `or` are eagerly evaluated; if you are passing the\n-    /// result of a function call, it is recommended to use `or_else`, which is\n+    /// result of a function call, it is recommended to use [`or_else`], which is\n     /// lazily evaluated.\n     ///\n     /// [`Ok`]: enum.Result.html#variant.Ok\n     /// [`Err`]: enum.Result.html#variant.Err\n+    /// [`or_else`]: #method.or_else\n     ///\n     /// # Examples\n     ///\n@@ -694,12 +695,13 @@ impl<T, E> Result<T, E> {\n     /// Unwraps a result, yielding the content of an [`Ok`].\n     /// Else, it returns `optb`.\n     ///\n-    /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing \n-    /// the result of a function call, it is recommended to use `unwrap_or_else`, \n-    /// which is lazily evaluated. \n+    /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing\n+    /// the result of a function call, it is recommended to use [`unwrap_or_else`],\n+    /// which is lazily evaluated.\n     ///\n     /// [`Ok`]: enum.Result.html#variant.Ok\n     /// [`Err`]: enum.Result.html#variant.Err\n+    /// [`unwrap_or_else`]: #method.unwrap_or_else\n     ///\n     /// # Examples\n     ///"}]}