{"sha": "f3644ca64de6357a07a3901dd2dacbda247beec6", "node_id": "C_kwDOAAsO6NoAKGYzNjQ0Y2E2NGRlNjM1N2EwN2EzOTAxZGQyZGFjYmRhMjQ3YmVlYzY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-26T05:15:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-26T05:15:24Z"}, "message": "Rollup merge of #107085 - tmiasko:custom-mir-operators, r=oli-obk\n\nCustom MIR: Support binary and unary operations\n\nLower binary and unary operations directly to corresponding unchecked MIR\noperations. Ultimately this might not be syntax we want, but it allows for\nexperimentation in the meantime.\n\nr? ````@oli-obk```` ````@JakobDegen````", "tree": {"sha": "7b781bf0b8d2fd709e1b0d7b1bb39f50b810d37f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b781bf0b8d2fd709e1b0d7b1bb39f50b810d37f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3644ca64de6357a07a3901dd2dacbda247beec6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj0gxsCRBK7hj4Ov3rIwAA/0gIAGYXNwGPv6gy1uYJfciw9M9Y\nTstPXUynyi7Vwvi5w83wqTpzHl0Zt43pbYKZ+bUYRaDN4JQuy9hGwrqH25sko4p4\nR7+DeA3Dv8woAYMPR5ym132W/lYxJUl9BzDRU8p+50HSXRVL0lFTV8X++xLAnsJ8\nydYDuJ+y966VqJos9UtVQeULfswq/iDWxIr7URuYkqHttVJVX8iJMuyqEiNsXcBV\npPU8NsqvPNy5lS4yyvtNDXrGg4x+5EpSsem+0xB3zh77dO/aJ+FmOL0th51uUQg4\nmZnHdi5Ya35+n/bpgiR+soQ07FY9MHiZ2l5y8o0IRpT2M27iqwyKYBn5R4N76Vc=\n=IDod\n-----END PGP SIGNATURE-----\n", "payload": "tree 7b781bf0b8d2fd709e1b0d7b1bb39f50b810d37f\nparent ba928ba04116b70d81738a4f49c1b9b23aab7c88\nparent d3cfe97a8a975511a631083d64aa6ae3ddf7470a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674710124 +0100\ncommitter GitHub <noreply@github.com> 1674710124 +0100\n\nRollup merge of #107085 - tmiasko:custom-mir-operators, r=oli-obk\n\nCustom MIR: Support binary and unary operations\n\nLower binary and unary operations directly to corresponding unchecked MIR\noperations. Ultimately this might not be syntax we want, but it allows for\nexperimentation in the meantime.\n\nr? ````@oli-obk```` ````@JakobDegen````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3644ca64de6357a07a3901dd2dacbda247beec6", "html_url": "https://github.com/rust-lang/rust/commit/f3644ca64de6357a07a3901dd2dacbda247beec6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3644ca64de6357a07a3901dd2dacbda247beec6/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba928ba04116b70d81738a4f49c1b9b23aab7c88", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba928ba04116b70d81738a4f49c1b9b23aab7c88", "html_url": "https://github.com/rust-lang/rust/commit/ba928ba04116b70d81738a4f49c1b9b23aab7c88"}, {"sha": "d3cfe97a8a975511a631083d64aa6ae3ddf7470a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3cfe97a8a975511a631083d64aa6ae3ddf7470a", "html_url": "https://github.com/rust-lang/rust/commit/d3cfe97a8a975511a631083d64aa6ae3ddf7470a"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "9840b95feefde42e52779b82f6b139f75b86feb3", "filename": "compiler/rustc_mir_build/src/build/custom/parse/instruction.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3644ca64de6357a07a3901dd2dacbda247beec6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3644ca64de6357a07a3901dd2dacbda247beec6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs?ref=f3644ca64de6357a07a3901dd2dacbda247beec6", "patch": "@@ -147,6 +147,12 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n             ExprKind::AddressOf { mutability, arg } => Ok(\n                 Rvalue::AddressOf(*mutability, self.parse_place(*arg)?)\n             ),\n+            ExprKind::Binary { op, lhs, rhs } =>  Ok(\n+                Rvalue::BinaryOp(*op, Box::new((self.parse_operand(*lhs)?, self.parse_operand(*rhs)?)))\n+            ),\n+            ExprKind::Unary { op, arg } => Ok(\n+                Rvalue::UnaryOp(*op, self.parse_operand(*arg)?)\n+            ),\n             _ => self.parse_operand(expr_id).map(Rvalue::Use),\n         )\n     }"}, {"sha": "a0c5f1b40dbb72957fccd3bfb94d64d2add4de86", "filename": "tests/mir-opt/building/custom/operators.f.built.after.mir", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f3644ca64de6357a07a3901dd2dacbda247beec6/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Foperators.f.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f3644ca64de6357a07a3901dd2dacbda247beec6/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Foperators.f.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Foperators.f.built.after.mir?ref=f3644ca64de6357a07a3901dd2dacbda247beec6", "patch": "@@ -0,0 +1,26 @@\n+// MIR for `f` after built\n+\n+fn f(_1: i32, _2: bool) -> i32 {\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/operators.rs:+0:30: +0:33\n+\n+    bb0: {\n+        _1 = Neg(_1);                    // scope 0 at $DIR/operators.rs:+2:9: +2:15\n+        _2 = Not(_2);                    // scope 0 at $DIR/operators.rs:+3:9: +3:15\n+        _1 = Add(_1, _1);                // scope 0 at $DIR/operators.rs:+4:9: +4:18\n+        _1 = Sub(_1, _1);                // scope 0 at $DIR/operators.rs:+5:9: +5:18\n+        _1 = Mul(_1, _1);                // scope 0 at $DIR/operators.rs:+6:9: +6:18\n+        _1 = Div(_1, _1);                // scope 0 at $DIR/operators.rs:+7:9: +7:18\n+        _1 = Rem(_1, _1);                // scope 0 at $DIR/operators.rs:+8:9: +8:18\n+        _1 = BitXor(_1, _1);             // scope 0 at $DIR/operators.rs:+9:9: +9:18\n+        _1 = BitAnd(_1, _1);             // scope 0 at $DIR/operators.rs:+10:9: +10:18\n+        _1 = Shl(_1, _1);                // scope 0 at $DIR/operators.rs:+11:9: +11:19\n+        _1 = Shr(_1, _1);                // scope 0 at $DIR/operators.rs:+12:9: +12:19\n+        _2 = Eq(_1, _1);                 // scope 0 at $DIR/operators.rs:+13:9: +13:19\n+        _2 = Lt(_1, _1);                 // scope 0 at $DIR/operators.rs:+14:9: +14:18\n+        _2 = Le(_1, _1);                 // scope 0 at $DIR/operators.rs:+15:9: +15:19\n+        _2 = Ge(_1, _1);                 // scope 0 at $DIR/operators.rs:+16:9: +16:19\n+        _2 = Gt(_1, _1);                 // scope 0 at $DIR/operators.rs:+17:9: +17:18\n+        _0 = _1;                         // scope 0 at $DIR/operators.rs:+18:9: +18:16\n+        return;                          // scope 0 at $DIR/operators.rs:+19:9: +19:17\n+    }\n+}"}, {"sha": "51f80c66392a10046f7b295b76b4d6a5d993d836", "filename": "tests/mir-opt/building/custom/operators.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f3644ca64de6357a07a3901dd2dacbda247beec6/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Foperators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3644ca64de6357a07a3901dd2dacbda247beec6/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Foperators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Foperators.rs?ref=f3644ca64de6357a07a3901dd2dacbda247beec6", "patch": "@@ -0,0 +1,28 @@\n+// compile-flags: --crate-type=lib\n+#![feature(custom_mir, core_intrinsics, inline_const)]\n+use std::intrinsics::mir::*;\n+\n+// EMIT_MIR operators.f.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+pub fn f(a: i32, b: bool) -> i32 {\n+    mir!({\n+        a = -a;\n+        b = !b;\n+        a = a + a;\n+        a = a - a;\n+        a = a * a;\n+        a = a / a;\n+        a = a % a;\n+        a = a ^ a;\n+        a = a & a;\n+        a = a << a;\n+        a = a >> a;\n+        b = a == a;\n+        b = a < a;\n+        b = a <= a;\n+        b = a >= a;\n+        b = a > a;\n+        RET = a;\n+        Return()\n+    })\n+}"}]}