{"sha": "00732a31a0a9b00d4ffb333473ae95e66f8e1dfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwNzMyYTMxYTBhOWIwMGQ0ZmZiMzMzNDczYWU5NWU2NmY4ZTFkZmM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-21T09:45:47Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-21T10:04:36Z"}, "message": "check that def_id is a local closure in InferCtxt::fn_sig\n\nBefore we were assuming that *every* `fn_sig` must pertain to a local\nclosure.", "tree": {"sha": "446a63f19653c61a4d0cfb8c80c136e2dd43f7f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/446a63f19653c61a4d0cfb8c80c136e2dd43f7f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00732a31a0a9b00d4ffb333473ae95e66f8e1dfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00732a31a0a9b00d4ffb333473ae95e66f8e1dfc", "html_url": "https://github.com/rust-lang/rust/commit/00732a31a0a9b00d4ffb333473ae95e66f8e1dfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00732a31a0a9b00d4ffb333473ae95e66f8e1dfc/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9c766ccc04676630e2ea70a7ac7a3ea4bc01057", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9c766ccc04676630e2ea70a7ac7a3ea4bc01057", "html_url": "https://github.com/rust-lang/rust/commit/b9c766ccc04676630e2ea70a7ac7a3ea4bc01057"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "7302bad0ca166f3d9af5cffe17727b9e8097df3f", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/00732a31a0a9b00d4ffb333473ae95e66f8e1dfc/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00732a31a0a9b00d4ffb333473ae95e66f8e1dfc/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=00732a31a0a9b00d4ffb333473ae95e66f8e1dfc", "patch": "@@ -1481,20 +1481,29 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// work during the type-checking of the enclosing function and\n     /// return the closure signature in its partially inferred state.\n     pub fn fn_sig(&self, def_id: DefId) -> ty::PolyFnSig<'tcx> {\n+        // Do we have an in-progress set of tables we are inferring?\n         if let Some(tables) = self.in_progress_tables {\n+            // Is this a local item?\n             if let Some(id) = self.tcx.hir.as_local_node_id(def_id) {\n-                let hir_id = self.tcx.hir.node_to_hir_id(id);\n-                let closure_ty = tables.borrow().node_id_to_type(hir_id);\n-                let (closure_def_id, closure_substs) = match closure_ty.sty {\n-                    ty::TyClosure(closure_def_id, closure_substs) =>\n-                        (closure_def_id, closure_substs),\n-                    _ =>\n-                        bug!(\"closure with non-closure type: {:?}\", closure_ty),\n-                };\n-                assert_eq!(def_id, closure_def_id);\n-                let closure_sig_ty = closure_substs.closure_sig_ty(def_id, self.tcx);\n-                let closure_sig_ty = self.shallow_resolve(&closure_sig_ty);\n-                return closure_sig_ty.fn_sig(self.tcx);\n+                // Is it a local *closure*?\n+                if self.tcx.is_closure(def_id) {\n+                    let hir_id = self.tcx.hir.node_to_hir_id(id);\n+                    // Is this local closure contained within the tables we are inferring?\n+                    if tables.borrow().local_id_root == Some(DefId::local(hir_id.owner)) {\n+                        // if so, extract signature from there.\n+                        let closure_ty = tables.borrow().node_id_to_type(hir_id);\n+                        let (closure_def_id, closure_substs) = match closure_ty.sty {\n+                            ty::TyClosure(closure_def_id, closure_substs) =>\n+                                (closure_def_id, closure_substs),\n+                            _ =>\n+                                bug!(\"closure with non-closure type: {:?}\", closure_ty),\n+                        };\n+                        assert_eq!(def_id, closure_def_id);\n+                        let closure_sig_ty = closure_substs.closure_sig_ty(def_id, self.tcx);\n+                        let closure_sig_ty = self.shallow_resolve(&closure_sig_ty);\n+                        return closure_sig_ty.fn_sig(self.tcx);\n+                    }\n+                }\n             }\n         }\n "}]}