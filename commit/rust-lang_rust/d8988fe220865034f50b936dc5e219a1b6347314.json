{"sha": "d8988fe220865034f50b936dc5e219a1b6347314", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4OTg4ZmUyMjA4NjUwMzRmNTBiOTM2ZGM1ZTIxOWExYjYzNDczMTQ=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-08-23T02:04:32Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-08-23T02:10:29Z"}, "message": "libstd: fix serialization no-implicit-copies warnings", "tree": {"sha": "40f5469fe0354419336665082e0384d91339d6af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40f5469fe0354419336665082e0384d91339d6af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8988fe220865034f50b936dc5e219a1b6347314", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8988fe220865034f50b936dc5e219a1b6347314", "html_url": "https://github.com/rust-lang/rust/commit/d8988fe220865034f50b936dc5e219a1b6347314", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8988fe220865034f50b936dc5e219a1b6347314/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "007e47d710c362f51d4133e9c05a638cc0bacb5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/007e47d710c362f51d4133e9c05a638cc0bacb5a", "html_url": "https://github.com/rust-lang/rust/commit/007e47d710c362f51d4133e9c05a638cc0bacb5a"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "260a746bf8538699080fb1663ea030cfd28d741d", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d8988fe220865034f50b936dc5e219a1b6347314/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8988fe220865034f50b936dc5e219a1b6347314/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=d8988fe220865034f50b936dc5e219a1b6347314", "patch": "@@ -284,7 +284,7 @@ impl writer {\n         self.wr_tagged_bytes(tag_id, &[v as u8]);\n     }\n \n-    fn wr_tagged_str(tag_id: uint, v: ~str) {\n+    fn wr_tagged_str(tag_id: uint, v: &str) {\n         str::byte_slice(v, |b| self.wr_tagged_bytes(tag_id, b));\n     }\n \n@@ -363,7 +363,7 @@ impl ebml::writer: serialization::serializer {\n     fn emit_f32(_v: f32) { fail ~\"Unimplemented: serializing an f32\"; }\n     fn emit_float(_v: float) { fail ~\"Unimplemented: serializing a float\"; }\n \n-    fn emit_str(v: ~str) { self.wr_tagged_str(es_str as uint, v) }\n+    fn emit_str(v: &str) { self.wr_tagged_str(es_str as uint, v) }\n \n     fn emit_enum(name: ~str, f: fn()) {\n         self._emit_label(name);\n@@ -445,7 +445,7 @@ priv impl ebml_deserializer {\n         return r_doc;\n     }\n \n-    fn push_doc<T: copy>(d: ebml::doc, f: fn() -> T) -> T{\n+    fn push_doc<T>(d: ebml::doc, f: fn() -> T) -> T{\n         let old_parent = self.parent;\n         let old_pos = self.pos;\n         self.parent = d;\n@@ -499,13 +499,13 @@ impl ebml_deserializer: serialization::deserializer {\n     fn read_str() -> ~str { ebml::doc_as_str(self.next_doc(es_str)) }\n \n     // Compound types:\n-    fn read_enum<T:copy>(name: ~str, f: fn() -> T) -> T {\n+    fn read_enum<T>(name: ~str, f: fn() -> T) -> T {\n         debug!{\"read_enum(%s)\", name};\n         self._check_label(name);\n         self.push_doc(self.next_doc(es_enum), f)\n     }\n \n-    fn read_enum_variant<T:copy>(f: fn(uint) -> T) -> T {\n+    fn read_enum_variant<T>(f: fn(uint) -> T) -> T {\n         debug!{\"read_enum_variant()\"};\n         let idx = self._next_uint(es_enum_vid);\n         debug!{\"  idx=%u\", idx};\n@@ -514,12 +514,12 @@ impl ebml_deserializer: serialization::deserializer {\n         }\n     }\n \n-    fn read_enum_variant_arg<T:copy>(idx: uint, f: fn() -> T) -> T {\n+    fn read_enum_variant_arg<T>(idx: uint, f: fn() -> T) -> T {\n         debug!{\"read_enum_variant_arg(idx=%u)\", idx};\n         f()\n     }\n \n-    fn read_vec<T:copy>(f: fn(uint) -> T) -> T {\n+    fn read_vec<T>(f: fn(uint) -> T) -> T {\n         debug!{\"read_vec()\"};\n         do self.push_doc(self.next_doc(es_vec)) {\n             let len = self._next_uint(es_vec_len);\n@@ -528,38 +528,38 @@ impl ebml_deserializer: serialization::deserializer {\n         }\n     }\n \n-    fn read_vec_elt<T:copy>(idx: uint, f: fn() -> T) -> T {\n+    fn read_vec_elt<T>(idx: uint, f: fn() -> T) -> T {\n         debug!{\"read_vec_elt(idx=%u)\", idx};\n         self.push_doc(self.next_doc(es_vec_elt), f)\n     }\n \n-    fn read_box<T:copy>(f: fn() -> T) -> T {\n+    fn read_box<T>(f: fn() -> T) -> T {\n         debug!{\"read_box()\"};\n         f()\n     }\n \n-    fn read_uniq<T:copy>(f: fn() -> T) -> T {\n+    fn read_uniq<T>(f: fn() -> T) -> T {\n         debug!{\"read_uniq()\"};\n         f()\n     }\n \n-    fn read_rec<T:copy>(f: fn() -> T) -> T {\n+    fn read_rec<T>(f: fn() -> T) -> T {\n         debug!{\"read_rec()\"};\n         f()\n     }\n \n-    fn read_rec_field<T:copy>(f_name: ~str, f_idx: uint, f: fn() -> T) -> T {\n+    fn read_rec_field<T>(f_name: ~str, f_idx: uint, f: fn() -> T) -> T {\n         debug!{\"read_rec_field(%s, idx=%u)\", f_name, f_idx};\n         self._check_label(f_name);\n         f()\n     }\n \n-    fn read_tup<T:copy>(sz: uint, f: fn() -> T) -> T {\n+    fn read_tup<T>(sz: uint, f: fn() -> T) -> T {\n         debug!{\"read_tup(sz=%u)\", sz};\n         f()\n     }\n \n-    fn read_tup_elt<T:copy>(idx: uint, f: fn() -> T) -> T {\n+    fn read_tup_elt<T>(idx: uint, f: fn() -> T) -> T {\n         debug!{\"read_tup_elt(idx=%u)\", idx};\n         f()\n     }"}, {"sha": "252ab3dd8e21b4fdcda45d371715bbb3e473e4a3", "filename": "src/libstd/prettyprint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8988fe220865034f50b936dc5e219a1b6347314/src%2Flibstd%2Fprettyprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8988fe220865034f50b936dc5e219a1b6347314/src%2Flibstd%2Fprettyprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprettyprint.rs?ref=d8988fe220865034f50b936dc5e219a1b6347314", "patch": "@@ -63,7 +63,7 @@ impl Writer: serializer {\n         self.write_str(fmt!{\"%?_f32\", v});\n     }\n \n-    fn emit_str(v: ~str) {\n+    fn emit_str(v: &str) {\n         self.write_str(fmt!{\"%?\", v});\n     }\n \n@@ -127,4 +127,4 @@ impl Writer: serializer {\n         if idx > 0u { self.write_str(~\", \"); }\n         f();\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "da99cb7882ec51d475f64f75e0f279d0b34906ec", "filename": "src/libstd/serialization.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d8988fe220865034f50b936dc5e219a1b6347314/src%2Flibstd%2Fserialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8988fe220865034f50b936dc5e219a1b6347314/src%2Flibstd%2Fserialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialization.rs?ref=d8988fe220865034f50b936dc5e219a1b6347314", "patch": "@@ -23,7 +23,7 @@ trait serializer {\n     fn emit_float(v: float);\n     fn emit_f64(v: f64);\n     fn emit_f32(v: f32);\n-    fn emit_str(v: ~str);\n+    fn emit_str(v: &str);\n \n     // Compound types:\n     fn emit_enum(name: ~str, f: fn());\n@@ -65,17 +65,17 @@ trait deserializer {\n     fn read_float() -> float;\n \n     // Compound types:\n-    fn read_enum<T:copy>(name: ~str, f: fn() -> T) -> T;\n-    fn read_enum_variant<T:copy>(f: fn(uint) -> T) -> T;\n-    fn read_enum_variant_arg<T:copy>(idx: uint, f: fn() -> T) -> T;\n-    fn read_vec<T:copy>(f: fn(uint) -> T) -> T;\n-    fn read_vec_elt<T:copy>(idx: uint, f: fn() -> T) -> T;\n-    fn read_box<T:copy>(f: fn() -> T) -> T;\n-    fn read_uniq<T:copy>(f: fn() -> T) -> T;\n-    fn read_rec<T:copy>(f: fn() -> T) -> T;\n-    fn read_rec_field<T:copy>(f_name: ~str, f_idx: uint, f: fn() -> T) -> T;\n-    fn read_tup<T:copy>(sz: uint, f: fn() -> T) -> T;\n-    fn read_tup_elt<T:copy>(idx: uint, f: fn() -> T) -> T;\n+    fn read_enum<T>(name: ~str, f: fn() -> T) -> T;\n+    fn read_enum_variant<T>(f: fn(uint) -> T) -> T;\n+    fn read_enum_variant_arg<T>(idx: uint, f: fn() -> T) -> T;\n+    fn read_vec<T>(f: fn(uint) -> T) -> T;\n+    fn read_vec_elt<T>(idx: uint, f: fn() -> T) -> T;\n+    fn read_box<T>(f: fn() -> T) -> T;\n+    fn read_uniq<T>(f: fn() -> T) -> T;\n+    fn read_rec<T>(f: fn() -> T) -> T;\n+    fn read_rec_field<T>(f_name: ~str, f_idx: uint, f: fn() -> T) -> T;\n+    fn read_tup<T>(sz: uint, f: fn() -> T) -> T;\n+    fn read_tup_elt<T>(idx: uint, f: fn() -> T) -> T;\n }\n \n // ___________________________________________________________________________\n@@ -201,7 +201,7 @@ fn deserialize_i64<D: deserializer>(d: D) -> i64 {\n     d.read_i64()\n }\n \n-fn serialize_str<S: serializer>(s: S, v: ~str) {\n+fn serialize_str<S: serializer>(s: S, v: &str) {\n     s.emit_str(v);\n }\n "}]}