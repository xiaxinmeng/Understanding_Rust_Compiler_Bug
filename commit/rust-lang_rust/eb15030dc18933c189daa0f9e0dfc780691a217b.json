{"sha": "eb15030dc18933c189daa0f9e0dfc780691a217b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMTUwMzBkYzE4OTMzYzE4OWRhYTBmOWUwZGZjNzgwNjkxYTIxN2I=", "commit": {"author": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-05-27T19:07:20Z"}, "committer": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-05-28T22:54:19Z"}, "message": "Add error explanations for E0040, E0087, E0378, E0379, E0394.", "tree": {"sha": "a41fa7ceec843a224e331c81c78c0add11012ec2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a41fa7ceec843a224e331c81c78c0add11012ec2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb15030dc18933c189daa0f9e0dfc780691a217b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb15030dc18933c189daa0f9e0dfc780691a217b", "html_url": "https://github.com/rust-lang/rust/commit/eb15030dc18933c189daa0f9e0dfc780691a217b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb15030dc18933c189daa0f9e0dfc780691a217b/comments", "author": null, "committer": null, "parents": [{"sha": "f6074406dbb139adec89c5826619d5cfbcb41ff7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6074406dbb139adec89c5826619d5cfbcb41ff7", "html_url": "https://github.com/rust-lang/rust/commit/f6074406dbb139adec89c5826619d5cfbcb41ff7"}], "stats": {"total": 87, "additions": 81, "deletions": 6}, "files": [{"sha": "cc0ea621a49a3fae9a67f4e19364bdd6d1c24f2f", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/eb15030dc18933c189daa0f9e0dfc780691a217b/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb15030dc18933c189daa0f9e0dfc780691a217b/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=eb15030dc18933c189daa0f9e0dfc780691a217b", "patch": "@@ -846,6 +846,40 @@ struct Foo<T: 'static> {\n     foo: &'static T\n }\n ```\n+\"##,\n+\n+E0378: r##\"\n+Method calls that aren't calls to inherent `const` methods are disallowed\n+in statics, constants, and constant functions.\n+\n+For example:\n+\n+```\n+const BAZ: i32 = Foo(25).bar(); // error, `bar` isn't `const`\n+\n+struct Foo(i32);\n+\n+impl Foo {\n+    const fn foo(&self) -> i32 {\n+        self.bar() // error, `bar` isn't `const`\n+    }\n+\n+    fn bar(&self) -> i32 { self.0 }\n+}\n+```\n+\n+For more information about `const fn`'s, see [RFC 911].\n+\n+[RFC 911]: https://github.com/rust-lang/rfcs/pull/911\n+\"##,\n+\n+E0394: r##\"\n+From [RFC 246]:\n+\n+ > It is illegal for a static to reference another static by value. It is\n+ > required that all references be borrowed.\n+\n+[RFC 246]: https://github.com/rust-lang/rfcs/pull/246\n \"##\n \n }\n@@ -895,9 +929,6 @@ register_diagnostics! {\n     E0315, // cannot invoke closure outside of its lifetime\n     E0316, // nested quantification of lifetimes\n     E0370, // discriminant overflow\n-    E0378, // method calls limited to constant inherent methods\n-    E0394, // cannot refer to other statics by value, use the address-of\n-           // operator or a constant instead\n     E0395, // pointer comparison in const-expr\n     E0396  // pointer dereference in const-expr\n }"}, {"sha": "c822a7faa19b473383fd3b1b524d23cbe42e2a89", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 47, "deletions": 3, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/eb15030dc18933c189daa0f9e0dfc780691a217b/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb15030dc18933c189daa0f9e0dfc780691a217b/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=eb15030dc18933c189daa0f9e0dfc780691a217b", "patch": "@@ -170,6 +170,31 @@ Reference:\n http://doc.rust-lang.org/reference.html#trait-objects\n \"##,\n \n+E0040: r##\"\n+It is not allowed to manually call destructors in Rust. It is also not\n+necessary to do this since `drop` is called automatically whenever a value goes\n+out of scope.\n+\n+Here's an example of this error:\n+\n+```\n+struct Foo {\n+    x: i32,\n+}\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {\n+        println!(\"kaboom\");\n+    }\n+}\n+\n+fn main() {\n+    let mut x = Foo { x: -7 };\n+    x.drop(); // error: explicit use of destructor method\n+}\n+```\n+\"##,\n+\n E0046: r##\"\n When trying to make some type implement a trait `Foo`, you must, at minimum,\n provide implementations for all of `Foo`'s required methods (meaning the\n@@ -542,6 +567,21 @@ enum Empty {}\n ```\n \"##,\n \n+E0087: r##\"\n+Too many type parameters were supplied for a function. For example:\n+\n+```\n+fn foo<T>() {}\n+\n+fn main() {\n+    foo::<f64, bool>(); // error, expected 1 parameter, found 2 parameters\n+}\n+```\n+\n+The number of supplied parameters much exactly match the number of defined type\n+parameters.\n+\"##,\n+\n E0089: r##\"\n Not enough type parameters were supplied for a function. For example:\n \n@@ -1098,6 +1138,13 @@ Trait2 { ... }`) does not work if the trait is not object-safe. Please see the\n [RFC 255]: https://github.com/rust-lang/rfcs/pull/255\n \"##,\n \n+E0379: r##\"\n+Trait methods cannot be declared `const` by design. For more information, see\n+[RFC 911].\n+\n+[RFC 911]: https://github.com/rust-lang/rfcs/pull/911\n+\"##,\n+\n E0380: r##\"\n Default impls are only allowed for traits with no methods or associated items.\n For more information see the [opt-in builtin traits RFC](https://github.com/rust\n@@ -1113,7 +1160,6 @@ register_diagnostics! {\n     E0034, // multiple applicable methods in scope\n     E0035, // does not take type parameters\n     E0036, // incorrect number of type parameters given for this method\n-    E0040, // explicit use of destructor method\n     E0044, // foreign items may not have type parameters\n     E0045, // variadic function must have C calling convention\n     E0057, // method has an incompatible type for trait\n@@ -1128,7 +1174,6 @@ register_diagnostics! {\n     E0077,\n     E0085,\n     E0086,\n-    E0087,\n     E0088,\n     E0090,\n     E0091,\n@@ -1235,7 +1280,6 @@ register_diagnostics! {\n            // between structures\n     E0377, // the trait `CoerceUnsized` may only be implemented for a coercion\n            // between structures with the same definition\n-    E0379,  // trait fns cannot be const\n     E0390, // only a single inherent implementation marked with\n            // `#[lang = \\\"{}\\\"]` is allowed for the `{}` primitive\n     E0391, // unsupported cyclic reference between types/traits detected"}]}