{"sha": "bf6e715fa00d63f366cd8d587000aa6185cea041", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNmU3MTVmYTAwZDYzZjM2NmNkOGQ1ODcwMDBhYTYxODVjZWEwNDE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-15T01:44:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-15T01:44:18Z"}, "message": "Rollup merge of #69967 - mark-i-m:rinfctx, r=matthewjasper\n\nRemove a few `Rc`s from RegionInferenceCtxt\n\nfixes https://github.com/rust-lang/rust/issues/55853\n\nr? @matthewjasper", "tree": {"sha": "e48f494b5b52f6770b04c474625601775d682565", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e48f494b5b52f6770b04c474625601775d682565"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf6e715fa00d63f366cd8d587000aa6185cea041", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJebYhzCRBK7hj4Ov3rIwAAdHIIAG5rC+pqVFqqau9HHWKDil15\nLM0BwUEXMUhsI9SNImHSOI1os9oi74ZFBBvJfj71FZkzB6B2gWUu2uPsmkwGvN4d\niGRR6GVgXjqU+UwPndrhLC4PC/iuyILF0ujzkqW6IquP5drwPXNmgzOTViUWEacu\nANSxdHwpD1YXOcdw4DkLq1d3F7osmFBQSp8ySUqKDVLEl1A48eNPz7QZ9TKQzQTG\nkvWJDIIW0LEu8+smAwP9Ahc950VDGw4dwGtyTsUVfi8SRo5NfzCPV0XH20WfmWsb\nCPnHKNKbDFwag/oofVaQP2LcbAtY7Jfe0AHJUU5yLymRdf8Zcr4zRfZuGk3NdEw=\n=cgAn\n-----END PGP SIGNATURE-----\n", "payload": "tree e48f494b5b52f6770b04c474625601775d682565\nparent f40272ca6f9cba29632406efde371dc5c9751fe9\nparent a58b17f2b5e57baa45ffb5b8c979faa3191bc05a\nauthor Dylan DPC <dylan.dpc@gmail.com> 1584236658 +0100\ncommitter GitHub <noreply@github.com> 1584236658 +0100\n\nRollup merge of #69967 - mark-i-m:rinfctx, r=matthewjasper\n\nRemove a few `Rc`s from RegionInferenceCtxt\n\nfixes https://github.com/rust-lang/rust/issues/55853\n\nr? @matthewjasper\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf6e715fa00d63f366cd8d587000aa6185cea041", "html_url": "https://github.com/rust-lang/rust/commit/bf6e715fa00d63f366cd8d587000aa6185cea041", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf6e715fa00d63f366cd8d587000aa6185cea041/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f40272ca6f9cba29632406efde371dc5c9751fe9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f40272ca6f9cba29632406efde371dc5c9751fe9", "html_url": "https://github.com/rust-lang/rust/commit/f40272ca6f9cba29632406efde371dc5c9751fe9"}, {"sha": "a58b17f2b5e57baa45ffb5b8c979faa3191bc05a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a58b17f2b5e57baa45ffb5b8c979faa3191bc05a", "html_url": "https://github.com/rust-lang/rust/commit/a58b17f2b5e57baa45ffb5b8c979faa3191bc05a"}], "stats": {"total": 87, "additions": 77, "deletions": 10}, "files": [{"sha": "2daf5b0414172ed1cf415438a8a6df31e2e1be8b", "filename": "src/librustc_data_structures/frozen.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/bf6e715fa00d63f366cd8d587000aa6185cea041/src%2Flibrustc_data_structures%2Ffrozen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf6e715fa00d63f366cd8d587000aa6185cea041/src%2Flibrustc_data_structures%2Ffrozen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ffrozen.rs?ref=bf6e715fa00d63f366cd8d587000aa6185cea041", "patch": "@@ -0,0 +1,63 @@\n+//! An immutable, owned value (except for interior mutability).\n+//!\n+//! The purpose of `Frozen` is to make a value immutable for the sake of defensive programming. For example,\n+//! suppose we have the following:\n+//!\n+//! ```rust\n+//! struct Bar { /* some data */ }\n+//!\n+//! struct Foo {\n+//!     /// Some computed data that should never change after construction.\n+//!     pub computed: Bar,\n+//!\n+//!     /* some other fields */\n+//! }\n+//!\n+//! impl Bar {\n+//!     /// Mutate the `Bar`.\n+//!     pub fn mutate(&mut self) { }\n+//! }\n+//! ```\n+//!\n+//! Now suppose we want to pass around a mutable `Foo` instance but, we want to make sure that\n+//! `computed` does not change accidentally (e.g. somebody might accidentally call\n+//! `foo.computed.mutate()`). This is what `Frozen` is for. We can do the following:\n+//!\n+//! ```rust\n+//! use rustc_data_structures::frozen::Frozen;\n+//!\n+//! struct Foo {\n+//!     /// Some computed data that should never change after construction.\n+//!     pub computed: Frozen<Bar>,\n+//!\n+//!     /* some other fields */\n+//! }\n+//! ```\n+//!\n+//! `Frozen` impls `Deref`, so we can ergonomically call methods on `Bar`, but it doesn't `impl\n+//! DerefMut`.  Now calling `foo.compute.mutate()` will result in a compile-time error stating that\n+//! `mutate` requires a mutable reference but we don't have one.\n+//!\n+//! # Caveats\n+//!\n+//! - `Frozen` doesn't try to defend against interior mutability (e.g. `Frozen<RefCell<Bar>>`).\n+//! - `Frozen` doesn't pin it's contents (e.g. one could still do `foo.computed =\n+//!    Frozen::freeze(new_bar)`).\n+\n+/// An owned immutable value.\n+#[derive(Debug)]\n+pub struct Frozen<T>(T);\n+\n+impl<T> Frozen<T> {\n+    pub fn freeze(val: T) -> Self {\n+        Frozen(val)\n+    }\n+}\n+\n+impl<T> std::ops::Deref for Frozen<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        &self.0\n+    }\n+}"}, {"sha": "f9f8ff5303e10d61dbc776a1e73f9e8a68f16893", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bf6e715fa00d63f366cd8d587000aa6185cea041/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf6e715fa00d63f366cd8d587000aa6185cea041/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=bf6e715fa00d63f366cd8d587000aa6185cea041", "patch": "@@ -94,6 +94,7 @@ pub mod profiling;\n pub mod vec_linked_list;\n pub mod work_queue;\n pub use atomic_ref::AtomicRef;\n+pub mod frozen;\n \n pub struct OnDrop<F: Fn()>(pub F);\n "}, {"sha": "fe96b3e34a2a875913ba40c3fdf1c51adeccd575", "filename": "src/librustc_mir/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bf6e715fa00d63f366cd8d587000aa6185cea041/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf6e715fa00d63f366cd8d587000aa6185cea041/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=bf6e715fa00d63f366cd8d587000aa6185cea041", "patch": "@@ -7,6 +7,7 @@ use rustc::mir::{\n };\n use rustc::ty::{self, subst::SubstsRef, RegionVid, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::binary_search_util;\n+use rustc_data_structures::frozen::Frozen;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::scc::Sccs;\n use rustc_hir::def_id::DefId;\n@@ -54,12 +55,12 @@ pub struct RegionInferenceContext<'tcx> {\n     liveness_constraints: LivenessValues<RegionVid>,\n \n     /// The outlives constraints computed by the type-check.\n-    constraints: Rc<OutlivesConstraintSet>,\n+    constraints: Frozen<OutlivesConstraintSet>,\n \n     /// The constraint-set, but in graph form, making it easy to traverse\n     /// the constraints adjacent to a particular region. Used to construct\n     /// the SCC (see `constraint_sccs`) and for error reporting.\n-    constraint_graph: Rc<NormalConstraintGraph>,\n+    constraint_graph: Frozen<NormalConstraintGraph>,\n \n     /// The SCC computed from `constraints` and the constraint\n     /// graph. We have an edge from SCC A to SCC B if `A: B`. Used to\n@@ -112,7 +113,7 @@ pub struct RegionInferenceContext<'tcx> {\n \n     /// Information about how the universally quantified regions in\n     /// scope on this function relate to one another.\n-    universal_region_relations: Rc<UniversalRegionRelations<'tcx>>,\n+    universal_region_relations: Frozen<UniversalRegionRelations<'tcx>>,\n }\n \n /// Each time that `apply_member_constraint` is successful, it appends\n@@ -242,11 +243,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     ///\n     /// The `outlives_constraints` and `type_tests` are an initial set\n     /// of constraints produced by the MIR type check.\n-    pub(crate) fn new(\n+    pub(in crate::borrow_check) fn new(\n         var_infos: VarInfos,\n         universal_regions: Rc<UniversalRegions<'tcx>>,\n         placeholder_indices: Rc<PlaceholderIndices>,\n-        universal_region_relations: Rc<UniversalRegionRelations<'tcx>>,\n+        universal_region_relations: Frozen<UniversalRegionRelations<'tcx>>,\n         outlives_constraints: OutlivesConstraintSet,\n         member_constraints_in: MemberConstraintSet<'tcx, RegionVid>,\n         closure_bounds_mapping: FxHashMap<\n@@ -263,8 +264,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             .map(|info| RegionDefinition::new(info.universe, info.origin))\n             .collect();\n \n-        let constraints = Rc::new(outlives_constraints); // freeze constraints\n-        let constraint_graph = Rc::new(constraints.graph(definitions.len()));\n+        let constraints = Frozen::freeze(outlives_constraints);\n+        let constraint_graph = Frozen::freeze(constraints.graph(definitions.len()));\n         let fr_static = universal_regions.fr_static;\n         let constraint_sccs = Rc::new(constraints.compute_sccs(&constraint_graph, fr_static));\n "}, {"sha": "86951f93f0e7e963ed06a1f52d4cb28942e934b9", "filename": "src/librustc_mir/borrow_check/type_check/free_region_relations.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bf6e715fa00d63f366cd8d587000aa6185cea041/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf6e715fa00d63f366cd8d587000aa6185cea041/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs?ref=bf6e715fa00d63f366cd8d587000aa6185cea041", "patch": "@@ -2,6 +2,7 @@ use rustc::mir::ConstraintCategory;\n use rustc::traits::query::OutlivesBound;\n use rustc::ty::free_region_map::FreeRegionRelations;\n use rustc::ty::{self, RegionVid, Ty, TyCtxt};\n+use rustc_data_structures::frozen::Frozen;\n use rustc_data_structures::transitive_relation::TransitiveRelation;\n use rustc_infer::infer::canonical::QueryRegionConstraints;\n use rustc_infer::infer::outlives;\n@@ -53,7 +54,7 @@ type RegionBoundPairs<'tcx> = Vec<(ty::Region<'tcx>, GenericKind<'tcx>)>;\n type NormalizedInputsAndOutput<'tcx> = Vec<Ty<'tcx>>;\n \n crate struct CreateResult<'tcx> {\n-    crate universal_region_relations: Rc<UniversalRegionRelations<'tcx>>,\n+    pub(in crate::borrow_check) universal_region_relations: Frozen<UniversalRegionRelations<'tcx>>,\n     crate region_bound_pairs: RegionBoundPairs<'tcx>,\n     crate normalized_inputs_and_output: NormalizedInputsAndOutput<'tcx>,\n }\n@@ -298,7 +299,7 @@ impl UniversalRegionRelationsBuilder<'cx, 'tcx> {\n         }\n \n         CreateResult {\n-            universal_region_relations: Rc::new(self.relations),\n+            universal_region_relations: Frozen::freeze(self.relations),\n             region_bound_pairs: self.region_bound_pairs,\n             normalized_inputs_and_output,\n         }"}, {"sha": "d98abc57bfd49bb8bfb105b1d4354d60d7d55a35", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf6e715fa00d63f366cd8d587000aa6185cea041/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf6e715fa00d63f366cd8d587000aa6185cea041/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=bf6e715fa00d63f366cd8d587000aa6185cea041", "patch": "@@ -18,6 +18,7 @@ use rustc::ty::{\n     self, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, RegionVid, ToPolyTraitRef, Ty,\n     TyCtxt, UserType, UserTypeAnnotationIndex,\n };\n+use rustc_data_structures::frozen::Frozen;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n@@ -830,7 +831,7 @@ struct BorrowCheckContext<'a, 'tcx> {\n \n crate struct MirTypeckResults<'tcx> {\n     crate constraints: MirTypeckRegionConstraints<'tcx>,\n-    crate universal_region_relations: Rc<UniversalRegionRelations<'tcx>>,\n+    pub(in crate::borrow_check) universal_region_relations: Frozen<UniversalRegionRelations<'tcx>>,\n     crate opaque_type_values: FxHashMap<DefId, ty::ResolvedOpaqueTy<'tcx>>,\n }\n "}]}