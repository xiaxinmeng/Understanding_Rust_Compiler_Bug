{"sha": "72d3b45af055276b07e73611278268282848a139", "node_id": "C_kwDOAAsO6NoAKDcyZDNiNDVhZjA1NTI3NmIwN2U3MzYxMTI3ODI2ODI4Mjg0OGExMzk", "commit": {"author": {"name": "Rob Pilling", "email": "robpilling@gmail.com", "date": "2022-01-28T23:27:01Z"}, "committer": {"name": "Rob Pilling", "email": "robpilling@gmail.com", "date": "2022-01-29T10:32:10Z"}, "message": "Test 1-tuple parentheses wrapping", "tree": {"sha": "39f0edac98e3d17b75a81870692ca73b274a96b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39f0edac98e3d17b75a81870692ca73b274a96b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72d3b45af055276b07e73611278268282848a139", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72d3b45af055276b07e73611278268282848a139", "html_url": "https://github.com/rust-lang/rust/commit/72d3b45af055276b07e73611278268282848a139", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72d3b45af055276b07e73611278268282848a139/comments", "author": {"login": "bobrippling", "id": 205673, "node_id": "MDQ6VXNlcjIwNTY3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/205673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobrippling", "html_url": "https://github.com/bobrippling", "followers_url": "https://api.github.com/users/bobrippling/followers", "following_url": "https://api.github.com/users/bobrippling/following{/other_user}", "gists_url": "https://api.github.com/users/bobrippling/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobrippling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobrippling/subscriptions", "organizations_url": "https://api.github.com/users/bobrippling/orgs", "repos_url": "https://api.github.com/users/bobrippling/repos", "events_url": "https://api.github.com/users/bobrippling/events{/privacy}", "received_events_url": "https://api.github.com/users/bobrippling/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bobrippling", "id": 205673, "node_id": "MDQ6VXNlcjIwNTY3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/205673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobrippling", "html_url": "https://github.com/bobrippling", "followers_url": "https://api.github.com/users/bobrippling/followers", "following_url": "https://api.github.com/users/bobrippling/following{/other_user}", "gists_url": "https://api.github.com/users/bobrippling/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobrippling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobrippling/subscriptions", "organizations_url": "https://api.github.com/users/bobrippling/orgs", "repos_url": "https://api.github.com/users/bobrippling/repos", "events_url": "https://api.github.com/users/bobrippling/events{/privacy}", "received_events_url": "https://api.github.com/users/bobrippling/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91a43f04237dc9fe839fe8466d459e4f215d02fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/91a43f04237dc9fe839fe8466d459e4f215d02fc", "html_url": "https://github.com/rust-lang/rust/commit/91a43f04237dc9fe839fe8466d459e4f215d02fc"}], "stats": {"total": 92, "additions": 78, "deletions": 14}, "files": [{"sha": "5403b8d6d2871ae65a8f548ff6e39e2e2b9a1659", "filename": "src/test/ui/suggestions/args-instead-of-tuple-errors.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72d3b45af055276b07e73611278268282848a139/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d3b45af055276b07e73611278268282848a139/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.rs?ref=72d3b45af055276b07e73611278268282848a139", "patch": "@@ -10,6 +10,12 @@ fn main() {\n \n     let _: Option<(i8,)> = Some();\n     //~^ ERROR this enum variant takes 1 argument but 0 arguments were supplied\n+\n+    let _: Option<(i32,)> = Some(5_usize);\n+    //~^ ERROR mismatched types\n+\n+    let _: Option<(i32,)> = Some((5_usize));\n+    //~^ ERROR mismatched types\n }\n \n fn int_bool(_: (i32, bool)) {"}, {"sha": "ddcdfb1c3b34413be0a3bc9e6504cbb75db0897a", "filename": "src/test/ui/suggestions/args-instead-of-tuple-errors.stderr", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/72d3b45af055276b07e73611278268282848a139/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72d3b45af055276b07e73611278268282848a139/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr?ref=72d3b45af055276b07e73611278268282848a139", "patch": "@@ -15,7 +15,7 @@ LL |     int_bool(1, 2);\n    |     expected 1 argument\n    |\n note: function defined here\n-  --> $DIR/args-instead-of-tuple-errors.rs:15:4\n+  --> $DIR/args-instead-of-tuple-errors.rs:21:4\n    |\n LL | fn int_bool(_: (i32, bool)) {\n    |    ^^^^^^^^ --------------\n@@ -28,6 +28,25 @@ LL |     let _: Option<(i8,)> = Some();\n    |                            |\n    |                            expected 1 argument\n \n-error: aborting due to 3 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/args-instead-of-tuple-errors.rs:14:34\n+   |\n+LL |     let _: Option<(i32,)> = Some(5_usize);\n+   |                                  ^^^^^^^ expected tuple, found `usize`\n+   |\n+   = note: expected tuple `(i32,)`\n+               found type `usize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/args-instead-of-tuple-errors.rs:17:34\n+   |\n+LL |     let _: Option<(i32,)> = Some((5_usize));\n+   |                                  ^^^^^^^^^ expected tuple, found `usize`\n+   |\n+   = note: expected tuple `(i32,)`\n+               found type `usize`\n+\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0061`.\n+Some errors have detailed explanations: E0061, E0308.\n+For more information about an error, try `rustc --explain E0061`."}, {"sha": "66e53f9ce2c80bef49c642f16571fc521fb0f458", "filename": "src/test/ui/suggestions/args-instead-of-tuple.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72d3b45af055276b07e73611278268282848a139/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/72d3b45af055276b07e73611278268282848a139/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.fixed?ref=72d3b45af055276b07e73611278268282848a139", "patch": "@@ -11,6 +11,12 @@ fn main() {\n     let _: Option<()> = Some(());\n     //~^ ERROR this enum variant takes 1 argument but 0 arguments were supplied\n \n+    let _: Option<(i32,)> = Some((3,));\n+    //~^ ERROR mismatched types\n+\n+    let _: Option<(i32,)> = Some((3,));\n+    //~^ ERROR mismatched types\n+\n     two_ints((1, 2)); //~ ERROR this function takes 1 argument\n \n     with_generic((3, 4)); //~ ERROR this function takes 1 argument"}, {"sha": "a15bff07ebfe6766e2a99ea097f7d23ea7397215", "filename": "src/test/ui/suggestions/args-instead-of-tuple.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72d3b45af055276b07e73611278268282848a139/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d3b45af055276b07e73611278268282848a139/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.rs?ref=72d3b45af055276b07e73611278268282848a139", "patch": "@@ -11,6 +11,12 @@ fn main() {\n     let _: Option<()> = Some();\n     //~^ ERROR this enum variant takes 1 argument but 0 arguments were supplied\n \n+    let _: Option<(i32,)> = Some(3);\n+    //~^ ERROR mismatched types\n+\n+    let _: Option<(i32,)> = Some((3));\n+    //~^ ERROR mismatched types\n+\n     two_ints(1, 2); //~ ERROR this function takes 1 argument\n \n     with_generic(3, 4); //~ ERROR this function takes 1 argument"}, {"sha": "6a7602c9d0f45cc3742ad56b50a52b0b5719e1c1", "filename": "src/test/ui/suggestions/args-instead-of-tuple.stderr", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/72d3b45af055276b07e73611278268282848a139/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72d3b45af055276b07e73611278268282848a139/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr?ref=72d3b45af055276b07e73611278268282848a139", "patch": "@@ -31,14 +31,40 @@ help: expected the unit value `()`; create it with empty parentheses\n LL |     let _: Option<()> = Some(());\n    |                              ++\n \n+error[E0308]: mismatched types\n+  --> $DIR/args-instead-of-tuple.rs:14:34\n+   |\n+LL |     let _: Option<(i32,)> = Some(3);\n+   |                                  ^ expected tuple, found integer\n+   |\n+   = note: expected tuple `(i32,)`\n+               found type `{integer}`\n+help: use a trailing comma to create a tuple with one element\n+   |\n+LL |     let _: Option<(i32,)> = Some((3,));\n+   |                                  + ++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/args-instead-of-tuple.rs:17:34\n+   |\n+LL |     let _: Option<(i32,)> = Some((3));\n+   |                                  ^^^ expected tuple, found integer\n+   |\n+   = note: expected tuple `(i32,)`\n+               found type `{integer}`\n+help: use a trailing comma to create a tuple with one element\n+   |\n+LL |     let _: Option<(i32,)> = Some((3,));\n+   |                                    +\n+\n error[E0061]: this function takes 1 argument but 2 arguments were supplied\n-  --> $DIR/args-instead-of-tuple.rs:14:5\n+  --> $DIR/args-instead-of-tuple.rs:20:5\n    |\n LL |     two_ints(1, 2);\n    |     ^^^^^^^^ -  - supplied 2 arguments\n    |\n note: function defined here\n-  --> $DIR/args-instead-of-tuple.rs:19:4\n+  --> $DIR/args-instead-of-tuple.rs:25:4\n    |\n LL | fn two_ints(_: (i32, i32)) {\n    |    ^^^^^^^^ -------------\n@@ -48,13 +74,13 @@ LL |     two_ints((1, 2));\n    |              +    +\n \n error[E0061]: this function takes 1 argument but 2 arguments were supplied\n-  --> $DIR/args-instead-of-tuple.rs:16:5\n+  --> $DIR/args-instead-of-tuple.rs:22:5\n    |\n LL |     with_generic(3, 4);\n    |     ^^^^^^^^^^^^ -  - supplied 2 arguments\n    |\n note: function defined here\n-  --> $DIR/args-instead-of-tuple.rs:22:4\n+  --> $DIR/args-instead-of-tuple.rs:28:4\n    |\n LL | fn with_generic<T: Copy + Send>((a, b): (i32, T)) {\n    |    ^^^^^^^^^^^^                 ----------------\n@@ -64,13 +90,13 @@ LL |     with_generic((3, 4));\n    |                  +    +\n \n error[E0061]: this function takes 1 argument but 2 arguments were supplied\n-  --> $DIR/args-instead-of-tuple.rs:25:9\n+  --> $DIR/args-instead-of-tuple.rs:31:9\n    |\n LL |         with_generic(a, b);\n    |         ^^^^^^^^^^^^ -  - supplied 2 arguments\n    |\n note: function defined here\n-  --> $DIR/args-instead-of-tuple.rs:22:4\n+  --> $DIR/args-instead-of-tuple.rs:28:4\n    |\n LL | fn with_generic<T: Copy + Send>((a, b): (i32, T)) {\n    |    ^^^^^^^^^^^^                 ----------------\n@@ -79,6 +105,7 @@ help: use parentheses to construct a tuple\n LL |         with_generic((a, b));\n    |                      +    +\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 8 previous errors\n \n-For more information about this error, try `rustc --explain E0061`.\n+Some errors have detailed explanations: E0061, E0308.\n+For more information about an error, try `rustc --explain E0061`."}, {"sha": "0016f19284250eae33697601612bed322883c80c", "filename": "src/test/ui/suggestions/issue-86100-tuple-paren-comma.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72d3b45af055276b07e73611278268282848a139/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86100-tuple-paren-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72d3b45af055276b07e73611278268282848a139/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86100-tuple-paren-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86100-tuple-paren-comma.stderr?ref=72d3b45af055276b07e73611278268282848a139", "patch": "@@ -11,7 +11,7 @@ LL |     let _x: (i32,) = (5);\n help: use a trailing comma to create a tuple with one element\n    |\n LL |     let _x: (i32,) = (5,);\n-   |                      ~~~~\n+   |                        +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-86100-tuple-paren-comma.rs:13:9\n@@ -24,7 +24,7 @@ LL |     foo((Some(3)));\n help: use a trailing comma to create a tuple with one element\n    |\n LL |     foo((Some(3),));\n-   |         ~~~~~~~~~~\n+   |                 +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-86100-tuple-paren-comma.rs:17:22\n@@ -37,7 +37,7 @@ LL |     let _s = S { _s: (\"abc\".to_string()) };\n help: use a trailing comma to create a tuple with one element\n    |\n LL |     let _s = S { _s: (\"abc\".to_string(),) };\n-   |                      ~~~~~~~~~~~~~~~~~~~~\n+   |                                        +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-86100-tuple-paren-comma.rs:23:22"}]}