{"sha": "630d212525192c714d4fbab398031aa88c49e538", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMGQyMTI1MjUxOTJjNzE0ZDRmYmFiMzk4MDMxYWE4OGM0OWU1Mzg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-09-18T01:36:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-18T01:36:40Z"}, "message": "Merge #1861\n\n1861: account for impls generated by macros r=matklad a=matklad\n\nThe code is pretty horrible and is copy-pased from expressions. We really need to find a better way to lower stuff generated by macros. But it gets the job done! I've actually though that we did this ages ago, but obviously we didn't\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "742e3278b495b3a8827a7ac1628e66aa76948ff8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/742e3278b495b3a8827a7ac1628e66aa76948ff8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/630d212525192c714d4fbab398031aa88c49e538", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdgYooCRBK7hj4Ov3rIwAAdHIIAEyTEyLlnjUbj7ovjpAEDx0N\nFjDoDChdh33ra08jq+t7qEtujXSF/Khtk1p2ojocPDZFDDEOKNBAw0fmbAAZtPC2\nSa9nRihJpOLGVxqtd0bc8DMCr0odEcFVByWzkH3fX06Fk2XlzOFZ5iV2xG1E3CSS\n/fXZkpZyMSBsGRsX5MzeZOSfcgOhomEuqoNKPP+vtB8RGcBi2Q5V2HjS933D9GZb\nvVd5TdY9IJ1U6le4a09S+RCd5PQZqxklK3yI+B75wr6fwipwWJqU9WqG60g6RBZ0\nHKxjp0w7UAlGCA7MqTSpUXCtubgIBJW9LeyS5mUe+5hittMFq9McMx7knmHBq3U=\n=kA74\n-----END PGP SIGNATURE-----\n", "payload": "tree 742e3278b495b3a8827a7ac1628e66aa76948ff8\nparent 54379ec6f8f82a470a275771e70825634d3d553b\nparent 7d15c81a3367bc538470b5f63d61498eef8efdc7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1568770600 +0000\ncommitter GitHub <noreply@github.com> 1568770600 +0000\n\nMerge #1861\n\n1861: account for impls generated by macros r=matklad a=matklad\n\nThe code is pretty horrible and is copy-pased from expressions. We really need to find a better way to lower stuff generated by macros. But it gets the job done! I've actually though that we did this ages ago, but obviously we didn't\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/630d212525192c714d4fbab398031aa88c49e538", "html_url": "https://github.com/rust-lang/rust/commit/630d212525192c714d4fbab398031aa88c49e538", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/630d212525192c714d4fbab398031aa88c49e538/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54379ec6f8f82a470a275771e70825634d3d553b", "url": "https://api.github.com/repos/rust-lang/rust/commits/54379ec6f8f82a470a275771e70825634d3d553b", "html_url": "https://github.com/rust-lang/rust/commit/54379ec6f8f82a470a275771e70825634d3d553b"}, {"sha": "7d15c81a3367bc538470b5f63d61498eef8efdc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d15c81a3367bc538470b5f63d61498eef8efdc7", "html_url": "https://github.com/rust-lang/rust/commit/7d15c81a3367bc538470b5f63d61498eef8efdc7"}], "stats": {"total": 102, "additions": 74, "deletions": 28}, "files": [{"sha": "d830202bd26868403542ea7b20c64765bcb17624", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 55, "deletions": 26, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/630d212525192c714d4fbab398031aa88c49e538/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630d212525192c714d4fbab398031aa88c49e538/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=630d212525192c714d4fbab398031aa88c49e538", "patch": "@@ -12,29 +12,29 @@ use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     generics::HasGenericParams,\n     ids::LocationCtx,\n+    ids::MacroCallLoc,\n     resolve::Resolver,\n     ty::Ty,\n     type_ref::TypeRef,\n-    AssocItem, Const, Function, HasSource, HirFileId, Source, TraitRef, TypeAlias,\n+    AssocItem, Const, Function, HasSource, HirFileId, MacroFileKind, Path, Source, TraitRef,\n+    TypeAlias,\n };\n \n #[derive(Debug, Default, PartialEq, Eq)]\n pub struct ImplSourceMap {\n-    map: ArenaMap<ImplId, AstPtr<ast::ImplBlock>>,\n+    map: ArenaMap<ImplId, Source<AstPtr<ast::ImplBlock>>>,\n }\n \n impl ImplSourceMap {\n-    fn insert(&mut self, impl_id: ImplId, impl_block: &ast::ImplBlock) {\n-        self.map.insert(impl_id, AstPtr::new(impl_block))\n+    fn insert(&mut self, impl_id: ImplId, file_id: HirFileId, impl_block: &ast::ImplBlock) {\n+        let source = Source { file_id, ast: AstPtr::new(impl_block) };\n+        self.map.insert(impl_id, source)\n     }\n \n-    pub fn get(&self, source: &ModuleSource, impl_id: ImplId) -> ast::ImplBlock {\n-        let root = match source {\n-            ModuleSource::SourceFile(file) => file.syntax().clone(),\n-            ModuleSource::Module(m) => m.syntax().ancestors().last().unwrap(),\n-        };\n-\n-        self.map[impl_id].to_node(&root)\n+    pub fn get(&self, db: &impl AstDatabase, impl_id: ImplId) -> Source<ast::ImplBlock> {\n+        let src = self.map[impl_id];\n+        let root = src.file_syntax(db);\n+        src.map(|ptr| ptr.to_node(&root))\n     }\n }\n \n@@ -48,8 +48,7 @@ impl HasSource for ImplBlock {\n     type Ast = ast::ImplBlock;\n     fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::ImplBlock> {\n         let source_map = db.impls_in_module_with_source_map(self.module).1;\n-        let src = self.module.definition_source(db);\n-        Source { file_id: src.file_id, ast: source_map.get(&src.ast, self.impl_id) }\n+        source_map.get(db, self.impl_id)\n     }\n }\n \n@@ -185,24 +184,55 @@ impl ModuleImplBlocks {\n         };\n \n         let src = m.module.definition_source(db);\n-        let node = match &src.ast {\n-            ModuleSource::SourceFile(node) => node.syntax().clone(),\n+        match &src.ast {\n+            ModuleSource::SourceFile(node) => {\n+                m.collect_from_item_owner(db, source_map, node, src.file_id)\n+            }\n             ModuleSource::Module(node) => {\n-                node.item_list().expect(\"inline module should have item list\").syntax().clone()\n+                let item_list = node.item_list().expect(\"inline module should have item list\");\n+                m.collect_from_item_owner(db, source_map, &item_list, src.file_id)\n             }\n         };\n+        m\n+    }\n \n-        for impl_block_ast in node.children().filter_map(ast::ImplBlock::cast) {\n-            let impl_block = ImplData::from_ast(db, src.file_id, m.module, &impl_block_ast);\n-            let id = m.impls.alloc(impl_block);\n-            for &impl_item in &m.impls[id].items {\n-                m.impls_by_def.insert(impl_item, id);\n+    fn collect_from_item_owner(\n+        &mut self,\n+        db: &(impl DefDatabase + AstDatabase),\n+        source_map: &mut ImplSourceMap,\n+        owner: &dyn ast::ModuleItemOwner,\n+        file_id: HirFileId,\n+    ) {\n+        for item in owner.items_with_macros() {\n+            match item {\n+                ast::ItemOrMacro::Item(ast::ModuleItem::ImplBlock(impl_block_ast)) => {\n+                    let impl_block = ImplData::from_ast(db, file_id, self.module, &impl_block_ast);\n+                    let id = self.impls.alloc(impl_block);\n+                    for &impl_item in &self.impls[id].items {\n+                        self.impls_by_def.insert(impl_item, id);\n+                    }\n+\n+                    source_map.insert(id, file_id, &impl_block_ast);\n+                }\n+                ast::ItemOrMacro::Item(_) => (),\n+                ast::ItemOrMacro::Macro(macro_call) => {\n+                    //FIXME: we should really cut down on the boilerplate required to process a macro\n+                    let ast_id = db.ast_id_map(file_id).ast_id(&macro_call).with_file_id(file_id);\n+                    if let Some(path) = macro_call.path().and_then(Path::from_ast) {\n+                        if let Some(def) = self.module.resolver(db).resolve_path_as_macro(db, &path)\n+                        {\n+                            let call_id = MacroCallLoc { def: def.id, ast_id }.id(db);\n+                            let file_id = call_id.as_file(MacroFileKind::Items);\n+                            if let Some(item_list) =\n+                                db.parse_or_expand(file_id).and_then(ast::MacroItems::cast)\n+                            {\n+                                self.collect_from_item_owner(db, source_map, &item_list, file_id)\n+                            }\n+                        }\n+                    }\n+                }\n             }\n-\n-            source_map.insert(id, &impl_block_ast);\n         }\n-\n-        m\n     }\n }\n \n@@ -213,7 +243,6 @@ pub(crate) fn impls_in_module_with_source_map_query(\n     let mut source_map = ImplSourceMap::default();\n \n     let result = ModuleImplBlocks::collect(db, module, &mut source_map);\n-\n     (Arc::new(result), Arc::new(source_map))\n }\n "}, {"sha": "254d1a9640e2c765bdd6f8881b3adf8836df134d", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/630d212525192c714d4fbab398031aa88c49e538/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630d212525192c714d4fbab398031aa88c49e538/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=630d212525192c714d4fbab398031aa88c49e538", "patch": "@@ -5,7 +5,7 @@ use rustc_hash::FxHashSet;\n \n use crate::{\n     code_model::Crate,\n-    db::HirDatabase,\n+    db::{DefDatabase, HirDatabase},\n     expr::{\n         scope::{ExprScopes, ScopeId},\n         PatId,\n@@ -290,7 +290,7 @@ impl Resolver {\n \n     pub(crate) fn resolve_path_as_macro(\n         &self,\n-        db: &impl HirDatabase,\n+        db: &impl DefDatabase,\n         path: &Path,\n     ) -> Option<MacroDef> {\n         let (item_map, module) = self.module()?;"}, {"sha": "3b0a994603447724b17c55778246df3c481eafc6", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/630d212525192c714d4fbab398031aa88c49e538/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630d212525192c714d4fbab398031aa88c49e538/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=630d212525192c714d4fbab398031aa88c49e538", "patch": "@@ -2997,6 +2997,23 @@ fn foo() {\n     );\n }\n \n+#[test]\n+fn processes_impls_generated_by_macros() {\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+macro_rules! m {\n+    ($ident:ident) => (impl Trait for $ident {})\n+}\n+trait Trait { fn foo(self) -> u128 {} }\n+struct S;\n+m!(S);\n+fn test() { S.foo()<|>; }\n+\"#,\n+    );\n+    assert_eq!(t, \"u128\");\n+}\n+\n #[ignore]\n #[test]\n fn method_resolution_trait_before_autoref() {"}]}