{"sha": "d2eb2bb8548e97e29abfeab1825c006c5ba02efc", "node_id": "C_kwDOAAsO6NoAKGQyZWIyYmI4NTQ4ZTk3ZTI5YWJmZWFiMTgyNWMwMDZjNWJhMDJlZmM", "commit": {"author": {"name": "Chayim Refael Friedman", "email": "chayimfr@gmail.com", "date": "2022-11-02T13:38:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-02T13:38:15Z"}, "message": "Clarify docs of `RefCell`\n\nComparison operators only panic if the `RefCell` is mutably borrowed, and `RefCell::swap()` can also panic if swapping a `RefCell` with itself.", "tree": {"sha": "c7e455f72087c5b8366b417bdcebf9f08137860a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7e455f72087c5b8366b417bdcebf9f08137860a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2eb2bb8548e97e29abfeab1825c006c5ba02efc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjYnLHCRBK7hj4Ov3rIwAAnzMIAIqvJdiw1kYXk8IbDs+QIbxS\nu534md85HCLZokCB9+dyoGMV+isrqsySZo9pFHguw8oGuoczooNhQTr/1jElHBio\nG7Efkr90lRp/uAlQ8SFunY13QPRJamRSpNlo3x3TE0D7op49BeRiFY8yvJvDaoAc\naIPtt7pkDkwjR71n3slT40egcdrkbiZHntdf5P6oQl+Emhe/4tuJg+jDgMGE1pnB\nFyGQa2+V9ye3PB5ciUqUyET2wUwVTeRMalWlB8d0XuoMBZADJjHy9axpNtmS2R+K\nMuZLKzYqJ1mYXOc7ZD2qUlx1Awq/9BKToWzyUHhB2PdhVlcQa74aoExIxjO9BDM=\n=ToRp\n-----END PGP SIGNATURE-----\n", "payload": "tree c7e455f72087c5b8366b417bdcebf9f08137860a\nparent 822f8c22f540b12f296d844ad5bf39aaa47bfeb4\nauthor Chayim Refael Friedman <chayimfr@gmail.com> 1667396295 +0200\ncommitter GitHub <noreply@github.com> 1667396295 +0200\n\nClarify docs of `RefCell`\n\nComparison operators only panic if the `RefCell` is mutably borrowed, and `RefCell::swap()` can also panic if swapping a `RefCell` with itself."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2eb2bb8548e97e29abfeab1825c006c5ba02efc", "html_url": "https://github.com/rust-lang/rust/commit/d2eb2bb8548e97e29abfeab1825c006c5ba02efc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2eb2bb8548e97e29abfeab1825c006c5ba02efc/comments", "author": {"login": "ChayimFriedman2", "id": 24700207, "node_id": "MDQ6VXNlcjI0NzAwMjA3", "avatar_url": "https://avatars.githubusercontent.com/u/24700207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChayimFriedman2", "html_url": "https://github.com/ChayimFriedman2", "followers_url": "https://api.github.com/users/ChayimFriedman2/followers", "following_url": "https://api.github.com/users/ChayimFriedman2/following{/other_user}", "gists_url": "https://api.github.com/users/ChayimFriedman2/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChayimFriedman2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChayimFriedman2/subscriptions", "organizations_url": "https://api.github.com/users/ChayimFriedman2/orgs", "repos_url": "https://api.github.com/users/ChayimFriedman2/repos", "events_url": "https://api.github.com/users/ChayimFriedman2/events{/privacy}", "received_events_url": "https://api.github.com/users/ChayimFriedman2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "822f8c22f540b12f296d844ad5bf39aaa47bfeb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/822f8c22f540b12f296d844ad5bf39aaa47bfeb4", "html_url": "https://github.com/rust-lang/rust/commit/822f8c22f540b12f296d844ad5bf39aaa47bfeb4"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "0a48603257b41229d3c9efe6b95124e62d410d03", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d2eb2bb8548e97e29abfeab1825c006c5ba02efc/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2eb2bb8548e97e29abfeab1825c006c5ba02efc/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=d2eb2bb8548e97e29abfeab1825c006c5ba02efc", "patch": "@@ -807,7 +807,8 @@ impl<T> RefCell<T> {\n     ///\n     /// # Panics\n     ///\n-    /// Panics if the value in either `RefCell` is currently borrowed.\n+    /// Panics if the value in either `RefCell` is currently borrowed, or\n+    /// if `self` and `other` point to the same `RefCell`.\n     ///\n     /// # Examples\n     ///\n@@ -1193,7 +1194,7 @@ impl<T: Default> Default for RefCell<T> {\n impl<T: ?Sized + PartialEq> PartialEq for RefCell<T> {\n     /// # Panics\n     ///\n-    /// Panics if the value in either `RefCell` is currently borrowed.\n+    /// Panics if the value in either `RefCell` is currently mutably borrowed.\n     #[inline]\n     fn eq(&self, other: &RefCell<T>) -> bool {\n         *self.borrow() == *other.borrow()\n@@ -1207,39 +1208,39 @@ impl<T: ?Sized + Eq> Eq for RefCell<T> {}\n impl<T: ?Sized + PartialOrd> PartialOrd for RefCell<T> {\n     /// # Panics\n     ///\n-    /// Panics if the value in either `RefCell` is currently borrowed.\n+    /// Panics if the value in either `RefCell` is currently mutably borrowed.\n     #[inline]\n     fn partial_cmp(&self, other: &RefCell<T>) -> Option<Ordering> {\n         self.borrow().partial_cmp(&*other.borrow())\n     }\n \n     /// # Panics\n     ///\n-    /// Panics if the value in either `RefCell` is currently borrowed.\n+    /// Panics if the value in either `RefCell` is currently mutably borrowed.\n     #[inline]\n     fn lt(&self, other: &RefCell<T>) -> bool {\n         *self.borrow() < *other.borrow()\n     }\n \n     /// # Panics\n     ///\n-    /// Panics if the value in either `RefCell` is currently borrowed.\n+    /// Panics if the value in either `RefCell` is currently mutably borrowed.\n     #[inline]\n     fn le(&self, other: &RefCell<T>) -> bool {\n         *self.borrow() <= *other.borrow()\n     }\n \n     /// # Panics\n     ///\n-    /// Panics if the value in either `RefCell` is currently borrowed.\n+    /// Panics if the value in either `RefCell` is currently mutably borrowed.\n     #[inline]\n     fn gt(&self, other: &RefCell<T>) -> bool {\n         *self.borrow() > *other.borrow()\n     }\n \n     /// # Panics\n     ///\n-    /// Panics if the value in either `RefCell` is currently borrowed.\n+    /// Panics if the value in either `RefCell` is currently mutably borrowed.\n     #[inline]\n     fn ge(&self, other: &RefCell<T>) -> bool {\n         *self.borrow() >= *other.borrow()\n@@ -1250,7 +1251,7 @@ impl<T: ?Sized + PartialOrd> PartialOrd for RefCell<T> {\n impl<T: ?Sized + Ord> Ord for RefCell<T> {\n     /// # Panics\n     ///\n-    /// Panics if the value in either `RefCell` is currently borrowed.\n+    /// Panics if the value in either `RefCell` is currently mutably borrowed.\n     #[inline]\n     fn cmp(&self, other: &RefCell<T>) -> Ordering {\n         self.borrow().cmp(&*other.borrow())"}]}