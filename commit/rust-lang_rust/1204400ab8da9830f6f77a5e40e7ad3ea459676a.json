{"sha": "1204400ab8da9830f6f77a5e40e7ad3ea459676a", "node_id": "C_kwDOAAsO6NoAKDEyMDQ0MDBhYjhkYTk4MzBmNmY3N2E1ZTQwZTdhZDNlYTQ1OTY3NmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-24T06:56:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-24T06:56:38Z"}, "message": "Auto merge of #94314 - matthiaskrgr:rollup-hmed8n7, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #89887 (Change `char` type in debuginfo to DW_ATE_UTF)\n - #94267 (Remove unused ordering derivations and bounds for `SimplifiedTypeGen`)\n - #94270 (Miri: relax fn ptr check)\n - #94273 (add matching doc to errorkind)\n - #94283 (remove feature gate in control_flow examples)\n - #94288 (Cleanup a few Decoder methods)\n - #94292 (riscv32imc_esp_espidf: set max_atomic_width to 64)\n - #94296 (:arrow_up: rust-analyzer)\n - #94300 (Fix a typo in documentation of `array::IntoIter::new_unchecked`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2e399109ed98d73c5ec75774e88be80bd5d0251f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e399109ed98d73c5ec75774e88be80bd5d0251f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1204400ab8da9830f6f77a5e40e7ad3ea459676a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1204400ab8da9830f6f77a5e40e7ad3ea459676a", "html_url": "https://github.com/rust-lang/rust/commit/1204400ab8da9830f6f77a5e40e7ad3ea459676a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1204400ab8da9830f6f77a5e40e7ad3ea459676a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e780264e1e5c1efa6ab76c7b17a9677f16add5e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e780264e1e5c1efa6ab76c7b17a9677f16add5e0", "html_url": "https://github.com/rust-lang/rust/commit/e780264e1e5c1efa6ab76c7b17a9677f16add5e0"}, {"sha": "bdcdd1b122e3f8994a143de01fef78e265bace21", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdcdd1b122e3f8994a143de01fef78e265bace21", "html_url": "https://github.com/rust-lang/rust/commit/bdcdd1b122e3f8994a143de01fef78e265bace21"}], "stats": {"total": 246, "additions": 156, "deletions": 90}, "files": [{"sha": "725499e5c78ca0243e58a9e36b344f6dc6393e9d", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1204400ab8da9830f6f77a5e40e7ad3ea459676a/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1204400ab8da9830f6f77a5e40e7ad3ea459676a/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=1204400ab8da9830f6f77a5e40e7ad3ea459676a", "patch": "@@ -2418,8 +2418,7 @@ impl<S: Encoder> rustc_serialize::Encodable<S> for AttrId {\n }\n \n impl<D: Decoder> rustc_serialize::Decodable<D> for AttrId {\n-    fn decode(d: &mut D) -> AttrId {\n-        d.read_unit();\n+    fn decode(_: &mut D) -> AttrId {\n         crate::attr::mk_attr_id()\n     }\n }"}, {"sha": "4ca92b3efe098fc167698b59f2d7c5c0b04128fc", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1204400ab8da9830f6f77a5e40e7ad3ea459676a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1204400ab8da9830f6f77a5e40e7ad3ea459676a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=1204400ab8da9830f6f77a5e40e7ad3ea459676a", "patch": "@@ -87,7 +87,7 @@ const DW_ATE_signed: c_uint = 0x05;\n #[allow(non_upper_case_globals)]\n const DW_ATE_unsigned: c_uint = 0x07;\n #[allow(non_upper_case_globals)]\n-const DW_ATE_unsigned_char: c_uint = 0x08;\n+const DW_ATE_UTF: c_uint = 0x10;\n \n pub const UNKNOWN_LINE_NUMBER: c_uint = 0;\n pub const UNKNOWN_COLUMN_NUMBER: c_uint = 0;\n@@ -933,7 +933,7 @@ fn basic_type_metadata<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -> &'l\n         ty::Never => (\"!\", DW_ATE_unsigned),\n         ty::Tuple(elements) if elements.is_empty() => (\"()\", DW_ATE_unsigned),\n         ty::Bool => (\"bool\", DW_ATE_boolean),\n-        ty::Char => (\"char\", DW_ATE_unsigned_char),\n+        ty::Char => (\"char\", DW_ATE_UTF),\n         ty::Int(int_ty) if cpp_like_debuginfo => (int_ty.msvc_basic_name(), DW_ATE_signed),\n         ty::Uint(uint_ty) if cpp_like_debuginfo => (uint_ty.msvc_basic_name(), DW_ATE_unsigned),\n         ty::Float(float_ty) if cpp_like_debuginfo => (float_ty.msvc_basic_name(), DW_ATE_float),"}, {"sha": "0bf86d52080ead4d4fa31aa63382e54c6bd1ae46", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1204400ab8da9830f6f77a5e40e7ad3ea459676a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1204400ab8da9830f6f77a5e40e7ad3ea459676a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=1204400ab8da9830f6f77a5e40e7ad3ea459676a", "patch": "@@ -567,22 +567,27 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n             }\n             ty::FnPtr(_sig) => {\n                 let value = try_validation!(\n-                    self.ecx.read_immediate(value),\n+                    self.ecx.read_scalar(value).and_then(|v| v.check_init()),\n                     self.path,\n                     err_unsup!(ReadPointerAsBytes) => { \"part of a pointer\" } expected { \"a proper pointer or integer value\" },\n+                    err_ub!(InvalidUninitBytes(None)) => { \"uninitialized bytes\" } expected { \"a proper pointer or integer value\" },\n                 );\n-                // Make sure we print a `ScalarMaybeUninit` (and not an `ImmTy`) in the error\n-                // message below.\n-                let value = value.to_scalar_or_uninit();\n-                let _fn = try_validation!(\n-                    value.check_init().and_then(|ptr| self.ecx.memory.get_fn(self.ecx.scalar_to_ptr(ptr))),\n-                    self.path,\n-                    err_ub!(DanglingIntPointer(..)) |\n-                    err_ub!(InvalidFunctionPointer(..)) |\n-                    err_ub!(InvalidUninitBytes(None)) =>\n-                        { \"{:x}\", value } expected { \"a function pointer\" },\n-                );\n-                // FIXME: Check if the signature matches\n+                let ptr = self.ecx.scalar_to_ptr(value);\n+                // Ensure the pointer is non-null.\n+                if self.ecx.memory.ptr_may_be_null(ptr) {\n+                    throw_validation_failure!(self.path, { \"a potentially null function pointer\" });\n+                }\n+                // If we check references recursively, also check that this points to a function.\n+                if let Some(_) = self.ref_tracking {\n+                    let _fn = try_validation!(\n+                        self.ecx.memory.get_fn(ptr),\n+                        self.path,\n+                        err_ub!(DanglingIntPointer(..)) |\n+                        err_ub!(InvalidFunctionPointer(..)) =>\n+                            { \"{:x}\", value } expected { \"a function pointer\" },\n+                    );\n+                    // FIXME: Check if the signature matches\n+                }\n                 Ok(true)\n             }\n             ty::Never => throw_validation_failure!(self.path, { \"a value of the never type `!`\" }),"}, {"sha": "c88f3e73cff37255d14bbfffaf947d6189f76a09", "filename": "compiler/rustc_data_structures/src/fingerprint.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1204400ab8da9830f6f77a5e40e7ad3ea459676a/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1204400ab8da9830f6f77a5e40e7ad3ea459676a/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs?ref=1204400ab8da9830f6f77a5e40e7ad3ea459676a", "patch": "@@ -153,9 +153,7 @@ impl<E: rustc_serialize::Encoder> Encodable<E> for Fingerprint {\n impl<D: rustc_serialize::Decoder> Decodable<D> for Fingerprint {\n     #[inline]\n     fn decode(d: &mut D) -> Self {\n-        let mut bytes = [0u8; 16];\n-        d.read_raw_bytes_into(&mut bytes);\n-        Fingerprint::from_le_bytes(bytes)\n+        Fingerprint::from_le_bytes(d.read_raw_bytes(16).try_into().unwrap())\n     }\n }\n "}, {"sha": "b715f6c3f1fc97284277bb64c245f3a63151bcae", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1204400ab8da9830f6f77a5e40e7ad3ea459676a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1204400ab8da9830f6f77a5e40e7ad3ea459676a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=1204400ab8da9830f6f77a5e40e7ad3ea459676a", "patch": "@@ -316,7 +316,7 @@ impl<'a, 'tcx> DecodeContext<'a, 'tcx> {\n     }\n \n     #[inline]\n-    pub fn read_raw_bytes(&mut self, len: usize) -> &'a [u8] {\n+    pub fn read_raw_bytes(&mut self, len: usize) -> &[u8] {\n         self.opaque.read_raw_bytes(len)\n     }\n }"}, {"sha": "4fe2cde753290226889e54fc4591db806410d0f7", "filename": "compiler/rustc_middle/src/mir/predecessors.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1204400ab8da9830f6f77a5e40e7ad3ea459676a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1204400ab8da9830f6f77a5e40e7ad3ea459676a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs?ref=1204400ab8da9830f6f77a5e40e7ad3ea459676a", "patch": "@@ -63,8 +63,7 @@ impl<S: serialize::Encoder> serialize::Encodable<S> for PredecessorCache {\n \n impl<D: serialize::Decoder> serialize::Decodable<D> for PredecessorCache {\n     #[inline]\n-    fn decode(d: &mut D) -> Self {\n-        let () = d.read_unit();\n+    fn decode(_: &mut D) -> Self {\n         Self::new()\n     }\n }"}, {"sha": "23fb7a49d9c8e923602a56e5f66a1e504aaf8b92", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1204400ab8da9830f6f77a5e40e7ad3ea459676a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1204400ab8da9830f6f77a5e40e7ad3ea459676a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=1204400ab8da9830f6f77a5e40e7ad3ea459676a", "patch": "@@ -465,8 +465,6 @@ macro_rules! implement_ty_decoder {\n \n             impl<$($typaram ),*> Decoder for $DecoderName<$($typaram),*> {\n                 $crate::__impl_decoder_methods! {\n-                    read_unit -> ();\n-\n                     read_u128 -> u128;\n                     read_u64 -> u64;\n                     read_u32 -> u32;\n@@ -485,12 +483,12 @@ macro_rules! implement_ty_decoder {\n                     read_f64 -> f64;\n                     read_f32 -> f32;\n                     read_char -> char;\n-                    read_str -> Cow<'_, str>;\n+                    read_str -> &str;\n                 }\n \n                 #[inline]\n-                fn read_raw_bytes_into(&mut self, bytes: &mut [u8]) {\n-                    self.opaque.read_raw_bytes_into(bytes)\n+                fn read_raw_bytes(&mut self, len: usize) -> &[u8] {\n+                    self.opaque.read_raw_bytes(len)\n                 }\n             }\n         }"}, {"sha": "3c1ac66e2d136c7287a6130915042c225572315d", "filename": "compiler/rustc_middle/src/ty/fast_reject.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1204400ab8da9830f6f77a5e40e7ad3ea459676a/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1204400ab8da9830f6f77a5e40e7ad3ea459676a/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs?ref=1204400ab8da9830f6f77a5e40e7ad3ea459676a", "patch": "@@ -17,7 +17,7 @@ pub type SimplifiedType = SimplifiedTypeGen<DefId>;\n /// because we sometimes need to use SimplifiedTypeGen values as stable sorting\n /// keys (in which case we use a DefPathHash as id-type) but in the general case\n /// the non-stable but fast to construct DefId-version is the better choice.\n-#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]\n pub enum SimplifiedTypeGen<D>\n where\n     D: Copy + Debug + Eq,\n@@ -124,7 +124,7 @@ pub fn simplify_type(\n     }\n }\n \n-impl<D: Copy + Debug + Ord + Eq> SimplifiedTypeGen<D> {\n+impl<D: Copy + Debug + Eq> SimplifiedTypeGen<D> {\n     pub fn def(self) -> Option<D> {\n         match self {\n             AdtSimplifiedType(d)\n@@ -140,7 +140,7 @@ impl<D: Copy + Debug + Ord + Eq> SimplifiedTypeGen<D> {\n     pub fn map_def<U, F>(self, map: F) -> SimplifiedTypeGen<U>\n     where\n         F: Fn(D) -> U,\n-        U: Copy + Debug + Ord + Eq,\n+        U: Copy + Debug + Eq,\n     {\n         match self {\n             BoolSimplifiedType => BoolSimplifiedType,\n@@ -171,7 +171,7 @@ impl<D: Copy + Debug + Ord + Eq> SimplifiedTypeGen<D> {\n \n impl<'a, D> HashStable<StableHashingContext<'a>> for SimplifiedTypeGen<D>\n where\n-    D: Copy + Debug + Ord + Eq + HashStable<StableHashingContext<'a>>,\n+    D: Copy + Debug + Eq + HashStable<StableHashingContext<'a>>,\n {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         mem::discriminant(self).hash_stable(hcx, hasher);"}, {"sha": "5e5cbacbcff1a47c9551f9c6c76b99116f96b8c7", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1204400ab8da9830f6f77a5e40e7ad3ea459676a/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1204400ab8da9830f6f77a5e40e7ad3ea459676a/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=1204400ab8da9830f6f77a5e40e7ad3ea459676a", "patch": "@@ -1,6 +1,5 @@\n use crate::leb128::{self, max_leb128_len};\n-use crate::serialize::{self, Encoder as _};\n-use std::borrow::Cow;\n+use crate::serialize::{self, Decoder as _, Encoder as _};\n use std::convert::TryInto;\n use std::fs::File;\n use std::io::{self, Write};\n@@ -549,25 +548,13 @@ impl<'a> Decoder<'a> {\n     pub fn advance(&mut self, bytes: usize) {\n         self.position += bytes;\n     }\n-\n-    #[inline]\n-    pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {\n-        let start = self.position;\n-        self.position += bytes;\n-        &self.data[start..self.position]\n-    }\n }\n \n macro_rules! read_leb128 {\n     ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};\n }\n \n impl<'a> serialize::Decoder for Decoder<'a> {\n-    #[inline]\n-    fn read_unit(&mut self) -> () {\n-        ()\n-    }\n-\n     #[inline]\n     fn read_u128(&mut self) -> u128 {\n         read_leb128!(self, read_u128_leb128)\n@@ -663,22 +650,22 @@ impl<'a> serialize::Decoder for Decoder<'a> {\n     }\n \n     #[inline]\n-    fn read_str(&mut self) -> Cow<'_, str> {\n+    fn read_str(&mut self) -> &'a str {\n         let len = self.read_usize();\n         let sentinel = self.data[self.position + len];\n         assert!(sentinel == STR_SENTINEL);\n         let s = unsafe {\n             std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])\n         };\n         self.position += len + 1;\n-        Cow::Borrowed(s)\n+        s\n     }\n \n     #[inline]\n-    fn read_raw_bytes_into(&mut self, s: &mut [u8]) {\n+    fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {\n         let start = self.position;\n-        self.position += s.len();\n-        s.copy_from_slice(&self.data[start..self.position]);\n+        self.position += bytes;\n+        &self.data[start..self.position]\n     }\n }\n \n@@ -746,10 +733,10 @@ impl<'a> serialize::Decodable<Decoder<'a>> for IntEncodedWithFixedSize {\n     fn decode(decoder: &mut Decoder<'a>) -> IntEncodedWithFixedSize {\n         let _start_pos = decoder.position();\n         let bytes = decoder.read_raw_bytes(IntEncodedWithFixedSize::ENCODED_SIZE);\n+        let value = u64::from_le_bytes(bytes.try_into().unwrap());\n         let _end_pos = decoder.position();\n         debug_assert_eq!((_end_pos - _start_pos), IntEncodedWithFixedSize::ENCODED_SIZE);\n \n-        let value = u64::from_le_bytes(bytes.try_into().unwrap());\n         IntEncodedWithFixedSize(value)\n     }\n }"}, {"sha": "42bf6ff2a9852101431f4464874d3bc5443121b7", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1204400ab8da9830f6f77a5e40e7ad3ea459676a/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1204400ab8da9830f6f77a5e40e7ad3ea459676a/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=1204400ab8da9830f6f77a5e40e7ad3ea459676a", "patch": "@@ -181,7 +181,6 @@ pub trait Encoder {\n // concise.\n pub trait Decoder {\n     // Primitive types:\n-    fn read_unit(&mut self) -> ();\n     fn read_usize(&mut self) -> usize;\n     fn read_u128(&mut self) -> u128;\n     fn read_u64(&mut self) -> u64;\n@@ -198,8 +197,8 @@ pub trait Decoder {\n     fn read_f64(&mut self) -> f64;\n     fn read_f32(&mut self) -> f32;\n     fn read_char(&mut self) -> char;\n-    fn read_str(&mut self) -> Cow<'_, str>;\n-    fn read_raw_bytes_into(&mut self, s: &mut [u8]);\n+    fn read_str(&mut self) -> &str;\n+    fn read_raw_bytes(&mut self, len: usize) -> &[u8];\n }\n \n /// Trait for types that can be serialized\n@@ -313,7 +312,7 @@ impl<S: Encoder> Encodable<S> for String {\n \n impl<D: Decoder> Decodable<D> for String {\n     fn decode(d: &mut D) -> String {\n-        d.read_str().into_owned()\n+        d.read_str().to_owned()\n     }\n }\n \n@@ -324,9 +323,7 @@ impl<S: Encoder> Encodable<S> for () {\n }\n \n impl<D: Decoder> Decodable<D> for () {\n-    fn decode(d: &mut D) -> () {\n-        d.read_unit()\n-    }\n+    fn decode(_: &mut D) -> () {}\n }\n \n impl<S: Encoder, T> Encodable<S> for PhantomData<T> {\n@@ -336,8 +333,7 @@ impl<S: Encoder, T> Encodable<S> for PhantomData<T> {\n }\n \n impl<D: Decoder, T> Decodable<D> for PhantomData<T> {\n-    fn decode(d: &mut D) -> PhantomData<T> {\n-        d.read_unit();\n+    fn decode(_: &mut D) -> PhantomData<T> {\n         PhantomData\n     }\n }"}, {"sha": "d506e7f6aacbcdf80ea85de35f7ad502601fe7df", "filename": "compiler/rustc_target/src/spec/riscv32imc_esp_espidf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1204400ab8da9830f6f77a5e40e7ad3ea459676a/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_esp_espidf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1204400ab8da9830f6f77a5e40e7ad3ea459676a/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_esp_espidf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_esp_espidf.rs?ref=1204400ab8da9830f6f77a5e40e7ad3ea459676a", "patch": "@@ -18,11 +18,11 @@ pub fn target() -> Target {\n             cpu: \"generic-rv32\".to_string(),\n \n             // While the RiscV32IMC architecture does not natively support atomics, ESP-IDF does support\n-            // the __atomic* and __sync* GCC builtins, so setting `max_atomic_width` to `Some(32)`\n+            // the __atomic* and __sync* GCC builtins, so setting `max_atomic_width` to `Some(64)`\n             // and `atomic_cas` to `true` will cause the compiler to emit libcalls to these builtins.\n             //\n             // Support for atomics is necessary for the Rust STD library, which is supported by the ESP-IDF framework.\n-            max_atomic_width: Some(32),\n+            max_atomic_width: Some(64),\n             atomic_cas: true,\n \n             features: \"+m,+c\".to_string(),"}, {"sha": "e5024c215be9c77829704be7b4675b05254a7b05", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1204400ab8da9830f6f77a5e40e7ad3ea459676a/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1204400ab8da9830f6f77a5e40e7ad3ea459676a/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=1204400ab8da9830f6f77a5e40e7ad3ea459676a", "patch": "@@ -93,7 +93,7 @@ impl<T, const N: usize> IntoIter<T, N> {\n     ///\n     /// - The `buffer[initialized]` elements must all be initialized.\n     /// - The range must be canonical, with `initialized.start <= initialized.end`.\n-    /// - The range must in in-bounds for the buffer, with `initialized.end <= N`.\n+    /// - The range must be in-bounds for the buffer, with `initialized.end <= N`.\n     ///   (Like how indexing `[0][100..100]` fails despite the range being empty.)\n     ///\n     /// It's sound to have more elements initialized than mentioned, though that"}, {"sha": "e34e26746c0a508b0bc55ff30f64f37f98104330", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1204400ab8da9830f6f77a5e40e7ad3ea459676a/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1204400ab8da9830f6f77a5e40e7ad3ea459676a/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=1204400ab8da9830f6f77a5e40e7ad3ea459676a", "patch": "@@ -134,7 +134,6 @@ impl<B, C> ControlFlow<B, C> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(control_flow_enum)]\n     /// use std::ops::ControlFlow;\n     ///\n     /// assert!(ControlFlow::<i32, String>::Break(3).is_break());\n@@ -151,7 +150,6 @@ impl<B, C> ControlFlow<B, C> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(control_flow_enum)]\n     /// use std::ops::ControlFlow;\n     ///\n     /// assert!(!ControlFlow::<i32, String>::Break(3).is_continue());"}, {"sha": "17e2b97545a94d43878659b6a972ebbb95452267", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1204400ab8da9830f6f77a5e40e7ad3ea459676a/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1204400ab8da9830f6f77a5e40e7ad3ea459676a/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=1204400ab8da9830f6f77a5e40e7ad3ea459676a", "patch": "@@ -141,6 +141,19 @@ struct Custom {\n /// It is used with the [`io::Error`] type.\n ///\n /// [`io::Error`]: Error\n+///\n+/// # Handling errors and matching on `ErrorKind`\n+///\n+/// In application code, use `match` for the `ErrorKind` values you are\n+/// expecting; use `_` to match \"all other errors\".\n+///\n+/// In comprehensive and thorough tests that want to verify that a test doesn't\n+/// return any known incorrect error kind, you may want to cut-and-paste the\n+/// current full list of errors from here into your test code, and then match\n+/// `_` as the correct case. This seems counterintuitive, but it will make your\n+/// tests more robust. In particular, if you want to verify that your code does\n+/// produce an unrecognized error kind, the robust solution is to check for all\n+/// the recognized error kinds and fail in those cases.\n #[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated)]"}, {"sha": "07d33be2a071f29904ce79662fcf49e740769dd3", "filename": "src/test/debuginfo/basic-types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1204400ab8da9830f6f77a5e40e7ad3ea459676a/src%2Ftest%2Fdebuginfo%2Fbasic-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1204400ab8da9830f6f77a5e40e7ad3ea459676a/src%2Ftest%2Fdebuginfo%2Fbasic-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types.rs?ref=1204400ab8da9830f6f77a5e40e7ad3ea459676a", "patch": "@@ -104,7 +104,8 @@\n // cdb-check:b                : false [Type: bool]\n // cdb-command:dx i\n // cdb-check:i                : -1 [Type: [...]]\n-// The variable 'c' doesn't appear for some reason...\n+// cdb-command:dx c\n+// cdb-check:c                : 0x61 'a' [Type: char32_t]\n // cdb-command:dx i8\n // cdb-check:i8               : 68 [Type: char]\n // cdb-command:dx i16"}, {"sha": "b4bb7c146d9df20acde2dcf6fd463823d8d0b046", "filename": "src/test/debuginfo/borrowed-basic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1204400ab8da9830f6f77a5e40e7ad3ea459676a/src%2Ftest%2Fdebuginfo%2Fborrowed-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1204400ab8da9830f6f77a5e40e7ad3ea459676a/src%2Ftest%2Fdebuginfo%2Fborrowed-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-basic.rs?ref=1204400ab8da9830f6f77a5e40e7ad3ea459676a", "patch": "@@ -14,8 +14,7 @@\n // gdb-check:$2 = -1\n \n // gdb-command:print *char_ref\n-// gdbg-check:$3 = 97\n-// gdbr-check:$3 = 97 'a'\n+// gdb-check:$3 = 97\n \n // gdb-command:print *i8_ref\n // gdbg-check:$4 = 68 'D'"}, {"sha": "f38cbc10dd3acf8ca94194cf9a0d62c8cf4d4a6f", "filename": "src/test/debuginfo/borrowed-unique-basic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1204400ab8da9830f6f77a5e40e7ad3ea459676a/src%2Ftest%2Fdebuginfo%2Fborrowed-unique-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1204400ab8da9830f6f77a5e40e7ad3ea459676a/src%2Ftest%2Fdebuginfo%2Fborrowed-unique-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-unique-basic.rs?ref=1204400ab8da9830f6f77a5e40e7ad3ea459676a", "patch": "@@ -16,8 +16,7 @@\n // gdb-check:$2 = -1\n \n // gdb-command:print *char_ref\n-// gdbg-check:$3 = 97\n-// gdbr-check:$3 = 97 'a'\n+// gdb-check:$3 = 97\n \n // gdb-command:print/d *i8_ref\n // gdb-check:$4 = 68"}, {"sha": "bf4e2926d51c02d4723d970fef9d9a7cf1a404d6", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.32bit.stderr", "status": "modified", "additions": 42, "deletions": 9, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1204400ab8da9830f6f77a5e40e7ad3ea459676a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1204400ab8da9830f6f77a5e40e7ad3ea459676a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr?ref=1204400ab8da9830f6f77a5e40e7ad3ea459676a", "patch": "@@ -43,7 +43,7 @@ LL | const NULL_BOX: Box<u16> = unsafe { mem::transmute(0usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:30:1\n+  --> $DIR/ub-ref-ptr.rs:31:1\n    |\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc15, but expected initialized plain (non-pointer) bytes\n@@ -54,7 +54,7 @@ LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:33:1\n+  --> $DIR/ub-ref-ptr.rs:34:1\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .<deref>: encountered a pointer, but expected plain (non-pointer) bytes\n@@ -65,7 +65,7 @@ LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:36:1\n+  --> $DIR/ub-ref-ptr.rs:37:1\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .<deref>: encountered a pointer, but expected plain (non-pointer) bytes\n@@ -76,7 +76,7 @@ LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[us\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:39:1\n+  --> $DIR/ub-ref-ptr.rs:40:1\n    |\n LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (address 0x539 is unallocated)\n@@ -87,7 +87,7 @@ LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:42:1\n+  --> $DIR/ub-ref-ptr.rs:43:1\n    |\n LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling box (address 0x539 is unallocated)\n@@ -98,7 +98,7 @@ LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:45:1\n+  --> $DIR/ub-ref-ptr.rs:46:1\n    |\n LL | const UNINIT_PTR: *const i32 = unsafe { MaybeUninit { uninit: () }.init };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized raw pointer\n@@ -109,16 +109,49 @@ LL | const UNINIT_PTR: *const i32 = unsafe { MaybeUninit { uninit: () }.init };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:47:1\n+  --> $DIR/ub-ref-ptr.rs:49:1\n+   |\n+LL | const NULL_FN_PTR: fn() = unsafe { mem::transmute(0usize) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a potentially null function pointer\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 4, align: 4) {\n+               00 00 00 00                                     \u2502 ....\n+           }\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-ref-ptr.rs:51:1\n    |\n LL | const UNINIT_FN_PTR: fn() = unsafe { MaybeUninit { uninit: () }.init };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected a function pointer\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected a proper pointer or integer value\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n                __ __ __ __                                     \u2502 \u2591\u2591\u2591\u2591\n            }\n \n-error: aborting due to 11 previous errors\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-ref-ptr.rs:53:1\n+   |\n+LL | const DANGLING_FN_PTR: fn() = unsafe { mem::transmute(13usize) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x0000000d, but expected a function pointer\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 4, align: 4) {\n+               0d 00 00 00                                     \u2502 ....\n+           }\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-ref-ptr.rs:55:1\n+   |\n+LL | const DATA_FN_PTR: fn() = unsafe { mem::transmute(&13) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc41, but expected a function pointer\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 4, align: 4) {\n+               \u257e\u2500alloc41\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n+           }\n+\n+error: aborting due to 14 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "ef25e279a0671b02fe643fdbb90c9ce1501c833a", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.64bit.stderr", "status": "modified", "additions": 42, "deletions": 9, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1204400ab8da9830f6f77a5e40e7ad3ea459676a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1204400ab8da9830f6f77a5e40e7ad3ea459676a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr?ref=1204400ab8da9830f6f77a5e40e7ad3ea459676a", "patch": "@@ -43,7 +43,7 @@ LL | const NULL_BOX: Box<u16> = unsafe { mem::transmute(0usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:30:1\n+  --> $DIR/ub-ref-ptr.rs:31:1\n    |\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc15, but expected initialized plain (non-pointer) bytes\n@@ -54,7 +54,7 @@ LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:33:1\n+  --> $DIR/ub-ref-ptr.rs:34:1\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .<deref>: encountered a pointer, but expected plain (non-pointer) bytes\n@@ -65,7 +65,7 @@ LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:36:1\n+  --> $DIR/ub-ref-ptr.rs:37:1\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .<deref>: encountered a pointer, but expected plain (non-pointer) bytes\n@@ -76,7 +76,7 @@ LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[us\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:39:1\n+  --> $DIR/ub-ref-ptr.rs:40:1\n    |\n LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (address 0x539 is unallocated)\n@@ -87,7 +87,7 @@ LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:42:1\n+  --> $DIR/ub-ref-ptr.rs:43:1\n    |\n LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling box (address 0x539 is unallocated)\n@@ -98,7 +98,7 @@ LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:45:1\n+  --> $DIR/ub-ref-ptr.rs:46:1\n    |\n LL | const UNINIT_PTR: *const i32 = unsafe { MaybeUninit { uninit: () }.init };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized raw pointer\n@@ -109,16 +109,49 @@ LL | const UNINIT_PTR: *const i32 = unsafe { MaybeUninit { uninit: () }.init };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:47:1\n+  --> $DIR/ub-ref-ptr.rs:49:1\n+   |\n+LL | const NULL_FN_PTR: fn() = unsafe { mem::transmute(0usize) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a potentially null function pointer\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 8, align: 8) {\n+               00 00 00 00 00 00 00 00                         \u2502 ........\n+           }\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-ref-ptr.rs:51:1\n    |\n LL | const UNINIT_FN_PTR: fn() = unsafe { MaybeUninit { uninit: () }.init };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected a function pointer\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected a proper pointer or integer value\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n                __ __ __ __ __ __ __ __                         \u2502 \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n            }\n \n-error: aborting due to 11 previous errors\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-ref-ptr.rs:53:1\n+   |\n+LL | const DANGLING_FN_PTR: fn() = unsafe { mem::transmute(13usize) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x000000000000000d, but expected a function pointer\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 8, align: 8) {\n+               0d 00 00 00 00 00 00 00                         \u2502 ........\n+           }\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-ref-ptr.rs:55:1\n+   |\n+LL | const DATA_FN_PTR: fn() = unsafe { mem::transmute(&13) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc41, but expected a function pointer\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 8, align: 8) {\n+               \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc41\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+           }\n+\n+error: aborting due to 14 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "1887cb24bf46765801f048209633235388a4de6f", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1204400ab8da9830f6f77a5e40e7ad3ea459676a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1204400ab8da9830f6f77a5e40e7ad3ea459676a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.rs?ref=1204400ab8da9830f6f77a5e40e7ad3ea459676a", "patch": "@@ -24,6 +24,7 @@ const NULL: &u16 = unsafe { mem::transmute(0usize) };\n const NULL_BOX: Box<u16> = unsafe { mem::transmute(0usize) };\n //~^ ERROR it is undefined behavior to use this value\n \n+\n // It is very important that we reject this: We do promote `&(4 * REF_AS_USIZE)`,\n // but that would fail to compile; so we ended up breaking user code that would\n // have worked fine had we not promoted.\n@@ -44,7 +45,14 @@ const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n \n const UNINIT_PTR: *const i32 = unsafe { MaybeUninit { uninit: () }.init };\n //~^ ERROR it is undefined behavior to use this value\n+\n+const NULL_FN_PTR: fn() = unsafe { mem::transmute(0usize) };\n+//~^ ERROR it is undefined behavior to use this value\n const UNINIT_FN_PTR: fn() = unsafe { MaybeUninit { uninit: () }.init };\n //~^ ERROR it is undefined behavior to use this value\n+const DANGLING_FN_PTR: fn() = unsafe { mem::transmute(13usize) };\n+//~^ ERROR it is undefined behavior to use this value\n+const DATA_FN_PTR: fn() = unsafe { mem::transmute(&13) };\n+//~^ ERROR it is undefined behavior to use this value\n \n fn main() {}"}, {"sha": "d6ed146a1caa41c65a831efbc80d79067c8f5955", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=1204400ab8da9830f6f77a5e40e7ad3ea459676a", "patch": "@@ -1 +1 @@\n-Subproject commit 02904e99acc3daf39b56ed18aa07e62aeb9492c5\n+Subproject commit d6ed146a1caa41c65a831efbc80d79067c8f5955"}]}